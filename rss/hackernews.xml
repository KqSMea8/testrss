<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Postgres 11 – a First Look</title>
<link>http://www.craigkerstiens.com/2018/09/20/postgresql-11-a-first-look/</link>
<guid isPermaLink="true" >http://www.craigkerstiens.com/2018/09/20/postgresql-11-a-first-look/</guid>
<description>&lt;p&gt;Postgres 11 is almost here, in fact the latest beta shipped today, and it features a lot of exciting improvements. If you want to get the full list of features it is definitely worth checking out the &lt;a href=&quot;https://www.postgresql.org/docs/11/static/release-11.html&quot;&gt;release notes&lt;/a&gt;, but for those who don’t read the release notes I put together a run down of some what I consider the highlight features.&lt;/p&gt;
&lt;h2&gt;Quitting Postgres&lt;/h2&gt;
&lt;p&gt;This is a small usability feature, but so long over due. Now you can quit Postgres by simply typing &lt;code&gt;quit&lt;/code&gt; or &lt;code&gt;exit&lt;/code&gt;. Previously you had to use Ctrl + D or &lt;code&gt;\q&lt;/code&gt;. As a begginer it’s one thing to jump into a psql terminal, but once in if you can’t figure out how to quit it’s a frustrating experience. Small usability features, such as this and &lt;code&gt;watch&lt;/code&gt; in an earlier release, are often lost in the highlighted features which talk about performance or new data types. Improvements like this really go a long way for making Postgres a better database for everyone.&lt;/p&gt;
&lt;h2&gt;Fear column addition no more&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://brandur.org/postgres-default&quot;&gt;Brandur&lt;/a&gt; had a great in depth write-up on this feature already, but it falls somewhere into the category of the above as well as a performance improvement. Previously when you added a new column that was &lt;code&gt;NOT NULL&lt;/code&gt; with a default value Postgres would have to take a lock and re-write the entire table. In a production environment on any sizable table for all practical purposes the result was an outage. The work around was to break your migrations apart to be a several &lt;a href=&quot;https://blog.codeship.com/rails-migrations-zero-downtime/&quot;&gt;step process&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With Postgres 11 you can add a new column to a table that is not null with a default value. The new row will get materialized on your database without requiring a full re-write. Here is to having to think less about your migrations.&lt;/p&gt;
&lt;h2&gt;Of course performance is a highlight&lt;/h2&gt;
&lt;p&gt;No Postgres release would be complete without some performance improvements. This release there are really two areas that feature key improvements around performance.&lt;/p&gt;
&lt;h3&gt;Parallelism continuing to mature&lt;/h3&gt;
&lt;p&gt;We first saw parallelism support back in PostgreSQL 9.6. At the time it was primarily for sequential scans, which if you used parallelism for your sequential scans was great, but overall that was a narrow focus. PostgreSQL 10 parallelism because much more useful, and with PostgreSQL 11 it just keeps getting better. Some of the highlights for parallelism include:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Parallel hash joins&lt;/li&gt;
&lt;li&gt;Parallel append&lt;/li&gt;
&lt;li&gt;Parallel index creation – &lt;em&gt;We’ve talked about how great this can be over on the &lt;a href=&quot;https://www.citusdata.com/blog/2017/01/17/parallel-indexing-with-citus/&quot;&gt;Citus blog&lt;/a&gt;. With it natively in Postgres it makes it even easier for people to leverage.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you want to dig deeper into all the parallelism support in Postgres &lt;a href=&quot;https://speakerdeck.com/macdice/parallelism-in-postgresql-11&quot;&gt;this presentation&lt;/a&gt; by PostgreSQL committer Thomas Munro at &lt;a href=&quot;https://2018.postgresopen.org/&quot;&gt;PostgresOpen Silicon Valley&lt;/a&gt; from a few weeks ago is a great resource.&lt;/p&gt;
&lt;h3&gt;Postgres gets a JIT&lt;/h3&gt;
&lt;p&gt;Just in time compilation is going to be a big deal for Postgres for the coming years. We have the initial support for it now in PostgreSQL 11. Even in this initial implementation of JIT support you can see a nearly 30% speedup on certain queries, such as highlighted here by the &lt;a href=&quot;https://www.citusdata.com/blog/2018/09/11/postgresql-11-just-in-time/&quot;&gt;TPC-H benchmark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is still early days for the just in time query compilation support, so expect the improvements here to be even better in PostgreSQL 12 and 13.&lt;/p&gt;
&lt;h2&gt;Statistics keep getting better&lt;/h2&gt;
&lt;p&gt;In Postgres 10 we saw a feature that few have probably used &lt;a href=&quot;https://www.citusdata.com/blog/2018/03/06/postgres-planner-and-its-usage-of-statistics/&quot;&gt;&lt;code&gt;CREATE STATISTICS&lt;/code&gt;&lt;/a&gt;. You see under the covers Postgres keeps a lot of information about your database which it uses to determine the query plan it will use when executing a query. Most statistics were single column ones previously, now with &lt;code&gt;CREATE STATISTICS&lt;/code&gt; you could define a correlation between two separate columns. With Postgres 11 now you can create statistics based on expression indexes giving you even more cases where they can help the performance of your app.&lt;/p&gt;
&lt;h2&gt;Keeping standbys warm&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pg_prewarm&lt;/code&gt; has been great for warming up a replica’s cache so that should you have a failover you’re not failing over to a cold cache. However up until PostgreSQL 11 you’d have to manually run it yourself or setup some scheduler such as &lt;a href=&quot;https://www.citusdata.com/blog/2016/09/09/pgcron-run-periodic-jobs-in-postgres/&quot;&gt;pg_cron&lt;/a&gt;, now you can configure &lt;code&gt;pg_prewarm&lt;/code&gt; to run all on it’s own at a regular interval.&lt;/p&gt;
&lt;h2&gt;And more&lt;/h2&gt;
&lt;p&gt;PostgreSQL 11 is packed with more features than I’ve seen in a release before, though I think I’ve also said that before. It will be exciting to see several of these features such as the JIT support, statistics, and others as it is still in the early days for them. Meanwhile we have a great set of new features to improve user experience as well as help performance with parallelism. If you’re curious to get your hands on these give the &lt;a href=&quot;https://www.postgresql.org/about/news/1890/&quot;&gt;beta&lt;/a&gt; a try and send your feedback to the PostgreSQL community.&lt;/p&gt;
</description>
<pubDate>Fri, 21 Sep 2018 23:28:47 +0000</pubDate>
<dc:creator>samaysharma</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.craigkerstiens.com/2018/09/20/postgresql-11-a-first-look/</dc:identifier>
</item>
<item>
<title>Functional core, imperative shell (2012)</title>
<link>https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell</link>
<guid isPermaLink="true" >https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell</guid>
<description>&lt;p&gt;Purely functional code makes some things easier to understand: because values don't change, you can call functions and know that only their return value matters—they don't change anything outside themselves. But this makes many real-world applications difficult: how do you write to a database, or to the screen?&lt;/p&gt;&lt;p&gt;In this screencast we look at one method for crossing this divide. We review a Twitter client whose core is functional: managing tweets, syncing timelines to incoming Twitter API data, remembering cursor positions within the tweet list, and rendering tweets to text for display. This functional core is surrounded by a shell of imperative code: it manipulates stdin, stdout, the database, and the network, all based on values produced by the functional core.&lt;/p&gt;&lt;p&gt;This design has many nice side effects. For example, testing the functional pieces is very easy, and it often naturally allows isolated testing with no test doubles. It also leads to an imperative shell with few conditionals, making reasoning about the program's state over time much easier.&lt;/p&gt;
&lt;p class=&quot;metadata&quot;&gt;Functional Core, Imperative Shell was published on 2012-07-12. It uses Ruby 1.9.3 and Vim 7.3.&lt;/p&gt;
</description>
<pubDate>Fri, 21 Sep 2018 22:14:01 +0000</pubDate>
<dc:creator>fagnerbrack</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell</dc:identifier>
</item>
<item>
<title>Google Suppresses Memo Revealing Plans to Closely Track Search Users in China</title>
<link>https://theintercept.com/2018/09/21/google-suppresses-memo-revealing-plans-to-closely-track-search-users-in-china/</link>
<guid isPermaLink="true" >https://theintercept.com/2018/09/21/google-suppresses-memo-revealing-plans-to-closely-track-search-users-in-china/</guid>
<description>&lt;p&gt;&lt;u&gt;Google bosses have&lt;/u&gt; forced employees to delete a confidential memo circulating inside the company that revealed explosive details about a plan to launch a censored search engine in China, The Intercept has learned.&lt;/p&gt;
&lt;p&gt;The memo, authored by a Google engineer who was asked to work on the project, disclosed that the search system, codenamed Dragonfly, would require users to log in to perform searches, track their location — and share the resulting history with a Chinese partner who would have “unilateral access” to the data.&lt;/p&gt;
&lt;p&gt;The memo was shared earlier this month among a group of Google employees who have been organizing internal protests over the censored search system, which has been designed to remove content that China’s authoritarian Communist Party regime views as sensitive, such as information about democracy, human rights, and peaceful protest.&lt;/p&gt;
&lt;p&gt;According to three sources familiar with the incident, Google leadership discovered the memo and were furious that secret details about the China censorship were being passed between employees who were not supposed to have any knowledge about it. Subsequently, Google human resources personnel emailed employees who were believed to have accessed or saved copies of the memo and ordered them to immediately delete it from their computers. Emails demanding deletion of the memo contained “pixel trackers” that notified human resource managers when their messages had been read, recipients determined.&lt;/p&gt;
&lt;p&gt;The Dragonfly memo reveals that a prototype of the censored search engine was being developed as an app for both Android and iOS devices, and would force users to sign in so they could use the service. The memo confirms, as The Intercept &lt;a href=&quot;https://theintercept.com/2018/09/14/google-china-prototype-links-searches-to-phone-numbers/&quot;&gt;first reported&lt;/a&gt; last week, that users’ searches would be associated with their personal phone number. The memo adds that Chinese users’ movements would also be stored, along with the IP address of their device and links they clicked on. It accuses developers working on the project of creating “spying tools” for the Chinese government to monitor its citizens.&lt;/p&gt;
&lt;p&gt;People’s search histories, location information, and other private data would be sent out of China to a database in Taiwan, the memo states. But the data would also be provided to employees of a Chinese company who would be granted “unilateral access” to the system.&lt;/p&gt;
&lt;p&gt;To launch the censored search engine, Google set up a “joint venture” partnership with an unnamed Chinese company. The search engine will “blacklist sensitive queries” so that “no results will be shown” at all when people enter certain words or phrases, according to documents &lt;a href=&quot;https://theintercept.com/2018/08/08/google-censorship-china-blacklist/&quot;&gt;seen by The Intercept&lt;/a&gt;. Blacklisted search terms on a prototype of the search engine include “human rights,” “student protest,” and “Nobel Prize” in Mandarin, &lt;a href=&quot;https://theintercept.com/2018/09/14/google-china-prototype-links-searches-to-phone-numbers/&quot;&gt;said&lt;/a&gt; sources familiar with the project.&lt;/p&gt;
&lt;p&gt;According to the memo, aside from being able to access users’ search data, the Chinese partner company could add to the censorship blacklists: It would be able to “selectively edit search result pages … unilaterally, and with few controls seemingly in place.”&lt;/p&gt;
&lt;p&gt;That a Chinese company would maintain a copy of users’ search data means that, by extension, the data would be accessible to Chinese authorities, who have broad powers to obtain information that is held or processed on the country’s mainland. A central concern human rights groups &lt;a href=&quot;https://theintercept.com/2018/08/28/google-china-censorship-plan-human-rights/&quot;&gt;have expressed&lt;/a&gt; about Dragonfly is that it could place users at risk of Chinese government surveillance — and any person in China searching for blacklisted words or phrases could find themselves interrogated or detained. Chinese authorities are well-known for routinely targeting critics, activists, and journalists.&lt;/p&gt;
&lt;p&gt;“It’s alarming to hear that such information will be stored and, potentially, easily shared with the Chinese authorities,” said Patrick Poon, a Hong Kong-based researcher with the human rights group Amnesty International. “It will completely put users’ privacy and safety at risk. Google needs to immediately explain if the app will involve such arrangements. It’s time to give the public full transparency of the project.”&lt;/p&gt;
&lt;p&gt;&lt;u&gt;On August 16,&lt;/u&gt; two weeks after The Intercept &lt;a href=&quot;https://theintercept.com/2018/08/01/google-china-search-engine-censorship/&quot;&gt;revealed&lt;/a&gt; the Dragonfly plan, Google CEO &lt;a href=&quot;https://theintercept.com/2018/08/17/internal-meeting-reveals-how-google-bosses-misled-staff-on-their-china-censorship-plan-here-are-the-questions-they-must-answer/&quot;&gt;Sundar Pichai&lt;/a&gt; told the company’s employees that the China plan was in its “early stages” and “exploratory.” However, employees working on the censored search engine were instructed in late July, days before the project was publicly exposed, that they should prepare to get it into a “launch-ready state” to roll out within weeks, pending approval from officials in Beijing.&lt;/p&gt;
&lt;blockquote class=&quot;stylized pull-right&quot; data-shortcode-type=&quot;pullquote&quot; data-pull=&quot;right&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;“It will completely put users’ privacy and safety at risk.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The memo raises new questions about Pichai’s claim that the project was not well-developed. Information stored on the company’s internal networks about Dragonfly “paints a very different picture,” it says. “The statement from our high-level leadership that Dragonfly is just an experiment seems wrong.”&lt;/p&gt;
&lt;p&gt;The memo identifies at least 215 employees who appear to have been tasked with working full-time on Dragonfly, a number it says is “larger than many Google projects.” It says that source code associated with the project dates back to May 2017, and “many infrastructure parts predate” that. Moreover, screenshots of the app “show a project in a pretty advanced state,” the memo declares.&lt;/p&gt;
&lt;p&gt;Most of the details about the project “have been secret from the start,” the memo says, adding that “after the existence of Dragonfly leaked, engineers working on the project were also quick to hide all of their code.”&lt;/p&gt;
&lt;p&gt;The author of the memo said in the document that they were opposed to the China censorship. However, they added, “more than the project itself, I hate the culture of secrecy that has been built around it.”&lt;/p&gt;
&lt;p&gt;The memo was first posted September 5 on an internal messaging list set up for Google employees to raise ethical concerns. But the memo was soon scrubbed from the list and individuals who had opened or saved the document were contacted by Google’s human resources department to discuss the matter. The employees were instructed not to share the memo.&lt;/p&gt;
&lt;p&gt;Google reportedly &lt;a href=&quot;https://www.businessinsider.com/google-has-internal-website-for-employees-to-report-whistleblowers-2016-6&quot;&gt;maintains&lt;/a&gt; an &lt;a href=&quot;https://arstechnica.com/tech-policy/2016/12/anonymous-googler-files-suit-against-his-employer-over-secrecy-policies/&quot;&gt;aggressive&lt;/a&gt; security and investigation team known as “stopleaks,” which is dedicated to preventing unauthorized disclosures. The team is also said to monitor internal discussions.&lt;/p&gt;
&lt;blockquote class=&quot;stylized pull-left&quot; data-shortcode-type=&quot;pullquote&quot; data-pull=&quot;left&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;“More than the project itself, I hate the culture of secrecy that has been built around it.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Internal security efforts at Google have ramped up this year as employees have raised ethical concerns around a range of new company projects. Following the revelation by &lt;a href=&quot;https://gizmodo.com/google-is-helping-the-pentagon-build-ai-for-drones-1823464533&quot;&gt;Gizmodo&lt;/a&gt; and &lt;a href=&quot;https://theintercept.com/2018/03/06/google-is-quietly-providing-ai-technology-for-drone-strike-targeting-project/&quot;&gt;The Intercept&lt;/a&gt; that Google had quietly begun work on a contract with the military last year, known as Project Maven, to develop automated image recognition systems for drone warfare, the communications team moved swiftly to monitor employee activity.&lt;/p&gt;
&lt;p&gt;The “stopleaks” team, which coordinates with the internal Google communications department, even began monitoring an internal image board used to post messages based on internet memes, according to one former Google employee, for signs of employee sentiment around the Project Maven contract.&lt;/p&gt;
</description>
<pubDate>Fri, 21 Sep 2018 17:45:12 +0000</pubDate>
<dc:creator>halestock</dc:creator>
<og:url>https://theintercept.com/2018/09/21/google-suppresses-memo-revealing-plans-to-closely-track-search-users-in-china/</og:url>
<og:description>The company forced employees to delete the document, which stated that a Chinese partner would have “unilateral access” to user data.</og:description>
<og:image>https://theintercept.imgix.net/wp-uploads/sites/1/2018/09/google-dragonfly-02-15-1537547812.jpg?auto=compress%2Cformat&amp;q=90&amp;fit=crop&amp;w=1200&amp;h=800</og:image>
<og:type>article</og:type>
<og:title>Google Suppresses Memo Revealing Plans to Closely Track Search Users in China</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://theintercept.com/2018/09/21/google-suppresses-memo-revealing-plans-to-closely-track-search-users-in-china/</dc:identifier>
</item>
<item>
<title>Freezing your credit is now free in all states under a new law</title>
<link>https://www.usatoday.com/story/money/2018/09/21/equifax-free-credit-freeze-new-law/1377815002/</link>
<guid isPermaLink="true" >https://www.usatoday.com/story/money/2018/09/21/equifax-free-credit-freeze-new-law/1377815002/</guid>
<description>&lt;div id=&quot;module-position-RMkh-FvX-6A&quot;&gt;&lt;p&gt;&lt;span class=&quot;asset-metabar-author asset-metabar-item&quot;&gt;Janna Herron and Adam Shell, USA TODAY&lt;/span&gt; &lt;span class=&quot;asset-metabar-time asset-metabar-item nobyline&quot;&gt;Published 10:37 a.m. ET Sept. 21, 2018 | &lt;span class=&quot;asset-metabar-time-updated&quot;&gt;Updated 6:00 p.m. ET Sept. 21, 2018&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div role=&quot;main&quot; itemprop=&quot;mainEntity articleBody&quot; readability=&quot;73.251774056202&quot;&gt;
&lt;div id=&quot;module-position-RMkh-IoiNec&quot; class=&quot;story-asset video-asset&quot;&gt;
&lt;div class=&quot;ui-video-wrapper&quot; itemprop=&quot;video&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;7.5&quot;&gt;

&lt;div class=&quot;js-ui-video-init ui-pluto-video js-video-aps js-uw-iframe-video uw-iframe-video story-video inline-story-video priority smallarticleattophtml5&quot; data-video-id=&quot;1216171002&quot; data-snow-enabled=&quot;true&quot;&gt;
&lt;div class=&quot;js-ptb pluto-title-bar&quot;&gt;

&lt;div class=&quot;js-ptb-close pluto-title-bar-vcenter pluto-title-bar-close&quot;&gt;
&lt;div&gt;CLOSE&lt;img class=&quot;pluto-title-bar-close-icon&quot; src=&quot;https://www.gannett-cdn.com/uxstatic/usatoday/usat-web-static-3945.0/images/sprites/icon_close.png&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ui-video-controls story-video inline-story-video priority&quot; readability=&quot;35&quot;&gt;
&lt;p class=&quot;video-desc&quot; itemprop=&quot;description&quot;&gt;To prevent criminals from opening bank, utility and phone accounts in your name, you need more than a credit freeze. Here's what to do. &lt;span class=&quot;credit&quot;&gt;USA TODAY&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;module-position-RMkh-IpS5WI&quot; class=&quot;story-asset story-metadata-asset&quot;&gt;
&lt;div class=&quot;article-metadata-wrap&quot;&gt;
&lt;section id=&quot;module-position-RMkh-F1UGDc&quot; class=&quot;storymetadata-bucket expandable-photo-module story-expandable-photo-module&quot; readability=&quot;2&quot;&gt;&lt;aside itemprop=&quot;associatedMedia&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot; class=&quot;single-photo expandable-collapsed&quot; readability=&quot;4&quot;&gt;&lt;div class=&quot;image-wrap&quot;&gt;&lt;img class=&quot;expand-img-horiz&quot; itemprop=&quot;url&quot; src=&quot;https://www.gannett-cdn.com/presto/2018/08/20/USAT/0263d07c-dd24-4ecc-ad30-e3bee75ba585-GettyImages-635671076.jpg?width=534&amp;amp;height=401&amp;amp;fit=bounds&amp;amp;auto=webp&quot; alt=&quot;Credit Card With Icicles Illustrates A Credit Freeze&quot; data-mycapture-src=&quot;https://www.gannett-cdn.com/presto/2018/08/20/USAT/0263d07c-dd24-4ecc-ad30-e3bee75ba585-GettyImages-635671076.jpg&quot; data-mycapture-sm-src=&quot;https://www.gannett-cdn.com/presto/2018/08/20/USAT/0263d07c-dd24-4ecc-ad30-e3bee75ba585-GettyImages-635671076.jpg?width=500&amp;amp;height=363&quot;/&gt;&lt;/div&gt;
&lt;p class=&quot;image-credit-wrap&quot;&gt;&lt;span class=&quot;js-caption-wrapper&quot;&gt;&lt;span class=&quot;cutline js-caption&quot;&gt;Credit freezes and unfreezes with the three major credit bureaus — Equifax, Experian and TransUnion — will be free for everyone by federal law starting Sept. 21.&lt;/span&gt;&lt;span class=&quot;credit&quot;&gt;(Photo: Getty Images/iStockphoto)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/aside&gt;&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p class=&quot;speakable-p-1 p-text&quot;&gt;One of the best ways to protect yourself from identity theft is now free.&lt;/p&gt;
&lt;p class=&quot;speakable-p-2 p-text&quot;&gt;Starting Friday, a new federal law allows people to freeze and unfreeze their credit at the three major credit bureaus without being charged. Before, it cost consumers in almost half the states $3 to $12 per bureau &lt;a data-track-label=&quot;inline|intext|n/a&quot; href=&quot;https://www.usatoday.com/story/money/2018/09/21/identity-theft-after-equifax-breach-how-freeze-childrens-credit/1366671002/&quot;&gt;to freeze or unfreeze their credit reports.&lt;/a&gt; &lt;/p&gt;
&lt;p class=&quot;p-text&quot;&gt;A freeze prevents lenders from pulling a person's credit report – a key part of the approval process for a credit card or loan – essentially preventing fraudsters from opening a new account in that person's name or the name of someone in their family.&lt;/p&gt;
&lt;p class=&quot;p-text&quot;&gt;The new law comes more than a year after Equifax disclosed a major data breach that exposed the personal information of 148 million Americans and prompted lawmakers to rethink identity security.&lt;/p&gt;
&lt;p class=&quot;p-text&quot;&gt;The new law also extends how long a fraud alert remains on your credit reports from 90 days to one year. Less severe than a freeze, fraud alerts tell lenders that your personal data may have been compromised and to take extra steps to verify your identity before approving new credit.&lt;/p&gt;

&lt;p class=&quot;p-text&quot;&gt;Existing alerts on Experian reports will automatically be extended, according to Rod Griffin, director of consumer education and advocacy at Experian.  &lt;/p&gt;
&lt;p class=&quot;p-text&quot;&gt;&lt;span class=&quot;exclude-from-newsgate&quot;&gt;&lt;strong&gt;More:&lt;/strong&gt; &lt;a data-track-label=&quot;inline|intext|n/a&quot; href=&quot;https://www.usatoday.com/story/money/nation-now/2018/09/21/dairy-farmers-gofundme-milk-prices/1377659002/&quot;&gt;In debt and out of options, thousands of dairy farmers turn to GoFundMe for bailout&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p-text&quot;&gt;&lt;span class=&quot;exclude-from-newsgate&quot;&gt;&lt;strong&gt;More:&lt;/strong&gt; &lt;a data-track-label=&quot;inline|intext|n/a&quot; href=&quot;https://www.usatoday.com/story/money/nation-now/2018/09/20/mcdonalds-students-prank-fake-ad/1367848002/&quot;&gt;McDonald's gives students $25,000 after their fake ad went unnoticed in epic prank&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;presto-h3&quot;&gt;How to &quot;freeze&quot; your credit report&lt;/h3&gt;
&lt;p class=&quot;p-text&quot;&gt;Placing a freeze should be fast and relatively easy, although you will have to sign up for separate ones at each of the three credit bureaus. &lt;/p&gt;
&lt;p class=&quot;p-text&quot;&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Go to the credit bureau websites and locate the “security freeze” link.&lt;/p&gt;
&lt;p class=&quot;p-text&quot;&gt;For Equifax: &lt;a data-track-label=&quot;inline|intext|n/a&quot; href=&quot;https://www.equifax.com/personal/credit-report-services/&quot;&gt;www.equifax.com/personal/credit-report-services/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p-text&quot;&gt;For Experian: &lt;a data-track-label=&quot;inline|intext|n/a&quot; href=&quot;https://www.experian.com/freeze/center.html&quot;&gt;www.experian.com/freeze&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;p-text&quot;&gt;For TransUnion: &lt;a data-track-label=&quot;inline|intext|n/a&quot; href=&quot;https://www.transunion.com/credit-freeze&quot;&gt;www.transunion.com/credit-freeze&lt;/a&gt; &lt;/p&gt;
&lt;p class=&quot;p-text&quot;&gt;Type in your name, address, social security number and date of birth. (Note: You can also submit a credit freeze request via phone or in writing.) You may be asked to provide a previous address if you have lived at your current one for less than two years.&lt;/p&gt;

&lt;p class=&quot;p-text&quot;&gt;You also may need to answer a few questions about your background, including loans you've taken out, credit cards you hold or previous addresses to confirm your identity.&lt;/p&gt;
&lt;p class=&quot;p-text&quot;&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Select the security freeze option. (Or if you already have a freeze in place, select whether you want to temporarily “unfreeze” it or remove the freeze permanently&lt;/p&gt;
&lt;p class=&quot;p-text&quot;&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Jot down your PIN number, as you will need it to change the status of your freeze, like when you want to “thaw” or unfreeze it to get a loan for a new car or apply for a mortgage.&lt;/p&gt;
&lt;p class=&quot;p-text&quot;&gt;If the credit bureaus cannot sufficiently verify your identity based on the information you've provided, you may need to mail in copies of your driver's license, utility bills or other supporting documentation to validate your identity and execute a freeze.&lt;/p&gt;
&lt;p class=&quot;p-text&quot;&gt;&quot;We want to make it is as simple as possible to access that freeze, but we want to protect you at the same time,&quot; Experian's Griffin said. &quot;We need to strike that balance.&quot;&lt;/p&gt;
&lt;p class=&quot;p-text&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p-text&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p-text&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;p-text p-text-last&quot; id=&quot;article-body-p-last&quot;&gt; &lt;/p&gt;

&lt;p&gt;Read or Share this story: https://usat.ly/2PSLV5K&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Fri, 21 Sep 2018 17:17:46 +0000</pubDate>
<dc:creator>kimsk112</dc:creator>
<og:image>https://www.gannett-cdn.com/presto/2018/08/20/USAT/0263d07c-dd24-4ecc-ad30-e3bee75ba585-GettyImages-635671076.jpg?crop=2030,1142,x0,y63&amp;width=3200&amp;height=1680&amp;fit=bounds</og:image>
<og:title>Equifax Breach: Freezing your credit is now free in all states under a new law</og:title>
<og:description>A federal law now allows people to freeze and unfreeze their credit at credit bureaus for free. Before, it cost $3 to $12 a bureau in many states.</og:description>
<og:url>https://www.usatoday.com/story/money/2018/09/21/equifax-free-credit-freeze-new-law/1377815002/</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.usatoday.com/story/money/2018/09/21/equifax-free-credit-freeze-new-law/1377815002/</dc:identifier>
</item>
<item>
<title>Apple File System Reference [pdf]</title>
<link>https://developer.apple.com/support/apple-file-system/Apple-File-System-Reference.pdf</link>
<guid isPermaLink="true" >https://developer.apple.com/support/apple-file-system/Apple-File-System-Reference.pdf</guid>
<description>&lt;a href=&quot;https://developer.apple.com/support/apple-file-system/Apple-File-System-Reference.pdf&quot;&gt;Download PDF&lt;/a&gt;</description>
<pubDate>Fri, 21 Sep 2018 16:17:34 +0000</pubDate>
<dc:creator>abkumar</dc:creator>
<og:image>https://www.gannett-cdn.com/presto/2018/08/20/USAT/0263d07c-dd24-4ecc-ad30-e3bee75ba585-GettyImages-635671076.jpg?crop=2030,1142,x0,y63&amp;width=3200&amp;height=1680&amp;fit=bounds</og:image>
<og:title>Equifax Breach: Freezing your credit is now free in all states under a new law</og:title>
<og:description>A federal law now allows people to freeze and unfreeze their credit at credit bureaus for free. Before, it cost $3 to $12 a bureau in many states.</og:description>
<og:url>https://www.usatoday.com/story/money/2018/09/21/equifax-free-credit-freeze-new-law/1377815002/</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>application/pdf</dc:format>
<dc:identifier>https://developer.apple.com/support/apple-file-system/Apple-File-System-Reference.pdf</dc:identifier>
</item>
<item>
<title>NewSQL databases fail to guarantee consistency and I blame Spanner</title>
<link>http://dbmsmusings.blogspot.com/2018/09/newsql-database-systems-are-failing-to.html</link>
<guid isPermaLink="true" >http://dbmsmusings.blogspot.com/2018/09/newsql-database-systems-are-failing-to.html</guid>
<description>&lt;div dir=&quot;ltr&quot; id=&quot;docs-internal-guid-34e9d9bf-7fff-5228-0a7b-b2989ac9e72b&quot;&gt;&lt;span&gt;The CAP theorem famously states that it is impossible to guarantee both consistency and availability in the event of a network partition. Since network partitions are always theoretically possible in a scalable, distributed system, the architects of modern scalable database systems fractured into two camps: those that prioritized availability (the NoSQL camp) and those that prioritized consistency (the NewSQL camp). For a while, the NoSQL camp was clearly the more dominant of the two --- in an “always-on” world, downtime is unacceptable, and developers were forced into handling the reduced consistency levels of scalable NoSQL systems. [Side note: NoSQL is a broad umbrella that contains many different systems with different features and innovations. When this post uses the term “NoSQL”, we are referring to the subset of the umbrella that is known for building scalable systems that prioritize availability over consistency, such as &lt;a href=&quot;http://cassandra.apache.org/&quot; target=&quot;_blank&quot;&gt;Cassandra&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/dynamodb/&quot; target=&quot;_blank&quot;&gt;DynamoDB&lt;/a&gt; (default settings), &lt;a href=&quot;http://www.project-voldemort.com/&quot; target=&quot;_blank&quot;&gt;Voldemort&lt;/a&gt;, &lt;a href=&quot;http://couchdb.apache.org/&quot; target=&quot;_blank&quot;&gt;CouchDB&lt;/a&gt;, &lt;a href=&quot;http://basho.com/products/riak-kv/&quot; target=&quot;_blank&quot;&gt;Riak&lt;/a&gt;, and multi-region deployments of &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/cosmos-db/consistency-levels&quot; target=&quot;_blank&quot;&gt;Azure CosmosDB&lt;/a&gt;.]&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;Over the past decade, application developers have discovered that it is extremely difficult to build bug-free applications over database systems that do not guarantee consistency. This has led to a surprising shift in momentum, with many of the more recently released systems claiming to guarantee consistency (and be CP from CAP). Included in this list of newer systems are: &lt;a href=&quot;https://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf&quot; target=&quot;_blank&quot;&gt;Spanner&lt;/a&gt; (and its &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/cosmos-db/consistency-levels&quot; target=&quot;_blank&quot;&gt;Cloud Spanner&lt;/a&gt; counterpart), &lt;a href=&quot;https://fauna.com/&quot; target=&quot;_blank&quot;&gt;FaunaDB&lt;/a&gt;, &lt;a href=&quot;https://www.cockroachlabs.com/&quot; target=&quot;_blank&quot;&gt;CockroachDB&lt;/a&gt;, and &lt;a href=&quot;https://yugabyte.com/&quot; target=&quot;_blank&quot;&gt;YugaByte&lt;/a&gt;. In this post, we will look more deeply into the consistency claims of these four systems (along with similar systems) and note that while some do indeed guarantee consistency, way too many of them fail to completely guarantee consistency. We will trace the failure to guarantee consistency to a controversial design decision made by Spanner that has been tragically and imperfectly emulated in other systems.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;&lt;span&gt;What is consistency anyway?&lt;/span&gt;&lt;/h2&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Consistency, also known as “atomic consistency” or “linearizability”, guarantees that once a write completes, all future reads will reflect that value of the write. For example, let’s say that we have a variable called X, whose value is currently 4. If we run the following code:&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;X = 10;&lt;/span&gt;&lt;span&gt;&lt;br class=&quot;kix-line-break&quot;/&gt;&lt;/span&gt;&lt;span&gt;Y = X + 8;&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In a consistent system, there is only one possible value for Y after running this code (assuming the second statement is run after the first statement completes): 18. Everybody who has completed an “Introduction to Programming” course understands how this works, and relies on this guarantee when writing code.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In a system that does not guarantee consistency, the value of Y after running this code is also probably 18. But there’s a chance it might be 12 (since the original value of X was 4). Even if the system returns an explicit message: “I have completed the X = 10 statement”, it is nonetheless still a possibility that the subsequent read of X will reflect the old value (4) and Y will end up as 12. Consequently, the application developer has to be aware of the non-zero possibility that Y is not 18, and must deal with all possible values of Y in subsequent code. This is MUCH more complicated, and beyond the intellectual capabilities of a non-trivial subset of application developers.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;[Side note: Another name for &quot;consistency&quot; is &quot;strong consistency&quot;. This alternate name was coined in order to distinguish the full consistency guarantee from weaker consistency levels that also use the word &quot;consistency&quot; in their name (despite not providing the complete consistency guarantee). Indeed, some of these weaker consistency levels, such as &quot;causal consistency&quot;, &quot;session consistency&quot;, and &quot;bounded staleness consistency&quot; provide useful guarantees that somewhat reduce complexity for application developers. Nonetheless, the best way to avoid the existence of corner case bugs in an application is to build it on top of a system that guarantees complete, strong consistency.]&lt;/span&gt;&lt;/div&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;&lt;span&gt;Why give up on consistency?&lt;/span&gt;&lt;/h2&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Consistency is a basic staple, a guarantee that is extremely hard to live without. So why do most NoSQL systems fail to guarantee consistency? They blame the CAP theorem. (For example,&lt;/span&gt; &lt;a href=&quot;https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf&quot;&gt;&lt;span&gt;the Amazon Dynamo paper&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, which inspired many widely used NoSQL systems, such as Cassandra, DynamoDB, and Riak, mention the availability vs. consistency tradeoff in the first paragraph of the section that discussed their “Design Considerations”, which lead to their famous “eventually consistent” architecture.) It is&lt;/span&gt; &lt;span&gt;very hard&lt;/span&gt;&lt;span&gt;, but&lt;/span&gt; &lt;span&gt;not impossible,&lt;/span&gt; &lt;span&gt;to build applications over systems that do not guarantee consistency. But the CAP theorem says that it is&lt;/span&gt; &lt;span&gt;impossible&lt;/span&gt; &lt;span&gt;for a system that guarantees consistency&lt;/span&gt; &lt;span&gt;to guarantee 100% availability in the presence of a network partition. So if you can only choose one, it makes sense to choose availability. As we said above, once the system fails to guarantee consistency,  developing applications on top of it without ugly corner case bugs is extremely challenging, and generally requires highly-skilled application developers that are able to handle the intellectual rigors of such development environments. Nonetheless, such skilled developers do exist, and this is the only way to avoid the impossibility proof from the CAP theorem of 100% availability.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The reasoning of the previous paragraph, although perhaps well-thought out and convincing, is fundamentally flawed. The CAP theorem lives in a theoretical world where there is such a thing as 100% availability. In the real world, there is no such thing as 100% availability. Highly available systems are defined in terms of ‘9s’. Are you 99.9% available? Or 99.99% available? The more 9s, the better. Availability is fundamentally a pursuit in imperfection. No system can&lt;/span&gt; &lt;span&gt;guarantee&lt;/span&gt; &lt;span&gt;availability.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;This fact has significant ramifications when considering the availability vs. consistency tradeoff that was purported by the CAP theorem. It is not the case that if we guarantee consistency, we have to give up the guarantee of availability. We never had a guarantee of availability in the first place! Rather, guaranteeing consistency causes a&lt;/span&gt; &lt;span&gt;reduction&lt;/span&gt; &lt;span&gt;to our already imperfect availability.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Therefore: the question becomes: how much availability is lost when we guarantee consistency? In practice, the answer is&lt;/span&gt; &lt;span&gt;very little&lt;/span&gt;&lt;span&gt;. Systems that guarantee consistency only experience a necessary reduction in availability in the event of a network partition. As networks become more redundant, partitions become an increasingly rare event. And even if there is a partition, it is still possible for the majority partition to be available. Only the minority partition must become unavailable. Therefore, for the reduction in availability to be perceived, there must be both a network partition, and also clients that are able to communicate with the nodes in the minority partition (and not the majority partition). This combination of events is typically rarer than other causes of system unavailability. Consequently, the real world impact of guaranteeing consistency on availability is often negligible. It is very possible to have a system that guarantees consistency and achieves high availability at the same time.&lt;/span&gt;&lt;/div&gt;


&lt;h2 dir=&quot;ltr&quot;&gt;&lt;span&gt;The glorious return of consistent NewSQL systems&lt;/span&gt;&lt;/h2&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The argument above actually results in 3 distinct reasons for modern systems to be CP from CAP, instead of AP (i.e. choose consistency over availability):&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;(1)    Systems that fail to guarantee consistency result in complex, expensive, and often buggy application code.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;(2)    The reduction of availability that is caused by the guarantee of consistency is minute, and hardly noticeable for many deployments.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;(3)    The CAP theorem is fundamentally asymmetrical. CP systems can&lt;/span&gt; &lt;span&gt;guarantee&lt;/span&gt; &lt;span&gt;consistency. AP systems&lt;/span&gt; &lt;span&gt;do not guarantee&lt;/span&gt; &lt;span&gt;availability (no system can guarantee 100% availability). Thus only one side of the CAP theorem opens the door for any useful guarantees.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;I believe that the above three points is what has caused the amazing renaissance of distributed, transactional database systems --- many of which have become commercially available in the past few years ---  that choose to be CP from CAP instead of AP. There is still certainly a place for AP systems, and their associated NoSQL implementations. But for most developers, building on top of a CP system is a safer bet.&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;However, when I say that CP systems are the safer bet, I intend to refer to CP systems that&lt;/span&gt; &lt;span&gt;&lt;strong&gt;actually&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;guarantee consistency. Unfortunately, way too many of these modern NewSQL systems fail to guarantee consistency, despite their claims to the contrary. And once the guarantee is removed, the corner case bugs, complexity, and costs return.&lt;/span&gt;&lt;/div&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;&lt;span&gt;Spanner is the source of the problem&lt;/span&gt;&lt;/h2&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;I have&lt;/span&gt; &lt;a href=&quot;http://dbmsmusings.blogspot.com/2011/12/replication-and-latency-consistency.html&quot;&gt;&lt;span&gt;discussed in previous posts&lt;/span&gt;&lt;/a&gt; &lt;span&gt;that there are many ways to guarantee consistency in distributed systems. The most popular mechanism, which guarantees consistency at minimal cost to availability, is to use the Paxos or Raft consensus protocols to enforce consistency across multiple replicas of the data. At a simplified level, these protocols work via a majority voting mechanism. Any change to the data requires a majority of replicas to agree to the change. This allows the minority of replicas to be down or unavailable and the system can nonetheless continue to read or write data.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Most NewSQL systems use consensus protocols to enforce consistency. However, they differ in a significant way in&lt;/span&gt; &lt;span&gt;how&lt;/span&gt; &lt;span&gt;they use these protocols. I divide NewSQL systems into two categories along this dimension: The first category, as embodied in systems such as Calvin (which came out of my research group) and FaunaDB, uses a single, global consensus protocol per database. Every transaction participates in the same global protocol. The second category, as embodied in systems such as Spanner, CockroachDB, and YugaByte, partitions the data into ‘shards’, and applies a separate consensus protocol per shard.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The main downside of the first category is scalability. A server can process a fixed number of messages per second. If every transaction in the system participates in the same consensus protocol, the same set of servers vote on every transaction. Since voting requires communication, the number of votes per second is limited by the number of messages each server can handle. This limits the total amount of transactions per second that the system can handle.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Calvin and FaunaDB get around this downside via batching. Rather than voting on each transaction individually, they vote on batches of transactions. Each server batches all transactions that it receives over a fixed time period (e.g., 10 ms), and then initiates a vote on that entire batch at once. With 10ms batches, Calvin was able to achieve a throughput of over 500,000 transactions per second. For comparison, Amazon.com and NASDAQ likely process no more than 10,000 orders/trades per second even during peak workloads.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The main downside of the second category is that by localizing consensus on a per-shard basis, it becomes nontrivial to guarantee consistency in the presence of transactions that touch data in multiple shards. The quintessential example is the case of someone performing a sequence of two actions on a photo-sharing application (1) Removing her parents from having permission to see her photos (2) Posting her photos from spring break. Even though there was a clear sequence of these actions from the vantage point of the user, if the permissions data and the photo data are located in separate shards, and the shards perform consensus separately, there is a risk that the parents will nonetheless be able to see the user’s recently uploaded photos.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Spanner famously got around this downside with their TrueTime API. All transactions receive a timestamp which is based on the actual (wall-clock) current time. This enables there to be a concept of “before” and “after” for two different transactions, even those that are processed by completely disjoint set of servers. The transaction with a lower timestamp is “before” the transaction with a higher timestamp. Obviously, there may be a small amount of skew across the clocks of the different servers. Therefore, Spanner utilizes the concept of an “uncertainty” window which is based on the maximum possible time skew across the clocks on the servers in the system. After completing their writes, transactions wait until after this uncertainty window has passed before they allow any client to see the data that they wrote.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Spanner thus faces a potentially uncomfortable tradeoff. It is desirable that the uncertainty window should be as small as possible, since as it gets larger, the latency of transactions increases, and the overall concurrency of the system decreases. On the other hand, it needs to 100% sure that clock skew&lt;/span&gt; &lt;span&gt;never&lt;/span&gt; &lt;span&gt;gets larger than the uncertainty window (since otherwise the guarantee of consistency would no longer exist), and thus larger windows are safer than smaller ones.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Spanner handles this tradeoff with a specialized hardware solution that uses both GPS and atomic clocks to ensure a minimal clock skew across servers. This solution allows the system to keep the uncertainty window relatively narrow while at the same time keeping the probability of incorrect uncertainty window estimates (and corresponding consistency violations) to be extremely small. Indeed, the probability is so small that Spanner’s architects feel comfortable claiming that Spanner “guarantees” consistency.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;[It is worth noting at this point that systems that use global consensus avoid this problem entirely. If every transaction goes through the same protocol, then a natural order of all transactions emerges --- the order is simply the order in which transactions were voted on during the protocol. When batches are used instead of transactions, it is the batches that are ordered during the protocol, and transactions are globally ordered by combining their batch identifier with their sequence number within the batch. There is no need for clock time to be used in order to create a notion of before or after. Instead, the consensus protocol itself can be used to elegantly create a global order.]&lt;/span&gt;&lt;/div&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;&lt;span&gt;Spanner Derivatives&lt;/span&gt;&lt;/h2&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Spanner is a beautiful and innovative system. It was also invented by Google and widely used there. Either because of the former or latter (or both), it has been extremely influential, and many systems (e.g., CockroachDB and YugaByte) have been inspired by the architectural decisions by Spanner. Unfortunately,  these derivative systems are software-only, which implies that they have inherited only the software innovations without the hardware and infrastructure upon which Spanner relies at Google. In light of Spanner’s decision to have separate consensus protocols per shard, software-only derivatives are extremely dangerous. Like Spanner, these systems rely on real-world time in order to enforce consistency --- CockroachDB on&lt;/span&gt; &lt;a href=&quot;https://cse.buffalo.edu/tech-reports/2014-04.pdf&quot;&gt;&lt;span&gt;HLC (hybrid logical clocks)&lt;/span&gt;&lt;/a&gt; &lt;span&gt;and YugaByte on&lt;/span&gt; &lt;a href=&quot;http://users.ece.utexas.edu/~garg/pdslab/david/hybrid-time-tech-report-01.pdf&quot;&gt;&lt;span&gt;Hybrid Time&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. Like Spanner, these systems rely on knowing the maximum clock skew across servers in order to avoid consistency violations. But unlike Spanner, these systems lack hardware and infrastructure support for minimizing and measuring clock skew uncertainty.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;CockroachDB, to its credit, has&lt;/span&gt; &lt;a href=&quot;https://www.cockroachlabs.com/blog/living-without-atomic-clocks/&quot;&gt;&lt;span&gt;acknowledged&lt;/span&gt;&lt;/a&gt; &lt;span&gt;that by only incorporating Spanner’s software innovations, the system cannot guarantee CAP consistency (which, as mentioned above, is linearizability).&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;YugaByte, however, continues to claim a guarantee of consistency. I would advise people not to trust this claim. YugaByte, by virtue of its Spanner roots, will run into consistency violations when the local clock on a server suddenly jumps beyond the skew uncertainty window. This can happen under a variety of scenarios such as when a VM that is running YugaByte freezes or migrates to a different machine. Even without sudden jumps, YugaByte’s free edition relies on the user to set the assumptions about maximum clock skew. Any mistaken assumptions on behalf of the user can result in consistency violations.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In contrast to CockroachDB and YugaByte, FaunaDB was inspired by Calvin instead of Spanner. [Historical note: the Calvin and Spanner papers were both published in 2012]. FaunaDB therefore has a single, elegant, global consensus protocol, and needs no small print regarding clock skew assumptions. Consequently, FaunaDB is able to&lt;/span&gt; &lt;span&gt;guarantee&lt;/span&gt; &lt;span&gt;consistency of transactions that modify&lt;/span&gt; &lt;span&gt;any&lt;/span&gt; &lt;span&gt;data in the database without concern for the corner case violations that can plague software-only derivatives of Spanner-style systems.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;There are other differences between Calvin-style systems and Spanner-style systems&lt;/span&gt; &lt;a href=&quot;http://dbmsmusings.blogspot.com/2017/04/distributed-consistency-at-scale.html&quot;&gt;&lt;span&gt;that I’ve talked about in the past&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. In this post we focused on perhaps the most consequential difference: global consensus vs. partitioned consensus. As with any architectural decision, there are tradeoffs between these two options. For the vast majority of applications, exceeding 500,000 transactions a second is beyond their wildest dreams. If so, then the decision is clear. Global consensus is probably the better choice.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;[Editor's note: Daniel Abadi is an advisor at FaunaDB.]&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;
</description>
<pubDate>Fri, 21 Sep 2018 13:26:55 +0000</pubDate>
<dc:creator>evanweaver</dc:creator>
<og:url>http://dbmsmusings.blogspot.com/2018/09/newsql-database-systems-are-failing-to.html</og:url>
<og:title>NewSQL database systems are failing to guarantee consistency, and I blame Spanner</og:title>
<og:description> The CAP theorem famously states that it is impossible to guarantee both consistency and availability in the event of a network partition. S...</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>http://dbmsmusings.blogspot.com/2018/09/newsql-database-systems-are-failing-to.html</dc:identifier>
</item>
<item>
<title>Deep learning experiments in OCaml</title>
<link>https://blog.janestreet.com/deep-learning-experiments-in-ocaml/</link>
<guid isPermaLink="true" >https://blog.janestreet.com/deep-learning-experiments-in-ocaml/</guid>
<description>&lt;p&gt;Last year we held a machine learning seminar in our London office, which was an opportunity to reproduce some classical deep learning results with a nice twist: we used OCaml as a programming language rather than Python. This allowed us to train models defined in a functional way in OCaml on a GPU using TensorFlow.&lt;/p&gt;
&lt;p&gt;Specifically we looked at a computer vision application, Neural Style Transfer, and at character-level language modeling.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tensorflow.org/&quot;&gt;TensorFlow&lt;/a&gt; is a numerical library using data flow graphs. It was originally developed by Google and was open-sourced at the end of 2015. Using it, one can easily specify a computation graph and execute it in an optimized way on multiple CPUs or GPUs. A typical use case is neural networks, which are easily represented as computation graphs. TensorFlow can then compute some symbolic gradients for the graphs which makes it easy to minimize some loss functions.&lt;/p&gt;
&lt;p&gt;Some &lt;a href=&quot;https://github.com/LaurentMazare/tensorflow-ocaml&quot;&gt;TensorFlow OCaml bindings&lt;/a&gt; make it possible to use TensorFlow from OCaml programs. These bindings also provide an API that makes it easy to describe complex neural network architecture in a functional way.&lt;/p&gt;
&lt;p&gt;To illustrate this here is a simple implementation of &lt;a href=&quot;http://www.robots.ox.ac.uk/~vgg/research/very_deep/&quot;&gt;VGG-19&lt;/a&gt;, a classical Convolutional Neural Network (CNN) architecture from 2014.&lt;/p&gt;
&lt;div class=&quot;language-ocaml highlighter-rouge&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vgg19&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_idx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out_channels&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nn&quot;&gt;Fnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conv2d&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;conv%d_%d&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_idx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strides&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;same&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out_channels&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Fnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Fnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_pool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strides&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;same&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Fnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;D3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;Fnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;D3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out_channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out_channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out_channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out_channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out_channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Fnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatten&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Fnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dense&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fc6&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Fnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relu&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Fnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dense&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fc7&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Fnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relu&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Fnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dense&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fc8&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Fnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;softmax&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Fnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Float&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;input_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As an example of Recurrent Neural Network (RNN) a &lt;a href=&quot;https://en.wikipedia.org/wiki/Long_short-term_memory&quot;&gt;Long Short-Term Memory&lt;/a&gt; (LSTM) unit is also pretty easy to define.&lt;/p&gt;
&lt;div class=&quot;language-ocaml highlighter-rouge&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lstm&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_vars&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;Var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size_c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size_c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stddev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;Var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size_c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_vars&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_vars&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bC&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_vars&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_vars&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;Staged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h_and_x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sigmoid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_and_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigmoid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_and_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tanh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigmoid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_and_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigmoid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_and_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tanh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On the OCaml side a node of the TensorFlow computation graph has a type &lt;code class=&quot;highlighter-rouge&quot;&gt;'a Node.t&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;'a&lt;/code&gt; represents the kind of value that the node contains encoded as a &lt;a href=&quot;https://caml.inria.fr/pub/docs/manual-ocaml/lablexamples.html#sec47&quot;&gt;polymorphic variant&lt;/a&gt;. For example a node could have type &lt;code class=&quot;highlighter-rouge&quot;&gt;[`float] Node.t&lt;/code&gt; if the associated value is a tensor of single precision floating point values.&lt;/p&gt;
&lt;p&gt;The OCaml code wrapping TensorFlow operations can then specify the kind of nodes that are used and returned depending on the operation. For example the square root function has the following signature:&lt;/p&gt;
&lt;div class=&quot;language-ocaml highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;([&amp;lt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;([&amp;lt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This signature specifies that &lt;code class=&quot;highlighter-rouge&quot;&gt;sqrt&lt;/code&gt; takes as input a single node containing single or double precision floats. The resulting node contains values of the same kind. Another example could be the &lt;code class=&quot;highlighter-rouge&quot;&gt;greaterEqual&lt;/code&gt; comparison operator which signature is:&lt;/p&gt;
&lt;div class=&quot;language-ocaml highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greaterEqual&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;([&amp;lt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;([&amp;lt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This specifies that &lt;code class=&quot;highlighter-rouge&quot;&gt;greaterEqual&lt;/code&gt; takes as input two nodes. These nodes have to contain the same kind of values, and this kind can be single or double precision floats or 32/64 bits integers. This operation then returns a tensor of boolean values.&lt;/p&gt;
&lt;p&gt;So thanks to these signatures &lt;code class=&quot;highlighter-rouge&quot;&gt;sqrt (greaterEqual n1 n2)&lt;/code&gt; would raise a compile time error as the input of &lt;code class=&quot;highlighter-rouge&quot;&gt;sqrt&lt;/code&gt; contains boolean values.&lt;/p&gt;
&lt;p&gt;Specifying these function signatures manually would be tedious so this wrapping OCaml code ends up being generated automatically from the operation description file provided in the TensorFlow distribution.&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Node.t&lt;/code&gt; type does not encode the dimensions or even the shape of the embedded tensor. Including some shape information could probably be useful but would result in more complex function signatures.&lt;/p&gt;

&lt;p&gt;Neural Style Transfer was originally introduced by Gatis, Ecker, and Bethge in 2015 in &lt;a href=&quot;https://arxiv.org/abs/1508.06576&quot;&gt;A Neural Algorithm of Artistic Style&lt;/a&gt;. This paper describes how to combine a content image and a style image to generate a new image.&lt;/p&gt;
&lt;p&gt;The idea is to use a CNN to extract some features from an image. Informally a CNN stacks multiple layers between the input image and their output (which could for example be the class the input image belongs to). The layers that are close to the input image extract low level features, e.g. a vertical line. The ones that are further away extract higher level features, e.g. fur if it comes to recognizing an animal or a tire if it comes to recognizing a car.&lt;/p&gt;
&lt;p&gt;As we want to have the same content as the content image, the final image should have similar high level features at the same positions. For style, the final image should have the same low level features as the style image, but position is not important here. We just care about having the same intensity on the different low level features.&lt;/p&gt;
&lt;p&gt;In order to experiment with this we used a pre-trained VGG-19 model. The actual implementation and details on how to run it can be found on &lt;a href=&quot;https://github.com/LaurentMazare/tensorflow-ocaml/tree/master/examples/neural-style&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As an example we took as input a &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Camel_(3867991984).jpg&quot;&gt;camel picture from wikimedia&lt;/a&gt; and as style image Van Gogh’s famous &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Starry_Night&quot;&gt;The Starry Night&lt;/a&gt;. A generated image using Neural Style Transfer can be seen below.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.janestreet.com/deep-learning-experiments-in-ocaml/caml3.jpg&quot;&gt;&lt;img src=&quot;https://blog.janestreet.com/deep-learning-experiments-in-ocaml/caml3.jpg&quot; alt=&quot;Starry caml&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Andrej Karpathy wrote a &lt;a href=&quot;https://karpathy.github.io/2015/05/21/rnn-effectiveness/&quot;&gt;very nice blog post&lt;/a&gt; on how RNNs can be used for character based language modeling. In this setting a RNN is trained to predict the next character probability distribution on some very large corpus. Once trained the RNN is given some initial empty memory and is used to randomly generates a character based on the next character probability distribution. The generated character is then given as input to the RNN as well as the updated RNN memory to generate the following character and so on.&lt;/p&gt;
&lt;p&gt;More details are available in the original blog post and can be seen in the &lt;a href=&quot;https://github.com/karpathy/char-rnn&quot;&gt;blog post implementation&lt;/a&gt;, as a fun application the author used a corpus made of all the works of Shakespeare and was able to generate samples that look very similar to some actual Shakespeare.&lt;/p&gt;
&lt;p&gt;Once again we wrote an OCaml based implementation of the same idea, this uses two LSTM stacked on each other. The actual implementation can be found on &lt;a href=&quot;https://github.com/LaurentMazare/tensorflow-ocaml/tree/master/examples/char_rnn&quot;&gt;GitHub&lt;/a&gt; as well as instructions on how to run it. As an example we trained a network on the concatenation of the OCaml files from the &lt;a href=&quot;https://github.com/janestreet/base&quot;&gt;Base GitHub repo&lt;/a&gt;. This resulted in a corpus of 27 thousand lines. We then used the trained network to generate some random text that looks like OCaml code.&lt;/p&gt;
&lt;div class=&quot;language-ocaml highlighter-rouge&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;(** Generic date don't only then of the set operations *)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Conv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int64_to_int32_exn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Duplicate_key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nn&quot;&gt;Or_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error_string&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;int64_negative_exn&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition_tf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The resulting code is far from compiling but it gets a bunch of things right, like comments being properly opened and closed and containing text that looks like English.&lt;/p&gt;

&lt;p&gt;It was fun to play with OCaml and replicate some well known results in this setting. However it should be noted that TensorFlow in OCaml has some rough edges.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The machine learning library ecosystem in OCaml is nowhere near as well developed as it is in Python.&lt;/li&gt;
&lt;li&gt;There are very few resources for learning how to do machine learning in OCaml, which is in stark contrast to Python.&lt;/li&gt;
&lt;li&gt;Shape errors are difficult to debug, since the OCaml bindings don’t provide proper line numbers for where the mismatch is coming from. Hopefully this could be fixed by switching the bindings to use the new TensorFlow &lt;a href=&quot;https://www.tensorflow.org/guide/eager&quot;&gt;eager mode&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;That being said using OCaml has some nice properties too.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Type-safety helps you ensure that your training script is not going to fail after a couple hours because of some simple type error.&lt;/li&gt;
&lt;li&gt;As noted by Christopher Olah in this &lt;a href=&quot;http://colah.github.io/posts/2015-09-NN-Types-FP/&quot;&gt;blog post&lt;/a&gt; there are some natural typed representations of neural networks which work nicely with functional programming languages, especially for Recurrent Neural Networks.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;The banner at the top of this page has been generated based on this &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:%D0%92%D0%B5%D1%80%D0%B1%D0%BB%D1%8E%D0%B4_%D0%BF%D0%BE%D0%B4_%D1%81%D0%B5%D0%B4%D0%BB%D0%BE%D0%BC.jpg&quot;&gt;wikimedia image&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 21 Sep 2018 11:00:24 +0000</pubDate>
<dc:creator>yminsky</dc:creator>
<og:type>article</og:type>
<og:title>Deep learning experiments in OCaml</og:title>
<og:description>Last year we held a machine learning seminar in our London office,which was an opportunity to reproduce some classical deep learningresults with a nice twist...</og:description>
<og:url>https://blog.janestreet.com/deep-learning-experiments-in-ocaml/</og:url>
<og:image>https://blog.janestreet.com/deep-learning-experiments-in-ocaml/camel.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.janestreet.com/deep-learning-experiments-in-ocaml/</dc:identifier>
</item>
<item>
<title>Thanks for the Surprise Integration with My Website, Apple</title>
<link>https://www.asaph.org/2018/09/jguitar-apple-ios-shortcut.html</link>
<guid isPermaLink="true" >https://www.asaph.org/2018/09/jguitar-apple-ios-shortcut.html</guid>
<description>&lt;p&gt;Those of you who are avid readers of my &lt;a href=&quot;https://stackoverflow.com/users/166339/asaph&quot;&gt;Stack Overflow profile&lt;/a&gt; know that I am the creator of &lt;a href=&quot;https://jguitar.com/&quot;&gt;JGuitar.com&lt;/a&gt;, a popular guitar chord and scale calculator website. I'm also a longtime fan of Apple products. So you can imagine my surprise and delight when I received this message in my inbox this week from a JGuitar user:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is there a way to select a specific instrument (like ukulele) via the URL - so that I'd have a link that would take me right to chord search for that instrument?&lt;/p&gt;
&lt;p&gt;I am starting to mess around with iOS's new shortcut function. They have a shortcut for searching chords on your website, but it defaults to guitar; I'd like to make a ukulele version of the shortcut.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hold on a sec... Did Apple really integrate their new iOS shortcuts feature with my website? How is it possible I didn't know this was coming? No one from Apple reached out to me. I had eagerly upgraded my iPhone X to iOS 12 earlier that day but hadn't yet discovered &quot;shortcuts&quot;. Naturally, I immediately wanted to see this in action.&lt;/p&gt;
&lt;p&gt;After a little googling, I learned that in order to add shortcuts, you need to download the Shortcuts App from the Apple App Store.&lt;/p&gt;
&lt;a href=&quot;https://1.bp.blogspot.com/-9d57mee_QP4/W6SLW3_nyEI/AAAAAAAAAzo/A9kE2FKV0BoR-CPyiy4jZUN8wevLbybyQCPcBGAYYCw/s1600/App%2BStore%2BShortcuts%2BApp.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1600&quot; data-original-width=&quot;739&quot; height=&quot;320&quot; src=&quot;https://1.bp.blogspot.com/-9d57mee_QP4/W6SLW3_nyEI/AAAAAAAAAzo/A9kE2FKV0BoR-CPyiy4jZUN8wevLbybyQCPcBGAYYCw/s320/App%2BStore%2BShortcuts%2BApp.png&quot; width=&quot;148&quot;/&gt;&lt;/a&gt;
&lt;p&gt;After installing and launching the Shortcuts app, you're greeted to an empty Library screen. In order to use a shortcut, you need to either create one from scratch or select a pre-made shortcut from the gallery. I clicked on the Gallery icon, scrolled down to the &quot;Tools for Making Music&quot; section and saw the &quot;Guitar Chord Finder&quot; shortcut.&lt;/p&gt;
&lt;a href=&quot;https://2.bp.blogspot.com/-l_tNDFDqaGs/W6SLYvtVMeI/AAAAAAAAAzk/smIlEkOvKVwTgwYIb-PzMceZfi7fL--LwCPcBGAYYCw/s1600/Shortcuts%2BLibrary%2BEmpty.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1600&quot; data-original-width=&quot;739&quot; height=&quot;320&quot; src=&quot;https://2.bp.blogspot.com/-l_tNDFDqaGs/W6SLYvtVMeI/AAAAAAAAAzk/smIlEkOvKVwTgwYIb-PzMceZfi7fL--LwCPcBGAYYCw/s320/Shortcuts%2BLibrary%2BEmpty.png&quot; width=&quot;148&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-kaa5NLJZbAs/W6SLcEBEz0I/AAAAAAAAAzs/UDZre3lXOEAGCo2STkRYzWdPtataJ4fqgCPcBGAYYCw/s1600/Shortcuts%2BGallery%2Bwith%2BChord%2BFinder%2BShortcut.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1600&quot; data-original-width=&quot;739&quot; height=&quot;320&quot; src=&quot;https://2.bp.blogspot.com/-kaa5NLJZbAs/W6SLcEBEz0I/AAAAAAAAAzs/UDZre3lXOEAGCo2STkRYzWdPtataJ4fqgCPcBGAYYCw/s320/Shortcuts%2BGallery%2Bwith%2BChord%2BFinder%2BShortcut.png&quot; width=&quot;148&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-1GIypf7oOt4/W6SLV8SiRRI/AAAAAAAAAzo/XW9C2R_g62w9-hII3PtsTlkIsglZNSNegCPcBGAYYCw/s1600/Guitar%2BChord%2BFinder%2BShortcut.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1600&quot; data-original-width=&quot;739&quot; height=&quot;320&quot; src=&quot;https://3.bp.blogspot.com/-1GIypf7oOt4/W6SLV8SiRRI/AAAAAAAAAzo/XW9C2R_g62w9-hII3PtsTlkIsglZNSNegCPcBGAYYCw/s320/Guitar%2BChord%2BFinder%2BShortcut.png&quot; width=&quot;148&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Could this be it? The description didn't mention JGuitar.com. I clicked on it. There were instructions for how to use the shortcut but still no mention of JGuitar.com. When I clicked &quot;show actions&quot; it revealed the &quot;actions&quot; that make up the shortcut and I could finally see the JGuitar.com link in the URL section. Here are the complete actions that make up the Guitar Chord Finder Shortcut.&lt;/p&gt;
&lt;a href=&quot;https://3.bp.blogspot.com/-kDJWsqNPCHU/W6SNvw11U5I/AAAAAAAAA0Q/TU36OvKuP5gLGAaw_LdNV9HhUTvuMFX7wCPcBGAYYCw/s1600/JGuitar%2BApple%2BShortcut%2B3.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1600&quot; data-original-width=&quot;739&quot; height=&quot;320&quot; src=&quot;https://3.bp.blogspot.com/-kDJWsqNPCHU/W6SNvw11U5I/AAAAAAAAA0Q/TU36OvKuP5gLGAaw_LdNV9HhUTvuMFX7wCPcBGAYYCw/s320/JGuitar%2BApple%2BShortcut%2B3.png&quot; width=&quot;148&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-tNE8rDSul90/W6SNwC0unEI/AAAAAAAAA0Y/EBdIvTTQDPU040L05TyCL1o9ZWgHRsHHgCPcBGAYYCw/s1600/JGuitar%2BApple%2BShortcut%2B1.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1600&quot; data-original-width=&quot;739&quot; height=&quot;320&quot; src=&quot;https://4.bp.blogspot.com/-tNE8rDSul90/W6SNwC0unEI/AAAAAAAAA0Y/EBdIvTTQDPU040L05TyCL1o9ZWgHRsHHgCPcBGAYYCw/s320/JGuitar%2BApple%2BShortcut%2B1.png&quot; width=&quot;148&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-66iIgfsrAF8/W6SNwO1UbYI/AAAAAAAAA0U/SuA6rzAiyWU_rYhlS630lXxOC_6jhDP2gCPcBGAYYCw/s1600/JGuitar%2BApple%2BShortcut%2B2.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1600&quot; data-original-width=&quot;739&quot; height=&quot;320&quot; src=&quot;https://1.bp.blogspot.com/-66iIgfsrAF8/W6SNwO1UbYI/AAAAAAAAA0U/SuA6rzAiyWU_rYhlS630lXxOC_6jhDP2gCPcBGAYYCw/s320/JGuitar%2BApple%2BShortcut%2B2.png&quot; width=&quot;148&quot;/&gt;&lt;/a&gt;
&lt;p&gt;In a nutshell, the shortcut uses the user's input (a chord symbol) to construct a url to a chord search result page on JGuitar.com and then looks for 200x200px chord diagram images on that page and shows them to the user. The rest of the web page isn't shown.&lt;/p&gt;
&lt;p&gt;There are a couple of things I would have done differently in these shortcut actions. Firstly, I would have used an https url instead of http and secondly, I would have made it look for images with a width &amp;amp; height &lt;em&gt;greater than&lt;/em&gt; 200px rather than &lt;em&gt;equal to&lt;/em&gt; 200px. That would give me the flexibility to boost image resolution without breaking the shortcut. And boosting image resolution is an easy change for me since all the chord diagram images are dynamically generated on the fly and cached.&lt;/p&gt;
&lt;p&gt;Now that I had found and understood the feature it was time to take it for a test drive. I added the Guitar Chord Finder Shortcut to my Library and played with it both within the Shortcuts App and via the voice command: &quot;Hey Siri: Guitar Chord Finder&quot;. Both worked as expected.&lt;/p&gt;
&lt;a href=&quot;https://3.bp.blogspot.com/-Y8AaDq-GEu0/W6SLT-GDkhI/AAAAAAAAAzs/ZXA-iZQSuKsyxR3RIr3OOs9C_3LB-0OXwCPcBGAYYCw/s1600/B%2BFlat%2BChord%2Bin%2BShortcut.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1600&quot; data-original-width=&quot;739&quot; height=&quot;320&quot; src=&quot;https://3.bp.blogspot.com/-Y8AaDq-GEu0/W6SLT-GDkhI/AAAAAAAAAzs/ZXA-iZQSuKsyxR3RIr3OOs9C_3LB-0OXwCPcBGAYYCw/s320/B%2BFlat%2BChord%2Bin%2BShortcut.png&quot; width=&quot;148&quot;/&gt;&lt;/a&gt;
&lt;p&gt;I was also able to easily modify the shortcut to support ukulele as requested by my user. I just added &lt;code&gt;?instrument=Ukulele&lt;/code&gt; to the url field and replaced the image width rule with one that matches images with width greater than 100px.&lt;/p&gt;
&lt;p&gt;To check if users are actually using this feature, I scanned my log files. Sure enough, the following user agent string started appearing thousands of times a day in jguitar.com's web server logs on 9/17/2018:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Shortcuts/700 CFNetwork/974.2.1 Darwin/18.0.0&lt;/code&gt;&lt;/p&gt;
I'm genuinely thrilled that someone at Apple deemed my chord calculator technology worthy of inclusion in the iOS shortcuts gallery. If anyone from Apple is reading this, please reach out using &lt;a href=&quot;https://jguitar.com/contactus.jsp?subject=Guitar+Chord+Finder+Shortcut&quot;&gt;JGuitar.com's contact form&lt;/a&gt;. We can work together to make this experience even better. I can provide high quality SVG images of all chord diagrams, support alternate tunings, instruments and more.

</description>
<pubDate>Fri, 21 Sep 2018 06:50:40 +0000</pubDate>
<dc:creator>asaph</dc:creator>
<og:url>https://www.asaph.org/2018/09/jguitar-apple-ios-shortcut.html</og:url>
<og:title>Thanks for the Surprise Integration with my Website, Apple!</og:title>
<og:description>Addicted To Programming - @asaph's blog</og:description>
<og:image>https://1.bp.blogspot.com/-9d57mee_QP4/W6SLW3_nyEI/AAAAAAAAAzo/A9kE2FKV0BoR-CPyiy4jZUN8wevLbybyQCPcBGAYYCw/w1200-h630-p-k-no-nu/App%2BStore%2BShortcuts%2BApp.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.asaph.org/2018/09/jguitar-apple-ios-shortcut.html</dc:identifier>
</item>
<item>
<title>Ask HN: What open source project, in your opinion, has the highest code quality?</title>
<link>https://news.ycombinator.com/item?id=18037613</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=18037613</guid>
<description>&lt;tr class=&quot;athing comtr&quot; id=&quot;18037855&quot; readability=&quot;20.627329192547&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;10.313664596273&quot;&gt;&lt;tr readability=&quot;20.627329192547&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.8402839396628&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;16.923423423423&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I hold the source code of Go standard library &amp;amp; base distribution (i.e. compiler, etc.) in very high regard. Especially the standard library is, in my opinion, &lt;em&gt;stunningly&lt;/em&gt; easy to read, explore and understand, while at the same time being well thought through, easy to use (great and astonishingly well documented APIs), of very good performance, and with huge amounts of (also well readable!) tests. The compiler (including the runtime library) is noticeably harder to read and understand (especially because of sparse comments and somewhat idiosyncratic naming conventions; that's partly explained by it being constantly in flux). But still &lt;em&gt;doable&lt;/em&gt; for a human being, and I guess probably significantly easier than in most modern compilers. (Though I'd love to be proven wrong on this account!)&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;At the same time, the apparent simplicity should not be mistaken for lack of effort; on the contrary, I feel every line oozes with purpose, practicality, and to-the-point-ness, like a well sharpened knife, or a great piece of art where it's not about that you cannot add more, but that you cannot &lt;em&gt;remove&lt;/em&gt; more.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039646&quot; readability=&quot;15.549597855228&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;7.7747989276139&quot;&gt;&lt;tr readability=&quot;15.549597855228&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.3170241286863&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.917582417582&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;This is one of the great things about many Go libraries; the language is so simple its difficult to overcomplicate a Go project. This makes reading any Go source code, projects, libraries, the stdlib, a joy. The only times I've found Go libraries to be a PITA to read is when they get autogenerated from some other language (protobuf compilations, parts of the compiler that came from C, AWS/GoogleCloud/Azure libraries, etc), but that's to be expected in every language.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Kubernetes is another great example of a project that is so unbelievably complex in its function, it should be completely impenetrable to anyone who isn't a language expert. But, go check it out; its certainly complex and huge, but actually grokable.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041381&quot; readability=&quot;5.4841849148418&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038876&quot; readability=&quot;6.5602094240838&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2801047120419&quot;&gt;&lt;tr readability=&quot;6.5602094240838&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I'd agree, but only as far as aesthetics go. When you have to understand the time complexity and runtime characteristics of the standard library sorting algorithms, I think Go does a very bad job - the standard `sort.Sort(data sort.Interface)` will run poorly if the data is already mostly sorted. I expect these kinds of things to be documented properly.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042344&quot; readability=&quot;10.574074074074&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.287037037037&quot;&gt;&lt;tr readability=&quot;10.574074074074&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.8063973063973&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.9216027874564&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Golang's `sort.Sort(data sort.Interface)` will sort mostly-sorted data in nearly its fastest possible time, because it basically uses median-of-three quicksort, falling back to insertion sort for small partitions. Median-of-three on sorted or nearly-sorted data picks the optimal or nearly optimal partitioning element for quicksort. The code is simple, readable, and well-commented. Moreover, its average and worst-case complexity is documented in the godoc.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;In short, your comment is wrong from beginning to end. What led you to believe that anything in it was true?&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040870&quot; readability=&quot;2.6666666666667&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039386&quot; readability=&quot;2.4626865671642&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2313432835821&quot;&gt;&lt;tr readability=&quot;2.4626865671642&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I was pretty certain most libraries shuffle then quicksort. No need for documentation. Does go not do this?&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040042&quot; readability=&quot;2.9906542056075&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040828&quot; readability=&quot;2.16&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042002&quot; readability=&quot;9.0542635658915&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.5271317829457&quot;&gt;&lt;tr readability=&quot;9.0542635658915&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.8852713178295&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.210272873194&quot;&gt;&lt;span class=&quot;commtext c5a&quot;&gt;I'm sorry, but Timsort is a bit of a hack. It's a &quot;this seems to work well&quot; algorithm, and it shows. It took 13 years until its claimed running time was finally proven in 2015. The four (originally three) rules for merging sequences from the stack are rather arbitrary. Multiple issues were found well after it was already widely deployed.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c5a&quot;&gt;Recently, it was also shown that Timsort doesn't optimally use the information it has about runs. As an alternative, powersort was proposed, which seems to outperform Timsort both on randomly ordered inputs as well as inputs with long runs: &lt;a href=&quot;https://arxiv.org/pdf/1805.04154.pdf&quot; rel=&quot;nofollow&quot;&gt;https://arxiv.org/pdf/1805.04154.pdf&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042712&quot; readability=&quot;1.3698630136986&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039596&quot; readability=&quot;1.0416666666667&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040243&quot; readability=&quot;3.6849315068493&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.8424657534247&quot;&gt;&lt;tr readability=&quot;3.6849315068493&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;People were still finding bugs in common implementations of timsort as of 3 years ago. It's not unreasonable to stick with a somewhat more conservative choice for a core library function until there's more reason to have confidence in the implementations of timsort.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040857&quot; readability=&quot;1.5087719298246&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040939&quot; readability=&quot;7.7805486284289&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042662&quot; readability=&quot;7.5608591885442&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.7804295942721&quot;&gt;&lt;tr readability=&quot;7.5608591885442&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.7255369928401&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8872180451128&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;If I recall correctly, the bug only applied for arrays/lists of length greater than 2 to the more-than-astronomical. Not something that anyone ever encountered in the wild, because current hardware doesn't have enough memory.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Edit: The article linked in the other comment says the Java dev team didn't even bother to implement the &quot;proper&quot; fix, but merely adjusted how much space is allocated.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040762&quot; readability=&quot;1.2051282051282&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039568&quot; readability=&quot;3.6113360323887&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.8056680161943&quot;&gt;&lt;tr readability=&quot;3.6113360323887&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c5a&quot;&gt;Being pretty certain isn't the same as being certain. I really don't care what most libraries do as long as they document what exactly they have chosen to do. Go's `sort.Sort(data Interface)` definitely does not shuffle.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038677&quot; readability=&quot;8.3823529411765&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.1911764705882&quot;&gt;&lt;tr readability=&quot;8.3823529411765&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.5882352941176&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.809027777778&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;em&gt;&amp;gt; standard library is, in my opinion, stunningly easy to read&lt;/em&gt;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Reading this brought to mind the JDK. All well structured, neatly formatted and well documented. I’ll often just click thru to the source to get the nitty-gritty on a function, I rarely need to consult the actual docs!&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038810&quot; readability=&quot;3.5135135135135&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7567567567568&quot;&gt;&lt;tr readability=&quot;3.5135135135135&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;The fact that almost everyone uses the same style and standards through the go tools has made learning easy. I can dip into the most advanced package and make sense of what's going on quickly.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038563&quot; readability=&quot;4.1666666666667&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.0833333333333&quot;&gt;&lt;tr readability=&quot;4.1666666666667&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;As far as I know, parts of the compiler are still code automatically translated from C, so this may be part of the reason.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038819&quot; readability=&quot;3.6516853932584&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038871&quot; readability=&quot;4.4700460829493&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2350230414747&quot;&gt;&lt;tr readability=&quot;4.4700460829493&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;That doesn't invalidate the parent comment :) The code is pure Go, but parts of it originate in C by means of automatic translation during development of Go 1.4 (or whichever version it was).&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038997&quot; readability=&quot;1.4081632653061&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041879&quot; readability=&quot;9.6709585121602&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.8354792560801&quot;&gt;&lt;tr readability=&quot;9.6709585121602&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.8025751072961&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.918998527246&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I think one of the things that makes Go library code so easy to read is the lack of generics. Everything you need to understand the code is right in front of you, without the barrier of having to learn new sets of complicated abstractions or worrying that some obscure code in some other file impacts/is invisibly called by the function. With large code bases written in other programming languages, I have to spend an inordinate amount of time studying the code base and object relations before making changes.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;For me, code readability is such a high value that, on these grounds alone, I oppose the introduction of generics and hope the current proposals ultimately fail.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037867&quot; readability=&quot;7.8088235294118&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.9044117647059&quot;&gt;&lt;tr readability=&quot;7.8088235294118&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.2426470588235&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;16.163265306122&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;SQLite.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;and for this reason alone!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://www.sqlite.org/testing.html&quot; rel=&quot;nofollow&quot;&gt;https://www.sqlite.org/testing.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span class=&quot;commtext c00&quot;&gt;&lt;code&gt;    As of version 3.23.0 (2018-04-02), the SQLite library consists of approximately 
    128.9 KSLOC of C code. (KSLOC means thousands of &quot;Source Lines Of Code&quot; or, in 
    other words, lines of code excluding blank lines and comments.) 

    By comparison, the project has 711 times as much test code and test scripts - 
    91772.0 KSLOC.&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039103&quot; readability=&quot;15.574920297556&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;7.7874601487779&quot;&gt;&lt;tr readability=&quot;15.574920297556&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;13.141339001063&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;25.858541893362&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Automated testing is useful and good. But I really feel it's reached a lever of fetishisation that is quite concerning.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Testing code is code which needs to be written, read, maintained, refactored. Very often nowadays I have to wade through tests which test nothing useful, except syntax. Even worse, with developers who adopt the mock-everything approach, I often find tests which only verify that the &lt;em&gt;implementation&lt;/em&gt; is exactly the one they wrote, which is even worse: it makes refactoring a pain, because, even if you rewrote a method in a better way which produces exactly the results you wanted, the test will fail.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;So, the ratio of testing code vs implementation code is a completely wrong proxy for code quality.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;EDIT: I'm not criticising SQLite and their code quality - which I never studie - but the idea that you can judge code quality for a project just by the ratio of test code vs implementation code.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039213&quot; readability=&quot;16.084688726865&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;8.0423443634324&quot;&gt;&lt;tr readability=&quot;16.084688726865&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;20.815479528884&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;41.19101762365&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;They actually have to test to that degree to follow aviation standards (DO-178b [0]) because they're used in aviation equipment.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Dr. Hipp said he started really following it when Android came out and included SQLite and suddenly there were 200M mobile SQLite users finding edge cases: &lt;a href=&quot;https://youtu.be/Jib2AmRb_rk?t=3413&quot; rel=&quot;nofollow&quot;&gt;https://youtu.be/Jib2AmRb_rk?t=3413&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Lightly edited transcript here:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; It made a huge difference. That that was when Android was just kicking off. In fact Android might not have been publicly announced, but we had been called in to help with getting Android going with SQLite. [Actually], they had been publicly announced and there were a bunch of Android phones out and we were getting flooded with problems coming in from Android.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; I mean it worked great in the lab it worked great in all the testing and then [...] you give it to 200 million people and let them start clicking on their phone all day and suddenly bugs come up. And this is a big problem for us.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; So I started doing following this DO-178b process and it took a good solid year to get us there. Good solid year of 12 hour days, six days a week, I mean we really really pushed but we got it there. And you know, once we got SQLite to the point where it was at that DO-178b level, standard, we still get bugs but you know they're very manageable. They're infrequent and they don't affect nearly as many people.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; So it's been a huge huge thing. If you're writing an application deal ones, you know a website, a DO-178b/a is way overkill, okay? It's just because it's very expensive and very time-consuming, but if you're running an infrastructure thing like SQL, it's the only way to do it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;[0]: &lt;a href=&quot;https://youtu.be/Jib2AmRb_rk?t=677&quot; rel=&quot;nofollow&quot;&gt;https://youtu.be/Jib2AmRb_rk?t=677&lt;/a&gt; &quot;SQLite: The Database at the Edge of the Network with Dr. Richard Hipp&quot;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039303&quot; readability=&quot;5.6953125&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.84765625&quot;&gt;&lt;tr readability=&quot;5.6953125&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.64453125&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;12.867075664622&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;SQlite is very high quality software, but they use DO-178b &quot;inspired&quot; testing process. As far as I know they don't have version of software that is or can be used in safety critical parts despite their boasting.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;They say in their site that:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; Airbus confirms that SQLite is being used in the flight software for the A350 XWB family of aircraft.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Flight software does not imply safety critical parts of avionics. It can be the entertainment system or some logging that is not critical.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039992&quot; readability=&quot;16.747089262613&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;8.3735446313066&quot;&gt;&lt;tr readability=&quot;16.747089262613&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;16.254527813713&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;31.895150720839&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Correct. The key word is &quot;inspired&quot;. Multiple companies have run a DO-178B cert on SQLite, I am told, but the core developers did not get to participate, and I think the result was level-C or -D.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;While all that was happening 10+ years ago, I learned about DO-178B. I have a copy of the DO-178B spec within arms reach. And I found that, unlike most other &quot;quality&quot; standards I have encountered, DO-178B is actually useful for improving quality.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I originally developed the TH3 test suite for SQLite with the idea that I could sell it to companies interested in using SQLite in safety-critical applications, and thereby help pay for the open-source side of SQLite. That plan didn't work out as nobody ever bought it. But TH3 and the discipline of 100% MC/DC testing was and continues to be enormously helpful in keeping bugs out of SQLite, and so TH3 and all the other DO-178B-inspired testing and refactoring of SQLite has turned out to be well worth the thousands of hours of effort invested.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;The SQLite project is not 100% DO-178B compliant. We have gotten slack on some of the more mundane paperwork aspects. Also, we aggressively optimize the SQLite code base for performance, whereas in a real safety-critical application the focus would be on extreme simplicity at the cost of reduced performance.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;However, if some company does call us tomorrow and says that they want to purchase a complete set of DO-178B/C Level-A certification artifacts from us, I think we could deliver that with a few months of focused effort.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041403&quot; readability=&quot;5.0949720670391&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.5474860335196&quot;&gt;&lt;tr readability=&quot;5.0949720670391&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I just bought a copy of DO-178C after reading these posts here and the Wikipedia article on it. $290, but if it's good, it should be worth it, right?&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18043491&quot; readability=&quot;3.4971428571429&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7485714285714&quot;&gt;&lt;tr readability=&quot;3.4971428571429&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;240&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I haven't seen -C only DO-178B, though I'm told there isn't much difference. It is not a page-turner. It took me about a year to really understand it.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039365&quot; readability=&quot;4.2261904761905&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1130952380952&quot;&gt;&lt;tr readability=&quot;4.2261904761905&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.3809523809524&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.2556962025316&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Yeah DO-178B gives several levels for software from DALA (highest) to DALE (lowest). If DALA software fails the results are catastrophic if DALE fails there is no effect on the aircraft. Since DALE is usually just test equipment and such they might be at a DALD level. So still requires a lot of testing but not nearly to the level that DALA requires.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/DO-178B&quot; rel=&quot;nofollow&quot;&gt;https://en.wikipedia.org/wiki/DO-178B&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039459&quot; readability=&quot;6.4203821656051&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2101910828025&quot;&gt;&lt;tr readability=&quot;6.4203821656051&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.5859872611465&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8453608247423&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I think it's possible that parts of SQLite, for example file format in read only mode and few constant queries are certified as part of some safety critical software.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Hipp's Hwaci consulting company would probably help to do the work, but it has no relation to the SQLite as a library.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039327&quot; readability=&quot;4.3283582089552&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1641791044776&quot;&gt;&lt;tr readability=&quot;4.3283582089552&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Good point. The video I linked to merely says that he was contacted by someone in the aviation space about the standard, which I took to mean that it was used in avionics.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040023&quot; readability=&quot;3.3969849246231&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6984924623116&quot;&gt;&lt;tr readability=&quot;3.3969849246231&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.6708542713568&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.7093023255814&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;&quot;They actually have to test to that degree to follow aviation standards...&quot;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I didn't know that, and that's very cool.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Makes me think that the name SQLite is misnomer.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039151&quot; readability=&quot;4.7017045454545&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3508522727273&quot;&gt;&lt;tr readability=&quot;4.7017045454545&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.7017045454545&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8652694610778&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;While I agree in general I disagree here. If you read about the Sqlite tests you will find that they do test sensibly.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;One suite I'm particularly impressed with will run tests from zero bytes with slowly increasing available memory until the program passes. The tests verify that at no point the DB is corrupted by an OOM event.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039298&quot; readability=&quot;5.2924528301887&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6462264150943&quot;&gt;&lt;tr readability=&quot;5.2924528301887&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Just to clarify, I wasn't criticising sqlite, I was criticising the idea of judging their code quality &quot;for this reason alone!&quot; - ie that they have so much test code vs implementation.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040773&quot; readability=&quot;4.6534653465347&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3267326732673&quot;&gt;&lt;tr readability=&quot;4.6534653465347&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.6534653465347&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8421052631579&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Sure! Can't judge a book by its size.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;As a heuristic the code versus test-code ratio serves well as an indicator of quality. Just like consistent indentation does. You don't know whether a well-indented program is good. But if the indentation is inconsistent you'll expect worse.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039669&quot; readability=&quot;2.5407725321888&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039865&quot; readability=&quot;12.955801104972&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;6.4779005524862&quot;&gt;&lt;tr readability=&quot;12.955801104972&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.9406077348066&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;13.792899408284&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Yes, bad tests are bad. Yes, mocks are bad. Good tests, however, are good.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;To expound on that, designing for testability allows you to sidestep the need for mocks almost entirely, and forces you into easier, more reliable and more consistent code. Then when you choose to test it, the tests are simple, straightforward and valuable.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040790&quot; readability=&quot;3.1627906976744&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040542&quot; readability=&quot;8.4130434782609&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.2065217391304&quot;&gt;&lt;tr readability=&quot;8.4130434782609&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.0760869565217&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.846153846154&quot;&gt;&lt;span class=&quot;commtext c73&quot;&gt;Oh boy, I would give your comment an infinite number of up-votes. Yes, testing has reached fetish-like levels.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c73&quot;&gt;Some of the test code I've encountered recently has been more voluminous, complex and has taken more man hours to develop and maintain than the application or library it's assigned to.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c73&quot;&gt;For the love of God, develop the damned software! It's either going to work or it's not.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040956&quot; readability=&quot;4.6727748691099&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.336387434555&quot;&gt;&lt;tr readability=&quot;4.6727748691099&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.0746073298429&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.833333333333&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; has taken more man hours to develop and maintain than the application&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;But that is perfectly normal when developing quality code.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;There is no rule that says that test code development should take LESS time.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Certainly different applications have different quality requirements. Perhaps the software you are developing doesn't have that high requirements?&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041123&quot; readability=&quot;6.4779005524862&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2389502762431&quot;&gt;&lt;tr readability=&quot;6.4779005524862&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.164364640884&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.8816568047337&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Yeah, yeah. Just venting. The products I work on aren't the most important, but they certainly are quite important and most of the testing infrastructure that has been built thus far has a lot of goofy sh@t in it.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I just don't have a high tolerance for needless complexity and gee-whiz-look-what-I-can-do while the clock is running.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038525&quot; readability=&quot;4.5064377682403&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039095&quot; readability=&quot;3.6014234875445&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.8007117437722&quot;&gt;&lt;tr readability=&quot;3.6014234875445&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.6014234875445&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.86328125&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;A better comparison would be some sort of defect rate. Does SQLLite manage less defects per line of code per month (or whatever) than PostgreSQL with that test suite?&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Is there a distinction between the best codebase and the best test suite? Probably.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038394&quot; readability=&quot;5.2990654205607&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6495327102804&quot;&gt;&lt;tr readability=&quot;5.2990654205607&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Tangent: I always thought SLOC means &quot;significant lines of code&quot;. Since &quot;code&quot; is a shortand for &quot;source code&quot;, expanding SLOC as &quot;source lines of [source] code&quot; makes little sense, IMO.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038724&quot; readability=&quot;4.2546583850932&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1273291925466&quot;&gt;&lt;tr readability=&quot;4.2546583850932&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;&quot;Source lines&quot; includes lines with comments, empty lines and code. Source lines of code... Specifies only lines with code, no comments&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038993&quot; readability=&quot;3.5&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.75&quot;&gt;&lt;tr readability=&quot;3.5&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I always thought it meant &quot;single lines of code&quot;, like if line breaks added for formatting had been removed so every statement had its own line.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038740&quot; readability=&quot;0.70833333333333&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038782&quot; readability=&quot;2.3758389261745&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039544&quot; readability=&quot;5.1506849315068&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.5753424657534&quot;&gt;&lt;tr readability=&quot;5.1506849315068&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;As a point of information, I wasn't using monopoly in a particularly pejorative sense, but more just to explain the situation. Feel free to replace with a less loaded word in your head.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038745&quot; readability=&quot;1.4545454545455&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039033&quot; readability=&quot;1.2068965517241&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039116&quot; readability=&quot;4.1221374045802&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.0610687022901&quot;&gt;&lt;tr readability=&quot;4.1221374045802&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;It's like code coverage, though. Zero might indicate a problem, but lots doesn't necessarily mean &quot;good&quot;.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037881&quot; readability=&quot;1.4054054054054&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038231&quot; readability=&quot;2.1333333333333&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038401&quot; readability=&quot;4.9259259259259&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.462962962963&quot;&gt;&lt;tr readability=&quot;4.9259259259259&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;But to be honest, this is mostly fair criticism. Not sure why they need some of those things, but if they need it, then it's fine.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039717&quot; readability=&quot;6.6287425149701&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18044512&quot; readability=&quot;3.1384615384615&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039835&quot; readability=&quot;4.4545454545455&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2272727272727&quot;&gt;&lt;tr readability=&quot;4.4545454545455&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;The most interesting thing (IMO) left out of this page is the fact that D. Richard Hipp is the author of Fossil. This has a particular smell factor to it, not sure if it is a good or bad smell.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038576&quot; readability=&quot;1.421686746988&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038635&quot; readability=&quot;5.6310160427807&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8155080213904&quot;&gt;&lt;tr readability=&quot;5.6310160427807&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;This was a response to test coverage used as a benchmark. I see them both as an indirect project quality benchmark. Neither is directly representing the actual code quality but does indicate if it is a project that matches my view of a mature project. Sure, others will disagree - but the whole idea of quality in this context is subjective anyway.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037693&quot; readability=&quot;1.0176991150442&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039595&quot; readability=&quot;6.1864623243934&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.0932311621967&quot;&gt;&lt;tr readability=&quot;6.1864623243934&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.5351213282248&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.3720316622691&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;There's a lot to admire in OpenBSD but sometimes the peripheral tools they deliver don't work well. The example I know best is OpenNTPD (last link in your comment). It has a bunch of problems, including relatively poor clock discipline compared to other NTP implementations. And it doesn't even try to handle leap seconds. That causes problems on the machine itself which may or may not matter to you, but it's catastrophic if that OpenNTPD serves time to other servers. Unfortunately there's a bunch of OpenNTPD servers in the NTP Pool actively providing bad time. Some details from the 2016 leap second: &lt;a href=&quot;https://community.ntppool.org/t/leap-second-2017-status/59/10&quot; rel=&quot;nofollow&quot;&gt;https://community.ntppool.org/t/leap-second-2017-status/59/1...&lt;/a&gt;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Again I mostly admire OpenBSD. But OpenNTPD is not the best example of their work.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041886&quot; readability=&quot;3.5364806866953&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7682403433476&quot;&gt;&lt;tr readability=&quot;3.5364806866953&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Have you had a chance to look at systemd-timesyncd? I'm curious how it stacks up as a NTP client. Was thinking about switching my systems to it (from chrony) as I don't need the NTP server functionality.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040132&quot; readability=&quot;4.4871794871795&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2435897435897&quot;&gt;&lt;tr readability=&quot;4.4871794871795&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.5897435897436&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.8356807511737&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;This is seriously bad, but I do get why they thought OpenNTPd was necessary (bad/perfectible code in the other implementations).&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Maybe I'll check that at home (where I replaced FreeBSD's ntpd with OpenNTPd).&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040430&quot; readability=&quot;5.1564147627417&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.5782073813708&quot;&gt;&lt;tr readability=&quot;5.1564147627417&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.1564147627417&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.8474264705882&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Yeah the stock old ntpd had a lot of unused code and various security problems over the years. It makes sense OpenBSD would replace it. Just a shame they didn't do it completely. I think that describes a lot of OpenBSD tools; you're trading off some functionality for very good security.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;There are better NTP implementations now. Chrony is great, it's the default in Ubuntu now. NTPsec is coming along although I haven't tried to use it myself. Also good ol' ntpd is greatly improved.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://chrony.tuxfamily.org/&quot; rel=&quot;nofollow&quot;&gt;https://chrony.tuxfamily.org/&lt;/a&gt; &lt;a href=&quot;https://www.ntpsec.org/&quot; rel=&quot;nofollow&quot;&gt;https://www.ntpsec.org/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038314&quot; readability=&quot;3.5757575757576&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7878787878788&quot;&gt;&lt;tr readability=&quot;3.5757575757576&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.469696969697&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8117154811715&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Just wanted to +1 this.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Once had to make some changes to OpenSSH for an internal project and it was surprisingly easy to find the relevant code and make the necessary changes. One of the few times my code worked on the first compile.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037741&quot; readability=&quot;4.5145631067961&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2572815533981&quot;&gt;&lt;tr readability=&quot;4.5145631067961&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext cdd&quot;&gt;for sure not. OpenBSD makes no attempt to use proper performance which is critical for a kernel. there are so many naive ad-hoc data structures and algos, it's a shame to walkthrough.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037872&quot; readability=&quot;3.2&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038899&quot; readability=&quot;4.247311827957&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1236559139785&quot;&gt;&lt;tr readability=&quot;4.247311827957&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;How is performance related to code quality. That makes no sense. If anything, if you had to inline ASM for example, the code would suffer from readability.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038956&quot; readability=&quot;1.3978494623656&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039065&quot; readability=&quot;3.3988439306358&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039474&quot; readability=&quot;2.4&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2&quot;&gt;&lt;tr readability=&quot;2.4&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Is the gnu-coreutils true much faster? I have a hard time seeing how return 0 can be so slow.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039218&quot; readability=&quot;10.588785046729&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.2943925233645&quot;&gt;&lt;tr readability=&quot;10.588785046729&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;12.032710280374&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;23.834254143646&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I did say “one of the goals”.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I don’t see how those examples are relevant. Why would that last one be faster?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I agree that the OpenBSD code here is good, no more and no less than needed.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I assumed the grandparent was referring to cases where an O(n) algorithm is used where it might be O(log n) or O(1) with just a little more effort. It’s a tradeoff, sure, and in some cases linear searches can work surprisingly well, but in general I think this kind of thing should always be considered in good code.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Micro-optimizations like inline assembly for inner loops may or may not be a good idea, depending on the application. All else being equal, I’d certainly agree that good clean code would not use assembly.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039399&quot; readability=&quot;4.5418326693227&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2709163346614&quot;&gt;&lt;tr readability=&quot;4.5418326693227&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.5418326693227&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8051948051948&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;How is the coreutils true faster?&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I would expect the openbsd true to be the fastest, it doesn't need to spawn a subshell and it doesn't do more than the posix specification requires (afaik --help/--version should be ignored).&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039455&quot; readability=&quot;3.364238410596&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.682119205298&quot;&gt;&lt;tr readability=&quot;3.364238410596&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;240&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.364238410596&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.7307692307692&quot;&gt;&lt;span class=&quot;commtext c5a&quot;&gt;Experience shows it's faster. It's just weird, but it's like that.&lt;/span&gt;
&lt;pre&gt;
&lt;span class=&quot;commtext c5a&quot;&gt;&lt;code&gt;  time { for i in $(seq 1 10000); do /path/to/true; done; }&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039580&quot; readability=&quot;2.3823529411765&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040538&quot; readability=&quot;1.275&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038983&quot; readability=&quot;10.68345323741&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.341726618705&quot;&gt;&lt;tr readability=&quot;10.68345323741&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;9.3480215827338&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;18.499061913696&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Its older than some HN posters, but the GPLed DOOM source code was one I liked.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;The performance reached by the game was considered impossible until Carmack did show us otherwise. So I expected lots of ASM and weird hacks, especially as compiler optimization wasnt as good as it is today.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Surprise, surprise, the thing was easy to read, easy to get going, easy to port, reasonablye documented . It has shown me what a goog balance between nice code and usable code is.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;If you want tho browse: &lt;a href=&quot;https://github.com/id-Software/DOOM&quot; rel=&quot;nofollow&quot;&gt;https://github.com/id-Software/DOOM&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039088&quot; readability=&quot;3.1304347826087&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040492&quot; readability=&quot;2.376&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042534&quot; readability=&quot;7.013698630137&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.5068493150685&quot;&gt;&lt;tr readability=&quot;7.013698630137&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Actually, Hypeman is using this correctly in my opinion. We all knew the code would be good, it was only him that doubted it. So its not surprising to us, the reader, that the code is good.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039318&quot; readability=&quot;5.5512465373961&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7756232686981&quot;&gt;&lt;tr readability=&quot;5.5512465373961&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.0886426592798&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.8516320474777&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;You are reading cleaned up source code that only compiles and runs on Linux. That's why it looks nice.&lt;/span&gt;
&lt;pre&gt;
&lt;span class=&quot;commtext c00&quot;&gt;&lt;code&gt;  Many thanks to Bernd Kreimeier for taking the time to clean up the
  project and make sure that it actually works.  Projects tends to rot if
  you leave it alone for a few years, and it takes effort for someone to
  deal with it again.&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039395&quot; readability=&quot;7.3066666666667&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.6533333333333&quot;&gt;&lt;tr readability=&quot;7.3066666666667&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.48&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.801444043321&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I didnt have interrnet at the time so I didn't check github 20 years ago ;-)&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;On the more serous side, i wanted to say something about the TODOs as example of the balance, but couldnt find any. I thought i was confusing with quake, but the cleanup might explain it better.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039225&quot; readability=&quot;2.0704225352113&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039627&quot; readability=&quot;2.0795454545455&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039513&quot; readability=&quot;0.46153846153846&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039205&quot; readability=&quot;2.5317919075145&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2658959537572&quot;&gt;&lt;tr readability=&quot;2.5317919075145&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;The DOOM code is so straightforward. You don't ever experience that feeling of having zero understanding of the code when you look into a file.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037782&quot; readability=&quot;14.829991281604&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;7.4149956408021&quot;&gt;&lt;tr readability=&quot;14.829991281604&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;21.750653879686&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;42.905328049317&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;NetBSD.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Why? I was able to do substantial changes to the kernel when I was a teenager (late 90s), mostly on my first try. There was no giant wall of abstraction I had to climb over or some huge swath of mutually interacting code I had to comprehend. There was also nothing that required fancy code navigation and the creation of something like the ctags database in order to find out what on earth was happening.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;No action at a distance or lasagna style dereferencing or mysterious type names that are just typedef'd and #define'd around dozens of times back to something basic like char. No fancy obscure GNU preprocessor extensions or exotic programming patterns.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Nothing had obtuse documentation that tried my patience or required much more than enthusiasm and basic C knowledge.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I did things like got a wireless card working from code written for one with a similar chipset and got various other things like the IrDA transmitter on my laptop at the time to do a slattach and thus work as a primitive wireless network - all in the late 90s.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I likely had no idea what, say, the difference between network byte order and host byte order was at the time or how the 802.11b protocol worked or what a radiotap header was or any of that. The separation of concerns was so good however, that none of that knowledge was actually needed.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Compare that to say, the Qualcomm compatible WWAN I just dealt with over the past few weeks where I needed to have in-depth knowledge of an exhaustive number of things (very specific chipset and network details) to get a basic ipv4 address working. Then I needed to read up on GNSS technology and NMEA data to debug codes over USBmon to get the GPS from the wwan working. Then after I had the qmi kernel modules doing what I wanted and the qmi userland toolsets, I had to write some python scripts to talk to dbus to get the data from the modemmanager that I needed in order to log the GPS. All the maintainers of these pieces were very nice and helpful and I have nothing negative to say. This is just how it usually is these days.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Back then however, I wasn't a good programmer, I was likely pretty terrible in fact but with the NetBSD codebase I was able to knockout whatever I wanted every time, fast, on a 486.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I miss those days.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041788&quot; readability=&quot;5.5880597014925&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7940298507463&quot;&gt;&lt;tr readability=&quot;5.5880597014925&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.1910447761194&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.8730158730159&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; No action at a distance or lasagna style dereferencing or mysterious type names that are just typedef'd and #define'd around dozens of times back to something basic like char. No fancy obscure GNU preprocessor extensions or exotic programming patterns.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Ah, I see you've also looked at the Linux kernel code.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037878&quot; readability=&quot;4.5689655172414&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2844827586207&quot;&gt;&lt;tr readability=&quot;4.5689655172414&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;What's your relation with it nowadays? I'm very curious about NetBSD but never tried it yet. I sincerely wonder what's your opinion on it now, and why you speak about the situation only as &quot;those days&quot; now? :)&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037961&quot; readability=&quot;6.551724137931&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2758620689655&quot;&gt;&lt;tr readability=&quot;6.551724137931&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.1477832512315&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.8694516971279&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I have no idea, haven't kept up with it. I'd recommend 1.x (&amp;lt;=4) any day though, simply for the education alone.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I don't really use it these days because I need systems that future cheap devs can maintain and once you enter userland it takes commitment and time I simply don't have to stay with netbsd.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Debian permits me to usually not have to care and that's pretty invaluable&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038443&quot; readability=&quot;5.6215384615385&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8107692307692&quot;&gt;&lt;tr readability=&quot;5.6215384615385&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.2123076923077&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;5.983498349835&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;This is not necessarily about the code, but I've been really impressed for a while by the lodash project and its maintainer's dedication to constantly keep the number of open issues at 0. Any issues get dealt with at record speed, it's quite a sight to see.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://github.com/lodash/lodash/issues&quot; rel=&quot;nofollow&quot;&gt;https://github.com/lodash/lodash/issues&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040397&quot; readability=&quot;8.2412790697674&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.1206395348837&quot;&gt;&lt;tr readability=&quot;8.2412790697674&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;JDD, the maintainer, is also incredibly devoted and overall a nice guy to talk to. He has something like 5 years (and counting) of making a commit every single day, including weekends and holidays and sick days. They may not always be world-changing commits, but it still shows an incredible amount of dedication&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039096&quot; readability=&quot;2.2121212121212&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039139&quot; readability=&quot;6.2540983606557&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.1270491803279&quot;&gt;&lt;tr readability=&quot;6.2540983606557&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;With such a big project, being quick to hand out wontfix isn't necessarily a bad thing. To be honest, seeing as this project is used by a huge part of the… rather diverse JS crowd, 15% wontfix is &lt;em&gt;astoundingly low&lt;/em&gt;.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039378&quot; readability=&quot;3.1067961165049&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038977&quot; readability=&quot;2.5419847328244&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2709923664122&quot;&gt;&lt;tr readability=&quot;2.5419847328244&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;It's not always a good thing. In the haste of fixing things introspection of root causes may be neglected...&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038806&quot; readability=&quot;0.93617021276596&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037775&quot; readability=&quot;13.08066759388&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;6.5403337969402&quot;&gt;&lt;tr readability=&quot;13.08066759388&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.3602225312935&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.0242510699001&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Strictly talking about code quality, I will nominate RCP100, which is a small, virtually unknown, now-abandoned routing software written in C [0]. I started programming with C way back in the 90s, and this is one of only &lt;em&gt;two&lt;/em&gt; projects I can recall being immediately struck by the beauty of the code (Redis being the other). I know almost nothing about the author but he seems not to want to be known by name. You can browse the source on Github [1], which I uploaded myself, since you can only get a tarball from sourceforge. Anyway, as someone else mentions, C is usually a mess, but RCP100 struck me as beautiful.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;[0] &lt;a href=&quot;http://rcp100.sourceforge.net/&quot; rel=&quot;nofollow&quot;&gt;http://rcp100.sourceforge.net/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;[1] &lt;a href=&quot;https://github.com/curtiszimmerman/rcp100&quot; rel=&quot;nofollow&quot;&gt;https://github.com/curtiszimmerman/rcp100&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041250&quot; readability=&quot;6.4807121661721&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2403560830861&quot;&gt;&lt;tr readability=&quot;6.4807121661721&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.0178041543027&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.809523809524&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Hi Curtiz,&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Thanks for uploading RCP100. Your comment is a timely one. I wanted to learn how a router works and is built and was looking for a simpler implementation.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Can you recommend any resources from which I could learn more about network programming, so that I could understand RCP100 code better?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Thanks!&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038559&quot; readability=&quot;1.2647058823529&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039447&quot; readability=&quot;4.2682926829268&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1341463414634&quot;&gt;&lt;tr readability=&quot;4.2682926829268&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I actually did send fan mail to the author, heh, thinly-disguised as a courtesy to let them know that I mirrored their project on Github.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041073&quot; readability=&quot;5.1968503937008&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.5984251968504&quot;&gt;&lt;tr readability=&quot;5.1968503937008&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.2283464566929&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;16.425&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Going to throw Elixir Lang into the mix.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;- The tooling is excellent.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;- The code is well-documented and readable.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;- The core team committed to never needing to introduce breaking changes.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;The Elixir community tends to produce work that is actually considered &quot;Done&quot;. An elixir package is not stale when it hasn't seen a commit in a few months. Instead, the feeling is: &quot;It's feature complete and only needs maintenance from here on out.&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://github.com/elixir-lang/elixir&quot; rel=&quot;nofollow&quot;&gt;https://github.com/elixir-lang/elixir&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041959&quot; readability=&quot;2.625&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.3125&quot;&gt;&lt;tr readability=&quot;2.625&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.5&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.7865853658537&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; The core team committed to never needing to introduce breaking changes.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Is this why Elixir seems to have many different ways of doing the same thing though?&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042222&quot; readability=&quot;6.4302325581395&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2151162790698&quot;&gt;&lt;tr readability=&quot;6.4302325581395&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I think that's one reason. The other is that classic erlang (Elixir is built on top of the erlang beam vm) sometimes does things one way but elixir has a more elegant way of doing the same thing, however, in elixir you can still call into erlang libraries to achieve the same thing if that's more familiar to you.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038500&quot; readability=&quot;4.6426735218509&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039077&quot; readability=&quot;5.1428571428571&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.5714285714286&quot;&gt;&lt;tr readability=&quot;5.1428571428571&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.8571428571429&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.7278911564626&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;It's not clean at all. Thousands of different styles, no single convention on function-naming, etc.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Want a clean kernel, go look at the BSDs.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041871&quot; readability=&quot;5.6901408450704&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8450704225352&quot;&gt;&lt;tr readability=&quot;5.6901408450704&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.7417840375587&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8894348894349&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;One thing the Linux kernel has going for it is that there are a lot of books that describe how the various parts work and how to use the various internal interfaces. I can't think of any other open source project that has multiple books on how to contribute.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;(Sadly, most of those good kernel books were written in the 90's and early 2000's. I don't know if there are any recent kernel hacking books.)&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039690&quot; readability=&quot;4.5483870967742&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037859&quot; readability=&quot;6.4192139737991&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2096069868996&quot;&gt;&lt;tr readability=&quot;6.4192139737991&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Lua. It's has everything a good C project should have: small size, simple build system, portability by using the simplest constructs and not ifdefs, a clear and well define scope that none dares trespassing.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039622&quot; readability=&quot;0.86046511627907&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038933&quot; readability=&quot;8.5393258426966&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.2696629213483&quot;&gt;&lt;tr readability=&quot;8.5393258426966&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Python: I really like requests, scikit-learn, the Path module from the stardard library, Keras, Django.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;C: Redis, SQLite, LUA.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Java: Joda Time, Guava&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040037&quot; readability=&quot;2.0645161290323&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039089&quot; readability=&quot;4.3571428571429&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1785714285714&quot;&gt;&lt;tr readability=&quot;4.3571428571429&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.3571428571429&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.758064516129&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Joda Time is one of my all time favourite libraries.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;After struggling with JVM stdlib time nonsense, JodaTime was a breath of fresh air and actually made programming with time fun.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039246&quot; readability=&quot;4.4036697247706&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2018348623853&quot;&gt;&lt;tr readability=&quot;4.4036697247706&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Java 8 time module is now considered the replacement for JodaTime for new projects. It is separate from the older Java time libraries, and fixes many of the problems in Joda. Give it a try!&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037736&quot; readability=&quot;5.3784860557769&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6892430278884&quot;&gt;&lt;tr readability=&quot;5.3784860557769&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.4820717131474&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8026315789474&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;When we take the language into consideration, unwound like to mention Redis.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Often codebases written in C are a a mess to understand, a mess to read. The Redis Source Code is understandable even without deep knowledge of C&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040282&quot; readability=&quot;2.3478260869565&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041654&quot; readability=&quot;4.5676691729323&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2838345864662&quot;&gt;&lt;tr readability=&quot;4.5676691729323&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Although still in beta, I'd like to add BearSSL to the mix of well written and documented C libraries. In particular compared to the OpenSSL &quot;documentation&quot;. It's also nice to see an TLS implementation without any memory allocations at all.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037798&quot; readability=&quot;3.3731343283582&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6865671641791&quot;&gt;&lt;tr readability=&quot;3.3731343283582&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I'd prefer if people said &lt;em&gt;why&lt;/em&gt; they consider the code good, instead of throwing out a bunch of random projects.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042496&quot; readability=&quot;1.0545454545455&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040218&quot; readability=&quot;8.9347079037801&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.46735395189&quot;&gt;&lt;tr readability=&quot;8.9347079037801&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.4879725085911&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;16.65&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Sequel, a database ORM for Ruby: &lt;a href=&quot;https://github.com/jeremyevans/sequel&quot; rel=&quot;nofollow&quot;&gt;https://github.com/jeremyevans/sequel&lt;/a&gt;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;The quality of the code is amazing, it's simple to use and even simpler to look through the docs to reason about.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I also want to praise the author of the library (Jeremy Evans), his support through the IRC is second to none, you can talk directly with him pretty much on a daily basis.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;And even after 8+ years, the project is still constantly being updated (last commit 4 days ago). I haven't seen too many project of this calibre especially when it is ran mostly by a single person.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038681&quot; readability=&quot;4.2924528301887&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040946&quot; readability=&quot;2.4770642201835&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2385321100917&quot;&gt;&lt;tr readability=&quot;2.4770642201835&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;+1 for s2n. It's one of the select few C codebases that is actually a pleasure to read.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040697&quot; readability=&quot;6.3777777777778&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.1888888888889&quot;&gt;&lt;tr readability=&quot;6.3777777777778&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Julia. Julia / Julialang is so pedantically tested and the names are pretty meticulously chosen. The algorithms in Base are almost all generic and handle a very wide variety of inputs without catering to them. If you want to learn Julia, along with good software engineering, looking at the Base library is quite recommended.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041977&quot; readability=&quot;3.7030716723549&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18044716&quot; readability=&quot;7.6808510638298&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.8404255319149&quot;&gt;&lt;tr readability=&quot;7.6808510638298&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.8005319148936&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.9379310344828&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Julia requires patched versions of things like LLVM in order for all tests to pass because upstreaming bugfixes take time. This has given some Linux package managers an issue since they try to build using system LLVM/OpenBLAS/etc. with the known bugs. I agree this does cause some distribution problems, but as a scientist and mathematician I do like that the standard distribution of Julia uses the most numerically correct versions (as of current knowledge) of the dependencies as it can, and has a test to identify known potential issues. To me this is good practice.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;But anyways, I was talking about the Julia Base library and its numerical routines. I just look at the Julia code and don't touch the build systems.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042841&quot; readability=&quot;7.7199391171994&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.8599695585997&quot;&gt;&lt;tr readability=&quot;7.7199391171994&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;11.097412480974&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;21.827315541601&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Typescript&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Even though it’s a fairly complex transpiler, the authors did a good job modularizing and leaving lots of contextual comments on what each part does.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Also typescript baseline tests are a simple but very effective way to get lots of coverage on the compiler.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I’ve read source code for Babel, typescript, coffeescript and flow. Typescript architecture stands out.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Typescript not only does fascinating things like magical code completion abilities and great tooling for IDEs but their codebase has been an inspiration for me to build better front end code.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I may be a bit biased since I’ve worked at Microsoft before.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18044446&quot; readability=&quot;6.4232209737828&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2116104868914&quot;&gt;&lt;tr readability=&quot;6.4232209737828&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I found the TypeScript type checker pretty hard to read through, though it may be my lack of, well, almost any knowledge about type theory. I didn't dig much into the other parts of the codebase however. What parts of it do you enjoy reading?&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037662&quot; readability=&quot;6.491935483871&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2459677419355&quot;&gt;&lt;tr readability=&quot;6.491935483871&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.491935483871&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;12.813218390805&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;There are too many in very different domains and languages.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;However, I opt for jQuery here. It is one of the greatest examples of how constant refactoring and thoughful usage of design pattern get you a very long way.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;If you are designing JavaScript libraries, pls have a look at jQuery. So many great design decisions aka great code quality.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038922&quot; readability=&quot;4.3700787401575&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1850393700787&quot;&gt;&lt;tr readability=&quot;4.3700787401575&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Pushing all dom manipulation through global evals seems like the exact opposite of thoughtful design to me. I have a long list of places where I want to implement strict CSPs, but can’t purely for minor use of jQuery.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039925&quot; readability=&quot;7.4111675126904&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.7055837563452&quot;&gt;&lt;tr readability=&quot;7.4111675126904&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Granted I haven't read much open source code but when I was working in Flask, I found the source code to be awesomely clear and well-documented. I actually learned quite a bit about Python by reading Flask code. Also, no-one could explain &quot;g&quot; in a way that made sense, but the source code made it obvious. Would recommend reading it if you're into Python at all.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039973&quot; readability=&quot;0.37037037037037&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040089&quot; readability=&quot;1.4084507042254&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039623&quot; readability=&quot;2.865671641791&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039705&quot; readability=&quot;1.3882352941176&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038466&quot; readability=&quot;1.4299065420561&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040419&quot; readability=&quot;4.5390070921986&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2695035460993&quot;&gt;&lt;tr readability=&quot;4.5390070921986&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;qmail cheats a bit because it's so simple, that most people end up using something with messy code on top. Not that I don't think it's a sound engineering decision but when comparing it's code cleanliness with other SMTP stacks it needs to be mentioned.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038975&quot; readability=&quot;1.1153846153846&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039150&quot; readability=&quot;2.0721649484536&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040554&quot; readability=&quot;5.3542600896861&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.677130044843&quot;&gt;&lt;tr readability=&quot;5.3542600896861&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;They're better than most C software of the era, but not better than qmail --- qmail has a better vulnerability record than Postfix does (perhaps because it does less, but that's beside the point).&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038753&quot; readability=&quot;2.3181818181818&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038818&quot; readability=&quot;7.3846153846154&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.6923076923077&quot;&gt;&lt;tr readability=&quot;7.3846153846154&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.1538461538462&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.8933333333333&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Nice to see you include / mention docs and community. I believe a code-based product has a UX. That UX is the code (with comments), documentation and community. That UX is your (i.e., a dev / engineer) end to end experience with &quot;the product.&quot; It's not simply the code.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Put another way, there's more to a product that's easy and sensible to work with than code quality.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038982&quot; readability=&quot;5.6437847866419&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.821892393321&quot;&gt;&lt;tr readability=&quot;5.6437847866419&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.5250463821892&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;14.852941176471&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I definitely admired PostgreSQL's code when I first looked at it.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Projects written in C require a fair amount of care and discipline to be scaled up to larger codebases and teams. PostgreSQL is such a codebase.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I've also seen various parts of Spring's codebase and found all of it to be consistently solid and careful. They take a lot of care to structure carefully and comment immaculately.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Disclosure: I work for Pivotal, which sponsors Spring. Which is why Spring is highly visible in my working life.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038322&quot; readability=&quot;2.304&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039147&quot; readability=&quot;4.5238095238095&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2619047619048&quot;&gt;&lt;tr readability=&quot;4.5238095238095&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I've been working with LLVM for a few years and I still find the code difficult to navigate and badly documented. And every single function's argument list is a random jumble of pointers and references (almost all arguments &lt;em&gt;should&lt;/em&gt; be references, but many aren't).&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040763&quot; readability=&quot;8.6564885496183&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.3282442748092&quot;&gt;&lt;tr readability=&quot;8.6564885496183&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.193893129771&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.8183254344392&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Indeed. And it's not just medium to low-level stuff that's not well documented, it's the high-level stuff too. I personally don't mind that much if I have to spend a few minutes to understand something on a a very local scope, but if the bigger picture is unclear, that's quite bad. For LLVM one largely has to grep for a bunch of other users and try to figure it out from that.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;While I think it has some clear deficiencies, I found a lot of e.g. the optimization passes in GCC a lot easier to read. It's probably above par, but e.g. &lt;a href=&quot;https://github.com/gcc-mirror/gcc/blob/master/gcc/gimple-ssa-store-merging.c&quot; rel=&quot;nofollow&quot;&gt;https://github.com/gcc-mirror/gcc/blob/master/gcc/gimple-ssa...&lt;/a&gt; is really well explained imo.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038430&quot; readability=&quot;4.4230769230769&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2115384615385&quot;&gt;&lt;tr readability=&quot;4.4230769230769&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;LLVM is remarkable; the domain is both difficult and critical. Still, the code is consistent enough that I can often guess how things work based on what I think would be reasonable!&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038763&quot; readability=&quot;1.4623655913978&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038995&quot; readability=&quot;1.008&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042088&quot; readability=&quot;3.7306397306397&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.8653198653199&quot;&gt;&lt;tr readability=&quot;3.7306397306397&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.7306397306397&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.875&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;The coding standard for variables in LLVM drives me nuts. Both class names and variables names must be upper camel case so if you're lucky the code looks like this:&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Analyzer TheAnalyzer;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;but more commonly:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Analyzer A;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;with A being utterly unhelpful to read many lines later.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038968&quot; readability=&quot;2.1611374407583&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037636&quot; readability=&quot;0.60606060606061&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038908&quot; readability=&quot;8.3434650455927&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.1717325227964&quot;&gt;&lt;tr readability=&quot;8.3434650455927&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;We try to keep up, but the truth is that it's a 15 years old C++ codebase implementing some weird hardware in even weirder ways. We're far from where we'd want to be code quality wise -- close to no automating testing infrastructure, code is full of module-level globals, inconsistent conventions, etc.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039739&quot; readability=&quot;4.4791666666667&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2395833333333&quot;&gt;&lt;tr readability=&quot;4.4791666666667&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.5833333333333&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.8394495412844&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;How would you even test an emulator except manually? It seems like automated website testing, but even worse. I guess screenshots + scripted input?&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;That seems like it'd be terrible to try to get running reliably.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038439&quot; readability=&quot;3.5046728971963&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041681&quot; readability=&quot;10.648255813953&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.3241279069767&quot;&gt;&lt;tr readability=&quot;10.648255813953&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.7441860465116&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;14.887892376682&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I particularly like reading code from Upspin (upspin.io). Its probably partially because I think the project design is interesting and write go. Regardless, its a great ground up Go project by some of the original Go authors and contributors.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Very well organized code and it feels like they got the project off the ground, fixed bugs for a few months, and now have largely trailed off from maintaining it largely because it just works (I use it) which lends some credibility to their coding style. Of course, I'd like to see the project evolve conceptually, but, right now it does what it says it does reliably for a project that hasn't even cut a single release.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038729&quot; readability=&quot;0.80851063829787&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037795&quot; readability=&quot;1.7175572519084&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18044587&quot; readability=&quot;0.77586206896552&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038873&quot; readability=&quot;3.2056737588652&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6028368794326&quot;&gt;&lt;tr readability=&quot;3.2056737588652&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Knuth did a good job on TeX, and it has been closely examined for many years since so there are very few bugs.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039144&quot; readability=&quot;3.9285714285714&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039679&quot; readability=&quot;14.707070707071&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;7.3535353535354&quot;&gt;&lt;tr readability=&quot;14.707070707071&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;17.005050505051&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;33.473684210526&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Are you sure you aren't thinking of LaTeX?&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;TeX (plain TeX, not LaTeX) has phenomenally good logging and error messages IMO — everything you need is there, each error message comes in a “formal” and “informal” form and points you to exactly the place the error happened, and TeX lets you fix things on-the-fly without restarting the program. All this of course assumes you use TeX the way it is described in the manual (The TeXbook). The experience is opposite with LaTeX, so I find it worth giving up all the convenience of LaTeX just for the wonderful experience with TeX.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;As for “the TeX language”, there is no such thing. As Knuth has said many times, TeX is designed for typesetting, not programming. Sure it has macros to save some typing, but if you're writing elaborate programs in it (as is nearly inevitable if you're using LaTeX) you're doing something wrong. Knuth said:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; When I put in the calculation of prime numbers into the TeX manual I was not thinking of this as the way to use TeX. I was thinking, “Oh, by the way, look at this: dogs can stand on their hind legs and TeX can calculate prime numbers.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;But of course LaTeX does every such thing imaginable :-)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;More on TeX not being a programming language: &lt;a href=&quot;https://cstheory.stackexchange.com/a/40282/115&quot; rel=&quot;nofollow&quot;&gt;https://cstheory.stackexchange.com/a/40282/115&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;On the TeX error experience: &lt;a href=&quot;https://news.ycombinator.com/item?id=15734980&quot; rel=&quot;nofollow&quot;&gt;https://news.ycombinator.com/item?id=15734980&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040588&quot; readability=&quot;11.12783171521&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.5639158576052&quot;&gt;&lt;tr readability=&quot;11.12783171521&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.9878640776699&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;17.714285714286&quot;&gt;&lt;span class=&quot;commtext c73&quot;&gt;&lt;em&gt;Plain TeX&lt;/em&gt; is different to &lt;em&gt;TeX&lt;/em&gt;:&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c73&quot;&gt;...&quot;virgin&quot; TeX...knows just primitive commands, no macros. Plain TeX is the set of macros (developed by Knuth) which makes TeX usable in everyday life of a typist. ... The available commands can be classified into primitive commands and macros. ... The &quot;virgin&quot; TeX knows only the primitive commands. ... Formats (plain TeX, LaTeX, etc.) extend TeX's vocabulary by defining macros. ...For example, plain TeX defines macros \item, \rm, \newdimen, \loop, etc. Plain TeX defines about 600 macros.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c73&quot;&gt;&lt;a href=&quot;https://tex.stackexchange.com/questions/97520/what-is-plain-tex&quot; rel=&quot;nofollow&quot;&gt;https://tex.stackexchange.com/questions/97520/what-is-plain-...&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040771&quot; readability=&quot;9.2240300375469&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.6120150187735&quot;&gt;&lt;tr readability=&quot;9.2240300375469&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.4568210262829&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;12.234314980794&quot;&gt;&lt;span class=&quot;commtext c73&quot;&gt;Yes of course; see this answer I wrote about typesetting with “virgin” TeX: &lt;a href=&quot;https://tex.stackexchange.com/a/388360/48&quot; rel=&quot;nofollow&quot;&gt;https://tex.stackexchange.com/a/388360/48&lt;/a&gt; (it's not easy). “Virgin” TeX is never (and was never) used by typical users, and is used only by the system administrator (or these days, the people behind the TeX distributions) to pre-load formats (like plain or LaTeX).&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c73&quot;&gt;Knuth wrote both the TeX program and the “plain” set of macros; when you start `tex` it is with `plain` that it starts up, and &lt;em&gt;The TeXbook&lt;/em&gt; describes both the TeX program and the plain format without being careful to distinguish what comes from where (you have to look at Appendix B to see the proper definition of plain.tex), so when we speak of TeX as Knuth intended/imagined it to be used, it is plain TeX that is meant.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037689&quot; readability=&quot;1.3114754098361&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038398&quot; readability=&quot;4.3243243243243&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1621621621622&quot;&gt;&lt;tr readability=&quot;4.3243243243243&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;As a C beginner getting into writing larger projects, especially in that sort of context, the quake source has been my reference on how to structure my code.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038366&quot; readability=&quot;3.4450867052023&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7225433526012&quot;&gt;&lt;tr readability=&quot;3.4450867052023&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Oh, this +1. I ported it to another C dialect (test case for the compiler) and found those parts I touched well structured and easy to understand.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037768&quot; readability=&quot;5.3038674033149&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6519337016575&quot;&gt;&lt;tr readability=&quot;5.3038674033149&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.4198895027624&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.7239263803681&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I really liked the clojure core, I read it quite a lot when learning the language.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I have heard good things about sqlite, and some day, I plan to read it :-)&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037733&quot; readability=&quot;2.5822784810127&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2911392405063&quot;&gt;&lt;tr readability=&quot;2.5822784810127&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Python core libraries have great code. You can open pretty much any module and be able to understand the source without much context.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038663&quot; readability=&quot;3.2972972972973&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6486486486486&quot;&gt;&lt;tr readability=&quot;3.2972972972973&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I don't know how you can say this. The standard lib isn't even very pythonic, let alone &quot;great&quot; along other dimensions.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038981&quot; readability=&quot;6.520782396088&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.260391198044&quot;&gt;&lt;tr readability=&quot;6.520782396088&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.1234718826406&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.8697916666667&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Agreed. Almost every time I've looked deeply into stdlib code I was surprised by how hard to follow it is and how frequently antipatterns are employed. Doubly so for anything near a C module.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I consider the Python stdlib in a similar vein as the C++ stdlib or Boost: Yes, some useful bits in there, but (1) lots of rot (2) you don't want to have your code look anything like it.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037801&quot; readability=&quot;3.3669064748201&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6834532374101&quot;&gt;&lt;tr readability=&quot;3.3669064748201&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;The only core library code I needed to look at was namedtuple, which is pretty incomprehensible even with context.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038299&quot; readability=&quot;3.1724137931034&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037895&quot; readability=&quot;4.38&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039068&quot; readability=&quot;3.4424242424242&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7212121212121&quot;&gt;&lt;tr readability=&quot;3.4424242424242&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I agree with Flask, much more readable code than Django for example. I would also add Django Rest Framework (and Tom Christie) to the list.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039971&quot; readability=&quot;2.3534482758621&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039054&quot; readability=&quot;4.5627376425856&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2813688212928&quot;&gt;&lt;tr readability=&quot;4.5627376425856&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Agreed with the rest, I've ended up reading pypy's implementation of some functions sometimes to see how it works after trying CPython first. From the few I've read I'd say pypy looks nice by the way (I'm talking about standard library).&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037769&quot; readability=&quot;5.0310559006211&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.5155279503106&quot;&gt;&lt;tr readability=&quot;5.0310559006211&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I’m no C expert so I’m somewhat guessing, to me, PostgreSQL source looks remarkably clean, well structured and nicely commented.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039847&quot; readability=&quot;2.6149732620321&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.307486631016&quot;&gt;&lt;tr readability=&quot;2.6149732620321&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Golang and Kubernetes have been highly regarded as high quality. I particularly found the Golang code for Kubernetes to be well documented and well architected.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038410&quot; readability=&quot;3.2564102564103&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6282051282051&quot;&gt;&lt;tr readability=&quot;3.2564102564103&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I was going to say the GNU version of /bin/false and /bin/true, but I actually took a look at the source and it is terrible.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038435&quot; readability=&quot;3.1963470319635&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038486&quot; readability=&quot;2.043956043956&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041821&quot; readability=&quot;4.1353383458647&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.0676691729323&quot;&gt;&lt;tr readability=&quot;4.1353383458647&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;The GNU coding style does not help with readability, in my opinion (he said, donning flame-proof underwear)&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041048&quot; readability=&quot;2.2054054054054&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041090&quot; readability=&quot;0.66666666666667&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042329&quot; readability=&quot;5.301724137931&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6508620689655&quot;&gt;&lt;tr readability=&quot;5.301724137931&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I still think musl overall is quite readable, but my goodness, that switch statement in your second example. What a monster. I didn't think it was possible to be this confusing without the preprocessor.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041595&quot; readability=&quot;1.7142857142857&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041371&quot; readability=&quot;4.4583333333333&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2291666666667&quot;&gt;&lt;tr readability=&quot;4.4583333333333&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.5666666666667&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.8387096774194&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;On the JavaScript side I've enjoyed reading the code for Backbone and Underscore, helped also by the awesome in-line documentation. Very easy to see what is going on.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Also big fan of Sidekiq for similar reasons.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037738&quot; readability=&quot;1.4651162790698&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038918&quot; readability=&quot;3.4669811320755&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037704&quot; readability=&quot;0.32835820895522&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039099&quot; readability=&quot;2.4473684210526&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2236842105263&quot;&gt;&lt;tr readability=&quot;2.4473684210526&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;PostgreSQL and Quake3 are good candidates. Both are C codebases which are surprisingly readable even by relative novices.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038516&quot; readability=&quot;4.760147601476&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037644&quot; readability=&quot;0.5&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037715&quot; readability=&quot;0.34782608695652&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040395&quot; readability=&quot;26.348837209302&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;13.174418604651&quot;&gt;&lt;tr readability=&quot;26.348837209302&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;most people are talking about clean code, good design constructs, but i feel that many are missing the point, we’re talking about code quality here, design is the grit and grind that all developers go through to develop great software, certainly there are better designed software projects out there that leaves them more maintainable and prone to less bugs, but the fact of the matter is that for complicated code, designs go through many iterations and refactorings over time e.g. linux kernel, all software projects have bugs, even well designed or well tested software. but the significance of good testing and good processes are not being highlighted here, unit testing, code coverage, functional testing, end to end testing，scale testing, performance testing, code review, fault injection, debuggability, test automation, static code analysis, etc, i am shocked not to see lots of discussion on these things (aside from the sqlite mention) and testing techniques. probably a more developer friendly crowd here at hn, but testing is a significant and game changing part of what separates developers from great developers.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038008&quot; readability=&quot;3.5368421052632&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7684210526316&quot;&gt;&lt;tr readability=&quot;3.5368421052632&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I'm suprised nobody cited TeX from Knuth. It's an absolute standard in quality of implementation, documentation and computer science background. Perhaps unsurpassed.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038838&quot; readability=&quot;1.7394957983193&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041226&quot; readability=&quot;6.3944636678201&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.19723183391&quot;&gt;&lt;tr readability=&quot;6.3944636678201&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;After spending about a month of concerted effort pouring through the zlib sources, looking for vulnerabilities, I can say that zlib is the most astonishingly bug-free code I've ever seen. But in the conventional understanding of &quot;code quality&quot;, it's pretty bad.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041639&quot; readability=&quot;2.3357664233577&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042875&quot; readability=&quot;5.6523929471033&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8261964735516&quot;&gt;&lt;tr readability=&quot;5.6523929471033&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.7103274559194&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8806366047745&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Redis. I have to say antirez not only is an amazing engineer but from the way the code is written, you can see he is a very clear thinker.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I hold Redis codebase as an example of what good C code should be. On the other hand opencv codebase as an example of what C could should not be. Opencv codebase is really inconsistent with quite a bit of unreadable spaghetti sauce.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039490&quot; readability=&quot;6.4615384615385&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2307692307692&quot;&gt;&lt;tr readability=&quot;6.4615384615385&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Actually, I think early versions (like from pre-1.0 through maybe 1.5 or so) of Docker had some very high quality code and was also very pleasing to look at. It was very clean and super approachable and readable, and I felt sort of like how the NetBSD commenter felt as described in their comment.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039583&quot; readability=&quot;3.325&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037745&quot; readability=&quot;0.72727272727273&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037846&quot; readability=&quot;2.6666666666667&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.3333333333333&quot;&gt;&lt;tr readability=&quot;2.6666666666667&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Definitely agree with this. Both the documentation and code are of excellent quality. Others that come to mind are sqlite and zeromq.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038019&quot; readability=&quot;4.531914893617&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2659574468085&quot;&gt;&lt;tr readability=&quot;4.531914893617&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.531914893617&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.7916666666667&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;my first experience with high quality code was with tge quake2 engine.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;i was both amazed by the simplicity of the architecture (a huge single event loop), and the attention to code presentation and indentation.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039982&quot; readability=&quot;3.3406593406593&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6703296703297&quot;&gt;&lt;tr readability=&quot;3.3406593406593&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Interesting to see so many John Carmack projects in this thread. He's a good candidate for &quot;best programmer of all time&quot;, if there were such a thing.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037885&quot; readability=&quot;3.4444444444444&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7222222222222&quot;&gt;&lt;tr readability=&quot;3.4444444444444&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Twisted. Not only highly organized and sensibly delineated, but also a lot of fun to read - borderline comical at places.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039307&quot; readability=&quot;1.4130434782609&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041033&quot; readability=&quot;13.585051546392&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;6.7925257731959&quot;&gt;&lt;tr readability=&quot;13.585051546392&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;12.614690721649&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;24.834656084656&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;asyncio is more modern, more stylish, and more concrete.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Twisted is more timeless, more patterned, and more self-aware.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I can imagine Twisted's asyncio reactor becoming its default (and the Twisted flow control slowly declining in importance), but Twisted's protocols, control structures, and execution models becoming more popular.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Twisted has undergone a great resurgence in quality engineering since asyncio became more viable - this was surprising to me, but is actually probably reasonably consistent with the way the historical influence of the standard library.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Overall, I think that Twisted is a great project; I almost always reach for it when my python codebase becomes mature enough to need more thoughtful abstractions around network I/O.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038144&quot; readability=&quot;3.5858585858586&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039175&quot; readability=&quot;7.8799414348463&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.9399707174231&quot;&gt;&lt;tr readability=&quot;7.8799414348463&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.1288433382138&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.668674698795&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;In Dan Abramov's excellent egghead redux course [0] he implements the `createStore` from scratch which is the core of redux, it's simple enough to post here:&lt;/span&gt;
&lt;pre&gt;
&lt;span class=&quot;commtext c00&quot;&gt;&lt;code&gt;  const createStore = (reducer) =&amp;gt; {
    let state;
    let listeners = [];

    const getState = () =&amp;gt; state;

    const dispatch = (action) =&amp;gt; {
        state = reducer(state, action);
        listeners.map(listener =&amp;gt; listener());
    };

    const subscribe = (listener) =&amp;gt; {
        listeners.push(listener);
        // unsubscribe
        return () =&amp;gt; {
            listeners = listeners.filter(l =&amp;gt; l !== listener)
        };
    };

    // populate initial state
    dispatch({});

    return { getState, dispatch, subscribe };
  };

&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;span class=&quot;commtext c00&quot;&gt;[0]: &lt;a href=&quot;https://egghead.io/lessons/react-redux-implementing-store-from-scratch&quot; rel=&quot;nofollow&quot;&gt;https://egghead.io/lessons/react-redux-implementing-store-fr...&lt;/a&gt;&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037820&quot; readability=&quot;6.6666666666667&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039450&quot; readability=&quot;2.5960264900662&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038711&quot; readability=&quot;3.1645569620253&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037815&quot; readability=&quot;1.5&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042501&quot; readability=&quot;2.0374331550802&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039962&quot; readability=&quot;0.75&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040205&quot; readability=&quot;9.3518518518519&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.6759259259259&quot;&gt;&lt;tr readability=&quot;9.3518518518519&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;linux kernel, purely the reasoning being that it’s probably one of the most used pieces of software out there, along those lines, probably the kernel libraries and user libraries like libstdc that are a part of it. i dont know how the linux kernel is tested, but i know that production testing of the kernel on different platforms, at large scale is probably the most used open source in the market.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040456&quot; readability=&quot;4.8942598187311&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.4471299093656&quot;&gt;&lt;tr readability=&quot;4.8942598187311&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.4864048338369&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.7296416938111&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;As far as C++ code goes, the Lean Prover is really well maintained: &lt;a href=&quot;https://github.com/leanprover/lean&quot; rel=&quot;nofollow&quot;&gt;https://github.com/leanprover/lean&lt;/a&gt;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I'd also say GHC is quite good.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;And Pandoc as well.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I don't think I can compute enough variables to consider the &quot;highest&quot; though... so the aforementioned are only examples of what I think are good.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037834&quot; readability=&quot;4.64039408867&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041492&quot; readability=&quot;2.0653266331658&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037748&quot; readability=&quot;2.3214285714286&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038798&quot; readability=&quot;2.8867924528302&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040254&quot; readability=&quot;1.5510204081633&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037667&quot; readability=&quot;2.4137931034483&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039464&quot; readability=&quot;5.1269841269841&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037695&quot; readability=&quot;1.2941176470588&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039305&quot; readability=&quot;1.3571428571429&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039433&quot; readability=&quot;2.0927152317881&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039889&quot; readability=&quot;2.6230366492147&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.3115183246073&quot;&gt;&lt;tr readability=&quot;2.6230366492147&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;GTKmm. GTK uses GObject to implement inheritance between C structs and it's easy to go wrong when extending. GTKmm wraps GTK in C++. It's a joy to use and is safer.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040341&quot; readability=&quot;4.7966101694915&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037710&quot; readability=&quot;2.5454545454545&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037763&quot; readability=&quot;1.8882352941176&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040102&quot; readability=&quot;2.486301369863&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2431506849315&quot;&gt;&lt;tr readability=&quot;2.486301369863&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I am very lucky that there are too many great open source libraries out there to label one with the &quot;highest&quot; quality.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039707&quot; readability=&quot;2.5827814569536&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2913907284768&quot;&gt;&lt;tr readability=&quot;2.5827814569536&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;The Linux kernel of course. In userland I have to say lib QT. I've used a lot of APIs and QT is always a pleasure to work with.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039967&quot; readability=&quot;5.4267515923567&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7133757961783&quot;&gt;&lt;tr readability=&quot;5.4267515923567&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.5222929936306&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8432055749129&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I'm a Linux fanboy myself but come on - we're talking about nearly 30 years' worth of commits from thousands (tens of thousands?) of developers.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;The only thing I can say is that with this in mind it's actually a lot better than I'd expect - testament to Linus's iron fist, perhaps.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042282&quot; readability=&quot;1.4&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039046&quot; readability=&quot;2.5337837837838&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2668918918919&quot;&gt;&lt;tr readability=&quot;2.5337837837838&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.8006756756757&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.6875&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Spring Framework&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;1. Elegant structure 2. Strict code style 3. Project size is not too large 4. Have detailed documentation&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038985&quot; readability=&quot;1.3125&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040880&quot; readability=&quot;1.505376344086&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041040&quot; readability=&quot;3.5&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041345&quot; readability=&quot;1.2987012987013&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040963&quot; readability=&quot;1.3076923076923&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042535&quot; readability=&quot;5.5243902439024&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7621951219512&quot;&gt;&lt;tr readability=&quot;5.5243902439024&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Does 'Physically Based Rendering' count? It's a book... which is also source. It was written as only the 2nd work of true 'Literate Programming' that I know of. I believe Knuth wrote a book about TeX which was the first example. But basically it is prose interleaved with source, readable as a book.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037700&quot; readability=&quot;2.1627906976744&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;morespace&quot;&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Fri, 21 Sep 2018 06:42:31 +0000</pubDate>
<dc:creator>chefqual</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=18037613</dc:identifier>
</item>
<item>
<title>Coursera Machine Learning MOOC by Andrew Ng – Python Programming Assignments</title>
<link>https://github.com/dibgerge/ml-coursera-python-assignments</link>
<guid isPermaLink="true" >https://github.com/dibgerge/ml-coursera-python-assignments</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;

&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/dibgerge/ml-coursera-python-assignments/blob/master/machinelearning.jpg&quot;&gt;&lt;img src=&quot;https://github.com/dibgerge/ml-coursera-python-assignments/raw/master/machinelearning.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This repositry contains the python versions of the programming assignments for the &lt;a href=&quot;https://www.coursera.org/learn/machine-learning&quot; rel=&quot;nofollow&quot;&gt;Machine Learning online class&lt;/a&gt; taught by Professor Andrew Ng. This is perhaps the most popular introductory online machine learning class. In addition to being popular, it is also one of the best Machine learning classes any interested student can take to get started with machine learning. An unfortunate aspect of this class is that the programming assignments are in MATLAB or OCTAVE, probably because this class was made before python become the go-to language in machine learning.&lt;/p&gt;
&lt;p&gt;The Python machine learning ecosystem has grown exponentially in the past few years, and still gaining momentum. I suspect that many students who want to get started with their machine learning journey would like to start it with Python also. It is for those reasons I have decided to re-write all the programming assignments in Python, so students can get acquainted with its ecosystem from the start of their learning journey.&lt;/p&gt;
&lt;p&gt;These assignments work seamlessly with the class and do not require any of the materials published in the MATLAB assignments. Here are some new and useful features for these sets of assignments:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The assignments use &lt;a href=&quot;http://jupyter-notebook-beginner-guide.readthedocs.io/en/latest/what_is_jupyter.html&quot; rel=&quot;nofollow&quot;&gt;Jupyter Notebook&lt;/a&gt;, which provides an intuitive flow easier than the original MATLAB/OCTAVE assignments.&lt;/li&gt;
&lt;li&gt;The original assignment instructions have been completely re-written and the parts which used to reference MATLAB/OCTAVE functionality have been changed to reference its &lt;code&gt;python&lt;/code&gt; counterpart.&lt;/li&gt;
&lt;li&gt;The re-written instructions are now embedded within the Jupyter Notebook along with the &lt;code&gt;python&lt;/code&gt; starter code. For each assignment, all work is done solely within the notebook.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;python&lt;/code&gt; assignments can be submitted for grading. They were tested to work perfectly well with the original Coursera grader that is currently used to grade the MATLAB/OCTAVE versions of the assignments.&lt;/li&gt;
&lt;li&gt;After each part of a given assignment, the Jupyter Notebook contains a cell which prompts the user for submitting the current part of the assignment for grading.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Downloading the Assignments&lt;/h2&gt;
&lt;p&gt;To get started, you can start by either downloading a zip file of these assignments by clicking on the &lt;code&gt;Clone or download&lt;/code&gt; button. If you have &lt;code&gt;git&lt;/code&gt; installed on your system, you can clone this repository using :&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;clone https://github.com/dibgerge/ml-coursera-python-assignments.git
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Each assignment is contained in a separate folder. For example, assignment 1 is contained within the folder &lt;code&gt;Exercise1&lt;/code&gt;. Each folder contains two files:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The assignment &lt;code&gt;jupyter&lt;/code&gt; notebook, which has a &lt;code&gt;.ipynb&lt;/code&gt; extension. All the code which you need to write will be written within this notebook.&lt;/li&gt;
&lt;li&gt;A python module &lt;code&gt;utils.py&lt;/code&gt; which contains some helper functions needed for the assignment. Functions within the &lt;code&gt;utils&lt;/code&gt; module are called from the python notebook. You do not need to modify or add any code to this file.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;These assignments has been tested and developed using the following libraries:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;- python==3.6.4
- numpy==1.13.3
- scipy==1.0.0
- matplotlib==2.1.2
- jupyter==1.0.0
- jupyter-client==5.0.1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We recommend using at least these versions of the required libraries or later. Python 2 is not supported.&lt;/p&gt;
&lt;h2&gt;Python Installation&lt;/h2&gt;
&lt;p&gt;We highly recommend using anaconda for installing python. &lt;a href=&quot;https://www.anaconda.com/download/&quot; rel=&quot;nofollow&quot;&gt;Click here&lt;/a&gt; to go to Anaconda's download page. Make sure to download Python 3.6 version. If you are on a windows machine:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Open the executable after download is complete and follow instructions.&lt;/li&gt;
&lt;li&gt;Once installation is complete, open &lt;code&gt;Anaconda prompt&lt;/code&gt; from the start menu. This will open a terminal with python enabled.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you are on a linux machine:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;Open a terminal and navigate to the directory where Anaconda was downloaded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the permission to the downloaded file so that it can be executed. So if the downloaded file name is &lt;code&gt;Anaconda3-5.1.0-Linux-x86_64.sh&lt;/code&gt;, then use the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chmod a+x Anaconda3-5.1.0-Linux-x86_64.sh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, run the installation script using &lt;code&gt;./Anaconda3-5.1.0-Linux-x86_64.sh&lt;/code&gt;, and follow installation instructions in the terminal.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Once you have installed python, create a new python environment will all the requirements using the following command:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;conda create -n machine_learning python=3.6 scipy=1 numpy=1.13 matplotlib=2.1 jupyter
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After the new environment is setup, activate it using (windows)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;activate machine_learning
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;or if you are on a linux machine&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;source activate machine_learning 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now we have our python environment all set up, we can start working on the assignments. To do so, navigate to the directory where the assignments were installed, and launch the jupyter notebook from the terminal using the command&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;jupyter notebook
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This should automatically open a tab in the default browser. To start with assignment 1, open the notebook &lt;code&gt;./Exercise1/exercise1.ipynb&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Python Tutorials&lt;/h2&gt;
&lt;p&gt;If you are new to python and to &lt;code&gt;jupyter&lt;/code&gt; notebooks, no worries! There is a plethora of tutorials and documentation to get you started. Here are a few links which might be of help:&lt;/p&gt;
&lt;h2&gt;Caveats and tips&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;In many of the exercises, the regularization parameter $\lambda$ is denoted as the variable name &lt;code&gt;lambda_&lt;/code&gt;, notice the underscore at the end of the name. This is because &lt;code&gt;lambda&lt;/code&gt; is a reserved python keyword, and should never be used as a variable name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;code&gt;numpy&lt;/code&gt;, the function &lt;code&gt;dot&lt;/code&gt; is used to perform matrix multiplication. The operation '*' only does element-by-element multiplication (unlike MATLAB). If you are using python version 3.5+, the operator '@' is the new matrix multiplication, and it is equivalent to the &lt;code&gt;dot&lt;/code&gt; function.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;I would like to thank professor Andrew Ng and the crew of the Stanford Machine Learning class on Coursera for such an awesome class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some of the material used, especially the code for submitting assignments for grading is based on &lt;a href=&quot;https://github.com/mstampfer/Coursera-Stanford-ML-Python&quot;&gt;&lt;code&gt;mstampfer&lt;/code&gt;'s&lt;/a&gt; python implementation of the assignments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 20 Sep 2018 23:47:47 +0000</pubDate>
<dc:creator>sonabinu</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/13351778?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>dibgerge/ml-coursera-python-assignments</og:title>
<og:url>https://github.com/dibgerge/ml-coursera-python-assignments</og:url>
<og:description>Python assignments for the machine learning class by andrew ng on coursera with complete submission for grading capability and re-written instructions. - dibgerge/ml-coursera-python-assignments</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/dibgerge/ml-coursera-python-assignments</dc:identifier>
</item>
</channel>
</rss>