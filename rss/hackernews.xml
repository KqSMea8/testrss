<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>More details about mitigations for the CPU Speculative Execution issue</title>
<link>https://security.googleblog.com/2018/01/more-details-about-mitigations-for-cpu_4.html</link>
<guid isPermaLink="true" >https://security.googleblog.com/2018/01/more-details-about-mitigations-for-cpu_4.html</guid>
<description></description>
<pubDate>Thu, 04 Jan 2018 20:40:25 +0000</pubDate>
<dc:creator>el_duderino</dc:creator>
<og:type>article</og:type>
<og:title>More details about mitigations for the CPU Speculative Execution issue</og:title>
<og:image>http://2.bp.blogspot.com/-7bZ5EziliZQ/VynIS9F7OAI/AAAAAAAASQ0/BJFntXCAntstZe6hQuo5KTrhi5Dyz9yHgCK4B/s1600/googlelogo_color_200x200.png</og:image>
<og:url>https://security.googleblog.com/2018/01/more-details-about-mitigations-for-cpu_4.html</og:url>
<og:description>Posted by Matt Linton, Senior Security Engineer and Pat Parseghian, Technical Program Manager Yesterday, Google’s Project Zero team posted...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://security.googleblog.com/2018/01/more-details-about-mitigations-for-cpu_4.html</dc:identifier>
</item>
<item>
<title>Intel Issues Updates to Protect Systems from Security Exploits</title>
<link>https://newsroom.intel.com/news-releases/intel-issues-updates-protect-systems-security-exploits/</link>
<guid isPermaLink="true" >https://newsroom.intel.com/news-releases/intel-issues-updates-protect-systems-security-exploits/</guid>
<description>&lt;p&gt;SANTA CLARA, Calif., Jan. 4, 2018 — Intel has developed and is rapidly issuing updates for all types of Intel-based computer systems — including personal computers and servers — that render those systems immune from both exploits (referred to as “Spectre” and “Meltdown”) reported by Google Project Zero. Intel and its partners have made significant progress in deploying updates as both software patches and firmware updates.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MORE:&lt;/strong&gt; &lt;a href=&quot;https://newsroom.intel.com/news/intel-responds-to-security-research-findings/&quot;&gt;Intel Responds to Security Research Findings&lt;/a&gt; (Jan. 3, 2018) | &lt;a href=&quot;https://newsroom.intel.com/press-kits/security-exploits-intel-products/&quot;&gt;Security Exploits and Intel Products&lt;/a&gt; (Press Kit) | &lt;a href=&quot;https://www.intel.com/content/www/us/en/architecture-and-technology/facts-about-side-channel-analysis-and-intel-products.html&quot;&gt;Facts about The New Security Research Findings and Intel Products&lt;/a&gt; (Intel.com)&lt;/p&gt;
&lt;p&gt;Intel has already issued updates for the majority of processor products introduced within the past five years. By the end of next week, Intel expects to have issued updates for more than 90 percent of processor products introduced within the past five years. In addition, many operating system vendors, public cloud service providers, device manufacturers and others have indicated that they have already updated their products and services.&lt;/p&gt;
&lt;p&gt;Intel continues to believe that the performance impact of these updates is highly workload-dependent and, for the average computer user, should not be significant and will be mitigated over time. While on some discrete workloads the performance impact from the software updates may initially be higher, additional post-deployment identification, testing and improvement of the software updates should mitigate that impact.&lt;/p&gt;
&lt;p&gt;System updates are made available by system manufacturers, operating system providers and others.&lt;/p&gt;
&lt;p&gt;Intel will continue to work with its partners and others to address these issues, and Intel appreciates their support and assistance. Intel encourages computer users worldwide to utilize the automatic update functions of their operating systems and other computer software to ensure their systems are up-to-date.&lt;/p&gt;
&lt;p&gt;For information and links to useful resources, visit the &lt;a href=&quot;https://www.intel.com/content/www/us/en/architecture-and-technology/facts-about-side-channel-analysis-and-intel-products.html&quot;&gt;security research findings page on Intel.com&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Thu, 04 Jan 2018 17:53:36 +0000</pubDate>
<dc:creator>runesoerensen</dc:creator>
<og:type>article</og:type>
<og:title>Intel Issues Updates to Protect Systems from Security Exploits | Intel Newsroom</og:title>
<og:description>SANTA CLARA, Calif., Jan. 4, 2018 — Intel has developed and is rapidly issuing updates for all types of Intel-based computer systems — including personal computers and servers — that render those systems immune from both exploits (referred to as “Spectre” and “Meltdown”) reported by Google Project Zero. Intel and its partners have made significant … Continued</og:description>
<og:url>https://newsroom.intel.com/news-releases/intel-issues-updates-protect-systems-security-exploits/</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://newsroom.intel.com/news-releases/intel-issues-updates-protect-systems-security-exploits/</dc:identifier>
</item>
<item>
<title>Announcing Rust 1.23</title>
<link>https://blog.rust-lang.org/2018/01/04/Rust-1.23.html</link>
<guid isPermaLink="true" >https://blog.rust-lang.org/2018/01/04/Rust-1.23.html</guid>
<description>&lt;p&gt;The Rust team is happy to announce a new version of Rust, 1.23.0. Rust is a systems programming language focused on safety, speed, and concurrency.&lt;/p&gt;&lt;p&gt;If you have a previous version of Rust installed via rustup, getting Rust 1.23.0 is as easy as:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rustup update stable
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you don’t have it already, you can &lt;a href=&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code class=&quot;highlighter-rouge&quot;&gt;rustup&lt;/code&gt;&lt;/a&gt; from the appropriate page on our website, and check out the &lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1230-2018-01-04&quot;&gt;detailed release notes for 1.23.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;h2 id=&quot;whats-in-1230-stable&quot;&gt;What’s in 1.23.0 stable&lt;/h2&gt;
&lt;p&gt;New year, new Rust! For our first improvement today, we now &lt;a href=&quot;https://github.com/rust-lang/rust/pull/45380&quot;&gt;avoid some unnecessary copies&lt;/a&gt; in certain situations. We’ve seen memory usage of using &lt;code class=&quot;highlighter-rouge&quot;&gt;rustc&lt;/code&gt; to drop 5-10% with this change; it may be different with your programs.&lt;/p&gt;
&lt;p&gt;The documentation team has been on a long journey to move &lt;code class=&quot;highlighter-rouge&quot;&gt;rustdoc&lt;/code&gt; to use &lt;a href=&quot;http://commonmark.org/&quot;&gt;CommonMark&lt;/a&gt;. Previously, &lt;code class=&quot;highlighter-rouge&quot;&gt;rustdoc&lt;/code&gt; never guaranteed which markdown rendering engine it used, but we’re finally committing to CommonMark. As part of this release, we render the documentation with our previous renderer, &lt;a href=&quot;https://github.com/hoedown/hoedown&quot;&gt;Hoedown&lt;/a&gt;, but also render it with a CommonMark compliant renderer, and &lt;a href=&quot;https://github.com/rust-lang/rust/pull/45324&quot;&gt;warn if there are any differences&lt;/a&gt;. There should be a way for you to modify the syntax you use to render correctly under both; we’re not aware of any situations where this is impossible. Docs team member Guillaume Gomez has &lt;a href=&quot;https://blog.guillaume-gomez.fr/articles/2017-09-18+New+rustdoc+rendering+common+errors&quot;&gt;written a blog post&lt;/a&gt; showing some common differences and how to solve them. In a future release, we will switch to using the CommonMark renderer by default. This &lt;a href=&quot;https://github.com/rust-lang/rust/pull/41991&quot;&gt;warning landed in nightly in May of last year&lt;/a&gt;, and has been on by default &lt;a href=&quot;https://github.com/rust-lang/rust/pull/45324&quot;&gt;since October of last year&lt;/a&gt;, so many crates have already fixed any issues that they’ve found.&lt;/p&gt;
&lt;p&gt;In other documentation news, historically, Cargo’s docs have been a bit strange. Rather than being on &lt;a href=&quot;https://doc.rust-lang.org&quot;&gt;doc.rust-lang.org&lt;/a&gt;, they’ve been at &lt;a href=&quot;https://doc.crates.io&quot;&gt;doc.crates.io&lt;/a&gt;. With this release, &lt;a href=&quot;https://github.com/rust-lang/rust/pull/45692&quot;&gt;that’s changing&lt;/a&gt;. You can now find Cargo’s docs at &lt;a href=&quot;https://doc.rust-lang.org/cargo&quot;&gt;doc.rust-lang.org/cargo&lt;/a&gt;. Additionally, they’ve been converted to the same format as our other long-form documentation. We’ll be adding a redirect from &lt;code class=&quot;highlighter-rouge&quot;&gt;doc.crates.io&lt;/code&gt; to this page, and you can expect to see more improvements and updates to Cargo’s docs throughout the year.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1230-2018-01-04&quot;&gt;detailed release notes&lt;/a&gt; for more.&lt;/p&gt;
&lt;h3 id=&quot;library-stabilizations&quot;&gt;Library stabilizations&lt;/h3&gt;
&lt;p&gt;As of Rust 1.0, a trait named &lt;a href=&quot;https://doc.rust-lang.org/std/ascii/trait.AsciiExt.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AsciiExt&lt;/code&gt;&lt;/a&gt; existed to provide ASCII related functionality on &lt;code class=&quot;highlighter-rouge&quot;&gt;u8&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;char&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;[u8]&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;. To use it, you’d write code like this:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;ascii&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsciiExt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ascii&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;non_ascii&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'❤'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_ascii&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ascii&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.is_ascii&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;non_ascii&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.is_ascii&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_ascii&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.is_ascii&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In Rust 1.23, these methods are now defined directly on those types, and so you no longer need to import the trait. Thanks to our stability guarantees, this trait still exists, so if you’d like to still support Rust versions before Rust 1.23, you can do this:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused_imports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;ascii&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsciiExt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;…to suppress the related warning. Once you drop support for older Rusts, you can remove both lines, and everything will continue to work.&lt;/p&gt;
&lt;p&gt;Additionally, a few new APIs were stabilized this release:&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1230-2018-01-04&quot;&gt;detailed release notes&lt;/a&gt; for more.&lt;/p&gt;
&lt;h3 id=&quot;cargo-features&quot;&gt;Cargo features&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cargo check&lt;/code&gt; can now &lt;a href=&quot;https://github.com/rust-lang/cargo/pull/4592&quot;&gt;check your unit tests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cargo uninstall&lt;/code&gt; can now &lt;a href=&quot;https://github.com/rust-lang/cargo/pull/4561&quot;&gt;uninstall more than one package in one command&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1230-2018-01-04&quot;&gt;detailed release notes&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id=&quot;contributors-to-1230&quot;&gt;Contributors to 1.23.0&lt;/h2&gt;
&lt;p&gt;Many people came together to create Rust 1.23. We couldn’t have done it without all of you. &lt;a href=&quot;https://thanks.rust-lang.org/rust/1.23.0&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 04 Jan 2018 16:18:34 +0000</pubDate>
<dc:creator>steveklabnik</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.rust-lang.org/2018/01/04/Rust-1.23.html</dc:identifier>
</item>
<item>
<title>iMac Pro&amp;#039;s T2 chip</title>
<link>https://www.macworld.com/article/3245764/macs/the-t2-chip-makes-the-imac-pro-the-start-of-a-mac-revolution.html</link>
<guid isPermaLink="true" >https://www.macworld.com/article/3245764/macs/the-t2-chip-makes-the-imac-pro-the-start-of-a-mac-revolution.html</guid>
<description>&lt;p&gt;I’ve spent the last week with Apple’s new iMac Pro, and in most ways it’s just a faster Mac. It's the first pro Mac desktop in over three years and the fastest Mac yet made, granted, but still entirely familiar. And yet in many ways—some noticeable, some entirely invisible—this new Mac is completely different from all past Mac models.&lt;/p&gt;
&lt;p&gt;The iMac Pro may be an outlier today, but in the future we’ll probably look back on it as the start of a new era for the Mac, all because of the Apple-built T2 chip it carries inside. Here’s how the T2 makes this iMac Pro unlike all other Macs.&lt;/p&gt;
&lt;h2 class=&quot;toc&quot; id=&quot;toc-1&quot;&gt;The power behind the throne&lt;/h2&gt;
&lt;p&gt;The T2 processor isn’t doing the heavy lifting in the iMac Pro—that’s the Intel Xeon processor with between 8 and 14 processor cores. The T2 is the brain &lt;em&gt;behind&lt;/em&gt; that brain, running the subsystems of the iMac Pro from a single piece of Apple-built silicon. The result is a simplified internal design that doesn’t require multiple components from multiple manufacturers.&lt;/p&gt;
&lt;img src=&quot;https://images.idgesg.net/images/article/2017/06/new_2017_imac_pro_thermal-100725125-large.jpg&quot; border=&quot;0&quot; alt=&quot;Apple - iMac Pro [2017] - thermal architecture / performance&quot; width=&quot;700&quot; height=&quot;395&quot; data-imageid=&quot;100725125&quot;/&gt;&lt;small class=&quot;credit&quot;&gt;Apple&lt;/small&gt;
&lt;p&gt;Among the T2's tasks is control over the new iMac cooling system.&lt;/p&gt;
&lt;p&gt;On most Macs, there are discrete controllers for audio, system management and disk drives. But the T2 handles all these tasks. The T2 is responsible for controlling the iMac Pro’s stereo speakers, internal microphones, and dual cooling fans, all by itself.&lt;/p&gt;
&lt;h2 class=&quot;toc&quot; id=&quot;toc-2&quot;&gt;A FaceTime camera like no other&lt;/h2&gt;
&lt;p&gt;The iMac Pro’s FaceTime camera can capture 1080p video, an upgrade from the 5K iMac’s 720p resolution. But this new FaceTime camera is driven by the T2 processor, which means it’s got intelligence that previous FaceTime cameras lacked. Like its cousin processors that drive the iPhone, the T2 has an Apple-designed image signal processor that detects faces in order to properly set exposure and white balance, dynamically adjusts exposure, and a whole lot more—all in the service of producing a better image, just like what happens when you shoot photos or video with your iPhone.&lt;/p&gt;
&lt;h2 class=&quot;toc&quot; id=&quot;toc-3&quot;&gt;What flash storage?&lt;/h2&gt;
&lt;p&gt;The iMac Pro offers between 1TB and 4TB of flash storage, also commonly referred to as an SSD, or “solid-state drive.” This is hardly the first Mac to include SSDs, but it’s a very different approach to storage than previous models.&lt;/p&gt;
&lt;p&gt;Most solid-state drives, whether they fit into a drive bay like a spinning hard drive or are reduced to a chip that slides into a slot somewhere, are self-contained—they’re a bank of memory combined with a controller. On the iMac Pro, though, that’s not the case—the SSD that comes with the iMac Pro is actually two banks of NAND memory. (Every iMac Pro has two banks that are “striped” together into a single drive—if you get the 1TB model, your iMac Pro has two 512GB NAND banks; the 4TB model has two 2TB NAND banks.)&lt;/p&gt;
&lt;img src=&quot;https://images.idgesg.net/images/article/2017/12/imac-pro-ports-100744335-large.jpg&quot; border=&quot;0&quot; alt=&quot;imac pro ports&quot; width=&quot;700&quot; height=&quot;467&quot; data-imageid=&quot;100744335&quot; data-license=&quot;IDG&quot;/&gt;&lt;small class=&quot;credit&quot;&gt;Roman Loyola&lt;/small&gt;
&lt;p&gt;In addition to all this external I/O, the iMac Pro has crazy-fast striped SSDs, encrypted and controlled by the T2.&lt;/p&gt;
&lt;p&gt;As for the disk controller? There isn’t one—or more accurately, the disk controller is built into the T2 itself. This gives the T2 complete control over internal storage on the iMac Pro. This has some major benefits in terms of speed and security. Every bit of data stored on an iMac Pro’s SSD is encrypted on the fly by the T2, so that if a nefarious person tried to pull out the storage chips and read them later, they’d be out of luck.&lt;/p&gt;
&lt;aside class=&quot;nativo-promo nativo-promo-1 smartphone tablet desktop&quot; id=&quot;&quot;/&gt;&lt;p&gt;(For additional security, Apple strongly suggests you turn on FileVault, which ties SSD encryption to your password. This provides an additional level of security, because your disk can’t be decrypted without the proper hardware &lt;em&gt;and&lt;/em&gt; your password.)&lt;/p&gt;
&lt;p&gt;All this encryption happens invisibly, so the SSDs in the iMac Pro still operate at full speed—approximately 3GB per second.&lt;/p&gt;
&lt;h2 class=&quot;toc&quot; id=&quot;toc-4&quot;&gt;Boot twice for safety&lt;/h2&gt;
&lt;p&gt;You know you’re a Mac nerd when you have opinions about the keys you need to hold down when rebooting while troubleshooting a problem. But on the iMac Pro, booting and rebooting is different—very different. In essence, it’s a two-stage process, first driven by the T2, then driven by the more traditional system boot process.&lt;/p&gt;
&lt;p&gt;When you start up the iMac Pro, the familiar Apple logo appears almost immediately. This is a sign that the T2 is taking control. For security reasons, the T2 is the iMac Pro hardware’s “root of trust,” and it validates the entire boot process when the power comes on. The T2 starts up, checks things out, loads its bootloader, verifies that it’s legitimate and cryptographically signed by Apple, and then moves on to the next part of the boot process.&lt;/p&gt;
&lt;p&gt;This new boot process means there’s also a new utility for Mac users to get to know: &lt;a href=&quot;https://support.apple.com/en-us/HT208198&quot; rel=&quot;nofollow&quot;&gt;Startup Security Utility&lt;/a&gt;, which you can only access by booting into Recovery mode by holding down Command-R while starting up. Startup Security Utility gives the T2 guidance about just how strict it should be when judging whether it should boot your computer.&lt;/p&gt;
&lt;p&gt;By default, security is set to Full, which means that only the current operating system or another OS version signed and trusted by Apple—meaning it hasn’t been tampered with in any way—can be booted by the computer. This version requires a network connection when you attempt to install any OS software updates, because it needs to verify with Apple that the updates are legitimate. You can also set the security level lower, to Medium (which allows older version of macOS to run regardless of Apple’s level of trust), or turn the feature off entirely, emulating the way all other Macs currently start up.&lt;/p&gt;
&lt;aside class=&quot;nativo-promo nativo-promo-2 tablet desktop smartphone&quot; id=&quot;&quot;/&gt;&lt;p&gt;(This goes for Boot Camp, too—the T2 respects Microsoft’s signing authority for Windows 10 beginning with 2017’s Fall Creators Update, so Boot Camp users can reboot into Windows 10 while remaining fully secure.)&lt;/p&gt;
&lt;h2 class=&quot;toc&quot; id=&quot;toc-5&quot;&gt;A hybrid Mac? Not quite.&lt;/h2&gt;
&lt;p&gt;Before the iMac Pro was released, there was a lot of speculation that it was part of a trend toward creating a “hybrid Mac” that is driven by both an Intel processor and an Apple-designed ARM chip like those found in other Apple devices. The iMac Pro is definitely a hybrid of a sort, but probably not the one people were expecting. With the T2, Apple is using its chip-design prowess to take more control over parts of the Mac hardware that were previously outsourced to other controllers, and reaping the benefits of integrating them all together.&lt;/p&gt;
&lt;p&gt;The iMac Pro isn’t running iOS apps, but it does get to take advantage of most of the work Apple has done to bolster the security of iOS devices and enhance the quality of photos and video taken by iPhone cameras. Apple will almost certainly continue to push this technology into more future Mac models, because it allows Apple to use the work it’s already done on iOS to improve the features and security of the Mac.&lt;/p&gt;
&lt;div class=&quot;end-note&quot;&gt;
&lt;div id=&quot;&quot; class=&quot;blx blxParticleendnote blxM2007 blox4_html blxC24067&quot;&gt;
&lt;aside&gt;To comment on this article and other Macworld content, visit our &lt;a href=&quot;https://www.facebook.com/Macworld/&quot; target=&quot;_blank&quot;&gt;Facebook&lt;/a&gt; page or our &lt;a href=&quot;https://twitter.com/macworld&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt; feed.&lt;/aside&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 04 Jan 2018 15:57:14 +0000</pubDate>
<dc:creator>lumisota</dc:creator>
<og:type>article</og:type>
<og:url>https://www.macworld.com/article/3245764/macs/the-t2-chip-makes-the-imac-pro-the-start-of-a-mac-revolution.html</og:url>
<og:image>https://images.idgesg.net/images/article/2018/01/more-color-t2-100745799-large.3x2.jpg</og:image>
<og:title>The T2 chip makes the iMac Pro the start of a Mac revolution</og:title>
<og:description>Sure, it's the fastest Mac ever made, but the T2 chip is what really makes it different.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.macworld.com/article/3245764/macs/the-t2-chip-makes-the-imac-pro-the-start-of-a-mac-revolution.html</dc:identifier>
</item>
<item>
<title>Meltdown and Spectre</title>
<link>https://spectreattack.com/</link>
<guid isPermaLink="true" >https://spectreattack.com/</guid>
<description>&lt;h4 id=&quot;faq-affected&quot;&gt;&lt;a href=&quot;https://spectreattack.com/#faq-affected&quot;&gt;Am I affected by the bug?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Most certainly, yes.&lt;/p&gt;
&lt;h4 id=&quot;faq-detect&quot;&gt;&lt;a href=&quot;https://spectreattack.com/#faq-detect&quot;&gt;Can I detect if someone has exploited Meltdown or Spectre against me?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Probably not. The exploitation does not leave any traces in traditional log files.&lt;/p&gt;
&lt;h4 id=&quot;faq-antivirus&quot;&gt;&lt;a href=&quot;https://spectreattack.com/#faq-antivirus&quot;&gt;Can my antivirus detect or block this attack?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;While possible in theory, this is unlikely in practice. Unlike usual malware, Meltdown and Spectre are hard to distinguish from regular benign applications. However, your antivirus may detect malware which uses the attacks by comparing binaries after they become known.&lt;/p&gt;
&lt;h4 id=&quot;faq-leaked&quot;&gt;&lt;a href=&quot;https://spectreattack.com/#faq-leaked&quot;&gt;What can be leaked?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If your system is affected, our proof-of-concept exploit can read the memory content of your computer. This may include passwords and sensitive data stored on the system.&lt;/p&gt;
&lt;h4 id=&quot;faq-wild&quot;&gt;&lt;a href=&quot;https://spectreattack.com/#faq-wild&quot;&gt;Has Meltdown or Spectre been abused in the wild?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;We don't know.&lt;/p&gt;
&lt;h4 id=&quot;faq-fix&quot;&gt;&lt;a href=&quot;https://spectreattack.com/#faq-fix&quot;&gt;Is there a workaround/fix?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;There are patches against Meltdown for Linux (&lt;a href=&quot;https://lwn.net/Articles/738975/&quot; target=&quot;_blank&quot;&gt; KPTI (formerly KAISER)&lt;/a&gt;), Windows,  and OS X.  There is also work to harden software against future exploitation of Spectre, respectively to patch software after exploitation through Spectre (&lt;a href=&quot;http://lists.llvm.org/pipermail/llvm-commits/Week-of-Mon-20180101/513630.html&quot; target=&quot;_blank&quot;&gt; LLVM patch&lt;/a&gt;).&lt;/p&gt;
&lt;h4 id=&quot;faq-systems-meltdown&quot;&gt;&lt;a href=&quot;https://spectreattack.com/#faq-systems-meltdown&quot;&gt;Which systems are affected by Meltdown?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Desktop, Laptop, and Cloud computers may be affected by Meltdown. More technically, every Intel processor which implements out-of-order execution is potentially affected, which is effectively every processor since 1995 (except Intel Itanium and Intel Atom before 2013). We successfully tested Meltdown on Intel processor generations released as early as 2011. Currently, we have only verified Meltdown on Intel processors. At the moment, it is unclear whether ARM and AMD processors are also affected by Meltdown.&lt;/p&gt;
&lt;h4 id=&quot;faq-systems-spectre&quot;&gt;&lt;a href=&quot;https://spectreattack.com/#faq-systems-spectre&quot;&gt;Which systems are affected by Spectre?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Almost every system is affected by Spectre: Desktops, Laptops, Cloud Servers, as well as Smartphones. More specifically, all modern processors capable of keeping many instructions in flight are potentially vulnerable. In particular, we have verified Spectre on Intel, AMD, and ARM processors.&lt;/p&gt;
&lt;h4 id=&quot;faq-cloud&quot;&gt;&lt;a href=&quot;https://spectreattack.com/#faq-cloud&quot;&gt;Which cloud providers are affected by Meltdown?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Cloud providers which use Intel CPUs and &lt;abbr title=&quot;Xen paravirtualization&quot;&gt;Xen PV&lt;/abbr&gt; as virtualization without having patches applied. Furthermore, cloud providers without real hardware virtualization, relying on containers that share one kernel, such as Docker, LXC, or OpenVZ are affected.&lt;/p&gt;
&lt;h4 id=&quot;faq-meltdown-vs-spectre&quot;&gt;&lt;a href=&quot;https://spectreattack.com/#faq-meltdown-vs-spectre&quot;&gt;What is the difference between Meltdown and Spectre?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Meltdown breaks the mechanism that keeps applications from accessing arbitrary system memory. Consequently, applications can access system memory. Spectre tricks other applications into accessing arbitrary locations in their memory. Both attacks use side channels to obtain the information from the accessed memory location. For a more technical discussion we refer to the papers (&lt;a href=&quot;https://meltdownattack.com/meltdown.pdf&quot;&gt; Meltdown&lt;/a&gt; and &lt;a href=&quot;https://spectreattack.com/spectre.pdf&quot;&gt; Spectre&lt;/a&gt;)&lt;/p&gt;
&lt;h4 id=&quot;faq-why-meltdown&quot;&gt;&lt;a href=&quot;https://spectreattack.com/#faq-why-meltdown&quot;&gt;Why is it called Meltdown?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The bug basically melts security boundaries which are normally enforced by the hardware.&lt;/p&gt;
&lt;h4 id=&quot;faq-why-spectre&quot;&gt;&lt;a href=&quot;https://spectreattack.com/#faq-why-spectre&quot;&gt;Why is it called Spectre?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The name is based on the root cause, speculative execution. As it is not easy to fix, it will haunt us for quite some time.&lt;/p&gt;
&lt;h4 id=&quot;faq-papers&quot;&gt;&lt;a href=&quot;https://spectreattack.com/#faq-papers&quot;&gt;Is there more technical information about Meltdown and Spectre?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Yes, there is an &lt;a href=&quot;https://meltdownattack.com/meltdown.pdf&quot;&gt; academic paper&lt;/a&gt; and &lt;a href=&quot;http://blog.cyberus-technology.de/posts/2018-01-03-meltdown.html&quot; target=&quot;_blank&quot;&gt; a blog post&lt;/a&gt; about Meltdown, and an &lt;a href=&quot;https://spectreattack.com/spectre.pdf&quot;&gt; academic paper&lt;/a&gt; about Spectre. Furthermore, there is a &lt;a href=&quot;https://googleprojectzero.blogspot.co.at/2018/01/reading-privileged-memory-with-side.html&quot; target=&quot;_blank&quot;&gt;Google Project Zero blog entry&lt;/a&gt; about both attacks.&lt;/p&gt;
&lt;h4 id=&quot;faq-cve-spectre&quot;&gt;&lt;a href=&quot;https://spectreattack.com/#faq-cve-spectre&quot;&gt;What are CVE-2017-5753 and CVE-2017-5715?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;CVE-2017-5753 and CVE-2017-5715 are the official references to Spectre. &lt;abbr title=&quot;Common Vulnerabilities and Exposures&quot;&gt;CVE&lt;/abbr&gt; is the Standard for Information Security Vulnerability Names maintained by MITRE.&lt;/p&gt;
&lt;h4 id=&quot;faq-cve-meltdown&quot;&gt;&lt;a href=&quot;https://spectreattack.com/#faq-cve-meltdown&quot;&gt;What is the CVE-2017-5754?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;CVE-2017-5754 is the official reference to Meltdown. &lt;abbr title=&quot;Common Vulnerabilities and Exposures&quot;&gt;CVE&lt;/abbr&gt; is the Standard for Information Security Vulnerability Names maintained by MITRE.&lt;/p&gt;
&lt;h4 id=&quot;faq-demo-video&quot;&gt;&lt;a href=&quot;https://spectreattack.com/#faq-demo-video&quot;&gt;Can I see Meltdown in action?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;iframe class=&quot;embed-responsive-item&quot; src=&quot;https://www.youtube.com/embed/bReA1dvGJ6Y&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;iframe class=&quot;embed-responsive-item&quot; src=&quot;https://www.youtube.com/embed/RbHbFkh6eeE&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;h4 id=&quot;faq-logo&quot;&gt;&lt;a href=&quot;https://spectreattack.com/#faq-logo&quot;&gt;Can I use the logo?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Both the Meltdown and Spectre logo are free to use, rights waived via &lt;a href=&quot;http://creativecommons.org/publicdomain/zero/1.0/&quot;&gt; CC0&lt;/a&gt;. Logos are designed by &lt;a href=&quot;https://vividfox.me/&quot; target=&quot;_blank&quot;&gt; Natascha Eibl&lt;/a&gt;.&lt;/p&gt;
&lt;br/&gt;&lt;h4 id=&quot;faq-advisory&quot;&gt;&lt;a href=&quot;https://spectreattack.com/#faq-advisory&quot;&gt;Where can I find official infos/security advisories of involved/affected companies?&lt;/a&gt;&lt;/h4&gt;
&lt;br/&gt;</description>
<pubDate>Thu, 04 Jan 2018 14:23:31 +0000</pubDate>
<dc:creator>dustinmoris</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://spectreattack.com/</dc:identifier>
</item>
<item>
<title>Show HN: PAST, a secure alternative to JWT</title>
<link>https://github.com/paragonie/past</link>
<guid isPermaLink="true" >https://github.com/paragonie/past</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/paragonie/past&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/9a257d9b049d1a8ee2f864abbd3c5a01fbc41dc7/68747470733a2f2f7472617669732d63692e6f72672f70617261676f6e69652f706173742e7376673f6272616e63683d6d6173746572&quot; alt=&quot;Build Status&quot; data-canonical-src=&quot;https://travis-ci.org/paragonie/past.svg?branch=master&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://packagist.org/packages/paragonie/past&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/ec278c4cc522692229bbf426834e3d0c9d6c9ddb/68747470733a2f2f706f7365722e707567782e6f72672f70617261676f6e69652f706173742f762f737461626c65&quot; alt=&quot;Latest Stable Version&quot; data-canonical-src=&quot;https://poser.pugx.org/paragonie/past/v/stable&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://packagist.org/packages/paragonie/past&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/6f56443a1e8724f16b0640760e6a0987e6cb410b/68747470733a2f2f706f7365722e707567782e6f72672f70617261676f6e69652f706173742f762f756e737461626c65&quot; alt=&quot;Latest Unstable Version&quot; data-canonical-src=&quot;https://poser.pugx.org/paragonie/past/v/unstable&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://packagist.org/packages/paragonie/past&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/33f26b67125f722d3d8cb7900f5769d7d17629b6/68747470733a2f2f706f7365722e707567782e6f72672f70617261676f6e69652f706173742f6c6963656e7365&quot; alt=&quot;License&quot; data-canonical-src=&quot;https://poser.pugx.org/paragonie/past/license&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://packagist.org/packages/paragonie/past&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/75a798e3ed2fdcb6355b58302be83e031de41fbf/68747470733a2f2f696d672e736869656c64732e696f2f7061636b61676973742f64742f70617261676f6e69652f706173742e737667&quot; alt=&quot;Downloads&quot; data-canonical-src=&quot;https://img.shields.io/packagist/dt/paragonie/past.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PAST is everything you love about JOSE (JWT, JWE, JWS) without any of the &lt;a href=&quot;https://paragonie.com/blog/2017/03/jwt-json-web-tokens-is-bad-standard-that-everyone-should-avoid&quot; rel=&quot;nofollow&quot;&gt;many design deficits that plague the JOSE standards&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What follows is a reference implementation. &lt;strong&gt;Requires PHP 7 or newer.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PAST (Platform-Agnostic Security Tokens) is a specification and reference implementation for secure stateless tokens.&lt;/p&gt;
&lt;p&gt;Unlike JSON Web Tokens (JWT), which gives developers more than enough rope with which to hang themselves, PAST only allows secure operations. JWT gives you &quot;algorithm agility&quot;, PAST gives you &quot;versioned protocols&quot;. It's incredibly unlikely that you'll be able to use PAST in &lt;a href=&quot;https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries&quot; rel=&quot;nofollow&quot;&gt;an insecure way&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Key Differences between PAST and JWT&lt;/h2&gt;
&lt;h3&gt;PAST&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;v2.auth.eyJkYXRhIjoidGhpcyBpcyBhIHNpZ25lZCBtZXNzYWdlIiwiZXhwIjoiMjAzOS0wMS0wMVQwMDowMDowMCJ9VpWy4KU60YnKUzTkixFi9foXhXKTHbcDBtpg7oWllm8
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This decodes to:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Version: &lt;code&gt;v2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Purpose: &lt;code&gt;auth&lt;/code&gt; (shared-key authentication)&lt;/li&gt;
&lt;li&gt;Payload:
&lt;div class=&quot;highlight highlight-source-json&quot;&gt;
&lt;pre&gt;
{
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;data&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;this is a signed message&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;exp&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;2039-01-01T00:00:00&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Authentication tag:
&lt;pre&gt;
&lt;code&gt;VpWy4KU60YnKUzTkixFi9foXhXKTHbcDBtpg7oWllm8=
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To learn what each version means, please see &lt;a href=&quot;https://github.com/paragonie/past/tree/master/docs/01-Protocol-Versions&quot;&gt;this page in the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;JWT&lt;/h3&gt;
&lt;p&gt;An example JWT (&lt;a href=&quot;https://jwt.io&quot; rel=&quot;nofollow&quot;&gt;taken from JWT.io&lt;/a&gt;) might look like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This decodes to:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Header&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-json&quot;&gt;
&lt;pre&gt;
{
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;alg&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;HS256&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;typ&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;JWT&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Body&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-json&quot;&gt;
&lt;pre&gt;
{
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;sub&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;1234567890&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;John Doe&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;admin&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Signature&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;As you can see, with JWT, you get to specify an &lt;code&gt;alg&lt;/code&gt; header. There are a lot of options to choose from (including &lt;code&gt;none&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;There have been ways to exploit JWT libraries by replacing RS256 with HS256 and using the known public key as the HMAC-SHA256 key, thereby allowing arbitrary token forgery.&lt;/p&gt;
&lt;p&gt;With PAST, your options are &lt;code&gt;version&lt;/code&gt; and a &lt;code&gt;purpose&lt;/code&gt;. There are three possible values for &lt;code&gt;purpose&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;auth&lt;/code&gt; -- shared-key authentication&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enc&lt;/code&gt; -- shared-key encryption&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sign&lt;/code&gt; -- public-key authentication (a.k.a. digital signatures)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;All encryption modes use &lt;a href=&quot;https://tonyarcieri.com/all-the-crypto-code-youve-ever-written-is-probably-broken&quot; rel=&quot;nofollow&quot;&gt;authenticated modes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Regardless of the purpose selected, the header (and an optional footer, which is always cleartext but base64url-encoded) is included in the signature or authentication tag.&lt;/p&gt;
&lt;h2&gt;How to Use this Library&lt;/h2&gt;
&lt;p&gt;See &lt;a href=&quot;https://github.com/paragonie/past/tree/master/docs&quot;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The section dedicated to &lt;a href=&quot;https://github.com/paragonie/past/tree/master/docs/02-PHP-Library&quot;&gt;this PHP implementation&lt;/a&gt; may be more relevant.&lt;/p&gt;
&lt;/article&gt;</description>
<pubDate>Thu, 04 Jan 2018 14:11:35 +0000</pubDate>
<dc:creator>CiPHPerCoder</dc:creator>
<og:image>https://avatars1.githubusercontent.com/u/11591525?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>paragonie/past</og:title>
<og:url>https://github.com/paragonie/past</og:url>
<og:description>past - Platform-Agnostic Security Tokens</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/paragonie/past</dc:identifier>
</item>
<item>
<title>LLVM patch to fix half of Spectre attack</title>
<link>https://reviews.llvm.org/D41723</link>
<guid isPermaLink="true" >https://reviews.llvm.org/D41723</guid>
<description>&lt;p&gt;First, we need to explain the core of the vulnerability. Note that this&lt;br/&gt;is a very incomplete description, please see the Project Zero blog post&lt;br/&gt;for details:&lt;br/&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2018/01/reading-privileged-memory-with-side.html&quot; class=&quot;remarkup-link&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;https://googleprojectzero.blogspot.com/2018/01/reading-privileged-memory-with-side.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The basis for branch target injection is to direct speculative execution&lt;br/&gt;of the processor to some &quot;gadget&quot; of executable code by poisoning the&lt;br/&gt;prediction of indirect branches with the address of that gadget. The&lt;br/&gt;gadget in turn contains an operation that provides a side channel for&lt;br/&gt;reading data. Most commonly, this will look like a load of secret data&lt;br/&gt;followed by a branch on the loaded value and then a load of some&lt;br/&gt;predictable cache line. The attacker then uses timing of the processors&lt;br/&gt;cache to determine which direction the branch took *in the speculative&lt;br/&gt;execution*, and in turn what one bit of the loaded value was. Due to the&lt;br/&gt;nature of these timing side channels and the branch predictor on Intel&lt;br/&gt;processors, this allows an attacker to leak data only accessible to&lt;br/&gt;a privileged domain (like the kernel) back into an unprivileged domain.&lt;/p&gt;
&lt;p&gt;The goal is simple: avoid generating code which contains an indirect&lt;br/&gt;branch that could have its prediction poisoned by an attacker. In many&lt;br/&gt;cases, the compiler can simply use directed conditional branches and&lt;br/&gt;a small search tree. LLVM already has support for lowering switches in&lt;br/&gt;this way and the first step of this patch is to disable jump-table&lt;br/&gt;lowering of switches and introduce a pass to rewrite explicit indirectbr&lt;br/&gt;sequences into a switch over integers.&lt;/p&gt;
&lt;p&gt;However, there is no fully general alternative to indirect calls. We&lt;br/&gt;introduce a new construct we call a &quot;retpoline&quot; to implement indirect&lt;br/&gt;calls in a non-speculatable way. It can be thought of loosely as&lt;br/&gt;a trampoline for indirect calls which uses the RET instruction on x86.&lt;br/&gt;Further, we arrange for a specific call-&amp;gt;ret sequence which ensures the&lt;br/&gt;processor predicts the return to go to a controlled, known location. The&lt;br/&gt;retpoline then &quot;smashes&quot; the return address pushed onto the stack by the&lt;br/&gt;call with the desired target of the original indirect call. The result&lt;br/&gt;is a predicted return to the next instruction after a call (which can be&lt;br/&gt;used to trap speculative execution within an infinite loop) and an&lt;br/&gt;actual indirect branch to an arbitrary address.&lt;/p&gt;
&lt;p&gt;On 64-bit x86 ABIs, this is especially easily done in the compiler by&lt;br/&gt;using a guaranteed scratch register to pass the target into this device.&lt;br/&gt;For 32-bit ABIs there isn't a guaranteed scratch register and so several&lt;br/&gt;different retpoline variants are introduced to use a scratch register if&lt;br/&gt;one is available in the calling convention and to otherwise use direct&lt;br/&gt;stack push/pop sequences to pass the target address.&lt;/p&gt;
&lt;p&gt;This &quot;retpoline&quot; mitigation is fully described in the following blog&lt;br/&gt;post: &lt;a href=&quot;https://support.google.com/faqs/answer/7625886&quot; class=&quot;remarkup-link&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;https://support.google.com/faqs/answer/7625886&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is one other important source of indirect branches in x86 ELF&lt;br/&gt;binaries: the PLT. These patches also include support for LLD to&lt;br/&gt;generate PLT entries that perform a retpoline-style indirection.&lt;/p&gt;
&lt;p&gt;The only other indirect branches remaining that we are aware of are from&lt;br/&gt;precompiled runtimes (such as crt0.o and similar). The ones we have&lt;br/&gt;found are not really attackable, and so we have not focused on them&lt;br/&gt;here, but eventually these runtimes should also be replicated for&lt;br/&gt;retpoline-ed configurations for completeness.&lt;/p&gt;
&lt;p&gt;For kernels or other freestanding or fully static executables, the&lt;br/&gt;compiler switch &lt;tt class=&quot;remarkup-monospaced&quot;&gt;-mretpoline&lt;/tt&gt; is sufficient to fully mitigate this&lt;br/&gt;particular attack. For dynamic executables, you must compile *all*&lt;br/&gt;libraries with &lt;tt class=&quot;remarkup-monospaced&quot;&gt;-mretpoline&lt;/tt&gt; and additionally link the dynamic&lt;br/&gt;executable and all shared libraries with LLD and pass &lt;tt class=&quot;remarkup-monospaced&quot;&gt;-z retpolineplt&lt;/tt&gt;&lt;br/&gt;(or use similar functionality from some other linker). We strongly&lt;br/&gt;recommend also using &lt;tt class=&quot;remarkup-monospaced&quot;&gt;-z now&lt;/tt&gt; as non-lazy binding allows the&lt;br/&gt;retpoline-mitigated PLT to be substantially smaller.&lt;/p&gt;
&lt;p&gt;When manually apply similar transformations to &lt;tt class=&quot;remarkup-monospaced&quot;&gt;-mretpoline&lt;/tt&gt; to the&lt;br/&gt;Linux kernel we observed very small performance hits to applications&lt;br/&gt;running typical workloads, and relatively minor hits (approximately 2%)&lt;br/&gt;even for extremely syscall-heavy applications. This is largely due to&lt;br/&gt;the small number of indirect branches that occur in performance&lt;br/&gt;sensitive paths of the kernel.&lt;/p&gt;
&lt;p&gt;When using these patches on statically linked applications, especially&lt;br/&gt;C++ applications, you should expect to see a much more dramatic&lt;br/&gt;performance hit. For microbenchmarks that are switch, indirect-, or&lt;br/&gt;virtual-call heavy we have seen overheads ranging from 10% to 50%.&lt;/p&gt;
&lt;p&gt;However, real-world workloads exhibit substantially lower performance&lt;br/&gt;impact. Notably, techniques such as PGO and ThinLTO dramatically reduce&lt;br/&gt;the impact of hot indirect calls (by speculatively promoting them to&lt;br/&gt;direct calls) and allow optimized search trees to be used to lower&lt;br/&gt;switches. If you need to deploy these techniques in C++ applications, we&lt;br/&gt;*strongly* recommend that you ensure all hot call targets are statically&lt;br/&gt;linked (avoiding PLT indirection) and use both PGO and ThinLTO. Well&lt;br/&gt;tuned servers using all of these techniques saw 5% - 10% overhead from&lt;br/&gt;the use of retpoline.&lt;/p&gt;
&lt;p&gt;We will add detailed documentation covering these components in&lt;br/&gt;subsequent patches, but wanted to make the core functionality available&lt;br/&gt;as soon as possible. Happy for more code review, but we'd really like to&lt;br/&gt;get these patches landed and backported ASAP for obvious reasons. We're&lt;br/&gt;planning to backport this to both 6.0 and 5.0 release streams and get&lt;br/&gt;a 5.0 release with just this cherry picked ASAP for distros and vendors.&lt;/p&gt;
&lt;p&gt;This patch is the work of a number of people over the past month: Eric, Reid,&lt;br/&gt;Rui, and myself. I'm mailing it out as a single commit due to the time&lt;br/&gt;sensitive nature of landing this and the need to backport it. Huge thanks to&lt;br/&gt;everyone who helped out here, and everyone at Intel who helped out in&lt;br/&gt;discussions about how to craft this. Also, credit goes to Paul Turner (at&lt;br/&gt;Google, but not an LLVM contributor) for much of the underlying retpoline&lt;br/&gt;design.&lt;/p&gt;
</description>
<pubDate>Thu, 04 Jan 2018 13:09:52 +0000</pubDate>
<dc:creator>Kristine1975</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://reviews.llvm.org/D41723</dc:identifier>
</item>
<item>
<title>Notes from the Intelpocalypse</title>
<link>https://lwn.net/SubscriberLink/742702/e23889188fce9f7f/</link>
<guid isPermaLink="true" >https://lwn.net/SubscriberLink/742702/e23889188fce9f7f/</guid>
<description>&lt;center&gt;
&lt;table width=&quot;90%&quot; cellspacing=&quot;5&quot; readability=&quot;4.1829745596869&quot;&gt;&lt;tr readability=&quot;11.154598825832&quot;&gt;&lt;td valign=&quot;top&quot; readability=&quot;9&quot;&gt;
&lt;h3&gt;Welcome to LWN.net&lt;/h3&gt;
&lt;p&gt;The following subscription-only content has been made available to you by an LWN subscriber. Thousands of subscribers depend on LWN for the best news from the Linux and free software communities. If you enjoy this article, please consider accepting the trial offer on the right. Thank you for visiting LWN.net!&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;table class=&quot;Form&quot; width=&quot;100%&quot; readability=&quot;1.2016574585635&quot;&gt;&lt;tr readability=&quot;3.6049723756906&quot;&gt;&lt;td readability=&quot;4.8066298342541&quot;&gt;
&lt;h3&gt;Free trial subscription&lt;/h3&gt;
&lt;p&gt;Try LWN for free for 1 month: no payment or credit card required. &lt;a href=&quot;https://lwn.net/Promo/slink-trial2-2/claim&quot;&gt;Activate your trial subscription now&lt;/a&gt; and see why thousands of readers subscribe to LWN.net.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;
&lt;p&gt;By &lt;strong&gt;Jonathan Corbet&lt;/strong&gt;&lt;br /&gt;January 4, 2018&lt;/p&gt;
Rumors of an undisclosed CPU security issue have been circulating since before LWN first &lt;a href=&quot;https://lwn.net/Articles/738975/&quot;&gt;covered&lt;/a&gt; the kernel page-table isolation patch set in November 2017. Now, finally, &lt;a href=&quot;https://googleprojectzero.blogspot.com/2018/01/reading-privileged-memory-with-side.html&quot;&gt;the information is out&lt;/a&gt; — and the problem is even worse than had been expected. Read on for a summary of these issues and what has to be done to respond to them in the kernel.
&lt;p&gt;All three disclosed vulnerabilities take advantage of the CPU's speculative execution mechanism. In a simple view, a CPU is a deterministic machine executing a set of instructions in sequence in a predictable manner. Real-world CPUs are more complex, and that complexity has opened the door to some unpleasant attacks.&lt;/p&gt;
&lt;p&gt;A CPU is typically working on the execution of multiple instructions at once, for performance reasons. Executing instructions in parallel allows the processor to keep more of its subunits busy at once, which speeds things up. But parallel execution is also driven by the slowness of access to main memory. A cache miss requiring a fetch from RAM can stall the execution of an instruction for hundreds of processor cycles, with a clear impact on performance. To minimize the amount of time it spends waiting for data, the CPU will, to the extent it can, execute instructions &lt;em&gt;after&lt;/em&gt; the stalled one, essentially reordering the code in the program. That reordering is often invisible, but it occasionally leads to the sort of fun that caused &lt;a href=&quot;http://elixir.free-electrons.com/linux/latest/source/Documentation/memory-barriers.txt&quot;&gt;Documentation/memory-barriers.txt&lt;/a&gt; to be written.&lt;/p&gt;
&lt;p&gt;Out-of-order execution runs into a challenge whenever the code branches, though. The processor may not yet be able to tell which branch will be taken, so it doesn't know where to go to execute ahead of the stalled instruction(s). The answer here is &quot;branch prediction&quot;. The processor will make a guess based on past experience with the branch in question and, possibly, explicit guidance from the code (the &lt;tt&gt;unlikely()&lt;/tt&gt; directive used in kernel code, for example). Once the actual branch condition can be evaluated, the processor will determine whether it guessed right. If not, the &quot;speculatively&quot; executed instructions after the branch will be unwound, and everything will proceed as if they had never been run.&lt;/p&gt;
&lt;p&gt;A branch-prediction failure should really only lead to slower execution, with no visible side effects. That turns out to not be the case, though, leading to a set of severe information-disclosure vulnerabilities. In particular, speculative instruction execution can cause data to be loaded into the CPU memory cache; timing attacks can then be used to learn which instructions were executed. If speculative execution of kernel code can be controlled by an attacker, the contents of the cache can be used as a covert channel to get data out of the kernel.&lt;/p&gt;
&lt;h4&gt;Getting around boundary checks&lt;/h4&gt;
&lt;p&gt;Perhaps the nastiest of the vulnerabilities, in terms of the cost of defending against them, allows the circumvention of normal boundary checks in the kernel. Imagine kernel code that looks like this:&lt;/p&gt;
&lt;pre&gt;
    if (offset &amp;lt; array1-&amp;gt;length) {
        unsigned char value = array1-&amp;gt;data[offset];
        unsigned long index = ((value&amp;amp;1)*0x100)+0x200;
        if (index &amp;lt; array2-&amp;gt;length) // length is &amp;lt; 0x300
            unsigned char value2 = array2-&amp;gt;data[index];
     }
&lt;/pre&gt;
&lt;p&gt;If &lt;tt&gt;offset&lt;/tt&gt; is greater than the length of &lt;tt&gt;array1&lt;/tt&gt;, the reference into &lt;tt&gt;array1-&amp;gt;data&lt;/tt&gt; should never happen. But if &lt;tt&gt;array1-&amp;gt;length&lt;/tt&gt; is not cached, the processor will stall on the test. It may, while waiting, predict that &lt;tt&gt;offset&lt;/tt&gt; is within bounds (since it almost always is) and execute forward far enough to at least begin the fetch of the value from &lt;tt&gt;array2&lt;/tt&gt;. Once it's clear that &lt;tt&gt;offset&lt;/tt&gt; is too large, all of that speculatively done work will be discarded.&lt;/p&gt;
&lt;p&gt;Except that &lt;tt&gt;array2-&amp;gt;data[index]&lt;/tt&gt; will be present in the CPU cache. An exploit can fetch the data at both &lt;tt&gt;0x200&lt;/tt&gt; and &lt;tt&gt;0x300&lt;/tt&gt; and compare the timings. If one is far faster than the other, then the faster one was cached. That means that the inner branch was speculatively executed and that, in particular, the lowest bit of &lt;tt&gt;value&lt;/tt&gt; was not set. That leaks one bit of kernel memory under attacker control; a more sophisticated approach could, of course, obtain more than a lowest-order bit.&lt;/p&gt;
&lt;p&gt;If a code pattern like the above exists in the kernel and &lt;tt&gt;offset&lt;/tt&gt; is under user-space control, this kind of attack can be used to leak arbitrary data from the kernel to a user-space attacker. It would seem that such patterns exist, and that they can be used to read out kernel data at a relatively high rate. It is also possible to create the needed pattern with a BPF program — some types of which can be loaded and run without privilege. The attack is tricky to carry out, requires careful preparation of the CPU cache, and is processor-dependent, but it can be done. Intel, AMD, and ARM processors are all vulnerable (in varying degrees) to this attack.&lt;/p&gt;
&lt;p&gt;There is no straightforward defense to this attack, and nothing has been merged to date. The only known technique, it would seem, is to prevent speculative execution of code within branches when the branch condition is under an attacker's control. That requires putting in a barrier after every test that is potentially vulnerable. Some &lt;a href=&quot;https://lwn.net/Articles/742754/&quot;&gt;preliminary patches&lt;/a&gt; have been posted to add a new API for sensitive pointer references:&lt;/p&gt;
&lt;pre&gt;
    value = nospec_load(pointer, lower, upper);
&lt;/pre&gt;
&lt;p&gt;This macro will return the value pointed to by &lt;tt&gt;pointer&lt;/tt&gt;, but only if it falls within the given &lt;tt&gt;lower&lt;/tt&gt; and &lt;tt&gt;upper&lt;/tt&gt; bounds; otherwise zero is returned. There are a number of variants on this macro; see &lt;a href=&quot;https://lwn.net/Articles/742757/&quot;&gt;the documentation&lt;/a&gt; for the full set. This approach is problematic on a couple of counts: it hurts performance, and somebody has to &lt;em&gt;find&lt;/em&gt; the vulnerable code patterns in the first place. Current vulnerabilities may be fixed, but there can be no doubt that new vulnerabilities of this type will be introduced on a regular basis.&lt;/p&gt;
&lt;h4&gt;Messing with indirect jumps&lt;/h4&gt;
&lt;p&gt;The kernel uses indirect jumps (calling a function through a pointer, for example) frequently. Branch prediction for indirect jumps uses cached results in a separate buffer that only keys on 31 bits of the address of interest. The resulting aliasing can be exploited to poison this cache and cause speculative execution to jump to the wrong location. Once again, the CPU will figure out that it got things wrong and unwind the results of the bad jump, but that speculative execution will leave traces in the memory cache. This issue can be exploited to cause the speculative execution of arbitrary code that will, once again, allow the exfiltration of data from the kernel.&lt;/p&gt;
&lt;p&gt;One rather frightening aspect of this vulnerability is that an attacker running inside a virtualized guest can use it to leak data accessible to the hypervisor — all the data in the host system, in other words. That has all kinds of highly unpleasant implications for cloud providers. One can only hope that those providers have taken advantage of whatever early disclosure they got to update their systems.&lt;/p&gt;
&lt;p&gt;There are two possible defenses in this case. One would be a microcode update from Intel that fixes the issue, for some processors at least. In the absence of this update, indirect calls must be replaced by a &lt;a href=&quot;https://lwn.net/Articles/742756/&quot;&gt;two-stage trampoline&lt;/a&gt; that will block further speculative execution. The performance cost of the trampoline will be notable, which is why Linus Torvalds has &lt;a href=&quot;https://lwn.net/Articles/742764/&quot;&gt;complained&lt;/a&gt; that the current patches seem to assume that the CPUs will never be fixed. There is a set of GCC patches forthcoming to add a flag (&lt;tt&gt;-mindirect-branch=thunk-extern&lt;/tt&gt;) to automatically generate the trampolines in cases where that's necessary. As of this writing, no defenses have actually been merged into the mainline kernel.&lt;/p&gt;
&lt;h4&gt;Forcing direct cache loads&lt;/h4&gt;
&lt;p&gt;The final vulnerability runs entirely in user space, without the involvement of the kernel at all. Imagine a variant of the above code:&lt;/p&gt;
&lt;pre&gt;
    if (slow_condition) {
        unsigned char value = kernel_data[offset];
        unsigned long index = ((value&amp;amp;1)*0x100)+0x200;
        if (index &amp;lt; length) 
            unsigned char value2 = array[index];
     }
&lt;/pre&gt;
&lt;p&gt;Here, &lt;tt&gt;kernel_data&lt;/tt&gt; is a kernel-space pointer that should be entirely inaccessible to a user-space program. The same speculative-execution issues, though, may cause the body of the outer &lt;tt&gt;if&lt;/tt&gt; block (and possibly the inner block if the low bit of &lt;tt&gt;value&lt;/tt&gt; is clear) to be executed on a speculative basis. By checking access timings, an attacker can determine the value of one bit of &lt;tt&gt;kernel_data[offset]&lt;/tt&gt;. Of course, the attacker needs to find a useful kernel pointer in the first place, but a variant of this attack can be used to find the placement of the kernel in virtual memory.&lt;/p&gt;
&lt;p&gt;The answer here is &lt;a href=&quot;https://lwn.net/Articles/741878/&quot;&gt;kernel page-table isolation&lt;/a&gt;, making the kernel-space data completely invisible to user space so that it cannot be used in speculative execution. This is the only one of the three issues that is addressed by page-table isolation; it alone imposes a performance cost of 5-30% or so. Intel and ARM processors seem to be vulnerable to this issue; AMD processors evidently are not.&lt;/p&gt;
&lt;h4&gt;The end result&lt;/h4&gt;
&lt;p&gt;What emerges is a picture of unintended processor functionality that can be exploited to leak arbitrary information from the kernel, and perhaps from other guests in a virtualized setting. If these vulnerabilities are already known to some attackers, they could have been using them to attack cloud providers for some time now. It seems fair to say that this is one of the most severe vulnerabilities to surface in some time.&lt;/p&gt;
&lt;p&gt;The fact that it is based in hardware makes things significantly worse. We will all be paying the performance penalties associated with working around these problems for the indefinite future. For the owners of vast numbers of systems that cannot be updated, the consequences will be worse: they will remain vulnerable to a set of vulnerabilities with known exploits. This is not a happy time for the computing industry.&lt;/p&gt;
&lt;p&gt;It is, to put it lightly, unlikely that this is the last vulnerability hiding within the processors at the heart of our systems. Like the Linux kernel, these processors are highly complex devices that are subject to constant change. And like the kernel, they probably have a number of unpleasant issues lurking within them. Given that, it's worthwhile to look at how these vulnerabilities were handled; there seems to be some unhappiness on that topic which might affect how future issues are disclosed. It's important to get this right, since we'll almost certainly be doing it again.&lt;/p&gt;
&lt;p&gt;See also: the &lt;a href=&quot;https://spectreattack.com/&quot;&gt;Meltdown and Spectre attacks page&lt;/a&gt;, which has a detailed and academic look at these vulnerabilities.&lt;/p&gt;

&lt;br clear=&quot;all&quot; /&gt;&lt;blockquote&gt;
&lt;table class=&quot;Form&quot; readability=&quot;1.2534246575342&quot;&gt;&lt;tr readability=&quot;2.5068493150685&quot;&gt;&lt;td&gt;&lt;strong&gt;Did you like this article?&lt;/strong&gt; Please accept our &lt;a href=&quot;https://lwn.net/Promo/slink-trial2-2/claim&quot;&gt;trial subscription offer&lt;/a&gt; to be able to see more content like it and to participate in the discussion.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/blockquote&gt;
&lt;hr width=&quot;60%&quot; align=&quot;left&quot; /&gt;
(&lt;a href=&quot;https://lwn.net/login?target=/Articles/742702/&quot;&gt;Log in&lt;/a&gt; to post comments)</description>
<pubDate>Thu, 04 Jan 2018 05:45:04 +0000</pubDate>
<dc:creator>discreditable</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://lwn.net/SubscriberLink/742702/e23889188fce9f7f/</dc:identifier>
</item>
<item>
<title>Why things might have taken so long</title>
<link>https://meteuphoric.wordpress.com/2017/12/31/16417/</link>
<guid isPermaLink="true" >https://meteuphoric.wordpress.com/2017/12/31/16417/</guid>
<description>&lt;p&gt;I asked &lt;a href=&quot;https://meteuphoric.wordpress.com/2017/12/28/why-did-everything-take-so-long/&quot;&gt;why humanity took so long to do anything at the start&lt;/a&gt;, and the Internet gave me its thoughts. Here is my expanded list of hypotheses, summarizing from comments &lt;a href=&quot;https://meteuphoric.wordpress.com/2017/12/28/why-did-everything-take-so-long/#comments&quot;&gt;on the post&lt;/a&gt;, &lt;a href=&quot;http://marginalrevolution.com/marginalrevolution/2017/12/saturday-assorted-links-141.html&quot;&gt;here&lt;/a&gt;, and &lt;a href=&quot;https://www.lesserwrong.com/posts/mFqG58s4NE3EE68Lq/why-did-everything-take-so-long&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;Inventing is harder than it looks&lt;/strong&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;Inventions are usually more ingenious than they seem.&lt;/strong&gt; Relatedly, reality has a &lt;a href=&quot;http://johnsalvatier.org/blog/2017/reality-has-a-surprising-amount-of-detail&quot;&gt;lot of detail&lt;/a&gt;.&lt;/li&gt;
&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;There are lots of apparent paths&lt;/strong&gt;: without hindsight, you have to waste a lot of time on dead ends.&lt;/li&gt;
&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;People are not as inventive as they imagine.&lt;/strong&gt; For instance, I haven’t actually invented anything – why do I even imagine I could invent rope?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Posing the question is a large part of the work.&lt;/strong&gt; If you have never seen rope, it actually doesn’t occur to you that rope would come in handy, or to ask yourself how to make some.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Animals (including humans) mostly think by intuitively recognizing over time what is promising and not among affordances they have&lt;/strong&gt;, and reading what common observations imply. New affordances generally only appear by some outside force e.g. accidentally. To invent a thing, you have to somehow have an affordance to make it even though you have never seen it. And in retrospect it seems so obvious because now you do have the affordance.&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;People fifty thousand years ago were not really behaviorally modern&lt;/strong&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;People’s brains were actually biologically less functional fifty thousand years ago.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Having concepts in general is a big deal&lt;/strong&gt;. You need a foundation of knowledge and mental models to come up with more of them.&lt;/li&gt;
&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;We lacked a small number of unimaginably basic concepts&lt;/strong&gt; that it is hard to even imagine not having now. For instance ‘abstraction’, or ‘changing the world around you to make it better’.&lt;/li&gt;
&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;Having external thinking tools is a big deal.&lt;/strong&gt; Modern ‘human intelligence’ relies a lot on things like writing and collected data, that aren’t in anyone’s brain.&lt;/li&gt;
&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;The entire mental landscapes of early people was very different&lt;/strong&gt;, as Julian Jaynes suggests.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt; In particular, they lacked self awareness and the ability to have original thought rather than just repeating whatever they usually repeat.&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;Often A isn’t useful without B, and B isn’t useful without A.&lt;/strong&gt; For instance, A is chariots and B is roads.&lt;/li&gt;
&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;A isn’t useful without lots of other things&lt;/strong&gt;, which don’t depend on A, but take longer to accrue than you imagine.&lt;/li&gt;
&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;Lots of ways to solve problems don’t lead to great things in the long run.&lt;/strong&gt; ‘Crude hacks’ get you most of the way there, reducing the value of great inventions.&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;Nobody can do much at all&lt;/strong&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;People in general are stupid in all domains, even now. &lt;/strong&gt;Everything is always mysteriously a thousand times harder than you might think.&lt;/li&gt;
&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;Have I tried even &lt;em&gt;making&lt;/em&gt; rope from scratch?&lt;/strong&gt; Let alone inventing it?&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;People were really busy&lt;/strong&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;Poverty traps.&lt;/strong&gt; Inventing only pays off long term, so for anyone to do it you need spare wealth and maybe institutions for capital to fund invention.&lt;/li&gt;
&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;People are just really busy doing and thinking about other things.&lt;/strong&gt; Like mating and dancing and eating and so on.&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;Communication and records&lt;/strong&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;The early humans did have those things, we just don’t have good records.&lt;/strong&gt; Which is not surprising, because our records of those times are clearly very lacking.&lt;/li&gt;
&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;Things got invented a lot, but communication wasn’t good/common enough to spread them.&lt;/strong&gt; For instance because tribes were small and didn’t interact that much).&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;Social costs&lt;/strong&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;Technology might have been seen as a sign of weakness or laziness&lt;/strong&gt;&lt;/li&gt;
&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;Making technology might make you stand out rather than fit in&lt;/strong&gt;&lt;/li&gt;
&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;Productivity shames your peers and invites more work from you&lt;/strong&gt;&lt;/li&gt;
&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;Inventions are sometimes against received wisdom&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;Population&lt;/strong&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;There were very few people in the past&lt;/strong&gt;, so the total thinking occurring between 50k and 28k years ago was less than in the last hundred years.&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;Value&lt;/strong&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;We didn’t invent things until they became relevant at all, and most of these things aren’t relevant to a hunter-gatherer.&lt;/strong&gt;&lt;/li&gt;
&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;Innovation is risky&lt;/strong&gt;: if you try a new thing, you might die.&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;Orders of invention&lt;/strong&gt;&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;First order inventions&lt;/strong&gt; are those where the raw materials are in your immediate surroundings, and they don’t require huge amounts of skill. My intuition is mostly that first order inventions should have been faster. But maybe we did get very good at first order ones quickly, but it is hard to move to higher orders.&lt;/li&gt;
&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;You need a full-time craftsman to make most basic things to a quality where they are worth having&lt;/strong&gt;, and we couldn’t afford full-time craftsmen for a very long time.&lt;/li&gt;
&lt;li class=&quot;li1&quot;&gt;&lt;strong&gt;Each new layer requires the last layer of innovation be common enough that it is available everywhere&lt;/strong&gt;, for the next person to use.&lt;/li&gt;
&lt;/ol&gt;&lt;div id=&quot;jp-post-flair&quot; class=&quot;sharedaddy sd-like-enabled sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Thu, 04 Jan 2018 03:49:20 +0000</pubDate>
<dc:creator>blonky</dc:creator>
<og:type>article</og:type>
<og:title>Why everything might have taken so long</og:title>
<og:url>https://meteuphoric.wordpress.com/2017/12/31/16417/</og:url>
<og:description>I asked why humanity took so long to do anything at the start, and the Internet gave me its thoughts. Here is my expanded list of hypotheses, summarizing from comments on the post, here, and here. …</og:description>
<og:image>https://secure.gravatar.com/blavatar/aecfd073c78a69a918bba38e17092fdb?s=200&amp;ts=1515110403</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://meteuphoric.wordpress.com/2017/12/31/16417/</dc:identifier>
</item>
<item>
<title>Intel was aware of the chip vulnerability when its CEO sold off company stock</title>
<link>http://www.businessinsider.com/intel-ceo-krzanich-sold-shares-after-company-was-informed-of-chip-flaw-2018-1</link>
<guid isPermaLink="true" >http://www.businessinsider.com/intel-ceo-krzanich-sold-shares-after-company-was-informed-of-chip-flaw-2018-1</guid>
<description>&lt;p&gt;&lt;span class=&quot;KonaFilter image-container display-table image on-image&quot; data-post-image=&quot;&quot;&gt;&lt;img src=&quot;http://static4.businessinsider.com/image/5a4e470ccf698a34008b4ced-2400/gettyimages-630985290.jpg&quot; alt=&quot;Intel CEO Brian Krzanich&quot; data-mce-source=&quot;Getty/David Becker&quot;/&gt;&lt;span class=&quot;caption-source&quot;&gt;&lt;span class=&quot;caption&quot;&gt;Intel CEO Brian Krzanich&lt;/span&gt; &lt;span class=&quot;source&quot;&gt;Getty/David Becker&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Intel CEO Brian Krzanich sold off $24 million worth of stock and options in the company in late November.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The stock sale came after Google had informed Intel of a significant vulnerability in its chips — a flaw that became public only this week.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Intel says the stock sale was unrelated to the vulnerability and came as part of a planned divestiture program. But Krzanich put that stock-sale plan in place in October — several months after Intel was informed of the vulnerability.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;p&gt;&lt;br/&gt;Intel CEO Brian Krzanich sold off a large portion of his stake in the company months after Google had informed the chipmaker of a significant security vulnerability in its flagship PC processors — but before the problem was publicly known.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://www.businessinsider.com/intel-ceo-google-discovered-the-chip-flaw-months-ago-2018-1&quot;&gt;vulnerability&lt;/a&gt;, which affects processors from Intel, AMD, and ARM and could allow malicious actors to steal passwords and other secret data, became public this week. The disclosure has left processor makers and operating-system vendors including Intel and Microsoft scrambling to get on top of the story and patch their products.&lt;/p&gt;
&lt;p&gt;But while the public is just being informed about the security problem, tech companies have known about it for months. In fact, Google informed Intel of the vulnerability in June, an Intel representative told Business Insider in a statement.&lt;/p&gt;
&lt;p&gt;That means Intel was aware of the problem before Krzanich sold off a big chunk of his holdings. Intel's CEO saw a $24 million windfall November 29 through a combination of selling shares he owned outright and exercising stock options.&lt;/p&gt;
&lt;p&gt;The stock sale &lt;a href=&quot;https://www.fool.com/investing/2017/12/19/intels-ceo-just-sold-a-lot-of-stock.aspx&quot;&gt;raised eyebrows&lt;/a&gt; when it was disclosed, primarily because it left Krzanich with just 250,000 shares of Intel stock — the minimum the company requires him to hold under his employment agreement.&lt;/p&gt;

&lt;p&gt;But &lt;a href=&quot;https://gizmodo.com/intel-says-ceo-dumping-tons-of-stock-last-year-unrelate-1821739988&quot;&gt;the sell-off&lt;/a&gt; could draw even more scrutiny now, given the news about the security vulnerability and the timing of when Intel knew about it.&lt;/p&gt;
&lt;p&gt;A representative for the Securities and Exchange Commission declined to comment on whether it was looking into the stock sales.&lt;/p&gt;
&lt;h2&gt;Intel says the sale was preplanned — but that plan was put in place months after it learned of the chip vulnerability&lt;/h2&gt;
&lt;p&gt;In the statement, the Intel representative said Krzanich's sale had nothing to do with the newly disclosed chip vulnerability and was done as part of a standard stock-sale plan.&lt;/p&gt;
&lt;p&gt;&quot;Brian's sale is unrelated,&quot; the representative said in the statement, adding that Krzanich &quot;continues to hold shares in line with corporate guidelines.&quot;&lt;/p&gt;
&lt;p&gt;To avoid charges of trading on insider knowledge, executives often put in place plans that automatically sell a portion of their stock holdings or exercise some of their options on a predetermined schedule, typically referred to as Rule 10b5-1(c) trading plans. According to an SEC filing, the holdings that Krzanich sold in November — 245,743 shares of stock he owned outright and 644,135 shares he got from exercising his options — were divested under just such a trading plan.&lt;/p&gt;
&lt;p&gt;But Krzanich &lt;a href=&quot;https://www.sec.gov/Archives/edgar/data/50863/000112760217033679/xslF345X03/form4.xml&quot;&gt;put that plan in place only on October 30, according to the filing&lt;/a&gt;. The representative said his decision to set up that plan was &quot;unrelated&quot; to information about the security vulnerability. Still, the timeline raises questions.&lt;/p&gt;
&lt;p&gt;News of the security flaw helped send Intel's stock lower Wednesday. It closed down $1.59, or 3.4%, to $45.26.&lt;/p&gt;
&lt;p class=&quot;tagline&quot;&gt;Get the latest Intel stock price &lt;a href=&quot;http://markets.businessinsider.com/stock/intc-Quote&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;


</description>
<pubDate>Thu, 04 Jan 2018 01:49:14 +0000</pubDate>
<dc:creator>MollyR</dc:creator>
<og:title>Intel was aware of the chip vulnerability when its CEO sold off $24 million in company stock</og:title>
<og:description>Intel CEO Brian Krzanich sold off a major stake in the company in November, months after the chipmaker learned of a significant security flaw in its chips.</og:description>
<og:type>article</og:type>
<og:url>http://www.businessinsider.com/intel-ceo-krzanich-sold-shares-after-company-was-informed-of-chip-flaw-2018-1</og:url>
<og:image>http://static3.businessinsider.com/image/5a4e4730cf698a87008b4cd0-1190-625/intel-was-aware-of-the-chip-vulnerability-when-its-ceo-sold-off-24-million-in-company-stock.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.businessinsider.com/intel-ceo-krzanich-sold-shares-after-company-was-informed-of-chip-flaw-2018-1</dc:identifier>
</item>
</channel>
</rss>