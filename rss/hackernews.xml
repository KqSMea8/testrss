<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Microsoft Adds an OpenSSH Client to Windows 10</title>
<link>https://www.servethehome.com/say-farewell-putty-microsoft-adds-openssh-client-windows-10/</link>
<guid isPermaLink="true" >https://www.servethehome.com/say-farewell-putty-microsoft-adds-openssh-client-windows-10/</guid>
<description>&lt;div class=&quot;td-post-featured-image&quot; readability=&quot;32&quot;&gt;&lt;a href=&quot;https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client-Cover.jpg&quot; data-caption=&quot;Microsoft Windows OpenSSH Client Cover&quot;&gt;&lt;img width=&quot;696&quot; height=&quot;386&quot; class=&quot;entry-thumb td-modal-image&quot; src=&quot;https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client-Cover-696x386.jpg&quot; srcset=&quot;https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client-Cover-696x385.jpg 696w, https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client-Cover-400x222.jpg 400w, https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client-Cover-800x444.jpg 800w, https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client-Cover-757x420.jpg 757w, https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client-Cover.jpg 863w&quot; sizes=&quot;(max-width: 696px) 100vw, 696px&quot; alt=&quot;Microsoft Windows OpenSSH Client Cover&quot; title=&quot;Microsoft Windows OpenSSH Client Cover&quot;/&gt;&lt;/a&gt;Microsoft Windows OpenSSH Client Cover&lt;/div&gt;
&lt;p&gt;Ask just about any *NIX admin using a Windows laptop and they will have come across Putty. For years, Apple MacBooks have been the go-to choice for many admins partly because getting to a ssh shell is so easy. The newly re-invigorated Microsoft is changing how easy it is to interface with Linux (and other *NIX flavors) significantly with features like &lt;a href=&quot;https://www.servethehome.com/install-ubuntu-fedora-suse-windows-apps/&quot;&gt;Ubuntu on Windows&lt;/a&gt;. There is a new beta feature in Windows 10 that may just see the retirement of Putty from many users: an OpenSSH client and OpenSSH server application for Windows.&lt;span id=&quot;more-25901&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Installing the Windows OpenSSH Client&lt;/h2&gt;
&lt;p&gt;Since this is not the best-documented feature, and still one in Beta, we made a quick video of the installation process.&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/iyLUTgyDkGI?feature=oembed&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;If you do not want to watch go to “Manage Optional Features” then + “Add a feature”. You can then scroll down the list and find the OpenSSH Client (Beta) and OpenSSH Server (Beta) features in Windows. The idea of running another remote service on Windows can be daunting so we do not blame you if you do not want to install the server.&lt;/p&gt;
&lt;p&gt;Once installed, you can simply fire up your command line and use the OpenSSH client by typing ssh followed by the command such as ssh ubuntu@someIP.&lt;/p&gt;
&lt;a href=&quot;https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client.jpg&quot;&gt;&lt;img class=&quot;size-full wp-image-25914&quot; src=&quot;https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client.jpg&quot; alt=&quot;Microsoft Windows OpenSSH Client&quot; width=&quot;620&quot; height=&quot;171&quot; srcset=&quot;https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client.jpg 620w, https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client-400x110.jpg 400w&quot; sizes=&quot;(max-width: 620px) 100vw, 620px&quot;/&gt;&lt;/a&gt;Microsoft Windows OpenSSH Client
&lt;p&gt;Here is the current (as of November 28, 2017) ssh command usage guide we are getting with the Windows OpenSSH Client:&lt;br/&gt;&lt;code&gt;C:\WINDOWS\system32&amp;gt;ssh&lt;br/&gt;usage: ssh [-46AaCfGgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]&lt;br/&gt;[-D [bind_address:]port] [-E log_file] [-e escape_char]&lt;br/&gt;[-F configfile] [-I pkcs11] [-i identity_file]&lt;br/&gt;[-J [user@]host[:port]] [-L address] [-l login_name] [-m mac_spec]&lt;br/&gt;[-O ctl_cmd] [-o option] [-p port] [-Q query_option] [-R address]&lt;br/&gt;[-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]]&lt;br/&gt;[user@]hostname [command]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For most admins, this is going to be extremely easy to transition to.&lt;/p&gt;
&lt;h2&gt;Final Words&lt;/h2&gt;
&lt;p&gt;Many of our readers use higher-end terminal solutions like MobaXterm Professional. At the same time, when you just need a SSH session, being able to launch via the standard Windows command line is awesome. Microsoft is clearly taking steps to make the IT admin’s job much easier, and this is one simple example where Windows is making great strides. For those who use Putty as the simple SSH solution on Windows, those days are numbered.&lt;/p&gt;

</description>
<pubDate>Tue, 12 Dec 2017 09:57:33 +0000</pubDate>
<dc:creator>awiesenhofer</dc:creator>
<og:image>https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client-Cover.jpg</og:image>
<og:type>article</og:type>
<og:title>Say Farewell to Putty as Microsoft adds an OpenSSH Client to Windows 10</og:title>
<og:description>If you need a quick OpenSSH client or server for Windows 10, there is a beta client hidden and available for installation</og:description>
<og:url>https://www.servethehome.com/say-farewell-putty-microsoft-adds-openssh-client-windows-10/</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.servethehome.com/say-farewell-putty-microsoft-adds-openssh-client-windows-10/</dc:identifier>
</item>
<item>
<title>High-Level Problems with Git and How to Fix Them</title>
<link>https://gregoryszorc.com/blog/2017/12/11/high-level-problems-with-git-and-how-to-fix-them/</link>
<guid isPermaLink="true" >https://gregoryszorc.com/blog/2017/12/11/high-level-problems-with-git-and-how-to-fix-them/</guid>
<description>&lt;p&gt;I have a... complicated relationship with Git.&lt;/p&gt;
&lt;p&gt;When Git first came onto the scene in the mid 2000's, I was initially skeptical because of its horrible user interface. But once I learned it, I appreciated its speed and features - especially the ease at which you could create feature branches, merge, and even create commits offline (which was a big deal in the era when Subversion was the dominant version control tool in open source and you needed to speak with a server in order to commit code). When I started using Git day-to-day, it was such an obvious improvement over what I was using before (mainly Subversion and even CVS).&lt;/p&gt;
&lt;p&gt;When I started working for Mozilla in 2011, I was exposed to the Mercurial version control, which then - and still today - hosts the canonical repository for Firefox. I didn't like Mercurial initially. Actually, I despised it. I thought it was slow and its features lacking. And I frequently encountered repository corruption.&lt;/p&gt;
&lt;p&gt;My first experience learning the &lt;em&gt;internals&lt;/em&gt; of both Git and Mercurial came when I found myself hacking on &lt;a href=&quot;http://hg-git.github.io/]&quot;&gt;hg-git&lt;/a&gt; - a tool that allows you to convert Git and Mercurial repositories to/from each other. I was hacking on hg-git so I could improve the performance of converting Mercurial repositories to Git repositories. And I was doing that because I wanted to use Git - not Mercurial - to hack on Firefox. I was trying to enable an unofficial Git mirror of the Firefox repository to synchronize faster so it would be more usable. The ulterior motive was to demonstrate that Git is a superior version control tool and that Firefox should switch its canonical version control tool from Mercurial to Git.&lt;/p&gt;
&lt;p&gt;In what is a textbook definition of &lt;em&gt;irony&lt;/em&gt;, what happened instead was I actually learned how Mercurial worked, interacted with the Mercurial Community, realized that Mozilla's documentation and developer practices were... lacking, and that Mercurial was actually a much, much more pleasant tool to use than Git. It's an old post, but I &lt;a href=&quot;https://gregoryszorc.com/blog/2013/05/12/thoughts-on-mercurial-(and-git)/&quot;&gt;summarized my conversion&lt;/a&gt; four and a half years ago. This started a chain of events that somehow resulted in me contributing a ton of patches to Mercurial, taking stewardship of &lt;em&gt;hg.mozilla.org&lt;/em&gt;, and becoming a member of the Mercurial Steering Committee - the governance group for the Mercurial Project.&lt;/p&gt;
&lt;p&gt;I've been an advocate of Mercurial over the years. Some would probably say I'm a Mercurial fanboy. I reject that characterization because &lt;em&gt;fanboy&lt;/em&gt; has connotations that imply I'm ignorant of realities. I'm well aware of Mercurial's faults and weaknesses. I'm well aware of Mercurial's relative lack of popularity, I'm well aware that this lack of popularity almost certainly turns away contributors to Firefox and other Mozilla projects because people don't want to have to learn a new tool. I'm well aware that there are changes underway to enable Git to scale to &lt;em&gt;very large repositories&lt;/em&gt; and that these changes could threaten Mercurial's scalability advantages over Git, making choices to use Mercurial even harder to defend. (As an aside, the party most responsible for pushing Git to adopt architectural changes to enable it to scale these days is Microsoft. Could anyone have foreseen that?!)&lt;/p&gt;
&lt;p&gt;I've achieved mastery in both Git and Mercurial. I know their internals and their command line interfaces extremely well. I understand the architecture and principles upon which both are built. I'm also exposed to some very experienced and knowledgeable people in the Mercurial Community. People who have been around version control for much, much longer than me and have knowledge of random version control tools you've probably never heard of. This knowledge and exposure allows me to make connections and see opportunities for version control that quite frankly most do not.&lt;/p&gt;
&lt;p&gt;In this post, I'll be talking about some high-level, high-impact problems with Git and possible solutions for them. My primary goal of this post is to foster positive change in Git and the services around it. While I personally prefer Mercurial, improving Git is good for everyone. Put another way, I want my knowledge and perspective from being part of a version control community to be put to good wherever it can.&lt;/p&gt;
&lt;p&gt;Speaking of Mercurial, as I said, I'm a heavy contributor and am somewhat influential in the Mercurial Community. I want to be clear that my opinions in this post are my own and I'm not speaking on behalf of the Mercurial Project or the larger Mercurial Community. I also don't intend to claim that Mercurial is &lt;em&gt;holier-than-thou&lt;/em&gt;. Mercurial has tons of user interface failings and deficiencies. And I'll even admit to being frustrated that some systemic failings in Mercurial have gone unaddressed for as long as they have. But that's for another post. This post is about Git. Let's get started.&lt;/p&gt;
&lt;h2&gt;The Staging Area&lt;/h2&gt;
&lt;p&gt;The staging area is a feature that should not be enabled in the default Git configuration.&lt;/p&gt;
&lt;p&gt;Most people see version control as an obstacle standing in the way of accomplishing some other task. They just want to save their progress towards some goal. In other words, they want version control to be a &lt;em&gt;save file&lt;/em&gt; feature in their workflow.&lt;/p&gt;
&lt;p&gt;Unfortunately, modern version control tools don't work that way. For starters, they require people to specify a &lt;em&gt;commit message&lt;/em&gt; every time they save. This in of itself can be annoying. But we generally accept that as the price you pay for version control: that &lt;em&gt;commit message&lt;/em&gt; has value to others (or even your future self). So you must record it.&lt;/p&gt;
&lt;p&gt;Most people want the barrier to saving changes to be effortless. A commit message is already too annoying for many users! The Git staging area establishes a &lt;em&gt;higher&lt;/em&gt; barrier to saving. Instead of just saving your changes, you must first &lt;em&gt;stage&lt;/em&gt; your changes to be saved.&lt;/p&gt;
&lt;p&gt;If you requested &lt;em&gt;save&lt;/em&gt; in your favorite GUI application, text editor, etc and it popped open a &lt;em&gt;select the changes you would like to save dialog&lt;/em&gt;, you would rightly think &lt;em&gt;just save all my changes already, dammit.&lt;/em&gt; But this is exactly what Git does with its staging area! Git is saying &lt;em&gt;I know all the changes you made: now tell me which changes you'd like to save.&lt;/em&gt; To the average user, this is infuriating because it works in contrast to how the &lt;em&gt;save&lt;/em&gt; feature works in almost every other application.&lt;/p&gt;
&lt;p&gt;There is a counterargument to be made here. You could say that the editor/application/etc is complex - that it has multiple &lt;em&gt;contexts&lt;/em&gt; (files) - that each context is independent - and that the user should have full control over which contexts (files) - and even changes within those contexts - to save. I agree: this is a compelling feature. However, it isn't an appropriate &lt;em&gt;default&lt;/em&gt; feature. The ability to pick which changes to save is a power-user feature. Most users just want to save all the changes all the time. So that should be the default behavior. And the Git staging area should be an opt-in feature.&lt;/p&gt;
&lt;p&gt;If intrinsic workflow warts aren't enough, the Git staging area has a horrible user interface. It is often referred to as the &lt;em&gt;cache&lt;/em&gt; &lt;a href=&quot;https://stackoverflow.com/questions/6716355/why-staging-directory-is-also-called-index-git-index/6718135#6718135&quot;&gt;for historical reasons&lt;/a&gt;. &lt;em&gt;Cache&lt;/em&gt; of course means something to anyone who knows anything about computers or programming. And Git's use of &lt;em&gt;cache&lt;/em&gt; doesn't at all align with that common definition. Yet the the terminology in Git persists. You have to run commands like &lt;code&gt;git diff --cached&lt;/code&gt; to examine the state of the &lt;em&gt;staging area&lt;/em&gt;. Huh?!&lt;/p&gt;
&lt;p&gt;But Git also refers to the &lt;em&gt;staging area&lt;/em&gt; as the &lt;em&gt;index&lt;/em&gt;. And this terminology also appears in Git commands! &lt;code&gt;git help commit&lt;/code&gt; has numerous references to the &lt;em&gt;index&lt;/em&gt;. Let's see what &lt;code&gt;git help glossary&lt;/code&gt; has to say::&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;index
    A collection of files with stat information, whose contents are
    stored as objects. The index is a stored version of your working tree.
    Truth be told, it can also contain a second, and even a third
    version of a working tree, which are used when merging.

index entry
    The information regarding a particular file, stored in the index.
    An index entry can be unmerged, if a merge was started, but not
    yet finished (i.e. if the index contains multiple versions of that
    file).
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In terms of end-user documentation, this is a train wreck. It tells the lay user absolutely nothing about what the &lt;em&gt;index&lt;/em&gt; actually is. Instead, it casually throws out references to &lt;em&gt;stat information&lt;/em&gt; (requires the user know what the &lt;code&gt;stat()&lt;/code&gt; function call and struct are) and &lt;em&gt;objects&lt;/em&gt; (a Git term for a piece of data stored by Git). It even undermines its own credibility with that &lt;em&gt;truth be told&lt;/em&gt; sentence. This definition is so bad that it would probably improve user understanding if it were deleted!&lt;/p&gt;
&lt;p&gt;Of course, &lt;code&gt;git help index&lt;/code&gt; says &lt;em&gt;No manual entry for gitindex&lt;/em&gt;. So there is literally no hope for you to get a concise, understandable definition of the &lt;em&gt;index&lt;/em&gt;. Instead, it is one of those concepts that you think you learn from interacting with it all the time. &lt;em&gt;Oh, when I &lt;code&gt;git add&lt;/code&gt; something it gets into this state where &lt;code&gt;git commit&lt;/code&gt; will actually save it.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And even if you know what the Git staging area/index/cached is, it can still confound you. Do you know the interaction between uncommitted changes in the staging area and working directory when you &lt;code&gt;git rebase&lt;/code&gt;? What about &lt;code&gt;git checkout&lt;/code&gt;? What about the various &lt;code&gt;git reset&lt;/code&gt; invocations? I have a confession: I can't remember all the edge cases either. To play it safe, I try to make sure all my outstanding changes are committed before I run something like &lt;code&gt;git rebase&lt;/code&gt; because I &lt;em&gt;know&lt;/em&gt; that will be safe.&lt;/p&gt;
&lt;p&gt;The Git staging area doesn't have to be this complicated. A &lt;em&gt;re-branding&lt;/em&gt; away from &lt;em&gt;index&lt;/em&gt; to &lt;em&gt;staging area&lt;/em&gt; would go a long way. Adding an alias from &lt;code&gt;git diff --staged&lt;/code&gt; to &lt;code&gt;git diff --cached&lt;/code&gt; and removing references to the &lt;em&gt;cache&lt;/em&gt; from common user commands would make a lot of sense and reduce end-user confusion.&lt;/p&gt;
&lt;p&gt;Of course, the Git staging area doesn't really need to exist at all! The staging area is essentially a &lt;em&gt;soft commit&lt;/em&gt;. It performs the &lt;em&gt;save progress&lt;/em&gt; role - the basic requirement of a version control tool. And in some aspects it is actually a better &lt;em&gt;save progress&lt;/em&gt; implementation than a &lt;em&gt;commit&lt;/em&gt; because it doesn't require you to type a commit message! Because the &lt;em&gt;staging area&lt;/em&gt; is a soft commit, all workflows using it can be modeled as if it were a real commit and the &lt;em&gt;staging area&lt;/em&gt; didn't exist at all! For example, instead of &lt;code&gt;git add --interactive&lt;/code&gt; + &lt;code&gt;git commit&lt;/code&gt;, you can run &lt;code&gt;git commit --interactive&lt;/code&gt;. Or if you wish to incrementally add new changes to an in-progress commit, you can run &lt;code&gt;git commit --amend&lt;/code&gt; or &lt;code&gt;git commit --amend --interactive&lt;/code&gt; or &lt;code&gt;git commit --amend --all&lt;/code&gt;. If you actually understand the various modes of &lt;code&gt;git reset&lt;/code&gt;, you can use those to &lt;em&gt;uncommit&lt;/em&gt;. Of course, the user interface to performing these actions in Git today is a bit convoluted. But if the &lt;em&gt;staging area&lt;/em&gt; didn't exist, new high-level commands like &lt;code&gt;git amend&lt;/code&gt; and &lt;code&gt;git uncommit&lt;/code&gt; could certainly be invented.&lt;/p&gt;
&lt;p&gt;To the average user, the &lt;em&gt;staging area&lt;/em&gt; is a complicated concept. I'm a power user. I understand its purpose and how to harness its power. Yet when I use Mercurial (which doesn't have a &lt;em&gt;staging area&lt;/em&gt;), I don't miss the &lt;em&gt;staging area&lt;/em&gt; at all. Instead, I learn that all operations involving the &lt;em&gt;staging area&lt;/em&gt; can be modeled as other fundamental primitives (like &lt;em&gt;commit amend&lt;/em&gt;) that you are likely to encounter anyway. The &lt;em&gt;staging area&lt;/em&gt; therefore constitutes an unnecessary burden and cognitive load on users. While powerful, its complexity and incurred confusion does not justify its existence in the default Git configuration. The &lt;em&gt;staging area&lt;/em&gt; is a power-user feature and should be opt-in by default.&lt;/p&gt;
&lt;h2&gt;Branches and Remotes Management is Complex and Time-Consuming&lt;/h2&gt;
&lt;p&gt;When I first used Git (coming from CVS and Subversion), I thought branches and remotes were incredible because they enabled new workflows that allowed you to easily track multiple lines of work across many repositories. And ~10 years later, I still believe the workflows they enable are important. However, having amassed a broader perspective, I also believe their implementation is poor and this unnecessarily confuses many users and wastes the time of &lt;em&gt;all&lt;/em&gt; users.&lt;/p&gt;
&lt;p&gt;My initial &lt;em&gt;zen moment&lt;/em&gt; with Git - the time when Git finally clicked for me - was when I understood Git's object model: that Git is just a content indexed key-value store consisting of a different object types (blobs, trees, and commits) that have a particular relationship with each other. &lt;em&gt;Refs&lt;/em&gt; are symbolic names pointing to Git commit objects. And Git &lt;em&gt;branches&lt;/em&gt; - both local and remote - are just &lt;em&gt;refs&lt;/em&gt; having a well-defined naming convention (&lt;code&gt;refs/heads/&amp;lt;name&amp;gt;&lt;/code&gt; for local branches and &lt;code&gt;refs/remotes/&amp;lt;remote&amp;gt;/&amp;lt;name&amp;gt;&lt;/code&gt; for remote branches). Even &lt;em&gt;tags&lt;/em&gt; and &lt;em&gt;notes&lt;/em&gt; are defined via &lt;em&gt;refs&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Refs&lt;/em&gt; are a necessary primitive in Git because the Git storage model is to throw all &lt;em&gt;objects&lt;/em&gt; into a single, key-value namespace. Since the store is content indexed and the key name is a cryptographic hash of the object's content (which for all intents and purposes is random gibberish to end-users), the Git store by itself is unable to locate objects. If all you had was the key-value store and you wanted to &lt;em&gt;find all commits&lt;/em&gt;, you would need to walk every object in the store and read it to see if it is a commit object. You'd then need to buffer metadata about those objects in memory so you could reassemble them into say a DAG to facilitate looking at commit history. This approach obviously doesn't scale. &lt;em&gt;Refs&lt;/em&gt; short-circuit this process by providing pointers to objects of importance. It may help to think of the set of &lt;em&gt;refs&lt;/em&gt; as an &lt;em&gt;index&lt;/em&gt; into the Git store.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Refs&lt;/em&gt; also serve another role: as guards against garbage collection. I won't go into details about loose objects and packfiles, but it's worth noting that Git's key-value store also behaves in ways similar to a generational garbage collector like you would find in programming languages such as Java and Python. The important thing to know is that Git will garbage collect (read: delete) objects that are unused. And the mechanism it uses to determine which objects are unused is to iterate through &lt;em&gt;refs&lt;/em&gt; and walk all transitive references from that initial pointer. If there is an object in the store that can't be traced back to a &lt;em&gt;ref&lt;/em&gt;, it is &lt;em&gt;unreachable&lt;/em&gt; and can be deleted.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Reflogs&lt;/em&gt; maintain the history of a value for a &lt;em&gt;ref&lt;/em&gt;: for each &lt;em&gt;ref&lt;/em&gt; they contain a log of what &lt;em&gt;commit&lt;/em&gt; it was pointing to, when that pointer was established, who established it, etc. &lt;em&gt;Reflogs&lt;/em&gt; serve two purposes: facilitating &lt;em&gt;undoing&lt;/em&gt; a previous action and holding a reference to &lt;em&gt;old&lt;/em&gt; data to prevent it from being garbage collected. The two use cases are related: if you don't care about undo, you don't need the old reference to prevent garbage collection.&lt;/p&gt;
&lt;p&gt;This design of Git's store is actually quite sensible. It's not perfect (nothing is). But it is a solid foundation to build a version control tool (or even other data storage applications) on top of.&lt;/p&gt;
&lt;p&gt;The title of this section has to do with sub-optimal branches and remotes management. But I've hardly said anything about branches or remotes! And this leads me to my main complaint about Git's branches and remotes: that they are very thin veneer over &lt;em&gt;refs&lt;/em&gt;. The properties of Git's underlying key-value store unnecessarily bleed into user-facing concepts (like branches and remotes) and therefore dictate sub-optimal practices. This is what's referred to as a &lt;em&gt;leaky abstraction&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I'll give some examples.&lt;/p&gt;
&lt;p&gt;As I stated above, many users treat version control as a &lt;em&gt;save file&lt;/em&gt; step in their workflow. I believe that any step that interferes with users saving their work is user hostile. This even includes writing a commit message! I already argued that the &lt;em&gt;staging area&lt;/em&gt; significantly interferes with this critical task. Git &lt;em&gt;branches&lt;/em&gt; do as well.&lt;/p&gt;
&lt;p&gt;If we were designing a version control tool from scratch (or if you were a new user to version control), you would probably think that a sane feature/requirement would be to update to &lt;em&gt;any&lt;/em&gt; revision and start making changes. In Git speak, this would be something like &lt;code&gt;git checkout b201e96f&lt;/code&gt;, make some file changes, &lt;code&gt;git commit&lt;/code&gt;. I think that's a pretty basic workflow requirement for a version control tool. And the workflow I suggested is pretty intuitive: choose the thing to start working on, make some changes, then save those changes.&lt;/p&gt;
&lt;p&gt;Let's see what happens when we actually do this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git checkout b201e96f
Note: checking out 'b201e96f'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b &amp;lt;new-branch-name&amp;gt;

HEAD is now at b201e96f94... Merge branch 'rs/config-write-section-fix' into maint

$ echo 'my change' &amp;gt;&amp;gt; README.md
$ git commit -a -m 'my change'
[detached HEAD aeb0c997ff] my change
 1 file changed, 1 insertion(+)

$ git push indygreg
fatal: You are not currently on a branch.
To push the history leading to the current (detached HEAD)
state now, use

    git push indygreg HEAD:&amp;lt;name-of-remote-branch&amp;gt;

$ git checkout master
Warning: you are leaving 1 commit behind, not connected to
any of your branches:

  aeb0c997ff my change

If you want to keep it by creating a new branch, this may be a good time
to do so with:

 git branch &amp;lt;new-branch-name&amp;gt; aeb0c997ff

Switched to branch 'master'
Your branch is up to date with 'origin/master'.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I know what all these messages mean because I've mastered Git. But if you were a newcomer (or even a seasoned user), you might be very confused. Just so we're on the same page, here is what's happening (along with some commentary).&lt;/p&gt;
&lt;p&gt;When I run &lt;code&gt;git checkout b201e96f&lt;/code&gt;, Git is trying to tell me that I'm potentially doing something that could result in the loss of my data. A golden rule of version control tools is &lt;em&gt;don't lose the user's data&lt;/em&gt;. When I run &lt;code&gt;git checkout&lt;/code&gt;, Git should be stating the risk for data loss very clearly. But instead, the &lt;em&gt;If you want to create a new branch&lt;/em&gt; sentence is hiding this fact by instead phrasing things around &lt;em&gt;retaining commits you create&lt;/em&gt; rather than the possible loss of data. It's up to the user to make the connection that &lt;em&gt;retaining commits you create&lt;/em&gt; actually means &lt;em&gt;don't eat my data&lt;/em&gt;. Preventing data loss is critical and Git should not mince words here!&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;git commit&lt;/code&gt; seems to work like normal. However, since we're in a &lt;em&gt;detached HEAD&lt;/em&gt; state (a phrase that is likely gibberish to most users), that commit isn't referred to by any &lt;em&gt;ref&lt;/em&gt;, so it can be &lt;em&gt;lost&lt;/em&gt; easily. Git &lt;em&gt;should&lt;/em&gt; be telling me that I just committed something it may not be able to find in the future. But it doesn't. Again, Git isn't being as protective of my data as it needs to be.&lt;/p&gt;
&lt;p&gt;The failure in the &lt;code&gt;git push&lt;/code&gt; command is essentially telling me I need to give things a name in order to &lt;em&gt;push&lt;/em&gt;. &lt;em&gt;Pushing&lt;/em&gt; is effectively &lt;em&gt;remote save&lt;/em&gt;. And I'm going to apply my reasoning about version control tools not interfering with &lt;em&gt;save&lt;/em&gt; to &lt;em&gt;pushing&lt;/em&gt; as well: Git is adding an extra barrier to &lt;em&gt;remote save&lt;/em&gt; by refusing to push commits without a &lt;em&gt;branch&lt;/em&gt; attached and by doing so is being user hostile.&lt;/p&gt;
&lt;p&gt;Finally, we &lt;code&gt;git checkout master&lt;/code&gt; to move to another commit. Here, Git is actually doing something halfway reasonable. It is telling me I'm leaving commits behind, which commits those are, and the command to use to &lt;em&gt;keep&lt;/em&gt; those commits. The warning is good but not great. I think it needs to be stronger to reflect the risk around data loss if that suggested Git commit isn't executed. (Of course, the &lt;em&gt;reflog&lt;/em&gt; for &lt;code&gt;HEAD&lt;/code&gt; will ensure that data isn't immediately deleted. But users shouldn't need to involve &lt;em&gt;reflogs&lt;/em&gt; to not lose data that wasn't rewritten.)&lt;/p&gt;
&lt;p&gt;The point I want to make is that Git doesn't allow you to just &lt;em&gt;update and save&lt;/em&gt;. Because its &lt;em&gt;dumb&lt;/em&gt; store requires pointers to relevant commits (&lt;em&gt;refs&lt;/em&gt;) and because that requirement isn't abstracted away or paved over by user-friendly features in the frontend, Git is effectively requiring end-users to define names (&lt;em&gt;branches&lt;/em&gt;) for all commits. If you fail to define a name, it gets a lot harder to find your commits, exchange them, and Git may delete your data. While it is technically possible to not create branches, the version control tool is essentially unusable without them.&lt;/p&gt;
&lt;p&gt;When local branches are exchanged, they appear as &lt;em&gt;remote branches&lt;/em&gt; to others. Essentially, you give each instance of the repository a name (the &lt;em&gt;remote&lt;/em&gt;). And branches/refs fetched from a named &lt;em&gt;remote&lt;/em&gt; appear as a &lt;em&gt;ref&lt;/em&gt; in the &lt;em&gt;ref namespace&lt;/em&gt; for that &lt;em&gt;remote&lt;/em&gt;. e.g. &lt;em&gt;refs/remotes/origin&lt;/em&gt; holds &lt;em&gt;refs&lt;/em&gt; for the &lt;em&gt;origin&lt;/em&gt; &lt;em&gt;remote&lt;/em&gt;. (Git allows you to not have to specify the &lt;em&gt;refs/remotes&lt;/em&gt; part, so you can refer to e.g. &lt;em&gt;refs/remotes/origin/master&lt;/em&gt; as &lt;em&gt;origin/master&lt;/em&gt;.)&lt;/p&gt;
&lt;p&gt;Again, if you were designing a version control tool from scratch or you were a new Git user, you'd probably think &lt;em&gt;remote refs&lt;/em&gt; would make good starting points for work. For example, if you know you should be saving new work on top of the &lt;em&gt;master&lt;/em&gt; branch, you might be inclined to begin that work by running &lt;code&gt;git checkout origin/master&lt;/code&gt;. But like our specific-commit checkout above:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git checkout origin/master
Note: checking out 'origin/master'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b &amp;lt;new-branch-name&amp;gt;

HEAD is now at 95ec6b1b33... RelNotes: the eighth batch
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is the same message we got for a direct checkout. But we did supply a &lt;em&gt;ref&lt;/em&gt;/&lt;em&gt;remote branch&lt;/em&gt; name. What gives? Essentially, Git tries to enforce that the &lt;em&gt;refs/remotes/&lt;/em&gt; namespace is read-only and only updated by operations that exchange data with a remote, namely &lt;code&gt;git fetch&lt;/code&gt;, &lt;code&gt;git pull&lt;/code&gt;, and &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For this to work correctly, you need to create a new &lt;em&gt;local branch&lt;/em&gt; (which initially points to the commit that &lt;code&gt;refs/remotes/origin/master&lt;/code&gt; points to) and then switch/activate that &lt;em&gt;local branch&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I could go on talking about all the subtle nuances of how Git branches are managed. But I won't.&lt;/p&gt;
&lt;p&gt;If you've used Git, you know you need to use branches. You may or may not recognize just how frequently you have to type a branch name into a &lt;code&gt;git&lt;/code&gt; command. I guarantee that if you are familiar with version control tools and workflows that aren't based on having to manage &lt;em&gt;refs&lt;/em&gt; to track data, you will find Git's forced usage of &lt;em&gt;refs&lt;/em&gt; and &lt;em&gt;branches&lt;/em&gt; a bit absurd. I half jokingly refer to Git as &lt;em&gt;Game of Refs&lt;/em&gt;. I say that because coming from Mercurial (which doesn't require you to name things), Git workflows feel to me like all I'm doing is typing the names of branches and &lt;em&gt;refs&lt;/em&gt; into &lt;code&gt;git&lt;/code&gt; commands. I feel like I'm wasting my precious time telling Git the names of things only because this is necessary to placate the leaky abstraction of Git's storage layer which requires references to relevant commits.&lt;/p&gt;
&lt;p&gt;Git and version control doesn't have to be this way.&lt;/p&gt;
&lt;p&gt;As I said, my Mercurial workflow doesn't rely on naming things. Unlike Git, Mercurial's store has an explicit (not shared) storage location for commits (&lt;em&gt;changesets&lt;/em&gt; in Mercurial parlance). And this data structure is ordered, meaning a changeset &lt;em&gt;later&lt;/em&gt; always occurs after its parent/predecessor. This means that Mercurial can open a single file/index to quickly find all &lt;em&gt;changesets&lt;/em&gt;. Because Mercurial doesn't need pointers to commits of relevance, names aren't required.&lt;/p&gt;
&lt;p&gt;My &lt;em&gt;Zen of Mercurial&lt;/em&gt; moment came when I realized you didn't have to name things in Mercurial. Having used Git before Mercurial, I was conditioned to always be naming things. This is the Git way after all. And, truth be told, it is common to name things in Mercurial as well. Mercurial's &lt;em&gt;named branches&lt;/em&gt; were the way to do &lt;em&gt;feature branches&lt;/em&gt; in Mercurial for years. Some used the &lt;em&gt;MQ&lt;/em&gt; extension (essentially a port of &lt;a href=&quot;https://en.wikipedia.org/wiki/Quilt_(software)&quot;&gt;quilt&lt;/a&gt;), which also requires naming individual patches. Git users coming to Mercurial were missing Git branches and Mercurial's &lt;em&gt;bookmarks&lt;/em&gt; were a poor &lt;em&gt;port&lt;/em&gt; of Git branches.&lt;/p&gt;
&lt;p&gt;But recently, more and more Mercurial users have been coming to the realization that names aren't really necessary. If the tool doesn't actually require naming things, why force users to name things? As long as users can find the commits they need to find, do you actually need names?&lt;/p&gt;
&lt;p&gt;As a demonstration, my Mercurial workflow leans heavily on the &lt;code&gt;hg show work&lt;/code&gt; and &lt;code&gt;hg show stack&lt;/code&gt; commands. You will need to enable the &lt;em&gt;show&lt;/em&gt; extension by putting the following in your hgrc config file to use them:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[extensions]
show =
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Running &lt;code&gt;hg show work&lt;/code&gt; (I have also set the config &lt;code&gt;commands.show.aliasprefix=s&lt;/code&gt;to enable me to type &lt;code&gt;hg swork&lt;/code&gt;) finds all in-progress changesets and other likely-relevant changesets (those with names and DAG heads). It prints a concise DAG of those changesets:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;hg show work output&quot; src=&quot;https://gregoryszorc.com/images/hg-show-work.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And &lt;code&gt;hg show stack&lt;/code&gt; shows just the current line of work and its relationship to other important heads:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;hg show stack output&quot; src=&quot;https://gregoryszorc.com/images/hg-show-stack.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Aside from the &lt;code&gt;@&lt;/code&gt; bookmark/name set on that top-most changeset, there are no names! (That &lt;code&gt;@&lt;/code&gt; comes from the remote repository, which has set that name.)&lt;/p&gt;
&lt;p&gt;Outside of code archeology workflows, &lt;code&gt;hg show work&lt;/code&gt; shows the changesets I care about 95% of the time. With all I care about (my in-progress work and possible rebase targets) rendered concisely, I don't have to name things because I can just find whatever I'm looking for by running &lt;code&gt;hg show work&lt;/code&gt;! Yes, you need to run &lt;code&gt;hg show work&lt;/code&gt;, visually scan for what you are looking for, and copy a (random) hash fragment into a number of commands. This sounds like a lot of work. But I believe it is far less work than naming things. Only when you practice this workflow do you realize just how much time you actually spend finding and then typing names in to &lt;code&gt;hg&lt;/code&gt; and - especailly - &lt;code&gt;git&lt;/code&gt; commands! The ability to just &lt;code&gt;hg update&lt;/code&gt; to a changeset and commit without having to name things is just so liberating. It feels like my version control tool is putting up fewer barriers and letting me work quickly.&lt;/p&gt;
&lt;p&gt;Another benefit of &lt;code&gt;hg show work&lt;/code&gt; and &lt;code&gt;hg show stack&lt;/code&gt; are that they present a concise DAG visualization to users. This helps educate users about the underlying &lt;em&gt;shape&lt;/em&gt; of repository data. When you see connected nodes on a graph and how they change over time, it makes it a lot easier to understand concepts like &lt;em&gt;merge&lt;/em&gt; and &lt;em&gt;rebase&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This &lt;em&gt;nameless&lt;/em&gt; workflow may sound radical. But that's because we're all conditioned to naming things. I initially thought it was crazy as well. But once you have a mechanism that gives you rapid access to data you care about (&lt;code&gt;hg show work&lt;/code&gt; in Mercurial's case), names become very optional. Now, a pure &lt;em&gt;nameless&lt;/em&gt; workflow isn't without its limitations. You want names to identify the main &lt;em&gt;targets&lt;/em&gt; for work (e.g. the &lt;em&gt;master&lt;/em&gt; branch). And when you exchange work with others, names are easier to work with, especially since names survive rewriting. But in my experience, most of my commits are only exchanged with me (synchronizing my in-progress commits across devices) and with code review tools (which don't really need names and can operate against raw commits). My most frequent use of names comes when I'm in &lt;em&gt;repository maintainer mode&lt;/em&gt; and I need to ensure commits have names for others to reference.&lt;/p&gt;
&lt;p&gt;Could Git support &lt;em&gt;nameless&lt;/em&gt; workflows? In theory it can.&lt;/p&gt;
&lt;p&gt;Git needs &lt;em&gt;refs&lt;/em&gt; to find relevant commits in its store. And the wire protocol uses &lt;em&gt;refs&lt;/em&gt; to exchange data. So &lt;em&gt;refs&lt;/em&gt; have to exist for Git to function (assuming Git doesn't radically change its storage and exchange mechanisms to mitigate the need for &lt;em&gt;refs&lt;/em&gt;, but that would be a massive change and I don't see this happening).&lt;/p&gt;
&lt;p&gt;While there is a fundamental requirement for &lt;em&gt;refs&lt;/em&gt; to exist, this doesn't necessarily mean that user-facing names must exist. The reason that we need &lt;em&gt;branches&lt;/em&gt; today is because &lt;em&gt;branches&lt;/em&gt; are little more than a &lt;em&gt;ref&lt;/em&gt; with special behavior. It is theoretically possible to invent a mechanism that transparently maps &lt;em&gt;nameless&lt;/em&gt; commits onto &lt;em&gt;refs&lt;/em&gt;. For example, you could create a &lt;em&gt;refs/nameless/&lt;/em&gt; namespace that was automatically populated with DAG heads that didn't have names attached. And Git could exchange these &lt;em&gt;refs&lt;/em&gt; just like it can &lt;em&gt;branches&lt;/em&gt; today. It would be a lot of work to think through all the implications and to design and implement support for &lt;em&gt;nameless&lt;/em&gt; development in Git. But I think it is possible.&lt;/p&gt;
&lt;p&gt;I encourage the Git community to investigate supporting &lt;em&gt;nameless&lt;/em&gt; workflows. Having adopted this workflow in Mercurial, Git's workflow around naming branches feels heavyweight and restrictive to me. Put another way, &lt;em&gt;nameless&lt;/em&gt; commits are actually lighter-weight branches than Git branches! To the common user who just wants version control to be a &lt;em&gt;save&lt;/em&gt; feature, requiring names establishes a barrier towards that goal. So removing the naming requirement would make Git simpler and more approachable to new users.&lt;/p&gt;
&lt;h2&gt;Forks aren't the Model You are Looking For&lt;/h2&gt;
&lt;p&gt;This section is more about hosted Git services (like GitHub, Bitbucket, and GitLab) than Git itself. But since hosted Git services are synonymous with &lt;em&gt;Git&lt;/em&gt; and interaction with a hosted Git services is a regular part of a common Git user's workflow, I feel like I need to cover it. (For what it's worth, my experience at Mozilla tells me that a large percentage of people who say &lt;em&gt;I prefer Git&lt;/em&gt; or &lt;em&gt;we should use Git&lt;/em&gt; actually mean &lt;em&gt;I like GitHub&lt;/em&gt;. Git and GitHub/Bitbucket/GitLab are effectively the same thing in the minds of many and anyone finding themselves discussing version control needs to keep this in mind because &lt;em&gt;Git&lt;/em&gt; is more than just the command line tool: it is an ecosystem.)&lt;/p&gt;
&lt;p&gt;I'll come right out and say it: I think &lt;em&gt;forks&lt;/em&gt; are a relatively poor model for collaborating. They are light years better than what existed before. But they are still so far from the turn-key experience that should be possible. The &lt;em&gt;fork&lt;/em&gt; hasn't really changed much since the current implementation of it was made popular by GitHub many years ago. And I view this as a general failure of hosted services to innovate.&lt;/p&gt;
&lt;p&gt;So we have a shared understanding, a &lt;em&gt;fork&lt;/em&gt; (as implemented on GitHub, Bitbucket, GitLab, etc) is essentially a complete copy of a repository (a &lt;code&gt;git clone&lt;/code&gt; if using Git) and a fresh workspace for additional value-added services the hosting provider offers (pull requests, issues, wikis, project tracking, release tracking, etc). If you open the main web page for a &lt;em&gt;fork&lt;/em&gt; on these services, it looks just like the main project's. You know it is a fork because there are cosmetics somewhere (typically next to the project/repository name) saying &lt;em&gt;forked from&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Before service providers adopted the &lt;em&gt;fork&lt;/em&gt; terminology, &lt;em&gt;fork&lt;/em&gt; was used in open source to refer to a splintering of a project. If someone or a group of people didn't like the direction a project was taking, wanted to take over ownership of a project because of stagnation, etc, they would &lt;em&gt;fork it&lt;/em&gt;. The &lt;em&gt;fork&lt;/em&gt; was based on the original (and there may even be active collaboration between the fork and original), but the intent of the &lt;em&gt;fork&lt;/em&gt; was to create distance between the original project and its new incantation. A new entity that was sufficiently independent of the original.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Forks&lt;/em&gt; on service providers mostly retain this &lt;em&gt;old school&lt;/em&gt; &lt;em&gt;fork&lt;/em&gt; model. The &lt;em&gt;fork&lt;/em&gt; gets a new copy of issues, wikis, etc. And anyone who &lt;em&gt;forks&lt;/em&gt; establishes what looks like an independent incantation of a project. It's worth noting that the execution varies by service provider. For example, GitHub won't enable &lt;em&gt;Issues&lt;/em&gt; for a fork by default, thereby encouraging people to file issues against the &lt;em&gt;upstream&lt;/em&gt; project it was forked from. (This is good default behavior.)&lt;/p&gt;
&lt;p&gt;And I know why service providers (initially) implemented things this way: it was easy. If you are building a product, it's simpler to just say &lt;em&gt;a user's version of this project is a &lt;code&gt;git clone&lt;/code&gt; and they get a fresh database&lt;/em&gt;. On a technical level, this meets the traditional definition of &lt;em&gt;fork&lt;/em&gt;. And rather than introduce a new term into the vernacular, they just re-purposed &lt;em&gt;fork&lt;/em&gt; (albeit with &lt;em&gt;softer&lt;/em&gt; connotations, since the traditional &lt;em&gt;fork&lt;/em&gt; commonly implied there was some form of strife precipitating a &lt;em&gt;fork&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;To help differentiate flavors of &lt;em&gt;forks&lt;/em&gt;, I'm going to define the terms &lt;em&gt;soft fork&lt;/em&gt; and &lt;em&gt;hard fork&lt;/em&gt;. A &lt;em&gt;soft fork&lt;/em&gt; is a &lt;em&gt;fork&lt;/em&gt; that exists for purposes of collaboration. The differentiating feature between a &lt;em&gt;soft fork&lt;/em&gt; and &lt;em&gt;hard fork&lt;/em&gt; is whether the &lt;em&gt;fork&lt;/em&gt; is intended to be used as its own project. If it is, it is a &lt;em&gt;hard fork&lt;/em&gt;. If not - if all changes are intended to be &lt;em&gt;merged&lt;/em&gt; into the &lt;em&gt;upstream&lt;/em&gt; project and be consumed from there - it is a &lt;em&gt;soft fork&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I don't have concrete numbers, but I'm willing to wager that the vast majority of &lt;em&gt;forks&lt;/em&gt; on Git service providers which have changes are &lt;em&gt;soft forks&lt;/em&gt; rather than &lt;em&gt;hard forks&lt;/em&gt;. In other words, these &lt;em&gt;forks&lt;/em&gt; exist purely as a conduit to collaborate with the canonical/upstream project (or to facilitate a short-lived one-off change).&lt;/p&gt;
&lt;p&gt;The current implementation of &lt;em&gt;fork&lt;/em&gt; - which borrows a lot from its predecessor of the same name - is a good - but not great - way to facilitate collaboration. It isn't great because it technically resembles what you'd expect to see for &lt;em&gt;hard fork&lt;/em&gt; use cases even though it is used predominantly with &lt;em&gt;soft forks&lt;/em&gt;. This mismatch creates problems.&lt;/p&gt;
&lt;p&gt;If you were to take a step back and invent your own version control hosted service and weren't tainted by exposure to existing services and were willing to think a bit beyond making it a glorified frontend for the &lt;code&gt;git&lt;/code&gt; command line interface, you might realize that the problem you are solving - the product you are selling - is collaboration as a service, not a Git hosting service. And if your product is collaboration, then implementing your collaboration model around the &lt;em&gt;hard fork&lt;/em&gt; model with strong barriers between the original project and its &lt;em&gt;forks&lt;/em&gt; is counterproductive and undermines your own product. But this is how GitHub, Bitbucket, GitLab, and others have implemented their product!&lt;/p&gt;
&lt;p&gt;To improve collaboration on version control hosted services, the concept of a &lt;em&gt;fork&lt;/em&gt; needs to significantly curtailed. Replacing it should be a UI and workflow that revolves around the central, canonical repository.&lt;/p&gt;
&lt;p&gt;You shouldn't need to create your own &lt;em&gt;clone&lt;/em&gt; or &lt;em&gt;fork&lt;/em&gt; of a repository in order to contribute. Instead, you should be able to clone the canonical repository. When you create commits, those commits should be stored and/or more tightly affiliated with the original project - not inside a &lt;em&gt;fork&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;One potential implementation is doable today. I'm going to call it &lt;em&gt;workspaces&lt;/em&gt;. Here's how it would work.&lt;/p&gt;
&lt;p&gt;There would exist a namespace for &lt;em&gt;refs&lt;/em&gt; that can be controlled by the user. For example, on GitHub (where my username is &lt;em&gt;indygreg&lt;/em&gt;), if I wanted to contribute to some random project, I would &lt;code&gt;git push&lt;/code&gt; my refs somewhere under &lt;code&gt;refs/users/indygreg/&lt;/code&gt; directly to that project's. No &lt;em&gt;forking&lt;/em&gt; necessary. If I wanted to contribute to a project, I would just clone its repo then push to my &lt;em&gt;workspace&lt;/em&gt; under it. You could do this today by configuring your Git &lt;em&gt;refspec&lt;/em&gt; properly. For pushes, it would look something like &lt;code&gt;refs/heads/*:refs/users/indygreg/*&lt;/code&gt; (that tells Git to map local &lt;em&gt;refs&lt;/em&gt; under &lt;code&gt;refs/heads/&lt;/code&gt; to &lt;code&gt;refs/users/indygreg/&lt;/code&gt; on that &lt;em&gt;remote&lt;/em&gt; repository). If this became a popular feature, presumably the Git wire protocol could be taught to advertise this feature such that Git clients automatically configured themselves to push to user-specific &lt;em&gt;workspaces&lt;/em&gt; attached to the original repository.&lt;/p&gt;
&lt;p&gt;There are several advantages to such a &lt;em&gt;workspace&lt;/em&gt; model. Many of them revolve around eliminating &lt;em&gt;forks&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;At initial contribution time, no server-side &lt;em&gt;fork&lt;/em&gt; is necessary in order to contribute. You would be able to &lt;em&gt;clone and contribute&lt;/em&gt; without waiting for or configuring a &lt;em&gt;fork&lt;/em&gt;. Or if you can create commits from the web interface, the clone wouldn't even be necessary! Lowering the barrier to contribution is a good thing, especially if collaboration is the product you are selling.&lt;/p&gt;
&lt;p&gt;In the web UI, &lt;em&gt;workspaces&lt;/em&gt; would also revolve around the source project and not be off in their own world like &lt;em&gt;forks&lt;/em&gt; are today. People could more easily see what others are up to. And fetching their work would require typing in their username as opposed to configuring a whole new remote. This would bring communities closer and hopefully lead to better collaboration.&lt;/p&gt;
&lt;p&gt;Not requiring &lt;em&gt;forks&lt;/em&gt; also eliminates the need to synchronize your &lt;em&gt;fork&lt;/em&gt; with the upstream repository. I don't know about you, but one of the things that bothers me about the &lt;em&gt;Game of Refs&lt;/em&gt; that Git imposes is that I have to keep my &lt;em&gt;refs&lt;/em&gt; in sync with the upstream &lt;em&gt;refs&lt;/em&gt;. When I fetch from &lt;em&gt;origin&lt;/em&gt; and pull down a new &lt;em&gt;master&lt;/em&gt; branch, I need to &lt;code&gt;git merge&lt;/code&gt; that branch into my local &lt;em&gt;master&lt;/em&gt; branch. Then I need to push that new &lt;em&gt;master&lt;/em&gt; branch to my fork. This is quite tedious. And it is easy to merge the wrong branches and get your &lt;em&gt;branch&lt;/em&gt; state out of whack. There are better ways to map remote &lt;em&gt;refs&lt;/em&gt; into your local names to make this far less confusing.&lt;/p&gt;
&lt;p&gt;Another win here is not having to push and store data multiple times. When working on a &lt;em&gt;fork&lt;/em&gt; (which is a separate repository), after you &lt;code&gt;git fetch&lt;/code&gt; changes from upstream, you need to eventually &lt;code&gt;git push&lt;/code&gt; those into your &lt;em&gt;fork&lt;/em&gt;. If you've ever worked on a large repository and didn't have a super fast Internet connection, you may have been stymied by having to &lt;code&gt;git push&lt;/code&gt; large amounts of data to your &lt;em&gt;fork&lt;/em&gt;. This is quite annoying, especially for people with slow Internet connections. Wouldn't it be nice if that &lt;code&gt;git push&lt;/code&gt; only pushed the data that was truly new and didn't already exist somewhere else on the server? A &lt;em&gt;workspace&lt;/em&gt; model where development all occurs in the original repository would fix this. As a bonus, it would make the storage problem on servers easier because you would eliminate thousands of forks and you probably wouldn't have to care as much about data duplication across repos/clones because the version control tool solves a lot of this problem for you, courtesy of having all data live alongside or in the original repository instead of in a &lt;em&gt;fork&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Another win from &lt;em&gt;workspace&lt;/em&gt;-centric development would be the potential to do more user-friendly things after &lt;em&gt;pull/merge requests&lt;/em&gt; are incorporated in the official project. For example, the &lt;em&gt;ref&lt;/em&gt; in your workspace could be deleted automatically. This would ease the burden on users to clean up after their submissions are accepted. Again, instead of mashing keys to play the &lt;em&gt;Game of Refs&lt;/em&gt;, this would all be taken care of for you automatically. (Yes, I know there are scripts and shell aliases to make this more turn-key. But user-friendly behavior shouldn't have to be opt-in: it should be the default.)&lt;/p&gt;
&lt;p&gt;But &lt;em&gt;workspaces&lt;/em&gt; aren't all rainbows and unicorns. There are access control concerns. You probably don't want users able to mutate the &lt;em&gt;workspaces&lt;/em&gt; of other users. Or do you? You can make a compelling case that project &lt;em&gt;administrators&lt;/em&gt; should have that ability. And what if someone pushes bad or illegal content to a workspace and you receive a cease and desist? Can you take down just the offending workspace while complying with the order? And what happens if the original project is deleted? Do all its workspaces die with it? These are not trivial concerns. But they don't feel impossible to tackle either.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Workspaces&lt;/em&gt; are only one potential alternative to &lt;em&gt;forks&lt;/em&gt;. And I can come up with multiple implementations of the &lt;em&gt;workspace&lt;/em&gt; concept. Although many of them are constrained by current features in the Git wire protocol. But Git is (finally) getting a more extensible wire protocol, so hopefully this will enable &lt;em&gt;nice things&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I challenge Git service providers like GitHub, Bitbucket, and GitLab to think outside the box and implement something better than how &lt;em&gt;forks&lt;/em&gt; are implemented today. It will be a large shift. But I think users will appreciate it in the long run.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Git is an ubiquitous version control tool. But it is &lt;a href=&quot;http://stevelosh.com/blog/2013/04/git-koans/&quot;&gt;frequently lampooned&lt;/a&gt; for its &lt;a href=&quot;https://stevebennett.me/2012/02/24/10-things-i-hate-about-git/&quot;&gt;poor usability&lt;/a&gt; and &lt;a href=&quot;https://git-man-page-generator.lokaltog.net/&quot;&gt;documentation&lt;/a&gt;. We even have &lt;a href=&quot;https://spderosso.github.io/onward13.pdf&quot;&gt;research&lt;/a&gt; &lt;a href=&quot;https://spderosso.github.io/oopsla16.pdf&quot;&gt;papers&lt;/a&gt; telling us which parts are bad. Nobody I know has had a pleasant initial experience with Git. And it is clear that few people actually understand Git: most just know the command incantations they need to know to accomplish a small set of common activities. (If you are such a person, there is nothing to be ashamed about: Git is a &lt;em&gt;hard&lt;/em&gt; tool.)&lt;/p&gt;
&lt;p&gt;Popular Git-based hosting and collaboration services (such as GitHub, Bitbucket, and GitLab) exist. While they've made strides to make it easier to commit data to a Git repository (I purposefully avoid saying &lt;em&gt;use Git&lt;/em&gt; because the most usable tools seem to avoid the &lt;code&gt;git&lt;/code&gt; command line interface as much as possible), they are often a thin veneer over Git itself (see &lt;em&gt;forks&lt;/em&gt;). And Git is a thin veneer over a content indexed key-value store (see forced usage of bookmarks).&lt;/p&gt;
&lt;p&gt;As an industry, we should be concerned about the lousy usability of Git and the tools and services that surround it. Some may say that Git - with its near monopoly over version control mindset - is a success. I have a different view: I think it is a failure that a tool with a user experience this bad has achieved the success it has.&lt;/p&gt;
&lt;p&gt;The cost to Git's poor usability can be measured in tens if not hundreds of millions of dollars in time people have wasted because they couldn't figure out how to use Git. Git should be viewed as a source of embarrassment, not a success story.&lt;/p&gt;
&lt;p&gt;What's really concerning is that the usability problems of Git have been known for years. Yet it is as popular as ever and there have been few substantial usability improvements. We do have some &lt;a href=&quot;http://gitless.com/&quot;&gt;alternative frontends&lt;/a&gt; floating around. But these haven't caught on.&lt;/p&gt;
&lt;p&gt;I'm at a loss to understand how an open source tool as popular as Git has remained so mediocre for so long. The source code is out there. Anybody can submit a patch to fix it. Why is it that so many people get tripped up by the same poor usability issues years after Git became the common version control tool? It certainly appears that as an industry we have been unable or unwilling to address systemic deficiencies in a critical tool. Why this is, I'm not sure.&lt;/p&gt;
&lt;p&gt;Despite my pessimism about Git's usability and its poor track record of being attentive to the needs of people who aren't power users, I'm optimistic that the future will be brighter. While the ~7000 words in this post pale in comparison to the aggregate word count that has been written about Git, hopefully this post strikes a nerve and causes positive change. Just because one generation has toiled with the usability problems of Git doesn't mean the next generation has to suffer through the same. Git can be improved and I encourage that change to happen. The three issues above and their possible solutions would be a good place to start.&lt;/p&gt;
</description>
<pubDate>Tue, 12 Dec 2017 04:26:04 +0000</pubDate>
<dc:creator>jordigh</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://gregoryszorc.com/blog/2017/12/11/high-level-problems-with-git-and-how-to-fix-them/</dc:identifier>
</item>
<item>
<title>YouTube Demonetization Screenshot Leaks and Secret YouTube Meeting</title>
<link>http://www.twitlonger.com/show/n_1sqbsph</link>
<guid isPermaLink="true" >http://www.twitlonger.com/show/n_1sqbsph</guid>
<description>&lt;h3 class=&quot;post-title&quot;&gt;YouTube Demonetization Screenshot Leaks + Secret YouTube Meeting&lt;/h3&gt;
&lt;hr/&gt;&lt;p id=&quot;posttext&quot;&gt;Hello,&lt;/p&gt;&lt;p&gt;Allow me to preface first with a few things before we get into this. I am a YouTuber. I am posting this anonymously because I feel the information should get out, as it could benefit creators with insight, but I also am concerned by the potential repercussions sharing these things could bring about.&lt;/p&gt;&lt;p&gt;I was contacted some time ago by a person who was a viewer of my work. This person (henceforth known as “my contact”) worked for a company that ended up being connected to Google/YouTube. I will not provide too many details about this person in order to protect them, but they became my “eyes and ears” behind the scenes on what was going on with YouTube’s new policies and policy enforcement (things they’ve refused to be upfront or direct about). In the midst of “codes” and creators trying to further figure out how to tell if their content is at risk, I felt the need to release this with my contact’s blessing.&lt;/p&gt;&lt;p&gt;Google, some months ago, put out a job posting which required a number of different people to work on one project. Google claimed in the posting that they needed a third party company to work as “web search evaluators.” My contact worked for the unnamed company that put in for the job and was accepted by Google. My contact didn’t know what to expect from the job, but was told to sign a Non-Disclosure Agreement in order to be a part of it. My contact accepted and signed the NDA. That is when things changed.&lt;/p&gt;&lt;p&gt;Once the NDA was signed, my contact found that they weren’t working as a “web search evaluator.” They were demonetizing YouTube videos. They would be given YouTube videos to review and had a checklist of sorts to go through to be sure the video fit (or didn’t fit) certain criteria. You can see screenshots from my contact’s end in this post via Imgur.&lt;/p&gt;&lt;p&gt;One of the most important things to take away from this is that if the person reviewing the video wouldn’t feel comfortable watching the video in public, it should automatically be demonetized. My contact stated that the company told them that if they were on the fence about a video and didn’t really know if it violated any of YouTube’s new “rules,” to demonetize the video anyway. Also, if the reviewer doesn’t find anything listed that’s wrong with the video, they are allowed to insert their own personal belief on something that is sensitive or inappropriate and can have the video demonetized that way, as well.&lt;/p&gt;&lt;p&gt;Here are the screenshots from the third party company’s viewpoint:&lt;/p&gt;&lt;p&gt;DEMONETIZATION LEAKED SCREENSHOTS: https://imgur.com/a/uTLTS&lt;/p&gt;&lt;p&gt;This will hopefully provide insight for creators who are confused on how YouTube decides what is okay and what isn’t. Truthfully, it’s not really YouTube who is deciding it. It’s the employees at the company they hired to review the videos. It’s my belief that anytime you request a manual review, these people are the ones conducting it, and they can demonetize for whatever reason they see fit, even if they personally disagree with the content or message. This could explain why many videos that don’t violate any known criteria can still be demonetized by manual review. Because the reviewer thought it should be based on their own reasoning.&lt;/p&gt;&lt;p&gt;Now, as for the secret meeting, which may or may not tie into this whole issue (you decide if you think it does)...&lt;/p&gt;&lt;p&gt;This all started to take effect after YouTube held a private meeting with select creators. Obviously the media issues gave this all a violent shove into reality, but YouTube had been ramping up to make changes before this all came to pass. A different contact of mine was involved in the secret meeting with YouTube, which took place around mid 2016 at a Google office in Los Angeles. The meeting had one purpose: to discuss what should be done with unwanted creators on their platform. Some unwanted channel names that were mentioned were Leafyishere, GradeAUnderA, Keemstar/DramaAlert, Scarce, and Onision.&lt;/p&gt;&lt;p&gt;In attendance were a number of higher ranking individuals from a few different departments at YouTube. CEO Susan Wojcicki was not in attendance.&lt;/p&gt;&lt;p&gt;All the creators in attendance were made to sign NDAs. The creators were asked what they felt should be done about the more toxic channels on YouTube. There was no conclusion from YouTube’s end, but it was agreed upon that no censorship or channel deletion should occur and that something else should be done. Months later, demonetization began sweeping the platform and hindering the growth of countless channels. Now many of us know the reasons for this. Ad companies got spooked by offensive content that was monetized. However, I am unsure as to whether or not the demonetization is enforced as strictly as it is to also help drive certain unwanted players off the field, in keeping with what concerns were discussed at the meeting.&lt;/p&gt;&lt;p&gt;I hope this information proves useful to some of you. That’s all for now. If we can get this information around, I feel it will at least help creators get a better grip on what they’re up against. Share the screenshots, make videos discussing it, or simply observe, whatever you feel is best for you.&lt;/p&gt;&lt;p&gt;I wish you well,&lt;/p&gt;&lt;p&gt;-TD&lt;/p&gt;
&lt;p class=&quot;actions text-right&quot;&gt;&lt;a href=&quot;http://www.twitlonger.com/post/dog_tower/939575388962947073&quot;&gt;Reply&lt;/a&gt; · &lt;a href=&quot;http://www.twitlonger.com/show/n_1sqbsph#&quot; data-toggle=&quot;modal&quot; data-target=&quot;#reportModal&quot;&gt; Report Post&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 12 Dec 2017 04:24:50 +0000</pubDate>
<dc:creator>djsumdog</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.twitlonger.com/show/n_1sqbsph</dc:identifier>
</item>
<item>
<title>Learn web development</title>
<link>https://developer.mozilla.org/en-US/docs/Learn</link>
<guid isPermaLink="true" >https://developer.mozilla.org/en-US/docs/Learn</guid>
<description>&lt;article id=&quot;wikiArticle&quot; readability=&quot;65.574934403457&quot;&gt;&lt;div readability=&quot;8&quot;&gt;
&lt;p class=&quot;summary&quot;&gt;Welcome to the MDN Learning Area. This set of articles aims to provide complete beginners to web development with all they need to start coding simple websites.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The aim of this area of MDN is not to take you from &quot;beginner&quot; to &quot;expert&quot; but to take you from &quot;beginner&quot; to &quot;comfortable&quot;. From there you should be able to start making your own way, learning from &lt;a href=&quot;https://developer.mozilla.org/en-US/&quot;&gt;the rest of MDN&lt;/a&gt; and other intermediate to advanced resources that assume a lot of previous knowledge.&lt;/p&gt;
&lt;p&gt;If you are a complete beginner, web development can be challenging — we will hold your hand and provide enough detail for you to feel comfortable and learn the topics properly. You should feel at home whether you are a student learning web development (on your own or as part of a class), a teacher looking for class materials, a hobbyist, or someone who just wants to understand more about how web technologies work.&lt;/p&gt;
&lt;div class=&quot;warning&quot; readability=&quot;9.5670995670996&quot;&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: The content in the Learning Area is being added to regularly. If you have questions regarding topics you'd like to see covered or feel are missing, see the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn#Contact_us&quot;&gt;Contact us&lt;/a&gt; section below for information on how to get in touch.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;Where_to_start&quot;&gt;Where to start&lt;/h2&gt;
&lt;ul class=&quot;card-grid&quot;&gt;&lt;li&gt;&lt;span&gt;Complete beginner:&lt;/span&gt; If you are a complete beginner to web development, we'd recommend that you start by working through our &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web&quot;&gt;Getting started with the Web&lt;/a&gt; module, which provides a practical introduction to web development.&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Specific questions:&lt;/span&gt; If you have a specific question about web development, our &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Common_questions&quot;&gt;Common questions&lt;/a&gt; section may have something to help you.&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Beyond the basics:&lt;/span&gt; If you have a bit of knowledge already, the next step is to learn &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/HTML&quot; title=&quot;HTML: HTML (HyperText Markup Language) is a descriptive language that specifies webpage structure.&quot; class=&quot;glossaryLink&quot;&gt;HTML&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/CSS&quot; title=&quot;CSS: CSS (Cascading Style Sheets) is a declarative language that controls how webpages look in the browser.&quot; class=&quot;glossaryLink&quot;&gt;CSS&lt;/a&gt; in detail: start with our &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML&quot;&gt;Introduction to HTML&lt;/a&gt; module and move on to our &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS&quot;&gt;Introduction to CSS&lt;/a&gt; module.&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Moving onto scripting:&lt;/span&gt; If you are comfortable with HTML and CSS already, or you are mainly interested in coding, you'll want to move onto &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/JavaScript&quot; title=&quot;JavaScript: JavaScript (JS) is a programming language mostly used client-side to dynamically script webpages, but often also server-side, using packages such as Node.js.&quot; class=&quot;glossaryLink&quot;&gt;JavaScript&lt;/a&gt; or server-side development. Begin with our &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps&quot;&gt;JavaScript first steps&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps&quot;&gt;Server-side first steps&lt;/a&gt; modules.&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;note&quot; readability=&quot;5.9230769230769&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Our &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary&quot;&gt;Glossary&lt;/a&gt; provides terminology definitions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;moreinfo&quot;&gt;
&lt;p&gt;Random glossary entry&lt;/p&gt;
&lt;dl&gt;&lt;dt&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/CDN&quot;&gt;CDN&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A &lt;strong&gt;CDN &lt;/strong&gt;(Content Delivery Network) is a group of servers spread out over many locations. These servers store duplicate copies of data so that servers can fulfill data requests based on which servers are closest to the respective end-users. CDNs make for fast service less affected by high traffic.&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;
&lt;h2 id=&quot;Topics_covered&quot;&gt;Topics covered&lt;/h2&gt;
&lt;p&gt;The following is a list of all the topics we cover in the MDN learning area.&lt;/p&gt;
&lt;dl&gt;&lt;dt&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web&quot;&gt;Getting started with the web&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Provides a practical introduction to web development for complete beginners.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/HTML&quot;&gt;HTML — Structuring the web&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;HTML is the language that we use to structure the different parts of our content and define what their meaning or purpose is. This topic teaches HTML in detail.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS&quot;&gt;CSS — Styling the web&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;CSS is the language that we can use to style and lay out our web content, as well as adding behavior like animation. This topic provides comprehensive coverage of CSS.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript&quot;&gt;JavaScript — Dynamic client-side scripting&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;JavaScript is the scripting language used to add dynamic functionality to web pages. This topic teaches all the essentials needed to become comfortable with writing and understanding JavaScript.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Accessibility&quot;&gt;Accessibility — make the web usable by everyone&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Accessibility is the practice of making web content available to as many people as possible regardless of disability, device, locale, or other differentiating factors. This topic gives you all you need to know.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing&quot;&gt;Tools and testing&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;This topic is a place to cover tools developers use to facilitate their work, such as cross browser testing tools.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Server-side&quot;&gt;Server-side website programming&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Even if you are concentrating on client-side web development, it is still useful to know about how servers and server-side code features work. This topic provides a general introduction to how the server-side works, and detailed tutorials detailing how to build up a server-side app using two popular frameworks — Django (Python) and Express (node.js). &lt;/dd&gt;
&lt;/dl&gt;&lt;h2 id=&quot;Getting_our_code_examples&quot;&gt;Getting our code examples&lt;/h2&gt;
&lt;p&gt;The code examples you'll encounter in the Learning Area are all &lt;a href=&quot;https://github.com/mdn/learning-area/&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;available on GitHub&lt;/a&gt;. If you want to copy them all to your computer, the easiest way is to:&lt;/p&gt;
&lt;ol readability=&quot;-1.7403400309119&quot;&gt;&lt;li&gt;&lt;a href=&quot;http://git-scm.com/downloads&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;Install Git&lt;/a&gt; on your machine. This is the underlying version control system software that GitHub works on top of.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/join&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;Sign up for a GitHub account&lt;/a&gt;. It's simple and easy.&lt;/li&gt;
&lt;li&gt;Once you've signed up, log in to &lt;a href=&quot;https://github.com&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;github.com&lt;/a&gt; with your username and password.&lt;/li&gt;
&lt;li&gt;Open your computer's &lt;a href=&quot;https://www.lifewire.com/how-to-open-command-prompt-2618089&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;command prompt&lt;/a&gt; (Windows) or terminal (&lt;a href=&quot;https://help.ubuntu.com/community/UsingTheTerminal&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;Linux&lt;/a&gt;, &lt;a href=&quot;http://blog.teamtreehouse.com/introduction-to-the-mac-os-x-command-line&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;MacOSX&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;To copy the learning area repo to a folder called learning-area in the current location your command prompt/terminal is pointing to, use the following command:
&lt;pre class=&quot;brush: bash&quot;&gt;
git clone https://github.com/mdn/learning-area
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;You can now enter the directory and find the files you are after (either using your finder/file explorer or the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cd_(command)&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;cd command&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;You can update the &lt;code&gt;learning-area&lt;/code&gt; repository with any changes made to the master version on GitHub with the following steps:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;In your command prompt/terminal, go inside the &lt;code&gt;learning-area&lt;/code&gt; directory using &lt;code&gt;cd&lt;/code&gt;. For example, if you were in the parent directory:
&lt;pre class=&quot;brush: bash&quot;&gt;
cd learning-area
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Update the repository using the following command:
&lt;pre class=&quot;brush: bash&quot;&gt;
git pull
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you want to get in touch with us about anything, the best way is to drop us a message on our &lt;a href=&quot;https://discourse.mozilla-community.org/t/learning-web-development-marking-guides-and-questions/16294&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;Learning Area discourse thread&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/MDN/Community/Conversations#Chat_in_IRC&quot;&gt;IRC channels&lt;/a&gt;. We'd like to hear from you about anything you think is wrong or missing on the site, requests for new learning topics, requests for help with items you don't understand, or any other questions or concerns.&lt;/p&gt;
&lt;p&gt;If you're interested in helping develop/improve the content, take a look at &lt;a href=&quot;https://developer.mozilla.org/en-US/Learn/How_to_contribute&quot;&gt;how you can help&lt;/a&gt;, and get in touch! We are more than happy to talk to you, whether you are a learner, teacher, experienced web developer, or someone else interested in helping to improve the learning experience.&lt;/p&gt;

&lt;h2 id=&quot;See_also&quot;&gt;See also&lt;/h2&gt;
&lt;dl&gt;&lt;dt&gt;&lt;a href=&quot;https://www.mozilla.org/en-US/newsletter/developer/&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;Mozilla Developer Newsletter&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Our newsletter for web developers, which is a great resource for all levels of experience.&lt;/dd&gt;
&lt;/dl&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&quot;https://www.codecademy.com/&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;Codecademy&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A great interactive site for learning programming languages from scratch.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;https://code.org/&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;Code.org&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Basic coding theory and practice, mainly aimed at children/complete beginners.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;https://www.freecodecamp.org/&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;freeCodeCamp.org&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Interactive site with tutorials and projects to learn web development.&lt;/dd&gt;
&lt;/dl&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&quot;https://learning.mozilla.org/web-literacy/&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;Web Literacy Map&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A framework for entry-level web literacy &amp;amp; 21st Century skills, which also provides access to teaching activities sorted by category.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;https://learning.mozilla.org/activities&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;Teaching activities&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A series of teaching activities for teaching (and learning) created by the Mozilla Foundation, covering everything from basic web literacy and privacy to JavaScript and hacking Minecraft.&lt;/dd&gt;
&lt;/dl&gt;&lt;/article&gt;&lt;div class=&quot;wiki-block contributors&quot;&gt;
&lt;h2 class=&quot;offscreen&quot;&gt;Document Tags and Contributors&lt;/h2&gt;

&lt;div class=&quot;contributors-sub&quot;&gt; &lt;strong&gt;Contributors to this page:&lt;/strong&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/sideshowbarker&quot;&gt;sideshowbarker&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/har256b&quot;&gt;har256b&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/leafront&quot;&gt;leafront&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/mykebrian&quot;&gt;mykebrian&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/raisedadead&quot;&gt;raisedadead&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/bhaskarmac&quot;&gt;bhaskarmac&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/genSud&quot;&gt;genSud&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/SphinxKnight&quot;&gt;SphinxKnight&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/ProHos&quot;&gt;ProHos&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/ayespi&quot;&gt;ayespi&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/Sibiraj-S&quot;&gt;Sibiraj-S&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/agilanshanthi&quot;&gt;agilanshanthi&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/hadleyel&quot;&gt;hadleyel&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/danieltex&quot;&gt;danieltex&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/chrisdavidmills&quot;&gt;chrisdavidmills&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/dvincent&quot;&gt;dvincent&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/entriek&quot;&gt;entriek&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/l34kr&quot;&gt;l34kr&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/BychekRU&quot;&gt;BychekRU&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/Sebastianz&quot;&gt;Sebastianz&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/rolfedh&quot;&gt;rolfedh&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/fscholz&quot;&gt;fscholz&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/Sheppy&quot;&gt;Sheppy&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/espinielli&quot;&gt;espinielli&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/fanousek&quot;&gt;fanousek&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/Jeremie&quot;&gt;Jeremie&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/jsx&quot;&gt;jsx&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/Andrew_Pfeiffer&quot;&gt;Andrew_Pfeiffer&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/kscarfone&quot;&gt;kscarfone&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/jswisher&quot;&gt;jswisher&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/anistark&quot;&gt;anistark&lt;/a&gt;&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Tue, 12 Dec 2017 03:33:35 +0000</pubDate>
<dc:creator>ktta</dc:creator>
<og:type>website</og:type>
<og:image>https://cdn.mdn.mozilla.net/static/img/opengraph-logo.72382e605ce3.png</og:image>
<og:title>Learn web development</og:title>
<og:url>https://developer.mozilla.org/en-US/docs/Learn</og:url>
<og:description>The aim of this area of MDN is not to take you from &quot;beginner&quot; to &quot;expert&quot; but to take you from &quot;beginner&quot; to &quot;comfortable&quot;. From there you should be able to start making your own way, learning from the rest of MDN and other intermediate to advanced resources that assume a lot of previous knowledge.</og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://developer.mozilla.org/en-US/docs/Learn</dc:identifier>
</item>
<item>
<title>An Interactive Introduction to Quantum Computing</title>
<link>http://davidbkemp.github.io/QuantumComputingArticle/</link>
<guid isPermaLink="true" >http://davidbkemp.github.io/QuantumComputingArticle/</guid>
<description>&lt;p&gt;Or &lt;em&gt;What Do You Mean They Can Be Both Zero And One At The Same Time!&lt;/em&gt;&lt;/p&gt;
&lt;img src=&quot;http://davidbkemp.github.io/QuantumComputingArticle/animated-qubits.png&quot; class=&quot;titleImage&quot; alt=&quot;qubit animation&quot;/&gt;&lt;p&gt;By David Kemp&lt;/p&gt;
&lt;p&gt;@david_b_kemp&lt;/p&gt;
&lt;p&gt;Heard of quantum computers?&lt;/p&gt;
&lt;p&gt;Heard that they are faster than conventional computers?&lt;/p&gt;
&lt;p&gt;Perhaps you have heard of quantum bits (abbreviated to qubits).&lt;/p&gt;
&lt;p&gt;Maybe you have even heard of the puzzling notion that &lt;strong&gt;qubits can have the values 0 and 1 &lt;em&gt;both at the same time&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let me try to explain what this really means.&lt;/p&gt;
&lt;p&gt;This is part one of a two part series for those that want to learn a little about quantum computing, but lack the mathematics and quantum physics background required by many of the introductions out there. It covers some of the basics of quantum computing, such as qubits, state phases, and quantum interference. &lt;a href=&quot;http://davidbkemp.github.io/QuantumComputingArticle/part2.html&quot;&gt;Part 2&lt;/a&gt; goes on to look at quantum search.&lt;/p&gt;
&lt;h2&gt;Qubits&lt;/h2&gt;
&lt;p&gt;I assume you know what plain old ordinary binary bits are. &lt;span class=&quot;help&quot;&gt;Sorry, I but cannot assume you know nothing at all!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Conventional bits are implemented using many different approaches: e.g. voltages on a wire, pulses of light on a glass fibre, etc. etc.&lt;/p&gt;
&lt;p&gt;Just like bits, &lt;em&gt;qubits&lt;/em&gt; have a binary state.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Qubits represent 0 and 1 using quantum phenomenon like the nuclear spin direction of individual atoms&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;E.g. use “clockwise” for 0 and “anti clockwise” for 1.&lt;/p&gt;
&lt;div class=&quot;labelledImage&quot;&gt;&lt;img src=&quot;http://davidbkemp.github.io/QuantumComputingArticle/spinDown.svg&quot; alt=&quot;Spin Down&quot; class=&quot;nuclearSpin&quot;/&gt;&lt;p&gt;0&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;labelledImage&quot;&gt;&lt;img src=&quot;http://davidbkemp.github.io/QuantumComputingArticle/spinUp.svg&quot; alt=&quot;Spin Up&quot; class=&quot;nuclearSpin&quot;/&gt;&lt;p&gt;1&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;The NOT operator&lt;/h2&gt;
&lt;p&gt;Consider the conventional NOT (or bit-flip) operator. &lt;span class=&quot;help&quot;&gt;0 and 1 can represent logical &lt;em&gt;true&lt;/em&gt; and &lt;em&gt;false&lt;/em&gt;. NOT &lt;em&gt;true&lt;/em&gt; is &lt;em&gt;false&lt;/em&gt;, and NOT &lt;em&gt;false&lt;/em&gt; is &lt;em&gt;true&lt;/em&gt;. And so, NOT of 1 is 0, and NOT of 0 is 1.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;For example, performing a NOT operation on the right most bit of the binary number 111 &lt;strong&gt;flips the target bit&lt;/strong&gt; and results in 110.&lt;/p&gt;
&lt;p&gt;In what follows, it will be convenient to represent the state of a system by listing all possible states and placing a blue disk next to the current state.&lt;/p&gt;
&lt;p&gt;Click the button labelled “&lt;em&gt;Not bit&lt;sub&gt;a&lt;/sub&gt;”&lt;/em&gt; to apply the NOT operation to the left bit, and click the button labelled “&lt;em&gt;Not bit&lt;sub&gt;b&lt;/sub&gt;”&lt;/em&gt; to apply the NOT operation to the right bit:&lt;/p&gt;
&lt;p&gt;&lt;small&gt;There is nothing quantum mechanical about these first few interactive examples. Their main purpose is to familiarise you with interactive animations I use in this article.&lt;/small&gt;&lt;/p&gt;
&lt;div class=&quot;animationBlock&quot; id=&quot;simpleNotExample&quot; data-bit-labels=&quot;bit-a,bit-b&quot;&gt;
&lt;div class=&quot;animationBlock_buttons&quot;&gt;
&lt;p&gt;&lt;button class=&quot;operator&quot; data-operator=&quot;not&quot; data-qubits=&quot;1&quot; data-skipinterferencesteps=&quot;&quot;&gt;Not bit&lt;sub&gt;a&lt;/sub&gt;&lt;/button&gt; &lt;button class=&quot;operator&quot; data-operator=&quot;not&quot; data-qubits=&quot;0&quot; data-skipinterferencesteps=&quot;&quot;&gt;Not bit&lt;sub&gt;b&lt;/sub&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;State:&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Random NOT&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Random NOT&lt;/em&gt;: A NOT operator that has a specified chance of flipping a bit.&lt;/p&gt;
&lt;p&gt;Although not very common, the “Random NOT” is still &lt;strong&gt;just a classical (non-quantum) operator&lt;/strong&gt;, but it will help me explain the workings of some quantum operators.&lt;/p&gt;
&lt;p&gt;Consider applying a Random NOT twice to a bit whose initial value is 0, where the operator has, for instance, a 30% chance of flipping the bit. What is the probability of the final state being 0?&lt;/p&gt;
&lt;p&gt;There are a couple of possible scenarios. For instance, the first Random NOT might flip the bit from 0 to 1, and the second Random NOT might flip the bit back to 0. We represent this as:&lt;/p&gt;
&lt;p&gt;0 → 1 → 0&lt;/p&gt;
&lt;p&gt;There are two paths leading to a final state of 0:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;0 → 0 → 0 with probability of 0.7 x 0.7 = 0.49&lt;/li&gt;
&lt;li&gt;0 → 1 → 0 with probability of 0.3 x 0.3 = 0.09&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;And so the final state will be 0 with a probability of 49% + 9% = 58%&lt;/p&gt;
&lt;img src=&quot;http://davidbkemp.github.io/QuantumComputingArticle/classicalRandomNot.png&quot; class=&quot;largeImage&quot; alt=&quot;Probability tree for random NOT&quot;/&gt;&lt;h2&gt;Random NOT (your turn)&lt;/h2&gt;
&lt;p&gt;Next we provide an interactive animation of the Random NOT operator.&lt;/p&gt;
&lt;p&gt;The blue disk now splits in two so that we can track the different possible outcomes.&lt;/p&gt;
&lt;p&gt;The probability of being in a state is represented by the radius of the disk.&lt;/p&gt;
&lt;p&gt;Press the “Random NOT” button multiple times and &lt;strong&gt;note how the arrows add head to tail&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Still nothing quantum mechanical about any of this. We are still just warming up.&lt;/small&gt;&lt;/p&gt;
&lt;div class=&quot;animationBlock&quot; id=&quot;randomNotExample&quot;&gt;
&lt;div class=&quot;animationBlock_buttons&quot;&gt;
&lt;p&gt;&lt;button class=&quot;operator&quot; data-operator=&quot;randomNot&quot; data-qubits=&quot;0&quot;&gt;Random Not&lt;sub&gt;30%&lt;/sub&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;State:&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Measurement&lt;/h2&gt;
&lt;p&gt;We have seen how a random NOT operator can cause a conventional computer to have various probabilities of being in different states. Of course &lt;strong&gt;in reality it is in only one of those states&lt;/strong&gt;. We just don't know which one. Strangely, this is an assumption about reality that we will need to reconsider when we look at qubits.&lt;/p&gt;
&lt;p&gt;If you peek at the system to determine its actual state, then the probabilities all &lt;em&gt;collapse&lt;/em&gt; so that one state (the observed state) is deemed to now have a probability of 1, and all the others are deemed to have a probability of 0.&lt;/p&gt;
&lt;p&gt;Remember, the larger the blue disk, the more likely the system will turn out to be in that state.&lt;/p&gt;
&lt;p&gt;In quantum computing, the word &lt;em&gt;measurement&lt;/em&gt; refers to this act of peeking.&lt;/p&gt;
&lt;p&gt;Press the “Random NOT” button multiple times and then press the “measurement” button.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Note that there is still nothing quantum mechanical about this yet. That comes next!&lt;/small&gt;&lt;/p&gt;
&lt;div class=&quot;animationBlock&quot; id=&quot;classicalMeasurementExample&quot;&gt;
&lt;div class=&quot;animationBlock_buttons&quot;&gt;
&lt;p&gt;&lt;button class=&quot;operator&quot; data-operator=&quot;randomNot&quot; data-qubits=&quot;0&quot;&gt;Random Not&lt;sub&gt;30%&lt;/sub&gt;&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;button class=&quot;measure&quot; data-qubits=&quot;0&quot;&gt;Measure&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;State:&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Hadamard of 0&lt;/h2&gt;
&lt;p&gt;The “Hadamard operator” is a special &lt;em&gt;quantum&lt;/em&gt; operator that can be applied to qubits.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; this first look at quantum operators will be pretty boring. I promise it will get interesting soon!&lt;/p&gt;
&lt;p&gt;As you will see below, the Hadamard initially acts like a Random NOT with 50% chance of success.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;In this interactive example, I purposely disable the Hadamard button after you press it. Later in this article we will see what happens when you apply the Hadamard twice in a row.&lt;/small&gt;&lt;/p&gt;
&lt;div class=&quot;animationBlock&quot; id=&quot;hadamardOf0Example&quot;&gt;
&lt;div class=&quot;animationBlock_buttons&quot;&gt;
&lt;p&gt;&lt;button class=&quot;operator&quot; data-operator=&quot;hadamard&quot; data-qubits=&quot;0&quot; data-disable-after-use=&quot;&quot;&gt;Apply Hadamard&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;button class=&quot;reset&quot;&gt;Reset&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;State:&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Nothing unusual about that was there?&lt;/h2&gt;
&lt;p&gt;But you will be surprised by what comes next...&lt;/p&gt;
&lt;h2&gt;Hadamard of 1&lt;/h2&gt;
&lt;p&gt;Things start to become weird when you look at the Hadamard of 1.&lt;/p&gt;
&lt;p&gt;Look carefully at the arrow directions.&lt;/p&gt;
&lt;div class=&quot;animationBlock&quot; id=&quot;hadamardOf1Example&quot;&gt;
&lt;div class=&quot;animationBlock_buttons&quot;&gt;
&lt;p&gt;&lt;button class=&quot;operator&quot; data-operator=&quot;hadamard&quot; data-qubits=&quot;0&quot; data-disable-after-use=&quot;&quot;&gt;Apply Hadamard&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;button class=&quot;reset&quot;&gt;Reset&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;State:&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Huh?&lt;/h2&gt;
&lt;img src=&quot;http://davidbkemp.github.io/QuantumComputingArticle/confusedCat.jpg&quot; class=&quot;mediumImage&quot; alt=&quot;Photograph of confused cat&quot;/&gt;&lt;h2&gt;Phase&lt;/h2&gt;
&lt;p&gt;Puzzled? You should be if this is all new to you. Please hang in there for a while longer.&lt;/p&gt;
&lt;p&gt;The arrow directions represent what physicists call &lt;em&gt;phase&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;it is an abstract concept of quantum mechanics.&lt;/li&gt;
&lt;li&gt;it has no “common sense” interpretation.&lt;/li&gt;
&lt;li&gt;it can &lt;strong&gt;only be measured indirectly&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In the case of nuclear spin, phases can be manipulated by applying electric and/or magnetic fields.&lt;/p&gt;
&lt;p&gt;We will see the importance of phase in a moment, but first let's look at another interesting quantum computing operator...&lt;/p&gt;
&lt;h2&gt;T Operator&lt;/h2&gt;
&lt;p&gt;The T operator rotates the phase of 1, but leaves 0 untouched.&lt;/p&gt;
&lt;p&gt;Note how it does not affect the probabilities at all.&lt;/p&gt;

&lt;h2&gt;Measurement Revisited&lt;/h2&gt;
&lt;p&gt;Recall:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Measurement causes the system to collapse to the observed state.&lt;/li&gt;
&lt;li&gt;The larger the blue disk, the more likely the system will collapse to that state.&lt;/li&gt;
&lt;li&gt;Once the system has collapsed to a particular state, it will remain in that state until another operation is performed.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; The likelihood of a state being observed is entirely determined by the &lt;em&gt;size&lt;/em&gt; of the blue disk, and is completely unaffected by the &lt;em&gt;direction&lt;/em&gt; of the arrow.&lt;/p&gt;
&lt;div class=&quot;animationBlock&quot; id=&quot;measurementExample&quot;&gt;
&lt;div class=&quot;animationBlock_buttons&quot;&gt;
&lt;p&gt;&lt;button class=&quot;measure&quot; data-qubits=&quot;0,1&quot;&gt;Measure&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;button class=&quot;reset&quot;&gt;Reset&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;State:&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Quantum Interference&lt;/h2&gt;
&lt;p&gt;Consider what happens when we apply a Hadamard operation twice in a row.&lt;/p&gt;
&lt;p&gt;Let's assume that a qubit is initially known to definitely have the value 0. If you were to apply the Hadamard to it twice in a row, then there are four equally likely scenarios (Recall that &lt;span class=&quot;math&quot;&gt;“x → y → z”&lt;/span&gt; means “the qubit starts with a value x, the first Hadamard results in the qubit having the value y, and the second Hadamard results in the qubit having the value z”):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;0 → 0 → 0&lt;/li&gt;
&lt;li&gt;0 → 0 → 1&lt;/li&gt;
&lt;li&gt;0 → 1 → 0&lt;/li&gt;
&lt;li&gt;0 → 1 → 1&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;So the final value should be equally likely to be 0 or 1 but, in reality, &lt;strong&gt;applying the Hadamard operator twice in a row always returns the qubit to its original value&lt;/strong&gt;. In our case, where the qubit is initially 0, two applications of the Hadamard will result in it being 0 again.&lt;/p&gt;
&lt;p&gt;Try it out. Press the “Apply Hadamard” button twice and watch it return to having a 100% likelihood of having the value 0.&lt;/p&gt;
&lt;div class=&quot;animationBlock&quot; id=&quot;fullInterferenceExample&quot;&gt;
&lt;div class=&quot;animationBlock_buttons&quot;&gt;
&lt;p&gt;&lt;button class=&quot;operator&quot; data-operator=&quot;hadamard&quot; data-qubits=&quot;0&quot;&gt;Apply Hadamard&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;State:&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Totally confused?&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;If quantum mechanics hasn't profoundly shocked you, you haven't understood it yet.&lt;br/&gt;&lt;em&gt;Neils Bohr&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;What is going on here?&lt;/h2&gt;
&lt;p&gt;The state of the qubit after the first Hadamard seems to have a 50% chance of being 0 and a 50% chance of being 1.&lt;/p&gt;
&lt;p&gt;The second Hadamard is applied to both the 0 and 1 states and the results are combined.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The arrows still add head to tail&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The two different scenarios ending in a 1 state have opposite phases and so they cancel each other out.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This process of phases causing possible outcomes to cancel or re-enforce is what physicists call &lt;em&gt;interference&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This is what philosophers of physics loose sleep over.&lt;/p&gt;
&lt;img src=&quot;http://davidbkemp.github.io/QuantumComputingArticle/doubleHadamardOf0.png&quot; class=&quot;largeImage&quot; alt=&quot;Paths for applying Hadamard twice to 0.&quot;/&gt;&lt;p&gt;By the way, the mathematically inclined may be worried about all the probabilities not adding up to 1 any more. The trick is that the arrow lengths now have to represent the square roots of the probabilities. We will briefly cover this in more detail in the section entitled &lt;a href=&quot;http://davidbkemp.github.io/QuantumComputingArticle/part2.html#maths&quot;&gt;Some mathematics&lt;/a&gt; in Part 2.&lt;/p&gt;
&lt;h2&gt;Hadamard of 1 (revisited)&lt;/h2&gt;
&lt;p&gt;It is instructive to observe the effects of applying a Hadamard twice in a row when the initial value is 1. This time, the qubit returns to 1:&lt;/p&gt;
&lt;div class=&quot;animationBlock&quot; id=&quot;doubleHadamardOf1&quot;&gt;
&lt;div class=&quot;animationBlock_buttons&quot;&gt;
&lt;p&gt;&lt;button class=&quot;operator&quot; data-operator=&quot;hadamard&quot; data-qubits=&quot;0&quot;&gt;Apply Hadamard&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;State:&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Different kinds of uncertainty&lt;/h2&gt;
&lt;p&gt;We are actually dealing with two different kinds of uncertainty:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;It is possible that a bit, and even a qubit, may be in a fixed state of 0 or 1, but that you simply do not know which one it is.&lt;/li&gt;
&lt;li&gt;However, it is also possible for a qubit to be in what is called a “&lt;strong&gt;&lt;em&gt;superposition&lt;/em&gt;&lt;/strong&gt;” of both 0 and 1. &lt;strong&gt;Such a qubit is in a strange combination of both 0 and 1.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Small Diversion: Superposition of &lt;em&gt;Locations&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;So far, the rather abstract phenomenon of nuclear spin is the only approach that I have mentioned for creating qubits.&lt;/p&gt;
&lt;p&gt;Quantum physics seems even more bizarre when you discover that physical objects can be in superpositions of different &lt;em&gt;locations&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The photons travelling through an “interferometer” are in superpositions of locations that can be kilometres apart (as they are in the &lt;a href=&quot;http://www.ligo-la.caltech.edu/&quot;&gt;LIGO&lt;/a&gt; interferometer).&lt;/p&gt;
&lt;p&gt;A simple interferometer is shown below. Photons are emitted by a light source (e.g. a laser) that is pointing at a “half silvered mirror”, which reflects some of the light and lets some of the light through.&lt;/p&gt;
&lt;img src=&quot;http://davidbkemp.github.io/QuantumComputingArticle/interferometer.jpg&quot; class=&quot;mediumImage&quot; alt=&quot;Interferometer&quot;/&gt;&lt;p&gt;Individual photons end up in a superposition of having been reflected and having been let through. A couple more mirrors are used to bring the split light beam back together at a detector. The positions of the mirrors and the detector all effect the lengths of the two different paths, so that one path can be longer than the other. Like the T operator described earlier, a change in the relative path lengths will alter the relative phases of the two photon states. A difference equal to the wavelength of light is enough to change the relative phases by an entire 360 degrees. If the phases are exactly opposite, then they will cancel each other out, and the detector will not detect anything. The resulting effect will be an alternating series of light and dark concentric rings like those shown below.&lt;/p&gt;
&lt;p&gt;This interference effect even happens when the light source is slowly emitting photons one at a time.&lt;/p&gt;
&lt;img src=&quot;http://davidbkemp.github.io/QuantumComputingArticle/interferencePattern.jpg&quot; class=&quot;mediumImage&quot; alt=&quot;Interference Pattern&quot;/&gt;&lt;p&gt;It is tempting to think that the half silvered mirror is splitting each photon in two and that the interference effects are caused by the two photons interacting with each other. But this is not what happens.&lt;/p&gt;
&lt;p&gt;If detectors are placed on the two paths, and the light source is slowly emitting photons one at a time, then the detectors only ever detect a photon on one path or the other. &lt;strong&gt;They never detect two photons at once!&lt;/strong&gt; (Well, they very occasionally do due to the light source very occasionally emitting two at once, but the frequency that this should happen is easily predicted and verified.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If detectors are placed on either or both of the two paths, then the act of detecting the presence (or absence) of the photon causes the superposition to collapse to one or the other, and the interference effects disappear, even if the detector lets the photon continue on.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;It gets even more interesting when you have more than one qubit&lt;/h2&gt;
&lt;p&gt;The quantum weirdness rises to a whole new level when there are two or more qubits interacting. This is explored in &lt;a href=&quot;http://davidbkemp.github.io/QuantumComputingArticle/part2.html&quot;&gt;Part 2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to experiment with various single qubit quantum operations first, then have a play with the &lt;em&gt;&lt;a href=&quot;http://davidbkemp.github.io/quantum-gate-playground/&quot;&gt;Quantum Computer Gate Playground&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;section class=&quot;attributions&quot; readability=&quot;4&quot;&gt;&lt;h2&gt;Attributions&lt;/h2&gt;
&lt;p&gt;Michelson Interferometer: http://commons.wikimedia.org/wiki/File:Michaelson_with_letters.jpg&lt;/p&gt;
&lt;p&gt;Interference Pattern: http://commons.wikimedia.org/wiki/File:Zonenplatte_Cosinus.png&lt;/p&gt;
&lt;/section&gt;&lt;footer&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by/4.0/deed.en_US&quot;&gt;&lt;img alt=&quot;Creative Commons License&quot; src=&quot;http://i.creativecommons.org/l/by/4.0/80x15.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;span xmlns:dct=&quot;http://purl.org/dc/terms/&quot; property=&quot;dct:title&quot;&gt;An Interactive Introduction To Quantum Computing&lt;/span&gt; by &lt;span xmlns:cc=&quot;http://creativecommons.org/ns#&quot; property=&quot;cc:attributionName&quot;&gt;David Kemp&lt;/span&gt; is licensed under a &lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by/4.0/deed.en_US&quot;&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;.&lt;/footer&gt;</description>
<pubDate>Tue, 12 Dec 2017 00:49:44 +0000</pubDate>
<dc:creator>kevlened</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://davidbkemp.github.io/QuantumComputingArticle/</dc:identifier>
</item>
<item>
<title>Statement on Cryptocurrencies and Initial Coin Offerings</title>
<link>https://www.sec.gov/news/public-statement/statement-clayton-2017-12-11</link>
<guid isPermaLink="true" >https://www.sec.gov/news/public-statement/statement-clayton-2017-12-11</guid>
<description>&lt;p&gt;Dec. 11, 2017&lt;/p&gt;&lt;div readability=&quot;224.51537090064&quot;&gt;
&lt;p&gt;The world’s social media platforms and financial markets are abuzz about cryptocurrencies and “initial coin offerings” (&lt;em&gt;ICOs&lt;/em&gt;).  There are tales of fortunes made and dreamed to be made.  We are hearing the familiar refrain, “this time is different.”&lt;/p&gt;
&lt;p&gt;The cryptocurrency and ICO markets have grown rapidly.  These markets are local, national and international and include an ever-broadening range of products and participants.  They also present investors and other market participants with many questions, some new and some old (but in a new form), including, to list just a few:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Is the product legal?  Is it subject to regulation, including rules designed to protect investors?  Does the product comply with those rules?&lt;/li&gt;
&lt;li&gt;Is the offering legal?  Are those offering the product licensed to do so?&lt;/li&gt;
&lt;li&gt;Are the trading markets fair?  Can prices on those markets be manipulated?  Can I sell when I want to?&lt;/li&gt;
&lt;li&gt;Are there substantial risks of theft or loss, including from hacking?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The answers to these and other important questions often require an in-depth analysis, and the answers will differ depending on many factors.  This statement provides my general views on the cryptocurrency and ICO markets&lt;a href=&quot;https://www.sec.gov/news/public-statement/statement-clayton-2017-12-11#_ftn1&quot; name=&quot;_ftnref1&quot; title=&quot;&quot;&gt;[1]&lt;/a&gt; and is directed principally to two groups:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;“Main Street” investors, and&lt;/li&gt;
&lt;li&gt;Market professionals – including, for example, broker-dealers, investment advisers, exchanges, lawyers and accountants – whose actions impact Main Street investors.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;u&gt;Considerations for Main Street Investors&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A number of concerns have been raised regarding the cryptocurrency and ICO markets, including that, as they are currently operating, there is substantially less investor protection than in our traditional securities markets, with correspondingly greater opportunities for fraud and manipulation&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;Investors should understand that to date no initial coin offerings have been registered with the SEC.  The SEC also has not to date approved for listing and trading any exchange-traded products (such as ETFs) holding cryptocurrencies or other assets related to cryptocurrencies.&lt;a href=&quot;https://www.sec.gov/news/public-statement/statement-clayton-2017-12-11#_ftn2&quot; name=&quot;_ftnref2&quot; title=&quot;&quot;&gt;[2]&lt;/a&gt;&lt;strong&gt;  If any person today tells you otherwise, be especially wary.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;We have issued investor alerts, bulletins and statements on initial coin offerings and cryptocurrency-related investments, including with respect to the marketing of certain offerings and investments by celebrities and others.&lt;a href=&quot;https://www.sec.gov/news/public-statement/statement-clayton-2017-12-11#_ftn3&quot; name=&quot;_ftnref3&quot; title=&quot;&quot;&gt;[3]&lt;/a&gt;  Please take a moment to read them.  &lt;strong&gt;If you choose to invest in these products, please ask questions and demand clear answers.&lt;/strong&gt;  A list of sample questions that may be helpful is attached.&lt;/p&gt;
&lt;p&gt;As with any other type of potential investment, if a promoter guarantees returns, if an opportunity sounds too good to be true, or if you are pressured to act quickly, please exercise extreme caution and be aware of the risk that your investment may be lost.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please also recognize that these markets span national borders and that significant trading may occur on systems and platforms outside the United States.  Your invested funds may quickly travel overseas without your knowledge.  As a result, risks can be amplified, including the risk that market regulators, such as the SEC, may not be able to effectively pursue bad actors or recover funds.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To learn more about these markets and their regulation, please read the “Additional Discussion of Cryptocurrencies, ICOs and Securities Regulation” section below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;Considerations for Market Professionals&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I believe that initial coin offerings – whether they represent offerings of securities or not – can be effective ways for entrepreneurs and others to raise funding, including for innovative projects.  However, any such activity that involves an offering of securities must be accompanied by the important disclosures, processes and other investor protections that our securities laws require.  A change in the structure of a securities offering does not change the fundamental point that when a security is being offered, our securities laws must be followed.&lt;a href=&quot;https://www.sec.gov/news/public-statement/statement-clayton-2017-12-11#_ftn4&quot; name=&quot;_ftnref4&quot; title=&quot;&quot;&gt;[4]&lt;/a&gt;  Said another way, replacing a traditional corporate interest recorded in a central ledger with an enterprise interest recorded through a blockchain entry on a distributed ledger may change the form of the transaction, but it does not change the substance. &lt;/p&gt;
&lt;p&gt;I urge market professionals, including securities lawyers, accountants and consultants, to read closely the investigative report we released earlier this year (the “&lt;em&gt;21(a) Report&lt;/em&gt;”)&lt;a href=&quot;https://www.sec.gov/news/public-statement/statement-clayton-2017-12-11#_ftn5&quot; name=&quot;_ftnref5&quot; title=&quot;&quot;&gt;[5]&lt;/a&gt; and review our subsequent enforcement actions.&lt;a href=&quot;https://www.sec.gov/news/public-statement/statement-clayton-2017-12-11#_ftn6&quot; name=&quot;_ftnref6&quot; title=&quot;&quot;&gt;[6]&lt;/a&gt;  In the 21(a) Report, the Commission applied longstanding securities law principles to demonstrate that a particular token constituted an investment contract and therefore was a security under our federal securities laws.  Specifically, we concluded that the token offering represented an investment of money in a common enterprise with a reasonable expectation of profits to be derived from the entrepreneurial or managerial efforts of others.&lt;/p&gt;
&lt;p&gt;Following the issuance of the 21(a) Report, certain market professionals have attempted to highlight utility characteristics of their proposed initial coin offerings in an effort to claim that their proposed tokens or coins are not securities.  Many of these assertions appear to elevate form over substance.  Merely calling a token a “utility” token or structuring it to provide some utility does not prevent the token from being a security.  Tokens and offerings that incorporate features and marketing efforts that emphasize the potential for profits based on the entrepreneurial or managerial efforts of others continue to contain the hallmarks of a security under U.S. law.  &lt;strong&gt;On this and other points where the application of expertise and judgment is expected, I believe that gatekeepers and others, including securities lawyers, accountants and consultants, need to focus on their responsibilities.  &lt;/strong&gt;I urge you to be guided by the principal motivation for our registration, offering process and disclosure requirements:  investor protection and, in particular, the protection of our Main Street investors.&lt;/p&gt;
&lt;p&gt;I also caution market participants against promoting or touting the offer and sale of coins without first determining whether the securities laws apply to those actions.  &lt;strong&gt;Selling securities generally requires a license, and experience shows that excessive touting in thinly traded and volatile markets can be an indicator of “scalping,” “pump and dump” and other manipulations and frauds.&lt;/strong&gt;  Similarly, I also caution those who operate systems and platforms that effect or facilitate transactions in these products that they may be operating unregistered exchanges or broker-dealers that are in violation of the Securities Exchange Act of 1934.        &lt;/p&gt;
&lt;p&gt;On cryptocurrencies, I want to emphasize two points.  First, while there are cryptocurrencies that do not appear to be securities, simply calling something a “currency” or a currency-based product does not mean that it is not a security.  Before launching a cryptocurrency or a product with its value tied to one or more cryptocurrencies, its promoters must either (1) be able to demonstrate that the currency or product is not a security or (2) comply with applicable registration and other requirements under our securities laws.  Second, brokers, dealers and other market participants that allow for payments in cryptocurrencies, allow customers to purchase cryptocurrencies on margin, or otherwise use cryptocurrencies to facilitate securities transactions should exercise particular caution, including ensuring that their cryptocurrency activities are not undermining their anti-money laundering and know-your-customer obligations.&lt;a href=&quot;https://www.sec.gov/news/public-statement/statement-clayton-2017-12-11#_ftn7&quot; name=&quot;_ftnref7&quot; title=&quot;&quot;&gt;[7]&lt;/a&gt;  &lt;strong&gt;As I have stated previously, these market participants should treat payments and other transactions made in cryptocurrency as if cash were being handed from one party to the other.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;Additional Discussion of Cryptocurrencies, ICOs and Securities Regulation  &lt;/u&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Cryptocurrencies. &lt;/em&gt; Speaking broadly, cryptocurrencies purport to be items of inherent value (similar, for instance, to cash or gold) that are designed to enable purchases, sales and other financial transactions.  They are intended to provide many of the same functions as long-established currencies such as the U.S. dollar, euro or Japanese yen but do not have the backing of a government or other body.  Although the design and maintenance of cryptocurrencies differ, proponents of cryptocurrencies highlight various potential benefits and features of them, including (1) the ability to make transfers without an intermediary and without geographic limitation, (2) finality of settlement, (3) lower transaction costs compared to other forms of payment and (4) the ability to publicly verify transactions.  Other often-touted features of cryptocurrencies include personal anonymity and the absence of government regulation or oversight.  Critics of cryptocurrencies note that these features may facilitate illicit trading and financial transactions, and that some of the purported beneficial features may not prove to be available in practice.&lt;/p&gt;
&lt;p&gt;It has been asserted that cryptocurrencies are not securities and that the offer and sale of cryptocurrencies are beyond the SEC’s jurisdiction.  Whether that assertion proves correct with respect to any digital asset that is labeled as a cryptocurrency will depend on the characteristics and use of that particular asset.  In any event, it is clear that, just as the SEC has a sharp focus on how U.S. dollar, euro and Japanese yen transactions affect our securities markets, we have the same interests and responsibilities with respect to cryptocurrencies.  This extends, for example, to securities firms and other market participants that allow payments to be made in cryptocurrencies, set up structures to invest in or hold cryptocurrencies, or extend credit to customers to purchase or hold cryptocurrencies. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Initial Coin Offerings. &lt;/em&gt; Coinciding with the substantial growth in cryptocurrencies, companies and individuals increasingly have been using initial coin offerings to raise capital for their businesses and projects.  Typically these offerings involve the opportunity for individual investors to exchange currency such as U.S. dollars or cryptocurrencies in return for a digital asset labeled as a coin or token. &lt;/p&gt;
&lt;p&gt;These offerings can take many different forms, and the rights and interests a coin is purported to provide the holder can vary widely.  A key question for all ICO market participants: “Is the coin or token a security?”  As securities law practitioners know well, the answer depends on the facts.  For example, a token that represents a participation interest in a book-of-the-month club may not implicate our securities laws, and may well be an efficient way for the club’s operators to fund the future acquisition of books and facilitate the distribution of those books to token holders.  In contrast, many token offerings appear to have gone beyond this construct and are more analogous to interests in a yet-to-be-built publishing house with the authors, books and distribution networks all to come.  It is especially troubling when the promoters of these offerings emphasize the secondary market trading potential of these tokens.  Prospective purchasers are being sold on the potential for tokens to increase in value – with the ability to lock in those increases by reselling the tokens on a secondary market – or to otherwise profit from the tokens based on the efforts of others.  These are key hallmarks of a security and a securities offering.   &lt;/p&gt;
&lt;p&gt;By and large, the structures of initial coin offerings that I have seen promoted involve the offer and sale of securities and directly implicate the securities registration requirements and other investor protection provisions of our federal securities laws.  Generally speaking, these laws provide that investors deserve to know what they are investing in and the relevant risks involved.  &lt;/p&gt;
&lt;p&gt;I have asked the SEC’s Division of Enforcement to continue to police this area vigorously and recommend enforcement actions against those that conduct initial coin offerings in violation of the federal securities laws. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;Conclusion&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We at the SEC are committed to promoting capital formation.  The technology on which cryptocurrencies and ICOs are based may prove to be disruptive, transformative and efficiency enhancing.  I am confident that developments in fintech will help facilitate capital formation and provide promising investment opportunities for institutional and Main Street investors alike. &lt;/p&gt;
&lt;p&gt;I encourage Main Street investors to be open to these opportunities, but to ask good questions, demand clear answers and apply good common sense when doing so.  When advising clients, designing products and engaging in transactions, market participants and their advisers should thoughtfully consider our laws, regulations and guidance, as well as our principles-based securities law framework, which has served us well in the face of new developments for more than 80 years.  I also encourage market participants and their advisers to engage with the SEC staff to aid in their analysis under the securities laws.  Staff providing assistance on these matters remain available at &lt;a href=&quot;mailto:FinTech@sec.gov&quot;&gt;FinTech@sec.gov&lt;/a&gt;.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;&lt;u&gt;Sample Questions for Investors Considering a Cryptocurrency or ICO&lt;br/&gt;Investment Opportunity&lt;/u&gt;&lt;a href=&quot;https://www.sec.gov/news/public-statement/statement-clayton-2017-12-11#_ftn8&quot; name=&quot;_ftnref8&quot; title=&quot;&quot;&gt;&lt;strong&gt;[8]&lt;/strong&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Who exactly am I contracting with? 
&lt;ul&gt;&lt;li&gt;Who is issuing and sponsoring the product, what are their backgrounds, and have they provided a full and complete description of the product?  Do they have a clear written business plan that I understand?&lt;/li&gt;
&lt;li&gt;Who is promoting or marketing the product, what are their backgrounds, and are they licensed to sell the product?  Have they been paid to promote the product?&lt;/li&gt;
&lt;li&gt;Where is the enterprise located?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Where is my money going and what will be it be used for?  Is my money going to be used to “cash out” others?&lt;/li&gt;
&lt;li&gt;What specific rights come with my investment?&lt;/li&gt;
&lt;li&gt;Are there financial statements?  If so, are they audited, and by whom?&lt;/li&gt;
&lt;li&gt;Is there trading data?  If so, is there some way to verify it? &lt;/li&gt;
&lt;li&gt;How, when, and at what cost can I sell my investment?  For example, do I have a right to give the token or coin back to the company or to receive a refund?  Can I resell the coin or token, and if so, are there any limitations on my ability to resell?&lt;/li&gt;
&lt;li&gt;If a digital wallet is involved, what happens if I lose the key?  Will I still have access to my investment? &lt;/li&gt;
&lt;li&gt;If a blockchain is used, is the blockchain open and public?  Has the code been published, and has there been an independent cybersecurity audit?&lt;/li&gt;
&lt;li&gt;Has the offering been structured to comply with the securities laws and, if not, what implications will that have for the stability of the enterprise and the value of my investment?&lt;/li&gt;
&lt;li&gt;What legal protections may or may not be available in the event of fraud, a hack, malware, or a downturn in business prospects?  Who will be responsible for refunding my investment if something goes wrong?&lt;/li&gt;
&lt;li&gt;If I do have legal rights, can I effectively enforce them and will there be adequate funds to compensate me if my rights are violated?&lt;/li&gt;
&lt;/ul&gt;&lt;div readability=&quot;33.617110379898&quot;&gt;
&lt;hr align=&quot;left&quot; size=&quot;1&quot; width=&quot;33%&quot;/&gt;&lt;div id=&quot;ftn1&quot; readability=&quot;25.84&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sec.gov/news/public-statement/statement-clayton-2017-12-11#_ftnref1&quot; name=&quot;_ftn1&quot; title=&quot;&quot;&gt;[1]&lt;/a&gt; This statement is my own and does not reflect the views of any other Commissioner or the Commission.  This statement is not, and should not be taken as, a definitive discussion of applicable law, all the relevant risks with respect to these products, or a statement of my position on any particular product.  Additionally, this statement is not a comment on any particular submission, in the form of a proposed rule change or otherwise, pending before the Commission. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sec.gov/news/public-statement/statement-clayton-2017-12-11#_ftnref2&quot; name=&quot;_ftn2&quot; title=&quot;&quot;&gt;[2]&lt;/a&gt; The CFTC has designated bitcoin as a commodity.  Fraud and manipulation involving bitcoin traded in interstate commerce are appropriately within the purview of the CFTC, as is the regulation of commodity futures tied directly to bitcoin.  That said, products linked to the value of underlying digital assets, including bitcoin and other cryptocurrencies, may be structured as securities products subject to registration under the Securities Act of 1933 or the Investment Company Act of 1940. &lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;ftn2&quot; readability=&quot;11.00758396533&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sec.gov/news/public-statement/statement-clayton-2017-12-11#_ftnref3&quot; name=&quot;_ftn3&quot; title=&quot;&quot;&gt;[3]&lt;/a&gt; Statement on Potentially Unlawful Promotion of Initial Coin Offerings and Other Investments by Celebrities and Others (Nov. 1, 2017), &lt;em&gt;available at&lt;/em&gt; &lt;a href=&quot;https://www.sec.gov/news/public-statement/statement-potentially-unlawful-promotion-icos&quot;&gt;https://www.sec.gov/news/public-statement/statement-potentially-unlawful-promotion-icos&lt;/a&gt;; Investor Alert:  Public Companies Making ICO-Related Claims (Aug. 28, 2017), &lt;em&gt;available at&lt;/em&gt; &lt;a href=&quot;https://www.sec.gov/oiea/investor-alerts-and-bulletins/ia_icorelatedclaims&quot;&gt;https://www.sec.gov/oiea/investor-alerts-and-bulletins/ia_icorelatedclaims&lt;/a&gt;&lt;em&gt;;&lt;/em&gt; Investor Bulletin:  Initial Coin Offerings (July 25, 2017), &lt;em&gt;available at&lt;/em&gt; &lt;a href=&quot;https://www.sec.gov/oiea/investor-alerts-and-bulletins/ib_coinofferings&quot;&gt;https://www.sec.gov/oiea/investor-alerts-and-bulletins/ib_coinofferings&lt;/a&gt;; Investor Alert:  Bitcoin and Other Virtual Currency-Related Investments (May 7, 2014), &lt;em&gt;available at&lt;/em&gt; &lt;a href=&quot;https://www.investor.gov/additional-resources/news-alerts/alerts-bulletins/investor-alert-bitcoin-other-virtual-currency&quot;&gt;https://www.investor.gov/additional-resources/news-alerts/alerts-bulletins/investor-alert-bitcoin-other-virtual-currency&lt;/a&gt;; Investor Alert: Ponzi Schemes Using Virtual Currencies (July 23, 2013), &lt;em&gt;available at&lt;/em&gt; &lt;a href=&quot;https://www.sec.gov/investor/alerts/ia_virtualcurrencies.pdf&quot;&gt;https://www.sec.gov/investor/alerts/ia_virtualcurrencies.pdf&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;ftn3&quot; readability=&quot;11.900552486188&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sec.gov/news/public-statement/statement-clayton-2017-12-11#_ftnref4&quot; name=&quot;_ftn4&quot; title=&quot;&quot;&gt;[4]&lt;/a&gt; It is possible to conduct an ICO without triggering the SEC’s registration requirements.  For example, just as with a Regulation D exempt offering to raise capital for the manufacturing of a physical product, an initial coin offering that is a security can be structured so that it qualifies for an applicable exemption from the registration requirements.&lt;/p&gt;
&lt;/div&gt;


&lt;div id=&quot;ftn7&quot; readability=&quot;15.77033492823&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sec.gov/news/public-statement/statement-clayton-2017-12-11#_ftnref7&quot; name=&quot;_ftn7&quot; title=&quot;&quot;&gt;[7]&lt;/a&gt; I am particularly concerned about market participants who extend to customers credit in U.S. dollars – a relatively stable asset – to enable the purchase of cryptocurrencies, which, in recent experience, have proven to be a more volatile asset.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sec.gov/news/public-statement/statement-clayton-2017-12-11#_ftnref8&quot; name=&quot;_ftn8&quot; title=&quot;&quot;&gt;[8]&lt;/a&gt; This is not intended to represent an exhaustive list.  Please also see the SEC investor bulletins, alerts and statements referenced in note 3 of this statement.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
<pubDate>Tue, 12 Dec 2017 00:21:38 +0000</pubDate>
<dc:creator>corbinpage</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.sec.gov/news/public-statement/statement-clayton-2017-12-11</dc:identifier>
</item>
<item>
<title>An Interview with an Anonymous Data Scientist (2016)</title>
<link>https://logicmag.io/01-interview-with-an-anonymous-data-scientist/</link>
<guid isPermaLink="true" >https://logicmag.io/01-interview-with-an-anonymous-data-scientist/</guid>
<description>&lt;p&gt;&lt;em&gt;A long conversation with a veteran data scientist on AI, deep learning, FinTech, and the future.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://logicmag.io/content/images/2017/05/datascientistinterview.jpg&quot; width=&quot;100%&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We’re constantly inundated with stories about how data science, machine learning, deep learning, and artificial intelligence are revolutionizing everything. But what do these terms even mean? And are they likely to have anywhere near the impact that the media hype would lead us to believe?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We sat down with a veteran data scientist to help us answer these questions. Over beer and Chinese food, we spent hours discussing a wide array of subjects, ranging from neural networks to algorithmic racism.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Later, when we transcribed and edited our conversation, we realized we had way more than we needed for a single piece. So we broke our conversation into four installments, each organized around a different theme—“Introduction,” “Deep Learning,” “FinTech,” and “The Future”—and decided to distribute them throughout the issue. For the web version, we've included each of those installments below.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This interview was conducted in November 2016.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LOGIC: Alright, let’s get started with the basics. What is a data scientist? Do you self-identify as one?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DATA SCIENTIST:&lt;/strong&gt; I would say the people who are the most confident about self-identifying as data scientists are almost unilaterally frauds. They are not people that you would voluntarily spend a lot of time with. There are a lot of people in this category that have only been exposed to a little bit of real stuff—they’re sort of peripheral. You see actually a lot of this with these strong AI companies: companies that claim to be able to build human intelligence using some inventive “Neural Pathway Connector Machine System,” or something. You can look at the profiles of every single one of these companies. They are always people who have strong technical credentials, and they are in a field that is just slightly adjacent to AI, like physics or electrical engineering.&lt;/p&gt;
&lt;p&gt;And that’s close, but the issue is that no person with a PhD in AI starts one of these companies, because if you get a PhD in AI, you’ve spent years building a bunch of really shitty models, or you see robots fall over again and again and again. You become so acutely aware of the limitations of what you’re doing that the interest just gets beaten out of you. You would never go and say, “Oh yeah, I know the secret to building human-level AI.”&lt;/p&gt;
&lt;p&gt;In a way it’s sort of like my Dad, who has a PhD in biology and is a researcher back East, and I told him a little bit about the Theranos story. I told him their shtick: “Okay, you remove this small amount of blood, and run these tests…” He asked me what the credentials were of the person starting it, and I was like, “She dropped out of Stanford undergrad.” And he was like, “Yeah, I was wondering, since the science is just not there.” Only somebody who never actually killed hundreds of mice and looked at their blood—like my Dad did—would ever be crazy enough to think that was a viable idea.&lt;/p&gt;
&lt;p&gt;So I think a lot of the strong AI stuff is like that. A lot of data science is like that too. Another way of looking at it is that it’s a bunch of people who got PhDs in the wrong thing, and realized they wanted to have a job. Another way of looking at it—I think the most positive way, which is maybe a bit contrarian—is that it’s really, really good marketing.&lt;/p&gt;
&lt;p&gt;As someone who tries not to sell fraudulent solutions to people, it actually has made my life significantly better because you can say “big data machine learning,” and people will be like, “Oh, I’ve heard of that, I want that.” It makes it way easier to sell them something than having to explain this complex series of mathematical operations. The hype around it—and that there’s so much hype—has made the actual sales process so much easier. The fact that there is a thing with a label is really good for me professionally.&lt;/p&gt;
&lt;p&gt;But that doesn’t mean there’s not a lot of ridiculous hype around the discipline.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I’m curious about the origins of the term “data science”—do you think that it came internally from people marketing themselves, or whether it was a random job title used to describe someone, or what?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As far I know, the term “data science” was invented by Jeff Hammerbacher at Facebook.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Cloudera guy?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yeah, the Cloudera guy. As I understand it, “data science” originally came from the gathering of data on his team at Facebook.&lt;/p&gt;
&lt;p&gt;If there was no hype and no money to make, essentially what I would say data science is, is the fact that the data sets have gotten large enough where you can start to consider variable interactions in a way that’s becoming increasingly predictive. And there are a number of problems where the actual individual variables themselves don’t have a lot of meaning, or they are kind of ambiguous, or they are only very weak signals. There’s information in the correlation structure of the variables that can be revealed, but only through really huge amounts of data.&lt;/p&gt;
&lt;p&gt;So essentially: there are N variables, right? So there’s N-squared potential correlations, and N-cubed potential cubic interactions or whatever. Right? There’s a ton of interactions. The only way you can solve that is by having massive amounts of data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So the data scientist role emphasizes the data part first. It’s like, we have so much data, and so this new role arises using previous disciplines or skills applied to a new context?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can start to see new things emerge that would not emerge from more standard ways of looking at problems. That’s probably the most charitable way of putting it without any hype. But I should also say that the hype is just ferocious.&lt;/p&gt;
&lt;p&gt;And even up to last year, there’s just massive bugs in the machine learning libraries that come bundled with Spark. It’s so bizarre, because you go to Caltrain, and there’s a giant banner showing a cool-looking data scientist peering at computers in some cool ways, advertising Spark, which is a platform that in my day job I know is just barely usable at best, or at worst, actively misleading.&lt;/p&gt;
&lt;p&gt;I don’t know. I’m not sure that you can tell a clean story that’s completely apart from the hype.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For people who are less familiar with these terms, how would you define data science, machine learning, and artificial intelligence? Because as you mentioned, these are terms that float around a lot in the media and that people absorb, but it’s unclear how they fit together.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It’s a really good question. I’m not even sure if those terms that you referenced are on solid ground themselves.&lt;/p&gt;
&lt;p&gt;I’m friends with a venture capitalist who became famous for coining the phrase “machine intelligence,” which is pretty much just the first word of “machine learning” with the second word of “artificial intelligence,” and as far as I can tell is essentially impossible to distinguish between either of those applications.&lt;/p&gt;
&lt;p&gt;I would say, again, “data science” is really shifty. If you wanted a pure definition, I would say data science is much closer to statistics. “Machine learning” is much more predictive optimization, and “artificial intelligence” is increasingly hijacked by a bunch of yahoos and Elon Musk types who think robots are going to kill us. I think artificial intelligence has gotten too hot as a term. It has a constant history since the dawn of computing of over-promising and substantially under-delivering.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So do you think when most people think of artificial intelligence, they think of strong AI?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;They think of the film &lt;em&gt;Artificial Intelligence&lt;/em&gt; level of AI, yeah. And as a result, I think people who are familiar with bad robots falling over shy away from using that term, just because they're like, “We are nowhere near that.” Whereas a lot of people who are less familiar with shitty robots falling over will say, “Oh, yeah, that's exactly what we're doing.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The narrative around automation is so present right now in the media, as you know. I feel like all I read about AI is how self-driving trucks are going to put all these truckers out of business. I know there's that Oxford study that came out a few years ago that said some insane percentage of our jobs are vulnerable to automation. How should we view that? Is that just the outgrowth of a really successful marketing campaign? Does it have any basis in science or is it just hype?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Can I say the truth is halfway there? I mean, again, I want to emphasize that historically, from the very first moment somebody thought of computers, there has been a notion of: “Oh, can the computer talk to me, can it learn to love?” And somebody, some yahoo, will be like, “Oh absolutely!” And then a bunch of people will put money into it, and then they'll be disappointed.&lt;/p&gt;
&lt;p&gt;And that's happened so many times. In the late 1980s, there was a huge Department of Defense research effort towards building a Siri-like interface for fighter pilots. And of course this was thirty years ago and they just massively failed. They failed so hard that DARPA was like, “We're not going to fund any more AI projects.” That's how bad they fucked up. I think they actually killed Lisp as a programming language—it died because of that. There are very few projects that have failed so completely that they actually killed the programming language associated with them.&lt;/p&gt;
&lt;p&gt;The other one that did that was the—what was it, the Club of Rome or something? Where they had those growth projections in the 1970s about how we were all going to die by now. And it killed the modeling language they used for the simulation. Nobody can use that anymore because the earth has been salted with how shitty their predictions were.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It's like the name Benedict.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yes, exactly, or the name Adolf. Like you just don't go there.&lt;/p&gt;
&lt;p&gt;So, I mean, that needs to be kept in mind. Anytime anybody promises you an outlandish vision about what artificial intelligence is, you just absolutely have to take it with a grain of salt, because this time is not different.&lt;/p&gt;
&lt;p&gt;I'm actually less optimistic about the future than I maybe should be. Because it's hard for me to see a way out of the lump of labor fallacy—even conscious of the fact that it's a fallacy—when it comes to something like truckers. Because our truckers are not going to become JavaScript web devs. Maybe a fraction of them will, but I don't know.&lt;/p&gt;
&lt;p&gt;I was talking about this with my friend who has a completely different point of view. His brother works as a video game designer, and that's a job that didn't exist a hundred years ago, and now he makes a really good salary doing that.&lt;/p&gt;
&lt;p&gt;That said, his brother went to Harvard, is super smart, and frankly is probably a lot more intellectually talented and curious than a lot of the truck drivers they’re going to put out of business. And so there might be awesome jobs for people who really enjoy computers, but I kind of worry about what that looks like when computers start consuming more and more up the chain of the cognitive load.&lt;/p&gt;
&lt;p&gt;Part of me likes being a programmer—because we're the last job. I can see a future—if we don't manage to blow ourselves up first—in the robot paradise where people are either robot engineers or programmers, or I guess do marketing. Or maybe bake pies, or smell things? Those are essentially the hardest things for a computer to do. But computers do everything else.&lt;/p&gt;
&lt;p&gt;And I don't know. What does humanity look like? What do jobs look like in that future? I have no idea. I think it's not going to get there on the same timeline that the Oxford people think it's going to get there. But yeah, we'll get there, and I don't know, as optimistic as I want to be about it, it is really scary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is the “lump of labor” fallacy?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That there's a fixed pool of jobs and that if computers take more jobs, there's a slice of people that get laid off. That's a fallacy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Like the idea of taking a slice of the pie, versus enlarging the pie?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yeah, exactly. And I think we've proven in our economy that we're very comfortable with the idea that, yeah, a bunch of specific people are going to suffer, but other people are going to benefit and we're okay with that. And that's our economic progress and our economic growth. But I think it might just accelerate violently as computers keep getting better and better at what they do.&lt;/p&gt;
&lt;h4 id=&quot;deeplearning&quot;&gt;Deep Learning&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Is there a point at which a piece of software or a robot officially becomes “intelligent”? Does it have to pass a certain threshold to qualify as intelligent? Or are we just making a judgment call about when it’s intelligent?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I think it's irrelevant in our lifetimes and in our grandchildren's lifetimes. It's a very good philosophical question, but I don't think it really matters. I think that we are going to be stuck with specific AI for a very, very long time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And what is specific AI?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Optimization around a specific problem, as opposed to optimization on every problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So like driving a car would be a specific problem?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yeah. Whereas if we invented a brain that we can teach to do anything we want, and we have chosen to have it focus on the specific vertical of driving a car, but it can be applied to anything, that would be general AI. But I think that would be literally making a mind, and that’s almost irresponsible to speculate about. It's just not going to happen in any of our lifetimes, or probably within the next hundred years. So I think I would describe it as philosophy. I don't know, I don't have an educated opinion about that.&lt;/p&gt;
&lt;p&gt;Although I do really like &lt;em&gt;Westworld&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I was going to ask you about that. It’s like there’s this particular media moment right now—there’s a lot of good television that revolves around these questions, it’s science fiction but it’s increasingly closer to reality, at least in the popular imagination. So like &lt;em&gt;Westworld&lt;/em&gt;, or &lt;em&gt;Black Mirror&lt;/em&gt;. There was &lt;em&gt;Ex Machina&lt;/em&gt; not too long ago. I’m curious what your thoughts are on that.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The rate of progress in AI over the past decade has been astounding. Ten years ago, Go was something that would never be solved by anybody, and now it’s there. That required tremendous leaps forward. And so I think that although the popular imagination is always going to be leaps and bounds ahead of what’s realistic, a lot of that is a reflection of the progress that has in fact been made in the past decade. Whether that’s because the actual technology itself is in the golden age and will soon revert back is a good question.&lt;/p&gt;
&lt;p&gt;I enjoyed &lt;em&gt;Her&lt;/em&gt; and &lt;em&gt;Ex Machina&lt;/em&gt;—those are great films. &lt;em&gt;Westworld&lt;/em&gt; has been fun to watch. I just don’t think they’re a realistic portrayal of what things are going to look like in our lifetime.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do you think that part of the fascination comes from the successful marketing of tools like Siri and Alexa and Cortana, which give this texture of interacting with an AI like that, even though it really is just something like speech-to-text piped into a search algorithm?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yeah, I think it’s easier for people to see it as possible, and I think that &lt;em&gt;Black Mirror&lt;/em&gt; is really interesting too because it’s just right on the edge in some episodes, which is really neat.&lt;/p&gt;
&lt;p&gt;But I think people are typically pretty aware of the flaws in Siri, right? You know it will get better, in the same way that with the first versions of Google, you needed to learn how to Google: how to use certain types of words to identify things. Google is getting better, to the point where you can just type in random shit and it comes up with the right answer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You don’t even bother to spell things correctly anymore.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It’s pretty astounding. I’m sure in elementary school you had to learn the Dewey Decimal System, and that crazy library and reference language where you have the Boolean qualifiers on terms that might appear in an item summary or something. That is just completely out of the window now. So yeah, it will get better.&lt;/p&gt;
&lt;p&gt;But I think that the flaws will always be there. And, back to the hype cycle, a lot of the current AI assistants are just humans on the back end solving those problems.&lt;/p&gt;
&lt;p&gt;Whenever I get an invite from an x.ai system or something I always fuck with them. They do a great job, but they do a great job because it’s a human on the back end and not a computer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Human on the back end—so does that mean it’s going overseas?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the Philippines or in the Midwest, somebody is tagging parts of the speech, and correcting things, and actually parsing whether I misspelled something or meant to write something else. It’s becoming training data for the machine, and eventually it will get incorporated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It's the MVP.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yeah, it is just so much easier to build a web app that connects someone in the Philippines to a series of database questions, and has them do the work, than it is to build an AI than can handle arbitrary responses to a calendar invite. So you just tell your venture capitalists that you’re working on AI, but that some of it still needs to be labeled by hand. That just seems way easier. That’s the business I would start if I were doing that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It seems like wages would have to be higher for it to be profitable to invest in the R&amp;amp;D required to successfully automate these forms of labor. Do you think wage levels make a difference?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’ll say this—maybe it’s a little bit of a diversion from your question—but one of the things that I’ve noticed on AWS prices was that a few months ago, the spot prices on their GPU compute instances were $26 an hour for a four-GP machine, and $6.50 an hour for a one-GP machine.&lt;/p&gt;
&lt;p&gt;That’s the first time I’ve seen a computer that has human wages. This is something that can run twenty-four hours a day, does not need vacation time, does not need benefits. I mean that’s the equivalent of essentially, I don’t know, depending on how you want to do the math you can easily make the argument that’s a $200,000-a-year person as this machine. I’ve never seen that before and that’s kind of frightening.&lt;/p&gt;
&lt;p&gt;Whoever is using these machines must be someone pretty smart, because the ability to use a GPU effectively requires a bunch of smart data scientists… You would need to give me a team, and a bunch of time to build something that could adequately take that into account to solve some problem. At the same time, they’re paying $26 an hour to rent a server, and at that rate they are paying the full price of the hardware every two weeks, so they have to be really dumb too.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That’s fascinating. When you talk about the difficulties in building general AI, or even very sophisticated specific AI, how much of that is due to the engineering problems, and how much of it is because we currently have relatively low levels of investment in basic research? Does political economy play a role in this? I mean, if we were investing in basic research at mid-century Cold War levels, would we be automating things faster? Or would the technical problems still be so great that the amount of money that you threw at it wouldn’t matter?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I think it’s a really interesting question. So I can say that Japan—I need to pull a little more data on this, I feel little bit dumb just putting things out there—but I know Japan made a huge push late in the late 1990s on AI robotics. They’re the reason we have those weird dancing robots like Asimo or whatever from Honda, that was the function of billions of dollars being put in AI. And I think we can say now that investment didn’t pay off for the companies. If it had, it would be unbelievable what they would have. But it didn’t.&lt;/p&gt;
&lt;p&gt;So I don’t know. Nobody would deny that the technology is getting better and better year after year. But one of the interesting things about the recent push in AI around neural networks is that none of technology there is particularly new. In fact, perceptrons, which I believe are the simplest neural networks, go back to the 1950s. What’s changed is the hardware we can run them on has gotten so much faster and so much more efficient and so much more powerful, and the data sizes that we can work with have gotten so much bigger. So now we can solve these problems, and it’s kind of awesome what we can do.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deep learning feels like it’s having a marketing moment. We’ve had neural networks forever though—can you talk a bit more about why now for this technology?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So a neural network is… I’m trying to think of the most concise way of thinking about this. The basics of a neural network is that the output of one layer can be the input to another layer. And I believe once you get to two layers of a neural network you have a universal approximator, so it can learn any function, which is quite powerful—at least in theory. Once you have more than two layers, it becomes “deep learning.” So if you have that, then why not twenty? Why not thirty? Why not 600 layers?&lt;/p&gt;
&lt;p&gt;They didn’t try that many layers before because it was too slow. It’s incredible how even now you run a normal multi-layer neural network on a CPU machine and it’s quite slow. The GPU is a big advancement—and the other thing is there have been some algorithmic advances on the vision side of deep learning. It’s been incredible for vision applications because when computer vision started—I think literally at this Dartmouth conference they thought it was a project for a grad student over the summer, because you just hook a camera up to a computer and it gets the pixel values.&lt;/p&gt;
&lt;p&gt;It turned out there was a lot more to computer vision, as we now know. Sixty years later, we’ve actually managed to achieve a lot of the ends of the original goal. But this is what I’m saying in terms of the over-promise of AI: we thought it would be one grad student over one summer, and it turns out to be dozens of research labs over sixty years.&lt;/p&gt;
&lt;p&gt;So that’s the multiplier that should be applied to the people who say, “Strong AI is a decade away.” I think you can apply a similar multiplier to that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I feel like the Hollywood version of invention is: Thomas Edison goes into a lab, and comes out with a light bulb. And what you’re describing is that there are breakthroughs that happen, either at a conceptual level or a technological level, that people don’t have the capacity to take full advantage of yet, but which are later layered onto new advances.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yeah, I think that’s a very coherent philosophy about how science advances. Thomas Edison was really fucking good at making money and keeping the IP for himself, so obviously he’s going to promulgate the view that it was a single genius, a loner working super hard in a room, who owns everything that came from it. Of course that’s going to be his mission.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That's the startup founder.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Right. Exactly. Who needs no help from anyone—except from all these open-source packages.&lt;/p&gt;
&lt;p&gt;But yeah, I think a lot of scientific discoveries are like that. Aluminum is the classic example. We had this metal that was super cool, but it required so much energy to produce. And you know, it has all these awesome properties that we take for granted. It never corrodes—it’s amazing as a metal. But in terms of actual industrial use—first we discovered this metal, then we figured out how to make it cheaply, and then energy got a lot cheaper. And decades later, it was like, oh shit, we have this new device called an aircraft and we need a metal to build it out of, and aluminum was there. So it moved in fits and starts.&lt;/p&gt;
&lt;p&gt;For neural networks, I remember when I started graduate school I literally went to a presentation that was making fun of neural networks. They had a slide that was like, “If you don’t know what a neural network is, it was this thing that was really popular around the year 2000 but is now discredited.”&lt;/p&gt;
&lt;p&gt;To their credit, there were a few guys from a bunch of random schools that kept neural networks alive, like a bunch random Canadian schools and NYU. They kept this idea alive, like, “Hey, this could be a thing, at least we have this approximation theorem.” And they were right. Everyone else was totally wrong, and I think all of those guys are pretty rich now, which they deserve because they spent twenty years in the wilderness.&lt;/p&gt;
&lt;p&gt;So yeah, I think it’s a lot sloppier than people make it seem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I most associate deep learning now with Google’s open-source TensorFlow, because it seems to be if anyone wants to use deep learning they’re using an existing package like that.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And it’s just a nightmare to use in practice. It’s getting there—I’m sure in another three years it will be much more usable, maybe—but it’s bad. It’s really bad to use. There’s so much hype around it, but the number of people who are actually using it to build real things that make a difference is probably very low.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Are there any other popular deep learning libraries?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are like six different packages that are all computing. There’s TensorFlow, Theano, Caffe, Torch—then a bunch of other libraries that build on those libraries as primitives, like Keras and Lasagne. But outside of a handful of corporate research labs, nobody is using these tools to actually solve anything, because they're just so hard to configure.&lt;/p&gt;
&lt;p&gt;And frankly, a lot of the difficulties are exactly the spot where a lot of the data scientists are weakest. To bring the conversation back to the beginning, you have a bunch of people with physics PhDs who maybe wrote some R code in graduate school. And they suddenly have to compile all these packages with GPU support so they can get CUDA running, and they're just like, “We can't do that.” I think there's just a huge gap right now between theory and practice.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That feels to me like the magic of AI marketing: you label something as AI and it sounds impressive, but under the hood it’s Naive Bayes—it’s whatever the simplest thing you can get up and running. And there's a mysticism around the difficulty of the technology, even though the simplest thing gets you most of the way there.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For a number of applications, I think that's completely correct. I think there are some—and I think these are the most interesting ones—where the information is in the correlation structure of the variables as opposed to the variables themselves. And those are applications where Naive Bayes, which is essentially counting, does poorly.&lt;/p&gt;
&lt;p&gt;I mean, I know from experience that lending and credit ratings are examples where you get crazy out-performance by using multidimensional algorithms, as opposed to just simple counting-based algorithms. So there are genuine advances that you can see from this stuff.&lt;/p&gt;
&lt;p&gt;But I mean, I feel a little bit guilty taking the position that, oh yeah, it's all a bunch of shitty marketers, or whatever. Because they made me a bunch of money. It's been easier for me to sell myself because of the marketing that other people have done and the tremendous hype—it's just easier to sell things. So it would be kind of disingenuous of me to completely disavow it. “Oh yeah, it's all a bunch of bullshit.”&lt;/p&gt;
&lt;p&gt;Because it might be bullshit, but there is some real shit that happens, and as a practitioner, it’s made my job a lot easier. I couldn't imagine selling what I sell as a day job without having that. It would just be so difficult.&lt;/p&gt;
&lt;p&gt;You'd go and you'd be like, “Oh there's this crazy complex stuff!”&lt;/p&gt;
&lt;p&gt;And they’re like, “Wouldn’t that take a lot of data?”&lt;/p&gt;
&lt;p&gt;And you're like, “Yeah, it's really hard, and you know what, it probably won't work.”&lt;/p&gt;
&lt;p&gt;And they're like, “Why would I pay you a bunch of money?”&lt;/p&gt;
&lt;p&gt;And you're like, “Well, I don't know.”&lt;/p&gt;
&lt;p&gt;So yeah, I don't want to speak too ill of the marketing hype.&lt;/p&gt;
&lt;h4 id=&quot;fintech&quot;&gt;FinTech&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;One hears a lot about algorithmic finance, and things like robo-advisers. And I’m wondering, does that fall into the same category of stuff that seems pretty over-hyped?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I would say that robo-advisers are not doing anything special. It's AI only in the loosest sense of the word. They're not really doing anything advanced—they’re applying a formula. And it's a reasonable formula, it's not a magic formula, but they're not quantitatively assessing markets and trying to make predictions. They're applying a formula about whatever stock and bond allocations to make—it's not a bad service, but it's super hyped. That’s indicative of a bubble in AI that you have something like that where you're like, “It's AI!” and people are like, “Okay, cool!”&lt;/p&gt;
&lt;p&gt;There's a function that's being optimized—which is, at some level, what a neural net is doing. But it's not really AI.&lt;/p&gt;
&lt;p&gt;I think one of the big tensions in data science that is going to unfold in the next ten years involves companies like SoFi, or Earnest, or pretty much any company whose shtick is, “We're using big data technology and machine learning to do better credit score assessments.”&lt;/p&gt;
&lt;p&gt;I actually think this is going to be a huge point of contention moving forward. I talked to a guy who used to work for one of these companies. Not one of the ones I mentioned, a different one. And one of their shticks was, “Oh, we're going to use social media data to figure out if you're a great credit risk or not.” And people are like, “Oh, are they going to look at my Facebook posts to see whether I've been drinking out late on a Saturday night? Is that going to affect my credit score?”&lt;/p&gt;
&lt;p&gt;And I can tell you exactly what happened, and why they actually killed that. It's because with your social media profile, they know your name, they know the name of your friends, and they can tell if you're black or not. They can tell how wealthy you are, they can tell if you're a credit risk. That's the shtick.&lt;/p&gt;
&lt;p&gt;And my consistent point of view is that any of these companies should be presumed to be incredibly racist unless presenting you with mountains of evidence otherwise. Anybody that says, “We're an AI company that's making smarter loans”: racist. Absolutely, 100%.&lt;/p&gt;
&lt;p&gt;I was actually floored, during the last Super BowI I saw this SoFi ad that said, “We discriminate.” I was just sitting there watching this game, like I cannot believe it—it's either they don't know, which is terrifying, or they know and they don't give a shit, which is also terrifying.&lt;/p&gt;
&lt;p&gt;I don't know how that court case is going to work out, but I can tell you in the next ten years, there's going to be a court case about it. And I would not be surprised if SoFi lost for discrimination. And in general, I think it's going to be an increasingly important question about the way that we handle protected classes generally, and maybe race specifically, in data science models of this type. Because otherwise it’s like: okay, you can’t directly model if a person is black. Can you use their zip code? Can you use the racial demographics for the zip code? Can you use things that correlate with the racial demographics of their zip code? And at what level do you draw the line?&lt;/p&gt;
&lt;p&gt;And we know what we're doing for mortgage lending—and the answer there is, frankly, as a data scientist, a little bit offensive—which is that we don't give a shit where your house is. We just lend. That's what Rocket Mortgages does. It’s a fucking app, and you're like, “How can I get a million dollar loan with an app?” And the answer is that they legally can't tell where your house is. And the algorithm that you use to do mortgages has to be vetted by a federal agency.&lt;/p&gt;
&lt;p&gt;That's an extreme, but that might be the extreme we go down, where every single time anybody gets assessed for anything, the actual algorithm and the inputs are assessed by a federal regulator. So maybe that's going to be what happens. I actually view it a lot like the debates around divestment. You can say, &quot;Okay, we don't want to invest in any oil companies,&quot; but then do you want to invest in things that are positively correlated with oil companies, like oil field services companies? What about things that in general have some degree of correlation? How much is enough?&lt;/p&gt;
&lt;p&gt;I think it's the same thing where it's like, okay, you can't look at race, but can you look at correlates of race? Can you look at correlates of correlates of race? How far do you go down before you say, &quot;Okay, that's okay to look at?”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I'm reminded a bit of Cathy O'Neil's new book, &lt;em&gt;Weapons of Math Destruction: How Big Data Increases Inequality and Threatens Democracy&lt;/em&gt; (2016). One of her arguments, which it seems like you're echoing, is that the popular perception is that algorithms provide a more objective, more complete view of reality, but that they often just reinforce existing inequities.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That's right. And the part that I find offensive as a mathematician is the idea that somehow the machines are doing something wrong. We as a society have not chosen to optimize for the thing that we're telling the machine to optimize for. That's what it means for the machine to be doing illegal things. The machine isn't doing anything wrong, and the algorithms are not doing anything wrong. It's just that they're literally amoral, and if we told them the things that are okay to optimize against, they would optimize against those instead. It's a frightening, almost &lt;em&gt;Black Mirror&lt;/em&gt;-esque view of reality that comes from the machines, because a lot of them are completely stripped of—not to sound too Trumpian—liberal pieties. It's completely stripped.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;They're not “politically correct.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;They are massively not politically correct, and it's disturbing. You can load in tons and tons of demographic data, and it's disturbing when you see percent black in a zip code and percent Hispanic in a zip code be more important than borrower debt-to-income ratio when you run a credit model. When you see something like that, you're like, “Ooh, that's not good.” Because the frightening thing is that even if you remove those specific variables, if the signal is there, you're going to find correlates with it all the time, and you either need to have a regulator that says, “You can use these variables, you can't use these variables,” or, I don't know, we need to change the law.&lt;/p&gt;
&lt;p&gt;As a data scientist I would prefer if that did not come out in the data. I think it's a question of how we deal with it. But I feel sensitive toward the machines, because we're telling them to optimize, and that's what they’re coming up with.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;They’re describing our society.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yeah. That's right, that's right. That's exactly what they’re doing. I think it's scary. I can tell you that a lot of the opportunity those FinTech companies are finding is derived from that kind of discrimination, because if you are a large enough lender, you are going to be very highly vetted, and if you're a very small lender you're not.&lt;/p&gt;
&lt;p&gt;Take SoFi, for example. They refinance the loans of people who went to good colleges. They probably did not set up their business to be super racist, but I guarantee you they are super racist in the way they're making loans, in the way they're making lending decisions.&lt;/p&gt;
&lt;p&gt;Is that okay? Should a company like that exist?&lt;/p&gt;
&lt;p&gt;I don't know. I can see it both ways. You could say, “They're a company, they're providing a service for people, people want it, that's good.” But at the same time, we have such a shitty legacy of racist lending in this country. It's very hard not to view this as yet another racist lending policy, but now it's got an app. I don't know. I just think that there is going to be a court case in the next ten years, and whatever the result is, it's going to be interesting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When we talk about FinTech in general, does that refer to something broader than advising investors when to buy and sell stocks, and this new sort of loaning behavior? Or is that the main substance of it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FinTech may most accurately be described as regulatory arbitrage: startups are picking up pieces that a big bank can't do, won't do, or is just too small for it to pick up. And I think FinTech is going to suffer over the next five years. If there's a single sector that people are going to be less enamored with in five years than they are now, FinTech is definitely the one.&lt;/p&gt;
&lt;p&gt;The other side of it is that they're exploiting a hack in the way venture capitalists think. Venture capital as an industry is actually incredibly small relative to the financial system. So if you were starting, I don't know, a company that used big data to make intelligent decisions on home loans—which is probably illegal, but whatever, you're small enough that it's no big deal—and you say, “Hey, we’re doing ten million dollars a year in business,” a venture capitalist will look at them like, “Holy shit, I've never seen a company get up to ten million dollars in business that fast.” The venture capitalist has no idea that the mortgage market is worth trillions of dollars and the startup essentially has none of it. The founder gives a market projection like, “Oh, this is a trillion dollar industry,” and the venture capitalist is like, “Oh, that market is enormous. I've never seen numbers like that before.”&lt;/p&gt;
&lt;p&gt;It's much more of a clever hack than an actual, sustainable, lasting, value-creating enterprise. One of the biggest flagship FinTech companies, Lending Club, is in a ton of trouble. SoFi is probably illegal. And those are the flag bearers for the sector.&lt;/p&gt;
&lt;p&gt;The other thing that happened recently was the San Bernardino shootings—apparently the guns that were used were financed by a loan from Prosper, which is another peer-to-peer lender. And you just think about where this is going to go. Are we eventually going to get to the point where we have the credit models to assess and not give that guy a loan because of the risk that he could be a Muslim terrorist? Is that the society that we will be living in?&lt;/p&gt;
&lt;p&gt;Maybe. But we're going to get there with the data.&lt;/p&gt;
&lt;h4 id=&quot;thefuture&quot;&gt;The Future&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;If you had to give a non-technical layperson one piece of advice for thinking about these questions, what would it be? Is it to be more skeptical? Is it to be less credulous when confronted with hype? Because it seems like there’s a fairly small number of people who understand these technologies well, and yet they appear to have the potential to make a pretty big impact on a lot of people's lives.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I think the most realistic way of looking at it is that it’s not all hype. The technical advances are real—and even if they're not real today, the relentless drumbeat of progress on hardware and algorithms will make them real eventually. It will take longer than you think—potentially a lot longer than you think—but it will happen. So everything you're hearing is an early warning sign of what the future is going to look like. Maybe not even in our lifetimes, but yeah, it’ll get there. And the questions that we're going over, they're going to be real. It's just not there yet.&lt;/p&gt;
&lt;p&gt;So yeah, I would recommend some skepticism, but not complete skepticism. Because the advances underlying this are real. And the rate of progress has kept up, and I don't see a reason why it's going to stop.&lt;/p&gt;
&lt;p&gt;It's funny, because I think the biggest concern that I have for the future is that a bunch of people like me are going to make a bunch of money. And a bunch of people are going to lose their jobs. And a bunch of people are going to get new jobs that are crazy and cool. But I don't know on net how great it's going to be for society moving forward, though I want to be optimistic about it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I don't know if it’s just the tweets that I read in the last election, but the automation of trucking with self-driving cars seems like the most tangible disruptive application of this sort of AI technology. And that impacts such a huge number of people in our economy.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It's the typical thing, where people overrate the effects of technological innovation in the short term, and underrate it in the long term. The automation of trucking is not going to happen overnight. It's going to take years. But I believe “truck driver” is the single most common occupation in the U.S. Yeah, it's not going to be next year. Maybe there will be some automation in five years. But in twenty or thirty years that might not even be a job that people do. And what's going to happen? I don't know. That's a great question. It may involve becoming video game designers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That's the thing I have the hardest problem with. I often have this kind of discussion with people who are algorithmically minded, and they view capitalism as an optimizing function. And all questions about technological change go through this filter of, well, we're glad we have cars instead of horse and buggies. And everything else will sort itself out. But everything else doesn’t just “sort itself out.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I mean, I try to not fall into the Y Combinator autistic Stanford guy thing, but I actually do think that universal basic income is going to be the endgame. I think that is what society will look like long-term, because I think universal basic income is the welfare that everyone can get behind.&lt;/p&gt;
&lt;p&gt;But it's such a weighty question and technology’s impact on the economy changes so quickly that I don't know if any of us have ever really had the chance to take a breath. You look at some of the strikes a hundred years ago, like at the Homestead plant, where the workers held out and had fucking gun boats come down the river with Pinkertons and shot the shit out of people a hundred years ago. There's a Costco there now, and a bunch of smokestacks where the plant used to be. And it's like, was that whole thing just this ridiculous farce? I don't even know.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I feel like it's always a question of, what are you optimizing for? There is this fetish of capitalism as supremely rational. And it does optimize for certain things, like technological innovation. But if you think about it from another perspective, it's also catastrophically irrational, because what could be less rational than wasting the potential of the millions of people whom capitalism exploits, or, worse, excludes by rendering permanently redundant? Capitalism doesn’t optimize for that.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I feel like I encounter this a lot in conversations with people who are in tech—my colleagues—who often have good intentions, but sometimes it's hard for them to move their frame of mind from the technical to the political, to move from the technical question of how to optimize the process in front of you to the political question of what are you optimizing for.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It can also be hard for them to consider solutions to political problems that might be extremely low-tech. And for that reason are probably even more difficult—like the question of what happens in the future—which may not be a hundred years away or 200 years away—when robots or algorithms can do 90% of the jobs. How do you prevent that future from becoming a brutal neo-feudal nightmare? That seems to me like a political question rather than a technical one.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I think the strangest thing about being out here in the Bay Area is that the Aspy worldview has just completely saturated everything to the point that people think that everything is a technical problem that should be solved technologically. It's a very privileged view of very smart people who just want there to be sink or swim. It's troubling.&lt;/p&gt;
&lt;p&gt;On the one hand, there’s no better shepherd for the economy than an engineer; on the other hand, there's no worse shepherd for an economy than an engineer. Because that kind of machine thinking is very good at producing some things, and very, very bad at producing other things.&lt;/p&gt;
&lt;p&gt;On the one hand, I don't view any of the Silicon Valley startup economies as producing any kind of sustainable growth or ways of employing all these people. On the other hand, I do think that the basic income idea eventually will be the future. One of the most interesting things is the amount of leverage that individual people in Silicon Valley are getting—you look at the WhatsApp acquisition or whatever, with so few people being worth so much money.&lt;/p&gt;
&lt;p&gt;That may have been a little bit irrational, but longer-term, it’s hard to argue against. And I don't see another endgame other than pretty high taxes plus basic income as the way of making that okay, because I don't think that's going to go away. I'm not even totally sure that we should discourage it from happening.&lt;/p&gt;
&lt;p&gt;But the leverage is just astounding. To go back to that GPU example, there might be some guy who's running some quant hedge fund somewhere who's just sitting on the backs of thousands of these $26-an-hour machines making tons of money off of them. That kind of leverage was just unimaginable even ten years ago, and now there's presumably one guy—I'm assuming it's a guy, it's probably a guy—just making shitloads of money, and that opportunity didn't even exist ten years ago.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This may be a tangent, but I think the technical mindset is very compatible with the technocratic mindset. In both cases, it's an evasion of politics, because just as the person who designs the racist algorithm presumably does not think of what they're doing as political, neither does the technocrat who crafts the free trade agreement because all the mainstream economists in the room told him it would be good for the economy, full stop.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I think both approaches are connected to this overwhelming need to see political problems as technical ones, whether from an engineering perspective or from a technocratic governance perspective. To me those feel totally compatible. What you're describing—the Silicon Valley view of the world—feels to me like a very technocratic view of the world, where if you can just solve certain problems then it will benefit everyone.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In defense of it, it's also a hopeful view of the world, because you're at least trying to describe problems that you can solve. It's a very optimistic way of looking at things, and I'm hesitant to abandon that, because I think ultimately… It's hard, grappling with this idea of the enormous amount of individual leverage and the crazy rate of change.&lt;/p&gt;
&lt;p&gt;On the other hand, it's hard not to be a kind of technical utopian. It's hard to bet against the innovation that this country has produced, and maybe that's a function of survivorship bias or looking back and saying we just happened to get lucky. But you know, airplanes, the elevator—we just invented that stuff, and that's kind of cool. And so it seems sort of melancholy—or maybe this is my own limitation as a technical thinker to see it as melancholy—to be like, “Yeah, there's some stuff we can't solve.”&lt;/p&gt;
&lt;p&gt;I'm not sure I want to live in that world. I always want to live in a world where we're at least trying. But we'll see.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;This piece appears in&lt;/em&gt; Logic&lt;em&gt;'s first issue, Intelligence. To order the issue, head on over to our &lt;a href=&quot;http://store.logicmag.io/&quot;&gt;store&lt;/a&gt;—or better yet, &lt;a href=&quot;http://store.logicmag.io/product/logic-magazine-subscription-print&quot;&gt;subscribe!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;a href=&quot;https://logicmag.io/01-intelligence&quot;&gt;&amp;lt; Back to the Table of Contents&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 11 Dec 2017 23:13:52 +0000</pubDate>
<dc:creator>PaulJulius</dc:creator>
<og:type>article</og:type>
<og:title>The Smart, the Stupid, and the Catastrophically Scary</og:title>
<og:description>A long conversation with an anonymous veteran data scientist on AI, deep learning, FinTech, and the future.</og:description>
<og:url>https://logicmag.io/01-interview-with-an-anonymous-data-scientist/</og:url>
<og:image>https://logicmag.io/content/images/2017/05/01-datascientistinterview.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://logicmag.io/01-interview-with-an-anonymous-data-scientist/</dc:identifier>
</item>
<item>
<title>Former Facebook exec says social media is ripping apart society</title>
<link>https://www.theverge.com/2017/12/11/16761016/former-facebook-exec-ripping-apart-society</link>
<guid isPermaLink="true" >https://www.theverge.com/2017/12/11/16761016/former-facebook-exec-ripping-apart-society</guid>
<description>&lt;p id=&quot;W4EkDA&quot;&gt;Another former Facebook executive has spoken out about the harm the social network is doing to civil society around the world. Chamath Palihapitiya, who joined Facebook in 2007 and became its vice president for user growth, said he feels “tremendous guilt” about the company he helped make. “I think we have created tools that are ripping apart the social fabric of how society works,” he &lt;a href=&quot;https://youtu.be/PMotykw0SIk?t=21m21s&quot;&gt;told an audience&lt;/a&gt; at Stanford Graduate School of Business, before recommending people take a “hard break” from social media.&lt;/p&gt;
&lt;p id=&quot;pty6T7&quot;&gt;Palihapitiya’s criticisms were aimed not only at Facebook, but the wider online ecosystem. “The short-term, dopamine-driven feedback loops we’ve created are destroying how society works,” he said, referring to online interactions driven by “hearts, likes, thumbs-up.” “No civil discourse, no cooperation; misinformation, mistruth. And it’s not an American problem — this is not about Russians ads. This is a global problem.”&lt;/p&gt;
&lt;p id=&quot;0AZpj7&quot;&gt;He went on to describe an incident in India where hoax messages about kidnappings shared on WhatsApp led to the &lt;a href=&quot;http://www.bgr.in/news/fake-whatsapp-messages-lead-to-killing-of-7-alleged-kidnappers-in-jharkhand/&quot;&gt;lynching&lt;/a&gt; of seven innocent people. “That’s what we’re dealing with,” said Palihapitiya. “And imagine taking that to the extreme, where bad actors can now manipulate large swathes of people to do anything you want. It’s just a really, really bad state of affairs.” He says he tries to use Facebook as little as possible, and that his children “aren’t allowed to use that shit.” He later adds, though, that he believes the company “overwhelmingly does good in the world.”&lt;/p&gt;
&lt;div id=&quot;MXqcNa&quot;&gt;
&lt;p&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/PMotykw0SIk?rel=0&amp;amp;amp;start=1281&quot; allowfullscreen=&quot;&quot; scrolling=&quot;no&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p id=&quot;QBNhfB&quot;&gt;Palihapitiya’s remarks follow similar statements of contrition from others who helped build Facebook into the powerful corporation it is today. In November, early investor Sean Parker said &lt;a href=&quot;https://www.theverge.com/2017/11/9/16627724/sean-parker-facebook-childrens-brains-feedback-loop&quot;&gt;he has become&lt;/a&gt; a “conscientious objector” to social media, and that Facebook and others had succeeded by “exploiting a vulnerability in human psychology.” A former product manager at the company, Antonio Garcia-Martinez, has said Facebook &lt;a href=&quot;https://www.theguardian.com/technology/2017/may/02/facebook-executive-advertising-data-comment&quot;&gt;lies about its ability&lt;/a&gt; to influence individuals based on the data it collects on them, and wrote a book, &lt;a href=&quot;https://www.ft.com/content/47d1cd50-4aa5-11e6-b387-64ab0a67014c&quot;&gt;&lt;em&gt;Chaos Monkeys&lt;/em&gt;&lt;/a&gt;, about his work at the firm.&lt;/p&gt;
&lt;p id=&quot;UcwhFu&quot;&gt;These former employees have all spoken out at a time when worry about Facebook’s power is reaching fever pitch. In the past year, concerns about the company’s &lt;a href=&quot;https://www.theverge.com/2017/10/30/16578022/facebook-senate-testimony-russia-126-million-people&quot;&gt;role in the US election&lt;/a&gt; and its capacity to &lt;a href=&quot;https://www.theguardian.com/technology/2017/may/16/facebook-fake-news-tools-not-working&quot;&gt;amplify fake news&lt;/a&gt; have grown, while other reports have focused on how the social media site has been implicated in atrocities like &lt;a href=&quot;https://www.nytimes.com/2017/10/27/world/asia/myanmar-government-facebook-rohingya.html&quot;&gt;the “ethnic cleansing” of Myanmar’s Rohingya ethnic group&lt;/a&gt;.&lt;/p&gt;
&lt;p id=&quot;wZZDjA&quot;&gt;In his talk, Palihapitiya criticized not only Facebook, but Silicon Valley’s entire system of venture capital funding. He said that investors pump money into “shitty, useless, idiotic companies,” rather than addressing real problems like climate change and disease. Palihapitiya currently runs his own VC firm, Social Capital, which focuses on funding companies in sectors like healthcare and education.&lt;/p&gt;
&lt;p id=&quot;KhVlWI&quot;&gt;Palihapitiya also notes that although tech investors seem almighty, they’ve achieved their power more through luck than skill. “Everybody’s bullshitting,” he said. “If you’re in a seat, and you have good deal flow, and you have precious capital, and there’s a massive tailwind of technological change ... Over time you get one of the 20 [companies that become successful] and you look like a genius. And nobody wants to admit that but that’s the fucking truth.”&lt;/p&gt;
</description>
<pubDate>Mon, 11 Dec 2017 21:20:12 +0000</pubDate>
<dc:creator>SREinSF</dc:creator>
<og:description>‘No civil discourse, no cooperation; misinformation, mistruth.’</og:description>
<og:image>https://cdn.vox-cdn.com/thumbor/tRYwZMp1cUPWRQCWZhCddstmQLg=/0x243:2525x1565/fit-in/1200x630/cdn.vox-cdn.com/uploads/chorus_asset/file/9847501/615649324.jpg.jpg</og:image>
<og:title>Former Facebook exec says social media is ripping apart society</og:title>
<og:type>article</og:type>
<og:url>https://www.theverge.com/2017/12/11/16761016/former-facebook-exec-ripping-apart-society</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theverge.com/2017/12/11/16761016/former-facebook-exec-ripping-apart-society</dc:identifier>
</item>
<item>
<title>Apple Buys Shazam to Boost Apple Music</title>
<link>https://www.bloomberg.com/news/articles/2017-12-11/apple-buys-early-iphone-app-hit-shazam-to-boost-apple-music</link>
<guid isPermaLink="true" >https://www.bloomberg.com/news/articles/2017-12-11/apple-buys-early-iphone-app-hit-shazam-to-boost-apple-music</guid>
<description>&lt;p&gt;&lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/quote/AAPL:US&quot; title=&quot;Company Overview&quot; rel=&quot;nofollow noopener&quot;&gt;Apple Inc.&lt;/a&gt; agreed to acquire music-identification service &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/quote/625238Z:LN&quot; title=&quot;Company Overview&quot; rel=&quot;nofollow noopener&quot;&gt;Shazam&lt;/a&gt;, taking ownership of one of the first apps to demonstrate the power of the iPhone, recognizing songs after hearing just a few bars of a tune.&lt;/p&gt;

&lt;p&gt;Terms of the deal weren’t disclosed, but a person familiar with the situation said Apple is paying about $400 million for the U.K.-based startup. That would be one of Apple’s largest acquisitions ever, approaching the size of its 1996 purchase of Next Computer Inc. which brought co-founder Steve Jobs back to the company. That transaction would be worth more than $600 million in today’s dollars.&lt;/p&gt;

&lt;p&gt;The deal announced Monday will be a disappointment for some of Shazam Entertainment Ltd.’s investors, including Mexican billionaire Carlos Slim and venture capital firms Kleiner Perkins Caufield &amp;amp; Byers, Institutional Venture Partners and DN Capital Ltd. The 18-year-old company, which has required twice the average time to deliver an exit for backers, was valued at about $1 billion when it closed its last funding round in 2015.&lt;/p&gt;


&lt;p&gt;&quot;A company isn’t worth a billion dollars until it’s sold or exited. Many of these so-called unicorns are of course fakies,&quot; Mark Tluszcz, co-founder of VC firm Mangrove Capital Partners and chairman of website building service Wix.com Ltd. &quot;They will face their day of reckoning and may turn out to be a disappointment. The case of Shazam will serve as a stark warning to other companies.&quot;&lt;/p&gt;

&lt;p&gt;The Shazam app uses the microphone on a smartphone or computer to identify almost any song playing nearby, then points users to places they can listen to it in future, such as Apple Music or Google’s YouTube. &lt;/p&gt;
&lt;aside class=&quot;inline-newsletter&quot; data-state=&quot;ready&quot;/&gt;&lt;p&gt;While Shazam has been popular with customers, it struggled turning its clever music service into a business that justified its valuation. It expanded beyond simple audio recognition in 2010 by adding capabilities that let television viewers &quot;Shazam&quot; an ad, which would then open a promotion from the advertiser on a user’s device. The company said this feature was used 700,000 times during the 2014 Super Bowl broadcast.&lt;/p&gt;
&lt;p&gt;&quot;Apple Music and Shazam are a natural fit, sharing a passion for music discovery and delivering great music experiences to our users,&quot; Apple said in an emailed statement on Monday. &quot;We have exciting plans in store, and we look forward to combining with Shazam upon approval of today’s agreement.&quot;&lt;/p&gt;
&lt;p&gt;In November, Shazam had about 175 million monthly active users globally across iOS and Android, according to research firm App Annie. The U.S. is the largest single market, with about 20 million active users in November, while the U.K. had about 4 million in the same month.&lt;/p&gt;

&lt;p&gt;&quot;Since the launch of the App Store, Shazam has consistently ranked as one of the most popular apps for iOS,&quot; Apple also said. &quot;Today, it’s used by hundreds of millions of people around the world, across multiple platforms.&quot;&lt;/p&gt;
&lt;p&gt;The acquisition would help Apple embed that capability more deeply into its music offerings. The company’s digital assistant Siri gained Shazam integration in 2014, so users could ask it what song is playing in the background.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For more on Apple, check out the &lt;em&gt;Decrypted &lt;/em&gt; podcast:&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 11 Dec 2017 18:25:17 +0000</pubDate>
<dc:creator>kentwistle</dc:creator>
<og:description>Apple Inc. agreed to acquire music-identification service Shazam, taking ownership of one of the first apps to demonstrate the power of the iPhone, recognizing songs after hearing just a few bars of a tune.</og:description>
<og:image>https://assets.bwbx.io/images/users/iqjWHBFdfxIU/iwOef27Xaj7c/v1/1200x675.jpg</og:image>
<og:title>Apple Buys Shazam to Boost Apple Music</og:title>
<og:type>article</og:type>
<og:url>https://www.bloomberg.com/news/articles/2017-12-11/apple-buys-early-iphone-app-hit-shazam-to-boost-apple-music</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/news/articles/2017-12-11/apple-buys-early-iphone-app-hit-shazam-to-boost-apple-music</dc:identifier>
</item>
<item>
<title>Donald Knuth&amp;#039;s Christmas Lecture: A Conjecture That Had To Be True [video]</title>
<link>http://scpd.stanford.edu/free-stuff/live-webinars-lectures/donald-knuths-annual-christmas-lecture</link>
<guid isPermaLink="true" >http://scpd.stanford.edu/free-stuff/live-webinars-lectures/donald-knuths-annual-christmas-lecture</guid>
<description>&lt;h3&gt;
        &lt;b&gt;A Conjecture That Had To Be True&lt;/b&gt;
    &lt;/h3&gt;
   &lt;p&gt;A few months ago, the speaker did some extensive calculations relating to a curious problem in combinatorial geometry; and the resulting numbers satisfied an amazing formula. Although this formula was known to be true only in the five or six smallest cases of the problem, it was impossible to imagine a decent world in which the formula would not hold universally. 
Come to the lecture and learn about the interesting sequel.
&lt;/p&gt;
&lt;center&gt;
&lt;iframe width=&quot;900&quot; height=&quot;555&quot; src=&quot;https://www.youtube.com/embed/BxQw4CdxLr8&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/center&gt;
    &lt;br/&gt;</description>
<pubDate>Mon, 11 Dec 2017 18:10:43 +0000</pubDate>
<dc:creator>taeric</dc:creator>
<og:type>university</og:type>
<og:title>Donald Knuth's Annual Christmas Lecture</og:title>
<og:description>A Conjecture That Had To Be True   A few months ago, the speaker did some extensive calculations relating to a curious problem in combinatorial geometry; and the resulting numbers satisfied an amazing formula. Although this formula was known to be true only in the five or six smallest cases of the problem, it was impossible to imagine a decent world in which the formula would not hold universally. Come to the lecture and learn about the interesting sequel.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://scpd.stanford.edu/free-stuff/live-webinars-lectures/donald-knuths-annual-christmas-lecture</dc:identifier>
</item>
</channel>
</rss>