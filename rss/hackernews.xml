<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>I discovered a browser bug</title>
<link>https://jakearchibald.com/2018/i-discovered-a-browser-bug/</link>
<guid isPermaLink="true" >https://jakearchibald.com/2018/i-discovered-a-browser-bug/</guid>
<description>&lt;time class=&quot;article-date&quot; datetime=&quot;2018-06-20&quot;&gt;Posted 20 June 2018&lt;/time&gt;&lt;p&gt;I accidentally discovered a huge browser bug a few months ago and I'm pretty excited about it. Security engineers always seem like the &quot;cool kids&quot; to me, so I'm hoping that now I can be part of the club, and y'know, get into the special parties or whatever.&lt;/p&gt;
&lt;p&gt;I've noticed that a lot of these security disclosure things are only available as PDFs. Personally, I prefer the web, but if you're a SecOps PDF addict, check out &lt;a href=&quot;https://jakearchibald.com/static/posts/wavethrough/wavethrough.015d7b73b3d0.pdf&quot;&gt;the PDF version of this post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Oh, I guess the vulnerability needs an extremely tenuous name and logo right? Here goes:&lt;/p&gt;

&lt;p&gt;Why Wavethrough? Well, it involves wave audio, and data is allowed through that shouldn't be. Tenuous enough?&lt;/p&gt;
&lt;p&gt;All the browser security bugs I cover in this post have since been fixed. Make sure your browser is up to date.&lt;/p&gt;
&lt;p&gt;As I said, I stumbled into this whole thing by accident. Here's how it happened from the start:&lt;/p&gt;

&lt;p&gt;If you have a service worker like this:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fetch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;…the idea is you shouldn't see any behavioural difference between this and no-service-worker. Unfortunately cross-origin &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; doesn't quite behave the same. Seeking doesn't work, and sometimes it fails entirely.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; are different from most web APIs in that they use range requests. Ok, let's push that onto the stack:&lt;/p&gt;
&lt;h3 id=&quot;range-requests&quot;&gt;Range requests&lt;/h3&gt;
&lt;p&gt;Usually when the browser makes a request, it's asking for the whole resource. However, HTTP defines the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range&quot;&gt;&lt;code&gt;Range&lt;/code&gt; header&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/206&quot;&gt;partial content responses&lt;/a&gt;. For example, the request may have the following header:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;…which is requesting bytes 50-100 (inclusive) of the resource. The server may then respond with a &lt;code&gt;206 Partial Content&lt;/code&gt;, and a header like this:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
Content-Range: bytes=50-100/5000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;…indicating it's returning bytes 50-100 (inclusive) of a 5000 byte resource.&lt;/p&gt;
&lt;p&gt;Browsers use this for resuming downloads, but it's also used by media elements if the user seeks the media, so it can go straight to that point without downloading everything before it, or to pick up metadata if it's one of those annoying media formats that has important metadata at the end of the file.&lt;/p&gt;
&lt;p&gt;Unfortunately, via a service worker, that &lt;code&gt;Range&lt;/code&gt; header was going missing (dun-dun-dunnnnnnnnn!). This is because media elements make what we call &quot;no-cors&quot; requests. Let's push that onto the stack too:&lt;/p&gt;
&lt;h3 id=&quot;no-cors-requests&quot;&gt;No-cors requests&lt;/h3&gt;
&lt;p&gt;If you &lt;code&gt;fetch()&lt;/code&gt; something from another origin, that origin has to give you permission to view the response. By default the request is made without cookies, and if you want cookies to be involved, the origin has to give extra permission for that. If you want to send fancy headers, the browser checks with the origin first, before making the request with the fancy headers. This is known as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;CORS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, some APIs couldn't give a shit about all that. They make &quot;no-cors&quot; requests, so the checks above don't happen. If you make a no-cors request to another origin, it's sent with cookies and you get back an &quot;opaque&quot; response. Developers shouldn't be able to access the data of an opaque response, but particular APIs may interpret that data behind the scenes.&lt;/p&gt;
&lt;p&gt;Take &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; for instance. If you include an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; that points to another origin, it'll make a no-cors request to that origin using that origin's cookies. If valid image data is returned, it'll display on your site. Although you can't access the pixel data of that image, data is still leaked through the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; of the image. You also know whether or not you received valid image data.&lt;/p&gt;
&lt;p&gt;Let's say there's an image that's only accessible if the user is logged into a particular site. An attacker can tell from the load/error event of the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; whether that user is logged into that site. The user's privacy has been compromised. Yaaaay.&lt;/p&gt;
&lt;p&gt;Allowing this to happen is a mistake, but we have decades of content depending on this behaviour. We can't simply prevent it, but we can add things to mitigate it in certain situations. If we started the web again, everything would require something like CORS.&lt;/p&gt;
&lt;p&gt;It isn't just images either. Classic non-module scripts, CSS, and media elements also make no-cors requests by default.&lt;/p&gt;
&lt;h3 id=&quot;no-cors-ranges-service-workers&quot;&gt;No-cors + ranges + service workers&lt;/h3&gt;
&lt;p&gt;So, back to our pass-through service worker:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fetch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A media element would make a no-cors request with a &lt;code&gt;Range&lt;/code&gt; header. When it's passed to &lt;code&gt;fetch()&lt;/code&gt; the request object is checked. At this point fetch sees a header (&lt;code&gt;Range&lt;/code&gt;) that isn't allowed in no-cors requests, and silently removes it. Therefore the server doesn't see the &lt;code&gt;Range&lt;/code&gt; header, so it just responds with a standard 200 response.&lt;/p&gt;
&lt;p&gt;Why is this header filtered? Well, no one standardised how they were supposed to work. Actually that deserves its own heading:&lt;/p&gt;
&lt;h2 id=&quot;range-requests-were-never-standardised&quot;&gt;Range requests were never standardised&lt;/h2&gt;
&lt;p&gt;They're standardised in HTTP, but not by HTML. We know what the headers look like, and when they should appear, but there's nothing to say what a browser should actually do with them.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Should all media requests be range requests, or just additional requests?&lt;/li&gt;
&lt;li&gt;What happens if the returned range ends sooner/later than what the browser asked for?&lt;/li&gt;
&lt;li&gt;What happens if the returned range starts sooner/later than what the browser asked for?&lt;/li&gt;
&lt;li&gt;What happens if a range is requested but the server returns a normal 200 response?&lt;/li&gt;
&lt;li&gt;What happens if a range is requested but the server returns a redirect?&lt;/li&gt;
&lt;li&gt;What happens if the underlying content appears to have changed between requests?&lt;/li&gt;
&lt;li&gt;What happens if a normal request is made but a 206 partial is returned?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;None of this is defined, so browsers all kinda do different things. Yay.&lt;/p&gt;
&lt;p&gt;We couldn't just add the &lt;code&gt;Range&lt;/code&gt; header to &lt;a href=&quot;https://fetch.spec.whatwg.org/#cors-safelisted-request-header&quot;&gt;the safelist&lt;/a&gt;, as developers would be able to set it to values the browser would never usually send, and that presents a security risk.&lt;/p&gt;
&lt;p&gt;Also, with a service worker in the middle, you can respond to a request however you want, even if it's a no-cors request to another origin. For example, you can have an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; on your page that points to &lt;code&gt;facebook.com&lt;/code&gt;, but your service worker could return data from &lt;code&gt;twitter.com&lt;/code&gt;. This isn't a problem as you can only lie to yourself.&lt;/p&gt;
&lt;p&gt;However, media elements piece multiple responses together and treat it as a single resource, and that opens up an interesting attack vector: Can known data be mixed with unknown data to reveal the content of the unknown data?&lt;/p&gt;
&lt;p&gt;I pretended to be a hacker and &lt;a href=&quot;https://github.com/whatwg/fetch/issues/144#issuecomment-368040980&quot;&gt;wrote down all the attacks I could think of&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/annevk&quot;&gt;Anne van Kesteren&lt;/a&gt; pointed out that some of them were possible without a service worker, as you can do similar things with redirects. So, I investigated how browsers currently handle these situations.&lt;/p&gt;
&lt;h2 id=&quot;mixing-known-and-unknown-data&quot;&gt;Mixing known and unknown data&lt;/h2&gt;
&lt;div class=&quot;chat&quot; readability=&quot;31&quot;&gt;
&lt;p class=&quot;chat-item page-chat&quot;&gt;&lt;span class=&quot;author&quot;&gt;Page&lt;span&gt;:&lt;/span&gt;&lt;/span&gt; Hey, this audio tag needs audio data from &lt;span class=&quot;chat-nowrap&quot;&gt;&quot;/whatever.wav&quot;&lt;/span&gt;. &lt;span class=&quot;time&quot;&gt;10:24&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;chat-item cache-chat&quot;&gt;&lt;span class=&quot;author&quot;&gt;evil.com&lt;span&gt;:&lt;/span&gt;&lt;/span&gt; No problem, here's 44 bytes of data. &lt;span class=&quot;time&quot;&gt;10:24&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;chat-item page-chat&quot;&gt;&lt;span class=&quot;author&quot;&gt;Page&lt;span&gt;:&lt;/span&gt;&lt;/span&gt; Cool, I see this is a PCM WAV header, 1 channel, 44100hz, 8bit, 30mins long. However, that's not enough data, can you send me &lt;span class=&quot;chat-nowrap&quot;&gt;Range: 44-&lt;/span&gt; please? &lt;span class=&quot;time&quot;&gt;10:24&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;chat-item cache-chat&quot;&gt;&lt;span class=&quot;author&quot;&gt;evil.com&lt;span&gt;:&lt;/span&gt;&lt;/span&gt; Oh, get that from &lt;span class=&quot;chat-nowrap&quot;&gt;facebook.com/&lt;/span&gt; instead. &lt;span class=&quot;time&quot;&gt;10:24&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;chat-item page-chat&quot;&gt;&lt;span class=&quot;author&quot;&gt;Page&lt;span&gt;:&lt;/span&gt;&lt;/span&gt; Ok &lt;span class=&quot;chat-nowrap&quot;&gt;facebook.com/&lt;/span&gt;, here are your cookies, can I get &lt;span class=&quot;chat-nowrap&quot;&gt;Range: 44-&lt;/span&gt; please? &lt;span class=&quot;time&quot;&gt;10:24&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;chat-item server-chat&quot;&gt;&lt;span class=&quot;author&quot;&gt;facebook.com&lt;span&gt;:&lt;/span&gt;&lt;/span&gt; Sure, here you go… &lt;span class=&quot;time&quot;&gt;10:25&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I created a site that does the above. I used a PCM wav header because everything after the header is valid data, and whatever Facebook returned would be treated as uncompressed audio.&lt;/p&gt;
&lt;p&gt;In my opinion, browsers should reject the response from Facebook, as the media element shouldn't allow mixing visible and opaque data. Nor should it allow opaque data from multiple sources, although that isn't happening here.&lt;/p&gt;
&lt;p&gt;Chrome and Safari rejected as soon as they saw the redirect. This is safe, although they would need to check the response if a service worker was in the middle too, since that can result in a response from somewhere else without a redirect occurring.&lt;/p&gt;
&lt;p&gt;However…&lt;/p&gt;
&lt;h2 id=&quot;firefox-security-bug&quot;&gt;Firefox security bug&lt;/h2&gt;
&lt;p&gt;Beta and nightly versions of Firefox at the time allowed the redirect, combine the responses together, and expose the duration of the audio through &lt;code&gt;mediaElement.duration&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Because I set the frequency, bit depth, and channel count of the audio in the header, I could determine the length of the cross-origin resource from the audio length using ✨basic maths✨.&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contentLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;audio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* WAV frequency */&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* WAV header length */&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/D5wu_za7ows?rel=0&amp;amp;showinfo=0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
Length of sensitive resource revealed in Firefox 59.0b9
&lt;p&gt;It looks like the size isn't detected exactly, but Google returns a range, so the reported size includes the extra 44 bytes that are missing from the start (the WAV header).&lt;/p&gt;
&lt;p&gt;And here's &lt;a href=&quot;https://jewel-chair.glitch.me/exploit.html?url=https://www.google.com/gmail/about/&quot;&gt;a link to the attack&lt;/a&gt;, which works in Firefox 59.0b9 at least.&lt;/p&gt;
&lt;p&gt;Leaking the length of a resource may not sound like a big deal, but consider an endpoint like &lt;code&gt;gender.json&lt;/code&gt;. The content length can give a lot away. Also see &lt;a href=&quot;https://tom.vg/papers/timing-attacks_ccs2015.pdf&quot;&gt;Timing attacks in the Modern Web&lt;/a&gt; (PDF, heh) which demonstrates the amount of information content-length can leak.&lt;/p&gt;
&lt;p&gt;Firefox handled this &lt;em&gt;brilliantly&lt;/em&gt;. Within three hours &lt;a href=&quot;https://twitter.com/padenot?lang=en&quot;&gt;Paul Adenot&lt;/a&gt; replied to &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1441153#c4&quot;&gt;the bug report&lt;/a&gt;, confirming it, and digged into other potential leaks (there weren't any). I was able to engage with engineers directly on how the issue should be fixed, which was important as I was planning how to standardise the mitigation.&lt;/p&gt;
&lt;p&gt;Since this was a regression caught in beta, Firefox were able to patch it before it reached stable.&lt;/p&gt;
&lt;h2 id=&quot;edge-security-bug&quot;&gt;Edge security bug&lt;/h2&gt;
&lt;p&gt;Edge suffered from the same kind of bug, but with a huge twist. Firstly, it didn't care if the other server returned a 206 or not. Secondly, and this is the big one, it allowed the resulting audio to pass through the web audio API. The web audio API is like the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; equivalent for audio, meaning I could monitor the samples being played:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;22&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;c1&quot;&gt;// Get the audio element.&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;audio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'audio'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Create a web audio context.&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AudioContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Connect the two.&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createMediaElementSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;audio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Create a script processor.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This lets me transform the audio data. I don't really care&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// about transforming, I just want to collect the data.&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scriptNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createScriptProcessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;datas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;scriptNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onaudioprocess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inputData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inputBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getChannelData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Store the audio data&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;audio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;datas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inputData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Connect the processor.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scriptNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;scriptNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;audio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ended'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scriptNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;scriptNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Now I can look at all the data received, and turn it from&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// audio sample data, back into bytes, then into a string.&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;datas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Each sample is -1 to 1.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// In the original wav it was 16-bits per sample,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// so I map each value to a signed 16-bit value.&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32768&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Then put that into a typed array.&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Int16Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// But, assuming utf-8, I need unsigned 8-bit chunks:&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;int16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Now I can create a string from that.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromCharCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Output the data.&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here's what that looks like:&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/4yanGsSk8rw?rel=0&amp;amp;showinfo=0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
Reading cross-origin content in Edge
&lt;p&gt;The text you see is the content of BBC News. Since the request is made with cookies, the content is the &quot;logged in&quot; view, although I wasn't logged in for the demo.&lt;/p&gt;
&lt;p&gt;It's kinda pathetic how excited I got about this, but this is a &lt;em&gt;huge&lt;/em&gt; bug. It means you could visit my site in Edge, and I could read your emails, I could read your Facebook feed, all without you knowing.&lt;/p&gt;
&lt;p&gt;And here's &lt;a href=&quot;http://jewel-chair.glitch.me/exploit.html?url=http://www.bbc.co.uk/news&amp;amp;initialLen=90000&amp;amp;totalLength=*&amp;amp;freq=44100&amp;amp;bits=16&amp;amp;useWebAudio=1&quot;&gt;a link to the attack&lt;/a&gt;. If this works in your version of Edge, &lt;strong&gt;update your browser immediately&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;reporting-the-bug-to-microsoft&quot;&gt;Reporting the bug to Microsoft&lt;/h3&gt;
&lt;p&gt;You're about to witness a boy in his mid-30s having a massive entitled whinge. If you want to avoid that, skip this section, but I really need to get it off my chest. The experience I had with Microsoft was very different to Firefox.&lt;/p&gt;
&lt;p&gt;I filed the issue in &lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/&quot;&gt;Edge's bug tracker&lt;/a&gt; on March 1st and notified secure@microsoft.com. I got an email from Microsoft security later that day saying that they don't have access to Edge's bug tracker, and asked if I could paste the details into an email for them. So yeah, Microsoft's security team don't have visibility into Edge security issues. Anyway, I sent them the details of the exploit over plain email.&lt;/p&gt;
&lt;p&gt;The next day they said they couldn't investigate the issue unless I provided the source code. C'mon folks, the &quot;view source&quot; button is right there. Anyway, I sent them the source. Then there was &lt;em&gt;20 days of silence&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;At this point I had no idea if they were able to understand the issue, or if they knew how serious it was. I pointed out that the attack could be used to read people's private messages, but received no response.&lt;/p&gt;
&lt;p&gt;I asked &lt;a href=&quot;https://twitter.com/jacobrossi&quot;&gt;Jacob Rossi&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/patrickkettner&quot;&gt;Patrick Kettner&lt;/a&gt; (awesome folks who work on the Edge team) if they could chase it internally. After they did, I finally got a reply from Microsoft security saying they were &quot;developing a fix&quot;, with no further detail.&lt;/p&gt;
&lt;p&gt;If you find a bug like this, you're eligible for a bounty. I asked if I could nominate a charity or two to receive the bounty. There was no response. 14 days of silence.&lt;/p&gt;
&lt;p&gt;I asked Patrick to chase them again (thanks Patrick!), and they replied saying they wouldn't be able to give the bounty to charity, despite their public docs saying otherwise. Apparently the rules changed at some point, and I was looking at old docs. Whatever. Thankfully Google are ok with me taking the money directly, and will match what I donate (I found the bug while at work, so I was worried about the legal implications of taking the money. I'm sure there'll be some tax complications too, ugh).&lt;/p&gt;
&lt;p&gt;I wasn't getting any progress update, or any details on how they planned to fix it (which would have been useful from a standards perspective). So, I &lt;a href=&quot;https://twitter.com/jaffathecake/status/984339892183490560&quot;&gt;shitposted on Twitter&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/shhnjk/status/987261708971462657&quot;&gt;Jun Kokatsu kinda sniped back&lt;/a&gt;. Jun is a security engineer at Edge, and we got chatting over DMs. And holy shit, this is who I should have been talking to all along.&lt;/p&gt;
&lt;p&gt;Jun told me there had been a lot of activity around the bug internally, and they're looking to improve visibility of this kind of stuff to the reporter. We were able to discuss what the fix would look like, and how that would work with a service worker in the middle. I really can't stress enough how helpful Jun has been.&lt;/p&gt;
&lt;p&gt;Microsoft released a patch for the bug, and published &lt;a href=&quot;https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/CVE-2018-8235&quot;&gt;CVE-2018-8235&lt;/a&gt;. I found out about this through Jun. I haven't heard anything through the official channel.&lt;/p&gt;
&lt;p&gt;On June 7th I asked the official contact for an update on the bug bounty, since they haven't confirmed any of that yet. I've yet to receive a reply. &lt;strong&gt;Update&lt;/strong&gt;: Shortly after publishing this they contacted me to say I qualify for the bounty.&lt;/p&gt;
&lt;p&gt;Ok, that was a lot of complaining, but I really want Microsoft to look at the experience I had with Firefox and learn from it. Security issues like this put their users at huge risk, and they need to ensure reporting these things isn't more effort than it's worth.&lt;/p&gt;
&lt;h2 id=&quot;standards-are-important&quot;&gt;Standards are important&lt;/h2&gt;
&lt;p&gt;I've covered two browser security issues here, but these bugs started when browsers implemented range requests for media elements, which wasn't covered by the standard. These range requests were genuinely useful, so all browsers did it by copying each others behaviour, but no one integrated it into the standard.&lt;/p&gt;
&lt;p&gt;The result is the browsers all behave slightly differently, and some ended up with security issues.&lt;/p&gt;
&lt;p&gt;This is why standards are important. Chrome had &lt;a href=&quot;https://sirdarckcat.blogspot.com/2015/10/range-responses-mix-match-leak.html&quot;&gt;a similar security issue a few years ago&lt;/a&gt;, but instead of just fixing it in Chrome, the fix should have been written into a standard, and &lt;a href=&quot;https://github.com/web-platform-tests/wpt&quot;&gt;tests&lt;/a&gt; should have been written for other browsers to check against.&lt;/p&gt;
&lt;p&gt;I've been working to improve standards here. Range requests are now &lt;a href=&quot;https://fetch.spec.whatwg.org/#privileged-no-cors-request-header-name&quot;&gt;able to pass through a service worker safely&lt;/a&gt; according to the spec. The next step is to specify the request and response handling for media elements.&lt;/p&gt;
&lt;p&gt;Also, &lt;a href=&quot;https://fetch.spec.whatwg.org/#corb&quot;&gt;CORB has been added to fetch&lt;/a&gt;. The aim here is to reduce the capabilities of no-cors while retaining compatibility with the web. For instance:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://facebook.com/secret-data.json&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Previously, the above would fail to load, but the response would be in the same process as the rest of the page. This is really bad thing given Spectre and Meltdown. But CORB will prevent that resource entering the page process, since its content (JSON) isn't something that can be loaded by any no-cors API.&lt;/p&gt;
&lt;p&gt;CORB also prevents the attack outlined in this post, as it wouldn't allow &lt;code&gt;text/html&lt;/code&gt; content to enter the process as the result of a no-cors request.&lt;/p&gt;
&lt;p&gt;And that's it! I now have a CVE number I can have etched on my grave. And I'm going to sit here and patiently await my invite to all the cool security parties.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Thanks to &lt;a href=&quot;https://thenounproject.com/term/sound/1065225/&quot;&gt;Sandra&lt;/a&gt; and &lt;a href=&quot;https://thenounproject.com/term/padlock/174117/#_=_&quot;&gt;Monica Stromann&lt;/a&gt;, whose icons I butchered to create the Wavethrough logo. Also thanks to &lt;a href=&quot;https://twitter.com/mathias&quot;&gt;Mathias Bynens&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/shhnjk&quot;&gt;Jun Kokatsu&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/aerotwist&quot;&gt;Paul Lewis&lt;/a&gt; for proofreading &amp;amp; corrections.&lt;/small&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 21 Jun 2018 12:26:45 +0000</pubDate>
<dc:creator>cgtyoder</dc:creator>
<og:image>https://jakearchibald.com/static/imgs/icon.e36785a43208.png</og:image>
<og:url>https://jakearchibald.com/2018/i-discovered-a-browser-bug</og:url>
<og:title>I discovered a browser bug</og:title>
<og:description>I accidentally discovered a huge browser security bug. Here's what it does, and how I discovered it…</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://jakearchibald.com/2018/i-discovered-a-browser-bug/</dc:identifier>
</item>
<item>
<title>Firefox is back. It&amp;#039;s time to give it a try</title>
<link>https://mobile.nytimes.com/2018/06/20/technology/personaltech/firefox-chrome-browser-privacy.html</link>
<guid isPermaLink="true" >https://mobile.nytimes.com/2018/06/20/technology/personaltech/firefox-chrome-browser-privacy.html</guid>
<description>&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;In fact, both Chrome and Firefox have tough security. Both include sandboxing, which isolates processes of the browser so a harmful website doesn’t infect other parts of your machine. So if you loaded a website with malicious code, it would be contained within the webpage so it couldn’t infect your files, webcam and microphone.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Google said there was one thing it could do better on: the inclusion of privacy settings to block tracking technology, similar to the tools that Firefox includes.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;“I think that’s something that we can improve on,” Ms. Tabriz said. “Firefox has some settings that we’re also exploring.”&lt;/p&gt;
&lt;h2 class=&quot;css-lkc1qz eqpy7av0&quot;&gt;Speed and Battery Tests&lt;/h2&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Which browser is faster?&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Some benchmark websites, which determine the speed of a browser by measuring the responsiveness of different web elements, say &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://browserbench.org/Speedometer2.0/&quot; title=&quot;&quot; target=&quot;_blank&quot;&gt;Chrome is faster&lt;/a&gt;. But some other benchmark sites say &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://browserbench.org/JetStream/&quot; title=&quot;&quot; target=&quot;_blank&quot;&gt;Firefox is faster&lt;/a&gt;. In my anecdotal testing as someone who juggles more than a dozen web tabs at a time, both were very speedy. Let’s call it a draw.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Mozilla’s promise that Firefox consumes less computer memory raises hopes that it should also use less battery life. Yet in my tests on a laptop running a script that automatically reloaded the top 10 news sites, Firefox lasted only a few minutes longer than Chrome before the battery was depleted. On another test, which involved streaming a Netflix video on a loop on each browser, the battery lasted about 20 minutes longer when the Chrome browser was used.&lt;/p&gt;
&lt;h2 class=&quot;css-lkc1qz eqpy7av0&quot;&gt;Resurrection Is Just Beginning&lt;/h2&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Firefox is the No. 2 computer browser, with about 12 percent of the desktop browser market, lagging far behind Chrome, which has about 67 percent, according to &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://gs.statcounter.com/browser-market-share/desktop/worldwide&quot; title=&quot;&quot; target=&quot;_blank&quot;&gt;StatCounter&lt;/a&gt;. Microsoft’s Internet Explorer and Apple’s Safari browsers are even farther behind in the desktop market, with Explorer’s share about 7 percent and Safari’s about 5.5 percent. On Android phones, the Chrome browser is still far more popular than Firefox’s mobile browser. And only lightweight versions of Firefox are available for Apple’s iOS devices.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Yet the path forward for Mozilla looks increasingly promising for consumers.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;In addition to the normal Firefox browser, Mozilla offers Firefox Focus, a privacy-centric mobile browser that blocks trackers by default and purges your web browsing history as soon as you close out of a page.&lt;/p&gt;
</description>
<pubDate>Thu, 21 Jun 2018 00:45:59 +0000</pubDate>
<dc:creator>MilnerRoute</dc:creator>
<og:url>https://www.nytimes.com/2018/06/20/technology/personaltech/firefox-chrome-browser-privacy.html</og:url>
<og:type>article</og:type>
<og:title>Firefox Is Back. It’s Time to Give It a Try.</og:title>
<og:image>https://static01.nyt.com/images/2018/06/21/business/21Techfix/merlin_139815324_5d0f3563-0071-4a44-926f-3841b7e7fb44-facebookJumbo.jpg</og:image>
<og:description>Mozilla redesigned its browser to take on Google’s Chrome. Firefox now has strong privacy features and is as fast as Chrome.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.nytimes.com/2018/06/20/technology/personaltech/firefox-chrome-browser-privacy.html</dc:identifier>
</item>
<item>
<title>Theory Suggests That All Genes Affect Every Complex Trait</title>
<link>https://www.quantamagazine.org/omnigenic-model-suggests-that-all-genes-affect-every-complex-trait-20180620/</link>
<guid isPermaLink="true" >https://www.quantamagazine.org/omnigenic-model-suggests-that-all-genes-affect-every-complex-trait-20180620/</guid>
<description>&lt;p&gt;The question most of genetics tries to answer is how genes connect to the traits we see. One person has red hair, another blonde hair; one dies at age 30 of Huntington’s disease, another lives to celebrate a 102nd birthday. Knowing what in the vast expanse of the genetic code is behind traits can fuel better treatments and information about future risks and illuminate how biology and evolution work. For some traits, the connection to certain genes is clear: Mutations of a single gene are behind sickle cell anemia, for instance, and mutations in another are behind cystic fibrosis.&lt;/p&gt;
&lt;p&gt;But unfortunately for those who like things simple, these conditions are the exceptions. The roots of many traits, from how tall you are to your susceptibility to schizophrenia, are far more tangled. In fact, they may be so complex that almost the entire genome may be involved in some way, &lt;a href=&quot;http://dx.doi.org/10.1016/j.cell.2017.05.038&quot;&gt;an idea formalized in a theory&lt;/a&gt; put forward last year.&lt;/p&gt;
&lt;p&gt;Starting about 15 years ago, geneticists began to collect DNA from thousands of people who shared traits, to look for clues to each trait’s cause in commonalities between their genomes, a kind of analysis called &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3543921/#__sec3title&quot;&gt;a genome-wide association study (GWAS)&lt;/a&gt;. What they found, first, was that you need an enormous number of people to get statistically significant results — &lt;a href=&quot;https://www.technologyreview.com/s/610151/a-search-for-insomnia-genes-involving-13-million-people-is-the-largest-genetic-study-ever/&quot;&gt;one recent GWAS&lt;/a&gt; seeking correlations between genetics and insomnia, for instance, included more than a million people. Second, in study after study, even the most significant genetic connections turned out to have surprisingly small effects. The conclusion, sometimes called the polygenic hypothesis, was that multiple loci, or positions in the genome, were likely to be involved in every trait, with each contributing just a small part. (A single large gene can contain several loci, each representing a distinct part of the DNA where mutations make a detectable difference.)&lt;/p&gt;
&lt;p&gt;How many loci that “multiple” description might mean was not defined precisely. One very early genetic mapping study in 1999 suggested that “a large number of loci (perhaps &amp;gt; than 15)” might contribute to autism risk, recalled &lt;a href=&quot;https://web.stanford.edu/group/pritchardlab/pritchard.html&quot;&gt;Jonathan Pritchard&lt;/a&gt;, now a geneticist at Stanford University. “That’s a lot!” he remembered thinking when the paper came out.&lt;/p&gt;

&lt;p&gt;Over the years, however, what scientists might consider “a lot” in this context has quietly inflated. Last June, Pritchard and his Stanford colleagues &lt;a href=&quot;http://greenleaf.stanford.edu/people.html&quot;&gt;Evan Boyle&lt;/a&gt; and &lt;a href=&quot;https://genes.uchicago.edu/directory/yang-li-phd&quot;&gt;Yang Li&lt;/a&gt; (now at the University of Chicago) published a paper about this in &lt;em&gt;Cell&lt;/em&gt; that immediately sparked controversy, although it also had many people nodding in cautious agreement. The authors described what they called &lt;a href=&quot;http://dx.doi.org/10.1016/j.cell.2017.05.038&quot;&gt;the “omnigenic” model of complex traits&lt;/a&gt;. Drawing on GWAS analyses of three diseases, they concluded that in the cell types that are relevant to a disease, it appears that not 15, not 100, but essentially all genes contribute to the condition. The authors suggested that for some traits, “multiple” loci could mean more than 100,000.&lt;/p&gt;
&lt;p&gt;The reaction was swift. “It caused a lot of discussion,” said &lt;a href=&quot;https://www.ru.nl/english/people/franke-b/&quot;&gt;Barbara Franke&lt;/a&gt;, a geneticist at Radboud University in the Netherlands who studies attention deficit hyperactivity disorder (ADHD). “Everywhere you went the omnigenic paper would be discussed.” &lt;em&gt;The Journal of Psychiatry and Brain Science&lt;/em&gt; did a &lt;a href=&quot;http://jpbs.qingres.com/SpecialIssuesList.aspx?menuid=1&quot;&gt;special issue just of response papers&lt;/a&gt;, some of them &lt;a href=&quot;http://jpbs.qingres.com/htmls/JPBS_922_Detail.html&quot;&gt;taking exception to the name&lt;/a&gt;, some saying that &lt;a href=&quot;http://jpbs.qingres.com/htmls/JPBS_920_Detail.html&quot;&gt;after all it was just an expansion of earlier ideas&lt;/a&gt;. A year on, however, the study has been cited more than 200 times, by papers whose subjects range from GWAS data to &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0092867418300011&quot;&gt;individual receptors&lt;/a&gt;. It seems to have encapsulated something many people in the genomics community had been turning over in their minds. But exactly what scientists should do with its insights depends on whom you talk to.&lt;/p&gt;
&lt;h2&gt;An Infinity of Small Effects&lt;/h2&gt;
&lt;p&gt;The origin of the idea lies in a very simple observation: When you look at the portions of the genome that GWAS findings have flagged as significant to individual traits, they are eerily well-distributed. Pritchard and his colleagues had been studying loci that contribute to height in humans. “What we realized was that the signal for height was coming from almost the whole genome,” he said. If the genome were a long string of ornamental lights, and every DNA snippet linked to height were illuminated, more than 100,000 lights would be shining all the way down the string. That result contrasted starkly with the general expectation that GWAS findings would be clustered around the most important genes for a trait.&lt;/p&gt;
&lt;p&gt;Then, while looking at GWAS analyses of schizophrenia, rheumatoid arthritis and Crohn’s disease, the researchers found something else unexpected. In our current understanding, disease often arises because of malfunctions in key biological pathways. Depending on the disease, this might lead to the overactivation of immune cells, for example, or the underproduction of a hormone. You might expect that the genetic loci incriminated by GWAS would be in genes in that key pathway. And you’d expect those genes would be ones used specifically in the types of cells associated with that disease: immune cells for autoimmune diseases, brain cells for psychiatric disorders, or pancreatic cells for diabetes, for instance.&lt;/p&gt;
&lt;p&gt;But when the researchers looked at disease-specific cell types, an enormous number of the regions flagged by GWAS were not in those genes. They were in genes expressed in nearly every cell in the body — genes doing basic maintenance tasks that all cells need. Pritchard and his colleagues suggest that this manifests a truth that is perhaps not always taken literally: Everything in a cell is connected. If incremental disruptions in basic processes can add up to greatly derange a trait, then perhaps nearly every gene expressed in a cell, no matter how seemingly unrelated to the metabolic process of interest, matters.&lt;/p&gt;

&lt;p&gt;In its broadest strokes, this idea has been around since 1918, when R. A. Fisher, one of the founders of population genetics, proposed that complex traits could be produced by an infinite number of genes, each with infinitely small effects. But his was a statistical model that didn’t refer to any actual, specific biological conditions. It seems we are now in the era of being able to provide those specifics.&lt;/p&gt;
&lt;p&gt;“This was the right paper at the right time,” according to &lt;a href=&quot;https://med.nyu.edu/faculty/aravinda-chakravarti&quot;&gt;Aravinda Chakravarti&lt;/a&gt;, a professor of neuroscience and physiology and director of the Center for Human Genetics and Genomics at New York University, who was a prepublication reviewer of the omnigenics paper in &lt;em&gt;Cell&lt;/em&gt;. He and others had noticed many examples of how widely distributed genetic influences could be, he said, but they had not put them together into a coherent thesis. He disagrees with critics who say the paper simply stated the obvious. “The paper clarified many points of view. It didn’t matter if I had thought about it — I had not thought about it hard enough. And I had never heard anybody thinking about it hard enough, with any clarity, [such] that it formed any new hypothesis.”&lt;/p&gt;
&lt;p&gt;In the paper, Pritchard and his colleagues proposed that, when geneticists seek what’s responsible for a disease or trait, it may be fruitful to think of the genes in a cell as a network. There may be some very highly connected genes at the center of a disease process, which they dub core genes. Peripheral genes, meanwhile, in aggregate help tip the scales one way or the other. The &lt;em&gt;Cell&lt;/em&gt; paper authors suggest that understanding of the core genes will offer the best insights into the mechanism of a disease. Piecing together how peripheral genes contribute, on the other hand, will broaden understanding of why some people develop a disorder and others don’t.&lt;/p&gt;
&lt;h2&gt;Do Core Genes Exist?&lt;/h2&gt;
&lt;p&gt;Since the &lt;em&gt;Cell&lt;/em&gt; paper’s publication a year ago, scientists’ discussion has circled around whether such a distinction is useful. &lt;a href=&quot;http://www.igm.columbia.edu/profile/dbgoldstein&quot;&gt;David Goldstein&lt;/a&gt;, a geneticist at Columbia University, is not sure that disease processes must truly be routed through core genes, but he also says that the idea that not everything picked up by GWAS is central and specific to a given disease is important. In the early days of GWAS, he said, when a connection between a genetic locus and a disease was detected, people would take that as a sign that it should be the target of investigation for new treatments, even if the connection was weak.&lt;/p&gt;
&lt;p&gt;“Those arguments are all fine — and were — unless something like what Jonathan is describing is going on,” he continued. “That’s a really big deal in terms of our interpretation of GWAS,” because weakly connected loci might then be less useful for getting at the pathology of a disease than people thought.&lt;/p&gt;

&lt;p&gt;Yet that may well depend on the disease, according to &lt;a href=&quot;https://qbi.uq.edu.au/profile/295/naomi-wray&quot;&gt;Naomi Wray&lt;/a&gt;, a quantitative geneticist at the University of Queensland who pointed out when scientists first started doing GWAS analyses that they should expect to see many weak associations. A few conditions, she says, are primarily attributable to a small number of identifiable genes, or even just one — yet other genes may still flip the switch between one manifestation of illness and another. She cites the example of Huntington’s disease, a progressive neurological disorder caused by a specific defect in one gene. The age at which it strikes depends on how many repeats of a particular DNA sequence someone has in that gene. But even among patients with the same number of repeats, the age at which symptoms first appear varies, as does the severity with which the disability progresses. Scientists in the field are looking at other loci linked to Huntington’s disease to see how they might be causing the differences.&lt;/p&gt;
&lt;p&gt;“These [loci] are by definition in peripheral genes. But they’re actually how the body is responding to this major insult of the core gene,” Wray said.&lt;/p&gt;
&lt;p&gt;For most complex conditions and diseases, however, she thinks that the idea of a tiny coterie of identifiable core genes is a red herring because the effects might truly stem from disturbances at innumerable loci — and from the environment — working in concert. In a new paper out in &lt;em&gt;Cell&lt;/em&gt; this week, Wray and her colleagues argue that the core gene idea amounts to an unwarranted assumption, and that researchers should simply let the experimental data about particular traits or conditions lead their thinking. (In their paper proposing omnigenics, Pritchard and his co-authors also asked whether the distinction between core and peripheral genes was useful and acknowledged that some diseases might not have them.)&lt;/p&gt;

&lt;p&gt;Teasing out the detailed genetics of diseases will therefore continue to require studies on very large numbers of people. Unfortunately, in the past year, Pritchard has been told that some groups applying for funding to do GWAS have been turned down by reviewers citing the omnigenics paper. He feels this reflects a misinterpretation: Omnigenics “explains why GWAS is hard,” he said. “It doesn’t mean we shouldn’t do GWAS.”&lt;/p&gt;
&lt;p&gt;Franke, who sees the paper as a provocatively phrased extension of earlier ideas, says that it has nevertheless shaped her thinking in the past year. “It made me rethink what I know about signal transduction — about how messages are relayed in cells — and how functions are fulfilled,” she said. The deeper you look at the workings of a cell, the more you realize that a single common protein may have quite different effects depending on what type of cell it is in: It may bear different messages, or block different processes, so much so that traits that might seem to be quite disconnected begin to change.&lt;/p&gt;
&lt;p&gt;“It gave a lot of food for thought,” she said of the paper, “and I think that was the goal.”&lt;/p&gt;
</description>
<pubDate>Wed, 20 Jun 2018 19:19:45 +0000</pubDate>
<dc:creator>digital55</dc:creator>
<og:title>‘Omnigenic’ Model Suggests That All Genes Affect Every Complex Trait | Quanta Magazine</og:title>
<og:type>article</og:type>
<og:url>https://www.quantamagazine.org/omnigenic-model-suggests-that-all-genes-affect-every-complex-trait-20180620/</og:url>
<og:image>https://d2r55xnwy6nx47.cloudfront.net/uploads/2018/06/Omnigenics_1200_FB.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.quantamagazine.org/omnigenic-model-suggests-that-all-genes-affect-every-complex-trait-20180620/</dc:identifier>
</item>
<item>
<title>Certificates for localhost</title>
<link>https://letsencrypt.org/docs/certificates-for-localhost/</link>
<guid isPermaLink="true" >https://letsencrypt.org/docs/certificates-for-localhost/</guid>
<description>&lt;p&gt;Last updated: December 21, 2017 | &lt;a href=&quot;https://letsencrypt.org/docs&quot;&gt;See all Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sometimes people want to get a certificate for the hostname “localhost”, either for use in local development, or for distribution with a native application that needs to communicate with a web application. Let’s Encrypt can’t provide certificates for “localhost” because nobody uniquely owns it, and it’s not rooted in a top level domain like “.com” or “.net”. It’s possible to set up your own domain name that happens to resolve to 127.0.0.1, and get a certificate for it using the DNS challenge. However, this is generally a bad idea and there are better options.&lt;/p&gt;

&lt;p&gt;If you’re developing a web app, it’s useful to run a local web server like Apache or Nginx, and access it via &lt;a href=&quot;http://localhost:8000/&quot;&gt;http://localhost:8000/&lt;/a&gt; in your web browser. However, web browsers behave in subtly different ways on HTTP vs HTTPS pages. The main difference: On an HTTPS page, any requests to load JavaScript from an HTTP URL will be blocked. So if you’re developing locally using HTTP, you might add a script tag that works fine on your development machine, but breaks when you deploy to your HTTPS production site. To catch this kind of problem, it’s useful to set up HTTPS on your local web server. However, you don’t want to see certificate warnings all the time. How do you get the green lock locally?&lt;/p&gt;
&lt;p&gt;The best option: Generate your own certificate, either self-signed or signed by a local root, and trust it in your operating system’s trust store. Then use that certificate in your local web server. See below for details.&lt;/p&gt;

&lt;p&gt;Sometimes developers want to offer a downloadable native app that can be used alongside a web site to offer extra features. For instance, the Dropbox and Spotify desktop apps scan for files from across your machine, which a web app would not be allowed to do. One common approach is for these native apps to offer a web service on localhost, and have the web app make requests to it via XMLHTTPRequest (XHR) or WebSockets. The web app almost always uses HTTPS, which means that browsers will forbid it from making XHR or WebSockets requests to non-secure URLs. This is called Mixed Content Blocking. To communicate with the web app, the native app needs to provide a secure web service.&lt;/p&gt;
&lt;p&gt;Fortunately, modern browsers &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=607878&quot;&gt;consider&lt;/a&gt; “&lt;a href=&quot;http://127.0.0.1:8000/&amp;quot;&quot;&gt;http://127.0.0.1:8000/&quot;&lt;/a&gt; to be a &lt;a href=&quot;https://www.w3.org/TR/secure-contexts/#is-origin-trustworthy&quot;&gt;“potentially trustworthy”&lt;/a&gt; URL because it refers to a loopback address. Traffic sent to 127.0.0.1 is guaranteed not to leave your machine, and so is considered automatically secure against network interception. That means if your web app is HTTPS, and you offer a native app web service on 127.0.0.1, the two can happily communicate via XHR. Unfortunately, &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-dnsop-let-localhost-be-localhost-02&quot;&gt;localhost doesn’t yet get the same treatment&lt;/a&gt;. Also, WebSockets don’t get this treatment for either name.&lt;/p&gt;
&lt;p&gt;You might be tempted to work around these limitations by setting up a domain name in the global DNS that happens to resolve to 127.0.0.1 (for instance, localhost.example.com), getting a certificate for that domain name, shipping that certificate and corresponding private key with your native app, and telling your web app to communicate with &lt;a href=&quot;https://localhost.example.com:8000/&quot;&gt;https://localhost.example.com:8000/&lt;/a&gt; instead of &lt;a href=&quot;http://127.0.0.1:8000/&quot;&gt;http://127.0.0.1:8000/&lt;/a&gt;. &lt;em&gt;Don’t do this.&lt;/em&gt; It will put your users at risk, and your certificate may get revoked.&lt;/p&gt;
&lt;p&gt;By introducing a domain name instead of an IP address, you make it possible for an attacker to Man in the Middle (MitM) the DNS lookup and inject a response that points to a different IP address. The attacker can then pretend to be the local app and send fake responses back to the web app, which may compromise your account on the web app side, depending on how it is designed.&lt;/p&gt;
&lt;p&gt;The successful MitM in this situation is possible because in order to make it work, you had to ship the private key to your certificate with your native app. That means that anybody who downloads your native app gets a copy of the private key, including the attacker. This is considered a compromise of your private key, and your Certificate Authority (CA) is required to revoke your certificate if they become aware of it. &lt;a href=&quot;https://groups.google.com/d/msg/mozilla.dev.security.policy/eV89JXcsBC0/wsj5zpbbAQAJ&quot;&gt;Many native apps&lt;/a&gt; have &lt;a href=&quot;https://groups.google.com/d/msg/mozilla.dev.security.policy/T6emeoE-lCU/-k-A2dEdAQAJ&quot;&gt;had their certificates&lt;/a&gt; revoked for &lt;a href=&quot;https://groups.google.com/d/msg/mozilla.dev.security.policy/pk039T_wPrI/tGnFDFTnCQAJ&quot;&gt;shipping their private key&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, this leaves native apps without a lot of good, secure options to communicate with their corresponding web site. And the situation may get trickier in the future if browsers further &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=378566&quot;&gt;tighten access to localhost from the web&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also note that exporting a web service that offers privileged native APIs is inherently risky, because web sites that you didn’t intend to authorize may access them. If you go down this route, make sure to read up on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;Cross-Origin Resource Sharing&lt;/a&gt;, use Access-Control-Allow-Origin, and make sure to use a memory-safe HTTP parser, because even origins you don’t allow access to can send preflight requests, which may be able to exploit bugs in your parser.&lt;/p&gt;

&lt;p&gt;Anyone can make their own certificates without help from a CA. The only difference is that certificates you make yourself won’t be trusted by anyone else. For local development, that’s fine.&lt;/p&gt;
&lt;p&gt;The simplest way to generate a private key and self-signed certificate for localhost is with this openssl command:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;openssl req -x509 -out localhost.crt -keyout localhost.key \
  -newkey rsa:2048 -nodes -sha256 \
  -subj '/CN=localhost' -extensions EXT -config &amp;lt;( \
   printf &quot;[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth&quot;)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can then configure your local web server with localhost.crt and localhost.key, and install localhost.crt in your list of locally trusted roots.&lt;/p&gt;
&lt;p&gt;If you want a little more realism in your development certificates, you can use &lt;a href=&quot;https://github.com/jsha/minica&quot;&gt;minica&lt;/a&gt; to generate your own local root certificate, and issue end-entity (aka leaf) certificates signed by it. You would then import the root certificate rather than a self-signed end-entity certificate.&lt;/p&gt;
&lt;p&gt;You can also choose to use a domain with dots in it, like “www.localhost”, by adding it to /etc/hosts as an alias to 127.0.0.1. This subtly changes how browsers handle cookie storage.&lt;/p&gt;
</description>
<pubDate>Wed, 20 Jun 2018 18:39:46 +0000</pubDate>
<dc:creator>colinprince</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://letsencrypt.org/docs/certificates-for-localhost/</dc:identifier>
</item>
<item>
<title>YAML: probably not so great after all (2017)</title>
<link>https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html</link>
<guid isPermaLink="true" >https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html</guid>
<description>&lt;p&gt;I previously wrote &lt;a href=&quot;http://arp242.net/weblog/JSON_as_configuration_files-_please_dont.html&quot;&gt;why using JSON for human-editable configuration files is a bad idea&lt;/a&gt;. Today we’re going to look at some general problems with the YAML format.&lt;/p&gt;
&lt;h2 id=&quot;insecure-by-default&quot;&gt;Insecure by default&lt;/h2&gt;
&lt;p&gt;YAML is insecure by default. Loading a user-provided (untrusted) YAML string needs careful consideration.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;!!python/object/apply:os.system
args: ['ls /']
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Running it with &lt;code&gt;print(yaml.load(open('a.yaml')))&lt;/code&gt; should give you something like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bin   etc   lib    lost+found  opt   root  sbin  tmp  var sys
boot  dev   efi    home        lib64 mnt   proc  run  srv usr
0
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Many other languages (including Ruby and PHP&lt;sup id=&quot;fnref:1&quot;&gt;&lt;/sup&gt;) are also unsafe by default. &lt;a href=&quot;https://github.com/search?q=yaml.load&amp;amp;type=Code&amp;amp;utf8=%E2%9C%93&quot;&gt;Searching for &lt;code&gt;yaml.load&lt;/code&gt; on GitHub&lt;/a&gt; gives a whopping 2.8 million results. &lt;a href=&quot;https://github.com/search?q=yaml.safe_load&amp;amp;type=Code&amp;amp;utf8=%E2%9C%93&quot;&gt;&lt;code&gt;yaml.safe_load&lt;/code&gt;&lt;/a&gt; only gives 26,000 results.&lt;/p&gt;
&lt;p&gt;Mind you, many of those &lt;code&gt;yaml.load()&lt;/code&gt;s are fine – loading in a config file with &lt;code&gt;yaml.load()&lt;/code&gt; is often okay since it’s usually (though not always!) from a ‘trusted source’, and many are from test files with static YAML. But still, one can’t help but wonder how many exploits are hidden in those 2.8 million results.&lt;/p&gt;
&lt;p&gt;This is not a theoretical problem. In 2013 &lt;a href=&quot;https://www.sitepoint.com/anatomy-of-an-exploit-an-in-depth-look-at-the-rails-yaml-vulnerability/&quot;&gt;every Ruby on Rails application ever written was found to be vulnerable&lt;/a&gt; to remote code execution due to exactly this problem.&lt;/p&gt;
&lt;p&gt;One might argue this is not really the fault of the YAML format &lt;em&gt;as such&lt;/em&gt;, but rather the fault of the libraries implementing it wrong, but it seems to be the case that the majority of libraries are unsafe by default (especially the dynamic languages), so &lt;em&gt;de-facto&lt;/em&gt; it is a problem with YAML.&lt;/p&gt;
&lt;p&gt;One might also argue that fixing it is as easy as replacing &lt;code&gt;load()&lt;/code&gt; with &lt;code&gt;safe_load()&lt;/code&gt;, but many people are unaware of the problem, and even &lt;em&gt;if&lt;/em&gt; you’re aware of it, it’s one of those things that can be easy to forget. It’s pretty bad API design.&lt;/p&gt;
&lt;h2 id=&quot;can-be-hard-to-edit-especially-for-large-files&quot;&gt;Can be hard to edit, especially for large files&lt;/h2&gt;
&lt;p&gt;YAML files can be hard to edit, and this difficulty grows fast as the file gets larger.&lt;/p&gt;
&lt;p&gt;A good example of this are Ruby on Rails’ translation files; for example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;en:
   formtastic:
         labels:
           title: &quot;Title&quot;  # Default global value
           article:
                 body: &quot;Article content&quot;
           post:
                 new:
                   title: &quot;Choose a title...&quot;
                   body: &quot;Write something...&quot;
                 edit:
                   title: &quot;Edit title&quot;
                   body: &quot;Edit body&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This still looks okay, right? But what if this file has 100 lines? Or 1,000 lines? It is difficult to see “where” in the file you are because it may be off the screen. You’ll need to scroll up, but then you need to keep track of the indentation, which can be pretty hard even with indentation guides, especially since 2-space indentation is the norm and &lt;a href=&quot;http://www.yaml.org/faq.html&quot;&gt;tab indentation is forbidden&lt;/a&gt;&lt;sup id=&quot;fnref:2&quot;&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;And accidentally getting the indentation wrong often isn’t an error; it will often just deserialize to something you didn’t intend. Happy debugging!&lt;/p&gt;
&lt;p&gt;I’ve been happily programming Python for over a decade, so I’m used to significant whitespace, but sometimes I’m still struggling with YAML. In Python the drawbacks and loss of clarity are contained by not having functions that are several pages long, but data or configuration files have no such natural limits to their length.&lt;/p&gt;
&lt;p&gt;For small files this is not a problem; but it really doesn’t scale well to larger files, especially not if you want to edit them later on.&lt;/p&gt;
&lt;h2 id=&quot;its-pretty-complex&quot;&gt;It’s pretty complex&lt;/h2&gt;
&lt;p&gt;YAML may seem ‘simple’ and ‘obvious’ when glancing at a basic example, but turns out it’s not. The &lt;a href=&quot;http://yaml.org/spec/1.2/spec.pdf&quot;&gt;YAML spec&lt;/a&gt; is 23,449 words; for comparison, &lt;a href=&quot;https://github.com/toml-lang/toml&quot;&gt;TOML&lt;/a&gt; is 3,339 words, &lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf&quot;&gt;JSON&lt;/a&gt; is 1,969 words, and &lt;a href=&quot;https://www.w3.org/TR/REC-xml/&quot;&gt;XML&lt;/a&gt; is 20,603 words.&lt;/p&gt;
&lt;p&gt;Who among us have read all that? Who among us have read and &lt;em&gt;understood&lt;/em&gt; all of that? Who among of have read, &lt;em&gt;understood&lt;/em&gt;, and &lt;strong&gt;remembered&lt;/strong&gt; all of that?&lt;/p&gt;
&lt;p&gt;For example did you know there are &lt;a href=&quot;http://stackoverflow.com/a/21699210/660921&quot;&gt;&lt;em&gt;nine&lt;/em&gt; ways to write a multi-line string in YAML&lt;/a&gt; with subtly different behaviour?&lt;/p&gt;
&lt;p&gt;Yeah :-/&lt;/p&gt;
&lt;p&gt;That post gets even more interesting if you look at &lt;a href=&quot;http://stackoverflow.com/posts/21699210/revisions&quot;&gt;its revision history&lt;/a&gt;, as the author of the post discovers more and more ways to do this and more of the subtleties involved.&lt;/p&gt;
&lt;p&gt;It’s telling that the YAML spec starts with a preview, which states (emphases mine):&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;This section provides a quick glimpse into the expressive power of YAML. &lt;strong&gt;It is not expected that the first-time reader grok all of the examples&lt;/strong&gt;. Rather, these selections are used as motivation for the remainder of the specification.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;surprising-behaviour&quot;&gt;Surprising behaviour&lt;/h3&gt;
&lt;p&gt;What does this parse to (examples courtesy of &lt;a href=&quot;https://github.com/crdoconnor/strictyaml/blob/master/FAQ.rst#what-is-wrong-with-implicit-typing&quot;&gt;Colm O’Connor&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;- Don Corleone: Do you have faith in my judgment?
- Clemenza: Yes
- Don Corleone: Do I have your loyalty?
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Yup!&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[
        {'Don Corleone': 'Do you have faith in my judgment?'},
        {'Clemenza': True},
        {'Don Corleone': 'Do I have your loyalty?'}
]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Or what about:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;python: 3.5.3
postgres: 9.3
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;3.5.3&lt;/code&gt; gets recognized as as string, but &lt;code&gt;9.3&lt;/code&gt; gets recognized as a number instead of a string:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{'python': '3.5.3', 'postgres': 9.3}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Or what about:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Effenaar: Eindhoven
013: Tilburg
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;013 is a popular music Venue in Tilburg, but YAML will send you the wrong way since it’s parsed as an octal number:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{11: 'Tilburg', 'Effenaar': 'Eindhoven'}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;All of this – and more – is why many experienced YAMLers will often quote all strings, even when it’s not strictly required. Many people don’t use quotes, and it can be easy to forget especially if the rest of the file – possibly written by other people – doesn’t use quotes.&lt;/p&gt;
&lt;h3 id=&quot;its-not-portable&quot;&gt;It’s not portable&lt;/h3&gt;
&lt;p&gt;Because it’s so complex, its claims of portability have been greatly exaggerated. For example consider this example taken from the YAML spec:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;? - Detroit Tigers
  - Chicago cubs
:
  - 2001-07-23

? [ New York Yankees,
        Atlanta Braves ]
: [ 2001-07-02, 2001-08-12,
        2001-08-14 ]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Aside from the fact that most readers of this probably won’t even know what this does, try parsing it in Python with PyYAML:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;yaml.constructor.ConstructorError: while constructing a mapping
  in &quot;a.yaml&quot;, line 1, column 1
found unhashable key
  in &quot;a.yaml&quot;, line 1, column 3
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In Ruby it works:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
        [&quot;Detroit Tigers&quot;, &quot;Chicago cubs&quot;] =&amp;gt; [
                #&amp;lt;Date: 2001-07-23 ((2452114j,0s,0n),+0s,2299161j)&amp;gt;
        ],
        [&quot;New York Yankees&quot;, &quot;Atlanta Braves&quot;] =&amp;gt; [
                #&amp;lt;Date: 2001-07-02 ((2452093j,0s,0n),+0s,2299161j)&amp;gt;,
                #&amp;lt;Date: 2001-08-12 ((2452134j,0s,0n),+0s,2299161j)&amp;gt;,
                #&amp;lt;Date: 2001-08-14 ((2452136j,0s,0n),+0s,2299161j)&amp;gt;
        ]
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The reason for this is because you can’t use a list as a dict key in Python:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; {['a']: 'zxc'}
Traceback (most recent call last):
  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;
  TypeError: unhashable type: 'list'
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And this restriction is not unique to Python; common languages such as PHP, JavaScript, and Go all share this restriction.&lt;/p&gt;
&lt;p&gt;So use this in a YAML file, and you won’t be able to read it in most languages.&lt;/p&gt;
&lt;p&gt;Here’s another example again taken from the examples section of the YAML spec:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# Ranking of 1998 home runs
---
- Mark McGwire
- Sammy Sosa
- Ken Griffey

# Team ranking
---
- Chicago Cubs
- St Louis Cardinals
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Python says:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;yaml.composer.ComposerError: expected a single document in the stream
  in &quot;a.yaml&quot;, line 3, column 1
but found another document
  in &quot;a.yaml&quot;, line 8, column 1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;While Ruby outputs:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[&quot;Mark McGwire&quot;, &quot;Sammy Sosa&quot;, &quot;Ken Griffey&quot;]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The reason for this is that there are multiple YAML documents in a single file (&lt;code&gt;---&lt;/code&gt; start the document). In Python there is the &lt;code&gt;load_all()&lt;/code&gt; function to parse all documents. Ruby’s &lt;code&gt;load()&lt;/code&gt; just loads the first document, and as near as I can tell, doesn’t have a way to load multiple documents.&lt;/p&gt;
&lt;p&gt;I’m fairly sure that many more incompatibilities more subtle than this can be found. Are you &lt;em&gt;sure&lt;/em&gt; that every YAML parser will treat &lt;code&gt;foo:bar&lt;/code&gt; as a string, or &lt;code&gt;0x42&lt;/code&gt; as the integer &lt;code&gt;66&lt;/code&gt;, etc.?&lt;/p&gt;
&lt;h2 id=&quot;goals-achieved&quot;&gt;Goals achieved?&lt;/h2&gt;
&lt;p&gt;The spec states:&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;The design goals for YAML are, in decreasing priority:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;YAML is easily readable by humans.&lt;/li&gt;
&lt;li&gt;YAML data is portable between programming languages.&lt;/li&gt;
&lt;li&gt;YAML matches the native data structures of agile languages.&lt;/li&gt;
&lt;li&gt;YAML has a consistent model to support generic tools.&lt;/li&gt;
&lt;li&gt;YAML supports one-pass processing.&lt;/li&gt;
&lt;li&gt;YAML is expressive and extensible.&lt;/li&gt;
&lt;li&gt;YAML is easy to implement and use.&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;So how well does it do?&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;YAML is easily readable by humans.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;True only if you stick to a small subset. The full set is complex – much &lt;em&gt;more&lt;/em&gt; so than XML or JSON.&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;YAML data is portable between programming languages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not really true, as it’s too easy to create constructs that are not supported by common languages.&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;YAML matches the native data structures of agile languages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See above. Plus, why only support agile (or dynamic) languages? What about other languages?&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;YAML has a consistent model to support generic tools.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am not even sure what this means and I can’t find any elaboration.&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;YAML supports one-pass processing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I’ll take their word for it.&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;YAML is expressive and extensible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, it is, but it’s &lt;em&gt;too&lt;/em&gt; expressive (e.g. too complex).&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;YAML is easy to implement and use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;$ cat `ls -1 ~/gocode/src/github.com/go-yaml/yaml/*.go | grep -v _test` | wc -l
9247

$ cat /usr/lib/python3.5/site-packages/yaml/*.py | wc -l
5713
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Don’t get me wrong, it’s not like YAML is absolutely terrible – it’s certainly not as &lt;a href=&quot;http://arp242.net/weblog/JSON_as_configuration_files-_please_dont.html&quot;&gt;problematic as using JSON&lt;/a&gt; – but it’s not exactly great either. There are some drawbacks and surprises that are not at all obvious at first, and there are a number of better alternatives such as &lt;a href=&quot;https://github.com/toml-lang/toml&quot;&gt;TOML&lt;/a&gt; and other more specialized formats.&lt;/p&gt;
&lt;p&gt;Personally, I’m not likely to use it again when I’ve got a choice.&lt;/p&gt;
&lt;p&gt;If you &lt;em&gt;must&lt;/em&gt; use YAML then I recommend you use &lt;a href=&quot;https://github.com/crdoconnor/strictyaml&quot;&gt;StrictYAML&lt;/a&gt;, which removes some (though not all) of the more hairy parts.&lt;/p&gt;

&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;You can mail me at &lt;a href=&quot;mailto:martin@arp242.net&quot;&gt;martin@arp242.net&lt;/a&gt; or &lt;a href=&quot;https://github.com/Carpetsmoker/arp242.net/issues/new&quot;&gt;create a GitHub issue&lt;/a&gt; for feedback, questions, etc.&lt;/p&gt;
</description>
<pubDate>Wed, 20 Jun 2018 18:20:53 +0000</pubDate>
<dc:creator>tlb</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html</dc:identifier>
</item>
<item>
<title>Big fish are found deep not because of age, climate, or prey, but because of us</title>
<link>https://arstechnica.com/science/2018/06/ecological-law-turns-out-to-just-be-the-result-of-us-fishing/</link>
<guid isPermaLink="true" >https://arstechnica.com/science/2018/06/ecological-law-turns-out-to-just-be-the-result-of-us-fishing/</guid>
<description>&lt;img src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/06/1280_Y56F53xCrF3H-800x533.jpg&quot;/&gt;&lt;aside id=&quot;social-left&quot;&gt;&lt;a title=&quot;44 posters participating&quot; class=&quot;comment-count icon-comment-bubble-down&quot; href=&quot;https://arstechnica.com/science/2018/06/ecological-law-turns-out-to-just-be-the-result-of-us-fishing/?comments=1&quot;&gt;&lt;span class=&quot;comment-count-before&quot;&gt;reader comments&lt;/span&gt; &lt;span class=&quot;comment-count-number&quot;&gt;62&lt;/span&gt;&lt;/a&gt;
&lt;div class=&quot;share-links&quot;&gt;&lt;span&gt;Share this story&lt;/span&gt;    &lt;/div&gt;
&lt;/aside&gt;&lt;p&gt;When studying populations of a flounder-like North Sea fish called plaice in the early 1900’s, a man named Heincke noticed that older, larger fish are found deeper in the water than younger, smaller fish. The same phenomenon was subsequently found for other North Atlantic species like cod, haddock, pollock, and some species of flatfish; it was thus dubbed Heincke’s Law and treated as an established fact. Biologists assumed it was ontogenic in nature, meaning that it must be connected to how the fish age and mature.&lt;/p&gt;
&lt;p&gt;All the species in which older, bigger fish are found in deeper water have something else in common: we eat them. Could it be, some Canadian scientists wondered, that all the big fish are found in deeper water because we fished them out of shallower water? Apparently (and somewhat astonishingly) this possibility had never been evaluated. And the scientists found that not only &lt;em&gt;could&lt;/em&gt; this be the case—it in fact was.&lt;/p&gt;
&lt;h2&gt;Explaining the law&lt;/h2&gt;
&lt;p&gt;Starting in the 1990s, a number of hypotheses were posited to explain Heincke’s Law. One is that larger, older fish gravitate down to cooler waters where the diminished metabolic demands can increase their lifespans. Another suggested that all fish prefer to be in shallower water, but when the population gets too big, the seniors get shunted out of prime territory by the youngsters and have to live in deeper waters. A third holds that juveniles hide in shallower waters from the threatening adults down in the depths.&lt;/p&gt;
&lt;p&gt;A new hypothesis, posited in 2005, contends that the older fish are going deeper to find favorable temperatures as ocean water warms. It has even been suggested that the depth at which we find these fish can act as an indicator of how much the seas are warming.&lt;/p&gt;
&lt;p&gt;The new research starts by reevaluating a dataset of cod stock in the Eastern Scotian Shelf, in the Northwest Atlantic just south of Nova Scotia, from 1970-1989. In 1993, Canada put a moratorium on cod fishing because the stock was so depleted, ending an industry that had sustained humans in the region for the past 500 years. Cod stocks have started to rebound, but the moratorium is still (mostly) in effect.&lt;/p&gt;
&lt;h2&gt;Simulated fishing&lt;/h2&gt;
&lt;p&gt;This new analysis recapitulated previous findings from 1992: older, larger cod were found in deeper, cooler waters. But the researchers added a simulation in which the depth and mass of fish were tied to the rate of mortality by fishing. When set to mimic the actual fishing rate over the two decades spanning the dataset, the model outcomes were consistent with both the new and old fish data. When fishing mortality rates were increased in the model, larger fish moved progressively deeper. And when fishing rates were set to zero in the model, there was no age-related deepening seen at all.&lt;/p&gt;
&lt;p&gt;Between 2006 and 2010, fishing rates were in fact zero—so larger cod were not being fished out of shallower water. During this time, codfish of all ages and sizes were found living together in shallower water.&lt;/p&gt;
&lt;p&gt;This process has implications beyond fisheries management. If hypotheses that related the maturity of fish to the water temperature were correct, then fisheries data would give us a way to estimate water temperatures, helping us track the oceans' warming. But it looks like we probably shouldn’t use the depth at which commercially fished species are swimming to tell us anything about the temperature.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PNAS&lt;/em&gt;, 2018. DOI: &lt;a href=&quot;http://dx.doi.org/10.1073/pnas.1802096115&quot;&gt;10.1073/pnas.1802096115&lt;/a&gt; (&lt;a href=&quot;http://arstechnica.com/%20science/news/2010/03/dois-and-their-discontents-1.ars&quot;&gt;About DOIs&lt;/a&gt;).&lt;/p&gt;
</description>
<pubDate>Wed, 20 Jun 2018 18:11:05 +0000</pubDate>
<dc:creator>curtis</dc:creator>
<og:url>https://arstechnica.com/science/2018/06/ecological-law-turns-out-to-just-be-the-result-of-us-fishing/</og:url>
<og:title>Ecological “law” turns out to just be the result of us fishing</og:title>
<og:image>https://cdn.arstechnica.net/wp-content/uploads/2018/06/1280_Y56F53xCrF3H-760x380.jpg</og:image>
<og:description>Mature fish are found deep not because of age, climate, or prey, but because of us.</og:description>
<og:type>article</og:type>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arstechnica.com/science/2018/06/ecological-law-turns-out-to-just-be-the-result-of-us-fishing/</dc:identifier>
</item>
<item>
<title>Keybase Exploding Messages</title>
<link>https://keybase.io/blog/keybase-exploding-messages</link>
<guid isPermaLink="true" >https://keybase.io/blog/keybase-exploding-messages</guid>
<description>&lt;h2&gt;&lt;span&gt;NEWS FLASH:&lt;/span&gt; &lt;strong&gt;Keybase Exploding Messages&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;June 20, 2018&lt;/p&gt;
&lt;center&gt;
&lt;div class=&quot;img-exploding&quot;&gt;&lt;img src=&quot;https://keybase.io/images/blog/exploding/cherry_sm.png&quot; width=&quot;218&quot; height=&quot;218&quot;/&gt;&lt;/div&gt;
&lt;/center&gt;
&lt;p&gt;Hi everyone. Starting today, you can put a short fuse on your Keybase chat messages. This works for 1-on-1 chats and also inside team, group, and community channels.&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;center class=&quot;img-exploding&quot;&gt;
&lt;div&gt;
&lt;div&gt;&lt;img src=&quot;https://keybase.io/images/blog/exploding/zep2.png&quot; class=&quot;img img-rounded img-responsive&quot; width=&quot;566&quot; height=&quot;344&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/center&gt;
&lt;p class=&quot;small&quot;&gt;demonstration from my brother&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We recommend your most &lt;strong&gt;intimate&lt;/strong&gt; and most &lt;strong&gt;corporate&lt;/strong&gt; messages get the exploding treatment. Each end of the professionalism spectrum. Don't put that dank meme or Income Statement in Slack, people. Put it in Keybase, so it's encrypted.&lt;/p&gt;
&lt;p&gt;And if you'd like it to be &lt;em&gt;temporary&lt;/em&gt;, make it explode.&lt;/p&gt;
&lt;p&gt;Some details:&lt;/p&gt;
&lt;h2&gt;They blow up&lt;/h2&gt;
&lt;p&gt;When the time comes, KA-BOOM&lt;/p&gt;
&lt;center class=&quot;img-exploding&quot;&gt;
&lt;div&gt;
&lt;div&gt;&lt;img src=&quot;https://keybase.io/images/blog/exploding/drugstore.gif&quot; class=&quot;img img-rounded img-responsive&quot; width=&quot;609&quot; height=&quot;314&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/center&gt;
&lt;p&gt;When the countdown hits zero, everyone throws away the plaintext and ciphertext.&lt;/p&gt;
&lt;h2&gt;Exploding messages have forward secrecy&lt;/h2&gt;
&lt;p&gt;Forward secrecy means your apps use temporary &quot;ephemeral&quot; keys that are thrown away.&lt;/p&gt;
&lt;p&gt;To be clear, all Keybase messages - not just exploding ones - are &lt;strong&gt;end-to-end encrypted&lt;/strong&gt;. No one can read them without compromising one of your devices.&lt;/p&gt;
&lt;p&gt;Forward secrecy is something extra. It protects you if someone in the future &lt;strong&gt;steals your device's key&lt;/strong&gt; and also has access to old recorded messages, say by scooping up ciphertexts as a man-in-the-middle.&lt;/p&gt;
&lt;p&gt;Forward secrecy works extra well with &lt;em&gt;timed&lt;/em&gt; messages because your device destroys &lt;strong&gt;both&lt;/strong&gt; the decryption keys and plaintext.&lt;/p&gt;
&lt;h2&gt;Splosions from the command line&lt;/h2&gt;
&lt;p&gt;You can also send exploding messages from your terminal of choice.*&lt;/p&gt;
&lt;div class=&quot;pre-exploding&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;code code-highlighted&quot;&gt;

keybase chat send --exploding-lifetime &lt;span class=&quot;hljs-string&quot;&gt;&quot;30s&quot;&lt;/span&gt; friend1234 \
&lt;span class=&quot;hljs-string&quot;&gt;&quot;Yo - meet @ 10pm under the powerlines. Bring the stuff&quot;&lt;/span&gt;


keybase chat send --exploding-lifetime &lt;span class=&quot;hljs-string&quot;&gt;&quot;6h&quot;&lt;/span&gt; acmecorp.finance \
&lt;span class=&quot;hljs-string&quot;&gt;&quot;That is NO laughing matter, James.&quot;&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;* assuming sane choices&lt;/p&gt;
&lt;p&gt;If you're writing a bot, you can pipe JSON to &lt;code&gt;keybase chat api&lt;/code&gt;. Example:&lt;/p&gt;
&lt;div class=&quot;pre-exploding&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;code code-highlighted&quot;&gt;
{
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;method&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;send&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;params&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;{
     &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;options&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;{
        &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;channel&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;{
           &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;vegetarians.bots&quot;&lt;/span&gt;
        &lt;/span&gt;}&lt;/span&gt;,
        &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;exploding_lifetime&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;1d&quot;&lt;/span&gt;&lt;/span&gt;,
        &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;message&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;{
           &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;body&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;smellbot has detected meat in the office foyer.&quot;&lt;/span&gt;
        &lt;/span&gt;}
     &lt;/span&gt;}
  &lt;/span&gt;}
&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can get more API examples with &lt;code&gt;keybase chat api --help&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;That's it!&lt;/h2&gt;
&lt;p&gt;Another step forward for Keybase. Cryptography for everyone.&lt;/p&gt;
&lt;p&gt;More stuff soon,&lt;br/&gt;💖 Keybase&lt;/p&gt;
&lt;center&gt;&lt;a class=&quot;btn btn-primary&quot; href=&quot;https://keybase.io/download&quot;&gt;INSTALL KEYBASE &lt;span&gt;🌈&lt;/span&gt;&lt;/a&gt;&lt;/center&gt;

&lt;div class=&quot;blog-faq&quot; readability=&quot;69.365299684543&quot;&gt;
&lt;h2 id=&quot;faq&quot;&gt;FAQ&lt;/h2&gt;
&lt;h3 id=&quot;are-there-docs-on-how-this-works-&quot;&gt;Are there docs on how this works?&lt;/h3&gt;
&lt;p&gt;Yes, here are the &lt;a href=&quot;https://keybase.io/docs/crypto/ephemeral&quot;&gt;crypto docs&lt;/a&gt;. And here's the Keybase &lt;a href=&quot;https://github.com/keybase/client&quot;&gt;source code&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;my-team-uses-telegram-and-i-m-scared-shitless-&quot;&gt;My team uses Telegram and I'm scared shitless.&lt;/h3&gt;
&lt;p&gt;Hugs&lt;/p&gt;
&lt;h3 id=&quot;what-s-the-point-if-someone-can-just-take-a-screenshot-&quot;&gt;What's the point, if someone can just take a screenshot?&lt;/h3&gt;
&lt;p&gt;I answered this on &lt;a href=&quot;https://news.ycombinator.com/item?id=17357992&quot;&gt;Hacker News&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;why-don-t-all-messages-have-forward-secrecy-&quot;&gt;Why don't all messages have forward secrecy?&lt;/h3&gt;
&lt;p&gt;We've &lt;a href=&quot;https://keybase.io/blog/keybase-chat#pfs&quot;&gt;blogged about this before&lt;/a&gt;. It's not the right answer for a mainstream chat replacement, because it forces dangerous behavior and/or makes you lose all your group's messages when you update devices.&lt;/p&gt;
&lt;p&gt;Still, it's up to you! Now you can have all the forward secrecy you want with Keybase.&lt;/p&gt;
&lt;h3 id=&quot;what-about-repudiation-&quot;&gt;What about repudiation?&lt;/h3&gt;
&lt;p&gt;Repudiation is launching in ~3 weeks.&lt;/p&gt;
&lt;p&gt;So yes, in chats up to 100 people, messages will be pairwise MAC'ed. Pairwise MAC'ing doesn't scale for mega-large community chats, so those messages are still signed &amp;amp; encrypted in the traditional sense. This seems like the best balance.&lt;/p&gt;
&lt;p&gt;Some have argued repudiation is a silly feature. After all, who, in the history of humanity, has ever &lt;em&gt;not&lt;/em&gt; gotten in trouble for something that leaked, &lt;strong&gt;just because it wasn't cryptographically signed&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Anyway, this is minimal overhead with some benefit, so we're doing it.&lt;/p&gt;
&lt;h3 id=&quot;does-the-timer-begin-when-the-message-is-sent-or-received-&quot;&gt;Does the timer begin when the message is sent or received?&lt;/h3&gt;
&lt;p&gt;Sent.&lt;/p&gt;
&lt;p&gt;This seems like the only sensible answer for group chats. And we can't have a different answer for 1-on-1 chats and group chats. That would confuse people. Not the kind of person who reads an FAQ such as yourself, of course.&lt;/p&gt;
&lt;p&gt;So our answer is simple: you set a timer and the message is gone after that time.&lt;/p&gt;
&lt;h3 id=&quot;i-have-nothing-to-hide&quot;&gt;I have nothing to hide&lt;/h3&gt;
&lt;p&gt;Because no one is trying to hurt you&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;&lt;a class=&quot;btn btn-primary&quot; href=&quot;https://keybase.io/download&quot;&gt;INSTALL KEYBASE &lt;span&gt;🌈&lt;/span&gt;&lt;/a&gt;&lt;/center&gt;
</description>
<pubDate>Wed, 20 Jun 2018 18:09:39 +0000</pubDate>
<dc:creator>aston</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://keybase.io/blog/keybase-exploding-messages</dc:identifier>
</item>
<item>
<title>MySQL High Availability at GitHub</title>
<link>https://githubengineering.com/mysql-high-availability-at-github/</link>
<guid isPermaLink="true" >https://githubengineering.com/mysql-high-availability-at-github/</guid>
<description>&lt;p&gt;GitHub uses MySQL as its main datastore for all things non-&lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;, and its availability is critical to GitHub’s operation. The site itself, GitHub’s API, authentication and more, all require database access. We run multiple MySQL clusters serving our different services and tasks. Our clusters use classic master-replicas setup, where a single node in a cluster (the &lt;em&gt;master&lt;/em&gt;) is able to accept writes. The rest of the cluster nodes (the &lt;em&gt;replicas&lt;/em&gt;) asynchronously replay changes from the master and serve our read traffic.&lt;/p&gt;
&lt;p&gt;The availability of master nodes is particularly critical. With no master, a cluster cannot accept writes: any writes that need to be persisted cannot be persisted. Any incoming changes such as commits, issues, user creation, reviews, new repositories, etc., would fail.&lt;/p&gt;
&lt;p&gt;To support writes we clearly need to have an available writer node, a master of a cluster. But just as important, we need to be able to identify, or &lt;em&gt;discover&lt;/em&gt;, that node.&lt;/p&gt;
&lt;p&gt;On a failure, say a master box crash scenario, we must ensure the existence of a new master, as well as be able to quickly advertise its identity. The time it takes to detect a failure, run the failover and advertise the new master’s identity makes up the total outage time.&lt;/p&gt;
&lt;p&gt;This post illustrates GitHub’s MySQL high availability and master service discovery solution, which allows us to reliably run a cross-data-center operation, be tolerant of data center isolation, and achieve short outage times on a failure.&lt;/p&gt;
&lt;h2 id=&quot;high-availability-objectives&quot;&gt;High availability objectives&lt;/h2&gt;
&lt;p&gt;The solution described in this post iterates on, and improves, previous high availability (HA) solutions implemented at GitHub. As we scale, our MySQL HA strategy must adapt to changes. We wish to have similar HA strategies for our MySQL and for other services within GitHub.&lt;/p&gt;
&lt;p&gt;When considering high availability and service discovery, some questions can guide your path into an appropriate solution. An incomplete list may include:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;How much outage time can you tolerate?&lt;/li&gt;
&lt;li&gt;How reliable is crash detection? Can you tolerate false positives (premature failovers)?&lt;/li&gt;
&lt;li&gt;How reliable is failover? Where can it fail?&lt;/li&gt;
&lt;li&gt;How well does the solution work cross-data-center? On low and high latency networks?&lt;/li&gt;
&lt;li&gt;Will the solution tolerate a complete data center (DC) failure or network isolation?&lt;/li&gt;
&lt;li&gt;What mechanism, if any, prevents or mitigates split-brain scenarios (two servers claiming to be the master of a given cluster, both independently and unknowingly to each other accepting writes)?&lt;/li&gt;
&lt;li&gt;Can you afford data loss? To what extent?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To illustrate some of the above, let’s first consider our previous HA iteration, and why we changed it.&lt;/p&gt;
&lt;h2 id=&quot;moving-away-from-vip-and-dns-based-discovery&quot;&gt;Moving away from VIP and DNS based discovery&lt;/h2&gt;
&lt;p&gt;In our previous iteration, we used:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://githubengineering.com/orchestrator-github/&quot;&gt;orchestrator&lt;/a&gt; for detection and failover, and&lt;/li&gt;
&lt;li&gt;VIP and DNS for master discovery.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In that iteration, clients discovered the writer node by using a name, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql-writer-1.github.net&lt;/code&gt;. The name resolved to a Virtual IP address (VIP) which the master host would acquire.&lt;/p&gt;
&lt;p&gt;Thus, on a normal day, clients would just resolve the name, connect to the resolved IP, and find the master listening on the other side.&lt;/p&gt;
&lt;p&gt;Consider this replication topology, spanning three different data centers:&lt;/p&gt;
&lt;div&gt;&lt;img alt=&quot;sample 3 data center topology&quot; src=&quot;https://githubengineering.com/images/mysql-high-availability-at-github/sample-3dc-topology.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;In the event of a master failure, a new server, one of the replicas, must be promoted in its place.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator&lt;/code&gt; will detect a failure, promote a new master, and then act to reassign the name/VIP. Clients don’t actually know the identity of the master: all they have is a &lt;em&gt;name&lt;/em&gt;, and that name must now resolve to the new master. However, consider:&lt;/p&gt;
&lt;p&gt;VIPs are cooperative: they are claimed and owned by the database servers themselves. To acquire or release a VIP, a server must send an ARP request. The server owning the VIP must first release it before the newly promoted master acquires it. This has some undesired effects:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;An orderly failover operation will first contact the dead master and request that it release the VIP, and then contact the newly promoted master and request that it grab the VIP. What if the old master cannot be reached or refuses to release the VIP? Given that there’s a failure scenario on that server in the first place, it is not unlikely that it would fail to respond in a timely manner, or indeed respond at all.
&lt;ul&gt;&lt;li&gt;We can end up with a split-brain: two hosts claiming to have the same VIP. Different clients may connect to either of those servers, depending on the shortest network path.&lt;/li&gt;
&lt;li&gt;The source of truth here depends on the cooperation of two independent servers, and this setup is unreliable.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Even if the old master does cooperate, the workflow wastes precious time: the switch to the new master waits while we contact the old master.&lt;/li&gt;
&lt;li&gt;And even as the VIP changes, existing client connections are not guaranteed to disconnect from the old server, and we may still experience a split-brain.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In parts of our setup VIPs are bound by physical location. They are owned by a switch or a router. Thus, we can only reassign the VIPs onto co-located servers. In particular, in some cases we cannot assign the VIP to a server promoted in a different data center, and must make a DNS change.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;DNS changes take longer to propagate. Clients cache DNS names for a preconfigured time. A cross-DC failover implies more outage time: it will take more time to make all clients aware of the identity of the new master.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;These limitations alone were enough to push us in search of a new solution, but for even more consideration were:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Masters were self-injecting themselves with heartbeats via the &lt;code class=&quot;highlighter-rouge&quot;&gt;pt-heartbeat&lt;/code&gt; service, for the purpose of &lt;a href=&quot;https://githubengineering.com/mitigating-replication-lag-and-reducing-read-load-with-freno/&quot;&gt;lag measurement and throttling control&lt;/a&gt;. The service had to be kicked off on the newly promoted master. If possible, the service would be shut down on the old master.&lt;/li&gt;
&lt;li&gt;Likewise, &lt;a href=&quot;https://github.com/github/orchestrator/blob/master/docs/pseudo-gtid.md&quot;&gt;Pseudo-GTID&lt;/a&gt; injection was self-managed by the masters. It would need to kick off on the new master, and preferably stop on the old master.&lt;/li&gt;
&lt;li&gt;The new master was set as writable. The old master was to be set as &lt;code class=&quot;highlighter-rouge&quot;&gt;read_only&lt;/code&gt;, if possible.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;These extra steps were a contributing factor to the total outage time and introduced their own failures and friction.&lt;/p&gt;
&lt;p&gt;The solution worked, and GitHub has had successful MySQL failovers that went well under the radar, but we wanted our HA to improve on the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Be data center agnostic.&lt;/li&gt;
&lt;li&gt;Be tolerant of data center failure.&lt;/li&gt;
&lt;li&gt;Remove unreliable cooperative workflows.&lt;/li&gt;
&lt;li&gt;Reduce total outage time.&lt;/li&gt;
&lt;li&gt;As much as possible, have lossless failovers.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;githubs-ha-solution-orchestrator-consul-glb&quot;&gt;GitHub’s HA solution: orchestrator, Consul, GLB&lt;/h2&gt;
&lt;p&gt;Our new strategy, along with collateral improvements, solves or mitigates much of the concerns above. In today’s HA setup, we have:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/github/orchestrator&quot;&gt;orchestrator&lt;/a&gt; to run detection and failovers. We use a cross-DC &lt;a href=&quot;https://github.com/github/orchestrator/blob/master/docs/raft.md&quot;&gt;orchestrator/raft&lt;/a&gt; setup as depicted below.&lt;/li&gt;
&lt;li&gt;Hashicorp’s &lt;a href=&quot;https://www.consul.io/&quot;&gt;Consul&lt;/a&gt; for service discovery.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://githubengineering.com/introducing-glb/&quot;&gt;GLB/HAProxy&lt;/a&gt; as a proxy layer between clients and writer nodes.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;anycast&lt;/code&gt; for network routing.&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img alt=&quot;MySQL HA solution at GitHub&quot; src=&quot;https://githubengineering.com/images/mysql-high-availability-at-github/mysql-ha-solution-at-github.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;The new setup removes VIP and DNS changes altogether. And while we introduce more components, we are able to decouple the components and simplify the task, as well as be able to utilize solid and stable solutions. A breakdown follows.&lt;/p&gt;
&lt;h3 id=&quot;a-normal-flow&quot;&gt;A normal flow&lt;/h3&gt;
&lt;p&gt;On a normal day the apps connect to the write nodes through GLB/HAProxy.&lt;/p&gt;
&lt;p&gt;The apps are never aware of the master’s identity. As before, they use a name. For example, the master for &lt;code class=&quot;highlighter-rouge&quot;&gt;cluster1&lt;/code&gt; would be &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql-writer-1.github.net&lt;/code&gt;. In our current setup, however, this name gets resolved to an &lt;a href=&quot;https://en.wikipedia.org/wiki/Anycast&quot;&gt;anycast&lt;/a&gt; IP.&lt;/p&gt;
&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;anycast&lt;/code&gt;, the name resolves to the same IP everywhere, but traffic is routed differently based on a client’s location. In particular, in each of our data centers we have GLB, our highly available load balancer, deployed on multiple boxes. Traffic to &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql-writer-1.github.net&lt;/code&gt; always routes to the local data center’s GLB cluster. Thus, all clients are served by local proxies.&lt;/p&gt;
&lt;p&gt;We run GLB on top of &lt;a href=&quot;https://www.haproxy.com&quot;&gt;HAProxy&lt;/a&gt;. Our HAProxy has &lt;em&gt;writer pools&lt;/em&gt;: one pool per MySQL cluster, where each pool has exactly one backend server: the cluster’s &lt;em&gt;master&lt;/em&gt;. All GLB/HAProxy boxes in all DCs have the exact same pools, and they all indicate the exact same backend servers in these pools. Thus, if an app wishes to write to &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql-writer-1.github.net&lt;/code&gt;, it matters not which GLB server it connects to. It will always get routed to the actual &lt;code class=&quot;highlighter-rouge&quot;&gt;cluster1&lt;/code&gt; master node.&lt;/p&gt;
&lt;p&gt;As far as the apps are concerned, discovery ends at GLB, and there is never a need for re-discovery. It’s all on GLB to route the traffic to the correct destination.&lt;/p&gt;
&lt;p&gt;How does GLB know which servers to list as backends, and how do we propagate changes to GLB?&lt;/p&gt;
&lt;h3 id=&quot;discovery-via-consul&quot;&gt;Discovery via Consul&lt;/h3&gt;
&lt;p&gt;Consul is well known as a service discovery solution, and also offers DNS services. In our solution, however, we utilize it as a highly available key-value (KV) store.&lt;/p&gt;
&lt;p&gt;Within Consul’s KV store we write the identities of cluster masters. For each cluster, there’s a set of KV entries indicating the cluster’s master &lt;code class=&quot;highlighter-rouge&quot;&gt;fqdn&lt;/code&gt;, port, ipv4, ipv6.&lt;/p&gt;
&lt;p&gt;Each GLB/HAProxy node runs &lt;a href=&quot;https://github.com/hashicorp/consul-template&quot;&gt;consul-template&lt;/a&gt;: a service that listens on changes to Consul data (in our case: changes to clusters masters data). &lt;code class=&quot;highlighter-rouge&quot;&gt;consul-template&lt;/code&gt; produces a valid config file and is able to reload HAProxy upon changes to the config.&lt;/p&gt;
&lt;p&gt;Thus, a change in Consul to a master’s identity is observed by each GLB/HAProxy box, which then reconfigures itself, sets the new master as the single entity in a cluster’s backend pool, and reloads to reflect those changes.&lt;/p&gt;
&lt;p&gt;At GitHub we have a Consul setup in each data center, and each setup is highly available. However, these setups are independent of each other. They do not replicate between each other and do not share any data.&lt;/p&gt;
&lt;p&gt;How does Consul get told of changes, and how is the information distributed cross-DC?&lt;/p&gt;
&lt;h3 id=&quot;orchestratorraft&quot;&gt;orchestrator/raft&lt;/h3&gt;
&lt;p&gt;We run an &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator/raft&lt;/code&gt; setup: &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator&lt;/code&gt; nodes communicate to each other via &lt;a href=&quot;http://raft.github.io/&quot;&gt;raft&lt;/a&gt; consensus. We have one or two &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator&lt;/code&gt; nodes per data center.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator&lt;/code&gt; is charged with failure detection, with MySQL failover, and with communicating the change of master to Consul. Failover is operated by the single &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator/raft&lt;/code&gt; leader node, but the &lt;em&gt;change&lt;/em&gt;, the news that a cluster now has a new master, is propagated to all &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator&lt;/code&gt; nodes through the &lt;code class=&quot;highlighter-rouge&quot;&gt;raft&lt;/code&gt; mechanism.&lt;/p&gt;
&lt;p&gt;As &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator&lt;/code&gt; nodes receive the news of a master change, they each communicate to their local Consul setups: they each invoke a KV write. DCs with more than one &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator&lt;/code&gt; representative will have multiple (identical) writes to Consul.&lt;/p&gt;
&lt;h3 id=&quot;putting-the-flow-together&quot;&gt;Putting the flow together&lt;/h3&gt;
&lt;p&gt;In a master crash scenario:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator&lt;/code&gt; nodes detect failures.&lt;/li&gt;
&lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator/raft&lt;/code&gt; leader kicks off a recovery. A new master gets promoted.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator/raft&lt;/code&gt; advertises the master change to all &lt;code class=&quot;highlighter-rouge&quot;&gt;raft&lt;/code&gt; cluster nodes.&lt;/li&gt;
&lt;li&gt;Each &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator/raft&lt;/code&gt; member receives a leader change notification. They each update the local Consul’s KV store with the identity of the new master.&lt;/li&gt;
&lt;li&gt;Each GLB/HAProxy has &lt;code class=&quot;highlighter-rouge&quot;&gt;consul-template&lt;/code&gt; running, which observes the change in Consul’s KV store, and reconfigures and reloads HAProxy.&lt;/li&gt;
&lt;li&gt;Client traffic gets redirected to the new master.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There is a clear ownership of responsibilities for each component, and the entire design is both decoupled as well as simplified. &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator&lt;/code&gt; doesn’t know about the load balancers. Consul doesn’t need to know where the information came from. Proxies only care about Consul. Clients only care about the proxy.&lt;/p&gt;
&lt;p&gt;Furthermore:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;There are no DNS changes to propagate.&lt;/li&gt;
&lt;li&gt;There is no TTL.&lt;/li&gt;
&lt;li&gt;The flow does not need the dead master’s cooperation. It is largely ignored.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;additional-details&quot;&gt;Additional details&lt;/h3&gt;
&lt;p&gt;To further secure the flow, we also have the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;HAProxy is configured with a very short &lt;code class=&quot;highlighter-rouge&quot;&gt;hard-stop-after&lt;/code&gt;. When it reloads with a new backend server in a writer-pool, it automatically terminates any existing connections to the old master.
&lt;ul&gt;&lt;li&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;hard-stop-after&lt;/code&gt; we don’t even require cooperation from the clients, and this mitigates a split-brain scenario. It’s noteworthy that this isn’t hermetic, and &lt;em&gt;some time&lt;/em&gt; passes before we kill old connections. But there’s then a point in time after which we’re comfortable and expect no nasty surprises.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;We do not strictly require Consul to be available at all times. In fact, we only need it to be available at failover time. If Consul happens to be down, GLB continues to operate with the last known values and makes no drastic moves.&lt;/li&gt;
&lt;li&gt;GLB is set to validate the identity of the newly promoted master. Similarly to our &lt;a href=&quot;https://githubengineering.com/context-aware-mysql-pools-via-haproxy/&quot;&gt;context-aware MySQL pools&lt;/a&gt;, a check is made on the backend server, to confirm it is indeed a writer node. If we happen to delete the master’s identity in Consul, no problem; the empty entry is ignored. If we mistakenly write the name of a non-master server in Consul, no problem; GLB will refuse to update it and keep running with last known state.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We further tackle concerns and pursue HA objectives in the following sections.&lt;/p&gt;
&lt;h2 id=&quot;orchestratorraft-failure-detection&quot;&gt;orchestrator/raft failure detection&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator&lt;/code&gt; uses a &lt;a href=&quot;https://github.com/github/orchestrator/blob/master/docs/failure-detection.md&quot;&gt;holistic approach&lt;/a&gt; to detecting failure, and as such it is very reliable. We do not observe false positives: we do not have premature failovers, and thus do not suffer unnecessary outage time.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator/raft&lt;/code&gt; further tackles the case for a complete DC network isolation (aka DC fencing). A DC network isolation can cause confusion: servers within that DC can talk to each other. Is it &lt;em&gt;they&lt;/em&gt; that are network isolated from other DCs, or is it &lt;em&gt;other DCs&lt;/em&gt; that are being network isolated?&lt;/p&gt;
&lt;p&gt;In an &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator/raft&lt;/code&gt; setup, the &lt;code class=&quot;highlighter-rouge&quot;&gt;raft&lt;/code&gt; leader node is the one to run the failovers. A leader is a node that gets the support of the majority of the group (quorum). Our &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator&lt;/code&gt; node deployment is such that no single data center makes a majority, and any &lt;code class=&quot;highlighter-rouge&quot;&gt;n-1&lt;/code&gt; DCs do.&lt;/p&gt;
&lt;p&gt;In the event of a complete DC network isolation, the &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator&lt;/code&gt; nodes in that DC get disconnected from their peers in other DCs. As a result, the &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator&lt;/code&gt; nodes in the isolated DC cannot be the leaders of the &lt;code class=&quot;highlighter-rouge&quot;&gt;raft&lt;/code&gt; cluster. If any such node did happen to be the leader, it steps down. A new leader will be assigned from any of the other DCs. That leader will have the support of all the other DCs, which are capable of communicating between themselves.&lt;/p&gt;
&lt;p&gt;Thus, the &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator&lt;/code&gt; node that calls the shots will be one that is outside the network isolated data center. Should there be a master in an isolated DC, &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator&lt;/code&gt; will initiate the failover to replace it with a server in one of the available DCs. We mitigate DC isolation by delegating the decision making to the quorum in the non-isolated DCs.&lt;/p&gt;
&lt;h2 id=&quot;quicker-advertisement&quot;&gt;Quicker advertisement&lt;/h2&gt;
&lt;p&gt;Total outage time can further be reduced by advertising the master change sooner. How can that be achieved?&lt;/p&gt;
&lt;p&gt;When &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator&lt;/code&gt; begins a failover, it observes the fleet of servers available to be promoted. Understanding replication rules and abiding by hints and limitations, it is able to make an educated decision on the best course of action.&lt;/p&gt;
&lt;p&gt;It may recognize that a server available for promotion is also an &lt;em&gt;ideal candidate&lt;/em&gt;, such that:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;There is nothing to prevent the promotion of the server (and potentially the user has hinted that such server is preferred for promotion), and&lt;/li&gt;
&lt;li&gt;The server is expected to be able to take all of its siblings as replicas.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In such a case &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator&lt;/code&gt; proceeds to first set the server as writable, and immediately advertises the promotion of the server (writes to Consul KV in our case), even while asynchronously beginning to fix the replication tree, an operation that will typically take a few more seconds.&lt;/p&gt;
&lt;p&gt;It is likely that by the time our GLB servers have been fully reloaded, the replication tree is already intact, but it is not strictly required. The server is good to receive writes!&lt;/p&gt;
&lt;h2 id=&quot;semi-synchronous-replication&quot;&gt;Semi-synchronous replication&lt;/h2&gt;
&lt;p&gt;In MySQL’s &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/replication-semisync.html&quot;&gt;semi-synchronous replication&lt;/a&gt; a master does not acknowledge a transaction commit until the change is known to have shipped to one or more replicas. It provides a way to achieve lossless failovers: any change applied on the master is either applied or waiting to be applied on one of the replicas.&lt;/p&gt;
&lt;p&gt;Consistency comes with a cost: a risk to availability. Should no replica acknowledge receipt of changes, the master will block and writes will stall. Fortunately, there is a timeout configuration, after which the master can revert back to asynchronous replication mode, making writes available again.&lt;/p&gt;
&lt;p&gt;We have set our timeout at a reasonably low value: &lt;code class=&quot;highlighter-rouge&quot;&gt;500ms&lt;/code&gt;. It is more than enough to ship changes from the master to local DC replicas, and typically also to remote DCs. With this timeout we observe perfect semi-sync behavior (no fallback to asynchronous replication), as well as feel comfortable with a very short blocking period in case of acknowledgement failure.&lt;/p&gt;
&lt;p&gt;We enable semi-sync on local DC replicas, and in the event of a master’s death, we expect (though do not strictly enforce) a lossless failover. Lossless failover on a complete DC failure is costly and we do not expect it.&lt;/p&gt;
&lt;p&gt;While experimenting with semi-sync timeout, we also observed a behavior that plays to our advantage: we are able to influence the identity of the &lt;em&gt;ideal candidate&lt;/em&gt; in the event of a master failure. By enabling semi-sync on designated servers, and by marking them as &lt;em&gt;candidates&lt;/em&gt;, we are able to reduce total outage time by &lt;em&gt;affecting&lt;/em&gt; the outcome of a failure. In our &lt;a href=&quot;https://githubengineering.com/mysql-testing-automation-at-github/&quot;&gt;experiments&lt;/a&gt; we observe that we typically end up with the &lt;em&gt;ideal candidates&lt;/em&gt;, and hence run quick advertisements.&lt;/p&gt;
&lt;h2 id=&quot;heartbeat-injection&quot;&gt;Heartbeat injection&lt;/h2&gt;
&lt;p&gt;Instead of managing the startup/shutdown of the &lt;code class=&quot;highlighter-rouge&quot;&gt;pt-heartbeat&lt;/code&gt; service on promoted/demoted masters, we opted to run it everywhere at all times. This required some &lt;a href=&quot;https://github.com/percona/percona-toolkit/pull/302/files?w=1&quot;&gt;patching&lt;/a&gt; so as to make &lt;code class=&quot;highlighter-rouge&quot;&gt;pt-heartbeat&lt;/code&gt; comfortable with servers either changing their &lt;code class=&quot;highlighter-rouge&quot;&gt;read_only&lt;/code&gt; state back and forth or completely crashing.&lt;/p&gt;
&lt;p&gt;In our current setup &lt;code class=&quot;highlighter-rouge&quot;&gt;pt-heartbeat&lt;/code&gt; services run on masters and on replicas. On masters, they generate the heartbeat events. On replicas, they identify that the servers are &lt;code class=&quot;highlighter-rouge&quot;&gt;read-only&lt;/code&gt; and routinely recheck their status. As soon as a server is promoted as master, &lt;code class=&quot;highlighter-rouge&quot;&gt;pt-heartbeat&lt;/code&gt; on that server identifies the server as writable and begins injecting heartbeat events.&lt;/p&gt;
&lt;h2 id=&quot;orchestrator-ownership-delegation&quot;&gt;orchestrator ownership delegation&lt;/h2&gt;
&lt;p&gt;We further delegated to orchestrator:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Pseudo-GTID injection,&lt;/li&gt;
&lt;li&gt;Setting the promoted master as writable, clearing its replication state, and&lt;/li&gt;
&lt;li&gt;Setting the old master as &lt;code class=&quot;highlighter-rouge&quot;&gt;read_only&lt;/code&gt;, if possible.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;On all things new-master, this reduces friction. A master that is just being promoted is clearly expected to be alive and accessible, or else we would not promote it. It makes sense, then, to let &lt;code class=&quot;highlighter-rouge&quot;&gt;orchestrator&lt;/code&gt; apply changes directly to the promoted master.&lt;/p&gt;
&lt;h2 id=&quot;limitations-and-drawbacks&quot;&gt;Limitations and drawbacks&lt;/h2&gt;
&lt;p&gt;The proxy layer makes the apps unaware of the master’s identity, but it also masks the apps’ identities from the master. All the master sees are connections coming from the proxy layer, and we lose information about the actual source of the connection.&lt;/p&gt;
&lt;p&gt;As distributed systems go, we are still left with unhandled scenarios.&lt;/p&gt;
&lt;p&gt;Notably, on a data center isolation scenario, and assuming a master is in the isolated DC, apps in that DC are still able to write to the master. This may result in state inconsistency once network is brought back up. We are working to mitigate this split-brain by implementing a reliable &lt;a href=&quot;https://en.wikipedia.org/wiki/STONITH&quot;&gt;STONITH&lt;/a&gt; from within the very isolated DC. As before, &lt;em&gt;some time&lt;/em&gt; will pass before bringing down the master, and there could be a short period of split-brain. The operational cost of avoiding split-brains altogether is very high.&lt;/p&gt;
&lt;p&gt;More scenarios exist: the outage of Consul at the time of the failover; partial DC isolation; others. We understand that with distributed systems of this nature it is impossible to close all of the loopholes, so we focus on the most important cases.&lt;/p&gt;
&lt;h2 id=&quot;the-results&quot;&gt;The results&lt;/h2&gt;
&lt;p&gt;Our orchestrator/GLB/Consul setup provides us with:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Reliable failure detection,&lt;/li&gt;
&lt;li&gt;Data center agnostic failovers,&lt;/li&gt;
&lt;li&gt;Typically lossless failovers,&lt;/li&gt;
&lt;li&gt;Data center network isolation support,&lt;/li&gt;
&lt;li&gt;Split-brain mitigation (more in the works),&lt;/li&gt;
&lt;li&gt;No cooperation dependency,&lt;/li&gt;
&lt;li&gt;Between &lt;code class=&quot;highlighter-rouge&quot;&gt;10 and 13 seconds&lt;/code&gt; of total outage time in most cases.
&lt;ul&gt;&lt;li&gt;We see up to &lt;code class=&quot;highlighter-rouge&quot;&gt;20 seconds&lt;/code&gt; of total outage time in less frequent cases, and up to &lt;code class=&quot;highlighter-rouge&quot;&gt;25 seconds&lt;/code&gt; in extreme cases.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The orchestration/proxy/service-discovery paradigm uses well known and trusted components in a decoupled architecture, which makes it easier to deploy, operate and observe, and where each component can independently scale up or down. We continue to seek improvements as we continuously test our setup.&lt;/p&gt;
</description>
<pubDate>Wed, 20 Jun 2018 17:14:17 +0000</pubDate>
<dc:creator>samlambert</dc:creator>
<og:title>MySQL High Availability at GitHub</og:title>
<og:description>GitHub uses MySQL as its main datastore for all things non-git, and its availability is critical to GitHub’s operation. The site itself, GitHub’s API, authentication and more, all require database access. We run multiple MySQL clusters serving our different services and tasks. Our clusters use classic master-replicas setup, where a single node in a cluster (the master) is able to accept writes. The rest of the cluster nodes (the replicas) asynchronously replay changes from the master and serve our read traffic.</og:description>
<og:url>https://githubengineering.com/mysql-high-availability-at-github/</og:url>
<og:type>article</og:type>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://githubengineering.com/mysql-high-availability-at-github/</dc:identifier>
</item>
<item>
<title>Erlang OTP 21.0 is Released</title>
<link>http://www.erlang.org/news/123</link>
<guid isPermaLink="true" >http://www.erlang.org/news/123</guid>
<description>&lt;p&gt;Erlang/OTP 21 is a new major release with new features, improvements as well as incompatibilities.&lt;/p&gt;
&lt;h2&gt;Potential Incompatibilities&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;All Corba applications are now moved from the OTP repository&lt;/li&gt;
&lt;li&gt;A new Corba repository will be created https://github.com/erlang&lt;/li&gt;
&lt;li&gt;New applications ftp and tftp, moved from inets&lt;/li&gt;
&lt;li&gt;ssl no longer supports 3_DES cipher suites or RSA-key exchange cipher suites by default&lt;/li&gt;
&lt;li&gt;erlang:monitor on a primitive node (erl_interface, jinterface, etc) will no longer fail with badarg exception. Instead a monitor will be created, but it will only supervise the connection to the node.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt; Highlights&lt;/h2&gt;
&lt;h3&gt; Erts:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Enhanced IO scalability&lt;/li&gt;
&lt;li&gt;Support for usage of distribution controller processes for alternative transports, routing etc&lt;/li&gt;
&lt;li&gt;compact instructions on 64bit systems for code below 4GB 20% less memory for loaded code&lt;/li&gt;
&lt;li&gt;Rewrite of the efile-driver with NIFs and &quot;Dirty schedulers&quot; resulting in faster file operations&lt;/li&gt;
&lt;li&gt;non-smp VM removed&lt;/li&gt;
&lt;li&gt;link and monitor optimized for scalability&lt;/li&gt;
&lt;li&gt;os:getenv/putenv now work on thread-safe emulation. No longer in sync with libc getenv(3). Manual synchronization will be needed.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Compiler:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Misc compiler optimizations including contributions from the Elixir team resulting in 10% improvements in benchmarks&lt;/li&gt;
&lt;li&gt;&quot;Tuple calls&quot; have been removed from the run-time system.&lt;/li&gt;
&lt;li&gt;Code such as &lt;code&gt;f({ok, Val}) -&amp;gt; {ok, Val}&lt;/code&gt; is now automatically rewritten to &lt;code&gt;f({ok, Val} = Tuple) -&amp;gt; Tuple.&lt;/code&gt; this reduces code size, execution time, and removed GC pressure.&lt;/li&gt;
&lt;li&gt;More information in stacktrace from a number of operators&lt;/li&gt;
&lt;li&gt;&lt;code&gt;erlang:get_stacktrace/0&lt;/code&gt; deprecated to be replaced with &lt;code&gt;try ... catch C:R:Stacktrace -&amp;gt; ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Creation of small maps with literal keys optimized.&lt;/li&gt;
&lt;li&gt;A new predifined macro &lt;code&gt;`OTP_RELEASE`&lt;/code&gt; and preprocessor directives &lt;code&gt;`-if&lt;/code&gt;` and &lt;code&gt;`-elif`&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Security:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;DTLS is now supported in the SSL application&lt;/li&gt;
&lt;li&gt;Enhanced support for distribution over TLS&lt;/li&gt;
&lt;li&gt;&quot;unsecure&quot; ciphers removed from defaults in SSL and SSH.&lt;/li&gt;
&lt;li&gt;A new option value defined to facilitate implementing exec servers. Old option kept for compatibility, but now gives errors on stderror.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Standard libraries:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;New API for logging, logger&lt;/li&gt;
&lt;li&gt;New uri_string module for parsing URIs according to &quot;The standard&quot;&lt;/li&gt;
&lt;li&gt;New function lists:search(list,fun/1) -&amp;gt; {ok, Value} | false&lt;/li&gt;
&lt;li&gt;Changed default behaviour of .erlang loading. escript, erlc, dialyzer and typer no longer load an .erlang at all.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For more details see&lt;br /&gt;&lt;a href=&quot;http://erlang.org/download/otp_src_21.0.readme&quot;&gt;http://erlang.org/download/otp_src_21.0.readme&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pre built versions for Windows can be fetched here:&lt;br /&gt;&lt;a href=&quot;http://erlang.org/download/otp_win32_21.0.exe&quot;&gt;http://erlang.org/download/otp_win32_21.0.exe&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://erlang.org/download/otp_win64_21.0.exe&quot;&gt;http://erlang.org/download/otp_win64_21.0.exe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Online documentation can be browsed here:&lt;br /&gt;&lt;a href=&quot;http://erlang.org/documentation/doc-10.0/doc&quot;&gt;http://erlang.org/documentation/doc-10.0/doc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Erlang/OTP source can also be found at GitHub on the official Erlang repository, Here: &lt;a href=&quot;https://github.com/erlang/otp/releases/tag/OTP-21.0&quot;&gt;OTP-21.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for all your contributions!&lt;/p&gt;
</description>
<pubDate>Wed, 20 Jun 2018 17:02:40 +0000</pubDate>
<dc:creator>out_of_protocol</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.erlang.org/news/123</dc:identifier>
</item>
<item>
<title>Tesla sues ex-employee for hacking, theft, and leaking to the press</title>
<link>https://www.theverge.com/2018/6/20/17484030/tesla-sues-employee-hacking-theft-leaking</link>
<guid isPermaLink="true" >https://www.theverge.com/2018/6/20/17484030/tesla-sues-employee-hacking-theft-leaking</guid>
<description>&lt;p id=&quot;Yr7ffj&quot;&gt;Tesla filed a lawsuit on Wednesday alleging that a former employee hacked the company’s system and transferred “gigabytes” of data to unnamed third parties. The lawsuit may align with Tesla CEO Elon Musk’s &lt;a href=&quot;https://www.theverge.com/2018/6/18/17476854/tesla-sabotage-elon-musk-email&quot;&gt;recent claim of “sabotage”&lt;/a&gt; by an ex-worker.&lt;/p&gt;
&lt;p id=&quot;vOjGf6&quot;&gt;Tesla’s lawsuit names Martin Tripp, a former process technician at the company’s Gigafactory in Nevada, as the defendant. Tesla claims that Tripp “unlawfully hacked the company’s confidential and trade secret information and transferred that information to third parties.” To do so, Tripp placed “hacking software” in the computers of three individual employees to routinely export confidential data, the company says.&lt;/p&gt;
&lt;div class=&quot;c-float-right&quot;&gt;
&lt;aside id=&quot;47YkpK&quot;&gt;&lt;q&gt;“unlawfully hacked the company’s confidential and trade secret information”&lt;/q&gt;&lt;/aside&gt;&lt;/div&gt;
&lt;p id=&quot;tlXQ18&quot;&gt;Tesla says that Tripp has already admitted to hacking its manufacturing operating system, and the company accuses him of making false statements to the media about the stolen information. The suit, which was filed in federal court in Nevada, was &lt;a href=&quot;https://www.cnbc.com/2018/06/20/tesla-sues-former-employee-for-allegedly-stealing-gigabytes-of-data-making-false-claims-to-media.html&quot;&gt;first reported by CNBC&lt;/a&gt;.&lt;/p&gt;
&lt;p id=&quot;pX8rcf&quot;&gt;Tesla claims that Tripp was the source of a news report about punctured battery cells at Tesla’s factory.&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p id=&quot;n4uZJ7&quot;&gt;For example, Tripp claimed that punctured battery cells had been used in certain Model 3 vehicles even though no punctured cells were ever used in vehicles, batteries or otherwise. Tripp also vastly exaggerated the true amount and value of “scrap” material that Tesla generated during the manufacturing process, and falsely claimed that Tesla was delayed in bringing new manufacturing equipment online.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p id=&quot;FBGRXZ&quot;&gt;The lawsuit doesn’t specify which media outlet Tripp leaked to, but earlier this month, &lt;a href=&quot;http://uk.businessinsider.com/tesla-model-3-scrap-waste-high-gigafactory-2018-5?r=US&amp;amp;IR=T&quot;&gt;&lt;em&gt;Business Insider&lt;/em&gt; ran a story&lt;/a&gt; about scrap metal waste and punctured battery cells at Tesla’s factory, citing documents and former employees as sources.&lt;/p&gt;
&lt;p id=&quot;GlaKUr&quot;&gt;Musk &lt;a href=&quot;https://www.theverge.com/2018/6/18/17476854/tesla-sabotage-elon-musk-email&quot;&gt;first alluded&lt;/a&gt; to the incidents described in the lawsuit last week in an email to Tesla employees in which he claimed Tesla was being sabotaged by an ex-employee. The employee was allegedly found to have made “direct code changes” to Tesla’s manufacturing system and sent “large amounts of highly sensitive” data to third parties.&lt;/p&gt;
&lt;p id=&quot;9HlBot&quot;&gt;Musk also questioned whether “Wall Street short-sellers,” “oil &amp;amp; gas companies,” or “the multitude of big gas/diesel car company competitors” may have been involved. “If they’re willing to cheat so much about emissions, maybe they’re willing to cheat in other ways?” he wrote.&lt;/p&gt;
&lt;p id=&quot;qWBrPz&quot;&gt;Tesla has struggled to ramp up production of its Model 3 vehicle, encountering bottlenecks in its factory and supply chain. The company is scrambling to produce 5,000 Model 3s a week ahead of its third-quarter earnings, as it attempts to evolve from a niche luxury electric car company into a mass-market player.&lt;/p&gt;
&lt;p id=&quot;6tsm70&quot;&gt;A lawyer for Tripp could not be immediately reached, and a Tesla spokesperson declined to comment.&lt;/p&gt;

</description>
<pubDate>Wed, 20 Jun 2018 16:39:55 +0000</pubDate>
<dc:creator>salmonellaeater</dc:creator>
<og:description>Tesla filed a lawsuit on Wednesday alleging that a former employee hacked the company’s system and transferred &quot;gigabytes&quot; of data to unnamed third parties.</og:description>
<og:image>https://cdn.vox-cdn.com/thumbor/QOXVhSBb4175xx8o0uvdkZ4tAgA=/0x146:2040x1214/fit-in/1200x630/cdn.vox-cdn.com/uploads/chorus_asset/file/11423503/acastro_180524_1777_tesla_0001.jpg</og:image>
<og:title>Tesla sues ex-employee for hacking, theft, and leaking to the press</og:title>
<og:type>article</og:type>
<og:url>https://www.theverge.com/2018/6/20/17484030/tesla-sues-employee-hacking-theft-leaking</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theverge.com/2018/6/20/17484030/tesla-sues-employee-hacking-theft-leaking</dc:identifier>
</item>
</channel>
</rss>