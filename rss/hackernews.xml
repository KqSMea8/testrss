<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Amazon won&amp;#039;t sell you a Chromecast, but they will sell a counterfeit</title>
<link>https://www.amazon.com/Display-Wishpower-Receiver-Miracast-AirMirror/dp/B077978NRN/</link>
<guid isPermaLink="true" >https://www.amazon.com/Display-Wishpower-Receiver-Miracast-AirMirror/dp/B077978NRN/</guid>
<description>&lt;p&gt;Fulfillment by Amazon (FBA) is a service we offer sellers that lets them store their products in Amazon's fulfillment centers, and we directly pack, ship, and provide customer service for these products. Something we hope you'll especially enjoy: &lt;em&gt;FBA items qualify for FREE Shipping and Amazon Prime.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you're a seller, Fulfillment by Amazon can help you increase your sales. We invite you to &lt;a class=&quot;a-link-normal&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://www.amazon.com/gp/seller/fba/fulfillment-by-amazon.html?ie=UTF8&amp;amp;ld=AZFBADP&amp;amp;ref=dp_fba_pop&quot;&gt;learn more about Fulfillment by Amazon&lt;/a&gt; .&lt;/p&gt;
</description>
<pubDate>Sat, 03 Mar 2018 07:40:16 +0000</pubDate>
<dc:creator>bb88</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.amazon.com/Display-Wishpower-Receiver-Miracast-AirMirror/dp/B077978NRN/</dc:identifier>
</item>
<item>
<title>WebAssembly architecture for Go</title>
<link>https://docs.google.com/document/d/131vjr4DH6JFnb-blm_uRdaC0_Nv3OUwjEY5qVCxCup4/preview#heading=h.mjo1bish3xni</link>
<guid isPermaLink="true" >https://docs.google.com/document/d/131vjr4DH6JFnb-blm_uRdaC0_Nv3OUwjEY5qVCxCup4/preview#heading=h.mjo1bish3xni</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;&lt;meta property=&quot;og:title&quot; content=&quot;WebAssembly architecture for Go&quot; /&gt;&lt;meta property=&quot;og:type&quot; content=&quot;article&quot; /&gt;&lt;meta property=&quot;og:site_name&quot; content=&quot;Google Docs&quot; /&gt;&lt;meta property=&quot;og:url&quot; content=&quot;https://docs.google.com/document/d/131vjr4DH6JFnb-blm_uRdaC0_Nv3OUwjEY5qVCxCup4/preview?_escaped_fragment_&amp;amp;usp=embed_facebook&quot; /&gt;&lt;meta property=&quot;og:image&quot; content=&quot;https://lh3.googleusercontent.com/qIoP314586ONHNIkYbDzcd5eh9ULP4bZnbXwifNB4pachdLosC5UA0xddKvmVe9VsN7A9g=w1200-h630-p&quot; /&gt;&lt;meta property=&quot;og:image:width&quot; content=&quot;1200&quot; /&gt;&lt;meta property=&quot;og:image:height&quot; content=&quot;630&quot; /&gt;&lt;meta property=&quot;og:description&quot; content=&quot;WebAssembly architecture for Go Document revision 1 - 28th February 2018 This documents describes the design decisions that went into the new WebAssembly architecture (short &amp;#x201C;wasm&amp;#x201D;) for the Go compiler. The goal is to upstream it to the official Go repository in the current development cycle, ta...&quot; /&gt;&lt;meta name=&quot;google&quot; content=&quot;notranslate&quot; /&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge;&quot; /&gt;&lt;meta name=&quot;fragment&quot; content=&quot;!&quot; /&gt;&lt;meta name=&quot;referrer&quot; content=&quot;default&quot; /&gt;&lt;title&gt;WebAssembly architecture for Go - Google Docs&lt;/title&gt;&lt;link rel=&quot;shortcut icon&quot; href=&quot;https://ssl.gstatic.com/docs/documents/images/kix-favicon6.ico&quot; /&gt;&lt;link rel=&quot;chrome-webstore-item&quot; href=&quot;https://chrome.google.com/webstore/detail/ghbmnnjooekpmoecnnnilnnbdlolhkhi&quot; /&gt;&lt;link rel=&quot;chrome-webstore-item&quot; href=&quot;https://chrome.google.com/webstore/detail/apdfllckaahabafndbhieahigkjlhalf&quot; /&gt;&lt;meta itemprop=&quot;name&quot; content=&quot;WebAssembly architecture for Go&quot; /&gt;&lt;meta itemprop=&quot;faviconUrl&quot; content=&quot;https://ssl.gstatic.com/docs/documents/images/kix-favicon6.ico&quot; /&gt;&lt;meta itemprop=&quot;url&quot; content=&quot;https://docs.google.com/document/d/131vjr4DH6JFnb-blm_uRdaC0_Nv3OUwjEY5qVCxCup4/preview?_escaped_fragment_&amp;amp;usp=embed_googleplus&quot; /&gt;&lt;meta itemprop=&quot;embedURL&quot; content=&quot;https://docs.google.com/document/d/131vjr4DH6JFnb-blm_uRdaC0_Nv3OUwjEY5qVCxCup4/preview?usp=embed_googleplus&quot; /&gt;&lt;/head&gt;&lt;body dir=&quot;ltr&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/CreativeWork/DocumentObject&quot; id=&quot;readabilityBody&quot; readability=&quot;153.00171772116&quot;&gt;
&lt;noscript&gt;
&lt;div class=&quot;docs-butterbar-container&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;docs-butterbar-wrap&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;JavaScript isn't enabled in your browser, so this file can't be opened. Enable and reload.&lt;/p&gt;
&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;/noscript&gt;
&lt;p class=&quot;title&quot; id=&quot;h.mjo1bish3xni&quot;&gt;&lt;span&gt;WebAssembly architecture for Go&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Document revision 1 - 28th February 2018&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;This documents describes the design decisions that went into the new WebAssembly architecture (short “wasm”) for the Go compiler. The goal is to upstream it to the official Go repository in the current development cycle, targeting Go 1.11. The WebAssembly architecture will allow Go to become an alternative to JavaScript for writing code that runs in a web browser. This new freedom of choice will hopefully have a positive impact on the software engineering ecosystem overall.&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;h.no6fy3wdxcc2&quot;&gt;&lt;span&gt;Introduction to WebAssembly&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;WebAssembly is in many regards quite different from all other architectures. It is not&lt;/span&gt; &lt;span&gt;intended&lt;/span&gt;&lt;span&gt; to be processed by a CPU directly, but instead is an intermediate representation that&lt;/span&gt; &lt;span&gt;is&lt;/span&gt;&lt;span&gt; compiled to actual machine code by the WebAssembly runtime environment. Thus the design of WebAssembly was not constrained by hardware considerations&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; and the authors could instead focus on their goals of efficiency and output size.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;This put&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt; constraints on&lt;/span&gt; &lt;span&gt;the&lt;/span&gt;&lt;span&gt; logic&lt;/span&gt;&lt;span&gt; that&lt;/span&gt;&lt;span&gt; can be efficiently expressed in WebAssembly&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;These&lt;/span&gt;&lt;span&gt; constraints&lt;/span&gt; &lt;span&gt;are&lt;/span&gt;&lt;span&gt; sometimes hard to reconcile with Go’s existing design. One may hope that future versions of WebAssembly will add features&lt;/span&gt; &lt;span&gt;to&lt;/span&gt;&lt;span&gt; fill&lt;/span&gt; &lt;span&gt;these&lt;/span&gt;&lt;span&gt; gaps. Nevertheless, the current state of the WebAssembly architecture for Go passes all compiler and package tests and supports all major Go features. There was a focus on keeping changes to existing compiler and runtime code to a minimum.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.google.com/url?q=http://webassembly.github.io/spec/core/index.html&amp;amp;sa=D&amp;amp;ust=1520096495389000&amp;amp;usg=AFQjCNEBY8ST_uLE2Kinxj2hc_50CbU48g&quot;&gt;WebAssembly specification&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.google.com/url?q=https://github.com/WebAssembly/design/blob/master/FutureFeatures.md&amp;amp;sa=D&amp;amp;ust=1520096495390000&amp;amp;usg=AFQjCNHxIJAJfLOvmdKpKNL7_karirS9Fg&quot;&gt;WebAssembly future features&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;h.yagsioapncj3&quot;&gt;&lt;span&gt;Linear memory&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;WebAssembly features a linear memory with load and store instructions. This is quite similar to normal memory pages, however it is currently not possible to reserve pages without already allocating them. This will likely be&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;https://www.google.com/url?q=https://github.com/WebAssembly/design/blob/master/FutureFeatures.md%23finer-grained-control-over-memory&amp;amp;sa=D&amp;amp;ust=1520096495391000&amp;amp;usg=AFQjCNGYB-o04Xf36S---furBuBsnJPPrA&quot;&gt;available in the future&lt;/a&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;h.pi4kwpb166zn&quot;&gt;&lt;span&gt;64-bit architecture&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;WebAssembly has full support for 64 bit integers (in contrast to JavaScript). However, currently memory can only be addressed with 32 bit integers, thus limiting the memory to 4GB. However, the wasm architecture for Go has 64 bit pointers and a switchover to&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;https://www.google.com/url?q=https://github.com/WebAssembly/design/blob/master/FutureFeatures.md%23linear-memory-bigger-than-4-gib&amp;amp;sa=D&amp;amp;ust=1520096495392000&amp;amp;usg=AFQjCNHHAO4er6Au1cHQgIndGhAt76HrBw&quot;&gt;64 bit memory operations&lt;/a&gt;&lt;/span&gt;&lt;span&gt; is planned when they are available.&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;h.c6ieju7hnzrz&quot;&gt;&lt;span&gt;Threads&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Currently WebAssembly has no threads, but they are&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;https://www.google.com/url?q=https://github.com/WebAssembly/design/issues/1073&amp;amp;sa=D&amp;amp;ust=1520096495394000&amp;amp;usg=AFQjCNEZxG2kAiBn-ZIaAJu-k45pN8oZeQ&quot;&gt;on the roadmap&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Most Go code can run fine on a single thread. The only drawback is that “sysmon” is not available, thus there is no preemption of goroutines.&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;h.58es2esmswsk&quot;&gt;&lt;span&gt;WebAssembly is a stack machine&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;All other architectures are register machines, but WebAssembly is not. Instead, it maintains its own opaque stack and each function can have an arbitrary number of local variables.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Fully using WebAssembly’s stack is currently not an option, since Go needs to be able to inspect the stack for garbage collection, stack traces, etc.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Instead, Go maintains its own stack on the linear memory as usual. Registers get mapped to variables: SP, PC_F and PC_B (see below) are global variables. I0 to I15 (64 bit integers) and F0 to F15 (64 bit floats) are local variables. The WebAssembly runtime is likely to map those local variables to CPU registers.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Go’s SSA instructions only operate on registers, for example an add instruction would read two registers, do the addition and then write to a register. WebAssembly’s instructions on the other hand operate on the stack. The add instruction first pops two values from the stack, does the addition, then pushes the result to the stack. To&lt;/span&gt; &lt;span&gt;fulfill&lt;/span&gt;&lt;span&gt; Go’s semantics, one needs to map Go’s single add instruction to 4 WebAssembly instructions:&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;lst-kix_4isqroa750k0-0 start&quot;&gt;&lt;li&gt;&lt;span&gt;Push&lt;/span&gt; &lt;span&gt;the&lt;/span&gt; &lt;span&gt;value of local variable A to the stack&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Push&lt;/span&gt; &lt;span&gt;the&lt;/span&gt; &lt;span&gt;value of local variable B to the stack&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Do addition&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Write value from stack to local variable C&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;Now consider that B was set to the constant 42 before the addition:&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;lst-kix_4isqroa750k0-0&quot;&gt;&lt;li&gt;&lt;span&gt;Push constant 42 to the stack&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Write value from stack to local variable B&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;This works, but is inefficient. Instead, the stack is used directly by inlining instructions if possible. With inlining it becomes:&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;lst-kix_4isqroa750k0-0&quot;&gt;&lt;li&gt;&lt;span&gt;Push&lt;/span&gt;&lt;span&gt; the&lt;/span&gt; &lt;span&gt;value of local variable A to the stack&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Push constant 42 to the stack&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Do addition&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Write value from stack to local variable C&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;Please note that the instruction “Push constant 42 to the stack” is not strictly ordered before the add instruction anymore.&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;h.q39kpzpt2lwf&quot;&gt;&lt;span&gt;Control structures&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;WebAssembly has no basic blocks or jump instructions, instead it has more high level control structures resembling if-statements and loops. Unfortunately, it also does not currently have any fallback construct like a goto instruction.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.google.com/url?q=https://github.com/WebAssembly/design/blob/master/Rationale.md%23control-flow&amp;amp;sa=D&amp;amp;ust=1520096495400000&amp;amp;usg=AFQjCNFKQNfQb9ec9Dy7hL7cJ4fBzrSQug&quot;&gt;According to the authors of WebAssembly&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, this should not be an issue since most control flow can be turned into high-level structures by the&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;https://www.google.com/url?q=https://github.com/kripken/emscripten/blob/master/docs/paper.pdf?raw%3Dtrue&amp;amp;sa=D&amp;amp;ust=1520096495400000&amp;amp;usg=AFQjCNH-eLZvpP6H-AJMFhRg08z3FO0WnA&quot;&gt;“relooper” algorithm&lt;/a&gt;&lt;/span&gt;&lt;span&gt;. Unfortunately this is not possible for Go, since resuming a goroutine continues execution at some arbitrary call in a function, thus all those entry points must be reachable from the start of the function. One can see that the assumption of the authors only holds if one is also fully using WebAssembly’s stacks and their yet-to-be-added coroutine feature. One can hope that a goto instruction will be&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;https://www.google.com/url?q=https://github.com/WebAssembly/design/issues/796&amp;amp;sa=D&amp;amp;ust=1520096495401000&amp;amp;usg=AFQjCNF1RtPbAnK_6bslXVLw6U_jLb6sgw&quot;&gt;added in the future&lt;/a&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;In the meantime, Go generates the equivalent&lt;/span&gt; &lt;span&gt;of&lt;/span&gt;&lt;span&gt; a big switch statement and uses the PC_B variable to jump to the desired basic block.&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;h.nrkaoiab5j18&quot;&gt;&lt;span&gt;Functions&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;WebAssembly functions do not live in the same address space as the linear memory. Instead, they have a 0-based index. This is reconciled with Go’s concept of a program counter by splitting it into 2 parts: PC_F and PC_B. PC_F is the index of the function to be executed. PC_B is the index of the basic block to be executed. When a single 64-bit PC value is needed it currently gets built as follows: PC_F&amp;lt;&amp;lt;16 + PC_B.&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;h.xweu6gzay871&quot;&gt;&lt;span&gt;Garbage collection&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Go’s garbage collection is fully supported. WebAssembly is planning to add&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;https://www.google.com/url?q=https://github.com/WebAssembly/design/issues/1079&amp;amp;sa=D&amp;amp;ust=1520096495402000&amp;amp;usg=AFQjCNEm6rEyYN7jKareGWV1o4nQUIcdjw&quot;&gt;its own garbage collection&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, but it is hard to imagine that it would yield a better performance than Go’s own GC which is specifically tailored to Go’s needs.&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;h.1duvpjxox23g&quot;&gt;&lt;span&gt;Syscalls&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;System calls are implemented via calls to the JS environment. Most file system operations are mapped to Node.js’ “fs” module. In the browser, file system operations are currently not available. Network operations are currently simulated internally, not touching the real network, just like with the nacl architecture used by the Go playground. This needs to be improved in the future.&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;h.i5j6fyy7f7nx&quot;&gt;&lt;span&gt;JavaScript interoperability&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Interoperability with the JavaScript environment is still in an early state. A few operations are available in the runtime/js package and are currently used by the syscall implementations. However, this package is likely to change in the future.&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;h.oz783lnn3frl&quot;&gt;&lt;span&gt;Conclusion&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;It works, supports the full Go specification and most major features that people love with Go. There is still work to do to improve the performance. Especially a “goto” operation in WebAssembly would be very helpful. Still, it is in a state where it should be good enough to be merged upstream so more people can start experimenting and contributing.&lt;/span&gt;&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Fri, 02 Mar 2018 22:17:22 +0000</pubDate>
<dc:creator>diakritikal</dc:creator>
<og:title>WebAssembly architecture for Go</og:title>
<og:type>article</og:type>
<og:url>https://docs.google.com/document/d/131vjr4DH6JFnb-blm_uRdaC0_Nv3OUwjEY5qVCxCup4/preview?_escaped_fragment_&amp;usp=embed_facebook</og:url>
<og:image>https://lh3.googleusercontent.com/qIoP314586ONHNIkYbDzcd5eh9ULP4bZnbXwifNB4pachdLosC5UA0xddKvmVe9VsN7A9g=w1200-h630-p</og:image>
<og:description>WebAssembly architecture for Go Document revision 1 - 28th February 2018 This documents describes the design decisions that went into the new WebAssembly architecture (short “wasm”) for the Go compiler. The goal is to upstream it to the official Go repository in the current development cycle, ta...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://docs.google.com/document/d/131vjr4DH6JFnb-blm_uRdaC0_Nv3OUwjEY5qVCxCup4/preview?_escaped_fragment_=</dc:identifier>
</item>
<item>
<title>Patent trolls are shaking us down for selling “rubies” in our game</title>
<link>https://www.clickerheroes2.com/patent_trolls.php</link>
<guid isPermaLink="true" >https://www.clickerheroes2.com/patent_trolls.php</guid>
<description>&lt;p&gt;March 1, 2018&lt;/p&gt;
&lt;p&gt;We (Playsaurus, developers of &lt;a href=&quot;https://www.clickerheroes.com/&quot;&gt;Clicker Heroes&lt;/a&gt; and &lt;a href=&quot;https://www.clickerheroes2.com/&quot;&gt;Clicker Heroes 2&lt;/a&gt;) are getting shaken down by patent trolls for using &quot;virtual currency&quot; in our game.&lt;/p&gt;
&lt;p&gt;GTX Corp., owners of U.S. Patent no. 7,177,838, claims that we're infringing on their patent for using &quot;electronic tokens&quot; (I assume they mean the rubies in Clicker Heroes).&lt;/p&gt;
&lt;p&gt;They offered to let us pay a *&lt;em&gt;bargain&lt;/em&gt;* $35,000 license fee to avoid &quot;costly litigation&quot;. We were given 10 days to respond.&lt;/p&gt;
&lt;p&gt;I believe their claims are completely meritless and their behavior to be abusive and terribly unethical. As I am a major owner of Playsaurus I see this as a personal attack, and the cost in my own time and well-being has already been significant and draining. It is a shame that the United States legal system can't provide a quick and easy way for us to punish them for these actions.&lt;/p&gt;
&lt;p&gt;I believe it is unethical on our part to pay any negotiated amount, which serves to encourage the behavior of trolls with bogus claims. So, if pressed, we will take the matter to court and see it to the end. We have retained a law firm to assist and represent us if necessary. Playsaurus is a 100% privately owned organization, and we are not beholden to outside investors. We absolutely refuse to negotiate license fees with patent holders who make bogus claims.&lt;/p&gt;
&lt;p&gt;You can see everything they sent to us in the PDFs below. I have also included our response, written by my good friend Miguel Bombach from Perkins Coie, describing to GTX how their claims are completely meritless.&lt;/p&gt;
&lt;p&gt;The history of this patent (known as the '838 patent) is long. It was used by several different companies who owned it to shake down countless major institutions about 10 years ago. A more recent development is that they are threatening smaller companies (like Playsaurus) who typically don't have many resources. What they're asking for, $35,000, is about half a year of salary for one of our employees. I am concerned that they may be preying on a lot of other small studios, in a final attempt for them to profit off this bogus patent (which only has about 2 years left on it).&lt;/p&gt;
&lt;p&gt;I believe they are targeting smaller organizations now, because recent developments in patent law have made bogus patents like these much easier to fight, but only if you have enough resources and money to properly prepare the legal challenges. If they were to go after larger organizations, the patent could easily be challenged. But smaller organizations like ours often can't afford to go through that process as easily.&lt;/p&gt;
&lt;p&gt;A precursory search shows that there's a current lawsuit from GTX Corp. against Nekki (another game developer) for infringing on this same patent on February 8th. There is another lawsuit against Soccer Manager Ltd. I don't yet know any details of these cases.&lt;/p&gt;
&lt;p&gt;I would like to hear from any other game developers who are also up against this problem, so that we could exchange any information we find and collaborate. I will freely discuss any information we or our lawyers discover that can be legally shared. Maybe we can help each other put an end to this. Please contact me at &lt;a href=&quot;mailto:fragsworth@playsaurus.com&quot;&gt;fragsworth@playsaurus.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is what they sent to us:&lt;/p&gt;
&lt;p&gt;Here is our response:&lt;/p&gt;

&lt;p&gt;- Fragsworth&lt;/p&gt;
&lt;p&gt;CEO, Playsaurus&lt;/p&gt;
&lt;p&gt;EDIT (March 2, 2018): It appears that there are multiple &quot;GTX Corps&quot;, so I want to make it clear that the ones going after us don't have much of an online presence. As of today they don't even appear to have a Wikipedia article (and the current Wikipedia article is about ANOTHER GTX Corp that appears to be a legitimate company). As far as I can tell, the guys shaking us down are NOT these guys in particular: &lt;a href=&quot;http://www.gtxcorp.com/&quot;&gt;http://www.gtxcorp.com/&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 02 Mar 2018 20:50:57 +0000</pubDate>
<dc:creator>guildwriter</dc:creator>
<og:title>Clicker Heroes 2</og:title>
<og:description>Sign up for news and updates for Clicker Heroes 2.</og:description>
<og:image>https://d1snsxh2hr65cz.cloudfront.net/ch2/logo.png</og:image>
<og:type>article</og:type>
<og:url>http://www.clickerheroes2.com</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.clickerheroes2.com/patent_trolls.php</dc:identifier>
</item>
<item>
<title>Show HN: My embarrassing personal website from the 90s</title>
<link>http://boglin.iwarp.com/</link>
<guid isPermaLink="true" >http://boglin.iwarp.com/</guid>
<description>&lt;img src=&quot;http://boglin.iwarp.com/ani_explode.gif&quot; height=&quot;31&quot; width=&quot;88&quot; /&gt;&lt;img src=&quot;http://boglin.iwarp.com/title2.gif&quot; height=&quot;58&quot; width=&quot;409&quot; /&gt;&lt;img src=&quot;http://boglin.iwarp.com/iexploit.gif&quot; height=&quot;31&quot; width=&quot;88&quot; /&gt;&lt;p&gt;&lt;img src=&quot;http://boglin.iwarp.com/smalborg.gif&quot; height=&quot;7&quot; width=&quot;502&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://boglin.iwarp.com/nt2.gif&quot; height=&quot;40&quot; width=&quot;313&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Hate Microsoft? Go to &lt;a href=&quot;http://www.winblows.com&quot;&gt;http://www.winblows.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;&lt;span&gt;WARNING&lt;/span&gt;&lt;/u&gt;&lt;span&gt;: IF YOU DON'T SIGN THE GUESTBOOK I MAY HAVE TO KILL YOU. HAVE A NICE DAY. =)&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;&lt;strong&gt;Dec.2/99&lt;/strong&gt;: I was wrong. It didn't take me another year to update my page...it only took 5 months and 7 days =) Have fun and check out the new stuff&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;June 26/99&lt;/strong&gt;: Well, I Finally got around to updating this thing. Who knows, it'll probably be another year or so before i do it again =P&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://boglin.iwarp.com/me.html&quot;&gt;&lt;img src=&quot;http://boglin.iwarp.com/aboutme.gif&quot; height=&quot;64&quot; width=&quot;130&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://boglin.iwarp.com/pics.html&quot;&gt;&lt;img src=&quot;http://boglin.iwarp.com/pics2.gif&quot; height=&quot;64&quot; width=&quot;114&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://boglin.iwarp.com/links.html&quot;&gt;&lt;img src=&quot;http://boglin.iwarp.com/links2.gif&quot; height=&quot;64&quot; width=&quot;91&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://boglin.iwarp.com/fsguestbook.html&quot;&gt;&lt;span&gt;VIEW THE GUESTBOOK&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://boglin.iwarp.com/fsguest.html&quot;&gt;&lt;span&gt;&lt;span&gt;SIGN THE GUESTBOOK&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 02 Mar 2018 20:11:30 +0000</pubDate>
<dc:creator>rpeden</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://boglin.iwarp.com/</dc:identifier>
</item>
<item>
<title>Wing Commander II</title>
<link>https://www.filfre.net/2018/03/wing-commander-ii/</link>
<guid isPermaLink="true" >https://www.filfre.net/2018/03/wing-commander-ii/</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/wing-commander-ii/166416-wing-commander-ii-vengeance-of-the-kilrathi-dos-front-cover/&quot; rel=&quot;attachment wp-att-3300&quot;&gt;&lt;img class=&quot;aligncenter size-medium wp-image-3300&quot; src=&quot;https://www.filfre.net/wp-content/uploads/2018/02/166416-wing-commander-ii-vengeance-of-the-kilrathi-dos-front-cover-209x300.jpg&quot; alt=&quot;&quot; width=&quot;209&quot; height=&quot;300&quot; srcset=&quot;https://www.filfre.net/wp-content/uploads/2018/02/166416-wing-commander-ii-vengeance-of-the-kilrathi-dos-front-cover-209x300.jpg 209w, https://www.filfre.net/wp-content/uploads/2018/02/166416-wing-commander-ii-vengeance-of-the-kilrathi-dos-front-cover-768x1101.jpg 768w, https://www.filfre.net/wp-content/uploads/2018/02/166416-wing-commander-ii-vengeance-of-the-kilrathi-dos-front-cover-714x1024.jpg 714w, https://www.filfre.net/wp-content/uploads/2018/02/166416-wing-commander-ii-vengeance-of-the-kilrathi-dos-front-cover-500x717.jpg 500w, https://www.filfre.net/wp-content/uploads/2018/02/166416-wing-commander-ii-vengeance-of-the-kilrathi-dos-front-cover.jpg 800w&quot; sizes=&quot;(max-width: 209px) 100vw, 209px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If there was ever any doubt inside Origin Systems that Chris Roberts’s &lt;a href=&quot;https://www.filfre.net/2017/04/from-squadron-to-wingleader&quot;&gt;&lt;em&gt;Wing Commander&lt;/em&gt;&lt;/a&gt; was destined to join &lt;em&gt;Ultima&lt;/em&gt; as the company’s second great franchise, it was banished the moment the first game in the new series was released on September 26, 1990, and promptly sold by some accounts 100,000 copies in its first month on the market. Previously known as a maker of highly demanding CRPGs that were devoured by an exclusive audience of loyalists, Origin was suddenly the proud publisher of the game that absolutely everybody was talking about, regardless of what genre they usually favored. It was a strange turn of events, one that surprised Origin almost as much as it did the rest of their industry. Nevertheless, the company wouldn’t be shy about exploiting the buzz.&lt;/p&gt;
&lt;p&gt;The first dribble in what would become a flood of additional &lt;em&gt;Wing Commander&lt;/em&gt; product was born out of a planned “special edition” of the original game, to be sold only via direct mail order. Each numbered copy of the special edition was to be signed by Roberts and would include a baseball cap sporting the &lt;em&gt;Wing Commander&lt;/em&gt; logo. To sweeten the deal, Roberts proposed that they also pull together some of the missions and spaceships lying around the office that hadn’t made the cut for the original game, string some story bits between them using existing tools and graphic assets, and throw that into the special-edition box as well.&lt;/p&gt;
&lt;p&gt;But the commercial potential for the “mission disk” just kept growing as customers bought the original game, churned through the forty or so missions included therein, and came clamoring for more. Roberts, for one, was certain that mission disks should be cranked out in quantity and made available as widely as possible, likening them to all of the “adventure modules” he had purchased for tabletop &lt;em&gt;Dungeons &amp;amp; Dragons&lt;/em&gt; as a kid. And so the profile of the so-called &lt;em&gt;Secret Missions&lt;/em&gt; project kept growing, becoming first a standalone product available by direct order from Origin, and then a regular boxed product that was sold at retail, just like all their other games. “When I make the decision to purchase a product,” Roberts noted in his commonsense way, “I want to go to the store and buy it immediately. I don’t want to make a phone call and wait for someone to ship it to me.”&lt;/p&gt;
&lt;p&gt;The add-on disk’s mission design wasn’t as good as that of the original game, which had already done a pretty good job of digging all of the potential out of the space-combat engine’s fairly limited bag of tricks. With no way of making the missions more interesting, the add-on settled for making them more difficult, throwing well-nigh absurd quantities of enemy spacecraft at the player. But it didn’t matter: players ate it up and kept right on begging for more. Origin obliged them again with &lt;em&gt;Secret Missions 2&lt;/em&gt;, a somewhat more impressive outing that employed the engine which was in development for a standalone &lt;em&gt;Wing Commander II&lt;/em&gt;, and was thereby able to add at least a few new wrinkles to the mission formula along with a more developed plot.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/wing-commander-ii/sales1/&quot; rel=&quot;attachment wp-att-3301&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-3301&quot; src=&quot;https://www.filfre.net/wp-content/uploads/2018/02/sales1.jpg&quot; alt=&quot;&quot; width=&quot;456&quot; height=&quot;397&quot; srcset=&quot;https://www.filfre.net/wp-content/uploads/2018/02/sales1.jpg 456w, https://www.filfre.net/wp-content/uploads/2018/02/sales1-300x261.jpg 300w&quot; sizes=&quot;(max-width: 456px) 100vw, 456px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It was &lt;em&gt;Wing Commander II&lt;/em&gt; itself, however, that everyone — not least among them Origin’s accountants — was really waiting for. Origin hoped to get the sequel out by June of 1991, just nine months after the first game. Chris Roberts, now installed as Origin’s “Director of New Technologies,” had been placed in charge of developing a true next-generation engine from scratch for use in the eventual &lt;em&gt;Wing Commander III&lt;/em&gt;, and thus had a limited role in this interim step. Day-to-day responsibility for &lt;em&gt;Wing Commander II&lt;/em&gt; passed into the hands of its “director” Stephen Beeman,&lt;sup id=&quot;rf1-3286&quot;&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/wing-commander-ii/#fn1-3286&quot; title=&quot;Stephen Beeman now lives as the woman Siobhan Beeman. As per my usual editorial policy on these matters, I refer to her as “he” and by her original name only to avoid historical anachronisms and to stay true to the context of the times.&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; who had just finished filling the same role on &lt;a href=&quot;https://www.filfre.net/2018/02/the-worlds-of-ultima&quot;&gt;&lt;em&gt;Worlds of Ultima: The Savage Empire&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Beeman’s team of coders improved the space-combat engine in welcome ways. They properly accounted for the speed of the computer running the game, thus mostly fixing the speed issues which have dogged the first &lt;em&gt;Wing Commander&lt;/em&gt; to this day. They added an innovative layer of adaptive artificial intelligence on the part of enemy ships, so that if the player flew and shot better the enemy did as well and vice versa, in an effort to remedy one of the primary complaints players had made about the &lt;em&gt;Secret Missions&lt;/em&gt; disks in particular: that too many of the missions were just too darn hard. And they also created a whole new slate of ships to fight and to fly; most notable among them was the Broadsword, a lumbering torpedo bomber of a spaceship with rear- and side-facing gun turrets which the player could jump into and control.&lt;/p&gt;
&lt;div id=&quot;attachment_3299&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;39&quot;&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/wing-commander-ii/wc2_022/&quot; rel=&quot;attachment wp-att-3299&quot;&gt;&lt;img class=&quot;size-full wp-image-3299&quot; src=&quot;https://www.filfre.net/wp-content/uploads/2018/02/wc2_022.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;450&quot; srcset=&quot;https://www.filfre.net/wp-content/uploads/2018/02/wc2_022.png 600w, https://www.filfre.net/wp-content/uploads/2018/02/wc2_022-300x225.png 300w, https://www.filfre.net/wp-content/uploads/2018/02/wc2_022-500x375.png 500w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;&lt;em&gt;Wing Commander II&lt;/em&gt;‘s most obvious new gameplay wrinkle is the Broadsword torpedo bomber, in which you can control gun turrets that shoot to the sides and behind. But it doesn’t work out all that well because your ship just keeps flying straight ahead, a clay pigeon for the Kilrathi, while you’re busy in the turret. I tend to ignore the existence of the turrets, and I suspect I’m not alone.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;With &lt;em&gt;Wing Commander II&lt;/em&gt;, Origin’s artists began using Autodesk 3D Studio. Jake Rodgers, the first 3D artist they hired to work with the new tool, had learned how to do so at an architecture firm. “After talking with Origin, I decided that creating spaceships sounded a lot more interesting than working on buildings,” he remembers. The actual game engine remained only psuedo-3D, but Rodgers and the artists he trained were able to use 3D Studio to make the sprites which represented the ships more detailed than ever, both in the game proper and in some very impressive animated cut scenes. The 3D revolution that was destined to have as huge an impact on the aesthetics of games as it would on the way they played was still a couple of years away from starting in earnest, but with the arrival of 3D Studio in Origin’s toolbox the first tentative steps were already being taken.&lt;/p&gt;
&lt;div id=&quot;attachment_3292&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;36&quot;&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/wing-commander-ii/wc2_002/&quot; rel=&quot;attachment wp-att-3292&quot;&gt;&lt;img class=&quot;size-full wp-image-3292&quot; src=&quot;https://www.filfre.net/wp-content/uploads/2018/02/wc2_002.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;450&quot; srcset=&quot;https://www.filfre.net/wp-content/uploads/2018/02/wc2_002.png 600w, https://www.filfre.net/wp-content/uploads/2018/02/wc2_002-300x225.png 300w, https://www.filfre.net/wp-content/uploads/2018/02/wc2_002-500x375.png 500w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;&lt;em&gt;Wing Commander II&lt;/em&gt; introduces the possibility of good Kilrathi, thus softening some of xenophobia of the first game. And yes, it remains completely impossible to take these flying Tony the Tigers seriously.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Most of all, though, Origin poured their energy into the story layer of the game — into all the stuff that happened when you weren’t actually sitting in the cockpit blowing up the evil Kilrathi. &lt;em&gt;Wing Commander II: Vengeance of the Kilrathi&lt;/em&gt; took an approach to game design that could best be summed up as “give the people what they want.” With barely six months to bring the project to completion, Origin combed through all of the feedback they had received on the first game, looking to punch up the stuff that people had liked and to minimize or excise entirely the stuff they seemingly didn’t care so much about.&lt;/p&gt;
&lt;p&gt;And they found out that what the people had really liked, alongside the spectacular graphics and sound, had been the feeling of playing the starring role in a rollicking science-fiction film. The people liked the interactions in the bar with their fellow pilots, the briefing scenes before each mission, and the debriefs afterward. They liked the &lt;em&gt;characters&lt;/em&gt; of their fellow pilots, to whom they claimed an emotional bond that surprised even Chris Roberts. And they liked the idea of all of the missions they flew finding their context within a larger unfolding narrative of interstellar war — even if, taken on its own terms, the story of the first game was so vague as to barely exist at all. Faced with such a sketchy story, alongside a collection of characters that were often little more than ethnic stereotypes, players had happily spun more elaborate fictions in their minds, reading between lines the game’s developers had never drawn in the first place. For instance, some of them were convinced that Angel, the female French pilot, secretly had the hots for the hero, something that came as news to everyone at Origin.&lt;/p&gt;
&lt;p&gt;But there were other innovative aspects of the first game which, equally to Origin’s surprise, their customers were less keen on. The most noteworthy of these, and a consistent sore point with Chris Roberts in particular, was the lovingly crafted branching mission tree, in which the player’s success or failure affected the course of the war and thus what later missions she would be assigned. Despite all of Origin’s admonitions to the contrary, overwhelming evidence suggested that the vast majority of players replayed each mission until they’d managed to complete it successfully rather than taking their lumps and moving on. Roberts and his colleagues found this so frustrating not least because they had poured a lot of energy and money into missions which the majority of players were never even seeing. Yes, one might argue that this state of affairs was to a large extent Origin’s own fault, the natural byproduct of a design which assigned &lt;em&gt;harder&lt;/em&gt; rather than easier missions as a consequence of failure, thus sending the honest but not terribly proficient player into a downward spiral of ever-increasing futility. Still, rather than remedy that failing Origin chose to prune their mission tree; while limited branching would still be possible, the success and failure paths would be merely slightly modified versions of the same narrative arc, and failing two mission series in a row would abruptly end the game. Origin wanted to tell a &lt;em&gt;real&lt;/em&gt; story this time around, and that would be hard enough; they didn’t have time to make a bunch of branching stories.&lt;/p&gt;
&lt;div id=&quot;attachment_3293&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;32&quot;&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/wing-commander-ii/wc2_016/&quot; rel=&quot;attachment wp-att-3293&quot;&gt;&lt;img class=&quot;size-full wp-image-3293&quot; src=&quot;https://www.filfre.net/wp-content/uploads/2018/02/wc2_016.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;450&quot; srcset=&quot;https://www.filfre.net/wp-content/uploads/2018/02/wc2_016.png 600w, https://www.filfre.net/wp-content/uploads/2018/02/wc2_016-300x225.png 300w, https://www.filfre.net/wp-content/uploads/2018/02/wc2_016-500x375.png 500w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;Who would ever have guessed that the black pilot would be the one named Downtown?&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Given the new emphasis on story, Stephen Beeman was fortunate to have at his disposal Ellen Guon, the very first professional writer ever to be hired by Origin. Guon came to the company from Sierra, where she had polished up the text in remakes of the first &lt;em&gt;King’s Quest&lt;/em&gt; game and the educational title &lt;a href=&quot;https://www.filfre.net/2018/01/sierra-at-the-cusp-of-the-multimedia-age&quot;&gt;&lt;em&gt;Mixed-Up Mother Goose&lt;/em&gt;&lt;/a&gt;. Before that, she had written for Saturday-morning cartoons, working for a time with Christy Marx, another cartoon veteran who would later wind up at Sierra, on &lt;a href=&quot;http://www.imdb.com/title/tt0090461/?ref_=nv_sr_2&quot;&gt;&lt;em&gt;Jem and the Hologram&lt;/em&gt;&lt;em&gt;s&lt;/em&gt;&lt;/a&gt;. She’d also seen some of her science-fiction and fantasy stories published in magazines and anthologies, and her first novel, a collaboration with the more established fantasy novelist Mercedes Lackey, was being published just as she was settling in at Origin. Beeman and Guon developed the initial script for &lt;em&gt;Wing Commander II&lt;/em&gt; together, learning in the process that they had more in common than game development; Ellen Guon would eventually become Ellen Beeman.&lt;/p&gt;
&lt;p&gt;Chris Roberts badly wanted not just a more developed story for the second game but a darker one, an &lt;em&gt;Empire Strikes Back&lt;/em&gt; to contrast with the original game’s &lt;em&gt;Star Wars&lt;/em&gt;. Beeman and Guon obliged him with a script that sees the &lt;em&gt;Tiger’s Claw&lt;/em&gt;, the ship from which the player had flown and fought in the first game, destroyed in the opening moments of the second one by a Kilrathi strike force that, thanks to the secret stealth technology the flying tigers have developed, seems to come out of nowhere. The hero of the original game, who sported whatever name the player chose to give him but was universally known to the developers as “Bluehair” after the tint Origin’s artists gave to his coiffure, is flying a mission when it happens, and through a not-entirely-sensical chain of logic winds up being blamed for the tragedy. But the prosecution fails to prove his negligence or treasonous intent beyond a reasonable doubt at the court martial, and instead of winding up in prison he gets demoted and assigned to fly routine patrols with “Insystem Security” from a station way out in the middle of nowhere. Finally, after years of this boring duty, the Kilrathi unexpectedly come to his quiet little corner of the galaxy, and the “Coward of K’Tithrak Mang” — that being Bluehair — gets his shot at redemption, under circumstances that see him reunited with many of his old comrades-in-arms from &lt;em&gt;Wing Commander I&lt;/em&gt; and its mission disks.&lt;/p&gt;
&lt;div id=&quot;attachment_3294&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;32&quot;&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/wing-commander-ii/wc2_005/&quot; rel=&quot;attachment wp-att-3294&quot;&gt;&lt;img class=&quot;size-full wp-image-3294&quot; src=&quot;https://www.filfre.net/wp-content/uploads/2018/02/wc2_005.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;450&quot; srcset=&quot;https://www.filfre.net/wp-content/uploads/2018/02/wc2_005.png 600w, https://www.filfre.net/wp-content/uploads/2018/02/wc2_005-300x225.png 300w, https://www.filfre.net/wp-content/uploads/2018/02/wc2_005-500x375.png 500w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;A rule of war movies applies here. If someone starts talking about her family…&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The increased emphasis on storytelling — on &lt;em&gt;cinematic&lt;/em&gt; storytelling — is all-pervasive. The original game played out in a predictable sequence: conversations in the bar would be followed by a mission briefing, which would be followed by the actual mission, which would be followed by the debrief. Now, the “movie” takes place anywhere and everywhere. In order to inject some cinematic drama into the mission themselves, Origin introduced cut scenes that can play at literally any time as they unfold.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Wing Commander II&lt;/em&gt; really is &lt;em&gt;all&lt;/em&gt; about the story. It doesn’t want you to spend a lot of time working out how to beat each of the missions; it just wants to keep the plot train chugging down the track. Thus the new adaptive artificial intelligence, which keeps you from ever getting stuck on a mission you just can’t crack. At the same time, however, the selfsame artificial intelligence contrives to make sure that none of your victories are ever routine. “If you meet eight enemies and manage to take out the first seven,” noted Beeman, “the last ship’s intelligence is increased by a few notches. Engaging the last ship results in a really tough dogfight.” &lt;em&gt;Wing Commander II&lt;/em&gt; is meant to be a relentless thrill ride like the movies that inspired it, and is always willing to put a thumb on either side of the scale to make sure it meets that ideal.&lt;/p&gt;
&lt;div id=&quot;attachment_3295&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;32&quot;&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/wing-commander-ii/wc2_017/&quot; rel=&quot;attachment wp-att-3295&quot;&gt;&lt;img class=&quot;size-full wp-image-3295&quot; src=&quot;https://www.filfre.net/wp-content/uploads/2018/02/wc2_017.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;450&quot; srcset=&quot;https://www.filfre.net/wp-content/uploads/2018/02/wc2_017.png 600w, https://www.filfre.net/wp-content/uploads/2018/02/wc2_017-300x225.png 300w, https://www.filfre.net/wp-content/uploads/2018/02/wc2_017-500x375.png 500w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;…and then starts talking about her impending retirement…&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;From a business standpoint — from that of making games that make money — &lt;em&gt;Wing Commander II&lt;/em&gt; could serve as something of a role model even today. There was no trace of the indecision, over-ambition, and bets-hedging that so often lead projects astray. Stephen Beeman had a crystal-clear brief, and he achieved his goals with the same degree of clarity, bringing the project in only slightly over time and over budget — not a huge sin, considering that Origin’s original timing and budget had both been wildly overoptimistic. The important thing was that the game was done in plenty of time for Christmas, shipping on August 30, 1991, whereupon Origin was immediately rewarded with smashing reviews. Writing for &lt;em&gt;Computer Gaming World&lt;/em&gt;, Alan Emrich optimistically said that the plot had begun “bridging the chasm from ‘genre pulp fiction’ to something that could be more accurately regarded as ‘art.'” Even more importantly, &lt;em&gt;Wing Commander II&lt;/em&gt; became another smash hit. It sold its first 100,000 units in the United States in less than two months, and a truly remarkable 500,000 copies worldwide in its first six months.&lt;/p&gt;
&lt;div id=&quot;attachment_3296&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;32&quot;&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/wing-commander-ii/wc2_018/&quot; rel=&quot;attachment wp-att-3296&quot;&gt;&lt;img class=&quot;size-full wp-image-3296&quot; src=&quot;https://www.filfre.net/wp-content/uploads/2018/02/wc2_018.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;450&quot; srcset=&quot;https://www.filfre.net/wp-content/uploads/2018/02/wc2_018.png 600w, https://www.filfre.net/wp-content/uploads/2018/02/wc2_018-300x225.png 300w, https://www.filfre.net/wp-content/uploads/2018/02/wc2_018-500x375.png 500w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;…it can only end one way for her.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Yet in my opinion &lt;em&gt;Wing Commander II&lt;/em&gt; hasn’t aged nearly as well as its predecessor. Today, the two games stand together as an object lesson in the ever-present conflict between narrative and interactivity. In gaining so much of the former, &lt;em&gt;Wing Commander II&lt;/em&gt; loses far too much of the latter. Speaking at the time of the game’s release, Origin’s Warren Spector noted that “we’re still learning how to tell stories on the computer. We’re figuring out where we can be cinematic, and where trying to be cinematic just flat doesn’t work. We’re finding out where you want interaction, and where you want the player to sit back and watch the action.” It’s at these intersections between “being cinematic” and not being cinematic, between interaction and “sitting back and watching the action,” that &lt;em&gt;Wing Commander II&lt;/em&gt; kind of falls apart for me.&lt;/p&gt;
&lt;p&gt;I’m no fan of bloated, shaggy game designs, and generally think that a keen editor’s eye is one of the best attributes a designer can possess, yet I would hardly describe the original &lt;em&gt;Wing Commander&lt;/em&gt; as over-complicated. In the second game, I miss the many things that have been excised as superfluous. I miss the little ersatz arcade game that lets you practice your skills; I miss winning medals and promotions as a result of my performance in the missions; I miss climbing the squadron leader board as I collect more and more kills. In the first game, your wingman could get killed in battle if you didn’t watch out for him properly, resulting in a funeral ceremony, a “KIA” next to his name on the leader board, and your having to fly all by yourself those subsequent missions that should have been earmarked for the two of you. This caused you, for both emotional and practical reasons, to care about the person you were flying with like any good wing leader should. In the second game, however, this too has been carved away. Your wingmen will now always bail out and be rescued if they get too badly shot up. They die only when the railroaded plot demands that they do so, accompanied by a suitably heroic cut scene, and there’s isn’t a damn thing you can do about it. &lt;em&gt;Wing Commander II&lt;/em&gt; thus robs you of any real agency in what is supposed to be &lt;em&gt;your&lt;/em&gt; story. Even the idea of a branching narrative, though poorly executed in the first game, could have been done &lt;em&gt;better&lt;/em&gt; here instead of being tossed aside as just one more extraneous triviality.&lt;/p&gt;
&lt;p&gt;After I published my articles on the first &lt;em&gt;Wing Commander&lt;/em&gt;, commenter Jakub Stribrny described his experience with that game:&lt;/p&gt;
&lt;blockquote readability=&quot;22&quot;&gt;
&lt;p&gt;I decided to do one true honest playthrough. Just one life. If I got shot down, there was no loading the state. I had to start from the very beginning.&lt;/p&gt;
&lt;p&gt;And that was when I discovered what the simulator was good for. Since I had only one life I had to make sure I was really prepared before each mission. So I devised a training plan for myself. An hour in the simulator before even attempting the first mission and then two simulator sessions between each subsequent mission. This proved very effective and I was able to clear almost the whole game. In the end I died just a few missions from the end when attempting to attack a group of Jalthi – fighters with extreme firepower – head-on. Stupid.&lt;/p&gt;
&lt;p&gt;But I never got so much fun from gaming as when I really had to focus on what’s happening around me, cooperate with my wingman, carefully manage missile use, plan optimal routes between navigation points, and choose whether it’s still safe to ignore the blinking EJECT! light or it’s time to call it a day and survive to fight the battles of tomorrow. Or when I was limping to the home base with both cannons shot up and anxiously awaiting whether the badly damaged and glitching comms system would hold at least long enough for me to ask the carrier for landing clearance. My fighter failed me then and I had to eject in the end, but boy was that an experience.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Wing Commander II&lt;/em&gt; obviously pleased many players in its day, but it could never deliver an experience quite like this one. Nor, of course, was it meant to.&lt;/p&gt;
&lt;p&gt;In the years that followed &lt;em&gt;Wing Commander II&lt;/em&gt;‘s release, a cadre of designers and theorists would unite under the “games are not movies” banner, using this game and its successors as some of their favorite examples of offenders against all that is good and holy in ludology. But we need not become overly strident or pedantic, as so many of them have been prone to do. Rather than continuing to dwell on what was lost, we can try to judge &lt;em&gt;Wing Commander II&lt;/em&gt; on its own terms, as the modestly interactive cinematic thrill ride it wants to be. I’m by no means willing to reject the notion that a game can succeed on these terms, provided that the story is indeed catching.&lt;/p&gt;
&lt;div id=&quot;attachment_3297&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;34&quot;&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/wing-commander-ii/wc2_019/&quot; rel=&quot;attachment wp-att-3297&quot;&gt;&lt;img class=&quot;size-full wp-image-3297&quot; src=&quot;https://www.filfre.net/wp-content/uploads/2018/02/wc2_019.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;450&quot; srcset=&quot;https://www.filfre.net/wp-content/uploads/2018/02/wc2_019.png 600w, https://www.filfre.net/wp-content/uploads/2018/02/wc2_019-300x225.png 300w, https://www.filfre.net/wp-content/uploads/2018/02/wc2_019-500x375.png 500w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;This is hands-down the funniest picture in &lt;em&gt;Wing Commander II&lt;/em&gt;, almost as good as the Kilrathi helmets with the ears on top from the first game.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The problem for &lt;em&gt;Wing Commander II&lt;/em&gt; from this perspective is that the story winds up being more &lt;em&gt;Plan 9 from Outer Space&lt;/em&gt; than &lt;em&gt;The Empire Strikes Back&lt;/em&gt;. No one — with, I suppose, the possible exception of &lt;em&gt;Computer Gaming World&lt;/em&gt;‘s Mr. Emrich — is looking for deathless cinematic art from a videogame called &lt;em&gt;Wing Commander II&lt;/em&gt;. Yet there is a level of craftsmanship that we ought to be able to expect from a game with this one’s stated ambitions, and &lt;em&gt;Wing Commander II&lt;/em&gt; fails to clear even that bar.&lt;/p&gt;
&lt;p&gt;Put bluntly, the story we get just doesn’t make a whole lot of sense. What &lt;em&gt;exactly&lt;/em&gt; did Bluehair do to cause the destruction of the &lt;em&gt;Tiger’s Claw&lt;/em&gt;, a tragedy for which only he among the carrier’s entire air group was blamed? Why was everyone so quick to believe that a decorated war hero had suddenly switched sides? Why on earth — excuse me, on Terra — would the Terran Confederation reassign someone widely suspected of high treason to even an out-of-the-way posting? And once the game proper gets going, why does Bluehair’s commander persist in believing that he’s a traitor even after he’s saved the life of said commander and everyone aboard his ship half a dozen times? And if the commander does still believe Bluehair is a traitor, why does he keep assigning him to vital missions in between bitching about what a traitor he is and how much it sucks to have him on his ship? Etc., etc.&lt;/p&gt;
&lt;p&gt;Now, you could accuse me of over-analyzing the game’s action-movie screenplay, and you’d perhaps have a point. After all, &lt;em&gt;Wing Commander&lt;/em&gt;‘s inspiration of &lt;em&gt;Star Wars&lt;/em&gt; is hardly the most grounded narrative in the world. What I would also say in response, however, is that there’s a craft — a sleight of hand, if you will — to keeping the reader or viewer from focusing too much on a story’s incongruities. The writer or screenwriter accomplishes this by offering up compelling characters that are easy to root for or against and by keeping the excitement ever on the boil.&lt;/p&gt;
&lt;div id=&quot;attachment_3298&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;32&quot;&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/wing-commander-ii/wc2_020/&quot; rel=&quot;attachment wp-att-3298&quot;&gt;&lt;img class=&quot;size-full wp-image-3298&quot; src=&quot;https://www.filfre.net/wp-content/uploads/2018/02/wc2_020.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;450&quot; srcset=&quot;https://www.filfre.net/wp-content/uploads/2018/02/wc2_020.png 600w, https://www.filfre.net/wp-content/uploads/2018/02/wc2_020-300x225.png 300w, https://www.filfre.net/wp-content/uploads/2018/02/wc2_020-500x375.png 500w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;This game’s story makes me feel like Bluehair looks in this picture.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;And here too &lt;em&gt;Wing Commander II&lt;/em&gt; drops the ball. At the center of the action is the charisma vacuum that is Bluehair. The first game held back on characterizing him, letting the player imagine him to be the person she wished him to be. That can no longer work in the more developed narrative of the second game, but Origin still seems reluctant to fill in the lines of his character, with the result that he falls smack into an uncanny valley between the &lt;a href=&quot;https://www.filfre.net/2013/04/infidel&quot;&gt;two classic models&lt;/a&gt; of the adventure-game protagonist: the fully fleshed-out individual whose personality the player is expected to assume, and the proverbial “nameless, faceless adventurer” that she can imagine to be herself. Bluehair becomes what my dear old dad would call a “lunk,” a monosyllabic non-presence who rarely has much to say beyond “Yes, Sir,” and “No, Sir.” It feels like a veritable soliloquy when he can manage to muster up an “I’m not guilty, sir. I won’t sign it!” or a “Go to hell, Jazz!” And when the romance subplot kicks in — duly following the stated desires of their players in this as in all things, Origin made Angel the love interest — it starts to get &lt;em&gt;really&lt;/em&gt; painful. One does have to wonder why everyone is getting so hot and bothered over &lt;em&gt;this guy&lt;/em&gt; of all people. Luke Skywalker — much less Han Solo — he definitely ain’t.&lt;/p&gt;
&lt;p&gt;So, we might ask, how did we wind up here? How did one of the first Origin games to take advantage of real, professional writers not turn out at least a little bit better? A strong clue lives in &lt;a href=&quot;http://www.wcnews.com/archives/wc2-scripts.shtml&quot;&gt;a document&lt;/a&gt; that’s been made public by the website &lt;em&gt;Wing Commander Combat Information Center&lt;/em&gt;. It’s the initial script for the game, as prepared by Ellen Guon and Stephen Beeman and completed on November 29, 1990, before production got underway in earnest. The version of the story found herein differs considerably from that found in the completed game. The story is more detailed, better explained, and richer all the way around, including a much more dynamic and assertive Bluehair. It might be instructive to compare the opening of the story as it was originally conceived with what that of the finished game. Here’s how things started back in November of 1990:&lt;/p&gt;
&lt;blockquote readability=&quot;158&quot;&gt;
&lt;p&gt;&lt;strong&gt;Establishing shot — Tiger’s Claw floating in space.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Narration:&lt;/strong&gt; CSS Tiger’s Claw, six months after the Vega Sector Campaign…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Establishing shot — Tiger’s Claw briefing room. We can’t tell yet who the commander is.&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bluehair:&lt;/strong&gt; Okay, everyone, settle down…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cut to Bluehair. Now we see that Bluehair is in Colonel Halcyon’s familiar position.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bluehair:&lt;/strong&gt; Pilots, I’d like to welcome you to the Tiger’s Claw. I’m Lieutenant Colonel Bluehair Ourhero, your new commanding officer. I hope everyone’s recovered from the farewell party for Paladin, Angel, Spirit, Iceman, and General Halcyon.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hunter:&lt;/strong&gt; An’ don’t forget that bloody lunatic, Maniac! They finally transferred ‘im to the psych ‘ospital.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bluehair:&lt;/strong&gt; Sad but true, Hunter. Now, pay close attention, pilots. We’ve just been assigned a top-priority mission, to spearhead a major raid deep into Kilrathi space to their sector command post in the K’Tithrak Mang system. The plan is to jump in with a few carriers and Marine transports, hit the starbase hard, then jump out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hunter:&lt;/strong&gt; ‘nother bleedin’ starbase, eh?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bluehair:&lt;/strong&gt; (smiles) You got it, mate. Let’s just hope it’s as easy as the last one. Now, listen close, everyone. Knight and Bossman are Alpha Wing — check for enemy fighters at Nav 2 and 3. Kilroy and Sabra are Beta Wing…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Narration:&lt;/strong&gt; You assign all the wings. All but one.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bluehair:&lt;/strong&gt; I saved the most important wing for last. Computer, display Kappa. On our way to the starbase, the Claw will pass close to the asteroid field at Nav 1. We don’t know what’s out there, so Hunter and I are going to sweep the rocks as the Claw begins its approach. We’ll either take out whatever we find or hightail it back here to warn the Claw. Any questions, pilots? Good. The Claw will complete her last jump in approximately seven minutes. Get ready for immediate launch. Dismissed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Animation of crowd rising — different backs! Animation of Tiger’s Claw jumping.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Narration:&lt;/strong&gt; K’Tithrak Mang system, deep within Kilrathi space.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Animation of launch-tube sequence.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mission 0. This really should be a basically easy mission. However, just as Bluehair is returning to the action sphere that contains the Claw, we cut to a canned scene.&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bluehair:&lt;/strong&gt; No!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Tiger’s Claw floats in the medium distance. Close to us, three Kilrathi stealth fighters in a chevron uncloak, launch missiles, then peel off in different directions. The missiles impact the Claw and blow it to kingdom come.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dust motes are zooming past us, as if we were headed into the starfield.&lt;/strong&gt; &lt;strong&gt;Now a space station appears in the far distance, rapidly getting closer. We zoom in on this until we start moving around the station. As we do so, the planet Earth comes into view on one edge of the screen. The station itself remains center frame.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Narration:&lt;/strong&gt; Confederation High Command, Terra system, six months after the destruction of the Tiger’s Claw.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Admiral Tolwyn presides over Bluehair’s court martial. A very formal-looking bench with seven dress-uniformed figures, Tolwyn in the middle, is in the back pane. Bluehair and his counsel are sitting at a table. Spot animations of camera drones with Klieg lights will help convey the information that this trial is based more on media image than justice.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tolwyn:&lt;/strong&gt; Lieutenant Colonel Ourhero, stand at attention. Lieutenant Colonel Ourhero, you stand accused of negligence, incompetence, and cowardice under fire. Your actions resulted in the death of 61,000 Confederation defenders. Despite your plea of not guilty and your ridiculous claim that the Kilrathi used some non-existent stealth technology, flying invisible ships past your position…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bluehair:&lt;/strong&gt; It’s true, sir.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tolwyn:&lt;/strong&gt; …you are obviously guilty of these crimes against the Confederation. But, fortunately for you, this court cannot prove your guilt. Our primary evidence, your black-box flight recorder, is missing from the Confed Security offices. Because of the lack of physical evidence, this court is required by law to dismiss your case. We find you not guilty of crimes against the Confederation. This court is adjourned. Lieutenant Colonel Ourhero, report to my office at once.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Establishing shot — Tolwyn’s office&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tolwyn:&lt;/strong&gt; I wanted to talk to you in private, Bluehair. The court couldn’t convict you because of a technicality, but we all know the truth, Ourhero. You’re a coward and a traitor, and I’ll personally guarantee that you’ll never fly again. Your career with the Navy is over. As I assumed that you have some small amount of honor left, my secretary has drawn up your resignation papers…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bluehair:&lt;/strong&gt; I won’t resign, Admiral.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tolwyn:&lt;/strong&gt; What??&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bluehair:&lt;/strong&gt; I’m not guilty, sir. I refuse to resign.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tolwyn:&lt;/strong&gt; Then I’ll offer you one more option, just because I never want to see your face again. I have a request from Insystem Security for a mid-ranked pilot. If you’ll accept a demotion to captain, it’s yours. Otherwise, pilot, you’re grounded for life.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bluehair:&lt;/strong&gt; I’ll accept the demotion, sir.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tolwyn:&lt;/strong&gt; Very well. Get out of here… and you’d better hope we never meet again, traitor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Below you can see the finished game’s interpretation of the story’s opening beats.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;Some of the choices made by the finished game, such as the decision to introduce the villain of the piece from the beginning rather than wait until some eight missions in, are valid enough in the name of punching up the anticipation and excitement. (One could, of course, still wish that said introduction had been written a bit &lt;em&gt;better&lt;/em&gt;: “Speak of your plans, not of your toys.” What does that even &lt;em&gt;mean&lt;/em&gt;?) In other place, however, the cuts made to the story have, even during this opening sequence, already gone deeper than trimming fat. Note, for instance, how the off-hand epithet of “traitor” which Admiral Tolwyn hurls at Bluehair in the initial script is taken to mean literal treason by the final game. And note how the shot showing the court martial to be a media circus, thus providing the beginning of an explanation as to why the powers that be have chosen to scapegoat one decorated pilot for a disastrous failure of a military operation, gets excised. Much more of that sort of subtlety — the sort of subtly that makes the story told by the first draft a credible yarn within its action-movie template — will continue to be lost as the game progresses.&lt;/p&gt;
&lt;p&gt;There’s no single villain we can point to who decided that &lt;em&gt;Wing Commander II&lt;/em&gt; should be gutted, much less a smoking gun we can identify in the form of a single decision that made all the difference. The closest we can come to a money quote is this one from Chris Roberts, made just after the game’s release: “We learned some lessons. We tried to do too much in too little time. None of us had any idea that the game had grown so large.” Like politics, commercial game development has always been the art of the possible. Origin did the best they could with the time and money they had, and if what they came up with wasn’t quite the second coming of &lt;em&gt;The Empire Strikes Back&lt;/em&gt; which Roberts had so wished for, it served its purpose well enough from a business perspective, giving gamers a much more concentrated dose of what they had found so entrancing in the first game and giving Origin the big hit which they needed in order to stay solvent.&lt;/p&gt;
&lt;p&gt;Origin, you see, had a lot going on while &lt;em&gt;Wing Commander II&lt;/em&gt; was in production, and this provides an explanation for the pressure to get it out so quickly. Much of the money the series generated was being poured into &lt;em&gt;Ultima VII&lt;/em&gt;, a CRPG of a scale and scope the likes of which had never been attempted before, a project which became the first game at Origin — and possibly the first computer game &lt;em&gt;ever&lt;/em&gt; — with a development budget that hit $1 million. Origin’s two series made for a telling study in contrasts. While &lt;em&gt;Wing Commander II&lt;/em&gt; saw its scope of interactivity pared back dramatically from that of its predecessor, &lt;em&gt;Ultima VII&lt;/em&gt; remained as formally as it was audiovisually ambitious. &lt;em&gt;Wing Commander&lt;/em&gt; had become the cash cow, but it seemed that, for some at Origin anyway, the heart and soul of the company was still &lt;em&gt;Ultima&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Origin thus continued to monetize &lt;em&gt;Wing Commander&lt;/em&gt; like crazy to pay for their latest &lt;em&gt;Ultima&lt;/em&gt;. In a cash grab that feels almost unbelievably blatant today, they shipped a separate “Speech Accessory Pack” simultaneously with the core game. It added digitized voices to a few cut scenes, such as the opening movie above, and let your wingmen and your Kilrathi enemies shout occasional canned phrases during missions. “You want to buy our new game?” said Origin. “Okay, that will be $50. Oh… you want to play the game with all of the &lt;em&gt;sound&lt;/em&gt;? Well, that will cost you another $25.” Like so much else about &lt;em&gt;Wing Commander II&lt;/em&gt;, the speech, voiced by members of the development team, is terminally cheesy today, but in its day the Speech Pack drove the purchase of the latest Sound Blaster cards, which were adept at handling such samples, just as the core game drove the purchase of the hottest new 80386-based computers. And then two more add-on mission disks, known this time as &lt;em&gt;Special Operations 1&lt;/em&gt; and &lt;em&gt;2&lt;/em&gt;, joined the core &lt;em&gt;Wing Commander II&lt;/em&gt; and the Speech Pack on store shelves. Well before the second anniversary of the first game’s release, Origin had no fewer than seven boxes sporting the &lt;em&gt;Wing Commander&lt;/em&gt; logo on said shelves: the two core games, the four add-on mission packs, and the Speech Pack. Few new gaming franchises have ever generated quite so much product quite so quickly.&lt;/p&gt;
&lt;div id=&quot;attachment_3302&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;33&quot;&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/wing-commander-ii/sales2/&quot; rel=&quot;attachment wp-att-3302&quot;&gt;&lt;img class=&quot;size-full wp-image-3302&quot; src=&quot;https://www.filfre.net/wp-content/uploads/2018/02/sales2.jpg&quot; alt=&quot;&quot; width=&quot;235&quot; height=&quot;329&quot; srcset=&quot;https://www.filfre.net/wp-content/uploads/2018/02/sales2.jpg 235w, https://www.filfre.net/wp-content/uploads/2018/02/sales2-214x300.jpg 214w&quot; sizes=&quot;(max-width: 235px) 100vw, 235px&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;Where it really counted, &lt;em&gt;Wing Commander II&lt;/em&gt; delivered.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Of course, all this product was being generated for one reason only: because it &lt;em&gt;sold&lt;/em&gt;. In 1991, with no new mainline &lt;em&gt;Ultima&lt;/em&gt; game appearing and with the &lt;em&gt;Worlds of Ultima&lt;/em&gt; spin-offs having flopped, the &lt;em&gt;Wing Commander&lt;/em&gt; product line alone accounted for an astonishing 90 percent of Origin’s total revenue. Through that year and the one that followed, it remained undisputed as the biggest franchise in computer gaming, still the only games out there scratching an itch most publishers had never even realized that their customers had. The lessons Origin’s rivals would draw from all this success wouldn’t always be the best ones from the standpoint of games as a form of creative expression, but the first &lt;em&gt;Wing Commander&lt;/em&gt; had, for better or for worse, changed the conversation around games forever. Now, &lt;em&gt;Wing Commander II&lt;/em&gt; was piling on still more proof for the thesis that a sizable percentage of gamers really, really loved a story to provide context for game play — even if it was a really, really bad story. After plenty of &lt;a href=&quot;https://www.filfre.net/2015/04/defender-of-the-crown&quot;&gt;false starts&lt;/a&gt;, the marriage of games and movies was now well and truly underway, and a divorce didn’t look likely anytime soon.&lt;/p&gt;
&lt;p&gt;(&lt;strong&gt;Sources:&lt;/strong&gt; the book &lt;em&gt;Wing Commander I &amp;amp; II: The Ultimate Strategy Guide&lt;/em&gt; by Mike Harrison; Origin Systems’s internal newsletter &lt;em&gt;Point of Origin&lt;/em&gt; from June 21 1991, August 7 1991, October 11 1991, October 25 1991, November 8 1991, January 17 1992, March 13 1992, and May 22 1992; &lt;em&gt;Retro Gamer&lt;/em&gt; 59; &lt;em&gt;Computer Gaming World&lt;/em&gt; of November 1991. Online sources include &lt;a href=&quot;http://www.wcnews.com/background/wing-commander-2.shtml&quot;&gt;documents hosted&lt;/a&gt; at the &lt;em&gt;Wing Commander Combat Information Center&lt;/em&gt;, &lt;em&gt;US Gamer&lt;/em&gt;‘s &lt;a href=&quot;http://www.usgamer.net/articles/chris-roberts-star-citizen-profile&quot;&gt;profile of Chris Roberts&lt;/a&gt;, &lt;em&gt;The Escapist&lt;/em&gt;‘s &lt;a href=&quot;http://www.escapistmagazine.com/articles/view/video-games/issues/issue_54/323-Wing-Leader&quot;&gt;history of &lt;em&gt;Wing Commander&lt;/em&gt;&lt;/a&gt;, Paul Dean’s &lt;a href=&quot;http://paullicino.tumblr.com/post/140850063441/the-forgotten-interview-with-chris-roberts&quot;&gt;interview with Chris Roberts&lt;/a&gt;, and an &lt;a href=&quot;http://web.archive.org/web/20110512211145/http://www.uo.com/archive/ftp/text/intrview/richgar.txt&quot;&gt;interview with Richard Garriott&lt;/a&gt; that was posted to Usenet in 1992.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Wing Commander I&lt;/em&gt; and &lt;em&gt;II&lt;/em&gt; &lt;a href=&quot;https://www.gog.com/game/wing_commander_1_2&quot;&gt;can be purchased&lt;/a&gt; in a package together with all of their expansion packs from GOG.com.)&lt;/p&gt;

</description>
<pubDate>Fri, 02 Mar 2018 17:12:09 +0000</pubDate>
<dc:creator>doppp</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.filfre.net/2018/03/wing-commander-ii/</dc:identifier>
</item>
<item>
<title>When CEOs’ Equity Is About to Vest, They Cut Investment to Boost the Stock Price</title>
<link>https://hbr.org/2018/02/study-when-ceos-equity-is-about-to-vest-they-cut-investment-to-boost-the-stock-price</link>
<guid isPermaLink="true" >https://hbr.org/2018/02/study-when-ceos-equity-is-about-to-vest-they-cut-investment-to-boost-the-stock-price</guid>
<description>&lt;div readability=&quot;39&quot;&gt;
&lt;h4 class=&quot;text-gray-light mbn mt-large2&quot;&gt;Executive Summary&lt;/h4&gt;
&lt;p&gt;Does short-termism exist? And, if it does, what’s the underlying cause? A new study finds that the more equity CEOs have vesting in a given quarter, the more they cut investment. Vesting equity encourages CEOs to take actions with destructive long-term consequences. The research suggests that the horizon&lt;em&gt; &lt;/em&gt;of pay is more important than the total value. It affects the CEO’s incentives to invest, with major implications for the company’s long-run success and contribution to society.&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;125.62921931799&quot;&gt;
&lt;div class=&quot;mbn pbn&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-195825&quot; src=&quot;https://hbr.org/resources/images/article_assets/2018/02/feb18-28-896845746-miragec.jpg&quot; srcset=&quot;/resources/images/article_assets/2018/02/feb18-28-896845746-miragec-300x169.jpg 300w, /resources/images/article_assets/2018/02/feb18-28-896845746-miragec-1024x576.jpg 1024w, /resources/images/article_assets/2018/02/feb18-28-896845746-miragec-500x281.jpg 500w, /resources/images/article_assets/2018/02/feb18-28-896845746-miragec-383x215.jpg 383w, /resources/images/article_assets/2018/02/feb18-28-896845746-miragec-383x215.jpg 383w, /resources/images/article_assets/2018/02/feb18-28-896845746-miragec-500x281.jpg 500w, /resources/images/article_assets/2018/02/feb18-28-896845746-miragec-700x394.jpg 700w, /resources/images/article_assets/2018/02/feb18-28-896845746-miragec-850x478.jpg 850w, /resources/images/article_assets/2018/02/feb18-28-896845746-miragec-1200x675.jpg 1200w, /resources/images/article_assets/2018/02/feb18-28-896845746-miragec.jpg 1200w&quot; alt=&quot;feb18-28-896845746-miragec&quot; width=&quot;1200&quot; height=&quot;675&quot; sizes=&quot;(min-width: 48em) 55.7291667vw, 97.3924381vw&quot;/&gt;&lt;br/&gt;miragec/Getty Images&lt;/div&gt;
&lt;p&gt;Are today’s businesses plagued by short-termism? The narrative is compelling. Executives cut investment to hit short-term earnings targets and trigger bonus payouts, the argument goes. They are egged on by short-term shareholders, who care only about making a quick buck, rather than growing the company for the long term. Moreover, long-term investments — such as reducing carbon emissions, developing blockbuster drugs, or training workers — benefit more than just shareholders. So, the charge that businesses are deprioritizing them leads to concerns that business no longer serves society.&lt;/p&gt;
&lt;p&gt;But despite how common the charge of short-termism has become, rigorous evidence of short-termism is surprisingly difficult to find. &lt;a href=&quot;https://faculty.fuqua.duke.edu/~charvey/Research/Published_Papers/P89_The_economic_implications.pdf&quot;&gt;Eighty percent of CFOs&lt;/a&gt; say that they’d cut investment to meet earnings targets — but what they say isn’t necessarily what they do. A recent &lt;a href=&quot;https://hbr.org/2017/02/finally-proof-that-managing-for-the-long-term-pays-off&quot;&gt;McKinsey study&lt;/a&gt; found that a “long-termism” index (including how much a firm invests) is correlated with future long-term stock returns, suggesting that long-termism pays off. But causality could easily run the other way. When a firm’s long-term outlook is worse, it &lt;em&gt;should&lt;/em&gt; invest less. This is taught in any Finance 101 class, and is presumably what McKinsey advises its clients.&lt;/p&gt;
&lt;p&gt;So does short-termism exist? And if it does, what’s the underlying cause?&lt;/p&gt;
&lt;p&gt;This is what Vivian Fang, Katharina Lewellen, and I set out to study. We wanted to see whether CEO pay packets encouraged short-termism — whether CEOs cut investment to pump up their company’s short-term stock price and then cash out their shares.&lt;/p&gt;
&lt;p&gt;But it’s extremely hard to document causation rather than simply correlation. Say we found that a CEO cuts investment and then sells their shares. One interpretation is that they cut investment to cash out. But another is that their firm’s long-term outlook is poor. This causes the CEO (correctly) to cut investment and also (rationally) to sell their shares. So, there’s correlation between investment and sales, but no causation.&lt;/p&gt;
&lt;p&gt;We studied not how many shares the CEO sells, but how many shares are scheduled to vest. Here’s the idea: CEOs’ shares come with a vesting or lock-up period. Only once this period is over can they sell — and they typically do, to diversify their personal investments. So, when the lock-up expires, the CEO is concerned about the stock price. But a lock-up expiring today is driven by the board’s decision several years ago to grant the shares. It’s unlikely that at the time the board would have known the firm’s present outlook. So the decision to grant shares back then, and thus the fact that shares are vesting today, is unlikely to be driven by factors that also determine investment. By focusing on when shares vest rather than when CEOs sell shares, we’re able to show causation — not just correlation — from CEOs’ personal wealth concerns to cuts in investment.&lt;/p&gt;
&lt;p&gt;We &lt;a href=&quot;https://academic.oup.com/rfs/article/30/7/2229/3058111/Equity-Vesting-and-Investment?guestAccessKey=50562c72-0c1c-4976-93a1-ab1b83f5a802&quot;&gt;find&lt;/a&gt; that the more equity CEOs have vesting in a given quarter, the more they cut investment. This result holds for five different measures of investment and for both vesting stock and vesting options. In addition, vesting equity is positively correlated with the CEO just barely meeting analyst earnings forecasts — suggesting that it causes the CEO to focus on short-term earnings rather than long-term investment.&lt;/p&gt;
&lt;p&gt;That result is consistent with short-term behavior, but we considered an alternative interpretation. Could the investment cuts actually be efficient? Perhaps stock price concerns are motivating, because they induce the CEO to make tough decisions, such as cutting wasteful investment. If so, we would expect the CEO to improve efficiency in other ways as well, such as increasing sales growth or cutting other expenses. And we find no evidence of that.&lt;/p&gt;
&lt;p&gt;Moreover, in a new &lt;a href=&quot;https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3037354&quot;&gt;paper&lt;/a&gt; with Vivian and Allen Huang, we aim to more precisely document the long-term consequences of short-term incentives. To do so, we study share buybacks and M&amp;amp;A, since — unlike with investment cuts — we can measure the long-term returns to these actions as they have a clear announcement date. We find that the more vesting equity the CEO has in a given quarter, the higher the likelihood is of both buybacks and M&amp;amp;A. Like investment cuts, buybacks and M&amp;amp;A could be &lt;a href=&quot;https://hbr.org/2017/09/the-case-for-stock-buybacks&quot;&gt;good&lt;/a&gt; rather than bad — but we find that vesting equity leads to the bad type. It is associated with higher short-term returns to both decisions, but significantly lower long-term returns. In short, vesting equity encourages CEOs to take actions with destructive long-term consequences.&lt;/p&gt;
&lt;p&gt;What does this all mean for CEO pay? There is widespread belief that CEO pay needs to be reformed, but proposed reforms typically focus on the &lt;em&gt;level&lt;/em&gt; of pay. Our research suggests that the &lt;em&gt;horizon &lt;/em&gt;of pay is more important — it affects the CEO’s incentives to invest, with major implications for the company’s long-run success and contribution to society. Cutting pay in half will win more headlines than extending the vesting horizon from, say, three to five years, but the latter is likely to be much more important. Indeed, the UK government’s &lt;a href=&quot;https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/584013/corporate-governance-reform-green-paper.pdf&quot;&gt;green paper on corporate governance&lt;/a&gt; has proposed this extension, and the Norwegian sovereign wealth fund’s &lt;a href=&quot;https://www.nbim.no/contentassets/bc85c448e6b24ff5a31088883695a344/ceo-remuneration---amp-1-17---norges-bank-investment-management.pdf&quot;&gt;remuneration principles&lt;/a&gt; advocates making the CEO a long-term shareholder.&lt;/p&gt;
&lt;p&gt;Cutting the level of CEO pay aims to redistribute the CEO’s share of the pie to other stakeholders. But since the CEO’s slice is small to begin with — in large U.S. firms, it accounts for just 0.05% of firm value — the result would be negligible. Increasing the horizon of pay will encourage the CEO to invest for the firm’s long-term success, growing the pie to the benefit of both shareholders and society.&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Fri, 02 Mar 2018 16:04:19 +0000</pubDate>
<dc:creator>joeyespo</dc:creator>
<og:type>article</og:type>
<og:image>https://hbr.org/resources/images/article_assets/2018/02/feb18-28-896845746-miragec.jpg</og:image>
<og:url>https://hbr.org/2018/02/study-when-ceos-equity-is-about-to-vest-they-cut-investment-to-boost-the-stock-price</og:url>
<og:description>It’s more (and more-rigorous) evidence of short-termism.</og:description>
<og:title>Study: When CEOs’ Equity Is About to Vest, They Cut Investment to Boost the Stock Price</og:title>
<dc:format>text/html</dc:format>
<dc:identifier>https://hbr.org/2018/02/study-when-ceos-equity-is-about-to-vest-they-cut-investment-to-boost-the-stock-price</dc:identifier>
</item>
<item>
<title>Governments have overestimated the economic returns of higher education</title>
<link>https://www.economist.com/blogs/economist-explains/2018/03/economist-explains-0</link>
<guid isPermaLink="true" >https://www.economist.com/blogs/economist-explains/2018/03/economist-explains-0</guid>
<description>&lt;p&gt;AUTOMATION and globalisation have brought drastic changes to Western labour markets. Middle-skilled jobs are disappearing fast. In America, wages for blue-collar workers have been largely stagnant since the 1970s, whereas those for university graduates have soared. Silicon Valley types frequently warn that advances in technology, especially in artificial intelligence, will be devastating for low-skilled workers. One prominent study, by Carl Benedikt Frey and Michael Osborne of Oxford University, estimated that 47% of jobs in America could be automated over the next two decades. The spectre of mass unemployment, along with increasing levels of income equality, has led many policymakers to see investment in university as crucial for economic prosperity.&lt;/p&gt;
&lt;p&gt;Governments have plenty of reason to be bullish about higher education. Perhaps the best piece of evidence they have of the wisdom of investing more in universities is the graduate-wage premium—the difference in wages between those with university degrees and those without. In their book “The Race between Education and Technology”, Claudia Goldin and Lawrence Katz of Harvard University point out that this premium fell during the first half of the 20th century in America as universities expanded enrolment, but started rising sharply around 1980. Although the premium has started to level off in recent years, the fact that university graduates still make around 70% more than non-graduates suggests that demand for skilled workers still far exceeds supply.&lt;/p&gt;
&lt;div class=&quot;newsletter-form newsletter-form--inline&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;newsletter-form__message&quot; readability=&quot;7&quot;&gt;&lt;strong&gt;Get our daily newsletter&lt;/strong&gt;
&lt;p&gt;Upgrade your inbox and get our Daily Dispatch and Editor's Picks.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;latest-updates-panel__container latest-updates-panel__container--blog-post&quot;&gt;

&lt;ul class=&quot;latest-updates-panel__body&quot;&gt;&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;How film studios chase Oscars&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;Theresa May strikes a more conciliatory tone in her latest Brexit speech&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;Self-driving cars need plenty of eyes on the road&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-1.5&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;28&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;A rabbi, an imam and a pastor walk onto a stage...&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-1.5&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;28&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;“Unsane” is a ludicrous, low-budget treat&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;President Donald Trump wants tariffs on steel and aluminium&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Yet governments may actually be overestimating the economic benefits of higher education. While universities are places of learning, they are also social sorting mechanisms. Part of the reason why university graduates earn more is because they are brighter and harder-working to begin with. Some professionals, such as doctors or engineers, do require an extensive amount of technical training, but many do not. The fact that humanities graduates, whose courses often have little to do with their subsequent work, tend to earn more if they come from more prestigious institutions suggests that one reason for going to university is to get ahead of peers in the job market. Bryan Caplan, an economist at George Mason University, argues that earning a degree is like “standing up at a concert”. Doing so improves your view of the show, but it comes at a cost to those sitting behind you.&lt;/p&gt;
&lt;p&gt;Across the OECD, a club of mostly rich countries, 43% of adults aged 25-34 now have tertiary degrees, up from 23% in 1995. Yet it is not clear to what extent these degrees have translated into economic gains. An analysis by &lt;em&gt;The Economist&lt;/em&gt; of American labour-market data finds that since 1970 the share of workers with degrees has increased in virtually every occupation. But in around half of occupations with better-educated workers average wages have still fallen in real terms. The ubiquity of the degree means that for many workers going to university is more of an obligation than a choice. Moreover, university does not suit all learners. Estimates of the economic returns to higher education tend to assume that all students will graduate. In practice, around 30% of students in Europe and 40% of students in America will drop out before earning their degrees. This means that the expected economic returns of a university education for average students are far lower than commonly understood. Governments are right to fret about training future workers, but they should look beyond just universities.&lt;/p&gt;
&lt;div class=&quot;blog-post__next-previous-wrapper&quot;&gt;&lt;a itemprop=&quot;url&quot; class=&quot;blog-post__next-previous-link blog-post__next-previous-link--previous&quot; href=&quot;https://www.economist.com/blogs/economist-explains/2018/03/economist-explains-2&quot;&gt;&lt;span class=&quot;blog-post__next-previous-label blog-post__next-previous-label--previous icon icon--left-thimphu&quot;&gt;Previous&lt;/span&gt;&lt;span class=&quot;blog-post__next-previous-title&quot;&gt;How film studios chase Oscars&lt;/span&gt;&lt;/a&gt;&lt;a itemprop=&quot;url&quot; class=&quot;blog-post__next-previous-link blog-post__next-previous-link--next&quot; href=&quot;https://www.economist.com/blogs/economist-explains/2018/03/economist-explains&quot;&gt;&lt;span class=&quot;blog-post__next-previous-label blog-post__next-previous-label--next icon icon--right-thimphu&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;blog-post__next-previous-title&quot;&gt;Why the war in Syria is hotting up&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 02 Mar 2018 16:03:44 +0000</pubDate>
<dc:creator>denzil_correa</dc:creator>
<og:description>Earning a degree is about signalling, and not just learning</og:description>
<og:image>https://cdn.static-economist.com/sites/default/files/20180303_BLP511.jpg</og:image>
<og:type>article</og:type>
<og:url>https://www.economist.com/blogs/economist-explains/2018/03/economist-explains-0</og:url>
<og:title>Why governments have overestimated the economic returns of higher education</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.economist.com/blogs/economist-explains/2018/03/economist-explains-0</dc:identifier>
</item>
<item>
<title>Understanding word vectors</title>
<link>https://gist.github.com/aparrish/2f562e3737544cf29aaf1af30362f469</link>
<guid isPermaLink="true" >https://gist.github.com/aparrish/2f562e3737544cf29aaf1af30362f469</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://assets-cdn.github.com&quot;/&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://avatars0.githubusercontent.com&quot;/&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://avatars1.githubusercontent.com&quot;/&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://avatars2.githubusercontent.com&quot;/&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://avatars3.githubusercontent.com&quot;/&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://github-cloud.s3.amazonaws.com&quot;/&gt;&lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://user-images.githubusercontent.com/&quot;/&gt;&lt;link crossorigin=&quot;anonymous&quot; href=&quot;https://assets-cdn.github.com/assets/frameworks-a4bf54bef6fb.css&quot; media=&quot;all&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link crossorigin=&quot;anonymous&quot; href=&quot;https://assets-cdn.github.com/assets/github-75cd24798d34.css&quot; media=&quot;all&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link crossorigin=&quot;anonymous&quot; href=&quot;https://assets-cdn.github.com/assets/site-40fcabbe0152.css&quot; media=&quot;all&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;/&gt;&lt;title&gt;Understanding word vectors: A tutorial for &quot;Reading and Writing Electronic Text,&quot; a class I teach at ITP. (Python 2.7) Code examples released under CC0 https://creativecommons.org/choose/zero/, other text released under CC BY 4.0 https://creativecommons.org/licenses/by/4.0/ · GitHub&lt;/title&gt;&lt;meta name=&quot;description&quot; content=&quot;GitHub is where people build software. More than 28 million people use GitHub to discover, fork, and contribute to over 79 million projects.&quot;/&gt;&lt;link rel=&quot;search&quot; type=&quot;application/opensearchdescription+xml&quot; href=&quot;/opensearch.xml&quot; title=&quot;GitHub&quot;/&gt;&lt;link rel=&quot;fluid-icon&quot; href=&quot;https://gist.github.com/fluidicon.png&quot; title=&quot;GitHub&quot;/&gt;&lt;meta property=&quot;fb:app_id&quot; content=&quot;1401488693436528&quot;/&gt;&lt;meta content=&quot;https://avatars1.githubusercontent.com/u/125839?s=400&amp;amp;v=4&quot; property=&quot;og:image&quot;/&gt;&lt;meta content=&quot;Gist&quot; property=&quot;og:site_name&quot;/&gt;&lt;meta content=&quot;object&quot; property=&quot;og:type&quot;/&gt;&lt;meta content=&quot;Understanding word vectors: A tutorial for &amp;quot;Reading and Writing Electronic Text,&amp;quot; a class I teach at ITP. (Python 2.7) Code examples released under CC0 https://creativecommons.org/choose/zero/, other text released under CC BY 4.0 https://creativecommons.org/licenses/by/4.0/&quot; property=&quot;og:title&quot;/&gt;&lt;meta content=&quot;https://gist.github.com/aparrish/2f562e3737544cf29aaf1af30362f469&quot; property=&quot;og:url&quot;/&gt;&lt;meta content=&quot;Understanding word vectors: A tutorial for &amp;quot;Reading and Writing Electronic Text,&amp;quot; a class I teach at ITP. (Python 2.7) Code examples released under CC0 https://creativecommons.org/choose/zero/, oth...&quot; property=&quot;og:description&quot;/&gt;&lt;link rel=&quot;assets&quot; href=&quot;https://assets-cdn.github.com/&quot;/&gt;&lt;meta name=&quot;pjax-timeout&quot; content=&quot;1000&quot;/&gt;&lt;meta name=&quot;request-id&quot; content=&quot;909F:449B:2DAEE4D:625530C:5A9AC6D5&quot; data-pjax-transient=&quot;&quot;/&gt;&lt;meta name=&quot;selected-link&quot; value=&quot;gist_code&quot; data-pjax-transient=&quot;&quot;/&gt;&lt;meta name=&quot;google-site-verification&quot; content=&quot;KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU&quot;/&gt;&lt;meta name=&quot;google-site-verification&quot; content=&quot;ZzhVyEFwb7w3e0-uOTltm8Jsck2F5StVihD0exw2fsA&quot;/&gt;&lt;meta name=&quot;google-site-verification&quot; content=&quot;GXs5KoUUkNCoaAZn7wPN-t01Pywp9M3sEjnt_3_ZWPc&quot;/&gt;&lt;meta name=&quot;google-analytics&quot; content=&quot;UA-3769691-4&quot;/&gt;&lt;meta content=&quot;collector.githubapp.com&quot; name=&quot;octolytics-host&quot;/&gt;&lt;meta content=&quot;gist&quot; name=&quot;octolytics-app-id&quot;/&gt;&lt;meta content=&quot;https://collector.githubapp.com/github-external/browser_event&quot; name=&quot;octolytics-event-url&quot;/&gt;&lt;meta content=&quot;909F:449B:2DAEE4D:625530C:5A9AC6D5&quot; name=&quot;octolytics-dimension-request_id&quot;/&gt;&lt;meta content=&quot;iad&quot; name=&quot;octolytics-dimension-region_edge&quot;/&gt;&lt;meta content=&quot;iad&quot; name=&quot;octolytics-dimension-region_render&quot;/&gt;&lt;meta content=&quot;https://gist.github.com/hydro_browser_events&quot; name=&quot;hydro-events-url&quot;/&gt;&lt;meta content=&quot;/&amp;lt;user-name&amp;gt;/&amp;lt;gist-id&amp;gt;&quot; data-pjax-transient=&quot;true&quot; name=&quot;analytics-location&quot;/&gt;&lt;meta class=&quot;js-ga-set&quot; name=&quot;dimension1&quot; content=&quot;Logged Out&quot;/&gt;&lt;meta content=&quot;true&quot; name=&quot;octolytics-dimension-public&quot;/&gt;&lt;meta content=&quot;46883140&quot; name=&quot;octolytics-dimension-gist_id&quot;/&gt;&lt;meta content=&quot;2f562e3737544cf29aaf1af30362f469&quot; name=&quot;octolytics-dimension-gist_name&quot;/&gt;&lt;meta content=&quot;false&quot; name=&quot;octolytics-dimension-anonymous&quot;/&gt;&lt;meta content=&quot;125839&quot; name=&quot;octolytics-dimension-owner_id&quot;/&gt;&lt;meta content=&quot;aparrish&quot; name=&quot;octolytics-dimension-owner_login&quot;/&gt;&lt;meta content=&quot;false&quot; name=&quot;octolytics-dimension-forked&quot;/&gt;&lt;meta class=&quot;js-ga-set&quot; name=&quot;dimension5&quot; content=&quot;public&quot;/&gt;&lt;meta class=&quot;js-ga-set&quot; name=&quot;dimension6&quot; content=&quot;owned&quot;/&gt;&lt;meta class=&quot;js-ga-set&quot; name=&quot;dimension7&quot; content=&quot;jupyter notebook&quot;/&gt;&lt;meta name=&quot;hostname&quot; content=&quot;gist.github.com&quot;/&gt;&lt;meta name=&quot;user-login&quot; content=&quot;&quot;/&gt;&lt;meta name=&quot;expected-hostname&quot; content=&quot;gist.github.com&quot;/&gt;&lt;meta name=&quot;js-proxy-site-detection-payload&quot; content=&quot;N2E4ZmNjNzZjZWY3NDc4MjA4YmRiODA5OTY3MDZlOThjYTAzNzVlN2U1OTFhYWM0Yjk0MjdiNTRiY2RiMzU1OXx7InJlbW90ZV9hZGRyZXNzIjoiNzIuMjAxLjU3LjI2IiwicmVxdWVzdF9pZCI6IjkwOUY6NDQ5QjoyREFFRTREOjYyNTUzMEM6NUE5QUM2RDUiLCJ0aW1lc3RhbXAiOjE1MjAwOTI4ODYsImhvc3QiOiJnaXRodWIuY29tIn0=&quot;/&gt;&lt;meta name=&quot;enabled-features&quot; content=&quot;UNIVERSE_BANNER,FREE_TRIALS,MARKETPLACE_INSIGHTS,MARKETPLACE_INSIGHTS_CONVERSION_PERCENTAGES,JS_ROLLUP&quot;/&gt;&lt;meta name=&quot;html-safe-nonce&quot; content=&quot;a369f816897bbc3ed77d88fc8cfdcdd80252d98d&quot;/&gt;&lt;meta http-equiv=&quot;x-pjax-version&quot; content=&quot;140acf1f9dd7c3093df7270447ec0615&quot;/&gt;&lt;link href=&quot;/aparrish.atom&quot; rel=&quot;alternate&quot; title=&quot;atom&quot; type=&quot;application/atom+xml&quot;/&gt;&lt;link crossorigin=&quot;anonymous&quot; href=&quot;https://assets-cdn.github.com/assets/gist-94e92bfbe232.css&quot; media=&quot;all&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;meta name=&quot;browser-stats-url&quot; content=&quot;https://api.github.com/_private/browser/stats&quot;/&gt;&lt;meta name=&quot;browser-errors-url&quot; content=&quot;https://api.github.com/_private/browser/errors&quot;/&gt;&lt;link rel=&quot;mask-icon&quot; href=&quot;https://assets-cdn.github.com/pinned-octocat.svg&quot; color=&quot;#000000&quot;/&gt;&lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; class=&quot;js-site-favicon&quot; href=&quot;https://assets-cdn.github.com/favicon.ico&quot;/&gt;&lt;meta name=&quot;theme-color&quot; content=&quot;#1e2327&quot;/&gt;&lt;meta name=&quot;u2f-support&quot; content=&quot;true&quot;/&gt;&lt;link rel=&quot;manifest&quot; href=&quot;/manifest.json&quot; crossorigin=&quot;use-credentials&quot;/&gt;&lt;/head&gt;&lt;body class=&quot;logged-out env-production&quot; id=&quot;readabilityBody&quot; readability=&quot;21.64175257732&quot;&gt;



&lt;div role=&quot;main&quot; class=&quot;application-main&quot;&gt;
&lt;div itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;div id=&quot;gist-pjax-container&quot; class=&quot;gist-content-wrapper&quot; data-pjax-container=&quot;&quot;&gt;


&lt;div class=&quot;container new-discussion-timeline experiment-repo-nav&quot;&gt;
&lt;div class=&quot;repository-content gist-content&quot;&gt;
&lt;div&gt;

&lt;div class=&quot;js-gist-file-update-container js-task-list-container file-box&quot;&gt;
&lt;div id=&quot;file-understanding-word-vectors-ipynb&quot; class=&quot;file&quot;&gt;

&lt;div itemprop=&quot;text&quot; class=&quot;blob-wrapper data type-jupyter-notebook&quot;&gt;
&lt;div class=&quot;render-wrapper&quot; readability=&quot;7.6291390728477&quot;&gt;
&lt;div class=&quot;render-container is-render-pending js-render-target&quot; data-identity=&quot;3908d166-057c-4af2-a1eb-fa11987e77be&quot; data-host=&quot;https://render.githubusercontent.com&quot; data-type=&quot;ipynb&quot; readability=&quot;11.920529801325&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;octospinner&quot; height=&quot;64&quot; src=&quot;https://assets-cdn.github.com/images/spinners/octocat-spinner-128.gif&quot; width=&quot;64&quot;/&gt;&lt;div class=&quot;render-viewer-error&quot; readability=&quot;6.4444444444444&quot;&gt;Sorry, something went wrong. &lt;a href=&quot;https://gist.github.com/aparrish/2f562e3737544cf29aaf1af30362f469&quot;&gt;Reload?&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;Sorry, we cannot display this file.&lt;/p&gt;
&lt;p&gt;Sorry, this file is invalid so it cannot be displayed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can't perform that action at this time.&lt;/p&gt;
&lt;div class=&quot;js-stale-session-flash stale-session-flash flash flash-warn flash-banner d-none&quot;&gt;&lt;span class=&quot;signed-in-tab-flash&quot;&gt;You signed in with another tab or window. &lt;a href=&quot;https://gist.github.com/aparrish/2f562e3737544cf29aaf1af30362f469&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt; &lt;span class=&quot;signed-out-tab-flash&quot;&gt;You signed out in another tab or window. &lt;a href=&quot;https://gist.github.com/aparrish/2f562e3737544cf29aaf1af30362f469&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;&lt;/div&gt;

&lt;/body&gt;</description>
<pubDate>Fri, 02 Mar 2018 12:57:50 +0000</pubDate>
<dc:creator>jxub</dc:creator>
<og:image>https://avatars1.githubusercontent.com/u/125839?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>Understanding word vectors: A tutorial for &quot;Reading and Writing Electronic Text,&quot; a class I teach at ITP. (Python 2.7) Code examples released under CC0 https://creativecommons.org/choose/zero/, other text released under CC BY 4.0 https://creativecommons.org/licenses/by/4.0/</og:title>
<og:url>https://gist.github.com/aparrish/2f562e3737544cf29aaf1af30362f469</og:url>
<og:description>Understanding word vectors: A tutorial for &quot;Reading and Writing Electronic Text,&quot; a class I teach at ITP. (Python 2.7) Code examples released under CC0 https://creativecommons.org/choose/zero/, oth...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://gist.github.com/aparrish/2f562e3737544cf29aaf1af30362f469</dc:identifier>
</item>
<item>
<title>Uber, Lyft Drivers Earning a Median Profit of $3.37 per Hour, Study Says</title>
<link>https://www.npr.org/sections/thetwo-way/2018/03/02/590168381/uber-lyft-drivers-earning-a-median-profit-of-3-37-per-hour-study-says</link>
<guid isPermaLink="true" >https://www.npr.org/sections/thetwo-way/2018/03/02/590168381/uber-lyft-drivers-earning-a-median-profit-of-3-37-per-hour-study-says</guid>
<description>&lt;div id=&quot;res590173439&quot; class=&quot;bucketwrap image large&quot;&gt;
&lt;div class=&quot;imagewrap&quot; data-crop-type=&quot;&quot;&gt;&lt;img src=&quot;https://media.npr.org/assets/img/2018/03/02/gettyimages-696041476_wide-75a4b39a28d9972b0ab887150b4a28b5efd56555-s1100-c15.jpg&quot; data-original=&quot;https://media.npr.org/assets/img/2018/03/02/gettyimages-696041476_wide-75a4b39a28d9972b0ab887150b4a28b5efd56555-s1100.jpg&quot; class=&quot;img lazyOnLoad&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;
&lt;div class=&quot;credit-caption&quot;&gt;
&lt;div class=&quot;caption-wrap&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;caption&quot; aria-label=&quot;Image caption&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;An Uber car waits for a client in Manhattan in June 2017. A study from MIT says most drivers are making less than minimum wage. &lt;strong class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;Spencer Platt/Getty Images&lt;/strong&gt; &lt;strong class=&quot;hide-caption&quot;&gt;hide caption&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;strong class=&quot;toggle-caption&quot;&gt;toggle caption&lt;/strong&gt;&lt;/div&gt;
&lt;span class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;Spencer Platt/Getty Images&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;enlarge_measure&quot;&gt;
&lt;div class=&quot;img_wrap&quot;&gt;&lt;img data-original=&quot;https://media.npr.org/assets/img/2018/03/02/gettyimages-696041476_wide-75a4b39a28d9972b0ab887150b4a28b5efd56555-s1200.jpg&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;enlarge_html&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;image_data&quot; readability=&quot;8&quot;&gt;
&lt;p class=&quot;caption&quot;&gt;An Uber car waits for a client in Manhattan in June 2017. A study from MIT says most drivers are making less than minimum wage.&lt;/p&gt;
&lt;span class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;Spencer Platt/Getty Images&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The vast majority of Uber and Lyft drivers are earning less than minimum wage and almost a third of them are actually losing money by driving, according to researchers at the Massachusetts Institute of Technology.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ceepr.mit.edu/files/papers/2018-005-Brief.pdf&quot;&gt;A working paper&lt;/a&gt; by Stephen M. Zoepf, Stella Chen, Paa Adu and Gonzalo Pozo at MIT's Center for Energy and Environmental Policy Research says the median pretax profit earned from driving is $3.37 per hour after taking expenses into account. Seventy-four percent of drivers earn less than their state's minimum wage, the researchers say.&lt;/p&gt;
&lt;p&gt;Thirty percent of drivers &quot;are actually losing money once vehicle expenses are included,&quot; the authors found.&lt;/p&gt;
&lt;div id=&quot;res590169377&quot; class=&quot;bucketwrap internallink insettwocolumn inset2col&quot;&gt;
&lt;div class=&quot;bucket img&quot;&gt;&lt;a id=&quot;featuredStackSquareImage531642304&quot; href=&quot;https://www.npr.org/sections/alltechconsidered/2017/06/09/531642304/the-faceless-boss-a-look-into-the-uber-driver-workplace&quot; data-metrics=&quot;{&amp;quot;category&amp;quot;:&amp;quot;Story to Story&amp;quot;,&amp;quot;action&amp;quot;:&amp;quot;Click Internal Link&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;https:\/\/www.npr.org\/sections\/alltechconsidered\/2017\/06\/09\/531642304\/the-faceless-boss-a-look-into-the-uber-driver-workplace&amp;quot;}&quot;&gt;&lt;img src=&quot;https://media.npr.org/assets/img/2017/06/08/06062017_reninger_uber_npr_1317-edit_sq-9763349e731c1df64574ca31d432444e3152caa3-s100-c15.jpg&quot; data-original=&quot;https://media.npr.org/assets/img/2017/06/08/06062017_reninger_uber_npr_1317-edit_sq-9763349e731c1df64574ca31d432444e3152caa3-s100.jpg&quot; class=&quot;img lazyOnLoad&quot; alt=&quot;The Faceless Boss: A Look Into The Uber Driver Workplace&quot;/&gt;&lt;/a&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The conclusions are based on surveys of more than 1,100 drivers who told researchers about their revenue, how many miles they drove and what type of car they used. The study's authors then combined that with typical costs associated with a certain car's insurance, maintenance, gas and depreciation, which was gathered in data from Edmunds, Kelley Blue Book and the Environmental Protection Agency.&lt;/p&gt;
&lt;p&gt;Drivers earning the median amount of revenue are getting $0.59 per mile driven, researchers say, but expenses work out to $0.30 per mile, meaning a driver makes a median profit of $0.29 for each mile.&lt;/p&gt;
&lt;p&gt;An Uber spokesperson responded to the finding in a &lt;a href=&quot;https://www.theguardian.com/technology/2018/mar/01/uber-lyft-driver-wages-median-report&quot;&gt;statement to The Guardian:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote class=&quot;edTag&quot; readability=&quot;5.5&quot;&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;&quot;While the paper is certainly attention grabbing, its methodology and findings are deeply flawed. We've reached out to the paper's authors to share our concerns and suggest ways we might work together to refine their approach.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;The newspaper also noted, &quot;Other &lt;a href=&quot;https://web.stanford.edu/~diamondr/UberPayGap.pdf&quot;&gt;studies&lt;/a&gt; and &lt;a href=&quot;https://therideshareguy.com/2018-uber-and-lyft-driver-survey-results-the-rideshare-guy/&quot;&gt;surveys&lt;/a&gt; have found higher hourly earnings for Uber drivers, in part because there are numerous ways to report income and to calculate costs and time and miles spent on the job.&quot;&lt;/p&gt;
&lt;aside id=&quot;ad-backstage-wrap&quot; aria-label=&quot;advertisement&quot;&gt;
&lt;/aside&gt;&lt;p&gt;MIT authors also calculated that it's possible for billions of dollars in driver profits to be untaxed because &quot;nearly half of drivers can declare a loss on their taxes.&quot; Drivers are able to use the IRS standard mileage rate deduction to write off some of the costs of using a car for business. In 2016, that number was &lt;a href=&quot;https://www.irs.gov/tax-professionals/standard-mileage-rates&quot;&gt;$0.54 per mile.&lt;/a&gt; &quot;Because of this deduction, most ride-hailing drivers are able to declare profits that are substantially lower,&quot; researchers write.&lt;/p&gt;
&lt;p&gt;&quot;If drivers are fully able to capitalize on these losses for tax purposes, 73.5% of an estimated U.S. market $4.8B in annual ride-hailing driver profit is untaxed,&quot; they add.&lt;/p&gt;
&lt;div id=&quot;res590169840&quot; class=&quot;bucketwrap internallink insettwocolumn inset2col&quot;&gt;
&lt;div class=&quot;bucket img&quot;&gt;&lt;a id=&quot;featuredStackSquareImage579980199&quot; href=&quot;https://www.npr.org/2018/02/02/579980199/when-a-full-time-job-isnt-enough-to-make-it&quot; data-metrics=&quot;{&amp;quot;category&amp;quot;:&amp;quot;Story to Story&amp;quot;,&amp;quot;action&amp;quot;:&amp;quot;Click Internal Link&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;https:\/\/www.npr.org\/2018\/02\/02\/579980199\/when-a-full-time-job-isnt-enough-to-make-it&amp;quot;}&quot;&gt;&lt;img src=&quot;https://media.npr.org/assets/img/2018/02/02/gettyimages-106683226-edit_sq-56acb5cf99123b4ff72d9c559f6072cee4d3f774-s100-c15.jpg&quot; data-original=&quot;https://media.npr.org/assets/img/2018/02/02/gettyimages-106683226-edit_sq-56acb5cf99123b4ff72d9c559f6072cee4d3f774-s100.jpg&quot; class=&quot;img lazyOnLoad&quot; alt=&quot;When A Full-Time Job Isn't Enough To Make It&quot;/&gt;&lt;/a&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;According to MIT researchers, 80 percent of drivers said they work less than 40 hours per week. An NPR/Marist poll in January found that 1 in 5 jobs in the U.S. is &lt;a href=&quot;https://www.npr.org/series/579833363/the-rise-of-the-contract-workers&quot;&gt;held by a contract worker;&lt;/a&gt; contractors often juggle multiple part-time jobs.&lt;/p&gt;
&lt;p&gt;Uber and Lyft both have &lt;a href=&quot;https://www.npr.org/2017/12/11/569462645/in-effort-to-court-drivers-lyft-offering-education-discounts&quot;&gt;&quot;notoriously high&quot;&lt;/a&gt; turnover rates among drivers. A report last year said just &lt;a href=&quot;https://www.cnbc.com/2017/04/20/only-4-percent-of-uber-drivers-remain-after-a-year-says-report.html&quot;&gt;4 percent&lt;/a&gt; of Uber drivers work for the company for at least a year.&lt;/p&gt;
&lt;p&gt;NPR's &lt;a href=&quot;https://www.npr.org/2017/12/11/569462645/in-effort-to-court-drivers-lyft-offering-education-discounts&quot;&gt;Aarti Shahani reported&lt;/a&gt; in December that Lyft began a program to give drivers &quot;access to discounted GED and college courses online&quot; in a recruiting effort.&lt;/p&gt;
&lt;p&gt;It was only last year that Uber introduced the option to tip drivers into its app for customers. &lt;a href=&quot;https://www.recode.net/2017/10/7/16363448/uber-lyft-driver-features-app&quot;&gt;Recode listed&lt;/a&gt; the initiatives Uber rolled out in 2017 in order to appeal to drivers, including 24-hour phone support, paid wait time and paying drivers if customers cancel after a certain amount of time.&lt;/p&gt;
&lt;p&gt;Both Uber and Lyft have been fighting legal battles for years against initiatives to classify their drivers as &quot;employees&quot; instead of &quot;independent contractors&quot; — meaning drivers don't receive benefits like health care or sick leave.&lt;/p&gt;
</description>
<pubDate>Fri, 02 Mar 2018 12:54:49 +0000</pubDate>
<dc:creator>javabank</dc:creator>
<og:title>Uber, Lyft Drivers Earning A Median Profit Of $3.37 Per Hour, Study Says</og:title>
<og:url>https://www.npr.org/sections/thetwo-way/2018/03/02/590168381/uber-lyft-drivers-earning-a-median-profit-of-3-37-per-hour-study-says</og:url>
<og:type>article</og:type>
<og:description>Researchers at MIT said 30 percent of Uber and Lyft drivers are actually losing money after taking car expenses into account, while most drivers earn less than minimum wage.</og:description>
<og:image>https://media.npr.org/assets/img/2018/03/02/gettyimages-696041476_wide-75a4b39a28d9972b0ab887150b4a28b5efd56555.jpg?s=1400</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.npr.org/sections/thetwo-way/2018/03/02/590168381/uber-lyft-drivers-earning-a-median-profit-of-3-37-per-hour-study-says</dc:identifier>
</item>
<item>
<title>Go best practices, six years in (2016)</title>
<link>https://peter.bourgon.org/go-best-practices-2016/</link>
<guid isPermaLink="true" >https://peter.bourgon.org/go-best-practices-2016/</guid>
<description>&lt;p&gt;(&lt;em&gt;This article was originally a talk at QCon London 2016. &lt;a href=&quot;https://www.infoq.com/presentations/go-patterns&quot;&gt;Video and slides here&lt;/a&gt;.&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;In 2014, I gave a talk at the inaugural GopherCon titled &lt;a href=&quot;https://peter.bourgon.org/go-in-production&quot;&gt;Best Practices in Production Environments&lt;/a&gt;. We were early adopters at &lt;a href=&quot;https://soundcloud.com&quot;&gt;SoundCloud&lt;/a&gt;, and by that point had been writing, running, and maintaining Go in production in one form or another for nearly 2 years. We had learned a few things, and I tried to distill and convey some of those lessons.&lt;/p&gt;
&lt;p&gt;Since then, I’ve continued working in Go full-time, later on the activities and infrastructure teams at SoundCloud, and now at &lt;a href=&quot;https://weave.works&quot;&gt;Weaveworks&lt;/a&gt;, on &lt;a href=&quot;https://weave.works/products/weave-scope&quot;&gt;Weave Scope&lt;/a&gt; and &lt;a href=&quot;https://github.com/weaveworks/mesh&quot;&gt;Weave Mesh&lt;/a&gt;. I’ve also been working hard on &lt;a href=&quot;https://github.com/go-kit/kit&quot;&gt;Go kit&lt;/a&gt;, an open-source toolkit for microservices. And all the while, I’ve been active in the Go community, meeting lots of developers at meetups and conferences throughout Europe and the US, and collecting their stories—both successes and failures.&lt;/p&gt;
&lt;p&gt;With the &lt;a href=&quot;https://blog.golang.org/6years&quot;&gt;6th anniversary&lt;/a&gt; of Go’s release in November of 2015, I thought back to that first talk. Which of those best practices have stood the test of time? Which have become outmoded or counterproductive? Are there any new practices that have emerged? In March, I had the opportunity to give a talk at &lt;a href=&quot;https://qconlondon.com&quot;&gt;QCon London&lt;/a&gt; where I reviewed the best practices from 2014 and took a look at how Go has evolved in 2016. Here’s the meat of that talk.&lt;/p&gt;
&lt;p&gt;I’ve highlighted the key takeaways as linkable Top Tips.&lt;/p&gt;

&lt;div class=&quot;toptip&quot; readability=&quot;6.625&quot;&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-0&quot;&gt;✪&lt;/a&gt;  &lt;strong&gt;Top Tip&lt;/strong&gt; — Use Top Tips to level up your Go game.&lt;/div&gt;
&lt;p&gt;And a quick table of contents…&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#development-environment&quot;&gt;Development environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#repository-structure&quot;&gt;Repository structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#formatting-and-style&quot;&gt;Formatting and style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#configuration&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#program-design&quot;&gt;Program design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#logging-and-instrumentation&quot;&gt;Logging and instrumentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#testing&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#dependency-management&quot;&gt;Dependency management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#build-and-deploy&quot;&gt;Build and deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Go has development environment conventions centered around the GOPATH. In 2014 I advocated strongly for a single global GOPATH. My positioned has softened a bit. I still think that’s the best idea, all else equal, but depending on your project or team, other things may make sense, too.&lt;/p&gt;
&lt;p&gt;If you or your organization produces primarily binaries, you might find some advantages with a per-project GOPATH. There’s a new tool, &lt;a href=&quot;https://getgb.io&quot;&gt;gb&lt;/a&gt;, from Dave Cheney and contributors, which replaces the standard go tooling for this use-case. A lot of people are reporting a lot of success with it.&lt;/p&gt;
&lt;p&gt;Some Go developers use a two-entry GOPATH, e.g. &lt;code&gt;$HOME/go/external:$HOME/go/internal&lt;/code&gt;. The go tool has always known how to deal with this: go get will fetch into the first path, so it can be useful if you need strict separation of third-party vs. internal code.&lt;/p&gt;
&lt;p&gt;One thing I’ve noticed some developers forget to do: put GOPATH/bin into your PATH. This allows you to easily run binaries you get via go get, and makes the (preferred) go install mechanism of building code easier to work with. No reason not to do it.&lt;/p&gt;

&lt;div class=&quot;toptip&quot; readability=&quot;7.741935483871&quot;&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-1&quot;&gt;✪&lt;/a&gt;  &lt;strong&gt;Top Tip&lt;/strong&gt; — Put $GOPATH/bin in your $PATH, so installed binaries are easily accessible.&lt;/div&gt;
&lt;p&gt;Regarding editors and IDEs, there’s been a lot of steady improvement. If you’re a vim warrior, life has never been better: thanks to the tireless and extremely capable efforts of &lt;a href=&quot;https://twitter.com/fatih&quot;&gt;Fatih Arslan&lt;/a&gt;, the &lt;a href=&quot;https://github.com/fatih/vim-go&quot;&gt;vim-go&lt;/a&gt; plugin is in an absolutely exceptional state, best-in-class. I’m not as familiar with emacs, but &lt;a href=&quot;https://twitter.com/dominikhonnef&quot;&gt;Dominik Honnef’s&lt;/a&gt; &lt;a href=&quot;https://github.com/dominikh/go-mode.el&quot;&gt;go-mode.el&lt;/a&gt; is still the big kahuna there.&lt;/p&gt;
&lt;p&gt;Moving up the stack, lots of folks are still using and having success with &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt; + &lt;a href=&quot;https://github.com/DisposaBoy/GoSublime&quot;&gt;GoSublime&lt;/a&gt;. And it’s hard to beat the speed. But more attention seems to be paid lately to the Electron-powered editors. &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; + &lt;a href=&quot;https://atom.io/packages/go-plus&quot;&gt;go-plus&lt;/a&gt; has many fans, especially those developers that have to frequently switch languages to JavaScript. The dark horse has been &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; + &lt;a href=&quot;https://github.com/Microsoft/vscode-go&quot;&gt;vscode-go&lt;/a&gt;, which, while slower than Sublime Text, is noticably faster than Atom, and has excellent default support for important-to-me features, like click-to-definition. I’ve been using it daily for about half a year now, after being introduced to it by &lt;a href=&quot;https://github.com/tecbot&quot;&gt;Thomas Adam&lt;/a&gt;. Lots of fun.&lt;/p&gt;
&lt;p&gt;In terms of full IDEs, the purpose-built &lt;a href=&quot;https://github.com/visualfc/liteide&quot;&gt;LiteIDE&lt;/a&gt; has been receiving regular updates and certainly has its share of fans. And the &lt;a href=&quot;https://github.com/go-lang-plugin-org/go-lang-idea-plugin&quot;&gt;IntelliJ Go plugin&lt;/a&gt; has been consistently improving as well.&lt;/p&gt;


&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update&lt;/strong&gt;: Ben Johnson has written an excellent article titled &lt;a href=&quot;https://medium.com/@benbjohnson/standard-package-layout-7cdbc8391fc1&quot;&gt;Standard Package Layout&lt;/a&gt; with great advice for typical line-of-business applications.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update&lt;/strong&gt;: Tim Hockin’s &lt;a href=&quot;https://github.com/thockin/go-build-template&quot;&gt;go-build-template&lt;/a&gt;, adapted slightly, has proven to be a better general model. I’ve adapted this section since its original publication.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We’ve had a lot of time for projects to mature, and some patterns have emerged. While I believe there is no single best repo structure, I think there is a good general model for many types of projects. It’s especially useful for projects that provide both binaries and libraries, or combine Go code with other, non-Go assets.&lt;/p&gt;
&lt;p&gt;The basic idea is to have two top-level directories, pkg and cmd. Underneath pkg, create directories for each of your libraries. Underneath cmd, create directories for each of your binaries. All of your Go code should live exclusively in one of these locations.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;github.com/peterbourgon/foo/
  circle.yml
  Dockerfile
  cmd/
    foosrv/
      main.go
    foocli/
      main.go
  pkg/
    fs/
      fs.go
      fs_test.go
      mock.go
      mock_test.go
    merge/
      merge.go
      merge_test.go
    api/
      api.go
      api_test.go
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;All of your artifacts remain go gettable. The paths may be slightly longer, but the nomenclature is familiar to other Go developers. And you have space and isolation for non-Go assets. For example, Javascript can live in a client or ui subdirectory. Dockerfiles, continuous integration configs, or other build helpers can live in the project root or in a build subdirectory. And runtime configuration like Kubernetes manifests can have a home, too.&lt;/p&gt;

&lt;div class=&quot;toptip&quot; readability=&quot;6.7920792079208&quot;&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-2&quot;&gt;✪&lt;/a&gt;  &lt;strong&gt;Top Tip&lt;/strong&gt; — Put library code under a pkg/ subdirectory. Put binaries under a cmd/ subdirectory.&lt;/div&gt;
&lt;p&gt;Of course, you’ll still use fully-qualified import paths. That is, the main.go in cmd/foosrv should &lt;code&gt;import &quot;github.com/peterbourgon/foo/pkg/fs&quot;&lt;/code&gt;. And beware of the &lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#dependency-management&quot;&gt;ramifications of including a vendor dir&lt;/a&gt; for downstream users.&lt;/p&gt;

&lt;div class=&quot;toptip&quot; readability=&quot;6.7558139534884&quot;&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-3&quot;&gt;✪&lt;/a&gt;  &lt;strong&gt;Top Tip&lt;/strong&gt; — Always use fully-qualified import paths. Never use relative imports.&lt;/div&gt;
&lt;p&gt;This little bit of structure makes us play nice in the broader ecosystem, and hopefully continues to ensure our code is easy to consume.&lt;/p&gt;


&lt;p&gt;Things have stayed largely the same here. This is one area that Go has gotten quite right, and I really appreciate the consensus in the community and stability in the language.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/golang/go/wiki/CodeReviewComments&quot;&gt;Code Review Comments&lt;/a&gt; are great, and should be the minimum set of critera you enforce during code review. And when there are disputes or inconsistencies in names, Andrew Gerrand’s &lt;a href=&quot;https://talks.golang.org/2014/names.slide&quot;&gt;idiomatic naming conventions&lt;/a&gt; are a great set of guidelines.&lt;/p&gt;


&lt;p&gt;And in terms of tooling, things have only gotten better. You should configure your editor to invoke gofmt—or, better, &lt;a href=&quot;https://github.com/bradfitz/goimports&quot;&gt;goimports&lt;/a&gt;—on save. (At this point, I hope that’s not in any way controversial.) The go vet tool produces (&lt;a href=&quot;https://github.com/golang/go/issues/9171&quot;&gt;almost&lt;/a&gt;!) no false positives, so you might consider making it part of your precommit hook. And check out the excellent &lt;a href=&quot;https://github.com/alecthomas/gometalinter&quot;&gt;gometalinter&lt;/a&gt; for linting concerns. This &lt;em&gt;can&lt;/em&gt; produce false positives, so it’s not a bad idea to &lt;a href=&quot;https://github.com/weaveworks/mesh/blob/master/lint&quot;&gt;encode your own conventions&lt;/a&gt; somehow.&lt;/p&gt;


&lt;p&gt;Configuration is the surface area between the runtime environment and the process. It should be explicit and well-documented. I still use and recommend package flag, but I admit at this point I wish it were less esoteric. I wish it had standard, getopts-style long- and short-form argument syntax, and I wish its usage text were much more compact.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://12factor.net&quot;&gt;12-factor apps&lt;/a&gt; encourage you to use environment vars for configuration, and I think that’s fine, &lt;em&gt;provided each var is also defined as a flag&lt;/em&gt;. Explicitness is important: changing the runtime behavior of an application should happen in ways that are discoverable and documented.&lt;/p&gt;
&lt;p&gt;I said it in 2014 but I think it’s important enough to say again: &lt;a href=&quot;https://robots.thoughtbot.com/where-to-define-command-line-flags-in-go&quot;&gt;define and parse your flags in func main&lt;/a&gt;. Only func main has the right to decide the flags that will be available to the user. If your library code wants to parameterize its behavior, those parameters should be part of type constructors. Moving configuration to package globals has the illusion of convenience, but it’s a false economy: doing so breaks code modularity, makes it more difficult for developers or future maintainers to understand dependency relationships, and makes writing independent, parallelizable tests much more difficult.&lt;/p&gt;

&lt;div class=&quot;toptip&quot; readability=&quot;6.7789473684211&quot;&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-5&quot;&gt;✪&lt;/a&gt;  &lt;strong&gt;Top Tip&lt;/strong&gt; — Only func main has the right to decide which flags are available to the user.&lt;/div&gt;
&lt;p&gt;I think there’s a great opportunity for a well-scoped flags package to emerge from the community, combining all of these characteristics. Maybe it already exists; if so, &lt;a href=&quot;https://twitter.com/peterbourgon&quot;&gt;please let me know&lt;/a&gt;. I’d certainly use it.&lt;/p&gt;


&lt;p&gt;In the talk, I used configuration as a jumping-off point, to discuss a few other issues of program design. (I didn’t cover this in the 2014 version.) To start, let’s take a look at constructors. If we are properly parameterizing all of our dependencies, our constructors can get quite large.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;foo, err := newFoo(
    *fooKey,
    bar,
    100 * time.Millisecond,
    nil,
)
if err != nil {
    log.Fatal(err)
}
defer foo.close()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Sometimes this kind of construction is best expressed with a config object: a struct parameter to a constructor that takes &lt;em&gt;optional&lt;/em&gt; parameters to the constructed object. Let’s assume fooKey is a required parameter, and everything else either has a sensible default or is optional. Often, I see projects construct config objects in a sort of piecemeal way.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// Don't do this.
cfg := fooConfig{}
cfg.Bar = bar
cfg.Period = 100 * time.Millisecond
cfg.Output = nil

foo, err := newFoo(*fooKey, cfg)
if err != nil {
    log.Fatal(err)
}
defer foo.close()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But it’s considerably nicer to leverage so-called struct initialization syntax to construct the object all at once, in a single statement.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// This is better.
cfg := fooConfig{
    Bar:    bar,
    Period: 100 * time.Millisecond,
    Output: nil,
}

foo, err := newFoo(*fooKey, cfg)
if err != nil {
    log.Fatal(err)
}
defer foo.close()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;No statements go by where the object is in an intermediate, invalid state. And all of the fields are nicely delimited and indented, mirroring the fooConfig definition.&lt;/p&gt;
&lt;p&gt;Notice we construct and then immediately use the cfg object. In this case we can save another degree of intermediate state, and another line of code, by inlining the struct declaration into the newFoo constructor directly.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// This is even better.
foo, err := newFoo(*fooKey, fooConfig{
    Bar:    bar,
    Period: 100 * time.Millisecond,
    Output: nil,
})
if err != nil {
    log.Fatal(err)
}
defer foo.close()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Nice.&lt;/p&gt;

&lt;div class=&quot;toptip&quot; readability=&quot;7.8167938931298&quot;&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-6&quot;&gt;✪&lt;/a&gt;  &lt;strong&gt;Top Tip&lt;/strong&gt; — Use struct literal initialization to avoid invalid intermediate state. Inline struct declarations where possible.&lt;/div&gt;
&lt;p&gt;Let’s turn to the subject of sensible defaults. Observe that the Output parameter is something that can take a nil value. For the sake of argument, assume it’s an io.Writer. If we don’t do anything special, when we want to use it in our foo object, we’ll have to first perform a nil check.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;func (f *foo) process() {
    if f.Output != nil {
        fmt.Fprintf(f.Output, &quot;start\n&quot;)
    }
    // ...
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That’s not great. It’s much safer, and nicer, to be able to use output without having to check it for existence.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;func (f *foo) process() {
     fmt.Fprintf(f.Output, &quot;start\n&quot;)
     // ...
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So we should provide a usable default here. With interface types, one good way is to pass something that provides a no-op implementation of the interface. And it turns out that the stdlib ioutil package comes with a no-op io.Writer, called ioutil.Discard.&lt;/p&gt;

&lt;div class=&quot;toptip&quot; readability=&quot;6.695652173913&quot;&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-7&quot;&gt;✪&lt;/a&gt;  &lt;strong&gt;Top Tip&lt;/strong&gt; — Avoid nil checks via default no-op implementations.&lt;/div&gt;
&lt;p&gt;We could pass that into the fooConfig object, but that’s still fragile. If the caller forgets to do it at the callsite, we’ll still end up with a nil parameter. So, instead, we can create a sort of safety within the constructor.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;func newFoo(..., cfg fooConfig) *foo {
    if cfg.Output == nil {
        cfg.Output = ioutil.Discard
    }
    // ...
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is just an application of the Go idiom &lt;em&gt;make the zero value useful&lt;/em&gt;. We allow the zero value of the parameter (nil) to yield good default behavior (no-op).&lt;/p&gt;

&lt;div class=&quot;toptip&quot; readability=&quot;7.68&quot;&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-8&quot;&gt;✪&lt;/a&gt;  &lt;strong&gt;Top Tip&lt;/strong&gt; — Make the zero value useful, especially in config objects.&lt;/div&gt;
&lt;p&gt;Let’s revisit the constructor. The parameters fooKey, bar, period, output are all &lt;em&gt;dependencies&lt;/em&gt;. The foo object &lt;em&gt;depends&lt;/em&gt; on each of them in order to start and run successfully. If there’s a single lesson I’ve learned from writing Go code in the wild and observing large Go projects on a daily basis for the past six years, it is this: &lt;strong&gt;make dependencies explicit&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;toptip bigdeal&quot; readability=&quot;6.5333333333333&quot;&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-9&quot;&gt;✪&lt;/a&gt;  &lt;strong&gt;Top Tip&lt;/strong&gt; — Make dependencies explicit!&lt;/div&gt;
&lt;p&gt;An incredible amount of maintenance burden, confusion, bugs, and unpaid technical debt can, I believe, be traced back to ambiguous or implicit dependencies. Consider this method on the type foo.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;func (f *foo) process() {
    fmt.Fprintf(f.Output, &quot;start\n&quot;)
    result := f.Bar.compute()
    log.Printf(&quot;bar: %v&quot;, result) // Whoops!
    // ...
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;fmt.Printf is self-contained and doesn’t affect or depend on global state; in functional terms, it has something like &lt;em&gt;referential transparency&lt;/em&gt;. So it is not a dependency. Obviously, f.Bar is a dependency. And, interestingly, log.Printf acts on a package-global logger object, it’s just obscured behind the free function Printf. So it, too, is a dependency.&lt;/p&gt;
&lt;p&gt;What do we do with dependencies? &lt;strong&gt;We make them explicit.&lt;/strong&gt; Because the process method prints to a log as part of its work, either the method or the foo object itself needs to take a logger object as a dependency. For example, log.Printf should become f.Logger.Printf.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;func (f *foo) process() {
    fmt.Fprintf(f.Output, &quot;start\n&quot;)
    result := f.Bar.compute()
    f.Logger.Printf(&quot;bar: %v&quot;, result) // Better.
    // ...
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We’re conditioned to think of certain classes of work, like writing to a log, as incidental. So we’re happy to leverage helpers, like package-global loggers, to reduce the apparent burden. But logging, like instrumentation, is often crucial to the operation of a service. And hiding dependencies in the global scope can and does come back to bite us, whether it’s something as seemingly benign as a logger, or perhaps another, more important, domain-specific component that we haven’t bothered to parameterize. Save yourself the future pain by being strict: make &lt;em&gt;all&lt;/em&gt; your dependencies explicit.&lt;/p&gt;

&lt;div class=&quot;toptip&quot; readability=&quot;11.716535433071&quot;&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-10&quot;&gt;✪&lt;/a&gt;  &lt;strong&gt;Top Tip&lt;/strong&gt; — Loggers are dependencies, just like references to other components, database handles, commandline flags, etc.&lt;/div&gt;
&lt;p&gt;Of course, we should also be sure to take a sensible default for our logger.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;func newFoo(..., cfg fooConfig) *foo {
    // ...
    if cfg.Logger == nil {
        cfg.Logger = log.New(ioutil.Discard, ...)
    }
    // ...
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; for more detail on this and the subject of magic, see the June 2017 blog post on a &lt;a href=&quot;https://peter.bourgon.org/blog/2017/06/09/theory-of-modern-go.html&quot;&gt;theory of modern Go&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;To speak about the problem generally for a moment: I’ve had a lot more production experience with logging, which has mostly just increased my respect for the problem. Logging is expensive, more expensive than you think, and can quickly become the bottleneck of your system. I wrote more extensively on the subject &lt;a href=&quot;https://peter.bourgon.org/blog/2016/02/07/logging-v-instrumentation.html&quot;&gt;in a separate blog post&lt;/a&gt;, but to re-cap:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Log only &lt;em&gt;actionable information&lt;/em&gt;, which will be read by a human or a machine&lt;/li&gt;
&lt;li&gt;Avoid fine-grained log levels — info and debug are probably enough&lt;/li&gt;
&lt;li&gt;Use structured logging — I’m biased, but I recommend &lt;a href=&quot;https://github.com/go-kit/kit/tree/master/log&quot;&gt;go-kit/log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Loggers are dependencies!&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Where logging is expensive, instrumentation is cheap. You should be instrumenting every significant component of your codebase. If it’s a resource, like a queue, instrument it according to &lt;a href=&quot;http://www.brendangregg.com/usemethod.html&quot;&gt;Brendan Gregg’s USE method&lt;/a&gt;: utilization, saturation, and error count (rate). If it’s something like an endpoint, instrument it according to &lt;a href=&quot;https://twitter.com/LindsayofSF/status/692191001692237825&quot;&gt;Tom Wilkie’s RED method&lt;/a&gt;: request count (rate), error count (rate), and duration.&lt;/p&gt;
&lt;p&gt;If you have any choice in the matter, &lt;a href=&quot;https://prometheus.io&quot;&gt;Prometheus&lt;/a&gt; is probably the instrumentation system you should be using. And, of course, metrics are dependencies, too!&lt;/p&gt;
&lt;p&gt;Let’s use loggers and metrics to pivot and address global state more directly. Here are some facts about Go:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;log.Print uses a fixed, global log.Logger&lt;/li&gt;
&lt;li&gt;http.Get uses a fixed, global http.Client&lt;/li&gt;
&lt;li&gt;http.Server, by default, uses a fixed, global log.Logger&lt;/li&gt;
&lt;li&gt;database/sql uses a fixed, global driver registry&lt;/li&gt;
&lt;li&gt;func init exists only to have side effects on package-global state&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;These facts are convenient in the small, but awkward in the large. That is, how can we test the log output of components that use the fixed global logger? We must redirect its output, but then how can we test in parallel? Just don’t? That seems unsatisfactory. Or, if we have two independent components both making HTTP requests with different requirements, how do we manage that? With the default global http.Client, it’s quite difficult. Consider this example.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;func foo() {
    resp, err := http.Get(&quot;http://zombo.com&quot;)
    // ...
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;http.Get calls on a global in package http. It has an implicit global dependency. Which we can eliminate pretty easily.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;func foo(client *http.Client) {
    resp, err := client.Get(&quot;http://zombo.com&quot;)
    // ...
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Just pass an http.Client as a parameter. But that is a concrete type, which means if we want to test this function we also need to provide a concrete http.Client, which likely forces us to do actual HTTP communication. Not great. We can do one better, by passing an interface which can Do (execute) HTTP requests.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;type Doer interface {
    Do(*http.Request) (*http.Response, error)
}

func foo(d Doer) {
    req, _ := http.NewRequest(&quot;GET&quot;, &quot;http://zombo.com&quot;, nil)
    resp, err := d.Do(req)
    // ...
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;http.Client satisfies our Doer interface automatically, but now we have the freedom to pass a mock Doer implementation in our test. And that’s great: a unit test for func foo is meant to test only the behavior of foo, it can safely assume that the http.Client is going to work as advertised.&lt;/p&gt;
&lt;p&gt;Speaking of testing…&lt;/p&gt;


&lt;p&gt;In 2014, I reflected on our experience with various testing frameworks and helper libraries, and concluded that we never found a great deal of utility in any of them, recommending the stdlib’s approach of plain package testing with table-based tests. Broadly, I still think this is the best advice. The important thing to remember about testing in Go is that &lt;em&gt;it is just programming&lt;/em&gt;. It is not sufficiently different from other programming that it warrants its own metalanguage. And so package testing continues to be well-suited to the task.&lt;/p&gt;
&lt;p&gt;TDD/BDD packages bring new, unfamiliar DSLs and control structures, increasing the cognitive burden on you and your future maintainers. I haven’t personally seen a codebase where that cost has paid off in benefits. Like global state, I believe these packages represent a false economy, and more often than not are the product of cargo-culting behaviors from other languages and ecosystems. &lt;em&gt;When in Go, do as Gophers do&lt;/em&gt;: we already have a language for writing simple, expressive tests—it’s called Go, and you probably know it pretty well.&lt;/p&gt;
&lt;p&gt;With that said, I do recognize my own context and biases. Like with my opinions on the GOPATH, I’ve softened a bit, and defer to those teams and organizations for whom a testing DSL or framework may make sense. If you know you want to use a package, go for it. Just be sure you’re doing it for well-defined reasons.&lt;/p&gt;
&lt;p&gt;Another incredibly interesting topic has been designing for testing. Mitchell Hashimoto recently gave a great talk on the subject here in Berlin (&lt;a href=&quot;https://speakerdeck.com/mitchellh/advanced-testing-with-go&quot;&gt;SpeakerDeck&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=yszygk1cpEc&quot;&gt;YouTube&lt;/a&gt;) which I think should be required viewing.&lt;/p&gt;
&lt;p&gt;In general, the thing that seems to work the best is to write Go in a generally functional style, where dependencies are explicitly enumerated, and provided as small, tightly-scoped interfaces whenever possible. Beyond being good software engineering discipline in itself, it feels like it automatically optimizes your code for easy testing.&lt;/p&gt;

&lt;div class=&quot;toptip&quot; readability=&quot;6.6818181818182&quot;&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-11&quot;&gt;✪&lt;/a&gt;  &lt;strong&gt;Top Tip&lt;/strong&gt; — Use many small interfaces to model dependencies.&lt;/div&gt;
&lt;p&gt;As in the http.Client example just above, remember that unit tests should be written to test the thing being tested, and nothing more. If you’re testing a process function, there’s no reason to also test the HTTP transport the request came in on, or the path on disk the results get written to. Provide inputs and outputs as fake implementations of interface parameters, and focus on the business logic of the method or component exclusively.&lt;/p&gt;

&lt;div class=&quot;toptip&quot; readability=&quot;6.6769230769231&quot;&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-12&quot;&gt;✪&lt;/a&gt;  &lt;strong&gt;Top Tip&lt;/strong&gt; — Tests only need to test the thing being tested.&lt;/div&gt;


&lt;p&gt;Ever the hot topic. In 2014, things were nascent, and about the only concrete advice I could give was to vendor. That advice still holds today: vendoring is still the solution to dependency management for binaries. In particular, the GO15VENDOREXPERIMENT and its concomittant vendor/ subdirectory have become default in Go 1.6. So you’ll be using that layout. And, thankfully, the tools have gotten a lot better. Some I can recommend:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/FiloSottile/gvt&quot;&gt;FiloSottile/gvt&lt;/a&gt; takes a minimal approach, basically just extracting the vendor subcommand from the gb tool so it can be used standalone.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Masterminds/glide&quot;&gt;Masterminds/glide&lt;/a&gt; takes a maximal approach, attempting to recreate the feel and finish of a fully-featured dependency management tool using vendoring under the hood.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kardianos/govendor&quot;&gt;kardianos/govendor&lt;/a&gt; sits in the middle, providing probably the richest interface to vendoring-specific nouns and verbs, and is driving the conversation on the manifest file.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/constabulary/gb&quot;&gt;constabulary/gb&lt;/a&gt; abandons the go tooling altogether in favor of a different repository layout and build mechanism. Great if you produce binaries and can mandate the build environment, e.g. in a corporate setting.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;toptip&quot; readability=&quot;6.7083333333333&quot;&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-13&quot;&gt;✪&lt;/a&gt;  &lt;strong&gt;Top Tip&lt;/strong&gt; — Use a top tool to vendor dependencies for your binary.&lt;/div&gt;
&lt;p&gt;A big caveat for libraries. In Go, dependency management is a concern of the binary author. Libraries with vendored dependencies are very difficult to use; so difficult that it is probably better said that they are impossible to use. There are many corner cases and edge conditions that have played out in the months since vendoring was officially introduced in 1.5. (You can dig in to &lt;a href=&quot;https://groups.google.com/forum/#!topic/golang-dev/4FfTBfN2YaI&quot;&gt;one of these&lt;/a&gt; &lt;a href=&quot;https://groups.google.com/forum/#!msg/golang-nuts/AnMr9NL6dtc/UnyUUKcMCAAJ&quot;&gt;forum posts&lt;/a&gt; if you’re particularly interested in the details.) Without getting too deep in the weeds, the lesson is clear: libraries should &lt;strong&gt;never&lt;/strong&gt; vendor dependencies.&lt;/p&gt;

&lt;div class=&quot;toptip&quot; readability=&quot;6.6865671641791&quot;&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-14&quot;&gt;✪&lt;/a&gt;  &lt;strong&gt;Top Tip&lt;/strong&gt; — Libraries should never vendor their dependencies.&lt;/div&gt;
&lt;p&gt;You can carve out an exception for yourself if your library has hermetically sealed its dependencies, so that none of them escape to the exported (public) API layer. No dependent types referenced in any exported functions, method signatures, structures—anything.&lt;/p&gt;
&lt;p&gt;If you have the common task of maintaining an open-source repository that contains both binaries and libraries, unfortunately, you are stuck between a rock and a hard place. You want to vendor your deps for your binaries, but you shouldn’t vendor them for your libraries, and the GO15VENDOREXPERIMENT doesn’t admit this level of granularity, from what appears to me to be regrettable oversight.&lt;/p&gt;
&lt;p&gt;Bluntly, I don’t have an answer to this. The etcd folks have hacked together &lt;a href=&quot;https://github.com/coreos/etcd/tree/60425de0ff0dc8a2e7898fcd56f16669d4e4933b/cmd&quot;&gt;a solution using symlinks&lt;/a&gt; which I cannot in good faith recommend, as symlinks are not well-supported by the go toolchain and break entirely on Windows. That this works at all is more a happy accident than any consequence of design. I and others have raised all of these concerns &lt;a href=&quot;https://github.com/golang/go/issues/15162&quot;&gt;to the core team&lt;/a&gt;, and I hope something will happen in the near term.&lt;/p&gt;


&lt;p&gt;Regarding building, one important lesson learned, with a hat tip to Dave Cheney: prefer go install to go build. The install verb caches build artifacts from dependencies in $GOPATH/pkg, making builds faster. It also puts binaries in $GOPATH/bin, making them easier to find and invoke.&lt;/p&gt;

&lt;div class=&quot;toptip&quot; readability=&quot;6.5625&quot;&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-15&quot;&gt;✪&lt;/a&gt;  &lt;strong&gt;Top Tip&lt;/strong&gt; — Prefer go install to go build.&lt;/div&gt;
&lt;p&gt;If you produce a binary, don’t be afraid to try out new build tools like &lt;a href=&quot;https://getgb.io&quot;&gt;gb&lt;/a&gt;, which may significantly reduce your cognitive burden. Conversely, remember that since Go 1.5 cross-compilation is built-in; just set the appropriate GOOS and GOARCH environment variables, and invoke the appropriate go command. So there’s no need for extra tools here anymore.&lt;/p&gt;
&lt;p&gt;Regarding deployment, we Gophers have it pretty easy compared to languages like Ruby or Python, or even the JVM. One note: if you deploy in containers, follow the &lt;a href=&quot;https://medium.com/@kelseyhightower/optimizing-docker-images-for-static-binaries-b5696e26eb07#.r4j4suwn2&quot;&gt;advice of Kelsey Hightower&lt;/a&gt; and do it FROM scratch. Go gives us this incredible opportunity; it’s a shame not to use it.&lt;/p&gt;
&lt;p&gt;As more general advice, think carefully before choosing a platform or orchestration system—if you even choose one at all. Likewise for jumping onto the microservices bandwagon. An elegant monolith, deployed as an AMI to an autoscaling EC2 group, is a very productive setup for small teams. Resist, or at least carefully consider, the hype.&lt;/p&gt;


&lt;p&gt;The Top Tips:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Put $GOPATH/bin in your $PATH, so installed binaries are easily accessible.  &lt;a class=&quot;lite&quot; href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-1&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Put library code under a pkg/ subdirectory. Put binaries under a cmd/ subdirectory.  &lt;a class=&quot;lite&quot; href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-2&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Always use fully-qualified import paths. Never use relative imports.  &lt;a class=&quot;lite&quot; href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-3&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Defer to Andrew Gerrand’s &lt;a href=&quot;https://talks.golang.org/2014/names.slide&quot;&gt;naming conventions&lt;/a&gt;.  &lt;a class=&quot;lite&quot; href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-4&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Only func main has the right to decide which flags are available to the user.  &lt;a class=&quot;lite&quot; href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-5&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use struct literal initialization to avoid invalid intermediate state.  &lt;a class=&quot;lite&quot; href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-6&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Avoid nil checks via default no-op implementations.  &lt;a class=&quot;lite&quot; href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-7&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Make the zero value useful, especially in config objects.  &lt;a class=&quot;lite&quot; href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-8&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make dependencies explicit!&lt;/strong&gt;  &lt;a class=&quot;lite&quot; href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-9&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Loggers are dependencies, just like references to other components, database handles, commandline flags, etc.  &lt;a class=&quot;lite&quot; href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-10&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use many small interfaces to model dependencies.  &lt;a class=&quot;lite&quot; href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-11&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tests only need to test the thing being tested.  &lt;a class=&quot;lite&quot; href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-12&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use a top tool to vendor dependencies for your binary.  &lt;a class=&quot;lite&quot; href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-13&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Libraries should never vendor their dependencies.  &lt;a class=&quot;lite&quot; href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-14&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Prefer go install to go build.  &lt;a class=&quot;lite&quot; href=&quot;https://peter.bourgon.org/go-best-practices-2016/#top-tip-15&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Go has always been a conservative language, and its maturity has brought relatively few surprises and effectively no major changes. Consequently, and predictably, the community also hasn’t dramatically shifted its stances on what’s considered best practice. Instead, we’ve seen a reification of tropes and proverbs that were reasonably well-known in the early years, and a gradual movement “up the stack” as design patterns, libraries, and program structures are explored and transformed into idiomatic Go.&lt;/p&gt;
&lt;p&gt;Here’s to another 6 years of fun and productive Go programming. &lt;a href=&quot;https://twitter.com/peterbourgon/status/725297831221800960&quot;&gt;🏌&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;________&lt;br /&gt;&lt;em&gt;&lt;a href=&quot;https://peter.bourgon.org/&quot;&gt;Go back to my website&lt;/a&gt;, or &lt;a href=&quot;http://twitter.com/peterbourgon&quot;&gt;follow me on Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 02 Mar 2018 12:51:12 +0000</pubDate>
<dc:creator>metmirr</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://peter.bourgon.org/go-best-practices-2016/</dc:identifier>
</item>
</channel>
</rss>