<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>This is the screen that set off the ballistic missile alert on Saturday</title>
<link>https://twitter.com/CivilBeat/status/953127542050795520</link>
<guid isPermaLink="true" >https://twitter.com/CivilBeat/status/953127542050795520</guid>
<description>I can't stop thinking about this. So maybe they shouldn't fire the guy that made the mistake and fire the person that authorized this design?? Like seriously, how is this acceptable? &lt;a href=&quot;https://mobile.twitter.com/walltowall&quot; class=&quot;twitter-atreply dir-ltr&quot; dir=&quot;ltr&quot; data-mentioned-user-id=&quot;18514408&quot; data-screenname=&quot;walltowall&quot;&gt;@walltowall&lt;/a&gt; design studio is right in Chinatown! Call them, you guys! Or me, call me! I'll do it.</description>
<pubDate>Tue, 16 Jan 2018 12:53:25 +0000</pubDate>
<dc:creator>robin_reala</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/CivilBeat/status/953127542050795520</dc:identifier>
</item>
<item>
<title>Webpage tracking only using CSS (and no JS)</title>
<link>https://github.com/jbtronics/CrookedStyleSheets</link>
<guid isPermaLink="true" >https://github.com/jbtronics/CrookedStyleSheets</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;Proof of Concept for Website tracking, only using CSS and no Javascript.&lt;/p&gt;
&lt;h2&gt;What can we do with this method?&lt;/h2&gt;
&lt;p&gt;We can gather some basic information about the user, like the screen resolution (when browser is maximized) and which browser (or engine) is used. Further we can detect if a user opens a link or hovers with the mouse over an element. This can be used to track which (external) links a user visits and using the hover method, it should be even possible to track, how the user moved its mouse (using an invisible table of fields in the page background). However using my method, its only possible to track, when a user visits a link the first time or hovers about a field the first time. Maybe it's possible to modify the method, so it is possible to track every click.&lt;/p&gt;
&lt;p&gt;Furthermore it is possible to detect, if a user has installed a specific font. Based on this information it should be possible to detect, which OS a users uses (because different OS ships different fonts, e.g. &quot;Calibri&quot; on Windows).&lt;/p&gt;
&lt;h2&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;In CSS you can add a image from an external resource using the url(&quot;foo.bar&quot;); property. Interesting is, that this resource is only loaded, when it is needed (for example when a link is clicked).&lt;/p&gt;
&lt;p&gt;So we can create a selector in CSS, that calls a particular URL, when the user clicks a link:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-css&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-e&quot;&gt;#link2&lt;/span&gt;&lt;span class=&quot;pl-e&quot;&gt;:active&lt;/span&gt;&lt;span class=&quot;pl-e&quot;&gt;::after&lt;/span&gt; {
    &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;content&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;track.php?action=link2_clicked&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On the server side, a PHP script, save the timestamp, when the URL is called.&lt;/p&gt;
&lt;p&gt;Browser detection is based on @supports Media-Query, and we check for some browser specific CSS property like -webkit-appearance:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-css&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;@supports&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;-webkit-appearance&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-c1&quot;&gt;none&lt;/span&gt;) {
    &lt;span class=&quot;pl-e&quot;&gt;#chrome_detect&lt;/span&gt;&lt;span class=&quot;pl-e&quot;&gt;::after&lt;/span&gt; {
        &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;content&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;track.php?action=browser_chrome&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For font detection, a new font family is defined. Then a text is tried to style with the font that should be checked if it exists. When the browser does not find the font on the user's system, then the defined font is used as a fallback. When this happens, the browser tries to load the font and calls the tracking script on the server.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-css&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt;* Font detection *&lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;@font-face&lt;/span&gt; {
    &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;font-family&lt;/span&gt;&lt;/span&gt;: Font1;
    &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;src&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;track.php?action=font1&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
}

&lt;span class=&quot;pl-e&quot;&gt;#font_detection1&lt;/span&gt; {
    &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;font-family&lt;/span&gt;&lt;/span&gt;: Calibri, Font1;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Demo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://crookedss.bplaced.net/&quot; rel=&quot;nofollow&quot;&gt;Here&lt;/a&gt; you can find a demo of the files in this Repo. The index.html is the file that is being tracked using this method, visit the results.php for the results of the tracking.&lt;/p&gt;
&lt;p&gt;If nothing or a PHP warning appears after a Property, this means that the value of this property is false, or that the user has not visited the page or link yet (Yeah its a bit dirty, but you can see the principle of the method...). Also resolution detection works not so well yet, because I have only detection for the mostly used screen widths. Further it is a bit tricky to detect the real screen height of the user, because CSS uses the height of the browser window and stuff than the Windows' task bar makes the browser area smaller than the monitor.&lt;/p&gt;
&lt;/article&gt;</description>
<pubDate>Tue, 16 Jan 2018 12:46:49 +0000</pubDate>
<dc:creator>ProfDreamer</dc:creator>
<og:image>https://avatars1.githubusercontent.com/u/5410681?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>jbtronics/CrookedStyleSheets</og:title>
<og:url>https://github.com/jbtronics/CrookedStyleSheets</og:url>
<og:description>CrookedStyleSheets - Webpage tracking only using CSS (and no JS)</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/jbtronics/CrookedStyleSheets</dc:identifier>
</item>
<item>
<title>Jitsi: Open-Source Video Conferencing</title>
<link>https://jitsi.org/</link>
<guid isPermaLink="true" >https://jitsi.org/</guid>
<description>&lt;p&gt;At Jitsi, we believe every video chat should look and sound amazing, between two people or 200. Whether you want to build your own massively multi-user video conference client, or use ours, all our tools are 100% free, open source, and WebRTC compatible.&lt;/p&gt;
</description>
<pubDate>Tue, 16 Jan 2018 01:49:17 +0000</pubDate>
<dc:creator>reimertz</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://jitsi.org/</dc:identifier>
</item>
<item>
<title>Announcing Go Support for AWS Lambda</title>
<link>https://aws.amazon.com/blogs/compute/announcing-go-support-for-aws-lambda/</link>
<guid isPermaLink="true" >https://aws.amazon.com/blogs/compute/announcing-go-support-for-aws-lambda/</guid>
<description>&lt;p&gt;&lt;em&gt;This post courtesy of Paul Maddox, Specialist Solutions Architect (Developer Technologies).&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/about-aws/whats-new/2018/01/aws-lambda-supports-go/&quot;&gt;Today&lt;/a&gt;, we’re excited to announce &lt;a href=&quot;https://golang.org/&quot;&gt;Go&lt;/a&gt; as a supported language for &lt;a href=&quot;https://aws.amazon.com/lambda&quot;&gt;AWS Lambda&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As someone who’s done their fair share of Go development (recent projects include &lt;a href=&quot;https://github.com/awslabs/aws-sam-local&quot;&gt;AWS SAM Local&lt;/a&gt; and &lt;a href=&quot;https://github.com/awslabs/goformation&quot;&gt;GoFormation&lt;/a&gt;), this is a release I’ve been looking forward to for a while. I’m going to take this opportunity to walk you through how it works by creating a Go serverless application, and deploying it to Lambda.&lt;/p&gt;
&lt;h3&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;This post assumes that you already have Go installed and configured on your development machine, as well as a basic understanding of Go development concepts. For more details, see &lt;a href=&quot;https://golang.org/doc/install&quot;&gt;https://golang.org/doc/install&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Creating an example Serverless application with Go&lt;/h2&gt;
&lt;p&gt;Lambda functions can be triggered by variety of event sources:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Asynchronous events (such as an object being put in an &lt;a href=&quot;https://aws.amazon.com/s3&quot;&gt;Amazon S3&lt;/a&gt; bucket)&lt;/li&gt;
&lt;li&gt;Streaming events (for example, new data records on an &lt;a href=&quot;https://aws.amazon.com/kinesis&quot;&gt;Amazon Kinesis&lt;/a&gt; stream)&lt;/li&gt;
&lt;li&gt;Synchronous events (manual invocation, or HTTPS request via &lt;a href=&quot;https://aws.amazon.com/apigateway&quot;&gt;Amazon API Gateway&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;As an example, you’re going to create an application that uses an API Gateway event source to create a simple Hello World RESTful API. The full source code for this example application can be found on GitHub at: &lt;a href=&quot;https://github.com/aws-samples/lambda-go-samples&quot;&gt;https://github.com/aws-samples/lambda-go-samples&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After the application is published, it receives a name via the HTTPS request body, and responds with “Hello &amp;lt;name&amp;gt;.” For example:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-bash&quot;&gt;$ curl -XPOST -d &quot;Paul&quot; &quot;https://my-awesome-api.example.com/&quot;
Hello Paul&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;To implement this, create a Lambda handler function in Go.&lt;/p&gt;
&lt;p&gt;Import the &lt;a href=&quot;http://github.com/aws/aws-lambda-go&quot;&gt;github.com/aws/aws-lambda-go&lt;/a&gt; package, which includes helpful Go definitions for Lambda event sources, as well as the &lt;strong&gt;lambda.Start()&lt;/strong&gt; method used to register your handler function.&lt;/p&gt;
&lt;p&gt;Start by creating a new project directory in your &lt;strong&gt;$GOPATH&lt;/strong&gt;, and then creating a &lt;strong&gt;main.go&lt;/strong&gt; file that contains your Lambda handler function:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-go&quot;&gt;package main

import (
 &quot;errors&quot;
 &quot;log&quot;
 &quot;github.com/aws/aws-lambda-go/events&quot;
 &quot;github.com/aws/aws-lambda-go/lambda&quot;
)

var (
 // ErrNameNotProvided is thrown when a name is not provided
 ErrNameNotProvided = errors.New(&quot;no name was provided in the HTTP body&quot;)
)

// Handler is your Lambda function handler
// It uses Amazon API Gateway request/responses provided by the aws-lambda-go/events package,
// However you could use other event sources (S3, Kinesis etc), or JSON-decoded primitive types such as 'string'.
func Handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {

 // stdout and stderr are sent to AWS CloudWatch Logs
 log.Printf(&quot;Processing Lambda request %s\n&quot;, request.RequestContext.RequestID)

 // If no name is provided in the HTTP request body, throw an error
 if len(request.Body) &amp;lt; 1 {
  return events.APIGatewayProxyResponse{}, ErrNameNotProvided
 }

 return events.APIGatewayProxyResponse{
  Body:       &quot;Hello &quot; + request.Body,
  StatusCode: 200,
 }, nil

}

func main() {
 lambda.Start(Handler)
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;lambda.Start()&lt;/strong&gt; method takes a handler, and talks to an internal Lambda endpoint to pass Invoke requests to the handler. If a handler does not match one of the supported types, the Lambda package responds to new invocations served by an internal endpoint with an error message such as:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-bash&quot;&gt;json: cannot unmarshal object into Go value of type int32: UnmarshalTypeError&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;lambda.Start()&lt;/strong&gt; method blocks, and does not return after being called, meaning that it’s suitable to run in your Go application’s main entry point.&lt;/p&gt;
&lt;h2&gt;More detail on AWS Lambda function handlers with Go&lt;/h2&gt;
&lt;p&gt;A handler function passed to &lt;strong&gt;lambda.Start()&lt;/strong&gt; must follow these rules:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;It must be a function.&lt;/li&gt;
&lt;li&gt;The function may take between 0 and 2 arguments.
&lt;ul&gt;&lt;li&gt;If there are two arguments, the first argument must implement &lt;strong&gt;context.Context&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The function may return between 0 and 2 values.
&lt;ul&gt;&lt;li&gt;If there is one return value, it must implement &lt;strong&gt;error&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If there are two return values, the second value must implement &lt;strong&gt;error&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The &lt;a href=&quot;http://github.com/aws/aws-lambda-go&quot;&gt;github.com/aws/aws-lambda-go&lt;/a&gt; library automatically unmarshals the Lambda event JSON to the argument type used by your handler function. To do this, it uses Go’s standard &lt;a href=&quot;https://golang.org/pkg/encoding/json/#Unmarshal&quot;&gt;encoding/json&lt;/a&gt; package, so your handler function can use any of the standard types supported for unmarshalling (or custom types containing those):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;bool, for JSON booleans&lt;/li&gt;
&lt;li&gt;float64, for JSON numbers&lt;/li&gt;
&lt;li&gt;string, for JSON strings&lt;/li&gt;
&lt;li&gt;[]interface{}, for JSON arrays&lt;/li&gt;
&lt;li&gt;map[string]interface{}, for JSON objects&lt;/li&gt;
&lt;li&gt;nil, for JSON null&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For example, your Lambda function received a JSON event payload like the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-json&quot;&gt;{
  &quot;id&quot;: 12345,
  &quot;value&quot;: &quot;some-value&quot;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It should respond with a JSON response that looks like the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-json&quot;&gt;{
  &quot;message&quot;: &quot;processed request ID 12345&quot;,
  &quot;ok&quot;: true
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You could use a Lambda handler function that looks like the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-go&quot;&gt;package main

import (
  &quot;fmt&quot;
  &quot;github.com/aws/aws-lambda-go/lambda&quot;
)

type Request struct {
  ID        float64 `json:&quot;id&quot;`
  Value     string  `json:&quot;value&quot;`
}

type Response struct {
  Message string `json:&quot;message&quot;`
  Ok      bool   `json:&quot;ok&quot;`
}

func Handler(request Request) (Response, error) {
 return Response{
  Message: fmt.Sprintf(&quot;Processed request ID %f&quot;, request.ID),
  Ok:      true,
 }, nil
}

func main() {
 lambda.Start(Handler)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For convenience, the &lt;a href=&quot;http://github.com/aws/aws-lambda-go&quot;&gt;github.com/aws/aws-lambda-go&lt;/a&gt; package provides event sources that you can also use in your handler function arguments. It also provides return values for common sources such as S3, Kinesis, Cognito, and the API Gateway event source and response objects that you’re using in the application example.&lt;/p&gt;
&lt;h2&gt;Adding unit tests&lt;/h2&gt;
&lt;p&gt;To test that the Lambda handler works as expected, create a main_test.go file containing some basic unit tests.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-go&quot;&gt;package main_test

import (
 &quot;testing&quot;
 main &quot;github.com/aws-samples/lambda-go-samples&quot;
 &quot;github.com/aws/aws-lambda-go/events&quot;
 &quot;github.com/stretchr/testify/assert&quot;
)

func TestHandler(t *testing.T) {
 tests := []struct {
  request events.APIGatewayProxyRequest
  expect  string
  err     error
 }{
   {
    // Test that the handler responds with the correct response
    // when a valid name is provided in the HTTP body
    request: events.APIGatewayProxyRequest{Body: &quot;Paul&quot;},
    expect:  &quot;Hello Paul&quot;,
    err:     nil,
   },
   {
    // Test that the handler responds ErrNameNotProvided
    // when no name is provided in the HTTP body
    request: events.APIGatewayProxyRequest{Body: &quot;&quot;},
    expect:  &quot;&quot;,
    err:     main.ErrNameNotProvided,
   },
  }

  for _, test := range tests {
   response, err := main.Handler(test.request) 
   assert.IsType(t, test.err, err)
   assert.Equal(t, test.expect, response.Body)
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;Run your tests:&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-base&quot;&gt;$ go test
PASS
ok      github.com/awslabs/lambda-go-example    0.041s&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: To make the unit tests more readable, this example uses a third-party library (https://github.com/stretchr/testify). This allows you to describe the test cases in a more natural format, making them more maintainable for other people who may be working in the code base.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Build and deploy&lt;/h2&gt;
&lt;p&gt;As Go is a compiled language, build the application and create a &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/lambda-go-how-to-create-deployment-package.html&quot;&gt;Lambda deployment package&lt;/a&gt;. To do this, build a binary that runs on Linux, and zip it up into a deployment package.&lt;/p&gt;
&lt;p&gt;To do this, we need to build a binary that will run on Linux, and ZIP it up into a deployment package.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-bash&quot;&gt;$ GOOS=linux go build -o main
$ zip deployment.zip main&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The binary doesn’t need to be called main, but the name must match the Handler configuration property of the deployed Lambda function.&lt;/p&gt;
&lt;p&gt;The deployment package is now ready to be deployed to Lambda. One deployment method is to use the &lt;a href=&quot;https://aws.amazon.com/cli/&quot;&gt;AWS CLI&lt;/a&gt;. Provide a valid &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role&quot;&gt;Lambda execution role&lt;/a&gt; for  &lt;strong&gt;–role&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-bash&quot;&gt;$ aws lambda create-function \
--region us-west-1 \
--function-name HelloFunction \
--zip-file fileb://./deployment.zip \
--runtime go1.x \
--tracing-config Mode=Active
--role arn:aws:iam::&amp;lt;account-id&amp;gt;:role/&amp;lt;role&amp;gt; \
--handler main&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;From here, configure the invoking service for your function, in this example API Gateway, to call this function and provide the HTTPS frontend for your API. For more information about how to do this in the API Gateway console, see &lt;a href=&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-as-simple-proxy-for-lambda.html#api-gateway-create-api-as-simple-proxy-for-lambda-build&quot;&gt;Create an API with Lambda Proxy Integration&lt;/a&gt;. You could also do this in the Lambda console by assigning an API Gateway trigger.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/lambda-console1.png&quot;&gt;&lt;img class=&quot;aligncenter wp-image-3614 size-full&quot; src=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/lambda-console1.png&quot; alt=&quot;Lambda Console Designer Trigger selection&quot; width=&quot;878&quot; height=&quot;230&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then, configure the trigger:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;API name&lt;/strong&gt;: lambda-go&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deployment stage&lt;/strong&gt;: prod&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: open&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This results in an API Gateway endpoint that you can test.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/lambda-console-gateway.png&quot;&gt;&lt;img class=&quot;aligncenter wp-image-3615 size-full&quot; src=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/lambda-console-gateway.png&quot; alt=&quot;Lambda Console API Gateway configuration&quot; width=&quot;878&quot; height=&quot;134&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now, you can use cURL to test your API:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-bash&quot;&gt;$ curl -XPOST -d &quot;Paul&quot; https://u7fe6p3v64.execute-api.us-east-1.amazonaws.com/prod/main
Hello Paul&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Doing this manually is fine and works for testing and exploration. If you were doing this for real, you’d want to automate this process further. The next section shows how to add a CI/CD pipeline to this process to build, test, and deploy your serverless application as you change your code.&lt;/p&gt;
&lt;h2&gt;Automating tests and deployments&lt;/h2&gt;
&lt;p&gt;Next, configure &lt;a href=&quot;https://aws.amazon.com/codepipeline&quot;&gt;AWS CodePipeline&lt;/a&gt; and &lt;a href=&quot;https://aws.amazon.com/codebuild&quot;&gt;AWS CodeBuild&lt;/a&gt; to build your application automatically and run all of the tests. If it passes, deploy your application to Lambda.&lt;/p&gt;
&lt;p&gt;The first thing you need to do is create an &lt;a href=&quot;https://aws.amazon.com/about-aws/whats-new/2016/11/introducing-the-aws-serverless-application-model/&quot;&gt;AWS Serverless Application Model (AWS SAM)&lt;/a&gt; template in your source repository. SAM provides an easy way to deploy Serverless resources, such as Lambda functions, APIs, and other event sources, as well as all of the necessary IAM permissions, etc. You can also include any valid &lt;a href=&quot;https://aws.amazon.com/cloudformation&quot;&gt;AWS CloudFormation&lt;/a&gt; resources within your SAM template, such as a Kinesis stream, or an &lt;a href=&quot;https://aws.amazon.com/dynamodb&quot;&gt;Amazon DynamoDB&lt;/a&gt; table. They are deployed alongside your Serverless application.&lt;/p&gt;
&lt;p&gt;Create a file called &lt;strong&gt;template.yml&lt;/strong&gt; in your application repository with the following contents:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-yaml&quot;&gt;AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  HelloFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main
      Runtime: go1.x
      Tracing: Active
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: post&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The above template instructs SAM to deploy a Lambda function (called &lt;strong&gt;HelloFunction&lt;/strong&gt; in this case), with the Go runtime (&lt;strong&gt;go1.x&lt;/strong&gt;), and also an API configured to pass HTTP POST requests to your Lambda function. The Handler property defines which binary in the deployment package needs to be executed (&lt;strong&gt;main&lt;/strong&gt; in this case).&lt;/p&gt;
&lt;p&gt;You’re going to use CodeBuild to run your tests, build your Go application, and package it. You can tell CodeBuild how to do all of this by creating a &lt;strong&gt;buildspec.yml&lt;/strong&gt; file in your repository containing the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-yaml&quot;&gt;
version: 0.2
env:
  variables:
    # This S3 bucket is used to store the packaged Lambda deployment bundle.
    # Make sure to provide a valid S3 bucket name (it must exist already).
    # The CodeBuild IAM role must allow write access to it.
    S3_BUCKET: &quot;your-s3-bucket&quot;
    PACKAGE: &quot;github.com/aws-samples/lambda-go-samples&quot;

phases:
  install:
    commands:
      # AWS Codebuild Go images use /go for the $GOPATH so copy the
      # application source code into that directory structure.
      - mkdir -p &quot;/go/src/$(dirname ${PACKAGE})&quot;
      - ln -s &quot;${CODEBUILD_SRC_DIR}&quot; &quot;/go/src/${PACKAGE}&quot;
      # Print all environment variables (handy for AWS CodeBuild logs)
      - env
      # Install golint
      - go get -u github.com/golang/lint/golint

  pre_build:
    commands:
      # Make sure we're in the project directory within our GOPATH
      - cd &quot;/go/src/${PACKAGE}&quot;
      # Fetch all dependencies
      - go get ./...
      # Ensure that the code passes all lint tests
      - golint -set_exit_status
      # Check for common Go problems with 'go vet'
      - go vet .
      # Run all tests included with the application
      - go test .

  build:
    commands:
      # Build the go application
      - go build -o main
      # Package the application with AWS SAM
      - aws cloudformation package --template-file template.yml --s3-bucket ${S3_BUCKET} --output-template-file packaged.yml

artifacts:
  files:
  - packaged.yml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This buildspec file does the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Sets up your GOPATH, ready for building&lt;/li&gt;
&lt;li&gt;Runs &lt;a href=&quot;https://github.com/golang/lint&quot;&gt;golint&lt;/a&gt; to make sure that any committed code matches the Go style and formatting specification&lt;/li&gt;
&lt;li&gt;Runs any unit tests present (via &lt;strong&gt;go test&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Builds your application binary&lt;/li&gt;
&lt;li&gt;Packages the binary into a &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/lambda-go-how-to-create-deployment-package.html&quot;&gt;Lambda deployment package&lt;/a&gt; and uploads it to S3&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For more details about buildspec files, see the &lt;a href=&quot;https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html&quot;&gt;Build Specification Reference&lt;/a&gt; for AWS CodeBuild.&lt;/p&gt;
&lt;p&gt;Your project directory should now contain the following files:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ tree
.
├── buildspec.yml    (AWS CodeBuild configuration file)
├── main.go          (Our application)
├── main_test.go     (Unit tests)
└── template.yml     (AWS SAM template)
0 directories, 4 files&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You’re now ready to set up your automated pipeline with CodePipeline.&lt;/p&gt;
&lt;h3&gt;Create a new pipeline&lt;/h3&gt;
&lt;p&gt;Get started by navigating to the &lt;a href=&quot;https://console.aws.amazon.com/codepipeline/&quot;&gt;CodePipeline&lt;/a&gt; console. You need to give your new pipeline a name, such as HelloService.&lt;/p&gt;
&lt;p&gt;Next, select the source repository in which your application code is located. CodePipeline supports either AWS CodeCommit, GitHub.com, or S3. To use the example GitHub.com repository mentioned earlier in this post, &lt;a href=&quot;https://help.github.com/articles/fork-a-repo/&quot;&gt;fork&lt;/a&gt; it into your own GitHub.com account or create a new CodeCommit repository and &lt;a href=&quot;https://docs.aws.amazon.com/codecommit/latest/userguide/how-to-migrate-repository-existing.html&quot;&gt;clone&lt;/a&gt; it into there. Do this first before selecting a source location.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/codepipeline1.png&quot;&gt;&lt;img class=&quot;aligncenter wp-image-3618 size-full&quot; src=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/codepipeline1.png&quot; alt=&quot;CodePipeline Source location configuration&quot; width=&quot;878&quot; height=&quot;564&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tell CodePipeline to use CodeBuild to test, build, and package your application using the buildspec.yml file created earlier:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/codepipeline-build.png&quot;&gt;&lt;img class=&quot;aligncenter wp-image-3619 size-full&quot; src=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/codepipeline-build.png&quot; alt=&quot;CodePipeline Console Build Configuration&quot; width=&quot;878&quot; height=&quot;885&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; CodeBuild needs read/write access to the S3 bucket referenced in the buildspec.yml file that you wrote. It places the packaged Lambda deployment package into S3 after the tests and build are completed. Make sure that the CodeBuild service role created or provided has the correct IAM permissions. For more information, see &lt;a href=&quot;https://aws.amazon.com/blogs/security/writing-iam-policies-how-to-grant-access-to-an-amazon-s3-bucket/&quot;&gt;Writing IAM Policies: How to grant access to an Amazon S3 bucket&lt;/a&gt;. If you don’t do this, CodeBuild fails.&lt;/p&gt;
&lt;p&gt;Finally, set up the deployment stage of your pipeline. Select &lt;strong&gt;AWS CloudFormation&lt;/strong&gt; as the deployment method, and the &lt;strong&gt;Create or replace a change set&lt;/strong&gt; mode (as required by SAM). To deploy multiple environments (for example, staging, production), add additional deployment stages to your pipeline after it has been created.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/codepipeline-deploy.png&quot;&gt;&lt;img class=&quot;aligncenter wp-image-3621 size-full&quot; src=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/codepipeline-deploy.png&quot; alt=&quot;CodePipeline Console Deploy configuration&quot; width=&quot;878&quot; height=&quot;765&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After being created, your pipeline takes a few minutes to initialize, and then automatically triggers. You can see the latest commit in your version control system make progress through the build and deploy stages of your pipeline.&lt;/p&gt;
&lt;p&gt;You do not need to configure anything further to automatically run your pipeline on new version control commits. It already automatically triggers, builds, and deploys each time.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/codepipeline-created.png&quot;&gt;&lt;img class=&quot;aligncenter wp-image-3622 size-full&quot; src=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/codepipeline-created.png&quot; alt=&quot;CodePipeline Console Created Pipeline&quot; width=&quot;878&quot; height=&quot;821&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make one final change to the pipeline, to configure the deployment stage to execute the CloudFormation changeset that it creates. To make this change, choose the &lt;strong&gt;Edit&lt;/strong&gt; button on your pipeline, choose the pencil icon on the staging deployment stage, and add a new action:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/codepipeline-addaction.png&quot;&gt;&lt;img class=&quot;aligncenter wp-image-3624 size-full&quot; src=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/codepipeline-addaction.png&quot; alt=&quot;CodePipeline Console Add Action&quot; width=&quot;878&quot; height=&quot;645&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After the action is added, save your pipeline. You can test it by making a small change to your Lambda function, and then committing it back to version control. You can see your pipeline trigger, and the changes get deployed to your staging environment.&lt;/p&gt;
&lt;h3&gt;See it in Action&lt;/h3&gt;
&lt;p&gt;After a successful run of the pipeline has completed, you can navigate to the CloudFormation console to see the deployment details.&lt;/p&gt;
&lt;p&gt;In your case, you have a CloudFormation stack deployed. If you look at the &lt;strong&gt;Resources&lt;/strong&gt; tab, you see a table of the AWS resources that have been deployed.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/cloudformation-resources.png&quot;&gt;&lt;img class=&quot;aligncenter wp-image-3626 size-full&quot; src=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/cloudformation-resources.png&quot; alt=&quot;CloudFormation Resources tab&quot; width=&quot;878&quot; height=&quot;493&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Choose the &lt;strong&gt;ServerlessRestApi&lt;/strong&gt; item link to navigate to the API Gateway console and view the details of your deployed API, including the URL,&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/api-gw-stage-edit.png&quot;&gt;&lt;img class=&quot;aligncenter wp-image-3627 size-full&quot; src=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/api-gw-stage-edit.png&quot; alt=&quot;API Gateway Stage Editor&quot; width=&quot;878&quot; height=&quot;436&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can use cURL to test that your Serverless application is functioning as expected:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ curl -XPOST -d &quot;Paul&quot; https://y5fjgtq6dj.execute-api.us-west-1.amazonaws.com/Stage
Hello Paul&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;One more thing!&lt;/h2&gt;
&lt;p&gt;We are also excited to announce that &lt;a href=&quot;https://aws.amazon.com/xray/&quot;&gt;AWS X-Ray&lt;/a&gt; can be enabled in your Lambda runtime to analyze and debug your Go functions written for Lambda. The &lt;a href=&quot;https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-go.html&quot;&gt;X-Ray SDK for Go&lt;/a&gt; works with the Go context of your Lambda function, providing features such as AWS SDK retry visibility and one-line error capture.&lt;br/&gt;&lt;a href=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/xray-go.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-3628&quot; src=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/15/xray-go.png&quot; alt=&quot;x-ray console waterfall diagram&quot; width=&quot;878&quot; height=&quot;249&quot;/&gt;&lt;/a&gt;&lt;br/&gt;You can use &lt;a href=&quot;https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-go-segment.html&quot;&gt;annotations and metadata&lt;/a&gt; to capture additional information in X-Ray about your function invocations. Moreover, the SDK supports the net/http client package, enabling you to trace requests made to endpoints even if they are not X-Ray enabled.&lt;/p&gt;
&lt;h2&gt;Wrapping it up!&lt;/h2&gt;
&lt;p&gt;Support for Go has been a much-requested feature in Lambda and we are excited to be able to bring it to you. In this post, you created a basic Go-based API and then went on to create a full continuous integration and delivery pipeline that tests, builds, and deploys your application each time you make a change.&lt;/p&gt;
&lt;p&gt;You can also get started with AWS Lambda Go support through &lt;a href=&quot;https://aws.amazon.com/codestar&quot;&gt;AWS CodeStar&lt;/a&gt;. AWS CodeStar lets you quickly launch development projects that include a sample application, source control and release automation. With this announcement, AWS CodeStar introduced new project templates for Go running on AWS Lambda. Select one of the &lt;a href=&quot;https://console.aws.amazon.com/codestar/home?region=us-east-1#/quickstart&quot;&gt;CodeStar Go project templates&lt;/a&gt; to get started. CodeStar makes it easy to begin editing your Go project code in &lt;a href=&quot;https://aws.amazon.com/cloud9&quot;&gt;AWS Cloud9&lt;/a&gt;, an online IDE, with just a few clicks.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/16/Screen-Shot-2018-01-15-at-9.44.14-PM.png&quot;&gt;&lt;img class=&quot;aligncenter wp-image-3637 size-medium&quot; src=&quot;https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/16/Screen-Shot-2018-01-15-at-9.44.14-PM-300x169.png&quot; alt=&quot;CodeStar Go application&quot; width=&quot;300&quot; height=&quot;169&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Excited about Go in Lambda or have questions? Let us know in the comments here, in the &lt;a href=&quot;https://forums.aws.amazon.com/forum.jspa?forumID=186&quot;&gt;AWS Forums for Lambda&lt;/a&gt;, or find us on Twitter at &lt;a href=&quot;https://twitter.com/awscloud&quot;&gt;@awscloud&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Tue, 16 Jan 2018 00:23:35 +0000</pubDate>
<dc:creator>jitl</dc:creator>
<og:title>Announcing Go Support for AWS Lambda | Amazon Web Services</og:title>
<og:type>article</og:type>
<og:url>https://aws.amazon.com/blogs/compute/announcing-go-support-for-aws-lambda/</og:url>
<og:description>This post courtesy of Paul Maddox, Specialist Solutions Architect (Developer Technologies). Today, we’re excited to announce Go as a supported language for AWS Lambda. As someone who’s done their fair share of Go development (recent projects include AWS SAM Local and GoFormation), this is a release I’ve been looking forward to for a while. I’m […]</og:description>
<og:image>https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2018/01/16/Screen-Shot-2018-01-15-at-9.44.14-PM.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://aws.amazon.com/blogs/compute/announcing-go-support-for-aws-lambda/</dc:identifier>
</item>
<item>
<title>Bill and Melinda Gates Are Paying Off Nigeria&amp;#039;s $76M Debt to Japan</title>
<link>https://www.globalcitizen.org/en/content/gates-paying-off-nigeria-debt/</link>
<guid isPermaLink="true" >https://www.globalcitizen.org/en/content/gates-paying-off-nigeria-debt/</guid>
<description>&lt;p&gt;&lt;span class=&quot;desc&quot;&gt;Philanthropist and co-founder of Microsoft, Bill Gates, is pictured in Paris.&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;author&quot;&gt;Kamil Zihnioglu/AP&lt;/span&gt;&lt;/p&gt;&lt;div readability=&quot;74.480487804878&quot;&gt;
&lt;p dir=&quot;ltr&quot;&gt;As some leaders are increasing their focus on issues solely within their own borders, Bill and Melinda Gates continue to show the importance of looking outward — and they’ve demonstrated this yet again by announcing they will settle Nigeria’s $76 million debt to Japan.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Nigeria’s debt to Japan is the result of Overseas Development Assistance (ODA) provided by the Japanese government in 2014 for increased polio eradication efforts.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;The country has made great strides in its efforts to eliminate the disease thanks to this funding.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Nigeria did not record a wild case of polio from July 2014 to August 2016, when two cases were &lt;a href=&quot;https://www.nature.com/news/polio-eradication-faces-setback-as-nigeria-records-first-cases-in-two-years-1.20416&quot;&gt;reported&lt;/a&gt;.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Take Action: &lt;a href=&quot;https://www.globalcitizen.org/en/action/canada-global-health-security/&quot;&gt;Call on Canadian Ministers to Commit to Global Health Security&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;No new cases of the wild poliovirus were reported in 2017 and there were only four cases reported in 2016, according to the &lt;a href=&quot;http://polioeradication.org/polio-today/polio-now/this-week/&quot;&gt;Global Polio Eradication Initiative&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot; readability=&quot;6.2535211267606&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;In 1988, there were 350,000 new polio cases. Last year, there were just 21. Here’s what made this progress possible: &lt;a href=&quot;https://t.co/wpTTpyg0VF&quot;&gt;https://t.co/wpTTpyg0VF&lt;/a&gt;&lt;a href=&quot;https://t.co/qW5chL09rl&quot;&gt;pic.twitter.com/qW5chL09rl&lt;/a&gt;&lt;/p&gt;
— Bill Gates (@BillGates) &lt;a href=&quot;https://twitter.com/BillGates/status/951243612615880704?ref_src=twsrc%5Etfw&quot;&gt;January 11, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;p dir=&quot;ltr&quot;&gt;All of this means that Nigeria is very close to eradicating polio, which would leave just two countries in the world where the disease is still endemic, Pakistan and Afghanistan. Global Citizen campaigns to eradicate polio and ensure all individuals have access to good healthcare. You can take action &lt;a href=&quot;https://www.globalcitizen.org/en/take-action/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;As the largest private philanthropic organization in the world, the Bill and Melinda Gates Foundation spends just over $3 billion a year on development assistance, according to &lt;a href=&quot;https://www.theguardian.com/global-development/2017/sep/13/bill-gates-foundation-dont-expect-pick-up-the-bill-for-sweeping-aid-cuts-trump&quot;&gt;The Guardian&lt;/a&gt;.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Eradicating polio is one of the Bill and Melinda Gates Foundation’s &lt;a href=&quot;https://www.gatesfoundation.org/What-We-Do/Global-Development/Polio&quot;&gt;top priorities&lt;/a&gt;. In fact, at the last &lt;a href=&quot;https://www.forbes.com/sites/michelatindera/2017/06/12/gates-foundation-and-rotary-pledge-additional-450-million-to-end-polio/#505385265ec1&quot;&gt;annual Rotary International Convention in Atlanta&lt;/a&gt;, the Gates Foundation announced it would match two-to-one Rotary's commitment to raise $50 million a year over the next three years, which would result in $450 million towards polio eradication efforts.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Read More: &lt;a href=&quot;https://www.globalcitizen.org/en/content/facts-about-polio/&quot;&gt;WTF Is Polio? 17 Facts About the Disease That We’re This Close to Eradicating&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot; readability=&quot;4.9444444444444&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;7 years after they helped India see its last case of polio, health workers still provide children with much more than the polio vaccine. &lt;a href=&quot;https://t.co/CdRPWGq85d&quot;&gt;https://t.co/CdRPWGq85d&lt;/a&gt;&lt;a href=&quot;https://twitter.com/hashtag/endpolio?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#endpolio&lt;/a&gt;&lt;a href=&quot;https://t.co/B9gKgELQLn&quot;&gt;pic.twitter.com/B9gKgELQLn&lt;/a&gt;&lt;/p&gt;
— Gates Foundation (@gatesfoundation) &lt;a href=&quot;https://twitter.com/gatesfoundation/status/951206478710439936?ref_src=twsrc%5Etfw&quot;&gt;January 10, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;p dir=&quot;ltr&quot;&gt;“Some people, especially these days, think the world is getting worse,” Gates said &lt;a href=&quot;https://www.forbes.com/sites/michelatindera/2017/06/12/gates-foundation-and-rotary-pledge-additional-450-million-to-end-polio/#505385265ec1&quot; class=&quot;&quot;&gt;at the convention&lt;/a&gt;  last June. “The progress on polio is a reminder of what people can accomplish when they are bold, determined, and willing to work together.”&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;While the Gates family is notoriously generous and forward-thinking when it comes to supporting the accomplishment of the United Nations Sustainable Development Goals, &lt;a href=&quot;https://www.theguardian.com/global-development/2017/sep/13/bill-gates-foundation-dont-expect-pick-up-the-bill-for-sweeping-aid-cuts-trump&quot;&gt;Bill Gates has said&lt;/a&gt; that organizations like his foundation are not prepared to fill the gaps that could result from foreign aid cuts like those proposed by US President Donald Trump.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;“Helping other countries fight poverty and disease makes the world more stable, and it makes Americans and people everywhere safer. Foreign aid delivers a fantastic return on investment,” Gates &lt;a href=&quot;https://www.gatesnotes.com/Health/16-Million-Reasons-To-Be-Optimistic-About-Polio&quot;&gt;said at the convention&lt;/a&gt;.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Polio eradication efforts have not only helped eliminate the disease in most countries, but they have led to better health systems and improved responses to other global health crises like ebola and Zika.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Read More: &lt;a href=&quot;https://www.globalcitizen.org/en/content/bill-gates-twitter-2017-not-the-worst/&quot;&gt;These Tweets From Bill Gates Will Remind You That 2017 Wasn’t All Bad&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Nigeria’s Minister of Finance Kemi Adeosun announced the debt repayment on Tuesday in Abuja when she met with Japanese House of Councillors Parliamentarians.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;The repayment was set to begin four years after Japan’s loan in 2014, which is what has now sparked the repayment.&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Mon, 15 Jan 2018 22:49:28 +0000</pubDate>
<dc:creator>everdev</dc:creator>
<og:title>Bill and Melinda Gates Are Paying Off Nigeria’s $76 Million Debt to Japan</og:title>
<og:type>article</og:type>
<og:url>https://www.globalcitizen.org/en/content/gates-paying-off-nigeria-debt/</og:url>
<og:image>https://media.globalcitizen.org/thumbnails/be/5b/be5b31b5-c753-44a9-8e65-2e97c4e8feb2/bill-gates-2017.jpg__1500x670_q85_crop_subsampling-2.jpg</og:image>
<og:description>Nigeria owes Japan $76 million for a polio eradication loan.</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.globalcitizen.org/en/content/gates-paying-off-nigeria-debt/</dc:identifier>
</item>
<item>
<title>Google Memory Loss</title>
<link>https://www.tbray.org/ongoing/When/201x/2018/01/15/Google-is-losing-its-memory</link>
<guid isPermaLink="true" >https://www.tbray.org/ongoing/When/201x/2018/01/15/Google-is-losing-its-memory</guid>
<description>&lt;div id=&quot;centercontent&quot; readability=&quot;90.535024611889&quot;&gt;
&lt;p itemprop=&quot;description&quot;&gt;I think Google has stopped in­dex­ing the old­er parts of the We­b. I think I can prove it. Google’s com­pe­ti­tion is do­ing bet­ter.&lt;/p&gt;
&lt;p id=&quot;p-1&quot; class=&quot;p1&quot;&gt;&lt;span class=&quot;h2&quot;&gt;Ev­i­dence&lt;/span&gt; · This isn’t just a proof, it’s a rock-n-roll proof. Back in 2006, I pub­lished &lt;a href=&quot;https://www.tbray.org/ongoing/When/200x/2006/03/13/Rock-n-Roll-Animal&quot;&gt;a re­view&lt;/a&gt; of Lou Reed’s &lt;cite&gt;Rock n Roll An­i­mal&lt;/cite&gt; al­bum. Back in 2008, &lt;a href=&quot;http://inessential.com/&quot;&gt;Brent Sim­mons&lt;/a&gt; pub­lished &lt;a href=&quot;http://inessential.com/2008/11/04/that_new_sound&quot;&gt;That New Sound&lt;/a&gt;, about The Clash’s &lt;cite&gt;Lon­don Calling&lt;/cite&gt;. Here’s a chal­lenge: Can you find ei­ther of these with Google? Even if you read them first and can care­ful­ly con­jure up exact-match strings, and then use the “site:” pre­fix? I can’t.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[Up­date: Now you can, be­cause this piece went a lit­tle vi­ral. But you sure couldn’t ear­li­er in the day.]&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;p-2&quot; class=&quot;p1&quot;&gt;&lt;span class=&quot;h2&quot;&gt;Why?&lt;/span&gt; · Ob­vi­ous­ly, in­dex­ing the whole Web is crush­ing­ly ex­pen­sive, and get­ting more so ev­ery day. Things like 10+-year-old mu­sic re­views that are nev­er up­dat­ed, no longer ac­cept com­ments, are light­ly if at all linked-to out­side their own site, and rarely if ev­er visited… well, let’s face it, Google’s not go­ing to be sell­ing many ads next to search re­sults that turn them up. So from a busi­ness point of view, it’s hard to make a case for Google in­dex­ing ev­ery­thing, no mat­ter how old and how ob­scure.&lt;/p&gt;
&lt;p&gt;My pain here is pure­ly per­son­al; I freely con­fess that I’d been us­ing Google’s glob­al in­fras­truc­ture as my own per­son­al search in­dex for my own per­son­al pub­li­ca­tion­s. But the pain is re­al; I fre­quent­ly mine my own his­to­ry to re-use, for ex­am­ple in con­struct­ing the cur­rent &lt;a href=&quot;https://www.tbray.org/ongoing/What/Song%20of%20the%20Day/&quot;&gt;#SongOfTheDay&lt;/a&gt; se­ries.&lt;/p&gt;
&lt;p id=&quot;p-4&quot; class=&quot;p1&quot;&gt;&lt;span class=&quot;h2&quot;&gt;Com­pe­ti­tion&lt;/span&gt; · Bing &lt;a href=&quot;https://www.bing.com/search?q=tim+bray+rock+n+roll+animal&amp;amp;qs=n&amp;amp;form=QBLH&amp;amp;sp=-1&amp;amp;pq=tim+bray+rock+n+roll+animal&amp;amp;sc=1-11&amp;amp;sk=&amp;amp;cvid=503B1ECB9D0F4435B04866A1E59BE757&quot;&gt;can find it&lt;/a&gt;! Duck­Duck­Go &lt;a href=&quot;https://duckduckgo.com/?q=tim+bray+rock+n+roll+animal&amp;amp;t=hf&amp;amp;ia=web&quot;&gt;can too&lt;/a&gt;! Both of them can find Brent’s &lt;cite&gt;Lon­don Calling&lt;/cite&gt; piece, too.&lt;/p&gt;
&lt;p id=&quot;p-5&quot; class=&quot;p1&quot;&gt;&lt;span class=&quot;h2&quot;&gt;What Google cares about&lt;/span&gt; · It cares about giv­ing you great an­swers to the ques­tions that mat­ter to you right now. And I find that if I type in a ques­tion, even some­thing com­pli­cat­ed and ob­scure, Google of­ten sur­pris­es me with a time­ly, ac­cu­rate an­swer. They’ve nev­er claimed to in­dex ev­ery word on ev­ery page.&lt;/p&gt;
&lt;p&gt;My men­tal mod­el of the Web is as a per­ma­nen­t, long-lived store of humanity’s in­tel­lec­tu­al her­itage. For this to be use­ful, it needs to be in­dexed, just like a li­brary. Google ap­par­ent­ly doesn’t share that view.&lt;/p&gt;
&lt;p id=&quot;p-6&quot; class=&quot;p1&quot;&gt;&lt;span class=&quot;h2&quot;&gt;What I’m go­ing to do&lt;/span&gt; · When I have a ques­tion I want an­swered, I’ll prob­a­bly still go to Google. When I want to find a spe­cif­ic Web page and I think I know some of the words it con­tain­s, I won’t any more, I’ll pick Bing or Duck­Duck­Go.&lt;/p&gt;
&lt;hr /&gt;

&lt;hr /&gt;

&lt;/div&gt;&lt;div id=&quot;rightcontent&quot; readability=&quot;24.189373297003&quot;&gt;


&lt;div id=&quot;potd&quot;&gt;&lt;a id=&quot;tnA&quot; href=&quot;https://www.tbray.org/ongoing/goto-potd/&quot; name=&quot;tnA&quot;&gt;&lt;img id=&quot;tnI&quot; src=&quot;https://www.tbray.org/ongoing/potd.png&quot; alt=&quot;picture of the day&quot; name=&quot;tnI&quot; /&gt;&lt;/a&gt;&lt;/div&gt;


&lt;div class=&quot;employ&quot; readability=&quot;11.188405797101&quot;&gt;
&lt;p&gt;By &lt;a rel=&quot;author&quot; href=&quot;https://www.tbray.org/ongoing/misc/Tim&quot;&gt;Tim Bray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am an employee&lt;br /&gt;of Amazon.com, but&lt;br /&gt;the opinions expressed here&lt;br /&gt;are my own, and no other party&lt;br /&gt;necessarily agrees with them.&lt;/p&gt;
&lt;p&gt;A full disclosure of my&lt;br /&gt;professional interests is&lt;br /&gt;on the &lt;a href=&quot;https://www.tbray.org/ongoing/misc/Tim&quot;&gt;author&lt;/a&gt; page.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
<pubDate>Mon, 15 Jan 2018 22:04:16 +0000</pubDate>
<dc:creator>AndrewDucker</dc:creator>
<dc:language>en</dc:language>
<dc:identifier>https://www.tbray.org/ongoing/When/201x/2018/01/15/Google-is-losing-its-memory</dc:identifier>
</item>
<item>
<title>Pick strong consistency whenever possible</title>
<link>https://cloudplatform.googleblog.com/2018/01/why-you-should-pick-strong-consistency-whenever-possible.html</link>
<guid isPermaLink="true" >https://cloudplatform.googleblog.com/2018/01/why-you-should-pick-strong-consistency-whenever-possible.html</guid>
<description></description>
<pubDate>Mon, 15 Jan 2018 20:52:13 +0000</pubDate>
<dc:creator>rbanffy</dc:creator>
<og:title>Why you should pick strong consistency, whenever possible</og:title>
<og:url>https://cloudplatform.googleblog.com/2018/01/why-you-should-pick-strong-consistency-whenever-possible.html</og:url>
<og:type>article</og:type>
<og:description>By Mike Curtiss, Software Engineer, Cloud Spanner Do you like complex application logic? We don’t either. One of the things we’ve learned ...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://cloudplatform.googleblog.com/2018/01/why-you-should-pick-strong-consistency-whenever-possible.html</dc:identifier>
</item>
<item>
<title>Community-Owned Fiber Networks: Value Leaders in America</title>
<link>https://cyber.harvard.edu/publications/2018/01/communityfiber</link>
<guid isPermaLink="true" >https://cyber.harvard.edu/publications/2018/01/communityfiber</guid>
<description>&lt;p dir=&quot;ltr&quot;&gt;&lt;em&gt;by David Talbot, Kira Hessekiel, and Danielle Kehl&lt;/em&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;By one recent estimate, about 9.2 percent of Americans, or almost 30 million people, lack access to wired home broadband service, which the FCC defines as an Internet access connection providing speeds of at least 25 Mbps download and 3 Mbps upload.&lt;/span&gt;&lt;/span&gt; Even where home broadband is available, high prices inhibit adoption; in one national survey, 33 percent of non-subscribers cited cost of service as the primary barrier. Municipally and other community-owned networks have been proposed as a driver of competition and resulting better service and prices.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;We examined prices advertised by a subset of community-owned networks that use fiber-to-the-home (FTTH) technology. In late 2015 and 2016 we collected advertised prices for residential data plans offered by 40 community-owned (typically municipally-owned) FTTH networks. We then identified the least-expensive service that meets the federal definition of broadband (regardless of the exact speeds provided) and compared advertised prices to those of private competitors in the same markets. We were able to make comparisons in 27 communities and found that in 23 cases, the community-owned FTTH providers’ pricing was lower when the service costs and fees were averaged over four years. (Using a three year-average changed this fraction to 22 out of 27.) In the other 13 communities, comparisons were not possible, either because the private providers’ website terms of service deterred or prohibited data collection or because no competitor offered service that qualified as broadband. We also found that almost all community-owned FTTH networks offered prices that were clear and unchanging, whereas private ISPs typically charged initial low promotional or “teaser” rates that later sharply rose, usually after 12 months.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;We made the incidental finding that Comcast advertised different prices and terms for the same service in different regions. We do not have enough information to draw conclusions about the impacts of these practices. In general, our ability to study broadband pricing was constrained by the lack of standardization in internet service offerings and a shortage of available data. &lt;/p&gt;
</description>
<pubDate>Mon, 15 Jan 2018 18:05:51 +0000</pubDate>
<dc:creator>artsandsci</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://cyber.harvard.edu/publications/2018/01/communityfiber</dc:identifier>
</item>
<item>
<title>Researchers find that one person likely drove Bitcoin from $150 to $1,000</title>
<link>https://techcrunch.com/2018/01/15/researchers-finds-that-one-person-likely-drove-bitcoin-from-150-to-1000/</link>
<guid isPermaLink="true" >https://techcrunch.com/2018/01/15/researchers-finds-that-one-person-likely-drove-bitcoin-from-150-to-1000/</guid>
<description>&lt;img src=&quot;https://tctechcrunch2011.files.wordpress.com/2015/10/branding-bitcoin.jpg?w=738&quot; class=&quot;&quot;/&gt;&lt;p id=&quot;speakable-summary&quot;&gt;Researchers Neil Gandal, JT Hamrick, Tyler Moore, and Tali Oberman have written a fascinating paper on &lt;a href=&quot;https://techcrunch.com/tag/Bitcoin&quot;&gt;Bitcoin&lt;/a&gt; price manipulation. Entitled “Price Manipulation in the Bitcoin Ecosystem” and appearing in the recent issue of the &lt;a target=&quot;_blank&quot; href=&quot;https://www.sciencedirect.com/science/article/pii/S0304393217301666&quot; rel=&quot;noopener&quot;&gt;Journal of Monetary Economics&lt;/a&gt; the paper describes to what degree the Bitcoin ecosystem is controlled by bad actors.&lt;/p&gt;&lt;p&gt;To many it’s been obvious that the Bitcoin markets are, at the very least, being manipulated by one or two big players. “This paper identifies and analyzes the impact of suspicious trading activity on the Mt. Gox Bitcoin currency exchange, in which approximately 600,000 bitcoins (BTC) valued at $188 million were fraudulently acquired,” the researchers wrote. “During both periods, the USD-BTC exchange rate rose by an average of four percent on days when suspicious trades took place, compared to a slight decline on days without suspicious activity. Based on rigorous analysis with extensive robustness checks, the paper demonstrates that the suspicious trading activity likely caused the unprecedented spike in the USD-BTC exchange rate in late 2013, when the rate jumped from around $150 to more than $1,000 in two months.”&lt;/p&gt;
&lt;p&gt;The team found that many instances of price manipulation happened simply because the market was very thin for various cryptocurrencies including early Bitcoin. “Despite the huge increase in market capitalization, similar to the bitcoin market in 2013 (the period examined), markets for these other cryptocurrencies are very thin. The number of cryptocurrencies has increased from approximately 80 during the period examined to 843 today! Many of these markets are thin and subject to price manipulation.”&lt;/p&gt;
&lt;p&gt;The manipulation happened primarily via two bots, Markus and Willy, that seemed to be performing valid trades but did not actually own the bitcoin they were using. During the Mt. Gox hack a number of these bots were able to create fake trades and make off with millions while manipulating the price of BTC.&lt;/p&gt;

&lt;blockquote readability=&quot;23&quot;&gt;
&lt;p&gt;The publicly reported trading volume at Mt. Gox included the fraudulent transactions, thereby signaling to the market that heavy trading activity was taking place. Indeed, the paper later shows that even if the fraudulent activity is set aside, average trading volume on all major exchanges trading bitcoins and USD was much higher on days the bots were active. The associated increase in “non-bot” trading was, of course, profitable for Mt. Gox, since it collected transaction fees.&lt;/p&gt;
&lt;p&gt;But the Willy Bot likely served another purpose as well. A theory, initially espoused in a Reddit post shortly after Mt. Gox’s collapse (Anonymous, 2014b), is that hackers stole a huge number (approximately 650,000) of bitcoins from Mt. Gox in June 2011 and that the exchange owner Mark Karpales took extraordinary steps to cover up the loss for several years.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The bottom line is simple: if Bitcoin wants to be taken seriously it probably shouldn’t be this easy or legal to manipulate the markets. While decentralization is supposed to replace regulation it’s clear that there is still a way to go before it can be truly taken seriously. “As mainstream finance invests in cryptocurrency assets and as countries take steps toward legalizing bitcoin as a payment system (as Japan did in April 2017), it is important to understand how susceptible cryptocurrency markets are to manipulation. Our study provides a first examination,” write the researchers.&lt;/p&gt;
&lt;small&gt;Featured Image: Bryce Durbin&lt;/small&gt;</description>
<pubDate>Mon, 15 Jan 2018 17:46:32 +0000</pubDate>
<dc:creator>middle1</dc:creator>
<og:title>Researchers find that one person likely drove Bitcoin from $150 to $1,000</og:title>
<og:description>Researchers Neil Gandal, JT Hamrick, Tyler Moore, and Tali Oberman have written a fascinating paper on Bitcoin price manipulation. Entitled &quot;Price..</og:description>
<og:image>https://tctechcrunch2011.files.wordpress.com/2015/10/branding-bitcoin.jpg</og:image>
<og:url>http://social.techcrunch.com/2018/01/15/researchers-finds-that-one-person-likely-drove-bitcoin-from-150-to-1000/</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2018/01/15/researchers-finds-that-one-person-likely-drove-bitcoin-from-150-to-1000/</dc:identifier>
</item>
<item>
<title>Yuzu – Nintendo Switch Emulator</title>
<link>https://github.com/yuzu-emu/yuzu</link>
<guid isPermaLink="true" >https://github.com/yuzu-emu/yuzu</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/yuzu-emu/yuzu&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/4cb736274fea28e3a2584b80afddb3da04027bd1/68747470733a2f2f7472617669732d63692e6f72672f79757a752d656d752f79757a752e7376673f6272616e63683d6d6173746572&quot; alt=&quot;Travis CI Build Status&quot; data-canonical-src=&quot;https://travis-ci.org/yuzu-emu/yuzu.svg?branch=master&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;yuzu is an experimental open-source emulator for the Nintendo Switch from the creators of &lt;a href=&quot;https://citra-emu.org/&quot; rel=&quot;nofollow&quot;&gt;Citra&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is written in C++ with portability in mind, with builds actively maintained for Windows, Linux and macOS. The emulator is currently only useful for homebrew development and research purposes.&lt;/p&gt;
&lt;p&gt;yuzu only emulates a subset of Switch hardware and therefore is generally only useful for running/debugging homebrew applications. At this time, yuzu does not run any commercial Switch games. yuzu can boot some games, to varying degrees of success, but does not implement any of the necessary GPU features to render 3D graphics.&lt;/p&gt;
&lt;p&gt;yuzu is licensed under the GPLv2 (or any later version). Refer to the license.txt file included.&lt;/p&gt;
&lt;p&gt;Check out our &lt;a href=&quot;https://yuzu-emu.org/&quot; rel=&quot;nofollow&quot;&gt;website&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;For development discussion, please join us on &lt;a href=&quot;https://discord.gg/XQV6dn9&quot; rel=&quot;nofollow&quot;&gt;Discord&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Development&lt;/h3&gt;
&lt;p&gt;Most of the development happens on GitHub. It's also where &lt;a href=&quot;https://github.com/yuzu-emu/yuzu&quot;&gt;our central repository&lt;/a&gt; is hosted.&lt;/p&gt;
&lt;p&gt;If you want to contribute please take a look at the &lt;a href=&quot;https://github.com/yuzu-emu/yuzu/blob/master/CONTRIBUTING.md&quot;&gt;Contributor's Guide&lt;/a&gt; and &lt;a href=&quot;https://github.com/yuzu-emu/yuzu/wiki/Developer-Information&quot;&gt;Developer Information&lt;/a&gt;. You should as well contact any of the developers on Discord in order to know about the current state of the emulator.&lt;/p&gt;
&lt;h3&gt;Building&lt;/h3&gt;
&lt;h3&gt;Support&lt;/h3&gt;
&lt;p&gt;We happily accept monetary donations or donated games and hardware. Please see our &lt;a href=&quot;https://yuzu-emu.org/donate/&quot; rel=&quot;nofollow&quot;&gt;donations page&lt;/a&gt; for more information on how you can contribute to yuzu. Any donations received will go towards things like:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Switch consoles to explore and reverse-engineer the hardware&lt;/li&gt;
&lt;li&gt;Switch games for testing, reverse-engineering, and implementing new features&lt;/li&gt;
&lt;li&gt;Web hosting and infrastructure setup&lt;/li&gt;
&lt;li&gt;Software licenses (e.g. Visual Studio, IDA Pro, etc.)&lt;/li&gt;
&lt;li&gt;Additional hardware (e.g. GPUs as-needed to improve rendering support, other peripherals to add support for, etc.)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We also more than gladly accept used Switch consoles, preferably ones with firmware 3.0.0 or lower! If you would like to give yours away, don't hesitate to join our &lt;a href=&quot;https://discord.gg/VXqngT3&quot; rel=&quot;nofollow&quot;&gt;Discord&lt;/a&gt; and talk to bunnei. You may also contact: &lt;a href=&quot;mailto:donations@yuzu-emu.org&quot;&gt;donations@yuzu-emu.org&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;</description>
<pubDate>Mon, 15 Jan 2018 14:45:51 +0000</pubDate>
<dc:creator>hising</dc:creator>
<og:image>https://avatars1.githubusercontent.com/u/35075882?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>yuzu-emu/yuzu</og:title>
<og:url>https://github.com/yuzu-emu/yuzu</og:url>
<og:description>yuzu - Nintendo Switch Emulator</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/yuzu-emu/yuzu</dc:identifier>
</item>
</channel>
</rss>