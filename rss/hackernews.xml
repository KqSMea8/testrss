<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Google starts blocking “uncertified” Android devices from logging in</title>
<link>https://arstechnica.com/gadgets/2018/03/google-starts-blocking-uncertified-android-devices-from-logging-in/</link>
<guid isPermaLink="true" >https://arstechnica.com/gadgets/2018/03/google-starts-blocking-uncertified-android-devices-from-logging-in/</guid>
<description>&lt;img src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/03/4-1.jpg&quot;/&gt;&lt;aside id=&quot;social-left&quot;&gt;&lt;a title=&quot;67 posters participating&quot; class=&quot;comment-count icon-comment-bubble-down&quot; href=&quot;https://arstechnica.com/gadgets/2018/03/google-starts-blocking-uncertified-android-devices-from-logging-in/?comments=1&quot;&gt;&lt;span class=&quot;comment-count-before&quot;&gt;reader comments&lt;/span&gt; &lt;span class=&quot;comment-count-number&quot;&gt;106&lt;/span&gt;&lt;/a&gt;
&lt;div class=&quot;share-links&quot;&gt;&lt;span&gt;Share this story&lt;/span&gt;    &lt;/div&gt;
&lt;/aside&gt;&lt;p&gt;Google is apparently stepping up its efforts to crack down on illicit distribution of Google's Android apps. According to &lt;a href=&quot;https://www.xda-developers.com/google-blocks-gapps-uncertified-devices-custom-rom-whitelist/&quot;&gt;XDA Developers&lt;/a&gt;, Google logins on unlicensed devices will now fail at setup, and a warning message will pop up stating &quot;Device is not certified by Google.&quot; This warning screen has appeared on and off in the past during a test phase, but XDA (and &lt;a href=&quot;https://forum.xda-developers.com/showpost.php?p=76004552&amp;amp;postcount=1361&quot;&gt;user reports&lt;/a&gt;) indicate it is now headed for a wider rollout.&lt;/p&gt;
&lt;p&gt;While the basic operating system code contained in the Android Open Source Project is free and open source, Google's apps that run on top of Android (like the Play Store, Gmail, Google Maps, etc.) and many others are not free. Google licenses these apps to device makers under a number of terms designed to &lt;a href=&quot;https://arstechnica.com/gadgets/2013/10/googles-iron-grip-on-android-controlling-open-source-by-any-means-necessary/3/&quot;&gt;give Google control&lt;/a&gt; over how the OS is used. Google's collection of default Android apps must all be bundled together, there are &lt;a href=&quot;https://arstechnica.com/gadgets/2014/02/new-android-oem-licensing-terms-leak-open-comes-with-restrictions/&quot;&gt;placement and default service requirements&lt;/a&gt;, and devices must pass an ever-growing list of &lt;a href=&quot;https://source.android.com/compatibility/cdd&quot;&gt;compatibility requirements&lt;/a&gt; to ensure app compatibility.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/03/5-1.jpg&quot; class=&quot;enlarge&quot; data-height=&quot;1587&quot; data-width=&quot;894&quot; alt=&quot;Google's warning message to users of pirated Google apps.&quot;&gt;&lt;img src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/03/5-1-300x533.jpg&quot; width=&quot;300&quot; height=&quot;533&quot; srcset=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/03/5-1-640x1136.jpg 2x&quot; alt=&quot;Google's warning message to users of pirated Google apps.&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;caption-text&quot;&gt;&lt;a href=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/03/5-1.jpg&quot; class=&quot;enlarge-link&quot; data-height=&quot;1587&quot; data-width=&quot;894&quot;&gt;Enlarge&lt;/a&gt; &lt;span class=&quot;sep&quot;&gt;/&lt;/span&gt; Google's warning message to users of pirated Google apps.&lt;/div&gt;

Android distributions that don't pass Google's compatibility requirements &lt;a href=&quot;https://source.android.com/setup/brands&quot;&gt;aren't allowed&lt;/a&gt; to be called &quot;Android&quot; (which is a registered trademark of Google), so they are Android forks. The most high-profile example of an Android fork is Amazon's Kindle Fire line of products, but most devices that ship in China (where Google doesn't do much business) fall under the umbrella of an &quot;Android fork,&quot; too.
&lt;p&gt;While Google's Android apps are only properly available as a pre-loaded app (or through the pre-loaded Play Store), they are openly distributed on forums, custom ROM sites, third-party app stores, and other places online. When a non-compatible device seller (or a user) loads these on a device, they can potentially trigger Google's new message at login.&lt;/p&gt;
&lt;p&gt;The message pops up when you try to log in to Google's services, which usually happens during the device setup. Users who purchased the device are warned that &quot;the device manufacturer has preloaded Google apps and services without certification from Google,&quot; and users aren't given many options other than to complain to the manufacturer. At this point, logging in to Google services is blocked, and non-tech-savvy users will have to live without the Google apps.&lt;/p&gt;
&lt;p&gt;Users of custom Android ROMs—which wipe out the stock software and load a modified version of Android—will start seeing this message, too. Thankfully at the bottom of the message these folks are given an escape hatch: head to &lt;a href=&quot;http://g.co/androiddeviceregistration&quot;&gt;g.co/AndroidDeviceRegistration&lt;/a&gt; and enter your Android ID, which will register the device to your Google account. This isn't the easiest thing in the world to do. An &lt;a href=&quot;https://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID&quot;&gt;Android ID&lt;/a&gt; is 64-bit hex string set at first boot and regenerated every time a factory reset is performed. The only official way to view your Android ID is to plug in your device to a computer, install the Android developer tools, and run a command. While there are some apps that will show your Android ID, it's also tough to install an app without first logging in to the app store. For seasoned ROM users, none of this is a big deal. But the process is definitely harder than it could be, almost like it's designed to keep out the general public.&lt;/p&gt;
&lt;p&gt;We've actually been unknowing victims of illicit Google app distribution here at Ars before. We once imported a &lt;a href=&quot;https://arstechnica.com/gadgets/2016/03/xiaomi-redmi-3-review-a-100-metal-phone-that-crushes-other-100-phones/&quot;&gt;Xiaomi Redmi 3&lt;/a&gt; smartphone from China to review, and, upon booting it up, we were very surprised to find it came with the Google apps pre-installed. As a device from China, this should not have happened. After we posted the review, Xiaomi contacted us with some very scary news: &quot;The Redmi 3 should not come with Google Play pre-installed because it is a China-only product.&quot; Xiaomi told Ars. &quot;It is very likely that the Play Store you saw was preinstalled by the importer/seller. This is a very common practice with the unauthorised importers.&quot;&lt;/p&gt;
&lt;p&gt;This would mean the reseller opened our phone, unlocked the bootloader, flashed on a new ROM with Google Play, re-locked the bootloader, and stuck the phone back in the box. There was no obvious evidence that our device had been tampered with, and, while hopefully the seller only installed Google apps, they could have just as easily loaded malware onto the device. A message like this during setup would have been a big red flag that something was wrong.&lt;/p&gt;
</description>
<pubDate>Mon, 26 Mar 2018 18:15:58 +0000</pubDate>
<dc:creator>AndrewDucker</dc:creator>
<og:url>https://arstechnica.com/gadgets/2018/03/google-starts-blocking-uncertified-android-devices-from-logging-in/</og:url>
<og:title>Google starts blocking “uncertified” Android devices from logging in</og:title>
<og:image>https://cdn.arstechnica.net/wp-content/uploads/2018/03/4-1-760x380.jpg</og:image>
<og:description>Custom ROM users get a way out, but noobs with pirated apps will be out of luck.</og:description>
<og:type>article</og:type>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arstechnica.com/gadgets/2018/03/google-starts-blocking-uncertified-android-devices-from-logging-in/</dc:identifier>
</item>
<item>
<title>A Proposal for Package Versioning in Go</title>
<link>https://blog.golang.org/versioning-proposal</link>
<guid isPermaLink="true" >https://blog.golang.org/versioning-proposal</guid>
<description>&lt;p class=&quot;date&quot;&gt;26 March 2018&lt;/p&gt;
&lt;h4 id=&quot;TOC_1.&quot;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;Eight years ago, the Go team introduced &lt;code&gt;goinstall&lt;/code&gt; (which led to &lt;code&gt;go get&lt;/code&gt;) and with it the decentralized, URL-like import paths that Go developers are familiar with today. After we released &lt;code&gt;goinstall&lt;/code&gt;, one of the first questions people asked was how to incorporate version information. We admitted we didn’t know. For a long time, we believed that the problem of package versioning would be best solved by an add-on tool, and we encouraged people to create one. The Go community created many tools with different approaches. Each one helped us all better understand the problem, but by mid-2015 it was clear that there were now too many solutions. We needed to adopt a single, official tool.&lt;/p&gt;
&lt;p&gt;After a community discussion started at GopherCon in July 2015 and continuing into the fall, we all believed the answer would be to follow the package versioning approach exemplified by Rust’s Cargo, with tagged semantic versions, a manifest, a lock file, and a &lt;a href=&quot;https://research.swtch.com/version-sat&quot; target=&quot;_blank&quot;&gt;SAT solver&lt;/a&gt; to decide which versions to use. Sam Boyer led a team to create Dep, which followed this rough plan, and which we intended to serve as the model for &lt;code&gt;go&lt;/code&gt; command integration. But as we learned more about the implications of the Cargo/Dep approach, it became clear to me that Go would benefit from changing some of the details, especially concerning backwards compatibility.&lt;/p&gt;
&lt;h4 id=&quot;TOC_2.&quot;&gt;The Impact of Compatibility&lt;/h4&gt;
&lt;p&gt;The most important new feature of &lt;a href=&quot;https://blog.golang.org/preview-of-go-version-1&quot; target=&quot;_blank&quot;&gt;Go 1&lt;/a&gt; was not a language feature. It was Go 1’s emphasis on backwards compatibility. Until that point we’d issued stable release snapshots approximately monthly, each with significant incompatible changes. We observed significant acceleration in interest and adoption immediately after the release of Go 1. We believe that the &lt;a href=&quot;https://golang.org/doc/go1compat.html&quot; target=&quot;_blank&quot;&gt;promise of compatibility&lt;/a&gt; made developers feel much more comfortable relying on Go for production use and is a key reason that Go is popular today. Since 2013 the &lt;a href=&quot;https://golang.org/doc/faq#get_version&quot; target=&quot;_blank&quot;&gt;Go FAQ&lt;/a&gt; has encouraged package developers to provide their own users with similar expectations of compatibility. We call this the &lt;em&gt;import compatibility rule&lt;/em&gt;: “If an old package and a new package have the same import path, the new package must be backwards compatible with the old package.”&lt;/p&gt;
&lt;p&gt;Independently, &lt;a href=&quot;http://semver.org/&quot; target=&quot;_blank&quot;&gt;semantic versioning&lt;/a&gt; has become the &lt;em&gt;de facto&lt;/em&gt; standard for describing software versions in many language communities, including the Go community. Using semantic versioning, later versions are expected to be backwards-compatible with earlier versions, but only within a single major version: v1.2.3 must be compatible with v1.2.1 and v1.1.5, but v2.3.4 need not be compatible with any of those.&lt;/p&gt;
&lt;p&gt;If we adopt semantic versioning for Go packages, as most Go developers expect, then the import compatibility rule requires that different major versions must use different import paths. This observation led us to &lt;em&gt;semantic import versioning&lt;/em&gt;, in which versions starting at v2.0.0 include the major version in the import path: &lt;code&gt;my/thing/v2/sub/pkg&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A year ago I strongly believed that whether to include version numbers in import paths was largely a matter of taste, and I was skeptical that having them was particularly elegant. But the decision turns out to be a matter not of taste but of logic: import compatibility and semantic versioning together require semantic import versioning. When I realized this, the logical necessity surprised me.&lt;/p&gt;
&lt;p&gt;I was also surprised to realize that there is a second, independent logical route to semantic import versioning: &lt;a href=&quot;https://talks.golang.org/2016/refactor.article&quot; target=&quot;_blank&quot;&gt;gradual code repair&lt;/a&gt; or partial code upgrades. In a large program, it’s unrealistic to expect all packages in the program to update from v1 to v2 of a particular dependency at the same time. Instead, it must be possible for some of the program to keep using v1 while other parts have upgraded to v2. But then the program’s build, and the program’s final binary, must include both v1 and v2 of the dependency. Giving them the same import path would lead to confusion, violating what we might call the &lt;em&gt;import uniqueness rule&lt;/em&gt;: different packages must have different import paths. The only way to have partial code upgrades, import uniqueness, &lt;em&gt;and&lt;/em&gt; semantic versioning is to adopt semantic import versioning as well.&lt;/p&gt;
&lt;p&gt;It is of course possible to build systems that use semantic versioning without semantic import versioning, but only by giving up either partial code upgrades or import uniqueness. Cargo allows partial code upgrades by giving up import uniqueness: a given import path can have different meanings in different parts of a large build. Dep ensures import uniqueness by giving up partial code upgrades: all packages involved in a large build must find a single agreed-upon version of a given dependency, raising the possibility that large programs will be unbuildable. Cargo is right to insist on partial code upgrades, which are critical to large-scale software development. Dep is equally right to insist on import uniqueness. Complex uses of Go’s current vendoring support can violate import uniqueness. When they have, the resulting problems have been quite challenging for both developers and tools to understand. Deciding between partial code upgrades and import uniqueness requires predicting which will hurt more to give up. Semantic import versioning lets us avoid the choice and keep both instead.&lt;/p&gt;
&lt;p&gt;I was also surprised to discover how much import compatibility simplifies version selection, which is the problem of deciding which package versions to use for a given build. The constraints of Cargo and Dep make version selection equivalent to &lt;a href=&quot;https://research.swtch.com/version-sat&quot; target=&quot;_blank&quot;&gt;solving Boolean satisfiability&lt;/a&gt;, meaning it can be very expensive to determine whether a valid version configuration even exists. And then there may be many valid configurations, with no clear criteria for choosing the “best” one. Relying on import compatibility can instead let Go use a trivial, linear-time algorithm to find the single best configuration, which always exists. This algorithm, which I call &lt;a href=&quot;https://research.swtch.com/vgo-mvs&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;minimal version selection&lt;/em&gt;&lt;/a&gt;, in turn eliminates the need for separate lock and manifest files. It replaces them with a single, short configuration file, edited directly by both developers and tools, that still supports reproducible builds.&lt;/p&gt;
&lt;p&gt;Our experience with Dep demonstrates the impact of compatibility. Following the lead of Cargo and earlier systems, we designed Dep to give up import compatibility as part of adopting semantic versioning. I don’t believe we decided this deliberately; we just followed those other systems. The first-hand experience of using Dep helped us better understand exactly how much complexity is created by permitting incompatible import paths. Reviving the import compatibility rule by introducing semantic import versioning eliminates that complexity, leading to a much simpler system.&lt;/p&gt;
&lt;h4 id=&quot;TOC_3.&quot;&gt;Progress, a Prototype, and a Proposal&lt;/h4&gt;
&lt;p&gt;Dep was released in January 2017. Its basic model—code tagged with semantic versions, along with a configuration file that specified dependency requirements—was a clear step forward from most of the Go vendoring tools, and converging on Dep itself was also a clear step forward. I wholeheartedly encouraged its adoption, especially to help developers get used to thinking about Go package versions, both for their own code and their dependencies. While Dep was clearly moving us in the right direction, I had lingering concerns about the complexity devil in the details. I was particularly concerned about Dep lacking support for gradual code upgrades in large programs. Over the course of 2017, I talked to many people, including Sam Boyer and the rest of the package management working group, but none of us could see any clear way to reduce the complexity. (I did find many approaches that added to it.) Approaching the end of the year, it still seemed like SAT solvers and unsatisfiable builds might be the best we could do.&lt;/p&gt;
&lt;p&gt;In mid-November, trying once again to work through how Dep could support gradual code upgrades, I realized that our old advice about import compatibility implied semantic import versioning. That seemed like a real breakthrough. I wrote a first draft of what became my &lt;a href=&quot;https://research.swtch.com/vgo-import&quot; target=&quot;_blank&quot;&gt;semantic import versioning&lt;/a&gt; blog post, concluding it by suggesting that Dep adopt the convention. I sent the draft to the people I’d been talking to, and it elicited very strong responses: everyone loved it or hated it. I realized that I needed to work out more of the implications of semantic import versioning before circulating the idea further, and I set out to do that.&lt;/p&gt;
&lt;p&gt;In mid-December, I discovered that import compatibility and semantic import versioning together allowed cutting version selection down to &lt;a href=&quot;https://research.swtch.com/vgo-mvs&quot; target=&quot;_blank&quot;&gt;minimal version selection&lt;/a&gt;. I wrote a basic implementation to be sure I understood it, I spent a while learning the theory behind why it was so simple, and I wrote a draft of the post describing it. Even so, I still wasn’t sure the approach would be practical in a real tool like Dep. It was clear that a prototype was needed.&lt;/p&gt;
&lt;p&gt;In January, I started work on a simple &lt;code&gt;go&lt;/code&gt; command wrapper that implemented semantic import versioning and minimal version selection. Trivial tests worked well. Approaching the end of the month, my simple wrapper could build Dep, a real program that made use of many versioned packages. The wrapper still had no command-line interface—the fact that it was building Dep was hard-coded in a few string constants—but the approach was clearly viable.&lt;/p&gt;
&lt;p&gt;I spent the first three weeks of February turning the wrapper into a full versioned &lt;code&gt;go&lt;/code&gt; command, &lt;code&gt;vgo&lt;/code&gt;; writing drafts of a &lt;a href=&quot;https://research.swtch.com/vgo&quot; target=&quot;_blank&quot;&gt;blog post series introducing &lt;code&gt;vgo&lt;/code&gt;&lt;/a&gt;; and discussing them with Sam Boyer, the package management working group, and the Go team. And then I spent the last week of February finally sharing &lt;code&gt;vgo&lt;/code&gt; and the ideas behind it with the whole Go community.&lt;/p&gt;
&lt;p&gt;In addition to the core ideas of import compatibility, semantic import versioning, and minimal version selection, the &lt;code&gt;vgo&lt;/code&gt; prototype introduces a number of smaller but significant changes motivated by eight years of experience with &lt;code&gt;goinstall&lt;/code&gt; and &lt;code&gt;go get&lt;/code&gt;: the new concept of a &lt;a href=&quot;https://research.swtch.com/vgo-module&quot; target=&quot;_blank&quot;&gt;Go module&lt;/a&gt;, which is a collection of packages versioned as a unit; &lt;a href=&quot;https://research.swtch.com/vgo-repro&quot; target=&quot;_blank&quot;&gt;verifiable and verified builds&lt;/a&gt;; and &lt;a href=&quot;https://research.swtch.com/vgo-cmd&quot; target=&quot;_blank&quot;&gt;version-awareness throughout the &lt;code&gt;go&lt;/code&gt; command&lt;/a&gt;, enabling work outside &lt;code&gt;$GOPATH&lt;/code&gt; and the elimination of (most) &lt;code&gt;vendor&lt;/code&gt; directories.&lt;/p&gt;
&lt;p&gt;The result of all of this is the &lt;a href=&quot;https://golang.org/design/24301-versioned-go&quot; target=&quot;_blank&quot;&gt;official Go proposal&lt;/a&gt;, which I filed last week. Even though it might look like a complete implementation, it’s still just a prototype, one that we will all need to work together to complete. You can download and try the &lt;code&gt;vgo&lt;/code&gt; prototype from &lt;a href=&quot;https://golang.org/x/vgo&quot; target=&quot;_blank&quot;&gt;golang.org/x/vgo&lt;/a&gt;, and you can read the &lt;a href=&quot;https://research.swtch.com/vgo-tour&quot; target=&quot;_blank&quot;&gt;Tour of Versioned Go&lt;/a&gt; to get a sense of what using &lt;code&gt;vgo&lt;/code&gt; is like.&lt;/p&gt;
&lt;h4 id=&quot;TOC_4.&quot;&gt;The Path Forward&lt;/h4&gt;
&lt;p&gt;The proposal I filed last week is exactly that: an initial proposal. I know there are problems with it that the Go team and I can’t see, because Go developers use Go in many clever ways that we don’t know about. The goal of the proposal feedback process is for us all to work together to identify and address the problems in the current proposal, to make sure that the final implementation that ships in a future Go release works well for as many developers as possible. Please point out problems on the &lt;a href=&quot;https://golang.org/issue/24301&quot; target=&quot;_blank&quot;&gt;proposal discussion issue&lt;/a&gt;. I will keep the &lt;a href=&quot;https://golang.org/issue/24301#issuecomment-371228742&quot; target=&quot;_blank&quot;&gt;discussion summary&lt;/a&gt; and &lt;a href=&quot;https://golang.org/issue/24301#issuecomment-371228664&quot; target=&quot;_blank&quot;&gt;FAQ&lt;/a&gt; updated as feedback arrives.&lt;/p&gt;
&lt;p&gt;For this proposal to succeed, the Go ecosystem as a whole—and in particular today’s major Go projects—will need to adopt the import compatibility rule and semantic import versioning. To make sure that can happen smoothly, we will also be conducting user feedback sessions by video conference with projects that have questions about how to incorporate the new versioning proposal into their code bases or have feedback about their experiences. If you are interested in participating in such a session, please email Steve Francia at spf@golang.org.&lt;/p&gt;
&lt;p&gt;We’re looking forward to (finally!) providing the Go community with a single, official answer to the question of how to incorporate package versioning into &lt;code&gt;go get&lt;/code&gt;. Thanks to everyone who helped us get this far, and to everyone who will help us going forward. We hope that, with your help, we can ship something that Go developers will love.&lt;/p&gt;
&lt;p class=&quot;author&quot;&gt;By Russ Cox&lt;/p&gt;
</description>
<pubDate>Mon, 26 Mar 2018 15:51:47 +0000</pubDate>
<dc:creator>ArmandGrillet</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.golang.org/versioning-proposal</dc:identifier>
</item>
<item>
<title>Statement by FTC Regarding Reported Concerns about Facebook Privacy Practices</title>
<link>https://www.ftc.gov/news-events/press-releases/2018/03/statement-acting-director-ftcs-bureau-consumer-protection</link>
<guid isPermaLink="true" >https://www.ftc.gov/news-events/press-releases/2018/03/statement-acting-director-ftcs-bureau-consumer-protection</guid>
<description>&lt;p&gt;Tom Pahl, Acting Director of the Federal Trade Commission’s Bureau of Consumer Protection, issued the following statement regarding reported concerns about Facebook’s privacy practices:&lt;/p&gt;
&lt;p&gt;“The FTC is firmly and fully committed to using all of its tools to protect the privacy of consumers. Foremost among these tools is enforcement action against companies that fail to honor their privacy promises, including to comply with Privacy Shield, or that engage in unfair acts that cause substantial injury to consumers in violation of the FTC Act. Companies who have settled previous FTC actions must also comply with FTC order provisions imposing privacy and data security requirements. Accordingly, the FTC takes very seriously recent press reports raising substantial concerns about the privacy practices of Facebook. Today, the FTC is confirming that it has an open non-public investigation into these practices.”&lt;/p&gt;
&lt;p&gt;The Federal Trade Commission works to promote competition, and &lt;a href=&quot;https://www.ftc.gov/about-ftc/bureaus-offices/bureau-consumer-protection&quot;&gt;protect and educate consumers&lt;/a&gt;. You can &lt;a href=&quot;https://www.consumer.ftc.gov/&quot;&gt;learn more about consumer topics&lt;/a&gt; and file a &lt;a href=&quot;https://www.ftc.gov/complaint&quot;&gt;consumer complaint online&lt;/a&gt; or by calling 1-877-FTC-HELP (382-4357). Like the FTC on &lt;a href=&quot;https://www.facebook.com/federaltradecommission&quot;&gt;Facebook&lt;/a&gt;, follow us on &lt;a href=&quot;https://twitter.com/FTC&quot;&gt;Twitter&lt;/a&gt;, read our &lt;a href=&quot;https://www.ftc.gov/news-events/blogs&quot;&gt;blogs&lt;/a&gt; and &lt;a href=&quot;https://www.ftc.gov/stay-connected&quot;&gt;subscribe to press releases&lt;/a&gt; for the latest FTC news and resources.&lt;/p&gt;
</description>
<pubDate>Mon, 26 Mar 2018 14:57:11 +0000</pubDate>
<dc:creator>Jhsto</dc:creator>
<og:type>article</og:type>
<og:url>https://www.ftc.gov/news-events/press-releases/2018/03/statement-acting-director-ftcs-bureau-consumer-protection</og:url>
<og:title>Statement by the Acting Director of FTC’s Bureau of Consumer Protection Regarding Reported Concerns about Facebook Privacy Practices</og:title>
<og:description>Tom Pahl, Acting Director of the Federal Trade Commission’s Bureau of Consumer Protection, issued the following statement regarding reported concerns about Facebook’s privacy practices:“The FTC is firmly and fully committed to using all of its tools to protect the privacy of consumers.</og:description>
<og:image>https://www.ftc.gov/sites/default/files/images/refunds/social-share/ftc_social_share_default_en.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.ftc.gov/news-events/press-releases/2018/03/statement-acting-director-ftcs-bureau-consumer-protection</dc:identifier>
</item>
<item>
<title>Kim Dotcom wins battle in ongoing fight against U.S. extradition</title>
<link>https://www.reuters.com/article/us-newzealand-internet-dotcom/megaupload-founder-wins-battle-in-ongoing-fight-against-u-s-extradition-idUSKBN1H20D0</link>
<guid isPermaLink="true" >https://www.reuters.com/article/us-newzealand-internet-dotcom/megaupload-founder-wins-battle-in-ongoing-fight-against-u-s-extradition-idUSKBN1H20D0</guid>
<description>&lt;p class=&quot;first-p_2htdt&quot;&gt;WELLINGTON (Reuters) - Internet entrepreneur Kim Dotcom won one battle with New Zealand authorities on Monday when a Wellington court ruled the attorney general broke the law by refusing his request to be given all information about him held by public agencies.&lt;/p&gt;
&lt;div class=&quot;container_2pnvl&quot;&gt;
&lt;div class=&quot;container_1tVQo&quot; tabindex=&quot;-1&quot;&gt;


&lt;span class=&quot;caption_KoNH1&quot;&gt;FILE PHOTO - German tech entrepreneur Kim Dotcom sits in a chair during a court hearing in Auckland, New Zealand, September 24, 2015. REUTERS/Nigel Marple/File Photo&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;&quot;&gt;The Human Rights Review Tribunal’s decision might be relevant for his high-profile U.S. extradition case, which is with the Court of Appeal. Dotcom says the information he requested in July 2015 and denied one month later could be presented as evidence in that case.&lt;/p&gt;
&lt;p class=&quot;&quot;&gt;German-born Dotcom faces extradition to the United States relating to his Megaupload site, which was shut down in 2012 following an FBI-ordered raid on his Auckland mansion.&lt;/p&gt;
&lt;p class=&quot;&quot;&gt;U.S. authorities say Dotcom and three co-accused Megaupload executives cost film studios and record companies more than $500 million and generated more than $175 million by encouraging paying users to store and share copyrighted material.&lt;/p&gt;
&lt;p class=&quot;&quot;&gt;Dotcom, who has New Zealand residency, is fighting those charges and the extradition.&lt;/p&gt;
&lt;p class=&quot;&quot;&gt;The Human Rights Review Tribunal awarded Dotcom damages of NZ$30,000 ($21,816) for the “loss of a benefit” and NZ$60,000 for “loss of dignity and injury to feelings”.&lt;/p&gt;
&lt;div class=&quot;container_28wm1&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;attribution_o4ojT&quot; readability=&quot;7&quot;&gt;
&lt;p class=&quot;content_27_rw&quot;&gt;Reporting by Marius Zaharia; Editing by Paul Tait&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

</description>
<pubDate>Mon, 26 Mar 2018 12:26:14 +0000</pubDate>
<dc:creator>reeteshv</dc:creator>
<og:title>Megaupload founder wins battle in ongoing fight against U.S....</og:title>
<og:url>https://www.reuters.com/article/us-newzealand-internet-dotcom/megaupload-founder-wins-battle-in-ongoing-fight-against-u-s-extradition-idUSKBN1H20D0</og:url>
<og:type>article</og:type>
<og:description>Internet entrepreneur Kim Dotcom won one battle with New Zealand authorities on Monday when a Wellington court ruled the attorney general broke the law by refusing his request to be given all information about him held by public agencies.</og:description>
<og:image>https://s2.reutersmedia.net/resources/r/?m=02&amp;d=20180326&amp;t=2&amp;i=1244846783&amp;w=1200&amp;r=LYNXMPEE2P08I</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reuters.com/article/us-newzealand-internet-dotcom/megaupload-founder-wins-battle-in-ongoing-fight-against-u-s-extradition-idUSKBN1H20D0</dc:identifier>
</item>
<item>
<title>Avoid Else, Return Early (2013)</title>
<link>http://blog.timoxley.com/post/47041269194/avoid-else-return-early</link>
<guid isPermaLink="true" >http://blog.timoxley.com/post/47041269194/avoid-else-return-early</guid>
<description>&lt;h3&gt;tldr;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Return as soon as you know your method cannot do any more meaningful work&lt;/li&gt;
&lt;li&gt;Reduce indentation by using &lt;code&gt;if/return&lt;/code&gt; instead of a top-level &lt;code&gt;if/else&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Try keep the “meat” of your method at the lowest indentation level.&lt;/li&gt;
&lt;li&gt;Error handling is noise.&lt;/li&gt;
&lt;/ul&gt;&lt;hr /&gt;&lt;p&gt;Programmers are often taught to have a ‘single exit point’ in their methods, i.e. only return from a single location.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
function () {
  var result;

  if () {
    result = x
  } else {
    if () {
      result = y
    } else {
      result = z
    }
  }

  return result // this return is single and lonely
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is a poor guideline in my opinion:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;“assign a result” doesn’t explain the intent: “this is the final value, processing stops here”&lt;/li&gt;
&lt;li&gt;Leaves question open “is the result object finished? can it be modified? by whom?”&lt;/li&gt;
&lt;li&gt;Allows accidental modification of the result&lt;/li&gt;
&lt;li&gt;Encourages “happy path” to be wrapped in one or more if/else statements&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Example if/else refactoring&lt;/h3&gt;
&lt;p&gt;Consider this typical node callback code:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
function(err, results) {
  if (!err) {
    doOtherStuff()
    doMoreStuff()
    // ... etc
    // ... etc
  } else {
    handleError(err)
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;There’s a few problems here. First, our error handling is dangling off the end of the method. If the “happy path” is many lines long, it can easily become unclear what the &lt;code&gt;else&lt;/code&gt; even refers to.&lt;/p&gt;
&lt;p&gt;Let’s try keep the “meat” of the code at the bottom of the method, and keep any special cases together at the top:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
function(err, results) {
  if (err) {
    handleError(err)
  } else {
    doOtherStuff()
    doMoreStuff()
    // ... etc
    // ... etc
  
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://t.umblr.com/redirect?z=http%3A%2F%2Fcallbackhell.com%2F&amp;amp;t=ZTQ0ZjQ4ZmIwMTk5N2IzNjU1N2RiMTVkOTUzZjcwNGFjODA1N2IwMyxQcjBHSTJVWg%3D%3D&amp;amp;b=t%3AxntNe-nPZGsWC3-V_vsCGA&amp;amp;p=http%3A%2F%2Fblog.timoxley.com%2Fpost%2F47041269194%2Favoid-else-return-early&amp;amp;m=1&quot;&gt;It’s very easy to get unweildy levels of indentation in JavaScript&lt;/a&gt;, so we should strive to reduce any unnecessary nesting.&lt;/p&gt;
&lt;p&gt;In this case, we can remove the &lt;code&gt;else&lt;/code&gt; indentation around our “happy path” by replacing the &lt;code&gt;else&lt;/code&gt; with a return:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
function(err, results) {
  if (err) {
    handleError(err)
    return
  }

  doOtherStuff()
  doMoreStuff()
  // ... etc
  // ... etc
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Not only does this unindent a bunch of code, it also moves the method’s main purpose/intention/meat to indentation level 0.&lt;/p&gt;
&lt;p&gt;We often don’t care about return values in non-promise-based async JS, so we can futher compact the method vertically by putting the &lt;code&gt;return&lt;/code&gt; first, removing a whole line and more braces:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
function(err, results) {
  if (err) return handleError(err)

  doOtherStuff()
  doMoreStuff()
  // ... etc
  // ... etc
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;2018 edit&lt;/em&gt;: To more clearly signal that the return value is unimportant you can use the &lt;a href=&quot;https://t.umblr.com/redirect?z=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Fvoid&amp;amp;t=M2JjYTRiYThjNzY5MDAzNGE3YmEwOTIzODgyZmM5YTRmNmU0MWMwYyxQcjBHSTJVWg%3D%3D&amp;amp;b=t%3AxntNe-nPZGsWC3-V_vsCGA&amp;amp;p=http%3A%2F%2Fblog.timoxley.com%2Fpost%2F47041269194%2Favoid-else-return-early&amp;amp;m=1&quot;&gt;void operator&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
function(err, results) {
  if (err) return void handleError(err)
  // ...
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It also obeys the “one logical statement per line” guideline, compacting the error detection and handling noise to a single line.&lt;/p&gt;
&lt;p&gt;Another benefit is that the &lt;code&gt;return&lt;/code&gt; keyword is generally syntax highlighted, so all exit points become very clear, as opposed to hidden inside &lt;code&gt;result = something&lt;/code&gt; assignments.&lt;/p&gt;
&lt;p&gt;This final form has:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Method at lowest indentation level&lt;/li&gt;
&lt;li&gt;No unecessary indentation.&lt;/li&gt;
&lt;li&gt;Many fewer lines&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Rebecca Murphey has also &lt;a href=&quot;https://t.umblr.com/redirect?z=http%3A%2F%2Frmurphey.com%2Fblog%2F2012%2F12%2F10%2Fjs-conditionals%2F&amp;amp;t=ZmE4ZjU3YmIwMWU1MzhiYWVkMGQ0ZTUyOGNlMmM4YjlkMTFjNDE0ZixQcjBHSTJVWg%3D%3D&amp;amp;b=t%3AxntNe-nPZGsWC3-V_vsCGA&amp;amp;p=http%3A%2F%2Fblog.timoxley.com%2Fpost%2F47041269194%2Favoid-else-return-early&amp;amp;m=1&quot;&gt;written about this&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The end.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;2018 edit&lt;/em&gt;: As with any programming practice, one shouldn’t see this as a hard rule that must be obeyed at all times. Early returns make little difference for small functions, and may even increase the cognitive load. However, I find the logic-flattening benefits of early returns become increasingly compelling as the size and complexity of a function increases.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://t.umblr.com/redirect?z=https%3A%2F%2Fnews.ycombinator.com%2Fitem%3Fid%3D16678209&amp;amp;t=ZjQyYWE0ZjE0NjVkOTIyMmExOWNjODdkYjlmZGY1ZjhjNWMxY2Q2ZCxQcjBHSTJVWg%3D%3D&amp;amp;b=t%3AxntNe-nPZGsWC3-V_vsCGA&amp;amp;p=http%3A%2F%2Fblog.timoxley.com%2Fpost%2F47041269194%2Favoid-else-return-early&amp;amp;m=1&quot;&gt;Discussion about this post on HackerNews&lt;/a&gt;.&lt;/p&gt;

&lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-via=&quot;secoif&quot; data-hashtags=&quot;nodejs&quot; data-url=&quot;http://blog.timoxley.com/post/47041269194/avoid-else-return-early&quot;&gt;Tweet&lt;/a&gt; </description>
<pubDate>Mon, 26 Mar 2018 12:08:06 +0000</pubDate>
<dc:creator>signa11</dc:creator>
<og:title>Avoid Else, Return Early</og:title>
<og:url>http://blog.timoxley.com/post/47041269194/avoid-else-return-early</og:url>
<og:description>tldr; • Return as soon as you know your method cannot do any more meaningful work • Reduce indentation by using if/return instead of a top-level if/else • Try keep the “meat” of your method at the...</og:description>
<og:type>tumblr-feed:entry</og:type>
<og:image>http://assets.tumblr.com/images/og/fb_landscape_share.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>http://blog.timoxley.com/post/47041269194/avoid-else-return-early</dc:identifier>
</item>
<item>
<title>The Key to Good Luck Is an Open Mind</title>
<link>http://nautil.us/blog/-the-key-to-good-luck-is-an-open-mind</link>
<guid isPermaLink="true" >http://nautil.us/blog/-the-key-to-good-luck-is-an-open-mind</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://static.nautil.us/14418_762409ca2be073c4a6ca7962d7c72a30.jpg&quot; width=&quot;733&quot; alt=&quot;&quot;/&gt;&lt;span class=&quot;caption&quot;&gt;&lt;em&gt;Demystifying the luck skillset has been a personal project of Christine Carter, a sociologist and senior fellow at the Greater Good Science Center, at U.C. Berkeley.&lt;/em&gt;&lt;/span&gt;&lt;span class=&quot;credit&quot;&gt;Photograph by Zoltán Vörös / Flickr&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;dropcap&quot;&gt;L&lt;/span&gt;uck can seem synonymous with randomness. To call someone lucky is usually to deny the relevance of their hard work or talent. As Richard Wiseman, the Professor of Public Understanding of Psychology at the University of Hertfordshire, in the United Kingdom, &lt;a href=&quot;http://greatergood.berkeley.edu/raising_happiness/post/happy-go-lucky/&quot; target=&quot;_blank&quot;&gt;puts it&lt;/a&gt;, lucky people “appear to have an uncanny ability to be in the right place at the right time and enjoy more than their fair share of lucky breaks.”&lt;/p&gt;
&lt;p&gt;What do these people have that the rest of us don’t? It turns out “ability” is the key word here. Beyond their level of privilege or the circumstances they were born into, the luckiest people may have a specific set of skills that bring chance opportunities their way. Somehow, they’ve learned ways to turn life’s odds in their favor.&lt;/p&gt;
&lt;p&gt;Demystifying this luck skillset has been a personal project of Christine Carter, a sociologist and senior fellow at the &lt;a href=&quot;http://greatergood.berkeley.edu/&quot; target=&quot;_blank&quot;&gt;Greater Good Science Center&lt;/a&gt;, at the University of California, Berkeley. A few years ago, she was putting together an online course for families on raising happier kids. She translates research findings on qualities such as gratitude, mindfulness, and happiness into quantifiable, teachable skills. Amidst her work, she stumbled upon a funny little concept that seemed to be entangled with all these things—luck. “On the academic side of things, I’ve always been sort of skeptical of any concept related to luck,” says Carter. “Because as a sociologist, it’s like, Oh, so all those children in Darfur are just not lucky? We know that there are other things there.”&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;“His research is hilarious.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then Carter stumbled on Wiseman’s luck research (one of his books is &lt;a href=&quot;https://www.amazon.com/Luck-Factor-Four-Essential-Principles/dp/1401359418&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;The Luck Factor&lt;/em&gt;&lt;/a&gt;, published in 2004). Wiseman started out as a magician and made his career researching the more unusual niches of psychology (a 2002 &lt;a href=&quot;https://www.questia.com/read/1G1-97754939/an-investigation-into-the-alleged-haunting-of-hampton&quot; target=&quot;_blank&quot;&gt;study&lt;/a&gt;, published in &lt;em&gt;The Journal of Parapsychology&lt;/em&gt;, is titled, “An Investigation into the Alleged Haunting of Hampton Court Palace: Psychological Variables and Magnetic Fields”). By the 1990s, he had taken on an unconventional project—running experiments on self-proclaimed lucky and unlucky people and attempting to quantify their differences. “His research is hilarious,” says Carter. “He takes people who self-define as lucky and people who don’t say they’re lucky, and then he puts a $20 bill in the street and the lucky people notice them and pick them up. And unlucky people don’t.”&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;The experimental design may seem a little silly, a superficial way to distinguish the fortunate from the unfortunate. Yet this was the kind of result that Wiseman found in &lt;a href=&quot;https://www.amazon.com/Luck-Factor-Four-Essential-Principles/dp/1401359418&quot; target=&quot;_blank&quot;&gt;several related experiments&lt;/a&gt; over the course of about 10 years, from about 1993 to 2003. In &lt;a href=&quot;http://www.richardwiseman.com/resources/The_Luck_Factor.pdf&quot; target=&quot;_blank&quot;&gt;one such study&lt;/a&gt;, Wiseman provided a group of volunteers with a newspaper and instructed them to count the photographs inside. Written in large font on half of the second page was this message: “Stop counting—there are 43 photographs in this newspaper.” A similar insert placed halfway through the paper read, “Stop counting, tell the experimenter you have seen this and win $250.” Overall, the self-identified unlucky participants were left counting. It suggested that luck could have something to do with spotting opportunities, even when they were unexpected.&lt;/p&gt;
&lt;p&gt;Wiseman didn’t stop there. He turned these findings into a “luck school” where people could learn luck-inducing techniques based on four main principles of luck: maximizing chance opportunities, listening to your intuition, expecting good fortune, and turning bad luck to good. The strategies included using meditation to enhance intuition, relaxation, visualizing good fortune, and talking to at least one new person every week. A month later, he followed up with participants. &lt;a href=&quot;http://www.richardwiseman.com/resources/The_Luck_Factor.pdf&quot; target=&quot;_blank&quot;&gt;Eighty percent&lt;/a&gt; said they were happier, luckier people.&lt;/p&gt;
&lt;p&gt;“I thought if Wiseman can train people to be lucky, you can certainly teach those skills to our kids, and they have other really good side effects too,” says Carter, like better social skills and a stronger sense of gratitude. She came up with a &lt;a href=&quot;http://greatergood.berkeley.edu/raising_happiness/post/talking_to_strangers_and_other_things_that_bring_luck&quot; target=&quot;_blank&quot;&gt;few basic strategies&lt;/a&gt; for parents to teach their kids, including being open to new experiences, learning to relax, maintaining social connections, and (yes) talking to strangers. All of these techniques had one theme in common—being more open to your environment both physically and emotionally.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;“If you’re anxious that you won’t find a parking place, then literally your vision narrows. You lose your peripheral vision.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It makes sense. The more observant you are of your surroundings, the more likely you are to capture a valuable resource or avoid tragedy. Lucky people don’t magically attract new opportunities and good fortune. They stroll along with their eyes wide open, fully present in the moment (a problem for people glued to phone screens). This also means that anything that affects our physical or emotional ability to take in our environment also affects our so-called “luckiness”—anxiety, for one. Anxiety physically and emotionally closes us off to chance opportunities.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;“If you’re anxious that you won’t find a parking place, then literally your vision narrows,” says Carter. “You &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3656338/#B11&quot; target=&quot;_blank&quot;&gt;lose your peripheral vision&lt;/a&gt; the more anxious you are because your flight-or-fight mechanism creates binocular vision.” Anxious people &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pubmed/17201568/&quot; target=&quot;_blank&quot;&gt;bias their attention&lt;/a&gt; to potential threats, and are predictably less likely to converse with strangers. “We teach our kids not to talk to strangers and we teach them to fear other people, and that shuts them down to the opportunities that people might bring, but also creates anxiety,” says Carter.&lt;/p&gt;
&lt;p&gt;Proponents of “&lt;a href=&quot;http://www.huffingtonpost.com/peggy-drexler/teach-your-kids-to-talk-to-strangers_b_7425124.html&quot; target=&quot;_blank&quot;&gt;stranger danger&lt;/a&gt;” might balk, but the idea is relatively straightforward: reduce kids’ fear and anxiety toward meeting new people, and consequently open them up to the advantageous connections that people can bring.&lt;/p&gt;
&lt;p&gt;Carter discovered that simply opening up parents’ minds this way to the idea that luck could be learned made a big difference. Carter herself admits she comes from a long line of anxious women, and learning these luck skills wasn’t easy. But once you do, she says, you can begin to see the good in unlucky situations, which can improve your response to misfortune.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&quot;http://www.huffingtonpost.com/christine-carter-phd/parenting-advice----raisi_b_531138.html&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Huffington Post&lt;/em&gt;&lt;/a&gt;, Carter wrote, “My kids and I love to read Jon Muth’s book &lt;em&gt;Zen Shorts&lt;/em&gt;, which includes an ancient parable about a farmer’s son who breaks his leg. When his neighbors say, ‘What bad luck!’ the farmer says only ‘Maybe.’ Turns out the broken leg saves his son from going to war….”&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Teresa Iafolla is a freelance writer based in the San Francisco Bay Area. She writes about literature and the social sciences.&lt;/em&gt;&lt;/p&gt;
&lt;div id=&quot;inpagesub&quot; readability=&quot;34&quot;&gt;
&lt;p&gt;Get the &lt;span class=&quot;plain&quot;&gt;Nautilus&lt;/span&gt; newsletter&lt;/p&gt;
&lt;p&gt;The newest and most popular articles delivered right to your inbox!&lt;/p&gt;

&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;WATCH: The creative efficacy of unplugging.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-title=&quot;Alan%20Lightman&quot; data-w=&quot;733&quot; data-h=&quot;410&quot; class=&quot;vimeo-breakers&quot; src=&quot;https://i.vimeocdn.com/video/487374372_640.jpg&quot; data-video-id=&quot;104516026&quot; data-capper=&quot;Physicist%2C%20novelist%2C%20writer.&quot; data-credits=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This classic Facts So Romantic post was originally published in February 2017.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 26 Mar 2018 10:27:56 +0000</pubDate>
<dc:creator>dnetesn</dc:creator>
<og:type>website</og:type>
<og:url>http://nautil.us/blog/-the-key-to-good-luck-is-an-open-mind</og:url>
<og:title> The Key to Good Luck Is an Open Mind - Facts So Romantic - Nautilus</og:title>
<og:description>Demystifying the luck skillset has been a personal project of Christine Carter, a sociologist and senior fellow at the Greater Good&amp;#8230;</og:description>
<og:image>http://static.nautil.us/14418_762409ca2be073c4a6ca7962d7c72a30.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>http://nautil.us/blog/-the-key-to-good-luck-is-an-open-mind</dc:identifier>
</item>
<item>
<title>Git log – The good parts</title>
<link>https://zwischenzugs.com/2018/03/26/git-log-the-good-parts/</link>
<guid isPermaLink="true" >https://zwischenzugs.com/2018/03/26/git-log-the-good-parts/</guid>
<description>&lt;p&gt;If you’re managing a complex git codebase with multiple developers, then you may well be using a tool like GitHub or BitBucket to delve into the history and figure out branch and merge issues.&lt;/p&gt;
&lt;p&gt;These GUIs are great for providing a nice user interface for managing pull requests and simple histories and the like, but when the workflow SHTF there’s no substitute for using &lt;code&gt;git log&lt;/code&gt; and its relatively little-known flags to really dig into the situation.&lt;/p&gt;
&lt;p&gt;You’re going to run through this with me so that I know you’ve got it. Type the commands &lt;strong&gt;in bold&lt;/strong&gt; to follow.&lt;/p&gt;
&lt;p&gt;This is based on material from my book &lt;a href=&quot;https://leanpub.com/learngitthehardway?b=4358&amp;amp;p=top&quot;&gt;Learn Git the Hard Way&lt;/a&gt;, a free sample available &lt;a href=&quot;https://leanpub.com/learngitthehardway?b=4358&amp;amp;p=topsample&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;An Example Git Repository&lt;/h2&gt;
&lt;p&gt;Run this to download a fairly typical git repository that I work on:&lt;/p&gt;
&lt;pre&gt;
$&lt;strong&gt; git clone https://github.com/ianmiell/cookbook-openshift3-frozen
&lt;/strong&gt;$&lt;strong&gt; cd cookbook-openshift3-frozen&lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;NB this is a copy of the &lt;a href=&quot;https://github.com/IshentRas/cookbook-openshift3&quot;&gt;original&lt;/a&gt; repo, ‘frozen’ here to provide stable output. &lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git log&lt;/code&gt; is the vanilla log command you are probably already familiar with:&lt;/p&gt;
&lt;pre&gt;
$ &lt;strong&gt;git log&lt;/strong&gt;

&lt;span&gt;commit f40f8813d7fb1ab9f47aa19a27099c9e1836ed4f &lt;/span&gt;
Author: Ian Miell &amp;lt;ian.miell@gmail.com&amp;gt;
Date: Sat Mar 24 12:00:23 2018 +0000

pip

&lt;span&gt;commit 14df2f39d40c43f9b9915226bc8455c8b27e841b&lt;/span&gt;
Author: Ian Miell &amp;lt;ian.miell@gmail.com&amp;gt;
Date: Sat Mar 24 11:55:18 2018 +0000

ignore

&lt;span&gt;commit 5d42c78c30e9caff953b42362de29748c1a2a350&lt;/span&gt;
Author: Ian Miell &amp;lt;ian.miell@gmail.com&amp;gt;
Date: Sat Mar 24 09:43:45 2018 +0000

latest
&lt;/pre&gt;
&lt;p&gt;It outputs 5+ lines per commit, with date, author commit message and id. It goes in reverse time order, which makes sense for most cases, as you are mostly interested in what happened recently.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;NOTE: output can vary depending on version, aliases,&lt;br/&gt;&lt;/em&gt; &lt;em&gt;and whether you are outputting to a terminal!&lt;br/&gt;My version here was 2.7.4.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;--oneline&lt;/code&gt;&lt;/h2&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Most of the time I don’t care about the author or the date, so in order that I &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;can see more per screen, I use &lt;code&gt;--oneline&lt;/code&gt; to only show the commit id and comment &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;per-commit.&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;p1&quot;&gt;
&lt;span class=&quot;s1&quot;&gt;$ &lt;strong&gt;git log --oneline&lt;/strong&gt;
&lt;span&gt;ecab26a &lt;/span&gt;JENKINSFILE: Upgrade from 1.3 only
&lt;span&gt;886111a&lt;/span&gt; JENKINSFILE: default is master if not a multi-branch Jenkins build
&lt;span&gt;9816651&lt;/span&gt; Merge branch 'master' of github.com:IshentRas/cookbook-openshift3
&lt;span&gt;bf36cf5&lt;/span&gt; Merge branch 'master' of github.com:IshentRas/cookbook-openshift3
&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;​&lt;code&gt;--decorate&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;You might want more information than that, though, like which branch was that commit on? Where are the tags?&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;--decorate&lt;/code&gt; flag provides this.&lt;/p&gt;
&lt;pre&gt;
$&lt;strong&gt; git log --oneline --decorate
&lt;/strong&gt;&lt;span&gt;ecab26a&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;HEAD &lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;master&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;origin/master&lt;span&gt;,&lt;/span&gt; origin/HEAD&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; JENKINSFILE: Upgrade from 1.3 only
&lt;span&gt;886111a&lt;/span&gt; JENKINSFILE: default is master if not a multi-branch Jenkins build
&lt;span&gt;9816651&lt;/span&gt; Merge branch 'master' of github.com:IshentRas/cookbook-openshift3
&lt;/pre&gt;
&lt;p&gt;More recent versions of git put this in the terminal by default, so things are improving for my fingers.&lt;/p&gt;
&lt;p&gt;(Remember that your version might do &lt;code&gt;--decorate&lt;/code&gt; by default fir &lt;code&gt;git log&lt;/code&gt; when output goes to the terminal instead of a file).&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;--all&lt;/code&gt;&lt;/h2&gt;
&lt;pre&gt;
$&lt;strong&gt; git log --oneline --decorate --all
&lt;/strong&gt;&lt;span&gt;ecab26a&lt;/span&gt; (&lt;span&gt;HEAD &lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;master&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;origin/master&lt;span&gt;,&lt;/span&gt; origin/HEAD&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; JENKINSFILE: Upgrade from 1.3 only
&lt;span&gt;886111a&lt;/span&gt; JENKINSFILE: default is master if not a multi-branch Jenkins build
&lt;span&gt;9816651&lt;/span&gt; Merge branch 'master' of github.com:IshentRas/cookbook-openshift3
[...]
&lt;span&gt;a1eceaf&lt;/span&gt; DOCS: Known issue added to upgrade docs
&lt;span&gt;774a816&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;origin/first_etcd&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;first_etcd&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; first_etcd
&lt;span&gt;7bbe328&lt;/span&gt; first_etcd check
&lt;span&gt;654f8e1&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;origin/iptables_fix&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;iptables_fix&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; retry added to iptables to prevent race conditions with iptables updates
&lt;span&gt;e1ee997&lt;/span&gt; Merge branch 'development'
&lt;/pre&gt;
&lt;p&gt;Can you see what it does? If you can’t, compare it to &lt;code&gt;--oneline&lt;/code&gt; above and dig around to figure it out.&lt;/p&gt;
&lt;p&gt;That’s great, but what would be great is a visual representation of all those branches…&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;--graph&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;--graph&lt;/code&gt; gives you that visual representation, but in the terminal. While it might not look as slick as some git GUIs, it does have the benefit of being consistently viewed anywhere, and much more configurable to your specific needs.&lt;/p&gt;
&lt;p&gt;And when you’re trying to piece together what happened on a 15-team project that doesn’t rebase, it can be essential…&lt;/p&gt;
&lt;pre class=&quot;p1&quot;&gt;
&lt;span class=&quot;s1&quot;&gt;$&lt;strong&gt; git log --oneline --decorate --all --graph&lt;/strong&gt;
* &lt;span&gt;ecab26a&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;HEAD &lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;master&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;origin/master&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;origin/HEAD&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; JENKINSFILE: Upgrade from 1.3 only
* &lt;span&gt;886111a&lt;/span&gt; JENKINSFILE: default is master if not a multi-branch Jenkins build
* &lt;span&gt;9816651&lt;/span&gt; Merge branch 'master' of github.com:IshentRas/cookbook-openshift3
&lt;span&gt;|&lt;/span&gt;&lt;span&gt;\&lt;/span&gt; 
&lt;span&gt;|&lt;/span&gt; * &lt;span&gt;bf36cf5&lt;/span&gt; Merge branch 'master' of github.com:IshentRas/cookbook-openshift3
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;&lt;span&gt;\&lt;/span&gt; 
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; * &lt;span&gt;313c03a&lt;/span&gt; JENKINSFILE: quick mode is INFO level only
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; * &lt;span&gt;340a8f2&lt;/span&gt; JENKINSFILES: divided up into separate jobs
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; * &lt;span&gt;79e82bc&lt;/span&gt; JENKINSFILE: upgrades-specific Jenkinsfile added
&lt;span&gt;|&lt;/span&gt; * &lt;span&gt;|&lt;/span&gt; &lt;span&gt;dce4c71&lt;/span&gt; Add logic for additional FW for master (When not a node)
* &lt;span&gt;| |&lt;/span&gt; &lt;span&gt;d21351c&lt;/span&gt; Update utils/atomic
&lt;span&gt;|/ /&lt;/span&gt; 
* &lt;span&gt;|&lt;/span&gt; &lt;span&gt;3bd51ba&lt;/span&gt; Fix issue with ETCD
* &lt;span&gt;|&lt;/span&gt; &lt;span&gt;b87091a&lt;/span&gt; Add missing FW for HTTPD
&lt;span&gt;|/&lt;/span&gt; 
* &lt;span&gt;a29df49&lt;/span&gt; Missing (s)
* &lt;span&gt;51dff3a&lt;/span&gt; Fix rubocop
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;DON’T PANIC!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The above can be hard for the newcomer to parse, and there is little out there to guide you, but a few tips here can make it much easier to read.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; indicates that there is a commit on the line, and the details of the commit (here the commit id, and first line of the comment) are on the right hand side.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;The lines and position of the &lt;code&gt;*&lt;/code&gt; indicate the lineage (or parentage) of each change. So, to take these three lines for example:&lt;/p&gt;
&lt;pre class=&quot;p1&quot;&gt;
&lt;span&gt;|&lt;/span&gt; * &lt;span&gt;bf36cf5&lt;/span&gt; Merge branch 'master' of github.com:IshentRas/cookbook-openshift3
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;&lt;span&gt;\&lt;/span&gt; 
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; * &lt;span&gt;313c03a&lt;/span&gt; JENKINSFILE: quick mode is INFO level only
&lt;/pre&gt;
&lt;p&gt;The green pipes indicate that while the two changes listed here were going on, another branch had a gap between its two changes (&lt;span class=&quot;s1&quot;&gt;9816651 and &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;d21351c).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;s1&quot;&gt;The blue line takes you to one parent of the bf36cf5 merge (what’s the commit id of the blue parent?), and the pink one goes to the other parent commit (313c03a).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;It’s worth taking a bit of time to figure out what’s going on here, as it will pay dividends in a crisis later…&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;If you like this post, you’ll like my book &lt;a href=&quot;https://leanpub.com/learngitthehardway&quot;&gt;Learn Git the Hard Way&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;It covers all this and much more in a similar style.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leanpub.com/learngitthehardway?b=4358&amp;amp;p=mid&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img data-attachment-id=&quot;4278&quot; data-permalink=&quot;https://zwischenzugs.com/learngitthehardway/&quot; data-orig-file=&quot;https://zwischenzugs.files.wordpress.com/2018/03/learngitthehardway.png&quot; data-orig-size=&quot;1410,2250&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;learngitthehardway&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://zwischenzugs.files.wordpress.com/2018/03/learngitthehardway.png?w=188&quot; data-large-file=&quot;https://zwischenzugs.files.wordpress.com/2018/03/learngitthehardway.png?w=525&quot; class=&quot; size-medium wp-image-4278 aligncenter&quot; src=&quot;https://zwischenzugs.files.wordpress.com/2018/03/learngitthehardway.png?w=188&amp;amp;h=300&quot; alt=&quot;learngitthehardway&quot; width=&quot;188&quot; height=&quot;300&quot; srcset=&quot;https://zwischenzugs.files.wordpress.com/2018/03/learngitthehardway.png?w=188&amp;amp;h=300 188w, https://zwischenzugs.files.wordpress.com/2018/03/learngitthehardway.png?w=376&amp;amp;h=600 376w, https://zwischenzugs.files.wordpress.com/2018/03/learngitthehardway.png?w=94&amp;amp;h=150 94w&quot; sizes=&quot;(max-width: 188px) 100vw, 188px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2&gt;&lt;code&gt;--simplify-by-decoration&lt;/code&gt;&lt;/h2&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;If you’re looking at the whole history of a project and want to get a feel for its shape before diving in, you may want to see only &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;the significant points of change (ie the lines affected by &lt;code&gt;-–decorate&lt;/code&gt; above).&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;These remove any commit that wasn’t tagged, branched (ie there’s no reference). The root commit is always there too.&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span class=&quot;s1&quot;&gt;$&lt;strong&gt; git log --oneline --decorate --all --graph --simplify-by-decoration&lt;/strong&gt;&lt;/span&gt;
* &lt;span&gt;ecab26a (&lt;/span&gt;&lt;span&gt;HEAD &lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;master&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;origin/master&lt;/span&gt;, &lt;span&gt;origin/HEAD&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; JENKINSFILE: Upgrade from 1.3 only
&lt;span&gt;|&lt;/span&gt; * &lt;span&gt;774a816 (&lt;/span&gt;&lt;span&gt;origin/first_etcd&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; first_etcd
&lt;span&gt;|/&lt;/span&gt; 
&lt;span&gt;|&lt;/span&gt; * &lt;span&gt;654f8e1 (&lt;/span&gt;&lt;span&gt;origin/iptables_fix&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; retry added to iptables to prevent race conditions with iptables updates
&lt;span&gt;|/&lt;/span&gt; 
* &lt;span&gt;652b1ff (&lt;/span&gt;&lt;span&gt;origin/new-logic-upgrade&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; Fix issue iwith kitchen and remove sensitive output
* &lt;span&gt;ed226f7&lt;/span&gt; First commit
&lt;/pre&gt;
&lt;p&gt;Try tagging a specific commit not listed above, and then re-run the command.&lt;/p&gt;
&lt;h2&gt;File Info&lt;/h2&gt;
&lt;p&gt;Using &lt;code&gt;--oneline&lt;/code&gt; can be a bit sparse, so &lt;code&gt;--stat&lt;/code&gt; can give you useful information about what changed.&lt;/p&gt;
&lt;p&gt;The number indicates the numbers of lines that were changed, with insertions represented by a &lt;code&gt;+&lt;/code&gt; sign, and deletions by a &lt;code&gt;-&lt;/code&gt;. There’s no concept of a ‘change’ to a line as such: the old line is deleted, and then the new one added even if only one character changed.&lt;/p&gt;
&lt;pre&gt;
$&lt;strong&gt; &lt;span class=&quot;s1&quot;&gt;git log --oneline --decorate --all --graph --stat&lt;/span&gt;&lt;/strong&gt;
* &lt;span&gt;ecab26a&lt;/span&gt; (&lt;span&gt;HEAD&lt;/span&gt; &lt;span&gt;-&amp;gt;&lt;/span&gt; &lt;span&gt;master&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;origin/master&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;origin/HEAD&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; JENKINSFILE: Upgrade from 1.3 only
&lt;span&gt;|&lt;/span&gt; Jenkinsfile.upgrades | 2 &lt;span&gt;+&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; 1 file changed, 1 insertion(+), 1 deletion(-)
* &lt;span&gt;886111a&lt;/span&gt; JENKINSFILE: default is master if not a multi-branch Jenkins build
&lt;span&gt;|&lt;/span&gt; Jenkinsfile.full | 2 &lt;span&gt;+&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; Jenkinsfile.upgrades | 2 &lt;span&gt;+&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; 2 files changed, 2 insertions(+), 2 deletions(-)
&lt;/pre&gt;
&lt;p&gt;If you find &lt;code&gt;--stat&lt;/code&gt; hard to remember, then an alternative is to use &lt;code&gt;--name-only&lt;/code&gt;, but with that you lose the information about numbers of changes to files.&lt;/p&gt;
&lt;h2&gt;Regex on Commits&lt;/h2&gt;
&lt;p&gt;This one’s also &lt;em&gt;really&lt;/em&gt; handy. The &lt;code&gt;-G&lt;/code&gt; flag allows you to search for all commits and only return commits and their files whose changes include that regexp.&lt;/p&gt;
&lt;p&gt;This one, for example, looks for changes that contain the text &lt;code&gt;chef-client&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;p1&quot;&gt;
&lt;span class=&quot;s1&quot;&gt;$ &lt;/span&gt;&lt;strong&gt;&lt;span class=&quot;s2&quot;&gt;git log -G 'chef-client' --graph --oneline --stat
&lt;/span&gt;&lt;/strong&gt;&lt;span class=&quot;s2&quot;&gt;...
* &lt;span&gt;22c2b1b&lt;/span&gt; Fix script for deploying origin
&lt;span&gt;|&lt;/span&gt; scripts/origin_deploy.sh | 65 &lt;span&gt;++++++++++++&lt;/span&gt;&lt;span&gt;-----------------------------------------------------&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; 1 file changed, 12 insertions(+), 53 deletions(-)
... 
| * &lt;span&gt;|&lt;/span&gt; &lt;span&gt;1a112bf&lt;/span&gt; - Move origin_deploy.sh in scripts folder - Enable HTTPD at startup
| &lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; origin_deploy.sh | 148 &lt;span&gt;----------------------------------------------------------------------------------------------------------------------------------------------------&lt;/span&gt;
| &lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; scripts/origin_deploy.sh | 148 &lt;span&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/span&gt;
| &lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; 2 files changed, 148 insertions(+), 148 deletions(-)
... 
| * &lt;span&gt;|&lt;/span&gt; &lt;span&gt;9bb795d&lt;/span&gt; - Add MIT LICENCE model - Add script to auto deploy origin instance
&lt;span&gt;|/&lt;/span&gt; &lt;span&gt;/&lt;/span&gt; 
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; origin_deploy.sh | 93 &lt;span&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; 1 file changed, 93 insertions(+)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;If you’ve ever spent ages searching through &lt;code&gt;git log --patch&lt;/code&gt; output looking for a specific change this is a godsend…&lt;/p&gt;
&lt;p&gt;The eccentrically-named &lt;code&gt;--pickaxe-all&lt;/code&gt; gives you information about &lt;em&gt;all&lt;/em&gt; files that changed in the commit, rather than just the ones that matched the regexp in the commit.&lt;/p&gt;
&lt;pre class=&quot;p1&quot;&gt;
&lt;span class=&quot;s1&quot;&gt;$&lt;/span&gt;&lt;strong&gt;&lt;span class=&quot;s1&quot;&gt; git log -G 'chef-client' --graph --oneline --stat --pickaxe-all&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;Try it out!&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;If you like this post, you’ll like my book &lt;a href=&quot;https://leanpub.com/learngitthehardway&quot;&gt;Learn Git the Hard Way&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;It covers all this and much more in a similar style.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leanpub.com/learngitthehardway?b=4358&amp;amp;p=end&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img data-attachment-id=&quot;4278&quot; data-permalink=&quot;https://zwischenzugs.com/learngitthehardway/&quot; data-orig-file=&quot;https://zwischenzugs.files.wordpress.com/2018/03/learngitthehardway.png&quot; data-orig-size=&quot;1410,2250&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;learngitthehardway&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://zwischenzugs.files.wordpress.com/2018/03/learngitthehardway.png?w=188&quot; data-large-file=&quot;https://zwischenzugs.files.wordpress.com/2018/03/learngitthehardway.png?w=525&quot; class=&quot; size-medium wp-image-4278 aligncenter&quot; src=&quot;https://zwischenzugs.files.wordpress.com/2018/03/learngitthehardway.png?w=188&amp;amp;h=300&quot; alt=&quot;learngitthehardway&quot; width=&quot;188&quot; height=&quot;300&quot; srcset=&quot;https://zwischenzugs.files.wordpress.com/2018/03/learngitthehardway.png?w=188&amp;amp;h=300 188w, https://zwischenzugs.files.wordpress.com/2018/03/learngitthehardway.png?w=376&amp;amp;h=600 376w, https://zwischenzugs.files.wordpress.com/2018/03/learngitthehardway.png?w=94&amp;amp;h=150 94w&quot; sizes=&quot;(max-width: 188px) 100vw, 188px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h3&gt;If you liked this post, check out:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://zwischenzugs.com/2018/03/14/five-key-git-concepts-explained-the-hard-way/&quot;&gt;Five Key Git Concepts Explained the Hard Way&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zwischenzugs.com/2018/03/08/create-your-own-git-diagrams/&quot;&gt;Create Your Own Git Diagrams&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zwischenzugs.com/2018/01/06/ten-things-i-wish-id-known-about-bash/&quot;&gt;Ten Things I Wish I’d Known About bash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zwischenzugs.com/2017/08/07/a-non-cloud-serverless-application-pattern-using-git-and-docker/&quot;&gt;A Non-Cloud Serverless Application Pattern Using Git and Docker&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;wpcnt&quot;&gt;
&lt;div class=&quot;wpa wpmrec&quot;&gt;&lt;span class=&quot;wpa-about&quot;&gt;Advertisements&lt;/span&gt;



&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;jp-post-flair&quot; class=&quot;sharedaddy sd-like-enabled sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-official sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded&quot; id=&quot;like-post-wrapper-20870870-4358-5ab989dc2116d&quot; data-src=&quot;//widgets.wp.com/likes/index.html?ver=20180319#blog_id=20870870&amp;amp;post_id=4358&amp;amp;origin=zwischenzugs.wordpress.com&amp;amp;obj_id=20870870-4358-5ab989dc2116d&quot; data-name=&quot;like-post-frame-20870870-4358-5ab989dc2116d&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Like this:&lt;/h3&gt;
&lt;div class=&quot;likes-widget-placeholder post-likes-widget-placeholder&quot;&gt;&lt;span class=&quot;button&quot;&gt;&lt;span&gt;Like&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;loading&quot;&gt;Loading...&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Mon, 26 Mar 2018 07:43:36 +0000</pubDate>
<dc:creator>okket</dc:creator>
<og:type>article</og:type>
<og:title>git log – the Good Parts</og:title>
<og:url>https://zwischenzugs.com/2018/03/26/git-log-the-good-parts/</og:url>
<og:description>If you’re managing a complex git codebase with multiple developers, then you may well be using a tool like GitHub or BitBucket to delve into the history and figure out branch and merge issues…</og:description>
<og:image>https://zwischenzugs.files.wordpress.com/2018/03/learngitthehardway.png?w=188&amp;h=300</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://zwischenzugs.com/2018/03/26/git-log-the-good-parts/</dc:identifier>
</item>
<item>
<title>Kaggle Datasets – Discover and analyze open data</title>
<link>https://www.kaggle.com/datasets</link>
<guid isPermaLink="true" >https://www.kaggle.com/datasets</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://www.kaggle.com/datasets&quot;&gt;https://www.kaggle.com/datasets&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=16676908&quot;&gt;https://news.ycombinator.com/item?id=16676908&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 217&lt;/p&gt;&lt;p&gt;# Comments: 35&lt;/p&gt;</description>
<pubDate>Mon, 26 Mar 2018 05:53:22 +0000</pubDate>
<dc:creator>benhamner</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.kaggle.com/datasets</dc:identifier>
</item>
<item>
<title>Facebook denies it collects call and SMS data from phones without permission</title>
<link>https://techcrunch.com/2018/03/25/facebook-denies-it-collects-call-and-sms-data-from-phones-without-permission/</link>
<guid isPermaLink="true" >https://techcrunch.com/2018/03/25/facebook-denies-it-collects-call-and-sms-data-from-phones-without-permission/</guid>
<description>&lt;p&gt;After an &lt;a href=&quot;https://arstechnica.com/information-technology/2018/03/facebook-scraped-call-text-message-data-for-years-from-android-phones/&quot;&gt;Ars Technica report&lt;/a&gt; that &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://www.crunchbase.com/organization/facebook/&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;facebook&quot;&gt;Facebook&lt;/a&gt; surreptitiously scrapes call and text message data from Android phones and has done so for years, the scandal-burdened company has responded that it only collects that information from users who have given permission.&lt;/p&gt;
&lt;p&gt;Facebook’s &lt;a href=&quot;https://newsroom.fb.com/news/2018/03/fact-check-your-call-and-sms-history/&quot;&gt;public statement&lt;/a&gt;, posted on its press site, comes a couple of days after it &lt;a href=&quot;https://techcrunch.com/2018/03/25/zuck-apologizes-for-cambridge-analytica-scandal-with-full-page-print-ad/&quot;&gt;took out full page newspaper ads&lt;/a&gt; to apologize for the misuse of data by third-party apps as it copes with fallout from the Cambridge Analytica scandal (follow the story as it develops &lt;a href=&quot;https://techcrunch.com/story/facebook-responds-to-data-misuse/&quot;&gt;here&lt;/a&gt;). In the ad, founder and chief executive officer Mark Zuckerberg wrote “We have a responsibility to protect your information. If we can’t, we don’t deserve it.”&lt;/p&gt;
&lt;p&gt;The company’s response to the Ars Technica story, however, struck a different tone, with Facebook titling the post &lt;a href=&quot;https://newsroom.fb.com/news/2018/03/fact-check-your-call-and-sms-history/&quot;&gt;“Fact Check: Your Call and SMS History.”&lt;/a&gt; It said “You may have seen some recent reports that Facebook has been logging people’s call and SMS (text) history without their permission. This is not the case,” before going on to explain that call and text history logging is included with an opt-in feature on Messenger or Facebook Lite for Android that “people have to expressly agree to use” and that they can turn off at any time, which would also delete any call and text data shared with that app.&lt;/p&gt;
&lt;p&gt;Ars Technica has already amended its original post with a response to Facebook’s statement, saying it contradicts several of its findings, including the experience of users who shared their data with the publication.&lt;/p&gt;
&lt;p&gt;“In my case, a review of my Google Play data confirms that &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://www.crunchbase.com/organization/messenger/&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;messenger&quot;&gt;Messenger&lt;/a&gt; was never installed on the Android devices I used,” wrote Ars Technica IT and national security editor Sean Gallagher in the amendment to his post. “Facebook was  installed on a Nexus tablet I used and on the Blackphone 2 in 2015, and there was never an explicit message requesting access to phone call and SMS data. Yet there is call data from the end of 2015 until late 2016, when I reinstalled the operating system on the Blackphone 2 and wiped all applications.”&lt;/p&gt;
&lt;p&gt;In its statement, Facebook said “Contact importers are fairly common among social apps and services as a way to more easily find the people you want to connect with. This was first introduced in Messenger in 2015, and later offered as an option in Facebook Lite, a lightweight version of Facebook for &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://www.crunchbase.com/organization/android/&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;android&quot;&gt;Android&lt;/a&gt;.”&lt;/p&gt;
&lt;p&gt;When people first sign up for Messenger or Facebook Lite on Android or log into Messenger on an Android device, they see a screen giving them the option to continuously upload contacts as well as call and text history. Facebook added that on Messenger, users are then given three options: to turn the feature on, “learn more” for more information or “not now” to skip it. On Facebook Lite, they get two options: turn it on or skip. If users who opted in change their minds later, Facebook said they could turn it off in the app’s settings, with the option of turning off continuous call and text history logging while keeping contact uploading enabled or deleting all contact information they’ve uploaded from that app.”&lt;/p&gt;
&lt;div id=&quot;attachment_1611852&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;32&quot;&gt;&lt;img class=&quot;vertical size-large wp-image-1611852&quot; src=&quot;https://techcrunch.com/wp-content/uploads/2018/03/opt-in_screen.png?w=383&quot; alt=&quot;&quot; width=&quot;383&quot; height=&quot;680&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;An image included with Facebook’s statement.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Facebook emphasized in bold text that it “never sell this data, and this feature does not collect the content of your text messages or calls.”&lt;/p&gt;
&lt;p&gt;Even though the opt-in screens do state that granting permission will “continuously upload info” about contacts and call and text history, it is arguable that many users don’t really understand what that means and that instead of saying “this lets friends find each other on Facebook and helps us create a better experience for everyone” (a message sweetened with a saccharine cartoon of a figure texting a little heart), Facebook should really be giving more details about what exactly will be recorded and why.&lt;/p&gt;
&lt;p&gt;With the Cambridge Analytica scandal still fresh on everyone’s minds, Facebook’s apparent willingness to place the onus for protecting personal data on users who already feel victimized is unlikely to help them regain any goodwill. But even people who truly understand the implications of the feature and chose to opt-in anyway did so assuming that their data would be guarded as Facebook promised. As the Cambridge Analytica fiasco threw into sharp relief, that hasn’t always been the case.&lt;/p&gt;
</description>
<pubDate>Mon, 26 Mar 2018 05:14:17 +0000</pubDate>
<dc:creator>wil_wheat_on</dc:creator>
<og:title>Facebook denies it collects call and SMS data from phones without permission</og:title>
<og:description>After an Ars Technica report that Facebook surreptitiously scrapes call and text message data from Android phones and has done so for years, the scandal-burdened company has responded that it only collects that information from users who have given permission. Facebook’s public statement, posted on…</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2018/02/gettyimages-883899706.jpg?w=602</og:image>
<og:url>http://social.techcrunch.com/2018/03/25/facebook-denies-it-collects-call-and-sms-data-from-phones-without-permission/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2018/03/25/facebook-denies-it-collects-call-and-sms-data-from-phones-without-permission/</dc:identifier>
</item>
<item>
<title>Applied Category Theory</title>
<link>https://johncarlosbaez.wordpress.com/2018/03/26/seven-sketches-in-compositionality/</link>
<guid isPermaLink="true" >https://johncarlosbaez.wordpress.com/2018/03/26/seven-sketches-in-compositionality/</guid>
<description>&lt;p&gt;It just became a lot easier to learn about applied category theory, thanks to this free book:&lt;/p&gt;
&lt;p&gt;• Brendan Fong and David Spivak, &lt;em&gt;&lt;a href=&quot;https://arxiv.org/abs/1803.05316&quot;&gt;Seven Sketches in Compositionality: An Invitation to Applied Category Theory&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I think I’ll start a kind of informal online course or seminar based on this book on the &lt;a href=&quot;https://forum.azimuthproject.org/discussions&quot;&gt;Azimuth Forum&lt;/a&gt;. I’m getting pretty sick of the superficial quality of my interactions on social media. This could be a way to do something more interesting.&lt;/p&gt;
&lt;p&gt;The idea is that you can read chapters of this book, discuss them, try the exercises in the book, ask and answer questions, and maybe team up to create software that implements some of the ideas. I’ll try to keep things moving forward. For example, I’ll explain some stuff and try to help answer questions that people are stuck on. I may also give some talks or run discussions on Google Hangouts or similar software—but only when I have time: I’m more of a text-based guy. I may get really busy some times, and leave the rest of you alone for a while. But I like writing about math for at least 15 minutes a day, and more when I have time. Furthermore, I’m obsessed with applied category theory and plan to stay that way for at least a few more years.&lt;/p&gt;
&lt;p&gt;If this sounds interesting, let me know here—and please visit the &lt;a href=&quot;https://forum.azimuthproject.org/discussions&quot;&gt;Azimuth Forum&lt;/a&gt; and register! &lt;strong&gt;Use your full real name as your username, with no spaces&lt;/strong&gt;. I will add spaces and that will become your username. &lt;strong&gt;Use a real working email address.&lt;/strong&gt; If you don’t, the registration process may not work.&lt;/p&gt;
&lt;p&gt;Over 70 people have registered so far, so this process will take a while.&lt;/p&gt;
&lt;p&gt;The main advantage of the Forum over this blog is that you can initiate new threads and edit your comments. Like here you can write equations in LaTeX. Like here, that ability is severely limited: for example you can’t define macros, and you can’t use TikZ. (Maybe someone could fix that.) But equations are better typeset over there—and more importantly, the ability to edit comments makes it a lot easier to correct errors in your LaTeX.&lt;/p&gt;
&lt;p&gt;Please let me know what you think.&lt;/p&gt;
&lt;p&gt;What follows is the preface to Fong and Spivak’s book, just so you can get an idea of what it’s like.&lt;/p&gt;
&lt;h3&gt;Preface&lt;/h3&gt;
&lt;p&gt;Category theory is becoming a central hub for all of pure mathematics. It is unmatched in its ability to organize and layer abstractions, to find commonalities between structures of all sorts, and to facilitate communication between different mathematical communities. But it has also been branching out into science, informatics, and industry. We believe that it has the potential to be a major cohesive force in the world, building rigorous bridges between disparate worlds, both theoretical and practical. The motto at MIT is &lt;em&gt;mens et manus&lt;/em&gt;, Latin for mind and hand. We believe that category theory—and pure math in general—has stayed in the realm of mind for too long; it is ripe to be brought to hand.&lt;/p&gt;
&lt;h4&gt;Purpose and audience&lt;/h4&gt;
&lt;p&gt;The purpose of this book is to offer a self-contained tour of applied category theory. It is an invitation to discover advanced topics in category theory through concrete real-world examples. Rather than try to give a comprehensive treatment of these topics—which include adjoint functors, enriched categories, proarrow equipments, toposes, and much more–we merely provide a taste. We want to give readers some insight into how it feels to work with these structures as well as some ideas about how they might show up in practice.&lt;/p&gt;
&lt;p&gt;The audience for this book is quite diverse: anyone who finds the above description intriguing. This could include a motivated high school student who hasn’t seen calculus yet but has loved reading a weird book on mathematical logic they found at the library. Or a machine learning researcher who wants to understand what vector spaces, design theory, and dynamical systems could possibly have in common. Or a pure mathematician who wants to imagine what sorts of applications their work might have. Or a recently-retired programmer who’s always had an eerie feeling that category theory is what they’ve been looking for to tie it all together, but who’s found the usual books on the subject impenetrable.&lt;/p&gt;
&lt;p&gt;For example, we find it something of a travesty that in 2018 there seems to be no introductory material available on monoidal categories. Even beautiful modern introductions to category theory, e.g. by Riehl or Leinster, do not include anything on this rather central topic. The basic idea is certainly not too abstract; modern human intuition seems to include a pre-theoretical understanding of monoidal categories that is just waiting to be formalized. Is there anyone who wouldn’t correctly understand the basic idea being communicated in the following diagram?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://arxiv.org/abs/1803.05316&quot;&gt;&lt;img data-attachment-id=&quot;24653&quot; data-permalink=&quot;https://johncarlosbaez.wordpress.com/2018/03/26/seven-sketches-in-compositionality/fong_spivak_string_diagram/&quot; data-orig-file=&quot;https://johncarlosbaez.files.wordpress.com/2018/03/fong_spivak_string_diagram.jpg?w=450&amp;amp;h=226&quot; data-orig-size=&quot;1086,545&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;fong_spivak_string_diagram&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://johncarlosbaez.files.wordpress.com/2018/03/fong_spivak_string_diagram.jpg?w=450&amp;amp;h=226?w=300&quot; data-large-file=&quot;https://johncarlosbaez.files.wordpress.com/2018/03/fong_spivak_string_diagram.jpg?w=450&amp;amp;h=226?w=450&quot; src=&quot;https://johncarlosbaez.files.wordpress.com/2018/03/fong_spivak_string_diagram.jpg?w=450&amp;amp;h=226&quot; alt=&quot;&quot; width=&quot;450&quot; height=&quot;226&quot; class=&quot;alignnone size-large wp-image-24653&quot; srcset=&quot;https://johncarlosbaez.files.wordpress.com/2018/03/fong_spivak_string_diagram.jpg?w=450&amp;amp;h=226 450w, https://johncarlosbaez.files.wordpress.com/2018/03/fong_spivak_string_diagram.jpg?w=900&amp;amp;h=452 900w, https://johncarlosbaez.files.wordpress.com/2018/03/fong_spivak_string_diagram.jpg?w=150&amp;amp;h=75 150w, https://johncarlosbaez.files.wordpress.com/2018/03/fong_spivak_string_diagram.jpg?w=300&amp;amp;h=151 300w, https://johncarlosbaez.files.wordpress.com/2018/03/fong_spivak_string_diagram.jpg?w=768&amp;amp;h=385 768w&quot; sizes=&quot;(max-width: 450px) 100vw, 450px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many applied category theory topics seem to take monoidal categories as their jumping off point. So one aim of this book is to provide a reference—even if unconventional—for this important topic.&lt;/p&gt;
&lt;p&gt;We hope this book inspires both new visions and new questions. We intend it to be self-contained in the sense that it is approachable with minimal prerequisites, but not in the sense that the complete story is told here. On the contrary, we hope that readers use this as an invitation to further reading, to orient themselves in what is becoming a large literature, and to discover new applications for themselves.&lt;/p&gt;
&lt;p&gt;This book is, unashamedly, our take on the subject. While the abstract structures we explore are important to any category theorist, the specific topics have simply been chosen to our personal taste. Our examples are ones that we find simple but powerful, concrete but representative, entertaining but in a way that feels important and expansive at the same time. We hope our readers will enjoy themselves and learn a lot in the process.&lt;/p&gt;
&lt;h4&gt;How to read this book&lt;/h4&gt;
&lt;p&gt;The basic idea of category theory—which threads through every chapter—is that if one pays careful attention to structures and coherence, the resulting systems will be extremely reliable and interoperable. For example, a category involves several structures: a collection of objects, a collection of morphisms relating objects, and a formula for combining any chain of morphisms into a morphism. But these structures need to cohere or work together in a simple commonsense way: a chain of chains is a chain, so combining a chain of chains should be the same as combining the chain. That’s it!&lt;/p&gt;
&lt;p&gt;We will see structures and coherence come up in pretty much every definition we give: “here are some things and here are how they fit together.” We ask the reader to be on the lookout for structures and coherence as they read the book, and to realize that as we layer abstraction on abstraction, it is the coherence that makes everything function like a well-oiled machine.&lt;/p&gt;
&lt;p&gt;Each chapter in this book is motivated by a real-world topic, such as electrical circuits, control theory, cascade failures, information integration, and hybrid systems. These motivations lead us into and through various sorts of category-theoretic concepts.&lt;/p&gt;
&lt;p&gt;We generally have one motivating idea and one category-theoretic purpose per chapter, and this forms the title of the chapter, e.g. Chapter 4 is “Collaborative design: profunctors, categorification, and monoidal categories.” In many math books, the difficulty is roughly a monotonically-increasing function of the page number. In this book, this occurs in each chapter, but not so much in the book as a whole. The chapters start out fairly easy and progress in difficulty.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://arxiv.org/abs/1803.05316&quot;&gt;&lt;img data-attachment-id=&quot;24655&quot; data-permalink=&quot;https://johncarlosbaez.wordpress.com/2018/03/26/seven-sketches-in-compositionality/fong_spivak_book_graph/&quot; data-orig-file=&quot;https://johncarlosbaez.files.wordpress.com/2018/03/fong_spivak_book_graph.jpg&quot; data-orig-size=&quot;1125,351&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;fong_spivak_book_graph&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://johncarlosbaez.files.wordpress.com/2018/03/fong_spivak_book_graph.jpg?w=300&quot; data-large-file=&quot;https://johncarlosbaez.files.wordpress.com/2018/03/fong_spivak_book_graph.jpg?w=450&amp;amp;h=140&quot; src=&quot;https://johncarlosbaez.files.wordpress.com/2018/03/fong_spivak_book_graph.jpg?w=450&amp;amp;h=140&quot; alt=&quot;&quot; width=&quot;450&quot; height=&quot;140&quot; class=&quot;alignnone size-large wp-image-24655&quot; srcset=&quot;https://johncarlosbaez.files.wordpress.com/2018/03/fong_spivak_book_graph.jpg?w=450&amp;amp;h=140 450w, https://johncarlosbaez.files.wordpress.com/2018/03/fong_spivak_book_graph.jpg?w=897&amp;amp;h=280 897w, https://johncarlosbaez.files.wordpress.com/2018/03/fong_spivak_book_graph.jpg?w=150&amp;amp;h=47 150w, https://johncarlosbaez.files.wordpress.com/2018/03/fong_spivak_book_graph.jpg?w=300&amp;amp;h=94 300w, https://johncarlosbaez.files.wordpress.com/2018/03/fong_spivak_book_graph.jpg?w=768&amp;amp;h=240 768w&quot; sizes=&quot;(max-width: 450px) 100vw, 450px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The upshot is that if you find the end of a chapter very difficult, hope is certainly not lost: you can start on the next one and make good progress. This format lends itself to giving you a first taste now, but also leaving open the opportunity for you to come back at a later date and get more deeply into it. But by all means, if you have the gumption to work through each chapter to its end, we very much encourage that!&lt;/p&gt;
&lt;p&gt;We include many exercises throughout the text. Usually these exercises are fairly straightforward; the only thing they demand is that the reader’s mind changes state from passive to active, rereads the previous paragraphs with intent, and puts the pieces together. A reader becomes a student when they work the exercises; until then they are more of a tourist, riding on a bus and listening off and on to the tour guide. Hey, there’s nothing wrong with that, but we do encourage you to get off the bus and make contact with the natives as often as you can.&lt;/p&gt;

&lt;p class=&quot;postmetadata alt&quot;&gt;&lt;small&gt;This entry was posted on Monday, March 26th, 2018 at 12:55 am and is filed under &lt;a href=&quot;https://johncarlosbaez.wordpress.com/category/azimuth/&quot; rel=&quot;category tag&quot;&gt;azimuth&lt;/a&gt;, &lt;a href=&quot;https://johncarlosbaez.wordpress.com/category/computer-science/&quot; rel=&quot;category tag&quot;&gt;computer science&lt;/a&gt;, &lt;a href=&quot;https://johncarlosbaez.wordpress.com/category/mathematics/&quot; rel=&quot;category tag&quot;&gt;mathematics&lt;/a&gt;, &lt;a href=&quot;https://johncarlosbaez.wordpress.com/category/networks/&quot; rel=&quot;category tag&quot;&gt;networks&lt;/a&gt;, &lt;a href=&quot;https://johncarlosbaez.wordpress.com/category/physics/&quot; rel=&quot;category tag&quot;&gt;physics&lt;/a&gt;. You can follow any responses to this entry through the &lt;a href=&quot;https://johncarlosbaez.wordpress.com/2018/03/26/seven-sketches-in-compositionality/feed/&quot;&gt;RSS 2.0&lt;/a&gt; feed. You can &lt;a href=&quot;https://johncarlosbaez.wordpress.com/2018/03/26/seven-sketches-in-compositionality/#respond&quot;&gt;leave a response&lt;/a&gt;, or &lt;a href=&quot;https://johncarlosbaez.wordpress.com/2018/03/26/seven-sketches-in-compositionality/trackback/&quot; rel=&quot;trackback&quot;&gt;trackback&lt;/a&gt; from your own site.&lt;/small&gt;&lt;/p&gt;
&lt;nav id=&quot;nav-below&quot;&gt;&lt;h3 class=&quot;assistive-text&quot;&gt;Post navigation&lt;/h3&gt;
&lt;span class=&quot;nav-previous&quot;&gt;&lt;a href=&quot;https://johncarlosbaez.wordpress.com/2018/03/11/hypergraph_categories_of_cospans/&quot; rel=&quot;prev&quot;&gt;« Previous Post&lt;/a&gt;&lt;/span&gt;&lt;/nav&gt;</description>
<pubDate>Mon, 26 Mar 2018 04:30:16 +0000</pubDate>
<dc:creator>mathgenius</dc:creator>
<og:type>article</og:type>
<og:title>Applied Category Theory – Online Course</og:title>
<og:url>https://johncarlosbaez.wordpress.com/2018/03/26/seven-sketches-in-compositionality/</og:url>
<og:description>It just became a lot easier to learn about applied category theory, thanks to this free book: • Brendan Fong and David Spivak, Seven Sketches in Compositionality: An Invitation to Applied Cate…</og:description>
<og:image>https://johncarlosbaez.files.wordpress.com/2018/03/fong_spivak_string_diagram.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://johncarlosbaez.wordpress.com/2018/03/26/seven-sketches-in-compositionality/</dc:identifier>
</item>
</channel>
</rss>