<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Replacing exploit-ridden firmware with a Linux kernel [pdf]</title>
<link>https://schd.ws/hosted_files/osseu17/84/Replace%20UEFI%20with%20Linux.pdf</link>
<guid isPermaLink="true" >https://schd.ws/hosted_files/osseu17/84/Replace%20UEFI%20with%20Linux.pdf</guid>
<description>&lt;a href=&quot;https://schd.ws/hosted_files/osseu17/84/Replace%20UEFI%20with%20Linux.pdf&quot;&gt;Download PDF&lt;/a&gt;</description>
<pubDate>Sun, 29 Oct 2017 15:16:33 +0000</pubDate>
<dc:creator>dmmalam</dc:creator>
<dc:format>application/pdf</dc:format>
<dc:identifier>https://schd.ws/hosted_files/osseu17/84/Replace%20UEFI%20with%20Linux.pdf</dc:identifier>
</item>
<item>
<title>When did the golden age of The Simpsons end?</title>
<link>http://www.nathancunn.com/2017-10-26-simpsons-decline/</link>
<guid isPermaLink="true" >http://www.nathancunn.com/2017-10-26-simpsons-decline/</guid>
<description>&lt;p&gt;It’d be difficult to argue against the fact that The Simpsons isn’t quite the show it once was. Even just a quick glance at the IMDb ratings is enough to see that the show is routinely not hitting the highs it did so regularly in the earlier seasons.&lt;/p&gt;&lt;center&gt;&lt;img src=&quot;http://www.nathancunn.com/figure/source/simpsons-decline/original_ratings.svg&quot;/&gt;&lt;/center&gt;
&lt;p&gt;I’d suggest that the scale of the decline is likely even worse than it appears here due to &lt;a href=&quot;https://en.wikipedia.org/wiki/Survivorship_bias&quot;&gt;survivorship bias&lt;/a&gt;—presumably most of the people rating episodes in season 20 are those who enjoyed seasons 1-19—although I’m not sure how one might easily go about correcting for that.&lt;/p&gt;
&lt;p&gt;The decline was much like &lt;a href=&quot;https://youtu.be/vu_qwJiAhGY?t=90&quot;&gt;Fox’s transition to a hardcore sex channel&lt;/a&gt;: so gradual that you didn’t notice it happening, making it difficult to pinpoint exactly when the heyday of The Simpsons came to an end. The general consensus seems to be somewhere around season nine or ten, with some pinpointing &lt;em&gt;The Principal and the Pauper&lt;/em&gt; (S09E02—the Armin Tamzarian episode) as the watershed moment, with even Harry Shearer (the voice of Tamzarian/Skinner) slamming it as disrespectful to the fans and Matt Groening listing the episode as a mistake and one of his least favourite episodes. Personally I disagree with this being the end of The Simpsons as we knew it, not only because that season had some great episodes, such as &lt;em&gt;The Cartridge Family&lt;/em&gt;, but also the episode gave us one of my &lt;a href=&quot;https://www.youtube.com/watch?v=YDqYVNQIHRg&quot;&gt;favourite Simpsons scenes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But if not then, then when did the golden age of The Simpsons come to an end? If we go back to look at the ratings of the show we can see they clearly arise from a bimodal distribution; that is, there is a group of episodes rated in and around 7/10 and an another group with ratings around 8/10.&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://www.nathancunn.com/figure/source/simpsons-decline/original_densities.svg&quot;/&gt;&lt;/center&gt;
&lt;p&gt;We know that many of the episodes in this higher rated group were part of the earlier seasons, although some of the later episodes will be in there too. In order to separate these out we could consider performing cluster analysis on the data, essentially finding a way of grouping the episodes so that those with similar ratings are placed in groups together. A standard clustering approach would just group good episodes and bad episodes. However, I want to alter this slightly in that I only want a group to be made up of a single contiguous group of episodes; basically, if the episodes of season 4 are in the same group as the episodes of season 6, then the episodes of season 5 must also be in that group. This means we can define the golden age of The Simpsons as a single stretch of persistently high quality episodes. Other than being a sensible thing to do, this also simplifies the analysis greatly, as while there are many ways to allocate episodes to two groups, uncovering two contiguous groups simply amounts to finding the episode where the first group ends. Ideally we would like to find the episode for which there is the greatest difference between the ratings of all previous episodes and all subsequent episodes.&lt;/p&gt;
&lt;p&gt;In order to see this a bit clearer consider the effect of setting this threshold below:&lt;/p&gt;

&lt;p&gt;The effect of choosing the wrong episode is clear in that we’ll end up with groups which are not clearly separated. If we set it too early too many good episodes get put into the &lt;em&gt;bad&lt;/em&gt; category, making it better and, likewise if we set it too late then we make the golden age seem worse.&lt;/p&gt;
&lt;p&gt;In order to choose the correct episode, we assume episode ratings in each group arise from distinct &lt;em&gt;Gaussian&lt;/em&gt; distributions—roughly meaning you would expect ratings to be pretty close to some mean value, the further away from this mean you go the less likely that rating is to occur regardless whether you go above or below the mean. Grouping the episodes then becomes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Pick an episode as the threshold between the golden age and the later seasons&lt;/li&gt;
&lt;li&gt;Calculate the mean and standard deviation of the ratings for all episodes up to the current threshold episode. Do the same for all subsequent episodes&lt;/li&gt;
&lt;li&gt;Using these values calculate the likelihood of all the episode ratings—the probability of observing the data you have observed assuming that the data arise from a Gaussian distribution with the means and standard deviations calculated above.&lt;/li&gt;
&lt;li&gt;Repeat the above steps for a different threshold until you find the grouping which gives the greatest likelihood value.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I coded this up in R (below) and checked for every possible combination (the code runs basically instantaneously so it wasn’t worth trying to be smart with this). The episode that the data best supported being the end of the golden age is episode 214, or season 10 episode 11, &lt;em&gt;Wild Barts can’t be Broken&lt;/em&gt;, meaning &lt;em&gt;The Principal and the Pauper&lt;/em&gt; (S09E02) didn’t mark the end of The Simpsons best days.&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://www.nathancunn.com/figure/source/simpsons-decline/ratings.svg&quot;/&gt;&lt;/center&gt;
&lt;center&gt;&lt;img src=&quot;http://www.nathancunn.com/figure/source/simpsons-decline/densities.svg&quot;/&gt;&lt;/center&gt;
&lt;p&gt;With a rating of 7.7 &lt;em&gt;Wild Barts can’t be Broken&lt;/em&gt; is the episode where a curfew is imposed on the children of Springfield after Homer goes on a drunken spree. The next episode, &lt;em&gt;Sunday, Cruddy Sunday&lt;/em&gt;, in which Homer goes to the Superbowl has a rating of 6.9, quite a bit below the average rating of earlier episodes, meaning counting it as a golden age episode would only serve to make the golden age worse minimising the differences between the two groups.&lt;/p&gt;
&lt;p&gt;It’s remarkable that the show managed to go for over nine seasons, and over 200 episodes, with an average rating of 8.2. The latter seasons, in contrast, have an average rating of 6.9, with only three episodes in the latter 400+ episodes achieving a rating higher than the average golden age episode—those episodes being &lt;em&gt;Trilogy of Error&lt;/em&gt;, &lt;em&gt;Holidays of Futured Passed&lt;/em&gt;, and &lt;em&gt;Barthood&lt;/em&gt;. Given that the ratings approximately follow a Gaussian distribution, we expect (and, indeed, observe) that roughly half of the golden age episodes exceeded this mean value.&lt;/p&gt;
&lt;p&gt;Although The Simpsons isn’t quite the show it once was, the decline in the show’s latter seasons is more testament to the impossibly high standards set by the earlier seasons than it is an indictment of what the show became.&lt;/p&gt;
&lt;p&gt;If you happen to be interested in how I did this analysis, either to try it yourself or to pick holes in it, the code is below. All analysis was done in R, with the plots done using &lt;code class=&quot;highlighter-rouge&quot;&gt;ggplot2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;shiny&lt;/code&gt; for interactivity.&lt;/p&gt;
&lt;div class=&quot;language-r highlighter-rouge&quot; readability=&quot;14.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simpsons_data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://www.imdb.com/title/tt0096697/epdate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simpsons_rating&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simpsons_data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&amp;gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&amp;gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_obs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simpsons_rating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrow&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_obs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ncol&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_obs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_obs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simpsons_rating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simpsons_rating&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserRating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simpsons_rating&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserRating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;+1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_obs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simpsons_rating&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserRating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simpsons_rating&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserRating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;+1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_obs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clust&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_obs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;likelihood&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dnorm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simpsons_rating&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserRating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;likelihood&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;breakpoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;which&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 29 Oct 2017 10:32:15 +0000</pubDate>
<dc:creator>miiiiiike</dc:creator>
<og:title>When did the golden age of The Simpsons end?</og:title>
<og:description>It’d be difficult to argue against the fact that The Simpsons isn’t quite the show it once was. Even just a quick glance at the IMDb ratings is enough to see that the show is routinely not hitting the highs it did so regularly in the earlier seasons. I’d suggest...</og:description>
<og:type>website</og:type>
<og:url>http://nathancunn.com/2017-10-26-simpsons-decline/</og:url>
<og:image>http://www.nathancunn.com/figure/source/simpsons-decline/simpsons_og.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.nathancunn.com/2017-10-26-simpsons-decline/</dc:identifier>
</item>
<item>
<title>Why would anyone choose Docker over fat binaries?</title>
<link>http://www.smashcompany.com/technology/why-would-anyone-choose-docker-over-fat-binaries</link>
<guid isPermaLink="true" >http://www.smashcompany.com/technology/why-would-anyone-choose-docker-over-fat-binaries</guid>
<description>&lt;p&gt;&lt;em&gt;(written by lawrence krubner, however indented passages are often quotes). You can contact lawrence at: lawrence@krubner.com&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.atlassian.com/blog/software-teams/deploy-java-apps-with-docker-awesome&quot;&gt;They are blinded by love:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;What I like most about Docker is how responsive and quick it is, and the instant repeatability it offers. Spinning up a new container takes literally the same time it takes to run the command on bare metal. It’s a joy to behold! Since this post was originally published in 2013, my fellow Atlassians and I have written several more articles about Docker. What can I say?… we’re in love.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have the impression that Docker is an incredible technical feat that barely manages to keep an old paradigm alive. It seems sad that so much effort should be made to keep old technologies going, when better alternatives are now available.&lt;/p&gt;
&lt;p&gt;Rewind the clock to the mid 1990s. Most companies, and most early web sites, had only a small handful of servers. These servers were lovingly groomed by their sysadmins. There is the old joke that in the those days the servers were named like pets, whereas later everything became “web scale” meaning sites had thousands of servers, meaning the servers had numbers instead of names.&lt;/p&gt;
&lt;p&gt;The popular script languages emerged in the 1990s. Python and Ruby, in particular, both adopted the attitude that they should be, as much as possible, thin wrappers over the underlying OS. This attitude lasted a long time.&lt;/p&gt;
&lt;p&gt;The Python community felt they didn’t need a story about concurrency because that should be outsourced to the OS. As late as 2012 I caught a talk by &lt;a href=&quot;http://www.pixelmonkey.org/&quot;&gt;Andrew Montalenti&lt;/a&gt; in which he repeated the Python slogan “threads drool, processes rule” — meaning, if you need parallelism, call the system level “fork” command and handoff the work to some other process; let the underlying OS do the scheduling. Montalenti is a brilliant guy who says a lot of smart things, and he’s taken a lot of chances on new technology. The fact that he was still handing off concurrency work to the OS in the year 2012 suggests that there is a wonderful kind of comfort to that kind of programming (scripting that hands off the heavy stuff to the OS). I did that kind of programming for more than 10 years, so I can relate to enjoyment of it. That doesn’t change the fact that it is obsolete (for sites at scale).&lt;/p&gt;
&lt;p&gt;Ryan Tomayko wrote &lt;a href=&quot;https://tomayko.com/blog/2009/unicorn-is-unix&quot;&gt;I Love Unicorn Because It’s Unix&lt;/a&gt; in 2009, which is right about when this paradigm began to die. I loved his essay at the time and I sent it to all of my friends. It took me another 2 or 3 years, but eventually I saw that what he suggested took us in the wrong direction.&lt;/p&gt;
&lt;p&gt;When I wrote “&lt;a href=&quot;http://www.smashcompany.com/technology/an-architecture-of-small-apps&quot;&gt;An architecture of small apps&lt;/a&gt;” in 2013 I’d already figured out at least half of this story. I was certainly aware of the simplicity of fat binaries, though I was working at a company that was overwhelmingly committed to PHP and Ruby, so I had to be gentle about introducing new ideas. What I didn’t fully appreciate then was how much the complexity of configuring lots of small apps would make it necessary to give up on those languages that can not be turned into a fat binary.&lt;/p&gt;
&lt;p&gt;In recent years, all of the script languages have made an effort to do a better job managing their dependency and configuration. “Bundler” for Ruby is a fantastic dependency management tool. Virtualenv, for Python, allows the creation of artifical environments where dependencies and environment variables are set for a particular app. These solutions managed to get these script languages half way to the modern world. If you run a 100% pure Ruby or Python shop, you can go along way with these technologies. Still, they have their limits. They don’t actually bundle assets the way an uberjar might contain all your HTML and CSS and images (Rails has the Asset Pipeline, but you end up relying on a monolithic framework to handle asset bundling for you). And they are language specific.&lt;/p&gt;
&lt;p&gt;Depending on the underlying OS makes sense for the script languages of the 1990s. But it doesn’t make sense for our modern world of microservices running on thousands of servers and needing to auto-discover which ports are used by which services. Relying on environment variables, and paths that are global to the server itself, is massively stupid when you’ve got a 100 apps, written in different languages, and each perhaps with different needs regarding configuration and initiation. In the world of hundreds of microservices running on thousands of servers, what works best is to have self-enclosed apps that contain all of their own dependencies.&lt;/p&gt;
&lt;p&gt;There are two possible approaches. Docker is one. The other is a fat binary.&lt;/p&gt;
&lt;p&gt;The Go language is the pioneer for fat binaries. Compile a Go app and it has everything it needs inside of it. I recall someone demonstrating a simple text reader on Hacker News, and someone else complained “This app is 25 megs, but it should only be 25k at most — just use the built-in tools that exist on every server, like sed and awk.” But what if a server doesn’t have those tools, or has the tools but only as old versions that lack some of the functions that you want? Writing a fat binary means independence from the server — you no longer have to worry about what is on the server, or what the environment variables are, or what the paths are, or what versions are installed, because everything was taken care of for you, by your build tool, when you created that fat binary.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=12303075&quot;&gt;This comment on Hacker News is a good sample of the Golang attitude:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;17&quot;&gt;
&lt;p&gt;Doesn’t statically compiling programs solve the deployment issue better? I mean, as far as I can tell Docker only exists because it’s impossible to link to glibc statically, so it’s virtually impossible to make Linux binaries that are even vaguely portable.&lt;/p&gt;
&lt;p&gt;Except now Go and Rust make it very easy to compile static Linux binaries that don’t depend on glibc, and even cross-compile them easily.&lt;/p&gt;
&lt;p&gt;If I have a binary built by Go, what problems does Docker solve that just copying that binary to a normal machine doesn’t?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From 1999 to 2009 I only worked with script languages, especially PHP and Ruby. I was immersed in that world. I only slowly discovered Java and then Clojure. I recall the first time I created an uberjar: all of my code, and all of my HTML, and all of the CSS and the Javascript and the images — all of it now existed in a single file. This seemed like an incredible magic trick. I know longer needed a complex deployment strategy, I could simply “scp” the file to anywhere on any server and I could spin it up.&lt;/p&gt;
&lt;p&gt;But of course, what I was doing was child’s play compared to what others were doing. &lt;a href=&quot;http://www.colinsteele.org/post/23103789647/against-the-grain-aws-clojure-startup&quot;&gt;When Colin Steele was the CTO of Hotelicopter/RoomKey, he had his team create uberjars that included a snapshot of the database, so that the app truly needed nothing from outside of itself&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;Solr quickly went from a piecewise solution to our searching needs to something far more interesting. In our problem domain, stale reads of certain data are tolerable, and exploiting that was a lever we could pull. Eventually, we ended up baking an instance of Solr/Lucene directly into our individual application processes, making it possible to achieve true linear horizontal scalability for the application.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;20 years from now Colin could spin up one of those instances and it would run and show you all of its data. The hotel data would be out of date, but the thing is, that binary does not need anything except itself. It is truly independent.&lt;/p&gt;
&lt;p&gt;Well, I am lying. Any app that runs on the JVM will need the Java runtime, which is separate. Or it has been. With the new Java version 9, the runtime can be bundled with the app, so JVM apps can now be made truly independent, just like Go and Rust apps.&lt;/p&gt;
&lt;p&gt;Docker is a tool that allows you to continue to use tools that were perfect for the1990s and early 2000s. You can create a web site using Ruby On Rails, and you’ll have tens of thousands of files, spread across hundreds of directories, and you’ll be dependent on various environmental variables. What ports are in use? What sockets do you use to talk to other apps? How does the application server talk to the web server? How could you possibly easily port this to a new server? That is where Docker comes in. It will create an artificial universe where your Rails app has everything it needs. And then you can hand around the Docker image in the same way a Golang programmer might hand around a fat binary.&lt;/p&gt;
&lt;p&gt;Docker is a fantastic achievement in that it allows apps written for one age to continue to seem viable in the current age. However, Docker has a heavy price, in that brings in a great deal of new complexity. If you’ve already experienced the incredible simplicity of fat binaries, &lt;a href=&quot;https://news.ycombinator.com/item?id=12303075&quot;&gt;then listening to people defend Docker can be a bit incredible&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;22&quot;&gt;
&lt;p&gt;You now have generic interfaces (Dockerfile, docker-compose, Kubernetes/Rancher templates, etc.) to define your app and how to tie it together with the infrastructure.&lt;/p&gt;
&lt;p&gt;Having these declarative definitions make it easy to link your app with different SDN or SDS solutions.&lt;/p&gt;
&lt;p&gt;For example, RexRay for the storage backend abstraction of your container:&lt;/p&gt;
&lt;p&gt;http://rexray.readthedocs.io/en/stable/&lt;/p&gt;
&lt;p&gt;You can have the same app connected to either ScaleIO in your enterprise or EBS as storage.&lt;/p&gt;
&lt;p&gt;We are closer than ever to true hybrid cloud apps and it’s now much more easier to streamline the development process from your workstation to production.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This reads almost like a parody, especially “You now have generic interfaces” followed by a bunch of non-generic, very specific technologies: “(Dockerfile, docker-compose, Kubernetes/Rancher templates, etc.).”&lt;/p&gt;
&lt;p&gt;Also incredible is the claim that you can now store you files in a variety of places: “You can have the same app connected to either ScaleIO in your enterprise or EBS as storage.” Of course, that is true of all apps, not just Docker apps. Your Go or Rust or Clojure app can also use ScaleIO or EBS. Docker is only adding complexity, it is not expanding the range of options.&lt;/p&gt;
&lt;p&gt;Now, it is very easy to bash Docker, given that so many people have written stories about how it failed them. But I would estimate that about 75% of those stories involved bugs that were only present because Docker is young and growing rapidly. Those stories don’t interest me. What does interest me is the other 25%, about things that are core to Docker, which some people actually think of as Docker’s strengths, but which are in fact points of great pain.&lt;/p&gt;
&lt;p&gt;Consider “&lt;a href=&quot;https://thehftguy.com/2016/11/01/docker-in-production-an-history-of-failure/&quot;&gt;Docker in Production: A History of Failure&lt;/a&gt;.” Most of this post is about bugs that only exist because Docker is so young and immature. But this issue is much more fundamental:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;The most requested and most lacking feature in Docker is a command to clean older images (older than X days or not used for X days, whatever). Space is a critical issue given that images are renewed frequently and they may take more than 1GB each.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Perhaps someday the technology will exist to make this easy. But, in comparison, think about how you would delete a fat binary that was x days old. On Unix, the “rm” and “stat” commands are both several decades old, and writing a simple bash script to remove a file that is x days old is something Larry Wall would have found easy back in 1987. No new technology needed.&lt;/p&gt;
&lt;p&gt;The architects of Docker imagined a world of microservices in which all apps talk to each other using HTTP (actually TCP). And for sure, the best argument for Docker is something like “Python and Ruby and NodeJS can all speak HTTP, and with that they can talk to databases and also the public, so let’s bundle them up and manage their paths and dependencies, so these great technologies can work as well in the future as they have in the past.” But this leads to the biggest problem with Docker. Yes, the network can be very powerful, but trying to use it for everything is a royal pain. Docker initially took the attitude that apps would no longer need a file system, because everything could go over the net, &lt;a href=&quot;https://docs.docker.com/engine/userguide/storagedriver/selectadriver/&quot;&gt;but eventually Docker recognized a need for some kind of storage system&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;Ideally, very little data is written to a container’s writable layer, and you use Docker volumes to write data. However, some workloads require you to be able to write to the container’s writable layer. This is where storage drivers come in.&lt;/p&gt;
&lt;p&gt;Docker supports several different storage drivers, using a pluggable architecture. The storage driver controls how images and containers are stored and managed on your Docker host.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://thehftguy.com/2016/11/01/docker-in-production-an-history-of-failure/&quot;&gt;And how is that going?&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;39&quot;&gt;
&lt;p&gt;Docker has various storage drivers. The only one (allegedly) wildly supported is AUFS.&lt;/p&gt;
&lt;p&gt;The AUFS driver is unstable. It suffers from critical bugs provoking kernel panics and corrupting data.&lt;/p&gt;
&lt;p&gt;It’s broken on [at least] all “linux-3.16.x” kernel. There is no cure.&lt;/p&gt;
&lt;p&gt;…So, the docker guys wrote a new filesystem, called overlay.&lt;/p&gt;
&lt;p&gt;“OverlayFS is a modern union filesystem that is similar to AUFS. In comparison to AUFS, OverlayFS has a simpler design, has been in the mainline Linux kernel since version 3.18 and is potentially faster.” — Docker OverlayFS driver&lt;/p&gt;
&lt;p&gt;Note that it’s not backported to existing distributions. Docker never cared about [backward] compatibility.&lt;/p&gt;
&lt;p&gt;…A filesystem driver is a complex piece of software and it requires a very high level of reliability. The long time readers will remember the Linux migration from ext3 to ext4. It took time to write, more time to debug and an eternity to be shipped as the default filesystem in popular distributions.&lt;/p&gt;
&lt;p&gt;Making a new filesystem in 1 year is an impossible mission. It’s actually laughable when considering that the task is assigned to Docker, they have a track record of unstability and disastrous breaking changes, exactly what we don’t want in a filesystem.&lt;/p&gt;
&lt;p&gt;Long story short. That did not go well. You can still find horror stories with Google.&lt;/p&gt;
&lt;p&gt;Overlay development was abandoned within 1 year of its initial release.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Please note, no one is saying that the folks at Docker are stupid. Just the opposite. There is clearly real talent there. &lt;a href=&quot;http://www.mutable.io/&quot;&gt;Even in my own social world, some of the smartest programmers that I know are devoted to Docker&lt;/a&gt;. But surely we should all stop and take a deep breath, and for a moment wonder how so much talent got spent on a project this useless? I’m seeing great brilliance expended to solve a problem that should never be solved. Or rather, if the problem is resource and dependency and configuration management, we should solve the problem by moving to those languages that support fat binaries. Because fat binaries solve the main problem, without creating additional problems.&lt;/p&gt;
&lt;p&gt;There is the issue of orchestrating network resources, such as ports. That is an important issue. Docker initially failed to address this, and now it faces competition from Kubernetes. It seems to me possible that much of what Docker has done so far will eventually be forgotten, and the only thing that will matter in the end is the software they created that focused on the issue of orchestration. &lt;a href=&quot;https://diginomica.com/2017/09/11/docker-loses-first-mover-advantage-kubernetes/&quot;&gt;And this is an area where Docker lags behind:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;30&quot;&gt;
&lt;p&gt;Leave it to Google, the technology Behemoth with more container expertise than any organization on the planet, to supply the most compelling alternative, Kubernetes.&lt;/p&gt;
&lt;p&gt;Two years after open sourcing the software and donating it to a new Cloud Native Computing Foundation (CNCF), Kubernetes (aka K8s to developers) has become the de facto standard container management and orchestration tool.&lt;/p&gt;
&lt;p&gt;For those working in or following container technology, the emergence of Kubernetes as the standard workload orchestration platform is no surprise as the software has been winning developer mindshare, garnering endorsements and accumulating support from all the major cloud container services.&lt;/p&gt;
&lt;p&gt;Data from container usage surveys is noisy and inconsistent, primarily due to the relatively small sample set of users and methodological differences. However most results show growing interest in orchestration platforms. For example, Datadog, a provider of application monitoring software, found that 40% of its customers running containers use an orchestration system, primarily AWS ECS and Kubernetes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Over the last few years I’ve seen orchestration typically handled by stuffing configuration information into a system like etcd or consul. Some of these systems have clever features, like they only hold data for a few minutes, so the data needs to be constantly refreshed, and therefore failure to refresh can be read as a sign that some app has died. It’s like an inverse health check, the absence of data suggests a death. &lt;a href=&quot;http://blog.kubernetes.io/2015/04/borg-predecessor-to-kubernetes.html&quot;&gt;Apparently this is an area where Kubernetes (which replaced Borg at Google) tries to offer an innovative approach&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;21&quot;&gt;
&lt;p&gt;IP-per-Pod. In Borg, all tasks on a machine use the IP address of that host, and thus share the host’s port space. While this means Borg can use a vanilla network, it imposes a number of burdens on infrastructure and application developers: Borg must schedule ports as a resource; tasks must pre-declare how many ports they need, and take as start-up arguments which ports to use; the Borglet (node agent) must enforce port isolation; and the naming and RPC systems must handle ports as well as IP addresses.&lt;/p&gt;
&lt;p&gt;Thanks to the advent of software-defined overlay networks such as flannel or those built into public clouds, Kubernetes is able to give every pod and service its own IP address. This removes the infrastructure complexity of managing ports, and allows developers to choose any ports they want rather than requiring their software to adapt to the ones chosen by the infrastructure. The latter point is crucial for making it easy to run off-the-shelf open-source applications on Kubernetes–pods can be treated much like VMs or physical hosts, with access to the full port space, oblivious to the fact that they may be sharing the same physical machine with other pods.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don’t know if Kubernetes is better at orchestrating network resources than a system built around etcd or consul, but it does come from Google, so I assume it is battle tested. It’s possible that a small startup only needs a simple setup via consul (or similar), and it is possible that Kubernetes are only worth the investment when a shop is at scale. Time will tell. I am keeping an open mind about the possibility that Kubernetes offer a unique benefit when it comes to orchestration.&lt;/p&gt;
&lt;p&gt;But when it comes to managing dependencies or configuration or file systems or paths, I feel confident in saying that Docker is a complete waste of time. For every situation where some developers advocate Docker, I would instead advocate fat binaries.&lt;/p&gt;
&lt;a class=&quot;more source&quot; href=&quot;https://www.atlassian.com/blog/software-teams/deploy-java-apps-with-docker-awesome&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;</description>
<pubDate>Sun, 29 Oct 2017 06:02:17 +0000</pubDate>
<dc:creator>signa11</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.smashcompany.com/technology/why-would-anyone-choose-docker-over-fat-binaries</dc:identifier>
</item>
<item>
<title>I cured my tech fatigue by ditching feeds</title>
<link>https://techcrunch.com/2017/10/28/how-i-cured-my-tech-fatigue-by-ditching-feeds</link>
<guid isPermaLink="true" >https://techcrunch.com/2017/10/28/how-i-cured-my-tech-fatigue-by-ditching-feeds</guid>
<description>&lt;div id=&quot;&quot;&gt;




 
&lt;p&gt;Next Story&lt;/p&gt;
&lt;p&gt;
&lt;h4 class=&quot;next-title&quot;&gt;Crunch Report | Hey Dillon Francis, iPhone X Is Now Available For Pre-Order&lt;/h4&gt;
&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;121.60807651435&quot;&gt;

&lt;p class=&quot;first&quot;&gt;Gum sales have been &lt;a target=&quot;_blank&quot; href=&quot;https://www.recode.net/2017/6/26/15821652/iphone-apple-10-year-anniversary-launch-mobile-stats-smart-phone-steve-jobs&quot;&gt;relentlessly dropping&lt;/a&gt; for the past five years because people don’t look around when they wait in line to pay.&lt;/p&gt;
&lt;p id=&quot;speakable-summary&quot;&gt;On paper, smartphones are amazing pieces of glass. They have magically cured boredom as we always have something to do — those endless feeds of content are a perpetual source of inspiration, information and amusement. And yet, feeds need to die because they distort our views and disconnect us from other human beings around us.&lt;/p&gt;
&lt;p&gt;Many people have deleted the Facebook app from their phone to avoid this mindless habit. “What’s going on in my feed?” they think. Then they scroll, scroll, scroll, get bored and close the app. Repeat this process every 30 minutes. Deleting the app is the best way to take a stance and say that Facebook is a waste of time.&lt;/p&gt;
&lt;p&gt;But this idea is nothing new. Your phone battery isn’t miraculously shrinking. You’re just spending more time than ever using your phone. Flurry says that U.S. users spend &lt;a target=&quot;_blank&quot; href=&quot;https://techcrunch.com/2017/03/03/u-s-consumers-now-spend-5-hours-per-day-on-mobile-devices/&quot;&gt;nearly an hour&lt;/a&gt; in a Facebook app every day (Facebook, Instagram, WhatsApp and Messenger).&lt;/p&gt;
&lt;p&gt;Imagine what you could do with all this time. It’s easy to say that you don’t have time to read books anymore. But it’s harder to justify it once you realize you spend an hour scrolling through your Facebook and Instagram feeds every day.&lt;/p&gt;
&lt;p&gt;And I’m not judging here as I spend way too much time scrolling through my Twitter timeline every day. I probably spend more time staring at screens than most people — too much time.&lt;/p&gt;
&lt;p&gt;But something clicked for me a couple of months ago. I suffered from &lt;a target=&quot;_blank&quot; href=&quot;https://techcrunch.com/2016/04/19/tech-fatigue/&quot;&gt;tech fatigue&lt;/a&gt; once again and I wanted to change something.&lt;/p&gt;
&lt;div class=&quot;writerquote-wrap right pullquote-right&quot; readability=&quot;6&quot;&gt;
&lt;blockquote class=&quot;writerquote&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;Tech companies are now directly fighting against empathy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I now spend most of my weekends without ever checking a single feed. I don’t even need to pay attention to my battery level because I ignore my iPhone for most of the day. At first, I thought I was missing out on some Very Important Content. I felt disconnected. I fought against my own &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Fear_of_missing_out&quot;&gt;FOMO&lt;/a&gt;. But now, I don’t feel anything. What’s going on on Instagram? I don’t care.&lt;/p&gt;
&lt;p&gt;Facebook is now the &lt;a target=&quot;_blank&quot; href=&quot;https://techcrunch.com/2016/11/14/how-to-watch-the-world-burn-and-do-nothing/&quot;&gt;worst internet forum&lt;/a&gt; you can find. Twitter is filled with &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/romaindillet/status/831541928332247042&quot;&gt;horrible, abusive people&lt;/a&gt;. Instagram has become a tiny Facebook now that it has discouraged all the weird, funny accounts from posting with its &lt;a target=&quot;_blank&quot; href=&quot;https://techcrunch.com/2016/03/28/instagrammers-really-want-you-to-turn-on-notifications-to-avoid-death-by-algorithm/&quot;&gt;broken algorithm&lt;/a&gt;. LinkedIn’s feed is pure spam.&lt;/p&gt;
&lt;p&gt;And here’s what I realized after forgetting about all those “social” networks. First, they’re tricking you and pushing the right buttons to make you check your feed just one more time. They all use &lt;a target=&quot;_blank&quot; href=&quot;http://bradfrost.com/blog/post/facebook-you-needy-sonofabitch/&quot;&gt;thirsty notifications&lt;/a&gt;, promote contrarian posts that get a lot of engagement and play with &lt;a target=&quot;_blank&quot; href=&quot;https://www.nytimes.com/2014/06/30/technology/facebook-tinkers-with-users-emotions-in-news-feed-experiment-stirring-outcry.html?_r=0&quot;&gt;your emotions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Posting has been gamified and you want to check one more time if you got more likes on your last Instagram photo. Everything is now a story so that you pay more attention to your phone and you get bored less quickly — moving pictures with sound tend to attract your eyes. And many people now pay more attention to the Kardashian family than their neighbors.&lt;/p&gt;
&lt;p&gt;Second, I started paying attention to people around me. Phones have become a social tool to distance yourself from an uncomfortable situation. Somehow, if a homeless person yells at you, it has become acceptable to look at your phone and pretend that there’s something &lt;em&gt;really&lt;/em&gt; important happening on your screen. Nobody is going to judge you.&lt;/p&gt;
&lt;p&gt;Phone makers now sell you smartphones with &lt;a target=&quot;_blank&quot; href=&quot;https://techcrunch.com/2017/02/26/lg-proves-that-taller-screens-are-the-future-of-smartphones/&quot;&gt;taller&lt;/a&gt; displays so that you can see more posts at once on your phone and less details about the real world around you.&lt;/p&gt;
&lt;p&gt;And finally, I realized that I was missing out by constantly checking all my feeds. By putting my phone on ‘Do Not Disturb’ for days, I discovered new places, started conversations and noticed tiny little things that made me smile.&lt;/p&gt;
&lt;p&gt;But sometimes you’re not in a happy place and your phone can be a great way to escape from the real world. Books, movies and video games are also a great way to take a break from the real world. And you’ll probably get more out of them.&lt;/p&gt;
&lt;p&gt;Technology is great as it has improved the ways we communicate, share information and learn. It has generated economic value and reduced &lt;em&gt;some&lt;/em&gt; inequalities. But it has gone too far.&lt;/p&gt;
&lt;p&gt;Tech companies are now directly fighting against empathy. They are building feeds that shape your mindset and distract you from the world around you. They want to fill you with rage to foster engagement until you feel empty inside. Feeds now divide people and affect the structure of our societies.&lt;/p&gt;
&lt;p&gt;Having a tiny computer in your pocket is great, but some people prefer feature phones for a reason. Forget about your phone for a minute, look around and talk with people next to you.&lt;/p&gt;
&lt;small&gt;Featured Image: Paul Taylor/Getty Images&lt;/small&gt;



&lt;/div&gt;</description>
<pubDate>Sun, 29 Oct 2017 04:59:47 +0000</pubDate>
<dc:creator>prostoalex</dc:creator>
<og:title>How I cured my tech fatigue by ditching feeds</og:title>
<og:description>On paper, smartphones are amazing pieces of glass. They have magically cured boredom as we always have something to do — those endless feeds of content are..</og:description>
<og:image>https://tctechcrunch2011.files.wordpress.com/2016/04/gettyimages-119515917.jpg</og:image>
<og:url>http://social.techcrunch.com/2017/10/28/how-i-cured-my-tech-fatigue-by-ditching-feeds/</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2017/10/28/how-i-cured-my-tech-fatigue-by-ditching-feeds/</dc:identifier>
</item>
<item>
<title>One pixel attack for deceiving deep neural networks</title>
<link>https://arxiv.org/abs/1710.08864</link>
<guid isPermaLink="true" >https://arxiv.org/abs/1710.08864</guid>
<description>&lt;div id=&quot;&quot;&gt;
&lt;p&gt;&lt;span class=&quot;descriptor&quot;&gt;Abstract:&lt;/span&gt; Recent research has revealed that the output of Deep neural networks(DNN) is not continuous and very sensitive to tiny perturbation on the input vectors and accordingly several methods have been proposed for crafting effective perturbation against the networks. In this paper, we propose a novel method for optically calculating extremely small adversarial perturbation (few-pixels attack), based on differential evolution. It requires much less adversarial information and works with a broader classes of DNN models. The results show that 73.8$\%$ of the test images can be crafted to adversarial images with modification just on one pixel with 98.7$\%$ confidence on average. In addition, it is known that investigating the robustness problem of DNN can bring critical clues for understanding the geometrical features of the DNN decision map in high dimensional input space. The results of conducting few-pixels attack contribute quantitative measurements and analysis to the geometrical understanding from a different perspective compared to previous works.&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;30.263736263736&quot;&gt;
&lt;h2&gt;Submission history&lt;/h2&gt;
From: Jiawei Su [&lt;a href=&quot;https://arxiv.org/show-email/d4eff273/1710.08864&quot;&gt;view email&lt;/a&gt;]&lt;br /&gt;&lt;strong&gt;[v1]&lt;/strong&gt; Tue, 24 Oct 2017 16:02:19 GMT (815kb,D)&lt;br /&gt;&lt;/div&gt;</description>
<pubDate>Sun, 29 Oct 2017 03:50:11 +0000</pubDate>
<dc:creator>astdb</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arxiv.org/abs/1710.08864</dc:identifier>
</item>
<item>
<title>An anti-aging strategy that works in mice is about to be tested in humans</title>
<link>https://www.scientificamerican.com/article/to-stay-young-kill-zombie-cells/</link>
<guid isPermaLink="true" >https://www.scientificamerican.com/article/to-stay-young-kill-zombie-cells/</guid>
<description>&lt;div class=&quot;mura-region&quot;&gt;
&lt;div class=&quot;mura-region-local&quot;&gt;
&lt;p&gt;Jan van Deursen was baffled by the decrepit-looking transgenic mice he created in 2000. Instead of developing tumours as expected, the mice experienced a stranger malady. By the time they were three months old, their fur had grown thin and their eyes were glazed with cataracts. It took him years to work out why: the mice were ageing rapidly, their bodies clogged with a strange type of cell that did not divide, but that wouldn't die.&lt;/p&gt;
&lt;p&gt;That gave van Deursen and his colleagues at Mayo Clinic in Rochester, Minnesota, an idea: could killing off these 'zombie' cells in the mice delay their premature descent into old age? The answer was yes. In a 2011 study, the team found that eliminating these 'senescent' cells forestalled many of the ravages of age. The discovery set off a spate of similar findings. In the seven years since, dozens of experiments have confirmed that senescent cells accumulate in ageing organs, and that eliminating them can alleviate, or even prevent, certain illnesses (see 'Becoming undead'). This year alone, clearing the cells in mice has been shown to restore fitness, fur density and kidney function. It has also improved lung disease and even mended damaged cartilage. And in a 2016 study, it seemed to extend the lifespan of normally ageing mice.&lt;/p&gt;
&lt;p&gt;“Just by removing senescent cells, you could stimulate new tissue production,” says Jennifer Elisseeff, senior author of the cartilage paper and a biomedical engineer at Johns Hopkins University in Baltimore, Maryland. It jump-starts some of the tissue's natural repair mechanisms, she says.&lt;/p&gt;

&lt;p&gt;This anti-ageing phenomenon has been an unexpected twist in the study of senescent cells, a common, non-dividing cell type first described more than five decades ago. When a cell enters senescence—and almost all cells have the potential to do so—it stops producing copies of itself, begins to belch out hundreds of proteins, and cranks up anti-death pathways full blast. A senescent cell is in its twilight: not quite dead, but not dividing as it did at its peak.&lt;/p&gt;
&lt;p&gt;Now biotechnology and pharmaceutical companies are keen to test drugs—known as senolytics—that kill senescent cells in the hope of rolling back, or at least forestalling, the ravages of age. Unity Biotechnology in San Francisco, California, co-founded by van Deursen, plans to conduct multiple clinical trials over the next two-and-a-half years, treating people with osteoarthritis, eye diseases and pulmonary diseases. At Mayo, gerontologist James Kirkland, who took part in the 2011 study, is cautiously beginning a handful of small, proof-of-concept trials that pit senolytic drugs against a range of age-related ailments. “I lose sleep at night because these things always look good in mice or rats, but when you get to people you hit a brick wall,” says Kirkland.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.nature.com/news/2010/100324/full/464480a.html&quot;&gt;No other anti-ageing elixir has yet cleared that wall&lt;/a&gt;, and for a few good reasons. It's next to impossible to get funding for clinical trials that measure an increase in healthy lifespan. And even as a concept, ageing is slippery. The US Food and Drug Administration has not labelled it a condition in need of treatment.&lt;/p&gt;
&lt;p&gt;Still, if any of the trials offer “a whiff of human efficacy”, says Unity's president, Ned David, there will be a massive push to develop treatments and to &lt;a href=&quot;https://www.nature.com/news/medical-research-treat-ageing-1.15585&quot;&gt;better understand the fundamental process of ageing&lt;/a&gt;. Other researchers who study the process are watching closely. Senolytics are “absolutely ready” for clinical trials, says Nir Barzilai, director of the Institute for Aging Research at the Albert Einstein College of Medicine in New York City. “I think senolytics are drugs that could come soon and be effective in the elderly now, even in the next few years.”&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://www.scientificamerican.com/sciam/assets/Image/26_10_17-feature-graphic-zombie-cells.jpg&quot; data-instanceid=&quot;7D9CB8CC-88C1-4B12-BC162C65931FD5E7&quot; width=&quot;630&quot; height=&quot;1474&quot;/&gt; Credit: &lt;a href=&quot;http://www.nature.com/news/to-stay-young-kill-zombie-cells-1.22872&quot;&gt;Nature&lt;/a&gt;, October 24, 2017, doi:10.1038/550448a
&lt;h2&gt;The dark side&lt;/h2&gt;
&lt;p&gt;When microbiologists Leonard Hayflick and Paul Moorhead &lt;a href=&quot;https://www.nature.com/news/medical-research-cell-division-1.13273&quot;&gt;coined the term senescence&lt;/a&gt; in 1961, they suggested that it represented ageing on a cellular level. But very little research was done on ageing at the time, and Hayflick recalls people calling him an idiot for making the observation. The idea was ignored for decades.&lt;/p&gt;
&lt;p&gt;Although many cells do die on their own, all somatic cells (those other than reproductive ones) that divide have the ability to undergo senescence. But, for a long time, these twilight cells were simply a curiosity, says Manuel Serrano of the Institute for Research in Biomedicine in Barcelona, Spain, who has studied senescence for more than 25 years. “We were not sure if they were doing something important.” Despite self-disabling the ability to replicate, senescent cells stay metabolically active, often continuing to perform basic cellular functions.&lt;/p&gt;
&lt;p&gt;By the mid-2000s, senescence was chiefly understood as a way of arresting the growth of damaged cells to suppress tumours. Today, researchers continue to study how senescence arises in development and disease. They know that when a cell becomes mutated or injured, it often stops dividing—to avoid passing that damage to daughter cells. Senescent cells have also been identified in the placenta and embryo, where they seem to guide the formation of temporary structures before being cleared out by other cells.&lt;/p&gt;
&lt;p&gt;But it wasn't long before researchers discovered what molecular biologist Judith Campisi calls the “dark side” of senescence. In 2008, three research groups, including Campisi's at the Buck Institute for Research on Aging in Novato, California, revealed that senescent cells excrete a glut of molecules—including cytokines, growth factors and proteases—that affect the function of nearby cells and incite local inflammation. Campisi's group described this activity as the cell's senescence-associated secretory phenotype, or SASP. In recent unpublished work, her team identified hundreds of proteins involved in SASPs.&lt;/p&gt;
&lt;p&gt;In young, healthy tissue, says Serrano, these secretions are probably part of a restorative process, by which damaged cells stimulate repair in nearby tissues and emit a distress signal prompting the immune system to eliminate them. Yet at some point, senescent cells begin to accumulate—a process linked to problems such as osteoarthritis, a chronic inflammation of the joints, and atherosclerosis, a hardening of the arteries. No one is quite sure when or why that happens. It has been suggested that, over time, the immune system stops responding to the cells.&lt;/p&gt;
&lt;p&gt;Surprisingly, senescent cells turn out to be slightly different in each tissue. They secrete different cytokines, express different extracellular proteins and use different tactics to avoid death. That incredible variety has made it a challenge for labs to detect and visualize senescent cells. “There is nothing definitive about a senescent cell. Nothing. Period,” says Campisi.&lt;/p&gt;
&lt;p&gt;In fact, even the defining feature of a senescent cell—that it does not divide—is not written in stone. After chemotherapy, for example, cells take up to two weeks to become senescent, before reverting at some later point to a proliferating, cancerous state, says Hayley McDaid, a pharmacologist at Albert Einstein College of Medicine. In support of that idea, a large collaboration of researchers found this year that removing senescent cells right after chemotherapy, in mouse models for skin and breast cancer, makes the cancer less likely to spread.&lt;/p&gt;
&lt;p&gt;The lack of universal features makes it hard to take inventory of senescent cells. Researchers have to use a large panel of markers to search for them in tissue, making the work laborious and expensive, says van Deursen. A universal marker for senescence would make the job much easier—but researchers know of no specific protein to label, or process to identify. “My money would be on us never finding a senescent-specific marker,” Campisi adds. “I would bet a good bottle of wine on that.”&lt;/p&gt;
&lt;p&gt;Earlier this year, however, one group did develop a way to count these cells in tissue. Valery Krizhanovsky and his colleagues at the Weizmann Institute of Science in Rehovot, Israel, stained tissues for molecular markers of senescence and imaged them to analyse the number of senescent cells in tumours and aged tissues from mice. “There were quite a few more cells than I actually thought that we would find,” says Krizhanovsky. In young mice, no more than 1% of cells in any given organ were senescent. In two-year-old mice, however, up to 20% of cells were senescent in some organs.&lt;/p&gt;
&lt;p&gt;But there's a silver lining to these elusive twilight cells: they might be hard to find, but they're easy to kill.&lt;/p&gt;
&lt;h2&gt;Out with the old&lt;/h2&gt;
&lt;p&gt;In November 2011, while on a three-hour flight, David read van Deursen and Kirkland's just-published paper about eliminating zombie cells. Then he read it again, and then a third time. The idea “was so simple and beautiful”, recalls David. “It was almost poetic.” When the flight landed, David, a serial biotech entrepreneur, immediately rang van Deursen, and within 72 hours had convinced him to meet to discuss forming an anti-ageing company.&lt;/p&gt;
&lt;p&gt;Kirkland, together with collaborators at the Sanford Burnham Medical Research Institute in La Jolla, California, initially attempted a high-throughput screen to quickly identify a compound that would kill senescent cells. But they found it to be “a monumental task” to tell whether a drug was affecting dividing or non-dividing cells, Kirkland recalls. After several failed attempts, he took another tack.&lt;/p&gt;
&lt;p&gt;Senescent cells depend on protective mechanisms to survive in their 'undead' state, so Kirkland, in collaboration with Laura Niedernhofer and others from the Scripps Research Institute in Jupiter, Florida, began seeking out those mechanisms. They identified six signalling pathways that prevent cell death, which senescent cells activate to survive.&lt;/p&gt;
&lt;p&gt;Then it was just a matter of finding compounds that would disrupt those pathways. In early 2015, the team identified the first senolytics: an FDA-approved chemotherapy drug, dasatinib, which eliminates human fat-cell progenitors that have turned senescent; and a plant-derived health-food supplement, quercetin, which targets senescent human endothelial cells, among other cell types. The combination of the two—which work better together than apart—alleviates a range of age-related disorders in mice.&lt;/p&gt;
&lt;p&gt;Ten months later, Daohong Zhou at the University of Arkansas for Medical Sciences in Little Rock and his colleagues identified a senolytic compound now known as navitoclax, which inhibits two proteins in the BCL-2 family that usually help the cells to survive. Similar findings were reported within weeks by Kirkland's lab and Krizhanovsky's lab.&lt;/p&gt;
&lt;p&gt;By now, 14 senolytics have been described in the literature, including small molecules, antibodies and, in March this year, a peptide that activates a cell-death pathway and can restore lustrous hair and physical fitness to ageing mice.&lt;/p&gt;
&lt;p&gt;So far, each senolytic kills a particular flavour of senescent cell. Targeting the different diseases of ageing, therefore, will require multiple types of senolytics. “That's what's going to make this difficult: each senescent cell might have a different way to protect itself, so we'll have to find combinations of drugs to wipe them all out,” says Niedernhofer. Unity maintains a large atlas documenting which senescent cells are associated with which disease; any weaknesses unique to given kinds of cell, and how to exploit those flaws; and the chemistry required to build the right drug for a particular tissue. There is no doubt that for different indications, different types of drug will need to be developed, says David. “In a perfect world, you wouldn't have to. But sadly, biology did not get that memo.”&lt;/p&gt;
&lt;p&gt;For all the challenges, senolytic drugs have several attractive qualities. Senescent cells will probably need to be cleared only periodically—say, once a year—to prevent or delay disease. So the drug is around for only a short time. This type of 'hit and run' delivery could reduce the chance of side effects, and people could take the drugs during periods of good health. Unity plans to inject the compounds directly into diseased tissue, such as a knee joint in the case of osteoarthritis, or the back of the eye for someone with age-related macular degeneration.&lt;/p&gt;
&lt;p&gt;And unlike cancer, in which a single remaining cell can spark a new tumour, there's no need to kill every senescent cell in a tissue: mouse studies suggest that dispatching most of them is enough to make a difference. Finally, senolytic drugs will clear only senescent cells that are already present—they won't prevent the formation of such cells in the future, which means that senescence can continue to perform its original tumour-suppressing role in the body.&lt;/p&gt;
&lt;p&gt;Those perks haven't convinced everybody of the power of senolytics. Almost 60 years after his initial discovery, Hayflick now believes that ageing is an inexorable biophysical process that cannot be altered by eliminating senescent cells. “Efforts to interfere with the ageing process have been going on since recorded human history,” says Hayflick. “And we know of nothing—nothing—that has demonstrated to interfere with the ageing process.”&lt;/p&gt;
&lt;p&gt;Fans of senolytics are much more optimistic, emboldened by recent results. Last year, van Deursen's lab went beyond its tests on super-aged mice and showed that killing off senescent cells in normally ageing mice &lt;a href=&quot;https://www.nature.com/news/destroying-worn-out-cells-makes-mice-live-longer-1.19287&quot;&gt;delayed the deterioration of organs&lt;/a&gt; associated with ageing, including the kidney and heart. And—to the joy of anti-ageing enthusiasts everywhere—it extended the animals' median lifespan by about 25%.&lt;/p&gt;
&lt;p&gt;Successful results from mouse studies have already lured seven or eight companies into the field, Kirkland estimates. At Mayo, one clinical trial has opened, pitting dasatinib and quercetin in combination against chronic kidney disease. Kirkland plans to try other senolytics against different age-related diseases. “We want to use more than one set of agents across the trials and look at more than one condition,” he says.&lt;/p&gt;
&lt;p&gt;If eliminating senescent cells in humans does improve age-related illnesses, researchers will aim to create broader anti-ageing therapies, says David. In the meantime, researchers in the field insist that no one should take these drugs until proper safety tests in humans are complete. In rodents, senolytic compounds have been shown to delay wound healing, and there could be additional side effects. “It's just too dangerous,” says Kirkland.&lt;/p&gt;
&lt;p&gt;Van Deursen says that continuing to answer basic biological questions is the field's &lt;a href=&quot;https://www.nature.com/news/ageing-research-blood-to-blood-1.16762&quot;&gt;best shot at success&lt;/a&gt;. “Only then will we be able to understand what ageing really is, and how we can, in an intelligent way, interfere with it.”&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This article is reproduced with permission and was&lt;a href=&quot;https://www.nature.com/news/to-stay-young-kill-zombie-cells-1.22872&quot; target=&quot;_blank&quot;&gt;first published&lt;/a&gt;on October 24, 2017.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 29 Oct 2017 03:25:27 +0000</pubDate>
<dc:creator>molecule</dc:creator>
<og:type>article</og:type>
<og:title>To Stay Young, Kill Zombie Cells</og:title>
<og:description>An anti-aging strategy that works in mice is about to be tested in humans</og:description>
<og:image>https://www.scientificamerican.com/sciam/cache/file/973D79FA-801C-41F7-91F00663D32613CF_agenda.jpg?w=600&amp;h=335</og:image>
<og:url>https://www.scientificamerican.com/article/to-stay-young-kill-zombie-cells/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.scientificamerican.com/article/to-stay-young-kill-zombie-cells/</dc:identifier>
</item>
<item>
<title>Orchid: a new surveillance-free layer on top of the existing Internet</title>
<link>http://orchidprotocol.com</link>
<guid isPermaLink="true" >http://orchidprotocol.com</guid>
<description>&lt;p&gt;We are working on techniques involving &quot;traffic steganography&quot; that will make the the traffic used by Orchid look like &quot;normal&quot; internet traffic (such as web requests and video calls). There are also existing simpler techniques such as &quot;domain fronting&quot;, where you send your traffic to a large company such as Amazon--one which uses a CDN to efficiently route traffic--and cause their CDN to forward your traffic to your servers; this has been used successfully against the Great Firewall of China in the past.&lt;/p&gt;
&lt;p&gt;Of course, we also need to hide the list of destination servers, as otherwise these could be collected by the adversary and blocked outright. Our current solution to this involves cycling through large numbers of random IP addresses on various hosting solutions, which we believe will force anyone trying to block our traffic to end up blocking large areas of the internet--such as every server being hosted on Amazon Web Services--which would cause a serious problem for Chinese business people, deeply affecting commerce, as well as quality of life for the average Chinese citizen.&lt;/p&gt;
&lt;p&gt;For more information on this, see our discussion of Firewall Circumvention Features in our whitepaper.&lt;/p&gt;
</description>
<pubDate>Sat, 28 Oct 2017 19:39:03 +0000</pubDate>
<dc:creator>apsec112</dc:creator>
<og:url>https://www.orchidprotocol.com/</og:url>
<og:type>website</og:type>
<og:title>ORCHID: Welcome to a world where users own the Internet.</og:title>
<og:description>The Internet was invented for everyone. An open platform to access information, collaborate, and communicate freely across borders. Unfortunately, it’s no longer a place of true openness and freedom. But, we can change that.</og:description>
<og:image>https://www.orchidprotocol.com/imgs/orchid-og-image.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://orchidprotocol.com/</dc:identifier>
</item>
<item>
<title>Crystal in Production: Diploid</title>
<link>https://crystal-lang.org/2017/10/27/diploid-and-crystal.html</link>
<guid isPermaLink="true" >https://crystal-lang.org/2017/10/27/diploid-and-crystal.html</guid>
<description>&lt;blockquote readability=&quot;10.969957081545&quot;&gt;
&lt;p&gt;&lt;em&gt;This guest post is an interview that Ivo Balbaert had with Peter Schols from &lt;a href=&quot;http://www.diploid.com/&quot;&gt;&lt;strong&gt;Diploid&lt;/strong&gt;&lt;/a&gt; about their Crystal in Production story. This interview will also be part of the &lt;a href=&quot;https://pragprog.com/book/crystal/crystal&quot;&gt;&lt;strong&gt;Programming Crystal&lt;/strong&gt; book&lt;/a&gt; that Ivo is writting - and we can’t wait to read!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We’d like to thank both of them for taking the time to share their experience, and to invite any other companies or individuals using Crystal in a production environment to share theirs too - &lt;a href=&quot;https://crystal-lang.org/community/&quot;&gt;&lt;strong&gt;reach out&lt;/strong&gt;&lt;/a&gt; if you’d like to!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At &lt;a href=&quot;http://www.diploid.com/&quot;&gt;Diploid&lt;/a&gt;, we have been using Crystal for quite some time now. We would like to share our experience in this interview, answering questions relevant to companies wanting to use Crystal for production.&lt;/p&gt;

&lt;p&gt;Diploid is a company based in Leuven, Belgium. We provides services and software to hospitals and labs for diagnosing rare diseases using clinical genome analysis.&lt;/p&gt;

&lt;p&gt;We are using Crystal for parts of Moon, the first software package to autonomously diagnose rare disease using artificial intelligence. Moon is being used by hospitals worldwide to diagnose patients with severe genetic conditions. The software requires the patient’s symptoms, as well as his/her genome data. It will then come up with the most likely mutation to explain the patient’s condition.&lt;/p&gt;
&lt;p&gt;Before Moon, geneticists had to manually filter and rank mutations using special software in order to reach a diagnosis. This process can take several hours up to several days. Moon does the filtering and ranking automatically and proposes a diagnosis within 3 minutes.&lt;/p&gt;
&lt;p&gt;Moon has been written mostly in Ruby. We’ve chosen Ruby for several reasons: rapid development, expressive syntax, lots of available libraries and a great ecosystem. All of this results in developer happiness and faster development cycles. But while Ruby is fast enough for most parts of Moon, it can be slow for the most performance critical areas of our codebase. That’s why we evaluated Crystal, among others, and eventually decided to develop in Crystal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://crystal-lang.org/assets/blog/diploid-moon.png&quot; class=&quot;center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;When looking for a language that we could use to replace performance critical code in our Ruby codebase, we evaluated many options: Swift, Elixir, Go and Crystal. We specifically evaluated performance, syntax and ease-of-use. Performance was assessed using a small benchmark script that includes the performance critical operations that are typical for genome analysis (mostly string operations). Go topped the performance list, followed by Crystal. Surprisingly, Ruby outperformed Swift. Go clearly won the performance criterium. Performance is not everything, however: infrastructure is very cheap compared to developer time. While Go is an interesting language with a great concurrency model, it lacks in several other areas. Features that we take for granted in Ruby or other languages, are not available in Go. Examples include operator overloading or keyword extensibility, as well as true OOP. Moving from Ruby to Go sometimes feels like ignoring 20 years of progress made in language design.&lt;/p&gt;
&lt;p&gt;Crystal, as the second best performer, combines this still excellent performance with a very Ruby-like syntax. Given that the rest of our code base has been written in Ruby, it’s a great match. Moreover, Crystal has a Go-like concurrency model, so it basically takes the best from the Ruby world (expressive syntax, full OOP) and combines it with the best of Go (concurrency model, performance).&lt;/p&gt;

&lt;p&gt;Any problem that is currently being solved by Ruby, Python, Go or Rust could potentially be solved in Crystal. Given its similarity to Ruby, web frameworks will be an important part of the Crystal ecosystem. However, Crystal has a lot of potential in other fields too. Python is popular in data science, but it’s far from the fastest language. With Crystal, data scientists could have the ease-of-use of Python/Ruby combined with the performance of C. These advantages could make Crystal very suitable for domains like bioinformatics, where performance is really important.&lt;/p&gt;
&lt;p&gt;As many people in the bioinformatics field don’t have a formal CS/engineering background, having a language that is easy to learn is important as well. Crystal does very well on both fronts. In addition, due to its expressive nature and low barrier to entry - traits it inherited from Ruby - Crystal is a great tool for general scripting and systems software.&lt;/p&gt;

&lt;p&gt;When coming from Ruby, working in Crystal feels like coming home. Syntactically, Crystal is highly similar: the only major difference is the static typing. While this takes a bit to get used to, the transition was really smooth and easy. Many lines of code can literally be copied from a Ruby project and pasted into a Crystal project and they will just work. Some lines do need additional type annotations, however.&lt;/p&gt;
&lt;p&gt;Apart from that, the only major difference is that the rubygems (Ruby libraries) ecosystem is very expansive. Crystal has its own version of gems, called shards. While the number of shards has grown exponentially in the past few months, it’s still way behind the rubygems ecosystem, or the Go ecosystem for that matter.&lt;/p&gt;

&lt;p&gt;The Crystal code we use in production was not ported from Ruby, it was written from scratch in Crystal. However, in order to test the difference in performance - and also out of pure curiosity - we ported the code from Crystal to Ruby. For this particular project, we noticed that the Crystal version was 4.4x - 6.1x faster. This made a big difference in user experience. It means that for smaller data sets, Moon can present results in near real time (about 540 ms), which feels instant to the user. The corresponding Ruby program takes 2.5 seconds for the same task. When analysing larger data sets, the difference was even bigger: on average 27 seconds for Crystal compared to 2 minutes and 50 seconds for almost exactly the same Ruby code, a more than 6x speedup! When analysing hundreds of samples, these time differences become even more important.&lt;/p&gt;

&lt;p&gt;As mentioned, the speed increase is really significant. In addition, the ability to create a binary is convenient, as it allows for easy deployment. Compiling a binary also allows us to easily share software with our internal users and testers. With Ruby, we need to setup rvm or rbenv, install the latest Ruby version, install rubygems and install all required gems. With Crystal, it’s as easy as copying one file.&lt;/p&gt;

&lt;p&gt;Performance, the ability to create real binaries and the Ruby-like syntax are the most important Crystal selling points for me. Another advantage is that Crystal makes it very easy to create bindings to a C library - no need to write C code. Last but not least, Crystal has an amazing community of friendly and skilled developers. It started with Ary, Juan and Brian at Manas, creating the language and helping the Crystal newbies. In the meantime, it seems like the entire community has copied their attitude of providing help and pointers to everyone who’s interested in this very promising language.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.diploid.com/&quot;&gt;Diploid&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.diploid.com/moon&quot;&gt;Moon software&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 28 Oct 2017 11:06:03 +0000</pubDate>
<dc:creator>sdogruyol</dc:creator>
<og:title>Diploid and Crystal</og:title>
<og:description>At Diploid, we have been using Crystal for quite some time now. We would like to share our experience in this interview, answering questions relevant to companies wanting to use Crystal for production.</og:description>
<og:url>http://crystal-lang.org/2017/10/27/diploid-and-crystal.html</og:url>
<og:image>http://crystal-lang.org/images/icon.png</og:image>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://crystal-lang.org/2017/10/27/diploid-and-crystal.html</dc:identifier>
</item>
<item>
<title>Progressive Growing of GANs for Improved Quality, Stability, Variation [video]</title>
<link>https://www.youtube.com/watch?time_continue=1&amp;v=XOxxPcy5Gr4</link>
<guid isPermaLink="true" >https://www.youtube.com/watch?time_continue=1&amp;v=XOxxPcy5Gr4</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://www.youtube.com/watch?time_continue=1&amp;v=XOxxPcy5Gr4&quot;&gt;https://www.youtube.com/watch?time_continue=1&amp;v=XOxxPcy5Gr4&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=15574079&quot;&gt;https://news.ycombinator.com/item?id=15574079&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 213&lt;/p&gt;&lt;p&gt;# Comments: 65&lt;/p&gt;</description>
<pubDate>Sat, 28 Oct 2017 05:19:38 +0000</pubDate>
<dc:creator>visarga</dc:creator>
<og:url>https://www.youtube.com/watch?v=XOxxPcy5Gr4</og:url>
<og:title>Progressive Growing of GANs for Improved Quality, Stability, and Variation</og:title>
<og:image>https://i.ytimg.com/vi/XOxxPcy5Gr4/maxresdefault.jpg</og:image>
<og:description>Submitted to ICLR 2018 We strongly recommend watching the video full-screen at 1080p @ 60.</og:description>
<og:type>video</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.youtube.com/watch?time_continue=1&amp;v=XOxxPcy5Gr4</dc:identifier>
</item>
<item>
<title>Can You Afford It? Real-World Web Performance Budgets</title>
<link>https://infrequently.org/2017/10/can-you-afford-it-real-world-web-performance-budgets/</link>
<guid isPermaLink="true" >https://infrequently.org/2017/10/can-you-afford-it-real-world-web-performance-budgets/</guid>
<description>&lt;p&gt;&lt;em&gt;TL;DR: performance budgets are an essential but under-appreciated part of product success and team health. Most partners we work with are not aware of the real-world operating environment and make inappropriate technology choices as a result. We set a budget in &lt;strong&gt;time&lt;/strong&gt; of &amp;lt;= 5 seconds first-load &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/time-to-interactive&quot;&gt;Time-to-Interactive&lt;/a&gt; and &amp;lt;= 2s for subsequent loads. We constrain ourselves to a real-world baseline device + network configuration to measure progress. The default global baseline is a ~$200 Android device on a 400Kbps link with a 400ms round-trip-time (“RTT”). This translates into a budget of ~130-170KB of critical-path resources, depending on composition — the more JS you include, the smaller the bundle must be.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;We’ve had the pleasure of working with dozens of teams over the past few years. This work has been illuminating, sometimes in very unexpected ways. One of the most surprising results has been the frequent occurrence of &lt;em&gt;“ambush by JavaScript”&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-width=&quot;500&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot; xml:lang=&quot;en&quot; xml:lang=&quot;en&quot;&gt;We need a new term for the business-opportunity wastage that modern front-end development has created.&lt;/p&gt;
&lt;p&gt;Maybe &quot;ambush by JS&quot;?&lt;/p&gt;
&lt;p&gt;— Alex Russell (@slightlylate) &lt;a href=&quot;https://twitter.com/slightlylate/status/915617755675504640?ref_src=twsrc%5Etfw&quot;&gt;October 4, 2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Business leaders who green-light the development of Progressive Web Apps frequently cite the ability to reach new users with near-zero friction as a &lt;a href=&quot;https://www.forbes.com/sites/forbespr/2017/03/07/forbes-launches-all-new-mobile-web-experience-for-forbes-com/#62db39375168&quot;&gt;primary motivator&lt;/a&gt;. At the same time, teams are reaching for tools which make achieving this goal impossible. Nobody is trying to do a poor job, and yet the results of a “completed” PWA project often require weeks or months of painstaking rework to deliver minimally acceptable performance.&lt;/p&gt;
&lt;p&gt;This rework delays launches which, in turn, delays gathering data about the viability of a PWA strategy. Teams we aren’t able to work with directly sometimes do not catch these problems until it’s too late, launching experiences which are simply unusable for a majority of potential users.&lt;/p&gt;
&lt;h2&gt;Setting A Baseline&lt;/h2&gt;
&lt;p&gt;Teams that avoid unpleasant surprises tend to share a few traits:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Executive sponsors are enthusiastic. They use “do what it takes” language to describe the efforts to get and stay fast&lt;/li&gt;
&lt;li&gt;Performance budgets are set early in the life of the project&lt;/li&gt;
&lt;li&gt;Budgets are scaled to a benchmark network &amp;amp; device&lt;/li&gt;
&lt;li&gt;Tools and CI systems help them monitor progress &amp;amp; prevent regressions&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;These properties build on each other: it’s difficult to get the space you need to plan to do things well without decision makers who value user experience and long-term business value. Teams with this support are free to set performance budgets, do “bakeoffs” between competing approaches, and invest in performance infrastructure. They’re also more able to go against the “industry standard” grain when popular tools prove to be inappropriate.&lt;/p&gt;
&lt;p&gt;Performance budgets keep everyone on the same page and create a culture of shared enthusiasm for improving the lived user experience. Teams with budgets also find it easier to track and graph progress. This helps support executive sponsors who then have meaningful metrics to point to in justifying the investments being made.&lt;/p&gt;
&lt;p&gt;Budgets set an &lt;em&gt;objective frame&lt;/em&gt; for determining which changes to the codebase represent progress and which are regressions from the user perspective. Without them it’s impossible to avoid slipping into the trap of pretending you can afford more than you can. Very rarely have we seen a team succeed that doesn’t set budgets, gather RUM metrics, and carry representative customer devices.&lt;/p&gt;
&lt;p&gt;Partner meetings are illuminating. We get a strong sense for how bad site performance is going to be based on the percentage of engineering leads, PMs, and decision makers carrying high-end phones which they primarily use in &lt;a href=&quot;http://www.telecompetitor.com/report-u-s-rural-mobile-broadband-speeds-are-20-9-slower-than-urban/&quot;&gt;urban areas&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Doing better by users involves 2 phases:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Challenging assumptions &amp;amp; growing understanding of real-world conditions&lt;/li&gt;
&lt;li&gt;Automating testing against an objective baseline&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Never before have front-end teams enjoyed access to such good performance tools and diagnostic techniques, yet poor results are the norm. What’s going on here?&lt;/p&gt;
&lt;h2&gt;JS Is Your Most Expensive Asset&lt;/h2&gt;
&lt;p&gt;One distinct trend is a belief that a JavaScript framework and Single-Page Architecture (SPA) is a must for PWA development. This isn’t true (more on that in a follow-up post), and sites which are built this way implicitly require more script in each document (e.g., for router components). We regularly see sites loading more than 500KB of script (compressed). This matters because all script loading delays the metric we value most: &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/time-to-interactive&quot;&gt;Time to Interactive&lt;/a&gt;. Sites with this much script are simply &lt;em&gt;inaccessible&lt;/em&gt; to a broad swath of the world’s users; statistically, users do not (and will not) wait for these experiences to load. Those that do experience horrendous jank.&lt;/p&gt;
&lt;p&gt;We’re often asked “what’s the big deal about 200KB of JS, some of our images are that size?” A good question! Answering it requires an understanding of how browsers process resources (which differs by type) and the concept of &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/optimizing-critical-rendering-path&quot;&gt;the critical path&lt;/a&gt;. &lt;a href=&quot;https://www.youtube.com/watch?v=0A-2BhEZiM4&amp;amp;feature=youtu.be&quot;&gt;For a timely introduction, I recommended Kevin Schaaf’s recent talk&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Lx1cYJAVnzA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; class=&quot;yt-embed&quot;&gt;[embedded content]&lt;/iframe&gt;Late-loading JavaScript can cause “server-side rendered” pages to fail in infuriating ways. This uncanny-valley effect is the reason we focus on when pages become reliably interactive.&lt;/p&gt;
&lt;p&gt;Consider a page like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;br /&gt;&amp;lt;html&amp;gt;&lt;br /&gt;&amp;lt;head&amp;gt;&lt;br /&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/styles.css&quot;&amp;gt;&lt;br /&gt;&amp;lt;script src=&quot;/app.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&amp;lt;/head&amp;gt;&lt;br /&gt;&amp;lt;body&amp;gt;&lt;br /&gt;&amp;lt;my-app&amp;gt;&lt;br /&gt;&amp;lt;picture slot=&quot;hero-image&quot;&amp;gt;&lt;br /&gt;&amp;lt;source srcset=&quot;img@desktop.png, img@desktop-2x.png 2x&quot;&lt;br /&gt;media=&quot;(min-width: 990px)&quot;&amp;gt;&lt;br /&gt;&amp;lt;source srcset=&quot;img@tablet.png, img@tablet-2x.png 2x&quot;&lt;br /&gt;media=&quot;(min-width: 750px)&quot;&amp;gt;&lt;br /&gt;&amp;lt;img srcset=&quot;img@mobile.png, img@mobile-2x.png 2x&quot;&lt;br /&gt;alt=&quot;I don't know why. It's a perfectly cromunlent word!&quot;&amp;gt;&lt;br /&gt;&amp;lt;/picture&amp;gt;&lt;br /&gt;&amp;lt;/my-app&amp;gt;&lt;br /&gt;&amp;lt;/body&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The browser encounters this document in response for a GET request to &lt;code&gt;https://example.com/&lt;/code&gt;. The server sends it as a stream of bytes and when the browser encounters each of the sub-resources referenced in the document, it requests them.&lt;/p&gt;
&lt;p&gt;For this page to be done loading it needs to be responsive to user input — the “interactive” in &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/time-to-interactive&quot;&gt;“Time to Interactive”&lt;/a&gt;. Browsers process user input by generating DOM events that application code listens to. This input processing happens on document’s &lt;em&gt;main thread&lt;/em&gt;, where JavaScript runs.&lt;/p&gt;
&lt;p&gt;Here are some operations that can happen on other threads, allowing the browser to stay responsive:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Parsing HTML&lt;/li&gt;
&lt;li&gt;Parsing CSS&lt;/li&gt;
&lt;li&gt;Parsing and compiling JavaScript (sometimes)&lt;/li&gt;
&lt;li&gt;Some JS garbage collection tasks&lt;/li&gt;
&lt;li&gt;Parsing and rasterizing images&lt;/li&gt;
&lt;li&gt;GPU-accelerated CSS transformations and animations&lt;/li&gt;
&lt;li&gt;Main-document scrolling (assuming no active touch listeners)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;These operations, however, &lt;em&gt;must&lt;/em&gt; happen on the main thread:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Execution of JavaScript&lt;/li&gt;
&lt;li&gt;Construction of DOM&lt;/li&gt;
&lt;li&gt;Layout&lt;/li&gt;
&lt;li&gt;Processing input (including scrolling w/ active touch listeners)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If our example document wasn’t reliant on JavaScript to construct the &lt;code&gt;&amp;lt;my-app&amp;gt;&lt;/code&gt; custom element, the contents of the document would likely be interactive as soon as enough CSS and content was available to render meaningfully.&lt;/p&gt;
&lt;p&gt;Script execution delays interactivity in a few ways:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;If the script executes for more than 50ms, time-to-interactive is delayed by the &lt;em&gt;entire&lt;/em&gt; amount of time it takes to download, compile, and execute the JS&lt;/li&gt;
&lt;li&gt;Any DOM or UI created in JS is not available for use until the script runs&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Images, on the other hand, do not block the main thread, do not block interaction when parsed or rasterized, and do not prevent other parts of the UI from getting or staying interactive. Therefore, while a 150KB image won’t appreciably increase TTI, 150KB of JS will delay interactivity by the time required to:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Request the code, including DNS, TCP, HTTP, and decompression overhead&lt;/li&gt;
&lt;li&gt;Parse and compile the top-level functions of the JS&lt;/li&gt;
&lt;li&gt;Execute the script&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;These steps are largely serialized.&lt;/p&gt;
&lt;p&gt;If script execution could stay under 50ms for a bundle this large, TTI would not be delayed, but that’s not feasible. 150KB of gzipped JavaScript expands to roughly 1MB of code, and as &lt;a href=&quot;https://medium.com/reloading/javascript-start-up-performance-69200f43b201&quot;&gt;Addy&lt;/a&gt; &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1wHcNNQea28LhwQ_amFamT33d5woVrJfJy53Z1k6V090/edit#gid=1882596388&quot;&gt;documented&lt;/a&gt;, that’s going to take more than a second on most of the world’s phones &lt;em&gt;not including the time to fetch it&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;JavaScript is the &lt;em&gt;single most&lt;/em&gt; expensive part of any page in ways that are a function of both network capacity and device speed. For developers and decision makers with fast phones on fast networks this is a double-whammy of hidden costs.&lt;/p&gt;
&lt;h2&gt;Global Ground-Truth&lt;/h2&gt;
&lt;p&gt;Deciding what benchmark to use for a performance budget is crucial. Some teams and businesses know their audience intimately and can make informed estimates about the devices and networks current and prospective users are on. Most, however, do not have such a baseline easily to-hand. Where to start?&lt;/p&gt;
&lt;p&gt;Two numbers set the stage:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The median user is on a slow network&lt;/em&gt;. Just how slow is a matter of some debate.&lt;/p&gt;
&lt;p&gt;Our metrics at Google show a conflicted picture (which I’m working to get to clarity on). Some systems show median RTTs near ~100ms for 3G users. Others show the median user unable to transmit and receive an individual packet in less than 400ms in some major markets.&lt;/p&gt;
&lt;p&gt;I suggest we should be conservative. &lt;a href=&quot;http://frankrayal.com/2011/06/27/lte-peak-capacity/&quot;&gt;Contended, over-subscribed cells&lt;/a&gt; can make “fast” networks brutally slow, &lt;a href=&quot;https://cs.nyu.edu/~jchen/publications/sigcomm15-zaki.pdf&quot;&gt;transport variance can make TCP much less efficient&lt;/a&gt;, and the &lt;a href=&quot;http://www-personal.umich.edu/~hjx/file/sigcomm13.pdf&quot;&gt;bursty nature of web traffic works against us&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Googlers enjoy access to a simulated “degraded 3G” network to help validate the behaviour of their apps under these conditions. It simulates a link with a 400ms RTT and 400-600Kbps of throughput (plus latency variability and simulated packet loss). Given the conflicted data we see across our other systems, this seems about right as a baseline.&lt;/p&gt;
&lt;p&gt;Simulated packet loss and variable latency, however, can make benchmarking extremely difficult and slow. The effect of a lost packet during DNS lookup can be a difference of &lt;em&gt;seconds&lt;/em&gt;, making it frustrating to compare before/after for changes at development time. Our baseline, then, should probably trade lower throughput/higher-latency for packet loss. What we lose in real-world fidelity, we gain in repeatability and the ability to compare across changes and across products. There’s much, much more to say about the effects of DNS, TLS, network topology, and other factors. For those who want to go deeper on this, I highly recommend &lt;a href=&quot;https://hpbn.co/&quot;&gt;Ilya Grigorik’s “High Performance Browser Networking”&lt;/a&gt;. The &lt;a href=&quot;https://hpbn.co/mobile-networks/#radio-resource-controller-rrc&quot;&gt;coverage of RRC&lt;/a&gt; alone makes it worth your time.&lt;/p&gt;
&lt;p&gt;Back to our baseline, we now have a sense for what our simulated network conditions should be: &lt;em&gt;400ms RTT, 400Kbps bandwidth&lt;/em&gt;. What about the device itself?&lt;/p&gt;
&lt;p&gt;At last year’s Chrome Dev Summit &lt;a href=&quot;https://www.youtube.com/watch?v=4bZvq3nodf4&quot;&gt;I discussed some of the thermal and power-limiting factors that create a huge disparity between desktop and mobile device performance&lt;/a&gt;. Add onto that the yawning chasm between low-end and high-end device performance thanks to chip design factors like cache sizes, and it can be difficult to know where to set a device baseline. Thankfully, this is somewhat easier than network speeds: &lt;a href=&quot;http://www.prnewswire.com/news-releases/comscore-reports-february-2017-us-smartphone-subscriber-market-share-300437639.html&quot;&gt;more than half of &lt;em&gt;American&lt;/em&gt;&lt;/a&gt; mobile users are on Android devices. As you look abroad, worldwide smartphone shipments &lt;a href=&quot;https://www.idc.com/promo/smartphone-market-share/os&quot;&gt;are (and for the past 5 years have been) overwhelmingly Android-based&lt;/a&gt;. &lt;a href=&quot;https://www.statista.com/statistics/283334/global-average-selling-price-smartphones/&quot;&gt;The average selling price for those devices is &lt;em&gt;falling&lt;/em&gt; in most geographies&lt;/a&gt;, driven by the ubiquity of Androids and &lt;a href=&quot;http://fortune.com/2016/02/15/apple-android-asps/&quot;&gt;relentless price drops within that ecosystem&lt;/a&gt;. This, in turn, drives the single most important trend in setting the global web performance budget hardware baseline: the next billion users will largely come online &lt;em&gt;when they can afford to&lt;/em&gt;. This will drive declines in smartphone average-selling-price (“ASP”) in emerging markets for the foreseeable future. This, in turn, means that all improvements to transistor-count-per-dollar will translate into &lt;em&gt;lower selling prices&lt;/em&gt;, not faster devices (on average).&lt;/p&gt;
&lt;p&gt;The true median device from 2016 sold at about ~$200 unlocked. &lt;a href=&quot;https://www.idc.com/getdoc.jsp?containerId=prUS42334717&quot;&gt;This year’s median device is even cheaper&lt;/a&gt;, but their performance is &lt;em&gt;roughly equivalent&lt;/em&gt;. Expect performance continued stasis at the median for the next few years. This is part of the reason I &lt;a href=&quot;https://building.calibreapp.com/beyond-the-bubble-real-world-performance-9c991dcd5342&quot;&gt;suggested&lt;/a&gt; the &lt;a href=&quot;https://www.gsmarena.com/motorola_moto_g4-8103.php&quot;&gt;Moto G4&lt;/a&gt; last year and recommend it or the &lt;a href=&quot;https://www.gsmarena.com/motorola_moto_g5_plus-8453.php&quot;&gt;Moto G5 Plus&lt;/a&gt; this year.&lt;/p&gt;
&lt;p&gt;Putting it all together, our global baseline for performance benchmarking is a:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;~$200 (new, unlocked) Android phone&lt;/li&gt;
&lt;li&gt;On a slow 3G network, emulated at:
&lt;ul&gt;&lt;li&gt;400ms RTT&lt;/li&gt;
&lt;li&gt;400Kbps transfer&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For most technologists, building applications for this environment might as well be farming on Mars. Luckily, &lt;a href=&quot;https://github.com/WPO-Foundation/webpagetest/blob/6a79fedb6bb5792f11d2891d9ae80f8ffb8b1a7d/www/settings/connectivity.ini.sample#L61&quot;&gt;this configuration&lt;/a&gt; is available on &lt;a href=&quot;https://www.webpagetest.org/easy&quot;&gt;webpagetest.org/easy&lt;/a&gt;, meaning we can re-create these conditions here on earth, any time we like.&lt;/p&gt;
&lt;h2&gt;The Affordability Calculation&lt;/h2&gt;
&lt;p&gt;The last thing we need for our perf budget is &lt;em&gt;time&lt;/em&gt;. How long is too long?&lt;/p&gt;
&lt;p&gt;I like Monica’s definition:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-width=&quot;500&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot; xml:lang=&quot;en&quot; xml:lang=&quot;en&quot;&gt;The Monica Perf Test™: if you wouldn't make eye contact with a stranger for the time it takes your web app to first paint, it's too slow.✌️💫&lt;/p&gt;
&lt;p&gt;— Monica Dinculescu (@notwaldorf) &lt;a href=&quot;https://twitter.com/notwaldorf/status/778248810371747840?ref_src=twsrc%5Etfw&quot;&gt;September 20, 2016&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;…but that’s more qualitative than quantitative. Numerically, we’d prefer &lt;em&gt;every&lt;/em&gt; page load occur in under a second (&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/rail&quot;&gt;see RAIL&lt;/a&gt;). That’s not possible on real-world networks, so we’ve set the following &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/time-to-interactive&quot;&gt;Time-to-Interactive (TTI) metric&lt;/a&gt; goal with partners:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;TTI under &lt;a href=&quot;https://www.doubleclickbygoogle.com/articles/mobile-speed-matters/&quot;&gt;&lt;em&gt;5 seconds&lt;/em&gt;&lt;/a&gt; for first load&lt;/li&gt;
&lt;li&gt;TTI under &lt;em&gt;2 seconds&lt;/em&gt; for subsequent loads&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We now have everything we need to create a ballpark perf budget for a product in 2017.&lt;/p&gt;
&lt;h3&gt;First Load&lt;/h3&gt;
&lt;p&gt;Working backwards from time, network conditions, and the primary stages of the critical path, we get a few interesting results. We can start with our first-load budget of 5 seconds and begin to calculate how much transfer we can afford.&lt;/p&gt;
&lt;p&gt;First we subtract 1.6 seconds from our budgets for DNS lookup and TLS handshaking, leaving us 3.4s to work with.&lt;/p&gt;
&lt;p&gt;Then, we calculate how much data we can send over this link in 3.4 seconds: 400 Kbps = 50KB/s. 50KB/s * 3.4 = &lt;em&gt;170KB&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: This discussion is sure to infuriate competent network engineers. Previous versions of this article discussed &lt;a href=&quot;https://hpbn.co/building-blocks-of-tcp/#bandwidth-delay-product&quot;&gt;slow-start, bdp, tcp window scaling, and the like&lt;/a&gt;. They were commensurately difficult to follow. Simplifying has relatively little impact on the overall story, so those details are elided.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Modern web applications are largely composed of JS, meaning we also need to subtract the amount of time the JS needs to parse and evaluate. The gzip compression factor for JS code is between 5x and 7x. 170KB of JS then becomes ~850KB-1MB of JS which, based on earlier estimates, may take a second to run (presuming it doesn’t do any expensive DOM work, which of course it will). Playing with these numbers a little bit, we can get back below 3.4s of download and eval by limiting ourselves to 130KB of JS transferred on the wire.&lt;/p&gt;
&lt;p&gt;One last wrench in the works: if any of our critical-path resources come from a different origin (e.g., a CDN), we need to subtract connection setup time for that origin (~1.6s) from the budget, further limiting how much of our 5s we actually get to can spend on network transfer and client-side work.&lt;/p&gt;
&lt;p&gt;Putting it all together, under ideal conditions, our rough budget for critical-path resources (CSS, JS, HTML, and data) at:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;170KB&lt;/em&gt; for sites without much JS&lt;/li&gt;
&lt;li&gt;&lt;em&gt;130KB&lt;/em&gt; for sites built with JS frameworks&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This gives us the ability to consider the single most pressing question in front-end development today: &lt;em&gt;“can you afford it?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For example, if your JS framework takes ~40KB of transfer on a JS-heavy site (which gets a budget of 130KB thanks to JS eval time), you’re left with only 90KB of “headroom”. Your entire app must fit into that space. A 100KB framework loaded from a CDN &lt;em&gt;is already 20KB over budget&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Think back: your framework of choice might be 40K, but what about that data system? The router you added? Suddenly 130KB doesn’t seem like a lot when you also need to include data, templates, and styles.&lt;/p&gt;
&lt;p&gt;Living on a budget means constantly asking yourself “can I really afford this?”&lt;/p&gt;

&lt;h3&gt;Second Load&lt;/h3&gt;
&lt;p&gt;In an ideal world, all page loads happen in under a second, but for many reasons that’s often not feasible. Therefore we’re going to give ourselves a bit of a breather and budget 2 seconds for second (third, fourth, etc.) load.&lt;/p&gt;
&lt;p&gt;Why not 5? Because we shouldn’t need to ever go to the network to get our app’s UI booted once we’ve visited it the first time. &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;Service Workers&lt;/a&gt; and &lt;a href=&quot;http://offlinefirst.org/&quot;&gt;“offline first”&lt;/a&gt; architectures enables us to put interactive pixels on screen without ever touching the network. This is the key to achieving &lt;a href=&quot;https://infrequently.org/2016/05/service-workers-and-pwas-its-about-reliable-performance-not-offline/&quot;&gt;reliable performance&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Two seconds is &lt;em&gt;forever&lt;/em&gt; in modern CPU terms, but we still need to spend it wisely. Factors we need to account for include:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Process creation time (Android is relatively slow vs. other OSes)&lt;/li&gt;
&lt;li&gt;Time required to read bytes from disk (it’s not zero, even on flash-based storage!)&lt;/li&gt;
&lt;li&gt;Time to execute and run our code&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Every app I’ve seen that hits a 5s initial load and implements offline-first correctly stays under this 2s budget, and sub 1s is possible! But getting to offline-first is a huge challenge for many teams. Architecting to save last-seen user data locally, cache app resources in a reliable and coherent way, and juggle application code upgrades using the &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle&quot;&gt;Service Worker lifecycle&lt;/a&gt; can be a major undertaking.&lt;/p&gt;
&lt;p&gt;I’m looking forward to tools continuing to evolve in this area. The most comprehensive bootstrap I know of today is the &lt;a href=&quot;https://www.polymer-project.org/2.0/toolbox/&quot;&gt;Polymer App Toolbox&lt;/a&gt;, so if you’re not sure where to start, start there.&lt;/p&gt;
&lt;h2&gt;130-170KB…Surely You’re Kidding!?!&lt;/h2&gt;
&lt;p&gt;Many teams we talk to wonder if it’s even possible to deliver something useful in as little as 130KB. It is! the &lt;a href=&quot;https://www.polymer-project.org/2.0/toolbox/prpl&quot;&gt;PRPL pattern&lt;/a&gt; shows the way through aggressive code-splitting based on route awareness, Service Worker caching of granular (subsequent-page) resources, and clever use of modern protocol enhancements like &lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP/2_Server_Push&quot;&gt;HTTP/2 Push&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Taken together, these tools &lt;a href=&quot;https://www.webpagetest.org/video/compare.php?tests=171009_XR_4af2434b042e8ded9256ce3de39e5345-r%3A1-c%3A0&amp;amp;thumbSize=200&amp;amp;ival=100&amp;amp;end=full&quot;&gt;enable us to deliver functional, modern experiences in under 100KB for the critical path&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sadly, it’s still sort of difficult to tell from a specific trace which parts of the page load are critical-path resources for TTI and which aren’t, but I’m optimistic that tools will evolve quickly to help us understand this key metric.&lt;/p&gt;
&lt;p&gt;Regardless, we know it’s possible, even without giving up on frameworks entirely. Both &lt;a href=&quot;https://www.wego.com&quot;&gt;Wego&lt;/a&gt; and &lt;a href=&quot;https://h5.ele.me/msite/&quot;&gt;Ele.me&lt;/a&gt; are built with modern tools (&lt;a href=&quot;https://www.polymer-project.org/&quot;&gt;Polymer&lt;/a&gt; and &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue&lt;/a&gt;, respectively) and help users complete real transactions &lt;em&gt;today&lt;/em&gt;. Most apps are &lt;em&gt;less&lt;/em&gt; complex than they are. Life on a budget isn’t starvation.&lt;/p&gt;
&lt;h2&gt;Tools for Teams on a Budget&lt;/h2&gt;
&lt;p&gt;Getting under-budget &lt;em&gt;is&lt;/em&gt; hard, but the benefits to the business and to users are immense. Less often discussed are the benefits to engineering teams and their leaders. No tech-lead or PM wants to be on the wrong side of an executive who walks into their area with a phone asking “so why is this so slow when I’m on vacation?”&lt;/p&gt;
&lt;p&gt;This isn’t theoretical.&lt;/p&gt;
&lt;p&gt;I’ve seen teams that have just finished re-building on a modern tech stack cringe for an hour as we walk them through the experience of using their “better”, “faster” experiences under real-world conditions.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Everyone&lt;/em&gt; loses face when the product fails to meet expectations. Months of unplanned performance fire-fighting delay the addition of new features and have a draining effect on team morale. When performance becomes a crisis, mid-level managers get caught between being the “shit umbrella” their teams count on and crushing self doubt. Worse, they may begin to doubt their team. The other side of a performance crisis is a long road; how can the organisation trust the team to deliver a quality product? Can they trust the TLs to recommend new technology or large re-investments? Recriminations follow. This is a &lt;em&gt;terrible&lt;/em&gt; experience, specifically for developers who are too often on the receiving end of incredible pressure to “fix it”, ASAP — and “it” may be a core technology the product is built on.&lt;/p&gt;
&lt;p&gt;In the worst cases, the product may be unfixable on a short enough timeframe to help the business. A lot of progress is Darwinian and for startups and small teams, betting on the wrong stack without the benefit of a long runway can be fatal. Worse, this can go un-diagnosed for a long, long time. If the whole team carries the latest iOS devices on fast, urban networks and the product’s economics are premised on growing a broad-based audience, the failure of that audience to arrive barely makes a sound.&lt;/p&gt;
&lt;p&gt;Performance isn’t the (entire) product, of course. Lots of slow or market-limited products do incredibly well. Having a unique service that people want (and will go out of their way for) can override all of these other concerns. Some folks even succeed in App Stores where friction-to-acquire an experience is &lt;em&gt;intense&lt;/em&gt;. But products in competitive marketplaces need every advantage.&lt;/p&gt;
&lt;p&gt;Some specific tools and techniques can help teams that adopt a performance budget:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.webpagetest.org/easy&quot;&gt;webpagetest.org/easy&lt;/a&gt;: this is our go-to tool for one-off analysis.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sites.google.com/a/webpagetest.org/docs/using-webpagetest/scripting&quot;&gt;WPT scripting&lt;/a&gt;: for teams that don’t want to set up a custom WPT instance and have public URLs for their WIP apps, integrating with WPT scripting can be a great way to get regular “checks”&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sites.google.com/a/webpagetest.org/docs/private-instances&quot;&gt;WPT private instances&lt;/a&gt;: teams that want to integrate WPT directly into their CI or commit-queue systems should investigate setting up a private WPT server and hardware&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/#programmatic&quot;&gt;Scripted Lighthouse&lt;/a&gt;: not ready for a full WPT instance? Scripting Lighthouse can help your CI automate analysis of your site and catch regressions&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tkadlec/grunt-perfbudget&quot;&gt;&lt;code&gt;grunt-perfbudget&lt;/code&gt;&lt;/a&gt; is an even-easier, automated WPT testing for your CI. Use it!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://speedcurve.com/&quot;&gt;Speedcurve&lt;/a&gt; and &lt;a href=&quot;https://calibreapp.com/&quot;&gt;Calibre&lt;/a&gt;: these hosted services automate tracking performance over time, delivering an outstanding real-world gut-check&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webpack.js.org/configuration/performance/&quot;&gt;Webpack Performance Budgets&lt;/a&gt;: for teams using webpack in their build steps, enabling this configuration can provide great development-time warning for resources that exceed budgets.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/siddharthkp/bundlesize&quot;&gt;bundlesize&lt;/a&gt; and &lt;a href=&quot;https://github.com/GoogleChromeLabs/pr-bot&quot;&gt;pr-bot&lt;/a&gt; let you set per-script budgets which can be automatically enforced as part of your pull-request process. Recommended!&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Success in combating bloat often means &lt;em&gt;turning warnings into hard errors&lt;/em&gt;. Teams with CI or commit-queue systems should strongly consider disallowing commits that break the (performance) bank.&lt;/p&gt;
&lt;p&gt;For teams starting fresh, my &lt;em&gt;strong&lt;/em&gt; recommendation is to start with a stack that embeds strong opinions about app structure, code splitting, and build targets. The best of those today are:&lt;/p&gt;
&lt;p&gt;Whatever tools your team chooses, a budget is essential. Without one, even the most advanced, “lightweight” frameworks can easily create bloated, unusable apps. Starting from the global baseline and only increasing the budget based on hard numbers is the best way I know of to ensure your project lands well for everyone.&lt;/p&gt;
&lt;h2&gt;Endnotes&lt;/h2&gt;
&lt;p&gt;In the interest of time and space, discussion of future-friendly architectures will have to wait for another post. The curious can dig into &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;Service Workers&lt;/a&gt;, &lt;a href=&quot;https://developers.google.com/web/updates/2017/02/navigation-preload&quot;&gt;Navigation Preload&lt;/a&gt;, and &lt;a href=&quot;https://developers.google.com/web/updates/2016/06/sw-readablestreams&quot;&gt;Streams&lt;/a&gt;. Their powers combined are going to fundamentally transform the optimal page-load for 2018 and beyond.&lt;/p&gt;
&lt;p&gt;Lastly, thanks to everyone who reviewed early drafts of this post, including (but not limited to): &lt;a href=&quot;https://twitter.com/vinamratas&quot;&gt;Vinamrata Singal&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/Paul_Kinlan&quot;&gt;Paul Kinlan&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/poshaughnessy&quot;&gt;Peter O’Shaughnessy&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/addyosmani&quot;&gt;Addy Osmani&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/graynorton&quot;&gt;Gray Norton&lt;/a&gt;. Hopefully their valiant attempts to direct this article away from error were not overcome by my talent in adding it.&lt;/p&gt;
</description>
<pubDate>Fri, 27 Oct 2017 23:26:21 +0000</pubDate>
<dc:creator>josephscott</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://infrequently.org/2017/10/can-you-afford-it-real-world-web-performance-budgets/</dc:identifier>
</item>
</channel>
</rss>