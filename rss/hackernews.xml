<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>John McCain has died</title>
<link>https://www.nytimes.com/2018/08/25/obituaries/john-mccain-dead.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2018/08/25/obituaries/john-mccain-dead.html</guid>
<description>&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;(Two Navy destroyers were named McCain, for the senator’s father and grandfather, the first father-and-son full admirals in American naval history.)&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Whipsawed by family relocations, young John attended some 20 schools before finally settling into Episcopal High School, an all-white, all-boys boarding school in Alexandria, Va., in the fall of 1951 for his last three years of secondary education. The school, with an all-male faculty and enrollments drawn mostly from upper-crust families of the Old South, required jackets and ties for classes.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;But the scion of one of the Navy’s most illustrious families was defiant and unruly. He mocked the dress code by wearing dirty bluejeans. His shoes were held together with tape, and his coat looked like a reject from the Salvation Army. He was cocky and combative, easily provoked and ready to fight anyone. Classmates called him McNasty. Most gave him a wide berth.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;“He cultivated the image,” Robert Timberg wrote in a biography, “John McCain: An American Odyssey” (1995). “The Episcopal yearbook pictures him in a trench coat, collar up, cigarette dangling Bogey-style from his lips. That pose, if hardly the impression Episcopal sought to project, at least had a fashionable world-weary style to it.”&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;John and a few friends often sneaked off campus at night to patronize bars and burlesque houses in Washington. He joined the wrestling team — a 127-pound dynamo, he once pinned an opponent in 37 seconds, a school record — and the junior varsity football team, as a linebacker and offensive guard. His grades were abysmal, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/05/03/books/review/john-mccain-by-the-book.html&quot; title=&quot;&quot;&gt;except in literature and history, his favorite subjects.&lt;/a&gt; He graduated in 1954.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;That summer, he followed his father and grandfather into the United States Naval Academy in Annapolis, Md. He resisted the discipline. His grades were poor. He stood up to upperclassmen, broke rules and piled up demerits, though never enough to warrant expulsion. But he became a ferocious boxer, a magnet for attractive young women and one of the most popular midshipmen in his class.&lt;/p&gt;
&lt;h2 class=&quot;css-1ljmzo6 eqpy7av0&quot;&gt;In the Cockpit&lt;/h2&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Mr. McCain possessed the rugged independence of a natural leader. It came out at parties and in carousing with friends. Caught by the Shore Patrol at an off-limits bar, he led a carload of drinking buddies in a daring escape. “Being on liberty with John McCain was like being in a train wreck,” one recalled. In 1958, he graduated 894th in his class, fifth from the bottom.&lt;/p&gt;
</description>
<pubDate>Sun, 26 Aug 2018 00:25:14 +0000</pubDate>
<dc:creator>aaronbrethorst</dc:creator>
<og:url>https://www.nytimes.com/2018/08/25/obituaries/john-mccain-dead.html</og:url>
<og:type>article</og:type>
<og:title>John McCain, War Hero, Senator, Presidential Contender, Dies at 81</og:title>
<og:image>https://static01.nyt.com/images/2018/08/26/reader-center/26mccain-obit-p1/26mccain-obit-p1-facebookJumbo.jpg</og:image>
<og:description>A naval aviator who endured torture in Vietnam, Mr. McCain rose to the heights of power in Washington until cancer felled him.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2018/08/25/obituaries/john-mccain-dead.html</dc:identifier>
</item>
<item>
<title>Elm 0.19 Broke Us</title>
<link>https://dev.to/kspeakman/elm-019-broke-us--khn</link>
<guid isPermaLink="true" >https://dev.to/kspeakman/elm-019-broke-us--khn</guid>
<description>&lt;p&gt;Elm 0.19 was released yesterday. There were a significant number of breaking changes at every level: configuration, tooling, library, language. But those are not what this post is primarily about. For my team, this release broke our hearts.&lt;/p&gt;
&lt;p&gt;Two changes that placed the proverbial &quot;straw that broke the camel's back&quot;: Removal of custom operators and native modules. At first I only saw the removal of custom operators, and I posted my reaction to that &lt;a href=&quot;https://gist.github.com/evancz/769bba8abb9ddc3bf81d69fa80cc76b1#gistcomment-2685482&quot;&gt;here&lt;/a&gt;. The removal of native modules was not mentioned in the &lt;a href=&quot;https://github.com/elm/compiler/blob/master/upgrade-docs/0.19.md&quot;&gt;0.19 release notes&lt;/a&gt; so I didn't find out about it until today. I just happened to think of it, and a search turned up &lt;a href=&quot;https://discourse.elm-lang.org/t/native-code-in-0-19/826&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The post on native modules was back in March, so how did I not know about it?&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Community&lt;/h2&gt;
&lt;p&gt;I disconnected from participating in the Elm community a little while back. I didn't say much about it at the time, but I'll share the reasons. I love the Elm platform and use it, but decided that the way the community is managed is too frustrating. The tone is firmly set by the way the Elm Github issues are managed. Many of them are locked to prevent disagreeable feedback, or because they are personal items only for the blessed few contributors, even though they are in public. If you post an issue, you are likely to get smacked on the hand for not doing things &quot;properly&quot;. Properly means a rigorous SCCE for bugs, or participating in the gladiator arena of public forums for ideas/requests/suggestions, or you can forget both of those things if you went the extra, extra miles to be trusted as a contributor. I say gladiator arena, but &lt;strong&gt;the Elm community is really very nice in general&lt;/strong&gt;, especially for helping newcomers. However there are more than a few people who have their rulers out and ready to smack that hand to enforce whatever Evan (the creator of Elm) has said or not said. So chances are high that posting &quot;ideas&quot; or &quot;feedback&quot; on the forum will result in being chided. This, in turn, justifies that there was no &quot;agreement&quot; on your post among the community so it can be ignored. So the &quot;go post on the forum first&quot; rule is an effective way to ignore feedback.&lt;/p&gt;
&lt;p&gt;Apparently since Elm forums have moved to (edit: Reddit and) Discourse, threads there can be locked too. When mods know Evan doesn't want to hear your disagreement on a particular issue, they may &lt;a href=&quot;https://discourse.elm-lang.org/t/elm-0-19-released-what-has-changed-regarding-native-event-modules/1670&quot;&gt;preemptively lock&lt;/a&gt; posts where it might surface. In the end, it feels like the D in BDFL is taken a little too seriously over there. So I appreciated the product but mostly stayed away from the community, and didn't happen to catch the posts telegraphing changes.&lt;/p&gt;
&lt;p&gt;To be fair, I did have a bad experience myself, and have fault in that. But I have observed this pattern of unwelcomeness in Elm's old github and google group many times as an onlooker. And it isn't this way in other projects I've worked with.&lt;/p&gt;
&lt;h2&gt;Control&lt;/h2&gt;
&lt;p&gt;The removal of custom operators was ostensibly for the good of Elm. However, in the post explaining the reasoning behind their removal, an estimated 5% of users have them. And several of the reasons for using them are in common with other languages (task chaining, parsing). In the end, specific custom operators were blessed by Evan and were allowed to remain as exceptions to the rule. But whatever ordinary Elm users think is a valid custom operator for their use cases is &quot;bad&quot; for Elm. &lt;em&gt;Okay...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Theoretically I can still inject native modules through monkey patching in 0.19. (Javascript, right!) However with dead code elimination, monkey patching could be a bit difficult unless you turn off optimizations. But the real kicker is that native modules are still there. They are just reserved for a few Elm contributors only. The rest of us should not have access to this expert feature. Apparently the 40 total lines of native code that I use will completely break the Elm community. Even though there is no other reasonable way to do what I need. &lt;em&gt;Okay...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Minor but indicative: Evan has posted many times telling users to change the way they talk or think about Elm. (Fair point: he's nice about it and there are valid points. But still... indicative.) Examples: Don't use the word Components. Don't say &quot;native&quot;; say &quot;kernel&quot; instead. Union types should now be called Custom Types. But don't you dare respond to one of his posts -- there is always a closing section instructing you of the only few acceptable replies or to just not reply at all. &lt;em&gt;Okay...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Considering all of the above, a picture is forming for us: we can expect to be overbearingly micromanaged as Elm users. And feedback (well, disagreement) is not welcome or considered even when it is decisive and voluminous, like on native modules. Evan decides he just doesn't like something he sees Elm users doing (even if it has credibility from similar languages, like custom operators), it gets disabled in the next release. My way or the highway. Despite all the amazing things Elm has been to us, that's &lt;em&gt;intense&lt;/em&gt; behavior for a toolchain. And not really a situation my team wants to be in.&lt;/p&gt;
&lt;h2&gt;What now?&lt;/h2&gt;
&lt;p&gt;The way I see it, we have a few options.&lt;/p&gt;
&lt;h3&gt;Keep using 0.18&lt;/h3&gt;
&lt;p&gt;I have not had any major issues with 0.18. We could avoid the broken things that have been pointed out in the changelog (like Arrays). However, this is not a long term strategy. It seems unlikely that 0.18 will ever see another bugfix. Old versions of tools (like Create Elm App) eventually stop being maintained. Meanwhile Computer Science and the web advances on.&lt;/p&gt;
&lt;h3&gt;Monkey patch 0.19&lt;/h3&gt;
&lt;p&gt;Because of the dead code elimination, putting the formerly &quot;native&quot; code in through monkey patching has some unknowns. But the deeper issue is that by moving to 0.19 we are still in a place of feeling unstable with the future of our toolchain.&lt;/p&gt;
&lt;h3&gt;Wait for an Elm fork&lt;/h3&gt;
&lt;p&gt;Lots of tree names are probably still available (i.e. acacia, poplar, etc). Unfortunately we do not have the resources to maintain a fork. But it seems likely that somebody will draw similar conclusions to us and be in a place where they want to create one. Even then, this path has a lot of unknowns.&lt;/p&gt;
&lt;h3&gt;Wait for Elm to solidify&lt;/h3&gt;
&lt;p&gt;Most projects reach a phase where they solidify. Meaning there is some effort to maintain backward compatibility. If Elm decides to do this at some point, we could evaluate where the latest version is. Maybe by then there legitimately won't be a need to have the freedoms which were taken away, so it will be a moot issue. However, probably as long as Encoders and Decoders are the only official way to deal with JSON, we will need native code. 20 lines of native code saves us hundreds of lines of encoders and decoders.&lt;/p&gt;
&lt;h3&gt;Switch to something else&lt;/h3&gt;
&lt;p&gt;The only other Model-View-Update platform I'm aware of is Fable-Elmish. It uses F#, which we already use for APIs anyway. The unfortunate bit about that is that F# is not a pure language. So it takes discipline to write pure functions. Whereas Elm has been taking purity too far with some of these recent changes, F# is not quite far enough IMO for the front end. But F# is great for APIs since they are about integrating external systems (e.g. UI, database, email, files, etc). F# would be harder to use there if it had a lot of overhead to perform side effects. &lt;em&gt;Striking the right balance for the use case is important.&lt;/em&gt; Anyway, it is still an option on the table.&lt;/p&gt;
&lt;p&gt;There could also arise an alternative MVU platform at some point. I believe ClojureScript has a library which works similar to MVU. I don't really want to go back to a component-based system. (Yes, pure function MVU is that good.)&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The team has all agreed that sticking with 0.18 is the best choice for us right now. We have some apps coming up that we will create with 0.18, ignoring 0.19. We will experiment with Fable. We will see if another MVU style platform is around. Eventually 0.18 will start to rot and we will need to switch to something else going forward.&lt;/p&gt;
&lt;p&gt;We find this situation really disheartening. We love Elm and never wanted to use anything else. But we have begun to feel that our relationship with Elm is unstable. 💔&lt;/p&gt;
</description>
<pubDate>Sat, 25 Aug 2018 20:21:15 +0000</pubDate>
<dc:creator>maxhallinan</dc:creator>
<og:type>article</og:type>
<og:url>https://dev.to/kspeakman/elm-019-broke-us--khn</og:url>
<og:title>Elm 0.19 Broke Us 💔</og:title>
<og:description> Elm 0.19 was released yesterday. There were a significant number of breaking ch...</og:description>
<og:image>https://res.cloudinary.com/practicaldev/image/fetch/s--pqsebgvj--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://cl.ly/2a8c049fbc5e/Image%25202018-08-23%2520at%25204.07.32%2520PM.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://dev.to/kspeakman/elm-019-broke-us--khn</dc:identifier>
</item>
<item>
<title>Money Really Does Lead to a More Satisfying Life</title>
<link>https://www.nytimes.com/2018/08/24/business/money-satisfaction-lottery-study.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2018/08/24/business/money-satisfaction-lottery-study.html</guid>
<description>&lt;div readability=&quot;35.068500539374&quot;&gt;
&lt;div class=&quot;css-1h6whtw&quot; readability=&quot;21.307443365696&quot;&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;New research suggests that more money really does lead to a more satisfying life. Surveys of thousands of Swedish lottery winners have provided persuasive evidence of this truth.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Lottery winners said they were substantially more satisfied with their lives than lottery losers. And those who won prizes worth hundreds of thousands of dollars reported being more satisfied than winners of mere tens of thousands.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;These effects are remarkably durable. They were still evident up to two decades after a big win. (The researchers lacked the data to trace out even longer-term consequences.)&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;The findings appear in a research report, “&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.ifn.se/storage/ma/610d56a6f5a94a7596d54551e333b68f/749eaac5ac3e4de7bf6374d23c2c0ed2/pdf/6B4806B539C9DE75172BADE06A7B6E3806800315/Wp1220.pdf&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Long-Run Effects of Lottery Wealth on Psychological Well-Being&lt;/a&gt;,” that has generated a lot of buzz among economists over the summer. The working paper, by &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://sites.google.com/site/eriklindqvistsse/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Erik Lindqvist&lt;/a&gt; from the Stockholm School of Economics, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://perseus.iies.su.se/~rob/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Robert Ostling&lt;/a&gt; from Stockholm University and &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://sites.google.com/a/nyu.edu/dac12/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;David Cesarini&lt;/a&gt; from New York University.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;&lt;div readability=&quot;41.442938209332&quot;&gt;
&lt;div class=&quot;css-1h6whtw&quot; readability=&quot;30.486759142497&quot;&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;It is certain to feed a long-running debate about the role that personal finances play in shaping subjective well-being.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Many previous analyses — &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://users.nber.org/~jwolfers/papers/NewStylizedFacts(Emotion).pdf&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;including&lt;/a&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://users.nber.org/~jwolfers/papers/Satiation(AER).pdf&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;several&lt;/a&gt; that I have conducted with my partner, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://users.nber.org/~bstevens/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Betsey Stevenson&lt;/a&gt;, a fellow University of Michigan economist — have &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://freakonomics.com/2008/04/22/the-economics-of-happiness-part-4-are-rich-people-happier-than-poor-people/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;documented&lt;/a&gt; that people with higher incomes tend to report higher levels of life satisfaction. The relationship between income and satisfaction is &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://users.nber.org/~jwolfers/papers/EasterlinParadox.pdf&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;remarkably similar&lt;/a&gt; across dozens of countries, suggesting that findings about Sweden likely apply to the United States.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Those &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2008/04/16/business/16leonhardt.html&quot; title=&quot;&quot;&gt;earlier studies&lt;/a&gt; merely documented a correlation. What’s new here is the evidence that higher income is causing higher life satisfaction.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;This research is able to reliably disentangle causation and correlation because a lottery effectively provides a randomized control trial. As in the trial of a new drug, those who received the treatment — in this case a big dose of money, courtesy of a lottery ticket — were compared both with those who received a smaller dose by winning a minor prize and with statistically matched individuals of the same age and sex who entered the lottery and didn’t win.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;In a drug trial — as in a lottery — whether you get the big dose, a smaller dose or no dose is determined purely by chance. Scientists find this sort of trial to be persuasive because the random assignment ensures that lottery winnings are the only factor driving systematic differences between those who receive the treatment and those in the control group. It therefore isolates the effect of extra money in driving satisfaction.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;&lt;div readability=&quot;52.013354917038&quot;&gt;
&lt;div class=&quot;css-1h6whtw&quot; readability=&quot;50.050586806961&quot;&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;The authors persuaded the Swedish statistical authorities to try to survey every winner of three of the country’s major lotteries over more than a decade, and then used government records to track other aspects of the winners’ lives. The researchers examined the same indicators for Swedes who had entered but lost the same lotteries, or who won minor prizes.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Their surveys took several approaches to measuring subjective well-being. The measure most robustly linked to income asks people how satisfied they are with their lives as a whole. By contrast, responses to a question asking about happiness showed less of a connection to lottery winnings, and these effects could not be reliably distinguished from the effects of chance. Social scientists widely view questions about life satisfaction as eliciting a broad-based evaluation of one’s life while questions about happiness yield responses more related to current moods or feelings.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;A further set of questions probed the mental health of respondents, finding that greater income had no effect, although in &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://academic.oup.com/qje/article/131/2/687/2606947&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;related work&lt;/a&gt;, the same authors find that lottery winners are prescribed fewer mental health drugs. I interpret this as suggestive but not conclusive evidence that wealth improves one’s mental health.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Other studies by these authors — sometimes with other scholars — have tracked the economic lives of these lottery winners to further explore the consequences of wealth. &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://academic.oup.com/qje/article/131/2/687/2606947&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Contrary&lt;/a&gt; to popular stereotypes, those who win hundreds of thousands of dollars don’t blow most of their winnings at once. Instead, they slowly spend their newfound wealth over many years. Many don’t quit their jobs, but they do tend to &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.aeaweb.org/articles?id=10.1257/aer.20151589&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;work a bit less&lt;/a&gt; and retire a bit earlier.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Surprisingly, the increase in wealth caused by winning the lottery has &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://academic.oup.com/qje/article/131/2/687/2606947&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;few effects&lt;/a&gt; on the physical health of the winners or their children. It seems possible that family wealth might have quite different effects in a less egalitarian society, like the United States.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;These results provide strong evidence in support of the standard economic view that money increases well-being, albeit not in an entirely uniform manner. It runs counter to the view championed by many psychologists that people largely adapt to their circumstances — including their financial situation.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;In an email, Mr. Cesarini characterized that perspective as the “widespread misperception that science has proved that winning the lottery often makes people miserable.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;&lt;div readability=&quot;45.588830829523&quot;&gt;
&lt;div class=&quot;css-1h6whtw&quot; readability=&quot;37.255388634879&quot;&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;That misperception most likely comes from an earlier generation of lottery studies. Perhaps the &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.researchgate.net/profile/Ronnie_Janoff-Bulman/publication/22451114_Lottery_Winners_and_Accident_Victims_Is_Happiness_Relative/links/54244b8d0cf26120b7a735b4.pdf&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;most famous&lt;/a&gt; of them is a 1978 study, “Lottery Winners and Accident Victims: Is Happiness Relative?” With the benefit of hindsight, that study appears to illustrate changing standards of empirical research more than any truths about well-being.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;It compared the subjective well-being of 22 winners of the Illinois State Lottery with a control group of 22 people. The lottery winners rated themselves as happier after winning their prizes, but because the sample size was so small, the researchers concluded that this might reflect the influence of chance and failed to note that these data were consistent with the idea that the lottery winners were substantially happier. The problem with small samples is that it’s hard to be sure of anything.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;That same study also surveyed 29 paraplegic accident victims, finding them to be less happy than other people. Yet &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://blog.ted.com/ten-years-later-dan-gilbert-on-life-after-the-surprising-science-of-happiness/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;many&lt;/a&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.youtube.com/watch?v=ABBRKYdQa7E&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;popular&lt;/a&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://www.aish.com/sp/pg/From-Millionaires-to-Paraplegics-The-Secret-of-Happiness.html&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;accounts&lt;/a&gt; of this study describe it as if it supported the opposite proposition, that people adapt to personal tragedies.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;I’ve seen this pattern before, as a counterintuitive finding captures the public’s imagination, taking on a life of its own. In time, the facts become too interesting to check.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;But eventually, science corrects itself. After 40 years, three determined economists, thousands of lottery winners and reams of detailed data have revealed a more reliable but less romantic truth: Money really does help people lead a more satisfying life.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;&lt;div readability=&quot;28.593272171254&quot;&gt;

&lt;div class=&quot;css-k8fkhk&quot; readability=&quot;7.1384615384615&quot;&gt;
&lt;p&gt;Justin Wolfers is a professor of economics and public policy at the University of Michigan. Follow him on Twitter: &lt;a href=&quot;https://twitter.com/JustinWolfers?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor&quot;&gt;@justinwolfers&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;css-3glrhn&quot; readability=&quot;8.0612244897959&quot;&gt;A version of this article appears in print on , on Page BU5 of the New York edition with the headline: Winning the Lottery Beats Losing, a Study Finds&lt;span&gt;. &lt;a href=&quot;http://www.nytreprints.com/&quot;&gt;Order Reprints&lt;/a&gt; | &lt;a href=&quot;http://www.nytimes.com/pages/todayspaper/index.html&quot;&gt;Today’s Paper&lt;/a&gt; | &lt;a href=&quot;https://www.nytimes.com/subscriptions/Multiproduct/lp8HYKU.html?campaignId=48JQY&quot;&gt;Subscribe&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;

&lt;/div&gt;</description>
<pubDate>Sat, 25 Aug 2018 16:42:54 +0000</pubDate>
<dc:creator>mpweiher</dc:creator>
<og:url>https://www.nytimes.com/2018/08/24/business/money-satisfaction-lottery-study.html</og:url>
<og:type>article</og:type>
<og:title>Money Really Does Lead to a More Satisfying Life</og:title>
<og:image>https://static01.nyt.com/images/2018/08/26/business/26VIEW.illo/26VIEW.illo-facebookJumbo.jpg</og:image>
<og:description>A study of thousands of lottery winners reveals that greater wealth improves life satisfaction, and that these effects are highly durable.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2018/08/24/business/money-satisfaction-lottery-study.html</dc:identifier>
</item>
<item>
<title>Skim reading is the new normal. The effect on society is profound</title>
<link>https://www.theguardian.com/commentisfree/2018/aug/25/skim-reading-new-normal-maryanne-wolf</link>
<guid isPermaLink="true" >https://www.theguardian.com/commentisfree/2018/aug/25/skim-reading-new-normal-maryanne-wolf</guid>
<description>&lt;p&gt;&lt;span class=&quot;drop-cap&quot;&gt;&lt;span class=&quot;drop-cap__inner&quot;&gt;L&lt;/span&gt;&lt;/span&gt;ook around on your next plane trip. The iPad is the new pacifier for babies and toddlers. Younger school-aged children read stories on smartphones; older boys don’t read at all, but hunch over video games. Parents and other passengers read on Kindles or skim a flotilla of email and news feeds. Unbeknownst to most of us, an invisible, game-changing transformation links everyone in this picture: the neuronal circuit that underlies the brain’s ability to read is subtly, rapidly changing - a change with implications for everyone from the pre-reading toddler to the expert adult.&lt;/p&gt;
&lt;p&gt;As work in neurosciences indicates, the acquisition of literacy necessitated a new circuit in our species’ brain more than 6,000 years ago. That circuit evolved from a very simple mechanism for decoding basic information, like the number of goats in one’s herd, to the present, highly elaborated reading brain. My research depicts how the present reading brain enables the development of some of our most important intellectual and affective processes: internalized knowledge, analogical reasoning, and inference; perspective-taking and empathy; critical analysis and the generation of insight. Research surfacing in many parts of the world now cautions that each of these essential “deep reading” processes may be under threat as we move into digital-based modes of reading.&lt;/p&gt;

&lt;div class=&quot;u-responsive-ratio&quot;&gt;&lt;img class=&quot;gu-image&quot; itemprop=&quot;contentUrl&quot; alt=&quot;mobile&quot; src=&quot;https://i.guim.co.uk/img/media/78be9dbc908e1da2dfb0ff9323ab30bfabd76e6b/0_0_5100_3060/master/5100.jpg?width=300&amp;amp;quality=85&amp;amp;auto=format&amp;amp;usm=12&amp;amp;fit=max&amp;amp;s=43c2ef0e2286b4187753d92e4823aa42&quot;/&gt;&lt;/div&gt;

There’s an old rule in neuroscience that does not alter with age: use it or lose it Photograph: Sjale/Getty Images/iStockphoto
&lt;p&gt;This is not a simple, binary issue of print vs digital reading and technological innovation. As MIT scholar Sherry Turkle has written, we do not err as a society when we innovate, but when we ignore what we disrupt or diminish while innovating. In this hinge moment between print and digital cultures, society needs to confront what is diminishing in the expert reading circuit, what our children and older students are not developing, and what we can do about it.&lt;/p&gt;
&lt;p&gt;We know from research that the reading circuit is not given to human beings through a genetic blueprint like vision or language; it needs an environment to develop. Further, it will adapt to that environment’s requirements – from different writing systems to the characteristics of whatever medium is used. If the dominant medium advantages processes that are fast, multi-task oriented and well-suited for large volumes of information, like the current digital medium, so will the reading circuit. As UCLA psychologist Patricia Greenfield writes, the result is that less attention and time will be allocated to slower, time-demanding deep reading processes, like inference, critical analysis and empathy, all of which are indispensable to learning at any age.&lt;/p&gt;
&lt;aside class=&quot;element element-pullquote element--supporting&quot;&gt;&lt;blockquote&gt;
&lt;p class=&quot;pullquote-paragraph&quot;&gt;The negative effects of screen reading can appear as early as fourth and fifth grade&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/aside&gt;&lt;p&gt;Increasing reports from educators and from researchers in psychology and the humanities bear this out. English literature scholar and teacher Mark Edmundson describes how many college students actively avoid the classic literature of the 19&lt;sup&gt;th&lt;/sup&gt; and 20&lt;sup&gt;th&lt;/sup&gt; centuries because they no longer have the patience to read longer, denser, more difficult texts. We should be less concerned with students’ “cognitive impatience,” however, than by what may underlie it: the potential inability of large numbers of students to read with a level of critical analysis sufficient to comprehend the complexity of thought and argument found in more demanding texts, whether in literature and science in college, or in wills, contracts and the deliberately confusing public referendum questions citizens encounter in the voting booth.&lt;/p&gt;
&lt;p&gt;Multiple studies show that digital screen use may be causing a variety of troubling downstream effects on reading comprehension in older high school and college students. In Stavanger, Norway, psychologist Anne Mangen and her colleagues studied how high school students comprehend the same material in different mediums. Mangen’s group asked subjects questions about a short story whose plot had universal student appeal (a lust-filled, love story); half of the students read Jenny, Mon Amour&lt;em&gt; &lt;/em&gt;on a Kindle, the other half in paperback. Results indicated that students who read on print were superior in their comprehension to screen-reading peers, particularly in their ability to sequence detail and reconstruct the plot in chronological order.&lt;/p&gt;
&lt;p&gt;Ziming Liu from San Jose State University has conducted a series of studies which indicate that the “new norm” in reading is &lt;em&gt;skimming&lt;/em&gt;, with word-spotting and browsing through the text. Many readers now use an F or Z pattern when reading in which they sample the first line and then word-spot through the rest of the text. When the reading brain skims like this, it reduces time allocated to deep reading processes. In other words, we don’t have time to grasp complexity, to understand another’s feelings, to perceive beauty, and to create thoughts of the reader’s own.&lt;/p&gt;

&lt;div class=&quot;u-responsive-ratio&quot;&gt;&lt;img class=&quot;gu-image&quot; itemprop=&quot;contentUrl&quot; alt=&quot;reading&quot; src=&quot;https://i.guim.co.uk/img/media/0598da09e3ebe592d48f794d8359c1b92b7321d4/0_192_5760_3456/master/5760.jpg?width=300&amp;amp;quality=85&amp;amp;auto=format&amp;amp;usm=12&amp;amp;fit=max&amp;amp;s=6df666eae1458a5ae6faff55167ac815&quot;/&gt;&lt;/div&gt;

‘Multiple studies show that digital screen use may be causing a variety of troubling downstream effects on reading.’ Photograph: Westend61/Getty Images/Westend61
&lt;p&gt;Karin Littau and Andrew Piper have noted another dimension: physicality. Piper, Littau and Anne Mangen’s group emphasize that the sense of touch in print reading adds an important redundancy to information – a kind of “geometry” to words, and a spatial “thereness” for text. As Piper notes, human beings need a knowledge of where they are in time and space that allows them to return to things and learn from re-examination – what he calls the “technology of recurrence”. The importance of recurrence for both young and older readers involves the ability to go back, to check and evaluate one’s understanding of a text. The question, then, is what happens to comprehension when our youth skim on a screen whose lack of spatial thereness discourages “looking back.”&lt;/p&gt;
&lt;p&gt;US media researchers Lisa Guernsey and Michael Levine, American University’s linguist Naomi Baron, and cognitive scientist Tami Katzir from Haifa University have examined the effects of different information mediums, particularly on the young. Katzir’s research has found that the negative effects of screen reading can appear as early as fourth and fifth grade - with implications not only for comprehension, but also on the growth of empathy.&lt;/p&gt;
&lt;aside class=&quot;element element-pullquote element--supporting&quot;&gt;&lt;blockquote&gt;
&lt;p class=&quot;pullquote-paragraph&quot;&gt;We need to cultivate a new kind of brain&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/aside&gt;&lt;p&gt;The possibility that critical analysis, empathy and other deep reading processes could become the unintended “collateral damage” of our digital culture is not a simple binary issue about print vs digital reading. It is about how we all have begun to read on any medium and how that changes not only what we read, but also the purposes for why we read. Nor is it only about the young. The subtle atrophy of critical analysis and empathy affects us all. It affects our ability to navigate a constant bombardment of information. It incentivizes a retreat to the most familiar silos of unchecked information, which require and receive no analysis, leaving us susceptible to false information and demagoguery.&lt;/p&gt;
&lt;aside class=&quot;element element-rich-link element--thumbnail element-rich-link--not-upgraded&quot; data-component=&quot;rich-link&quot; data-link-name=&quot;rich-link-1 | 1&quot;&gt;
&lt;/aside&gt;&lt;p&gt;There’s an old rule in neuroscience that does not alter with age: use it or lose it. It is a very hopeful principle when applied to critical thought in the reading brain because it implies&lt;em&gt; choice&lt;/em&gt;. The story of the changing reading brain is hardly finished. We possess both the science and the technology to identify and redress the changes in how we read before they become entrenched. If we work to understand exactly what we will lose, alongside the extraordinary new capacities that the digital world has brought us, there is as much reason for excitement as caution.&lt;/p&gt;
&lt;p&gt;We need to cultivate a new kind of brain: a “bi-literate” reading brain capable of the deepest forms of thought in either digital or traditional mediums&lt;em&gt;.&lt;/em&gt; A great deal hangs on it: the ability of citizens in a vibrant democracy to try on other perspectives and discern truth; the capacity of our children and grandchildren to appreciate and create beauty; and the ability in ourselves to go &lt;em&gt;beyond&lt;/em&gt; our present glut of information to reach the knowledge and wisdom necessary to sustain a good society.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;Maryanne Wolf is the author of Reader, Come Home: The Reading Brain in a Digital World&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
<pubDate>Sat, 25 Aug 2018 16:29:40 +0000</pubDate>
<dc:creator>pmoriarty</dc:creator>
<og:url>http://www.theguardian.com/commentisfree/2018/aug/25/skim-reading-new-normal-maryanne-wolf</og:url>
<og:description>When the reading brain skims texts, we don’t have time to grasp complexity, to understand another’s feelings or to perceive beauty. We need a new literacy for the digital age writes Maryanne Wolf, author of Reader, Come Home</og:description>
<og:image>https://i.guim.co.uk/img/media/f51170cfbfdcb69dd0adf127db5aa79dbe480751/0_0_6667_4000/master/6667.jpg?width=1200&amp;height=630&amp;quality=85&amp;auto=format&amp;usm=12&amp;fit=crop&amp;crop=faces%2Centropy&amp;bm=normal&amp;ba=bottom%2Cleft&amp;blend64=aHR0cHM6Ly9hc3NldHMuZ3VpbS5jby51ay9pbWFnZXMvb3ZlcmxheXMvNTM4OGZjODViNTQ0N2E4M2NmMWNlMTg5YTVhMjE1NzMvdGctb3BpbmlvbnMucG5n&amp;s=3ffe45b745221af27b8dfb7c123ba429</og:image>
<og:type>article</og:type>
<og:title>Skim reading is the new normal. The effect on society is profound | Maryanne Wolf</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theguardian.com/commentisfree/2018/aug/25/skim-reading-new-normal-maryanne-wolf</dc:identifier>
</item>
<item>
<title>Set Theory and Algebra in CS: Introduction to Mathematical Modeling (2013) [pdf]</title>
<link>https://pdfs.semanticscholar.org/d106/6b6de601c1d7d5af25af3f7091bc7ad3ad51.pdf</link>
<guid isPermaLink="true" >https://pdfs.semanticscholar.org/d106/6b6de601c1d7d5af25af3f7091bc7ad3ad51.pdf</guid>
<description>&lt;a href=&quot;https://pdfs.semanticscholar.org/d106/6b6de601c1d7d5af25af3f7091bc7ad3ad51.pdf&quot;&gt;Download PDF&lt;/a&gt;</description>
<pubDate>Sat, 25 Aug 2018 13:38:04 +0000</pubDate>
<dc:creator>lainon</dc:creator>
<og:url>http://www.theguardian.com/commentisfree/2018/aug/25/skim-reading-new-normal-maryanne-wolf</og:url>
<og:description>When the reading brain skims texts, we don’t have time to grasp complexity, to understand another’s feelings or to perceive beauty. We need a new literacy for the digital age writes Maryanne Wolf, author of Reader, Come Home</og:description>
<og:image>https://i.guim.co.uk/img/media/f51170cfbfdcb69dd0adf127db5aa79dbe480751/0_0_6667_4000/master/6667.jpg?width=1200&amp;height=630&amp;quality=85&amp;auto=format&amp;usm=12&amp;fit=crop&amp;crop=faces%2Centropy&amp;bm=normal&amp;ba=bottom%2Cleft&amp;blend64=aHR0cHM6Ly9hc3NldHMuZ3VpbS5jby51ay9pbWFnZXMvb3ZlcmxheXMvNTM4OGZjODViNTQ0N2E4M2NmMWNlMTg5YTVhMjE1NzMvdGctb3BpbmlvbnMucG5n&amp;s=3ffe45b745221af27b8dfb7c123ba429</og:image>
<og:type>article</og:type>
<og:title>Skim reading is the new normal. The effect on society is profound | Maryanne Wolf</og:title>
<dc:language>en</dc:language>
<dc:format>application/pdf</dc:format>
<dc:identifier>https://pdfs.semanticscholar.org/d106/6b6de601c1d7d5af25af3f7091bc7ad3ad51.pdf</dc:identifier>
</item>
<item>
<title>Japan to add millions of new nodes to federated Nextcloud network</title>
<link>https://nextcloud.com/blog/japan-to-add-millions-of-new-nodes-to-federated-nextcloud-network/</link>
<guid isPermaLink="true" >https://nextcloud.com/blog/japan-to-add-millions-of-new-nodes-to-federated-nextcloud-network/</guid>
<description>&lt;h3&gt;Nextcloud, Waffle Computer and NEC Platforms to bring federated file exchange and collaboration to millions of new users in Japan&lt;/h3&gt;
&lt;p&gt;We are excited to announce that through a partnership with &lt;a href=&quot;https://www.necplatforms.co.jp/en/index.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;NEC Platforms, Ltd.&lt;/a&gt; and Waffle Computer, Ltd., millions of routers will be equipped with Nextcloud, bringing secure, federated and private file exchange to their users. The global network of hundreds of thousands of Nextcloud servers, capable of seamlessly exchanging data with each other, will thus be extended by millions of new nodes over the course of several years.&lt;/p&gt;
&lt;h2&gt;Nextcloud Federation&lt;/h2&gt;
&lt;p&gt;With Nextcloud, everyone from home users to large enterprises, hospitals and government agencies can host their own, secure and private Dropbox or Office 365 alternative. Nextcloud offers easy to use web, desktop and mobile interfaces to sync files, share them with others and edit them on-the-go. By keeping data on a trusted server, users know where data is, who has access, and nothing leaks. As most most popular self-hosted file sync and collaboration technology with hundreds of thousands of servers on the web, Nextcloud is used by companies like SIEMENS, institutes like the German Federal government, research organizations like the Max-Planck-institute, financial enterprises like Raiffeisen and many more. Its combined number of users is estimated to be over 25 million globally.&lt;/p&gt;
&lt;p&gt;Nextcloud servers are not alone. The Nextcloud Federation feature enables users from one Nextcloud server to share with users on another server, creating a globally spanning network of private, self-hosted clouds. A federated cloud id, comparable to an email address, enables users to identify one another, while servers also exchange address book data when authorized to do so.&lt;/p&gt;
&lt;h2&gt;Japan joining the Network&lt;/h2&gt;
&lt;p&gt;With the deployment of Nextcloud on the upcoming generation of routers from NEC Platforms, Ltd., the global network of federated Nextclouds will be expanding with millions of nodes, starting in Japan. This marks a significant step for Nextcloud and its users, bringing even greater momentum to the meteoric growth of Nextcloud.&lt;/p&gt;
&lt;p&gt;NEC Platforms, Ltd. (https://www.necplatforms.co.jp/en/company/profile.html), is a subsidiary of NEC Corporation, and is also a leader in Japan broadband access market.&lt;/p&gt;
&lt;p&gt;Waffle Computer, Ltd. is a Nextcloud partner in Japan, dedicated to bringing federated, decentralized computing to users across the globe and connecting major technology partners to make this happen.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We look forward to working with Nextcloud on expanding the file storage and exchange capabilities of our router solutions,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;said Mr. Shinji Nakayama, Chief Manager at the Access-Device Development Division at NEC Platforms,Ltd.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The ability to federate between routers and form a global network enables our users to collaborate with others while staying in control over their data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I believe routers are a great platform to bring self-hosted clouds into the house of millions of users,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;said Frank Karlitschek, founder and managing director of Nextcloud GmbH.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It can be as easy and normal to have your own data at home as it is to own a television or mobile phone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The collaboration with Nextcloud and NEC Platforms is very exciting,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;said Masayuki Note, founder and owner of Waffle Computer, Ltd.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This collaboration can bring millions of users a private cloud solution, establishing a real alternative to centralized cloud providers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Today, Nextcloud &lt;a href=&quot;https://nextcloud.com/blog/nextcloud-14-rc1-announced-with-video-verification-and-signaltelegram-2fa-support-improved-collaboration-and-gdpr-compliance&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;also announced Nextcloud 14&lt;/a&gt; and our &lt;a href=&quot;https://nextcloud.com/blog/introducing-simple-signup-you-can-now-get-started-with-nextcloud-in-2-steps&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Simple Signup program.&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 25 Aug 2018 10:30:37 +0000</pubDate>
<dc:creator>r3bl</dc:creator>
<og:title>Japan to add millions of new nodes to federated Nextcloud network – Nextcloud</og:title>
<og:type>article</og:type>
<og:url>http://nextcloud.com</og:url>
<og:description>Nextcloud is an open source, self-hosted file share and communication platform. Access &amp; sync your files, contacts, calendars &amp; communicate and collaborate across your devices. You decide what happens with your data, where it is and who can access it!</og:description>
<og:image>https://nextcloud.com/media/NEC_Logo.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://nextcloud.com/blog/japan-to-add-millions-of-new-nodes-to-federated-nextcloud-network/</dc:identifier>
</item>
<item>
<title>Centralized Wins. Decentralized Loses</title>
<link>http://highscalability.com/blog/2018/8/22/what-do-you-believe-now-that-you-didnt-five-years-ago-centra.html</link>
<guid isPermaLink="true" >http://highscalability.com/blog/2018/8/22/what-do-you-believe-now-that-you-didnt-five-years-ago-centra.html</guid>
<description>&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://c2.staticflickr.com/2/1887/42391738600_e2cc542e05_o.jpg&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;


&lt;p&gt;Decentralized systems will continue to lose to &lt;a href=&quot;https://news.ycombinator.com/item?id=17695808&quot;&gt;centralized systems&lt;/a&gt; until there's a driver requiring decentralization to deliver a clearly superior consumer experience. Unfortunately, that may not happen for quite some time.&lt;/p&gt;
&lt;p&gt;I say unfortunately because ten years ago, even five years ago, I still believed decentralization would win. Why? For all the idealistic technical reasons I laid out long ago in &lt;a href=&quot;http://highscalability.com/blog/2009/12/16/building-super-scalable-systems-blade-runner-meets-autonomic.html&quot;&gt;Building Super Scalable Systems: Blade Runner Meets Autonomic Computing In The Ambient Cloud&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While the internet and the web are inherently decentralized, mainstream applications built on top do not have to be. Typically, applications today—Facebook, Salesforce, Google, Spotify, etc.—are all centralized.&lt;/p&gt;
&lt;p&gt;That wasn't always the case. In the early days of the internet the internet was protocol driven, decentralized, and often distributed—FTP (1971), Telnet (&amp;lt;1973), FINGER (1971/1977),  TCP/IP (1974), UUCP (late 1970s) NNTP (1986), DNS (1983), SMTP (1982), IRC(1988), HTTP(1990), Tor (mid-1990s), Napster(1999),  XMPP(1999), and &lt;a href=&quot;http://highscalability.com/cdn-cgi/l/email-protection&quot; class=&quot;__cf_email__&quot; data-cfemail=&quot;f0a3b5a4b9b0989f9d95&quot;&gt;[email protected]&lt;/a&gt;(1999).&lt;/p&gt;
&lt;p&gt;We do have &lt;a href=&quot;https://decentralizedweb.net/&quot;&gt;new decentalized services&lt;/a&gt;: Bitcoin(2009), Minecraft(2009), Ethereum(2014), IPFS(2015), Mastadon(2016), &lt;a href=&quot;https://datproject.org&quot;&gt;Dat&lt;/a&gt; (2018), and &lt;a href=&quot;https://joinpeertube.org/&quot;&gt;PeerTube&lt;/a&gt;(2018). We're still waiting on Pied Piper to deliver the &lt;a href=&quot;https://www.youtube.com/watch?v=0dJPY50lpZA&quot;&gt;decentralized internet&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;On an evolutionary timeline decentralized systems are neanderthals; centralized systems are the humans. Neanderthals came first. Humans may have interbred with neanderthals, humans may have even killed off the neanderthals, but there's no doubt humans outlasted the neanderthals.&lt;/p&gt;
&lt;p&gt;The reason why decentralization came first is clear from a picture of the very first &lt;a href=&quot;https://en.wikipedia.org/wiki/DARPA&quot;&gt;ARPA&lt;/a&gt; (Advanced Research Projects Agency) network, which later evolved into the internet we know and sometimes love today:&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://c2.staticflickr.com/2/1815/30040376308_5970842b59_o.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Where Wizards Stay Up Late&lt;/em&gt;&lt;/p&gt;

&lt;div readability=&quot;6&quot;&gt;
&lt;blockquote readability=&quot;8.5&quot;&gt;
&lt;div readability=&quot;12&quot;&gt;
&lt;p&gt;Everyone had a vision of the potential for intercomputer communication, but no one had ever sat down to construct protocols that could actually be used. It wasn’t BBN’s job to worry about that problem. The only promise anyone from BBN had made about the planned-for subnetwork of IMPs was that it would move packets back and forth, and make sure they got to their destination. It was entirely up to the host computer to figure out how to communicate with another host computer or what to do with the messages once it received them. This was called the “host-to-host” protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;-- Where Wizards Stay Up Late&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;All that existed were hosts talking directly to each other over a primitive network. Centralization didn't exist. TCP/IP didn't exist. Nothing we take for granted today existed. &lt;/p&gt;
&lt;p&gt;This fit the design goals. The early internet was all about sharing data:&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;blockquote readability=&quot;16&quot;&gt;
&lt;p&gt;Taylor had been the young director of the office within the Defense Department’s Advanced Research Projects Agency overseeing computer research, and he was the one who had started the ARPANET. The project had embodied the most peaceful intentions—to link computers at scientific laboratories across the country so that researchers might share computer resources.&lt;/p&gt;
&lt;div readability=&quot;15&quot;&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;Building a network as an end in itself wasn’t Taylor’s principal objective. He was trying to solve a problem he had seen grow worse with each round of funding. Researchers were duplicating, and isolating, costly computing resources. Not only were the scientists at each site engaging in more, and more diverse, computer research, but their demands for computer resources were growing faster than Taylor’s budget. Every new project required setting up a new and costly computing operation.&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;And none of the resources or results was easily shared. If the scientists doing graphics in Salt Lake City wanted to use the programs developed by the people at Lincoln Lab, they had to fly to Boston.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;-- Where Wizards Stay Up Late&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;Back in those days of high adventure hosts were far more than mere pets, they were golden temples where crusaders came to worship speaking prayers of code.&lt;/p&gt;
&lt;p&gt;Today, servers aren't even cattle, servers are insects connected over fast networks. Centralization is not only possible now, it's economical, it's practical, it's controlable, it's governable, it's economies of scalable, it's reliable, it's walled gardenable, it's monetizable, it's affordable, it's performance tunable, it's scalable, it's cacheable, it's securable, it's defensible, it's brandable, it's ownable, it's right to be forgetable, it's fast releasable, it's debuggable, it's auditable, it's iterable, it's easier to usable, it's easier to onboardable, it's copyright checkable, it's GDPRable, it's safe for China searchable, it's machine learnable, it's monitorable, it's spam filterable, it's value addable.&lt;/p&gt;
&lt;p&gt;Depending on your point of view, decentralization is few of those things. And many of those &quot;features&quot; are exactly why we like decentralization in the first place. &lt;/p&gt;
&lt;p&gt;What's more, consumers simply do not care. Users use. Only a small percentage have the technical sophistication to understand why they may want to preferentially use decentralized applications for technical reasons. Saying &quot;It's like X, but decentralized&quot;, does not resonate, especially when the services are not as good. We had decentralized Slack way before Slack...yet there's Slack. You know it's bad when GitHub managed to recentralize an inherently distributed system like git. &lt;/p&gt;
&lt;p&gt;There are certainly niche reasons to use decentralized systems, permissionless anonymity being the primary use case. Can you trust the likes of Facebook or Google? History says absolutely not. But most people don't care.&lt;/p&gt;
&lt;p&gt;What might constitute a turning point back to decentralization? I can think of several: &lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Complete deterioration of trust such that avoiding the centralization of power becomes a necessity.&lt;/li&gt;
&lt;li&gt;Radically cheaper cost basis.&lt;/li&gt;
&lt;li&gt;It becomes fashionable.&lt;/li&gt;
&lt;li&gt;The decentralization community manages to create clearly superior applications as convenient and reliable as centralized providers.&lt;/li&gt;
&lt;li&gt;Geographical isolation.&lt;/li&gt;
&lt;li&gt;Neanderthals live alongside humans. Parallel, separate, not worrying about who's equal.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;(1) Seems more possible than I'd like to admit. See &lt;a href=&quot;https://www.buzzfeednews.com/article/mattstoller2/as-democracy-suffers-digital-dictators-are-seizing-power&quot;&gt;China's Digital Dystopia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(2) Still on the horizon. Cloud computing will follow the same downward cost curves as everything else.&lt;/p&gt;
&lt;p&gt;(3) We'll have to get the Kardashians on that.&lt;/p&gt;
&lt;p&gt;(4) Will be difficult. By their very nature iterably improving decentralized applications is like herding cats. It's much easier to add features to centralized applications. Sure, Napster was a great way to share music, but isn't Spotify simply better? Yes, I know, Spotify can shutdown tomorrow and then where are we? I'm with you. But most aren't.&lt;/p&gt;
&lt;p&gt;(5) The problem is the earth is too small. Global centralized applications are buildable today. Something I missed on completely. When we go to space that won't be the case. Applications in the space age will have to redecentralize...at least until the ansible is invented.&lt;/p&gt;
&lt;p&gt;(6) We have genetic material from the neanderthals. We can rebuild them. We have the technology. This time maybe it's enough that neanderthals survive alongside humans, not going extinct, ready for the time when humans need a fresh infusion of genetic material...or when neanderthals become alpha.&lt;/p&gt;

&lt;p&gt;So that's what I believe now that I didn't five years ago. How about you?&lt;/p&gt;

&lt;h2&gt;Related Articles&lt;/h2&gt;

</description>
<pubDate>Sat, 25 Aug 2018 07:25:37 +0000</pubDate>
<dc:creator>ghosthamlet</dc:creator>
<og:title>What do you believe now that you didn't five years ago? Centralized wins. Decentralized loses. - High Scalability -</og:title>
<og:description> Decentralized systems will continue to lose to centralized systems until there's a drive...</og:description>
<og:image>https://c2.staticflickr.com/2/1887/42391738600_e2cc542e05_o.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://highscalability.com/blog/2018/8/22/what-do-you-believe-now-that-you-didnt-five-years-ago-centra.html</dc:identifier>
</item>
<item>
<title>The Future of Notebooks: Lessons from JupyterCon</title>
<link>http://willcrichton.net/notes/lessons-from-jupytercon/</link>
<guid isPermaLink="true" >http://willcrichton.net/notes/lessons-from-jupytercon/</guid>
<description>&lt;p&gt;Will Crichton   —   August 24, 2018&lt;/p&gt;
&lt;p&gt;At JupyterCon, I learned three things: reactive notebooks are the future, Jupyter is the new Bash, and data science is a gateway drug.&lt;/p&gt;
&lt;p&gt;Over the last two days at &lt;a href=&quot;https://conferences.oreilly.com/jupyter/jup-ny&quot;&gt;JupyterCon&lt;/a&gt;, I saw a lot of exciting ideas about the future of Jupyter notebooks. I’ve already written about my own ideas—&lt;a href=&quot;http://willcrichton.net/notes/programming-in-the-debugger/&quot;&gt;Jupyter for debugging&lt;/a&gt;, &lt;a href=&quot;http://willcrichton.net/notes/rapid-prototyping-data-science-jupyter/&quot;&gt;Jupyter for prototyping interactions&lt;/a&gt;—but in this note, I want to highlight the major trends I saw in the JupyterCon presentations.&lt;/p&gt;
&lt;h2 id=&quot;1-reactive-notebooks&quot;&gt;1. Reactive notebooks&lt;/h2&gt;
&lt;p&gt;In the talk &lt;a href=&quot;https://docs.google.com/presentation/d/1n2RlMdmv1p25Xy5thJUhkKGvjtV-dkAIsUXP-AL4ffI/edit#slide=id.g37ce315c78_0_27&quot;&gt;“I don’t like notebooks”&lt;/a&gt;, Joel Grus’ number one (or at least first) complaint about Jupyter is that “notebooks have tons and tons of hidden state that’s easy to screw up and difficult to reason about.” Although Jupyter displays cells in a linear order, they can be executed, edited, and re-executed in any order.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://willcrichton.net/images/assets/jupytercon1.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Two subsequent talks, &lt;a href=&quot;https://conferences.oreilly.com/jupyter/jup-ny/public/schedule/detail/68448&quot;&gt;“Supporting reproducibility in Jupyter through dataflow notebooks”&lt;/a&gt; and &lt;a href=&quot;https://conferences.oreilly.com/jupyter/jup-ny/public/schedule/detail/68344&quot;&gt;“Explorations in reproducible analysis with Nodebook”&lt;/a&gt;, explored new systems that address this problem by turning Jupyter into a reactive programming environment. In reactive programming, the runtime tracks dependencies between cells and knows to re-run a cell when its dependencies change.&lt;/p&gt;
&lt;p&gt;The two systems, &lt;a href=&quot;https://github.com/dataflownb/dfkernel/&quot;&gt;dfkernel&lt;/a&gt; and &lt;a href=&quot;https://github.com/stitchfix/nodebook&quot;&gt;Nodebook&lt;/a&gt;, have different mechanisms for tracking updates. Both only track variables in the global scope. Dfkernel conservatively invalidates all global variables used in a particular cell. Nodebook computes the hash of the serialization of every global variable on every cell execution, and compares the hashes to the previous hashes to determine invalidation. Nodebook additionally enforces the constraint that cells can only have data dependencies on prior cells.&lt;/p&gt;
&lt;p&gt;While neither seems like a fully optimal solution, it does seem like reactive notebooks are growing in popularity. &lt;a href=&quot;https://beta.observablehq.com/&quot;&gt;Observable’s&lt;/a&gt; Javascript notebooks also adopt this idea.&lt;/p&gt;
&lt;h2 id=&quot;2-jupyter-is-the-new-bash&quot;&gt;2. Jupyter is the new Bash&lt;/h2&gt;
&lt;p&gt;While Jupyter notebooks have traditionally been a humans-only entrypoint into a program, researchers and companies alike are increasingly using notebooks for automation. In &lt;a href=&quot;https://conferences.oreilly.com/jupyter/jup-ny/public/schedule/detail/68348&quot;&gt;“Scheduled notebooks: A means for manageable and traceable code execution”&lt;/a&gt;, a Netflix engineer described how they have replaced Bash scripts with Jupyter notebooks for ETL pipelines and cron jobs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://willcrichton.net/images/assets/jupytercon2.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The basic idea is that you write a parameterized Jupyter notebook, essentially a notebook with parameters that get pasted into a new block at the top of the notebook. A system called &lt;a href=&quot;https://github.com/nteract/papermill&quot;&gt;Papermill&lt;/a&gt; metaprograms a bespoke notebook with provided parameters pasted in, and then executes the notebook with zero user interaction required. For Netflix, the benefit of this approach is to simplify the development and debugging of these scripts. If a particular job breaks, it’s trivial to pop open the offending notebook in the normal Jupyter environment, and it has all the data built in that it needs to execute until hitting the error.&lt;/p&gt;
&lt;p&gt;A more experimental approach to this is &lt;a href=&quot;https://conferences.oreilly.com/jupyter/jup-ny/public/schedule/detail/68339&quot;&gt;Script of Scripts&lt;/a&gt;, a Jupyter kernel that allows users to bridge between multiple programming languages (e.g. Python, Bash, and R) in a single Jupyter notebook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://willcrichton.net/images/assets/jupytercon3.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The SoS system integrates into traditional cluster schedulers like slurm, enabling their group at University of Texas to write Jupyter notebooks instead of Bash scripts to create bioinformatics pipelines.&lt;/p&gt;
&lt;h2 id=&quot;3-data-science-as-a-gateway-drug-in-education&quot;&gt;3. Data science as a gateway drug in education&lt;/h2&gt;
&lt;p&gt;On the education side of things, Jupyter is quickly gaining adoption in universities around America, particularly for data science courses. Conversely, data science is increasingly becoming students’ first exposure to programming and computer science, not just a supplement to a CS curriculum. Most notable is UC Berkeley’s &lt;a href=&quot;http://data8.org/&quot;&gt;Data 8&lt;/a&gt; program, which is projected to reach 50% of the university’s undergraduates within the next few years.&lt;/p&gt;
&lt;p&gt;The neat part about Data 8 is that it starts with a core class, but branches into many sister classes that incorporate data science principles to investigate domains like medicine, geography, and sports. Their pedagogy is to develop a series of independent modules on topics like hypothesis testing, text processing, etc. such that courses can incorporate modules as necessary for their domain.&lt;/p&gt;
&lt;p&gt;I think this is a reasonable reaction to the utterly contrived assignments in many first-year programming courses—it’s way more motivating to gain insight in domains I actually care about as opposed to writing a routine to sort a list or search a tree.&lt;/p&gt;
&lt;p&gt;Other cool things I saw but haven’t covered: &lt;a href=&quot;https://github.com/jupyterlab/jupyterlab&quot;&gt;JupyterLab&lt;/a&gt; (web-based window manager and IDE), &lt;a href=&quot;https://github.com/jupyterhub/jupyterhub&quot;&gt;JupyterHub&lt;/a&gt; (multi-user server for Jupyter), &lt;a href=&quot;https://mybinder.org/&quot;&gt;Binder&lt;/a&gt; (hosted notebooks), &lt;a href=&quot;https://www.nbinteract.com/&quot;&gt;nbinteract&lt;/a&gt; (convert interactive notebooks into web pages), &lt;a href=&quot;https://quiltdata.com/&quot;&gt;Quilt&lt;/a&gt; (data versioning), and &lt;a href=&quot;http://quantstack.net/xeus.html&quot;&gt;Xeus&lt;/a&gt; (C++ kernel in Jupyter).&lt;/p&gt;
</description>
<pubDate>Sat, 25 Aug 2018 02:19:30 +0000</pubDate>
<dc:creator>wcrichton</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://willcrichton.net/notes/lessons-from-jupytercon/</dc:identifier>
</item>
<item>
<title>Redis is not “open core”</title>
<link>http://antirez.com/news/121</link>
<guid isPermaLink="true" >http://antirez.com/news/121</guid>
<description>&lt;section id=&quot;newslist&quot;&gt;&lt;article data-news-id=&quot;121&quot;&gt;
&lt;/article&gt;&lt;/section&gt;&lt;article class=&quot;comment&quot; data-comment-id=&quot;121-&quot; id=&quot;121-&quot; readability=&quot;29.959032383925&quot;&gt;&lt;span class=&quot;info&quot;&gt;&lt;span class=&quot;username&quot;&gt;&lt;a href=&quot;http://antirez.com/user/antirez&quot;&gt;antirez&lt;/a&gt;&lt;/span&gt; 1 day ago. 33105 views.&lt;/span&gt;
&lt;pre&gt;
Human beings have a strong tendency to put new facts into pre-existing categories. This is useful to mentally and culturally classify similar events under the same logical umbrella, so when two days ago I clarified that the Redis core was still released under the vanilla BSD license, and only certain Redis modules developed by Redis Labs were going to change license, from AGPL to a different non open source license, people said “Ah! Ok you are going open core”.

The simplification this time does not work if it is in your interest to capture the truth of what is happening here. An open core technology requires two things. One is that the system is modular, and the other is that parts of such system are made proprietary in order to create a product around an otherwise free software. For example providing a single node of a database into the open source, and then having the clustering logic and mechanism implemented in a different non-free layer, is an open core technology. Similarly is open core if I write a relational database with a modular storage system, but the only storage that is able to provide strong guarantees is non free. In an open core business model around an open source system it is *fundamental* that you take something useful out of the free software part.

Now for some time Redis is a modular system. You can use Redis modules in order to write many things, including new distributed systems using the recently introduced cluster message bus API, or new data types that look native. However the reason to make Redis modular was not to remove something useful from the system and put a price tag on it. For instance one of the new data structures in Redis 5, the streams, are part of the core and are released under the BSD license. Streams were implemented when Redis was already a modular system.

Redis modules started from a different observation. As a premise I should say that I’m a very conservative person about software development. I believe that Redis should be focused to address just things that, when operated with in-memory data structures, offer strong advantages over other ways to do the same thing. I don’t want Redis to do much more than it does, or to employ every possible consistency tradeoff. I want Redis to be Redis, that is, this general tool that the developer can use in different ways to solve certain problems.

However at Redis Labs we observed multiple times that it’s a bit a shame that Redis cannot solve certain specific problems. For instance what about if Redis was a serious full text search engine? Also well, developers want so much JSON, what about having an API to talk directly JSON? And given that in-memory graphs if represented wisely can be so fast, what about having graph database abilities, with a rich query language? Redis Labs customers often asked directly for such things. And actually, such features could be cool, but it’s not Redis, I’m not interested, and the open source side of Redis does not have the development force to keep all this things going btw. And this is a major advantage both for Redis and for Redis Labs: it is relatively cheap to pay just me and a few more OSS development time internally, while allocating the rest of the resources to development of things that are useful for the Redis Labs business, like making sure the Redis enterprise SaaS and products are good. There is anyway a great deal of contributions arriving from the community. And I also keep saying “no” to all this fancy ideas that would keep Redis in other areas… which is also a problem.

Still to have such things similar to Redis but outside the Redis scope, would be cool, because you know, while it’s not Redis mission, people may very well use a fast inverted index with full text search capabilities that you can feed in real time, while it serves a very good amount of queries per core at the same time. This is what Redis Labs is doing, it’s using the same Redis technology and approach to do more than what Redis wanted to do. Not just in the functionality areas, but also in other areas like consistency models. I’m very opinionated about certain things, and I think that, for instance, CRDTs while super cool in certain use cases, where not the right thing for Redis, to retain the same memory footprint, performance, simplicity, even at the cost of having a weaker consistency model. So Redis Labs, together with a top researcher in the area, did it (and this is a proprietary product without any source available). I can see how such feature can be tremendously useful for certain operations, but Redis was not there to solve everything, and Redis Labs did it.

This is not open core. Redis Labs is doing things that you would never see from me: for bandwidth, and because I believe that not all the softwares must eventually become huge. 
So I think that calling this model “open core” is misleading, nothing is removed from the Redis table, just new things are explored, while trying to follow the “Redis way” in other areas otherwise not touched by the Redis project.
&lt;/pre&gt;&lt;/article&gt;
&lt;noscript readability=&quot;1.15625&quot;&gt;
&lt;p&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/p&gt;
&lt;/noscript&gt; &lt;a href=&quot;http://disqus.com&quot; class=&quot;dsq-brlink&quot;&gt;blog comments powered by &lt;span class=&quot;logo-disqus&quot;&gt;Disqus&lt;/span&gt;&lt;/a&gt;</description>
<pubDate>Fri, 24 Aug 2018 23:01:30 +0000</pubDate>
<dc:creator>stock_toaster</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://antirez.com/news/121</dc:identifier>
</item>
<item>
<title>Go 1.11 released</title>
<link>https://golang.org/doc/go1.11</link>
<guid isPermaLink="true" >https://golang.org/doc/go1.11</guid>
<description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction to Go 1.11&lt;/h2&gt;
&lt;p&gt;The latest Go release, version 1.11, arrives six months after &lt;a href=&quot;https://golang.org/doc/go1.10&quot;&gt;Go 1.10&lt;/a&gt;. Most of its changes are in the implementation of the toolchain, runtime, and libraries. As always, the release maintains the Go 1 &lt;a href=&quot;https://golang.org/doc/go1compat.html&quot;&gt;promise of compatibility&lt;/a&gt;. We expect almost all Go programs to continue to compile and run as before.&lt;/p&gt;
&lt;h2 id=&quot;language&quot;&gt;Changes to the language&lt;/h2&gt;
&lt;p&gt;There are no changes to the language specification.&lt;/p&gt;
&lt;h2 id=&quot;ports&quot;&gt;Ports&lt;/h2&gt;
&lt;p&gt; As &lt;a href=&quot;https://golang.org/doc/go1.10#ports&quot;&gt;announced in the Go 1.10 release notes&lt;/a&gt;, Go 1.11 now requires OpenBSD 6.2 or later, macOS 10.10 Yosemite or later, or Windows 7 or later; support for previous versions of these operating systems has been removed.&lt;/p&gt;
&lt;p&gt; Go 1.11 supports the upcoming OpenBSD 6.4 release. Due to changes in the OpenBSD kernel, older versions of Go will not work on OpenBSD 6.4.&lt;/p&gt;
&lt;p&gt;There are &lt;a href=&quot;https://golang.org/issue/25206&quot;&gt;known issues&lt;/a&gt; with NetBSD on i386 hardware.&lt;/p&gt;
&lt;p&gt; The race detector is now supported on &lt;code&gt;linux/ppc64le&lt;/code&gt; and, to a lesser extent, on &lt;code&gt;netbsd/amd64&lt;/code&gt;. The NetBSD race detector support has &lt;a href=&quot;https://golang.org/issue/26403&quot;&gt;known issues&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; The memory sanitizer (&lt;code&gt;-msan&lt;/code&gt;) is now supported on &lt;code&gt;linux/arm64&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt; The build modes &lt;code&gt;c-shared&lt;/code&gt; and &lt;code&gt;c-archive&lt;/code&gt; are now supported on &lt;code&gt;freebsd/amd64&lt;/code&gt;.&lt;/p&gt;
&lt;p id=&quot;mips&quot;&gt; On 64-bit MIPS systems, the new environment variable settings &lt;code&gt;GOMIPS64=hardfloat&lt;/code&gt; (the default) and &lt;code&gt;GOMIPS64=softfloat&lt;/code&gt; select whether to use hardware instructions or software emulation for floating-point computations. For 32-bit systems, the environment variable is still &lt;code&gt;GOMIPS&lt;/code&gt;, as &lt;a href=&quot;https://golang.org/doc/go1.10#mips&quot;&gt;added in Go 1.10&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; On soft-float ARM systems (&lt;code&gt;GOARM=5&lt;/code&gt;), Go now uses a more efficient software floating point interface. This is transparent to Go code, but ARM assembly that uses floating-point instructions not guarded on GOARM will break and must be ported to the &lt;a href=&quot;https://golang.org/cl/107475&quot;&gt;new interface&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; Go 1.11 on ARMv7 no longer requires a Linux kernel configured with &lt;code&gt;KUSER_HELPERS&lt;/code&gt;. This setting is enabled in default kernel configurations, but is sometimes disabled in stripped-down configurations.&lt;/p&gt;
&lt;h3 id=&quot;wasm&quot;&gt;WebAssembly&lt;/h3&gt;
&lt;p&gt;Go 1.11 adds an experimental port to &lt;a href=&quot;https://webassembly.org&quot;&gt;WebAssembly&lt;/a&gt; (&lt;code&gt;js/wasm&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Go programs currently compile to one WebAssembly module that includes the Go runtime for goroutine scheduling, garbage collection, maps, etc. As a result, the resulting size is at minimum around 2 MB, or 500 KB compressed. Go programs can call into JavaScript using the new experimental &lt;a href=&quot;https://golang.org/pkg/syscall/js/&quot;&gt;&lt;code&gt;syscall/js&lt;/code&gt;&lt;/a&gt; package. Binary size and interop with other languages has not yet been a priority but may be addressed in future releases.&lt;/p&gt;
&lt;p&gt;As a result of the addition of the new &lt;code&gt;GOOS&lt;/code&gt; value &quot;&lt;code&gt;js&lt;/code&gt;&quot; and &lt;code&gt;GOARCH&lt;/code&gt; value &quot;&lt;code&gt;wasm&lt;/code&gt;&quot;, Go files named &lt;code&gt;*_js.go&lt;/code&gt; or &lt;code&gt;*_wasm.go&lt;/code&gt; will now be &lt;a href=&quot;https://golang.org/pkg/go/build/#hdr-Build_Constraints&quot;&gt;ignored by Go tools&lt;/a&gt; except when those GOOS/GOARCH values are being used. If you have existing filenames matching those patterns, you will need to rename them.&lt;/p&gt;
&lt;p&gt;More information can be found on the &lt;a href=&quot;https://golang.org/wiki/WebAssembly&quot;&gt;WebAssembly wiki page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;riscv&quot;&gt;RISC-V GOARCH values reserved&lt;/h3&gt;
&lt;p&gt; The main Go compiler does not yet support the RISC-V architecture  but we've reserved the &lt;code&gt;GOARCH&lt;/code&gt; values &quot;&lt;code&gt;riscv&lt;/code&gt;&quot; and &quot;&lt;code&gt;riscv64&lt;/code&gt;&quot;, as used by Gccgo, which does support RISC-V. This means that Go files named &lt;code&gt;*_riscv.go&lt;/code&gt; will now also be &lt;a href=&quot;https://golang.org/pkg/go/build/#hdr-Build_Constraints&quot;&gt;ignored by Go tools&lt;/a&gt; except when those GOOS/GOARCH values are being used.&lt;/p&gt;

&lt;h3 id=&quot;modules&quot;&gt;Modules, package versioning, and dependency management&lt;/h3&gt;
&lt;p&gt;Go 1.11 adds preliminary support for a &lt;a href=&quot;https://golang.org/cmd/go/#hdr-Modules__module_versions__and_more&quot;&gt;new concept called “modules,”&lt;/a&gt; an alternative to GOPATH with integrated support for versioning and package distribution. Using modules, developers are no longer confined to working inside GOPATH, version dependency information is explicit yet lightweight, and builds are more reliable and reproducible.&lt;/p&gt;
&lt;p&gt;Module support is considered experimental. Details are likely to change in response to feedback from Go 1.11 users, and we have more tools planned. Although the details of module support may change, projects that convert to modules using Go 1.11 will continue to work with Go 1.12 and later. If you encounter bugs using modules, please &lt;a href=&quot;https://golang.org/issue/new&quot;&gt;file issues&lt;/a&gt; so we can fix them. For more information, see the &lt;a href=&quot;https://golang.org/cmd/go#hdr-Modules__module_versions__and_more&quot;&gt;&lt;code&gt;go&lt;/code&gt; command documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;importpath&quot;&gt;Import path restriction&lt;/h3&gt;
&lt;p&gt;Because Go module support assigns special meaning to the &lt;code&gt;@&lt;/code&gt; symbol in command line operations, the &lt;code&gt;go&lt;/code&gt; command now disallows the use of import paths containing &lt;code&gt;@&lt;/code&gt; symbols. Such import paths were never allowed by &lt;code&gt;go&lt;/code&gt; &lt;code&gt;get&lt;/code&gt;, so this restriction can only affect users building custom GOPATH trees by other means.&lt;/p&gt;
&lt;h3 id=&quot;gopackages&quot;&gt;Package loading&lt;/h3&gt;
&lt;p&gt;The new package &lt;a href=&quot;https://godoc.org/golang.org/x/tools/go/packages&quot;&gt;&lt;code&gt;golang.org/x/tools/go/packages&lt;/code&gt;&lt;/a&gt; provides a simple API for locating and loading packages of Go source code. Although not yet part of the standard library, for many tasks it effectively replaces the &lt;a href=&quot;https://golang.org/pkg/go/build&quot;&gt;&lt;code&gt;go/build&lt;/code&gt;&lt;/a&gt; package, whose API is unable to fully support modules. Because it runs an external query command such as &lt;a href=&quot;https://golang.org/cmd/go/#hdr-List_packages&quot;&gt;&lt;code&gt;go list&lt;/code&gt;&lt;/a&gt; to obtain information about Go packages, it enables the construction of analysis tools that work equally well with alternative build systems such as &lt;a href=&quot;https://bazel.build&quot;&gt;Bazel&lt;/a&gt; and &lt;a href=&quot;https://buckbuild.com&quot;&gt;Buck&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;gocache&quot;&gt;Build cache requirement&lt;/h3&gt;
&lt;p&gt;Go 1.11 will be the last release to support setting the environment variable &lt;code&gt;GOCACHE=off&lt;/code&gt; to disable the &lt;a href=&quot;https://golang.org/cmd/go/#hdr-Build_and_test_caching&quot;&gt;build cache&lt;/a&gt;, introduced in Go 1.10. Starting in Go 1.12, the build cache will be required, as a step toward eliminating &lt;code&gt;$GOPATH/pkg&lt;/code&gt;. The module and package loading support described above already require that the build cache be enabled. If you have disabled the build cache to avoid problems you encountered, please &lt;a href=&quot;https://golang.org/issue/new&quot;&gt;file an issue&lt;/a&gt; to let us know about them.&lt;/p&gt;
&lt;h3 id=&quot;compiler&quot;&gt;Compiler toolchain&lt;/h3&gt;
&lt;p&gt; More functions are now eligible for inlining by default, including functions that call &lt;code&gt;panic&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt; The compiler toolchain now supports column information in &lt;a href=&quot;https://golang.org/cmd/compile/#hdr-Compiler_Directives&quot;&gt;line directives&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; A new package export data format has been introduced. This should be transparent to end users, except for speeding up build times for large Go projects. If it does cause problems, it can be turned off again by passing &lt;code&gt;-gcflags=all=-iexport=false&lt;/code&gt; to the &lt;code&gt;go&lt;/code&gt; tool when building a binary.&lt;/p&gt;
&lt;p&gt; The compiler now rejects unused variables declared in a type switch guard, such as &lt;code&gt;x&lt;/code&gt; in the following example:&lt;/p&gt;
&lt;pre&gt;
func f(v interface{}) {
        switch x := v.(type) {
        }
}
&lt;/pre&gt;
&lt;p&gt;This was already rejected by both &lt;code&gt;gccgo&lt;/code&gt; and &lt;a href=&quot;https://golang.org/pkg/go/types/&quot;&gt;go/types&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;assembler&quot;&gt;Assembler&lt;/h3&gt;
&lt;p&gt; The assembler for &lt;code&gt;amd64&lt;/code&gt; now accepts AVX512 instructions.&lt;/p&gt;
&lt;h3 id=&quot;debugging&quot;&gt;Debugging&lt;/h3&gt;
&lt;p&gt; The compiler now produces significantly more accurate debug information for optimized binaries, including variable location information, line numbers, and breakpoint locations. This should make it possible to debug binaries compiled &lt;em&gt;without&lt;/em&gt; &lt;code&gt;-N&lt;/code&gt; &lt;code&gt;-l&lt;/code&gt;. There are still limitations to the quality of the debug information, some of which are fundamental, and some of which will continue to improve with future releases.&lt;/p&gt;
&lt;p&gt; DWARF sections are now compressed by default because of the expanded and more accurate debug information produced by the compiler. This is transparent to most ELF tools (such as debuggers on Linux and *BSD) and is supported by the Delve debugger on all platforms, but has limited support in the native tools on macOS and Windows. To disable DWARF compression, pass &lt;code&gt;-ldflags=-compressdwarf=false&lt;/code&gt; to the &lt;code&gt;go&lt;/code&gt; tool when building a binary.&lt;/p&gt;
&lt;p&gt; Go 1.11 adds experimental support for calling Go functions from within a debugger. This is useful, for example, to call &lt;code&gt;String&lt;/code&gt; methods when paused at a breakpoint. This is currently only supported by Delve (version 1.1.0 and up).&lt;/p&gt;
&lt;h3 id=&quot;test&quot;&gt;Test&lt;/h3&gt;
&lt;p&gt;Since Go 1.10, the &lt;code&gt;go&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; command runs &lt;code&gt;go&lt;/code&gt; &lt;code&gt;vet&lt;/code&gt; on the package being tested, to identify problems before running the test. Since &lt;code&gt;vet&lt;/code&gt; typechecks the code with &lt;a href=&quot;https://golang.org/pkg/go/types/&quot;&gt;go/types&lt;/a&gt; before running, tests that do not typecheck will now fail. In particular, tests that contain an unused variable inside a closure compiled with Go 1.10, because the Go compiler incorrectly accepted them (&lt;a href=&quot;https://golang.org/issues/3059&quot;&gt;Issue #3059&lt;/a&gt;), but will now fail, since &lt;code&gt;go/types&lt;/code&gt; correctly reports an &quot;unused variable&quot; error in this case.&lt;/p&gt;
&lt;p&gt; The &lt;code&gt;-memprofile&lt;/code&gt; flag to &lt;code&gt;go&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; now defaults to the &quot;allocs&quot; profile, which records the total bytes allocated since the test began (including garbage-collected bytes).&lt;/p&gt;
&lt;h3 id=&quot;vet&quot;&gt;Vet&lt;/h3&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/cmd/vet/&quot;&gt;&lt;code&gt;go&lt;/code&gt; &lt;code&gt;vet&lt;/code&gt;&lt;/a&gt; command now reports a fatal error when the package under analysis does not typecheck. Previously, a type checking error simply caused a warning to be printed, and &lt;code&gt;vet&lt;/code&gt; to exit with status 1.&lt;/p&gt;
&lt;p&gt; Additionally, &lt;a href=&quot;https://golang.org/cmd/vet&quot;&gt;&lt;code&gt;go&lt;/code&gt; &lt;code&gt;vet&lt;/code&gt;&lt;/a&gt; has become more robust when format-checking &lt;code&gt;printf&lt;/code&gt; wrappers. Vet now detects the mistake in this example:&lt;/p&gt;
&lt;pre&gt;
func wrapper(s string, args ...interface{}) {
        fmt.Printf(s, args...)
}

func main() {
        wrapper(&quot;%s&quot;, 42)
}
&lt;/pre&gt;
&lt;h3 id=&quot;trace&quot;&gt;Trace&lt;/h3&gt;
&lt;p&gt; With the new &lt;code&gt;runtime/trace&lt;/code&gt; package's &lt;a href=&quot;https://golang.org/pkg/runtime/trace/#hdr-User_annotation&quot;&gt;user annotation API&lt;/a&gt;, users can record application-level information in execution traces and create groups of related goroutines. The &lt;code&gt;go&lt;/code&gt; &lt;code&gt;tool&lt;/code&gt; &lt;code&gt;trace&lt;/code&gt; command visualizes this information in the trace view and the new user task/region analysis page.&lt;/p&gt;
&lt;h3 id=&quot;cgo&quot;&gt;Cgo&lt;/h3&gt;
&lt;p&gt;Since Go 1.10, cgo has translated some C pointer types to the Go type &lt;code&gt;uintptr&lt;/code&gt;. These types include the &lt;code&gt;CFTypeRef&lt;/code&gt; hierarchy in Darwin's CoreFoundation framework and the &lt;code&gt;jobject&lt;/code&gt; hierarchy in Java's JNI interface. In Go 1.11, several improvements have been made to the code that detects these types. Code that uses these types may need some updating. See the &lt;a href=&quot;https://golang.org/doc/go1.10.html#cgo&quot;&gt;Go 1.10 release notes&lt;/a&gt; for details. &lt;/p&gt;
&lt;h3 id=&quot;godoc&quot;&gt;Godoc&lt;/h3&gt;
&lt;p&gt;Go 1.11 will be the last release to support &lt;code&gt;godoc&lt;/code&gt;'s command-line interface. In future releases, &lt;code&gt;godoc&lt;/code&gt; will only be a web server. Users should use &lt;code&gt;go&lt;/code&gt; &lt;code&gt;doc&lt;/code&gt; for command-line help output instead.&lt;/p&gt;
&lt;p&gt; The &lt;code&gt;godoc&lt;/code&gt; web server now shows which version of Go introduced new API features. The initial Go version of types, funcs, and methods are shown right-aligned. For example, see &lt;a href=&quot;https://golang.org/pkg/os/#UserCacheDir&quot;&gt;&lt;code&gt;UserCacheDir&lt;/code&gt;&lt;/a&gt;, with &quot;1.11&quot; on the right side. For struct fields, inline comments are added when the struct field was added in a Go version other than when the type itself was introduced. For a struct field example, see &lt;a href=&quot;https://golang.org/pkg/net/http/httptrace/#ClientTrace.Got1xxResponse&quot;&gt;&lt;code&gt;ClientTrace.Got1xxResponse&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;gofmt&quot;&gt;Gofmt&lt;/h3&gt;
&lt;p&gt;One minor detail of the default formatting of Go source code has changed. When formatting expression lists with inline comments, the comments were aligned according to a heuristic. However, in some cases the alignment would be split up too easily, or introduce too much whitespace. The heuristic has been changed to behave better for human-written code.&lt;/p&gt;
&lt;p&gt;Note that these kinds of minor updates to gofmt are expected from time to time. In general, systems that need consistent formatting of Go source code should use a specific version of the &lt;code&gt;gofmt&lt;/code&gt; binary. See the &lt;a href=&quot;https://golang.org/pkg/go/format/&quot;&gt;go/format&lt;/a&gt; package documentation for more information.&lt;/p&gt;
&lt;h2 id=&quot;runtime&quot;&gt;Runtime&lt;/h2&gt;
&lt;p&gt; The runtime now uses a sparse heap layout so there is no longer a limit to the size of the Go heap (previously, the limit was 512GiB). This also fixes rare &quot;address space conflict&quot; failures in mixed Go/C binaries or binaries compiled with &lt;code&gt;-race&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt; On macOS and iOS, the runtime now uses &lt;code&gt;libSystem.so&lt;/code&gt; instead of calling the kernel directly. This should make Go binaries more compatible with future versions of macOS and iOS. The &lt;a href=&quot;https://golang.org/pkg/syscall&quot;&gt;syscall&lt;/a&gt; package still makes direct system calls; fixing this is planned for a future release.&lt;/p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;/h2&gt;
&lt;p&gt;As always, the changes are so general and varied that precise statements about performance are difficult to make. Most programs should run a bit faster, due to better generated code and optimizations in the core library.&lt;/p&gt;
&lt;p&gt;There were multiple performance changes to the &lt;code&gt;math/big&lt;/code&gt; package as well as many changes across the tree specific to &lt;code&gt;GOARCH=arm64&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;performance-compiler&quot;&gt;Compiler toolchain&lt;/h3&gt;
&lt;p&gt; The compiler now optimizes map clearing operations of the form:&lt;/p&gt;
&lt;pre&gt;
for k := range m {
        delete(m, k)
}
&lt;/pre&gt;
&lt;p&gt; The compiler now optimizes slice extension of the form &lt;code&gt;append(s,&lt;/code&gt; &lt;code&gt;make([]T,&lt;/code&gt; &lt;code&gt;n)...)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt; The compiler now performs significantly more aggressive bounds-check and branch elimination. Notably, it now recognizes transitive relations, so if &lt;code&gt;i&amp;lt;j&lt;/code&gt; and &lt;code&gt;j&amp;lt;len(s)&lt;/code&gt;, it can use these facts to eliminate the bounds check for &lt;code&gt;s[i]&lt;/code&gt;. It also understands simple arithmetic such as &lt;code&gt;s[i-10]&lt;/code&gt; and can recognize more inductive cases in loops. Furthermore, the compiler now uses bounds information to more aggressively optimize shift operations.&lt;/p&gt;
&lt;h2 id=&quot;library&quot;&gt;Core library&lt;/h2&gt;
&lt;p&gt;All of the changes to the standard library are minor.&lt;/p&gt;
&lt;h3 id=&quot;minor_library_changes&quot;&gt;Minor changes to the library&lt;/h3&gt;
&lt;p&gt;As always, there are various minor changes and updates to the library, made with the Go 1 &lt;a href=&quot;https://golang.org/doc/go1compat&quot;&gt;promise of compatibility&lt;/a&gt; in mind.&lt;/p&gt;
&lt;dl id=&quot;crypto&quot; readability=&quot;0&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/crypto/&quot;&gt;crypto&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;2.2826086956522&quot;&gt;
&lt;p&gt; Certain crypto operations, including &lt;a href=&quot;https://golang.org/pkg/crypto/ecdsa/#Sign&quot;&gt;&lt;code&gt;ecdsa.Sign&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://golang.org/pkg/crypto/rsa/#EncryptPKCS1v15&quot;&gt;&lt;code&gt;rsa.EncryptPKCS1v15&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/crypto/rsa/#GenerateKey&quot;&gt;&lt;code&gt;rsa.GenerateKey&lt;/code&gt;&lt;/a&gt;, now randomly read an extra byte of randomness to ensure tests don't rely on internal behavior.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;crypto/cipher&quot; readability=&quot;-1.2115384615385&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/crypto/cipher/&quot;&gt;crypto/cipher&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;0&quot;&gt;
&lt;p&gt; The new function &lt;a href=&quot;https://golang.org/pkg/crypto/cipher/#NewGCMWithTagSize&quot;&gt;&lt;code&gt;NewGCMWithTagSize&lt;/code&gt;&lt;/a&gt; implements Galois Counter Mode with non-standard tag lengths for compatibility with existing cryptosystems.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;crypto/rsa&quot; readability=&quot;-1.4831460674157&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/crypto/rsa/&quot;&gt;crypto/rsa&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;-0.83333333333333&quot;&gt;
&lt;p&gt; &lt;a href=&quot;https://golang.org/pkg/crypto/rsa/#PublicKey&quot;&gt;&lt;code&gt;PublicKey&lt;/code&gt;&lt;/a&gt; now implements a &lt;a href=&quot;https://golang.org/pkg/crypto/rsa/#PublicKey.Size&quot;&gt;&lt;code&gt;Size&lt;/code&gt;&lt;/a&gt; method that returns the modulus size in bytes.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;crypto/tls&quot; readability=&quot;-1.0178571428571&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/crypto/tls/&quot;&gt;crypto/tls&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;0&quot;&gt;
&lt;p&gt; &lt;a href=&quot;https://golang.org/pkg/crypto/tls/#ConnectionState&quot;&gt;&lt;code&gt;ConnectionState&lt;/code&gt;&lt;/a&gt;'s new &lt;a href=&quot;https://golang.org/pkg/crypto/tls/#ConnectionState.ExportKeyingMaterial&quot;&gt;&lt;code&gt;ExportKeyingMaterial&lt;/code&gt;&lt;/a&gt; method allows exporting keying material bound to the connection according to RFC 5705.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;crypto/x509&quot; readability=&quot;3.8&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/crypto/x509/&quot;&gt;crypto/x509&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;10.602941176471&quot;&gt;
&lt;p&gt; The deprecated, legacy behavior of treating the &lt;code&gt;CommonName&lt;/code&gt; field as a hostname when no Subject Alternative Names are present is now disabled when the CN is not a valid hostname. The &lt;code&gt;CommonName&lt;/code&gt; can be completely ignored by adding the experimental value &lt;code&gt;x509ignoreCN=1&lt;/code&gt; to the &lt;code&gt;GODEBUG&lt;/code&gt; environment variable. When the CN is ignored, certificates without SANs validate under chains with name constraints instead of returning &lt;code&gt;NameConstraintsWithoutSANs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt; Extended key usage restrictions are again checked only if they appear in the &lt;code&gt;KeyUsages&lt;/code&gt; field of &lt;a href=&quot;https://golang.org/pkg/crypto/x509/#VerifyOptions&quot;&gt;&lt;code&gt;VerifyOptions&lt;/code&gt;&lt;/a&gt;, instead of always being checked. This matches the behavior of Go 1.9 and earlier.&lt;/p&gt;
&lt;p&gt; The value returned by &lt;a href=&quot;https://golang.org/pkg/crypto/x509/#SystemCertPool&quot;&gt;&lt;code&gt;SystemCertPool&lt;/code&gt;&lt;/a&gt; is now cached and might not reflect system changes between invocations.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;debug/elf&quot; readability=&quot;-1.3333333333333&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/debug/elf/&quot;&gt;debug/elf&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;-0.78723404255319&quot;&gt;
&lt;p&gt; More &lt;a href=&quot;https://golang.org/pkg/debug/elf/#ELFOSABI_NONE&quot;&gt;&lt;code&gt;ELFOSABI&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/debug/elf/#EM_NONE&quot;&gt;&lt;code&gt;EM&lt;/code&gt;&lt;/a&gt; constants have been added.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;encoding/asn1&quot; readability=&quot;-1.4942528735632&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/encoding/asn1/&quot;&gt;encoding/asn1&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;-0.87671232876712&quot;&gt;
&lt;p&gt; &lt;code&gt;Marshal&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://golang.org/pkg/encoding/asn1/#Unmarshal&quot;&gt;Unmarshal&lt;/a&gt;&lt;/code&gt; now support &quot;private&quot; class annotations for fields.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;encoding/base32&quot; readability=&quot;-1.3458904109589&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/encoding/base32/&quot;&gt;encoding/base32&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;0&quot;&gt;
&lt;p&gt; The decoder now consistently returns &lt;code&gt;io.ErrUnexpectedEOF&lt;/code&gt; for an incomplete chunk. Previously it would return &lt;code&gt;io.EOF&lt;/code&gt; in some cases.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;encoding/csv&quot; readability=&quot;-0.89506172839506&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/encoding/csv/&quot;&gt;encoding/csv&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;0.96644295302013&quot;&gt;
&lt;p&gt; The &lt;code&gt;Reader&lt;/code&gt; now rejects attempts to set the &lt;a href=&quot;https://golang.org/pkg/encoding/csv/#Reader.Comma&quot;&gt;&lt;code&gt;Comma&lt;/code&gt;&lt;/a&gt; field to a double-quote character, as double-quote characters already have a special meaning in CSV.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;html/template&quot; readability=&quot;-0.47719298245614&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/html/template/&quot;&gt;html/template&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;2&quot;&gt;
&lt;p&gt; The package has changed its behavior when a typed interface value is passed to an implicit escaper function. Previously such a value was written out as (an escaped form) of &lt;code&gt;&amp;lt;nil&amp;gt;&lt;/code&gt;. Now such values are ignored, just as an untyped &lt;code&gt;nil&lt;/code&gt; value is (and always has been) ignored.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;image/gif&quot; readability=&quot;-1.64&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/image/gif/&quot;&gt;image/gif&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;-0.9&quot;&gt;
&lt;p&gt; Non-looping animated GIFs are now supported. They are denoted by having a &lt;code&gt;&lt;a href=&quot;https://golang.org/pkg/image/gif/#GIF.LoopCount&quot;&gt;LoopCount&lt;/a&gt;&lt;/code&gt; of -1.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;io/ioutil&quot; readability=&quot;0.95707070707071&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/io/ioutil/&quot;&gt;io/ioutil&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;4.8963730569948&quot;&gt;
&lt;p&gt; The &lt;code&gt;&lt;a href=&quot;https://golang.org/pkg/io/ioutil/#TempFile&quot;&gt;TempFile&lt;/a&gt;&lt;/code&gt; function now supports specifying where the random characters in the filename are placed. If the &lt;code&gt;prefix&lt;/code&gt; argument includes a &quot;&lt;code&gt;*&lt;/code&gt;&quot;, the random string replaces the &quot;&lt;code&gt;*&lt;/code&gt;&quot;. For example, a &lt;code&gt;prefix&lt;/code&gt; argument of &quot;&lt;code&gt;myname.*.bat&lt;/code&gt;&quot; will result in a random filename such as &quot;&lt;code&gt;myname.123456.bat&lt;/code&gt;&quot;. If no &quot;&lt;code&gt;*&lt;/code&gt;&quot; is included the old behavior is retained, and the random digits are appended to the end.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;math/big&quot; readability=&quot;-1.2567567567568&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/math/big/&quot;&gt;math/big&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;0&quot;&gt;
&lt;p&gt; &lt;a href=&quot;https://golang.org/pkg/math/big/#Int.ModInverse&quot;&gt;&lt;code&gt;ModInverse&lt;/code&gt;&lt;/a&gt; now returns nil when g and n are not relatively prime. The result was previously undefined.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;mime/multipart&quot; readability=&quot;-0.47986577181208&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/mime/multipart/&quot;&gt;mime/multipart&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;1.9814814814815&quot;&gt;
&lt;p&gt; The handling of form-data with missing/empty file names has been restored to the behavior in Go 1.9: in the &lt;a href=&quot;https://golang.org/pkg/mime/multipart/#Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; for the form-data part the value is available in the &lt;code&gt;Value&lt;/code&gt; field rather than the &lt;code&gt;File&lt;/code&gt; field. In Go releases 1.10 through 1.10.3 a form-data part with a missing/empty file name and a non-empty &quot;Content-Type&quot; field was stored in the &lt;code&gt;File&lt;/code&gt; field. This change was a mistake in 1.10 and has been reverted to the 1.9 behavior.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;mime/quotedprintable&quot; readability=&quot;-0.85915492957746&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/mime/quotedprintable/&quot;&gt;mime/quotedprintable&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;1&quot;&gt;
&lt;p&gt; To support invalid input found in the wild, the package now permits non-ASCII bytes but does not validate their encoding.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;net&quot; readability=&quot;4.5673249551167&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/net/&quot;&gt;net&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;11.473779385172&quot;&gt;
&lt;p&gt; The new &lt;a href=&quot;https://golang.org/pkg/net/#ListenConfig&quot;&gt;&lt;code&gt;ListenConfig&lt;/code&gt;&lt;/a&gt; type and the new &lt;a href=&quot;https://golang.org/pkg/net/#Dialer.Control&quot;&gt;&lt;code&gt;Dialer.Control&lt;/code&gt;&lt;/a&gt; field permit setting socket options before accepting and creating connections, respectively.&lt;/p&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/syscall/#RawConn&quot;&gt;&lt;code&gt;syscall.RawConn&lt;/code&gt;&lt;/a&gt; &lt;code&gt;Read&lt;/code&gt; and &lt;code&gt;Write&lt;/code&gt; methods now work correctly on Windows.&lt;/p&gt;
&lt;p&gt; The &lt;code&gt;net&lt;/code&gt; package now automatically uses the &lt;a href=&quot;http://man7.org/linux/man-pages/man2/splice.2.html&quot;&gt;&lt;code&gt;splice&lt;/code&gt; system call&lt;/a&gt; on Linux when copying data between TCP connections in &lt;a href=&quot;https://golang.org/pkg/net/#TCPConn.ReadFrom&quot;&gt;&lt;code&gt;TCPConn.ReadFrom&lt;/code&gt;&lt;/a&gt;, as called by &lt;a href=&quot;https://golang.org/pkg/io/#Copy&quot;&gt;&lt;code&gt;io.Copy&lt;/code&gt;&lt;/a&gt;. The result is faster, more efficient TCP proxying.&lt;/p&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/net/#TCPConn.File&quot;&gt;&lt;code&gt;TCPConn.File&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://golang.org/pkg/net/#UDPConn.File&quot;&gt;&lt;code&gt;UDPConn.File&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://golang.org/pkg/net/#UnixCOnn.File&quot;&gt;&lt;code&gt;UnixConn.File&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://golang.org/pkg/net/#IPConn.File&quot;&gt;&lt;code&gt;IPConn.File&lt;/code&gt;&lt;/a&gt; methods no longer put the returned &lt;code&gt;*os.File&lt;/code&gt; into blocking mode.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;net/http&quot; readability=&quot;8.9203539823009&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/net/http/&quot;&gt;net/http&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;20.661016949153&quot;&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/net/http/#Transport&quot;&gt;&lt;code&gt;Transport&lt;/code&gt;&lt;/a&gt; type has a new &lt;a href=&quot;https://golang.org/pkg/net/http/#Transport.MaxConnsPerHost&quot;&gt;&lt;code&gt;MaxConnsPerHost&lt;/code&gt;&lt;/a&gt; option that permits limiting the maximum number of connections per host.&lt;/p&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/net/http/#Cookie&quot;&gt;&lt;code&gt;Cookie&lt;/code&gt;&lt;/a&gt; type has a new &lt;a href=&quot;https://golang.org/pkg/net/http/#Cookie.SameSite&quot;&gt;&lt;code&gt;SameSite&lt;/code&gt;&lt;/a&gt; field (of new type also named &lt;a href=&quot;https://golang.org/pkg/net/http/#SameSite&quot;&gt;&lt;code&gt;SameSite&lt;/code&gt;&lt;/a&gt;) to represent the new cookie attribute recently supported by most browsers. The &lt;code&gt;net/http&lt;/code&gt;'s &lt;code&gt;Transport&lt;/code&gt; does not use the &lt;code&gt;SameSite&lt;/code&gt; attribute itself, but the package supports parsing and serializing the attribute for browsers to use.&lt;/p&gt;
&lt;p&gt; It is no longer allowed to reuse a &lt;a href=&quot;https://golang.org/pkg/net/http/#Server&quot;&gt;&lt;code&gt;Server&lt;/code&gt;&lt;/a&gt; after a call to &lt;a href=&quot;https://golang.org/pkg/net/http/#Server.Shutdown&quot;&gt;&lt;code&gt;Shutdown&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://golang.org/pkg/net/http/#Server.Close&quot;&gt;&lt;code&gt;Close&lt;/code&gt;&lt;/a&gt;. It was never officially supported in the past and had often surprising behavior. Now, all future calls to the server's &lt;code&gt;Serve&lt;/code&gt; methods will return errors after a shutdown or close.&lt;/p&gt;
&lt;p&gt; The constant &lt;code&gt;StatusMisdirectedRequest&lt;/code&gt; is now defined for HTTP status code 421.&lt;/p&gt;
&lt;p&gt; The HTTP server will no longer cancel contexts or send on &lt;a href=&quot;https://golang.org/pkg/net/http/#CloseNotifier&quot;&gt;&lt;code&gt;CloseNotifier&lt;/code&gt;&lt;/a&gt; channels upon receiving pipelined HTTP/1.1 requests. Browsers do not use HTTP pipelining, but some clients (such as Debian's &lt;code&gt;apt&lt;/code&gt;) may be configured to do so.&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://golang.org/pkg/net/http/#ProxyFromEnvironment&quot;&gt;&lt;code&gt;ProxyFromEnvironment&lt;/code&gt;&lt;/a&gt;, which is used by the &lt;a href=&quot;https://golang.org/pkg/net/http/#DefaultTransport&quot;&gt;&lt;code&gt;DefaultTransport&lt;/code&gt;&lt;/a&gt;, now supports CIDR notation and ports in the &lt;code&gt;NO_PROXY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;net/http/httputil&quot; readability=&quot;0&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/net/http/httputil/&quot;&gt;net/http/httputil&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;2.6603773584906&quot;&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/net/http/httputil/#ReverseProxy&quot;&gt;&lt;code&gt;ReverseProxy&lt;/code&gt;&lt;/a&gt; has a new &lt;a href=&quot;https://golang.org/pkg/net/http/httputil/#ReverseProxy.ErrorHandler&quot;&gt;&lt;code&gt;ErrorHandler&lt;/code&gt;&lt;/a&gt; option to permit changing how errors are handled.&lt;/p&gt;
&lt;p&gt; The &lt;code&gt;ReverseProxy&lt;/code&gt; now also passes &quot;&lt;code&gt;TE:&lt;/code&gt; &lt;code&gt;trailers&lt;/code&gt;&quot; request headers through to the backend, as required by the gRPC protocol.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;os&quot; readability=&quot;6.8411420204978&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/os/&quot;&gt;os&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;16.464705882353&quot;&gt;
&lt;p&gt; The new &lt;a href=&quot;https://golang.org/pkg/os/#UserCacheDir&quot;&gt;&lt;code&gt;UserCacheDir&lt;/code&gt;&lt;/a&gt; function returns the default root directory to use for user-specific cached data.&lt;/p&gt;
&lt;p&gt; The new &lt;a href=&quot;https://golang.org/pkg/os/#ModeIrregular&quot;&gt;&lt;code&gt;ModeIrregular&lt;/code&gt;&lt;/a&gt; is a &lt;a href=&quot;https://golang.org/pkg/os/#FileMode&quot;&gt;&lt;code&gt;FileMode&lt;/code&gt;&lt;/a&gt; bit to represent that a file is not a regular file, but nothing else is known about it, or that it's not a socket, device, named pipe, symlink, or other file type for which Go has a defined mode bit.&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://golang.org/pkg/os/#Symlink&quot;&gt;&lt;code&gt;Symlink&lt;/code&gt;&lt;/a&gt; now works for unprivileged users on Windows 10 on machines with Developer Mode enabled.&lt;/p&gt;
&lt;p&gt; When a non-blocking descriptor is passed to &lt;a href=&quot;https://golang.org/pkg/os#NewFile&quot;&gt;&lt;code&gt;NewFile&lt;/code&gt;&lt;/a&gt;, the resulting &lt;code&gt;*File&lt;/code&gt; will be kept in non-blocking mode. This means that I/O for that &lt;code&gt;*File&lt;/code&gt; will use the runtime poller rather than a separate thread, and that the &lt;a href=&quot;https://golang.org/pkg/os/#File.SetDeadline&quot;&gt;&lt;code&gt;SetDeadline&lt;/code&gt;&lt;/a&gt; methods will work.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;os/signal&quot; readability=&quot;-1.6049382716049&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/os/signal/&quot;&gt;os/signal&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;-0.90140845070423&quot;&gt;
&lt;p&gt; The new &lt;a href=&quot;https://golang.org/pkg/os/signal/#Ignored&quot;&gt;&lt;code&gt;Ignored&lt;/code&gt;&lt;/a&gt; function reports whether a signal is currently ignored.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;os/user&quot; readability=&quot;-0.4875&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/os/user/&quot;&gt;os/user&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;2&quot;&gt;
&lt;p&gt; The &lt;code&gt;os/user&lt;/code&gt; package can now be built in pure Go mode using the build tag &quot;&lt;code&gt;osusergo&lt;/code&gt;&quot;, independent of the use of the environment variable &lt;code&gt;CGO_ENABLED=0&lt;/code&gt;. Previously the only way to use the package's pure Go implementation was to disable &lt;code&gt;cgo&lt;/code&gt; support across the entire program.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;runtime-again&quot; readability=&quot;-0.96534653465347&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/runtime/&quot;&gt;runtime&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;1&quot;&gt;
&lt;p&gt; Setting the &lt;code&gt;GODEBUG=tracebackancestors=&lt;em&gt;N&lt;/em&gt;&lt;/code&gt; environment variable now extends tracebacks with the stacks at which goroutines were created, where &lt;em&gt;N&lt;/em&gt; limits the number of ancestor goroutines to report.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;runtime/pprof&quot; readability=&quot;-0.48012232415902&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/runtime/pprof/&quot;&gt;runtime/pprof&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;2&quot;&gt;
&lt;p&gt; This release adds a new &quot;allocs&quot; profile type that profiles total number of bytes allocated since the program began (including garbage-collected bytes). This is identical to the existing &quot;heap&quot; profile viewed in &lt;code&gt;-alloc_space&lt;/code&gt; mode. Now &lt;code&gt;go test -memprofile=...&lt;/code&gt; reports an &quot;allocs&quot; profile instead of &quot;heap&quot; profile.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;sync&quot; readability=&quot;-1.3829787234043&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/sync/&quot;&gt;sync&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;0&quot;&gt;
&lt;p&gt; The mutex profile now includes reader/writer contention for &lt;a href=&quot;https://golang.org/pkg/sync/#RWMutex&quot;&gt;&lt;code&gt;RWMutex&lt;/code&gt;&lt;/a&gt;. Writer/writer contention was already included in the mutex profile.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;syscall&quot; readability=&quot;4.8475862068966&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/syscall/&quot;&gt;syscall&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;12.457461645746&quot;&gt;
&lt;p&gt; On Windows, several fields were changed from &lt;code&gt;uintptr&lt;/code&gt; to a new &lt;a href=&quot;https://golang.org/pkg/syscall/?GOOS=windows&amp;amp;GOARCH=amd64#Pointer&quot;&gt;&lt;code&gt;Pointer&lt;/code&gt;&lt;/a&gt; type to avoid problems with Go's garbage collector. The same change was made to the &lt;a href=&quot;https://godoc.org/golang.org/x/sys/windows&quot;&gt;&lt;code&gt;golang.org/x/sys/windows&lt;/code&gt;&lt;/a&gt; package. For any code affected, users should first migrate away from the &lt;code&gt;syscall&lt;/code&gt; package to the &lt;code&gt;golang.org/x/sys/windows&lt;/code&gt; package, and then change to using the &lt;code&gt;Pointer&lt;/code&gt;, while obeying the &lt;a href=&quot;https://golang.org/pkg/unsafe/#Pointer&quot;&gt;&lt;code&gt;unsafe.Pointer&lt;/code&gt; conversion rules&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; On Linux, the &lt;code&gt;flags&lt;/code&gt; parameter to &lt;a href=&quot;https://golang.org/pkg/syscall/?GOOS=linux&amp;amp;GOARCH=amd64#Faccessat&quot;&gt;&lt;code&gt;Faccessat&lt;/code&gt;&lt;/a&gt; is now implemented just as in glibc. In earlier Go releases the flags parameter was ignored.&lt;/p&gt;
&lt;p&gt; On Linux, the &lt;code&gt;flags&lt;/code&gt; parameter to &lt;a href=&quot;https://golang.org/pkg/syscall/?GOOS=linux&amp;amp;GOARCH=amd64#Fchmodat&quot;&gt;&lt;code&gt;Fchmodat&lt;/code&gt;&lt;/a&gt; is now validated. Linux's &lt;code&gt;fchmodat&lt;/code&gt; doesn't support the &lt;code&gt;flags&lt;/code&gt; parameter so we now mimic glibc's behavior and return an error if it's non-zero.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;text/scanner&quot; readability=&quot;14.918918918919&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/text/scanner/&quot;&gt;text/scanner&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;-0.72448979591837&quot;&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/text/scanner/#Scanner.Scan&quot;&gt;&lt;code&gt;Scanner.Scan&lt;/code&gt;&lt;/a&gt; method now returns the &lt;a href=&quot;https://golang.org/pkg/text/scanner/#RawString&quot;&gt;&lt;code&gt;RawString&lt;/code&gt;&lt;/a&gt; token instead of &lt;a href=&quot;https://golang.org/pkg/text/scanner/#String&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; for raw string literals.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;text/template&quot; readability=&quot;24.4375&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/text/template/&quot;&gt;text/template&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;4&quot;&gt;
&lt;p&gt; Modifying template variables via assignments is now permitted via the &lt;code&gt;=&lt;/code&gt; token:&lt;/p&gt;
&lt;pre&gt;
  {{ $v := &quot;init&quot; }}
  {{ if true }}
    {{ $v = &quot;changed&quot; }}
  {{ end }}
  v: {{ $v }} {{/* &quot;changed&quot; */}}
&lt;/pre&gt;
&lt;p&gt; In previous versions untyped &lt;code&gt;nil&lt;/code&gt; values passed to template functions were ignored. They are now passed as normal arguments.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;time&quot; readability=&quot;0&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/time/&quot;&gt;time&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;3&quot;&gt;
&lt;p&gt; Parsing of timezones denoted by sign and offset is now supported. In previous versions, numeric timezone names (such as &lt;code&gt;+03&lt;/code&gt;) were not considered valid, and only three-letter abbreviations (such as &lt;code&gt;MST&lt;/code&gt;) were accepted when expecting a timezone name.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
</description>
<pubDate>Fri, 24 Aug 2018 22:28:11 +0000</pubDate>
<dc:creator>soroso</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://golang.org/doc/go1.11</dc:identifier>
</item>
</channel>
</rss>