<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>The compelling case for working less</title>
<link>http://www.bbc.com/capital/story/20171204-the-compelling-case-for-working-a-lot-less</link>
<guid isPermaLink="true" >http://www.bbc.com/capital/story/20171204-the-compelling-case-for-working-a-lot-less</guid>
<description>&lt;p&gt;When I moved to Rome from Washington, DC, one sight struck me more than any ancient column or grand basilica: people doing nothing.&lt;/p&gt;&lt;p&gt;I’d frequently glimpse old women leaning out of their windows, watching people pass below, or families on their evening strolls, stopping every so often to greet friends. Even office life proved different. Forget the rushed desk-side sandwich. Come lunchtime, restaurants filled up with professionals tucking into proper meals.&lt;/p&gt;&lt;p&gt;Of course, ever since Grand Tourists began penning their observations in the seventeenth century, outsiders have stereotyped the idea of Italian ‘indolence’. And it isn’t the whole story. The same friends who headed home on their scooters for a leisurely lunch often returned to the office to work until 8pm.&lt;/p&gt;&lt;p&gt;Even so, the apparent belief in balancing hard work with &lt;em&gt;il dolce far niente, &lt;/em&gt;the sweetness of doing nothing, always struck me. After all, doing nothing appears to be the opposite of being productive. And productivity, whether creative, intellectual or industrial, is the ultimate use of our time.&lt;/p&gt;&lt;blockquote readability=&quot;7&quot;&gt;&lt;p&gt; As we fill our days with more and more ‘doing’, many of us are finding that going non-stop isn’t the apotheosis of productivity. It is its adversary &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;But as we fill our days with more and more ‘doing’, many of us are finding that non-stop activity isn’t the apotheosis of productivity. It is its adversary.&lt;/p&gt;&lt;p&gt;Researchers are learning that it doesn’t just mean that the work we produce at the end of a 14-hour day is of worse quality than when we’re fresh. This pattern of working also undermines our creativity and our cognition. Over time, it can make us feel physically sick – and even, ironically, as if we have no purpose.&lt;/p&gt;&lt;p&gt;Think of mental work as doing push-ups, says Josh Davis, author of &lt;a href=&quot;https://www.harpercollins.com/9780062326119/two-awesome-hours&quot;&gt;Two Awesome Hours&lt;/a&gt;. Say you want to do 10,000. The most ‘efficient’ way would be to do them all at once without a break. We know instinctively, though, that that is impossible. Instead, if we did just a few at a time, between other activities and stretched out over weeks, hitting 10,000 would become far more feasible.&lt;/p&gt;&lt;p&gt;“The brain is very much like a muscle in this respect,” Davis writes. “Set up the wrong conditions through constant work and we can accomplish little. Set up the right conditions and there is probably little we can’t do.”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Do or die&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Many of us, though, tend to think of our brains not as muscles, but as a computer: a machine capable of constant work. Not only is that untrue, but pushing ourselves to work for hours without a break can be harmful, some experts say.&lt;/p&gt;&lt;blockquote readability=&quot;6&quot;&gt;&lt;p&gt; People who worked more than 11 hours a day were almost 2.5 times more likely to have a major depressive episode than those who worked seven to eight &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;“The idea that you can indefinitely stretch out your deep focus and productivity time to these arbitrary limits is really wrong. It’s self-defeating,” says research scientist Andrew Smart, author of &lt;a href=&quot;http://www.orbooks.com/catalog/autopilot/&quot;&gt;Autopilot&lt;/a&gt;. “If you’re constantly putting yourself into this cognitive debt, where your physiology is saying ‘I need a break’ but you keep pushing yourself, you get this low-level stress response that’s chronic – and, over time, extraordinarily dangerous.”&lt;strong&gt; &lt;br/&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;One meta-analysis found that &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pubmed/22952309&quot;&gt;long working hours increased the risk of coronary heart disease by 40%&lt;/a&gt; – almost as much as smoking (50%). Another found that people who worked long hours had a &lt;a href=&quot;http://www.thelancet.com/journals/lancet/article/PIIS0140-6736(15)60295-1/abstract&quot;&gt;significantly higher risk of stroke&lt;/a&gt;, while people who worked more than 11 hours a day &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3266289/&quot;&gt;were almost 2.5 times more likely to have a major depressive episode&lt;/a&gt; than those who worked seven to eight.&lt;/p&gt;&lt;p&gt;In Japan, this has led to the disturbing trend of &lt;a href=&quot;http://www.bbc.com/capital/story/20160912-is-there-such-thing-as-death-from-overwork&quot;&gt;karoshi, or death by overwork&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you’re wondering if this means that you might want to consider taking that long-overdue holiday, the answer may be yes. &lt;a href=&quot;http://www.sciencedirect.com/science/article/pii/S1878764917300426&quot;&gt;One study of businessmen in Helsinki&lt;/a&gt; found that over 26 years, executives and businessmen who took fewer holidays in midlife predicted both earlier deaths and worse health in old age.&lt;/p&gt;&lt;p&gt;Holidays also can literally pay off. &lt;a href=&quot;https://hbr.org/2016/07/the-data-driven-case-for-vacation&quot;&gt;One study of more than 5,000 full-time American workers&lt;/a&gt; found that people who took fewer than 10 of their paid holiday days a year had a little more than a one-in-three chance of getting a pay rise or a bonus over three years. People who took more than 10 days? A two in three chance.&lt;strong&gt; &lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Productivity provenance&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;It’s easy to think that efficiency and productivity is an entirely new obsession. But philosopher Bertrand Russell would have disagreed.&lt;/p&gt;&lt;p&gt;“It will be said that while a little leisure is pleasant, men would not know how to fill their days if they had only four hours’ work out of the 24,” &lt;a href=&quot;https://harpers.org/archive/1932/10/in-praise-of-idleness/&quot;&gt;Russell wrote&lt;/a&gt; in 1932, adding, “it would not have been true at any earlier period. There was formerly a capacity for light-heartedness and play which has been to some extent inhibited by the cult of efficiency. The modern man thinks that everything ought to be done for the sake of something else, and never for its own sake.”&lt;/p&gt;&lt;blockquote readability=&quot;7&quot;&gt;&lt;p&gt; It will be said that while a little leisure is pleasant, men would not know how to fill their days if they had only four hours’ work out of the 24 – Bertrand Russell &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;That said, some of the world’s most creative, productive people realised the importance of doing less. They had a strong work ethic – but also remained dedicated to rest and play.&lt;/p&gt;&lt;p&gt;“Work on one thing at a time until finished,” wrote artist and writer Henry Miller in his &lt;a href=&quot;https://www.brainpickings.org/index.php/2012/02/22/henry-miller-on-writing/&quot;&gt;11 commandments on writing&lt;/a&gt;. “Stop at the appointed time!... Keep human! See people, go places, drink if you feel like it.”  &lt;/p&gt;&lt;p&gt;Even US founding father, Benjamin Franklin, a model of industriousness, devoted large swathes of his time to being idle. Every day he had a two-hour lunch break, free evenings and a full night’s sleep. Instead of working non-stop at his career as a printer, which paid the bills, he spent “huge amounts of time” on hobbies and socialising. “In fact, the very interests that took him away from his primary profession led to so many of the wonderful things he’s known for, like inventing the Franklin stove and the lightning rod,” writes Davis.&lt;/p&gt;&lt;p&gt;Even on a global level, &lt;a href=&quot;https://www.hongkiat.com/blog/vacation-time-vs-productivity/&quot;&gt;there is no clear correlation&lt;/a&gt; between a country’s productivity and average working hours. &lt;a href=&quot;http://stats.oecd.org/&quot;&gt;With a 38.6-hour work week&lt;/a&gt;, for example, the average US employee works 4.6 hours a week longer than a Norwegian. But by GDP, Norway’s workers contribute the equivalent of $78.70 per hour – compared to the US’s $69.60.&lt;/p&gt;&lt;blockquote readability=&quot;6&quot;&gt;&lt;p&gt; The very interests that took him away from his primary profession led to so many of the wonderful things he’s known for - Josh Davis &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;As for Italy, that home of &lt;em&gt;il&lt;/em&gt; &lt;em&gt;dolce far niente? &lt;/em&gt;With an average 35.5-hour work week, it produces almost 40% more per hour than Turkey, where people work an average of 47.9 hours per week. It even edges the United Kingdom, where people work 36.5 hours.&lt;/p&gt;&lt;p&gt;All of those coffee breaks, it seems, may not be so bad.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Brain wave&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://blog.bufferapp.com/optimal-work-time-how-long-should-we-work-every-day-the-science-of-mental-strength&quot;&gt;The reason we have eight-hour work days&lt;/a&gt; at all was because companies found that cutting employees’ hours had the reverse effect they expected: it upped their productivity.&lt;/p&gt;&lt;p&gt;During the Industrial Revolution, 10-to-16-hour days were normal. Ford was the first company to experiment with an eight-hour day – and found its workers were more productive not only per hour, but overall. Within two years, their profit margins doubled.&lt;/p&gt;&lt;blockquote readability=&quot;7&quot;&gt;&lt;p&gt; One survey of almost 2,000 full-time office workers in the UK found that people were only productive for 2 hours and 53 minutes out of an eight-hour day &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;If eight-hour days are better than 10-hour ones, could even shorter working hours be even better? Perhaps. For people over 40, research found that &lt;a href=&quot;http://www.bbc.com/capital/story/20160714-is-full-time-work-bad-for-our-brains&quot;&gt;a 25-hour work week may be optimal for cognition&lt;/a&gt;, while when Sweden &lt;a href=&quot;http://www.bbc.co.uk/news/business-38843341&quot;&gt;recently experimented with six-hour work days&lt;/a&gt;, it found that employees had better health and productivity.&lt;/p&gt;&lt;p&gt;This seems borne out by how people behave during the working day. &lt;a href=&quot;https://www.vouchercloud.com/blog/office-worker-productivity/&quot;&gt;One survey&lt;/a&gt; of almost 2,000 full-time office workers in the UK found that people were only productive for 2 hours and 53 minutes out of an eight-hour day. The rest of the time was spent checking social media, reading the news, having non-work-related chats with colleagues, eating – and even searching for new jobs.&lt;/p&gt;&lt;blockquote readability=&quot;7&quot;&gt;&lt;p&gt; When we’re pushing ourselves to the edge of our capabilities, we need more breaks than we think. Most people can only handle an hour of deliberate practice without taking a rest &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;We can focus for an even shorter period of time when we’re pushing ourselves to the edge of our capabilities. Researchers like Stockholm University psychologist K Anders Ericsson have found that when engaging in the kind of ‘deliberate practice’ necessary to truly master any skill, we need more breaks than we think. &lt;a href=&quot;http://www.skillteam.se/wp-content/uploads/2011/12/Ericsson_delib_pract.pdf&quot;&gt;Most people can only handle an hour&lt;/a&gt; without taking a rest. And many at the top, like elite musicians, authors and athletes, never dedicate more than five hours a day consistently to their craft.&lt;/p&gt;&lt;p&gt;The other practice they share? Their “increased tendency to take recuperative naps,” Ericsson writes – one way, of course, to rest both brain and body.&lt;/p&gt;&lt;p&gt;Other studies have also found that &lt;a href=&quot;http://news.illinois.edu/WebsandThumbs/Lleras,Alejandro/Lleras_sdarticle-17.pdf&quot;&gt;taking short breaks&lt;/a&gt; from a task helped participants maintain their focus and continue performing at a high level. Not taking breaks made their performance worse.&lt;/p&gt;&lt;strong&gt; &lt;br/&gt;&lt;/strong&gt;&lt;p&gt;&lt;strong&gt;Active rest&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;But ‘rest’, as some researchers point out, isn’t necessarily the best word for what we’re doing when we think we’re doing nothing.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.bbc.com/future/story/20151106-why-we-should-stop-worrying-about-our-wandering-minds&quot;&gt;As we’ve written about before&lt;/a&gt;, the part of the brain that activates when you’re doing ‘nothing’, known as the default-mode network (DMN), plays a crucial role in &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pubmed/17141608&quot;&gt;memory consolidation&lt;/a&gt; and &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pubmed/17188554/&quot;&gt;envisioning the future&lt;/a&gt;. It’s also the area of the brain that activates when people are &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pubmed/15006683/&quot;&gt;watching others&lt;/a&gt;, &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pubmed/15084488/&quot;&gt;thinking about themselves&lt;/a&gt;, &lt;a href=&quot;http://www.tandfonline.com/doi/abs/10.1080/03057240.2016.1262834&quot;&gt;making a moral judgment&lt;/a&gt; or &lt;a href=&quot;https://doi.org/10.1196/annals.1440.011&quot;&gt;processing other people’s emotions&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In other words, if this network were switched off, we might struggle to remember, foresee consequences, grasp social interactions, understand ourselves, act ethically or empathise with others – all of the things that make us not only functional in the workplace, but in life.&lt;/p&gt;&lt;p&gt;“It helps you recognise the deeper importance of situations. It helps you make meaning out of things. When you’re not making meaning out of things, you’re just reacting and acting in the moment, and you’re subject to many kinds of cognitive and emotional maladaptive behaviours and beliefs,” says Mary Helen Immordino-Yang, a neuroscientist and researcher at the University of Southern California’s Brain and Creativity Institute.&lt;/p&gt;&lt;blockquote readability=&quot;9&quot;&gt;&lt;p&gt; If, like Archimedes, you got your last good idea while in the bath or on a stroll, you have your biology to thank &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;We also wouldn’t be able to come up with new ideas or connections. The birthplace of creativity, the DMN lights up when you’re &lt;a href=&quot;http://www.tandfonline.com/doi/abs/10.1080/10400410903579494&quot;&gt;making associations&lt;/a&gt; between seemingly unrelated subjects or &lt;a href=&quot;http://www.sciencedirect.com/science/article/pii/S1053811911008950?via%3Dihub&quot;&gt;coming up&lt;/a&gt; &lt;a href=&quot;http://www.sciencedirect.com/science/article/pii/S1053811910008244?via%3Dihub&quot;&gt;with&lt;/a&gt; &lt;a href=&quot;http://www.sciencedirect.com/science/article/pii/S1053811911008950?via%3Dihub&quot;&gt;original ideas&lt;/a&gt;. It is also the place where your ‘ah-ha’ moments lurk – which means if, like Archimedes, you got your last good idea while in the bath or on a stroll, you have your biology to thank.&lt;/p&gt;&lt;p&gt;Perhaps most importantly of all, if we don’t take time to turn our attention inward, we lose a crucial element of happiness.&lt;/p&gt;&lt;p&gt;“We’re just doing things without making meaning out of it a lot of the time,” Immordino-Yang says. “When you don’t have the ability to embed your actions into a broader cause, they feel purposeless over time, and empty, and not connected to your broader sense of self. And we know that not having a purpose over time is connected to not having optimal psychological and physiological health.”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Monkey mind&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;But as anyone who has tried meditation knows, doing nothing is surprisingly difficult. How many of us, after 30 seconds of downtime, reach for our phones?&lt;/p&gt;&lt;p&gt;In fact, it makes us so uncomfortable that we’d rather hurt ourselves. Literally. Across 11 different studies, researchers found that &lt;a href=&quot;http://science.sciencemag.org/content/345/6192/75.full.pdf&quot;&gt;participants would rather do anything&lt;/a&gt; – even administer themselves electric shocks – instead of nothing. And it wasn’t as if they were asked to sit still for long: between six and 15 minutes.&lt;/p&gt;&lt;p&gt;The good news is that you don’t have to do absolutely nothing to reap benefits. It’s true that rest is important. But so is active reflection, chewing through an issue you have or thinking about an idea.&lt;/p&gt;&lt;p&gt;In fact, anything that requires visualising hypothetical outcomes or imagined scenarios – like discussing a problem with friends, or getting lost in a good book – also helps, Immordino-Yang says. If you’re purposeful, you even can engage your DMN if you’re looking at social media.&lt;/p&gt;&lt;p&gt;“If you’re just looking at a pretty photo, it’s de-activated. But if you’re pausing and allowing yourself to internally riff on the broader story of why that person in the photo is feeling that way, crafting a narrative around it, then you may very well be activating those networks,” she says.&lt;/p&gt;&lt;blockquote readability=&quot;7&quot;&gt;&lt;p&gt; Even taking just one walk, preferably outside, has been proven to significantly increase creativity &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;It also doesn’t take much time to undo the detrimental effects of constant activity. When both adults and children were sent outdoors, without their devices, for four days, their &lt;a href=&quot;http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0051474&quot;&gt;performance on a task&lt;/a&gt; that measured both creativity and problem-solving improved by 50%. &lt;a href=&quot;http://www.apa.org/pubs/journals/releases/xlm-a0036577.pdf&quot;&gt;Even taking just one walk&lt;/a&gt;, preferably outside, has been proven to significantly increase creativity.&lt;/p&gt;&lt;p&gt;Another highly effective method of repairing the damage is meditation: as little as a &lt;a href=&quot;https://behavioralandbrainfunctions.biomedcentral.com/articles/10.1186/1744-9081-10-9&quot;&gt;week of practice&lt;/a&gt; for subjects who never meditated before, or a &lt;a href=&quot;http://psycnet.apa.org/record/2016-23928-001&quot;&gt;single session&lt;/a&gt; for experienced practitioners, can improve creativity, mood, &lt;a href=&quot;https://www.theatlantic.com/health/archive/2013/05/study-meditation-improves-memory-attention/275564/&quot;&gt;memory and focus&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Any other tasks that don’t require 100% concentration also can help, like knitting or doodling. As Virginia Woolf wrote in a Room of One’s Own: “Drawing pictures was an idle way of finishing an unprofitable morning’s work. Yet it is in our idleness, in our dreams, that the submerged truth sometimes comes to the top.”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Time out&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Whether it’s walking away from your desk for 15 minutes or logging out of your inbox for the night, part of our struggle is control – the fear that if we relax a grip for a moment, everything will come crashing down.&lt;/p&gt;&lt;p&gt;That’s all wrong, says poet, entrepreneur and life coach Janne Robinson. “The metaphor I like to use is of a fire. We start a business, and then after a year, it’s like, when can we take a week off, or hire someone to come in? Most of us don’t trust someone to come in for us. We’re like, ‘The fire will go out’,” she says.&lt;/p&gt;&lt;p&gt;“What if we just trusted that those embers are so hot, we can walk away, someone can throw a log on and it’ll burst into flames?”&lt;/p&gt;&lt;p&gt;That isn’t easy for those of us who feel like we have to constantly ‘do’. But in order to do more, it seems, we may have to become comfortable with doing less.&lt;/p&gt;&lt;p&gt;&lt;em&gt;To comment on this story or anything else you have seen on BBC Capital, please head over to our&lt;/em&gt; &lt;a href=&quot;https://www.facebook.com/BBCCapital&quot;&gt;&lt;em&gt;Facebook&lt;/em&gt;&lt;/a&gt;&lt;em&gt; page or message us on &lt;/em&gt;&lt;a href=&quot;https://twitter.com/BBC_Capital&quot;&gt;&lt;em&gt;Twitter&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;If you liked this story, sign up for the weekly bbc.com features &lt;/em&gt;&lt;a href=&quot;http://pages.emails.bbc.com/subscribe/&quot;&gt;&lt;em&gt;newsletter&lt;/em&gt;&lt;/a&gt;&lt;em&gt; called &quot;If You Only Read 6 Things This Week&quot;. A handpicked selection of stories from BBC Future, Culture, Capital and Travel, delivered to your inbox every Friday.&lt;/em&gt;&lt;/p&gt;
                        </description>
<pubDate>Tue, 05 Dec 2017 02:25:16 +0000</pubDate>
<dc:creator>bigben00763</dc:creator>
<og:title>The compelling case for working a lot less </og:title>
<og:type>article</og:type>
<og:url>http://www.bbc.com/capital/story/20171204-the-compelling-case-for-working-a-lot-less</og:url>
<og:description>Mastering 'active rest' is far harder than it looks, but there are good reasons why we should keep working at it</og:description>
<og:image>http://ichef.bbci.co.uk/wwfeatures/live/624_351/images/live/p0/5q/21/p05q21fq.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.bbc.com/capital/story/20171204-the-compelling-case-for-working-a-lot-less</dc:identifier>
</item>
<item>
<title>Apple CEO backs China’s ‘open’ Internet vision as censorship reaches new heights</title>
<link>https://www.washingtonpost.com/news/worldviews/wp/2017/12/04/apple-ceo-backs-chinas-vision-of-an-open-internet-as-censorship-reaches-new-heights/</link>
<guid isPermaLink="true" >https://www.washingtonpost.com/news/worldviews/wp/2017/12/04/apple-ceo-backs-chinas-vision-of-an-open-internet-as-censorship-reaches-new-heights/</guid>
<description>&lt;div class=&quot;inline-content inline-photo inline-photo-normal&quot;&gt; &lt;img class=&quot;unprocessed placeholder&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=https://img.washingtonpost.com/rf/image_960w/2010-2019/Wires/Images/2017-12-03/AP/China_World_Internet_18716-0fd25.jpg&amp;amp;w=1484&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=https://img.washingtonpost.com/rf/image_960w/2010-2019/Wires/Images/2017-12-03/AP/China_World_Internet_18716-0fd25.jpg&amp;amp;w=480&quot; data-raw-src=&quot;https://img.washingtonpost.com/rf/image_960w/2010-2019/Wires/Images/2017-12-03/AP/China_World_Internet_18716-0fd25.jpg&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=https://img.washingtonpost.com/rf/image_960w/2010-2019/Wires/Images/2017-12-03/AP/China_World_Internet_18716-0fd25.jpg&amp;amp;w=60&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;pb-caption&quot;&gt;Apple's CEO Tim Cook on Sunday attends the opening ceremony of the Fourth World Internet Conference in Wuzhen town in Tongxiang, East China's Zhejiang province. (Chinatopix/AP)&lt;/span&gt;&lt;/div&gt;&lt;p&gt;BEIJING — Reading headlines from the World Internet Conference in China, the casual reader might have come away a little confused. China was &lt;a href=&quot;https://news.sky.com/story/chinese-president-xi-hints-at-more-open-cyberspace-11154710&quot;&gt;opening its doors&lt;/a&gt; to the global Internet, some media outlets optimistically declared, while others said Beijing was &lt;a href=&quot;https://www.ft.com/content/dad122c8-d7e8-11e7-a039-c64b1c09b482&quot;&gt;defending its system&lt;/a&gt; of censorship and state control.&lt;/p&gt;
&lt;p&gt;And perhaps most confusing of all, Apple’s CEO Tim Cook stood up and celebrated China’s vision of an open Internet.&lt;/p&gt;
&lt;p&gt;Say what?&lt;/p&gt;
&lt;p&gt;China has more than 730 million Internet users, boast the largest e-commerce market in the world and consumers who enthusiastically embrace mobile digital technology. But it censors many foreign news websites and keeps most Western social media companies out.&lt;/p&gt;
&lt;p&gt;The World Internet Conference held in the eastern Chinese city of Wuzhen is meant to promote China’s vision of “cyber-sovereignty” — the idea that governments all over the world should have the right to control what appears on the Internet in their countries.&lt;/p&gt;
&lt;p&gt;In practice, in China, that amounts to the largest system of censorship and digital surveillance in the world, where criticism of the Communist Party is sharply curtailed and can even land you in jail.&lt;/p&gt;
&lt;p&gt;But that wasn’t mentioned when Cook delivered a keynote speech on the opening day of the gathering Sunday.&lt;/p&gt;
&lt;p&gt;“The theme of this conference — developing a digital economy for openness and shared benefits — is a vision we at Apple share,” Cook said, in &lt;a href=&quot;https://www.bloomberg.com/news/articles/2017-12-03/internet-must-have-security-humanity-apple-chief-tells-china&quot;&gt;widely reported remarks&lt;/a&gt;. “We are proud to have worked alongside many of our partners in China to help build a community that will join a common future in cyberspace.”&lt;/p&gt;
&lt;p&gt;Chinese media welcomed Cook’s endorsement, with the nationalist Global Times declaring in a headline that “&lt;a href=&quot;http://www.globaltimes.cn/content/1078509.shtml&quot;&gt;Consensus grows at Internet conference&lt;/a&gt;.”&lt;/p&gt;
&lt;p&gt;Alongside Cook in endorsing China’s digital vision were officials from countries such as Saudi Arabia and Serbia, it noted.&lt;/p&gt;
&lt;p&gt;Free speech and human rights advocates were less impressed.&lt;/p&gt;
&lt;p&gt;“Cook’s appearance lends credibility to a state that aggressively censors the internet, throws people in jail for being critical about social ills, and is building artificial intelligence systems that monitors everyone and targets dissent,” Maya Wang at Human Rights Watch in Hong Kong wrote in an email.&lt;/p&gt;
&lt;p&gt;“The version of cyberspace the Chinese government is building is a decidedly dystopian one, and I don’t think anyone would want to share in this ‘common future.’ Apple should have spoken out against it, not endorsed it.”&lt;/p&gt;
&lt;p&gt;And it wasn’t just Cook who some critics accused of indulging in a little doublespeak.&lt;/p&gt;
&lt;p&gt;China’s President Xi Jinping opened the conference with written remarks that led to a flurry of arguably misleading headlines.&lt;/p&gt;
&lt;p&gt;“The development of China’s cyberspace is entering a fast lane,” he said in remarks read out by an official. “China's doors will only become more and more open.”&lt;/p&gt;
&lt;p&gt;Yet the audience was soon reminded that nothing that could possibly threaten the Communist Party would be allowed through those supposedly open doors.&lt;/p&gt;
&lt;p&gt;China has tightened censorship and controls of cyberspace under Xi, with a new cybersecurity law requiring foreign firms to store data locally and submit to domestic surveillance.&lt;/p&gt;
&lt;p&gt;Wang Huning, who serves as a member of the Communist Party’s elite standing committee and is Xi’s top ideologue, defended China’s system and even suggested that more controls could be in the offing.&lt;/p&gt;
&lt;p&gt;“China stands ready to develop new rules and systems of internet governance to serve all parties and counteract current imbalances,” he said to the conference, &lt;a href=&quot;https://www.reuters.com/article/us-china-cyber/chinas-xi-says-country-will-not-close-door-to-global-internet-idUSKBN1DX01S?il=0&quot;&gt;according to Reuters.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But it was Cook’s words that prompted the strongest reaction, coming after Apple has also come under fire for its actions in China.&lt;/p&gt;
&lt;p&gt;In a &lt;a href=&quot;https://www.leahy.senate.gov/imo/media/doc/Apple%2011212017.pdf&quot;&gt;written response to questions&lt;/a&gt; from Senators Patrick J. Leahy (D-Vt.) and Ted Cruz of (R-Tex.) last month, Apple said that it had removed 674 VPN apps from its app store in China this year — tools that allow users to circumvent censorship by routing traffic abroad — to comply with local laws. Skype was also removed from Apple’s China store, the &lt;a href=&quot;https://www.nytimes.com/2017/11/21/business/skype-app-china.html&quot;&gt;New York Times reported.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In August, Cook said Apple hadn’t wanted to remove the apps but had to follow local laws wherever it does business.&lt;/p&gt;
&lt;p&gt;“We strongly believe that participating in markets and bringing benefits to consumers is in the best interests of folks there and in other countries as well,” Cook said. “We believe in engaging in governments even when we disagree.”&lt;/p&gt;
&lt;p&gt;But Greatfire.org, a group that combats Chinese censorship, argued Apple’s decision to agree to censorship put pressure on other companies to follow suit and could even mean that Chinese citizens could ultimately be subjected to Chinese censorship when they travel abroad.&lt;/p&gt;
&lt;p&gt;“It is undeniable that Tim Cook and Xi Jinping have a shared vision of the internet. Xi wants to be able to control all information and silence those who may threaten his leadership. Cook helps him with vast, unaccountable, implementation of censorship across Apple products,” the group wrote to The Washington Post.&lt;/p&gt;
&lt;p&gt;Critics saw simple business calculations in Cook’s appearance in Wuzhen.&lt;/p&gt;
&lt;p&gt;“&lt;a href=&quot;https://www.bloomberg.com/news/articles/2017-12-04/cook-kisses-the-ring&quot;&gt;Cook Kisses the Ring&lt;/a&gt;,’ Bloomberg columnist Tim Culpan wrote, arguing that Cook was “desperate to hold onto any remaining scraps of the China market” in the face of stiff competition from local rivals.&lt;/p&gt;
&lt;p&gt;The head honchos of China’s main digital and Internet companies, Huawei, Baidu and Tencent, “ought to have been grinning like Cheshire cats,” Culpan added, since censorship has kept foreign companies like Facebook, Google and Twitter out of China and served as a “handy little tool of trade protectionism.”&lt;/p&gt;
&lt;p&gt;Nor did it matter if Cook’s tongue was in his cheek, for his presence at the conference, along with Google’s Sundar Pichai and CISCO Systems’ Chuck Robbins, not only gave legitimacy to the authorities but also sent a signal to domestic Chinese rivals that their turf is safe, Culpan wrote.&lt;/p&gt;
&lt;p&gt;Rights group Freedom House last month branded China the &lt;a href=&quot;https://freedomhouse.org/report/freedom-net/freedom-net-2017&quot;&gt;worst abuser of Internet freedom&lt;/a&gt; among 65 countries surveyed, followed by Syria and Ethiopia.&lt;/p&gt;
&lt;p&gt;But in Wuzhen, that report was not about to be discussed.&lt;/p&gt;
&lt;p&gt;Instead, a top state-backed Chinese think tank declared that the host nation ranked fifth among 38 nations globally in standards of cyber governance, as it called for a ‘democratic’ Internet governance system to eradicate inequalities that it said had marginalized developing nations.&lt;/p&gt;
&lt;p&gt;“We should promote the establishment of a multinational, democratic and transparent global internet governance system,” the Chinese Academy of Cyberspace Studies said in a report, &lt;a href=&quot;https://www.reuters.com/article/us-china-cyber/china-think-tank-calls-for-democratic-internet-governance-idUSKBN1DY0QN&quot;&gt;according to Reuters.&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 05 Dec 2017 01:51:57 +0000</pubDate>
<dc:creator>tonyztan</dc:creator>
<og:type>article</og:type>
<og:url>https://www.washingtonpost.com/news/worldviews/wp/2017/12/04/apple-ceo-backs-chinas-vision-of-an-open-internet-as-censorship-reaches-new-heights/</og:url>
<og:image>https://www.washingtonpost.com/rf/image_1484w/2010-2019/Wires/Images/2017-12-03/AP/China_World_Internet_18716-0fd25.jpg?t=20170517</og:image>
<og:title>Apple CEO backs China’s vision of an ‘open’ Internet as censorship reaches new heights</og:title>
<og:description>Apple chief is criticized for putting business before principles and legitimizing Chinese censorship.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.washingtonpost.com/news/worldviews/wp/2017/12/04/apple-ceo-backs-chinas-vision-of-an-open-internet-as-censorship-reaches-new-heights/</dc:identifier>
</item>
<item>
<title>Fewer toys at once may help toddlers to focus better and play more creatively</title>
<link>http://www.sciencedirect.com/science/article/pii/S0163638317301613</link>
<guid isPermaLink="true" >http://www.sciencedirect.com/science/article/pii/S0163638317301613</guid>
<description>&lt;div readability=&quot;13.971830985915&quot;&gt;


&lt;div class=&quot;publicationCover cover2&quot;&gt;&lt;a querystr=&quot;?zone=publicationLogo&quot; class=&quot;cLink&quot; href=&quot;http://www.sciencedirect.com/science/journal/01636383/50/supp/C&quot;&gt;&lt;img alt=&quot;Cover image&quot; src=&quot;https://ars.els-cdn.com/content/image/S01636383.gif&quot; class=&quot;toprightlogo&quot;/&gt;&lt;noscript&gt;
&lt;p&gt;&lt;img alt=&quot;Cover image&quot; src=&quot;https://ars.els-cdn.com/content/image/S01636383.gif&quot; class=&quot;toprightlogo&quot;/&gt;&lt;/p&gt;
&lt;/noscript&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;frag_2&quot; data-fid=&quot;2&quot; readability=&quot;41&quot;&gt;&lt;div class=&quot;abstract svAbstract   abstractHighlights&quot; data-etype=&quot;ab&quot;&gt;
&lt;h2 class=&quot;secHeading&quot; id=&quot;author-highlightsabs00051&quot;&gt;Highlights&lt;/h2&gt;

&lt;dl class=&quot;listitem&quot; id=&quot;list_lis0005&quot; readability=&quot;0&quot;&gt;&lt;dt class=&quot;label&quot;&gt;•&lt;/dt&gt;
&lt;dd readability=&quot;-1&quot;&gt;
&lt;p id=&quot;par0005&quot;&gt;An abundance of toys present reduced quality of toddlers’ play.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;label&quot;&gt;•&lt;/dt&gt;
&lt;dd readability=&quot;-1&quot;&gt;
&lt;p id=&quot;par0010&quot;&gt;Fewer toys at once may help toddlers to focus better and play more creatively.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;label&quot;&gt;•&lt;/dt&gt;
&lt;dd readability=&quot;-1&quot;&gt;
&lt;p id=&quot;par0015&quot;&gt;This can done in many settings to support development and promote healthy play.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;
&lt;div class=&quot;abstract svAbstract&quot; data-etype=&quot;ab&quot; readability=&quot;23&quot;&gt;
&lt;h2 class=&quot;secHeading&quot; id=&quot;authorabs00101&quot;&gt;Abstract&lt;/h2&gt;
&lt;p id=&quot;spar0040&quot;&gt;We tested the hypothesis that an environment with fewer toys will lead to higher quality of play for toddlers. Each participant (n = 36) engaged in supervised, individual free play sessions under two conditions: &lt;em&gt;Four Toy&lt;/em&gt; and &lt;em&gt;Sixteen To&lt;/em&gt;y. With fewer toys, participants had fewer incidences of toy play, longer durations of toy play, and played with toys in a greater variety of ways (&lt;em&gt;Z&lt;/em&gt; = −4.448, &lt;em&gt;p &amp;lt;&lt;/em&gt; 0.001, &lt;em&gt;r&lt;/em&gt; = −0.524; &lt;em&gt;Z&lt;/em&gt; = 2.828, &lt;em&gt;p &lt;/em&gt;= 0.005, &lt;em&gt;r &lt;/em&gt;= 0.333; and &lt;em&gt;Z&lt;/em&gt; = 4.676, &lt;em&gt;p &amp;lt;&lt;/em&gt; 0.001, &lt;em&gt;r &lt;/em&gt;= 0.55, respectively). This suggests that when provided with fewer toys in the environment, toddlers engage in longer periods of play with a single toy, allowing better focus to explore and play more creatively. This can be offered as a recommendation in many natural environments to support children’s development and promote healthy play.&lt;/p&gt;
&lt;/div&gt;




&lt;p class=&quot;copyright&quot;&gt;© 2017 Elsevier Inc. All rights reserved.&lt;/p&gt;

&lt;/div&gt;</description>
<pubDate>Mon, 04 Dec 2017 18:45:24 +0000</pubDate>
<dc:creator>antman</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.sciencedirect.com/science/article/pii/S0163638317301613</dc:identifier>
</item>
<item>
<title>Using Rust in Mercurial</title>
<link>https://www.mercurial-scm.org/wiki/OxidationPlan#</link>
<guid isPermaLink="true" >https://www.mercurial-scm.org/wiki/OxidationPlan#</guid>
<description>&lt;span class=&quot;anchor&quot; id=&quot;top&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-1&quot;&gt;&lt;/span&gt;


&lt;span class=&quot;anchor&quot; id=&quot;line-2&quot;&gt;&lt;/span&gt;
&lt;p class=&quot;line874&quot;&gt;This page describes the plan and status for leveraging the Rust programming language in Mercurial. &lt;span class=&quot;anchor&quot; id=&quot;line-3&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-4&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;Why_use_Rust.3F&quot;&gt;Why use Rust?&lt;/h2&gt;
&lt;span class=&quot;anchor&quot; id=&quot;line-5&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-6&quot;&gt;&lt;/span&gt;
&lt;p class=&quot;line874&quot;&gt;Today, Mercurial is a Python application. It uses Python C extensions in various places to achieve better performance. &lt;span class=&quot;anchor&quot; id=&quot;line-7&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-8&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line874&quot;&gt;There are many advantages to being a Python application. But, there are significant disadvantages. &lt;span class=&quot;anchor&quot; id=&quot;line-9&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-10&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line874&quot;&gt;Performance is a significant pain point with Python. There are multiple facets to the performance problem: &lt;span class=&quot;anchor&quot; id=&quot;line-11&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-12&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Startup overhead &lt;span class=&quot;anchor&quot; id=&quot;line-13&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;General performance overhead compared to *native* code &lt;span class=&quot;anchor&quot; id=&quot;line-14&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;GIL interfering with parallel execution &lt;span class=&quot;anchor&quot; id=&quot;line-15&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-16&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;line862&quot;&gt;It takes several dozen milliseconds to start a Python interpreter and load the Mercurial Python modules. If you have many extensions loaded, it could take well over 100ms just to effectively get to a Mercurial command's main function. Reports of over 250ms are known. While the command itself may complete in mere milliseconds, Python overhead has already made &lt;tt class=&quot;backtick&quot;&gt;hg&lt;/tt&gt; seem non-instantaneous to end-users. &lt;span class=&quot;anchor&quot; id=&quot;line-17&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-18&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;A few years ago, we measured that CPython interpreter startup overhead amounted to &lt;a class=&quot;https&quot; href=&quot;https://mail.python.org/pipermail/python-dev/2014-May/134528.html&quot;&gt;10-18% of the run time of Mercurial's test harness&lt;/a&gt;. 100ms may not sound like a lot. But it is enough to give the perception that Mercurial is slower than tools like Git (which can run commands in under 10ms). &lt;span class=&quot;anchor&quot; id=&quot;line-19&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-20&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;There are also situations like querying &lt;tt class=&quot;backtick&quot;&gt;hg&lt;/tt&gt; for shell prompts that require near-instantaneous execution. &lt;span class=&quot;anchor&quot; id=&quot;line-21&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-22&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;Mercurial is also heavily scripted by tools like IDEs. We want these tools to provide results near instantaneously. If people are waiting over 100ms for results from &lt;tt class=&quot;backtick&quot;&gt;hg&lt;/tt&gt;, it makes these other tools feel sluggish. &lt;span class=&quot;anchor&quot; id=&quot;line-23&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-24&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;There are workarounds for startup overhead problems: the &lt;a href=&quot;https://www.mercurial-scm.org/wiki/CommandServer&quot;&gt;CommandServer&lt;/a&gt; (start a persistent process and issue multiple commands to it) and CHg (a C binary that speaks with a Mercurial command server and enables &lt;tt class=&quot;backtick&quot;&gt;chg&lt;/tt&gt; commands to execute without Python startup overhead). &lt;tt class=&quot;backtick&quot;&gt;chg&lt;/tt&gt;'s very existence is because we need &lt;tt class=&quot;backtick&quot;&gt;hg&lt;/tt&gt; to be a native binary in order to avoid Python startup overhead. If &lt;tt class=&quot;backtick&quot;&gt;hg&lt;/tt&gt; weren't a Python script, we wouldn't need &lt;tt class=&quot;backtick&quot;&gt;chg&lt;/tt&gt; to be a separate program. &lt;span class=&quot;anchor&quot; id=&quot;line-25&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-26&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;Python is also substantially slower than native code. &lt;a class=&quot;nonexistent&quot; href=&quot;https://www.mercurial-scm.org/wiki/PyPy&quot;&gt;PyPy&lt;/a&gt; can deliver substantially better performance than CPython. And some workloads with &lt;a class=&quot;nonexistent&quot; href=&quot;https://www.mercurial-scm.org/wiki/PyPy&quot;&gt;PyPy&lt;/a&gt; might even be faster than native code due to JIT. But overall, Python is slower than native code. &lt;span class=&quot;anchor&quot; id=&quot;line-27&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-28&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;But even with &lt;a class=&quot;nonexistent&quot; href=&quot;https://www.mercurial-scm.org/wiki/PyPy&quot;&gt;PyPy&lt;/a&gt;'s magical performance, we still have the GIL. Python doesn't allow you to execute CPU-bound Python code on multiple threads. If you are CPU bound, you need to offload that work to an extension (which releases the GIL when it executes hot code) or you spawn multiple processes. Since Mercurial needs to run on Windows (where new process overhead is ~10x worse than POSIX and is a platform optimized for spawning threads - not processes), many of the potential speedups we can realize via concurrency are offset on Windows by new process overhead and Python startup overhead. We need thread-level concurrency on Windows to help with shorter-lived CPU-bound workloads. This includes things like revlog reading (which happens on nearly every Mercurial operation). &lt;span class=&quot;anchor&quot; id=&quot;line-29&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-30&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line874&quot;&gt;In addition to performance concerns, Python is also hindering us because it is a dynamic programming language. Mercurial is a large project by Python standards. Large projects are harder to maintain. Using a statically typed programming language that finds bugs at compile time will enable us to make wide-sweeping changes more fearlessly. This will improve Mercurial's development velocity. &lt;span class=&quot;anchor&quot; id=&quot;line-31&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-32&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line874&quot;&gt;Today, when performance is an issue, Mercurial developers currently turn to C. But we treat C as a measure of last resort because it is just too brittle. It is too easy to introduce security vulnerabilities, memory leaks, etc. On top of vanilla C, the Python C API is somewhat complicated. It takes significantly longer to develop C components because the barrier to writing bug-free C is much higher. &lt;span class=&quot;anchor&quot; id=&quot;line-33&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-34&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;Furthermore, Mercurial needs to run on multiple platforms, including Windows. The &lt;em&gt;nice things&lt;/em&gt; we want to do in native code are complicated to implement in C because cross-platform C is hard. The standard library is inadequate compared to modern languages. While modern versions of C++ are nice, we still support Python 2.7 and thus need to build with MSVC 2008 on Windows. It doesn't have any of the nice features that modern versions of C++ have. Things like introducing a thread pool in our current C code would be hard. But with Rust, that support is in the standard library and &quot;just works.&quot; Having Rust's standard library is a pretty compelling advantage over C/C++ for any project, not just Mercurial. &lt;span class=&quot;anchor&quot; id=&quot;line-35&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-36&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;For Mercurial, Rust is all around a better C. It is much safer, about the same speed, and has a usable standard library and &lt;em&gt;modules&lt;/em&gt; system for easily pulling in 3rd party code. &lt;span class=&quot;anchor&quot; id=&quot;line-37&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-38&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;Desired_End_State&quot;&gt;Desired End State&lt;/h2&gt;
&lt;span class=&quot;anchor&quot; id=&quot;line-39&quot;&gt;&lt;/span&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p class=&quot;line891&quot;&gt;&lt;tt class=&quot;backtick&quot;&gt;hg&lt;/tt&gt; is a Rust binary that embeds and uses a Python interpreter when appropriate (&lt;tt class=&quot;backtick&quot;&gt;hg&lt;/tt&gt; is a Python script today) &lt;span class=&quot;anchor&quot; id=&quot;line-40&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Python code seemlessly calls out to functionality implemented in Rust &lt;span class=&quot;anchor&quot; id=&quot;line-41&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Fully self-contained Mercurial distributions are available (Python is an implementation detail / Mercurial sufficiently independent from other Python presence on system) &lt;span class=&quot;anchor&quot; id=&quot;line-42&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;The customizability and extensibility of Mercurial through extensions is not significantly weakened. &lt;span class=&quot;anchor&quot; id=&quot;line-43&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p class=&quot;line891&quot;&gt;&lt;tt class=&quot;backtick&quot;&gt;chg&lt;/tt&gt; functionality is rolled into &lt;tt class=&quot;backtick&quot;&gt;hg&lt;/tt&gt; &lt;span class=&quot;anchor&quot; id=&quot;line-44&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-45&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;Current_Status&quot;&gt;Current Status&lt;/h2&gt;
&lt;span class=&quot;anchor&quot; id=&quot;line-46&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-47&quot;&gt;&lt;/span&gt;
&lt;p class=&quot;line867&quot;&gt;&lt;em&gt;(last updated December 4 2017)&lt;/em&gt; &lt;span class=&quot;anchor&quot; id=&quot;line-48&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-49&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;Priorities_for_Oxidation&quot;&gt;Priorities for Oxidation&lt;/h2&gt;
&lt;span class=&quot;anchor&quot; id=&quot;line-55&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-56&quot;&gt;&lt;/span&gt;
&lt;p class=&quot;line874&quot;&gt;All existing C code is a priority for oxidation because we don't like maintaining C code for safety and compatibility reasons. Existing C code includes: &lt;span class=&quot;anchor&quot; id=&quot;line-57&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-58&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line874&quot;&gt;In addition, the following would be good candidates for oxidation: &lt;span class=&quot;anchor&quot; id=&quot;line-67&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-68&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;All revlog I/O (reading is more important than writing) &lt;span class=&quot;anchor&quot; id=&quot;line-69&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Working directory I/O (extracting content from revlogs/store and writing to filesystem) &lt;span class=&quot;anchor&quot; id=&quot;line-70&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;bundle2 reading and writing &lt;span class=&quot;anchor&quot; id=&quot;line-71&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;changelog reading &lt;span class=&quot;anchor&quot; id=&quot;line-72&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;revsets &lt;span class=&quot;anchor&quot; id=&quot;line-73&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;All filesystem I/O (allows us to use Windows APIs and properly handle filenames on Windows) &lt;span class=&quot;anchor&quot; id=&quot;line-74&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-75&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;Problems&quot;&gt;Problems&lt;/h2&gt;
&lt;span class=&quot;anchor&quot; id=&quot;line-76&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;CRT_Mismatch_on_Windows&quot;&gt;CRT Mismatch on Windows&lt;/h3&gt;
&lt;span class=&quot;anchor&quot; id=&quot;line-77&quot;&gt;&lt;/span&gt;
&lt;p class=&quot;line874&quot;&gt;Mercurial still uses Python 2.7. Python 2.7 is officially compiled with MSVC 2008 and links against vcruntime90.dll. Rust and its standard library don't support MSVC 2008. They are likely linked with something newer, like MSVC 2015 or 2017. &lt;span class=&quot;anchor&quot; id=&quot;line-78&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-79&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line874&quot;&gt;If we want compatibility with other binary Python extensions, we need to use a Python built with MSVC 2008 and linked against msvcr90.dll. &lt;span class=&quot;anchor&quot; id=&quot;line-80&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-81&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line874&quot;&gt;So, our options are: &lt;span class=&quot;anchor&quot; id=&quot;line-82&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-83&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;&lt;li&gt;Build a custom Python 2.7 distribution with modern MSVC and drop support for 3rd party binary Python 2.7 extensions. &lt;span class=&quot;anchor&quot; id=&quot;line-84&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Switch Mercurial to Python 3 and build Rust code with same toolchain as Python we target. &lt;span class=&quot;anchor&quot; id=&quot;line-85&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Mix the CRTs. &lt;span class=&quot;anchor&quot; id=&quot;line-86&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-87&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;line874&quot;&gt;#1 significantly undermines Mercurial's extensibility. Plus, Python 2.7 built for !MSVC 2008 isn't officially supported. &lt;span class=&quot;anchor&quot; id=&quot;line-88&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-89&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line874&quot;&gt;#2 is in progress. However, the timeline for officially supporting Python 3 to the point where we can transition the official distribution for it is likely too far out (2H 2018) and would hinder Rust adoption efforts. &lt;span class=&quot;anchor&quot; id=&quot;line-90&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-91&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line874&quot;&gt;That leaves mixing the CRTs. This would work by having the Rust components statically link a modern CRT while having Python dynamically load msvcr90.dll. &lt;span class=&quot;anchor&quot; id=&quot;line-92&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-93&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;Mixing CRTs is dangerous because if you attempt to perform a multipart operation with multiple CRTs, things could blow up. e.g. if you &lt;tt class=&quot;backtick&quot;&gt;malloc()&lt;/tt&gt; in CRT A and &lt;tt class=&quot;backtick&quot;&gt;free()&lt;/tt&gt; in CRT B. Or attempt to operate on &lt;tt class=&quot;backtick&quot;&gt;FILE&lt;/tt&gt; instances across CRTs. More info at &lt;a class=&quot;https&quot; href=&quot;https://docs.microsoft.com/en-us/cpp/c-runtime-library/potential-errors-passing-crt-objects-across-dll-boundaries&quot;&gt;https://docs.microsoft.com/en-us/cpp/c-runtime-library/potential-errors-passing-crt-objects-across-dll-boundaries&lt;/a&gt;. See also &lt;a class=&quot;https&quot; href=&quot;https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/crt-alphabetical-function-reference&quot;&gt;https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/crt-alphabetical-function-reference&lt;/a&gt; for a full list of CRT functions. &lt;span class=&quot;anchor&quot; id=&quot;line-94&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-95&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line874&quot;&gt;Fortunately, our exposure to the multiple CRT problem is significantly reduced because: &lt;span class=&quot;anchor&quot; id=&quot;line-96&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-97&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul readability=&quot;1.9561643835616&quot;&gt;&lt;li&gt;Rust and its standard library doesn't make heavy use of CRT primitives. &lt;span class=&quot;anchor&quot; id=&quot;line-98&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li readability=&quot;2.8963282937365&quot;&gt;
&lt;p class=&quot;line862&quot;&gt;Memory managed by Rust and Python is already being kept separate by the Python API. In Rust speak, we won't be transferring ownership of raw pointers between Rust and Python. Python's refcounting mechanism ensures all &lt;a class=&quot;nonexistent&quot; href=&quot;https://www.mercurial-scm.org/wiki/PyObject&quot;&gt;PyObject&lt;/a&gt; are destroyed by Python. The only time ownership of memory crosses the bridge is when we create something in Rust and pass it to Python. But that object will be a &lt;a class=&quot;nonexistent&quot; href=&quot;https://www.mercurial-scm.org/wiki/PyObject&quot;&gt;PyObject&lt;/a&gt; and backing memory would have been managed with the Python APIs. &lt;span class=&quot;anchor&quot; id=&quot;line-99&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p class=&quot;line862&quot;&gt;We shouldn't be using &lt;tt class=&quot;backtick&quot;&gt;FILE&lt;/tt&gt; anywhere. And I/O on an open file descriptor would likely be limited to its created context. e.g. if we open a file from Rust, we're likely not reading it from Python. &lt;span class=&quot;anchor&quot; id=&quot;line-100&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-101&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;line874&quot;&gt;We would have to keep a close eye out for CRT objects spanning multiple CRTs. We can mitigate exposure for bad patterns by establishing static analysis rules on source code. We can also examine the produced Rust binaries for symbol references and raise warnings when unwanted CRT functions are used by Rust code. &lt;span class=&quot;anchor&quot; id=&quot;line-102&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-103&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;Rust_Support&quot;&gt;Rust Support&lt;/h3&gt;
&lt;span class=&quot;anchor&quot; id=&quot;line-104&quot;&gt;&lt;/span&gt;
&lt;p class=&quot;line874&quot;&gt;Mercurial relies on other entities (like Linux distros) to package and distribute Mercurial. This means we have to consider their support for packaging programs that use Rust or else we risk losing packagers. This means we need to consider: &lt;span class=&quot;anchor&quot; id=&quot;line-105&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-106&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The minimum version of Rust to require &lt;span class=&quot;anchor&quot; id=&quot;line-107&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Whether we can use beta or nightly Rust features &lt;span class=&quot;anchor&quot; id=&quot;line-108&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-109&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;line874&quot;&gt;For official Mercurial distributions, these considerations don't exist, as we'll be giving a binary to end-users. So this topic is all about our relationship with downstream packagers. &lt;span class=&quot;anchor&quot; id=&quot;line-110&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-111&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;Packaging_Overhaul_Needed&quot;&gt;Packaging Overhaul Needed&lt;/h3&gt;
&lt;span class=&quot;anchor&quot; id=&quot;line-112&quot;&gt;&lt;/span&gt;
&lt;p class=&quot;line862&quot;&gt;If &lt;tt class=&quot;backtick&quot;&gt;hg&lt;/tt&gt; becomes a Rust binary and we want Mercurial to be a self-contained application, we'll need to overhaul our packaging mechanisms on all operating systems. &lt;span class=&quot;anchor&quot; id=&quot;line-113&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-114&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;Distributing_Python&quot;&gt;Distributing Python&lt;/h4&gt;
&lt;span class=&quot;anchor&quot; id=&quot;line-115&quot;&gt;&lt;/span&gt;
&lt;p class=&quot;line874&quot;&gt;Mercurial would need to distribute a copy of Python. &lt;span class=&quot;anchor&quot; id=&quot;line-116&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-117&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;Python insists that embedded Python load a &lt;tt class=&quot;backtick&quot;&gt;pythonXX&lt;/tt&gt; shared library. e.g. &lt;tt class=&quot;backtick&quot;&gt;python27.dll&lt;/tt&gt; or &lt;tt class=&quot;backtick&quot;&gt;libpython27.so&lt;/tt&gt;. &lt;span class=&quot;anchor&quot; id=&quot;line-118&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-119&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;We would also need to distribute a copy of the Python standard library (&lt;tt class=&quot;backtick&quot;&gt;.py&lt;/tt&gt;, &lt;tt class=&quot;backtick&quot;&gt;.pyc&lt;/tt&gt;, etc files). These could be distributed in flat form (hundreds of &lt;tt class=&quot;backtick&quot;&gt;.py&lt;/tt&gt; files) or in a zip file. (Python supports importing modules from zip files.) If we wanted to get creative, we could invent our own archive format / module loading mechanism (but this feels like unnecessary work). &lt;span class=&quot;anchor&quot; id=&quot;line-120&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-121&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;We can't prune the Python standard library of &lt;em&gt;unused&lt;/em&gt; modules because Mercurial extensions may make use of any feature in the standard library. So we'll be distributing the entire Python standard library. &lt;span class=&quot;anchor&quot; id=&quot;line-122&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-123&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;But the distribution of Python is not required: various packagers (like operating systems) would want Mercurial to use a Python provided to it. So our Rust &lt;tt class=&quot;backtick&quot;&gt;hg&lt;/tt&gt; needs to support loading a &lt;em&gt;bundled&lt;/em&gt; Python and a Python provided to it. This can likely be controlled with build-time flags. &lt;span class=&quot;anchor&quot; id=&quot;line-124&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-125&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;Windows&quot;&gt;Windows&lt;/h4&gt;
&lt;span class=&quot;anchor&quot; id=&quot;line-126&quot;&gt;&lt;/span&gt;
&lt;p class=&quot;line862&quot;&gt;Mercurial could conceptually be distributed as a .zip file. That archive would contain pre-built &lt;tt class=&quot;backtick&quot;&gt;hg.exe&lt;/tt&gt;, &lt;tt class=&quot;backtick&quot;&gt;pythonXX.dll&lt;/tt&gt;, any other shared library dependencies, a copy of the Python standard library, Mercurial Python files, and any support files. &lt;span class=&quot;anchor&quot; id=&quot;line-127&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-128&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line874&quot;&gt;Because zip files aren't user friendly, we'd likely provide a standalone .exe or .msi installer (like we do today). &lt;span class=&quot;anchor&quot; id=&quot;line-129&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-130&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;Linux&quot;&gt;Linux&lt;/h4&gt;
&lt;span class=&quot;anchor&quot; id=&quot;line-131&quot;&gt;&lt;/span&gt;
&lt;p class=&quot;line862&quot;&gt;We could provide a self-contained archive file containing &lt;tt class=&quot;backtick&quot;&gt;hg&lt;/tt&gt; binary, &lt;tt class=&quot;backtick&quot;&gt;libpython27.so&lt;/tt&gt;, and any other dependencies. We could also provide rpm, deb, etc packages for popular distributions. These would be self-contained and not dependent any many (any?) other packages. Our biggest concern here is libc compatibility. That can be solved by static linking, compiling against a sufficiently old (and compatible) libc, or providing distro-specific packages. &lt;span class=&quot;anchor&quot; id=&quot;line-132&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-133&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line874&quot;&gt;Of course, many distros will want to provide their own Mercurial package. And they will likely want Mercurial to make use of the system Python. We can and must support this. &lt;span class=&quot;anchor&quot; id=&quot;line-134&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-135&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;An issue with a self-contained distribution is loading of shared libraries. Not all operating systems and loaders may support loading of binary-relative shared libraries. We may need to hack something together that uses &lt;tt class=&quot;backtick&quot;&gt;dlopen()&lt;/tt&gt; to explicitly specify which &lt;tt class=&quot;backtick&quot;&gt;libpython27.so&lt;/tt&gt;, etc to load. &lt;span class=&quot;anchor&quot; id=&quot;line-136&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-137&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;MacOS&quot;&gt;MacOS&lt;/h4&gt;
&lt;span class=&quot;anchor&quot; id=&quot;line-138&quot;&gt;&lt;/span&gt;
&lt;p class=&quot;line862&quot;&gt;This is very similar to Linux. We may support the native application / installer mechanism to make things more user friendly. We don't have good support for this today. So it is likely most users will rely on Homebrew or &lt;a class=&quot;nonexistent&quot; href=&quot;https://www.mercurial-scm.org/wiki/MacPorts&quot;&gt;MacPorts&lt;/a&gt; for installation. &lt;span class=&quot;anchor&quot; id=&quot;line-139&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-140&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;BSDs_.2F_Solaris_.2F_Etc&quot;&gt;BSDs / Solaris / Etc&lt;/h4&gt;
&lt;span class=&quot;anchor&quot; id=&quot;line-141&quot;&gt;&lt;/span&gt;
&lt;p class=&quot;line874&quot;&gt;Basically the same strategy as Linux. &lt;span class=&quot;anchor&quot; id=&quot;line-142&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-143&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;PyPI_.2F_pip&quot;&gt;PyPI / pip&lt;/h4&gt;
&lt;span class=&quot;anchor&quot; id=&quot;line-144&quot;&gt;&lt;/span&gt;
&lt;p class=&quot;line862&quot;&gt;We support installing Mercurial via &lt;tt class=&quot;backtick&quot;&gt;pip&lt;/tt&gt; today. We upload a source distribution to PyPI and anyone can &lt;tt class=&quot;backtick&quot;&gt;pip install Mercurial&lt;/tt&gt; to install Mercurial in their Python environment. On Windows (where users can't easily compile binary Python extensions), we provide Python wheels with pre-built Mercurial binaries. &lt;span class=&quot;anchor&quot; id=&quot;line-145&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-146&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;The future of &lt;tt class=&quot;backtick&quot;&gt;pip install Mercurial&lt;/tt&gt; with an oxidized Mercurial is less clear. &lt;span class=&quot;anchor&quot; id=&quot;line-147&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-148&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line867&quot;&gt;&lt;tt class=&quot;backtick&quot;&gt;pip&lt;/tt&gt; is tailored towards Python applications. If Mercurial is a Rust application and Python is an implementation detail, does it make sense to use &lt;tt class=&quot;backtick&quot;&gt;pip&lt;/tt&gt; and PyPI as a distribution channel? &lt;span class=&quot;anchor&quot; id=&quot;line-149&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-150&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line867&quot;&gt;&lt;tt class=&quot;backtick&quot;&gt;pip install Mercurial&lt;/tt&gt; is very convenient (at least for the people that have &lt;tt class=&quot;backtick&quot;&gt;pip&lt;/tt&gt; installed and can run it). It is certainly easier than downloading and running an installer. So unless we bake an upgrade facility into Mercurial itself, &lt;tt class=&quot;backtick&quot;&gt;pip install Mercurial&lt;/tt&gt; is the next best thing for upgrading after the system package manager (&lt;tt class=&quot;backtick&quot;&gt;apt&lt;/tt&gt;, &lt;tt class=&quot;backtick&quot;&gt;yum&lt;/tt&gt;, &lt;tt class=&quot;backtick&quot;&gt;brew&lt;/tt&gt;, &lt;tt class=&quot;backtick&quot;&gt;port&lt;/tt&gt;, etc). &lt;span class=&quot;anchor&quot; id=&quot;line-151&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-152&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line867&quot;&gt;&lt;tt class=&quot;backtick&quot;&gt;pip install Mercurial&lt;/tt&gt; goes through a well-defined mechanism to take the artifact it downloaded from PyPI to install it. This mechanism could be abused to facilitate the use of PyPI/pip for distributing a self-contained Mercurial distribution. e.g. the user would end up with a Rust binary in &lt;tt class=&quot;backtick&quot;&gt;PYTHONHOME/bin/hg&lt;/tt&gt; that loads a custom version of Python and is fully self-contained and isolated from the Python it was &lt;tt class=&quot;backtick&quot;&gt;pip install&lt;/tt&gt;ed into. This would be super hacky. It may not even be allowed by PyPI's hosting terms of service? But we could certainly abuse &lt;tt class=&quot;backtick&quot;&gt;pip install&lt;/tt&gt; if we needed to. &lt;span class=&quot;anchor&quot; id=&quot;line-153&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-154&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;Support_for_PyPy_.2F_non-CPython_Pythons&quot;&gt;Support for PyPy / non-CPython Pythons&lt;/h3&gt;
&lt;span class=&quot;anchor&quot; id=&quot;line-155&quot;&gt;&lt;/span&gt;
&lt;p class=&quot;line862&quot;&gt;There exist Python distributions beyond the official CPython distribution. &lt;a class=&quot;nonexistent&quot; href=&quot;https://www.mercurial-scm.org/wiki/PyPy&quot;&gt;PyPy&lt;/a&gt; likely being the one of the most interest to us because of its performance advantages. &lt;span class=&quot;anchor&quot; id=&quot;line-156&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-157&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;The cost to supporting non-CPython Pythons when &lt;tt class=&quot;backtick&quot;&gt;hg&lt;/tt&gt; is a Rust binary could be very high. That would likely significantly curtail the use of the CPython API. Instead, we'd have to do interop via &lt;tt class=&quot;backtick&quot;&gt;ctypes&lt;/tt&gt; or &lt;tt class=&quot;backtick&quot;&gt;cffi&lt;/tt&gt; or provide N ways to do interop. &lt;span class=&quot;anchor&quot; id=&quot;line-158&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-159&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;It's worth noting that if Mercurial is a self-contained application, we could potentially swap out CPython for &lt;a class=&quot;nonexistent&quot; href=&quot;https://www.mercurial-scm.org/wiki/PyPy&quot;&gt;PyPy&lt;/a&gt;. We could go as far as to unsupport CPython completely. &lt;span class=&quot;anchor&quot; id=&quot;line-160&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-161&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;Rust_.3C.3D.3E_Python_Interop&quot;&gt;Rust &amp;lt;=&amp;gt; Python Interop&lt;/h3&gt;
&lt;span class=&quot;anchor&quot; id=&quot;line-162&quot;&gt;&lt;/span&gt;
&lt;p class=&quot;line874&quot;&gt;Rust and Python code will need to call into each other. (Although it is anticipated that the bulk of the calling will be from Python into Rust code - at least initially.) &lt;span class=&quot;anchor&quot; id=&quot;line-163&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-164&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line874&quot;&gt;There are many options for us here. &lt;span class=&quot;anchor&quot; id=&quot;line-165&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-166&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line867&quot;&gt;&lt;tt class=&quot;backtick&quot;&gt;python27-sys&lt;/tt&gt; and &lt;tt class=&quot;backtick&quot;&gt;python3-sys&lt;/tt&gt; are low-level Rust bindings to the CPython API. Lots of &lt;tt class=&quot;backtick&quot;&gt;unsafe {}&lt;/tt&gt; code here. &lt;span class=&quot;anchor&quot; id=&quot;line-173&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-174&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line867&quot;&gt;&lt;tt class=&quot;backtick&quot;&gt;rust-cpython&lt;/tt&gt; and &lt;tt class=&quot;backtick&quot;&gt;PyO3&lt;/tt&gt; are higher-level bindings to &lt;tt class=&quot;backtick&quot;&gt;python27-sys&lt;/tt&gt; and &lt;tt class=&quot;backtick&quot;&gt;python3-sys&lt;/tt&gt;. They are what you want to use for day-to-day Rust programming. &lt;span class=&quot;anchor&quot; id=&quot;line-175&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-176&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line867&quot;&gt;&lt;a class=&quot;nonexistent&quot; href=&quot;https://www.mercurial-scm.org/wiki/PyO3&quot;&gt;PyO3&lt;/a&gt; is a fork of rust-cpython. It seems to be a bit nicer. But it requires Nightly Rust features. &lt;span class=&quot;anchor&quot; id=&quot;line-177&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-178&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;Milksnake uses Rust's &lt;tt class=&quot;backtick&quot;&gt;cbindgen&lt;/tt&gt; crate to automatically generate Python &lt;tt class=&quot;backtick&quot;&gt;cffi&lt;/tt&gt; bindings to Rust libraries. Essentially, you write a Rust library that exports symbols and milksnake can generate a Python binding to it. There's a lot going on. But it is definitely an interesting approach. And some of the components are useful without the rest of milksnake. e.g. the idea of using &lt;tt class=&quot;backtick&quot;&gt;cbindgen&lt;/tt&gt; + &lt;tt class=&quot;backtick&quot;&gt;cffi&lt;/tt&gt; to generate low-level Python bindings. Because Milksnake uses &lt;tt class=&quot;backtick&quot;&gt;cffi&lt;/tt&gt;, the approach should work with both CPython and &lt;a class=&quot;nonexistent&quot; href=&quot;https://www.mercurial-scm.org/wiki/PyPy&quot;&gt;PyPy&lt;/a&gt;. &lt;span class=&quot;anchor&quot; id=&quot;line-179&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-180&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;A major reason for adopting Rust (and C before that) is performance. We know from Mercurial's C extensions that native code is often vasly undermined by a) crossing the Python&amp;lt;-&amp;gt;native boundary b) excessive use of Python API from native code. For example, obsolescence marker parsing is ~100x faster in C. However, once you construct &lt;tt class=&quot;backtick&quot;&gt;PyObject&lt;/tt&gt; for all the parsed markers, it is only 2-4x faster. &lt;span class=&quot;anchor&quot; id=&quot;line-181&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-182&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;We know that using &lt;tt class=&quot;backtick&quot;&gt;ctypes&lt;/tt&gt; to call from Python into native code is significantly slower than binary Python extensions. Although if the number of function calls and data being transferred across the boundary is small, this difference isn't as pronounced. Rust will enable us to write more functionality in native code (we try to avoid writing C today for maintainability and security reasons). So the performance of the Python&amp;lt;-&amp;gt;native bridge will be more important over time. Therefore, it seems prudent to rule out &lt;tt class=&quot;backtick&quot;&gt;ctypes&lt;/tt&gt;. That leaves us with extensions or CFFI. &lt;span class=&quot;anchor&quot; id=&quot;line-183&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-184&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;Reconciling_.60hg.60_with_Rust_extensions&quot;&gt;Reconciling `hg` with Rust extensions&lt;/h3&gt;
&lt;span class=&quot;anchor&quot; id=&quot;line-185&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-186&quot;&gt;&lt;/span&gt;
&lt;p class=&quot;line862&quot;&gt;Initially, &lt;tt class=&quot;backtick&quot;&gt;hg&lt;/tt&gt; will be a minimal Rust binary that embeds a Python interpreter. It simply tells the interpreter to invoke Mercurial's &lt;tt class=&quot;backtick&quot;&gt;main()&lt;/tt&gt; function. In this world, other Rust functionality is likely loaded via shared libraries or Python extensions. In other words, we have multiple Rust &lt;em&gt;contexts&lt;/em&gt; running from different binaries (an executable and a shared library). The executable handles very early process activity. The shared library handles business logic. &lt;span class=&quot;anchor&quot; id=&quot;line-187&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-188&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;Over time, we'll likely want to expand the role of Rust for early process activity. For example, we'll need to implement some command line processing in Rust for &lt;tt class=&quot;backtick&quot;&gt;chg&lt;/tt&gt; functionality. We may also want to implement config file loading (we need to rewrite the config parser anyway to facilitate writing back config changes). And, if we could load a repo from disk and maybe even implement performance critical commands (like &lt;tt class=&quot;backtick&quot;&gt;hg status&lt;/tt&gt;) from pure Rust, this would likely be a massive performance win. (Although we have to consider how this will interact with extensibility.) &lt;span class=&quot;anchor&quot; id=&quot;line-189&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-190&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;What this means is that we'll have multiple Rust binaries holding Mercurial state. This feels brittle. Ideally we'd have a single Rust binary. If Python needed to call into native/Rust code, it would get those symbols from the parent &lt;tt class=&quot;backtick&quot;&gt;hg&lt;/tt&gt; binary instead of from a shared library. It is unclear how this would work. It is obviously possible to resolve the address of a symbol in the current binary. But existing &quot;call native code&quot; mechanisms in Python seem to assume that symbols are coming from loaded libraries, not the current executable. This may require modifications to &lt;tt class=&quot;backtick&quot;&gt;cffi&lt;/tt&gt; or some custom code to generate the Python &lt;em&gt;bindings&lt;/em&gt; to executable-local symbols. &lt;span class=&quot;anchor&quot; id=&quot;line-191&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-192&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;Preserving_Support_for_Extensions&quot;&gt;Preserving Support for Extensions&lt;/h3&gt;
&lt;span class=&quot;anchor&quot; id=&quot;line-193&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-194&quot;&gt;&lt;/span&gt;
&lt;p class=&quot;line874&quot;&gt;Mercurial implemented in Python is good for extensibility because it means extensions can customize nearly every part of Mercurial - often via monkeypatching. &lt;span class=&quot;anchor&quot; id=&quot;line-195&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-196&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line874&quot;&gt;As we use more Rust, we no longer have the dynamic nature of Python and extensions will lose some of their power. &lt;span class=&quot;anchor&quot; id=&quot;line-197&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-198&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;As more of &lt;tt class=&quot;backtick&quot;&gt;hg&lt;/tt&gt; is implemented in Rust before any Python is called, we could lose the ability for Python extensions to influence low-level and core operations. e.g. if we want to implement &lt;tt class=&quot;backtick&quot;&gt;hg status&lt;/tt&gt; such that it doesn't invoke Python and incur Python startup overhead, how do we enable extensions to still influence the behavior of &lt;tt class=&quot;backtick&quot;&gt;hg status&lt;/tt&gt;? &lt;span class=&quot;anchor&quot; id=&quot;line-199&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-200&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;line862&quot;&gt;Presumably, &lt;tt class=&quot;backtick&quot;&gt;hg&lt;/tt&gt; will eventually implement config file loading and command line processing. So, Rust will be able to see which extensions are being loaded. Assuming &lt;tt class=&quot;backtick&quot;&gt;hg&lt;/tt&gt; can resolve the paths to loaded extensions, we could add a syntax to the main extensions file to declare their influence on various behavior. For example, if an extension influences behavior of &lt;tt class=&quot;backtick&quot;&gt;hg status&lt;/tt&gt;, its source code could contain something like: &lt;tt class=&quot;backtick&quot;&gt;# hgext-influences: cmd-status&lt;/tt&gt;. Rust would see this special syntax and know it needs to instantiate a Python interpreter in order to load the extension for the current &lt;tt class=&quot;backtick&quot;&gt;hg status&lt;/tt&gt; command. We could also imagine doing something similar for other functionality implemented in Rust, such as the core store interface. &lt;span class=&quot;anchor&quot; id=&quot;line-201&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-202&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;&lt;p class=&quot;line874&quot;&gt;&lt;span class=&quot;anchor&quot; id=&quot;line-203&quot;&gt;&lt;/span&gt;&lt;a href=&quot;https://www.mercurial-scm.org/wiki/CategoryNewFeatures&quot;&gt;CategoryNewFeatures&lt;/a&gt; &lt;a href=&quot;https://www.mercurial-scm.org/wiki/CategoryNewFeatures&quot;&gt;CategoryNewFeatures&lt;/a&gt; &lt;span class=&quot;anchor&quot; id=&quot;line-204&quot;&gt;&lt;/span&gt;&lt;span class=&quot;anchor&quot; id=&quot;bottom&quot;&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 04 Dec 2017 17:08:20 +0000</pubDate>
<dc:creator>oblio</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.mercurial-scm.org/wiki/OxidationPlan</dc:identifier>
</item>
<item>
<title>Apple is sharing your facial wireframe with apps</title>
<link>https://www.washingtonpost.com/news/the-switch/wp/2017/11/30/apple-is-sharing-your-face-with-apps-thats-a-new-privacy-worry/</link>
<guid isPermaLink="true" >https://www.washingtonpost.com/news/the-switch/wp/2017/11/30/apple-is-sharing-your-face-with-apps-thats-a-new-privacy-worry/</guid>
<description>&lt;div class=&quot;inline-content inline-photo inline-photo-normal&quot;&gt; &lt;img class=&quot;unprocessed placeholder&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=https://img.washingtonpost.com/rf/image_960w/2010-2019/WashingtonPost/2017/11/30/Others/Images/2017-11-30/fowler1203002.JPG&amp;amp;w=1484&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=https://img.washingtonpost.com/rf/image_960w/2010-2019/WashingtonPost/2017/11/30/Others/Images/2017-11-30/fowler1203002.JPG&amp;amp;w=480&quot; data-raw-src=&quot;https://img.washingtonpost.com/rf/image_960w/2010-2019/WashingtonPost/2017/11/30/Others/Images/2017-11-30/fowler1203002.JPG&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=https://img.washingtonpost.com/rf/image_960w/2010-2019/WashingtonPost/2017/11/30/Others/Images/2017-11-30/fowler1203002.JPG&amp;amp;w=60&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;pb-caption&quot;&gt;The app MeasureKit shows the wireframe model and other face data that the iPhone X opens to developers. (Photo by Jhaan Elker/The Washington Post)&lt;/span&gt;&lt;/div&gt;&lt;p&gt;Poop that mimics your facial expressions was just the beginning.&lt;/p&gt;
&lt;p&gt;It’s going to hit the fan when the face-mapping tech that powers the iPhone X’s cutesy “Animoji” starts being used for creepier purposes. And Apple just started sharing your face with lots of apps.&lt;/p&gt;
&lt;p&gt;Beyond a photo, the iPhone X’s front sensors scan 30,000 points to make a 3D model of your face. That’s how the iPhone X unlocks and makes animations that might have once required a Hollywood studio.&lt;/p&gt;
&lt;div class=&quot;inline-content inline-photo-left&quot;&gt; &lt;img alt=&quot;&quot; class=&quot;unprocessed is-gif&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/pbox.php?url=https://www.washingtonpost.com/blogs/the-switch/files/2017/11/205opx.gif&amp;amp;op=noop&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=https://img.washingtonpost.com/blogs/the-switch/files/2017/11/205opx.gif&amp;amp;w=339&quot; data-raw-src=&quot;https://img.washingtonpost.com/blogs/the-switch/files/2017/11/205opx.gif&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=https://img.washingtonpost.com/blogs/the-switch/files/2017/11/205opx.gif&amp;amp;w=339&quot;/&gt;&lt;span class=&quot;pb-caption&quot;&gt;A poop Animoji made possible by the face-mapping tech in the iPhone X that's now available to apps.&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;Now that a phone can scan your mug, what else might apps want to do with it? They could track your expressions to judge if you’re depressed. They could guess your gender, race and even sexuality. They might combine your face with other data to observe you in stores—or walking down the street.&lt;/p&gt;
&lt;p&gt;Apps aren’t doing most of these things, yet. But is Apple doing enough to stop it? After I pressed executives this week, Apple made at least one change—retroactively requiring an app tapping into face data to publish a privacy policy.&lt;/p&gt;
&lt;p&gt;“We take privacy and security very seriously,” Apple spokesman Tom Neumayr said. “This commitment is reflected in the strong protections we have built around Face ID data—protecting it with the Secure Enclave in iPhone X—as well as many other technical safeguards we have built into iOS.”&lt;/p&gt;
&lt;p channel=&quot;wp.com&quot; class=&quot;interstitial-link&quot;&gt;&lt;em&gt;[&lt;a href=&quot;https://www.washingtonpost.com/news/the-switch/wp/2017/10/31/iphone-x-review-apple-is-asking-you-to-break-up-with-the-home-button/?utm_term=.bd5735c07919&quot;&gt;With the iPhone X, Apple is asking you to break up with the home button&lt;/a&gt;]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Indeed, Apple—which makes most of its money from selling us hardware, not selling our data—may be our best defense against a coming explosion in facial recognition. But I also think Apple rushed into sharing face maps with app makers that may not share its commitment, and it isn’t being paranoid enough about the minefield it just entered.&lt;/p&gt;
&lt;p&gt;“I think we should be quite worried,” said &lt;a href=&quot;https://www.aclu.org/bio/jay-stanley&quot;&gt;Jay Stanley, a senior policy analyst at the American Civil Liberties Union&lt;/a&gt;. “The chances we are going to see mischief around facial data is pretty high—if not today, then soon—if not on Apple then on Android.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Your face is open for business&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Apple’s face tech sets some good precedents—and some bad ones. It won praise for storing the face data it uses to unlock the iPhone X securely on the phone, instead of sending it to its servers over the Internet.&lt;/p&gt;
&lt;p&gt;Less noticed was how the iPhone lets other apps now tap into two eerie views from the so-called TrueDepth camera. There’s a wireframe representation of your face and a live read-out of 52 unique micro-movements in your eyelids, mouth and other features. Apps can store that data on their own computers.&lt;/p&gt;
&lt;p&gt;To see for yourself, use an iPhone X to &lt;a href=&quot;https://measurekit.com/&quot;&gt;download an app called MeasureKit&lt;/a&gt;. It exposes the face data Apple makes available. The app’s maker, Rinat Khanov, tells me he’s already planning to add a feature that lets you export a model of your face so you can 3D print a mini-me.&lt;/p&gt;
&lt;div class=&quot;inline-content inline-video&quot;&gt;

&lt;div class=&quot;inline-video-caption&quot;&gt;&lt;span class=&quot;pb-caption&quot;&gt;The Post's Geoffrey A. Fowler shows MotionKit, an app that shows users what facial data is being sent to other apps. (The Washington Post)&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;“Holy cow, why is this data available to any developer that just agrees to a bunch of contracts?” said &lt;a href=&quot;https://www.forrester.com/Fatemeh-Khatibloo&quot;&gt;Fatemeh Khatibloo, an analyst at Forrester Research.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Being careful is in Apple’s DNA—it has been slow in opening home and health data with outsiders. But it also views the face camera as a differentiator, helping position Apple as &lt;a href=&quot;https://www.washingtonpost.com/news/the-switch/wp/2017/06/05/why-apple-is-struggling-to-become-an-artificial-intelligence-powerhouse/?utm_term=.3fbe94e91afe&quot;&gt;a leader in artificial intelligence&lt;/a&gt; and augmented reality.&lt;/p&gt;
&lt;p&gt;Apple put some important &lt;a href=&quot;http://www.appstorereviewguidelineshistory.com/articles/2017-09-15-face-id-arkit-privacy-policies/&quot;&gt;limits on apps&lt;/a&gt;. It requires “that developers ask a user’s permission before accessing the camera, and that apps must explain how and where this data will be used,” Apple's Neumayr said.&lt;/p&gt;
&lt;p&gt;And Apple’s rules say developers can’t sell face data, use it to identify anonymous people or use it for advertising. They’re also required to have privacy policies.&lt;/p&gt;
&lt;p&gt;“These are all very positive steps,” said Clare Garvey, an associate at &lt;a href=&quot;https://www.law.georgetown.edu/academics/centers-institutes/privacy-technology/people.cfm&quot;&gt;Georgetown University’s Center on Privacy &amp;amp; Technology.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Privacy holes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Still, it wasn’t hard for me to find holes in Apple’s protections.&lt;/p&gt;
&lt;p&gt;The MeasureKit app’s maker told me he wasn’t sensing much extra scrutiny from Apple for accessing face data.&lt;/p&gt;
&lt;p&gt;“There were no additional terms or contracts. The app review process is quite regular as well—or at least it appears to be, on our end,” Khanov said. When I noticed his app didn’t have a privacy policy, Khanov said Apple didn’t require it because he wasn’t taking face data off the phone.&lt;/p&gt;
&lt;p&gt;After I asked Apple about this, it called Khanov and told him to post a privacy policy.&lt;/p&gt;
&lt;p&gt;“They said they noticed a mistake and this should be fixed immediately,” Khanov said. “I wish Apple were more specific in their &lt;a href=&quot;https://developer.apple.com/app-store/review/guidelines/#privacy&quot;&gt;App Review Guidelines&lt;/a&gt;.&quot;&lt;/p&gt;
&lt;p&gt;The bigger concern: “How realistic is it to expect Apple to adequately police this data?” Georgetown’s Garvey told me. Apple might spot violations from big apps like Facebook, but what about gazillions of smaller ones?&lt;/p&gt;
&lt;p&gt;Apple hasn’t said how many apps it has kicked out of its store for privacy issues.&lt;/p&gt;
&lt;p&gt;Then there’s a permission problem. Apps are supposed to make clear why they’re accessing your face and seek “conspicuous consent,” according to Apple’s policies. But when it comes time for you to tap OK, you get a pop-up that asks to “access the camera.” It doesn’t say, “HEY, I’M NOW GOING TO MAP YOUR EVERY TWITCH.”&lt;/p&gt;
&lt;p&gt;The iPhone’s settings don’t differentiate between the back camera and all those front face-mapping sensors. Once you give it permission, an active app keeps on having access to your face until you delete it or dig into advanced settings. There’s no option that says, “Just for the next five minutes.”&lt;/p&gt;
&lt;p&gt;Overwhelming people with notifications and choices is a concern, but the face seems like a sufficiently new and sensitive data source that it warrants special permission. Unlike a laptop webcam, it’s hard to put a privacy sticker over the front of the iPhone X—without a fingerprint reader, it’s the main mechanism to unlock the thing.&lt;/p&gt;
&lt;p&gt;Android phones have had face-unlock features for years, but most haven’t offered 3D face mapping like the iPhone. Like iOS, Android doesn’t make a distinction between front and back cameras. Google’s Play Store doesn’t prohibit apps from using the face camera for marketing or building databases, so long as &lt;a href=&quot;https://play.google.com/about/privacy-security-deception/permissions/&quot;&gt;they ask permission&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The value of your face&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;inline-content inline-photo-left&quot;&gt; &lt;img alt=&quot;&quot; src=&quot;https://img.washingtonpost.com/blogs/the-switch/files/2017/11/squarewarby-300x300.jpg&quot;/&gt;&lt;span class=&quot;pb-caption&quot;&gt;This screen grab shows the Warby Parker app using iPhone X face data to measure the face of The Post’s Geoffrey A. Fowler. (Geoffrey A. Fowler/TWP)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;Facial detection can, of course, be used for good and for bad. Warby Parker, the online glasses purveyor, uses it to fit frames to faces, and a Snapchat demo uses it to virtually paint on your face. Companies have touted face tech as a solution to distracted driving, or a way to detect pain in children who have trouble expressing how they’re feeling.&lt;/p&gt;
&lt;p&gt;It’s not clear how Apple’s TrueDepth data might change the kinds of conclusions software can draw about people. But from years of covering tech, I’ve learned this much: Given the opportunity to be creepy, someone will take it.&lt;/p&gt;
&lt;p&gt;Using artificial intelligence, face data “may tell an app developer an awful lot more than the human eye can see,” said Forrester’s Khatibloo. For example, she notes researchers recently used AI to &lt;a href=&quot;https://www.economist.com/news/science-and-technology/21728614-machines-read-faces-are-coming-advances-ai-are-used-spot-signs&quot;&gt;more-accurately determine people’s sexuality&lt;/a&gt; just from regular photographs. That study had limitations, but still “the tech is going to leapfrog way faster than consumers and regulators are going to realize,” said Khatibloo.&lt;/p&gt;
&lt;p&gt;Our faces are already valuable. &lt;a href=&quot;https://www.washingtonpost.com/business/economy/face-recognition-tech/2016/10/17/986929ea-41f0-44a2-b2b9-90b495230dce_story.html?utm_term=.914fdf26b518&quot;&gt;Half of all American adults&lt;/a&gt; have their images stored in at least one database that police can search, typically with few restrictions.&lt;/p&gt;
&lt;p&gt;Facebook and Google use AI to identify faces in pictures we upload to their photo services. (They’re being sued in Illinois, one of the few states with laws that protect biometric data.) Facebook has a patent for &lt;a href=&quot;https://www.google.com/patents/US20150242679&quot;&gt;delivering content based on emotion&lt;/a&gt;, and in 2016, Apple &lt;a href=&quot;https://www.wsj.com/articles/apple-buys-artificial-intelligence-startup-emotient-1452188715&quot;&gt;bought a startup called Emotient&lt;/a&gt; that specializes in detecting emotions.&lt;/p&gt;
&lt;p&gt;Using regular cameras, companies such as &lt;a href=&quot;https://www.kairos.com/&quot;&gt;Kairos&lt;/a&gt; make software to identify gender, ethnicity and age as well as the sentiment of people. In the last 12 months, Kairos said it has read 250 million faces for clients looking to improve commercials and products.&lt;/p&gt;
&lt;p&gt;Apple’s iPhone X launch was “the primal scream of this new industry, because it democratized the idea that facial recognition exists and works,” said Kairos CEO Brian Brackeen. His company gets consent from volunteers whose faces it reads, and sometimes even pays them—but he said the field is wide open. “What rights do people have? Are they being somehow compensated for the valuable data they are sharing?” he said.&lt;/p&gt;
&lt;p&gt;What keeps privacy advocates up at night is that the iPhone X will make face scanning seem normal. Will makers of other phones, security cameras or drones be as careful as Apple? We don’t want to build a future where we become numb to a form of surveillance that goes far beyond anything we’ve known before.&lt;/p&gt;
&lt;p&gt;You’ve only got one face, so we’d better not screw this up.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Read more about the iPhone X: &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.washingtonpost.com/news/the-switch/wp/2017/11/03/the-iphone-x-factor-dont-buy-a-phone-you-dont-need/?utm_term=.2db9f5720ae3&quot;&gt;The iPhone X-factor: Don’t buy a phone you don’t need&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.washingtonpost.com/news/the-switch/wp/2017/09/13/what-happens-if-a-cop-forces-you-to-unlock-your-iphone-x-with-your-face/?tid=a_inl&amp;amp;utm_term=.4f84f11a0064&quot;&gt;What happens if a cop forces you to unlock your iPhone X with your face?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.washingtonpost.com/news/the-switch/wp/2017/10/25/if-you-want-an-iphone-x-for-the-holidays-start-planning-now/?tid=a_inl&amp;amp;utm_term=.59991561a3e1&quot;&gt;If you want an iPhone X for the holidays, start planning now&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 04 Dec 2017 17:06:14 +0000</pubDate>
<dc:creator>lisper</dc:creator>
<og:type>article</og:type>
<og:url>https://www.washingtonpost.com/news/the-switch/wp/2017/11/30/apple-is-sharing-your-face-with-apps-thats-a-new-privacy-worry/</og:url>
<og:image>https://www.washingtonpost.com/rf/image_1484w/2010-2019/WashingtonPost/2017/11/30/Others/Images/2017-11-30/fowler1203002.JPG?t=20170517</og:image>
<og:title>Analysis | Apple is sharing your face with apps. That’s a new privacy worry.</og:title>
<og:description>Is Apple doing enough to protect your face?</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.washingtonpost.com/news/the-switch/wp/2017/11/30/apple-is-sharing-your-face-with-apps-thats-a-new-privacy-worry/</dc:identifier>
</item>
<item>
<title>Debugging an evil Go runtime bug</title>
<link>https://marcan.st/2017/12/debugging-an-evil-go-runtime-bug/</link>
<guid isPermaLink="true" >https://marcan.st/2017/12/debugging-an-evil-go-runtime-bug/</guid>
<description>&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;/h2&gt;
&lt;p&gt;I’m a big fan of &lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt; and &lt;a href=&quot;https://grafana.com/&quot;&gt;Grafana&lt;/a&gt;. As a former SRE at Google I’ve learned to appreciate good monitoring, and this combination has been a winner for me over the past year. I’m using them for monitoring my personal servers (both black-box and white-box monitoring), for the &lt;a href=&quot;https://encounter.eus&quot;&gt;Euskal Encounter&lt;/a&gt; external and internal event infra, for work I do professionally for clients, and more. Prometheus makes it very easy to write custom exporters to monitor your own data, and there’s a good chance you’ll find an exporter that already works for you outside of the box. For example, we use &lt;a href=&quot;https://github.com/justwatchcom/sql_exporter&quot;&gt;sql_exporter&lt;/a&gt; to make a pretty dashboard of attendee metrics for the Encounter events.&lt;/p&gt;
&lt;a href=&quot;https://marcan.st/posts/go_debug/euskalstats.png&quot;&gt;&lt;img src=&quot;https://marcan.st/posts/go_debug/euskalstats.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;
&lt;h4&gt;Event dashboard for Euskal Encounter (fake staging data)&lt;/h4&gt;
&lt;p&gt;Since it’s so easy to throw &lt;a href=&quot;https://github.com/prometheus/node_exporter&quot;&gt;&lt;code&gt;node_exporter&lt;/code&gt;&lt;/a&gt; onto any random machine and have a Prometheus instance scrape it for basic system-level metrics (CPU, memory, network, disk, filesystem usage, etc), I figured, why not also monitor my laptop? I have a Clevo “gaming” laptop that serves as my primary workstation, mostly pretending to be a desktop at home but also traveling with me to big events like the Chaos Communication Congress. Since I already have a VPN between it and one of my servers where I run Prometheus, I can just &lt;code&gt;emerge prometheus-node_exporter&lt;/code&gt;, bring up the service, and point my Prometheus instance at it. This automatically configures alerts for it, which means my phone will make a loud noise whenever I open way too many Chrome tabs and run out of my 32GB of RAM. Perfect.&lt;/p&gt;
&lt;h2 id=&quot;trouble-on-the-horizon&quot;&gt;Trouble on the horizon&lt;/h2&gt;
&lt;p&gt;Barely an hour after setting this up, though, my phone did get a page: my newly-added target was inaccessible. Alas, I could SSH into the laptop fine, so it was definitely up, but &lt;code&gt;node_exporter&lt;/code&gt; had crashed.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;fatal error: unexpected signal during runtime execution
[signal SIGSEGV: segmentation violation code=0x1 addr=0xc41ffc7fff pc=0x41439e]

goroutine 2395 [running]:
runtime.throw(0xae6fb8, 0x2a)
        /usr/lib64/go/src/runtime/panic.go:605 +0x95 fp=0xc4203e8be8 sp=0xc4203e8bc8 pc=0x42c815
runtime.sigpanic()
        /usr/lib64/go/src/runtime/signal_unix.go:351 +0x2b8 fp=0xc4203e8c38 sp=0xc4203e8be8 pc=0x443318
runtime.heapBitsSetType(0xc4204b6fc0, 0x30, 0x30, 0xc420304058)
        /usr/lib64/go/src/runtime/mbitmap.go:1224 +0x26e fp=0xc4203e8c90 sp=0xc4203e8c38 pc=0x41439e
runtime.mallocgc(0x30, 0xc420304058, 0x1, 0x1)
        /usr/lib64/go/src/runtime/malloc.go:741 +0x546 fp=0xc4203e8d38 sp=0xc4203e8c90 pc=0x411876
runtime.newobject(0xa717e0, 0xc42032f430)
        /usr/lib64/go/src/runtime/malloc.go:840 +0x38 fp=0xc4203e8d68 sp=0xc4203e8d38 pc=0x411d68
github.com/prometheus/node_exporter/vendor/github.com/prometheus/client_golang/prometheus.NewConstMetric(0xc42018e460, 0x2, 0x3ff0000000000000, 0xc42032f430, 0x1, 0x1, 0x10, 0x9f9dc0, 0x8a0601, 0xc42032f430)
        /var/tmp/portage/net-analyzer/prometheus-node_exporter-0.15.0/work/prometheus-node_exporter-0.15.0/src/github.com/prometheus/node_exporter/vendor/github.com/prometheus/client_golang/prometheus/value.go:165 +0xd0 fp=0xc4203e8dd0 sp=0xc4203e8d68 pc=0x77a980
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;node_exporter&lt;/code&gt;, like many Prometheus components, is written in Go. Go is a relatively safe language: while it allows you to shoot yourself in the foot if you so wish, and it doesn’t have nearly as strong safety guarantees as, say, Rust does, it is still not too easy to accidentally cause a segfault in Go. More so, &lt;code&gt;node_exporter&lt;/code&gt; is a relatively simple Go app with mostly pure-Go dependencies. Therefore, this was an interesting crash to get. Especially since the crash was inside &lt;code&gt;mallocgc&lt;/code&gt;, which should never crash under normal circumstances.&lt;/p&gt;
&lt;p&gt;Things got more interesting after I restarted it a few times:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;2017/11/07 06:32:49 http: panic serving 172.20.0.1:38504: runtime error: growslice: cap out of range
goroutine 41 [running]:
net/http.(*conn).serve.func1(0xc4201cdd60)
        /usr/lib64/go/src/net/http/server.go:1697 +0xd0
panic(0xa24f20, 0xb41190)
        /usr/lib64/go/src/runtime/panic.go:491 +0x283
fmt.(*buffer).WriteString(...)
        /usr/lib64/go/src/fmt/print.go:82
fmt.(*fmt).padString(0xc42053a040, 0xc4204e6800, 0xc4204e6850)
        /usr/lib64/go/src/fmt/format.go:110 +0x110
fmt.(*fmt).fmt_s(0xc42053a040, 0xc4204e6800, 0xc4204e6850)
        /usr/lib64/go/src/fmt/format.go:328 +0x61
fmt.(*pp).fmtString(0xc42053a000, 0xc4204e6800, 0xc4204e6850, 0xc400000073)
        /usr/lib64/go/src/fmt/print.go:433 +0x197
fmt.(*pp).printArg(0xc42053a000, 0x9f4700, 0xc42041c290, 0x73)
        /usr/lib64/go/src/fmt/print.go:664 +0x7b5
fmt.(*pp).doPrintf(0xc42053a000, 0xae7c2d, 0x2c, 0xc420475670, 0x2, 0x2)
        /usr/lib64/go/src/fmt/print.go:996 +0x15a
fmt.Sprintf(0xae7c2d, 0x2c, 0xc420475670, 0x2, 0x2, 0x10, 0x9f4700)
        /usr/lib64/go/src/fmt/print.go:196 +0x66
fmt.Errorf(0xae7c2d, 0x2c, 0xc420475670, 0x2, 0x2, 0xc420410301, 0xc420410300)
        /usr/lib64/go/src/fmt/print.go:205 +0x5a
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Well that’s interesting. A crash in &lt;code&gt;Sprintf&lt;/code&gt; this time. What?&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;runtime: pointer 0xc4203e2fb0 to unallocated span idx=0x1f1 span.base()=0xc4203dc000 span.limit=0xc4203e6000 span.state=3
runtime: found in object at *(0xc420382a80+0x80)
object=0xc420382a80 k=0x62101c1 s.base()=0xc420382000 s.limit=0xc420383f80 s.spanclass=42 s.elemsize=384 s.state=_MSpanInUse
 &amp;lt;snip&amp;gt;
fatal error: found bad pointer in Go heap (incorrect use of unsafe or cgo?)

runtime stack:
runtime.throw(0xaee4fe, 0x3e)
        /usr/lib64/go/src/runtime/panic.go:605 +0x95 fp=0x7f0f19ffab90 sp=0x7f0f19ffab70 pc=0x42c815
runtime.heapBitsForObject(0xc4203e2fb0, 0xc420382a80, 0x80, 0xc41ffd8a33, 0xc400000000, 0x7f0f400ac560, 0xc420031260, 0x11)
        /usr/lib64/go/src/runtime/mbitmap.go:425 +0x489 fp=0x7f0f19ffabe8 sp=0x7f0f19ffab90 pc=0x4137c9
runtime.scanobject(0xc420382a80, 0xc420031260)
        /usr/lib64/go/src/runtime/mgcmark.go:1187 +0x25d fp=0x7f0f19ffac90 sp=0x7f0f19ffabe8 pc=0x41ebed
runtime.gcDrain(0xc420031260, 0x5)
        /usr/lib64/go/src/runtime/mgcmark.go:943 +0x1ea fp=0x7f0f19fface0 sp=0x7f0f19ffac90 pc=0x41e42a
runtime.gcBgMarkWorker.func2()
        /usr/lib64/go/src/runtime/mgc.go:1773 +0x80 fp=0x7f0f19ffad20 sp=0x7f0f19fface0 pc=0x4580b0
runtime.systemstack(0xc420436ab8)
        /usr/lib64/go/src/runtime/asm_amd64.s:344 +0x79 fp=0x7f0f19ffad28 sp=0x7f0f19ffad20 pc=0x45a469
runtime.mstart()
        /usr/lib64/go/src/runtime/proc.go:1125 fp=0x7f0f19ffad30 sp=0x7f0f19ffad28 pc=0x430fe0
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And now the garbage collector stumbled upon a problem. Yet a different crash.&lt;/p&gt;
&lt;p&gt;At this point, there are two natural conclusions: either I have a severe hardware issue, or there is a wild memory corruption bug in the binary. I initially considered the former unlikely, as this machine has a very heavily mixed workload and no signs of instability that can be traced back to hardware (I have my fair share of crashing software, but it’s never &lt;em&gt;random&lt;/em&gt;). Since Go binaries like &lt;code&gt;node_exporter&lt;/code&gt; are statically linked and do not depend on any other libraries, I can download the official release binary and try that, which would eliminate most of the rest of my system as a variable. Yet, when I did so, I still got a crash.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;unexpected fault address 0x0
fatal error: fault
[signal SIGSEGV: segmentation violation code=0x80 addr=0x0 pc=0x76b998]

goroutine 13 [running]:
runtime.throw(0xabfb11, 0x5)
        /usr/local/go/src/runtime/panic.go:605 +0x95 fp=0xc420060c40 sp=0xc420060c20 pc=0x42c725
runtime.sigpanic()
        /usr/local/go/src/runtime/signal_unix.go:374 +0x227 fp=0xc420060c90 sp=0xc420060c40 pc=0x443197
github.com/prometheus/node_exporter/vendor/github.com/prometheus/client_model/go.(*LabelPair).GetName(...)
        /go/src/github.com/prometheus/node_exporter/vendor/github.com/prometheus/client_model/go/metrics.pb.go:85
github.com/prometheus/node_exporter/vendor/github.com/prometheus/client_golang/prometheus.(*Desc).String(0xc4203ae010, 0xaea9d0, 0xc42045c000)
        /go/src/github.com/prometheus/node_exporter/vendor/github.com/prometheus/client_golang/prometheus/desc.go:179 +0xc8 fp=0xc420060dc8 sp=0xc420060c90 pc=0x76b998
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Yet another completely different crash. At this point there was a decent chance that there was truly an upstream problem with &lt;code&gt;node_exporter&lt;/code&gt; or one of its dependencies, so I filed an &lt;a href=&quot;https://github.com/prometheus/node_exporter/issues/730&quot;&gt;issue&lt;/a&gt; on GitHub. Perhaps the developers had seen this before? It’s worth bringing this kind of issue to their attention and seeing if they have any ideas.&lt;/p&gt;

&lt;p&gt;Unsurprisingly, upstream’s first guess was that it was a hardware issue. This isn’t unreasonable: after all, I’m only hitting the problem on one specific machine. All my other machines are happily running &lt;code&gt;node_exporter&lt;/code&gt;. While I had no other evidence of hardware-linked instability on this host, I also had no other explanation as to what was so particular about this machine that would make &lt;code&gt;node_exporter&lt;/code&gt; crash. A &lt;a href=&quot;http://www.memtest.org/&quot;&gt;Memtest86+&lt;/a&gt; run never hurt anyone, so I gave it a go.&lt;/p&gt;
&lt;p&gt;And then this happened:&lt;/p&gt;
&lt;a href=&quot;https://marcan.st/posts/go_debug/memtest.png&quot;&gt;&lt;img src=&quot;https://marcan.st/posts/go_debug/memtest.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;
&lt;h4&gt;This is what I get for using consumer hardware&lt;/h4&gt;
&lt;p&gt;Whoops! Bad RAM. Well, to be more specific, &lt;em&gt;one bit&lt;/em&gt; of bad RAM. After letting the test run for a full pass, all I got was that single bad bit, plus a few false positives in test 7 (which moves blocks around and so can amplify a single error).&lt;/p&gt;
&lt;p&gt;Further testing showed that Memtest86+ test #5 in SMP mode would quickly detect the error, but usually not on the first pass. The error was always the same bit at the same address. This suggests that the problem is a weak or leaky RAM cell. In particular, one which gets worse with temperature. This is quite logical: a higher temperature increases leakage in the RAM cells and thus makes it more likely that a somewhat marginal cell will actually cause a bit flip.&lt;/p&gt;
&lt;p&gt;To put this into perspective, this is one bad bit out of 274,877,906,944. That’s actually a very good error rate! Hard disks and Flash memory have much higher error rates - it’s just that those devices have bad blocks marked at the factory that are transparently swapped out without the user knowing, and can transparently mark newly discovered weak blocks as bad and relocate them to a spare area. RAM has no such luxury, so a bad bit sticks forever.&lt;/p&gt;
&lt;p&gt;Alas, this is vanishingly unlikely to be the cause of my &lt;code&gt;node_exporter&lt;/code&gt; woes. That app uses very little RAM, and so the chances of it hitting the bad bit (repeatedly, at that) are extremely low. This kind of problem would be largely unnoticeable, perhaps causing a pixel error in some graphics, a single letter to flip in some text, an instruction to be corrupted that probably won’t ever be run, and perhaps the rare segfault when something actually important does land on the bad bit. Nonetheless, it does cause long-term reliability issues, and this is why servers and other devices intended to be reliable must use ECC RAM, which can correct this kind of error.&lt;/p&gt;
&lt;p&gt;I don’t have the luxury of ECC RAM on this laptop. What I do have, though, is the ability to mark the bad block of RAM as bad and tell the OS not to use it. There is a little-known &lt;a href=&quot;https://www.gnu.org/software/grub/manual/grub/html_node/badram.html&quot;&gt;feature&lt;/a&gt; of GRUB 2 which allows you to do just that, by changing the memory map that is passed to the booted kernel. It’s not worth buying new RAM just for a single bad bit (especially since DDR3 is already obsolete, and there’s a good chance new RAM would have weak cells anyway), so this is a good option.&lt;/p&gt;
&lt;p&gt;However, there’s one more thing I can do. Since the problem gets worse with temperature, what happens if I heat up the RAM?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marcan.st/posts/go_debug/badram.jpg&quot;&gt;&lt;img src=&quot;https://marcan.st/posts/go_debug/badram_s.jpg&quot; width=&quot;400&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;🔥🔥🔥memtest86+🔥🔥🔥&lt;/h4&gt;
&lt;a href=&quot;https://marcan.st/posts/go_debug/badram_t.jpg&quot;&gt;&lt;img src=&quot;https://marcan.st/posts/go_debug/badram_ts.jpg&quot; width=&quot;400&quot;/&gt;&lt;/a&gt;
&lt;h4&gt;A cozy 100°C&lt;/h4&gt;
&lt;p&gt;Using a heat gun set at a fairly low temperature (130°C) I warmed up two modules at a time (the other two modules are under the rear cover, as my laptop has four SODIMM slots total). Playing around with module order, I found three additional weak bits only detectable at elevated temperature, and they were spread around three of my RAM sticks.&lt;/p&gt;
&lt;p&gt;I also found that the location of the errors stayed roughly consistent even as I swapped modules around: the top bits of the address remained the same. This is because the RAM is interleaved: data is spread over all four sticks, instead of each stick being assigned a contiguous quarter of the available address space. This is convenient, because I can just mask a region of RAM large enough to cover all possible addresses for each error bit, and not have to worry that I might swap sticks in the future and mess up the masking. I found that masking a contiguous 128KiB area should cover all possible permutations of addresses for each given bad bit, but, for good measure, I rounded up to 1MiB. This gave me three 1MiB aligned blocks to mask out (one of them covers two of the bad bits, for a total of four bad bits I wanted masked):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;0x36a700000&lt;/code&gt; – &lt;code&gt;0x36a7fffff&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0x460e00000&lt;/code&gt; – &lt;code&gt;0x460efffff&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0x4ea000000&lt;/code&gt; – &lt;code&gt;0x4ea0fffff&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This can be specified using the address/mask syntax required by GRUB as follows, in &lt;code&gt;/etc/default/grub&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;GRUB_BADRAM=&quot;0x36a700000,0xfffffffffff00000,0x460e00000,0xfffffffffff00000,0x4ea000000,0xfffffffffff00000&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;One quick &lt;code&gt;grub-mkconfig&lt;/code&gt; later, I am down 3MiB of RAM and four dodgy bits with it. It’s not ECC RAM, but this should increase the effective reliability of my consumer-grade RAM, since now I know the rest of the memory is fine up to at least 100°C.&lt;/p&gt;
&lt;p&gt;Needless to say, &lt;code&gt;node_exporter&lt;/code&gt; still crashed, but we knew this wasn’t the real problem, didn’t we.&lt;/p&gt;
&lt;h2 id=&quot;digging-deeper&quot;&gt;Digging deeper&lt;/h2&gt;
&lt;p&gt;The annoying thing about this kind of bug is that it clearly is caused by some kind of memory corruption that breaks code that runs later. This makes it very hard to debug, because we can’t predict what will be corrupted (it varies), and we can’t catch the bad code in the act of doing so.&lt;/p&gt;
&lt;p&gt;First I tried some basic bisecting of available &lt;code&gt;node_exporter&lt;/code&gt; releases and enabling/disabling different collectors, but that went nowhere. I also tried running an instance under &lt;code&gt;strace&lt;/code&gt;. This seemed to stop the crashes, which strongly points to a race-condition kind of problem. &lt;code&gt;strace&lt;/code&gt; will usually wind up serializing execution of apps to some extent, by intercepting all system calls run by all threads. I would later find that the &lt;code&gt;strace&lt;/code&gt; instance crashed too, but it took much longer to do so. Since this seemed to be related to concurrency, I tried setting &lt;code&gt;GOMAXPROCS=1&lt;/code&gt;, which tells Go to only use a single OS-level thread to run Go code. This also stopped the crashes, again pointing strongly to a concurrency issue.&lt;/p&gt;
&lt;p&gt;By now I had gathered quite a considerable number of crash logs, and I was starting to notice some patterns. While there was a lot of variation in the parts that were crashing and how, ultimately the error messages could be categorized into different types and the same kind of error showed up more than once. So I started Googling these errors, and this is how I stumbled upon &lt;a href=&quot;https://github.com/golang/go/issues/20427&quot;&gt;Go issue #20427&lt;/a&gt;. This was an issue in seemingly an unrelated part of Go, but one that had caused similar segfaults and random issues. The issue was closed with no diagnosis after it couldn’t be reproduced with Go 1.9. Nobody knew what the root cause was, just that it had stopped happening.&lt;/p&gt;
&lt;p&gt;So I grabbed &lt;a href=&quot;https://github.com/golang/go/issues/20427#issuecomment-306346724&quot;&gt;this&lt;/a&gt; sample code from the issue, which claimed to reproduce the problem, and ran it on my machine. Lo and behold, it crashed within seconds. Bingo. This is a lot better than waiting hours for &lt;code&gt;node_exporter&lt;/code&gt; to crash.&lt;/p&gt;
&lt;p&gt;That doesn’t get me any closer to debugging the issue from the Go side, but it gives me a much faster way to test for it. So let’s try another angle.&lt;/p&gt;
&lt;h2 id=&quot;bisecting-machines&quot;&gt;Bisecting machines&lt;/h2&gt;
&lt;p&gt;I know the problem happens on my laptop, but doesn’t happen on any other of my machines. I tried the reproducer on every other machine I have easy access to, and couldn’t get it to crash on any of them. This tells me there’s something special about my laptop. Since Go statically links binaries, the rest of userspace doesn’t matter. This leaves two relevant parts: the hardware, and the kernel.&lt;/p&gt;
&lt;p&gt;I don’t have any easy way to test with various hardware other than the machines I own, but I can play with kernels. So let’s try that. First order of business: will it crash in a VM?&lt;/p&gt;
&lt;p&gt;To test for this, I built a minimal initramfs that will allow me to very quickly launch the reproducer in a QEMU VM without having to actually install a distro or boot a full Linux system. My initramfs was built with Linux’s &lt;code&gt;scripts/gen_initramfs_list.sh&lt;/code&gt; and contained the following files:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;dir /dev 755 0 0
nod /dev/console 0600 0 0 c 5 1
nod /dev/null 0666 0 0 c 1 3
dir /bin 755 0 0
file /bin/busybox busybox 755 0 0
slink /bin/sh busybox 755 0 0
slink /bin/true busybox 755 0 0
file /init init.sh 755 0 0
file /reproducer reproducer 755 0 0
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;/init&lt;/code&gt; is the entry point of a Linux initramfs, and in my case was a simple shellscript to start the test and measure time:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#!/bin/sh
export PATH=/bin

start=$(busybox date +%s)

echo &quot;Starting test now...&quot;
/reproducer
ret=$?
end=$(busybox date +%s)
echo &quot;Test exited with status $ret after $((end-start)) seconds&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;/bin/busybox&lt;/code&gt; is a statically linked version of BusyBox, often used in minimal systems like this to provide all basic Linux shell utilities (including a shell itself).&lt;/p&gt;
&lt;p&gt;The initramfs can be built like this (from a Linux kernel source tree), where list.txt is the file list above:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;scripts/gen_initramfs_list.sh -o initramfs.gz list.txt
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And QEMU can boot the kernel and initramfs directly:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;qemu-system-x86_64 -kernel /boot/vmlinuz-4.13.9-gentoo -initrd initramfs.gz -append 'console=ttyS0' -smp 8 -nographic -serial mon:stdio -cpu host -enable-kvm
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This resulted in no output at all to the console… and then I realized I hadn’t even compiled 8250 serial port support into my laptop’s kernel. D’oh. I mean, it doesn’t have a physical serial port, right? Anyway, a quick detour to rebuild the kernel with serial support (and crossing my fingers that didn’t change anything important), I tried again and it successfully booted and ran the reproducer.&lt;/p&gt;
&lt;p&gt;Did it crash? Yup. Good, this means the problem is reproducible on a VM on the same machine. I tried the same QEMU command on my home server, with its own kernel, and… nothing. Then I copied the kernel from my laptop and booted that and… it crashed. The kernel is what matters. It’s not a hardware issue.&lt;/p&gt;
&lt;h2 id=&quot;juggling-kernels&quot;&gt;Juggling kernels&lt;/h2&gt;
&lt;p&gt;At this point, I knew I was going to be compiling lots of kernels to try to narrow this down. So I decided to move to the most powerful machine I had lying around: a somewhat old 12-core, 24-thread Xeon (now defunct, sadly). I copied the known-bad kernel source to that machine, built it, and tested it.&lt;/p&gt;
&lt;p&gt;It didn’t crash.&lt;/p&gt;
&lt;p&gt;What?&lt;/p&gt;
&lt;p&gt;Some head-scratching later, I made sure the original bad kernel binary crashed (it did). Are we back to hardware? Does it matter which machine I &lt;em&gt;build&lt;/em&gt; the kernel on? So I tried building the kernel on my home server, and that one promptly triggered the crash. Building the same kernel on two machines yields crashes, a third machine doesn’t. What’s the difference?&lt;/p&gt;
&lt;p&gt;Well, these are all Gentoo boxes, and all Gentoo Hardened at that. But my laptop and my home server are both &lt;code&gt;~amd64&lt;/code&gt; (unstable), while my Xeon server is &lt;code&gt;amd64&lt;/code&gt; (stable). That means GCC is different. My laptop and home server were both on &lt;code&gt;gcc (Gentoo Hardened 6.4.0 p1.0) 6.4.0&lt;/code&gt;, while my Xeon was on &lt;code&gt;gcc (Gentoo Hardened 5.4.0-r3 p1.3, pie-0.6.5) 5.4.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But my home server’s kernel, which was nearly the same version as my laptop (though not exactly), built with the same GCC, did not reproduce the crashes. So now we have to conclude that &lt;em&gt;both&lt;/em&gt; the compiler used to build the kernel &lt;em&gt;and&lt;/em&gt; the kernel itself (or its config?) matter.&lt;/p&gt;
&lt;p&gt;To narrow things down further, I compiled the exact kernel tree from my laptop on my home server (linux-4.13.9-gentoo), and confirmed that it indeed crashed. Then I copied over the &lt;code&gt;.config&lt;/code&gt; from my home server and compiled that, and found that it didn’t. This means we’re looking at a kernel config difference &lt;em&gt;and&lt;/em&gt; a compiler difference:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;linux-4.13.9-gentoo + gcc 5.4.0-r3 p1.3 + laptop .config - no crash&lt;/li&gt;
&lt;li&gt;linux-4.13.9-gentoo + gcc 6.4.0 p1.0 + laptop .config - &lt;em&gt;crash&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;linux-4.13.9-gentoo + gcc 6.4.0 p1.0 + server .config - no crash&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Two &lt;code&gt;.config&lt;/code&gt;s, one good, and one bad. Time to diff them. Of course, the two configs were vastly different (since I tend to tailor my kernel config to only include the drivers I need on any particular machine), so I had to repeatedly rebuild the kernel while narrowing down the differences.&lt;/p&gt;
&lt;p&gt;I decided to start with the “known bad” &lt;code&gt;.config&lt;/code&gt; and start removing things. Since the reproducer takes a variable amount of time to crash, it’s easier to test for “still crashes” (just wait for it to crash) than for “doesn’t crash” (how long do I have to wait to convince myself that it doesn’t?). Over the course of 22 kernel builds, I managed to simplify the &lt;a href=&quot;https://marcan.st/posts/go_debug/config&quot;&gt;config&lt;/a&gt; so much that the kernel had no networking support, no filesystems, no block device core, and didn’t even support PCI (still works fine on a VM though!). My kernel builds now took less than 60 seconds and the kernel was about 1/4th the size of my regular one.&lt;/p&gt;
&lt;p&gt;Then I moved on to the “known good” &lt;code&gt;.config&lt;/code&gt; and removed all the unnecessary junk while making sure it still didn’t crash the reproducer (which was trickier and slower than the previous test). I had a few false branches, where I changed something that made the reproducer start crashing (but I didn’t know what), yet I misidentified them as “no crash”, so when I got a crash I had to walk back up the previous kernels I’d built and make sure I knew exactly where the crash was introduced. I ended up doing 7 kernel builds.&lt;/p&gt;
&lt;p&gt;Eventually, I narrowed it down to a small handful of different .config options. A few of them stood out, in particular &lt;code&gt;CONFIG_OPTIMIZE_INLINING&lt;/code&gt;. After carefully testing them I concluded that, indeed, that option was the culprit. Turning it &lt;em&gt;off&lt;/em&gt; produced kernels that crash the reproducer testcase, while turning it &lt;em&gt;on&lt;/em&gt; produced kernels that didn’t. This option, when turned on, allows GCC to better determine which &lt;code&gt;inline&lt;/code&gt; functions really must be inlined, instead of forcing it to inline them unconditionally. This also explains the GCC connection: inlining behavior is likely to change between GCC versions.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/*
 * Force always-inline if the user requests it so via the .config,
 * or if gcc is too old.
 * GCC does not warn about unused static inline functions for
 * -Wunused-function.  This turns out to avoid the need for complex #ifdef
 * directives.  Suppress the warning in clang as well by using &quot;unused&quot;
 * function attribute, which is redundant but not harmful for gcc.
 */
#if !defined(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) ||                \
    !defined(CONFIG_OPTIMIZE_INLINING) || (__GNUC__ &amp;lt; 4)
#define inline inline           __attribute__((always_inline,unused)) notrace
#define __inline__ __inline__   __attribute__((always_inline,unused)) notrace
#define __inline __inline       __attribute__((always_inline,unused)) notrace
#else
/* A lot of inline functions can cause havoc with function tracing */
#define inline inline           __attribute__((unused)) notrace
#define __inline__ __inline__   __attribute__((unused)) notrace
#define __inline __inline       __attribute__((unused)) notrace
#endif
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So what next? We know that &lt;code&gt;CONFIG_OPTIMIZE_INLINING&lt;/code&gt; makes the difference, but that potentially changes the behavior of every single &lt;code&gt;inline&lt;/code&gt; function across the whole kernel. How to pinpoint the problem?&lt;/p&gt;
&lt;p&gt;I had an idea.&lt;/p&gt;
&lt;h2 id=&quot;hash-based-differential-compilation&quot;&gt;Hash-based differential compilation&lt;/h2&gt;
&lt;p&gt;The basic premise is to compile &lt;em&gt;part&lt;/em&gt; of the kernel with the option turned on, and &lt;em&gt;part&lt;/em&gt; of the kernel with the option turned off. By testing the resulting kernel and checking whether the problem appears or not, we can deduce which subset of the kernel compilation units contains the problem code.&lt;/p&gt;
&lt;p&gt;Instead of trying to enumerate all object files and doing some kind of binary search, I decided to go with a hash-based approach. I wrote this wrapper script for GCC:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#!/bin/bash
args=(&quot;$@&quot;)

doit=
while [ $# -gt 0 ]; do
        case &quot;$1&quot; in
                -c)
                        doit=1
                        ;;
                -o)
                        shift
                        objfile=&quot;$1&quot;
                        ;;
        esac
        shift
done

extra=
if [ ! -z &quot;$doit&quot; ]; then
        sha=&quot;$(echo -n &quot;$objfile&quot; | sha1sum - | cut -d&quot; &quot; -f1)&quot;
        echo &quot;${sha:0:8} $objfile&quot; &amp;gt;&amp;gt; objs.txt
        if [ $((0x${sha:0:8} &amp;amp; (0x80000000 &amp;gt;&amp;gt; $BIT))) = 0 ]; then
                echo &quot;[n]&quot; &quot;$objfile&quot; 1&amp;gt;&amp;amp;2
        else
                extra=-DCONFIG_OPTIMIZE_INLINING
                echo &quot;[y]&quot; &quot;$objfile&quot; 1&amp;gt;&amp;amp;2
        fi
fi

exec gcc $extra &quot;${args[@]}&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This hashes the object file name with SHA-1, then checks a given bit of the hash out of the first 32 bits (identified by the &lt;code&gt;$BIT&lt;/code&gt; environment variable). If the bit is 0, it builds without &lt;code&gt;CONFIG_OPTIMIZE_INLINING&lt;/code&gt;. If it is 1, it builds with &lt;code&gt;CONFIG_OPTIMIZE_INLINING&lt;/code&gt;. I found that the kernel had around 685 object files at this point (my minimization effort had paid off), which requires about 10 bits for a unique identification. This hash-based approach also has one neat property: I can choose to only worry about crashing outcomes (where the bit is 0), since it is much harder to prove that a given kernel build does not crash (as the crashes are probabilistic and can take quite a while sometimes).&lt;/p&gt;
&lt;p&gt;I built 32 kernels, one for each bit of the SHA-1 prefix, which only took 29 minutes. Then I started testing them, and every time I got a crash, I narrowed down a regular expression of possible SHA-1 hashes to only those with zero bits at those specific positions. At 8 crashes (and thus zero bits), I was down to 4 object files, and a couple were looking promising. Once I hit the 10th crash, there was a single match.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ grep '^[0246][012389ab][0189][014589cd][028a][012389ab][014589cd]' objs_0.txt
6b9cab4f arch/x86/entry/vdso/vclock_gettime.o
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;vDSO code. Of course.&lt;/p&gt;
&lt;h2 id=&quot;vdso-shenanigans&quot;&gt;vDSO shenanigans&lt;/h2&gt;
&lt;p&gt;The kernel’s vDSO is not actually kernel code. vDSO is a small shared library that the kernel places in the address space of every process, and which allows apps to perform certain special system calls without ever leaving user mode. This increases performance significantly, while still allowing the kernel to change the implementation details of those system calls as needed.&lt;/p&gt;
&lt;p&gt;In other words, vDSO is GCC-compiled code, built with the kernel, that ends up being linked with every userspace app. It’s userspace code. This explains why the kernel and its compiler mattered: it wasn’t about the kernel itself, but about a shared library provided by the kernel! And Go uses the vDSO for performance. Go also happens to have a (rather insane, in my opinion) policy of reinventing its own standard library, so it does not use any of the standard Linux glibc code to call vDSO, but rather rolls its own calls (and syscalls too).&lt;/p&gt;
&lt;p&gt;So what does flipping &lt;code&gt;CONFIG_OPTIMIZE_INLINING&lt;/code&gt; do to the vDSO? Let’s look at the assembly.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;CONFIG_OPTIMIZE_INLINING=n&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;arch/x86/entry/vdso/vclock_gettime.o.no_inline_opt:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 &amp;lt;vread_tsc&amp;gt;:
   0:   55                      push   %rbp
   1:   48 89 e5                mov    %rsp,%rbp
   4:   90                      nop
   5:   90                      nop
   6:   90                      nop
   7:   0f 31                   rdtsc  
   9:   48 c1 e2 20             shl    $0x20,%rdx
   d:   48 09 d0                or     %rdx,%rax
  10:   48 8b 15 00 00 00 00    mov    0x0(%rip),%rdx        # 17 &amp;lt;vread_tsc+0x17&amp;gt;
  17:   48 39 c2                cmp    %rax,%rdx
  1a:   77 02                   ja     1e &amp;lt;vread_tsc+0x1e&amp;gt;
  1c:   5d                      pop    %rbp
  1d:   c3                      retq   
  1e:   48 89 d0                mov    %rdx,%rax
  21:   5d                      pop    %rbp
  22:   c3                      retq   
  23:   0f 1f 00                nopl   (%rax)
  26:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
  2d:   00 00 00 

0000000000000030 &amp;lt;__vdso_clock_gettime&amp;gt;:
  30:   55                      push   %rbp
  31:   48 89 e5                mov    %rsp,%rbp
  34:   48 81 ec 20 10 00 00    sub    $0x1020,%rsp
  3b:   48 83 0c 24 00          orq    $0x0,(%rsp)
  40:   48 81 c4 20 10 00 00    add    $0x1020,%rsp
  47:   4c 8d 0d 00 00 00 00    lea    0x0(%rip),%r9        # 4e &amp;lt;__vdso_clock_gettime+0x1e&amp;gt;
  4e:   83 ff 01                cmp    $0x1,%edi
  51:   74 66                   je     b9 &amp;lt;__vdso_clock_gettime+0x89&amp;gt;
  53:   0f 8e dc 00 00 00       jle    135 &amp;lt;__vdso_clock_gettime+0x105&amp;gt;
  59:   83 ff 05                cmp    $0x5,%edi
  5c:   74 34                   je     92 &amp;lt;__vdso_clock_gettime+0x62&amp;gt;
  5e:   83 ff 06                cmp    $0x6,%edi
  61:   0f 85 c2 00 00 00       jne    129 &amp;lt;__vdso_clock_gettime+0xf9&amp;gt;
[...]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;With &lt;code&gt;CONFIG_OPTIMIZE_INLINING=y&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;arch/x86/entry/vdso/vclock_gettime.o.inline_opt:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 &amp;lt;__vdso_clock_gettime&amp;gt;:
   0:   55                      push   %rbp
   1:   4c 8d 0d 00 00 00 00    lea    0x0(%rip),%r9        # 8 &amp;lt;__vdso_clock_gettime+0x8&amp;gt;
   8:   83 ff 01                cmp    $0x1,%edi
   b:   48 89 e5                mov    %rsp,%rbp
   e:   74 66                   je     76 &amp;lt;__vdso_clock_gettime+0x76&amp;gt;
  10:   0f 8e dc 00 00 00       jle    f2 &amp;lt;__vdso_clock_gettime+0xf2&amp;gt;
  16:   83 ff 05                cmp    $0x5,%edi
  19:   74 34                   je     4f &amp;lt;__vdso_clock_gettime+0x4f&amp;gt;
  1b:   83 ff 06                cmp    $0x6,%edi
  1e:   0f 85 c2 00 00 00       jne    e6 &amp;lt;__vdso_clock_gettime+0xe6&amp;gt;
[...]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Interestingly, &lt;code&gt;CONFIG_OPTIMIZE_INLINING=y&lt;/code&gt;, which is supposed to allow GCC to inline &lt;em&gt;less&lt;/em&gt;, actually resulted in it inlining &lt;em&gt;more&lt;/em&gt;: &lt;code&gt;vread_tsc&lt;/code&gt; is inlined in that version, while not in the &lt;code&gt;CONFIG_OPTIMIZE_INLINING=n&lt;/code&gt; version. But &lt;code&gt;vread_tsc&lt;/code&gt; isn’t marked inline at all, so GCC is perfectly within its right to behave like this, as counterintuitive as it may be.&lt;/p&gt;
&lt;p&gt;But who cares if a function is inlined? Where’s the actual problem? Well, looking closer at the non-inline version…&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  30:        55                      push   %rbp
  31:   48 89 e5                mov    %rsp,%rbp
  34:   48 81 ec 20 10 00 00    sub    $0x1020,%rsp
  3b:   48 83 0c 24 00          orq    $0x0,(%rsp)
  40:   48 81 c4 20 10 00 00    add    $0x1020,%rsp
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Why is GCC allocating over 4KiB of stack? That’s not a stack allocation, that’s a &lt;em&gt;stack probe&lt;/em&gt;, or more specifically, the result of the &lt;code&gt;-fstack-check&lt;/code&gt; GCC &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gccint/Stack-Checking.html&quot;&gt;feature&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Gentoo Linux enables &lt;nobr&gt;&lt;code&gt;-fstack-check&lt;/code&gt;&lt;/nobr&gt; by default on its hardened profile. This is a mitigation for the &lt;a href=&quot;https://www.qualys.com/2017/06/19/stack-clash/stack-clash.txt&quot;&gt;Stack Clash&lt;/a&gt; vulnerability. While &lt;nobr&gt;&lt;code&gt;-fstack-check&lt;/code&gt;&lt;/nobr&gt; is an old GCC feature and not intended for this, it turns out it effectively mitigates the issue (I’m told proper Stack Clash protection will be in GCC 8). As a side-effect, it causes some fairly silly behavior, where every non-leaf function (that is, a function that makes function calls) ends up probing the stack 4 KiB ahead of the stack pointer. In other words, code compiled with &lt;nobr&gt;&lt;code&gt;-fstack-check&lt;/code&gt;&lt;/nobr&gt; potentially needs at least 4 KiB of stack space, unless it is a leaf function (or a function where every call was inlined).&lt;/p&gt;
&lt;p&gt;Go loves small stacks.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;TEXT runtime·walltime(SB),NOSPLIT,$16
        // Be careful. We're calling a function with gcc calling convention here.
        // We're guaranteed 128 bytes on entry, and we've taken 16, and the
        // call uses another 8.
        // That leaves 104 for the gettime code to use. Hope that's enough!
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Turns out 104 bytes aren’t enough for everybody. Certainly not for my kernel.&lt;/p&gt;
&lt;p&gt;It’s worth pointing out that the vDSO specification makes no mention of maximum stack usage guarantees, so this is squarely Go’s fault for making invalid assumptions.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This perfectly explains the symptoms. The stack probe is an &lt;code&gt;orq&lt;/code&gt;, which is a logical OR with 0. This is a no-op, but effectively probes the target address (if it is unmapped, it will segfault). But we weren’t seeing segfaults in vDSO code, so how was this breaking Go? Well, OR with 0 isn’t really a no-op. Since &lt;code&gt;orq&lt;/code&gt; is not an atomic instruction, what really happens is the CPU reads the memory address and then writes it back. This creates a race condition. If other threads are running in parallel on other CPUs, &lt;code&gt;orq&lt;/code&gt; might effectively wind up undoing a memory write that occurs simultaneously. Since the write was out of the stack bounds, it was likely intruding on other threads’ stacks or random data, and, when the stars line up, undoing a memory write. This is also why &lt;code&gt;GOMAXPROCS=1&lt;/code&gt; works around the issue, since that prevents two threads from effectively running Go code at the same time.&lt;/p&gt;
&lt;p&gt;What’s the fix? I left that up to the Go devs. Their solution ultimately was to &lt;a href=&quot;https://github.com/golang/go/commit/a158382b1c9c0b95a7d41865a405736be6bc585f&quot;&gt;pivot to a larger stack&lt;/a&gt; before calling vDSO functions. This introduces a small speed penalty (nanoseconds), but it’s acceptable. After building &lt;code&gt;node_exporter&lt;/code&gt; with the fixed Go toolchain, the crashes went away.&lt;/p&gt;
&lt;p&gt;2017-12-05 01:20&lt;/p&gt;

</description>
<pubDate>Mon, 04 Dec 2017 16:34:50 +0000</pubDate>
<dc:creator>cmsimike</dc:creator>
<og:image>https://marcan.st/posts/go_debug/hotram.png</og:image>
<og:title>Debugging an evil Go runtime bug</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://marcan.st/2017/12/debugging-an-evil-go-runtime-bug/</dc:identifier>
</item>
<item>
<title>Evolution of &amp;lt;img&amp;gt;: Gif without the GIF</title>
<link>https://calendar.perfplanet.com/2017/animated-gif-without-the-gif/</link>
<guid isPermaLink="true" >https://calendar.perfplanet.com/2017/animated-gif-without-the-gif/</guid>
<description>&lt;ul&gt;&lt;li&gt;GIFs are awesome but &lt;em&gt;terrible&lt;/em&gt; for quality and performance&lt;/li&gt;
&lt;li&gt;Replacing GIFs with &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; is &lt;em&gt;better&lt;/em&gt; but has perf. drawbacks: &lt;a href=&quot;https://calendar.perfplanet.com/2017/animated-gif-without-the-gif/#-but-we-already-have-video-tags&quot;&gt;not preloaded, uses range requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Now you can &lt;code&gt;&amp;lt;img src=&quot;.mp4&quot;&amp;gt;&lt;/code&gt;s in Safari Technology Preview&lt;/li&gt;
&lt;li&gt;Early results show mp4s in &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags display &lt;a href=&quot;https://calendar.perfplanet.com/2017/animated-gif-without-the-gif/#having-our-cake-and-eating-it-too&quot;&gt;20x faster and decode 7x faster&lt;/a&gt; than the GIF equivalent – in addition to being 1/14th the file size!&lt;/li&gt;
&lt;li&gt;Background CSS video &amp;amp; Responsive Video can now be a “thing”.&lt;/li&gt;
&lt;li&gt;Finally cinemagraphs without the downsides of GIFs!&lt;/li&gt;
&lt;li&gt;Now we wait for the other browsers to catch-up: This post is 46MB on Chrome but 2MB in Safari TP&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;small&gt;&lt;strong&gt;&lt;em&gt;Special thanks to: &lt;a href=&quot;https://twitter.com/etportis&quot;&gt;Eric Portis&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/jernoble&quot;&gt;Jer Noble&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/jonathandavis&quot;&gt;Jon Davis&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/TraderD65&quot;&gt;Doron Sherman&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/yoavweiss&quot;&gt;Yoav Weiss.&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;I both love and hate animated GIFs. &lt;img src=&quot;https://colinbendell.cloudinary.com/video/upload/c_scale,w_50,fl_animated,f_auto/fire.gif&quot; alt=&quot;Ode to Geocities&quot; /&gt;&lt;img src=&quot;https://colinbendell.cloudinary.com/video/upload/c_scale,fl_animated,f_auto,w_50/colin.gif&quot; alt=&quot;Thanks Tim&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Safari Tech Preview has changed all of this. Now I love and love animated “GIFs”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://colinbendell.cloudinary.com/image/upload/c_crop,f_auto,g_auto,h_350,w_400/v1512090971/Wizard-Clap-by-Markus-Magnusson.gif&quot; alt=&quot;Everybody loves animated Gifs!&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Animated GIFs are a hack. To quote from the &lt;a href=&quot;http://www.w3.org/Graphics/GIF/spec-gif89a.txt&quot;&gt;original GIF89a specification&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;The Graphics Interchange Format is not intended as a platform for animation, even though it can be done in a limited way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But they have become an awesome tool for &lt;a href=&quot;http://cinemagraphs.com&quot;&gt;cinemagraphs&lt;/a&gt;, &lt;a href=&quot;https://giphy.com/search/memes/&quot;&gt;memes&lt;/a&gt;, and creative &lt;a href=&quot;https://www.youtube.com/watch?v=vuxKb5mxM8g&quot;&gt;expression&lt;/a&gt;. All of this awesomeness, however, comes at a cost. Animated GIFs are terrible for web performance. They are HUGE in size, impact cellular data bills, require more CPU and memory, &lt;a href=&quot;https://www.html5rocks.com/en/tutorials/speed/animated-gifs/&quot;&gt;cause repaints&lt;/a&gt;, and are battery killers. Typically GIFs are &lt;a href=&quot;https://webkit.org/blog/6784/new-video-policies-for-ios/&quot;&gt;12x larger files than H.264 videos, and take 2x the energy to load and display in a browser&lt;/a&gt;. And we’re spending all of those resources on something that doesn’t even look very good – the GIF 256 color limitation often makes GIF files look terrible (although there are some &lt;a href=&quot;https://gif.ski/&quot;&gt;cool workarounds&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;My daughter loves them – but she doesn’t understand why her battery is always dead.&lt;/p&gt;
&lt;p&gt;GIFs have many advantages: they are requested immediately by the browser preloader, they play and loop automatically, and they are silent! Implicitly they are also shorter. &lt;a href=&quot;https://dmakproductions.com/blog/what-is-the-ideal-length-for-web-video-production/&quot;&gt;Market&lt;/a&gt; &lt;a href=&quot;https://wistia.com/blog/does-length-matter-it-does-for-video-2k12-edition&quot;&gt;research&lt;/a&gt; has shown that users have higher engagement with, and generally prefer both micro-form video (&amp;lt; 1minute) and cinemagraphs (stills with subtle movement), over longer-form videos and still images. Animated GIFs are great for user experience.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://colinbendell.cloudinary.com/image/upload/c_crop,g_north,h_340,w_580/v1512362223/vista_video_length.gif&quot; alt=&quot;videos that are &amp;lt;30s have highest conversion&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;So how did I go from love/hating GIFs to love/loving “Gifs”? (capitalization change intentional)&lt;/p&gt;
&lt;p&gt;In the latest Safari Tech Preview, thanks to some hard work by &lt;a href=&quot;https://twitter.com/jernoble&quot;&gt;Jer Noble&lt;/a&gt;, we can &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=176825&quot;&gt;now use MP4 files&lt;/a&gt; in &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags. The intended use case is not long-form video, but micro-form, muted, looping video – just like GIFs. Take a look for yourself:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;img src=&quot;rocky.mp4&quot;&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;img src=&quot;https://colinbendell.cloudinary.com/video/upload/f_auto,fl_animated/rocky.gif&quot; alt=&quot;Rocky!&quot; /&gt;&lt;p&gt;Cool! This is going to be awesome on so many fronts – for business, for usability, and particularly for web performance!&lt;/p&gt;

&lt;p&gt;As many have already &lt;a href=&quot;https://rigor.com/blog/2015/12/optimizing-animated-gifs-with-html5-video&quot;&gt;pointed&lt;/a&gt; &lt;a href=&quot;https://www.sohamkamani.com/blog/2016/04/09/stop-using-gifs/&quot;&gt;out&lt;/a&gt;, using the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tag is much better for performance than using animated GIFs. That’s why in 2014 Twitter &lt;a href=&quot;http://mashable.com/2014/06/20/twitter-gifs-mp4/&quot;&gt;famously added animated GIF support&lt;/a&gt; by not adding GIF support. Twitter instead transcodes GIFs to MP4s on-the-fly, and delivers them inside &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tags. Since all browsers now support H.264, this was a very easy transition.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;video autoplay loop muted inline&amp;gt;
  &amp;lt;source src=&quot;eye-of-the-tiger-video.webm&quot; type=&quot;video/webm&quot;&amp;gt;
  &amp;lt;source src=&quot;eye-of-the-tiger-video.mp4&quot; type=&quot;video/mp4&quot;&amp;gt;
  &amp;lt;img src=&quot;eye-of-the-tiger-fallback.gif&quot;/&amp;gt;
&amp;lt;/video&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Transcoding animated GIFs to MP4 is fairly straightforward. You just need to run &lt;code&gt;ffmpeg -i source.gif output.mp4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;However, not everyone can overhaul their CMS and convert &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;. Even if you can, there are three problems with this method of delivering GIF-like (Gif), micro-form video:&lt;/p&gt;
&lt;h2 id=&quot;browser-performance-is-slow-with-video&quot;&gt;1. Browser performance is slow with &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;As &lt;a href=&quot;https://discuss.httparchive.org/t/the-elephant-in-the-room-video/1087&quot;&gt;Doug Sillars recently pointed out in a HTTP Archive post&lt;/a&gt;, there is huge performance penalty in the visual presentation when using the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;a href=&quot;https://discuss.httparchive.org/t/the-elephant-in-the-room-video/1087&quot;&gt;&lt;img src=&quot;https://colinbendell.cloudinary.com/image/upload/f_auto/discourse-httparchive-VideoPerf.png&quot; alt=&quot;Sites without video, load about 28 percent faster than sites with video&quot; /&gt;&lt;/a&gt;&lt;p&gt;Unlike &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags, browsers do &lt;a href=&quot;http://yoavweiss.github.io/preloader-velocity-nyc-talk/#/32&quot;&gt;not preload &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt; content. Generally preloaders only preload JavaScript, CSS, and image resources because they are critical for the page layout. Since &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; content can be any length – from micro-form to long-form – &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tags are skipped until the main thread is ready to parse its content. This delays the loading of &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; content by many hundreds of milliseconds.&lt;/p&gt;
&lt;a href=&quot;https://www.webpagetest.org/result/171201_S2_f4f9bb24f9308827f69a8f2d5ffe09fa/3/details/&quot;&gt;&lt;img src=&quot;https://colinbendell.cloudinary.com/image/upload/c_crop,f_auto,h_169,w_2400,x_660/velocity-filmstrip.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;p&gt;For example, the hero video at the top of the &lt;a href=&quot;https://conferences.oreilly.com/velocity/vl-ca&quot;&gt;Velocity conference page&lt;/a&gt; is only requested 5 full seconds into the page load. It’s the &lt;a href=&quot;https://www.webpagetest.org/result/171201_S2_f4f9bb24f9308827f69a8f2d5ffe09fa/3/details/&quot;&gt;27th requested resource&lt;/a&gt; and it isn’t even requested until after Start Render, after webfonts are loaded.&lt;/p&gt;
&lt;p&gt;Worse yet, many browsers assume that &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tags contain long-form content. Instead of downloading the whole video file at once, which would waste your cell data plan in cases where you do not end up watching the whole video, the browser will first perform a 1-byte request to test if the server supports &lt;a href=&quot;https://tools.ietf.org/html/rfc7233&quot;&gt;HTTP Range Requests&lt;/a&gt;. Then it will follow with multiple range requests in various chunk sizes to ensure that the video is adequately (but not over-) buffered. The consequence is multiple TCP round trips before the browser can even start to decode the content and significant delays before the user sees anything. On high-latency cellular connections, these round trips can set video loads back by hundreds or thousands of milliseconds.&lt;/p&gt;
&lt;img src=&quot;https://colinbendell.cloudinary.com/image/upload/c_scale,w_1000,f_auto/safari-range-requests.png&quot; alt=&quot;&quot; /&gt;&lt;p&gt;And what performs even worse than the native &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element? The typical JavaScript video player. Often, the easiest way to embed a video on a site is to use a hosted service like YouTube or Vimeo and avoid the complexities of video encoding, hosting, and UX. This is normally a great idea, but for micro-form video, or critical content like hero videos, it just adds to the delay because of the javascript players and supporting resources these hosting services inject (css/js/jpg/woff). In addition to the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; markup you are forcing the browser to downloaded, evaluate, and execute the javascript player — and only then can the video start to load.&lt;/p&gt;
&lt;img src=&quot;https://colinbendell.cloudinary.com/image/upload/c_scale,f_auto,w_1000/v1512155054/videoplayer-waterfall.png&quot; alt=&quot;&quot; /&gt;&lt;p&gt;As many people know, I love my Loki jacket because of its built in mitts, balaclava, and a hood that is sized for helmets. But take a look at the Loki USA homepage – which uses a great hero-video, hosted on Vimeo:&lt;/p&gt;
&lt;a href=&quot;https://www.webpagetest.org/result/171201_M1_8c08554c16f8e3e6dfc378289105d5e5/1/details/#waterfall_view_step1&quot;&gt;&lt;img src=&quot;https://colinbendell.cloudinary.com/image/upload/c_scale,h_50,w_1000/f_auto/lokiusa-filmstrip.png&quot; alt=&quot;lokiusa.com filmstrip&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://www.webpagetest.org/result/171201_M1_8c08554c16f8e3e6dfc378289105d5e5/1/details/#waterfall_view_step1&quot;&gt;&lt;img src=&quot;https://colinbendell.cloudinary.com/video/upload/du_20.1/fl_animated,f_auto/lokiusa-video.gif&quot; alt=&quot;lokiusa.com video&quot; /&gt;&lt;/a&gt;&lt;p&gt;If you look closely, you can see that the JavaScript for the player is actually requested soon after DOM Complete. But it isn’t fully loaded and ready to start the video stream until much later.&lt;/p&gt;
&lt;a href=&quot;https://www.webpagetest.org/result/171201_M1_8c08554c16f8e3e6dfc378289105d5e5/1/details/#waterfall_view_step1&quot;&gt;&lt;img src=&quot;https://colinbendell.cloudinary.com/image/upload/f_auto/v1512154815/lokiusa-waterfall.png&quot; alt=&quot;lokiusa.com waterfall&quot; /&gt;&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://www.webpagetest.org/result/171201_M1_8c08554c16f8e3e6dfc378289105d5e5/1/details/#waterfall_view_step1&quot;&gt;WPT Results&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;you-cant-right-click-and-save-video&quot;&gt;2. You can’t right click and save video&lt;/h2&gt;
&lt;p&gt;Most long-form video content – vlogs, TV, movies – is delivered via JavaScript-based players. Usually these players provide users with a convenient “share now” link or bookmark tool, so they can come back to YouTube (or wherever) and find the video again. In contrast, micro-form content – like memes and cinemagraphs – usually doesn’t come via a player, and users expect to be able to download GIFs and send them to friends, like they can with any image on the web. That meme of the dancing cat was sooo funny – I have to share it with all my friends!&lt;/p&gt;
&lt;p&gt;If you use &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tags to deliver micro-form video, users can’t right-click, click-and-drag, or force touch, and save. And their dancing-cat joy becomes a frustrating UX surprise.&lt;/p&gt;
&lt;h2 id=&quot;autoplay-abuse&quot;&gt;3. Autoplay abuse&lt;/h2&gt;
&lt;p&gt;Finally, using &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tags and MP4s instead of &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags and GIFs is brings you into the middle of an ongoing cat and mouse game between browsers and unconscionable ad vendors, who abuse the &lt;code&gt;&amp;lt;video autoplay&amp;gt;&lt;/code&gt; attribute in order to get the users’ attention. Historically, mobile browsers have ignored the autoplay attribute and/or refused to play videos inline, requiring them to go full screen. Over the last couple of years, &lt;a href=&quot;https://webkit.org/blog/6784/new-video-policies-for-ios/&quot;&gt;Apple&lt;/a&gt; and &lt;a href=&quot;https://blog.chromium.org/2017/09/unified-autoplay.html&quot;&gt;Google&lt;/a&gt; have both relaxed their restrictions on inline, autoplay videos, allowing for Gif-like experiences with the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tag. But again, ad networks have abused this, causing further restrictions: if you want to autoplay &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tags you need to mark the content with &lt;code&gt;muted&lt;/code&gt; or remove the audio track all together.&lt;/p&gt;

&lt;p&gt;The GIF format isn’t the only animation-capable, still-image format. WebP and PNG have animation support, too. But, like GIF, they were not designed &lt;em&gt;for&lt;/em&gt; animation and result in much larger files, compared to dedicated video codecs like H.264, H.265, VP9, and AV1.&lt;/p&gt;
&lt;p&gt;Animated PNG is now widely supported across all browsers, and while it addresses the color pallete limitation of GIF, it is still an inefficient file format for compressing video.&lt;/p&gt;
&lt;p&gt;Animated WebP is better, but compared to true video formats, it’s still problematic. Aside from not having a formal standard, animated WebP lacks chroma subsampling and wide-gamut support. Further, the ecosystem of support is fragmented. Not even all versions of Android, Chrome, and Opera support animated WebP – even though those browsers advertise support with the &lt;code&gt;Accept: image/webp&lt;/code&gt;. You need Chrome 42, Opera 15+ or Android 5+.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://caniuse.com/#feat=webp&quot;&gt;&lt;img src=&quot;https://colinbendell.cloudinary.com/image/upload/c_scale,f_auto,w_800/webp.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://caniuse.com/#feat=webm&quot;&gt;&lt;img src=&quot;https://colinbendell.cloudinary.com/image/upload/c_scale,f_auto,w_800/webM.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://caniuse.com/#feat=apng&quot;&gt;&lt;img src=&quot;https://colinbendell.cloudinary.com/image/upload/c_scale,f_auto,w_800/apng.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://caniuse.com/#feat=mpeg4&quot;&gt;&lt;img src=&quot;https://colinbendell.cloudinary.com/image/upload/c_scale,f_auto,w_800/h264.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://caniuse.com/#feat=hevc&quot;&gt;&lt;img src=&quot;https://colinbendell.cloudinary.com/image/upload/c_scale,f_auto,w_800/hevc.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So while animated WebPs compress much better than animated GIFs or aPNGs, we can do better. (See file size comparisons below)&lt;/p&gt;

&lt;p&gt;By enabling true video formats (like MP4) to be included in &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags, Safari Technology Preview has fixed these performance and UX problems. Now, our micro-form videos can be small and efficient (like MP4s delivered via the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tag) &lt;em&gt;and&lt;/em&gt; they can can be easily preloaded, autoplayed, and shared (like our old friend, the GIF).&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;img src=&quot;ottawa-river.mp4&quot;&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So how much faster is this going to be? Pull up the developer tools and see the difference in Safari Technology Preview and other browsers:&lt;/p&gt;
&lt;img src=&quot;https://colinbendell.cloudinary.com/video/upload/c_scale,w_500/l_text:arial_20:GIF:%208.4MB%0DMP4:%20386KB,g_north_west,y_20,x_20/fl_animated,f_auto/Ottawa_River.gif&quot; alt=&quot;Take a look at this!&quot; /&gt;&lt;p&gt;Unfortunately Safari doesn’t play nice with WebPageTest, and creating reliable benchmark tests is complicated. Likewise, Tech Preview’s usage is fairly low, so comparing performance with RUM tools is not yet practical.&lt;/p&gt;
&lt;p&gt;We can, however, do two things. First, compare raw byte sizes, and second, use the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/embedded-content.html#dom-img-decode&quot;&gt;Image.decode()&lt;/a&gt; promise to measure the device impact of different resources.&lt;/p&gt;
&lt;h2 id=&quot;byte-savings&quot;&gt;Byte Savings&lt;/h2&gt;
&lt;p&gt;First, the byte size savings. To compare this I transcoded the trending top 100 animated Gifs from &lt;a href=&quot;https://giphy.com/&quot;&gt;giphy.com&lt;/a&gt; and then &lt;a href=&quot;https://gist.github.com/colinbendell/2aeb9d09af45dbe26ccdf5842253238d&quot;&gt;converted into vp8/vp9/webp/h264/h265&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;em&gt;NB:&lt;/em&gt; These results should be taken as directional only! Each codec could be tuned much more as you can see the vp9 fairs worse than the default vp8 outputs. A more comprehensive study should be done that considers SSIM.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Below are the &lt;a href=&quot;https://docs.google.com/a/bendell.ca/spreadsheets/d/1T5dR6tDeKDsTi9_Xg93hljZPsX1WlBGCcJLr9acYhZ4/edit?usp=sharing&quot;&gt;median (p50) results&lt;/a&gt; of the conversion:&lt;/p&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col /&gt;&lt;col /&gt;&lt;col /&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Format&lt;/th&gt;
&lt;th&gt;Bytes p50&lt;/th&gt;
&lt;th&gt;% change p50&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;GIF&lt;/td&gt;
&lt;td&gt;1,713KB&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;WebP&lt;/td&gt;
&lt;td&gt;310KB&lt;/td&gt;
&lt;td&gt;-81%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;WebM/VP8&lt;/td&gt;
&lt;td&gt;57KB&lt;/td&gt;
&lt;td&gt;-97%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;WebM/VP9&lt;/td&gt;
&lt;td&gt;66KB&lt;/td&gt;
&lt;td&gt;-96%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;WebM/AV1&lt;/td&gt;
&lt;td&gt;TBD&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MP4/H.264&lt;/td&gt;
&lt;td&gt;102KB&lt;/td&gt;
&lt;td&gt;-93%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MP4/H.265&lt;/td&gt;
&lt;td&gt;43KB&lt;/td&gt;
&lt;td&gt;-97%&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Yes animated WebP is smaller but any video format is &lt;em&gt;much&lt;/em&gt; smaller. This shouldn’t surprise anyone since these modern video codecs are highly optimized for online video streaming. H.265 fairs very well as I expect AV1 will too.&lt;/p&gt;
&lt;p&gt;The benefits here will not only be faster transit but also substantial &lt;a href=&quot;https://whatdoesmysitecost.com/&quot;&gt;$$ savings for end users&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Net-Net, using video in &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags is going to be much faster on a cellular connection.&lt;/p&gt;
&lt;h2 id=&quot;decode-and-visual-performance-improvements&quot;&gt;Decode and Visual Performance Improvements&lt;/h2&gt;
&lt;p&gt;Next, let’s consider the impact of the decode and display effects on the browsing experience. H.264 (and H.265) has the notable advantage of being hardware decoded instead of using the primare core for decode.&lt;/p&gt;
&lt;p&gt;How can we measure this? Since browsers haven’t yet implemented the proposed &lt;a href=&quot;https://docs.google.com/document/d/1yRYfYR1DnHtgwC4HRR04ipVVhT1h5gkI6yPmKCgJkyQ/edit?usp=sharing&quot;&gt;hero image API&lt;/a&gt;, we can use Steve Souder’s &lt;a href=&quot;https://speedcurve.com/blog/user-timing-and-custom-metrics/&quot;&gt;User Timing and Custom Metric strategy&lt;/a&gt; as a good aproximation of when the image starts to display to the user. It doesn’t measure frame rate, but it tells us roughly when the first frame is displayed. Better yet, we can also use the newly adopted &lt;a href=&quot;https://html.spec.whatwg.org/multipage/embedded-content.html#dom-img-decode&quot;&gt;Image.decode()&lt;/a&gt; event promise to measure decode performance. In the test page below, I inject a unique GIF and MP4 in an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag 100 times and compare the decode and paint performance.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;js&quot;&gt;let image = new Image;
t_startReq = new Date().getTime();
document.getElementById(&quot;testimg&quot;).appendChild(image);
image.onload = timeOnLoad;
image.src = src;
return image.decode().then(() =&amp;gt; { resolve(image); });
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The results are quite impressive! Even on my powerful 2017 MacBook Pro, running the test locally, with no network throttling, we can see GIFs taking 20x longer than MP4s to draw the first frame (signaled by the &lt;code&gt;onload&lt;/code&gt; event), and 7x longer to decode!&lt;/p&gt;
&lt;img src=&quot;https://colinbendell.cloudinary.com/image/upload/c_scale,f_auto,w_600/l_text:arial_20:GIF:%208.4MB%0DMP4:%20386KB,g_north_west,y_20,x_20/gif_v_mp4.png&quot; /&gt;Localhost test on 2017 i7 MacBook Pro
&lt;p&gt;Curious? &lt;a href=&quot;https://github.com/colinbendell/gif_perf_test&quot;&gt;Clone the repo&lt;/a&gt; and test for yourself. I will note that adding network conditions on the transit of the GIF v. MP4 will disproportionately skew the test results. Specifically since decode can start happening before the last byte finishes, the delta between transfer, display and decode becomes much smaller. What this really tells us is that just the byte savings alone will improve substantially the user experience. However, factoring out the network as I’ve done on a localhost run, you can see that using video has substantial performance benefits for the energy consumption as well.&lt;/p&gt;

&lt;p&gt;So now that Safari Technology Preview supports this design pattern, how can you actually take advantage of it, without serving broken images to non-supporting browsers? Good news! It’s relatively easy.&lt;/p&gt;
&lt;h2 id=&quot;option-1-use-responsive-images&quot;&gt;Option 1: Use Responsive Images&lt;/h2&gt;
&lt;p&gt;Ideally the simplest way is to use the &lt;code&gt;&amp;lt;source type&amp;gt;&lt;/code&gt; attribute of the HTML5 &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;picture&amp;gt;
  &amp;lt;source type=&quot;video/mp4&quot; srcset=&quot;cats.mp4&quot;&amp;gt;
  &amp;lt;source type=&quot;image/webp&quot; srcset=&quot;cats.webp&quot;&amp;gt;
  &amp;lt;img src=&quot;cats.gif&quot;&amp;gt;
&amp;lt;/picture&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I’d like to say we can stop there. However, there is this &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=179231&quot;&gt;nasty WebKit bug&lt;/a&gt; in Safari that causes the preloader to download the &lt;em&gt;first&lt;/em&gt; &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; regardless of the mimetype declaration. The main DOM loader realizes the error and selects the correct one. However, the damage will be done. The preloader squanders its opportunity to download the image eary and on top of that, downloads the wrong version wasting bytes. The good news is that I’ve patched this bug and it should land in Safari TP 45.&lt;/p&gt;
&lt;p&gt;In short, using the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;source type&amp;gt;&lt;/code&gt; for mime-type selection is not advisable until the next version of Safari reaches the 90%+ of the user base.&lt;/p&gt;
&lt;h2 id=&quot;option-2-use-mp4-animated-webp-and-fallback-to-gif&quot;&gt;Option 2: Use MP4, animated WebP and Fallback to GIF&lt;/h2&gt;
&lt;p&gt;If you don’t want to change your HTML markup, you can use HTTP to send MP4s to Safari with content negotiation. In order to do so, you must generate multiple copies of your cinemagraphs (just like before) and &lt;code&gt;Vary&lt;/code&gt;responses based on both the &lt;code&gt;Accept&lt;/code&gt; and &lt;code&gt;User-Agent&lt;/code&gt; headers.&lt;/p&gt;
&lt;p&gt;This will get a bit cleaner once &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=179178&quot;&gt;WebKit BUG 179178&lt;/a&gt; is resolved and you can add a test for the &lt;code&gt;Accept: video/*&lt;/code&gt; header, (like the way you can test for &lt;code&gt;Accept: image/webp&lt;/code&gt;). But the end result is that each browser gets the best format for &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;-based micro-form videos that it supports:&lt;/p&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col /&gt;&lt;col /&gt;&lt;col /&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Browser&lt;/th&gt;
&lt;th&gt;Accept Header&lt;/th&gt;
&lt;th&gt;Response&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Safari TP41+&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;H.264 MP4&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Accept: video/mp4&lt;/td&gt;
&lt;td&gt;H.264 MP4&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Chrome 42+&lt;/td&gt;
&lt;td&gt;Accept: image/webp&lt;/td&gt;
&lt;td&gt;aWebP&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Opera 15&lt;/td&gt;
&lt;td&gt;Accept: image/webp&lt;/td&gt;
&lt;td&gt;aWebP&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Accept: image/apng&lt;/td&gt;
&lt;td&gt;aPNG&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Default&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;aGif&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;In nginx this would look something like:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;nginx&quot;&gt;
map $http_user_agent $mp4_suffix {
    default   &quot;&quot;;
    &quot;~*Safari/605&quot;  &quot;.mp4&quot;;
}

location ~* .(gif)$ {
      add_header Vary Accept;
      try_files $uri$mp4_suffix $uri =404;
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Of course, don’t forget the &lt;code&gt;Vary: Accept, User-Agent&lt;/code&gt; to tell coffee-shop proxies and your CDN to cache each response differently. In fact, you should probably mark the Cache-Control as private and use TLS to ensure that the less sophisticated ISP Performance-Enhancing-Proxies don’t cache the content.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;http&quot;&gt;GET /example.gif HTTP/1.1
Accept: image/png; video/*; */*
User-Agent: User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/605.1.13 (KHTML, like Gecko) Version/11.1 Safari/605.1.13

…

HTTP/1.1 200 OK
Content-Type: video/mp4
Content-Length: 22378567
Vary: Accept, User-Agent
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;option-3-use-ress-and-fall-back-to-video-tag&quot;&gt;Option 3: Use RESS and fall Back to &amp;lt;video&amp;gt; tag&lt;/h2&gt;
&lt;p&gt;If you can manipulate your HTML, you can adopt the Responsive-Server-Side (RESS) technique. This option moves the browser detection logic into your HTML output.&lt;/p&gt;
&lt;p&gt;For example, you could do it like this with PHP:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;php&quot;&gt;&amp;lt;?php if(strlen(strstr($_SERVER['HTTP_USER_AGENT'],&quot;Safari/605&quot;)) &amp;lt;= 0 ){ // if not firefox ?&amp;gt;
&amp;lt;img src=&quot;example.mp4&quot;&amp;gt;
&amp;lt;?php } else {?&amp;gt;
&amp;lt;img src=&quot;example.gif&quot;&amp;gt;
&amp;lt;?php }?&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As above, be sure to emit a &lt;code&gt;Vary: User-Agent&lt;/code&gt; response to inform your CDN that there are different versions of your HTML to cache. Some CDNs automatically honour the Vary headers while others can support this with a simple update to the CDN configuration.&lt;/p&gt;
&lt;h2 id=&quot;bonus-dont-forget-to-remove-the-audio-track&quot;&gt;Bonus: Don’t forget to remove the audio track&lt;/h2&gt;
&lt;p&gt;Now, since you aren’t converting GIF to MP4s but rather you are converting MP4s to GIFs, we should also remember to strip the audio track for extra byte savings. (Please tell me you aren’t using GIFs as your original. Right?!) Audio tracks add extra bytes to the file size that we can quickly strip off since we know that it will be played on mute anyway. The simplest way with ffmpeg is:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ffmpeg -i cats.mp4 -vcodec copy -an cats.mp4
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;As I’m writing this, Safari will blindly download whatever video you specify in the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag, no matter how long it is. On the one hand, this is expected because it helps improve the performance of the browser. Yet, this can be deadly if you push down a 120-minute video to the user. I’ve tested multiple sizes and all were downloaded as long as the user hung around. So, be courteous to your users. If you want to push longer form video content, use the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tag for better performance.&lt;/p&gt;

&lt;p&gt;Now that we can deliver MP4s via &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags, doors are opening to many new use cases. Two that come to mind: responsive video, and background videos. Now that we can put MP4s in &lt;code&gt;srcset&lt;/code&gt;s, vary our responses for them using &lt;a href=&quot;http://httpwg.org/http-extensions/client-hints.html&quot;&gt;Client Hints&lt;/a&gt; and Content-DPR, art direct them with &lt;code&gt;&amp;lt;picture media&amp;gt;&lt;/code&gt;, well – think of the possibilities!&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;img src=&quot;cat.mp4&quot; alt=&quot;cat&quot;
  srcset=&quot;cat-160.mp4 160w, cat-320.mp4 320w, cat-640.mp4 640w, cat-1280.mp4 1280w&quot;
  sizes=&quot;(max-width: 480px) 100vw, (max-width: 900px) 33vw, 254px&quot;&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Video in CSS &lt;code&gt;background-image: url(.mp4)&lt;/code&gt; works, too!&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;div style=&quot;width:800px, height: 200px, background-image:url(colin.mp4)&quot;/&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;By enabling video content in &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags, Safari Technology Preview is paving the way for awesome Gif-like experiences, &lt;em&gt;without&lt;/em&gt; the terrible performance and quality costs associated with GIF files. This functionality will be fantastic for users, developers, designers, and the web. Besides the enormous performance wins that this change enables, it opens up many new use cases that media and ecommerce businesses have been yearning to implement for years. Here’s hoping the other browsers will soon follow. Google? Microsoft? Mozilla? Samsung? Your move!&lt;/p&gt;
</description>
<pubDate>Mon, 04 Dec 2017 16:34:32 +0000</pubDate>
<dc:creator>cflat</dc:creator>
<og:title>Evolution of &lt;img&gt;: Gif without the GIF</og:title>
<og:url>https://calendar.perfplanet.com/2017/animated-gif-without-the-gif/</og:url>
<og:type>article</og:type>
<og:description>tl;dr GIFs are awesome but terrible for quality and performance Replacing GIFs with &lt;video&gt; is better but has perf. drawbacks: not preloaded, uses range requests Now you can &lt;img src=&quot;.mp4&quot;&gt;s in Safari Technology Preview Early results show mp4s in &lt;img&gt; tags display</og:description>
<og:image>https://colinbendell.cloudinary.com/image/upload/c_crop,f_auto,g_auto,h_350,w_400/v1512090971/Wizard-Clap-by-Markus-Magnusson.gif</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://calendar.perfplanet.com/2017/animated-gif-without-the-gif/</dc:identifier>
</item>
<item>
<title>Books I read this year</title>
<link>https://www.gatesnotes.com/About-Bill-Gates/Best-Books-2017</link>
<guid isPermaLink="true" >https://www.gatesnotes.com/About-Bill-Gates/Best-Books-2017</guid>
<description>&lt;div id=&quot;content_0_articlePanel&quot; readability=&quot;119.82282110092&quot;&gt;
&lt;p&gt;Reading is my favorite way to indulge my curiosity. Although I’m lucky that I get to meet with a lot of interesting people and visit fascinating places through my work, I still think books are the best way to explore new topics that interest you.&lt;/p&gt;
&lt;p&gt;This year I picked up books on a bunch of diverse subjects. I really enjoyed &lt;em&gt;Black Flags: The Rise of ISIS&lt;/em&gt; by Joby Warrick. I recommend it to anyone who wants a compelling history lesson on how ISIS managed to seize power in Iraq.&lt;/p&gt;
&lt;p&gt;On the other end of the spectrum, I loved John Green’s new novel, &lt;em&gt;Turtles All the Way Down&lt;/em&gt;, which tells the story of a young woman who tracks down a missing billionaire. It deals with serious themes like mental illness, but John’s stories are always entertaining and full of great literary references.&lt;/p&gt;
&lt;p&gt;Another good book I read recently is &lt;em&gt;The Color of Law&lt;/em&gt; by Richard Rothstein. I’ve been trying to learn more about the forces preventing economic mobility in the U.S., and it helped me understand the role federal policies have played in creating racial segregation in American cities.&lt;/p&gt;
&lt;p&gt;I’ve written longer reviews about some of the best books I read this year. They include a memoir by one of my favorite comedians, a heartbreaking tale of poverty in America, a deep dive into the history of energy, and not one but two stories about the Vietnam War. If you’re looking to curl up by the fireplace with a great read this holiday season, you can’t go wrong with one of these.&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;800&quot; height=&quot;450&quot; frameborder=&quot;0&quot; src=&quot;https://www.youtube.com/embed/69pwVFbJIaY?rel=0&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.gatesnotes.com/Books/The-Best-We-Could-Do&quot; target=&quot;_blank&quot;&gt;The Best We Could Do&lt;/a&gt;,&lt;/em&gt; by Thi Bui. This gorgeous graphic novel is a deeply personal memoir that explores what it means to be a parent and a refugee. The author’s family fled Vietnam in 1978. After giving birth to her own child, she decides to learn more about her parents’ experiences growing up in a country torn apart by foreign occupiers.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.gatesnotes.com/Books/Evicted&quot; target=&quot;_blank&quot;&gt;Evicted: Poverty and Profit in the American City&lt;/a&gt;,&lt;/em&gt; by Matthew Desmond. If you want a good understanding of how the issues that cause poverty are intertwined, you should read this book about the eviction crisis in Milwaukee. Desmond has written a brilliant portrait of Americans living in poverty. He gave me a better sense of what it is like to be poor in this country than anything else I have read.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.gatesnotes.com/Books/Believe-Me&quot; target=&quot;_blank&quot;&gt;Believe Me: A Memoir of Love, Death, and Jazz Chickens&lt;/a&gt;,&lt;/em&gt; by Eddie Izzard. Izzard’s personal story is fascinating: he survived a difficult childhood and worked relentlessly to overcome his lack of natural talent and become an international star. If you’re a huge fan of him like I am, you’ll love this book. His written voice is very similar to his stage voice, and I found myself laughing out loud several times while reading it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.gatesnotes.com/Books/The-Sympathizer&quot; target=&quot;_blank&quot;&gt;The Sympathizer&lt;/a&gt;,&lt;/em&gt; by Viet Thanh Nguyen. Most of the books I’ve read and movies I’ve seen about the Vietnam War focused on the American perspective. Nguyen’s award-winning novel offers much-needed insight into what it was like to be Vietnamese and caught between both sides. Despite how dark it is, &lt;em&gt;The Sympathizer&lt;/em&gt; is a gripping story about a double agent and the trouble he gets himself into.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.gatesnotes.com/Books/Energy-and-Civilization&quot; target=&quot;_blank&quot;&gt;Energy and Civilization: A History&lt;/a&gt;,&lt;/em&gt; by Vaclav Smil. Smil is one of my favorite authors, and this is his masterpiece. He lays out how our need for energy has shaped human history—from the era of donkey-powered mills to today’s quest for renewable energy. It’s not the easiest book to read, but at the end you’ll feel smarter and better informed about how energy innovation alters the course of civilizations.&lt;/p&gt;
&lt;div id=&quot;PrevNextTabsHolder&quot; class=&quot;PrevNextTabsHolder&quot;&gt;
&lt;div id=&quot;PrevNextTabs_PrevTab&quot;&gt;

&lt;p&gt;Previous Article&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;PrevNextTabs_NextTab&quot;&gt;
&lt;p&gt;Next Article&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;content_0_articlePrevNextCont&quot; readability=&quot;57&quot;&gt; 
&lt;p&gt;NEXT&lt;br/&gt;&lt;span class=&quot;nextPrevText&quot;&gt;A searing portrait of American poverty&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;</description>
<pubDate>Mon, 04 Dec 2017 16:12:19 +0000</pubDate>
<dc:creator>borisjabes</dc:creator>
<og:description>Bill Gates shares five amazing books he read in 2017 including “The Best We Could Do” by Thi Bui, “Evicted” by Matthew Desmond, “Believe Me” by Eddie Izzard, “The Sympathizer” by Viet Thanh Nguyen, and “Energy and Civilization” by Vaclav Smil.</og:description>
<og:image>https://www.gatesnotes.com/-/media/Images/Articles/About-Bill-Gates/Best-Books-2017/end-of-year-books_2017_article_v1.jpg</og:image>
<og:title>5 amazing books I read this year</og:title>
<og:type>article</og:type>
<og:url>https://www.gatesnotes.com/About-Bill-Gates/Best-Books-2017</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.gatesnotes.com/About-Bill-Gates/Best-Books-2017</dc:identifier>
</item>
<item>
<title>SEC Emergency Action Halts PlexCoin ICO</title>
<link>https://www.sec.gov/news/press-release/2017-219</link>
<guid isPermaLink="true" >https://www.sec.gov/news/press-release/2017-219</guid>
<description>&lt;p&gt;Washington D.C., Dec. 4, 2017 —&lt;/p&gt;&lt;div readability=&quot;86.810313075506&quot;&gt;
&lt;p&gt;The Securities and Exchange Commission today announced it obtained an emergency asset freeze to halt a fast-moving Initial Coin Offering (ICO) fraud that raised up to $15 million from thousands of investors since August by falsely promising a 13-fold profit in less than a month.&lt;/p&gt;
&lt;p&gt;The SEC filed charges against a recidivist Quebec securities law violator, Dominic Lacroix, and his company, PlexCorps. The Commission's complaint, filed in federal court in Brooklyn, New York, alleges that Lacroix and PlexCorps marketed and sold securities called PlexCoin on the internet to investors in the U.S. and elsewhere, claiming that investments in PlexCoin would yield a 1,354 percent profit in less than 29 days. The SEC also charged Lacroix's partner, Sabrina Paradis-Royer, in connection with the scheme.&lt;/p&gt;
&lt;p&gt;Today's charges are the first filed by the SEC's new Cyber Unit. The unit was created in September to focus the Enforcement Division's cyber-related expertise on misconduct involving distributed ledger technology and initial coin offerings, the spread of false information through electronic and social media, hacking and threats to trading platforms.&lt;/p&gt;
&lt;p&gt;&quot;This first Cyber Unit case hits all of the characteristics of a full-fledged cyber scam and is exactly the kind of misconduct the unit will be pursuing,&quot; said Robert Cohen, Chief of the Cyber Unit. &quot;We acted quickly to protect retail investors from this initial coin offering's false promises.&quot;&lt;/p&gt;
&lt;p&gt;Based on its filing, the SEC obtained an emergency court order to freeze the assets of PlexCorps, Lacroix, and Paradis-Royer.&lt;/p&gt;
&lt;p&gt;The SEC’s complaint charges Lacroix, Paradis-Royer and PlexCorps with violating the anti-fraud provisions, and Lacroix and PlexCorps with violating the registration provision, of the U.S. federal securities laws.  The complaint seeks permanent injunctions, disgorgement plus interest and penalties.  For Lacroix, the SEC also seeks an officer-and-director bar and a bar from offering digital securities against Lacroix and Paradis-Royer.&lt;/p&gt;
&lt;p&gt;The Commission's investigation was conducted by Daphna A. Waxman, David H. Tutor, and Jorge G. Tenreiro of the New York Regional Office and the Cyber Unit, with assistance from the agency's Office of International Affairs. The case is being supervised by Valerie A. Szczepanik and Mr. Cohen. The Commission appreciates the assistance of Quebec's Autorité Des Marchés Financiers.&lt;/p&gt;
&lt;p&gt;The SEC's Office of Investor Education and Advocacy issued an Investor Alert in August 2017 warning investors about scams of companies claiming to be engaging in initial coin offerings: &lt;a href=&quot;https://www.investor.gov/additional-resources/news-alerts/alerts-bulletins/investor-alert-public-companies-making-ico-related&quot;&gt;https://www.investor.gov/additional-resources/news-alerts/alerts-bulletins/investor-alert-public-companies-making-ico-related&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Mon, 04 Dec 2017 14:12:05 +0000</pubDate>
<dc:creator>Permit</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.sec.gov/news/press-release/2017-219</dc:identifier>
</item>
<item>
<title>Integrating “safe” languages into OpenBSD?</title>
<link>https://marc.info/?l=openbsd-misc&amp;m=151233345723889&amp;w=2</link>
<guid isPermaLink="true" >https://marc.info/?l=openbsd-misc&amp;m=151233345723889&amp;w=2</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html&quot; /&gt;&lt;title&gt;'Re: Integrating &quot;safe&quot; languages into OpenBSD?' - MARC&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/style.css&quot; /&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#FFFFFF&quot; text=&quot;#000000&quot; link=&quot;#0000C0&quot; vlink=&quot;#800080&quot; id=&quot;readabilityBody&quot; readability=&quot;43.445974576271&quot;&gt;
&lt;pre&gt;
&lt;strong&gt;[&lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;m=151233148023559&amp;amp;w=2&quot;&gt;prev in list&lt;/a&gt;] [&lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;m=151233412624041&amp;amp;w=2&quot;&gt;next in list&lt;/a&gt;] [&lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;m=151233210523661&amp;amp;w=2&quot;&gt;prev in thread&lt;/a&gt;] [&lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;m=151233451224088&amp;amp;w=2&quot;&gt;next in thread&lt;/a&gt;] &lt;/strong&gt;
&lt;strong&gt;&lt;span&gt;
List:       &lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;r=1&amp;amp;w=2&quot;&gt;openbsd-misc&lt;/a&gt;
Subject:    &lt;a href=&quot;https://marc.info/?t=151233221700001&amp;amp;r=1&amp;amp;w=2&quot;&gt;Re: Integrating &quot;safe&quot; languages into OpenBSD?&lt;/a&gt;
From:       &lt;a href=&quot;https://marc.info/?a=146809448200002&amp;amp;r=1&amp;amp;w=2&quot;&gt;&quot;Theo de Raadt&quot; &amp;lt;deraadt () openbsd ! org&amp;gt;&lt;/a&gt;
Date:       &lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;r=1&amp;amp;w=2&amp;amp;b=201712&quot;&gt;2017-12-03 20:37:07&lt;/a&gt;
Message-ID: &lt;a href=&quot;https://marc.info/?i=81638.1512333427%20()%20cvs%20!%20openbsd%20!%20org&quot;&gt;81638.1512333427 () cvs ! openbsd ! org&lt;/a&gt;&lt;/span&gt;
[&lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;m=151233345723889&amp;amp;q=raw&quot;&gt;Download message RAW&lt;/a&gt;]&lt;/strong&gt;

&amp;gt; As a response to this, Theo asked rhetorically &quot;Where's ls, where's cat,
&amp;gt; where's grep, and where's sort?&quot;, implying that noone so far bothered to
&amp;gt; write implementations of even the basic unix utilities in such a
&amp;gt; language.

I wasn't implying.  I was stating a fact.  There has been no attempt
to move the smallest parts of the ecosystem, to provide replacements
for base POSIX utilities.

As a general trend the only things being written in these new
languages are new web-facing applications, quite often proprietory or
customized to narrow roles.  Not Unix parts.

Right now, there are zero usage cases in the source tree to require
those compiler tools.  We won't put a horse into the source tree when
society lacks cart builders.

&amp;gt; This brings me to the question, what if someone actually bothered?

So rather than bothering to begin, you wrote an email.

Awesome.

Yes, now I am implying something: you won't bother to rewrite the
utilities.

And I understand, why would anyone bother?  It took about 10 years for
gnu grep to be replaced sufficiently well in our tree.  This stuff
doesn't happen overnight.

However there is a rampant fiction that if you supply a new safer
method everyone will use it.  For gods sake, the simplest of concepts
like the stack protector took nearly 10 years for adoption, let people
should switch languages?  DELUSION.

&amp;gt; Under what conditions would you consider replacing one of the
&amp;gt; current C implementations with an implementation written in another,
&amp;gt; &quot;safer&quot; language?

In OpenBSD there is a strict requirement that base builds base.

So we cannot replace any base utility, unless the toolchain to build
it is in the base.  Adding such a toolchain would take make build time
from 40 minutes to hours.  I don't see how that would happen.

&amp;gt; Note that with Cgrep and haskell-ls, there do in fact exist
&amp;gt; implementations/analogues of two of the mentioned utilities in a
&amp;gt; memory safe language (Haskell).

Are they POSIX compliant?  No.  They are completely different programs
that have borrowed the names.

By the way, this is how long it takes to compile our grep:

    0m00.62s real     0m00.63s user     0m00.53s system

Does Cgrep compile in less than 10 minutes?

Such ecosystems come with incredible costs.  For instance, rust cannot
even compile itself on i386 at present time because it exhausts the
address space.

Consider me a skeptic -- I think these compiler ecosystems face a grim
bloaty future.

&lt;strong&gt;[&lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;m=151233148023559&amp;amp;w=2&quot;&gt;prev in list&lt;/a&gt;] [&lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;m=151233412624041&amp;amp;w=2&quot;&gt;next in list&lt;/a&gt;] [&lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;m=151233210523661&amp;amp;w=2&quot;&gt;prev in thread&lt;/a&gt;] [&lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;m=151233451224088&amp;amp;w=2&quot;&gt;next in thread&lt;/a&gt;] &lt;/strong&gt;
&lt;/pre&gt;

&lt;center&gt;&lt;a href=&quot;https://marc.info/?q=configure&quot;&gt;Configure&lt;/a&gt; | &lt;a href=&quot;https://marc.info/?q=about&quot;&gt;About&lt;/a&gt; | &lt;a href=&quot;https://marc.info/?q=news&quot;&gt;News&lt;/a&gt; | &lt;a href=&quot;mailto:webguy@marc.info?subject=Add%20a%20list%20to%20MARC&quot;&gt;Add a list&lt;/a&gt; | Sponsored by &lt;a href=&quot;http://www.korelogic.com/&quot;&gt;KoreLogic&lt;/a&gt;&lt;/center&gt;
&lt;/body&gt;</description>
<pubDate>Mon, 04 Dec 2017 13:35:05 +0000</pubDate>
<dc:creator>dmm</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://marc.info/?l=openbsd-misc&amp;m=151233345723889&amp;w=2</dc:identifier>
</item>
</channel>
</rss>