<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Perl 11</title>
<link>http://perl11.org/</link>
<guid isPermaLink="true" >http://perl11.org/</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;title&gt;This Perl Goes To 11&lt;/title&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;84.989561586639&quot;&gt;
&lt;p&gt;5 + 6 == 11!
&lt;/p&gt;&lt;center&gt;&lt;img src=&quot;http://perl11.org/this_perl_goes_to_11.jpg&quot; align=&quot;center&quot; /&gt;&lt;/center&gt;
&lt;p&gt;Perl 11 is not (yet) an actual version of Perl; rather, Perl 11 is currently a philosophy with 3 primary tenets:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1. Pluggability Of Perl On All Levels&lt;/li&gt;
&lt;li&gt;2. Reunification Of Perl 5 &amp;amp; Perl 6&lt;/li&gt;
&lt;li&gt;3. Runtime Performance Of C/C++ Or Faster&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Perl 11 promotes ideas which will make Perl 5 pluggable at the following levels:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Runtime Virtual Machine&lt;/li&gt;
&lt;li&gt;Compilation Unit Format / AST&lt;/li&gt;
&lt;li&gt;Source Code Syntax / Compilers&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This will open up the doors to many kinds of language / technology experimentation, without endangering the existing Perl 5 / CPAN code bases that we depend on every day.&lt;/p&gt;
&lt;p&gt;Pluggable VMs would be parrot, p2, JVM or .NET running Perl5 and Perl 6 code. 5 + 6 == 11!&lt;/p&gt;
&lt;h2&gt;Perl 11 Projects&lt;/h2&gt;
&lt;p&gt;The following projects are important in reaching the vision of Perl 11:&lt;/p&gt;
&lt;h3&gt;RPerl&lt;/h3&gt;
&lt;p&gt;A Restricted Perl by Will Braswell which translates a medium-magic subset of Perl 5 into C/C++ using Inline::C and Inline::CPP&lt;/p&gt;
&lt;h3&gt;cperl&lt;/h3&gt;
&lt;p&gt;cperl is an improved variant of perl5, running all of perl5 and CPAN code. With many perl6 features, just faster.&lt;br /&gt;Faster than perl5 and perl6. It is stable and usable, but still in development with many more features being added soon.&lt;/p&gt;
&lt;h3&gt;WebPerl&lt;/h3&gt;
&lt;p&gt;WebPerl is a port of the entire Perl 5 interpreter running inside a modern web browser.&lt;br /&gt;WebPerl is compiled using clang/LLVM/Emscripten targeting WebAssembly, and can replace JavaScript as a client-side execution platform, complete with XS support!&lt;/p&gt;
&lt;h3&gt;p2&lt;/h3&gt;
&lt;p&gt;p2 by Reini Urban was the attempt to be a fast, small perl11 (5+6 and more) using the potion vm.&lt;/p&gt;
&lt;h3&gt;potion&lt;/h3&gt;
&lt;p&gt;potion is the VM behind p2, a small fast language, written by _why's, based on lua, io and others.&lt;/p&gt;
&lt;h3&gt;MoarVM&lt;/h3&gt;
&lt;p&gt;MoarVM is basically a freshly boostrapped parrot, with locking threads and a sixmodel MOP, supporting rakudo perl6.&lt;/p&gt;
&lt;h3&gt;nqp/QAST&lt;/h3&gt;
&lt;p&gt;&quot;Not Quite Perl&quot; is current abstraction layer between perl6 and parrot, with parrot and jvm backends, and moarvm and js coming along.&lt;/p&gt;
&lt;h3&gt;Perlito&lt;/h3&gt;
&lt;p&gt;Perlito by Flavio Glock is a source level perl5/6 to perl5/6 and other backends compiler.&lt;/p&gt;
&lt;h3&gt;Larry's Perl 6 standard grammar&lt;/h3&gt;
&lt;p&gt;perl6/std with the viv metacompiler contains the canonical &lt;a href=&quot;https://github.com/perl6/std/blob/master/STD.pm6&quot;&gt;Perl6 grammar&lt;/a&gt; and now also a &lt;a href=&quot;https://github.com/perl6/std/blob/master/STD_P5.pm6&quot;&gt;Perl5 grammar&lt;/a&gt;. Written in perl6, interpreted and compiled in perl5 (via &lt;a href=&quot;https://github.com/perl6/std/blob/master/viv&quot;&gt;viv&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;gperl&lt;/h3&gt;
&lt;p&gt;gperl by Masaaki Goshima compiles to heavily optimized LLVM and is ~3x faster than p2. Currrently it is being decoupled to different perl5 compiler modules.&lt;/p&gt;
&lt;h3&gt;Seis and pviv&lt;/h3&gt;
&lt;p&gt;Seis is a project by Tokuhiro Matsuno to try some perl6 extensions in perl5.&lt;br /&gt;pviv is a perl6 grammar written in greg, which compiles to an AST and will be used as the perl6 grammar for p2.&lt;/p&gt;
&lt;h3&gt;SPVM&lt;/h3&gt;
&lt;p&gt;SPVM by Yuki Kimoto, a fast &amp;amp; small virtual machine with Perl'ish syntax.&lt;/p&gt;
&lt;h2&gt;Perl 11 Links&lt;/h2&gt;
&lt;/body&gt;</description>
<pubDate>Tue, 23 Oct 2018 22:07:34 +0000</pubDate>
<dc:creator>totalperspectiv</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://perl11.org/</dc:identifier>
</item>
<item>
<title>Carbon Removal Technologies</title>
<link>http://carbon.ycombinator.com</link>
<guid isPermaLink="true" >http://carbon.ycombinator.com</guid>
<description>&lt;div class=&quot;content visible&quot; id=&quot;tab-bio-energy&quot; readability=&quot;38&quot;&gt;
&lt;h2&gt;Bio-energy with carbon capture and storage&lt;/h2&gt;
&lt;p&gt;BECCS&lt;/p&gt;
&lt;p&gt;The idea behind BECCS is to capture carbon with trees; burn trees for energy; capture carbon at the smokestack; and bury carbon underground.&lt;/p&gt;
&lt;p&gt;The deployment of BECCS is controversial, among other things, because of the large land area required.&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;content&quot; id=&quot;tab-dac&quot; readability=&quot;45&quot;&gt;
&lt;h2&gt;Direct Air Capture&lt;/h2&gt;
&lt;p&gt;DAC&lt;/p&gt;
&lt;p&gt;The idea behind Direct Air Capture is to take CO2 from the air and pump it through a plant that transforms it into valuable resource.&lt;/p&gt;
&lt;p&gt;For instance, one of the companies in the space, Carbon Engineering plans to use CO2 as an input to make synthetic fuels that can substitute for diesel, gasoline, or jet fuel. Other companies plan on creating carbon nanotubes which are useful for batteries.&lt;/p&gt;
&lt;p&gt;The current issues with DAC are costs ($94/ton of CO2), and a scalable path to large scale CO2 removal.&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;content&quot; id=&quot;tab-biochar&quot; readability=&quot;40&quot;&gt;
&lt;h2&gt;Biochar&lt;/h2&gt;
&lt;p&gt;The idea of biochar is to burn organic waste in oxygen-free chambers - and then bury it or use it for agriculture.&lt;/p&gt;
&lt;p&gt;One researcher contends that burning and burying 10 percent of the world's biomass waste would sequester nearly 5 Gton of CO2 annually. The logistics of actually converting 10 percent or more of the world's organic waste into biochar and burying the result are, at this point at least, incredibly daunting.&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;content&quot; id=&quot;tab-srm&quot; readability=&quot;43&quot;&gt;
&lt;h2&gt;Solar Radiation Management&lt;/h2&gt;
&lt;p&gt;SRM&lt;/p&gt;
&lt;p&gt;The idea of SRM is to reflect a small amount of inbound sunlight back out into space. Multiple approaches have been proposed: Space-Based Options (satellites in space), Stratosphere-Based Options (injection of sulfate aerosols into the stratosphere), Cloud-Based Options (making them more reflective), and Surface-Based Options (whitening roofs or reflective crops).&lt;/p&gt;
&lt;p&gt;SRM is hugely controversial presenting environmental risks, possibility of weaponization, and create regional winners because of unequal deployment.&lt;/p&gt;

&lt;/div&gt;
</description>
<pubDate>Tue, 23 Oct 2018 17:46:26 +0000</pubDate>
<dc:creator>sama</dc:creator>
<og:title>Carbon Removal Technologies | YC Request for Startups</og:title>
<og:type>website</og:type>
<og:image>http://carbon.ycombinator.com/img/meta-image.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>http://carbon.ycombinator.com/</dc:identifier>
</item>
<item>
<title>Show HN: Websites in 2018</title>
<link>https://2018.bloomca.me/</link>
<guid isPermaLink="true" >https://2018.bloomca.me/</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;/&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;/&gt;&lt;link rel=&quot;canonical&quot; href=&quot;https://2018.bloomca.me/&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./style.css&quot;/&gt;&lt;title&gt;Websites in 2018&lt;/title&gt;&lt;meta name=&quot;author&quot; content=&quot;Seva Zaikov&quot;/&gt;&lt;meta name=&quot;description&quot; content=&quot;Example of bloated website in 2018&quot;/&gt;&lt;meta name=&quot;keywords&quot; content=&quot;modern bloated website, websites in 2018, seva zaikov, bloomca&quot;/&gt;&lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot;/&gt;&lt;meta name=&quot;twitter:site&quot; content=&quot;@blooomca&quot;/&gt;&lt;meta name=&quot;twitter:title&quot; content=&quot;Websites in 2018&quot;/&gt;&lt;meta name=&quot;twitter:description&quot; content=&quot;Example of bloated website in 2018&quot;/&gt;&lt;meta name=&quot;twitter:image&quot; content=&quot;http://www.gravatar.com/avatar/1533eeac2fdcad45300a1963d5704118?s=200&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;47.804794520548&quot;&gt;

&lt;div id=&quot;notification&quot; readability=&quot;6&quot;&gt;&lt;img class=&quot;loader&quot; src=&quot;https://2018.bloomca.me/spinner.gif&quot;/&gt;&lt;div class=&quot;notification&quot; readability=&quot;7&quot;&gt;
&lt;p class=&quot;notification-text&quot;&gt;Do you want to receive notifications?&lt;/p&gt;
&lt;p&gt;&lt;button id=&quot;no-notifications-btn&quot;&gt;no&lt;/button&gt; &lt;button id=&quot;yes-notifications-btn&quot;&gt;yes&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;cookies&quot; readability=&quot;6.2799043062201&quot;&gt;&lt;img class=&quot;loader&quot; src=&quot;https://2018.bloomca.me/spinner.gif&quot;/&gt;&lt;div class=&quot;cookies&quot; readability=&quot;8.3732057416268&quot;&gt;
&lt;h2&gt;Your Privacy&lt;/h2&gt;
&lt;p&gt;We use cookies on our website to improve your experience and show more relevant advertisements.&lt;/p&gt;
&lt;p&gt;If you want to learn more, please take a look at our &lt;a href=&quot;https://2018.bloomca.me/en#&quot;&gt;Terms and Conditions&lt;/a&gt; and &lt;a href=&quot;https://2018.bloomca.me/en#a&quot;&gt;Cookies Policy&lt;/a&gt;.&lt;/p&gt;
&lt;button id=&quot;cookies-btn&quot; class=&quot;btn&quot;&gt;Accept&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;restrict-age&quot; class=&quot;container&quot; readability=&quot;10&quot;&gt;

&lt;p&gt;According to the California Law §28, Hague Convention and Maritime Law, we can't show the content of this website to people who have not reached 18 years age.&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-material&quot; class=&quot;container&quot; readability=&quot;17&quot;&gt;
&lt;h2&gt;Please Disable Your Adblock&lt;/h2&gt;
&lt;p&gt;Advertisement is our main revenue source. We always try to do our best so that you can use our website for free, and it would be wonderful, if you whitelist our site from your adblock.&lt;/p&gt;
&lt;p&gt;We also don't like ads, but our mission is to provide this service to the biggest amount of people possible, and it is possible only when we are free. Unfortunately, it is impossible without advertisements.&lt;/p&gt;
&lt;button id=&quot;block-material-btn&quot; class=&quot;btn&quot;&gt;Got it&lt;/button&gt;&lt;/div&gt;
&lt;div id=&quot;donate&quot; class=&quot;container&quot; readability=&quot;21&quot;&gt;

&lt;p&gt;Our website is financially independent – nobody influences us on what and how we are working. We don't spread words of our investors or owners, because there is nobody behind us. And unlike many others, we haven’t put up a paywall as it is extremely important for us to keep everything free and accessible to everyone.&lt;/p&gt;
&lt;p&gt;Unfortunately, revenue from advertising is falling, so we increasingly need contributions from our users to continue on what we are doing. By donating to us, not only you help this service, but others as well, and the whole open web at all. Thanks for being with us.&lt;/p&gt;
&lt;button id=&quot;donate-btn&quot; class=&quot;btn&quot;&gt;Got it&lt;/button&gt;&lt;/div&gt;
&lt;div id=&quot;consultant&quot; readability=&quot;9.5&quot;&gt;Ирина, консультант

&lt;/div&gt;
&lt;div id=&quot;search-results&quot;&gt;
&lt;div class=&quot;choice-container&quot;&gt;
&lt;div class=&quot;choice&quot;&gt;
&lt;h2&gt;Did you find what you were looking for?&lt;/h2&gt;
&lt;p&gt;&lt;button id=&quot;yes-search-results&quot; class=&quot;choice-btn&quot;&gt;yes&lt;/button&gt; &lt;button id=&quot;no-search-results&quot; class=&quot;choice-btn&quot;&gt;no&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;wrong&quot; readability=&quot;8&quot;&gt;

&lt;p&gt;Our wonderful team already knows about the problem and is working hard on it. We apologize for any inconvenience!&lt;/p&gt;
&lt;button class=&quot;btn&quot; id=&quot;wrong-button&quot;&gt;Sad story :(&lt;/button&gt;
&lt;div class=&quot;recommend&quot;&gt;
&lt;h3&gt;How likely will you recommend our product to your friends, colleagues and relatives?&lt;/h3&gt;
&lt;div class=&quot;recommend-circles&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;finish&quot; class=&quot;container&quot; readability=&quot;14.805333333333&quot;&gt;

&lt;p&gt;Of course, it is not that bad, and there are plently of good, fast and responsive websites, which are not bloated with unnecessary information and poorly working widgets.&lt;/p&gt;
&lt;p&gt;Maybe somebody will think why is it so and what can we do to avoid it in the future to improve web experience.&lt;/p&gt;

&lt;/div&gt;
&lt;/body&gt;</description>
<pubDate>Tue, 23 Oct 2018 16:36:35 +0000</pubDate>
<dc:creator>bloomca</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://2018.bloomca.me/en</dc:identifier>
</item>
<item>
<title>Coinbase is launching support for the USDC stablecoin</title>
<link>https://blog.coinbase.com/coinbase-and-circle-announce-the-launch-of-usd-coin-a-digital-dollar-2cd6548d237</link>
<guid isPermaLink="true" >https://blog.coinbase.com/coinbase-and-circle-announce-the-launch-of-usd-coin-a-digital-dollar-2cd6548d237</guid>
<description>&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot; readability=&quot;50.193941389529&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*qdrskGRroscXD_i2y0dKUw.png&quot; data-width=&quot;1500&quot; data-height=&quot;500&quot; data-is-featured=&quot;true&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*qdrskGRroscXD_i2y0dKUw.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*qdrskGRroscXD_i2y0dKUw.png&quot;/&gt;&lt;/div&gt;

&lt;p name=&quot;cee5&quot; id=&quot;cee5&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;The new USDC stablecoin is fully collateralized by US dollars and supported by Coinbase and Circle as co-founding members of the CENTRE Consortium&lt;/em&gt;&lt;/p&gt;

&lt;p name=&quot;1484&quot; id=&quot;1484&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Starting today, Coinbase customers in supported jurisdictions can buy, sell, send and receive the USD Coin stablecoin (&lt;a href=&quot;https://www.coinbase.com/price/usdc?utm_medium=blog&amp;amp;utm_source=medium&amp;amp;utm_campaign=usdc_announce&quot; data-href=&quot;https://www.coinbase.com/price/usdc?utm_medium=blog&amp;amp;utm_source=medium&amp;amp;utm_campaign=usdc_announce&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;USDC&lt;/a&gt;) at &lt;a href=&quot;https://www.coinbase.com/?utm_medium=blog&amp;amp;utm_source=medium&amp;amp;utm_campaign=usdc_announce&quot; data-href=&quot;https://www.coinbase.com/?utm_medium=blog&amp;amp;utm_source=medium&amp;amp;utm_campaign=usdc_announce&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Coinbase.com&lt;/a&gt; and in the Coinbase &lt;a href=&quot;https://itunes.apple.com/us/app/coinbase-bitcoin-wallet/id886427730?mt=8&quot; data-href=&quot;https://itunes.apple.com/us/app/coinbase-bitcoin-wallet/id886427730?mt=8&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;iOS&lt;/a&gt; and &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.coinbase.android&quot; data-href=&quot;https://play.google.com/store/apps/details?id=com.coinbase.android&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Android&lt;/a&gt; apps. US customers outside New York state can buy and sell, and customers around the world can send and receive. More geographies will be available in the future.&lt;/p&gt;
&lt;p name=&quot;fc7f&quot; id=&quot;fc7f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This is the first time Coinbase has supported a stablecoin, which is fundamentally different from other cryptocurrencies. Unlike bitcoin or ether, a USDC is meant to represent a single US dollar (USD) that does not move up or down relative to its reference currency. One USDC is a 1:1 representation of a US dollar on the Ethereum blockchain.&lt;/p&gt;
&lt;p name=&quot;1780&quot; id=&quot;1780&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Each USDC is 100% collateralized by a corresponding USD held in accounts subject to regular public reporting of reserves. The underlying technology behind the USDC was developed collaboratively between Coinbase and Circle, in our capacity as partners and co-founders of the new &lt;a href=&quot;http://centre.io&quot; data-href=&quot;http://centre.io&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;CENTRE Consortium&lt;/a&gt;.&lt;/p&gt;
&lt;p name=&quot;4e41&quot; id=&quot;4e41&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The advantage of a blockchain-based digital dollar like USDC is easier to program with, to send quickly, to use in dApps, and to store locally than traditional bank account-based dollars. That’s why we think of it as an important step towards a more open financial system.&lt;/p&gt;
&lt;p name=&quot;a0f1&quot; id=&quot;a0f1&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Use cases for USDC today include:&lt;/p&gt;
&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;d3a0&quot; id=&quot;d3a0&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Improved send and receive.&lt;/strong&gt; Two Ethereum wallets can quickly send and receive any amount of USDC at any time of day. Large transfers for business purposes become as easy as small e-commerce payments. Consumers can use the Coinbase app to send USDC to someone, while remaining confident the value is stable.&lt;/li&gt;
&lt;li name=&quot;10e3&quot; id=&quot;10e3&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Use in dApps and exchanges.&lt;/strong&gt; There is a burgeoning ecosystem of crypto dApps, exchanges, and blockchain-based games. A USDC follows the ERC20 standard, which means it can be used with any app that accepts tokens based on that standard. The USDC can thus be used as a stable digital dollar to buy items in the crypto ecosystem, from Cryptokitties to tickets for blockchain-based games.&lt;/li&gt;
&lt;li name=&quot;096e&quot; id=&quot;096e&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;A programmable dollar.&lt;/strong&gt; For developers and fintech companies, a digital dollar like USDC is easier to program with. For example, given the private keys for USDC, a program can easily send and receive them back and forth using the public Ethereum blockchain.&lt;/li&gt;
&lt;/ul&gt;&lt;p name=&quot;06f1&quot; id=&quot;06f1&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Today’s launch is made possible by the collaboration between Coinbase and Circle, as co-founders of the new CENTRE Consortium. Both Coinbase and Circle operate with a compliance-first approach and a track record of security. That’s why we believe CENTRE is uniquely positioned to offer USDC to people who want to take advantage of the benefits of stablecoins.&lt;/p&gt;
&lt;p name=&quot;0463&quot; id=&quot;0463&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;USDC will be coming to Coinbase Pro in the coming weeks, and is already supported on Coinbase Wallet, a user-controlled wallet where people can store ERC20 tokens.&lt;/p&gt;
&lt;p name=&quot;74fa&quot; id=&quot;74fa&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;Learn more about USDC and stablecoins in this &lt;a href=&quot;https://www.youtube.com/watch?v=COljxvEgDOg&quot; data-href=&quot;https://www.youtube.com/watch?v=COljxvEgDOg&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;video&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 23 Oct 2018 16:08:46 +0000</pubDate>
<dc:creator>_nvs</dc:creator>
<og:title>Coinbase and Circle announce the launch of USDC — a Digital Dollar</og:title>
<og:url>https://blog.coinbase.com/coinbase-and-circle-announce-the-launch-of-usdc-a-digital-dollar-2cd6548d237</og:url>
<og:image>https://cdn-images-1.medium.com/max/1200/1*qdrskGRroscXD_i2y0dKUw.png</og:image>
<og:description>The new USDC stablecoin is fully collateralized by US dollars and supported by Coinbase and Circle as co-founding members of the CENTRE…</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.coinbase.com/coinbase-and-circle-announce-the-launch-of-usdc-a-digital-dollar-2cd6548d237</dc:identifier>
</item>
<item>
<title>DRM for chargers? Google Pixel 3 locks fast Qi charging to its own stand</title>
<link>https://arstechnica.com/?p=1398545</link>
<guid isPermaLink="true" >https://arstechnica.com/?p=1398545</guid>
<description>&lt;img src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/10/3-800x600.jpg&quot; alt=&quot;Photos of the Pixel 3.&quot;/&gt;&lt;div class=&quot;caption-text&quot;&gt;&lt;a href=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/10/3.jpg&quot; class=&quot;enlarge-link&quot; data-height=&quot;1440&quot; data-width=&quot;1920&quot;&gt;Enlarge&lt;/a&gt; &lt;span class=&quot;sep&quot;&gt;/&lt;/span&gt; The Pixel 3 XL and Pixel 3.&lt;/div&gt;&lt;div class=&quot;caption-credit&quot;&gt;Ron Amadeo&lt;/div&gt;
&lt;aside id=&quot;social-left&quot; aria-label=&quot;Read the comments or share this article&quot;&gt;
&lt;h4 class=&quot;comment-count-before&quot;&gt;&lt;a aria-describedby=&quot;190 posters participating&quot; title=&quot;190 posters participating&quot; class=&quot;comment-count icon-comment-bubble-down&quot; href=&quot;https://arstechnica.com/gadgets/2018/10/drm-for-chargers-google-pixel-3-locks-fast-qi-charging-to-its-own-79-stand/?comments=1&quot;&gt;reader comments&lt;/a&gt;&lt;/h4&gt;
&lt;a aria-describedby=&quot;190 posters participating&quot; title=&quot;190 posters participating&quot; class=&quot;comment-count icon-comment-bubble-down&quot; href=&quot;https://arstechnica.com/gadgets/2018/10/drm-for-chargers-google-pixel-3-locks-fast-qi-charging-to-its-own-79-stand/?comments=1&quot;&gt;&lt;span class=&quot;comment-count-number&quot;&gt;335&lt;/span&gt;&lt;/a&gt;
&lt;div class=&quot;share-links&quot;&gt;
&lt;h4&gt;Share this story&lt;/h4&gt;
&lt;/div&gt;
&lt;/aside&gt;&lt;p&gt;&lt;a href=&quot;https://arstechnica.com/gadgets/2018/10/pixel-3-xl-review-great-software-but-google-just-isnt-a-hardware-leader/4/&quot;&gt;Google's Pixel 3 smartphone&lt;/a&gt; is shipping out to the masses, and people hoping to take advantage of the new &lt;a href=&quot;https://arstechnica.com/gadgets/2017/09/how-qi-wireless-charging-works-and-why-it-hasnt-taken-over-yet/&quot;&gt;Qi wireless charging&lt;/a&gt; capabilities have run into a big surprise. For some unexplained reason, Google is locking out third-party Qi chargers from reaching the highest charging speeds on the Pixel 3. Third-party chargers are capped to a pokey 5W charging speed. If you want 10 watts of wireless charging, Google hopes you will invest in its outrageously priced Pixel Stand, which is $79.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.androidpolice.com/2018/10/22/google-limits-pixel-3-wireless-charging-rate-standard-5w-third-party-charging-pads/&quot;&gt;Android Police&lt;/a&gt; reports that a reader purchased an Anker wireless charger for their Pixel 3, and, after noticing the slow charging speed, this person contacted the company. Anker confirmed that something screwy was going on with Google's charging support, saying &quot;Pixel sets a limitation for third-party charging accessories and we are afraid that even our fast wireless charger can only provide 5W for these 2x devices.&quot;&lt;/p&gt;

Normally we would chalk this up to some kind of bug, but apparently Google told Android Police that this was &lt;em&gt;on purpose&lt;/em&gt;. The site doesn't have a direct quote, but it writes that, after reaching out to Google PR, it was &quot;told that the Pixel 3 would charge at 10W on the Pixel Stand [and that] due to a 'secure handshake' being established that third-party chargers would indeed be limited to 5W.&quot; We've asked Google &lt;em&gt;why&lt;/em&gt; it is doing this and will update this article if we hear back, but it's hard to imagine a justification for this.
&lt;p&gt;Regular 10W wireless chargers can be had for around $15-$25, so Google's $79 Pixel Stand comes at a hefty markup. Qi is a standard, and a phone should strive to work with every charger. The Qi standard &lt;a href=&quot;https://t.co/EJlaCugeC3&quot;&gt;goes up to 15w&lt;/a&gt;, so there doesn't seem to be any reason for Google's 5W limit. The $79 Pixel Stand uses the &quot;secure handshake&quot; to provide a bit of security for the phone's ambient display mode, which can do things like display a photo slideshow while charging. That's not an excuse for limiting the charging speed, though. Another oddity is that the Pixel 3 displays &quot;Charging rapidly&quot; while on a 5W or 10W wireless charger, which is not correct, especially when the wired charger is 18W.&lt;/p&gt;
&lt;p&gt;This is very disappointing given that the Pixel 3 made a big sacrifice to make wireless charging work: it switched from metal to a fragile glass back. To now limit faster wireless charging to its own charger is probably going to ruffle some feathers. It's another strange hardware decision on a phone full of strange hardware decisions.&lt;/p&gt;

</description>
<pubDate>Tue, 23 Oct 2018 15:44:50 +0000</pubDate>
<dc:creator>extraterra</dc:creator>
<og:url>https://arstechnica.com/gadgets/2018/10/drm-for-chargers-google-pixel-3-locks-fast-qi-charging-to-its-own-79-stand/</og:url>
<og:title>DRM for chargers? Google Pixel 3 locks fast Qi charging to certified chargers [Update]</og:title>
<og:image>https://cdn.arstechnica.net/wp-content/uploads/2018/10/3-760x380.jpg</og:image>
<og:description>Qi wireless charging is a standard. This isn't supposed to happen.</og:description>
<og:type>article</og:type>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arstechnica.com/gadgets/2018/10/drm-for-chargers-google-pixel-3-locks-fast-qi-charging-to-its-own-79-stand/</dc:identifier>
</item>
<item>
<title>Jepsen: MongoDB 3.6.4</title>
<link>http://jepsen.io/analyses/mongodb-3-6-4</link>
<guid isPermaLink="true" >http://jepsen.io/analyses/mongodb-3-6-4</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://mongodb.com&quot;&gt;MongoDB&lt;/a&gt; is a long-time user of &lt;a href=&quot;https://jepsen.io&quot;&gt;Jepsen&lt;/a&gt;. Over the past three years, Jepsen has performed several analyses for MongoDB, and MongoDB has integrated an expansive Jepsen test suite into their CI system. In March, MongoDB requested Jepsen perform an analysis on a previously untested configuration: sharded clusters. We also pursued new research into modeling and verifying causal consistency, a new safety feature in MongoDB 3.6. First, we will verify that sharded clusters offer comparable safety to individual replica sets in version 3.6.4, and then we’ll discuss the anomalies we uncovered in versions 3.6.4 and 4.0.0-rc1 with our new causal consistency tests.&lt;/p&gt;

&lt;p&gt;Sharded clusters split a collection of documents into parts, called &lt;em&gt;shards&lt;/em&gt;, based on a single field in each document: the &lt;em&gt;shard key&lt;/em&gt;. Each shard is stored on an independent MongoDB replica set. A router process, called &lt;code&gt;mongos&lt;/code&gt;, routes client requests to the appropriate replica set. A dedicated MongoDB replica set, called &lt;code&gt;configsvr&lt;/code&gt;, maintains the cluster state including the mapping of shards to replica sets.&lt;/p&gt;
&lt;p&gt;Since the size of shards may change over time, MongoDB further divides shards into &lt;em&gt;chunks&lt;/em&gt;. If a shard grows too large, a balancer process, driven by the config server, can produce a more even distribution by splitting and moving chunks to other shards.&lt;/p&gt;
&lt;h2 id=&quot;methods&quot;&gt; Methods&lt;/h2&gt;
&lt;p&gt;We repeated our tests from &lt;a href=&quot;http://jepsen.io/analyses/mongodb-3-4-0-rc3&quot;&gt;prior MongoDB analyses&lt;/a&gt; with sharded clusters. Our &lt;a href=&quot;https://github.com/jepsen-io/mongodb/blob/74535d70fe28ad4fc58ae49946e8029d1b810211/src/jepsen/mongodb/sharded.clj#L376-L411&quot;&gt;cas-register test&lt;/a&gt; verifies that single documents support &lt;a href=&quot;https://jepsen.io/consistency/models/linearizable&quot;&gt;linearizable&lt;/a&gt; reads, writes, and compare-and-set operations. Because this test is computationally expensive, we supplement it with a &lt;a href=&quot;https://github.com/jepsen-io/mongodb/blob/74535d70fe28ad4fc58ae49946e8029d1b810211/src/jepsen/mongodb/sharded.clj#L335-L369&quot;&gt;set test&lt;/a&gt;, which verifies that compare-and-set operations are sequentially consistent by adding elements to a single document, and verifying that all acknowledged elements are present in a final read. This test is faster and cheaper to verify, because, we just care that each op shows up in final read. This allows us to check more events and catch rare cases of lost updates.&lt;/p&gt;
&lt;p&gt;We set up a cluster of 5 nodes with a configurable number of routers and shards, each shard being a replica set. Each node runs one mongod &lt;code&gt;configsvr&lt;/code&gt; process, a &lt;code&gt;mongod&lt;/code&gt; process per shard, and at most one &lt;code&gt;mongos&lt;/code&gt; router to accept requests. The number of routers in the cluster can be limited as well.&lt;/p&gt;
&lt;p&gt;Sharded clusters have the added complexity of chunk migrations, which offers significant potential for data loss if mishandled. We therefore designed &lt;a href=&quot;https://github.com/jepsen-io/mongodb/blob/74535d70fe28ad4fc58ae49946e8029d1b810211/src/jepsen/mongodb/sharded.clj#L297-L316&quot;&gt;a balancer nemesis&lt;/a&gt;, which combines network partitions and &lt;code&gt;moveChunk&lt;/code&gt; commands to move acknowledged data under adverse conditions. We choose chunks containing recently written-to document IDs, move them to new, randomly selected shards, then immediately partition the network and heal it some time later.&lt;/p&gt;
&lt;img src=&quot;http://jepsen.io/analyses/mongodb-3-6-4/sharded-topology.jpg&quot; alt=&quot;Topology of a sharded cluster with two shards, including a majority-halves partition splitting nodes into two isolated groups: a majority component with three nodes, and a minority component with two.&quot;/&gt;Topology of a sharded cluster with two shards, including a majority-halves partition splitting nodes into two isolated groups: a majority component with three nodes, and a minority component with two.
&lt;h2 id=&quot;results&quot;&gt; Results&lt;/h2&gt;
&lt;p&gt;We know that MongoDB &lt;a href=&quot;https://aphyr.com/posts/322-jepsen-mongodb-stale-reads&quot;&gt;can lose committed writes&lt;/a&gt; for all levels of write concern less than &lt;code&gt;majority&lt;/code&gt;, since those writes could be rolled back by newer primaries, regardless of whether the &lt;code&gt;journaled&lt;/code&gt; flag is enabled. This is a documented behavior for MongoDB replica sets, and sharded clusters are no different. In &lt;a href=&quot;http://jepsen.io.s3.amazonaws.com/analyses/mongodb-3-6-4/sub-maj-w-set-20180420T185758.zip&quot;&gt;this set test&lt;/a&gt; against a sharded cluster, with &lt;a href=&quot;https://docs.mongodb.com/manual/reference/write-concern/#j-option&quot;&gt;write concern&lt;/a&gt; &lt;code&gt;journaled&lt;/code&gt;, MongoDB lost 543 out of 6095 successfully acknowledged writes.&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;181/2032&lt;/td&gt;
&lt;td&gt;1/3048&lt;/td&gt;
&lt;td&gt;229/254&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;This result is unsurprising, as sharded clusters only affect where data is located not the replication protocol for the data within a shard.&lt;/p&gt;
&lt;p&gt;What about &lt;code&gt;majority&lt;/code&gt; writes and &lt;code&gt;linearizable&lt;/code&gt; reads? After weeks of testing both insert-only and update-heavy workloads against sharded clusters, we’ve found that MongoDB’s v1 replication protocol appears to provide linearizable single-document reads, writes, and compare-and-set, through shard rebalances and network partitions.&lt;/p&gt;
&lt;p&gt;Running fewer &lt;code&gt;mongos&lt;/code&gt; routers than nodes in the test lowers the throughput of the test, possibly masking uncommon concurrency errors. However, we do not have any evidence that &lt;code&gt;mongos&lt;/code&gt; introduces linearizability violations.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jepsen.io/consistency/models/causal&quot;&gt;Causal consistency&lt;/a&gt; (CC) is a consistency model for distributed databases, which guarantees that operations that are causally related are always observed in the same order. For instance, replies to a question should appear only if the question is also visible, never on their own. In this model, operations that have no dependency relationship are said to be concurrent, and concurrent operations may have no apparent fixed order.&lt;/p&gt;
&lt;p&gt;Causal is one of many middle grounds between eventually consistent and linearizable systems. In eventually consistent systems, operations can be observed in any order so long as they eventually converge. And in &lt;a href=&quot;https://jepsen.io/consistency/models/linearizable&quot;&gt;linearizable&lt;/a&gt; systems, operations must appear to occur in the same order to every single observer, with hard real-time bounds. Causal consistency allows clients to only wait for a subset of dependent operations rather than waiting for a total order of all operations. This is especially useful when a total order is too expensive or impossible to provide and allows implementations to offer improved availability.&lt;/p&gt;
&lt;p&gt;Thus far, causal consistency has generally been limited to research projects, like &lt;a href=&quot;https://www.cs.cmu.edu/~dga/papers/cops-sosp2011.pdf&quot;&gt;COPS&lt;/a&gt;, &lt;a href=&quot;http://www.bailis.org/papers/bolton-sigmod2013.pdf&quot;&gt;Bolt-on Causal Consistency&lt;/a&gt;, and &lt;a href=&quot;https://syncfree.github.io/antidote/&quot;&gt;AntidoteDB&lt;/a&gt;; MongoDB is one of the first commercial databases we know of which provides an implementation.&lt;/p&gt;
&lt;p&gt;So how does MongoDB approach causal consistency? If we identify a MongoDB collection as a set of read-write registers, there are &lt;a href=&quot;https://docs.mongodb.com/manual/core/read-isolation-consistency-recency/&quot;&gt;four guarantees that MongoDB claims&lt;/a&gt; for causal consistency:&lt;/p&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;&lt;em&gt;Read your writes:&lt;/em&gt; Read operations reflect the results of write operations that precede them.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Monotonic reads:&lt;/em&gt; Read operations do not return results that correspond to an earlier state of the data than a preceding read operation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Monotonic writes:&lt;/em&gt; Write operations that must precede other writes are executed before those other writes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Writes follow reads:&lt;/em&gt; Write operations that must occur after read operations are executed after those read operations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MongoDB clients capture causality with the concept of a &lt;em&gt;session&lt;/em&gt;: a single-threaded context in which each database operation is causally subsequent to the previous operation. Sessions exist alongside client connections, and are associated with a single client. Sessions are passed to the call site with each read and write, providing the server with the highest server times that the client has seen.&lt;/p&gt;
&lt;p&gt;Replica sets use a log of operations (the &lt;em&gt;oplog&lt;/em&gt;) in which each operation is identified by an &lt;em&gt;optime&lt;/em&gt;. Optimes are a tuple of an &lt;em&gt;election ID&lt;/em&gt; and a &lt;em&gt;timestamp&lt;/em&gt;, which uniquely identify every operation. Nodes advance their timestamps monotonically to match the local wall clock, or, like a &lt;a href=&quot;https://en.wikipedia.org/wiki/Lamport_timestamps&quot;&gt;Lamport clock&lt;/a&gt;, the highest observed timestamp from any other node.&lt;/p&gt;
&lt;p&gt;Sessions use the timestamp to provide a monotonic ordering relation for operations. When a session asks a server to perform an operation, it includes the last timestamp that session observed; the server must wait until that timestamp has been reached to service the request. This holds even between different shards: all nodes across all replica sets essentially share a single timestamp, whereas election IDs are only meaningful within individual replica sets.&lt;/p&gt;
&lt;p&gt;This provides monotonicity because once an operation is majority committed to the oplog, no subsequent operation can be majority committed with a lower timestamp. Likewise, when a majority read is performed with a certain timestamp, that result can never be un-observed by a majority reader with an equal or higher timestamp.&lt;/p&gt;
&lt;p&gt;Sessions expose their timestamp as a causal token. That token can be used to force one session to observe the results of another. That is, users can &lt;a href=&quot;https://docs.mongodb.com/manual/core/read-isolation-consistency-recency/#examples&quot;&gt;store and pass tokens&lt;/a&gt; to other clients, even other nodes, to preserve causal ordering.&lt;/p&gt;
&lt;p&gt;MongoDB’s sessions are a special case of causal consistency: sessions capture a linear notion of causality in which operations are totally ordered. In general, the causal relationships between operations could be an arbitrary directed acyclic graph (DAG). But in the limiting case where every session performs only a single operation, timestamps can be manually threaded from session to session to construct arbitrary DAGs.&lt;/p&gt;
&lt;img src=&quot;http://jepsen.io/analyses/mongodb-3-6-4/causal-operation-graph.jpg&quot; alt=&quot;Two concurrent sets of causally related operations. On the left is a graph that forks, and on the right is a linear chain. Note that {G,H,I} is not causally related to {C,D,E}, despite both depending on {A,B}; the two forks are concurrent.&quot;/&gt;Two concurrent sets of causally related operations. On the left is a graph that forks, and on the right is a linear chain. Note that {G,H,I} is not causally related to {C,D,E}, despite both depending on {A,B}; the two forks are concurrent.
&lt;h2 id=&quot;methods-1&quot;&gt; Methods&lt;/h2&gt;
&lt;p&gt;We implemented &lt;a href=&quot;https://github.com/jepsen-io/jepsen/blob/f345226dba1266bc37487d734a02caddf7d1d125/jepsen/src/jepsen/tests/causal.clj&quot;&gt;a new kind of Jepsen test&lt;/a&gt; to check causal consistency, adapted from Bouajjani, Enea, Guerraoui, and Hamza’s techniques &lt;a href=&quot;https://arxiv.org/pdf/1611.00580.pdf&quot;&gt;On Verifying Causal Consistency&lt;/a&gt;. We model the relationship between operations as a causal order (CO), which represents the set of operations visible to each operation we perform. We use independent keys and a single session for each, which should produce a total order per key.&lt;/p&gt;
&lt;p&gt;We perform &lt;a href=&quot;https://github.com/jepsen-io/jepsen/blob/f345226dba1266bc37487d734a02caddf7d1d125/jepsen/src/jepsen/tests/causal.clj#L124&quot;&gt;five operations&lt;/a&gt; with our &lt;a href=&quot;https://github.com/jepsen-io/mongodb/blob/74535d70fe28ad4fc58ae49946e8029d1b810211/src/jepsen/mongodb/sharded.clj#L413-L487&quot;&gt;client&lt;/a&gt; linearly for each CO: an initial read, a write of 1, a read, a write of 2, and a final read. These operations are &lt;a href=&quot;https://github.com/jepsen-io/jepsen/blob/f345226dba1266bc37487d734a02caddf7d1d125/jepsen/src/jepsen/tests/causal.clj#L113-L116&quot;&gt;represented as&lt;/a&gt; &lt;code&gt;:read-init&lt;/code&gt;, &lt;code&gt;:write&lt;/code&gt;, &lt;code&gt;:read&lt;/code&gt;, &lt;code&gt;:write&lt;/code&gt;, and &lt;code&gt;:read&lt;/code&gt; in our histories. We expect to see nothing in the initial read and mark this nil response as 0 in the history. Then we execute our writes and reads, with each operation depending on the prior one. Our &lt;a href=&quot;https://github.com/jepsen-io/jepsen/blob/f345226dba1266bc37487d734a02caddf7d1d125/jepsen/src/jepsen/tests/causal.clj#L88-L110&quot;&gt;checker&lt;/a&gt; expects the &lt;a href=&quot;https://github.com/jepsen-io/jepsen/blob/f345226dba1266bc37487d734a02caddf7d1d125/jepsen/src/jepsen/tests/causal.clj#L33-L81&quot;&gt;register&lt;/a&gt; to advance through the states [0, 1, 2]. That is, our history should be: &lt;code&gt;:read-init 0, :write 1, :read 1, :write 2, :read 2&lt;/code&gt; in every CO. Anomalies become apparent when a CO does not reflect the order that we executed (e.g. [0, 2, 1]) or if dependent operations are rolled back (e.g. [0, 1, 0]). Lastly, if &lt;code&gt;:read-init&lt;/code&gt; observes a non-zero write (e.g. [n, 1, 2] where n ≠ 0), then we cannot validate the causal order.&lt;/p&gt;
&lt;img src=&quot;http://jepsen.io/analyses/mongodb-3-6-4/test-order.jpg&quot; alt=&quot;Jepsen operations in a causal order.&quot;/&gt;Jepsen operations in a causal order.
&lt;h2 id=&quot;results-1&quot;&gt; Results&lt;/h2&gt;
&lt;p&gt;We uncovered clear evidence of causal consistency violations. So far, &lt;a href=&quot;https://s3.amazonaws.com/jepsen.io/analyses/mongodb-3-6-4/cc-failures.zip&quot;&gt;we’ve observed two types of anomalies&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;nemesis&lt;/td&gt;
&lt;td&gt;:start&lt;/td&gt;
&lt;td&gt;[:isolated {“n5” #{“n2” …}, …}]&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;:read-init&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;:write&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;:read&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;:write&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;:nemesis&lt;/td&gt;
&lt;td&gt;:stop&lt;/td&gt;
&lt;td&gt;:network-healed&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;:read&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;In this example, we perform two writes which MongoDB acknowledges, during a network partition. Once the partition heals, despite confirming the writes, our final read returns the initial, blank state of the register—as if those writes &lt;em&gt;had never taken place&lt;/em&gt;.&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;:read-init&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;:write&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;:read&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;:write&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;:nemesis&lt;/td&gt;
&lt;td&gt;:start&lt;/td&gt;
&lt;td&gt;[:isolated {“n5” #{“n2” …} …}]&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;:nemesis&lt;/td&gt;
&lt;td&gt;:stop&lt;/td&gt;
&lt;td&gt;:network-healed&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;:read&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;The last read executes during a network partition, and returns after the partition heals. We can see from the final read that the value of the second write appears to have been rolled back, rather than being cached for the client.&lt;/p&gt;
&lt;p&gt;In this case, both COs were executed with write concern &lt;code&gt;w1&lt;/code&gt;, and read level &lt;code&gt;local&lt;/code&gt;. The first anomaly, where reads observe the uninitialized state of the CO, disappears with read level &lt;code&gt;majority&lt;/code&gt;. We did not observe any anomalies with write concern &lt;code&gt;majority&lt;/code&gt;. MongoDB version 4.0.0-rc1 displayed comparable behavior. This issue is further described in &lt;a href=&quot;https://jira.mongodb.org/browse/SERVER-35316&quot;&gt;SERVER-35316&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;MongoDB and Jepsen have an &lt;a href=&quot;https://aphyr.com/posts/284-call-me-maybe-mongodb&quot;&gt;established&lt;/a&gt; &lt;a href=&quot;https://aphyr.com/posts/322-call-me-maybe-mongodb-stale-reads&quot;&gt;history&lt;/a&gt; of &lt;a href=&quot;http://jepsen.io/analyses/mongodb-3-4-0-rc3&quot;&gt;public analyses&lt;/a&gt; and internal tests. This also makes finding new bugs difficult. We have, by now, picked much of the low-hanging fruit. Sharding has &lt;a href=&quot;https://jira.mongodb.org/browse/SERVER-20361&quot;&gt;known issues&lt;/a&gt;, but so far we haven’t uncovered any new ones.&lt;/p&gt;
&lt;p&gt;We did, however, uncover problems with MongoDB’s causal consistency: it doesn’t work unless users use both read and write concern &lt;code&gt;majority&lt;/code&gt;, and the &lt;a href=&quot;https://docs.mongodb.com/manual/core/read-isolation-consistency-recency/#causal-consistency&quot;&gt;causal consistency documentation&lt;/a&gt; made no mention of this. While MongoDB will reject causal requests with the safer &lt;code&gt;linearizable&lt;/code&gt; read level, and the unsafe write concern &lt;code&gt;unacknowledged&lt;/code&gt;, it will happily accept intermediate levels, like write concern &lt;code&gt;2&lt;/code&gt; or read level &lt;code&gt;local&lt;/code&gt;. Since many users use sub-majority operations for performance reasons, and since causal consistency is typically used for high-performance local operations which do not require coordination with other cluster nodes, users could have reasonably assumed that causal sessions would ensure causal safety for their sub-majority operations; they do not.&lt;/p&gt;
&lt;p&gt;Mongo has since &lt;a href=&quot;https://jira.mongodb.org/browse/DOCS-11866&quot;&gt;added numerous warnings&lt;/a&gt; to the consistency docs advising users that its guarantees apply only to &lt;code&gt;majority&lt;/code&gt;/&lt;code&gt;majority&lt;/code&gt; operations, which should help guide users toward using the feature correctly.&lt;/p&gt;
&lt;p&gt;Even with causal sessions, sub-majority reads may fail to observe causally prior successful writes, or fail to observe previously read values, even with &lt;code&gt;majority&lt;/code&gt; write concern. Conversely, sub-majority writes may be visible, then lost in the event of a leader transition, which means that successfully acknowledged prior writes may not be observed by subsequent reads. We interpret this as a violation of causal consistency.&lt;/p&gt;
&lt;p&gt;MongoDB has closed this issue as &lt;a href=&quot;https://jira.mongodb.org/browse/SERVER-35316?focusedCommentId=2008354&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-2008354&quot;&gt;working as designed&lt;/a&gt;, arguing that with sub-majority writes and &lt;code&gt;majority&lt;/code&gt; reads, sessions actually do preserve causal consistency:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Even with write concerns less than majority, the causal ordering of the committed writes is maintained. However, durability is not guaranteed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This interpretation hinges on interpreting successful sub-majority writes as &lt;em&gt;not necessarily successful&lt;/em&gt;: rather, a successful response is merely a suggestion that the write has &lt;em&gt;probably&lt;/em&gt; occurred, or might later occur, or perhaps will occur, be visible to some clients, then un-occur, or perhaps nothing will happen whatsoever.&lt;/p&gt;
&lt;p&gt;We note that this remains MongoDB’s &lt;a href=&quot;https://docs.mongodb.com/manual/core/replica-set-write-concern/#verify-write-operations-to-replica-sets&quot;&gt;default level of write safety&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If one considers every successful sub-majority write as indeterminate, this interpretation is defensible: majority reads will tell you whether or not a prior write succeeded and observe logically monotonic states of the system. Writes are monotonic if observed by majority reads, and so on. This could offer performance advantages where users are unable to make concurrent calls and wish to batch together several writes, all of which will be read later to confirm their success, and no concurrent operation will interfere with those records. However, Jepsen believes users will find this interpretation less intuitive.&lt;/p&gt;
&lt;p&gt;Jepsen continues to recommend &lt;code&gt;majority&lt;/code&gt; writes in all cases, and &lt;code&gt;majority&lt;/code&gt; reads where &lt;code&gt;linearizable&lt;/code&gt; is prohibitively expensive. Anything less than &lt;code&gt;majority&lt;/code&gt; writes can lose data, and anything less than &lt;code&gt;majority&lt;/code&gt; reads can read dirty data. MongoDB has discussed making servers reject write concerns and read levels below &lt;code&gt;majority&lt;/code&gt; when using CC sessions, which might help. We recommended MongoDB update their documentation so users are aware of the requirements for using causal consistency, which was completed in September 2018.&lt;/p&gt;
&lt;p&gt;We typically choose causally consistent systems because they can be made totally available: even when the network is completely down, every node can independently make progress. In fact, slightly stronger models like &lt;a href=&quot;https://www.cs.cmu.edu/~dga/papers/cops-sosp2011.pdf&quot;&gt;causal+&lt;/a&gt; and &lt;a href=&quot;http://www.cs.cornell.edu/lorenzo/papers/cac-tr.pdf&quot;&gt;real-time causal (RTC)&lt;/a&gt; are proven to be the among the strongest consistency models achievable in totally available contexts. However, MongoDB’s replication architecture is currently incompatible with a totally-available approach. Only leaders can write, so some nodes must refuse some operations when the leader is inaccessible, and refuse all writes when no leader can reach a majority.&lt;/p&gt;
&lt;p&gt;So why use MongoDB’s causally consistent sessions? Because they offer stronger safety properties than majority/majority alone. For instance, majority/majority allows you to observe a write, then un-observe it. Or you can write something, then try to query it, and it won’t be there. It’ll show up… eventually! Causal eliminates these anomalies by forcing logical monotonicity. So, if you’re a user of MongoDB with write concern &lt;code&gt;majority&lt;/code&gt; and read level &lt;code&gt;majority&lt;/code&gt;, we recommend using CC sessions in your applications. Furthermore, users who need to ensure the order of operations between different clients should consider passing causal timestamps between those clients via e.g. side channels.&lt;/p&gt;
&lt;p&gt;MongoDB uses monotonic timestamps derived from wall clocks, messages from other servers, and messages from causal-enabled clients, as the link between dependent operations. Two leaders with different election IDs might have similar, locally monotonic, timestamps. So causal sessions based on timestamps alone could perform sub-majority operations on two independently-evolving leaders while still observing a monotonic timestamp order. That’s why we observe anomalies with sub-majority operations: the causal structure of MongoDB operations isn’t (in general) captured by timestamps alone.&lt;/p&gt;
&lt;p&gt;Because MongoDB’s causal model requires majority writes and majority reads, clients essentially pay the latency and availability costs required for &lt;a href=&quot;https://jepsen.io/consistency/models/sequential&quot;&gt;sequential consistency&lt;/a&gt;, which forces a &lt;em&gt;total&lt;/em&gt; order, rather than the partial order required by causal. We believe that MongoDB’s causal sessions might actually provide sequential consistency on individual keys. Due to limitations in sharding, it’s unclear if this extends to multiple keys.&lt;/p&gt;
&lt;p&gt;Finally, there are significant limitations to our tests. Our sharded tests assume a relatively uniform cluster topology, where all MongoDB components partition in the same way. Non-homogeneous topologies where we can partition &lt;code&gt;configsvr&lt;/code&gt; and &lt;code&gt;mongos&lt;/code&gt; processes separately from &lt;code&gt;shardsvr&lt;/code&gt; processes may find unique anomalies. Starting and stopping and killing various component processes may also provide interesting results.&lt;/p&gt;
&lt;p&gt;Our causal consistency test only measures a very simple case: we test short time frames, on single keys, against single nodes, from single client threads. We suspect that writes to multiple nodes might be required to observe causal violations with majority writes and sub-majority reads. We also don’t check how failures and process crashes influence causal orders. Ultimately, there’s still a lot we don’t know!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This work was funded by &lt;a href=&quot;https://mongodb.com&quot;&gt;MongoDB&lt;/a&gt;, and conducted in accordance with the &lt;a href=&quot;https://jepsen.io/ethics&quot;&gt;Jepsen ethics policy&lt;/a&gt;. My thanks to Kyle Kingsbury for his invaluable contributions and review, and to Christopher Meiklejohn, Peter Alvaro, and the MongoDB team, especially Cristopher Stauffer, Max Hirschhorn, Dan Pasette, and Misha Tyulenev.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 23 Oct 2018 14:06:30 +0000</pubDate>
<dc:creator>aphyr</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://jepsen.io/analyses/mongodb-3-6-4</dc:identifier>
</item>
<item>
<title>Motorola and iFixit partner to sell phone repair kits</title>
<link>https://ifixit.org/blog/11644/motorola-ifixit-partnership/</link>
<guid isPermaLink="true" >https://ifixit.org/blog/11644/motorola-ifixit-partnership/</guid>
<description>&lt;p&gt;&lt;span&gt;Motorola was founded in the tiny Chicago suburb of Schaumburg, Illinois in 1928. With just $565 to their name, brothers Paul and Joseph Galvin purchased business plans from a bankrupt tech company, rented out a tiny corner of an office building, and hired just five employees to embark on what would soon become&lt;/span&gt; &lt;a href=&quot;https://www.motorola.com/us/home&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span&gt;Motorola, Inc&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The company’s first products were&lt;/span&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Battery_eliminator&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span&gt;battery eliminators&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, devices that hooked up battery-powered radios to household electricity. But radio technology soon advanced, and, like all technology does at some point, battery eliminators became obsolete. However, Paul Galvin already had his eye on the next target: car radios. He enlisted his engineers to invent a radio receiver that could be embedded in most vehicles for a reasonable price. They were successful, and Galvin was able to sell enough orders to keep Motorola in business.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;wp-caption alignright&quot; readability=&quot;8.283185840708&quot;&gt;&lt;img class=&quot;&quot; src=&quot;https://d3nevzfk7ii3be.cloudfront.net/igi/wDZ5RRumfe4doh1q&quot; width=&quot;175&quot; height=&quot;429&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;The Motorola DynaTAC 8000X was the first commercially available mobile phone, released in 1984. Source: &lt;a href=&quot;https://en.wikipedia.org/wiki/Motorola_DynaTAC&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;It wasn’t until sixty years later, in 1983, that Motorola manufactured the world’s&lt;/span&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Motorola_DynaTAC&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span&gt;first commercial cell phone&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. In 2005, they transformed the mobile phone game with the brightly colored&lt;/span&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=PmGP86bmAnE&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span&gt;Razr flip phone&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. In 2011, the&lt;/span&gt; &lt;a href=&quot;https://www.ifixit.com/Teardown/Motorola+Droid+Bionic+Teardown/6449&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span&gt;Motorola Droid Bionic&lt;/span&gt;&lt;/a&gt; &lt;span&gt;became the most repairable smartphone we’d ever disassembled, scoring a 9 out of 10 on our&lt;/span&gt; &lt;a href=&quot;https://www.ifixit.com/smartphone-repairability&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span&gt;repairability scale&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. And today, Motorola continues their dedication to putting consumers first—they’re the first smartphone manufacturer ever to supply OEM parts to&lt;/span&gt; &lt;a href=&quot;https://www.ifixit.com/Motorola&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span&gt;iFixit&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Like Motorola, iFixit started out small. Our founders, college roommates&lt;/span&gt; &lt;a href=&quot;https://www.ifixit.com/User/2/Kyle+Wiens&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span&gt;Kyle Wiens&lt;/span&gt;&lt;/a&gt; &lt;span&gt;and&lt;/span&gt; &lt;a href=&quot;https://www.ifixit.com/User/4/Luke+Soules&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span&gt;Luke Soules&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, opened iFixit out of their dorm room in 2003 when they couldn’t find a repair manual for Kyle’s broken laptop. And even as we’ve expanded to supply&lt;/span&gt; &lt;a href=&quot;https://www.ifixit.com/store&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span&gt;replacement parts and tools&lt;/span&gt;&lt;/a&gt; &lt;span&gt;to consumers and&lt;/span&gt; &lt;a href=&quot;http://pro.ifixit.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span&gt;repair businesses&lt;/span&gt;&lt;/a&gt; &lt;span&gt;around the world, we’ve made the conscious choice to stay small.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Some folks mistake our size and mission for meaning that we don’t want to work with larger manufacturers. That’s not true. In fact, most manufacturers don’t want to work with us. But not Motorola—they’re the first major smartphone manufacturer in support of what we stand for. And they’re a pioneer of the mobile phone and serve tens of millions of customers around the world, to boot.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;For fixers like us, this partnership is representative of a broader movement in support of our Right to Repair. It’s proof that OEM manufacturers and independent repair can co-exist. Big business and social responsibility, and innovation and sustainability, don’t need to be mutually exclusive. Motorola is setting an industry-leading example of a company that’s looking forward—not just six months ahead to next quarter’s margins, but decades ahead when devices are damned for the landfill.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;And the landfill is where many devices end up in a manufacturer-dominated repair market: E-waste is a &lt;a href=&quot;https://i.unu.edu/media/unu.edu/news/52624/UNU-1stGlobal-E-Waste-Monitor-2014-small.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;50 million ton&lt;/a&gt; global problem. The batteries smartphone-makers are stubbornly gluing into their phones contributed to &lt;a href=&quot;https://www.washingtonpost.com/technology/2018/09/11/explosive-problem-with-recycling-ipads-iphones-other-gadgets-they-literally-catch-fire/?noredirect=on&amp;amp;utm_term=.5dac125446cf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;40 percent&lt;/a&gt; of the past two years’ e-waste recycling fires in California. We simply &lt;a href=&quot;https://www.nytimes.com/2018/10/07/climate/ipcc-climate-report-2040.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;don’t have time&lt;/a&gt; to carry on with this throwaway culture.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Like the Galvin brothers’ battery-eliminators, no tech lives forever. But we&lt;/span&gt; &lt;em&gt;&lt;span&gt;can&lt;/span&gt;&lt;/em&gt; &lt;span&gt;make sure it lives longer. And that’s exactly what Motorola is doing. By giving consumers easier access to parts, people are better equipped to fix their broken devices—and more fixing means less e-waste.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; readability=&quot;7.2903225806452&quot;&gt;&lt;img src=&quot;https://d3nevzfk7ii3be.cloudfront.net/igi/ALAX5PyCWnHePaJV.huge&quot; alt=&quot;&quot; width=&quot;623&quot; height=&quot;467&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;It’s official—Motorola is the first major smartphone manufacturer to supply OEM parts to iFixit. Pictured: &lt;a href=&quot;https://www.ifixit.com/Guide/Motorola+Moto+Z+Play+Screen+Replacement/98353&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Moto Z Play&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;We can’t fix the system alone. We need our community of fixers to spread the word online and in their local communities. We need legislators to make fair repair laws that hold manufacturers responsible. And most of all, we need manufacturers to make integral changes to their business models to put people and the planet before profit.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Motorola is setting an example for major manufacturers to embrace a more open attitude towards repair. If you’re a Motorola customer, you can now either send in your broken device directly to &lt;a href=&quot;https://motorola-global-portal.custhelp.com/app/mcp/service/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Motorola&lt;/a&gt; for repair—or you can fix it yourself with the highest quality parts and tools, plus a free step-by-step guide, all included in our official &lt;a href=&quot;https://www.ifixit.com/Search?query=motorola%20fix%20kits&amp;amp;doctype=products&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Motorola OEM Fix Kits&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; readability=&quot;7&quot;&gt;&lt;img src=&quot;https://d3nevzfk7ii3be.cloudfront.net/igi/IjykgCZ361iE3IjE&quot; alt=&quot;&quot; width=&quot;529&quot; height=&quot;529&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;The selection of tools included in each Motorola OEM Fix Kit.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;That’s a model worth replicating, and we couldn’t be more thrilled to consider Motorola a repair ally.&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 23 Oct 2018 13:38:48 +0000</pubDate>
<dc:creator>SifJar</dc:creator>
<og:title>Motorola and iFixit—A Match Made in Mobile</og:title>
<og:description></og:description>
<og:url>https://ifixit.org/blog/11644/motorola-ifixit-partnership/</og:url>
<og:image>https://d3nevzfk7ii3be.cloudfront.net/igi/wDZ5RRumfe4doh1q</og:image>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://ifixit.org/blog/11644/motorola-ifixit-partnership/</dc:identifier>
</item>
<item>
<title>Multithreading Rust and Wasm</title>
<link>https://rustwasm.github.io/2018/10/24/multithreading-rust-and-wasm.html</link>
<guid isPermaLink="true" >https://rustwasm.github.io/2018/10/24/multithreading-rust-and-wasm.html</guid>
<description>&lt;p&gt;When WebAssembly was first shipped it was an &lt;a href=&quot;https://en.wikipedia.org/wiki/Minimum_viable_product&quot;&gt;MVP&lt;/a&gt; which, while minimal, has spawned a huge number of exciting projects which work today across all major browsers. Rust has capitalized on the wasm MVP’s success as well with tools like &lt;a href=&quot;https://github.com/rustwasm/wasm-bindgen&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/rustwasm/wasm-pack&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-pack&lt;/code&gt;&lt;/a&gt; by making the MVP feel less minimal. WebAssembly is &lt;a href=&quot;https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future/&quot;&gt;yet more ambitious&lt;/a&gt;, though! Since inception it’s always been intended to extend the &lt;a href=&quot;https://webassembly.github.io/spec/&quot;&gt;WebAssembly specification&lt;/a&gt; with new features and functionality.&lt;/p&gt;
&lt;p&gt;One of the features I’m particularly excited about coming down the pike for WebAssembly is the &lt;a href=&quot;https://github.com/WebAssembly/threads&quot;&gt;threads&lt;/a&gt; proposal. The threading proposal was unfortunately halted in its tracks when the &lt;a href=&quot;https://meltdownattack.com/&quot;&gt;Spectre and Meltdown&lt;/a&gt; vulnerabilities were first announced, but it’s starting to pick up steam again! Browsers will start shipping &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; in the near future, and threads for wasm won’t be far behind.&lt;/p&gt;
&lt;p&gt;Features like threads for wasm can have a huge impact on Rust and how it’s used on the web, and we want to be sure that Rust is ready and well suited for wasm threads as soon as they’re available! I’ve recently started to try to get more involved in the &lt;a href=&quot;https://www.w3.org/community/webassembly/&quot;&gt;WebAssembly Community Group&lt;/a&gt; and this seemed like the perfect opportunity to test out support for Rust while also hopefully providing feedback for the proposal itself if necessary!&lt;/p&gt;
&lt;p&gt;If you’re itching for a happy ending you can &lt;a href=&quot;https://rustwasm.github.io/2018/10/24/multithreading-rust-and-wasm.html#demo-raytracing&quot;&gt;jump ahead to the end&lt;/a&gt; where (spoilers) there’s a demo showing off Rust, WebAssembly, and threads all in the browser.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: As a note to future readers, this post describes and works with many features which, at the time of its writing, were unstable. Not everything here may be accurate in the distant future and examples may no longer work. We’ll try to keep things updated but if you’re reading this far from when it was written take it with a grain of salt!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;the-webassembly-threads-proposal&quot;&gt;The WebAssembly threads proposal&lt;/h3&gt;
&lt;p&gt;While one might naively expect that the idea of “WebAssembly threads” is something like “add pthreads” or “add &lt;code class=&quot;highlighter-rouge&quot;&gt;std::thread&lt;/code&gt;” to wasm, the current proposal for threads in WebAssembly is actually quite different! Instead of providing a full library experience the threads proposal is instead specifying the fundamental building blocks upon which you can build a threading library.&lt;/p&gt;
&lt;h4 id=&quot;atomic-instructions&quot;&gt;Atomic Instructions&lt;/h4&gt;
&lt;p&gt;The first aspect of the threads proposal that you might notice is the addition of &lt;a href=&quot;https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#atomic-memory-accesses&quot;&gt;atomic instructions&lt;/a&gt;. In Rust parlance this means that &lt;a href=&quot;https://doc.rust-lang.org/std/sync/atomic/struct.AtomicUsize.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AtomicUsize&lt;/code&gt;&lt;/a&gt; and friends will actually compile to atomic operations, whereas today they’re &lt;a href=&quot;https://github.com/rust-lang/rust/blob/f51752774bbbe48d2aabe53c86e9e91ed3a73a5d/src/librustc_target/spec/wasm32_unknown_unknown.rs#L46-L48&quot;&gt;simply lowered to single-threaded equivalents&lt;/a&gt; (as there’s no threads!). While essential, these aren’t too too thrilling just yet until you hit &lt;a href=&quot;https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#wait-and-wake-operators&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wait&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;wake&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Atomic modifications allow us to perform some level of synchronization, but full synchronization often requires actual blocking of a thread until another is finished. This is where the &lt;code class=&quot;highlighter-rouge&quot;&gt;i32.atomic.wait&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;atomic.wake&lt;/code&gt; instructions come into play. First we can block a thread (atomically) using &lt;a href=&quot;https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#wait&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i32.atomic.wait&lt;/code&gt;&lt;/a&gt;, and then another thread can execute &lt;a href=&quot;https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#wake&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;atomic.wake&lt;/code&gt;&lt;/a&gt; to wake up a thread blocked on the same address. I believe this is similar to &lt;a href=&quot;https://en.wikipedia.org/wiki/Futex&quot;&gt;futexes&lt;/a&gt; on Linux, although I’ve never used them myself!&lt;/p&gt;
&lt;p&gt;With just this one addition we can now start to see how primitives can be formed, and sure enough the proposal has an &lt;a href=&quot;https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#example&quot;&gt;example mutex implementation&lt;/a&gt; which is also how &lt;a href=&quot;https://github.com/rust-lang/rust/blob/f51752774bbbe48d2aabe53c86e9e91ed3a73a5d/src/libstd/sys/wasm/mutex_atomics.rs#L27-L71&quot;&gt;the Rust &lt;code class=&quot;highlighter-rouge&quot;&gt;Mutex&lt;/code&gt; type is implemented&lt;/a&gt; as well.&lt;/p&gt;
&lt;p&gt;Ok that’s great and all, but how do we spawn more than one thread?&lt;/p&gt;
&lt;h4 id=&quot;parallelism-through-web-workers&quot;&gt;Parallelism through Web Workers&lt;/h4&gt;
&lt;p&gt;One of WebAssembly’s greatest strengths is that it &lt;em&gt;extends&lt;/em&gt; the web platform instead of trying to replace it. Although wasm modules themselves can largely only manipulate numbers directly, they can import any arbitrary function which gives wasm full access to the web platform, DOM and all. From day one WebAssembly is all about reusing and enhancing the web platform experience, avoiding the need to reinvent the wheel for new functionality.&lt;/p&gt;
&lt;p&gt;The threads proposal for wasm is no exception to this pattern! The web already has support for multithreaded web applications through &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;Web Workers&lt;/a&gt;, and this is exactly what’s used to introduce multithreaded execution to WebAssembly.&lt;/p&gt;
&lt;p&gt;Web Workers, however, provide very limited ability to share resources between threads. Communication and synchronization is done through message passing (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;postMessage&lt;/code&gt;&lt;/a&gt;), but you can only send values that support &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;structured cloning&lt;/a&gt;. In Rust-ic terms, very few types in JS are &lt;code class=&quot;highlighter-rouge&quot;&gt;Send&lt;/code&gt; and you always &lt;code class=&quot;highlighter-rouge&quot;&gt;Clone&lt;/code&gt; when sending an object to another thread.&lt;/p&gt;
&lt;p&gt;Our goal is to share resources though! It turns out that one of the types which supports structured cloning is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt;. Execution of wasm on the web today requires usage of the wasm JS API, where you create a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; that is akin to the text and data sections of an executable (compiled code) and then you create a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssembly.Instance&lt;/code&gt;&lt;/a&gt; from that module, which is where you actually get things like a heap and a stack. Already today we can pass a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; between threads, and despite having to &lt;code class=&quot;highlighter-rouge&quot;&gt;Clone&lt;/code&gt; it between threads it looks roughly like this in most engines:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Module&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModuleContents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;which means that the clone operation is quite cheap!&lt;/p&gt;
&lt;p&gt;Sharing our code is only half the story, though. Many languages (including Rust) also rely on &lt;em&gt;shared memory&lt;/em&gt; as a primitive to build all sorts of concurrency paradigms like message passing or mutexes.&lt;/p&gt;
&lt;h4 id=&quot;shared-memory&quot;&gt;Shared Memory&lt;/h4&gt;
&lt;p&gt;Continuing the theme of “no fundamental new features just for wasm”, shared memory is fundamentally built on an already stable (or rather, becoming stable) JS API: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt;. A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; is like an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; except it’s, well, shared! This manifests itself through the structured cloning algorithm where you can think of it as similar to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt;, internally containing an &lt;a href=&quot;https://doc.rust-lang.org/std/sync/struct.Arc.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Arc&lt;/code&gt;&lt;/a&gt; that’s cheap to clone.&lt;/p&gt;
&lt;p&gt;Using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; JS can already share memory between workers and the main thread, making it cheap to compute a large chunk of data and send it to another thread. (Or at least removes the need to copy data between threads).&lt;/p&gt;
&lt;p&gt;WebAssembly modules today are optionally associated with at most one instance of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory&quot;&gt;“linear memory”&lt;/a&gt;. In non-wasm parlance, you can put a stick of RAM into a wasm module. This &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssembly.Memory&lt;/code&gt;&lt;/a&gt; is today always backed by an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;, but you’ll soon be able to flag a memory as “shared” which means it’s backed by &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; instead. This subsequently means that the structured clone of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssembly.Memory&lt;/code&gt;&lt;/a&gt; backed by a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; will refer to the same memory!&lt;/p&gt;
&lt;p&gt;At this point the pieces are definitely starting to come together. We can already share modules (code) between threads, and soon we’ll be able to share memory between threads as well! With these new abilities we can instantiate a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; on multiple web workers quickly and efficiently which all have access to the same memory.&lt;/p&gt;
&lt;h4 id=&quot;initializing-memory-once&quot;&gt;Initializing Memory Once&lt;/h4&gt;
&lt;p&gt;One fun aspect of WebAssembly modules is that memory is automatically initialized for you. Let’s say, for example, you’ve got a Rust program that looks like:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no_mangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;the data&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If we call that from JS, and if we read the pointer returned, we’ll actually see &lt;code class=&quot;highlighter-rouge&quot;&gt;the data&lt;/code&gt;! Who actually wrote those bytes to linear memory, though? Each wasm module can have &lt;a href=&quot;http://webassembly.github.io/spec/core/syntax/modules.html#data-segments&quot;&gt;data segments&lt;/a&gt; which specify a blob of bytes that is located at an offset in memory. Upon instantiation of a module, the wasm runtime will copy each of these data segments to the offset specified into linear memory.&lt;/p&gt;
&lt;p&gt;But wait, that’s not a good idea if we instantiate our module on multiple threads! Let’s say we have code that looks like:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no_mangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_ticket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TICKET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AtomicUsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AtomicUsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TICKET&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.fetch_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeqCst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here we’ll have a data segment consisting of &lt;code class=&quot;highlighter-rouge&quot;&gt;1usize&lt;/code&gt;, which is three zero bytes and then a one byte. Each time we instantiate our module we’re resetting this counter back to 1 by overwriting the previous value! What we instead want to happen is the &lt;em&gt;first&lt;/em&gt; thread initializes memory and all other threads should just use what’s already there.&lt;/p&gt;
&lt;p&gt;To handle this problem, we turn to the &lt;a href=&quot;https://github.com/WebAssembly/bulk-memory-operations&quot;&gt;bulk memory operations proposal&lt;/a&gt;. While the bulk memory operations proposal largely started as a native method of doing &lt;code class=&quot;highlighter-rouge&quot;&gt;memcpy&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;memset&lt;/code&gt;, it’s now also picked up the ability for “passive memory segments” which solves the exact problem we’re having here.&lt;/p&gt;
&lt;p&gt;Each data segment can be flagged as “passive” which means it’s not automatically copied into memory on instantiation. Instead a module must manually initialize memory via the &lt;code class=&quot;highlighter-rouge&quot;&gt;memory.init&lt;/code&gt; instruction. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;memory.init&lt;/code&gt; we can copy memory from any data segment into any location in memory.&lt;/p&gt;
&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;memory.init&lt;/code&gt; we at least have the ability to solve the multi-initialization problem, but it’s not entirely clear how we’ll leverage this yet in the toolchain. More on this later!&lt;/p&gt;
&lt;h4 id=&quot;existing-webassembly-features-and-threads&quot;&gt;Existing WebAssembly Features and Threads&lt;/h4&gt;
&lt;p&gt;That about wraps up the new features proposed in the WebAssembly threads (and bulk memory) proposal. Before we go into how this is all actually going to be used, though, it’s worth taking a quick look at some of the existing features of WebAssembly and what they mean in a world with threads.&lt;/p&gt;
&lt;p&gt;The first interesting aspect (which we’ll leverage later on) is the &lt;a href=&quot;http://webassembly.github.io/spec/core/syntax/modules.html#start-function&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt;&lt;/a&gt; function. WebAssembly modules can flag a function as automatically executed whenever the module is instantiated. This &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; function can do things like static initialization or maybe even the &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; function of a wasm-pretending-to-be-an-executable, but it’s not currently exposed or used in Rust. The semantics of the &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; function don’t change at all in the threads proposal, but it means that it’s no longer one time initialization! Instead the &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; function is still run per-instance, and since we’re creating multiple instances on multiple web workers, the &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; function becomes more like a “thread init” than a “global init”. More on this later!&lt;/p&gt;
&lt;p&gt;Next let’s take a look at &lt;a href=&quot;http://webassembly.github.io/spec/core/syntax/modules.html#globals&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt;&lt;/a&gt; variables. Note that these are not Rust &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; variables (like &lt;code class=&quot;highlighter-rouge&quot;&gt;TICKET&lt;/code&gt; above) which are compiled as being located in linear memory. Rust actually provides no ability to create, get, or set custom &lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt; variables today, so this is largely an unexposed feature of WebAssembly in Rust. In WebAssembly, however, a &lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt; is what its name implies, a global variable for the instance which can be get, set, and even exported to JS! A global is more like a virtual register than linear memory because it can only contain a fixed set of types.&lt;/p&gt;
&lt;p&gt;Interestingly, though, globals are per instance. This means that in a world of multiple instances, they’re not actually globals but rather thread locals! Each of our wasm instances will have its own set of globals that can’t be accessed by other instances, giving us the foundation for thread-local data. More on this later as well!&lt;/p&gt;
&lt;p&gt;Tables in WebAssembly likely also have fun use cases in a threaded wasm world, but I’m not so sure what those are myself and so for now we’ll largely ignore them. Other than that, that should cover most wasm features and how they relate to threads!&lt;/p&gt;
&lt;h3 id=&quot;using-threads-in-rust&quot;&gt;Using Threads in Rust&lt;/h3&gt;
&lt;p&gt;Now that we’ve gone over the highlights of WebAssembly threads proposal, you might feel how I felt when I first read it. Sure all those features sound great, but how is this going to be safely and ergonomically exposed at the language level? Some problems are nicely self-contained like the &lt;a href=&quot;https://github.com/rust-lang/rust/blob/f51752774bbbe48d2aabe53c86e9e91ed3a73a5d/src/libstd/sys/wasm/mutex_atomics.rs#L27-L71&quot;&gt;implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;Mutex&lt;/code&gt; in Rust&lt;/a&gt;, but there’s a host of other problems which aren’t quite as self contained like:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;First up, stacks! LLVM, Rust’s code generator, assumes that it not only gets to use the native wasm stack (which is per instance and hence “thread local”) but also a linear memory stack as well. This means we need a stack pointer into linear memory (which LLVM already conveniently places in a &lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt;) which is unique per thread, and someone’s gonna have to allocate those stacks for each thread.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next up, thread local data. We’ve got the foundations of thread locals with &lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt; variables, but as mentioned before Rust (and LLVM or LLD) doesn’t actually provide the ability to manipulate or work with custom &lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt; variables. How are we going to implement the standard library’s &lt;a href=&quot;https://doc.rust-lang.org/std/macro.thread_local.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;thread_local!&lt;/code&gt;&lt;/a&gt; macro in Rust?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We talked a bit about memory initialization earlier and how we don’t want to reinitialize and wipe out memory, but who’s actually doing that? Presumably all our data segments need to be &lt;code class=&quot;highlighter-rouge&quot;&gt;passive&lt;/code&gt; but who’s executing &lt;code class=&quot;highlighter-rouge&quot;&gt;memory.init&lt;/code&gt; safely?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How are we actually going to spawn threads? Whose responsibility is it to actually create a web worker? Similarly, by what mechanism is the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssembly.Memory&lt;/code&gt;&lt;/a&gt; getting transferred between workers and instantiated in the right place?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When using tools like &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt;, how does the shim JS make its way to all the workers which have an instance of wasm? This wrapper JS is needed to make calling Rust ergonomic, and we don’t want to bless the main thread too much!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Unfortunately we don’t have answers to all these questions today. These questions are also somewhat intertwined together when we don’t want them to be!&lt;/p&gt;
&lt;p&gt;Rust’s vision for WebAssembly on the web is one of interoperability. You should be able to use Rust and WebAssembly without the rest of your application even needing to know. Furthermore, a crate deep in your dependency graph may depend on JS functionality (like an NPM package or &lt;a href=&quot;https://rustwasm.github.io/wasm-bindgen/api/web_sys/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;web-sys&lt;/code&gt;&lt;/a&gt;) and you also shouldn’t need to know about that!&lt;/p&gt;
&lt;p&gt;It’s not clear if we can maintain this vision for threads on the web platform right now. This is where I’d love to brainstorm with others and/or get help and thoughts about this. The threads proposal isn’t stable after all, and there’s in theory lots of runway for us to figure out something to help us out!&lt;/p&gt;
&lt;p&gt;I’d hate to leave you with a cliffhanger like this, though! While not all of the above questions have great answers today, I’ve been working on at least a &lt;em&gt;functioning&lt;/em&gt; solution to many of the in &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt; specifically. Let’s take a look at that and see if we can actually demo threads and WebAssembly today!&lt;/p&gt;
&lt;h3 id=&quot;threads-and-wasm-bindgen&quot;&gt;Threads and &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/rustwasm/wasm-bindgen&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt;&lt;/a&gt; tool is composed of two halves. One half is a &lt;a href=&quot;https://doc.rust-lang.org/nightly/reference/procedural-macros.html&quot;&gt;procedural macro&lt;/a&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;#[wasm_bindgen]&lt;/code&gt; attribute, which is expanded and runs at compile time. This generates shims in your Rust code and otherwise preps the final binary for the second half, the &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt; CLI. The CLI tool &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt; is uniquely positioned to do all sorts of crazy transformations on the WebAssembly module (and it &lt;a href=&quot;https://github.com/rustwasm/wasm-bindgen/pull/124&quot;&gt;already does&lt;/a&gt;!).&lt;/p&gt;
&lt;p&gt;The WebAssembly binary format is &lt;a href=&quot;http://webassembly.github.io/spec/core/binary/index.html&quot;&gt;well specified&lt;/a&gt; and surprisingly easy to manipulate. The &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt; CLI tool is currently using the excellent &lt;a href=&quot;https://github.com/paritytech/parity-wasm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parity-wasm&lt;/code&gt;&lt;/a&gt; crate for parsing WebAssembly, which makes it a breeze for &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt; to do fancy transformations. (and more news on this soon, an &lt;em&gt;even breezier&lt;/em&gt; solution is in the works too!)&lt;/p&gt;
&lt;p&gt;With the CLI tool and &lt;a href=&quot;https://github.com/paritytech/parity-wasm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parity-wasm&lt;/code&gt;&lt;/a&gt; we’re freed from the “shackles” of LLVM (aka it’s easier to experiment in tooling than in LLVM itself) and have access to the full feature set of WebAssembly. Let’s knock out some of those above questions with this newfound power.&lt;/p&gt;
&lt;h4 id=&quot;injecting-thread-local-globals&quot;&gt;Injecting thread-local &lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt;s&lt;/h4&gt;
&lt;p&gt;Although LLVM/LLD dont’t currently have the ability to emit custom &lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt; variables, we do in &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt;! This is an easy method to implement thread-local storage, so let’s have &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt; inject two globals:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;First, a thread ID. Thread IDs can be useful for a number of applications, but we’re specifically interested in the &lt;a href=&quot;https://github.com/rust-lang/rust/blob/f51752774bbbe48d2aabe53c86e9e91ed3a73a5d/src/libstd/sys/wasm/mutex_atomics.rs#L81-L160&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ReentrantMutex&lt;/code&gt;&lt;/a&gt; of the standard library right now, which needs to know which thread is which to know when reentrant locks are used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next, a TCB slot. A TCB is a “thread control block” and is typically used to store an allocated structure in threading runtimes. This allocated structure is an entry point for lots of other runtime-related functionality, but for now we’ll primarily used this as storage for user-defined thread-local values. Or, in other words, this is how we’ll implement &lt;a href=&quot;https://doc.rust-lang.org/std/macro.thread_local.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;thread_local!&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;It’s easy enough to add two &lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt; variables of type &lt;code class=&quot;highlighter-rouge&quot;&gt;i32&lt;/code&gt; to the wasm module, but we need to manage them too! Someone still has to actually allocate the thread ID, and we also need to be able to access it.&lt;/p&gt;
&lt;p&gt;For this let’s take another trick of out &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt;’s playbook, rewriting function calls. We define that a function imported like this:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wasm_import_module&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__wbindgen_thread_xform__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__wbindgen_thread_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;is actually magically turned into &lt;code class=&quot;highlighter-rouge&quot;&gt;get_global $thread_id&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; instruction actually has a 1:1 replacement with &lt;code class=&quot;highlighter-rouge&quot;&gt;get_global&lt;/code&gt;, so the rewriting here is super simple! We can use similar “intrinsics” like &lt;code class=&quot;highlighter-rouge&quot;&gt;__wbindgen_tcb_get&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;__wbindgen_tcb_set&lt;/code&gt; for getting/setting the TCB as well.&lt;/p&gt;
&lt;p&gt;Next up, let’s figure out how to initialize this thread ID global.&lt;/p&gt;
&lt;h4 id=&quot;where-to-start&quot;&gt;Where to &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt;?&lt;/h4&gt;
&lt;p&gt;We saw earlier that WebAssembly provides a &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; function which is automatically invoked whenever a module is instantiated, and in a multithreaded world this is per-thread initialization. That’s actually exactly what we want for thread ID initialization as well as other aspects!&lt;/p&gt;
&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt; we can solve a good number of the above problems with an injected &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; function. We can even call the previous &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; function when we’re done to preserve semantic equivalence! Our injected function will perform these steps:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;Atomically increment an injected global thread ID counter. We reserve 4 bytes of space in linear memory for this in &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt;, and this address will keep track of all threads that have ever been. The result of this atomic addition can then be stored in our thread ID global, meaning we’ve just allocated and initialized our thread ID!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We know we’re the first thread (the main thread) if our thread ID is zero. This is a great time to initialize memory, so &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt; can flag all our data segments as &lt;code class=&quot;highlighter-rouge&quot;&gt;passive&lt;/code&gt;, and if our ID 0 is 0 we can call &lt;code class=&quot;highlighter-rouge&quot;&gt;memory.init&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If our thread ID isn’t 0, then we know that we’re a spawned thread. LLVM already arranged for there to be a &lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt; for our stack pointer, but its initial value is only valid for the main thread. To keep going we need to set this up. To allocate a stack we can leverage the convenient &lt;code class=&quot;highlighter-rouge&quot;&gt;memory.grow&lt;/code&gt; instruction, a quick-and-dirty way to allocate memory without using the standard library’s actual memory allocator (which to invoke would in turn need a stack). Once we’ve got a stack we can update our stack pointer global, and we should be good to go!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, if a previous &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; function was available, we can delegate to it at this point and call it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Ok we’re making some good progress! By assuming that exactly the same &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; is used on all threads, an injected &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; function can cover a lot of ground to making threads and was easy to use.&lt;/p&gt;
&lt;h4 id=&quot;managing-webassemblymemory&quot;&gt;Managing &lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssembly.Memory&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;By default all Rust-compiled wasm binaries will &lt;em&gt;export&lt;/em&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;memory&lt;/code&gt; that they define. This means that the instantiation of a wasm module will automatically create an instance of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssembly.Memory&lt;/code&gt;&lt;/a&gt; and make it available for use. This is incompatible with threads, however, where we want all modules to use the same instance of memory!&lt;/p&gt;
&lt;p&gt;Instead we’ll need to arrange for memory to be imported not exported. That can be a bit of a pain to set up and work with, though, so &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt; can continue to take care of instantiation in the JS bindings so users don’t have to worry about it.&lt;/p&gt;
&lt;p&gt;Note that for now LLVM/LLD also don’t currently implement a memory object that’s flagged as &lt;code class=&quot;highlighter-rouge&quot;&gt;shared&lt;/code&gt;, so as a minor detail &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt; can take care of this too.&lt;/p&gt;
&lt;h4 id=&quot;sharing-js-shims-spawning-workers&quot;&gt;Sharing JS shims, spawning Workers&lt;/h4&gt;
&lt;p&gt;This is where the story with &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt; takes a bit of a nose-dive into “this particular strategy no longer seems long-term viable” territory. The last few things we need to take care of is actually spawning the web workers and somehow getting the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssembly.Memory&lt;/code&gt;&lt;/a&gt; onto each worker.&lt;/p&gt;
&lt;p&gt;I initially attempted to see if we could do this with &lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt; as it’d be awesome to have a story for bundlers for large-scale integration. Unfortunately I ran into a few snags like &lt;a href=&quot;https://github.com/webpack/webpack/issues/8157&quot;&gt;you can’t access the &lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; and it also wasn’t clear to me how workers would use a different instantiation path that would &lt;code class=&quot;highlighter-rouge&quot;&gt;onmessage&lt;/code&gt; to wait for the module/memory and the instantiate after receiving. Fear not, though, I’m sure we’ll figure out a bundler story for this one way or another!&lt;/p&gt;
&lt;p&gt;Next I turned to &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt;’s &lt;a href=&quot;https://rustwasm.github.io/wasm-bindgen/reference/no-esm.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--no-modules&lt;/code&gt;&lt;/a&gt; option to see if something could work. Currently it exports a global (named &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm_bindgen&lt;/code&gt;) which is a function that takes the path to the wasm file to instantiate. I extended it to take either this or a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; instance (along with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssembly.Memory&lt;/code&gt;&lt;/a&gt;). That way when given a path it can create memory and do fetch/instantiate, but with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; it can avoid the fetch and use the provided memory to instantiate.&lt;/p&gt;
&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;--no-modules&lt;/code&gt; makes it setting up everything pretty manual anyway it was easy enough to have the main thread work as usual, provide accessors for the module/memory, spin up web workers, and post the module/memory to each worker. Inside the workers we can import the &lt;code class=&quot;highlighter-rouge&quot;&gt;--no-modules&lt;/code&gt; generated JS, wait for the message, wait for instantiation, and then start doing some work.&lt;/p&gt;
&lt;p&gt;All-in-all this setup made it so &lt;em&gt;something&lt;/em&gt; could work. This definitely isn’t a long-term solution as there’s no path to use bundlers or runtimes like node.js yet. We’ll surely flesh out all these details before wasm threads are stable though!&lt;/p&gt;
&lt;h3 id=&quot;demo-raytracing&quot;&gt;Demo: Raytracing&lt;/h3&gt;
&lt;p&gt;Phew! That was quite a lot of information and background, but hopefully you’ve got a better idea about what the threads proposal is and some ideas of how we can leverage it in Rust and &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt;. Let’s get to the good stuff now.&lt;/p&gt;
&lt;p&gt;We initially strived to have a cool &lt;a href=&quot;https://en.wikipedia.org/wiki/Mandelbrot_set&quot;&gt;Mandelbrot Set&lt;/a&gt; rendering using &lt;a href=&quot;https://github.com/rayon-rs/rayon&quot;&gt;Rayon&lt;/a&gt;, but unfortunately the limitations with spawning Web Workers meant we &lt;a href=&quot;https://github.com/rayon-rs/rayon/issues/93&quot;&gt;couldn’t use Rayon&lt;/a&gt;. Coupled with my own short attention span and lack of understanding about Mandelbrot, I switched to raytracing!&lt;/p&gt;
&lt;p&gt;Having not worked with raytracing in years I googled around to see if there were any existing Rust raytracers I could try out. &lt;a href=&quot;https://github.com/Twinklebear/tray_rust&quot;&gt;My favorite one I found&lt;/a&gt; unfortunately requires nightly and last compiled mid-2017, but &lt;a href=&quot;https://github.com/bheisler&quot;&gt;@bheisler&lt;/a&gt; had an &lt;a href=&quot;https://bheisler.github.io/post/writing-raytracer-in-rust-part-1/&quot;&gt;awesome tutorial&lt;/a&gt; around early-2017, and the &lt;a href=&quot;https://github.com/bheisler/raytracer&quot;&gt;associated code&lt;/a&gt; still compiles and works today (yay!). After &lt;a href=&quot;https://github.com/alexcrichton/raytracer/compare/master...update-deps&quot;&gt;a few inconsequential modifications&lt;/a&gt; I was able to use the project &lt;em&gt;as is&lt;/em&gt; on the web.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a side note, this is one of the awesome aspects of Rust and Cargo. It took no time at all to find a raytracer, integrate it, compile it to wasm, and run in a browser.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With raytracing (or at least how this raytracer worked) it’s an embarrassingly parallel task as all pixels of an image are rendered entirely independently of all others. This meant we could rig up a way to &lt;a href=&quot;https://github.com/rustwasm/wasm-bindgen/blob/cb170ef94f6013af247e13b50d24a97c473b1a99/examples/raytrace-parallel/src/lib.rs#L286-L320&quot;&gt;fan out work for pixels amongst worker threads&lt;/a&gt; pretty easily.&lt;/p&gt;
&lt;p&gt;The last piece I thought would be pretty cool for this demo is to see a progressive rendering to see what an image looks like as it’s being rendered. Every so often the main thread will request an update of the worker threads, and &lt;a href=&quot;https://github.com/rustwasm/wasm-bindgen/blob/cb170ef94f6013af247e13b50d24a97c473b1a99/examples/raytrace-parallel/src/lib.rs#L333-L363&quot;&gt;they’ll send an &lt;code class=&quot;highlighter-rouge&quot;&gt;ImageData&lt;/code&gt; to the main thread&lt;/a&gt; which can be rendered to a canvas:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://rustwasm.github.io/wasm-bindgen/exbuild/raytrace-parallel/&quot;&gt;&lt;img src=&quot;https://rustwasm.github.io/assets/2018-10-24-rust-wasm-threads.gif&quot; alt=&quot;Demo preview&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://rustwasm.github.io/wasm-bindgen/exbuild/raytrace-parallel/&quot;&gt;Check out the raytracing demo for yourself!&lt;/a&gt; or &lt;a href=&quot;https://github.com/rustwasm/wasm-bindgen/tree/master/examples/raytrace-parallel&quot;&gt;browse the code online&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For this demo remember that this is a lot of unstable and nightly technology. It only works in Firefox (as of this writing) as other browsers don’t implement &lt;code class=&quot;highlighter-rouge&quot;&gt;memory.init&lt;/code&gt; instructions yet.&lt;/p&gt;
&lt;p&gt;You’ll find a giant JSON blob on the left which is a description of the scene to render. Right now it’s a pretty simplistic raytracer so it only supports planes and spheres, but you can move things around, add spheres, etc. If you’re willing I’d love to get some help to &lt;a href=&quot;https://github.com/Twinklebear/tray_rust#sample-renders&quot;&gt;implement more complicated renders as well&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;future-work&quot;&gt;Future Work&lt;/h3&gt;
&lt;p&gt;While we’ve gotten to the point of making a demo, we’ve still got a good deal of work to do! These are some of the highlights of the remaining tasks.&lt;/p&gt;
&lt;h4 id=&quot;main-thread-disallows-atomicwait&quot;&gt;Main Thread Disallows &lt;code class=&quot;highlighter-rouge&quot;&gt;atomic.wait&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The main thread of the browser cannot execute the &lt;code class=&quot;highlighter-rouge&quot;&gt;atomic.wait&lt;/code&gt; instruction, it will unconditionally throw an exception if this is executed. This means that, by default, mutexes will not work when contended on the main thread! Additionally, it means that &lt;strong&gt;the only way currently to synchronize with the main thread is &lt;code class=&quot;highlighter-rouge&quot;&gt;postMessage&lt;/code&gt; in a worker&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This situation is especially exacerbated by the fact that Rust’s global allocator, &lt;a href=&quot;https://github.com/alexcrichton/dlmalloc-rs&quot;&gt;dlmalloc&lt;/a&gt;, is globally synchronized. This means that if your main thread allocates memory, it may occasionally throw an exception if contended! This is actually a bug in the demo above today too!&lt;/p&gt;
&lt;p&gt;I’ve &lt;a href=&quot;https://github.com/WebAssembly/threads/issues/106&quot;&gt;opened an issue&lt;/a&gt; on the threads proposal repo to discuss this, and hopefully we can figure out a reasonable workaround for the main thread to at least still allocate memory! So far I’ve learned about a proposal for &lt;a href=&quot;https://github.com/tc39/proposal-atomics-wait-async&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Atomics.waitAsync&lt;/code&gt;&lt;/a&gt; which is a second mechanism to wake up the main thread. There’s also thoughts about a custom allocator which is largely lock-free but falls back to &lt;code class=&quot;highlighter-rouge&quot;&gt;memory.grow&lt;/code&gt; on the main thread during contention. In the meantime though this makes it very difficult for a main thread to use arbitrary libraries on crates.io, as they’d have to be audited for &lt;em&gt;any&lt;/em&gt; synchronization.&lt;/p&gt;
&lt;p&gt;A “workaround” we may implement for Rust would be to simply spin instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;atomic.wait&lt;/code&gt; in the mutex implementation if the thread id is 0. Apart from being a bad way to synchronize, it also bakes in that the first instantiation was always on the main thread, which may not always be true!&lt;/p&gt;
&lt;h4 id=&quot;threads-exit-isnt-implemented&quot;&gt;Threads Exit isn’t implemented&lt;/h4&gt;
&lt;p&gt;Right now in the model here for Rust there’s not really a concept of a thread exiting. This means that if a thread does actually exit (aka the worker is gc’d) then it leaks memory allocations like:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The thread’s stack (it’s never reclaimed or reused)&lt;/li&gt;
&lt;li&gt;All data in thread local storage (Rust doesn’t register destructors)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Eventually we’ll need to add the concept of thread exit so we can correctly handle this situation and reclaim resources for reuse later. This may be a case where the &lt;a href=&quot;https://github.com/tc39/proposal-weakrefs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WeakRef&lt;/code&gt; proposal&lt;/a&gt; could help out though by automatically running a thread exit when js objects are gc’d.&lt;/p&gt;
&lt;h4 id=&quot;stack-overflow-is-bad-again&quot;&gt;Stack overflow is bad again&lt;/h4&gt;
&lt;p&gt;When laying out linear memory, LLD will by default place static data first and then the main thread’s stack. This has a problem, though, that if the main thread has a stack overflow it’ll silently corrupt all static data! To fix this problem we pass &lt;code class=&quot;highlighter-rouge&quot;&gt;--stack-first&lt;/code&gt; to LLD which places, well, the stack first in memory, causing a stack overflow to trap because of an out of bounds memory access.&lt;/p&gt;
&lt;p&gt;We unfortunately don’t have this luxury for all worker threads, though. Worker threads suffer the same problem as before where if a stack overflow happens it’ll silently corrupt heap or static data.&lt;/p&gt;
&lt;p&gt;One option available to us is to insert a prologue (by LLVM or &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt;) to check whether we have enough linear stack space before decrementing the stack pointer (trapping if we don’t), but it’s not clear what sort of performance impact this change might have as it affects all functions! Alternative solutions are likely to require new wasm features like unmapping memory to force operations to trap.&lt;/p&gt;
&lt;h3 id=&quot;you-can-make-sausage-too&quot;&gt;You can make sausage too!&lt;/h3&gt;
&lt;p&gt;If you’re curious about how the sausage is made and/or how you can help out, here’s a list of changes made to build this demo and some helpful repositories!&lt;/p&gt;
&lt;p&gt;If you’ve gotten this far then you can probably tell that the threads story in Rust still needs some work! We’d love to have your help and feel free to drop by at &lt;code class=&quot;highlighter-rouge&quot;&gt;#rust-wasm&lt;/code&gt; on Mozilla’s IRC, &lt;a href=&quot;https://discord.gg/6SHrCn&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#wg-wasm&lt;/code&gt; on Discord&lt;/a&gt;, or follow along on GitHub with either &lt;a href=&quot;https://github.com/rustwasm/wasm-bindgen&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://github.com/rustwasm/wasm-pack&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-pack&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Tue, 23 Oct 2018 13:20:52 +0000</pubDate>
<dc:creator>alexcrichton</dc:creator>
<og:title>Multithreading Rust and Wasm</og:title>
<og:description>When WebAssembly was first shipped it was an MVP which, while minimal, has spawned a huge number of exciting projects which work today across all major browsers. Rust has capitalized on the wasm MVP’s success as well with tools like wasm-bindgen and wasm-pack by making the MVP feel less minimal. WebAssembly is yet more ambitious, though! Since inception it’s always been intended to extend the WebAssembly specification with new features and functionality.</og:description>
<og:url>https://rustwasm.github.io/2018/10/24/multithreading-rust-and-wasm.html</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://rustwasm.github.io/2018/10/24/multithreading-rust-and-wasm.html</dc:identifier>
</item>
<item>
<title>His Body Was Behind the Wheel for a Week Before It Was Discovered</title>
<link>https://www.nytimes.com/2018/10/23/nyregion/man-found-dead-in-car-new-york.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2018/10/23/nyregion/man-found-dead-in-car-new-york.html</guid>
<description>&lt;div class=&quot;css-18sbwfn StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;A neighbor walking his dog in the East Village saw the man one night, sitting motionless behind the wheel inside a parked car. Two days later, he was still there. The windows were up, the engine off — this during an August heat wave. The neighbor called 911.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;Soon the block of East 12th Street was busy with police officers and their bosses, the car roped off with yellow tape. There were no signs of foul play. A team from the Office of Chief Medical Examiner arrived that afternoon, Aug. 31, and removed the body to determine the cause of death. People who lived and worked nearby kept their distance.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;The police later released the man’s name, Geoffrey Corbis, 61, of Bridgeport, Conn., and &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://thevillager.com/2018/09/06/end-of-the-road-on-e-12th-body-found-in-car/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;said he appeared to have died of natural causes&lt;/a&gt; about two days before he was found there.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;None of those initial findings would prove true.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;Not the cause of death. Not his name. And not the length of time the dead man’s body spent in that car. It was far longer than two days. It is now believed the dead man was there for a full week — a week that his family spent in vain asking the police to look for him.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;&lt;div class=&quot;css-18sbwfn StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;The chain of events serves as a stark reminder that even in 2018 Manhattan, a city that lives beneath the nonstop gaze of countless surveillance cameras, one that for years has urged its citizens, if they see something suspicious, to say something, it is still possible for a dead man in a parked car on a busy block to go unnoticed for days.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;The events leading up to and following that August day also unspool a story about a distressed man’s plan to raise some fast cash, thwarted by circumstance, and his grim resolve in his final hours to end his life, detailed in farewell text messages to his loved ones.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1xdhyk6 e1vv25i80&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Image&lt;/span&gt;&lt;img alt=&quot;&quot; class=&quot;css-1m50asq&quot; src=&quot;https://static01.nyt.com/images/2018/10/02/nyregion/00body2/merlin_144355299_e78f1a40-3365-4fe5-8662-657426bc8832-articleLarge.jpg?quality=75&amp;amp;auto=webp&amp;amp;disable=upscale&quot; srcset=&quot;https://static01.nyt.com/images/2018/10/02/nyregion/00body2/merlin_144355299_e78f1a40-3365-4fe5-8662-657426bc8832-articleLarge.jpg?quality=90&amp;amp;auto=webp 600w,https://static01.nyt.com/images/2018/10/02/nyregion/00body2/merlin_144355299_e78f1a40-3365-4fe5-8662-657426bc8832-jumbo.jpg?quality=90&amp;amp;auto=webp 1024w,https://static01.nyt.com/images/2018/10/02/nyregion/00body2/merlin_144355299_e78f1a40-3365-4fe5-8662-657426bc8832-superJumbo.jpg?quality=90&amp;amp;auto=webp 2048w&quot; sizes=&quot;((min-width: 600px) and (max-width: 1004px)) 84vw, (min-width: 1005px) 80vw, 100vw&quot; itemprop=&quot;url&quot; itemid=&quot;https://static01.nyt.com/images/2018/10/02/nyregion/00body2/merlin_144355299_e78f1a40-3365-4fe5-8662-657426bc8832-articleLarge.jpg?quality=75&amp;amp;auto=webp&amp;amp;disable=upscale&quot;/&gt;&lt;/div&gt;
&lt;span class=&quot;css-1sy2uy3 e1olku6u0&quot;&gt;The police removed a body from a parked car in the East Village and estimated it had been there two days. It was actually much longer.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e18m0s9i0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Bob Krasner&lt;/span&gt;&lt;/span&gt;
&lt;div class=&quot;css-18sbwfn StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;h2 class=&quot;css-1xm75cc eqpy7av0&quot; id=&quot;link-6e58f050&quot;&gt;‘He had it all’&lt;/h2&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;Geoffrey Corbis was an alias he created in desperation in recent years. Before then, he was Geoffrey Weglarz, born in 1957, one of seven children raised in Florida. He grew up to embrace acting as a passion, performing in local plays and musicals with an intense energy.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;“He seemed hardly able to get the words out as fast as the synapses fired,” said Sal Biagini, a friend and fellow actor in the busy dinner theater circuit of the late 1970s. “He had impeccable timing.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-18sbwfn StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;Mr. Weglarz had come of age during the Apollo missions to the moon, and he and Mr. Biagini would spend hours rehashing the details of each expedition. Mr. Weglarz channeled his leanings toward science and technology into a career in computer programming.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;He moved to New York City and worked at the software company Hyperion, designing performance management tools. He led a team at Hyperion that worked with universities, signing and managing Yale, Harvard, Brown and dozens of other schools as clients. He traveled the world.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;He married and had a son, settling down in a large, 19th century house in Fairfield, Conn. His friend, Mr. Biagini, himself having found success as a longtime body double for Robin Williams, visited and marveled at how far his fast-talking fellow space geek had come.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;“It was Geoff having come to fruition as a responsible, high-earning family man,” he said. “He adored his son. He adored his wife. He had it all.”&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;Then he lost it all.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;Hyperion was acquired by Oracle in 2007, and eventually, Mr. Weglarz was offered a new position in the company, one that he viewed as a lateral move at best, Mr. Biagini said. He left and went to Dell as a senior director of development.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;He and his wife divorced. They shared custody of their son. The job at Dell required weekly trips to the company’s headquarters in Texas, which proved a burden, and he left the job in 2011.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;His search for the next job was exhausting and fruitless. In 2013, when the PBS program NewsHour visited Connecticut to do a story on older, unemployed Americans, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.pbs.org/newshour/show/brutal-job-search-reality-for-older-americans-out-of-work&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;the episode&lt;/a&gt; centered on an interview with Mr. Weglarz.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-18sbwfn StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;“I’ve applied for 481 jobs,” he said on the show. “None of them have panned out. They think that anybody over a certain age is going to be used up.”&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;He was nearing the bottom financially. “I’ve gone through my savings. I’ve gone through my 401(k). My unemployment last check is next week. I have about $2,000 to my name, and after that, I don’t know.”&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;His son was 14, and came home from school every day with friends in tow. Mr. Weglarz said it was nice to spend that time with him, but that he wished the friends’ parents would chip in for the snacks they ate.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;[&lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;Another signature read from the Times reporter Michael Wilson:&lt;/em&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/08/21/nyregion/a-new-wife-a-secret-past.html?module=inline&quot; title=&quot;&quot;&gt;&lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;A New Wife, a Secret Past and a Trail of Loss and Blood&lt;/em&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;

&lt;span class=&quot;css-1sy2uy3 e1olku6u0&quot;&gt;Sal Biagini met Geoffrey Weglarz when they were young actors performing in Florida dinner theater. He received dark texts from his friend in what turned out to be the final hour of Mr. Weglarz’s life.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e18m0s9i0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Lily Landes for The New York Times&lt;/span&gt;&lt;/span&gt;
&lt;div class=&quot;css-18sbwfn StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;h2 class=&quot;css-1xm75cc eqpy7av0&quot; id=&quot;link-6e07542b&quot;&gt;A new name&lt;/h2&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;Something else happened that year, a split-second outburst that would change his life. On March 26, 2013, Mr. Weglarz entered the drive-through lane at a McDonald’s and picked up a sandwich. He drove away, but returned and complained that he had been given the wrong order. He threw the sandwich at a female worker in the drive-through window. &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.cbsnews.com/news/geoffrey-weglarz-conn-man-threw-food-at-pregnant-mcdonalds-worker-police-say/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Press accounts&lt;/a&gt; of the incident — there were many news outlets drawn to the quirky circumstances — reported that the worker was pregnant.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;The police were called. He was charged with disorderly conduct, and though that charge was later dropped, the news stories would follow Mr. Weglarz. They appeared on top of any online search of his name — this as he was looking for work.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-18sbwfn StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;So he changed his name to Geoffrey Corbis.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;He stuck with acting, mainly in Connecticut community theater, cast as recently as last year in a production of the Pulitzer Prize-winning “August: Osage County” &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://patch.com/connecticut/naugatuck/review-august-osage-county-two-planks-theater-company&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;staged in a church&lt;/a&gt;. His brother, Larry Weglarz, and one of his sisters, Pamela Lindemann, were living in Florida, and he traveled there for a long visit. Then late last spring, a bit of good news: He was contacted by a group trying to start a nonprofit executive coaching business. Geoffrey Corbis would be named the chief technology officer; his &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.ecrit.org/geoffrey-corbis-ma.html&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;biography page&lt;/a&gt; on the company site included his portrait, but in reality, there was no full-time job or salary yet.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;He returned north, to Washington, D.C., for a small project for the consulting business in May, shooting a video that earned him $2,000, his sister said. His mood, in hindsight, was darkening, she said.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;In July or August, Mr. Weglarz — still the name most everyone knew him by — told his sister that he had obtained a vial of poison used for euthanasia. He had gotten it on the dark web, she said he told her.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;“That way, when I’m ready, I can go painlessly and fast,” he told her, she said.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;As shocking as that would seem for someone to hear, that kind of talk was not out of character for Mr. Weglarz, his sister said. He was prone to morbid talk.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;“To me, it’s like, ‘Well, at least he didn’t get a gun,’” Ms. Lindemann said. “I didn’t know really what to say to him. I was surprised.”&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;She remembered asking him, “‘What are you going to do with this?’”&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;“‘I’m just going to carry it around with me,’” he told her. “He was very rational. Very resolved.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;

&lt;span class=&quot;css-1sy2uy3 e1olku6u0&quot;&gt;Two of Geoffrey Weglarz’s siblings, Pamela Lindemann and Larry Weglarz, called the Ninth Precinct repeatedly over the course of a week, asking in vain that officers look for their brother.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e18m0s9i0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Eve Edelheit for The New York Times&lt;/span&gt;&lt;/span&gt;
&lt;div class=&quot;css-18sbwfn StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;h2 class=&quot;css-1xm75cc eqpy7av0&quot; id=&quot;link-3faf5a9&quot;&gt;‘Finishing things up.’&lt;/h2&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;On Aug. 24, what is believed to be the last day of Mr. Weglarz’s life, license plate readers recorded his vehicle entering Manhattan at 1:18 p.m., the police would later tell his brother, Larry Weglarz. He seemed to have traveled straight to B &amp;amp; H Photo Video, an electronics store in Midtown, where he sold a camera tripod to the store for $275. He had recently told his family he was broke. It was 2:04 p.m., store records showed.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-18sbwfn StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;He next arrived at a Wells Fargo Bank, where he attempted to cash the check. But it is standard procedure for banks to call B &amp;amp; H to confirm a check is legitimate before cashing one, and by that time on a Friday, the store had closed and no one answered the phone. Mr. Weglarz left the bank empty-handed. And distraught.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;Later that afternoon, Mr. Weglarz’s old friend, Mr. Biagini, texted him. No real reason; they hadn’t spoken in months.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;“Hey Geoffrey, checkin’ in with you,” Mr. Biagini wrote. “How goes it?”&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;“Actually down in Lower Manhattan right now,” Mr. Weglarz replied, and added: “Finishing things up.”&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;“Sounds ominous,” Mr. Biagini replied.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;“I am honored to have been your friend,” Mr. Weglarz wrote, “Take care.”&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;At 5:42 p.m., Mr. Weglarz sent his sister a final text, one that immediately reminded her of his obtaining poison weeks earlier.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;It read, “Stuff does taste as bad as I thought it would.”&lt;/p&gt;
&lt;h2 class=&quot;css-1xm75cc eqpy7av0&quot; id=&quot;link-7ee07bc5&quot;&gt;A long, hot week&lt;/h2&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;Worried after the texts, Mr. Biagini called 911. The police tracked Mr. Weglarz’s phone to the closest address, 520 E. 12th Street. Officers arrived at the building and went inside. They saw no sign of him and left. They did not realize he was parked in front of a playground next to the address, 15 car lengths from that building’s entrance.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-18sbwfn StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;[&lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;Another signature read from the Times reporter Michael Wilson:&lt;/em&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/05/27/nyregion/waitress-fraud-widow-brooklyn-diner.html?module=inline&quot; title=&quot;&quot;&gt;&lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;She Found Comfort in a Brooklyn Diner, Then Lost Everything&lt;/em&gt;&lt;/a&gt;]&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;The next day, a Saturday, Mr. Biagini visited a police station house to report Mr. Weglarz’s suicidal texts. The police asked if Mr. Weglarz was a city resident, and when he said “no,” the officers said “We can’t help you,” he said.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;In Florida, Ms. Lindemann and Larry Weglarz, a retired police officer himself, called the Ninth Precinct, which covers East 12th Street, asking for help. “I begged and explained since he was likely dead at this point, we would be relieved if he was found before he started to decompose,” Larry Weglarz said last week. “I explained he was likely in his car, dying or dead.”&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;He, too, was told of the policy about city residents, he said.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;A police spokesman said officers routinely assist outside law enforcement agencies that report a missing person in New York City, but those cases begin with someone filing a report with the police from where the person lived.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;On Monday, three days after Mr. Weglarz sent his final texts, his siblings filed a missing-person report with the local sheriff in Tampa. That office attempted to fax a report to the police in New York, Larry Weglarz said. The New York police said the report needed to be resent by email, and more days passed.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;Larry Weglarz told the police that his brother also went by the last name Corbis, and with that, officers discovered his license plate number. They found a license-plate reader that recorded the vehicle entering Manhattan that Friday afternoon, but nothing since. Officers also contacted hospitals without success.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;The week dragged on in the grip of a heat wave, with neighbors oblivious to the body. One mother who lived on the block said later in an interview that her young son had complained of a smell that she herself didn’t detect. He had thrown up on the sidewalk.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-18sbwfn StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;Raymond Russell, a realtor with an office across the street, said he parked his motorcycle in front of the vehicle that week and would have looked right past the dead man toward oncoming cars before crossing. He found it impossible to believe the body was there as long as it was.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;“I don’t give him a week here,” he said. “A couple days, maybe.”&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;Traffic officers who write parking tickets most likely passed by him at least twice, on days that his car was parked illegally. Officers looking for violators on street-cleaning days — on East 12th Street, those days were Tuesday and Friday — routinely ignore vehicles when the driver is sitting inside. Mr. Weglarz’s vehicle received no tickets on the Tuesday or Friday when it was parked illegally, suggesting an officer might have seen him and assumed he was just another idle driver.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;A couple people visiting the garden on the corner and its neighboring playground complained to a garden manager about what smelled like a dead rat. The manager actually found a dead rat and disposed of it, but the smell lingered on and off.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;In the middle of the week, Anthony Greenheck, walking his dog late one night, noticed a silhouette of a man behind the wheel. He thought it was an Uber driver napping between calls. But when he saw the man had not moved two days later, he approached. The windows were tinted.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;“I peeked a little closer and I decided to knock,” Mr. Greenheck said. “No movement.” He called 911.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;When firefighters and the police arrived and opened the vehicle’s door, a powerful odor filled the block for hours. Officers raised a curtain around the vehicle, obscuring the body inside as it was removed. A freelance photographer who lives across the street, Bob Krasner, went to his window and took pictures of the scene. “I must have walked by that car at least a half a dozen times while he was there,” he said later in disbelief. “I’m fairly observant.”&lt;/p&gt;
&lt;h2 class=&quot;css-1xm75cc eqpy7av0&quot; id=&quot;link-63269951&quot;&gt;A final resting place&lt;/h2&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;The episode left Mr. Weglarz’s family furious with the police. They don’t believe the chances were high that their brother could have been rescued after ingesting the poison, but they said he should not have been left there for a week.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-18sbwfn StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;“It’s supposed to be ‘Protect and Serve,’” Ms. Lindemann said. “Never in my wildest dreams would I have thought I couldn’t depend on a police department for help.”&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;The police spokesman, J. Peter Donald, said officers did what they could with the information they had, including canvassing city hospitals. “Unfortunately, those efforts did not locate Mr. Corbis,” he said.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;Mr. Weglarz was cremated in September. His sister plans to scatter his ashes in Manhattan, home to many successes in his acting years and where he began his computer career, long before the day he parked his car on the street and never left.&lt;/p&gt;
&lt;p class=&quot;css-1xl4flh e2kc3sl0&quot;&gt;&lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;If you are having thoughts of suicide, call the National Suicide Prevention Lifeline at 1-800-273-8255 (TALK) or go to&lt;/em&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://speakingofsuicide.com/resources&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;SpeakingOfSuicide.com/resources&lt;/em&gt;&lt;/a&gt; &lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;for a list of additional resources.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 23 Oct 2018 10:39:43 +0000</pubDate>
<dc:creator>danso</dc:creator>
<og:url>https://www.nytimes.com/2018/10/23/nyregion/man-found-dead-in-car-new-york.html</og:url>
<og:type>article</og:type>
<og:title>His Body Was Behind the Wheel for a Week Before It Was Discovered. This Was His Life.</og:title>
<og:image>https://static01.nyt.com/images/2018/10/02/nyregion/00body2-promo/00body2-promo-facebookJumbo-v2.jpg</og:image>
<og:description>A software designer ended his life in his parked car in the East Village. His family asked the police for help finding him, but met resistance.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2018/10/23/nyregion/man-found-dead-in-car-new-york.html</dc:identifier>
</item>
<item>
<title>Mars likely to have enough oxygen to support life: study</title>
<link>https://phys.org/news/2018-10-mars-oxygen-life.html</link>
<guid isPermaLink="true" >https://phys.org/news/2018-10-mars-oxygen-life.html</guid>
<description>&lt;div class=&quot;first-block&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;image-block-ins&quot;&gt;&lt;a rel=&quot;lightbox&quot; href=&quot;https://3c1703fe8d.site.internapcdn.net/newman/gfx/news/2018/thenewresear.jpg&quot; title=&quot;The new research was made possible by the discovery by NASA's Curiosity Mars rover of manganese oxides&quot;&gt;&lt;img src=&quot;https://3c1703fe8d.site.internapcdn.net/newman/csz/news/800/2018/thenewresear.jpg&quot; alt=&quot;The new research was made possible by the discovery by NASA's Curiosity Mars rover of manganese oxides&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
The new research was made possible by the discovery by NASA's Curiosity Mars rover of manganese oxides
&lt;p&gt;Modern-day Mars may be more hospitable to oxygen-breathing life than previously thought.&lt;/p&gt;
&lt;/div&gt;&lt;section class=&quot;article-banner first-banner&quot;&gt;
&lt;/section&gt;&lt;p&gt;A new study suggests that salty water at or near the surface of the red planet could contain enough dissolved O2 to support oxygen-breathing microbes, and even more complex organisms such as sponges.&lt;/p&gt;
&lt;p&gt;&quot;Nobody thought of Mars as a place where aerobic respiration would work because there is so little oxygen in the atmosphere,&quot; said Vlada Stamenkovic an Earth and planetary scientist at the Jet Propulsion Laboratory who led the work. &quot;What we're saying is it is possible that this planet that is so different from Earth could have given aerobic life a chance.&quot;&lt;/p&gt;
&lt;p&gt;As part of the report, Stamenkovic and his coauthors also identified which regions of Mars are most likely to contain brines with the greatest amounts of dissolved oxygen. This could help NASA and other space agencies plan where to send landers on future missions, they said.&lt;/p&gt;
&lt;p&gt;The work was published Monday in &lt;em&gt;Nature Geoscience&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;On its surface, the planet Mars is not what you would consider a hospitable place for most Earthlings.&lt;/p&gt;
&lt;p&gt;Here on Earth, 21 percent of our atmosphere is made up of oxygen—thanks to the abundance of plants and other organisms that create oxygen as a byproduct of photosynthesis.&lt;/p&gt;
&lt;p&gt;The Martian atmosphere, on the other hand, is made up of just .145 percent oxygen, according to data collected by the Mars rovers.&lt;/p&gt;
&lt;p&gt;With no plants to make O2, the minuscule amount of oxygen on Mars is created when radiation from the sun interacts with CO2 in the planet's atmosphere.&lt;/p&gt;
&lt;p&gt;In addition, Mars' atmosphere is extremely thin—160 times thinner than Earth's atmosphere. In addition, the temperature at the surface frequently drops to minus 100, making it extremely difficult for liquid water to exist on the planet's surface.&lt;/p&gt;
&lt;p&gt;Pure liquid water would either freeze or evaporate away on Mars, but salty water, or brines, could remain in a liquid state at or just below the surface of the planet, the authors said. That's because water mixed with salts has a lower freezing temperature than plain water. (That's why those unfortunate people who live in cold climates use salt to melt the ice on their sidewalks.)&lt;/p&gt;
&lt;p&gt;In the first part of the paper, the authors use computer models to show that water mixed with salts already present on Mars could be stable in a liquid state at or near the surface.&lt;/p&gt;

&lt;p&gt;Once the authors were convinced that these liquid brines could exist, their next step was to determine how much dissolved oxygen they could absorb from the atmosphere.&lt;/p&gt;
&lt;p&gt;&quot;If there are brines on Mars, then the oxygen would have no choice but to infiltrate them,&quot; said Woody Fischer, a geobiologist at Caltech who worked on the study. &quot;The oxygen would make it everywhere.&quot;&lt;/p&gt;
&lt;p&gt;To calculate how much oxygen the brines might absorb, the researchers had to consider their chemistry, as well as the temperature and air pressure at the Martian surface. Brines will absorb more oxygen when the temperature is lower and the air pressure is higher.&lt;/p&gt;
&lt;p&gt;Their results showed that modern Mars could support liquid environments with enough dissolved O2 to support oxygen-breathing microbes across the planet. They also found that the oxygen concentrations would be especially high in brines found at the polar regions, where temperatures are cooler.&lt;/p&gt;
&lt;p&gt;So far, this work has been done through computer modeling. But experts still said that the study looks robust.&lt;/p&gt;
&lt;p&gt;&quot;The best studies that rely on models for their results conduct a thorough review of the possible variables that can influence the model output,&quot; said Kathleen Mandt, a planetary biologist at the Johns Hopkins University Applied Physics Laboratory. &quot;This study does a good job at exploring a range of possible outcomes.&quot;&lt;/p&gt;
&lt;p&gt;What the study doesn't do, however, is prove that there are indeed brines on Mars.&lt;/p&gt;
&lt;p&gt;&quot;What we know is that theoretically there should be brines on Mars, and that they would be able to dissolve enough oxygen to be biologically useful,&quot; Stamenkovic said.&lt;/p&gt;
&lt;p&gt;The next step, he said, is two-fold.&lt;/p&gt;
&lt;p&gt;He hopes that researchers here on Earth will do experiments to put oxygen-breathing microbes in the brines that could occur on Mars to find out what type of chemistry they do and whether they can thrive. The other step would be to send a lander to Mars that can look for brines from the shallow to the deep subsurface.&lt;/p&gt;
&lt;p&gt;&quot;Amazing work has been done by NASA to look for evidence of past habitable environments,&quot; he said. &quot;I am a big promoter of looking for current habitable environments, and we can do that by starting to explore if there is liquid water on Mars.&quot;&lt;/p&gt;
&lt;p&gt;To that end, Stamenkovic is working to develop a new tool, no bigger than a shoe box, that could be used to find water on Mars and determine its salinity, no digging necessary.&lt;/p&gt;
&lt;p&gt;He calls it TH2OR.&lt;/p&gt;
&lt;p class=&quot;news-relevant&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/WebPage&quot;&gt;&lt;a href=&quot;https://phys.org/news/2018-10-mars-oxygen-life.html#&quot; id=&quot;inl-rel-href&quot;&gt;&lt;img class=&quot;toolsicon ic-rel&quot; src=&quot;https://cf3e497594.site.internapcdn.net/tmpl/v5/img/1x1.gif&quot; width=&quot;14&quot; height=&quot;16&quot; alt=&quot;&quot;/&gt;&lt;/a&gt; &lt;strong&gt;Explore further:&lt;/strong&gt; &lt;a itemprop=&quot;relatedLink&quot; href=&quot;https://phys.org/news/2018-09-earth-salt-lake-mars-expert.html&quot;&gt;What on Earth could live in a salt water lake on Mars? An expert explains&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;More information:&lt;/strong&gt; Vlada Stamenković et al. O2 solubility in Martian near-surface environments and implications for aerobic life, &lt;em&gt;Nature Geoscience&lt;/em&gt; (2018). &lt;a data-doi=&quot;1&quot; href=&quot;http://dx.doi.org/10.1038/s41561-018-0243-0&quot; target=&quot;_blank&quot;&gt;DOI: 10.1038/s41561-018-0243-0&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;footer class=&quot;post-floor clearfix&quot; readability=&quot;20.273722627737&quot;&gt;&lt;div class=&quot;post-copyright&quot; readability=&quot;16.888888888889&quot;&gt;
&lt;p&gt;&lt;strong&gt;Journal reference:&lt;/strong&gt; &lt;a rel=&quot;news&quot; class=&quot;textTag&quot; href=&quot;https://phys.org/journals/nature-geoscience/&quot;&gt;Nature Geoscience&lt;/a&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;post-rating&quot; id=&quot;rank&quot;&gt;
&lt;div id=&quot;flip-box&quot;&gt;
&lt;div class=&quot;flip&quot;&gt;
&lt;p&gt;&lt;span id=&quot;shares&quot;&gt;3878&lt;/span&gt; shares &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;section class=&quot;copyright&quot; readability=&quot;3&quot;&gt;&lt;p&gt;©2018 Los Angeles Times&lt;br/&gt;Distributed by Tribune Content Agency, LLC.&lt;br/&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/footer&gt;</description>
<pubDate>Tue, 23 Oct 2018 01:33:06 +0000</pubDate>
<dc:creator>daegloe</dc:creator>
<og:title>Mars could have enough molecular oxygen to support life, and scientists figured out where to find it</og:title>
<og:description>Modern-day Mars may be more hospitable to oxygen-breathing life than previously thought.</og:description>
<og:image>https://3c1703fe8d.site.internapcdn.net/newman/gfx/news/2018/thenewresear.jpg</og:image>
<og:type>article</og:type>
<og:url>https://phys.org/news/2018-10-mars-oxygen-life.html</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://phys.org/news/2018-10-mars-oxygen-life.html</dc:identifier>
</item>
</channel>
</rss>