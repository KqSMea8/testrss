<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Lisp in fewer than 200 lines of C</title>
<link>https://carld.github.io/2017/06/20/lisp-in-less-than-200-lines-of-c.html</link>
<guid isPermaLink="true" >https://carld.github.io/2017/06/20/lisp-in-less-than-200-lines-of-c.html</guid>
<description>&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Title: a brief and simple programming language implementation
Tags: lambda calculus, Lisp, C, programming
Authors:
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;em&gt;Objective: implement a lambda calculus based programming language like LisP, simply and briefly in C&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;After learning some Scheme and Lisp and implementing LispKit and reading about eval/apply and how minimal the evaluator is, I decided to try implement Lisp in as little C as I could.&lt;/p&gt;
&lt;p&gt;Since it’s less than 200 lines of C code I’ll just discuss the code inline:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;string.h&amp;gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Included are standard headers files: &lt;code class=&quot;highlighter-rouge&quot;&gt;stdio.h&lt;/code&gt; gives us &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;puts&lt;/code&gt; for printing to stdout, and &lt;code class=&quot;highlighter-rouge&quot;&gt;getchar&lt;/code&gt; for retreving a character from stdin. &lt;code class=&quot;highlighter-rouge&quot;&gt;stdlib.h&lt;/code&gt; provides &lt;code class=&quot;highlighter-rouge&quot;&gt;calloc&lt;/code&gt; for dynamically allocating memory while the program is running. &lt;code class=&quot;highlighter-rouge&quot;&gt;string.h&lt;/code&gt; provides &lt;code class=&quot;highlighter-rouge&quot;&gt;strcmp&lt;/code&gt; for comparing two strings, and &lt;code class=&quot;highlighter-rouge&quot;&gt;strdup&lt;/code&gt; for making a duplicate copy of a string.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;cp&quot;&gt;#define debug(m,e) printf(&quot;%s:%d: %s:&quot;,__FILE__,__LINE__,m); print_obj(e,1); puts(&quot;&quot;);
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;debug&lt;/code&gt; macro was used to help troubleshoot the program when it didn’t work. I’d add a line like &lt;code class=&quot;highlighter-rouge&quot;&gt;debug('evaluating', exp)&lt;/code&gt; and it would print out the file, line number, a message, and the Lisp expression representation in a readable form.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; structure is the fundamental data structure used to represent code and data. It is a singly linked list with two pointers: &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; points to the next item in the list, and &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; points to either a symbol or another list structure. &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; could be cast to either a &lt;code class=&quot;highlighter-rouge&quot;&gt;char *&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;List *&lt;/code&gt;. To determine which one keep reading (spoiler: pointer tagging is used).&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The global variable &lt;code class=&quot;highlighter-rouge&quot;&gt;symbols&lt;/code&gt; represents the head of a list of symbols. When symbol is parsed, we’ll look for it in the list of symbols, if it’s not there we’ll add it. This way we can compare two symbols by using the equals comparison operator, &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;. It saves a little bit of storage space when the same symbol is repeated many times in a LisP program, but with 8GB of RAM memory in my computer I probably won’t notice the space saving.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;look&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* look ahead character */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* token */&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Because a symbol can contain more than one character, we have a complete symbol when a character that doesn’t belong in a symbol is encountered. Non symbol characters include whitespace (space, tab, newline etc), and syntax characters such as parenthesis, &lt;code class=&quot;highlighter-rouge&quot;&gt;(&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;)&lt;/code&gt;. To determine whether the end of a symbol has been reached we need to look ahead by one character. The &lt;code class=&quot;highlighter-rouge&quot;&gt;look&lt;/code&gt; variable stores the look ahead character. If this character contains a non-symbol character we’ll know to stop reading the symbol. The &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt; variable is an array of characters, it stores the current symbol that has been read from the input. Note that it has a size of 32, so the maximum length of a symbol will be 31 characters, because the token is a NULL terminated string, so the token is always terminated with a &lt;code class=&quot;highlighter-rouge&quot;&gt;\0&lt;/code&gt; character.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;cp&quot;&gt;#define is_space(x)  (x == ' ' || x == '\n')
&lt;/span&gt;  &lt;span class=&quot;cp&quot;&gt;#define is_parens(x) (x == '(' || x == ')')
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The two macros above are really just a convenience for the sake of readability and possibly maintainability and extensibility of the program. &lt;code class=&quot;highlighter-rouge&quot;&gt;is_space&lt;/code&gt; takes a single character and will return true if that character is a space or a newline. &lt;code class=&quot;highlighter-rouge&quot;&gt;is_parens&lt;/code&gt; takes a single character and will return true if that character is a parenthesis.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gettoken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;look&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;look&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_parens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;look&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;look&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;look&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;look&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EOF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;look&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_parens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;look&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;look&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;look&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The function &lt;code class=&quot;highlighter-rouge&quot;&gt;gettoken&lt;/code&gt; is responsible for reading characters from standard input and determining whether parenthesis or a symbol has been discovered. First it will skip over any whitespace. If the &lt;code class=&quot;highlighter-rouge&quot;&gt;look&lt;/code&gt; variable, the look ahead character, is a parenthesis, it is stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;, and the next character in the input stream read into &lt;code class=&quot;highlighter-rouge&quot;&gt;look&lt;/code&gt;. If the lookahead character is not a parenthesis, it’s assumed to belong to a symbol. Keep looking ahead and saving the character until either &lt;code class=&quot;highlighter-rouge&quot;&gt;EOF&lt;/code&gt; the end of the file is reached, or the look ahead character is whitespace, or the look ahead character is a parenthesis. &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; stores the current position in the &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt; array so it is incremented every time a character belonging to the symbol is stored. At the end the token is NULL terminated.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;cp&quot;&gt;#define is_pair(x) (((long)x &amp;amp; 0x1) == 0x1)  &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* tag pointer to pair with 0x1 (alignment dependent)*/&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;  &lt;span class=&quot;cp&quot;&gt;#define untag(x)   ((long) x &amp;amp; ~0x1)
&lt;/span&gt;  &lt;span class=&quot;cp&quot;&gt;#define tag(x)     ((long) x | 0x1)
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Above contains a curiosity that can be found in many language implementations. Remember from the &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; structure that the &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; pointer can be either a &lt;code class=&quot;highlighter-rouge&quot;&gt;char *&lt;/code&gt; a symbol, or &lt;code class=&quot;highlighter-rouge&quot;&gt;List *&lt;/code&gt; another List. The way we are indicating the type of pointer is by setting the lowest bit on the pointer on. For example, given a pointer to the address &lt;code class=&quot;highlighter-rouge&quot;&gt;0x100200230&lt;/code&gt;, if it’s a pair we’ll modify that pointer with a bitwise or with 1 so the address becomes &lt;code class=&quot;highlighter-rouge&quot;&gt;0x100200231&lt;/code&gt;. The questionable thing about modifying a pointer in this way is how can we tell a pointer tagged with 1, from a regular untagged address. Well, partly as a performance optimization, many computers and their Operating Systems, allocate memory on set boundaries. It’s referred to as memory alignment, and if for example the alignment is to an 8-bit boundary, it means that when memory is allocated it’s address will be a multiple of 8. For example the next 8 bit boundary for the address &lt;code class=&quot;highlighter-rouge&quot;&gt;0x100200230&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;0x100200238&lt;/code&gt;. Memory could be aligned to 16-bits, 32-bits as well. Typically it will be aligned on machine word, which means 32-bits if you have a 32-bit CPU and bus. A more thorough discussion is on wikipedia &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_structure_alignment&quot;&gt;https://en.wikipedia.org/wiki/Data_structure_alignment&lt;/a&gt;. Effectively for us it means that whenever we call &lt;code class=&quot;highlighter-rouge&quot;&gt;calloc&lt;/code&gt; we’ll always get back an address where the lowest bit is off (0), so we can set it on if we want. The macro &lt;code class=&quot;highlighter-rouge&quot;&gt;is_pair&lt;/code&gt; returns non-zero if the address is a pair (which means we’ll need to unset the lowest bit to get the address). It uses a bitwise and with 1 to determine this. The &lt;code class=&quot;highlighter-rouge&quot;&gt;untag&lt;/code&gt; macro switches the lowest bit off, with a bitwise and of the ones complement of 1. The &lt;code class=&quot;highlighter-rouge&quot;&gt;tag&lt;/code&gt; macro switches the lowest bit on with a bitwise or of 1.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;cp&quot;&gt;#define car(x)     (((List*)untag(x))-&amp;gt;data)
&lt;/span&gt;  &lt;span class=&quot;cp&quot;&gt;#define cdr(x)     (((List*)untag(x))-&amp;gt;next)
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There’s two fundamental primitive operations in a typical Lisp/Scheme, &lt;code class=&quot;highlighter-rouge&quot;&gt;car&lt;/code&gt; which returns the head of a list, and &lt;code class=&quot;highlighter-rouge&quot;&gt;cdr&lt;/code&gt; which returns the tail of the list. They are named after operations on an IBM computer, some information on the history is on Wikipedia &lt;a href=&quot;https://en.wikipedia.org/wiki/CAR_and_CDR&quot;&gt;https://en.wikipedia.org/wiki/CAR_and_CDR&lt;/a&gt;. We could as easily call them head and tail, but since they are so ingrained in Lisp and Scheme conventions they are perpetuated here.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;cp&quot;&gt;#define e_true     cons( intern(&quot;quote&quot;), cons( intern(&quot;t&quot;), 0))
&lt;/span&gt;  &lt;span class=&quot;cp&quot;&gt;#define e_false    0
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;e_true&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;e_false&lt;/code&gt; macros are a convenience for defining a what true and false are in this implementation. Basically so long as true is non-zero everything should be ok. It will help if the values they have can be readily printed in human readable form.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pair&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Another fundamental Lisp/Scheme operation is &lt;code class=&quot;highlighter-rouge&quot;&gt;cons&lt;/code&gt;. It constructs a pair, which means a pair of pointers, in this implementation the &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; structure that holds the &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; pointer and the &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; pointer. &lt;a href=&quot;https://en.wikipedia.org/wiki/Cons&quot;&gt;https://en.wikipedia.org/wiki/Cons&lt;/a&gt; Because pointers to a &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; (a pair) must be tagged using the lowest bit, we rely on &lt;code class=&quot;highlighter-rouge&quot;&gt;calloc&lt;/code&gt; to provide memory large enough to hold the &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; data structure and that the memory is aligned to an address that does not involve the lowest bit. The &lt;code class=&quot;highlighter-rouge&quot;&gt;cons&lt;/code&gt; function here takes two arguments, the first is an address that will be stored in the &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; field, and the second an address that will be stored in the &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; field. Finally the address where the &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; structure is stored is returned, after being tagged as a special kind of pointer.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pair&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_pair&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_pair&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strncmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strdup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here’s where a symbol is retreived from the global list of symbols, or added if it is not found. It takes a single string argument. It uses &lt;code class=&quot;highlighter-rouge&quot;&gt;strncmp&lt;/code&gt; to determine if anyone of the symbols are equivalent to the string passed in. If we get to the end of the list of symbols and didnt find a match. The symbol is duplicated with &lt;code class=&quot;highlighter-rouge&quot;&gt;strdup&lt;/code&gt; and added to the head of the list. This is the effect of &lt;code class=&quot;highlighter-rouge&quot;&gt;cons&lt;/code&gt; when given an existing list as the second parameter: a new symbol is pushed onto the list, and a new list head is constructed. The reason &lt;code class=&quot;highlighter-rouge&quot;&gt;strdup&lt;/code&gt; is used, and the string is duplicated, is because we want a more permanent copy of the string. When the program runs, the &lt;code class=&quot;highlighter-rouge&quot;&gt;sym&lt;/code&gt; parameter could be a pointer to the &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt; global variable which will be modified as symbols are read from the input stream. The function is called &lt;code class=&quot;highlighter-rouge&quot;&gt;intern&lt;/code&gt; out of convention, see &lt;a href=&quot;https://en.wikipedia.org/wiki/String_interning&quot;&gt;https://en.wikipedia.org/wiki/String_interning&lt;/a&gt; for more background on string interning.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Above is a forward declaration of the function &lt;code class=&quot;highlighter-rouge&quot;&gt;getlist&lt;/code&gt; which is defined further down. A forward declaration is needed because the &lt;code class=&quot;highlighter-rouge&quot;&gt;getobj&lt;/code&gt; function can call it, and &lt;code class=&quot;highlighter-rouge&quot;&gt;getlist&lt;/code&gt; can call &lt;code class=&quot;highlighter-rouge&quot;&gt;getobj&lt;/code&gt; which is a chicken and egg kind of problem. The C compiler needs to know that the full signature of this function so it can be used before it is defined.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;All &lt;code class=&quot;highlighter-rouge&quot;&gt;getobj&lt;/code&gt; has to do is check if the current token from the input stream was an opening parenthesis, which means a list is being defined, and &lt;code class=&quot;highlighter-rouge&quot;&gt;getlist&lt;/code&gt; can be called to construct the list. Otherwise, the token is treated as a symbol, and &lt;code class=&quot;highlighter-rouge&quot;&gt;intern&lt;/code&gt; is used to either return the single copy, or create a single copy and add it to the list of symbols.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gettoken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;')'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The function &lt;code class=&quot;highlighter-rouge&quot;&gt;getlist&lt;/code&gt; reads the next token from the input. If the token is a closing parenthesis it returns 0 (a NULL pointer). Otherwise the token is probably a symbol, so call &lt;code class=&quot;highlighter-rouge&quot;&gt;getobj&lt;/code&gt; and intern that symbol, then use &lt;code class=&quot;highlighter-rouge&quot;&gt;cons&lt;/code&gt; to add that symbol to the head of the list, calling &lt;code class=&quot;highlighter-rouge&quot;&gt;getlist&lt;/code&gt; recursively to get the tail of the list. Take note that the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;tmp&lt;/code&gt; - an abbreviation of temporary - and explicity assigned to the return value of &lt;code class=&quot;highlighter-rouge&quot;&gt;getobj&lt;/code&gt; before the &lt;code class=&quot;highlighter-rouge&quot;&gt;cons&lt;/code&gt;. This is to ensure that the list is constructed in the correct order from head towards tail. Before the &lt;code class=&quot;highlighter-rouge&quot;&gt;cons&lt;/code&gt; function is called, it’s arguments are evaluated, and in this case it’s second argument is a function call to &lt;code class=&quot;highlighter-rouge&quot;&gt;getlist&lt;/code&gt;. So &lt;code class=&quot;highlighter-rouge&quot;&gt;getlist&lt;/code&gt; is called again before &lt;code class=&quot;highlighter-rouge&quot;&gt;cons&lt;/code&gt; is called, and either the end of the list (right parens) is discovered, or the next item in the list is. How this recursive function call works is worthwhile understanding. In C, when functions are called, the arguments to the function, and the variables in the function are pushed on top of a data structure called a stack. A stack is literally a stack of things, like a stack of plates, where the last thing on top is the first thing that will come off. The arguments and variables to the function come off the stack when the function returns, literally where you see &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; in the code. With every call to the &lt;code class=&quot;highlighter-rouge&quot;&gt;getlist&lt;/code&gt; function as it comes across items in the list it is processing, the stack grows with another set of variables needed by &lt;code class=&quot;highlighter-rouge&quot;&gt;getlist&lt;/code&gt;. So 3 recursive calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;getlist&lt;/code&gt; means the stack grows by 3 times the &lt;code class=&quot;highlighter-rouge&quot;&gt;getlist&lt;/code&gt; functions storage requirements. The inefficiency here is the longer the list, the taller the stack. Some programming languages have a stack overflow error where the stack has out grown the available memory. Wikipedia has a page about this &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_overflow&quot;&gt;https://en.wikipedia.org/wiki/Stack_overflow&lt;/a&gt; Programming languages like Scheme implement something called tail call optimization where the language can determine if the variables used by a recursive function call will be needed after it returns and if not, it does not grow the stack. This is a pretty cool feature of a programming language and it would be great to have in this language, and maybe we can add it later on. For more on tail calls, &lt;a href=&quot;https://en.wikipedia.org/wiki/Tail_call&quot;&gt;https://en.wikipedia.org/wiki/Tail_call&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head_of_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;null&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head_of_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;print_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;print_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;print_obj&lt;/code&gt; function is tremendously useful in that it can print either a symbol, or an entire list, to stdout so that we can read it. If the first argument, &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; isn’t the specially tagged pointer, it’s just a symbol so it can be output with &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; using the &lt;code class=&quot;highlighter-rouge&quot;&gt;%s&lt;/code&gt; format specifier, which says that the provided pointer is a null terminated string. Otherwise &lt;code class=&quot;highlighter-rouge&quot;&gt;print_obj&lt;/code&gt; is being asked to print a list, so &lt;code class=&quot;highlighter-rouge&quot;&gt;ob&lt;/code&gt; will be the address of a &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; structure, meaning it is somewhere, either the beginning, middle or end, or printing a list. the &lt;code class=&quot;highlighter-rouge&quot;&gt;head_of_list&lt;/code&gt; argument is the giveaway here. If &lt;code class=&quot;highlighter-rouge&quot;&gt;head_of_list&lt;/code&gt; is non-zero, it’s the beginning of a new list, so print the left parenthesis. In any case it has to print the value of the current item (it could either be a symbol or a nested listed) so it calls itself with the value of the current head of the list, &lt;code class=&quot;highlighter-rouge&quot;&gt;car(ob)&lt;/code&gt;. If the tail of the list is non-zero, this means there’s more, so as long as the tail of the list is a pointer to another &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; structure, print a space, and then print the tail of the list. Otherwise, the tail of the list is zero, which means we’re at the end of the list, so print the closing parenthesis.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fcons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fcar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fcdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;feq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e_true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e_false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fpair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e_true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e_false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fsym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e_true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e_false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fnull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e_true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e_false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freadobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;look&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gettoken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fwriteobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;print_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e_true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Above are defined the basic primitive operations required by Lisp, all using the same return value and argument specification. These functions will be referenced in the interpreters environment so they can be used from a Lisp program. Because the Lisp language we’re implementing will know nothing about C and how many arguments and what type they should be in C, the arguments are represented using the linked list structure, which has an equivalent Lisp representation using parenthesis, whitespace and symbols. These functions are prefixed with &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; which stands for function. They are called indirectly only when a Lisp program looks one up and wants to apply it.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is a forward declaraction of &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; the meta-circular evaluator.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;evlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;untag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Above is the &lt;code class=&quot;highlighter-rouge&quot;&gt;evlist&lt;/code&gt; function, short for “evaluate list”. It takes a list and an environment, and evaluates each item in the list, returning a corresponding list with the evaluation of each input item, maintaining the order. There is use of a pointer to a pointer here which makes this code less immediately obvious, but it means we can walk through the list, creating a parallel list with the evaluated elements in the same order. In “The C Programming Language” by Brian Kernighan and Dennis Ritchie, a pointer is said to be a variable that contains the address of another variable. The &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; operator dereferences a pointer, giving the object pointed to. The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; operator gives the address of a variable. &lt;code class=&quot;highlighter-rouge&quot;&gt;evlist&lt;/code&gt; iterates through the &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt; argument in a for loop. Two local variables, a pointer, &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt;, is initialized to 0, the purpose of &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; is to store the head of the list that will be returned. &lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt; is a pointer to a pointer, it is initialied to the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt;. On each iteration, &lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt; is dereferenced and the resulting pointer is assigned to a newly constructed cell. On the next line, &lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt; is assigned to the address of the &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; field in that constructed cell. This means that on the next iteration, &lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt; is a pointer to a pointer to the &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; field of the previous element. When it is dereferenced with a single &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; and assigned, we are effectively setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; field to point to the newly constructed cell in the current iteration.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply_primitive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primfn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primfn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;apply_primitive&lt;/code&gt; function does nothing more than cast the &lt;code class=&quot;highlighter-rouge&quot;&gt;primfn&lt;/code&gt; to a pointer to a function that takes a single &lt;code class=&quot;highlighter-rouge&quot;&gt;List *&lt;/code&gt; and returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;List *&lt;/code&gt;, and then calls that function with &lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;18.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* special forms */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;quote&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;if&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lambda&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* todo: create a closure and capture free vars */&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;apply&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* apply function to list */&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evlist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* assumes one argument and that it is a list */&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply_primitive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* function call */&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* user defined lambda, arg list eval happens in binding  below */&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* built-in primitive */&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply_primitive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* should be a lambda, bind names into env and eval body */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lambda&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extenv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;extenv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cannot evaluate expression&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; function is the heart of LiSP. It interprets LisP expressions. If the expression is not a pair (not a &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; structure), we look for that value it is associated with in the environment. In other implementations of eval, the equivalent test is if the expression is an &lt;code class=&quot;highlighter-rouge&quot;&gt;atom&lt;/code&gt;. Otherwise the expression must be a list, and then the first element of that list is checked, if that first element is not a &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; structure - it is a symbol, or more officially an atom, then the following series of if statements handle it: if the first element is a &lt;code class=&quot;highlighter-rouge&quot;&gt;quote&lt;/code&gt; symbol, the next element is return, that is, the head of the tail of the list; if the first element is an &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; symbol, the head of the tail of the list is evaluated, if that returns non-zero, the head of the tail of the tail of the list is evaluated and returned, if it returns zero, the head of the tail of the tail of the tail is evaluated and returned. If the first element is the symbol &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda&lt;/code&gt; the expression is simply returned (maybe this is redundant so may indicate a bug or some optimization that is missing). In a Scheme interpreter, a closure would be created and the free variables in the closure captured using the current environment. If the first symbol is &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt; that means, in this interpreter at least, that the next element is a function and the element after that, the third element in this list is a list - the &lt;code class=&quot;highlighter-rouge&quot;&gt;(b c d)&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;(apply a (b c d))&lt;/code&gt;. The assumption is that &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt; is being used to call one of the basic primitive operations defined above: &lt;code class=&quot;highlighter-rouge&quot;&gt;car&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cdr&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cons&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;eq?&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pair?&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;symbol?&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;null?&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;write&lt;/code&gt;. If the first symbol did not match any of the prior if statements, we assume a the first symbol is in the environment and is either a user defined function - a lambda, or a primitive function (and apply is not being used to call it). We find out which it is by evaluating that first element, if it’s a pair, it’s a list, i.e. an expression in the form &lt;code class=&quot;highlighter-rouge&quot;&gt;(lambda (arg) (body expressions ...))&lt;/code&gt;. If it’s not a pair we assume it’s a pointer to a function, and use &lt;code class=&quot;highlighter-rouge&quot;&gt;apply_primitive&lt;/code&gt; to invocate that function, evaluating it’s arguments before calling it. The remaining block is the &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; which meant the first argument in the expression was a pair - eval was called with a list nested inside a list, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;((x y z))&lt;/code&gt;, and the only form of nested expression handled, is lambda, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;((lambda (arg) (body expr ...)) value )&lt;/code&gt;. In this case the names of the arguments in the lambda definition are bound to the corresponding values, and the name value pairs are pushed onto the head of the environment, until there are no more arguments (names) left to bind. The body of the lambda is then evaluated with the extended environment.&lt;/p&gt;
&lt;p&gt;A newer article describing eval is called “The Roots of Lisp” by Paul Graham, and can be downloaded from &lt;a href=&quot;http://www.paulgraham.com/rootsoflisp.html&quot;&gt;http://www.paulgraham.com/rootsoflisp.html&lt;/a&gt; A thorough explanation can be found in “Structure and Interpretation of Computer Programs”, by Harold Ableson and Gerald Jay Sussman. This book can be found online: &lt;a href=&quot;https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-26.html#%_sec_4.1&quot;&gt;https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-26.html#%_sec_4.1&lt;/a&gt; The earliest implementation of eval I have found is in the Lisp 1.5 Programmers Manual.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;24&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;car&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fcar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cdr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fcdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fcons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;eq?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pair?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fpair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;symbol?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;null?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fnull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;read&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freadobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;write&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fwriteobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;null&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))))));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;look&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gettoken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; is the entry point for this program when it is run. It has one variable, &lt;code class=&quot;highlighter-rouge&quot;&gt;env&lt;/code&gt; which is assigned to a list of lists, effectively just associating a symbol with a primitive function. The remaining lines, look ahead one character, load the first token with &lt;code class=&quot;highlighter-rouge&quot;&gt;gettoken&lt;/code&gt;, and then print with &lt;code class=&quot;highlighter-rouge&quot;&gt;print_obj&lt;/code&gt;, the evaluated object read by &lt;code class=&quot;highlighter-rouge&quot;&gt;getobj&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That is it a very small and incomplete interpreter… Noticeably there is no garbage collection, or even any explicit free of the memory allocated by &lt;code class=&quot;highlighter-rouge&quot;&gt;calloc&lt;/code&gt;. Neither is there any error handling, so a program with missing or unmatched parenthesis, unresolved symbols, etc will likely just result in something like a segmentation fault.&lt;/p&gt;
&lt;p&gt;Despite the limitations, this interpreter provides enough primitive functions to implement an equivalent eval on itself.&lt;/p&gt;
&lt;p&gt;The complete source code and some tests can be found at &lt;a href=&quot;https://github.com/carld/micro-lisp&quot;&gt;https://github.com/carld/micro-lisp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An implementaion of eval that runs on the interpreter above can be found in &lt;code class=&quot;highlighter-rouge&quot;&gt;repl.lisp&lt;/code&gt;. It implements a Read Eval Print Loop and it can be run using:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat repl.lisp - |./micro-lisp&lt;/code&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 26 Nov 2017 17:23:09 +0000</pubDate>
<dc:creator>jfo</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://carld.github.io/2017/06/20/lisp-in-less-than-200-lines-of-c.html</dc:identifier>
</item>
<item>
<title>Rust: Enable WebAssembly backend by default</title>
<link>https://www.hellorust.com/news/native-wasm-target.html</link>
<guid isPermaLink="true" >https://www.hellorust.com/news/native-wasm-target.html</guid>
<description>&lt;time pubdate=&quot;pubdate&quot;&gt;Nov 26, 2017&lt;/time&gt; - Jan-Erik Rediger
&lt;p&gt;Yesterday the &lt;a href=&quot;https://github.com/rust-lang/rust/pull/46115&quot;&gt;Pull Request 46115: &quot;rustbuild: Enable WebAssembly backend by default&quot;&lt;/a&gt; was merged into Rust master. With the Nightly build from that night, the &lt;code&gt;wasm32-unknown-unknown&lt;/code&gt; target is natively available.&lt;/p&gt;
&lt;p&gt;Once you install that nightly (or any later one from now on), you can compile to WebAssembly without additional tools:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;rustup update
&lt;/span&gt;&lt;span&gt;rustup target add wasm32-unknown-unknown --toolchain nightly
&lt;/span&gt;&lt;span&gt;rustc +nightly --target wasm32-unknown-unknown -O hello.rs
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Support &amp;amp; documentation is still a bit limited, but we're working to expand in this area. The Rust compiler also does not have a proper linker just now, so final WebAssembly modules will be quite big. Alex wrote a small tool to reduce the size:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;cargo install --git https://github.com/alexcrichton/wasm-gc
&lt;/span&gt;&lt;span&gt;wasm-gc hello.wasm small-hello.wasm
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You can find the full instruction &lt;a href=&quot;https://www.hellorust.com/setup/wasm-target&quot;&gt;in the &lt;code&gt;wasm-32-unknown-unknown&lt;/code&gt; setup guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to contribute with examples, documentation, articles or other resources open an issue or pull request on &lt;a href=&quot;https://github.com/badboy/hellorust&quot;&gt;github.com/badboy/hellorust&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sun, 26 Nov 2017 12:58:42 +0000</pubDate>
<dc:creator>a_humean</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hellorust.com/news/native-wasm-target.html</dc:identifier>
</item>
<item>
<title>Super Tiny Website Logos in SVG</title>
<link>https://shkspr.mobi/blog/2017/11/super-tiny-website-logos-in-svg/</link>
<guid isPermaLink="true" >https://shkspr.mobi/blog/2017/11/super-tiny-website-logos-in-svg/</guid>
<description>&lt;p&gt;You may not realise it, but bandwidth is expensive. It costs you time, money, and battery power whenever you download a file larger than it needs to be.&lt;/p&gt;
&lt;p&gt;That's why I've become a little bit obsessed with SVG - Scalable Vector Graphics. They're the closest thing to magic that the web has when it comes to image compression. Let me show you what I mean.&lt;/p&gt;
&lt;p&gt;This is the standard Twitter Logo. It's 512 * 512 pixels and, even with hefty PNG compression, weighs in at around 20KB.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://shkspr.mobi/blog/wp-content/uploads/2017/10/Twitter-Logo.png&quot; width=&quot;256&quot; height=&quot;256&quot; class=&quot;alignnone&quot; alt=&quot;The Twitter logo is a bird&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Here's the same logo rendered as an SVG. Because it is a vector graphic it can be magnified infinitely without any loss of fidelity.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://edent.github.io/SuperTinyIcons/tiny/twitter.svg&quot; width=&quot;256&quot; class=&quot;alignnone&quot; title=&quot;Twitter&quot; alt=&quot;The Twitter logo is a bird&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The uncompressed SVG is &lt;strong&gt;a mere 397 Bytes&lt;/strong&gt;. Not a typo. You could fit over 3,000 of these images on a floppy disk.&lt;/p&gt;
&lt;p&gt;That's why I have &lt;a href=&quot;https://github.com/edent/SuperTinyIcons&quot;&gt;released SuperTinyIcons on GitHub&lt;/a&gt;. Eighty of the web's most popular logos - each image is under 1KB.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/edent/SuperTinyIcons&quot;&gt;&lt;img src=&quot;https://shkspr.mobi/blog/wp-content/uploads/2017/10/Screenshot-2017-10-25-edent-SuperTinySocialIcons-fs8.png&quot; alt=&quot;Rows of icons - each one has the size printed next to it.&quot; width=&quot;606&quot; height=&quot;552&quot; class=&quot;aligncenter size-full wp-image-28787&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These files are suitable for use on the web - just use &lt;code&gt;&amp;lt;img src=&quot;...&lt;/code&gt;. They are supported by all popular browsers. I've also converted them to Android Vector Drawables, so they can be incorporated into your apps.&lt;/p&gt;
&lt;p&gt;I've released them as MIT licensed files - although you should check the original images' licences. Some of these logos may be trademarked.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/edent/SuperTinyIcons&quot;&gt;SuperTinyIcons on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;footer class=&quot;entry-footer&quot;/&gt;</description>
<pubDate>Sun, 26 Nov 2017 11:59:26 +0000</pubDate>
<dc:creator>edent</dc:creator>
<og:type>article</og:type>
<og:title>Super Tiny Website Logos in SVG</og:title>
<og:url>https://shkspr.mobi/blog/2017/11/super-tiny-website-logos-in-svg/</og:url>
<og:description>You may not realise it, but bandwidth is expensive. It costs you time, money, and battery power whenever you download a file larger than it needs to be. That’s why I’ve become a little …</og:description>
<og:image>https://shkspr.mobi/blog/wp-content/uploads/2017/10/Screenshot-2017-10-25-edent-SuperTinySocialIcons-fs8.png</og:image>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://shkspr.mobi/blog/2017/11/super-tiny-website-logos-in-svg/</dc:identifier>
</item>
<item>
<title>Members of congress who voted to reverse FCC web browsing privacy rule</title>
<link>https://www.theverge.com/2017/3/29/15100620/congress-fcc-isp-web-browsing-privacy-fire-sale</link>
<guid isPermaLink="true" >https://www.theverge.com/2017/3/29/15100620/congress-fcc-isp-web-browsing-privacy-fire-sale</guid>
<description>&lt;p id=&quot;ymZkFP&quot;&gt;Republicans in Congress &lt;a href=&quot;http://www.theverge.com/2017/3/28/15080436/us-house-votes-to-let-isps-share-web-browsing-history&quot;&gt;just voted to reverse a landmark FCC privacy rule&lt;/a&gt; that opens the door for ISPs to sell customer data. Lawmakers provided no credible reason for this being in the interest of Americans, except for vague platitudes about “consumer choice” and “free markets,” as if consumers at the mercy of their local internet monopoly are craving to have their web history quietly sold to marketers and any other third party willing to pay.&lt;/p&gt;
&lt;p id=&quot;psfqet&quot;&gt;The only people who seem to want this are the people who are going to make lots of money from it. (Hint: they work for companies like Comcast, Verizon, and AT&amp;amp;T.) Incidentally, these people and their companies routinely give lots of money to members of Congress.&lt;/p&gt;
&lt;p id=&quot;dhSWvg&quot;&gt;So here is a list of the lawmakers who voted to betray you, and how much money they received from the telecom industry in their most recent election cycle.&lt;/p&gt;

&lt;p id=&quot;iyy2fE&quot;&gt;&lt;em&gt;Note on the data below: donations include contributions from corporations in the telecom industry and employees of those corporations (individual and non-individual contributions). The largest donors tend to be corporations which contributed funds to the candidate and&lt;/em&gt; &lt;em&gt;/&lt;/em&gt; &lt;em&gt;or the candidate’s leadership organization (PAC). All figures only reflect donations tallied for the candidate’s most recent election — many have received total sums much larger than the figure reflected over the course of their career in Congress. Figures are from federal election data&lt;/em&gt; &lt;a href=&quot;https://www.followthemoney.org/&quot;&gt;&lt;em&gt;compiled by the National Institute on Money in State Politics (www.followthemoney.org)&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;zFNCjJ&quot;&gt;&lt;em&gt;Additionally, it’s important to note that the communications industry is one of the largest lobbying groups in US history; internet providers and the telephone companies before them are notorious for&lt;/em&gt; &lt;a href=&quot;http://www.theverge.com/2014/3/10/5491908/comcast-buys-congress&quot;&gt;&lt;em&gt;spreading wealth across the aisle&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Regardless, one party seems more responsive to the industry’s demands.&lt;/em&gt;&lt;/p&gt;
&lt;div id=&quot;jPrO3L&quot;&gt;
&lt;div class=&quot;c-interactive-table&quot; data-cid=&quot;apps/interactive_table-1511733112_6145_62158&quot; data-cdata=&quot;{&amp;quot;paging&amp;quot;:false,&amp;quot;searchable&amp;quot;:true,&amp;quot;sort_column&amp;quot;:0,&amp;quot;sort_descending&amp;quot;:false,&amp;quot;sortable&amp;quot;:false}&quot;&gt;
&lt;h3&gt;US Senate&lt;/h3&gt;
&lt;table class=&quot;p-data-table&quot; width=&quot;100%&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;MEMBER&lt;/th&gt;
&lt;th&gt;PARTY&lt;/th&gt;
&lt;th&gt;STATE&lt;/th&gt;
&lt;th&gt;TOTAL&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tfoot&gt;&lt;tr&gt;&lt;th&gt;MEMBER&lt;/th&gt;
&lt;th&gt;PARTY&lt;/th&gt;
&lt;th&gt;STATE&lt;/th&gt;
&lt;th&gt;TOTAL&lt;/th&gt;
&lt;/tr&gt;&lt;/tfoot&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Alexander, Lamar&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TN&lt;/td&gt;
&lt;td&gt;$86,400&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Barrasso, John&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;WY&lt;/td&gt;
&lt;td&gt;$63,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Blunt, Roy&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MO&lt;/td&gt;
&lt;td&gt;$185,550&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Boozman, John&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AR&lt;/td&gt;
&lt;td&gt;$56,450&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Burr, Richard&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NC&lt;/td&gt;
&lt;td&gt;$58,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Capito, Shelley&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;WV&lt;/td&gt;
&lt;td&gt;$24,675&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Cassidy, Bill&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;LA&lt;/td&gt;
&lt;td&gt;$34,909&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Cochran, Thad&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MS&lt;/td&gt;
&lt;td&gt;$123,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Collins, Susan&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;ME&lt;/td&gt;
&lt;td&gt;$57,550&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Corker, Bob&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TN&lt;/td&gt;
&lt;td&gt;$43,600&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Cornyn, John&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;$148,800&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Cotton, Tom&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AR&lt;/td&gt;
&lt;td&gt;$70,025&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Crapo, Mike&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;ID&lt;/td&gt;
&lt;td&gt;$11,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Cruz, Ted&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;$40,840&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Daines, Steve&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MT&lt;/td&gt;
&lt;td&gt;$38,700&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Enzi, Mike&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;WY&lt;/td&gt;
&lt;td&gt;$45,100&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Ernst, Joni&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IA&lt;/td&gt;
&lt;td&gt;$28,200&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Fischer, Debra&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NE&lt;/td&gt;
&lt;td&gt;$21,850&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Flake, Jeff&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AZ&lt;/td&gt;
&lt;td&gt;$27,955&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Gardner, Cory&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;CO&lt;/td&gt;
&lt;td&gt;$95,023&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Graham, Lindsey&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;SC&lt;/td&gt;
&lt;td&gt;$74,522&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Grassley, Chuck&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IA&lt;/td&gt;
&lt;td&gt;$135,125&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Hatch, Orrin&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;UT&lt;/td&gt;
&lt;td&gt;$106,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Heller, Dean&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NV&lt;/td&gt;
&lt;td&gt;$78,950&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Hoeven, John&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;ND&lt;/td&gt;
&lt;td&gt;$25,800&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Inhofe, Jim&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;$38,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Johnson, Ron&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;WI&lt;/td&gt;
&lt;td&gt;$123,652&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Kennedy, John&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;LA&lt;/td&gt;
&lt;td&gt;$1,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Lankford, James&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;$21,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Lee, Mike&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;UT&lt;/td&gt;
&lt;td&gt;$60,913&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;McCain, John&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AZ&lt;/td&gt;
&lt;td&gt;$84,125&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;McConnell, Mitch&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;KY&lt;/td&gt;
&lt;td&gt;$251,110&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Moran, Jerry&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;KS&lt;/td&gt;
&lt;td&gt;$130,950&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Murkowski, Lisa&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AK&lt;/td&gt;
&lt;td&gt;$66,250&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Perdue, David&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;GA&lt;/td&gt;
&lt;td&gt;$37,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Portman, Rob&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OH&lt;/td&gt;
&lt;td&gt;$89,350&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Risch, Jim&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;ID&lt;/td&gt;
&lt;td&gt;$27,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Roberts, Pat&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;KS&lt;/td&gt;
&lt;td&gt;$100,200&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Rounds, Mike&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;SD&lt;/td&gt;
&lt;td&gt;$40,166&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Rubio, Marco&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;FL&lt;/td&gt;
&lt;td&gt;$75,535&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Sasse, Benjamin&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NE&lt;/td&gt;
&lt;td&gt;$31,800&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Scott, Tim&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;SC&lt;/td&gt;
&lt;td&gt;$60,200&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Shelby, Richard&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AL&lt;/td&gt;
&lt;td&gt;$27,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Strange, Luther&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AL&lt;/td&gt;
&lt;td&gt;$0*&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Sullivan, Daniel&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AK&lt;/td&gt;
&lt;td&gt;$10,550&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Thune, John&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;SD&lt;/td&gt;
&lt;td&gt;$215,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Tillis, Thom&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NC&lt;/td&gt;
&lt;td&gt;$41,220&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Toomey, Patrick&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;PA&lt;/td&gt;
&lt;td&gt;$143,456&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Wicker, Roger&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MS&lt;/td&gt;
&lt;td&gt;$151,800&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Young, Todd&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IN&lt;/td&gt;
&lt;td&gt;$28,670&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p id=&quot;Zry0Wy&quot;&gt;*&lt;em&gt;Senator Strange was appointed to Congress in February 2017 to fill Attorney General Jeff Sessions’ seat.&lt;/em&gt;&lt;/p&gt;
&lt;div id=&quot;b81LLS&quot;&gt;
&lt;div class=&quot;c-interactive-table&quot; data-cid=&quot;apps/interactive_table-1511733112_4915_62159&quot; data-cdata=&quot;{&amp;quot;paging&amp;quot;:false,&amp;quot;searchable&amp;quot;:true,&amp;quot;sort_column&amp;quot;:0,&amp;quot;sort_descending&amp;quot;:false,&amp;quot;sortable&amp;quot;:false}&quot;&gt;
&lt;h3&gt;US House of Representatives&lt;/h3&gt;
&lt;table class=&quot;p-data-table&quot; width=&quot;100%&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;MEMBER&lt;/th&gt;
&lt;th&gt;PARTY&lt;/th&gt;
&lt;th&gt;STATE&lt;/th&gt;
&lt;th&gt;DISTRICT&lt;/th&gt;
&lt;th&gt;TOTAL&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tfoot&gt;&lt;tr&gt;&lt;th&gt;MEMBER&lt;/th&gt;
&lt;th&gt;PARTY&lt;/th&gt;
&lt;th&gt;STATE&lt;/th&gt;
&lt;th&gt;DISTRICT&lt;/th&gt;
&lt;th&gt;TOTAL&lt;/th&gt;
&lt;/tr&gt;&lt;/tfoot&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Abraham, Ralph&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;LA&lt;/td&gt;
&lt;td&gt;5th&lt;/td&gt;
&lt;td&gt;$5,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Aderholt, Robert&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AL&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$26,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Allen, Rick&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;GA&lt;/td&gt;
&lt;td&gt;12th&lt;/td&gt;
&lt;td&gt;$9,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Amodei, Mark&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NV&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$22,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Arrington, Jodey&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;19th&lt;/td&gt;
&lt;td&gt;$8,450&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Babin, Brian&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;36th&lt;/td&gt;
&lt;td&gt;$8,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Bacon, Donald&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NE&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$7,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Banks, Jim&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IN&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$12,100&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Barletta, Lou&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;PA&lt;/td&gt;
&lt;td&gt;11th&lt;/td&gt;
&lt;td&gt;$14,700&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Barr, Andy&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;KY&lt;/td&gt;
&lt;td&gt;6th&lt;/td&gt;
&lt;td&gt;$28,400&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Barton, Joe&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;6th&lt;/td&gt;
&lt;td&gt;$39,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Bergman, Jack&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MI&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$21,200&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Biggs, Andy&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AZ&lt;/td&gt;
&lt;td&gt;5th&lt;/td&gt;
&lt;td&gt;$5,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Bilirakis, Gus&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;FL&lt;/td&gt;
&lt;td&gt;12th&lt;/td&gt;
&lt;td&gt;$55,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Bishop, Mike&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MI&lt;/td&gt;
&lt;td&gt;8th&lt;/td&gt;
&lt;td&gt;$40,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Bishop, Rob&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;UT&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$5,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Black, Diane&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TN&lt;/td&gt;
&lt;td&gt;6th&lt;/td&gt;
&lt;td&gt;$27,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Blackburn, Marsha&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TN&lt;/td&gt;
&lt;td&gt;7th&lt;/td&gt;
&lt;td&gt;$84,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Blum, Rodney&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IA&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$5,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Bost, Mike&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IL&lt;/td&gt;
&lt;td&gt;12th&lt;/td&gt;
&lt;td&gt;$29,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Brady, Kevin&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;8th&lt;/td&gt;
&lt;td&gt;$20,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Brat, David&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;VA&lt;/td&gt;
&lt;td&gt;7th&lt;/td&gt;
&lt;td&gt;$6,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Bridenstine, Jim&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$1,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Brooks, Susan&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IN&lt;/td&gt;
&lt;td&gt;5th&lt;/td&gt;
&lt;td&gt;$44,300&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Buchanan, Vern&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;FL&lt;/td&gt;
&lt;td&gt;16th&lt;/td&gt;
&lt;td&gt;$18,900&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Buck, Ken&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;CO&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$15,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Bucshon, Larry&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IN&lt;/td&gt;
&lt;td&gt;8th&lt;/td&gt;
&lt;td&gt;$33,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Budd, Theodore&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NC&lt;/td&gt;
&lt;td&gt;13th&lt;/td&gt;
&lt;td&gt;$10,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Burgess, Michael&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;26th&lt;/td&gt;
&lt;td&gt;$39,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Byrne, Bradley&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AL&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$17,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Calvert, Ken&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;CA&lt;/td&gt;
&lt;td&gt;42nd&lt;/td&gt;
&lt;td&gt;$12,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Carter, Buddy&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;GA&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$12,250&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Carter, John&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;31st&lt;/td&gt;
&lt;td&gt;$22,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Chabot, Steven&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OH&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$25,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Chaffetz, Jason&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;UT&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$38,100&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Cheney, Liz&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;WY&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$18,400&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Cole, Tom&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$14,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Collins, Doug&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;GA&lt;/td&gt;
&lt;td&gt;9th&lt;/td&gt;
&lt;td&gt;$42,850&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Collins, Chris&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NY&lt;/td&gt;
&lt;td&gt;27th&lt;/td&gt;
&lt;td&gt;$57,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Comer, James&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;KY&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$14,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Comstock, Barbara&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;VA&lt;/td&gt;
&lt;td&gt;10th&lt;/td&gt;
&lt;td&gt;$56,457&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Conaway, Mike&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;11th&lt;/td&gt;
&lt;td&gt;$18,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Cook, Paul&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;CA&lt;/td&gt;
&lt;td&gt;8th&lt;/td&gt;
&lt;td&gt;$15,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Costello, Ryan&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;PA&lt;/td&gt;
&lt;td&gt;6th&lt;/td&gt;
&lt;td&gt;$38,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Cramer, Kevin&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;ND&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$71,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Crawford, Eric&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AR&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$9,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Culberson, John&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;7th&lt;/td&gt;
&lt;td&gt;$8,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Curbelo, Carlos&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;FL&lt;/td&gt;
&lt;td&gt;26th&lt;/td&gt;
&lt;td&gt;$45,700&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Davis, Rodney&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IL&lt;/td&gt;
&lt;td&gt;13th&lt;/td&gt;
&lt;td&gt;$49,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Denham, Jeffrey&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;CA&lt;/td&gt;
&lt;td&gt;10th&lt;/td&gt;
&lt;td&gt;$47,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Dent, Charles&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;PA&lt;/td&gt;
&lt;td&gt;15th&lt;/td&gt;
&lt;td&gt;$25,200&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DeSantis, Ron&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;FL&lt;/td&gt;
&lt;td&gt;6th&lt;/td&gt;
&lt;td&gt;$21,634&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DesJarlais, Scott&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TN&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$3,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Diaz-Balart, Mario&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;FL&lt;/td&gt;
&lt;td&gt;25th&lt;/td&gt;
&lt;td&gt;$26,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Donovan, Daniel&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NY&lt;/td&gt;
&lt;td&gt;11th&lt;/td&gt;
&lt;td&gt;$16,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Duncan, Jeff&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;SC&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$12,610&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Dunn, Neal&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;FL&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$13,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Emmer, Thomas&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MN&lt;/td&gt;
&lt;td&gt;6th&lt;/td&gt;
&lt;td&gt;$18,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Farenthold, Blake&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;27th&lt;/td&gt;
&lt;td&gt;$19,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Ferguson, Anderson&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;GA&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$7,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Fitzpatrick, Brian**&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;PA&lt;/td&gt;
&lt;td&gt;8th&lt;/td&gt;
&lt;td&gt;$32,600&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Fleischmann, Chuck&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TN&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$18,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Flores, Bill&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;17th&lt;/td&gt;
&lt;td&gt;$40,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Fortenberry, Jeff&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NE&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$3,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Foxx, Virginia&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NC&lt;/td&gt;
&lt;td&gt;5th&lt;/td&gt;
&lt;td&gt;$13,250&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Franks, Trent&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AZ&lt;/td&gt;
&lt;td&gt;8th&lt;/td&gt;
&lt;td&gt;$16,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Frelinghuysen, Rodney&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NJ&lt;/td&gt;
&lt;td&gt;11th&lt;/td&gt;
&lt;td&gt;$55,456&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Gaetz, Matt&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;FL&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$7,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Gallagher, Mike&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;WI&lt;/td&gt;
&lt;td&gt;8th&lt;/td&gt;
&lt;td&gt;$16,019&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Garrett, Tom*&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;VA&lt;/td&gt;
&lt;td&gt;5th&lt;/td&gt;
&lt;td&gt;$3,250&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Gibbs, Robert&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OH&lt;/td&gt;
&lt;td&gt;7th&lt;/td&gt;
&lt;td&gt;$8,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Gohmert, Louie&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$8,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Goodlatte, Bob&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;VA&lt;/td&gt;
&lt;td&gt;6th&lt;/td&gt;
&lt;td&gt;$73,950&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Gosar, Paul&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AZ&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$2,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Gowdy, Harold&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;SC&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$15,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Granger, Kay&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;12th&lt;/td&gt;
&lt;td&gt;$15,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Graves, John&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;GA&lt;/td&gt;
&lt;td&gt;14th&lt;/td&gt;
&lt;td&gt;$34,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Graves, Sam&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MO&lt;/td&gt;
&lt;td&gt;6th&lt;/td&gt;
&lt;td&gt;$31,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Griffith, Tim&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AR&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$16,915&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Griffith, Morgan&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;VA&lt;/td&gt;
&lt;td&gt;9th&lt;/td&gt;
&lt;td&gt;$36,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Grothman, Glenn&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;WI&lt;/td&gt;
&lt;td&gt;6th&lt;/td&gt;
&lt;td&gt;$10,600&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Guthrie, Steven&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;KY&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$81,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Harper, Gregg&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MS&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$33,800&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Harriis, Andy&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MD&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$3,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Hartzler, Vicki&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MO&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$10,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Hensarling, Jeb&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;5th&lt;/td&gt;
&lt;td&gt;$10,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Hice, Jody&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;GA&lt;/td&gt;
&lt;td&gt;10th&lt;/td&gt;
&lt;td&gt;$6,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Higgins, Clay&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;LA&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$300&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Holding, George&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NC&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$31,100&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Hollingsworth, Trey&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IN&lt;/td&gt;
&lt;td&gt;9th&lt;/td&gt;
&lt;td&gt;$10,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Hudson, Richard&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NC&lt;/td&gt;
&lt;td&gt;8th&lt;/td&gt;
&lt;td&gt;$45,400&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Huizenga, Bill&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MI&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$7,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Hultgreen, Randy&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IL&lt;/td&gt;
&lt;td&gt;14th&lt;/td&gt;
&lt;td&gt;$10,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Hunter, Duncan&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;CA&lt;/td&gt;
&lt;td&gt;50th&lt;/td&gt;
&lt;td&gt;$19,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Hurd, William&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;23rd&lt;/td&gt;
&lt;td&gt;$63,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Issa, Darrell&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;CA&lt;/td&gt;
&lt;td&gt;49th&lt;/td&gt;
&lt;td&gt;$66,275&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Jenkins, Lynn&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;KS&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$34,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Jenkins, Evan&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;WV&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$10,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Johnson, Bill&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OH&lt;/td&gt;
&lt;td&gt;6th&lt;/td&gt;
&lt;td&gt;$56,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Johnson, Sam&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$16,700&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Jordan, James&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OH&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$24,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Joyce, David&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OH&lt;/td&gt;
&lt;td&gt;14th&lt;/td&gt;
&lt;td&gt;$16,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Katko, John&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NY&lt;/td&gt;
&lt;td&gt;24th&lt;/td&gt;
&lt;td&gt;$32,250&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Kelly, Trent&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MS&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$3,300&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Kelly, Mike&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;PA&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$34,700&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;King, Steve&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IA&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$20,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;King, Peter&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NY&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$9,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Kinzinger, Adam&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IL&lt;/td&gt;
&lt;td&gt;16th&lt;/td&gt;
&lt;td&gt;$75,250&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Knight, Steve&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;CA&lt;/td&gt;
&lt;td&gt;25th&lt;/td&gt;
&lt;td&gt;$32,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Kustoff, David&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TN&lt;/td&gt;
&lt;td&gt;8th&lt;/td&gt;
&lt;td&gt;$16,300&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Labrador, Raul&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;ID&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$10,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;LaHood, Darin&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IL&lt;/td&gt;
&lt;td&gt;18th&lt;/td&gt;
&lt;td&gt;$15,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;LaMalfa, Doug&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;CA&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$5,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Lamborn, Doug&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;CO&lt;/td&gt;
&lt;td&gt;5th&lt;/td&gt;
&lt;td&gt;$28,400&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Lance, Leonard&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NJ&lt;/td&gt;
&lt;td&gt;7th&lt;/td&gt;
&lt;td&gt;$43,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Latta, Bob&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OH&lt;/td&gt;
&lt;td&gt;5th&lt;/td&gt;
&lt;td&gt;$91,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Lewis, Jason&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MN&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$10,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;LoBiondo, Frank&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NJ&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$14,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Long, Billy&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MO&lt;/td&gt;
&lt;td&gt;7th&lt;/td&gt;
&lt;td&gt;$57,250&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Loudermilk, Barry&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;GA&lt;/td&gt;
&lt;td&gt;11th&lt;/td&gt;
&lt;td&gt;$8,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Love, Mia&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;UT&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$16,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Lucas, Frank&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$14,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Luetkemeyer, Blaine&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MO&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$21,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MacArthur, Tom&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NJ&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$19,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Marchant, Kenny&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;24th&lt;/td&gt;
&lt;td&gt;$12,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Marshall, Roger&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;KS&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$20,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Massie, Thomas&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;KY&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$2,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Mast, Brian&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;FL&lt;/td&gt;
&lt;td&gt;18th&lt;/td&gt;
&lt;td&gt;$10,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;McCarthy, Kevin&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;CA&lt;/td&gt;
&lt;td&gt;23rd&lt;/td&gt;
&lt;td&gt;$99,100&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;McCaul, Michael&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;10th&lt;/td&gt;
&lt;td&gt;$37,200&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;McHenry, Patrick&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NC&lt;/td&gt;
&lt;td&gt;10th&lt;/td&gt;
&lt;td&gt;$51,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;McKinley, David&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;WV&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$24,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;McSally, Martha&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AZ&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$40,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Meadows, Mark&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NC&lt;/td&gt;
&lt;td&gt;11th&lt;/td&gt;
&lt;td&gt;$4,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Meehan, Patrick&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;PA&lt;/td&gt;
&lt;td&gt;7th&lt;/td&gt;
&lt;td&gt;$64,200&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Messer, Luke&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IN&lt;/td&gt;
&lt;td&gt;6th&lt;/td&gt;
&lt;td&gt;$18,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Mitchell, Paul**&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MI&lt;/td&gt;
&lt;td&gt;10th&lt;/td&gt;
&lt;td&gt;$10,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;McMorris-Rogers, Cathy**&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;WA&lt;/td&gt;
&lt;td&gt;5th&lt;/td&gt;
&lt;td&gt;$75,900&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Moolenaar, John&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MI&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$12,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Mooney, Alexander&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;WV&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$6,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Mullin, Markwayne&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$47,250&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Murphy, Timothy&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;PA&lt;/td&gt;
&lt;td&gt;18th&lt;/td&gt;
&lt;td&gt;$26,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Newhouse, Daniel&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;WA&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$10,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Noem, Kristi&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;SD&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$38,200&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Nunes, Devin&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;CA&lt;/td&gt;
&lt;td&gt;22nd&lt;/td&gt;
&lt;td&gt;$37,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Olson, Pete&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;22nd&lt;/td&gt;
&lt;td&gt;$57,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Palazzo, Steven&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MS&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$11,100&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Palmer, Gary&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AL&lt;/td&gt;
&lt;td&gt;6th&lt;/td&gt;
&lt;td&gt;$2,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Paulsen, Erik&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MN&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$50,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Pearce, Steve&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NM&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$20,400&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Perry, Scott&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;PA&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$17,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Poe, Ted&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$23,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Poliquin, Bruce&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;ME&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$47,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Posey, Bill&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;FL&lt;/td&gt;
&lt;td&gt;8th&lt;/td&gt;
&lt;td&gt;$3,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Ratcliffe, John&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$24,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Reed, Thomas&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NY&lt;/td&gt;
&lt;td&gt;23rd&lt;/td&gt;
&lt;td&gt;$31,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Renacci, Jim&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OH&lt;/td&gt;
&lt;td&gt;16th&lt;/td&gt;
&lt;td&gt;$48,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Rice, Hugh&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;SC&lt;/td&gt;
&lt;td&gt;7th&lt;/td&gt;
&lt;td&gt;$18,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Roby, Martha&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AL&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$33,200&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Roe, Phil&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TN&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Rogers, Mike&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AL&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$25,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Rogers, Hal&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;KY&lt;/td&gt;
&lt;td&gt;5th&lt;/td&gt;
&lt;td&gt;$12,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Rohrabacher, Dana&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;CA&lt;/td&gt;
&lt;td&gt;48th&lt;/td&gt;
&lt;td&gt;$1,350&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Rokita, Todd&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IN&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$20,200&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Rooney, Laurence&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;FL&lt;/td&gt;
&lt;td&gt;19th&lt;/td&gt;
&lt;td&gt;$16,625&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Rooney, Tom&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;FL&lt;/td&gt;
&lt;td&gt;17th&lt;/td&gt;
&lt;td&gt;$19,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Roskam, Peter&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IL&lt;/td&gt;
&lt;td&gt;6th&lt;/td&gt;
&lt;td&gt;$33,600&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Ross, Dennis&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;FL&lt;/td&gt;
&lt;td&gt;15th&lt;/td&gt;
&lt;td&gt;$17,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Rothfus, Keith&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;PA&lt;/td&gt;
&lt;td&gt;12th&lt;/td&gt;
&lt;td&gt;$30,900&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Rouzer, David&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NC&lt;/td&gt;
&lt;td&gt;7th&lt;/td&gt;
&lt;td&gt;$15,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Royce, Edward&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;CA&lt;/td&gt;
&lt;td&gt;39th&lt;/td&gt;
&lt;td&gt;$14,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Russell, Steven&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;5th&lt;/td&gt;
&lt;td&gt;$16,450&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Rutherford, John&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;FL&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$6,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Scalise, Steve&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;LA&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$121,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Schweikert, David&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AZ&lt;/td&gt;
&lt;td&gt;6th&lt;/td&gt;
&lt;td&gt;$4,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Scott, James&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;GA&lt;/td&gt;
&lt;td&gt;8th&lt;/td&gt;
&lt;td&gt;$6,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Sensenbrenner, Jim&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;WI&lt;/td&gt;
&lt;td&gt;5th&lt;/td&gt;
&lt;td&gt;$30,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Sessions, Pete&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;32nd&lt;/td&gt;
&lt;td&gt;$40,400&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Shimkus, John&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IL&lt;/td&gt;
&lt;td&gt;15th&lt;/td&gt;
&lt;td&gt;$104,425&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Shuster, Bill&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;PA&lt;/td&gt;
&lt;td&gt;9th&lt;/td&gt;
&lt;td&gt;$35,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Smith, Jason&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MO&lt;/td&gt;
&lt;td&gt;8th&lt;/td&gt;
&lt;td&gt;$47,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Smith, Adrian&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NE&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$28,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Smith, Christopher&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NJ&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$6,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Smith, Lamar&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;21st&lt;/td&gt;
&lt;td&gt;$56,200&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Smucker, Lloyd&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;PA&lt;/td&gt;
&lt;td&gt;16th&lt;/td&gt;
&lt;td&gt;$8,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Stewart, Chris&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;UT&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$12,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Stivers, Steve&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OH&lt;/td&gt;
&lt;td&gt;15th&lt;/td&gt;
&lt;td&gt;$27,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Taylor, Scott**&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;VA&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$14,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Tenney, Claudia&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NY&lt;/td&gt;
&lt;td&gt;22nd&lt;/td&gt;
&lt;td&gt;$8,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Thompson, Glenn&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;PA&lt;/td&gt;
&lt;td&gt;5th&lt;/td&gt;
&lt;td&gt;$16,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Thornberry, Mac&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;13th&lt;/td&gt;
&lt;td&gt;$32,025&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Tiberi, Patrick&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OH&lt;/td&gt;
&lt;td&gt;12th&lt;/td&gt;
&lt;td&gt;$53,250&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Tipton, Scott&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;CO&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$23,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Trott, Dave&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MI&lt;/td&gt;
&lt;td&gt;11th&lt;/td&gt;
&lt;td&gt;$12,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Turner, Mike&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OH&lt;/td&gt;
&lt;td&gt;10th&lt;/td&gt;
&lt;td&gt;$6,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Upton, Fred&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MI&lt;/td&gt;
&lt;td&gt;6th&lt;/td&gt;
&lt;td&gt;$108,250&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Valadao, David&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;CA&lt;/td&gt;
&lt;td&gt;21st&lt;/td&gt;
&lt;td&gt;$37,400&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Wagner, Ann&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MO&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$45,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Walberg, Timothy&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;MI&lt;/td&gt;
&lt;td&gt;7th&lt;/td&gt;
&lt;td&gt;$38,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Walden, Gregory&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OR&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$155,100&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Walker, Bradley&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;NC&lt;/td&gt;
&lt;td&gt;6th&lt;/td&gt;
&lt;td&gt;$16,750&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Walorski, Jackie&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IN&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$21,250&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Walters, Mimi&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;CA&lt;/td&gt;
&lt;td&gt;45th&lt;/td&gt;
&lt;td&gt;$47,450&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Weber, Randy&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;14th&lt;/td&gt;
&lt;td&gt;$4,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Webster, Daniel&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;FL&lt;/td&gt;
&lt;td&gt;11th&lt;/td&gt;
&lt;td&gt;$2,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Wenstrup, Brad&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;OH&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$9,400&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Westerman, Bruce&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AR&lt;/td&gt;
&lt;td&gt;4th&lt;/td&gt;
&lt;td&gt;$11,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Williams, Roger&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;TX&lt;/td&gt;
&lt;td&gt;25th&lt;/td&gt;
&lt;td&gt;$5,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Wilson, Joe&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;SC&lt;/td&gt;
&lt;td&gt;2nd&lt;/td&gt;
&lt;td&gt;$11,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Wittman, Rob&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;VA&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$11,050&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Womack, Steve&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AR&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$15,500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Woodall, Rob&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;GA&lt;/td&gt;
&lt;td&gt;7th&lt;/td&gt;
&lt;td&gt;$9,250&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Yoho, Ted&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;FL:&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$4,000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Young, Don&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;AK&lt;/td&gt;
&lt;td&gt;1st&lt;/td&gt;
&lt;td&gt;$28,650&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Young, David&lt;/td&gt;
&lt;td&gt;Republican&lt;/td&gt;
&lt;td&gt;IA&lt;/td&gt;
&lt;td&gt;3rd&lt;/td&gt;
&lt;td&gt;$41,750&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p id=&quot;5qed0I&quot;&gt;*Data for this representative obtained from the Virginia Public Access Project.&lt;br/&gt;**Data for this representative obtained from Open Secrets.&lt;/p&gt;
&lt;p id=&quot;32912G&quot;&gt;&lt;em&gt;&lt;strong&gt;Correction:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;A previous version of this story incorrectly identified Scott Garrett (R&lt;/em&gt;&lt;em&gt;-&lt;/em&gt;&lt;em&gt;NJ) as a Yes vote. Unfortunately for Mr. Garrett, he was voted out of Congress in 2016. The correct Garrett is Tom Garrett of Virginia. We apologize for the error.&lt;/em&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 26 Nov 2017 05:14:35 +0000</pubDate>
<dc:creator>aaronbrethorst</dc:creator>
<og:description>Republicans in Congress just voted to reverse a landmark FCC privacy rule that opens the door for ISPs to sell customer data. Lawmakers provided no credible reason for this being in the interest of...</og:description>
<og:image>https://cdn.vox-cdn.com/thumbor/d2WWxa-8IHvckbndP1VcB1JyZr0=/0x156:3000x1844/1600x900/cdn.vox-cdn.com/uploads/chorus_image/image/53959515/657004522.1490790034.jpg</og:image>
<og:title>The 265 members of Congress who sold you out to ISPs, and how much it cost to buy them</og:title>
<og:type>article</og:type>
<og:url>https://www.theverge.com/2017/3/29/15100620/congress-fcc-isp-web-browsing-privacy-fire-sale</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theverge.com/2017/3/29/15100620/congress-fcc-isp-web-browsing-privacy-fire-sale</dc:identifier>
</item>
<item>
<title>Simplified and community-driven man pages</title>
<link>http://tldr.sh</link>
<guid isPermaLink="true" >http://tldr.sh</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;/&gt;&lt;title&gt;TLDR pages&lt;/title&gt;&lt;meta name=&quot;author&quot; content=&quot;TLDR pages team&quot;/&gt;&lt;meta name=&quot;description&quot; content=&quot;Simplified and community-driven man pages&quot;/&gt;&lt;meta name=&quot;keywords&quot; content=&quot;man, unix, linux, mac, osx, macos, commands, command-line, shell, bash, zsh&quot;/&gt;&lt;meta name=&quot;robots&quot; content=&quot;noodp,noydir&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css&quot; type=&quot;text/css&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;assets/css/index.css&quot; type=&quot;text/css&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://fonts.googleapis.com/css?family=Montserrat|Inconsolata:400,700|Source+Code+Pro&quot; type=&quot;text/css&quot;/&gt;&lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;assets/img/favicon.ico&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;27.280042918455&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;22.823188405797&quot;&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Simplified and community-driven man pages&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;widgets&quot;&gt; &lt;a class=&quot;twitter-follow-button&quot; href=&quot;https://twitter.com/tldr_pages&quot; data-show-screen-name=&quot;false&quot; data-size=&quot;large&quot;&gt;Follow @tldr_pages&lt;/a&gt; &lt;a href=&quot;https://gitter.im/tldr-pages/tldr&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/gitterHQ/gitter.svg&quot; alt=&quot;Gitter&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The TLDR pages are a community effort to simplify the beloved &lt;a href=&quot;https://en.wikipedia.org/wiki/Man_page&quot;&gt;man pages&lt;/a&gt; with practical examples.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tldr.sh/assets/img/screenshot.png&quot; alt=&quot;TLDR screenshot&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Try the &lt;a href=&quot;https://tldr.ostera.io&quot; target=&quot;blank&quot;&gt;live demo&lt;/a&gt; below, have a look at the &lt;a href=&quot;http://tldr.sh/assets/tldr-book.pdf&quot;&gt;PDF version&lt;/a&gt;, or follow the &lt;a href=&quot;http://tldr.sh/#installation&quot;&gt;installation instructions&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;&lt;a href=&quot;http://tldr.sh/#installation&quot;&gt;§&lt;/a&gt; Installation&lt;/h2&gt;
&lt;p&gt;As of now, our most mature client is the node.js one, which you can easily install from NPM:&lt;/p&gt;
&lt;pre&gt;
npm install -g tldr
&lt;/pre&gt;
&lt;p&gt;You can also try any of the many other TLDR clients that have sprouted from the community:&lt;/p&gt;
&lt;p&gt;There are more clients listed in the &lt;a href=&quot;https://github.com/tldr-pages/tldr/wiki/TLDR-clients&quot;&gt;TLDR clients wiki page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;contributing&quot;&gt;&lt;a href=&quot;http://tldr.sh/#contributing&quot;&gt;§&lt;/a&gt; Contributing&lt;/h2&gt;
&lt;p&gt;This repository is an ever-growing collection of examples for the most common UNIX, Linux, macOS, SunOS and Windows commands.&lt;/p&gt;
&lt;p&gt;You're encouraged to create or edit pages in the &lt;code&gt;pages/&lt;/code&gt; folder at the &lt;a href=&quot;https://github.com/tldr-pages/tldr&quot;&gt;project's repository&lt;/a&gt; and submit a pull request.&lt;/p&gt;
&lt;p&gt;Just keep in mind the &lt;a href=&quot;https://github.com/tldr-pages/tldr/blob/master/CONTRIBUTING.md&quot;&gt;Contributing guidelines&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;license&quot;&gt;&lt;a href=&quot;http://tldr.sh/#license&quot;&gt;§&lt;/a&gt; License&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tldr-pages/tldr/blob/master/LICENSE.md&quot;&gt;MIT License&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;/body&gt;</description>
<pubDate>Sun, 26 Nov 2017 04:06:28 +0000</pubDate>
<dc:creator>akras14</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://tldr.sh/</dc:identifier>
</item>
<item>
<title>Apple’s Secure Enclave Processor (SEP) Firmware Decrypted</title>
<link>https://hackaday.com/2017/08/18/apples-secure-enclave-processor-sep-firmware-decyrpted/</link>
<guid isPermaLink="true" >https://hackaday.com/2017/08/18/apples-secure-enclave-processor-sep-firmware-decyrpted/</guid>
<description>&lt;p&gt;The &lt;a href=&quot;http://www.iclarified.com/62025/hacker-decrypts-apples-secure-enclave-processor-sep-firmware&quot; target=&quot;_blank&quot;&gt;decryption key for Apple’s Secure Enclave Processor (SEP) firmware Posted Online&lt;/a&gt; by self-described “ARM64 pornstar” [xerub]. SEP is the security co-processor introduced with the iPhone 5s which is when touch ID was introduced. It’s a black box that we’re not supposed to know anything about but [xerub] has now pulled back the curtain on that.&lt;/p&gt;
&lt;p&gt;The secure enclave handles the processing of fingerprint data from the touch ID sensor and determines if it is a match or not while it also enables access for purchases for the user. The SEP is a gatekeeper which prevents the main processor from accessing sensitive data. The processor sends data which can only be read by the SEP which is authenticated by a session key generated from the devices shared key. It also runs on its own OS [SEPOS] which has a kernel, services drivers and apps. The SEP performs secure services for the rest of the SOC and much more which you can learn about from &lt;a href=&quot;https://www.youtube.com/watch?v=7UNeUT_sRos&quot; target=&quot;_blank&quot;&gt;the Demystifying the Secure Enclave Processor talk&lt;/a&gt; at Blackhat&lt;/p&gt;
&lt;p&gt;[xerub] &lt;a href=&quot;https://www.theiphonewiki.com/wiki/Greensburg_14G60_%28iPhone6,1%29&quot; target=&quot;_blank&quot;&gt;published the decryption keys here&lt;/a&gt;. To decrypt the firmware you can use &lt;a href=&quot;https://github.com/xerub/img4lib&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;img4lib&lt;/a&gt; and xerub’s &lt;a href=&quot;https://gist.github.com/xerub/0161aacd7258d31c6a27584f90fa2e8c&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;SEP firmware split tool&lt;/a&gt; to process. These tools make it a piece of cake for security researchers to comb through the firmware looking for vulnerabilities.&lt;/p&gt;
</description>
<pubDate>Sun, 26 Nov 2017 01:14:19 +0000</pubDate>
<dc:creator>wonderous</dc:creator>
<og:type>article</og:type>
<og:title>Apple’s Secure Enclave Processor (SEP) Firmware Decrypted</og:title>
<og:url>https://hackaday.com/2017/08/18/apples-secure-enclave-processor-sep-firmware-decyrpted/</og:url>
<og:description>The decryption key for Apple’s Secure Enclave Processor (SEP) firmware Posted Online by self-described “ARM64 pornstar” [xerub]. SEP is the security co-processor introduced with t…</og:description>
<og:image>https://hackadaycom.files.wordpress.com/2017/08/apple-ios-sep-decrpyted.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://hackaday.com/2017/08/18/apples-secure-enclave-processor-sep-firmware-decyrpted/</dc:identifier>
</item>
<item>
<title>Carp, a compiled Lisp with type inference and a borrow checker</title>
<link>http://blog.veitheller.de/Carp.html</link>
<guid isPermaLink="true" >http://blog.veitheller.de/Carp.html</guid>
<description>&lt;p&gt;As some of you might know, I recently became enamoured with a new programming language, &lt;a href=&quot;https://github.com/carp-lang/carp&quot;&gt;Carp&lt;/a&gt;. While you might have caught me fawning over it already, in this post I want to give you a little introduction into the language and its concepts, and maybe you’ll understand why I decided to work on it. A little word of caution before we begin, though: the language is in a pre-alpha stage and is thus subject to change. The syntax and APIs I’m about to show you might change in the future, making my post obsolete. It won’t be the last time you’ll hear me talk about Carp anyway, so I suggest you be on the lookout for follow-ups.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: This post is &lt;em&gt;very&lt;/em&gt; long. You’ll have a good initial grasp on the language once you’ve read it, but feel free to skip the parts that you don’t care about. If you only care about how it works with memory, for instance, feel free to skip the language guide. If you plan on learning Carp, however, this is probably the most exhaustive resource in existence at the time of writing.&lt;/p&gt;
&lt;h2 id=&quot;a-palatable-fish-from-a-reputable-source&quot;&gt;A palatable fish from a reputable source&lt;/h2&gt;
&lt;p&gt;Let me get those dry, hard facts out of the way first. Carp is a compiled Lisp that utilizes type inference and a mechanism akin to Rust’s&lt;sup&gt;&lt;a href=&quot;http://blog.veitheller.de/Carp.html#1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; borrow checker to produce a language that is both functional and fast. Due to its lack of a garbage collector it can be used for hard realtime systems while still not requiring the programmer to do manual memory allocations. Instead, the user has to think about ownership and references versus values. Those are familiar concepts to systems programmers, even more so if they happen to have prior experience with Rust. It provides machinery we know and love from other modern programming languages, such as a module system and metaprogramming capabilities—in its infamous Lisp ways—, and, most delicious of all, it has near-seamless C interoperability.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;(defn main []
  (IO.println &quot;Hello, Carp!&quot;))&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;figure-label&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;Fig. 1: The inaugural program, as seen in any piece of literature ever produced in programming.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Carp compiles to C. This is an unusual design choice and seems almost anachronistic in a world where building a compiler more often than not means working with LLVM. It also likely doesn’t matter much, because chances are your machine has a C compiler&lt;sup&gt;&lt;a href=&quot;http://blog.veitheller.de/Carp.html#2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. What’s interesting about this, though, is that the C code produced is actually decent to read.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;int main() {
    string _4 = &quot;Hello, Carp!&quot;;
    string *_4_ref = &amp;amp;_4;
    IO_println(_4_ref);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;figure-label&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Fig. 2: The compiler’s output for the program above. &lt;code&gt;IO_println&lt;/code&gt; is a predefined function.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In the snippet above you can already see the borrow checker in use, if you’re looking at the treatment of the string; it is stack allocated, then dereferenced and passed to the function &lt;code&gt;IO_println&lt;/code&gt;. Ownership is the simple idea on which the memory model of Carp is based: which function owns which references, and who’s in charge of cleaning them up. The Rust programmers among you will know what I mean.&lt;/p&gt;
&lt;p&gt;That’s not really what it’s about, though, at least not in our day-to-day business. So let’s talk a bit about the language itself.&lt;/p&gt;
&lt;h2 id=&quot;plating-the-meal&quot;&gt;Plating the meal&lt;/h2&gt;
&lt;p&gt;In this part I want to give you a little overview of what Carp looks like and how one works with it. Alas, there is a lot of ground to cover and I probably won’t be able to give you anything more than a glimpse of Carp’s potential. As I mentioned before, though, I plan on writing more about it in the future. Until Carp is a bit more stable, and I have the time to write a good, exhaustive tutorial, this will have to do.&lt;/p&gt;
&lt;h3 id=&quot;the-repl&quot;&gt;The REPL&lt;/h3&gt;
&lt;p&gt;The first thing you’ll want to do after installing will be to play around. When you run &lt;code&gt;carp&lt;/code&gt; with no arguments, you’ll be greeted by a slick REPL&lt;sup&gt;&lt;a href=&quot;http://blog.veitheller.de/Carp.html#3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. “Play with me”, it seems to say. If you do decide to play with it, however, you’re in for a surprise.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Welcome to Carp 0.2.0
This is free software with ABSOLUTELY NO WARRANTY.
Evaluate (help) for more information.
鲮 (def x 1)
鲮 (+ x 10)
int _3 = Int__PLUS_(x, 1);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fig. 3: Wait, what?!&lt;/p&gt;
&lt;p&gt;An enigmatic little beauty, it won’t tell you the results of your typings right away. Instead it will barf generated code back at you, like a leaky compiler sewer. This REPL isn’t meant to be played with like that, you see. You’ll have to adhere to the program/build/run cycle so typical of compiled languages, but with a twist. You can regain some of the rapid development experience the developer has when programming in an interpreted language by making the program/build/run cycle itself interactive. That’s exactly what we’re seeing here: We’re in the compiler.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Welcome to Carp 0.2.0
This is free software with ABSOLUTELY NO WARRANTY.
Evaluate (help) for more information.
鲮 (def x 1)
鲮 (defn main [] (IO.println &amp;amp;(Int.str (+ x 10))))
鲮 (build)
Compiled to './out/a.out'
鲮 (run)
11&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fig. 4: Compiling, interactive.&lt;/p&gt;
&lt;p&gt;The above snippet showcases the whole cycle. First, we define a variable called &lt;code&gt;x&lt;/code&gt;. Then we define the &lt;code&gt;main&lt;/code&gt; function, which will serve as an entry point to our program. In it, we print the result of the computation &lt;code&gt;x + 10&lt;/code&gt;. As you can see, there is a certain amount of ritual involved; bear with me, I will explain what those glyphs mean later. For now, you’re a stranger in a foreign land, and I’m your handwavy guide.&lt;/p&gt;
&lt;p&gt;Then we &lt;code&gt;build&lt;/code&gt; our program, to which our compiler helpfully remarks that the program was, in fact, compiled.&lt;sup&gt;&lt;a href=&quot;http://blog.veitheller.de/Carp.html#4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; Lastly, we &lt;code&gt;run&lt;/code&gt; it. Lo and behold, 1 and 10 do equal 11! Tamensi movetur!&lt;/p&gt;
&lt;p&gt;This marks the end of my introduction into Carp’s REPL. I suggest you play around with it some more on your own (if you want). It is really quite different, but also quite fun.&lt;/p&gt;
&lt;h3 id=&quot;the-language&quot;&gt;The language&lt;/h3&gt;
&lt;p&gt;Carp is a Lisp, and, as such, it doesn’t have a lot of syntax. So, let’s forget about the parens, and dive right into keywords. Just know that semicolons start line comments. There is also a &lt;a href=&quot;https://github.com/carp-lang/Carp/blob/master/docs/LanguageGuide.md&quot;&gt;brief language guide&lt;/a&gt; in the Carp repository. We will cover roughly the same bits here, so feel free to skip this part and read the official document instead.&lt;/p&gt;
&lt;h3 id=&quot;defining-things&quot;&gt;Defining things&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;; defines a variable called x and binds it to 1
(def x 1)

; defines a function y that takes one argument a
(defn y [a]
  (+ a 1)) ; and which adds 1 to a&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fig. 5: Defining things.&lt;/p&gt;
&lt;p&gt;Defining variables and functions looks similar to Clojure, meaning that you use &lt;code&gt;def&lt;/code&gt; to define variables and &lt;code&gt;defn&lt;/code&gt; to define functions. Global variables can only have stack-allocated types right now, but this is listed as a bug and will probably change fairly soon.&lt;/p&gt;
&lt;h4 id=&quot;types-literals&quot;&gt;Types &amp;amp; Literals&lt;/h4&gt;
&lt;p&gt;There are a few different kinds of literals.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;100     ;; Int
100l    ;; Long
3.14f   ;; Float
10.0    ;; Double
true    ;; Bool
&quot;hello&quot; ;; String
\e      ;; Char
[1 2 3] ;; (Array Int)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fig. 6: All data literals.&lt;/p&gt;
&lt;p&gt;As you can see, there aren’t that many native data types. That’s alright, though, because we can define our own data types. They are similar to structs, and have a few autogenerated functions associated with them, meaning they can only have data. That’s how I personally like my data types to be.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;(deftype Point2D [x Int, y Int])

(def p (Point2D.init 1 0)) ; initialize a point

; we can now access and update the points members
(Point2D.x p) ; =&amp;gt; 1
(Point2D.set-x p 2) ; =&amp;gt; (Point2D 2 0)
(Point2D.update-x p dec) ; =&amp;gt; (Point2D 0 0)
(Point2D.str p) ; =&amp;gt; &quot;(Point2D 1 0)&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fig. 7: Defining and working with a data type.&lt;/p&gt;
&lt;p&gt;Updating things can get quite tedious using that syntax. Luckily, we have threading macros that allow you to apply a whole lot of updates at once without hassle.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;; using our point from Figure 7
(=&amp;gt; p
    (Point2D.update-x dec)
    (Point2D.update-y dec)) ; =&amp;gt; (Point2D 0 -1)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fig. 8: The threading macro in action.&lt;/p&gt;
&lt;p&gt;This mechanism is in best Lisp tradition: simple and powerful, versatile and elegant. Though, let me be frank with you here: when you are working with Carp for some time, you’ll likely discover bugs. A source of some of the more interesting bugs historically has been the combination of the module system with defining data types. For instance, I’m currently working on fixing some name mangling problems with types in modules. As I said, Carp is still in flux, and sometimes we have to get our hands dirty.&lt;/p&gt;
&lt;h4 id=&quot;special-forms&quot;&gt;Special forms&lt;/h4&gt;
&lt;p&gt;With this off my chest, I’m ready to guide you deeper into the heart of the wild. We have so much more ground to cover; for now let’s talk some more about special forms!&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;(let [x 1] ; let is used local bindings
  (+ x 1))

(do ; group multiple functions together
  (IO.println &quot;hi&quot;)
  1)

(if (= 1 2) ; if is used for branching
  (IO.println &quot;Math is broken&quot;)
  (IO.println &quot;Math is fine&quot;))

(while (&amp;lt; 1 x) ; while is used for looping
  (+ x 1))

(for [i 0 10] ; ... and so is for
  (IO.println &quot;print me tenfold!&quot;))

(def x 1)
; set! is used for resetting, ignore the &amp;amp; for now
(set! &amp;amp;x 2)

(address x) ; get a C-style pointer from a value&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fig. 9: A few special forms.&lt;/p&gt;
&lt;p&gt;That’s a lot! But all of these forms are quite essential for programming, and so I have to get them out of the way. If you look at the official documentation, you’ll see that I have omitted &lt;code&gt;ref&lt;/code&gt; and added &lt;code&gt;for&lt;/code&gt;. The reasons for this are simple: &lt;code&gt;for&lt;/code&gt; is a macro, but super useful, and I’ll talk about &lt;code&gt;ref&lt;/code&gt; later, when we talk about the memory model some more. &lt;a href=&quot;https://www.youtube.com/watch?v=bWqLiy9TLdg&quot;&gt;Hold your horses!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We’re about halfway through, and I think it’s time for a breather. We have yet to talk about modules and macros, and those advanced topics will probably require your utmost attention. If you have time and the view from your room is nice, I suggest you make yourself a nice, calming beverage, hot or cold, and look out the window for some time, asking yourself why you haven’t discovered this magnificent language sooner. That’s what I did when I discovered it, anyway.&lt;/p&gt;
&lt;h4 id=&quot;modules&quot;&gt;Modules&lt;/h4&gt;
&lt;p&gt;Welcome back, traveler! I hope you’ve left weary and woe behind, ready to take on a new challenge. I am certainly excited to tell you about modules!&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;(defmodule Math
  (defn add [x y]
    (+ x y))

  (defn sub [x y]
    (- x y))

  ; TODO: write more stuff
)&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;figure-label&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Fig. 10: A module with everything your math heart desires.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Okay, defining a module is simple enough. You basically just wrap whatever you want to encapsulate into a &lt;code&gt;defmodule&lt;/code&gt; form and give it a name. But how do we actually use it? Well, there are two ways to get to the juicy meat inside the module’s shell. We can either just load the source file and then use everything in a qualified manner, prefixing the function name with the module name and a period, or we can load the file and then &lt;code&gt;use&lt;/code&gt; the module. Using the module means making everything inside directly accessible, but it can also introduce name collisions. If you’ve ever programmed Python, think of it as the difference between &lt;code&gt;import foo&lt;/code&gt; and &lt;code&gt;from foo import *&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;; with the module we defined in figure 10
(Math.add 1 2) ; works out the box

(use Math)
(add 1 2) ; works after use form&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fig. 11: Using a module.&lt;/p&gt;
&lt;p&gt;Now, this is all well and good, but there is another little twist to this. Modules also have some interesing properties for the type checker. Note, for instance, that &lt;code&gt;+&lt;/code&gt; is not generic. It is defined for every numerical type, and the typechecker then chooses the appropriate function according to its signature. I think that merits a bit of illustration.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;(use Double)
(use Int)

(+ 1 1) ; uses Int.+
(+ 1.0 1.0) ; uses Double.+
(+ 1l 1l) ; errors, because no + for longs is known&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fig. 12: Addition, complected.&lt;/p&gt;
&lt;p&gt;Until now I’ve spared you the necessary &lt;code&gt;use&lt;/code&gt; statements to avoid confusion. But, now that you’re learning to walk on your own, you can look at all the previous figures and see that they’re full of lies. Whenever I used &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;inc&lt;/code&gt; or &lt;code&gt;dec&lt;/code&gt; I would have needed to either qualify it or &lt;code&gt;use&lt;/code&gt; the appropriate modules. Sorry about that, but it was for your own good.&lt;/p&gt;
&lt;p&gt;You can also define your own datatypes within modules, but note that the dot-syntax then needs to be nested as well. If, for instance, &lt;code&gt;Point2D&lt;/code&gt; were defined within &lt;code&gt;Math&lt;/code&gt;, we would have to write &lt;code&gt;Math.Point2D.set-x&lt;/code&gt; and so on.&lt;/p&gt;
&lt;p&gt;That’s all the magic there is to modules, which means that we can move on to macros! Are you excited? I’m excited!&lt;/p&gt;
&lt;h4 id=&quot;macros&quot;&gt;Macros&lt;/h4&gt;
&lt;p&gt;If you’ve ever programmed in Lisp, you probably know about macros. I also wrote &lt;a href=&quot;http://blog.veitheller.de/Scheme_Macros_I:_Modules.html&quot;&gt;a&lt;/a&gt; &lt;a href=&quot;http://blog.veitheller.de/Scheme_Macros_II:_Generics.html&quot;&gt;series&lt;/a&gt; &lt;a href=&quot;http://blog.veitheller.de/Scheme_Macros_III:_Defining_let.html&quot;&gt;of&lt;/a&gt; blog posts about writing Lisp macros, but let me try to sum the most important ideas up for those of you who don’t have the time to do all of the research: since Lisp code is essentially only lists, we can easily rewrite it programmatically. Lisp macro systems exploit this fact; the compiler introduces a separate step into its compilation toolchain that evaluates macros and expands their use. It’s essentially a small interpreter that is geared towards rewriting Lisp forms into other forms. This enables us to introduce interesting new syntax without changing the language proper, and in fact that is how &lt;code&gt;for&lt;/code&gt; and the threading macro &lt;code&gt;=&amp;gt;&lt;/code&gt; are defined in Carp.&lt;/p&gt;
&lt;p&gt;This tremendous power is easily abused and indeed macros have for a long time had the reputation of being too powerful and leading to programmers writing their own languages on top of their implemenation Lisp that only they themselves understand. &lt;a href=&quot;https://kar.kent.ac.uk/33611/7/paper.pdf&quot;&gt;I renounce any catalogue of despair&lt;/a&gt;. It is perfectly feasible to write maintainable and understandable macros, and tying the programmers hands to avoid bad code isn’t exactly what I want my language to do. But this is a topic for another day. For now I will show you how to write macros in Carp, and you can make up your own mind as to whether you want your code to make use of them. Yet another caveat before we begin, though: I’m planning on rewriting the macro system to a full-featured, hygienic piece of craftmanship. These things take time, however, and for now I’m going to show you the current state of the art.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;(defmacro incr [x]
  (list '+ x 1))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fig. 13: A simple incrementor macro.&lt;/p&gt;
&lt;p&gt;As you can see in Figure 13, defining macros looks somewhat similar to defining functions. The main difference is the body, which constructs a list instead of applying the &lt;code&gt;+&lt;/code&gt; function. Please note that the &lt;code&gt;list&lt;/code&gt; keyword can only be used within macros, and it is used to make a list from everything following it. The &lt;code&gt;+&lt;/code&gt; function is also quoted, which is a fancy Lisp term for saying that instead of looking up the value of symbol right now, the runtime will just pass it as is, not caring whether it’s actually defined or not.&lt;/p&gt;
&lt;p&gt;So what is the value of doing that here? Doing this enables us to write &lt;code&gt;(incr x)&lt;/code&gt; instead of &lt;code&gt;(+ x 1)&lt;/code&gt; wherever we want. The same would be possible with a function, though, right? Well, kind of. But at runtime, there will be no function. Instead, the macro system will have transformed &lt;code&gt;(incr x)&lt;/code&gt; into &lt;code&gt;(+ x 1)&lt;/code&gt; &lt;em&gt;directly&lt;/em&gt;, within its context. Beautiful, isn’t it?&lt;/p&gt;
&lt;p&gt;Maybe that just knocked you out of your knickers, but I know that back in the day before I knew Lisp macros, it would certainly not have impressed me very much. So, let’s look at a more involved example, and take advantage of all of the exciting features the Carp macro runtime has to offer: infix math!&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;(defdynamic rewrite-infix [form]
  (if (= (count form) 0)
    (list)
    (if (= (count form) 1)
      (car form)
      (list (car (cdr form))
            (car form)
            (rewrite-infix (cdr (cdr form)))))))

(defmacro infix [:rest form]
  (rewrite-infix form))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fig. 14: Infix math.&lt;/p&gt;
&lt;p&gt;Figure 14 contains code that rewrites infix math expressions—that is, math that follows the conventional form of &lt;code&gt;1 + 2 * 2&lt;/code&gt;—to Lisp-compatible prefix math. Most Lisps provide some kind of mechanism to do that, and even one of the more famous books on programming in Scheme&lt;sup&gt;&lt;a href=&quot;http://blog.veitheller.de/Carp.html#5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; includes an implementation of that.&lt;/p&gt;
&lt;p&gt;The above code contains a slew of new concepts; let me walk you through them. First, you will notice the definition &lt;code&gt;defdynamic&lt;/code&gt;, which we haven’t encountered before. Dynamic functions are functions that you can use from within a macro, but not during runtime. They’re the basic building blocks for abstraction during macro evaluation, so to speak. From the outside, they’re very similar to regular functions, but they have a whole host of functions that only work within them. Some of these functions are used in the snippet in Figure 14, like &lt;code&gt;car&lt;/code&gt;, &lt;code&gt;cdr&lt;/code&gt;, &lt;code&gt;cons&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;quote&lt;/code&gt;—though we use the reader macro &lt;code&gt;'&lt;/code&gt; instead—, and, somewhat surprisingly, &lt;code&gt;array&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At this point I expect all of the old Lisp hackers who have found this blog are screaming in terror, no &lt;code&gt;cons&lt;/code&gt;, &lt;code&gt;car&lt;/code&gt;, or &lt;code&gt;cdr&lt;/code&gt;? The audacity! The blasphemy! I too had to squint at this in disbelief. But it makes sense: lists are replaced by random access arrays in Carp. Lists only exist during macro evaluation, where they are linked lists of code. Arrays, however, are random access data structures, like C arrays—Carp does compile to C, after all. This removes a bit of the beautiful abstraction of Lisp—one data structure to rule them all—and it makes runtime metaprogramming nigh impossible, but it does make sense for a language compiled to C. And, as seen in Figure 14, it’s not really that much harder to write a macro like that.&lt;/p&gt;
&lt;p&gt;For all of the people above who don’t know what &lt;code&gt;cons&lt;/code&gt;, &lt;code&gt;car&lt;/code&gt;, or &lt;code&gt;cdr&lt;/code&gt; are and didn’t appreciate my tangent directed at only the enlightened few Lispers scoffing at me in their ivory tower&lt;sup&gt;&lt;a href=&quot;http://blog.veitheller.de/Carp.html#6&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;, these functions are the pinnacle ofworking with lists in Lisp. &lt;code&gt;car&lt;/code&gt; takes a list and returns its first element,&lt;code&gt;cdr&lt;/code&gt; takes the rest—i.e. everything but the first element—, and &lt;code&gt;cons&lt;/code&gt; takes an element and a list and prepends the element onto the list. These functions are incredibly handy for working with linked lists, but again, Carp works with array, and it really doesn’t make sense here.&lt;/p&gt;
&lt;p&gt;In general, the functions listed above are overly generic and not incredibly useful in the context of Carp. Including them certainly poses a trade-off, and in my opinion the maintainers took the right step in allowing these constructs only where they made sense. Feel free to disagree.&lt;/p&gt;
&lt;p&gt;There is at least one more syntactic item we haven’t looked at yet, and that is &lt;code&gt;:rest&lt;/code&gt;. This little beauty is, like its friends, not available in Carp proper. It signifies that this macro is variadic, that is, it can have a varying number of arguments. The symbol that comes after &lt;code&gt;:rest&lt;/code&gt; will bind all of the “overflowing” parameters in a list. Let’s look at a few examples:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;; none of this will compile
(defmacro macro1 [:rest x]
  x)

(macro1 1 2 3) ; x=(1 2 3)

(defmacro macro2 [a b :rest c]
  a b c)

(macro2 1 2 3 4 5) ; a=1, b=2, c=(3 4 5)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fig. 15: Illustrative macros.&lt;/p&gt;
&lt;p&gt;As you can see, you can also have variadic macros that take a certain number of parameters, but then a variable number of extra ones. For the Lispers: it’s equivalent to &lt;code&gt;(a b . c)&lt;/code&gt;. For the Pythonistas: it’s equivalent to &lt;code&gt;(a, b, *c)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This concludes our short—by which I mean approximately 3000 words—whirlwind tour of the language. This is enough to get you started, but Carp has more up its apparently very large sleeve: I’ve omitted type annotations and C interop, both of which I will cover in later posts.&lt;/p&gt;
&lt;p&gt;Next up we’ll talk about references and values!&lt;/p&gt;
&lt;h3 id=&quot;the-memory-model-references-values&quot;&gt;The memory model: references &amp;amp; values&lt;/h3&gt;
&lt;p&gt;Somewhere down the road in your programming career, you’ll have to think about memory, no matter the programming language you chose. Some of us choose languages that are very explicit about who owns what (like Rust), or even let you choose who has to allocate and free it (like C). Others include a garbage collector (Python, Ruby, Go, JavaScript, and the like) to avoid the cognitive complexity manual memory management introduces. But memory will rear its ugly head sooner or later, be it through contention, corruption, races, or any other of the countless horsemen of the software apocalypse it employs.&lt;/p&gt;
&lt;p&gt;Yes, I’m being melodramatic here, but sleepless nights and loss of hair are not unheard of when dealing with these types of problems, so I couldn’t be dramatic enough, not even with a skull in my hand and leggings on, declaiming: “To collect or not to collect…”. I’m not sure whether you like the picture of me in leggings, but I’d rather avoid it, so I’ll try to have you believe in the Carp way.&lt;/p&gt;
&lt;p&gt;Who owns memory in Carp? Simple: whoever created it, unless it is returned to the encompassing scope. That means that at the end of each function or &lt;code&gt;let&lt;/code&gt; form, things defined inside it get destroyed. Within this block, it is free to do with this datum as it pleases, even lending it to another function is alright. Remember the function &lt;code&gt;ref&lt;/code&gt; I talked about earlier? Yeah, that’s what that is. And because this is done fairly often, Carp decided to sprinkle a bit of syntactic sugar on top of that construct, in the form of the abbreviation—or reader macro, if you like—&lt;code&gt;&amp;amp;&lt;/code&gt;. The two constructs &lt;code&gt;(ref &quot;string&quot;)&lt;/code&gt; and &lt;code&gt;&amp;amp;&quot;string&quot;&lt;/code&gt; are functionally equivalent.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;; println takes a reference to a string,
; but str returns a normal string, so we have
; to add &amp;amp;
(IO.println &amp;amp;(Int.str 1))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fig. 16: A simple use case of references.&lt;/p&gt;
&lt;p&gt;This also explains the ampersand we used in Figure 4. I hope it’s all starting to make sense.&lt;/p&gt;
&lt;p&gt;The inverse of referencing is copying. This can either be used through &lt;code&gt;copy&lt;/code&gt; or the abbreviation &lt;code&gt;@&lt;/code&gt;. Be aware that in the current iteration of Carp, &lt;code&gt;copy&lt;/code&gt; without a namespace—or &lt;code&gt;@&lt;/code&gt;—will be interpreted as &lt;code&gt;String.copy&lt;/code&gt;, and the type system will complain if you pass anything else. The current workaround is either &lt;code&gt;use&lt;/code&gt;ing the type you’re copying, or referencing the fully qualified function. This might be fixed in the future, or so I hope.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@1 ; uh oh

(Int.copy 1) ; this is fine

(use Int)
@1 ; this is fine now&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fig. 17: Copying stuff and its oddities.&lt;/p&gt;
&lt;p&gt;That’s all there is to memory in Carp. The &lt;a href=&quot;https://github.com/carp-lang/Carp/blob/master/docs/Memory.md&quot;&gt;official documentation&lt;/a&gt; has a little bit of additional information and illustration, if you need it.&lt;/p&gt;
&lt;h3 id=&quot;the-libraries&quot;&gt;The libraries&lt;/h3&gt;
&lt;p&gt;Libraries are an integral part of any language. No programming language will get adoption without a proper ecosystem, no matter how well it is designed. And this is where things get sad in Carp. There is no dependency managment, no package manager. I plan on porting my package manager for zepto, &lt;a href=&quot;https://github.com/zeps-system/zeps&quot;&gt;zeps&lt;/a&gt;, to Carp sooner or later, but that might take a while. Also, there’s not much of a standard library yet, though the team and I are working on that too, having introduced a few hundred lines of new code to the system in the last few weeks. There is a light at the end of the tunnel, sed ars longa, vita brevis.&lt;/p&gt;
&lt;p&gt;Nonetheless, I want to introduce you to at least a few libraries that exist right now and show you how to use them. There is an emberassing scarcity of documentation, but we plan on changing that as well.&lt;/p&gt;
&lt;p&gt;Here is an exhaustive list of modules with a little bit of preliminary information, in alphabetical order:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Array: includes a few functions for working with arrays. All of them are generic.&lt;/li&gt;
&lt;li&gt;Bench: a simple benchmarking library, for testing the performance of small snippets of code. Modeled after Rust’s benchmarking tooling.&lt;/li&gt;
&lt;li&gt;Bool: includes a few functions for working with boolean values.&lt;/li&gt;
&lt;li&gt;Char: includes a few functions for working with and converting boolean values.&lt;/li&gt;
&lt;li&gt;Double: see above, but for Doubles. Also includes all mathematical functions from &lt;code&gt;math.h&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Float: see above, but for Floats.&lt;/li&gt;
&lt;li&gt;Geometry: includes very few functions for geometrical computations.&lt;/li&gt;
&lt;li&gt;IO: includes a few functions for input and output, like printing, reading lines, and exiting.&lt;/li&gt;
&lt;li&gt;Int: see above numerical modules, but for Ints.&lt;/li&gt;
&lt;li&gt;Long: see above numerical modules, but for Longs.&lt;/li&gt;
&lt;li&gt;Macros: non-namespaced macro utilities, like &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;cond&lt;/code&gt; and the threading macros.&lt;/li&gt;
&lt;li&gt;sdl: includes bindings to the SDL (Simple DirectMedia Layer) library.&lt;/li&gt;
&lt;li&gt;Statistics: includes statistical functions, like &lt;code&gt;mean&lt;/code&gt;, &lt;code&gt;median&lt;/code&gt;, and &lt;code&gt;winsorize&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;String: includes all kinds of utilities for working with and converting strings.&lt;/li&gt;
&lt;li&gt;System: includes a few functions for working with the OS, such as timing, seeding the random number generator, etc.&lt;/li&gt;
&lt;li&gt;Test: includes a testing library.&lt;/li&gt;
&lt;li&gt;Vector: includes an implementation of 2D, 3D, and n-dimensional vectors.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Your best bet for getting detailed information for these modules is currently by looking at the &lt;a href=&quot;https://github.com/carp-lang/Carp/tree/master/core&quot;&gt;source&lt;/a&gt;, the &lt;a href=&quot;https://github.com/carp-lang/Carp/tree/master/examples&quot;&gt;examples directory&lt;/a&gt;, or, for a few modules, the &lt;a href=&quot;https://github.com/carp-lang/Carp/tree/master/test&quot;&gt;test cases&lt;/a&gt;. We hope this will change soon.&lt;/p&gt;
&lt;p&gt;A few of my babies are the testing and benchmarking libraries, and I intend to write about them specifically in future posts.&lt;/p&gt;
&lt;h3 id=&quot;fin&quot;&gt;Fin&lt;/h3&gt;
&lt;p&gt;As promised, this post was fairly long. You were warned. I hope it gave you a taste of what Carp is like. I’ll write a few more practical posts in the future, but I needed to help you understand the syntax to be comfortable with showing you the fun things we can do with Carp. I hope you agree.&lt;/p&gt;

&lt;p&gt;&lt;span id=&quot;1&quot;&gt;1.&lt;/span&gt; I’m going to compare Carp to a whole lot of programming languages; you don’t need to know all—or any—of them to understand what I’m talking about.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;2&quot;&gt;2.&lt;/span&gt; It’s arguably more likely that your machine has a C compiler than the LLVM library.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;3&quot;&gt;3.&lt;/span&gt; Readline support thanks to yours truly.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;4&quot;&gt;4.&lt;/span&gt; There are shortcuts for building and running. These are prefixed with a colon, and are &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;, respectively, and can be combined in any order. &lt;code&gt;:bx&lt;/code&gt; is your friend for a quick development cycle.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;5&quot;&gt;5.&lt;/span&gt; I am talking about “Simply Scheme: Introducing Computer Science” by Harvey and Wright, Chapter 18.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;6&quot;&gt;6.&lt;/span&gt; Where is that ivory tower, anyway? I’ve written thousands of lines of Lisp and built some Lisps on my own, so I’d appreciate an invite, guys n’ gals, lest I doubt its existence.&lt;/p&gt;

</description>
<pubDate>Sat, 25 Nov 2017 23:18:12 +0000</pubDate>
<dc:creator>eriksvedang</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://blog.veitheller.de/Carp.html</dc:identifier>
</item>
<item>
<title>Half-Life and Team Fortress Networking</title>
<link>https://www.gamasutra.com/view/feature/131577/halflife_and_team_fortress_.php?page=1</link>
<guid isPermaLink="true" >https://www.gamasutra.com/view/feature/131577/halflife_and_team_fortress_.php?page=1</guid>
<description>
&lt;em&gt;Editor's note: This paper was originally published in the 2000 &lt;a href=&quot;http://www.gdconf.com/&quot;&gt;Game Developer's Conference&lt;/a&gt; proceedings.&lt;/em&gt;
&lt;p&gt;This article focuses on some of the various back-end services you might wish to provide to your users as part of your game platform. The purpose of the article is to provide a sense for how these services can be designed, how they can be deployed, and hopefully, how you can avoid making incredibly painful mistakes in either their design or deployment.&lt;/p&gt;
&lt;p&gt;More and more, having an on-line component to gaming is essential to the success of a title. In addition, as games become more of a consumer entertainment experience, making things easier on gamers becomes essential. The days of needing to do such things as manually type in IP addresses to connect to remote servers are coming rapidly to a close. Therefore, it is important for you to provide a seamless user experience for your gamers as they go on-line. To do this, you will possibly need to provision a variety of backend services. Doing so will dramatically increase the usability of your games, hopefully leading to increased sales and recognition.&lt;/p&gt;

&lt;p&gt;This discussion will give you not only a sense of the many different backend services you should consider, but will also provide you with information about how some of these systems can be designed. Although much of the discussion is focused on a few specific kinds of backend services, the examples are relevant for any backend services you might need to deploy.&lt;/p&gt;
&lt;p&gt;The main focus for this articlewill be on network messaging that is not directly related to the in-game flow of messages, though some design issues applicable to in-game flows will be covered. At the end, there will be a brief discussion of the PowerPlay industry initiative. PowerPlay is particularly relevant since it addresses Internet infrastructure problems and deployment problems that effect the ability of the Internet to handle both in-game and backend server traffic.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Game Master Server&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For any game having servers spread around the Internet and hosted by end-users, it will be important to have a way for your client software to find these servers. While this example fits the client / server model of first person shooter style games quite well, the general rules are applicable to the back-end services that other kinds of games could use. With this in mind, an interesting back-end service that you will probably want to deploy is a game master server.&lt;/p&gt;
&lt;p&gt;A game master server is used to collect a database of active game servers available on the Internet. Your game client (or external &quot;server browser&quot; applications) can then query this collection when users are searching for on-line games to join. The basic networking requirements for a game master server are:&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;Ability to receive initiation / keepalive and termination of services messages from game servers; and&lt;/li&gt;
&lt;li&gt;· Ability to receive queries from game clients and return appropriate server identification information to those clients&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Although this basic functionality requirements list is brief, there is a further set of additional services you might also choose to provide in deploying your game master server. For instance, you might want to support the capability to restrict the search with a set of search criteria.&lt;/p&gt;
&lt;p&gt;Initiation / keepalive messages can be kept fairly small. The game server simply sends a packet to the master server using an agreed upon protocol. For instance, many games have chosen to signal &quot;out of band&quot; traffic by pre-pending a 32 bit integer negative one (0xffffffff) as a header to each query packet. The simplest initiation message in this scenario is then to send a single byte payload along with the packet header to signify that the game server is online. We used this mechanism in &lt;em&gt;Half-Life&lt;/em&gt;. Thus, a packet having a five byte payload is about as small as these packets are going to get.&lt;/p&gt;
&lt;p&gt;Because UDP packets also have a 28-byte packet header each, the simplest initiation / keepalive message weighs in at about 33 bytes (28 byte header plus 5 byte payload). Unless you are sending additional data only at startup of a server, it may be convenient to collapse keepalive and initiation messages into the same exact message. Also, rather than sending the server's IP address in the packet payload, we can just look at the IP address from which we received the packet to determine that information. This saves a few bytes and makes it marginally tougher to spoof the &quot;from&quot; address (more on that below). For &lt;em&gt;Half-Life&lt;/em&gt;, the initiation and keepalive messages were the same. With this base message size in mind, traffic statistics can be estimated as follows (assuming a fairly popular on-line game having up to about 2500 active game servers reporting to the master server at any one time):&lt;/p&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;500 active game servers&lt;br /&gt;300 seconds per keepalive&lt;br /&gt;33 bytes per keepalive&lt;/p&gt;
&lt;/blockquote&gt;


&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;= 275 bytes/second load and 8.33 transactions/second load&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using the above data, a game platform supporting this number of servers will create approximately (2500 * 33)/300 bytes/second in traffic to the game master server. This works out to about 275 bytes/second of inbound load on the server in the form of approximately 2500/300 or 8.33 transactions per second. Even a relatively low bandwidth connection at the master server should easily be able to accommodate the traffic coming in from game servers. In addition, termination messages are as simple as the basic keepalive message described so far (moreover, termination messages don't necessarily require sending any additional data even if initiation or keepalive messages do), and their frequency can be assumed to be quite low. Therefore, we'll assume that termination messages probably will not add much to the bandwidth requirements for the game master server.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Purging Servers From the List:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the real world, game servers are known to crash or become disconnected fairly regularly. Therefore, the game master server must be able to purge non-responsive game servers from its list occasionally. Assuming that game servers send keepalive messages every five minutes, as in the example above, it is probably safe to discard the address of any game server that has not sent a keepalive message to the game master server over the last few multiples of the keepalive interval. For instance, if your keepalive messages come once every five minutes, then you would discard the server from the list if a keepalive message is not received at least once every fifteen minutes. Of course, receiving a termination packet causes the server to be discarded immediately. Because not all servers terminate cleanly, there are often a few non-responsive servers in the list of servers returned to users.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Denial Of Service Attacks on Game Master Server:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, the basic game master server just described (which is directly responsive to small keepalive messages from servers) is open to several straightforward Denial of Service (DoS) attacks. For instance, the hacking community is quite adept at spoofing the &quot;from&quot; address field in IP headers. Thus, the following operations could cause a lot of problems for a game master server:&lt;/p&gt;&lt;p&gt;while (&amp;lt; we think the gaming master is still alive &amp;gt;)&lt;br /&gt;{&lt;br /&gt;&amp;lt; create a random from address &amp;gt;&lt;br /&gt;&amp;lt; send a fake &quot;keepalive&quot; message to master &amp;gt;&lt;br /&gt;}&lt;/p&gt;
&lt;p&gt;This kind of attack hurts the game master server by causing it to store a bunch of bogus IP addresses for purported game servers. One worry is that the attack would cause the machine to run out of memory. Assuming that each such record on the master occupies:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;6 bytes IP address&lt;/li&gt;
&lt;li&gt;4 bytes pointer to next server; and&lt;/li&gt;
&lt;li&gt;4 bytes time of last server keepalive (for removing outdated servers)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fortunately, in this example, at 14 bytes per record, it would be difficult, though not impossible, to force the game master server to die from running out of memory. This is especially true since you will almost certainly want to provision a high-end machine to act as the master server. Also, using this kind of attack, the malicious person might not be able to send enough keepalive messages before the master server starts removing old servers. Then again, the CPU load of iterating through a few hundred thousand servers and comparing timestamps every few seconds could still be a major problem. On the other hand, if your master server stores fairly substantial data about each server, then it is quite possible that the game master server could run out of resources.&lt;/p&gt;
&lt;p&gt;The nastier problem with this attack, though, is that it makes the server lists returned to your game clients virtually useless. Not to mention that if the malicious user has added 100,000 or more bogus servers to your master server list that it would mean that every time a user asked for the server list that the master server would try to send them approximately 600Kb (100 K * 6 bytes per server) of data. The master server probably will not be able to serve up that amount of data if there are more than a few users querying it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Challenge/Response System for Game Master Server&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is obviously a major problem. One solution to this kind of attack is to implement a challenge/response system that servers must go through in order to be listed on the game master server. To implement a basic challenge/response system, the game master server must store, for each potential server to be listed:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;IP address of the server&lt;/li&gt;
&lt;li&gt;the time of the request to send a keepalive; and&lt;/li&gt;
&lt;li&gt;a random number that must be returned to the server to allow the keepalive message&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The master server creates this record (or updates the one for the same from IP address if it already exists) and then sends a packet to the game server containing the random number. The game server then must send a keepalive message to the master and must include the random number in that message. If the challenge request came in from a bogus IP address, then the requester would never receive the random number back from the game master server. In addition, if a keepalive message is received and the random number is wrong or the message is out of date (i.e., the challenge/response record is more than a couple of seconds old), then the keepalive message can be easily ignored.&lt;/p&gt;
&lt;p&gt;Of course, even this system still has some vulnerability to a DoS attack where the attacker has sufficient bandwidth to occupy all of the &quot;challenge&quot; slots (depending on data structure used and number of slots allowed to be active and the timeout period on such slots) or simply to overwhelm the master server's connection itself, but those kinds of attacks are, at least, fairly traceable. For example, id Software, creators of the popular Quake series of games, experienced such an attack in January 2000. The attackers were able to saturate two full DS3 (T3) lines of 45Mbps capacity. I.e., the attackers must have had access to a better than T3 capacity connection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additional Data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The game master server described so far only encompasses the most basic functionality. Additional server specific data can be stored at the master server, especially as a way to streamline the amount of data sent back to users based on queries. This kind of tradeoff of processing and storage for bandwidth can often be a good idea. For instance, if the master server were to store current and maximum players, probably encoded as a byte or short each for most games, then the memory overhead wouldn't go up very much. Nor would the size of the keepalive packets from game servers containing this data. With this data, queries from users could request that the game master server filter out empty or full servers. In this fashion, the size of the server list returned by the master server is reduced, thereby lowering the server's outgoing bandwidth requirements. In addition, by not always requiring the end-user to talk to each game server to discover the number of players, the load placed on your game servers in responding to information queries could also be reduced.&lt;/p&gt;
&lt;p&gt;Finally, the design of the master server should be looked at from a network reliability point of view. For example, is there much consequence to having a keepalive message packet dropped? In the &lt;em&gt;Half-Life&lt;/em&gt; case, we decided that there probably wasn't much of a consequence.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Master Server Responses to Clients:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The more important part of the game master server is the client query response portion. Unlike traffic from keepalive messages from servers, the load from querying by users can by quite staggering. The main purpose of the game master server is to send each requester a list of the IP addresses of the active or relevant game servers. The request for the list of servers can be as simple as the keepalive message, except that instead of a keepalive code, the client sends a &quot;list servers&quot; code. Estimating the frequency and number of such list requests to the game master server is a little more difficult.&lt;/p&gt;
&lt;p&gt;For instance, if we assume a community having 10,000 users simultaneously on-line at peak times and that each such user requests a new list of all servers from the master server every 15 minutes, we can generate some useful load statistics. Based on these numbers, the game master server must respond to about 11.1 such requests per second. If the requests are about 33 bytes each, then that's only 367 bytes or so per second of requests coming into the server. Where things become interesting is when we look at how expensive it is to the server to send out the responses.&lt;/p&gt;
</description>
<pubDate>Sat, 25 Nov 2017 19:45:34 +0000</pubDate>
<dc:creator>setra</dc:creator>
<og:type>article</og:type>
<og:url>https://www.gamasutra.com/view/feature/131577/halflife_and_team_fortress_.php</og:url>
<og:title>Half-Life and Team Fortress Networking: Closing the Loop on Scalable Network Gaming Backend Services</og:title>
<og:description>More and more, having an on-line component to gaming is essential to the success of a title. In addition, as games become more of a consumer entertainment experience, making things easier on gamers becomes essential. Yahn W. Bernier examines how to provision a variety of backend services to provide a seamless user experience for gamers as they go on-line.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.gamasutra.com/view/feature/131577/halflife_and_team_fortress_.php?page=1</dc:identifier>
</item>
<item>
<title>A minimalist guide to tmux</title>
<link>https://medium.com/@peterxjang/a-minimalist-guide-to-tmux-13675fb160fa</link>
<guid isPermaLink="true" >https://medium.com/@peterxjang/a-minimalist-guide-to-tmux-13675fb160fa</guid>
<description>&lt;p name=&quot;b12c&quot; id=&quot;b12c&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Let’s say you’re using &lt;a href=&quot;https://medium.com/@peterxjang/how-to-learn-vim-a-four-week-plan-cd8b376a9b85&quot; data-href=&quot;https://medium.com/@peterxjang/how-to-learn-vim-a-four-week-plan-cd8b376a9b85&quot; class=&quot;markup--anchor markup--p-anchor&quot; target=&quot;_blank&quot;&gt;vim&lt;/a&gt; to edit code on a remote computer &lt;a href=&quot;https://medium.com/@peterxjang/web-development-on-an-ipad-69f253bc9c38&quot; data-href=&quot;https://medium.com/@peterxjang/web-development-on-an-ipad-69f253bc9c38&quot; class=&quot;markup--anchor markup--p-anchor&quot; target=&quot;_blank&quot;&gt;using ssh&lt;/a&gt;, and you want to open a new terminal tab to start a development server. When you open a new tab, it won’t be connected to the remote machine, which means you would have to ssh and navigate to the appropriate directory each time. Furthermore, if your internet connection ever drops, you’ll lose all your ssh sessions and have to start everything up again.&lt;/p&gt;
&lt;p name=&quot;b5dc&quot; id=&quot;b5dc&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;You can solve these issues by using &lt;a href=&quot;https://github.com/tmux/tmux/wiki&quot; data-href=&quot;https://github.com/tmux/tmux/wiki&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;tmux&lt;/a&gt;, a command line tool which provides the following key features:&lt;/p&gt;
&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;90a7&quot; id=&quot;90a7&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Enables multiple windows and panes within a single terminal window&lt;/li&gt;
&lt;li name=&quot;7f06&quot; id=&quot;7f06&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Keeps windows and panes in a session (which stays alive even when the internet disconnects)&lt;/li&gt;
&lt;li name=&quot;953f&quot; id=&quot;953f&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Enables session sharing (great for pair programming)&lt;/li&gt;
&lt;/ul&gt;&lt;h3 name=&quot;5c0c&quot; id=&quot;5c0c&quot; class=&quot;graf graf--h3 graf-after--li&quot;&gt;Getting started&lt;/h3&gt;
&lt;p name=&quot;bc85&quot; id=&quot;bc85&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;To install tmux, you can run &lt;code class=&quot;markup--code markup--p-code&quot;&gt;sudo apt-get install tmux&lt;/code&gt; on Linux with &lt;a href=&quot;https://help.ubuntu.com/community/AptGet/Howto&quot; data-href=&quot;https://help.ubuntu.com/community/AptGet/Howto&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;apt-get&lt;/a&gt; or &lt;code class=&quot;markup--code markup--p-code&quot;&gt;brew install tmux&lt;/code&gt; on a Mac with &lt;a href=&quot;https://brew.sh/&quot; data-href=&quot;https://brew.sh/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;homebrew&lt;/a&gt;. Once it’s installed, you can create a new tmux session simply by running:&lt;/p&gt;
&lt;pre name=&quot;dd76&quot; id=&quot;dd76&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
$ tmux
&lt;/pre&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*Ml8e-M7seNIwHBOEN6wOrw.png&quot; data-width=&quot;1432&quot; data-height=&quot;972&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*Ml8e-M7seNIwHBOEN6wOrw.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*Ml8e-M7seNIwHBOEN6wOrw.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;9683&quot; id=&quot;9683&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This looks pretty much identical to the regular terminal, except there’s the green status bar at the bottom. From here we can start running tmux commands to manage terminal windows and sessions.&lt;/p&gt;
&lt;h3 name=&quot;af93&quot; id=&quot;af93&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Essential tmux commands&lt;/h3&gt;
&lt;p name=&quot;572a&quot; id=&quot;572a&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Once you’re in tmux, you can run a command by entering a &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;prefix key&lt;/strong&gt; followed by a &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;command key&lt;/strong&gt;. By default, tmux uses &lt;code class=&quot;markup--code markup--p-code&quot;&gt;Ctrl b&lt;/code&gt; as the prefix key. Note that you must let go of the prefix before entering the command key.&lt;/p&gt;
&lt;p name=&quot;2aa4&quot; id=&quot;2aa4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;There are many tmux commands available, but here are the only ones you need to get started:&lt;/p&gt;
&lt;pre name=&quot;8f12&quot; id=&quot;8f12&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
&amp;lt;prefix&amp;gt; c: Create a new window (appears in status bar)
&lt;/pre&gt;
&lt;pre name=&quot;60fe&quot; id=&quot;60fe&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
&amp;lt;prefix&amp;gt; 0: Switch to window 0
&lt;/pre&gt;
&lt;pre name=&quot;bad6&quot; id=&quot;bad6&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
&amp;lt;prefix&amp;gt; 1: Switch to window 1
&lt;/pre&gt;
&lt;pre name=&quot;958f&quot; id=&quot;958f&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
&amp;lt;prefix&amp;gt; 2: Switch to window 2 (etc.)
&lt;/pre&gt;
&lt;pre name=&quot;2155&quot; id=&quot;2155&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
&amp;lt;prefix&amp;gt; x: Kill current window
&lt;/pre&gt;
&lt;pre name=&quot;7ff0&quot; id=&quot;7ff0&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
&amp;lt;prefix&amp;gt; d: Detach tmux (exit back to normal terminal)
&lt;/pre&gt;
&lt;p name=&quot;77a9&quot; id=&quot;77a9&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;If you kill all the windows in a tmux session, it will kill the overall session and return you to the normal terminal. If you use &lt;code class=&quot;markup--code markup--p-code&quot;&gt;&amp;lt;prefix&amp;gt; d&lt;/code&gt; to detach tmux, you’ll be back in the normal terminal with your tmux session still running in the background. To see all tmux sessions, you can enter:&lt;/p&gt;
&lt;pre name=&quot;db92&quot; id=&quot;db92&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
$ tmux ls
&lt;/pre&gt;
&lt;p name=&quot;aef0&quot; id=&quot;aef0&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;To attach to the last used session, you can enter:&lt;/p&gt;
&lt;pre name=&quot;3cdb&quot; id=&quot;3cdb&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
$ tmux a
&lt;/pre&gt;
&lt;p name=&quot;83db&quot; id=&quot;83db&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;To attach to a specific session, you can enter:&lt;/p&gt;
&lt;pre name=&quot;b5c6&quot; id=&quot;b5c6&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
$ tmux a -t &amp;lt;session-name&amp;gt;
&lt;/pre&gt;
&lt;p name=&quot;bb92&quot; id=&quot;bb92&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;And that’s it! Now you’re able to work on remote computers with multiple terminal windows and persistent sessions. You can even pair programming by having two people attach to the same tmux session!&lt;/p&gt;
&lt;h3 name=&quot;ffbe&quot; id=&quot;ffbe&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Next steps&lt;/h3&gt;
&lt;p name=&quot;8fcb&quot; id=&quot;8fcb&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;The above commands are truly all you need to take advantage of the most important features of tmux. I try to keep things minimal, with one window for my text editor (vim), another window for a development server, and a third window for running any other commands.&lt;/p&gt;
&lt;p name=&quot;e3e6&quot; id=&quot;e3e6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Most people using tmux tend to use panes, which allows for multiple terminal views within a single window. You can do some crazy customizations with panes:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*ZVmiTfLBYpTUdh-Tadx_SQ.png&quot; data-width=&quot;1920&quot; data-height=&quot;1079&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*ZVmiTfLBYpTUdh-Tadx_SQ.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*ZVmiTfLBYpTUdh-Tadx_SQ.png&quot;/&gt;&lt;/div&gt;
From &lt;a href=&quot;https://www.reddit.com/r/unixporn/comments/689wfd/tmux_the_bridge/&quot; data-href=&quot;https://www.reddit.com/r/unixporn/comments/689wfd/tmux_the_bridge/&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;reddit.com/r/unixporn&lt;/a&gt;
&lt;p name=&quot;548c&quot; id=&quot;548c&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Panes are definitely cool and can be worth learning, but I would recommend holding off on them to start off to reduce the learning curve of tmux. When you use panes, you’ll need to memorize commands to create panes vertically and horizontally, navigate between panes, resize panes, destroy panes, etc. It will more than double the number of commands you need to memorize to get started! I would use tmux without panes for at least a week or two before trying out a new set of commands.&lt;/p&gt;
&lt;p name=&quot;0c55&quot; id=&quot;0c55&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;You can also customize tmux by making a &lt;code class=&quot;markup--code markup--p-code&quot;&gt;.tmux.conf&lt;/code&gt; file in your home directory. Some common customizations include changing the prefix to &lt;code class=&quot;markup--code markup--p-code&quot;&gt;Ctrl a&lt;/code&gt; (a little faster to type, doesn’t conflict with vim), start window numbering at 1 instead of 0 (again, a little faster to type), and customizing colors. If you are planning on rebinding the prefix key, then you should probably do that first so you build the right muscle memory. Here’s an absolutely minimal &lt;code class=&quot;markup--code markup--p-code&quot;&gt;.tmux.conf&lt;/code&gt; file to change the prefix and window numbering:&lt;/p&gt;
&lt;pre name=&quot;2245&quot; id=&quot;2245&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
&lt;code class=&quot;markup--code markup--pre-code&quot;&gt;# remap prefix from 'C-b' to 'C-a'&lt;br/&gt;unbind C-b&lt;br/&gt;set-option -g prefix C-a&lt;br/&gt;&lt;/code&gt;bind-key C-a send-prefix
&lt;/pre&gt;
&lt;pre name=&quot;51be&quot; id=&quot;51be&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
# Start window numbering at 1&lt;br/&gt;set -g base-index 1
&lt;/pre&gt;
&lt;p name=&quot;2967&quot; id=&quot;2967&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Again, tmux has a large number of options you can configure here, but to get started you want to keep it as minimal as possible. And once you’re ready to try out advanced features, don’t just blindly paste configurations you find online. It’s important that you understand each line you add to your &lt;code class=&quot;markup--code markup--p-code&quot;&gt;.tmux.conf&lt;/code&gt; file!&lt;/p&gt;
&lt;p name=&quot;06ef&quot; id=&quot;06ef&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;Once you feel like you’ve mastered the basics, there are a ton of great resources out there to take your tmux game to the next level. However, to paraphrase Dr. Ian Malcolm, don’t be so preoccupied with whether or not you could that you don’t stop and think if you should. I would argue you get more than 80% of tmux’s advantages using the above minimal set of commands and customizations. Hope you find these tips useful on your journey!&lt;/p&gt;
</description>
<pubDate>Sat, 25 Nov 2017 18:01:09 +0000</pubDate>
<dc:creator>peterxjang</dc:creator>
<og:title>A minimalist guide to tmux – Peter Jang – Medium</og:title>
<og:url>https://medium.com/@peterxjang/a-minimalist-guide-to-tmux-13675fb160fa</og:url>
<og:image>https://cdn-images-1.medium.com/max/1200/1*Ml8e-M7seNIwHBOEN6wOrw.png</og:image>
<og:description>Let’s say you’re using vim to edit code on a remote computer using ssh, and you want to open a new terminal tab to start a development…</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/@peterxjang/a-minimalist-guide-to-tmux-13675fb160fa</dc:identifier>
</item>
<item>
<title>Ciao, Chrome: Firefox Quantum Is the Browser Built for 2017</title>
<link>https://www.wired.com/story/firefox-quantum-the-browser-built-for-2017/</link>
<guid isPermaLink="true" >https://www.wired.com/story/firefox-quantum-the-browser-built-for-2017/</guid>
<description>&lt;p&gt;&lt;span class=&quot;lede&quot;&gt;It's been years&lt;/span&gt; since I gave a second thought to my web browser. Safari's fine, Microsoft Edge is whatever, I think Opera still exists? None have ever offered much reason to switch away from Chrome, Google's fast, simple web tool. I'm not the only one who feels this way, either: Chrome commands nearly 60 percent of the browser market, and is more than four times as popular as the second-place finisher, Firefox. Chrome won the browser wars.&lt;/p&gt;
&lt;p&gt;So my expectations for &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/new/&quot; target=&quot;_blank&quot;&gt;Firefox Quantum&lt;/a&gt;, the new browser from Mozilla, were not particularly high. Mozilla made big promises about Quantum's speed and efficiency, which are what everyone makes big promises about when they launch a new browser, and they never really make a difference in the experience. Sure, a couple dozen Chrome tabs can bring even the beefiest computer hardware grinding to a beach-balling halt, but Chrome does the job. What could Firefox even do to win me over?&lt;/p&gt;
&lt;p&gt;It turns out there are lots of things Firefox Quantum could do to improve the browser experience, and it did many of those things. The new Firefox actually manages to evolve the entire browser experience, recognizing the multi-device, ultra-mobile lives we all lead and building a browser that plays along. It's a browser built with privacy in mind, automatically stopping invisible trackers and making your history available to you and no one else. It's better than Chrome, faster than Chrome, smarter than Chrome. It's my new go-to browser.&lt;/p&gt;
&lt;p&gt;The speed thing is real, by the way. Mozilla did a lot of engineering work to allow its browser to take advantage of all the multi-core processing power on modern devices, and it shows. Every page seems to load one beat sooner than I expect, which makes the whole browsing experience that much more efficient. It's not life-changingly different, and I can't say I notice the 100 percent advantage Mozilla swears it has over Chrome, but it definitely feels zippier. I definitely notice Firefox's better memory usage; I routinely find myself with 30 or 40 tabs open while I'm researching a story, and at that point Chrome effectively drags my computer into quicksand. So far, I haven't been able to slow Firefox Quantum down at all, no matter how many tabs I use.&lt;/p&gt;
&lt;p&gt;Again, though, speed and memory aren't enough to merit the hassle of switching browsers (even if they should be). Rather, it's the little things, the things you do with and around the web pages themselves, that make Firefox really work. For instance: If you're looking at a page on your phone and want to load that same page on your laptop, you just tap &quot;Send to Device,&quot; pick your laptop, and it opens and loads in the background as if it had always been there. You can save pages to a reading list, or to the great read-it-later service &lt;a href=&quot;https://getpocket.com&quot; target=&quot;_blank&quot;&gt;Pocket&lt;/a&gt; (which Mozilla owns), both with a single tap. Pocket also surfaces a bunch of articles you might like when you open a new tab, which is a delightful way to bring actual browsing back to the browser.&lt;/p&gt;

&lt;p&gt;Quantum feels like a bunch of power users got together and built a browser that fixed all the little things that annoyed them about other browsers. It has a QR code reader built in. It has a menu item for copying a URL, and if you've ever tried to copy and paste a long URL on your phone you know how nice that is. Firefox even makes screenshots more intuitive: it can capture a section, everything on your screen, or the entire webpage all at once. You can even turn on &quot;Night Mode&quot; and invert the colors on most blindingly white websites. All these things are so fiddly in other browsers, requiring bookmarklets and extensions to work. Firefox just put them all in the browser.&lt;/p&gt;
&lt;p&gt;Firefox has always been a remarkably customizable app, and Quantum takes the idea even further. You can move all the buttons around, change every color and font, and even control the visual density of the app itself. You're able to choose which app opens when you click on an email address, which every Gmail user will appreciate. Mozilla has a huge library of add-ons, and if you use the Foxified extension, you can even run Chrome extensions in Firefox. Best I can tell, there's nothing you can do in Chrome that you can't in Firefox. And Firefox does them all faster.&lt;/p&gt;
&lt;p&gt;Aesthetically, Firefox looks just like Chrome, which is a good thing. Rather than separate the search bar and address bar, Quantum combines them, just like Chrome. Tabs are rectangular and uncomplicated, as they should be. Since it's doing so much, Quantum does get a bit cluttered in spots, like when you search in the box and it offers you autocomplete options, search results, and a bunch of other search-engine options all in the same window. But in general it's clean and simple, like a good browser should be.&lt;/p&gt;
&lt;p&gt;Switching browsers is kind of a pain. They're the most important, most-used apps on just about all our devices, and there's a steep learning curve in trying to figure out a new one. And in a few cases, it might even be impossible; I can't use the Conde Nast CMS in anything other than Chrome, so I can't switch completely. But if there's ever been a reason to spend an hour importing bookmarks, installing extensions, and tweaking all your settings just so, Firefox Quantum is it. It's a truly 2017 browser, and it might be the only one.&lt;/p&gt;
</description>
<pubDate>Sat, 25 Nov 2017 16:22:54 +0000</pubDate>
<dc:creator>bpierre</dc:creator>
<og:type>article</og:type>
<og:title>Ciao, Chrome: Firefox Quantum Is The Browser Built for 2017</og:title>
<og:description>The new Firefox is fast, it's secure, and it's full of clever little things that make web browsing better.</og:description>
<og:image>https://media.wired.com/photos/5a15c6eefaf57646d4130b6d/191:100/pass/firefox-TA.jpg</og:image>
<og:url>https://www.wired.com/story/firefox-quantum-the-browser-built-for-2017/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wired.com/story/firefox-quantum-the-browser-built-for-2017/</dc:identifier>
</item>
</channel>
</rss>