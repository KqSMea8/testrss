<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>London Cutaways</title>
<link>http://londonist.com/london/transport/london-cutaways</link>
<guid isPermaLink="true" >http://londonist.com/london/transport/london-cutaways</guid>
<description>&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/piccadilly_circus_tube_station_by_renzo_picasso__1929_-_as_the_new_concourse_opened_that_yr-_pedants_may_note_that_the_traffic_flow_has_been_reversed__as_it_would_be_in_italy-_copyright_archivio_renzo_picasso__genoa.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt; Piccadilly Circus tube station by Renzo Picasso, 1929. Pedants may note that the traffic flow has been reversed, as it would be in Italy. Copyright, &lt;a href=&quot;http://www.renzopicasso.com&quot;&gt;Archivio Renzo Picasso&lt;/a&gt;, Genoa.
&lt;p&gt;&lt;em&gt;The layout of London can only be fully understood if we examine it in three dimensions. &lt;a href=&quot;https://twitter.com/MrTimDunn&quot;&gt;Tim Dunn&lt;/a&gt; takes a look at some of the capital's greatest cutaway diagrams.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Our city is a fascinating, infuriating, terrifying, beautiful place. As curious Londonists we attempt to make sense of it and the way it works so that we can better assert our own place within it. It is often said that London is an infrastructural palimpsest: layer upon layer of networks and systems. But that really isn't the case. London, like any urban form is a complex, woven fabric of infrastructure — each system maddeningly intertwined with others.&lt;/p&gt;
&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/1930__d_macpherson-s_cluttered_cutaway_of_piccadilly_circus_underground_station_to_explain_the_complexity_of_works_to_the_excited_public.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt; 1930, D MacPherson's cluttered cutaway of Piccadilly Circus underground station to explain the complexity of works to the excited public. (c) London Transport Museum Collection.
&lt;p&gt;Ancient, hidden rivers don't just flow under our modern railways — today they flow above them on aqueducts and in pipes. Crossrail ducks beneath some Underground lines and rises up above others. The remarkable London Hydraulic Power Company's pipes squeeze in and out and through and down between systems that came before them. Above ground road, rail and power infrastructure networks criss-cross each other, often obscuring what could be seen before. A two-dimensional map, while often brilliant and beautiful in its own right, is never quite enough to explain what is going on in this city. We need more.&lt;/p&gt;
&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/1989_-_london_transport_museum_commissioned_gavin_dunn_to_draw_this_updated_modern_3d_cutaway_of_piccadilly_circus_station.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt; 1989, London Transport Museum commissioned Gavin Dunn to draw this updated modern 3D cutaway of Piccadilly Circus station. (c) London Transport Museum Collection.
&lt;p&gt;To make sense of this jam-packed, twisting, stacked-up city, or indeed the objects that exist within, we have to look at the spaces, places and things in three dimensions. And that is where the remarkable world of the cutaway comes into its own.&lt;/p&gt;

&lt;a class=&quot;&quot; href=&quot;http://assets.londonist.com/uploads/2016/12/cutaway_of_london-s_charing_cross_railway__underground_and_trams_-_popular_science_magazine_1921.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/cutaway_of_london-s_charing_cross_railway__underground_and_trams_-_popular_science_magazine_1921_copy.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt;&lt;/a&gt; Cutaway of London's Charing Cross railway, underground and trams. Popular Science Magazine 1921. Click or tap for higher resolution.
&lt;p&gt;The cutaway diagram has its roots in the Renaissance, where illustrators sought to explain subterranean mining through printed works. Those simple drawings became ever more complex as our technology and our places became harder to explain. It was in the 20th century that cutaways became most popular, as demand for education and explanation of transport networks and technology rose.&lt;/p&gt;
&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/bond_street_station__1970s-_showing_reconstruction_for_the_jubilee_line_it_also_references_the_fleet_line_as_the_jubilee_was_known_during_the_planning_phase.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt; Bond Street Station, 1970s. Showing reconstruction for the Jubilee Line. It also references the Fleet Line as the Jubilee was known during the planning phase. (c) London Transport Museum Collection.
&lt;p&gt;London, having such an incredible array of transport infrastructure — much of it below ground — has therefore yielded a remarkable quantity of cutaway diagrams. They have been produced for children, for professionals, for the public, for government — each with a different objective in mind.&lt;/p&gt;
&lt;p&gt;Some of these are exquisite: the Renzo Picasso diagram of Piccadilly Circus (top of page) has been widely circulated before, but in helping research this article his archive team has given permission for an additional drawing  — of Camden Town — published here for the first time ever:&lt;/p&gt;
&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/renzo_picasso_camden_town_1929.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt; Copyright, &lt;a href=&quot;http://www.renzopicasso.com/&quot;&gt;Archivio Renzo Picasso&lt;/a&gt;, Genoa.
&lt;p&gt;Many readers will be familiar too with the work of Lesley Ashwell Wood, who published a vast repertoire in mid-century Eagle comics. A lovely review of his work can be &lt;a href=&quot;https://bearalley.blogspot.co.uk/2011/02/l-ashwell-wood-behind-scenes-part-4.html&quot;&gt;found online&lt;/a&gt;.&lt;/p&gt;
&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/camden_town_by_l_ashwell_wood_for_the_eagle_comic.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt; Camden Town by L Ashwell Wood for the Eagle comic. (c) Eagle, Dan Dare Corporation. &lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/1950_-_a_cutaway_of_1938_stock_on_london_underground-_eagle_comic_-_from_ianvisits-co-uk.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt; 1950, a cutaway of 1938 stock on London Underground in the Eagle comic - courtesy of &lt;a href=&quot;https://www.ianvisits.co.uk/&quot;&gt;Ian Visits&lt;/a&gt;. (c) Eagle, Dan Dare Corporation.
&lt;p&gt;The Post Office Mail Rail diagrams are a delight, and the 1926 version bears comparison with the 'Overground Piccadilly line' diagrams, of which various versions have been printed and mounted in Piccadilly line trains over the years near the doorways.&lt;/p&gt;
&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/mail_rail_1926_cutaway_of_entire_route_-_copyright_royal_mail_group_ltd__courtesy_of_the_postal_museum.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt; Mail Rail 1926 cutaway of the entire route. Copyright Royal Mail Group Ltd, courtesy of the Postal Museum.
&lt;p&gt;And here's another from 60 years later, showing the Paddington Mail Rail station.&lt;/p&gt;
&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/1980s_mail_rail_-_paddington_station_transfer_from_british_rail_to_mail_rail-_copyright_royal_mail_group_ltd__courtesy_of_the_postal_museum.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt; 1980s, Mail Rail's Paddington station transfer from British Rail to Mail Rail. Copyright Royal Mail Group Ltd, courtesy of The Postal Museum.
&lt;p&gt;As a final bonus, we've included a cross-section of something at the centre of a global network: Television Centre at Shepherd’s Bush. The plan is from July 1958 and you can find &lt;a href=&quot;http://www.tvstudiohistory.co.uk/tv%20centre%20history.htm&quot;&gt;more out about it here&lt;/a&gt;.&lt;/p&gt;
&lt;a class=&quot;&quot; href=&quot;http://assets.londonist.com/uploads/2016/12/tv_centre_cutaway_drawing_from_tvstudiohistory-co-uk.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/tv_centre_cutaway_drawing_from_tvstudiohistory-co-uk_copy.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt;&lt;/a&gt; TV Centre cutaway drawing. (c) The Architect &amp;amp; Building News, 1958. Click or tap for higher resolution.
&lt;p&gt;Of course, a cutaway, like any illustration or interpretation, is never going to be entirely accurate. It is going to have elements removed — not just because it's a cutaway and we need to see past stuff but because the illustrator or commissioner of the drawing doesn't think they are relevant, or shouldn't be included. Others add in extra bits too – because they're making a best guess.&lt;/p&gt;
&lt;p&gt;After all, who really knows the extent of what is under London’s streets?&lt;/p&gt;
&lt;p&gt;Please do post links to more cutaways of London below.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;With thanks to &lt;a href=&quot;http://www.ltmuseum.co.uk&quot;&gt;London Transport Museum&lt;/a&gt;, the &lt;a href=&quot;http://www.PostalMuseum.org&quot;&gt;Postal Museum&lt;/a&gt;, &lt;a href=&quot;https://londonist.com/lima/pages/44979/Ianvists.co.uk&quot;&gt;Ian Visits&lt;/a&gt;, &lt;a href=&quot;https://londonist.com/lima/pages/44979/renzopicasso.com&quot;&gt;Renzo Picasso Archive&lt;/a&gt; and&lt;a href=&quot;https://londonist.com/lima/pages/44979/bearalley.blogspot.co.uk&quot;&gt;Bear Alley&lt;/a&gt;.  &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also&lt;/strong&gt;: &lt;a href=&quot;http://londonist.com/2015/10/how-deep-does-london-go&quot;&gt;How deep does London go?&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 07 Oct 2017 19:06:37 +0000</pubDate>
<dc:creator>brudgers</dc:creator>
<og:url>https://londonist.com/london/transport/london-cutaways</og:url>
<og:title>London's Hidden Tunnels Revealed In Amazing Cutaways</og:title>
<og:description>What lies beneath.</og:description>
<og:type>article</og:type>
<og:image>https://assets.londonist.com/uploads/2016/12/i875/piccadilly_circus_tube_station_by_renzo_picasso__1929_-_as_the_new_concourse_opened_that_yr-_pedants_may_note_that_the_traffic_flow_has_been_reversed__as_it_would_be_in_italy-_copyright_archivio_renzo_picasso__genoa.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://londonist.com/london/transport/london-cutaways</dc:identifier>
</item>
<item>
<title>Five minute guide to better typography</title>
<link>http://pierrickcalvez.com/journal/a-five-minutes-guide-to-better-typography</link>
<guid isPermaLink="true" >http://pierrickcalvez.com/journal/a-five-minutes-guide-to-better-typography</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;http://pierrickcalvez.com/journal/a-five-minutes-guide-to-better-typography&quot;&gt;http://pierrickcalvez.com/journal/a-five-minutes-guide-to-better-typography&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=15424478&quot;&gt;https://news.ycombinator.com/item?id=15424478&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 744&lt;/p&gt;&lt;p&gt;# Comments: 109&lt;/p&gt;</description>
<pubDate>Sat, 07 Oct 2017 16:44:17 +0000</pubDate>
<dc:creator>reacharavindh</dc:creator>
<og:title>A Five Minutes Guide to Better Typography — Pierrick Calvez</og:title>
<og:description>A Five Minutes Guide to Better Typography</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://pierrickcalvez.com/journal/a-five-minutes-guide-to-better-typography</dc:identifier>
</item>
<item>
<title>A Branchless UTF-8 Decoder</title>
<link>http://nullprogram.com/blog/2017/10/06/</link>
<guid isPermaLink="true" >http://nullprogram.com/blog/2017/10/06/</guid>
<description>&lt;time datetime=&quot;2017-10-06&quot;&gt;October 06, 2017&lt;/time&gt;&lt;p&gt;nullprogram.com/blog/2017/10/06/&lt;/p&gt;
&lt;p&gt;This week I took a crack at writing a branchless UTF-8 decoder: a function that decodes a single UTF-8 code point from a byte stream without any &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statements, loops, short-circuit operators, or other sorts of conditional jumps. You can find the source code here along with a test suite and benchmark:&lt;/p&gt;
&lt;p&gt;In addition to decoding the next code point, it detects any errors and returns a pointer to the next code point. It’s the complete package.&lt;/p&gt;
&lt;p&gt;Why branchless? Because high performance CPUs are pipelined. That is, a single instruction is executed over a series of stages, and many instructions are executed in overlapping time intervals, each at a different stage.&lt;/p&gt;
&lt;p&gt;The usual analogy is laundry. You can have more than one load of laundry in process at a time because laundry is typically a pipelined process. There’s a washing machine stage, dryer stage, and folding stage. One load can be in the washer, a second in the drier, and a third being folded, all at once. This greatly increases throughput because, under ideal circumstances with a full pipeline, an instruction is completed each clock cycle despite any individual instruction taking many clock cycles to complete.&lt;/p&gt;
&lt;p&gt;Branches are the enemy of pipelines. The CPU can’t begin work on the next instruction if it doesn’t know which instruction will be executed next. It must finish computing the branch condition before it can know. To deal with this, pipelined CPUs are also equipped with &lt;em&gt;branch predictors&lt;/em&gt;. It makes a guess at which branch will be taken and begins executing instructions on that branch. The prediction is initially made using static heuristics, and later those predictions are improved &lt;a href=&quot;http://www.agner.org/optimize/microarchitecture.pdf&quot;&gt;by learning from previous behavior&lt;/a&gt;. This even includes predicting the number of iterations of a loop so that the final iteration isn’t mispredicted.&lt;/p&gt;
&lt;p&gt;A mispredicted branch has two dire consequences. First, all the progress on the incorrect branch will need to be discarded. Second, the pipeline will be flushed, and the CPU will be inefficient until the pipeline fills back up with instructions on the correct branch. With a sufficiently deep pipeline, it can easily be &lt;strong&gt;more efficient to compute and discard an unneeded result than to avoid computing it in the first place&lt;/strong&gt;. Eliminating branches means eliminating the hazards of misprediction.&lt;/p&gt;
&lt;p&gt;Another hazard for pipelines is &lt;em&gt;dependencies&lt;/em&gt;. If an instruction depends on the result of a previous instruction, it may have to wait for the previous instruction to made sufficient progress before it can complete one of its stages. This is known as a &lt;em&gt;pipeline stall&lt;/em&gt;, and it is an important consideration in instruction set architecture (ISA) design.&lt;/p&gt;
&lt;p&gt;For example, on the x86-64 architecture, storing a 32-bit result in a 64-bit register will automatically clear the upper 32 bits of that register. Any further use of that destination register cannot depend on prior instructions since all bits have been set. This particular optimization was missed in the design of the i386: Writing a 16-bit result to 32-bit register leaves the upper 16 bits intact, creating false dependencies.&lt;/p&gt;
&lt;p&gt;Dependency hazards are mitigated using &lt;em&gt;out-of-order execution&lt;/em&gt;. Rather than execute two dependent instructions back to back, which would result in a stall, the CPU may instead executing an independent instruction further away in between. A good compiler will also try to spread out dependent instructions in its own instruction scheduling.&lt;/p&gt;
&lt;p&gt;The effects of out-of-order execution are typically not visible to a single thread, where everything will appear to have executed in order. However, when multiple processes or threads can access the same memory &lt;a href=&quot;http://preshing.com/20120515/memory-reordering-caught-in-the-act/&quot;&gt;out-of-order execution can be observed&lt;/a&gt;. It’s one of the many &lt;a href=&quot;http://nullprogram.com/blog/2014/09/02/&quot;&gt;challenges of writing multi-threaded software&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The focus of my UTF-8 decoder was to be branchless, but there was one interesting dependency hazard that neither GCC nor Clang were able to resolve themselves. More on that later.&lt;/p&gt;
&lt;h3 id=&quot;what-is-utf-8&quot;&gt;What is UTF-8?&lt;/h3&gt;
&lt;p&gt;Without getting into the history of it, you can generally think of &lt;a href=&quot;https://en.wikipedia.org/wiki/UTF-8&quot;&gt;UTF-8&lt;/a&gt; as a method for encoding a series of 21-bit integers (&lt;em&gt;code points&lt;/em&gt;) into a stream of bytes.&lt;/p&gt;
&lt;ul readability=&quot;2.3965517241379&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Shorter integers encode to fewer bytes than larger integers. The shortest available encoding must be chosen, meaning there is one canonical encoding for a given sequence of code points.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3.756345177665&quot;&gt;
&lt;p&gt;Certain code points are off limits: &lt;em&gt;surrogate halves&lt;/em&gt;. These are code points &lt;code class=&quot;highlighter-rouge&quot;&gt;U+D800&lt;/code&gt; through &lt;code class=&quot;highlighter-rouge&quot;&gt;U+DFFF&lt;/code&gt;. Surrogates are used in UTF-16 to represent code points above U+FFFF and serve no purpose in UTF-8. This has &lt;a href=&quot;https://simonsapin.github.io/wtf-8/&quot;&gt;interesting consequences&lt;/a&gt; for pseudo-Unicode strings, such “wide” strings in the Win32 API, where surrogates may appear unpaired. Such sequences cannot legally be represented in UTF-8.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Keeping in mind these two rules, the entire format is summarized by this table:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;length byte[0]  byte[1]  byte[2]  byte[3]
1      0xxxxxxx
2      110xxxxx 10xxxxxx
3      1110xxxx 10xxxxxx 10xxxxxx
4      11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; placeholders are the bits of the encoded code point.&lt;/p&gt;
&lt;p&gt;UTF-8 has some really useful properties:&lt;/p&gt;
&lt;ul readability=&quot;5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;It’s backwards compatible with ASCII, which never used the highest bit.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Sort order is preserved. Sorting a set of code point sequences has the same result as sorting their UTF-8 encoding.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;No additional zero bytes are introduced. In C we can continue using null terminated &lt;code class=&quot;highlighter-rouge&quot;&gt;char&lt;/code&gt; buffers, often without even realizing they hold UTF-8 data.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;It’s self-synchronizing. A leading byte will never be mistaken for a continuation byte. This allows for byte-wise substring searches, meaning UTF-8 unaware functions like &lt;code class=&quot;highlighter-rouge&quot;&gt;strstr(3)&lt;/code&gt; continue to work without modification (except for normalization issues). It also allows for unambiguous recovery of a damaged stream.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;A straightforward approach to decoding might look something like this:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;utf8_simple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xe0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xc0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xe0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x07&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// invalid
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// skip this byte
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xd800&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xdfff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// surrogate half
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It branches off on the highest bits of the leading byte, extracts all of those &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; bits from each byte, concatenates those bits, checks if it’s a surrogate half, and returns a pointer to the next character. (This implementation does &lt;em&gt;not&lt;/em&gt; check that the highest two bits of each continuation byte are correct.)&lt;/p&gt;
&lt;p&gt;The CPU must correctly predict the length of the code point or else it will suffer a hazard. An incorrect guess will stall the pipeline and slow down decoding.&lt;/p&gt;
&lt;p&gt;In real world text this is probably not a serious issue. For the English language, the encoded length is nearly always a single byte. However, even for non-English languages, text is &lt;a href=&quot;http://utf8everywhere.org/&quot;&gt;usually accompanied by markup from the ASCII range of characters&lt;/a&gt;, and, overall, the encoded lengths will still have consistency. As I said, the CPU predicts branches based on the program’s previous behavior, so this means it will temporarily learn some of the statistical properties of the language being actively decoded. Pretty cool, eh?&lt;/p&gt;
&lt;p&gt;Eliminating branches from the decoder side-steps any issues with mispredicting encoded lengths. Only errors in the stream will cause stalls. Since that’s probably the unusual case, the branch predictor will be very successful by continually predicting success. That’s one optimistic CPU.&lt;/p&gt;
&lt;h3 id=&quot;the-branchless-decoder&quot;&gt;The branchless decoder&lt;/h3&gt;
&lt;p&gt;Here’s the interface to my branchless decoder:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8_decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I chose &lt;code class=&quot;highlighter-rouge&quot;&gt;void *&lt;/code&gt; for the buffer so that it doesn’t care what type was actually chosen to represent the buffer. It could be a &lt;code class=&quot;highlighter-rouge&quot;&gt;uint8_t&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;char&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned char&lt;/code&gt;, etc. Doesn’t matter. The encoder accesses it only as bytes.&lt;/p&gt;
&lt;p&gt;On the other hand, with this interface you’re forced to use &lt;code class=&quot;highlighter-rouge&quot;&gt;uint32_t&lt;/code&gt; to represent code points. You could always change the function to suit your own needs, though.&lt;/p&gt;
&lt;p&gt;Errors are returned in &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;. It’s zero for success and non-zero when an error was detected, without any particular meaning for different values. Error conditions are mixed into this integer, so a zero simply means the absence of error.&lt;/p&gt;
&lt;p&gt;This is where you could accuse me of “cheating” a little bit. The caller probably wants to check for errors, and so &lt;em&gt;they&lt;/em&gt; will have to branch on &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;. It seems I’ve just smuggled the branches outside of the decoder.&lt;/p&gt;
&lt;p&gt;However, as I pointed out, unless you’re expecting lots of errors, the real cost is branching on encoded lengths. Furthermore, the caller could instead accumulate the errors: count them, or make the error “sticky” by ORing all &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; values together. Neither of these require a branch. The caller could decode a huge stream and only check for errors at the very end. The only branch would be the main loop (“are we done yet?”), which is trivial to predict with high accuracy.&lt;/p&gt;
&lt;p&gt;The first thing the function does is extract the encoded length of the next code point:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lengths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lengths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking back to the UTF-8 table above, only the highest 5 bits determine the length. That’s 32 possible values. The zeros are for invalid prefixes. This will later cause a bit to be set in &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the length in hand, it can compute the position of the next code point in the buffer.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Originally this expression was the return value, computed at the very end of the function. However, after inspecting the compiler’s assembly output, I decided to move it up, and the result was a solid performance boost. That’s because it spreads out dependent instructions. With the address of the next code point known so early, the instructions that decode the next code point can get started early.&lt;/p&gt;
&lt;p&gt;The reason for the &lt;code class=&quot;highlighter-rouge&quot;&gt;!len&lt;/code&gt; is so that the pointer is advanced one byte even in the face of an error (length of zero). Adding that &lt;code class=&quot;highlighter-rouge&quot;&gt;!len&lt;/code&gt; is actually somewhat costly, though I couldn’t figure out why.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shiftc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;masks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shiftc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This reads four bytes regardless of the actual length. Avoiding doing something is branching, so this can’t be helped. The unneeded bits are shifted out based on the length. That’s all it takes to decode UTF-8 without branching.&lt;/p&gt;
&lt;p&gt;One important consequence of always reading four bytes is that &lt;strong&gt;the caller &lt;em&gt;must&lt;/em&gt; zero-pad the buffer to at least four bytes&lt;/strong&gt;. In practice, this means padding the entire buffer with three bytes in case the last character is a single byte.&lt;/p&gt;
&lt;p&gt;The padding must be zero in order to detect errors. Otherwise the padding might look like legal continuation bytes.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4194304&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65536&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shifte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// surrogate half?
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xc0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xc0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shifte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first line checks if the shortest encoding was used, setting a bit in &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; if it wasn’t. For a length of 0, this always fails.&lt;/p&gt;
&lt;p&gt;The second line checks for a surrogate half by checking for a certain prefix.&lt;/p&gt;
&lt;p&gt;The next three lines accumulate the highest two bits of each continuation byte into &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;. Each should be the bits &lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt;. These bits are “compared” to &lt;code class=&quot;highlighter-rouge&quot;&gt;101010&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;0x2a&lt;/code&gt;) using XOR. The XOR clears these bits as long as they exactly match.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://nullprogram.com/img/diagram/utf8-bits.svg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Finally the continuation prefix bits that don’t matter are shifted out.&lt;/p&gt;
&lt;h3 id=&quot;the-goal&quot;&gt;The goal&lt;/h3&gt;
&lt;p&gt;My primary — and totally arbitrary — goal was to beat the performance of &lt;a href=&quot;http://bjoern.hoehrmann.de/utf-8/decoder/dfa/&quot;&gt;Bjoern Hoehrmann’s DFA-based decoder&lt;/a&gt;. Under favorable (and artificial) benchmark conditions I had moderate success. You can try it out on your own system by cloning the repository and running &lt;code class=&quot;highlighter-rouge&quot;&gt;make bench&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With GCC 6.3.0 on an i7-6700, my decoder is about 20% faster than the DFA decoder in the benchmark. With Clang 3.8.1 it’s just 1% faster.&lt;/p&gt;
&lt;p&gt;The benchmark operates very similarly to &lt;a href=&quot;http://nullprogram.com/blog/2017/09/21/&quot;&gt;my PRNG shootout&lt;/a&gt; (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;alarm(2)&lt;/code&gt;). First a buffer is filled with random UTF-8 data, then the decoder decodes it again and again until the alarm fires. The measurement is the number of bytes decoded.&lt;/p&gt;
&lt;p&gt;The number of errors is printed at the end (always 0) in order to force errors to actually get checked for each code point. Otherwise the sneaky compiler omits the error checking from the branchless decoder, making it appear much faster than it really is — a serious letdown once I noticed my error. Since the other decoder is a DFA and error checking is built into its graph, the compiler can’t really omit its error checking.&lt;/p&gt;
&lt;p&gt;I called this “favorable” because the buffer being decoded isn’t anything natural. Each time a code point is generated, first a length is chosen uniformly: 1, 2, 3, or 4. Then a code point that encodes to that length is generated. The &lt;strong&gt;even distribution of lengths greatly favors a branchless decoder&lt;/strong&gt;. The random distribution inhibits branch prediction. Real text has a far more favorable distribution.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;randchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;65536&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65536&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;131072&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65536&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Given the odd input zero-padding requirement and the artificial parameters of the benchmark, despite the supposed 20% speed boost under GCC, my branchless decoder is not really any better than the DFA decoder in practice. It’s just a different approach. In practice I’d prefer Bjoern’s DFA decoder.&lt;/p&gt;
&lt;ol class=&quot;references print-only&quot;/&gt;&lt;nav class=&quot;no-print&quot;&gt;
&lt;/nav&gt;
</description>
<pubDate>Sat, 07 Oct 2017 13:24:02 +0000</pubDate>
<dc:creator>zdw</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://nullprogram.com/blog/2017/10/06/</dc:identifier>
</item>
<item>
<title>Sorting Visualizations</title>
<link>https://imgur.com/gallery/RM3wl</link>
<guid isPermaLink="true" >https://imgur.com/gallery/RM3wl</guid>
<description>&lt;div id=&quot;lqbv0fw&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;34.5&quot;&gt;

&lt;div class=&quot;post-image-meta&quot; readability=&quot;14&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;First up: Bubble Sort&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;Generally one of the very first algorithms learned when you're introduced to this stuff in programming classes. Bubble sort finds the largest value in a set and &quot;bubbles&quot; it to the top. For this visualization, that's the far right side. Everything further along the line than that value gets shifted down one spot, and then the algorithm goes back to the start and finds the next largest value to put at the end of what's left. You can see the unsorted portion slowly being shifted down to the left, one iteration at a time, while the completely sorted portion grows from the right.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;RNEkzuj&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;36&quot;&gt;

&lt;div class=&quot;post-image-meta&quot; readability=&quot;17&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;#2: Cocktail Sort&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;This one is basically bubble sort but it goes back and forth across the data. When it bubbles the first value to the top, it then says &quot;well, I'm all the way on the right, I might as well start looking for the smallest value and &quot;bubble&quot; that to the left while I go back down that way. The middle, unsorted portion seems to jiggle because in general, the values are smaller than the largest one being bubbled up, but then it turns right around and they're larger than the one being bubbled down, so they keep getting shifted left and right repeatedly. Might be part of why it's called a cocktail sort - like a cocktail shaker.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;VVnRU6V&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;34.5&quot;&gt;

&lt;div class=&quot;post-image-meta&quot; readability=&quot;14&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;#3: Selection Sort&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;Selection sort is another one of the early sorting algorithms taught to students. It divides the set of data into two sections: a sorted part, and an unsorted part. The algorithm runs through the unsorted part and keeps track of where the lowest value is, and plops that into the sorted part. Then it goes back to the unsorted part and finds the next lowest, then plops that at the end of the sorted part. It keeps doing it, slowly building up the sorted part until the entire thing is just the sorted part.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;zR7gxjT&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;36&quot;&gt;

&lt;div class=&quot;post-image-meta&quot; readability=&quot;17&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;Number Four: Insertion Sort&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;This is pretty similar to Selection, since it has a sorted and unsorted portion of the data, but this one works a little differently. This algorithm looks at the first value, and says &quot;okay this is my sorted part&quot;, then it takes the next value, and inserts it into the sorted part where it belongs within the sorted part, then it checks the next piece and puts it where it belongs in that sorted portion, and it keeps going until it's placed all of the pieces.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;52E47sL&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;41&quot;&gt;

&lt;div class=&quot;post-image-meta&quot; readability=&quot;27&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;Fifth on the list: Odd-Even Sort&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;This is a peculiar one, and probably one you've seen before (a very similar visualization, the inspiration for this album, was on the front page of r/oddlysatisfying less than a week ago.) It appears to have two overlapping sections that slowly pull apart from each other into a sorted rainbow, but what's actually happening is just as magical. This algorithm works basically the same way as Bubble Sort, but it only checks half the values in one passthrough, first it looks at every odd value (the first, third, fifth, and so-on), still comparing them with the thing just above them, and then it goes back and looks at the even values (the second, fourth, sixth...) and compares those as well. As it turns out, doing the sorting this way kind of pulls the data apart from the middle. Values that are more out of position move faster than values closer to where they belong. And so you see the stuff in the middle (having less distance to travel on average than the stuff on the sides) getting to a sorted state well before stuff near the edges. Because this is still a variation of Bubble Sort, though, it does give a slight preference to moving values up, so the top portion will generally finish a little before the bottom portion.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;5rV2CF2&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;38.5&quot;&gt;

&lt;div class=&quot;post-image-meta&quot; readability=&quot;22&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;Six! Merge Sort!&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;This one's just kinda bizarre, but it makes sense if you think about it (or even if you don't). Merge sort says &quot;Okay, I'll sort these two, then I'll move on to the next two and sort those&quot; and it keeps sorting just 2 values until it reaches the end. Then it's like &quot;okay, now I'll sort those two sorted groups of 2 into a group of 4!&quot; and then it does! It runs through all of the data and groups the groups of two into groups of four, then it goes back and makes groups of 8, then 16, then 32! every time, doubling the size of each individual sorted group, until there are only 2 groups left to sort, and then it makes them into a single sorted group containing everything. It was hard finding a way to capture what was happening when it started grouping larger sections together without it taking 9 hours. Merge Sort generally does go faster the closer to the end it is, but it's not this drastic. This only shows the result of each &quot;merge&quot;, though it is still neat to see the small sorted gradients getting bigger and more precise as it goes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;anBHYYj&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;37&quot;&gt;

&lt;div class=&quot;post-image-meta&quot; readability=&quot;19&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;7: Shell Sort&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;Kind of the opposite of merge sort, this algorithm says &quot;okay, lets make big groups of kinda sorted stuff, then lets split those each into smaller groups that are slightly more sorted.&quot; It starts off kinda just lumping the low numbers on the left, the high numbers on the right, and everything else in the middle. Then it lumps everything into 5 groups, then 10, then 20, then 50, then 100! until it's a bajillion sorted groups that each only contain 1 value. This is what I imagine happening when computer experts on tv say &quot;enhance&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;AUNXZjU&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;46.5&quot;&gt;

&lt;div class=&quot;post-image-meta&quot; readability=&quot;38&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;Radix Sort - the weird one&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;Okay, not THE weird one, because heap sort's pretty bizarre too, but this one is very weird. Radix sort goes about sorting data using DIGITS! It looks at the lowest digit (since I used integers, that would be the one's digit) and sorts all of the 0's in one pile, then all the 1's then all the 2's, all the way up through the numbers that have a 9 at the end. Importantly, though, these all stay in order relative to the rest of their group, so if 82 was before 32 in the unsorted mess at the beginning, it's still before 32 after this first pass. This is important because the next step is to sort by the next digit (the ten's) and group them together, so &quot;01, 603, 07&quot; will all be together in the 0 pile, and because they stay in the same position relative to other members of the same group, 01, 02, 03, 04, ... up to 09 will all be in order, but maybe with some stuff between, like a 105, and a 302. And then it goes and sorts by the hundreds digit, which pulls everything into it's correct place. Just as a side note, a number like 8 can be compared to a number with more digits (300) just by adding leading zeroes, so it's read as 008, that way it's grouped correctly. This example only used values up to 360 to be an easy map to hues in the HSV color scale, but you can certainly use this with larger sets of data, and the algorithm would just keep going up the digits until there were none left to check.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;zxdc7NQ&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;45.5&quot;&gt;

&lt;div class=&quot;post-image-meta&quot; readability=&quot;36&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;9: Heap Sort - the other DEFINITE weird one.&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;I was having fun making these and I wanted to try a bunch of different sorting algorithms (there are a TON our there), and this one seemed neat: an algorithm that constructs what is essentially a binary tree inside the set of data, then cascades down that tree to find the proper values. I know, that doesn't really make any sense, but let me try to explain. The first step is to make this tree, by saying &quot;the very left side is the root of the tree, and it branches off into two sections, which we'll place in the next two spots. They each have 2 branches which go in the next four spots, and those each have two branches that go in the next 8 spots. It keeps constructing the tree, with the only rule that the numbers that are in the branch spots (the &quot;children&quot; of the &quot;parent&quot; number that they branched off from) have to be smaller than the parent. This places the largest value at the root of the tree, and it can be placed at the very end, starting off the sorted section of the data set. Next is to remake the tree, because now there's some random value where the root is, because it switched places with it. But we know that the next &quot;root&quot; is one of the two children of the original root (since they're bigger than all of their children, and one of them is bigger than the other) so we just take that child and swap it with the low value at the root, then we compare the children of that and pick the bigger one to swap with the low value again, sifting that low value down until it lands in the correct spot near the end again, and we have a shiny new tree that's very similar to the old one. It keeps doing that over and over until the whole thing is sorted. It sounds like it takes a lot of work, and brain-wise, yeah, it's hard to keep track of, but the algorithm only has to make like 20 comparisons to sift the low value down to the bottom of a tree with 1,000,000 numbers in it, and it always knows that the next sorted piece is at the root, so once the tree is constructed, it can sort the data freakishly fast.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;bCVppf4&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;48&quot;&gt;

&lt;div class=&quot;post-image-meta post-image-meta--last&quot; readability=&quot;41&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;10: Quick Sort ... What?&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;Okay, I don't even know... Quick sort is a pretty famous sorting algorithm, especially because of how good it is at combining a lot of ideas that new programming students need to learn into one magical unicorn of science. This algorithm is a recursive algorithm, which means it's a bit of code that runs itself over and over. Each time it breaks down what it's doing into smaller pieces and saying &quot;okay, now lets do the exact same thing to those smaller pieces, and we can totally break those down too into even smaller pieces!!&quot;. That's really the whole idea behind quick sort. It takes a value (for this example, I just told it to choose the value on the far left of where it's looking&quot;, and go &quot;okay, everything smaller than this on the left, everything larger than this on the right.&quot;, then you have that single value sorted exactly where it goes, and two halves of mostly unsorted values that definitely go somewhere in their section. Then it'll look at the left half and do the same thing, picking a value and dividing the unsorted mess into two groups. And it'll go deeper down that rabbit hole until it hits a point where the left and right sides are either 1 single value or just completely empty. Then it starts working its way back up the chain of self-calls and does the right half next. This is one of the absolute fastest algorithms out there, and it's relatively easy to implement, so usually if you have the resources available for it, it's a good bet (though that's a whole different topic). There is one issue with Quicksort, though, and that's how to pick the &quot;pivot&quot; - that value that you move everything to the left or right based on. Obviously, if it's a value that should be near the middle, then you'll have very good sorts, dividing the pile of unsorted nonsense very quickly and effectively, but what if you pick the value 1? well, everything goes on the right of that, so you didn't really sort much there, did you? If it happens over and over, this algorithm is basically as slow as selection sort (which is pretty slow, but still faster than me, so I still don't mind.) That's why you see these small stops and starts in the image. The agorithm is making bad choices because I didn't make it smart enough to choose a good pivot every time, it just randomly went with whatever was closest. Still, it's pretty fast. ... And I think that's it. I hope you enjoyed these visualizations as much as I enjoyed making them! Thanks for reading these massive walls of text. Let me know which gif was your favorite (mine is shell sort, there's just something extra satisfying about watching it work I think...) and if you know a cool algorithm you want to seen made into a rainbow, let me know and I'll probably do it. These are really fun to make.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
<pubDate>Sat, 07 Oct 2017 10:27:24 +0000</pubDate>
<dc:creator>infodroid</dc:creator>
<og:url>https://imgur.com/gallery/RM3wl</og:url>
<og:title>Sorting Visualizations</og:title>
<og:type>article</og:type>
<og:image>https://i.imgur.com/lqbv0fw.jpg?fb</og:image>
<og:description>Imgur: The most awesome images on the Internet.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://imgur.com/gallery/RM3wl</dc:identifier>
</item>
<item>
<title>Google accused of racketeering in lawsuit</title>
<link>http://www.mercurynews.com/2017/10/06/google-accused-of-racketeering-in-lawsuit-claiming-pattern-of-trade-secrets-theftt/</link>
<guid isPermaLink="true" >http://www.mercurynews.com/2017/10/06/google-accused-of-racketeering-in-lawsuit-claiming-pattern-of-trade-secrets-theftt/</guid>
<description>&lt;p&gt;MOUNTAIN VIEW — In an explosive new allegation, a renowned architect has accused Google of racketeering, saying in a lawsuit the company has a pattern of stealing trade secrets from people it first invites to collaborate.&lt;/p&gt;
&lt;p&gt;Architect Eli Attia spent 50 years developing what his lawsuit calls “game-changing new technology” for building construction. Google in 2010 struck a deal to work with him on commercializing it as software, and Attia moved with his family from New York to Palo Alto to focus on the initiative, code-named “Project Genie.”&lt;/p&gt;
&lt;p&gt;The project was undertaken in Google’s secretive “Google X” unit for experimental “moonshots.”&lt;/p&gt;
&lt;p&gt;But then Google and its co-founders Larry Page and Sergey Brin “plotted to squeeze Attia out of the project” and pretended to kill it but used Attia’s technology to “surreptitiously” spin off Project Genie into a new company, according to the lawsuit.&lt;/p&gt;
&lt;p&gt;“The real adding-insult-to-injury was Google telling him the project had been canceled and they weren’t going forward with it when in fact they were going full blast on it,” Attia’s lawyer Eric Buether said in an interview Friday.&lt;/p&gt;
&lt;p&gt;Also named as defendants are Google X founder Sebastian Thrun and Eric “Astro” Teller, the head of Google X, who are alleged to have negotiated with Attia over his technology.&lt;/p&gt;
&lt;p&gt;Google did not immediately respond to a request for comment, but a judge in the case noted last year that the firm has argued that Attia gave Google rights to his technology “without a condition of later payment.”&lt;/p&gt;
&lt;p&gt;Now Attia has added another allegation to the suit: the Mountain View tech giant’s actions follow a pattern that makes Google guilty of racketeering.&lt;/p&gt;
&lt;p&gt;“It’s cheaper to steal than to develop your own technology,” Buether said. “You can take it from somebody else and you have a virtually unlimited budget to fight these things in court.”&lt;/p&gt;

&lt;p&gt;Attia’s technology automates certain aspects of building design, to save time and money and allow architects and designers to focus on creative elements, Buether said.&lt;/p&gt;
&lt;p&gt;This week, a judge in Santa Clara County Superior Court approved the addition of racketeering claims to the lawsuit originally filed in 2014.&lt;/p&gt;
&lt;p&gt;Attia’s legal team uncovered six other incidents in which Google had engaged in a “substantially similar fact pattern of misappropriation of trade secrets” from other people or companies, according to a July 25 legal filing from Attia.&lt;/p&gt;
&lt;p&gt;“Google would solicit a party to share with it highly confidential trade secrets under a non-disclosure agreement, conduct negotiations with the party, then terminate negotiations with the party professing a lack of interest in the party’s technology, followed by the unlawful use of the party’s trade secrets in its business,” Attia said in the filing.&lt;/p&gt;
&lt;p&gt;Six lawsuits against Google, five of them resolved in the company’s favor because of procedural issues, reveal the pattern of intellectual property theft, Buether alleged. The company uses non-disclosure agreements to encourage a target to share confidential information, Buether claimed.&lt;/p&gt;
&lt;p&gt;“The person with that NDA feels comfortable in revealing the details of the technology which is proprietary because they see a huge opportunity with a company like Google,” Buether said.&lt;/p&gt;
&lt;p&gt;In Attia’s case, Google struck an agreement with him to use his intellectual property and patent some of it, but in spite of using it as the basis for a new firm called Flux Factory, failed to pay him as agreed, Buether claimed.&lt;/p&gt;
&lt;p&gt;“It’s even worse than just using the proprietary information — they actually then claim ownership through patent applications,” Buether said.&lt;/p&gt;
&lt;p&gt;Documents from the U.S. Patent and Trademark Office, submitted to the court by a Google lawyer, show that with regard to two building-design patent applications, Attia in 2011 signed over rights to the inventions described in the applications.&lt;/p&gt;
&lt;p&gt;Flux Factory, according to a filing by Attia, was “simply a reconstitution of Project Genie under a different name.”&lt;/p&gt;
&lt;p&gt;Today, Flux Factory is called Flux. Headquartered in San Francisco, it sells building-design software and markets itself as “the first company launched by Google X.”&lt;/p&gt;
&lt;p&gt;Attia’s suit seeks unspecified damages and compensation. His legal action was brought by Santa Monica software company Max Sound, which said it had made an agreement with Attia in 2014 to pursue intellectual property claims on his behalf. Max Sound’s penny stock trades over the counter and has plummeted in value to a thousandth of a cent from about 50 cents in November 2012. The firm’s reports to regulators show no revenue since 2014, and an $11.2 million loss last year.&lt;/p&gt;
&lt;p&gt;Max Sound CEO John Blaisure welcomed the judge’s decision to allow the racketeering claims, saying in a press release that “no one should be too big and powerful to avoid the consequences of being evil.”&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Updated&lt;/em&gt;: &lt;em&gt;This story was updated Saturday, Oct. 7 with material from court documents, regulatory filings and a press release. &lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 07 Oct 2017 03:41:45 +0000</pubDate>
<dc:creator>Jerry2</dc:creator>
<og:type>article</og:type>
<og:title>Google accused of racketeering in lawsuit claiming pattern of trade secrets theft</og:title>
<og:url>http://www.mercurynews.com/2017/10/06/google-accused-of-racketeering-in-lawsuit-claiming-pattern-of-trade-secrets-theftt/</og:url>
<og:description>Google has engaged in a pattern of trade secrets theft, making it guilty of racketeering, according to a lawsuit.</og:description>
<og:image>http://www.mercurynews.com/wp-content/uploads/2016/08/20150811__0812googlepage1.jpg?w=645&amp;h=496</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.mercurynews.com/2017/10/06/google-accused-of-racketeering-in-lawsuit-claiming-pattern-of-trade-secrets-theftt/</dc:identifier>
</item>
<item>
<title>&amp;#039;Our minds can be hijacked&amp;#039;: tech insiders who fear a smartphone dystopia</title>
<link>https://www.theguardian.com/technology/2017/oct/05/smartphone-addiction-silicon-valley-dystopia</link>
<guid isPermaLink="true" >https://www.theguardian.com/technology/2017/oct/05/smartphone-addiction-silicon-valley-dystopia</guid>
<description>&lt;p&gt;&lt;span class=&quot;drop-cap&quot;&gt;&lt;span class=&quot;drop-cap__inner&quot;&gt;J&lt;/span&gt;&lt;/span&gt;ustin Rosenstein had tweaked his laptop’s operating system to block Reddit, banned himself from Snapchat, which he compares to heroin, and imposed limits on his use of &lt;a href=&quot;https://www.theguardian.com/technology/facebook&quot; data-link-name=&quot;auto-linked-tag&quot; data-component=&quot;auto-linked-tag&quot; class=&quot;u-underline in-body-link--immersive&quot;&gt;Facebook&lt;/a&gt;. But even that wasn’t enough. In August, the 34-year-old tech executive took a more radical step to restrict his use of social media and other addictive technologies.&lt;/p&gt;
&lt;p&gt;Rosenstein purchased a new iPhone and instructed his assistant to set up a parental-control feature to prevent him from downloading any apps.&lt;/p&gt;
&lt;p&gt;He was particularly aware of the allure of Facebook “likes”, which he describes as “bright dings of pseudo-pleasure” that can be as hollow as they are seductive. And Rosenstein should know: he was the Facebook engineer who created the “like” button in the first place.&lt;/p&gt;
&lt;p&gt;A decade after he stayed up all night coding a prototype of what was then called an “awesome” button, Rosenstein belongs to a small but growing band of &lt;a href=&quot;https://www.theguardian.com/technology/silicon-valley&quot; data-link-name=&quot;auto-linked-tag&quot; data-component=&quot;auto-linked-tag&quot; class=&quot;u-underline in-body-link--immersive&quot;&gt;Silicon Valley&lt;/a&gt; heretics who complain about the rise of the so-called “attention economy”: an internet shaped around the demands of an advertising economy.&lt;/p&gt;
&lt;p&gt;These refuseniks are rarely founders or chief executives, who have little incentive to deviate from the mantra that their companies are making the world a better place. Instead, they tend to have worked a rung or two down the corporate ladder: designers, engineers and product managers who, like Rosenstein, several years ago put in place the building blocks of a digital world from which they are now trying to disentangle themselves. “It is very common,” Rosenstein says, “for humans to develop things with the best of intentions and for them to have unintended, negative consequences.”&lt;/p&gt;
&lt;p&gt;Rosenstein, who also helped create Gchat during a stint at Google, and now leads a &lt;a href=&quot;https://asana.com/&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline in-body-link--immersive&quot;&gt;San Francisco-based company&lt;/a&gt; that improves office productivity, appears most concerned about the psychological effects on people who, &lt;a href=&quot;https://blog.dscout.com/mobile-touches&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline in-body-link--immersive&quot;&gt;research shows&lt;/a&gt;, touch, swipe or tap their phone 2,617 times a day.&lt;/p&gt;
&lt;p&gt;There is growing concern that as well as addicting users, technology is contributing toward so-called “continuous partial attention”, severely limiting people’s ability to focus, and possibly lowering IQ. &lt;a href=&quot;http://www.journals.uchicago.edu/doi/10.1086/691462&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline in-body-link--immersive&quot;&gt;One recent study&lt;/a&gt; showed that the mere presence of smartphones damages cognitive capacity – even when the device is turned off. “Everyone is distracted,” Rosenstein says. “All of the time.”&lt;/p&gt;
&lt;aside class=&quot;element element-pullquote element--supporting&quot;&gt;&lt;blockquote&gt;
&lt;p class=&quot;pullquote-paragraph&quot;&gt;It is very common for humans to develop things with the best of intentions that have unintended, negative consequences&lt;/p&gt;
&lt;footer&gt;&lt;cite class=&quot;pullquote-cite&quot;&gt;Justin Rosenstein, creator of the 'like' button&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;/aside&gt;&lt;p&gt;But those concerns are trivial compared with the devastating impact upon the political system that some of Rosenstein’s peers believe can be attributed to the rise of social media and the attention-based market that drives it.&lt;/p&gt;
&lt;p&gt;Drawing a straight line between addiction to social media and political earthquakes like Brexit and the rise of Donald Trump, they contend that digital forces have completely upended the political system and, left unchecked, could even render democracy as we know it obsolete.&lt;/p&gt;
&lt;p&gt;In 2007, Rosenstein was one of a small group of Facebook employees who decided to create a path of least resistance – a single click – to “send little bits of positivity” across the platform. Facebook’s “like” feature was, Rosenstein says, “wildly” successful: engagement soared as people enjoyed the short-term boost they got from giving or receiving social affirmation, while Facebook harvested valuable data about the preferences of users that could be sold to advertisers. The idea was soon copied by &lt;a href=&quot;https://www.theguardian.com/technology/twitter&quot; data-link-name=&quot;auto-linked-tag&quot; data-component=&quot;auto-linked-tag&quot; class=&quot;u-underline in-body-link--immersive&quot;&gt;Twitter&lt;/a&gt;, with its heart-shaped “likes” (previously star-shaped “favourites”), Instagram, and countless other apps and websites.&lt;/p&gt;
&lt;p&gt;It was Rosenstein’s colleague, Leah Pearlman, then a product manager at Facebook and on the team that created the Facebook “like”, who announced the feature in a 2009 blogpost. Now 35 and an illustrator, Pearlman confirmed via email that she, too, &lt;a href=&quot;https://www.theringer.com/2017/2/15/16038024/how-the-like-button-took-over-the-internet-ebe778be2459&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline in-body-link--immersive&quot;&gt;has grown disaffected&lt;/a&gt; with Facebook “likes” and other addictive feedback loops. She has installed a web browser plug-in to eradicate her Facebook news feed, and hired a social media manager to monitor her Facebook page so that she doesn’t have to.&lt;/p&gt;

&lt;div class=&quot;u-responsive-ratio&quot;&gt;&lt;img class=&quot;gu-image&quot; itemprop=&quot;contentUrl&quot; alt=&quot;Justin Rosenstein, the former Google and Facebook engineer who helped build the ‘like’ button: ‘Everyone is distracted. All of the time.’&quot; src=&quot;https://i.guim.co.uk/img/media/96a451c69dc99a0969c1826a5d27086622b5b26e/0_220_1067_1333/master/1067.jpg?w=300&amp;amp;q=55&amp;amp;auto=format&amp;amp;usm=12&amp;amp;fit=max&amp;amp;s=fc23d268ba5cfbbbf0660e490e793a98&quot;/&gt;&lt;/div&gt;

Justin Rosenstein, the former Google and Facebook engineer who helped build the ‘like’ button: ‘Everyone is distracted. All of the time.’ Photograph: Courtesy of Asana Communications
&lt;p&gt;“One reason I think it is particularly important for us to talk about this now is that we may be the last generation that can remember life before,” Rosenstein says. It may or may not be relevant that Rosenstein, Pearlman and most of the tech insiders questioning today’s attention economy are in their 30s, members of the last generation that can remember a world in which telephones were plugged into walls.&lt;/p&gt;
&lt;p&gt;It is revealing that many of these younger technologists are weaning themselves off their own products, sending their children to elite Silicon Valley schools where iPhones, iPads and even laptops are banned. They appear to be &lt;a href=&quot;https://twitter.com/PaulLewis/status/843126905687621632&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline in-body-link--immersive&quot;&gt;abiding by a Biggie Smalls lyric&lt;/a&gt; from their own youth about the perils of dealing crack cocaine: never get high on your own supply.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span class=&quot;bullet&quot;&gt;•&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;•&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;•&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;One morning in April this year, designers, programmers and tech entrepreneurs from across the world gathered at a conference centre on the shore of the San Francisco Bay. They had each paid up to $1,700 to learn how to manipulate people into habitual use of their products, on a course curated by conference organiser Nir Eyal.&lt;/p&gt;
&lt;p&gt;Eyal, 39, the author of Hooked: How to Build Habit-Forming Products, has spent several years consulting for the tech industry, teaching techniques he developed by closely studying how the Silicon Valley giants operate.&lt;/p&gt;
&lt;aside class=&quot;element element-rich-link element--thumbnail element-rich-link--not-upgraded&quot; data-component=&quot;rich-link&quot; data-link-name=&quot;rich-link-4 | 1&quot;&gt;
&lt;/aside&gt;&lt;p&gt;“The technologies we use have turned into compulsions, if not full-fledged addictions,” Eyal writes. “It’s the impulse to check a message notification. It’s the pull to visit YouTube, Facebook, or Twitter for just a few minutes, only to find yourself still tapping and scrolling an hour later.” None of this is an accident, he writes. It is all “just as their designers intended”.&lt;/p&gt;
&lt;p&gt;He explains the subtle psychological tricks that can be used to make people develop habits, such as varying the rewards people receive to create “a craving”, or exploiting negative emotions that can act as “triggers”. “Feelings of boredom, loneliness, frustration, confusion and indecisiveness often instigate a slight pain or irritation and prompt an almost instantaneous and often mindless action to quell the negative sensation,” Eyal writes.&lt;/p&gt;
&lt;p&gt;Attendees of the 2017 Habit Summit might have been surprised when Eyal walked on stage to announce that this year’s keynote speech was about “something a little different”. He wanted to address the growing concern that technological manipulation was somehow harmful or immoral. He told his audience that they should be careful not to abuse persuasive design, and wary of crossing a line into coercion.&lt;/p&gt;
&lt;p&gt;But he was defensive of the techniques he teaches, and dismissive of those who compare tech addiction to drugs. “We’re not freebasing Facebook and injecting Instagram here,” he said. He flashed up a slide of a shelf filled with sugary baked goods. “Just as we shouldn’t blame the baker for making such delicious treats, we can’t blame tech makers for making their products so good we want to use them,” he said. “Of course that’s what tech companies will do. And frankly: do we want it any other way?”&lt;/p&gt;
&lt;aside class=&quot;element element-pullquote element--supporting&quot;&gt;&lt;blockquote&gt;
&lt;p class=&quot;pullquote-paragraph&quot;&gt;We’re not freebasing Facebook and injecting Instagram here&lt;/p&gt;
&lt;footer&gt;&lt;cite class=&quot;pullquote-cite&quot;&gt;Nir Eyal, tech consultant&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;/aside&gt;&lt;p&gt;Without irony, Eyal finished his talk with some personal tips for resisting the lure of technology. He told his audience he uses a Chrome extension, called DF YouTube, “which scrubs out a lot of those external triggers” he writes about in his book, and recommended an app called Pocket Points that “rewards you for staying off your phone when you need to focus”.&lt;/p&gt;
&lt;p&gt;Finally, Eyal confided the lengths he goes to protect his own family. He has installed in his house an outlet timer connected to a router that cuts off access to the internet at a set time every day. “The idea is to remember that we are not powerless,” he said. “We are in control.”&lt;/p&gt;
&lt;p&gt;But are we? If the people who built these technologies are taking such radical steps to wean themselves free, can the rest of us reasonably be expected to exercise our free will?&lt;/p&gt;
&lt;p&gt;Not according to Tristan Harris, a 33-year-old former &lt;a href=&quot;https://www.theguardian.com/technology/google&quot; data-link-name=&quot;auto-linked-tag&quot; data-component=&quot;auto-linked-tag&quot; class=&quot;u-underline in-body-link--immersive&quot;&gt;Google&lt;/a&gt; employee turned vocal critic of the tech industry. “All of us are jacked into this system,” he says. “All of our minds can be hijacked. Our choices are not as free as we think they are.”&lt;/p&gt;
&lt;p&gt;Harris, who &lt;a href=&quot;https://www.theatlantic.com/magazine/archive/2016/11/the-binge-breaker/501122/&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline in-body-link--immersive&quot;&gt;has been branded&lt;/a&gt; “the closest thing Silicon Valley has to a conscience”, insists that billions of people have little choice over whether they use these now ubiquitous technologies, and are largely unaware of the invisible ways in which a small number of people in Silicon Valley are shaping their lives.&lt;/p&gt;
&lt;p&gt;A graduate of Stanford University, Harris studied under BJ Fogg, a behavioural psychologist revered in tech circles for mastering the ways technological design can be used to persuade people. Many of his students, including Eyal, have gone on to prosperous careers in Silicon Valley.&lt;/p&gt;

&lt;div class=&quot;u-responsive-ratio&quot;&gt;&lt;img class=&quot;gu-image&quot; itemprop=&quot;contentUrl&quot; alt=&quot;Tristan Harris, a former Google employee, is now a critic of the tech industry: ‘Our choices are not as free as we think they are.’&quot; src=&quot;https://i.guim.co.uk/img/media/f7ec04671841de16a68c3f3be5300d635ce0130c/0_319_3825_4781/master/3825.jpg?w=300&amp;amp;q=55&amp;amp;auto=format&amp;amp;usm=12&amp;amp;fit=max&amp;amp;s=ba7ecc53c08da65ce8851ffb728d2867&quot;/&gt;&lt;/div&gt;

Tristan Harris, a former Google employee, is now a critic of the tech industry: ‘Our choices are not as free as we think they are.’ Photograph: Robert Gumpert for the Guardian
&lt;p&gt;Harris is the student who went rogue; a whistleblower of sorts, he is lifting the curtain on the vast powers accumulated by technology companies and the ways they are using that influence. “A handful of people, working at a handful of technology companies, through their choices will steer what a billion people are thinking today,” he said at &lt;a href=&quot;https://www.ted.com/talks/tristan_harris_the_manipulative_tricks_tech_companies_use_to_capture_your_attention&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline in-body-link--immersive&quot;&gt;a recent TED talk&lt;/a&gt; in Vancouver.&lt;/p&gt;
&lt;p&gt;“I don’t know a more urgent problem than this,” Harris says. “It’s changing our democracy, and it’s changing our ability to have the conversations and relationships that we want with each other.” Harris went public – giving talks, writing papers, meeting lawmakers and campaigning for reform after three years struggling to effect change inside Google’s Mountain View headquarters.&lt;/p&gt;
&lt;p&gt;It all began in 2013, when he was working as a product manager at Google, and circulated a thought-provoking memo, A Call To Minimise Distraction &amp;amp; Respect Users’ Attention, to 10 close colleagues. It struck a chord, spreading to some 5,000 Google employees, including senior executives who rewarded Harris with an impressive-sounding new job: he was to be Google’s in-house design ethicist and product philosopher.&lt;/p&gt;
&lt;p&gt;Looking back, Harris sees that he was promoted into a marginal role. “I didn’t have a social support structure at all,” he says. Still, he adds: “I got to sit in a corner and think and read and understand.”&lt;/p&gt;
&lt;p&gt;He explored how LinkedIn exploits a need for social reciprocity to widen its network; how YouTube and Netflix autoplay videos and next episodes, depriving users of a choice about whether or not they want to keep watching; how Snapchat created its addictive Snapstreaks feature, encouraging near-constant communication between its mostly teenage users.&lt;/p&gt;
&lt;aside class=&quot;element element-pullquote element--supporting&quot;&gt;&lt;blockquote&gt;
&lt;p class=&quot;pullquote-paragraph&quot;&gt;I have two kids and I regret every minute that I’m not paying attention to them because my smartphone has sucked me in&lt;/p&gt;
&lt;footer&gt;&lt;cite class=&quot;pullquote-cite&quot;&gt;Loren Brichter, app designer&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;/aside&gt;&lt;p&gt;The techniques these companies use are not always generic: they can be algorithmically tailored to each person. An internal Facebook report &lt;a href=&quot;https://www.theguardian.com/technology/2017/may/01/facebook-advertising-data-insecure-teens&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline in-body-link--immersive&quot;&gt;leaked this year&lt;/a&gt;, for example, revealed that the company can identify when teens feel “insecure”, “worthless” and “need a confidence boost”. Such granular information, Harris adds, is “a perfect model of what buttons you can push in a particular person”.&lt;/p&gt;
&lt;p&gt;Tech companies can exploit such vulnerabilities to keep people hooked; manipulating, for example, when people receive “likes” for their posts, ensuring they arrive when an individual is likely to feel vulnerable, or in need of approval, or maybe just bored. And the very same techniques can be sold to the highest bidder. “There’s no ethics,” he says. A company paying Facebook to use its levers of persuasion could be a car business targeting tailored advertisements to different types of users who want a new vehicle. Or it could be a Moscow-based troll farm seeking to turn voters in a swing county in Wisconsin.&lt;/p&gt;
&lt;p&gt;Harris believes that tech companies never deliberately set out to make their products addictive. They were responding to the incentives of an advertising economy, experimenting with techniques that might capture people’s attention, even stumbling across highly effective design by accident.&lt;/p&gt;
&lt;p&gt;A friend at Facebook told Harris that designers initially decided the notification icon, which alerts people to new activity such as “friend requests” or “likes”, should be blue. It fit Facebook’s style and, the thinking went, would appear “subtle and innocuous”. “But no one used it,” Harris says. “Then they switched it to red and of course everyone used it.”&lt;/p&gt;

&lt;div class=&quot;u-responsive-ratio&quot;&gt;&lt;img class=&quot;gu-image&quot; itemprop=&quot;contentUrl&quot; alt=&quot;Facebook’s headquarters in Menlo Park, California. The company’s famous ‘likes’ feature has been described by its creator as ‘bright dings of pseudo-pleasure’.&quot; src=&quot;https://i.guim.co.uk/img/media/e2a9ac9f6c53fb30f08c00e6f3350feec283a2fd/0_0_3901_2341/master/3901.jpg?w=300&amp;amp;q=55&amp;amp;auto=format&amp;amp;usm=12&amp;amp;fit=max&amp;amp;s=3345b5a39ae175f88f15d961d042d766&quot;/&gt;&lt;/div&gt;

Facebook’s headquarters in Menlo Park, California. The company’s famous ‘likes’ feature has been described by its creator as ‘bright dings of pseudo-pleasure’. Photograph: Bloomberg/Bloomberg via Getty Images
&lt;p&gt;That red icon is now everywhere. When smartphone users glance at their phones, dozens or hundreds of times a day, they are confronted with small red dots beside their apps, pleading to be tapped. “Red is a trigger colour,” Harris says. “That’s why it is used as an alarm signal.”&lt;/p&gt;
&lt;p&gt;The most seductive design, Harris explains, exploits the same psychological susceptibility that makes gambling so compulsive: variable rewards. When we tap those apps with red icons, we don’t know whether we’ll discover an interesting email, an avalanche of “likes”, or nothing at all. It is the possibility of disappointment that makes it so compulsive.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;It’s this that explains how the pull-to-refresh mechanism, whereby users swipe down, pause and wait to see what content appears, rapidly became one of the most addictive and ubiquitous design features in modern technology. “Each time you’re swiping down, it’s like a slot machine,” Harris says. “You don’t know what’s coming next. Sometimes it’s a beautiful photo. Sometimes it’s just an ad.”&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span class=&quot;bullet&quot;&gt;•&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;•&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;•&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The designer who created the pull-to-refresh mechanism, first used to update Twitter feeds, is Loren Brichter, widely admired in the app-building community for his sleek and intuitive designs.&lt;/p&gt;
&lt;p&gt;Now 32, Brichter says he never intended the design to be addictive – but would not dispute the slot machine comparison. “I agree 100%,” he says. “I have two kids now and I regret every minute that I’m not paying attention to them because my smartphone has sucked me in.”&lt;/p&gt;
&lt;p&gt;Brichter created the feature in 2009 for Tweetie, his startup, mainly because he could not find anywhere to fit the “refresh” button on his app. Holding and dragging down the feed to update seemed at the time nothing more than a “cute and clever” fix. Twitter acquired Tweetie the following year, integrating pull-to-refresh into its own app.&lt;/p&gt;
&lt;p&gt;Since then the design has become one of the most widely emulated features in apps; the downward-pull action is, for hundreds of millions of people, as intuitive as scratching an itch.&lt;/p&gt;
&lt;aside class=&quot;element element-rich-link element--thumbnail element-rich-link--not-upgraded&quot; data-component=&quot;rich-link&quot; data-link-name=&quot;rich-link-4 | 2&quot;&gt;
&lt;/aside&gt;&lt;p&gt;Brichter says he is puzzled by the longevity of the feature. In an era of push notification technology, apps can automatically update content without being nudged by the user. “It could easily retire,” he says. Instead it appears to serve a psychological function: after all, slot machines would be far less addictive if gamblers didn’t get to pull the lever themselves. Brichter prefers another comparison: that it is like the redundant “close door” button in some elevators with automatically closing doors. “People just like to push it.”&lt;/p&gt;
&lt;p&gt;All of which has left Brichter, who has put his design work on the backburner while he focuses on building a house in New Jersey, questioning his legacy. “I’ve spent many hours and weeks and months and years thinking about whether anything I’ve done has made a net positive impact on society or humanity at all,” he says. He has blocked certain websites, turned off push notifications, restricted his use of the Telegram app to message only with his wife and two close friends, and tried to wean himself off Twitter. “I still waste time on it,” he confesses, “just reading stupid news I already know about.” He charges his phone in the kitchen, plugging it in at 7pm and not touching it until the next morning.&lt;/p&gt;
&lt;p&gt;“Smartphones are useful tools,” he says. “But they’re addictive. Pull-to-refresh is addictive. Twitter is addictive. These are not good things. When I was working on them, it was not something I was mature enough to think about. I’m not saying I’m mature now, but I’m a little bit more mature, and I regret the downsides.”&lt;/p&gt;
&lt;p&gt;Not everyone in his field appears racked with guilt. The two inventors listed on Apple’s patent for “managing notification connections and displaying icon badges” are Justin Santamaria and Chris Marcellino. Both were in their early 20s when they were hired by &lt;a href=&quot;https://www.theguardian.com/technology/apple&quot; data-link-name=&quot;auto-linked-tag&quot; data-component=&quot;auto-linked-tag&quot; class=&quot;u-underline in-body-link--immersive&quot;&gt;Apple&lt;/a&gt; to work on the iPhone. As engineers, they worked on the behind-the-scenes plumbing for push-notification technology, introduced in 2009 to enable real-time alerts and updates to hundreds of thousands of third-party app developers. It was a revolutionary change, providing the infrastructure for so many experiences that now form a part of people’s daily lives, from ordering an Uber to making a Skype call to receiving breaking news updates.&lt;br/&gt;&lt;/p&gt;

&lt;div class=&quot;u-responsive-ratio&quot;&gt;&lt;img class=&quot;gu-image&quot; itemprop=&quot;contentUrl&quot; alt=&quot;Loren Brichter, who in 2009 designed the pull-to-refresh feature now used by many apps, on the site of the home he’s building in New Jersey: ‘Smartphones are useful tools, but they’re addictive ... I regret the downsides.’&quot; src=&quot;https://i.guim.co.uk/img/media/8186b0af6081f21d3cfb6e76f11f2deaced1a918/0_0_4500_3000/master/4500.jpg?w=300&amp;amp;q=55&amp;amp;auto=format&amp;amp;usm=12&amp;amp;fit=max&amp;amp;s=ef4c474df73974c6380fa7f6b5effcf8&quot;/&gt;&lt;/div&gt;

Loren Brichter, who in 2009 designed the pull-to-refresh feature now used by many apps, on the site of the home he’s building in New Jersey: ‘Smartphones are useful tools, but they’re addictive … I regret the downsides.’ Photograph: Tim Knox for the Guardian
&lt;p&gt;But notification technology also enabled a hundred unsolicited interruptions into millions of lives, accelerating the arms race for people’s attention. Santamaria, 36, who now runs a startup after a stint as the head of mobile at Airbnb, says the technology he developed at Apple was not “inherently good or bad”. “This is a larger discussion for society,” he says. “Is it OK to shut off my phone when I leave work? Is it OK if I don’t get right back to you? Is it OK that I’m not ‘liking’ everything that goes through my Instagram screen?”&lt;/p&gt;
&lt;p&gt;His then colleague, Marcellino, agrees. “Honestly, at no point was I sitting there thinking: let’s hook people,” he says. “It was all about the positives: these apps connect people, they have all these uses – ESPN telling you the game has ended, or WhatsApp giving you a message for free from your family member in Iran who doesn’t have a message plan.”&lt;/p&gt;
&lt;p&gt;A few years ago Marcellino, 33, left the Bay Area, and is now in the final stages of retraining to be a neurosurgeon. He stresses he is no expert on addiction, but says he has picked up enough in his medical training to know that technologies can affect the same neurological pathways as gambling and drug use. “These are the same circuits that make people seek out food, comfort, heat, sex,” he says.&lt;/p&gt;
&lt;p&gt;All of it, he says, is reward-based behaviour that activates the brain’s dopamine pathways. He sometimes finds himself clicking on the red icons beside his apps “to make them go away”, but is conflicted about the ethics of exploiting people’s psychological vulnerabilities. “It is not inherently evil to bring people back to your product,” he says. “It’s capitalism.”&lt;/p&gt;
&lt;p&gt;That, perhaps, is the problem. Roger McNamee, a venture capitalist who benefited from hugely profitable investments in Google and Facebook, has grown disenchanted with both companies, arguing that their early missions have been distorted by the fortunes they have been able to earn through advertising.&lt;/p&gt;
&lt;aside class=&quot;element element-pullquote element--supporting&quot;&gt;&lt;blockquote&gt;
&lt;p class=&quot;pullquote-paragraph&quot;&gt;It’s changing our democracy, and it's changing our ability to have the conversations and relationships we want&lt;/p&gt;
&lt;footer&gt;&lt;cite class=&quot;pullquote-cite&quot;&gt;Tristan Harris, former design ethicist at Google&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;/aside&gt;&lt;p&gt;He identifies the advent of the smartphone as a turning point, raising the stakes in an arms race for people’s attention. “Facebook and Google assert with merit that they are giving users what they want,” McNamee says. “The same can be said about tobacco companies and drug dealers.”&lt;/p&gt;
&lt;p&gt;That would be a remarkable assertion for any early investor in Silicon Valley’s most profitable behemoths. But McNamee, 61, is more than an arms-length money man. Once an adviser to Mark Zuckerberg, 10 years ago McNamee introduced the Facebook CEO to his friend, Sheryl Sandberg, then a Google executive who had overseen the company’s advertising efforts. Sandberg, of course, became chief operating officer at Facebook, transforming the social network into another advertising heavyweight.&lt;/p&gt;
&lt;p&gt;McNamee chooses his words carefully. “The people who run Facebook and Google are good people, whose well-intentioned strategies have led to horrific unintended consequences,” he says. “The problem is that there is nothing the companies can do to address the harm unless they abandon their current advertising models.”&lt;/p&gt;

&lt;div class=&quot;u-responsive-ratio&quot;&gt;&lt;img class=&quot;gu-image&quot; itemprop=&quot;contentUrl&quot; alt=&quot;Google’s headquarters in Silicon Valley. One venture capitalist believes that, despite an appetite for regulation, some tech companies may already be too big to control: ‘The EU recently penalised Google $2.42bn for anti-monopoly violations, and Google’s shareholders just shrugged.’&quot; src=&quot;https://i.guim.co.uk/img/media/3a9fdf3ce5c23232f1425866bc3ce963ce037aae/0_124_5616_3370/master/5616.jpg?w=300&amp;amp;q=55&amp;amp;auto=format&amp;amp;usm=12&amp;amp;fit=max&amp;amp;s=537c52d68389334f79946f8ba3c3785e&quot;/&gt;&lt;/div&gt;

Google’s headquarters in Silicon Valley. One venture capitalist believes that, despite an appetite for regulation, some tech companies may already be too big to control: ‘The EU recently penalised Google $2.42bn for anti-monopoly violations, and Google’s shareholders just shrugged.’ Photograph: Ramin Talaie for the Guardian
&lt;p&gt;But how can Google and Facebook be forced to abandon the business models that have transformed them into two of the most profitable companies on the planet?&lt;/p&gt;
&lt;p&gt;McNamee believes the companies he invested in should be subjected to greater regulation, including new anti-monopoly rules. In Washington, there is growing appetite, &lt;a href=&quot;https://www.theguardian.com/us-news/2017/sep/26/tech-industry-washington-google-amazon-apple-facebook&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline in-body-link--immersive&quot;&gt;on both sides of the political divide&lt;/a&gt;, to rein in Silicon Valley. But McNamee worries the behemoths he helped build may already be too big to curtail. “The EU recently penalised Google $2.42bn for anti-monopoly violations, and Google’s shareholders just shrugged,” he says.&lt;/p&gt;
&lt;p&gt;Rosenstein, the Facebook “like” co-creator, believes there may be a case for state regulation of “psychologically manipulative advertising”, saying the moral impetus is comparable to taking action against fossil fuel or tobacco companies. “If we only care about profit maximisation,” he says, “we will go rapidly into dystopia.”&lt;br/&gt;&lt;/p&gt;
&lt;aside class=&quot;element element-rich-link element--thumbnail element-rich-link--not-upgraded&quot; data-component=&quot;rich-link&quot; data-link-name=&quot;rich-link-4 | 3&quot;&gt;
&lt;/aside&gt;&lt;h2&gt;&lt;strong&gt;&lt;span class=&quot;bullet&quot;&gt;•&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;•&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;•&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;James Williams does not believe talk of dystopia is far-fetched. The ex-Google strategist who built the metrics system for the company’s global search advertising business, he has had a front-row view of an industry he describes as the “largest, most standardised and most centralised form of attentional control in human history”.&lt;/p&gt;
&lt;p&gt;Williams, 35, left Google last year, and is on the cusp of completing a PhD at Oxford University exploring the ethics of persuasive design. It is a journey that has led him to question whether democracy can survive the new technological age.&lt;/p&gt;
&lt;p&gt;He says his epiphany came a few years ago, when he noticed he was surrounded by technology that was inhibiting him from concentrating on the things he wanted to focus on. “It was that kind of individual, existential realisation: what’s going on?” he says. “Isn’t technology supposed to be doing the complete opposite of this?”&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;That discomfort was compounded during a moment at work, when he glanced at one of Google’s dashboards, a multicoloured display showing how much of people’s attention the company had commandeered for advertisers. “I realised: this is literally a million people that we’ve sort of nudged or persuaded to do this thing that they weren’t going to otherwise do,” he recalls.&lt;/p&gt;
&lt;p&gt;He embarked on several years of independent research, much of it conducted while working part-time at Google. About 18 months in, he saw the Google memo circulated by Harris and the pair became allies, struggling to bring about change from within.&lt;/p&gt;
&lt;aside class=&quot;element element-pullquote element--supporting&quot;&gt;&lt;blockquote&gt;
&lt;p class=&quot;pullquote-paragraph&quot;&gt;It is not inherently evil to bring people back to your product. It’s capitalism&lt;/p&gt;
&lt;footer&gt;&lt;cite class=&quot;pullquote-cite&quot;&gt;Chris Marcellino, former Apple engineer&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;/aside&gt;&lt;p&gt;Williams and Harris left Google around the same time, and co-founded an advocacy group, &lt;a href=&quot;http://www.timewellspent.io/&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline in-body-link--immersive&quot;&gt;Time Well Spent&lt;/a&gt;, that seeks to build public momentum for a change in the way big tech companies think about design. Williams finds it hard to comprehend why this issue is not “on the front page of every newspaper every day.&lt;/p&gt;
&lt;p&gt;“Eighty-seven percent of people wake up and go to sleep with their smartphones,” he says. The entire world now has a new prism through which to understand politics, and Williams worries the consequences are profound.&lt;/p&gt;
&lt;p&gt;The same forces that led tech firms to hook users with design tricks, he says, also encourage those companies to depict the world in a way that makes for compulsive, irresistible viewing. “The attention economy incentivises the design of technologies that grab our attention,” he says. “In so doing, it privileges our impulses over our intentions.”&lt;/p&gt;
&lt;p&gt;That means privileging what is sensational over what is nuanced, appealing to emotion, anger and outrage. The news media is increasingly working in service to tech companies, Williams adds, and must play by the rules of the attention economy to “sensationalise, bait and entertain in order to survive”.&lt;/p&gt;

&lt;div class=&quot;u-responsive-ratio&quot;&gt;&lt;img class=&quot;gu-image&quot; itemprop=&quot;contentUrl&quot; alt=&quot;Tech and the rise of Trump: as the internet designs itself around holding our attention, politics and the media has become increasingly sensational.&quot; src=&quot;https://i.guim.co.uk/img/media/c31c10b6617b9b66d1bd570231b297c572be2d6c/0_0_4782_3144/master/4782.jpg?w=300&amp;amp;q=55&amp;amp;auto=format&amp;amp;usm=12&amp;amp;fit=max&amp;amp;s=fb9f3476b487a1e994f24edff2215ca9&quot;/&gt;&lt;/div&gt;

Tech and the rise of Trump: as the internet designs itself around holding our attention, politics and the media has become increasingly sensational. Photograph: John Locher/AP
&lt;p&gt;In the wake of Donald Trump’s stunning electoral victory, many were quick to question the role of so-called “fake news” on Facebook, Russian-created Twitter bots or the data-centric targeting efforts that companies such as Cambridge Analytica used to sway voters. But Williams sees those factors as symptoms of a deeper problem.&lt;/p&gt;
&lt;p&gt;It is not just shady or bad actors who were exploiting the internet to change public opinion. The attention economy itself is set up to promote a phenomenon like Trump, who is masterly at grabbing and retaining the attention of supporters and critics alike, often by exploiting or creating outrage.&lt;/p&gt;
&lt;p&gt;Williams was making this case before the president was elected. &lt;a href=&quot;http://quillette.com/2016/10/03/the-clickbait-candidate/&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline in-body-link--immersive&quot;&gt;In a blog published a month before the US election&lt;/a&gt;, Williams sounded the alarm bell on an issue he argued was a “far more consequential question” than whether Trump reached the White House. The reality TV star’s campaign, he said, had heralded a watershed in which “the new, digitally supercharged dynamics of the attention economy have finally crossed a threshold and become manifest in the political realm”.&lt;/p&gt;
&lt;aside class=&quot;element element-rich-link element--thumbnail element-rich-link--not-upgraded&quot; data-component=&quot;rich-link&quot; data-link-name=&quot;rich-link-4 | 4&quot;&gt;
&lt;/aside&gt;&lt;p&gt;Williams saw a similar dynamic unfold months earlier, during the Brexit campaign, when the attention economy appeared to him biased in favour of the emotional, identity-based case for the UK leaving the European Union. He stresses these dynamics are by no means isolated to the political right: they also play a role, he believes, in the unexpected popularity of leftwing politicians such as Bernie Sanders and Jeremy Corbyn, and the frequent outbreaks of internet outrage over issues that ignite fury among progressives.&lt;/p&gt;
&lt;p&gt;All of which, Williams says, is not only distorting the way we view politics but, over time, may be changing the way we think, making us less rational and more impulsive. “We’ve habituated ourselves into a perpetual cognitive style of outrage, by internalising the dynamics of the medium,” he says.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;It is against this political backdrop that Williams argues the fixation in recent years with the surveillance state fictionalised by George Orwell may have been misplaced. It was another English science fiction writer, Aldous Huxley, who provided the more prescient observation when he warned that Orwellian-style coercion was less of a threat to democracy than the more subtle power of psychological manipulation, and “man’s almost infinite appetite for distractions”.&lt;/p&gt;
&lt;p&gt;Since the US election, Williams has explored another dimension to today’s brave new world. If the attention economy erodes our ability to remember, to reason, to make decisions for ourselves – faculties that are essential to self-governance – what hope is there for democracy itself?&lt;/p&gt;
&lt;p&gt;“The dynamics of the attention economy are structurally set up to undermine the human will,” he says. “If politics is an expression of our human will, on individual and collective levels, then the attention economy is directly undermining the assumptions that democracy rests on.” If Apple, Facebook, Google, Twitter, Instagram and Snapchat are gradually chipping away at our ability to control our own minds, could there come a point, I ask, at which democracy no longer functions?&lt;/p&gt;
&lt;p&gt;“Will we be able to recognise it, if and when it happens?” Williams replies. “And if we can’t, then how do we know it hasn’t happened already?”&lt;/p&gt;
</description>
<pubDate>Sat, 07 Oct 2017 01:25:10 +0000</pubDate>
<dc:creator>misnamed</dc:creator>
<og:url>http://www.theguardian.com/technology/2017/oct/05/smartphone-addiction-silicon-valley-dystopia</og:url>
<og:description>The Google, Apple and Facebook workers who helped make technology so addictive are disconnecting themselves from the internet. Paul Lewis reports on the Silicon Valley refuseniks who worry the race for human attention has created a world of perpetual distraction that could ultimately end in disaster</og:description>
<og:image>https://i.guim.co.uk/img/media/6173c04098fd89bea244ccd11da86ebfee3ebec4/900_0_3168_1901/master/3168.jpg?w=1200&amp;h=630&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;crop=faces%2Centropy&amp;bm=normal&amp;ba=bottom%2Cleft&amp;blend64=aHR0cHM6Ly91cGxvYWRzLmd1aW0uY28udWsvMjAxNi8wNS8yNS9vdmVybGF5LWxvZ28tMTIwMC05MF9vcHQucG5n&amp;s=951bca84cec34279ab73a973f584ad3e</og:image>
<og:type>article</og:type>
<og:title>'Our minds can be hijacked': the tech insiders who fear a smartphone dystopia</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theguardian.com/technology/2017/oct/05/smartphone-addiction-silicon-valley-dystopia</dc:identifier>
</item>
<item>
<title>Why many developers still prefer Objective-C to Swift</title>
<link>https://www.hackingwithswift.com/articles/27/why-many-developers-still-prefer-objective-c-to-swift</link>
<guid isPermaLink="true" >https://www.hackingwithswift.com/articles/27/why-many-developers-still-prefer-objective-c-to-swift</guid>
<description>&lt;p&gt;For several years after the iOS SDK was announced, developers were flocking to Objective-C as they sought to get their slice of the app development gold rush. But those times are gone: Swift has been with us for over three years now, and has largely pushed its older sibling from the limelight.&lt;/p&gt;
&lt;p&gt;Objective-C – once the rising star of the app development world – has started to become a second-class citizen in the Apple ecosystem. Yes, it might occasionally get dusted off for a slide or two at WWDC, but the majority of conference talks worldwide are in Swift, Apple is pushing Swift hard in the education space, and major language features come to Swift first.&lt;/p&gt;
&lt;p&gt;But if you’re still using Objective-C, you’re not alone – many other developers still prefer Objective-C to Swift, and with good reasons. I got in touch with some Objective-C developers to ask what’s holding them back, whether they feel Objective-C development has become stigmatized, and more – here’s what they had to say…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Views expressed here are personal and may not represent the views of their employers; people are listed in the order they responded; some answers were edited for length.&lt;/p&gt;
&lt;h3&gt;What are the main reasons holding you back from switching to Swift as your primary language?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Steve Troughton-Smith&lt;/strong&gt;: There are a variety of reasons why I avoid Swift. First and foremost, I don't enjoy using it – I find the language &lt;em&gt;much&lt;/em&gt; more difficult to read and parse than ObjC, especially with if-let variable assignment in loops and switch statements (which is chaotically overused in Apple's body of sample code, like for ARKit). I am no newcomer to different languages, having written things for all kinds of platforms, and Swift is definitely at the extreme low end of the legibility spectrum for me.&lt;/p&gt;
&lt;p&gt;I'm not yet convinced of Apple's level of participation in the language — four years on, Swift is not used for important pieces of iOS, OS or frameworks (I maintain a running list of Swift apps from Apple on Twitter, and macOS is definitely less shy about adopting it for new features than iOS). I understand why that is the case (ABI stability, etc), but if Apple's not using it for everything I don't see why I need to be beta-testing on their behalf. I lose nothing from waiting until Swift is 'ready', and I gain all the benefits of Objective-C in the meantime.&lt;/p&gt;
&lt;blockquote class=&quot;hws-interview&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;I'm fully of the belief that just because Apple builds something and says it's the way forward doesn't mean it's the right choice&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Anecdotally I had heard, for the first few years, that Apple was as divided on Swift as anybody — Apple is, of course, a massive body of ObjC developers and Swift was as much a surprise for many of them as it was for us. And I'm fully of the belief that just because Apple builds something and says it's the way forward doesn't mean it's the right choice — we've seen a whole bunch of missteps (discoveryd, iOS 7, iOS 8) or 'mehs' (macOS, Touch Bar) from Apple in the past several years, and it certainly doesn't hurt to wait and see how it pans out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Michael Lauer:&lt;/strong&gt; I don’t see the incentive. I’m extremely productive in Objective-C and I view the language as very elegant, concise, and expressive. If there were first-class (async) concurrency in Swift, I’d jump in a minute. In contrast, I hear about slow compilation times, massive duplication of runtime libraries, and I have yet to see a significant runtime performance improvement.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dan Leivers:&lt;/strong&gt; For prototypes or very small projects I’ll use Objective-C, purely for ease of updating after a significant period of time has passed (which is often likely with those types of clients). I also maintain Objective-C apps for a number of clients and there’s simply no time (or reason to switch them to Swift). Cutting new code for those projects in Swift often ends up with the same scenario mentioned for prototypes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Peter Molnar:&lt;/strong&gt; To be honest before version 3.0 the main roadblock for me was the missing source code compatibility, and even after 4.0 I am still waiting for ABI stability. I think that’s the only one issue left, and personally I feel that this is less important for me if the source compatibility works.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Todd Thomas:&lt;/strong&gt; Xcode support for Swift seems laughable. From stupid long compile times for large projects to crappy refactoring and debugging. Tweetbot for Mac is a fairly sizable project and it takes 44 seconds to compile it on a 2012 Retina MBP. That includes 1 framework, 1 library and the app itself. Also, Swift isn’t ABI stable yet – when I don’t need to ship the Swift libs with my app I'll be more likely to start slowly converting some parts of the app to Swift.&lt;/p&gt;
&lt;blockquote class=&quot;hws-interview&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;Our build times are ~6 hours for a full clean build, and adding to that would not be great.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ian McDowell:&lt;/strong&gt; We have a &lt;em&gt;ton&lt;/em&gt; of shared C++ code for our business logic, which is shared with Windows &amp;amp; Android. We write our UI in native UIKit/AppKit in Objective-C, and have a lot of Objective-C++ files to bridge between the two languages. As of yet, we have not adopted Swift for much, aside from a few scripts &amp;amp; internal tools. Hearing from other teams using Swift, the compile times are slower than Objective-C/C++.&lt;/p&gt;
&lt;p&gt;We have hundreds of Xcode projects, all eventually compiled into a giant static library that is linked into each of the app binaries. This is done to reduce app launch times. Our build times are ~6 hours for a full clean build, and adding to that would not be great.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simon Wolf:&lt;/strong&gt; My primary coding project is for a client and it’s a large codebase which has evolved over several years. Whilst I’ll introduce some Swift into it, because a lot of the work I do involves editing the existing code it prevents me from using too much Swift.&lt;/p&gt;
&lt;p&gt;As a consultant I am also aware that each time there is a new major version of Swift I’d either have to charge them to update what they see (correctly!) as working code or take the him myself. Neither are ideal propositions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Marco Arment:&lt;/strong&gt; For me, it’s not a judgment about Swift itself, but a pragmatic decision: I’m already an expert in Objective-C and extremely productive while using it, and the benefits of switching to Swift aren’t compelling enough to overcome the costs for me.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Marcel Weiher:&lt;/strong&gt; A lot of my best work includes heavy metaprogramming and the judicious mixing of the C parts of Objective-C with the dynamic messaging parts. All that gets more difficult, so much that you couldn’t, for example, write CoreData in Swift. Also churn: I just tried to find some sample code for Apple Pencil. All of it was Swift. None of it compiles today.&lt;/p&gt;
&lt;h3&gt;Have you ever felt developers might get a little stigmatized for using Objective-C, or talking about it on social media?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Steve Troughton-Smith&lt;/strong&gt;: A little? It's deeply unpopular to use ObjC or say you like ObjC over Swift. Swift has a truly massive hype train, and you definitely don't want to stand in the way of it.&lt;/p&gt;
&lt;p&gt;Like anything that creates passionate and fully-bought-in fans, there's no point engaging in reasoned discussion. Swift users are just as (and more) aware of its downsides as I am, but they're happy to make that compromise because of the perceived benefits. I am not, and don't perceive the same benefits.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Michael Lauer:&lt;/strong&gt; Absolutely. I feel like I constantly must defend myself for &quot;being a dinosaur&quot;.&lt;/p&gt;
&lt;blockquote class=&quot;hws-interview&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;I believe Amy Worrall’s talk at iOSDevUK was in Objective-C and there was some unrest from the audience which seemed to be people not understanding it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Dan Leivers:&lt;/strong&gt; Definitely, there’s a drive for the new and shiny. Which is perhaps how many of the iOS community ended up there in the first place, so it’s not entirely unsurprising there’s still a push for the bleeding edge. I believe Amy Worrall’s talk at iOSDevUK was in Objective-C and there was some unrest from the audience which seemed to be people not understanding it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Peter Molnar:&lt;/strong&gt; I have this feeling more when I am reading the job titles and job descriptions, not necessarily in the social media. Everyone is looking for Senior Swift developers now&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Todd Thomas:&lt;/strong&gt; I don’t worry too much about it. The app should speak for itself. If it is good the users won’t care what it is written in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ian McDowell:&lt;/strong&gt; I have felt some stigma, but not a lot, about still using Objective-C. I use Swift for all of my personal projects and love it, and understand the reasons we don’t use it here at work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simon Wolf:&lt;/strong&gt; A little but because I don’t believe that Swift is bad and Objective-C is the one true Cocoa language I tend not avoid heated arguments about the pros and cons of Swift. I also haven’t seen people being too rude about Objective-C developers but as a Mac developer I tend to be on the edges of the iOS community anyway which is probably where most of the conflict is. I don’t think that Mac developers are as keen to use the latest and greatest. We’re still battling NSCell.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Marco Arment:&lt;/strong&gt; This is already starting, but every transition happens this way. Objective-C developers made fun of Carbon developers. It’s just a natural side effect whenever your language isn’t the currently considered “language of progress” anymore, but you’re still using it for pragmatic reasons. As a PHP developer on the web side, I’m accustomed to this.&lt;/p&gt;
&lt;h3&gt;How do you feel when you see conferences use Swift most if not all of the time?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Steve Troughton-Smith&lt;/strong&gt;: Fully excluded; a Swift-only conference is one that has nothing for me. I don't want to have to care about Swift best practices or design patterns now before the language is fully formed and before Apple is using it at scale. I don't want to collate a dozen community-led design patterns, I want to do what Apple does.&lt;/p&gt;
&lt;blockquote class=&quot;hws-interview&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;A Swift-only conference is one that has nothing for me.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Knowing that Swift is the one true 'future' for Apple development has done a lot to push me away from wanting to make apps outright; the one-two punch of the iOS 7 UI with the Swift transition certainly made me feel like this isn't a platform I want to develop for anymore.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Michael Lauer:&lt;/strong&gt; It’s sad. Of course I can translate everything I see, but it’s more effort than before. And I refuse to submit talks to any conference where they demand examples in Swift. Thankfully there are still conferences for the “rest of us.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dan Leivers:&lt;/strong&gt; At least they’re mostly consistent!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Peter Molnar:&lt;/strong&gt; I think it’s the part of the evolution, but it is true – there is not too much life around Objective-C. Swift is new and thanks to it continuously changing there is a lot to talk about, and obviously a lot will also be obsolete by tomorrow.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Todd Thomas:&lt;/strong&gt; I guess if you want to be forward looking conferences should probably use Swift. I don’t mind personally but also don’t pay a huge amount of attention to conferences either.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ian McDowell:&lt;/strong&gt; I feel great, it’s the future!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simon Wolf:&lt;/strong&gt; I don’t mind it. I realize that Swift is the new shiny thing and, since I know Swift well enough to understand it, it really doesn’t worry me. Had I buried my head in the sand and not bothered to learn Swift I may feel left out but I don’t think that approach is conducive to being a good developer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Marco Arment:&lt;/strong&gt; It doesn’t bother me. Most conference organizers and attendees stay closer to the bleeding edge than I do, so of course they should use Swift. Translating Swift snippets to Objective-C from conferences, tutorials, and Stack Overflow is just one of the costs of continuing to use Objective-C today, and so far, that hasn’t proven to be especially burdensome. Over time, that burden will increase.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Marcel Weiher:&lt;/strong&gt; I have to admit I find a lot of the Swift talks very superficial and often laughably ill-informed, so I guess I feel disappointment. I know this sounds harsh, and there are obviously exceptions, but OMG.&lt;/p&gt;
&lt;h3&gt;Do you think the introduction of Swift has helped or hindered development of Objective-C as a language?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Steve Troughton-Smith&lt;/strong&gt;: Swift was absolutely catastrophic for Objective-C development; for any new APIs or features I no longer have sample code, WWDC slides, tutorials, GitHub or StackOverflow. Whatever about StackOverflow millennial jokes, but losing access to all of this context and knowledge is devastating. On the plus side, the ObjC language itself has gained a bunch of quality of life/syntactic sugar features to help it interop with Swift better, and all of those have been fantastic.&lt;/p&gt;
&lt;blockquote class=&quot;hws-interview&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;Swift was absolutely catastrophic for Objective-C development.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I really resent the fact that ObjC has to die to make Swift live — if the two languages could have lived independently of each other, everything would be fine for developers like me, who could just pick the language most appropriate for the task at hand. The passionate, massive movement behind Swift made that all but impossible, as well as Apple's cessation of creating ObjC resources for developers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Michael Lauer:&lt;/strong&gt; Mostly hindered. The benefits “we” got thanks to Swift were lightweight generics and nullability, but that’s about it. I can only dream about what could have been Objective-C if there was the same manpower behind it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dan Leivers:&lt;/strong&gt; I think it’s initially helped but I can’t help feel it’s mostly being put on the back burner now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Todd Thomas:&lt;/strong&gt; I think it has helped. They added many useful things to the language for Swift so we can’t complain about that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ian McDowell:&lt;/strong&gt; Objective-C has gotten a few nice features from Swift, including the &lt;code&gt;@available&lt;/code&gt; syntax and nullability specifiers. It’s a stable language and I haven't expected it to change any more than it has.&lt;/p&gt;
&lt;blockquote class=&quot;hws-interview&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;Unwrapping in Swift can be a pain but it has helped me adopt better practices in Objective-C.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Simon Wolf:&lt;/strong&gt; It’s helped in so far as there are some changes and improvements to Objective-C which are a result of Swift. In addition, writing a little Swift has encouraged me to look as some of my Objective-C coding practices and I’m less inclined to let nil objects sweep things under the carpets. Unwrapping in Swift can be a pain but it has helped me adopt better practices in Objective-C.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Marco Arment:&lt;/strong&gt; Swift has effectively stopped development of Objective-C as a language. That’s neither surprising nor unreasonable, but fortunately, Objective-C is pretty mature. The few years before Swift’s introduction brought a lot of improvements that should keep Objective-C usable until most of us move to Swift.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Marcel Weiher:&lt;/strong&gt; Obviously hindered, but Objective-C is OK for what it is and really needs a bullet in the head more than further development!&lt;/p&gt;
&lt;p&gt;What’s more surprising and somewhat disturbing is how many obvious defects in the libraries and “preferred coding styles” that would have been trivial to fix without introducing a whole new language weren’t until Swift arrived – and are now attributed to Swift. It’s almost as if these improvements were held back in order to make Swift look good, though I am pretty sure that’s not how it happened.&lt;/p&gt;
&lt;p&gt;However, the biggest negative impact will be that it will most likely prevent the development of successor that’s an actual improvement. We really have enough information to build such a beast now, and Apple ignored just about all of it. And that’s a crime.&lt;/p&gt;
&lt;h3&gt;What do &lt;em&gt;you&lt;/em&gt; think?&lt;/h3&gt;
&lt;p&gt;Along with all the questions above I also asked how long people had been using Objective-C, because I think it’s fair to say that familiarity with a language is always going to be important when choosing to stay or move.&lt;/p&gt;
&lt;p&gt;It shouldn’t come as a surprise to hear that most people said they’d been using Objective-C either immediately after the iPhone SDK was first launched or shortly after, with a couple having used it for well over ten years and one for 27 – yes, &lt;em&gt;twenty seven&lt;/em&gt; – years. I should add that one responder said they had started Objective-C relatively recently, so perhaps there’s still life in the old dog yet.&lt;/p&gt;
&lt;p&gt;One more thing: last year I wrote a book called &lt;a href=&quot;https://www.hackingwithswift.com/store/objective-c-for-swift-developers&quot;&gt;Objective-C for Swift Developers&lt;/a&gt;, and in the introduction I included a section titled “Do I love Objective-C?” Here’s what I wrote in there:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;When I read through the first complete draft of this book, I thought to myself, “wow, this reads like the Snark’s Guide to Objective-C,” because it felt like almost every chapter complained about something.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;As a result, I spent some time editing the book to make it a little more upbeat – not because I’m trying to present things to you in an artificial light, but because I genuinely loved working with Objective-C. I switched to Swift the day it was announced, and had a Swift app live on the App Store on the first day it was possible to do so. As a result, in many respects Objective- C only seems bad because Swift is so much better – I’ve been working with Swift so long that going back to Objective-C feels a bit like returning to your rural home town for Christmas when you’re used to living in a big city.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I can’t tell whether I loved Objective-C because I had Stockholm syndrome, or whether it was because Apple’s APIs are just so darned powerful. Regardless, I think it’s important you realize that some amazing software has been built with Objective-C and many people love it just as much today as they always have.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;When you find things in this book that make you cringe, be gentle: it’s an old language, it’s come a long way, and it has served us very well. At the very least, it deserves dignity in retirement!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thank you to Steve Troughton-Smith, Michael Lauer, Dan Leivers, Peter Molnar, Todd Thomas, Ian McDowell, Simon Wolf, Marco Arment, and Marcel Weiher for taking the time to contribute their views to this article.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now it’s over to you – if you still prefer using Objective-C over Swift, &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;https://twitter.com/twostraws&quot;&gt;let me know on Twitter&lt;/a&gt;!&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-url=&quot;https://www.hackingwithswift.com/articles/27/why-many-developers-still-prefer-objective-c-to-swift&quot; data-text=&quot;Why many developers still prefer Objective-C to Swift&quot; data-via=&quot;twostraws&quot; data-size=&quot;large&quot; data-hashtags=&quot;swiftlang&quot; data-count=&quot;none&quot;&gt;Tweet&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 06 Oct 2017 23:01:54 +0000</pubDate>
<dc:creator>Udo_Schmitz</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hackingwithswift.com/articles/27/why-many-developers-still-prefer-objective-c-to-swift</dc:identifier>
</item>
<item>
<title>A 2017 Nobel laureate says he left science because he ran out of money</title>
<link>https://qz.com/1095294/2017-nobel-laureate-jeffrey-hall-left-science-because-he-ran-out-of-funding/</link>
<guid isPermaLink="true" >https://qz.com/1095294/2017-nobel-laureate-jeffrey-hall-left-science-because-he-ran-out-of-funding/</guid>
<description>&lt;div&gt;
&lt;p&gt;Jeffrey Hall, a retired professor at Brandeis University, shared the &lt;a href=&quot;https://qz.com/1091769/the-2017-nobel-prize-in-medicine-goes-to-hall-rosbash-and-young-for-their-work-explaining-circadian-rhythm/&quot;&gt;2017 Nobel Prize in medicine&lt;/a&gt; for discoveries elucidating how our internal body clock works. He was honored along with Michael Young and his close collaborator Michael Roshbash. Hall said in &lt;a href=&quot;https://www.youtube.com/watch?v=AWbxsTm9fgQ&quot;&gt;an interview&lt;/a&gt; from his home in rural Maine that he collaborated with Roshbash because they shared common interests in “sports, rock and roll, beautiful substances and stuff.”&lt;/p&gt;
&lt;p&gt;About half of Hall’s professional career, starting in the 1980s, was spent trying to unravel the mysteries of the biological clock. When he left science some 10 years ago, he was not in such a jolly mood. In a lengthy 2008 interview with the journal &lt;a href=&quot;http://www.cell.com/current-biology/fulltext/S0960-9822(07)02369-X&quot;&gt;Current Biology&lt;/a&gt;, he brought up some serious issues with how research funding is allocated and how biases creep into scientific publications.&lt;/p&gt;
&lt;p&gt;He complained that some of the “stars” in science “have not really earned their status” yet they continued to receive massive amounts of funding. He also said that these stars have boasted to him that they almost never send their articles to “anywhere but &lt;em&gt;Nature, Cell&lt;/em&gt;, or &lt;em&gt;Science&lt;/em&gt;“&lt;em&gt;—&lt;/em&gt;among the three most prestigious science journals. “And they are nearly always published in one of those magazines—where, when you see something you know about, you realize that it’s not always so great,” he continued.&lt;/p&gt;

&lt;p&gt;Hall saved his most bitter remarks for when he was asked, “The implication is that you are not graced with the ability to function in this manner? Is this true, and is it why you are about to leave science early?”&lt;/p&gt;
&lt;p&gt;His answer:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes and yes. I admit that I resent running out of research money…recent applications from our lab have had their lungs ripped out, often accompanied by sneering, personal denunciations—perhaps reflecting the fact that this old-timer has lost his touch. But I still love the little flies and claim that my colleagues and I could continue to interact with them productively.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The little flies Hall referred to are fruit flies, the creatures Hall and his colleagues used to make the discoveries that led to the Nobel Prize. But he had more to say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p class=&quot;&quot;&gt;Whether or not a researcher of a certain notoriety deserves that the ‘support system’ [to] keep him going, there is a far more general problem: What props up biological research, at least in the vaunted US of A, involves a situation so deeply imbued with entitlement mentality that it has sunk into institutional corruption. A principal symptom of this state of affairs involves the following: People are hired after they have undergone long stints of training; and a potential hiree must present a large body of documented accomplishments. In my day you could get a faculty job with zero post-doc papers, as in the case of yours truly; but now the CV of a successful applicant looks like that of a newly minted full Professor from olden times. Notwithstanding these demands, and the associated high quality of a fledgling faculty-level type, the job starts with some “set-up” money for equipping the lab; but next to no means are provided to initiate that ‘research program’ and to sustain it during the years to come.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p class=&quot;&quot;&gt;US institutions (possibly also those in other countries) behave as though they… are entitled to research funding, which will magically materialize from elsewhere: “Get a grant, serf! If you can’t do it quickly, or have trouble for some years — or if your funding doesn’t get renewed, despite continuing productivity — forget it!” But what if there are so many applicants (as there are nowadays) that even a meritorious proposal gets the supplicant nowhere or causes a research group to grind prematurely to a halt? What if the situation is worsened when the government at hand is anti-science and otherwise squanders its resources on international adventurism?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;&quot;&gt;Having left science, Hall’s real worry was not for himself but the next generation of scientists:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p class=&quot;&quot;&gt;Having said all this, I acknowledge that “I got mine” from the government over the course of many years. Thus, as I say so long,” one component of my last-gasp disquiet stems from pompously worrying about biologists who are starting out or are in mid-career.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;inline-video&quot; itemprop=&quot;video&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot;&gt;&lt;iframe class=&quot;youtube-player&quot; type=&quot;text/html&quot; width=&quot;640&quot; height=&quot;390&quot; src=&quot;https://www.youtube.com/embed/-Ct1hkROmxc?version=3&amp;amp;rel=1&amp;amp;fs=1&amp;amp;autohide=2&amp;amp;showsearch=0&amp;amp;showinfo=1&amp;amp;iv_load_policy=1&amp;amp;wmode=transparent&quot; allowfullscreen=&quot;true&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;Read next: &lt;a href=&quot;https://qz.com/1091613/the-2017-nobel-prize-winners-in-medicine-physics-chemistry-peace-economics-and-literature/&quot;&gt;Quartz’s coverage of the 2017 Nobel Prizes&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;article-aside&quot;&gt;
&lt;aside class=&quot;popular-stories-module&quot;&gt;&lt;article&gt;&lt;h4 class=&quot;module-title&quot;&gt;Most Popular&lt;/h4&gt;
&lt;a href=&quot;https://qz.com/1095247/the-sociological-explanation-for-why-men-in-america-turn-to-gun-violence/&quot; title=&quot;The sociological explanation for why men in America turn to gun violence&quot;&gt;&lt;img src=&quot;https://qzprod.files.wordpress.com/2017/10/ap_17279579235691-e1507340863375.jpg?quality=80&amp;amp;strip=all&amp;amp;w=240&quot; alt=&quot;Melissa Gerber, left, hugs Sandra Serralde, both of Las Vegas, as they visit crosses placed in honor of those killed in the mass shooting Friday, Oct. 6, 2017, in Las Vegas. A gunman opened fire on an outdoor music concert on Sunday killing dozens and injuring hundreds.&quot;/&gt;&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;https://qz.com/1095247/the-sociological-explanation-for-why-men-in-america-turn-to-gun-violence/&quot; title=&quot;The sociological explanation for why men in America turn to gun violence&quot;&gt;The sociological explanation for why men in America turn to gun violence&lt;/a&gt;&lt;/h3&gt;
&lt;/article&gt;&lt;/aside&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;button class=&quot;read-full-story-button&quot;&gt;Read full story&lt;/button&gt;</description>
<pubDate>Fri, 06 Oct 2017 21:56:03 +0000</pubDate>
<dc:creator>Fede_V</dc:creator>
<og:title>A 2017 Nobel laureate left science because he ran out of money</og:title>
<og:type>article</og:type>
<og:image>https://qzprod.files.wordpress.com/2017/10/jeffrey-hall-nobel-prize-medicine-2017.jpg?quality=80&amp;strip=all&amp;w=1600</og:image>
<og:url>https://qz.com/1095294/2017-nobel-laureate-jeffrey-hall-left-science-because-he-ran-out-of-funding/</og:url>
<og:description>Back in 2008, Jeffrey Hall said &quot;recent applications from our lab have had their lungs ripped out, often accompanied by sneering, personal denunciations.&quot;</og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://qz.com/1095294/2017-nobel-laureate-jeffrey-hall-left-science-because-he-ran-out-of-funding/</dc:identifier>
</item>
<item>
<title>Redesigning the smartphone dial pad</title>
<link>https://uxdesign.cc/re-designing-the-smartphone-dial-pad-2df226ec620f</link>
<guid isPermaLink="true" >https://uxdesign.cc/re-designing-the-smartphone-dial-pad-2df226ec620f</guid>
<description>&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot; readability=&quot;7&quot;&gt;
&lt;p name=&quot;8cc6&quot; id=&quot;8cc6&quot; class=&quot;graf graf--p graf--leading&quot;&gt;Let’s start by looking at the timeline below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*NCaWtUtM4m642y-iQ3egxg.png&quot; data-width=&quot;3113&quot; data-height=&quot;1676&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*NCaWtUtM4m642y-iQ3egxg.png&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/1*NCaWtUtM4m642y-iQ3egxg.png&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot; readability=&quot;50.485207100592&quot;&gt;
&lt;p name=&quot;2251&quot; id=&quot;2251&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;There is something important about the image above. Despite significant transformation in the ergonomics and the modality of the phones physical form factor, the dial-pad design seems to have remained unchanged since 1963.&lt;/p&gt;
&lt;p name=&quot;4562&quot; id=&quot;4562&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So, looking at the image, one may question — Why did the Push Button phones changed the dial button positions from a circular arrangement to a different layout? (Even when the form factor had not changed significantly)&lt;/p&gt;
&lt;p name=&quot;dbdc&quot; id=&quot;dbdc&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The answer can be found in the short introduction below.&lt;/p&gt;
&lt;h3 name=&quot;32e5&quot; id=&quot;32e5&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Introduction&lt;/h3&gt;
&lt;p name=&quot;bb0a&quot; id=&quot;bb0a&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;On 18th Nov 1963, Bell System introduced the touch tone phone to the world. The touch tone pad replaced the old rotary dial.&lt;/p&gt;
&lt;p name=&quot;d6b7&quot; id=&quot;d6b7&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This touchtone dial-pad was not only different from its predecessor, but was also completely opposite of a very similar and popular layout of the calculators.&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*YqyRU_vBTiVY6NyhphsrKw.jpeg&quot; data-width=&quot;780&quot; data-height=&quot;443&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*YqyRU_vBTiVY6NyhphsrKw.jpeg&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*YqyRU_vBTiVY6NyhphsrKw.jpeg&quot;/&gt;&lt;/div&gt;
Credit: &lt;a href=&quot;http://www.vcalc.net/Keyboard.htm&quot; data-href=&quot;http://www.vcalc.net/Keyboard.htm&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;http://www.vcalc.net/Keyboard.htm&lt;/a&gt;
&lt;p name=&quot;2d46&quot; id=&quot;2d46&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;You can find a complete history and the science behind this decision on &lt;a href=&quot;http://99percentinvisible.org/article/squaring-circle-seventen-telephone-keypad-layouts/&quot; data-href=&quot;http://99percentinvisible.org/article/squaring-circle-seventen-telephone-keypad-layouts/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;99percentinvisible&lt;/a&gt;, but for the purpose of this post, what is important to note is that when Bell System asked the Texas Instruments and Sharp about why the calculator layout was designed the way it was, they said they did not conduct any research to define the calculator layout. They simply took the cue from the mechanical calculators (like the one shown below). These calculators had numbers 0-to-9 arranged from bottom to top.&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*3KFtHw0VHl4ofeLQz1cTtQ.jpeg&quot; data-width=&quot;889&quot; data-height=&quot;609&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*3KFtHw0VHl4ofeLQz1cTtQ.jpeg&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*3KFtHw0VHl4ofeLQz1cTtQ.jpeg&quot;/&gt;&lt;/div&gt;
Credit: &lt;a href=&quot;http://www.hpmuseum.org/ffmotor.htm&quot; data-href=&quot;http://www.hpmuseum.org/ffmotor.htm&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;http://www.hpmuseum.org/ffmotor.htm&lt;/a&gt;
&lt;p name=&quot;679c&quot; id=&quot;679c&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;So Bell System decided to conduct their own research, and after testing many different layouts, decided to choose the one that we all use now.&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*qWmyQ_xfOtBgEcdB0ySEgg.png&quot; data-width=&quot;918&quot; data-height=&quot;1496&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*qWmyQ_xfOtBgEcdB0ySEgg.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*qWmyQ_xfOtBgEcdB0ySEgg.png&quot;/&gt;&lt;/div&gt;
Credit: &lt;a href=&quot;https://archive.org/stream/bstj39-4-995#page/n3/mode/2up&quot; data-href=&quot;https://archive.org/stream/bstj39-4-995#page/n3/mode/2up&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;https://archive.org/stream/bstj39-4-995#page/n3/mode/2up&lt;/a&gt;
&lt;p name=&quot;1c53&quot; id=&quot;1c53&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This is an example of a great human factors study. But the study was done for physical push button dial pads.&lt;/p&gt;
&lt;p name=&quot;6f1f&quot; id=&quot;6f1f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Somehow we kept following the same layout when we moved from these fixed phone lines to cordless phones to push button mobile phones and now even on touchscreen based smartphones.&lt;/p&gt;
&lt;p name=&quot;411e&quot; id=&quot;411e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Until the phone screen sizes were small, people were able to handle dialing the numbers holding the phone with single hand. But now the phone sizes are getting bigger and bigger and this dial-pad layout is starting to fail.&lt;/p&gt;
&lt;h3 name=&quot;8f1a&quot; id=&quot;8f1a&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Why is it failing?&lt;/h3&gt;
&lt;p name=&quot;413d&quot; id=&quot;413d&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;&lt;a href=&quot;https://www.uxmatters.com/mt/archives/2013/02/how-do-users-really-hold-mobile-devices.php&quot; data-href=&quot;https://www.uxmatters.com/mt/archives/2013/02/how-do-users-really-hold-mobile-devices.php&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Steve Hoober&lt;/a&gt; has done studies on how we hold the phone. He suggests that most of us hold the phone from the bottom such that the base of our thumb is at the bottom right of the screen (considering 90% of population is right handed).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*RoVzWTb90D3fiEjlZsVe2Q.png&quot; data-width=&quot;2494&quot; data-height=&quot;1084&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*RoVzWTb90D3fiEjlZsVe2Q.png&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/1*RoVzWTb90D3fiEjlZsVe2Q.png&quot;/&gt;&lt;/div&gt;
Based on study conducted by Steve Hoober.&lt;/div&gt;
&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot; readability=&quot;34.546409214092&quot;&gt;
&lt;p name=&quot;a7d6&quot; id=&quot;a7d6&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This indicates that most likely the phone dialing will be done by the thumb in majority of the cases. So before we get into the dial-pad re-design exercise, let us also look at the thumb reach for different phone screen sizes.&lt;/p&gt;
&lt;p name=&quot;e8b5&quot; id=&quot;e8b5&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Again, you will find a lot of research about “Thumb Zone”. I will not talk much about it but just try to summarise it in this one image (below).&lt;/p&gt;
&lt;p name=&quot;5594&quot; id=&quot;5594&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Interestingly (and not surprisingly), the most efficient part of the screen is within the arc of the thumb and significantly on the lower half for most large smartphones.&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*LMtX_3ord07YElPtHkktIg.png&quot; data-width=&quot;1378&quot; data-height=&quot;700&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*LMtX_3ord07YElPtHkktIg.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*LMtX_3ord07YElPtHkktIg.png&quot;/&gt;&lt;/div&gt;
Source: &lt;a href=&quot;http://scotthurff.com/posts/how-to-design-for-thumbs-in-the-era-of-huge-screens&quot; data-href=&quot;http://scotthurff.com/posts/how-to-design-for-thumbs-in-the-era-of-huge-screens&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;http://scotthurff.com/posts/how-to-design-for-thumbs-in-the-era-of-huge-screens&lt;/a&gt;
&lt;h3 name=&quot;ba2e&quot; id=&quot;ba2e&quot; class=&quot;graf graf--h3 graf-after--figure&quot;&gt;Time to re-think&lt;/h3&gt;
&lt;blockquote name=&quot;fc3e&quot; id=&quot;fc3e&quot; class=&quot;graf graf--pullquote graf-after--h3&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;The primary focus of this study is to find a better dial-pad layout for the touch screen smartphones.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;9007&quot; id=&quot;9007&quot; class=&quot;graf graf--p graf-after--pullquote&quot;&gt;The hypothesis is that there might be a possibility to better re-arrange the number keys on the dial-pad to achieve higher efficiency. At the same time, it seeks answer to, whether the dial-pad we currently use is the best we can design? or there are possibilities we haven’t explored yet.&lt;/p&gt;
&lt;blockquote name=&quot;d165&quot; id=&quot;d165&quot; class=&quot;graf graf--pullquote graf-after--p&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Like those calculator companies, we are continuing to borrow from the legacy and apply the old designs in the new context.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;a3be&quot; id=&quot;a3be&quot; class=&quot;graf graf--p graf-after--pullquote&quot;&gt;Below, I have tried to re-create the Bell System experiment but this time for the smartphones.&lt;/p&gt;
&lt;p name=&quot;d925&quot; id=&quot;d925&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;To replicate the Bell Systems research in the current context, I designed a few alternative dial-pad layouts for smartphones (shown below).&lt;/p&gt;
&lt;p name=&quot;af53&quot; id=&quot;af53&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;These are the 6 layouts for the study (5 new and one existing layout):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*HZ7-XzVQT-G3yQo4mx36-Q.png&quot; data-width=&quot;5468&quot; data-height=&quot;1928&quot; data-is-featured=&quot;true&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*HZ7-XzVQT-G3yQo4mx36-Q.png&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/1*HZ7-XzVQT-G3yQo4mx36-Q.png&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot; readability=&quot;42.154639175258&quot;&gt;
&lt;blockquote name=&quot;c313&quot; id=&quot;c313&quot; class=&quot;graf graf--blockquote graf-after--figure&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;These new designs try to overcome the problem of the thumb reach by bringing all the frequently used buttons as closer to the “natural zone” as possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;0045&quot; id=&quot;0045&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;Some of the proposed new designs also challenge the existing mental model of the user and boldly attempts to re-position the keys in new configurations.&lt;/p&gt;
&lt;p name=&quot;233c&quot; id=&quot;233c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This study is an attempt to crowdsource and gather as much empirical data as possible, so that a strong case can be formed for a new and unique dial-pad layout suitable for the touchscreen smartphones.&lt;/p&gt;
&lt;p name=&quot;ef9a&quot; id=&quot;ef9a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;By conducting the study, I want to evaluate how these different dial-pads perform and also allow everyone to experience what these new dial-pad layouts feel like.&lt;/p&gt;
&lt;p name=&quot;f18c&quot; id=&quot;f18c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The study is an ongoing exercise, so there are findings from whatever data I have collected so far, but there is a need for larger dataset to be available to make this study even more powerful.&lt;/p&gt;
&lt;h3 name=&quot;dd3f&quot; id=&quot;dd3f&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Participate&lt;/h3&gt;
&lt;p name=&quot;7058&quot; id=&quot;7058&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;To facilitate everyone to participate and contribute to the study, I have created an iOS app. It is is &lt;a href=&quot;https://itunes.apple.com/us/app/dial-pad-ux/id1288812537&quot; data-href=&quot;https://itunes.apple.com/us/app/dial-pad-ux/id1288812537&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;available on iTunes app store&lt;/strong&gt;&lt;/a&gt; and I am looking for users who would like to test these different dial-pad layouts and submit their feedback for analysis.&lt;/p&gt;
&lt;p name=&quot;2e0e&quot; id=&quot;2e0e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;(I know, Android users, I will come out with one for you soon, but right now my skills are limited and I am not a programmer, just a humble UX designer who could pull together this iOS app. I am currently trying to figure out my way with Android coding too :D ).&lt;/em&gt;&lt;/p&gt;
&lt;p name=&quot;0b40&quot; id=&quot;0b40&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Also, I have created a &lt;a href=&quot;http://ssdesigninteractive.com/dialpad_research/&quot; data-href=&quot;http://ssdesigninteractive.com/dialpad_research/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;research study website&lt;/strong&gt;&lt;/a&gt; where you can view the results in detail.&lt;/p&gt;
&lt;p name=&quot;118f&quot; id=&quot;118f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So, feel free to download the app and give it a try. You can also use comments on Medium to post your feedback on using the app and different dial-pad designs.&lt;/p&gt;
&lt;/div&gt;

</description>
<pubDate>Fri, 06 Oct 2017 17:58:46 +0000</pubDate>
<dc:creator>ssdesign</dc:creator>
<og:title>Re-designing the smartphone Dial-Pad – uxdesign.cc</og:title>
<og:url>https://uxdesign.cc/re-designing-the-smartphone-dial-pad-2df226ec620f</og:url>
<og:image>https://cdn-images-1.medium.com/max/1200/1*HZ7-XzVQT-G3yQo4mx36-Q.png</og:image>
<og:description>A UX research project to re-think the touchscreen smartphone dial-pad.</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://uxdesign.cc/re-designing-the-smartphone-dial-pad-2df226ec620f?gi=166b831fe428</dc:identifier>
</item>
<item>
<title>Lost Laughs in Leisure Suit Larry</title>
<link>http://www.shamusyoung.com/twentysidedtale/?p=34307</link>
<guid isPermaLink="true" >http://www.shamusyoung.com/twentysidedtale/?p=34307</guid>
<description>&lt;p&gt;Heads up: This post is going to have some rougher language than what I normally post. We’re going to be talking about the kinds of things teenagers type into videogame text parsers, which means we’re going to get into some naughty words and otherwise unusual subject matter for this blog. I don’t know why I’m warning you. I know you’re going to read it anyway. But it seems like the polite thing to do is to give people fair warning when you’re going to transition to a more graphic type of content. If you’ve got sunglasses you wear when you’re worried about seeing the word “fuck”, then now is the time to put them on. Actually, I guess you’re a sentence late. Shit. Sorry.&lt;/p&gt;
&lt;p&gt;A few years ago I read a review of Leisure Suit Larry. The review was by a young&lt;span class=&quot;snote&quot; title=&quot;1&quot;&gt;Compared to me, anyway.&lt;/span&gt; person who probably wasn’t around when the original game came out in 1987. The review was about as negative as you can get without declaring vendetta against the developers and their families. It basically dismissed the whole thing as ghastly, ugly, unfunny trash.&lt;/p&gt;
&lt;table class=&quot;nomargin&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.shamusyoung.com/twentysidedtale/images/tdi_lsl_1987.jpg&quot; class=&quot;imagefull&quot; alt=&quot;Screenshot of Lefty`s Bar from the 1987 original.&quot; title=&quot;Screenshot of Lefty`s Bar from the 1987 original.&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;insetcaptionx&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;mouseover_alt&quot;&gt;Screenshot of Lefty`s Bar from the 1987 original.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Leisure Suit Larry is an adventure game classic and I have many fond memories of it, so I dismissed this person as a crank who doesn’t appreciate a good dick joke – the kind of person who has decided to cultivate a sense of smug superiority in lieu of a sense of humor. But reading the review put me in the mood to play it again, so I picked up &lt;a href=&quot;http://store.steampowered.com/app/231910/&quot;&gt;the 2013 remake&lt;/a&gt; and gave it a go.&lt;/p&gt;
&lt;p&gt;What I discovered when I returned to the game in 2013 is that the reviewer was basically right. Maybe they were trying a little too hard to be offended by things and maybe their ignorance of old-school adventure game mechanics hampered their ability to understand the puzzles, but it was pretty hard to argue with their conclusions regarding the humor. The game wasn’t nearly as funny as I remembered it. It’s a strange sensation to revisit a joke that made you howl with laughter 30 years ago and find it doesn’t even cause you to move any of your facial muscles. Not even the potent forces of nostalgia could salvage it. It just wasn’t amusing or fun.&lt;/p&gt;
&lt;p&gt;So what happened? Why did Larry stop being funny?&lt;/p&gt;

&lt;h3&gt;In Case You Missed It&lt;/h3&gt;
&lt;table class=&quot;nomargin&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.shamusyoung.com/twentysidedtale/images/tdi_lsl_1991.jpg&quot; class=&quot;imagefull&quot; alt=&quot;Here is Lefty`s Bar from the 1991 remake. Pointless remakes of recent titles are not a new thing!&quot; title=&quot;Here is Lefty`s Bar from the 1991 remake. Pointless remakes of recent titles are not a new thing!&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;insetcaptionx&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;mouseover_alt&quot;&gt;Here is Lefty`s Bar from the 1991 remake. Pointless remakes of recent titles are not a new thing!&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;For the young and innocent among you: The name has been shortened over the years. Originally it was titled “Leisure Suit Larry and the Land of the Lounge Lizards”. It’s an adventure game in the style of the Old Sierra titles like King’s Quest, Police Quest, or Space Quest. You walk around a lo-fi 16-color world, type broken sentence fragments into the parser, pick up inventory, and try to untangle the dream logic behind the various puzzles&lt;span class=&quot;snote&quot; title=&quot;2&quot;&gt;Strangely enough, the puzzles were a lot less insane than its contemporaries. A few of them even made some kind of sense.&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The game was remade with modernized graphics in 1991, and then again in 2013. The original was based on an even older work, a 1981 text-only game called SoftPorn Adventure. I never saw or even heard of SoftPorn Adventure until decades later when I looked up the series on Wikipedia. I know Leisure Suit Larry borrowed the premise and puzzles of SoftPorn, but I have no idea if they shared jokes or if the text game was even intended to be humorous at all.&lt;/p&gt;
&lt;p&gt;In the game you control Larry Laffer, the original 40 year old virgin. He’s decided to hit the town and lose his virginity once and for all. He’s a dorky, balding (and in the remakes, also short and pudgy) traveling salesman in a Leisure Suit&lt;span class=&quot;snote&quot; title=&quot;3&quot;&gt;He was also a &lt;a href=&quot;https://en.wikipedia.org/wiki/Larry_Laffer#Conception_and_design&quot;&gt;stealth mockery of a salesman named Jerry&lt;/a&gt; who worked at developer Sierra On-Line back in the 80’s. He would come back from business trips with improbable tales of all of the incredibly hot women he’d bedded. The programming staff hated him and so borrowed a lot of his attributes for their loser protagonist. The leisure suit itself was mocking how old and anachronistic SoftPorn Adventure had become.&lt;/span&gt;. An important detail that gets lost on younger audiences is that Leisure Suits were faddish novelty clothing and that by 1987 they were shockingly, woefully out of date. The closest analogy I can make is this: Imagine a dumpy middle-aged white guy showing up at a rave in 2016 while wearing MC Hammer parachute pants and a &lt;a href=&quot;https://en.wikipedia.org/wiki/Flavor_Flav&quot;&gt;Flava Flav&lt;/a&gt; clock. &lt;em&gt;That&lt;/em&gt; was who Larry Laffer was. He was a man with breathtaking social ineptitude.&lt;/p&gt;
&lt;p&gt;So your goal in the game is to overcome your seemingly insurmountable shortcomings with regard to looks, career prospects, social standing, personality, personal taste, and sex appeal, and somehow convince a woman to have sex with you. The game takes place in the city of Lost Wages (Las Vegas, obviously) and features a handful of locations: A dive bar, a convenience store, a 24 hour wedding chapel, a casino, a Hotel, and a few others.&lt;/p&gt;
&lt;h3&gt;Did You Know?&lt;/h3&gt;
&lt;table class=&quot;nomargin&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.shamusyoung.com/twentysidedtale/images/tdi_lsl_2013.jpg&quot; class=&quot;imagefull&quot; alt=&quot;Here is Lefty`s Bar from the 2013 remake.&quot; title=&quot;Here is Lefty`s Bar from the 2013 remake.&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;insetcaptionx&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;mouseover_alt&quot;&gt;Here is Lefty`s Bar from the 2013 remake.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;I’ve never heard anyone else mention this, but it’s a gameplay detail I discovered as a teenager. I noticed there was an in-game clock, and that the story began at 10PM. The clock ran in real-time. So I wondered what would happen if you let the game run until morning? What happens when the sun comes up? I correctly intuited that they wouldn’t have daytime versions of all of the locations. My guess was that the game would just ignore the clock and that the game would continue with night scenery. It turned out I was wrong.&lt;/p&gt;
&lt;p&gt;But finding out was actually kind of difficult. You couldn’t just walk away from the game and come back 8 hours later, because the game randomly pops up messages that would stop the clock. It would tell you how bad your breath was getting, prompting you to use the breath spray object in your inventory. These messages come up every five minutes or so, meaning you’d have to sit there and hit enter every five minutes for 8 hours straight to keep the clock moving. After some experimenting, I found a situation where the game wouldn’t give you these messages. I know it had something to do with the alley beside Lefty’s Bar. Maybe it was hiding in the dumpster, or maybe it was hanging from the rope on the fire escape&lt;span class=&quot;snote&quot; title=&quot;4&quot;&gt;It’s a long story.&lt;/span&gt;, but somewhere in that alley was a spot that disabled the breath spray prompts. Once I found that, I let the game run overnight and came back to see the result in the morning.&lt;/p&gt;
&lt;p&gt;What happens when the sun comes up? Nothing right away. The game continues to run. But as soon as you walk outside&lt;span class=&quot;snote&quot; title=&quot;5&quot;&gt;The alley counts as an “indoor” location for some reason.&lt;/span&gt; the game ends. Larry realizes that the night has ended and that he’s still a virgin. So he pulls out a gun and blows his brains out. It was a surprisingly dark ending that I’m sure most people never saw.&lt;/p&gt;
&lt;h3&gt;Where Did The Funny Go?&lt;/h3&gt;
&lt;table class=&quot;nomargin&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.shamusyoung.com/twentysidedtale/images/tdi_lsl_1987_leftys.jpg&quot; class=&quot;imagefull&quot; alt=&quot;Inside Lefty`s bar.&quot; title=&quot;Inside Lefty`s bar.&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;insetcaptionx&quot;&gt;
&lt;p class=&quot;mouseover_alt&quot;&gt;Inside Lefty`s bar.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Despite the morbid threat of suicide, Leisure Suit Larry was hilarious to my 17 year old self when I played it in 1988, and yet I was numb to it in 2013. Why? Why has the funny left Leisure Suit Larry when &lt;em&gt;Ferris Bueller’s Day Off&lt;/em&gt; and &lt;em&gt;The Three Amigos&lt;/em&gt; still maintain a lot of their original charm? It would be easy to dismiss this as the damage inflicted by my ongoing reluctant slide to maturity, but I laughed while watching &lt;em&gt;Spaceballs&lt;/em&gt; last year. While there are a lot of things you can call that movie, “mature” isn’t one of them.&lt;/p&gt;
&lt;p&gt;The problem is that Leisure Suit Larry was very much a product of its time, and while the various remakes have given the game a graphical facelift, they can’t re-create the particular arrangement of gaming culture and gameplay tropes that made the original such a hit.&lt;/p&gt;
&lt;h3&gt;A Subversible Vehicle&lt;/h3&gt;
&lt;table class=&quot;nomargin&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.shamusyoung.com/twentysidedtale/images/tdi_lsl_1987_chapel.jpg&quot; class=&quot;imagefull&quot; alt=&quot;A storybook romance this ain`t.&quot; title=&quot;A storybook romance this ain`t.&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;insetcaptionx&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;mouseover_alt&quot;&gt;A storybook romance this ain`t.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The main joke of the game was that it constantly subverted the normal expectations established by the existing [$Genre] Quest titles, which were basically clean, family-friendly adventures. You had the same interface, the same pointless score bar at the top, the same style of inventory-driven puzzles. Except this game was about boning instead of saving the kingdom. It was a game about dick jokes and innuendo in a style of game that was usually a collection of common story tropes and lame puns.&lt;/p&gt;
&lt;p&gt;The joke isn’t the joke itself, the joke is that this joke was told in &lt;em&gt;this context&lt;/em&gt;. It was like a newscaster telling a dick joke, or hearing a Muppet say “fuck”. It was shocking and transgressive. Players had never seen a game “go there” before.&lt;/p&gt;
&lt;p&gt;The joke – the idea of doing something edgy or profane in this kind of adventure game – was as old as the games themselves. It was born about thirty seconds after the first player booted up the original King’s Quest and typed “fart” into the command line. It was a joke players had been creating for themselves, and a joke that the games had stubbornly refused to participate in.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;&amp;gt;FUCK PRINCESS&lt;br /&gt;&lt;strong&gt;You don't have one of those.&lt;/strong&gt;&lt;br /&gt;&amp;gt;PISS ON FARMER&lt;br /&gt;&lt;strong&gt;The farmer doesn't need one of those.&lt;/strong&gt;&lt;br /&gt;&amp;gt;TAKE SHIT&lt;br /&gt;&lt;strong&gt;You don't see one of those here.&lt;/strong&gt;&lt;br /&gt;&amp;gt;SHOW KING MY DICK&lt;br /&gt;&lt;strong&gt;I don't know what that means.&lt;/strong&gt;&lt;br /&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Leisure Suit Larry was just the first game&lt;span class=&quot;snote&quot; title=&quot;6&quot;&gt;Not actually the first game. It was just the first one that became popular.&lt;/span&gt; to &lt;em&gt;participate&lt;/em&gt; in the joke. Suddenly there was a game that would respond humorously to your shenanigans instead of replying with clinical bafflement. When you tried to screw someone (or everyone) the game understood your intent and explained why you couldn’t. Just having the game correctly &lt;em&gt;parse&lt;/em&gt; these crude actions was a punchline all by itself. The fact that it followed up with a humorous reply was just gravy.&lt;/p&gt;
&lt;p&gt;But today? That’s not even a joke anymore. We’ve got entire genres of games dedicated to ribald matters. We’ve got games about &lt;a href=&quot;http://store.steampowered.com/agecheck/app/359050/&quot;&gt;showering with your dad&lt;/a&gt;. Games about &lt;a href=&quot;http://store.steampowered.com/app/426000/&quot;&gt;running a pornography empire&lt;/a&gt;. We’ve got action shmups &lt;a href=&quot;https://www.youtube.com/watch?v=vLxn54HylLg&quot;&gt;engorged with homoerotic imagery&lt;/a&gt;. We’ve got &lt;a href=&quot;http://store.steampowered.com/app/339800/&quot;&gt;match three games about trying to screw anime girls&lt;/a&gt;. Penises are no longer a secret in the world of videogames. It’s no longer shocking or edgy to make these kinds of jokes.&lt;/p&gt;
&lt;p&gt;There’s nothing left to subvert.&lt;/p&gt;
&lt;h3&gt;Graphical upgrades&lt;/h3&gt;
&lt;table class=&quot;nomargin&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; readability=&quot;1.5&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.shamusyoung.com/twentysidedtale/images/tdi_lsl_compare.jpg&quot; class=&quot;imagefull&quot; alt=&quot;The character Fawn. Left is 1987, right is 2013.&quot; title=&quot;The character Fawn. Left is 1987, right is 2013.&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td class=&quot;insetcaptionx&quot; readability=&quot;6&quot;&gt;
&lt;p class=&quot;mouseover_alt&quot;&gt;The character Fawn. Left is 1987, right is 2013.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Another thing to kill the laughs for me was the move to better graphics. I know I’m already redlining on the scale of “stuff old guys say” in this article, but hear me out.&lt;/p&gt;
&lt;p&gt;In the other adventure games, upgrading their graphics made it possible to create more moods. Once you had more than 16 colors to work with, you could make places that seemed genuinely spooky. Places that seemed forlorn. Cheerful. Vibrant. Muted. The designer had more options. But the 4-bit graphics of Leisure Suit Larry were already pretty good at conveying the mood of the world: Cheap, sleazy, and gaudy. As graphics got better, it created an odd distortion. Suddenly those pixelated ladies weren’t so pixelated anymore. Their presence began to overshadow the rest of the scene, and now the dominant mood was “vaguely titillating”. As the years went on and graphics continued to improve, this progressed to “&lt;em&gt;overtly&lt;/em&gt; titillating”.&lt;/p&gt;
&lt;p&gt;It was kind of funny to have a game make a fuss over how “sexy” a lady was when she had the same number of pixels as old 16-bit Mario. But once they started looking like actual pin-up girls, that dimension of the humor was lost. It gradually felt less like a joke about a guy who wants to hook up with sexy ladies and more a vehicle for actually looking at sexy ladies. This changes the tone of the jokes. It’s the difference between a comic where two stick figures are screwing, and the exact same joke told with photographs of real people. To wit: It’s no longer the exact same joke.&lt;/p&gt;
&lt;table class=&quot;nomargin&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.shamusyoung.com/twentysidedtale/images/tdi_lsl_1987_jugs.jpg&quot; class=&quot;imagefull&quot; alt=&quot;Spoiler: This is actually a hint for a puzzle.&quot; title=&quot;Spoiler: This is actually a hint for a puzzle.&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;insetcaptionx&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;mouseover_alt&quot;&gt;Spoiler: This is actually a hint for a puzzle.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;I’ve said before that there’s nothing more uncomfortable than someone else’s turn-on. That’s what the &lt;a href=&quot;http://imgur.com/gallery/NOECI0s&quot;&gt;That’s My Fetish&lt;/a&gt; meme is all about. When you’ve got blocky graphics, there’s a certain distancing effect going on. The images are safe for everyone because you get the sense that nobody is &lt;em&gt;really&lt;/em&gt; getting off to this&lt;span class=&quot;snote&quot; title=&quot;7&quot;&gt;Which isn’t remotely true of course. If the internet has taught us anything, it’s that there’s no boundaries to the things people will get off to.&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;But once the game starts delivering cheesecake images as a reward for progress, that safety is gone and lots of people get uncomfortable. “Ew. Are people really… uh… &lt;em&gt;into&lt;/em&gt; these cartoon ladies?” You feel like you’ve stumbled into someone else’s kink. It’s no longer a game laughing &lt;strong&gt;at&lt;/strong&gt; porn, it’s a game that &lt;strong&gt;is&lt;/strong&gt; porn. (Ultra-tame, PG-13 porn. So… lousy porn. Great. Now NOBODY is happy.)&lt;/p&gt;
&lt;p&gt;This is not to say that you’re a bad person if you like the newer games. I am not one to judge. By all means, enjoy what makes you happy. That’s what entertainment is for. It’s just that the move away from pixel graphics changed the nature of the humor and created something that could be off-putting to some people. It narrows the audience.&lt;/p&gt;
&lt;h3&gt;No Text Parser&lt;/h3&gt;
&lt;table class=&quot;nomargin&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; readability=&quot;2.5&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.shamusyoung.com/twentysidedtale/images/tdi_lsl_1987_pimp.jpg&quot; class=&quot;imagefull&quot; alt=&quot;The other thing that people dislike about the game is that a few of the joke characters are brute-force racial stereotypes. I REALLY don`t want to talk about that, so let`s acknowledge that it exists and move on.&quot; title=&quot;The other thing that people dislike about the game is that a few of the joke characters are brute-force racial stereotypes. I REALLY don`t want to talk about that, so let`s acknowledge that it exists and move on.&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td class=&quot;insetcaptionx&quot; readability=&quot;8&quot;&gt;
&lt;p class=&quot;mouseover_alt&quot;&gt;The other thing that people dislike about the game is that a few of the joke characters are brute-force racial stereotypes. I REALLY don`t want to talk about that, so let`s acknowledge that it exists and move on.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The later remakes weren’t just modernized in terms of graphics, they were also modernized in terms of interface. Computer mice were finally standard, so games were moving away from text-based input to mouse-based input. Instead of trying to figure out what phrasing the game expected in order to “USE POTION ON GUARD”, you could just select the potion in your inventory and click on the guard. This solved the infuriating problem in these games where you couldn’t tell if you had the wrong solution to a puzzle, or if you had the right solution but weren’t using the right phrasing to describe it. It also solved this problem:&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;&amp;gt;EXAMINE PORTICULLUS&lt;br /&gt;&lt;strong&gt;You don't see that here.&lt;/strong&gt;&lt;br /&gt;&amp;gt;EXAMINE BARS&lt;br /&gt;&lt;strong&gt;You don't see that here.&lt;/strong&gt;&lt;br /&gt;&amp;gt;EXAMINE ENTRANCE&lt;br /&gt;&lt;strong&gt;You don't see that here.&lt;/strong&gt;&lt;br /&gt;&amp;gt;EXAMINE DOOR&lt;br /&gt;&lt;strong&gt;An iron portcullis stands before you, barring entrance to the castle.&lt;/strong&gt;&lt;br /&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;The player doesn’t need to play “guess the synonym”. You don’t have awkward situations where the player needs to explain WHICH door they’re talking about if there happen to be several. You don’t need to worry about typos, misunderstood visuals&lt;span class=&quot;snote&quot; title=&quot;8&quot;&gt;That blob of chunky pixels isn’t a statue in front of the wall, it’s an engraving.&lt;/span&gt;, tricky spelling, ambiguous grammar, or the problem where the player is trying to interact with clutter items scattered around the scenery. You just give the player a mouse pointer and let them click on stuff.&lt;/p&gt;
&lt;p&gt;But while the text parser was the source of all misery in a regular adventure game, in Larry’s world it was &lt;em&gt;also&lt;/em&gt; the source of all humor. In fact, it was the frustration of having the game misunderstand you ten times in a row that often led players to type something rude or absurd into the command line. The frustration of being misunderstood by a parser is one of the reasons the profane responses of LSL were so cathartic.&lt;/p&gt;
&lt;p&gt;When Larry got his remake, they gave you an “open zipper” icon to use when you wanted to do naughty things, and this murdered the humor. Instead of feeling subversive, it became a sanctioned action in the game. I mean, it was &lt;em&gt;always&lt;/em&gt; a sanctioned action because the developers wrote text responses for it, but showing the icon to the player made it obvious. Instead of feeling like a prankster for typing, &lt;tt&gt;SCREW HOBO&lt;/tt&gt;, the game was making it clear that this was an expected course of action. The surprise was gone, along with the sense of mischief.&lt;/p&gt;
&lt;p&gt;It also removed a lot of the depth. You no longer had distinct responses for fuck, shit, piss, and whatever other profane things the player might devise. You had all of the “normal” icons, and then you had the zipper as a generic catch-all for “naughty stuff”.&lt;/p&gt;
&lt;h3&gt;Lost in Translation&lt;/h3&gt;
&lt;table class=&quot;nomargin&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; readability=&quot;2.5&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.shamusyoung.com/twentysidedtale/images/tdi_lsl_1987_casino.jpg&quot; class=&quot;imagefull&quot; alt=&quot;The casino, where you could save-scum your way into riches. In fact, I think you HAD to in order to beat the game.&quot; title=&quot;The casino, where you could save-scum your way into riches. In fact, I think you HAD to in order to beat the game.&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td class=&quot;insetcaptionx&quot; readability=&quot;8&quot;&gt;
&lt;p class=&quot;mouseover_alt&quot;&gt;The casino, where you could save-scum your way into riches. In fact, I think you HAD to in order to beat the game.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;So that was the original Leisure Suit Larry. It was a game that provided an absurdist joke about sexy pixel women that entertained an audience of people frustrated with text parsers by subverting genre expectations.&lt;/p&gt;
&lt;p&gt;The recent &lt;a href=&quot;https://en.wikipedia.org/wiki/Leisure_Suit_Larry:_Magna_Cum_Laude&quot;&gt;in-name-only sequels&lt;/a&gt; went in totally the wrong direction and exacerbated everything that’s hindered the series over the years. The sexy content has been ramped up, the adventure game mechanics are gone, and you’re left with a fiddly game that rewards you with animated tits when you win. And long-time fans &lt;strong&gt;hated&lt;/strong&gt; them. This wasn’t a Leisure Suit Larry game. This was &lt;em&gt;a game that Leisure Suit Larry himself would be embarrassed to play&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Al Lowe, designer of the 1987 classic, said of these newer games, “It was like getting a video from your son’s kidnappers. On the one hand you’re glad he’s still alive, but oh shit what’ve they done to him!?”&lt;/p&gt;
&lt;div class=&quot;shariff shariff-main shariff-align-flex-start shariff-widget-align-flex-start&quot; readability=&quot;3.9375&quot;&gt;
&lt;p&gt;&lt;em&gt;Enjoyed this post? Please share!&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p class=&quot;byline&quot;&gt;&lt;em&gt;&lt;img alt=&quot;&quot; src=&quot;http://0.gravatar.com/avatar/ce6b8dea6c49454754bace9e00247c36?s=42&amp;amp;d=wavatar&amp;amp;r=pg&quot; srcset=&quot;http://0.gravatar.com/avatar/ce6b8dea6c49454754bace9e00247c36?s=84&amp;amp;d=wavatar&amp;amp;r=pg 2x&quot; class=&quot;avatar avatar-42 photo&quot; height=&quot;42&quot; width=&quot;42&quot; /&gt;&lt;a href=&quot;https://www.patreon.com/shamusyoung&quot;&gt;Shamus Young&lt;/a&gt; is a programmer, an &lt;a href=&quot;https://www.amazon.com/Witch-Watch-Shamus-Young/dp/1470105810&quot;&gt;author&lt;/a&gt;, and nearly a &lt;a href=&quot;https://soundcloud.com/shamusyoung&quot;&gt;composer&lt;/a&gt;. He works on this site full time. If you'd like to support him, you can do so via &lt;a href=&quot;http://www.patreon.com/shamusyoung&quot;&gt;Patreon&lt;/a&gt; or &lt;a href=&quot;https://paypal.me/ShamusYoung&quot;&gt;PayPal&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 06 Oct 2017 17:40:51 +0000</pubDate>
<dc:creator>smacktoward</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.shamusyoung.com/twentysidedtale/?p=34307</dc:identifier>
</item>
</channel>
</rss>