<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Georgia Tech Creates Cybersecurity Master’s Degree Online for Less Than $10k</title>
<link>https://www.news.gatech.edu/2018/08/08/georgia-tech-creates-cybersecurity-masters-degree-online-less-10000</link>
<guid isPermaLink="true" >https://www.news.gatech.edu/2018/08/08/georgia-tech-creates-cybersecurity-masters-degree-online-less-10000</guid>
<description>&lt;!---*                         *---&gt;&lt;!---* START NEWS PAGE RENDER  *---&gt;&lt;!---*                         *---&gt;&lt;!-- News Topics  ----&gt;&lt;span class=&quot;primary-topic-alt&quot;&gt;  &lt;a href=&quot;https://www.news.gatech.edu/news-room-topics/science-and-technology&quot; typeof=&quot;skos:Concept&quot; property=&quot;rdfs:label skos:prefLabel&quot; datatype=&quot;&quot;&gt;Science and Technology&lt;/a&gt;&lt;/span&gt;&lt;!-- News Title  ----&gt;
			&lt;h2 class=&quot;news-release-title&quot;&gt;
				Georgia Tech Creates Cybersecurity Master’s Degree Online for Less Than $10,000			&lt;/h2&gt;

			&lt;!-- News Sub Title  ----&gt;
							&lt;h3 class=&quot;subtitle&quot;&gt;Newest at-scale program offered with edX addresses global industry workforce shortage&lt;/h3&gt;
			
			&lt;!-- Author, Dateline and Location ----&gt;
			&lt;div class=&quot;dateline-details clearfix&quot; readability=&quot;9&quot;&gt;
				&lt;p&gt;
											By
						Institute Communications | 										  &lt;span class=&quot;date-display-single&quot; property=&quot;dc:date&quot; datatype=&quot;xsd:dateTime&quot; content=&quot;2018-08-08T00:00:00-04:00&quot;&gt;August 8, 2018&lt;/span&gt; &lt;span class=&quot;location&quot;&gt;
         • Atlanta, GA        &lt;/span&gt; &lt;/p&gt;

				&lt;!-- Sharetools --&gt;
				
				&lt;!---**---&gt;
				&lt;hr/&gt;&lt;/div&gt;

			&lt;div id=&quot;hero-wrapper-description&quot;&gt;&lt;div class=&quot;hero-spot image&quot;&gt;
	&lt;div class=&quot;hg-image&quot; readability=&quot;4.6842105263158&quot;&gt;
		&lt;a href=&quot;https://www.news.gatech.edu/sites/default/files/uploads/mercury_images/filming_in_studio.jpg&quot; class=&quot;colorbox&quot; title=&quot;OMS Cybersecurity Course Production&quot;&gt;&lt;img typeof=&quot;foaf:Image&quot; src=&quot;https://www.news.gatech.edu/sites/default/files/styles/740_x_scale/public/uploads/mercury_images/filming_in_studio.jpg?itok=5p32Fvdn&quot; alt=&quot;OMS Cybersecurity Course Production&quot;/&gt;&lt;/a&gt;		&lt;p&gt;Click image to enlarge&lt;/p&gt;
		&lt;div class=&quot;hg-image-description&quot; readability=&quot;5.0769230769231&quot;&gt;
			&lt;p&gt;The Georgia Tech OMS Cybersecurity will begin in January 2019. &lt;/p&gt;			
						
					&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
			&lt;p&gt;The Georgia Institute of Technology has announced a new online cybersecurity master’s degree that will be offered for less than $10,000 and delivered in collaboration with &lt;a href=&quot;https://www.edx.org/&quot;&gt;edX&lt;/a&gt;. The &lt;a href=&quot;http://omscybersecurity.gatech.edu/&quot;&gt;Online Master of Science in Cybersecurity&lt;/a&gt; (OMS Cybersecurity) is designed to address a severe global workforce shortage in the field. According to the 2017 Global Information Security Workforce Study, the shortage is expected to reach 1.8 million people by 2022.&lt;/p&gt;

&lt;p&gt;Georgia Tech is the only nationally ranked Top 10 university to offer such a program at a tuition rate intended to increase higher education accessibility and affordability. The degree has existed on campus since 2002 and costs $20,000 for in-state students and $40,000 for those out-of-state. Applications for spring 2019 are open now until October 1, 2018.&lt;/p&gt;

&lt;p&gt;The OMS Cybersecurity program will launch January 7, 2019 with 250 students and will scale over time to meet demand and student needs. The program is designed to serve working professionals who can study part-time and earn the degree within two to three years. It is richly technical and offers the same three interdisciplinary tracks available on campus beginning with information security and followed by policy and energy systems in fall 2019. &lt;/p&gt;

&lt;p&gt;“Georgia Tech’s OMS Cybersecurity degree pairs world-class computer science, engineering, and public policy instruction with Georgia Tech Research Institute’s legacy of applied research in areas related to military, government, and law enforcement,” said Rafael L. Bras, provost and executive vice president for Academic Affairs and K. Harrison Brown Family Chair.  &quot;As demand continues to grow, Georgia Tech is proud to deliver innovative, affordable, top quality education in high-demand areas, like cybersecurity, to learners around the nation and world.” &lt;/p&gt;

&lt;p&gt;OMS Cybersecurity is Georgia Tech’s third at-scale online degree program. It will follow the same model as the groundbreaking &lt;a href=&quot;http://www.omscs.gatech.edu/&quot;&gt;online Master of Science in Computer Science&lt;/a&gt; (OMSCS) program, which launched in 2014 on Udacity with support from AT&amp;amp;T and has enrolled approximately 10,000 students overall for the $6,800 degree. The Institute followed on that success in 2017 by launching the &lt;a href=&quot;https://pe.gatech.edu/degrees/analytics&quot;&gt;Online Master of Science in Analytics&lt;/a&gt; on edX with support from AT&amp;amp;T and Accenture, which currently has 706 students in its second semester and costs less than $10,000. &lt;/p&gt;

&lt;p&gt;“We are excited to strengthen our partnership with Georgia Tech by now offering two top-ranked online master’s degrees in high-demand fields to learners all over the world,” said Anant Agarwal, edX CEO and MIT professor. “The new OMS Cybersecurity follows on the success of the stacked OMS Analytics on edX, which offers learners the option to start with a MicroMasters program on edX that can count toward their full master’s degree. This collaboration with Georgia Tech is the latest milestone in creating stackable, affordable, and accessible online master’s degrees in subjects that address today’s global skill gaps.”&lt;/p&gt;

&lt;p&gt;OMS Cybersecurity is built on the proven success of the on-campus Master of Science in Cybersecurity, which was started as a master’s degree in information security in 2002 by Mustaque Ahamad, associate director, Institute for Information Security &amp;amp; Privacy, professor, School of Computer Science, and co-founder and chief scientist at Pindrop, a cybersecurity company. Because of the interdisciplinary nature of the cybersecurity field, the program was broadened to include tracks in energy systems and policy.&lt;/p&gt;

&lt;p&gt;“The on-campus program has a long history as a world-class master’s degree in information security,” said Ahamad. “Graduates from this degree have gone on to become top leaders in the field.”&lt;/p&gt;

&lt;p&gt;&quot;Cybersecurity is a global problem,” said Milton Mueller, professor at Georgia Tech’s School of Public Policy, “The OMS format not only extends Georgia Tech's reach to American professionals in cybersecurity, but also makes it possible for working professionals anywhere in the world to avail themselves of Tech's educational resources and expertise.&quot; &lt;/p&gt;

&lt;p&gt;The U.S. will have 265,000 more cybersecurity jobs than skilled workers by 2022, as projected by the ISC Center for Cyber Safety and Education. Cybersecurity job postings continue to surge, having increased by 71 percent between 2012 and 2017. Job postings specifying a master’s degree have grown by 73 percent during the same period, based on data provided in the 2017 Burning Glass/Labor Insights Report. The report also cites the Washington D.C. metro area as ranking first in the country for cybersecurity employment opportunities with 44,244 job postings. &lt;/p&gt;

&lt;p&gt;&quot;As chief information security officers work to protect organizations from malicious cyber threats, they have difficulty finding trained people to staff their team. The cybersecurity workforce pipeline is a critical component to the future of our nation’s economic and national security posture. CISOs are excited to hear about Georgia Tech’s degree providing enhanced training and teaching multi-faceted skills for employment in the cybersecurity job market,” said Patrick Gaul, executive director of the National Technology Security Coalition.   &lt;/p&gt;

&lt;p&gt;OMS Cybersecurity is an interdisciplinary collaboration between Georgia Tech’s School of Computer Science in the College of Computing, the School of Public Policy in the Ivan Allen College of Liberal Arts, and the School of Electrical and Computer Engineering in the College of Engineering. &lt;/p&gt;

&lt;p&gt;&quot;The OMS Cybersecurity degree offers the same comprehensive, rigorous curriculum as the on-campus program,&quot; said Raheem Beyah, faculty lead for the program, Motorola Foundation Professor and associate chair for Strategic Initiatives and Innovation in the School of Electrical and Computer Engineering, and co-founder of Fortiphyd Logic, Inc., an industrial control cybersecurity company. “Courses are taught by leaders in the field of cybersecurity research who are sought after by industry and government entities for their knowledge and expertise.&quot; &lt;/p&gt;

&lt;p&gt;Courses for the program will be designed and produced for online delivery by &lt;a href=&quot;https://pe.gatech.edu/&quot;&gt;Georgia Tech Professional Education&lt;/a&gt; (GTPE), the Institute’s lifelong learning arm that has provided professional education for more than 40 years. &lt;/p&gt;

&lt;p&gt;“OMS Cybersecurity is designed for working professionals aiming to develop deep expertise in cybersecurity without interrupting their careers,” said Nelson C. Baker, dean of GTPE. “With this degree, we’re able to offer them the opportunity to build careers in a rapidly growing field while delivering cybersecurity experts to industry to address extreme workforce shortages.” &lt;/p&gt;

&lt;p&gt;Additional details on the Georgia Tech OMS Cybersecurity program can be found at &lt;a href=&quot;http://omscybersecurity.gatech.edu&quot;&gt;omscybersecurity.gatech.edu&lt;/a&gt;.&lt;/p&gt;							
				
													
									</description>
<pubDate>Wed, 15 Aug 2018 21:58:31 +0000</pubDate>
<dc:creator>electriclove</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.news.gatech.edu/2018/08/08/georgia-tech-creates-cybersecurity-masters-degree-online-less-10000</dc:identifier>
</item>
<item>
<title>Introducing the Windows Pseudo Console (ConPty)</title>
<link>https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/</link>
<guid isPermaLink="true" >https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/</guid>
<description>&lt;p&gt;In this, the fourth post in the Windows Command-Line series, we'll discuss the new Windows Pseudo Console (ConPTY) infrastructure and API - why we built it, what it's for, how it works, how to use it, and more.&lt;/p&gt;


&lt;ol&gt;&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://blogs.msdn.microsoft.com/commandline/2018/06/20/windows-command-line-backgrounder/&quot;&gt;Command-Line Backgrounder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://blogs.msdn.microsoft.com/commandline/2018/06/27/windows-command-line-the-evolution-of-the-windows-command-line/&quot;&gt;The Evolution of the Windows Command-Line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://blogs.msdn.microsoft.com/commandline/2018/07/20/windows-command-line-inside-the-windows-console/&quot;&gt;Inside the Windows Console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Introducing the Windows Pseudo Console (ConPTY) API &lt;em&gt;[this post]&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;In &lt;a href=&quot;https://blogs.msdn.microsoft.com/commandline/2018/07/20/windows-command-line-inside-the-windows-console/&quot; target=&quot;_blank&quot;&gt;the previous post&lt;/a&gt; in this series, we started to explore the internals of the Windows Console and Windows' Command-Line infrastructure. We also discussed many of Console's strengths and outlined its key weaknesses.&lt;/p&gt;
&lt;p&gt;One of those weaknesses is that Windows tries to be &quot;helpful&quot; but gets in the way of alternative and 3rd party Console developers, service developers, etc. When building a Console or service, developers need to be able to access/supply the communication pipes through which their Terminal/service communicates with command-line applications. In the *NIX world, this isn't a problem because *NIX provides a &lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudoterminal&quot; target=&quot;_blank&quot;&gt;&quot;Pseudo Terminal&quot; (PTY)&lt;/a&gt; infrastructure which makes it easy to build the communication plumbing for a Console or service, but Windows does not ...&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;... until now!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before we dig into what we've done, let's briefly revisit how Terminals evolved:&lt;/p&gt;
&lt;h2 id=&quot;in-the-beginning-was-the-tty&quot;&gt;In the beginning was the TTY&lt;/h2&gt;
&lt;p&gt;As discussed in &lt;a href=&quot;https://blogs.msdn.microsoft.com/commandline/2018/06/20/windows-command-line-backgrounder/&quot; target=&quot;_blank&quot;&gt;the first 'backgrounder' post in this series&lt;/a&gt;, in the early days of computing, users operated computers via electromechanical Teletype (TTY) devices connected to a computer via some form of serial communications link (typically a &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_current_loop_interface&quot; target=&quot;_blank&quot;&gt;20mA current loop&lt;/a&gt;).&lt;/p&gt;
&lt;img alt=&quot;Ken Thompson and Dennis Richie (standing) working on a DEC PDP-11 via teletype (notice no electronic display)&quot; src=&quot;https://msdnshared.blob.core.windows.net/media/2018/07/command-line-thompson-richie-teletype.jpg&quot;/&gt;&lt;br/&gt;Ken Thompson and Dennis Richie (standing) working on a DEC PDP-11 via teletype (notice no electronic display)&lt;br/&gt;&lt;h3 id=&quot;rise-of-the-terminals&quot;&gt;Rise of the Terminals&lt;/h3&gt;
&lt;p&gt;Teletype devices were replaced by computerized Terminals with electronic display devices (usually CRT screens). Terminals were generally very simple devices (hence the term &quot;dumb terminal&quot;) containing only the electronics and compute-power required to:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Accept text input via the keyboard&lt;/li&gt;
&lt;li&gt;Buffer input text one line at a time (enabling local editing before sending)&lt;/li&gt;
&lt;li&gt;Send/receive text via serial communications (usually via the once ubiquitous &lt;a href=&quot;https://en.wikipedia.org/wiki/RS-232&quot; target=&quot;_blank&quot;&gt;RS-232&lt;/a&gt; interface)&lt;/li&gt;
&lt;li&gt;Display received text on the Terminal's display&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Despite their simplicity (or perhaps because of it), Terminals rapidly became the primary devices used to operate mini, mainframe, and server computers: Most data entry clerks, computer operators, system administrators, scientists, researchers, software developers, and industry luminaries earned their digital-stripes by pounding away on Terminals from DEC, IBM, Wyse, and many others.&lt;/p&gt;
&lt;img alt=&quot;Admiral Grace Hopper in her office with a DEC VT220 Terminal on her desk&quot; src=&quot;https://msdnshared.blob.core.windows.net/media/2018/07/command-line-grace-hopper-terminal.jpg&quot;/&gt;&lt;br/&gt;Admiral Grace Hopper in her office with a DEC VT220 Terminal on her desk&lt;br/&gt;&lt;h3 id=&quot;the-rise-and-rise-of-software-terminals&quot;&gt;The Rise and Rise of Software Terminals&lt;/h3&gt;
&lt;p&gt;Starting in the mid 1980's, dedicated Terminal devices gradually started to be replaced by general purpose computers that were rapidly becoming more affordable, popular, and powerful. Many early PCs and other computers of the '80s had Terminal applications that could open a connection to the PC's RS-232 serial port and exchange data with whatever was listening on the other end of the connection.&lt;/p&gt;
&lt;p&gt;As general-purpose computers grew in sophistication, the Graphical User Interface (GUI) arrived and introduced a whole new world of simultaneously running applications, including Terminal applications.&lt;/p&gt;
&lt;p&gt;But a problem arose: How would a Terminal application speak to another Command-Line application running on the same machine? And how would you attach a physical serial cable between the two apps running on the same computer?&lt;/p&gt;
&lt;h2 id=&quot;enter-the-pseudo-terminal-pty&quot;&gt;Enter, the Pseudo Terminal (PTY)&lt;/h2&gt;
&lt;p&gt;In the *NIX world, this problem was solved by the introduction of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudoterminal&quot; target=&quot;_blank&quot;&gt;Pseudo Terminal (PTY)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The PTY virtualizes a computer's serial communications hardware, exposing &quot;master&quot; and &quot;slave&quot; pseudo-devices: Terminal apps connect to a master pseudo-device; Command-Line applications (e.g. shells like Cmd, PowerShell, and bash) connect to a slave pseudo-device. When the Terminal client sends text and/or control commands (encoded as text) to the master, the text is relayed along to the associated &quot;slave&quot;. Text emitted by the application is sent to the slave and is then routed back to the master and thus to the Terminal. Data is always sent/received asynchronously.&lt;/p&gt;
&lt;img alt=&quot;Terminal to/from PTY to/from App/Shell&quot; src=&quot;https://msdnshared.blob.core.windows.net/media/2018/07/terminal-pty-shell-e1532552020635.png&quot;/&gt;&lt;br/&gt;Terminal PTY App/Shell&lt;p&gt;Importantly, the &quot;slave&quot; pseudo-device emulates the behavior of a physical Terminal device and converts command characters into &lt;a target=&quot;_blank&quot;&gt;POSIX signals&lt;/a&gt;. For example, if a user types &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Control-C&quot;&gt;CTRL+C&lt;/a&gt; into the Terminal, the ASCII value of CTRL+C (0x03) is sent via the master. When received by the slave, the 0x03 value is removed from the input stream and a &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Signal_(IPC)#SIGINT&quot;&gt;SIGINT signal&lt;/a&gt; is generated.&lt;/p&gt;
&lt;p&gt;This PTY infrastructure is used extensively by *NIX Terminal applications, text pane managers (like screen, tmux), etc. Such apps call &lt;a target=&quot;_blank&quot;&gt;openpty()&lt;/a&gt; which returns a pair of file descriptors (fd) for the PTY's master and slave. The app can then fork/exec the child Command-Line application (e.g. bash), which uses its slave fds to listen and return text to the attached Terminal.&lt;/p&gt;
&lt;p&gt;This mechanism allows Terminal applications to &quot;talk&quot; directly to Command-Line applications running locally in the same way as the Terminal would talk with a remote Computer via a serial/network connection.&lt;/p&gt;
&lt;h2 id=&quot;what-no-windows-pseudo-console&quot;&gt;What, no Windows Pseudo Console?&lt;/h2&gt;
&lt;p&gt;So, as we discussed in the previous post in this series - &lt;a target=&quot;_blank&quot; href=&quot;https://blogs.msdn.microsoft.com/commandline/2018/07/20/windows-command-line-inside-the-windows-console/&quot;&gt;Inside the Windows Console&lt;/a&gt; - while the Windows Console is conceptually similar to the traditional *NIX Terminal, it differs in several key ways, especially at its lowest-levels which can cause problems for developers of Windows Command-Line apps, 3rd-party Terminals/Consoles, and server apps:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Windows lacks a PTY infrastructure&lt;/strong&gt;: When the user launches a Command-Line app (e.g. Cmd, PowerShell, wsl, ipconfig, etc.), Windows itself &quot;hooks up&quot; a new or existing Console instance to the app&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows obstructs 3rd party Consoles and Server Apps&lt;/strong&gt;: Windows (currently) does not provide Terminals a way to supply the communication pipes via which it wants to communicate with a Command-Line app. 3rd party Terminals are forced to create an off-screen Console, and to send it user-input and scrape its output, redrawing the output on the 3rd party Console's own display!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Only Windows has a Console API&lt;/strong&gt;: Windows Command-Line apps rely on the Win32 Console API which reduces code portability because every other platform &quot;speaks text/VT&quot; rather than calling APIs&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows Command-Line Remoting is substandard&lt;/strong&gt;: Windows' Command-Line apps' dependence on Console API significantly impedes interop &amp;amp; remoting scenarios&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;what-to-do&quot;&gt;What to do?&lt;/h2&gt;
&lt;p&gt;We've heard from many, &lt;em&gt;&lt;strong&gt;many&lt;/strong&gt;&lt;/em&gt; developers, who've frequently requested a PTY-like mechanism in Windows - especially those who created and/or work on ConEmu/Cmder, Console2/ConsoleZ, Hyper, VSCode, Visual Studio, WSL, Docker, and OpenSSH.&lt;/p&gt;
&lt;p&gt;Even &lt;a target=&quot;_blank&quot;&gt;Peter Bright - Technology Editor for Ars Technica&lt;/a&gt; - has been asking for a PTY mechanism since a few days after I first joined the Console team:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://msdnshared.blob.core.windows.net/media/2018/07/command-line-conpty-peter-bright-ask.png&quot; alt=&quot;Peter Bright asks for a PTY&quot;/&gt;&lt;/p&gt;
&lt;p&gt;And again more recently:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://msdnshared.blob.core.windows.net/media/2018/07/command-line-conpty-peter-bright-ask2.png&quot; alt=&quot;Peter Bright asks again if a PTY is on the way&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Well, we finally did it: &lt;strong&gt;We created a Pseudo Console for Windows&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Since taking ownership of the Console ~4 years ago, the Console Team has been busy overhauling the Windows Console &amp;amp; Command-Line internals. While doing so, we regularly and carefully considered the issues described above and many other related asks and issues. But the internals weren't in the right shape to make a Pseudo Console feasible ... until now!&lt;/p&gt;
&lt;p&gt;Windows' new Pseudo Console (ConPTY) infrastructure, API, and several other supporting changes will remedy/facilitate an entire class of issues ... &lt;em&gt;&lt;strong&gt;without breaking or damaging backward compatibility for existing command-line applications&lt;/strong&gt;&lt;/em&gt;!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The new Win32 ConPTY API (formal docs to follow soon) is now available in recent Windows 10 Insider builds and corresponding &lt;a href=&quot;https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewSDK&quot; target=&quot;_blank&quot;&gt;Windows 10 Insider Preview SDK&lt;/a&gt;, and will ship in the next major release of Windows 10 (due sometime in fall/winter 2018).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;consoleconhosts-architecture&quot;&gt;Console/ConHost's Architecture&lt;/h2&gt;
&lt;p&gt;To understand ConPTY, we have to revisit the architecture of Windows Console ... or more accurately ... ConHost!&lt;/p&gt;
&lt;p&gt;It's important to understand that while ConHost implements what you see and know as the Windows Console application itself, ConHost also contains and implements most of Windows' Command-Line infrastructure! From now on, however, &lt;strong&gt;ConHost also becomes a true &quot;Console Host&quot;&lt;/strong&gt;, supporting all Command-Line applications and/or GUI applications that communicate with Command-Line applications!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;How? Why? What?&lt;/strong&gt;&lt;/em&gt; Let's dig in some more:&lt;/p&gt;
&lt;p&gt;Here's a high-level view of the internal architecture of Console/ConHost:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://msdnshared.blob.core.windows.net/media/2018/08/command-line-conpty-architecture.png&quot; alt=&quot;Console Architecture including the ConPTY&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Compared to the architecture we outlined in &lt;a target=&quot;_blank&quot; href=&quot;https://blogs.msdn.microsoft.com/commandline/2018/07/20/windows-command-line-inside-the-windows-console/&quot;&gt;the previous &quot;Console Internals&quot; post in this series&lt;/a&gt;, ConHost now contains a few additional modules for handling VT and a new ConPTY module that implements the public API:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;ConPTY API&lt;/strong&gt;: The new Win32 ConPTY API provides a mechanism that is similar to the POSIX PTY model, but in a Windows-relevant manner&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VT Interactivity&lt;/strong&gt;: Receives incoming UTF-8 encoded text, converts each displayable text character into the corresponding &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/console/input-record-str&quot;&gt;&lt;code&gt;INPUT_RECORD&lt;/code&gt;&lt;/a&gt;, and stores them in the Input Buffer. It also handles control sequences such as 0x03 (CTRL+C) converting them into &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/console/key-event-record-str&quot;&gt;&lt;code&gt;KEY_EVENT_RECORDS&lt;/code&gt;&lt;/a&gt; that will effect the corresponding control action&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VT Renderer&lt;/strong&gt;: Generates the VT sequences necessary to move the cursor and render the text and styling in regions of the Output Buffer that have changed since the previous frame&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Okay, but what does this actually mean?&lt;/p&gt;
&lt;h2 id=&quot;how-do-windows-command-line-applications-work&quot;&gt;How Do Windows Command-Line Applications Work?&lt;/h2&gt;
&lt;p&gt;To better understand the impact of the new ConPTY infrastructure, let's consider for a moment how Windows Console and Command-Line applications have worked up until now.&lt;/p&gt;
&lt;p&gt;Whenever a user launches a Command-Line application like Cmd, PowerShell, or ssh, Windows creates a new Win32 process into which it loads the app's executable binary file, and any dependencies (resources or libraries).&lt;/p&gt;
&lt;p&gt;The newly created process usually inherits the stdin and stdout handles from its parent. If the parent was a Windows GUI process, there are no stdin and stdout handles and so Windows will spin up and attach the new app to a new Console instance. Communications between Command-Line apps and their Console are transported via ConDrv.&lt;/p&gt;
&lt;p&gt;For example, if launched from a non-elevated PowerShell instance, the new app process will inherit its parent's stdin/stdout handles and will therefore receive input from and emit output to the same Console as the parent.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a little &quot;hand-waving&quot; going on here as there are cases where Command-Line apps are launched attached to a &lt;em&gt;new&lt;/em&gt; Console instance, especially for security reasons, but the cases described above are generally true.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ultimately, when a Command-Line app/shell is launched, Windows connects it to a Console (ConHost.exe) instance via ConDrv:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://msdnshared.blob.core.windows.net/media/2018/08/command-line-conpty-1803-console-architecture.png&quot; alt=&quot;Console architecture in Win10 1803&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;how-does-conhost-work&quot;&gt;How does ConHost work?&lt;/h2&gt;
&lt;p&gt;Whenever a Command-Line application is executed, Windows will connect the app to a new or existing ConHost instance. The app and its Console instance are connected via the kernel-mode Console Driver (ConDrv) which sends/receives IOCTL messages containing serialized API call requests and/or text data.&lt;/p&gt;
&lt;p&gt;Historically, as outlined in prior posts, ConHost's job today is a relatively simple one:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The user generates input via keyboard/mouse/pen/touch which is converted into &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/console/key-event-record-str&quot;&gt;&lt;code&gt;KEY_EVENT_RECORD&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/console/mouse-event-record-str&quot;&gt;&lt;code&gt;MOUSE_EVENT_RECORD&lt;/code&gt;&lt;/a&gt; and stored in the Input Buffer&lt;/li&gt;
&lt;li&gt;The Input Buffer is drained one record at a time and performs the requested input action like draw text on screen, move cursor, copy/paste text, etc. Many of these actions result in the Output Buffer's contents being changed. These changed regions are recorded by ConHost's state engine&lt;/li&gt;
&lt;li&gt;Each frame, the Console renders the OutputBuffer's changed regions to the display&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;When a Command-Line app calls Windows Console APIs, the API calls are serialized into IOCTL messages and sent via the ConDrv driver. ConDrv then delivers the IOCTL messages to the attached Console, which decodes and executes the requested API call. Return/output values are serialized back into an IOCTL message and sent back to the app via ConDrv.&lt;/p&gt;
&lt;h2 id=&quot;conhost---investing-in-yesterday-for-tomorrow&quot;&gt;ConHost - Investing in yesterday for tomorrow&lt;/h2&gt;
&lt;p&gt;Microsoft tries, wherever possible, to maintain backward compatibility with existing apps/tools. This is especially true in the Command-Line world. In fact, 32-bit editions of Windows 10 can still run many/most &quot;Win16&quot; 16-bit Windows apps and executables!&lt;/p&gt;
&lt;p&gt;As mentioned above, one of ConHost's key roles is to provide services to Command-Line apps that it hosts, especially legacy apps that call and rely on the Win32 Console API. ConHost now offers some new services:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Seamlessly provide PTY-like infrastructure for communication with modern Consoles and Terminals&lt;/li&gt;
&lt;li&gt;Modernizes legacy/traditional Command-Line Apps
&lt;ul&gt;&lt;li&gt;Receives &amp;amp; converts UTF-8 encoded text/VT into input records (as if typed by user)&lt;/li&gt;
&lt;li&gt;Executes Console API calls for the app it's hosting, updating its &quot;Output Buffer&quot; accordingly&lt;/li&gt;
&lt;li&gt;Renders changed regions of the output buffer as UTF-8 encoded text/VT&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Below is an example of a modern Console app talking via a ConPTY ConHost to a Command-Line app&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://msdnshared.blob.core.windows.net/media/2018/08/command-line-conpty-bridging.png&quot; alt=&quot;ConPty bridging Traditional and Modern Command-Line apps&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In this new model:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Console:
&lt;ol&gt;&lt;li&gt;Creates its own communication pipes&lt;/li&gt;
&lt;li&gt;Calls the ConPTY API to create a ConPTY causing Windows to spin up a ConHost instance connected to the other end of the pipes&lt;/li&gt;
&lt;li&gt;Creates an instance of the Command-Line app (e.g. PowerShell) attached to ConHost as usual&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;ConHost:
&lt;ol&gt;&lt;li&gt;Reads UTF-8 encoded text/VT input and converts into &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/console/input-record-str&quot;&gt;&lt;code&gt;INPUT_RECORD&lt;/code&gt;&lt;/a&gt; that are sent to the Command-Line app&lt;/li&gt;
&lt;li&gt;Executes API calls from the Command-Line app which may modify the contents of the Output Buffer&lt;/li&gt;
&lt;li&gt;Renders changes in its Output Buffer as UTF-8 encoded text/VT and sends the resulting text to its Console&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Command-Line app:
&lt;ol&gt;&lt;li&gt;Runs as usual, reading input and calling Console APIs without any knowledge that its ConPTY ConHost is translating its input/output from/to UTF-8 encoded text/VT!&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The latter point is important! When a legacy Command-Line app uses a Console API like &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/console/writeconsoleoutput&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;WriteConsoleOutput(...)&lt;/code&gt;&lt;/a&gt;, the specified text is written to the attached ConHost's Output Buffer. Periodically, ConHost renders changed areas of the Output Buffer as text/VT which is sent via stdout back to the Console.&lt;/p&gt;
&lt;p&gt;Ultimately, this means that even traditional Command-Line apps &quot;speak text/VT&quot; externally, &lt;em&gt;&lt;strong&gt;without requiring any changes&lt;/strong&gt;&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Using the new ConPTY infrastructure, 3rd party Consoles can now communicate directly with modern and traditional Command-Line applications, and speak text/VT with all of them.&lt;/p&gt;
&lt;h2 id=&quot;remoting-windows-command-line-applications&quot;&gt;Remoting Windows Command-Line Applications&lt;/h2&gt;
&lt;p&gt;The mechanism above works great on a single machine, but also helps when you interact with, for example, a PowerShell instance running on a remote Windows machine or in a container&lt;/p&gt;
&lt;p&gt;To run Command-Line applications remotely (i.e. on remote machines, servers, or in containers), there is a challenge: Command-Line apps running on remote machines communicate with a local ConHost instance because IOCTL messages are not designed for use over a network connection. So how does input from a Console running on your client machine get to the remote machine, and how does output from the app running on the remote machine get back to your client Console? Further, what if you're running a Linux or Mac machine that has Terminals, but not Windows-compatible Consoles, and don't understand how Windows Console works?&lt;/p&gt;
&lt;p&gt;So, to remotely operate a Windows machine we need a communications broker of some kind - one that can transparently serialize data across some form of network connection and manage app instance lifetime, etc.&lt;/p&gt;
&lt;p&gt;Something like &lt;a href=&quot;https://en.wikipedia.org/wiki/Secure_Shell&quot; target=&quot;_blank&quot;&gt;ssh&lt;/a&gt;, perhaps?&lt;/p&gt;
&lt;p&gt;Thankfully, &lt;a href=&quot;https://www.openssh.com/&quot; target=&quot;_blank&quot;&gt;OpenSSH&lt;/a&gt; was recently &lt;a href=&quot;https://github.com/PowerShell/Win32-OpenSSH&quot; target=&quot;_blank&quot;&gt;ported to Windows&lt;/a&gt; and &lt;a href=&quot;https://blogs.msdn.microsoft.com/commandline/2018/01/22/openssh-in-windows-10/&quot; target=&quot;_blank&quot;&gt;added as a Windows 10 optional feature&lt;/a&gt;. PowerShell Core has also adopted ssh as one of its supported &lt;a href=&quot;https://docs.microsoft.com/en-us/powershell/scripting/core-powershell/running-remote-commands&quot; target=&quot;_blank&quot;&gt;PowerShell Core Remoting&lt;/a&gt; protocols. And for those who've invested in Windows PowerShell, &lt;a href=&quot;https://docs.microsoft.com/en-us/powershell/scripting/core-powershell/running-remote-commands?view=powershell-6#windows-powershell-remoting&quot; target=&quot;_blank&quot;&gt;Windows PowerShell Remoting&lt;/a&gt; is still a viable option.&lt;/p&gt;
&lt;p&gt;Let's consider how &lt;a href=&quot;https://github.com/PowerShell/Win32-OpenSSH&quot; target=&quot;_blank&quot;&gt;OpenSSH for Windows&lt;/a&gt; allows us to remotely operate Windows Command-Line shells and apps today:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://msdnshared.blob.core.windows.net/media/2018/08/command-line-conpty-remoting-before-pty.png&quot; alt=&quot;Command-Line Remoting Before ConPTY&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Currently, OpenSSH involves some unwanted convolutions:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The user:
&lt;ol&gt;&lt;li&gt;Runs the ssh client and Windows attaches a Console instance as usual&lt;/li&gt;
&lt;li&gt;Types into the Console which sends keystrokes to the ssh clent&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;The ssh client:
&lt;ol&gt;&lt;li&gt;Reads input as bytes of text data&lt;/li&gt;
&lt;li&gt;Sends the text data via the network to the listening sshd service&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;The sshd service has to jump through several hoops:
&lt;ol&gt;&lt;li&gt;Launches the default shell (i.e. Cmd) which causes Windows to spawn &amp;amp; connect a new Console instance&lt;/li&gt;
&lt;li&gt;Finds &amp;amp; attaches itself to the Cmd instance's Console&lt;/li&gt;
&lt;li&gt;Moves Console off-screen (and/or hides it)&lt;/li&gt;
&lt;li&gt;Sends input data received from ssh client to the off-screen Console as input&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;The cmd instance operates as it always has:
&lt;ol&gt;&lt;li&gt;Gathers input delivered by the sshd service&lt;/li&gt;
&lt;li&gt;Does work&lt;/li&gt;
&lt;li&gt;Calls Console APIs to emit/style text, move the cursor, etc.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;The attached [off-screen] Console:
&lt;ol&gt;&lt;li&gt;Executes the API calls, updating its output buffer&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;The sshd service:
&lt;ol&gt;&lt;li&gt;Scrapes the off-screen Console's output buffer, finds differences, encodes them into text/VT and sends them back to ...&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;The ssh client which sends the text back to ...&lt;/li&gt;
&lt;li&gt;The Console, which draws the text on the screen&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Fun, right? No, it's not!&lt;/strong&gt;&lt;/em&gt; There's a lot that can and does go wrong, especially in the process of simulating and sending user-input and scraping the output buffer to/from the off-screen Console. This results in instability, crashes, data corruption, excessive power consumption, etc. Further, not all apps do the work to scrape text properties as well as text itself, which results in text formatting being lost, and remoted applications' text being &quot;monochromatized&quot;!&lt;/p&gt;
&lt;h3 id=&quot;remoting-using-modern-conhost-and-conpty&quot;&gt;Remoting Using Modern ConHost and ConPTY&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Surely we can do better than this?&lt;/strong&gt;&lt;/em&gt; Yes, yes we can - let's make a few architectural changes and use our new ConPTY:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://msdnshared.blob.core.windows.net/media/2018/08/command-line-conpty-remoting-with-pty.png&quot; alt=&quot;Command-Line Remoting With ConPTY&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In the diagram above, we can see:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The user:
&lt;ol&gt;&lt;li&gt;Runs the ssh client and Windows attaches a Console instance as usual&lt;/li&gt;
&lt;li&gt;Types into the Console which sends keystrokes to the ssh clent&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;The ssh client:
&lt;ol&gt;&lt;li&gt;Reads input as bytes of text data&lt;/li&gt;
&lt;li&gt;Sends the text data via the network to the listening sshd service&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;The sshd service:
&lt;ol&gt;&lt;li&gt;Creates stdin/stdout pipes&lt;/li&gt;
&lt;li&gt;Calls the ConPTY API to create a ConPTY&lt;/li&gt;
&lt;li&gt;Launches instance of Cmd attached to the other end of the ConPTY. Windows spins-up and attaches a new ConHost instance&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;The cmd instance operates as it always has:
&lt;ol&gt;&lt;li&gt;Gathers input&lt;/li&gt;
&lt;li&gt;Does work&lt;/li&gt;
&lt;li&gt;Calls Console APIs to emit/style text, move the cursor, etc.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;The ConPTY ConHost instance:
&lt;ol&gt;&lt;li&gt;Executes the API calls, updating its output buffer&lt;/li&gt;
&lt;li&gt;Renders changed regions of the output buffer as UTF-8 encoded text/VT which is sent back to the Console/Terminal via ssh&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The ConPTY-enabled approach above is clearly much cleaner and simpler for the sshd service. The only Windows Console API calls are being executed entirely within a Command-Line app's ConHost instance which converts any visible changes into text/VT: Nothing ConHost is connected to need know that the app its hosting calls Console APIs rather than generating text/VT itself!&lt;/p&gt;
&lt;p&gt;We think you'll agree that this new ConPTY remoting mechanism results in an elegant, consistent, simpler architecture. Combined with the powerful features built into ConHost, supporting legacy apps, and rendering changes caused by apps calling Console APIs into text/VT, the new ConHost and ConPTY infrastructure helps us carry the past into the future.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The ConPTY API is available in the current &lt;a href=&quot;https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewSDK&quot; target=&quot;_blank&quot;&gt;Windows 10 Insider Preview SDK&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By now, I am sure you're itching to see some code 😉&lt;/p&gt;
&lt;p&gt;Let's take a look at the API declarations:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;// Creates a &quot;Pseudo Console&quot; (ConPTY).
HRESULT WINAPI CreatePseudoConsole(
                                _In_ COORD size,        // ConPty Dimensions
                                _In_ HANDLE hInput,     // ConPty Input
                                _In_ HANDLE hOutput,    // ConPty Output
                                _In_ DWORD dwFlags,     // ConPty Flags
                                _Out_ HPCON* phPC);     // ConPty Reference

// Resizes the given ConPTY to the specified size, in characters.
HRESULT WINAPI ResizePseudoConsole(_In_ HPCON hPC, _In_ COORD size);

// Closes the ConPTY and all associated handles. Client applications attached 
// to the ConPTY will also terminated. 
VOID WINAPI ClosePseudoConsole(_In_ HPCON hPC);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The ConPTY API above essentially exposes three new functions:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;CreatePseudoConsole(size, hInput, hOutput, dwFlags, phPC)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;Creates a pty with dimensions of &lt;code&gt;w&lt;/code&gt; columns and &lt;code&gt;h&lt;/code&gt; rows of characters using pipes created by the caller:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;size&lt;/code&gt;: Width and Height (in chars) of the ConPTY buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hInput&lt;/code&gt;: For writing input to the PTY, encoded as UTF-8, text/VT sequences&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hOutput&lt;/code&gt;: For reading the output from the PTY, encoded as UTF-8, text/VT sequences&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dwFlags&lt;/code&gt;: Possible values:
&lt;ul&gt;&lt;li&gt;&lt;code&gt;PSEUDOCONSOLE_INHERIT_CURSOR&lt;/code&gt;: The created ConPTY will attempt to inherit the cursor position of the parent Terminal application&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;phPC&lt;/code&gt;: handle to a Console reference for the cerated ConPty&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Returns&lt;/strong&gt;: Success/failure. On success, &lt;code&gt;phPC&lt;/code&gt; contains handle to the new ConPty&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ResizePseudoConsole(hPC, size)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Resizes the given ConPTY’s internal buffer to represent a display of the specified character width and height&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ClosePseudoConsole(hPC)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Closes the ConPTY and all associated handles. Client applications attached to the ConPTY will also terminated, as if they were running in a console window that was closed&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;using-the-conpty-api&quot;&gt;Using the ConPTY API&lt;/h2&gt;
&lt;p&gt;Below is a small code example of how to call the ConPTY API to create a Pseudo Console and attach a Command-Line application to the created ConPTY.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: A full implementation of this sample will be published on &lt;a href=&quot;https://github.com/microsoft/console&quot; target=&quot;_blank&quot;&gt;our GitHub Repo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot;&gt;    // Note: Most error checking removed for brevity.
    
    // ...
    
    // Initializes the specified startup info struct with the required properties and
    // updates its thread attribute list with the specified ConPTY handle
    HRESULT InitializeStartupInfoAttachedToConPTY(STARTUPINFOEX* siEx, HPCON hPC)
    {
        HRESULT hr = E_UNEXPECTED;
        size_t size;

        siEx-&amp;gt;StartupInfo.cb = sizeof(STARTUPINFOEX);
        
        // Create the appropriately sized thread attribute list
        InitializeProcThreadAttributeList(NULL, 1, 0, &amp;amp;size);
        std::unique_ptr&amp;lt;BYTE[]&amp;gt; attrList = std::make_unique&amp;lt;BYTE[]&amp;gt;(size);
        
        // Set startup info's attribute list &amp;amp; initialize it
        siEx-&amp;gt;lpAttributeList = reinterpret_cast&amp;lt;PPROC_THREAD_ATTRIBUTE_LIST&amp;gt;(
            attrList.get());
        bool fSuccess = InitializeProcThreadAttributeList(
            siEx-&amp;gt;lpAttributeList, 1, 0, (PSIZE_T)&amp;amp;size);
            
        if (fSuccess)
        {
            // Set thread attribute list's Pseudo Console to the specified ConPTY
            fSuccess = UpdateProcThreadAttribute(
                            lpAttributeList,
                            0,
                            PROC_THREAD_ATTRIBUTE_PSEUDOCONSOLE,
                            hPC,
                            sizeof(HPCON),
                            NULL,
                            NULL);
            return fSuccess ? S_OK : HRESULT_FROM_WIN32(GetLastError());
        }
        else
        {
            hr = HRESULT_FROM_WIN32(GetLastError());
        }
        return hr;
    }
    
    // ...
    
    HANDLE hOut, hIn;
    HANDLE outPipeOurSide, inPipeOurSide;
    HANDLE outPipePseudoConsoleSide, inPipePseudoConsoleSide;
    HPCON hPC = 0;

    // Create the in/out pipes:
    CreatePipe(&amp;amp;inPipePseudoConsoleSide, &amp;amp;inPipeOurSide, NULL, 0);
    CreatePipe(&amp;amp;outPipeOurSide, &amp;amp;outPipePseudoConsoleSide, NULL, 0);

    // Create the Pseudo Console, using the pipes
    CreatePseudoConsole(
        {80, 32}, 
        inPipePseudoConsoleSide, 
        outPipePseudoConsoleSide, 
        0, 
        &amp;amp;hPC);

    // Prepare the StartupInfoEx structure attached to the ConPTY.
    STARTUPINFOEX siEx{};
    InitializeStartupInfoAttachedToConPTY(&amp;amp;siEx, hPC);

    // Create the client application, using startup info containing ConPTY info
    wchar_t* commandline = L&quot;c:\\windows\\system32\\cmd.exe&quot;;
    PROCESS_INFORMATION piClient{};
    fSuccess = CreateProcessW(
                    nullptr,
                    commandline,
                    nullptr,
                    nullptr,
                    TRUE,
                    EXTENDED_STARTUPINFO_PRESENT,
                    nullptr,
                    nullptr,
                    &amp;amp;siEx-&amp;gt;StartupInfo,
                    &amp;amp;piClient);

    // ...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;At this point, cmd.exe is running connected to the ConPTY created by &lt;code&gt;CreatePseudoConsole()&lt;/code&gt;. The caller uses the ConPTY's handles that it created to write and read to/from the Cmd instance. The Pseudo Console can be resized by calling &lt;code&gt;ResizePseudoConsole()&lt;/code&gt;, and can be closed by calling &lt;code&gt;ClosePseudoConsole()&lt;/code&gt;:&lt;/p&gt;
&lt;h3 id=&quot;writing-to-pseudo-console&quot;&gt;Writing to Pseudo Console&lt;/h3&gt;
&lt;p&gt;Writing input to the ConPTY is simple:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot;&gt;// Input &quot;echo Hello, World!&quot;, press enter to have cmd process the command,
//  input an up arrow (to get the previous command), and enter again to execute.
std::string helloWorld = &quot;echo Hello, World!\n\x1b[A\n&quot;;
DWORD dwWritten;
WriteFile(hIn, helloWorld.c_str(), (DWORD)helloWorld.length(), &amp;amp;dwWritten, nullptr);
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;resizing-the-pseudo-console&quot;&gt;Resizing the Pseudo Console&lt;/h3&gt;
&lt;p&gt;This scenario shows how to resize the ConPTY:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot;&gt;// Suppose some other async callback triggered us to resize.
//      This call will update the Terminal with the size we received.
HRESULT hr = ResizePseudoConsole(hPC, {120, 30});
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;closing-the-pseudo-console&quot;&gt;Closing the Pseudo Console&lt;/h3&gt;
&lt;p&gt;Closing the ConPTY couldn't be simpler:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot;&gt;ClosePseudoConsole(hPC);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Note: Closing the ConPTY will terminate the associated ConHost and any attached clients.&lt;/p&gt;

&lt;p&gt;The introduction of the ConPTY API is perhaps one of the most fundamental, and liberating, changes that's happened to the Windows Command-Line in several years ... if not &lt;em&gt;decades&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;We, the Console team, have already ported some of Microsoft's tools to use the ConPTY API. We're also working with several teams inside Microsoft (Windows Subsystem for Linux (WSL), Windows Containers, VSCode, Visual Studio, etc.), and with several external parties including &lt;a href=&quot;https://twitter.com/maximusConEmu&quot; target=&quot;_blank&quot;&gt;@maximusConEmu&lt;/a&gt; - creator of the awesome &lt;a href=&quot;https://conemu.github.io/&quot; target=&quot;_blank&quot;&gt;ConEmu&lt;/a&gt; 3rd party Console for Windows.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;But we need your help&lt;/strong&gt;&lt;/em&gt; to raise awareness of, and to start adopting the new ConPTY API:&lt;/p&gt;
&lt;h2 id=&quot;command-line-application-developers&quot;&gt;Command-Line Application Developers&lt;/h2&gt;
&lt;p&gt;If you own and/or maintain an existing traditional Windows Command-Line application, you're largely off the hook and don't have much to do: ConHost will do all the work for you - you can continue to depend upon and call the Console API's as you always have, and your app will work just as it always has, while also benefitting from improved, higher-fidelity experience if operated remotely 😃&lt;/p&gt;
&lt;p&gt;But if you'd like to, you can also introduce new VT support gradually or in new feature areas if you wish - the decision is yours.&lt;/p&gt;
&lt;p&gt;If, on the other hand you're currently or are planning on writing &lt;em&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/em&gt; Windows Command-Line applications, we strongly encourage you to consider simply emitting UTF-8 encoded text/VT instead of calling the Windows Console API: &quot;Speaking VT&quot; will give you access to many features that will not be available via the Windows Console API (e.g. &lt;a href=&quot;https://blogs.msdn.microsoft.com/commandline/2016/09/22/24-bit-color-in-the-windows-console/&quot; target=&quot;_blank&quot;&gt;16M RGB True Color support&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&quot;3rd-party-consoleservice-developers&quot;&gt;3rd Party Console/Service Developers&lt;/h2&gt;
&lt;p&gt;If you're a developer working on a stand-alone Console/Terminal app, or are integrating a Console inside of an application, then we strongly encourage you to explore and adopt the new ConPTY API at your earliest convenience: Adopting the ConPTY API (rather than the older off-screen Console mechanism) is likely to eliminate several classes of bugs, while increasing stability, reliability, and performance.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As an example, the VSCode team currently maintains an issue (&lt;a href=&quot;https://github.com/Microsoft/vscode/issues/45693&quot; target=&quot;_blank&quot;&gt;GitHub #45693&lt;/a&gt;) that tracks several issues caused by Windows' current lack of a Pseudo Console.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;detecting-the-conpty-api&quot;&gt;Detecting the ConPTY API&lt;/h2&gt;
&lt;p&gt;The new ConPTY API will be available for the first time in the Autumn/Fall 2018 release of Windows 10.&lt;/p&gt;
&lt;p&gt;If you need to support earlier versions of Windows, then you'll likely need to test at runtime whether the currently running version of Windows supports ConPTY. As with most Win32 API's an effective way to test if an API is present is to use &lt;a target=&quot;_blank&quot;&gt;Runtime Dynamic Linking&lt;/a&gt; approach of calling &lt;a target=&quot;_blank&quot;&gt;&lt;code&gt;LoadLibrary()&lt;/code&gt;&lt;/a&gt; &amp;amp; &lt;a target=&quot;_blank&quot;&gt;&lt;code&gt;GetProcAddress()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If the currently running version of Windows supports ConPTY, your app can find and call the new ConPTY APIs. If not, you'll have to revert to the convoluted mechanisms used until now, as outlined above.&lt;/p&gt;

&lt;p&gt;Another long post ... this is getting to be a habit! Once again, if you've read and followed the post this far, &lt;strong&gt;THANK YOU&lt;/strong&gt;! 😃&lt;/p&gt;
&lt;p&gt;There's a lot to unpack from the information above, but we feel it is important to understand &lt;em&gt;why&lt;/em&gt; we make changes and improvements such as introducing a Pseudo Console API, as well as &lt;em&gt;what&lt;/em&gt; we built. Our goals here are to eradicate an entire class of issues and limitations for developers of Console and server apps, and to make developing code for the Windows Command Line infrastructure more powerful, consistent, and fun.&lt;/p&gt;
&lt;p&gt;We look forward to hearing from you via &lt;a href=&quot;https://insider.windows.com/en-us/how-to-feedback/&quot;&gt;Feedback Hub&lt;/a&gt;. For more complex problems, please file issues on our &lt;a href=&quot;https://github.com/microsoft/console&quot; target=&quot;_blank&quot;&gt;Windows Console GitHub Repo&lt;/a&gt;. And if you have questions, please &lt;a href=&quot;https://twitter.com/richturn_ms&quot; target=&quot;_blank&quot;&gt;ping me on Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We can't wait to hear about what you build atop the new Pseudo Console API.&lt;/p&gt;
&lt;p&gt;Rich &amp;amp; the Windows Console Team:&lt;br/&gt;&lt;img src=&quot;https://msdnshared.blob.core.windows.net/media/2018/08/Team-Console.png&quot; alt=&quot;Team Console&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 15 Aug 2018 18:50:00 +0000</pubDate>
<dc:creator>mnkypete</dc:creator>
<og:type>article</og:type>
<og:title>Windows Command-Line: Introducing the Windows Pseudo Console (ConPTY)</og:title>
<og:url>http://blogs.msdn.microsoft.com/commandline/?p=3715</og:url>
<og:description>In this, the fourth post in the Windows Command-Line series, we'll discuss the new Windows Pseudo Console (ConPTY) infrastructure and API - why we built it, what it's for, how it works, how to use it, and more.</og:description>
<og:image>https://msdnshared.blob.core.windows.net/media/2018/07/command-line-thompson-richie-teletype.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blogs.msdn.microsoft.com/commandline/2018/08/02/windows-command-line-introducing-the-windows-pseudo-console-conpty/</dc:identifier>
</item>
<item>
<title>Launch HN: The Buttermilk  Company (YC S18) – Homemade Indian Food in 5 Minutes</title>
<link>https://news.ycombinator.com/item?id=17767789</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=17767789</guid>
<description>Hey HN,
&lt;p&gt;I’m Mitra Raman, the founder/CEO of The Buttermilk Company (&lt;a href=&quot;https:///www.thebuttermilkco.com&quot; rel=&quot;nofollow&quot;&gt;https:///www.thebuttermilkco.com&lt;/a&gt;). We help you make authentic, fresh Indian food in 5 minutes by just adding water to our products.&lt;/p&gt;&lt;p&gt;As an Indian-American in my 20s, I grew up eating my mom’s homemade Indian food everyday. When I moved away from home to attend Carnegie Mellon University, I was homesick for the first time and realized how hard it was to find anything that resembled my mom’s food. I either had to make it myself (finding the Indian grocery store + following my mom’s recipe took way too much time) or would settle for whatever generic dishes at the local Indian restaurant. The options were expensive, time-consuming, or tasted horrible.&lt;/p&gt;
&lt;p&gt;Two years into my job as an Software Engineer at Amazon, I asked my mom to help me make her rasam. She gave me all the ingredients in a ziploc bag and told me to just add hot water! I asked my friends about how they coped with homesickness and realized that most parents were also figuring out their own ways of getting their kids’ favorites foods to them when they moved. That’s how the idea for Buttermilk started!&lt;/p&gt;
&lt;p&gt;We crowdsource our recipes from real people (keeping our product truly authentic) and develop them into products that are super easy for our customers to make. If you’ve ever asked your mom to send a family recipe to you, you know how hard it is to get this right! Our team spends hours in the kitchen tweaking each recipe so we can prep and cook it just enough that the customer can complete the cooking with water. We have to be careful to not over-prep such that the taste and nutritional value erode over time.&lt;/p&gt;
&lt;p&gt;We use fresh and non-GMO ingredients, make everything from scratch (seriously, even the garam masala), and deliver our perishable products in sustainable packaging. Our production is extremely detail-oriented and time-consuming because we are recreating recipes for one family into large-scale batches that need to maintain the quality of its original recipe. To improve efficiency, we have built software to track food production, predict incoming volume, and help our production and fulfillment teams communicate. We’re also exploring new shelf-life extension technologies (such as HPP) so our products can last a lot longer. Currently, they must be refrigerated for 5-7 days or frozen for up to 3 months -- if you don’t eat them before then, that is!&lt;/p&gt;
&lt;p&gt;In terms of market size: there are over 4 million Indian immigrants in the U.S. This demographic, like all other ethnic groups, is poorly served by the existing food options when it comes to their cuisines. And of course there is the population of everyone who just likes Indian food and can’t find or make it! Though we are starting with Indian cuisine, we definitely don't plan to stop there. The market for ethnic foods in the U.S. is at least $5B. But in good startup style, we've started with the specific problem we ourselves had.&lt;/p&gt;
&lt;p&gt;We’re super eager to hear your feedback, ideas, and experiences in this space or as it relates to our type of product.&lt;/p&gt;
</description>
<pubDate>Wed, 15 Aug 2018 17:15:42 +0000</pubDate>
<dc:creator>mitraraman</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=17767789</dc:identifier>
</item>
<item>
<title>SQLite – The “server-process-edition” branch</title>
<link>https://sqlite.org/src/artifact/0c6bc6f55191b690</link>
<guid isPermaLink="true" >https://sqlite.org/src/artifact/0c6bc6f55191b690</guid>
<description>&lt;div class=&quot;header&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;img id=&quot;sqlitelogo&quot; src=&quot;https://sqlite.org/src/logo&quot; height=&quot;50&quot;/&gt;&lt;span id=&quot;titlesep&quot;&gt;/&lt;/span&gt; Artifact Content&lt;/div&gt;
&lt;div class=&quot;status&quot;&gt;&lt;a href=&quot;https://sqlite.org/src/login&quot;&gt;Login&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;mainmenu&quot;&gt;&lt;a href=&quot;https://sqlite.org/src/doc/trunk/README.md&quot;&gt;Home&lt;/a&gt; &lt;a href=&quot;https://sqlite.org/src/timeline&quot;&gt;Timeline&lt;/a&gt; &lt;a href=&quot;https://sqlite.org/src/dir?ci=tip&quot;&gt;Files&lt;/a&gt; &lt;a href=&quot;https://sqlite.org/src/brlist&quot;&gt;Branches&lt;/a&gt; &lt;a href=&quot;https://sqlite.org/src/taglist&quot;&gt;Tags&lt;/a&gt; &lt;a href=&quot;https://sqlite.org/src/ticket&quot;&gt;Tickets&lt;/a&gt;&lt;/div&gt;
&lt;form id=&quot;f01&quot; method=&quot;get&quot; action=&quot;/src/artifact&quot;&gt;

&lt;div class=&quot;submenu&quot;&gt;&lt;a class=&quot;label&quot; href=&quot;https://sqlite.org/src/timeline?n=200&amp;amp;uf=0c6bc6f55191b6900595fe37470bbe5772953ab5c64dae967d07a5d58a0c3508&quot;&gt;Check-ins Using&lt;/a&gt; &lt;a class=&quot;label&quot; href=&quot;https://sqlite.org/src/raw/README-server-edition.html?name=0c6bc6f55191b6900595fe37470bbe5772953ab5c64dae967d07a5d58a0c3508&quot;&gt;Download&lt;/a&gt; &lt;a class=&quot;label&quot; href=&quot;https://sqlite.org/src/artifact?name=0c6bc6f55191b690&amp;amp;txt=1&quot;&gt;Text&lt;/a&gt; &lt;label class=&quot;submenuctrl submenuckbox&quot;&gt;&lt;input type=&quot;checkbox&quot; name=&quot;ln&quot; id=&quot;submenuctrl-0&quot;/&gt;Line Numbers&lt;/label&gt;&lt;/div&gt;
&lt;input type=&quot;hidden&quot; name=&quot;name&quot; value=&quot;0c6bc6f55191b690&quot;/&gt;&lt;/form&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;h2&gt;Artifact 0c6bc6f55191b6900595fe37470bbe5772953ab5c64dae967d07a5d58a0c3508:&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;File &lt;a data-href=&quot;/src/finfo?name=README-server-edition.html&amp;amp;m=0c6bc6f55191b690&quot; href=&quot;https://sqlite.org/src/honeypot&quot;&gt;README-server-edition.html&lt;/a&gt; — part of check-in &lt;a class=&quot;timelineHistLink&quot; data-href=&quot;/src/info/fbc4f4ad259cfe04&quot; href=&quot;https://sqlite.org/src/honeypot&quot;&gt;[fbc4f4ad]&lt;/a&gt; at &lt;a data-href=&quot;/src/timeline?c=2017-07-31+19:55:56&quot; href=&quot;https://sqlite.org/src/honeypot&quot;&gt;2017-07-31 19:55:56&lt;/a&gt; on branch &lt;a data-href=&quot;/src/timeline?r=server-process-edition&quot; href=&quot;https://sqlite.org/src/honeypot&quot;&gt;server-process-edition&lt;/a&gt; — Add documentation file ./README-server-edition.html. (user: &lt;a data-href=&quot;/src/timeline?c=2017-07-31+19:55:56&amp;amp;u=dan&quot; href=&quot;https://sqlite.org/src/honeypot&quot;&gt;dan&lt;/a&gt;, size: 9574) &lt;a data-href=&quot;/src/annotate?filename=README-server-edition.html&amp;amp;checkin=fbc4f4ad259cfe04&quot; href=&quot;https://sqlite.org/src/honeypot&quot;&gt;[annotate]&lt;/a&gt; &lt;a data-href=&quot;/src/blame?filename=README-server-edition.html&amp;amp;checkin=fbc4f4ad259cfe04&quot; href=&quot;https://sqlite.org/src/honeypot&quot;&gt;[blame]&lt;/a&gt; &lt;a data-href=&quot;/src/timeline?n=all&amp;amp;uf=0c6bc6f55191b690&quot; href=&quot;https://sqlite.org/src/honeypot&quot;&gt;[check-ins using]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;/div&gt;
&lt;p&gt;This page was generated in about 0.004s by Fossil 2.6 [5519c6b8fc] 2018-08-16 02:03:59&lt;/p&gt;
</description>
<pubDate>Wed, 15 Aug 2018 15:29:32 +0000</pubDate>
<dc:creator>yread</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://sqlite.org/src/artifact/0c6bc6f55191b690</dc:identifier>
</item>
<item>
<title>Markov Chains Explained Visually (2014)</title>
<link>http://setosa.io/ev/markov-chains/</link>
<guid isPermaLink="true" >http://setosa.io/ev/markov-chains/</guid>
<description>&lt;p&gt;

&lt;h3 class=&quot;by-line&quot;&gt;Explained Visually&lt;/h3&gt;
&lt;/p&gt;&lt;p&gt;By &lt;a href=&quot;http://twitter.com/vicapow&quot;&gt;Victor Powell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;with text by &lt;a href=&quot;http://twitter.com/lewislehe&quot;&gt;Lewis Lehe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Markov chains, named after &lt;a href=&quot;https://en.wikipedia.org/wiki/Andrey_Markov&quot;&gt;Andrey Markov&lt;/a&gt;, are mathematical systems that hop from one &quot;state&quot; (a situation or set of values) to another. For example, if you made a Markov chain model of a baby's behavior, you might include &quot;playing,&quot; &quot;eating&quot;, &quot;sleeping,&quot; and &quot;crying&quot; as states, which together with other behaviors could form a 'state space': a list of all possible states. In addition, on top of the state space, a Markov chain tells you the probabilitiy of hopping, or &quot;transitioning,&quot; from one state to any other state---e.g., the chance that a baby currently playing will fall asleep in the next five minutes without crying first.&lt;/p&gt;
&lt;p&gt;A simple, two-state Markov chain is shown below.&lt;/p&gt;
&lt;p ng-controller=&quot;NoControlsCtrl&quot;&gt;&lt;input type=&quot;range&quot; ng-model=&quot;speedRange&quot; min=&quot;1&quot; max=&quot;20&quot; step=&quot;1&quot; class=&quot;speedRange&quot;/&gt;&lt;label&gt;speed&lt;/label&gt;&lt;/p&gt;
&lt;p&gt;With two states (A and B) in our state space, there are 4 possible transitions (not 2, because a state can transition back into itself). If we're at 'A' we could transition to 'B' or stay at 'A'. If we're at 'B' we could transition to 'A' or stay at 'B'. In this two state diagram, the probability of transitioning from any state to any other state is 0.5.&lt;/p&gt;
&lt;p&gt;Of course, real modelers don't always draw out Markov chain diagrams. Instead they use a &quot;transition matrix&quot; to tally the transition probabilities. Every state in the state space is included once as a row and again as a column, and each cell in the matrix tells you the probability of transitioning from its row's state to its column's state. So, in the matrix, the cells do the same job that the arrows do in the diagram.&lt;/p&gt;

&lt;p&gt;If the state space adds one state, we add one row and one column, adding one cell to every existing column and row. This means the number of cells grows quadratically as we add states to our Markov chain. Thus, a transition matrix comes in handy pretty quickly, unless you want to draw a jungle gym Markov chain diagram.&lt;/p&gt;
&lt;p&gt;One use of Markov chains is to include real-world phenomena in computer simulations. For example, we might want to check how frequently a new dam will overflow, which depends on the number of rainy days in a row. To build this model, we start out with the following pattern of rainy (R) and sunny (S) days:&lt;/p&gt;

&lt;p&gt;One way to simulate this weather would be to just say &quot;Half of the days are rainy. Therefore, every day in our simulation will have a fifty percent chance of rain.&quot; This rule would generate the following sequence in simulation:&lt;/p&gt;

&lt;p&gt;Did you notice how the above sequence doesn't look quite like the original? The second sequence seems to jump around, while the first one (the real data) seems to have a &quot;stickyness&quot;. In the real data, if it's sunny (S) one day, then the next day is also much more likely to be sunny.&lt;/p&gt;
&lt;p&gt;We can minic this &quot;stickyness&quot; with a two-state Markov chain. When the Markov chain is in state &quot;R&quot;, it has a 0.9 probability of staying put and a 0.1 chance of leaving for the &quot;S&quot; state. Likewise, &quot;S&quot; state has 0.9 probability of staying put and a 0.1 chance of transitioning to the &quot;R&quot; state.&lt;/p&gt;

&lt;p&gt;In the hands of metereologists, ecologists, computer scientists, financial engineers and other people who need to model big phenomena, Markov chains can get to be quite large and powerful. For example, the algorithm Google uses to determine the order of search results, called &lt;a href=&quot;https://en.wikipedia.org/wiki/PageRank&quot;&gt;PageRank&lt;/a&gt;, is a type of Markov chain.&lt;/p&gt;

&lt;p&gt;Above, we've included a Markov chain &quot;playground&quot;, where you can make your own Markov chains by messing around with a transition matrix. Here's a few to work from as an example: &lt;a href=&quot;javascript:update_playground('long')&quot;&gt;ex1&lt;/a&gt;, &lt;a href=&quot;javascript:update_playground('large')&quot;&gt;ex2&lt;/a&gt;, &lt;a href=&quot;javascript:update_playground('three')&quot;&gt;ex3&lt;/a&gt; or generate one &lt;a href=&quot;javascript:update_playground('random')&quot;&gt;randomly&lt;/a&gt;. The transition matrix text will turn red if the provided matrix isn't a valid transition matrix. &lt;em&gt;The rows of the transition matrix must total to 1.&lt;/em&gt; There also has to be the same number of rows as columns.&lt;/p&gt;
&lt;p&gt;You can also access a fullscreen version at &lt;a href=&quot;http://setosa.io/markov/index.html&quot;&gt;setosa.io/markov&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 15 Aug 2018 14:43:25 +0000</pubDate>
<dc:creator>aogl</dc:creator>
<og:image>/ev/markov-chains/fb-thumb.png</og:image>
<og:title>Markov Chains explained visually</og:title>
<dc:format>text/html</dc:format>
<dc:identifier>http://setosa.io/ev/markov-chains/</dc:identifier>
</item>
<item>
<title>The easiest way to keep your web apps accessible: Just use text</title>
<link>https://blog.logrocket.com/the-easiest-way-to-keep-your-web-apps-accessible-c2b57506cc2a</link>
<guid isPermaLink="true" >https://blog.logrocket.com/the-easiest-way-to-keep-your-web-apps-accessible-c2b57506cc2a</guid>
<description>&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot; readability=&quot;146.59336332958&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*uuQzakQc52pdhRw9KB0NPA.jpeg&quot; data-width=&quot;1920&quot; data-height=&quot;1280&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*uuQzakQc52pdhRw9KB0NPA.jpeg&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*uuQzakQc52pdhRw9KB0NPA.jpeg&quot;/&gt;&lt;/div&gt;

&lt;p name=&quot;039e&quot; id=&quot;039e&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;The web is no longer just a collection of static text documents with a few images and GIFs thrown into the mix. Over the last twenty years or so, we’ve seen the web coalesce into a slurry of web apps small and large, each one more complex and dynamic than the last, strung together with APIs, scripts, and more data than anyone could have ever imagined.&lt;/p&gt;
&lt;p name=&quot;5b08&quot; id=&quot;5b08&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;For web developers, it can be overwhelming to keep up, despite being knee-deep in those technologies every single day. And in our perennial quest to stay current, a lot of things get left behind.&lt;/p&gt;
&lt;p name=&quot;d7aa&quot; id=&quot;d7aa&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;One of the easiest things to forget about — but arguably one of the most important — is accessibility. Just as the web itself has grown, so has the sheer number and diversity of its users. Everyone from kids to seniors, with varying degrees of ability and disability, rely on the web for shopping, entertainment, education, and even life-providing medical information and supplies.&lt;/p&gt;
&lt;p name=&quot;4200&quot; id=&quot;4200&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;But accessibility isn’t just about disabled users, though they are often the focus. Accessibility is about opening the web to everyone. The folks over at 18F &lt;a href=&quot;https://accessibility.18f.gov/&quot; data-href=&quot;https://accessibility.18f.gov/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;put it well:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote name=&quot;b2f9&quot; id=&quot;b2f9&quot; class=&quot;graf graf--pullquote graf-after--p&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;em class=&quot;markup--em markup--pullquote-em&quot;&gt;Accessibility is one of the most important aspects of modern web development. Accessibility means the greatest number of users can view your content. It means search engines will be able to read your site more completely. Users of all types will have a better experience if you take accessibility concerns into account.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;a0ca&quot; id=&quot;a0ca&quot; class=&quot;graf graf--p graf-after--pullquote&quot;&gt;Keeping increasingly complex web apps accessible is a necessity. Fortunately, there is one thing you can do to keep any web app accessible to as many users as possible, and lessen the burden of development and maintenance for yourself, too.&lt;/p&gt;
&lt;p name=&quot;a329&quot; id=&quot;a329&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Just use text.&lt;/p&gt;
&lt;p name=&quot;f1e6&quot; id=&quot;f1e6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;a href=&quot;https://logrocket.com/signup/&quot; data-href=&quot;https://logrocket.com/signup/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;LogRocket is working on the perfect front-end bug report. Click to check it out.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 name=&quot;7bf5&quot; id=&quot;7bf5&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Text wins&lt;/h3&gt;
&lt;p name=&quot;4746&quot; id=&quot;4746&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;In the early days of the web, nearly everything was text, marked up with a fairly limited number of HTML tags. In fact, it wasn’t until &lt;a href=&quot;https://thehistoryoftheweb.com/the-origin-of-the-img-tag/&quot; data-href=&quot;https://thehistoryoftheweb.com/the-origin-of-the-img-tag/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Marc Andreessen introduced&lt;/a&gt; the img tag into Mosaic in 1993 that inline images inside of web pages became available (previously images were accessed through hyperlinks).&lt;/p&gt;
&lt;p name=&quot;8bff&quot; id=&quot;8bff&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;While images opened up and helped popularize the web, the heart of the web was — and still is — text. Every web document is text, regardless of what else is included with it. HTML, text. CSS, text. JavaScript, text. Hell, the protocols that transmit all of that information are declared via text.&lt;/p&gt;
&lt;p name=&quot;0a1d&quot; id=&quot;0a1d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The only thing that has changed is how complex we make that text.&lt;/p&gt;
&lt;p name=&quot;9d73&quot; id=&quot;9d73&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;But text is still the way to build the web. Even as more content is delivered via images, videos, and audio, text is the single best way to keep that content accessible to the widest range of users. That’s because text is easily:&lt;/p&gt;
&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;96b1&quot; id=&quot;96b1&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Read by users&lt;/li&gt;
&lt;li name=&quot;5dea&quot; id=&quot;5dea&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Read by machines (search engines, screen readers, etc.)&lt;/li&gt;
&lt;li name=&quot;814e&quot; id=&quot;814e&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Translated&lt;/li&gt;
&lt;li name=&quot;0ca1&quot; id=&quot;0ca1&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Styled&lt;/li&gt;
&lt;li name=&quot;11c7&quot; id=&quot;11c7&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Zoomed&lt;/li&gt;
&lt;li name=&quot;d362&quot; id=&quot;d362&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;And edited&lt;/li&gt;
&lt;/ul&gt;&lt;p name=&quot;d499&quot; id=&quot;d499&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Additionally, text files are typically much lighter than images, audio, and video. Text helps ease the burden on users with limited bandwidth or slow connections, helping to fight the bloat in modern websites, something Nick Heer recently referred to as &lt;a href=&quot;https://pxlnv.com/blog/bullshit-web/&quot; data-href=&quot;https://pxlnv.com/blog/bullshit-web/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;The Bullshit Web&lt;/em&gt;&lt;/a&gt;. This combination of increased performance and accessible features makes the original foundation of the web hard to beat.&lt;/p&gt;
&lt;p name=&quot;52ab&quot; id=&quot;52ab&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;If we all agree that text is the most usable element on the web, then how can we ensure that our web apps and the content they deliver best put it to work?&lt;/p&gt;
&lt;h3 name=&quot;8161&quot; id=&quot;8161&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Semantic markup&lt;/h3&gt;
&lt;p name=&quot;fb79&quot; id=&quot;fb79&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;When delivering text to users, we include it in the HTML document. Although the earliest days of the web relied on around 18 tags to markup those documents, we now have access to over 100 tags when creating our documents.&lt;/p&gt;
&lt;p name=&quot;f380&quot; id=&quot;f380&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Many of the tags introduced in HTML5 focus on providing added semantics to make it clearer to users and machines what that content is. Tags like section, article, nav, header, footer, and aside better describe their content. Combined with old standards like p, strong, and all of the headings, we can confidently mark up content knowing that it will be accessible to more users than ever before.&lt;/p&gt;
&lt;p name=&quot;2292&quot; id=&quot;2292&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;When building your own pages and applications, you should strive to keep as much content as possible in semantic markup.&lt;/p&gt;
&lt;p name=&quot;6bea&quot; id=&quot;6bea&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;You can always add additional functionality to those tags using things like ARIA roles or data attributes, but the core of your application should rely on semantic elements for marking up content.&lt;/p&gt;
&lt;p name=&quot;a8a3&quot; id=&quot;a8a3&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;It’s easy to see how headings and paragraphs work for blocks of copy, but what about more complicated application features like data tables, cards, notifications, tooltips, and menu buttons? There are some solid patterns that can be used to build those features.&lt;/p&gt;
&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;50bd&quot; id=&quot;50bd&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Heydon Pickering’s &lt;a href=&quot;https://inclusive-components.design/&quot; data-href=&quot;https://inclusive-components.design/&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Inclusive Components&lt;/a&gt; is one of the best, going into detail about how to craft many of those components.&lt;/li&gt;
&lt;li name=&quot;c8fc&quot; id=&quot;c8fc&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Dave Rupert’s &lt;a href=&quot;https://davatron5000.github.io/a11y-nutrition-cards/&quot; data-href=&quot;https://davatron5000.github.io/a11y-nutrition-cards/&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Nutrition Cards for Accessible Components&lt;/a&gt; is new, but a great and growing resource for understanding how some of those common components should properly function.&lt;/li&gt;
&lt;li name=&quot;f908&quot; id=&quot;f908&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;a href=&quot;https://a11yproject.com/patterns&quot; data-href=&quot;https://a11yproject.com/patterns&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;The A11Y Project’s Patterns list&lt;/a&gt; is a great roundup of links.&lt;/li&gt;
&lt;li name=&quot;b971&quot; id=&quot;b971&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Marcy Sutton has a &lt;a href=&quot;https://marcysutton.github.io/accessibility-of-web-components/slides.html#/slide1&quot; data-href=&quot;https://marcysutton.github.io/accessibility-of-web-components/slides.html#/slide1&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;cool presentation&lt;/a&gt; on the topic.&lt;/li&gt;
&lt;li name=&quot;36c0&quot; id=&quot;36c0&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;And, when in doubt, you can always refer back to &lt;a href=&quot;https://medium.com/@addyosmani/accessible-ui-components-for-the-web-39e727101a67&quot; data-href=&quot;https://medium.com/@addyosmani/accessible-ui-components-for-the-web-39e727101a67&quot; class=&quot;markup--anchor markup--li-anchor&quot; target=&quot;_blank&quot;&gt;this helpful guide&lt;/a&gt; from Addy Osmani.&lt;/li&gt;
&lt;/ul&gt;&lt;p name=&quot;134e&quot; id=&quot;134e&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Even with those complex components, the underlying principle is the same: Use semantic markup. If you’re building something wildly complex that no one has ever seen before, sit down, map out what the child elements of that component are, and try to use semantic markup for those child elements.&lt;/p&gt;
&lt;h3 name=&quot;71f5&quot; id=&quot;71f5&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Styling accessible text&lt;/h3&gt;
&lt;p name=&quot;97c9&quot; id=&quot;97c9&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Once you have your text marked up with semantic tags, you need to style it. Thankfully, there are &lt;a href=&quot;https://www.w3.org/TR/WCAG20/#visual-audio-contrast&quot; data-href=&quot;https://www.w3.org/TR/WCAG20/#visual-audio-contrast&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;clear guidelines&lt;/a&gt; for styling your text so that it’s accessible to everyone.&lt;/p&gt;
&lt;p name=&quot;12ea&quot; id=&quot;12ea&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The first thing you should do is ensure that your text is zoomable. Many users with low-vision use browser or OS-level zoom controls to bump up the text size on their screens. But some developers still disable zoom on web pages with the following:&lt;/p&gt;
&lt;pre name=&quot;827e&quot; id=&quot;827e&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
&amp;lt;meta name=”viewport” content=”initial-scale=1, maximum-scale=1&quot;&amp;gt;
&lt;/pre&gt;
&lt;p name=&quot;da6c&quot; id=&quot;da6c&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;When set the same as the initial scale, maximum-scale prevents users from enlarging the text. Keeping text zoomable is therefore easy: Just remove that value.&lt;/p&gt;
&lt;p name=&quot;3049&quot; id=&quot;3049&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;When it comes to the actual styling of text, the main things you want to consider are &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;size&lt;/strong&gt; and &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;contrast&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*tXbauN7gEIweTGBj&quot; data-width=&quot;1600&quot; data-height=&quot;526&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*tXbauN7gEIweTGBj&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/0*tXbauN7gEIweTGBj&quot;/&gt;&lt;/div&gt;
Contrast is a key when it comes to visual accessibility.&lt;/div&gt;
&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot; readability=&quot;143.42656428688&quot;&gt;
&lt;p name=&quot;4d20&quot; id=&quot;4d20&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The main consideration is making text easy to ready without forcing users to zoom in. A baseline font size of 14px is recommended, but larger than that is often better.&lt;/p&gt;
&lt;p name=&quot;7c23&quot; id=&quot;7c23&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;For contrast, the rule is simple, as specified in &lt;a href=&quot;https://www.w3.org/TR/WCAG20/#visual-audio-contrast&quot; data-href=&quot;https://www.w3.org/TR/WCAG20/#visual-audio-contrast&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Guideline 1.4 of the WCAG 2.0 Recommendation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote name=&quot;4a23&quot; id=&quot;4a23&quot; class=&quot;graf graf--pullquote graf-after--p&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;em class=&quot;markup--em markup--pullquote-em&quot;&gt;Make it easier for users to see and hear content including separating foreground from background.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;d8ce&quot; id=&quot;d8ce&quot; class=&quot;graf graf--p graf-after--pullquote&quot;&gt;The Guideline goes on to make recommendations on not using color as the only means of conveying information, minimum contrast ratios, and even text resizing, but the idea is simple: Clearly contrast text from its background. That means keeping text large and either dark enough (when on a light background) or light enough (when on a dark background). There are a few tools for checking contrast, including &lt;a href=&quot;https://webaim.org/resources/contrastchecker/&quot; data-href=&quot;https://webaim.org/resources/contrastchecker/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;WebAIM’s Color Contrast Checker&lt;/a&gt; and even tools for the design phase, like &lt;a href=&quot;http://www.getstark.co/&quot; data-href=&quot;http://www.getstark.co/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Stark for Sketch&lt;/a&gt;.&lt;/p&gt;
&lt;p name=&quot;c81e&quot; id=&quot;c81e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;There’s a lot more that goes into designing and styling text, but I’ll leave it to you to dig into that topic on your own. Hint: &lt;a href=&quot;http://book.webtypography.net/&quot; data-href=&quot;http://book.webtypography.net/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Here’s a good starting point&lt;/a&gt;.&lt;/p&gt;
&lt;h3 name=&quot;9775&quot; id=&quot;9775&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Text and images&lt;/h3&gt;
&lt;p name=&quot;e06a&quot; id=&quot;e06a&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Images still serve a vital role in conveying information and creating a more enjoyable experience for users. But, you need to keep your images just as accessible as the rest of your application.&lt;/p&gt;
&lt;p name=&quot;0752&quot; id=&quot;0752&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;To do that, you should use alternative (ALT) text on your img tags. ALT text provides some context for the content of images so that users with low-vision can better understand what’s in the image, typically when using assistive technology like screen readers. You use ALT text by adding the alt attribute with a value of the text equivalent of your image, like so:&lt;/p&gt;
&lt;pre name=&quot;772f&quot; id=&quot;772f&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
&amp;lt;img src=“https://example.com/image.png” alt=“developer in an office working feverishly to hit a deadline on a software project” /&amp;gt;
&lt;/pre&gt;
&lt;p name=&quot;06cc&quot; id=&quot;06cc&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Even when working with icons or icon fonts, you can keep them accessible using text. Decorative icons (ones that don’t convey vital information) should still use the alt attribute but keep the value empty. Then you can apply the aria-hidden attribute to ensure that it’s ignored by screen readers:&lt;/p&gt;
&lt;pre name=&quot;2818&quot; id=&quot;2818&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
&amp;lt;img src=“https://example.com/icon.svg” alt=“” aria-hidden /&amp;gt;
&lt;/pre&gt;
&lt;p name=&quot;f868&quot; id=&quot;f868&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;But for non-decorative icons, you can keep them accessible by either using ALT text on the image or loading the icon using CSS with HTML text as a hidden fallback for screen readers, similar to how &lt;a href=&quot;https://fontawesome.com/how-to-use/on-the-web/other-topics/accessibility&quot; data-href=&quot;https://fontawesome.com/how-to-use/on-the-web/other-topics/accessibility&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Font Awesome&lt;/a&gt; does it:&lt;/p&gt;
&lt;pre name=&quot;4514&quot; id=&quot;4514&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
&amp;lt;i aria-hidden class=”fas fa-car” title=”Time to destination by car”&amp;gt;&amp;lt;/i&amp;gt;&lt;br/&gt;&amp;lt;span class=”sr-only”&amp;gt;Time to destination by car:&amp;lt;/span&amp;gt;&lt;br/&gt;&amp;lt;span&amp;gt;4 minutes&amp;lt;/span&amp;gt;
&lt;/pre&gt;
&lt;p name=&quot;f574&quot; id=&quot;f574&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;The icon is loaded via CSS on the i tag, which includes a title for mouse users. The span immediately following is hidden with CSS, but is still available to screen readers. It’s a clever solution, one that both &lt;a href=&quot;https://css-tricks.com/can-make-icon-system-accessible/&quot; data-href=&quot;https://css-tricks.com/can-make-icon-system-accessible/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;CSS-Tricks&lt;/a&gt; and &lt;a href=&quot;https://www.filamentgroup.com/lab/bulletproof_icon_fonts.html&quot; data-href=&quot;https://www.filamentgroup.com/lab/bulletproof_icon_fonts.html&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;The Filament Group&lt;/a&gt; support (with a few variations for good measure).&lt;/p&gt;
&lt;p name=&quot;438c&quot; id=&quot;438c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Writing effective ALT text is an art form in itself. Thankfully, there are some great resources out there, one of the best being &lt;a href=&quot;https://webaim.org/techniques/alttext/&quot; data-href=&quot;https://webaim.org/techniques/alttext/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;WebAIM’s Alternative Text guide.&lt;/a&gt;&lt;/p&gt;
&lt;h3 name=&quot;d69e&quot; id=&quot;d69e&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Accessibility and frameworks&lt;/h3&gt;
&lt;p name=&quot;d8df&quot; id=&quot;d8df&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Although JavaScript frameworks like React and Vue are changing the way many developers build web applications, they don’t change the need for those applications to remain accessible to a wide variety of users. They just introduce a few complications for us. But we can keep those framework-driven apps accessible by following a simple rule:&lt;/p&gt;
&lt;p name=&quot;6f0b&quot; id=&quot;6f0b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Don’t let the framework force you into poor choices.&lt;/strong&gt;&lt;/p&gt;
&lt;p name=&quot;9c9b&quot; id=&quot;9c9b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;While frameworks like React do have suggested ways of accomplishing things, they don’t generally force you into abandoning non-semantic HTML — that’s the developer’s choice. It’s up to you to create thoughtful, well-designed, and accessible components, so stick to the fundamentals of semantic HTML.&lt;/p&gt;
&lt;p name=&quot;6031&quot; id=&quot;6031&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;A good example of this can be taken from React’s own documentation. &lt;a href=&quot;https://reactjs.org/docs/components-and-props.html&quot; data-href=&quot;https://reactjs.org/docs/components-and-props.html&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;When discussing components and props&lt;/a&gt;, they use a comment as an example:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*ycqHgCxgModyHzG8&quot; data-width=&quot;1472&quot; data-height=&quot;1098&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*ycqHgCxgModyHzG8&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*ycqHgCxgModyHzG8&quot;/&gt;&lt;/div&gt;
The default markup for a React component.
&lt;p name=&quot;3277&quot; id=&quot;3277&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;What if we replaced some of those div elements with more descriptive HTML tags?&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*jdscAIXApOm29qzT&quot; data-width=&quot;1472&quot; data-height=&quot;1098&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*jdscAIXApOm29qzT&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*jdscAIXApOm29qzT&quot;/&gt;&lt;/div&gt;
Could we make that component a bit more accessible?
&lt;p name=&quot;c2fc&quot; id=&quot;c2fc&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article&quot; data-href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;As suggested by MDN&lt;/a&gt;, the comment could be more semantically described with the article element, with the comment text being a paragraph. Additionally, the comment date could be marked up with the more semantic time element, which could even include the machine-readable version of the comment publication date in the datetime attribute. Depending on your application’s page hierarchy, you could change the user’s name to be a heading. Or, how about making the entire user info section a figure and using figcaption to markup the name?&lt;/p&gt;
&lt;p name=&quot;f5bc&quot; id=&quot;f5bc&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Frameworks like React also have a few gotchas that you need to worry about when attempting to keep your apps accessible. In particular, React reserves keywords that can sometimes add confusion or break accessibility. A good example of this is when building forms.&lt;/p&gt;
&lt;p name=&quot;98c9&quot; id=&quot;98c9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Accessible forms will always include labels for inputs, which clearly describe what that input is to be used for. In HTML, the label and input are linked with the for attribute and an id on the input itself. Since for is a reserved keyword in JavaScript, you need to use htmlFor instead. The same thing applies to class, which becomes className.&lt;/p&gt;
&lt;p name=&quot;fc74&quot; id=&quot;fc74&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;But, when using ARIA attributes in React, you don’t need to camelCase them. Fortunately, they are fully supported in JSX, so including something like aria-hidden in an icon component works perfectly.&lt;/p&gt;
&lt;h3 name=&quot;0533&quot; id=&quot;0533&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Keep your apps accessible&lt;/h3&gt;
&lt;p name=&quot;ce70&quot; id=&quot;ce70&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;In the U.S. alone, &lt;a href=&quot;http://www.interactiveaccessibility.com/accessibility-statistics&quot; data-href=&quot;http://www.interactiveaccessibility.com/accessibility-statistics&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;over 18% of the population have some sort of disability&lt;/a&gt; and the saying, “At some point, we’ll all be disabled” is true. Whether you experience a temporary or permanent disability, you’ll likely be faced with challenges when using digital technology at some point in your life.&lt;/p&gt;
&lt;p name=&quot;329d&quot; id=&quot;329d&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;As developers, we’re in a unique position. We can choose to either help people or hinder them. Regardless, we will impact their lives in some way. By being more deliberate in our choices as developers, especially by favoring text and thoughtful, semantic markup, we have the power to improve the lives of a lot of people. So take some time to think about your applications and the techniques you use to build them.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 15 Aug 2018 14:04:37 +0000</pubDate>
<dc:creator>efunction</dc:creator>
<og:title>The easiest way to keep your web apps accessible: Just use text</og:title>
<og:url>https://blog.logrocket.com/the-easiest-way-to-keep-your-web-apps-accessible-c2b57506cc2a</og:url>
<og:image>https://cdn-images-1.medium.com/max/1200/1*uuQzakQc52pdhRw9KB0NPA.jpeg</og:image>
<og:description>Let's be more deliberate in our choices as developers, especially by favoring text and thoughtful, semantic markup.</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.logrocket.com/the-easiest-way-to-keep-your-web-apps-accessible-c2b57506cc2a?gi=af4a74091831</dc:identifier>
</item>
<item>
<title>Companies Shouldn’t Be Accountable Only to Shareholders</title>
<link>https://www.wsj.com/articles/companies-shouldnt-be-accountable-only-to-shareholders-1534287687</link>
<guid isPermaLink="true" >https://www.wsj.com/articles/companies-shouldnt-be-accountable-only-to-shareholders-1534287687</guid>
<description>&lt;div class=&quot;clearfix byline-wrap&quot;&gt;


    

        
    &lt;div class=&quot;byline&quot;&gt;
    
    
        &lt;span&gt;By&lt;/span&gt;
    
              &lt;div class=&quot;author mobile-scrim hasMenu&quot; data-scrim=&quot;{&amp;quot;type&amp;quot;:&amp;quot;author&amp;quot;,&amp;quot;header&amp;quot;:&amp;quot;Elizabeth Warren&amp;quot;,&amp;quot;subhead&amp;quot;:&amp;quot;The Wall Street Journal&amp;quot;,&amp;quot;list&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;bio&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://www.wsj.com/news/author/8131&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;Biography&amp;quot;}]}&quot; itemscope=&quot;&quot; itemprop=&quot;author&quot; itemtype=&quot;http://schema.org/Person&quot;&gt;
                  &lt;span class=&quot;name&quot; itemprop=&quot;name&quot;&gt;Elizabeth Warren&lt;/span&gt;
                  &lt;ul class=&quot;author-info&quot;&gt;&lt;li class=&quot;tri&quot;/&gt;
                    &lt;div class=&quot;info-name&quot;&gt;Elizabeth Warren&lt;/div&gt;
                    &lt;div class=&quot;info-title&quot;&gt;The Wall Street Journal&lt;/div&gt;
                    &lt;li&gt;&lt;a href=&quot;https://www.wsj.com/news/author/8131&quot; class=&quot;author icon bio&quot;&gt;Biography&lt;/a&gt;&lt;/li&gt;
                    
                    
                    
                    
                  &lt;/ul&gt;&lt;/div&gt;

    &lt;/div&gt;
    
    &lt;time class=&quot;timestamp&quot;&gt;
      Aug. 14, 2018 7:01 p.m. ET
    &lt;/time&gt;&lt;/div&gt;

  



       &lt;p&gt;Corporate profits are booming, but average wages haven’t budged over the past year. The U.S. economy has run this way for decades, partly because of a fundamental change in business practices dating back to the 1980s. On Wednesday I’m introducing legislation to fix it.&lt;/p&gt; &lt;p&gt;American corporations exist only because the American people grant them charters. Those charters confer valuable privileges—such as limited legal liability for their owners—that enable businesses to turn a profit. What do Americans get in return? What are the obligations of corporate citizenship in the U.S.?&lt;/p&gt;




      &lt;div class=&quot;paywall&quot;&gt;




       &lt;p&gt;For much of U.S. history, the answers were clear. Corporations sought to succeed in the marketplace, but they also recognized their obligations to employees, customers and the community. As recently as 1981, the Business Roundtable—which represents large U.S. companies—stated that corporations “have a responsibility, first of all, to make available to the public quality goods and services at fair prices, thereby earning a profit that attracts investment to continue and enhance the enterprise, provide jobs, and build the economy.” This approach worked. American companies and workers thrived. &lt;/p&gt; &lt;p&gt;Late in the 20th century, the dynamic changed. Building on work by conservative economist 




      Milton Friedman, 




       a new theory emerged that corporate directors had only one obligation: to maximize shareholder returns. By 1997 the Business Roundtable declared that the “principal objective of a business enterprise is to generate economic returns to its owners.”&lt;/p&gt; &lt;p&gt;That shift has had a tremendous effect on the economy. In the early 1980s, large American companies sent less than half their earnings to shareholders, spending the rest on their employees and other priorities. But between 2007 and 2016, large American companies dedicated 93% of their earnings to shareholders. Because the wealthiest 10% of U.S. households own 84% of American-held shares, the obsession with maximizing shareholder returns effectively means America’s biggest companies have dedicated themselves to making the rich even richer.&lt;/p&gt; &lt;p&gt;In the four decades after World War II, shareholders on net contributed more than $250 billion to U.S. companies. But since 1985 they have extracted almost $7 trillion. That’s trillions of dollars in profits that might otherwise have been reinvested in the workers who helped produce them.&lt;/p&gt; &lt;p&gt;Before “shareholder value maximization” ideology took hold, wages and productivity grew at roughly the same rate. But since the early 1980s, real wages have stagnated even as productivity has continued to rise. Workers aren’t getting what they’ve earned. &lt;/p&gt; &lt;p&gt;Companies also are setting themselves up to fail. Retained earnings were once the foundation for long-term investments. But from 1990 to 2015, nonfinancial U.S. companies invested trillions less than projected, funneling earnings to shareholders instead. This underinvestment handcuffs U.S. enterprise and bestows an advantage on foreign competitors. &lt;/p&gt; &lt;p&gt;The problem may get worse, because executives have a strong financial incentive to prioritize shareholder returns. Before 1980, top CEOs were rarely compensated in equity. Today it accounts for 62% of their pay. Many executives receive additional company shares as a reward for producing short-term share-price increases. This feedback loop has sent CEO pay skyrocketing. The average CEO of a big company now makes 361 times what the average worker makes, up from 42 times in 1980.&lt;/p&gt; &lt;p&gt;Corporate charters, which define the structure and obligations of U.S. companies, are an obvious tool for addressing these skewed incentives. But companies are chartered at the state level. Most states don’t want to demand more of companies, lest they incorporate elsewhere.&lt;/p&gt; &lt;p&gt;That’s where my bill comes in. The Accountable Capitalism Act restores the idea that giant American corporations should look out for American interests. Corporations with more than $1 billion in annual revenue would be required to get a federal corporate charter. The new charter requires corporate directors to consider the interests of all major corporate stakeholders—not only shareholders—in company decisions. Shareholders could sue if they believed directors weren’t fulfilling those obligations.&lt;/p&gt; &lt;p&gt;This approach follows the “benefit corporation” model, which gives businesses fiduciary responsibilities beyond their shareholders. Thirty-four states already authorize benefit corporations. And successful companies such as Patagonia and Kickstarter have embraced this role.&lt;/p&gt; &lt;p&gt;My bill also would give workers a stronger voice in corporate decision-making at large companies. Employees would elect at least 40% of directors. At least 75% of directors and shareholders would need to approve before a corporation could make any political expenditures. To address self-serving financial incentives in corporate management, directors and officers would not be allowed to sell company shares within five years of receiving them—or within three years of a company stock buyback. &lt;/p&gt; &lt;p&gt;For the past 30 years we have put the American stamp of approval on giant corporations, even as they have ignored the interests of all but a tiny slice of Americans. We should insist on a new deal.&lt;/p&gt; &lt;p&gt; &lt;em&gt;Ms. Warren, a Democrat, is a U.S. senator from Massachusetts.&lt;/em&gt; &lt;/p&gt;






      &lt;/div&gt;






    &lt;p class=&quot;printheadline&quot;&gt;
      Appeared in the August 15, 2018, print edition.
    &lt;/p&gt;




</description>
<pubDate>Wed, 15 Aug 2018 13:56:34 +0000</pubDate>
<dc:creator>mji</dc:creator>
<og:title>Companies Shouldn’t Be Accountable Only to Shareholders</og:title>
<og:description>My new bill would require corporations to answer to employees and other stakeholders as well.</og:description>
<og:url>https://www.wsj.com/articles/companies-shouldnt-be-accountable-only-to-shareholders-1534287687</og:url>
<og:image>https://images.wsj.net/im-22078/social</og:image>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wsj.com/articles/companies-shouldnt-be-accountable-only-to-shareholders-1534287687</dc:identifier>
</item>
<item>
<title>TinyWM – A tiny window manager in around 50 lines of C</title>
<link>http://incise.org/tinywm.html</link>
<guid isPermaLink="true" >http://incise.org/tinywm.html</guid>
<description>&lt;p&gt;TinyWM is a tiny window manager that I created as an exercise in minimalism. It is also maybe helpful in learning some of the very basics of creating a window manager. It is only around 50 lines of C. There is also a Python version using python-xlib.&lt;/p&gt;
&lt;p&gt;It lets you do four basic things:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Move windows interactively with Alt+Button1 drag (left mouse button)&lt;/li&gt;
&lt;li&gt;Resize windows interactively with Alt+Button3 drag (right mouse button)&lt;/li&gt;
&lt;li&gt;Raise windows with Alt+F1 (not high on usability I know, but I needed a keybinding in there somewhere)&lt;/li&gt;
&lt;li&gt;Focus windows with the mouse pointer (X does this on its own)&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;Download&lt;/h2&gt;
&lt;h2&gt;Known to be packaged in&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Debian&lt;/li&gt;
&lt;li&gt;Ubuntu&lt;/li&gt;
&lt;li&gt;FreeBSD&lt;/li&gt;
&lt;li&gt;CRUX&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;TinyWM around the web&lt;/h2&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;h2&gt;The source&lt;/h2&gt;
&lt;p&gt;Here is tinywm.c from the most recent release, 1.3:&lt;/p&gt;
&lt;pre class=&quot;c&quot;&gt;
&lt;code&gt;
/* TinyWM is written by Nick Welch &amp;lt;mack@incise.org&amp;gt;, 2005.
 *
 * This software is in the public domain
 * and is provided AS IS, with NO WARRANTY. */

#include &amp;lt;X11/Xlib.h&amp;gt;

#define MAX(a, b) ((a) &amp;gt; (b) ? (a) : (b))

int main()
{
    Display * dpy;
    Window root;
    XWindowAttributes attr;
    XButtonEvent start;
    XEvent ev;

    if(!(dpy = XOpenDisplay(0x0))) return 1;

    root = DefaultRootWindow(dpy);

    XGrabKey(dpy, XKeysymToKeycode(dpy, XStringToKeysym(&quot;F1&quot;)), Mod1Mask, root,
            True, GrabModeAsync, GrabModeAsync);
    XGrabButton(dpy, 1, Mod1Mask, root, True, ButtonPressMask, GrabModeAsync,
            GrabModeAsync, None, None);
    XGrabButton(dpy, 3, Mod1Mask, root, True, ButtonPressMask, GrabModeAsync,
            GrabModeAsync, None, None);

    for(;;)
    {
        XNextEvent(dpy, &amp;amp;ev);
        if(ev.type == KeyPress &amp;amp;&amp;amp; ev.xkey.subwindow != None)
            XRaiseWindow(dpy, ev.xkey.subwindow);
        else if(ev.type == ButtonPress &amp;amp;&amp;amp; ev.xbutton.subwindow != None)
        {
            XGrabPointer(dpy, ev.xbutton.subwindow, True,
                    PointerMotionMask|ButtonReleaseMask, GrabModeAsync,
                    GrabModeAsync, None, None, CurrentTime);
            XGetWindowAttributes(dpy, ev.xbutton.subwindow, &amp;amp;attr);
            start = ev.xbutton;
        }
        else if(ev.type == MotionNotify)
        {
            int xdiff, ydiff;
            while(XCheckTypedEvent(dpy, MotionNotify, &amp;amp;ev));
            xdiff = ev.xbutton.x_root - start.x_root;
            ydiff = ev.xbutton.y_root - start.y_root;
            XMoveResizeWindow(dpy, ev.xmotion.window,
                attr.x + (start.button==1 ? xdiff : 0),
                attr.y + (start.button==1 ? ydiff : 0),
                MAX(1, attr.width + (start.button==3 ? xdiff : 0)),
                MAX(1, attr.height + (start.button==3 ? ydiff : 0)));
        }
        else if(ev.type == ButtonRelease)
            XUngrabPointer(dpy, CurrentTime);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
Here is annotated.c, which is just tinywm.c with a lot of comments explaining what is going on. This should give you a reasonable idea of how everything works.
&lt;pre class=&quot;c&quot;&gt;
&lt;code&gt;/* TinyWM is written by Nick Welch &amp;lt;mack@incise.org&amp;gt;, 2005.
 *
 * This software is in the public domain
 * and is provided AS IS, with NO WARRANTY. */

/* much of tinywm's purpose is to serve as a very basic example of how to do X
 * stuff and/or understand window managers, so i wanted to put comments in the
 * code explaining things, but i really hate wading through code that is
 * over-commented -- and for that matter, tinywm is supposed to be as concise
 * as possible, so having lots of comments just wasn't really fitting for it.
 * i want tinywm.c to be something you can just look at and go &quot;wow, that's
 * it?  cool!&quot;  so what i did was just copy it over to annotated.c and comment
 * the hell out of it.  ahh, but now i have to make every code change twice!
 * oh well.  i could always use some sort of script to process the comments out
 * of this and write it to tinywm.c ... nah.
 */

/* most X stuff will be included with Xlib.h, but a few things require other
 * headers, like Xmd.h, keysym.h, etc.
 */
#include &amp;lt;X11/Xlib.h&amp;gt;

#define MAX(a, b) ((a) &amp;gt; (b) ? (a) : (b))

int main()
{
    Display * dpy;
    Window root;
    XWindowAttributes attr;

    /* we use this to save the pointer's state at the beginning of the
     * move/resize.
     */
    XButtonEvent start;

    XEvent ev;


    /* return failure status if we can't connect */
    if(!(dpy = XOpenDisplay(0x0))) return 1;

    /* you'll usually be referencing the root window a lot.  this is a somewhat
     * naive approach that will only work on the default screen.  most people
     * only have one screen, but not everyone.  if you run multi-head without
     * xinerama then you quite possibly have multiple screens. (i'm not sure
     * about vendor-specific implementations, like nvidia's)
     *
     * many, probably most window managers only handle one screen, so in
     * reality this isn't really *that* naive.
     *
     * if you wanted to get the root window of a specific screen you'd use
     * RootWindow(), but the user can also control which screen is our default:
     * if they set $DISPLAY to &quot;:0.foo&quot;, then our default screen number is
     * whatever they specify &quot;foo&quot; as.
     */
    root = DefaultRootWindow(dpy);

    /* you could also include keysym.h and use the XK_F1 constant instead of
     * the call to XStringToKeysym, but this method is more &quot;dynamic.&quot;  imagine
     * you have config files which specify key bindings.  instead of parsing
     * the key names and having a huge table or whatever to map strings to XK_*
     * constants, you can just take the user-specified string and hand it off
     * to XStringToKeysym.  XStringToKeysym will give you back the appropriate
     * keysym or tell you if it's an invalid key name.
     *
     * a keysym is basically a platform-independent numeric representation of a
     * key, like &quot;F1&quot;, &quot;a&quot;, &quot;b&quot;, &quot;L&quot;, &quot;5&quot;, &quot;Shift&quot;, etc.  a keycode is a
     * numeric representation of a key on the keyboard sent by the keyboard
     * driver (or something along those lines -- i'm no hardware/driver expert)
     * to X.  so we never want to hard-code keycodes, because they can and will
     * differ between systems.
     */
    XGrabKey(dpy, XKeysymToKeycode(dpy, XStringToKeysym(&quot;F1&quot;)), Mod1Mask, root,
            True, GrabModeAsync, GrabModeAsync);

    /* XGrabKey and XGrabButton are basically ways of saying &quot;when this
     * combination of modifiers and key/button is pressed, send me the events.&quot;
     * so we can safely assume that we'll receive Alt+F1 events, Alt+Button1
     * events, and Alt+Button3 events, but no others.  You can either do
     * individual grabs like these for key/mouse combinations, or you can use
     * XSelectInput with KeyPressMask/ButtonPressMask/etc to catch all events
     * of those types and filter them as you receive them.
     */
    XGrabButton(dpy, 1, Mod1Mask, root, True, ButtonPressMask, GrabModeAsync,
            GrabModeAsync, None, None);
    XGrabButton(dpy, 3, Mod1Mask, root, True, ButtonPressMask, GrabModeAsync,
            GrabModeAsync, None, None);

    for(;;)
    {
        /* this is the most basic way of looping through X events; you can be
         * more flexible by using XPending(), or ConnectionNumber() along with
         * select() (or poll() or whatever floats your boat).
         */
        XNextEvent(dpy, &amp;amp;ev);

        /* this is our keybinding for raising windows.  as i saw someone
         * mention on the ratpoison wiki, it is pretty stupid; however, i
         * wanted to fit some sort of keyboard binding in here somewhere, and
         * this was the best fit for it.
         *
         * i was a little confused about .window vs. .subwindow for a while,
         * but a little RTFMing took care of that.  our passive grabs above
         * grabbed on the root window, so since we're only interested in events
         * for its child windows, we look at .subwindow.  when subwindow
         * None, that means that the window the event happened in was the same
         * window that was grabbed on -- in this case, the root window.
         */
        if(ev.type == KeyPress &amp;amp;&amp;amp; ev.xkey.subwindow != None)
            XRaiseWindow(dpy, ev.xkey.subwindow);
        else if(ev.type == ButtonPress &amp;amp;&amp;amp; ev.xbutton.subwindow != None)
        {
            /* now we take command of the pointer, looking for motion and
             * button release events.
             */
            XGrabPointer(dpy, ev.xbutton.subwindow, True,
                    PointerMotionMask|ButtonReleaseMask, GrabModeAsync,
                    GrabModeAsync, None, None, CurrentTime);

            /* we &quot;remember&quot; the position of the pointer at the beginning of
             * our move/resize, and the size/position of the window.  that way,
             * when the pointer moves, we can compare it to our initial data
             * and move/resize accordingly.
             */
            XGetWindowAttributes(dpy, ev.xbutton.subwindow, &amp;amp;attr);
            start = ev.xbutton;
        }
        /* the only way we'd receive a motion notify event is if we already did
         * a pointer grab and we're in move/resize mode, so we assume that. */
        else if(ev.type == MotionNotify)
        {
            int xdiff, ydiff;

            /* here we &quot;compress&quot; motion notify events.  if there are 10 of
             * them waiting, it makes no sense to look at any of them but the
             * most recent.  in some cases -- if the window is really big or
             * things are just acting slowly in general -- failing to do this
             * can result in a lot of &quot;drag lag.&quot;
             *
             * for window managers with things like desktop switching, it can
             * also be useful to compress EnterNotify events, so that you don't
             * get &quot;focus flicker&quot; as windows shuffle around underneath the
             * pointer.
             */
            while(XCheckTypedEvent(dpy, MotionNotify, &amp;amp;ev));

            /* now we use the stuff we saved at the beginning of the
             * move/resize and compare it to the pointer's current position to
             * determine what the window's new size or position should be.
             *
             * if the initial button press was button 1, then we're moving.
             * otherwise it was 3 and we're resizing.
             *
             * we also make sure not to go negative with the window's
             * dimensions, resulting in &quot;wrapping&quot; which will make our window
             * something ridiculous like 65000 pixels wide (often accompanied
             * by lots of swapping and slowdown).
             *
             * even worse is if we get &quot;lucky&quot; and hit a width or height of
             * exactly zero, triggering an X error.  so we specify a minimum
             * width/height of 1 pixel.
             */
            xdiff = ev.xbutton.x_root - start.x_root;
            ydiff = ev.xbutton.y_root - start.y_root;
            XMoveResizeWindow(dpy, ev.xmotion.window,
                attr.x + (start.button==1 ? xdiff : 0),
                attr.y + (start.button==1 ? ydiff : 0),
                MAX(1, attr.width + (start.button==3 ? xdiff : 0)),
                MAX(1, attr.height + (start.button==3 ? ydiff : 0)));
        }
        /* like motion notifies, the only way we'll receive a button release is
         * during a move/resize, due to our pointer grab.  this ends the
         * move/resize.
         */
        else if(ev.type == ButtonRelease)
            XUngrabPointer(dpy, CurrentTime);
    }
}&lt;/code&gt;
&lt;/pre&gt;
And here's tinywm.py. XCheckTypedEvent has no equivalent in python-xlib, so it is commented out. It doesn't affect functionality, except that responsiveness is worse when you are moving/resizing (especially resizing a large window).
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;# TinyWM is written by Nick Welch &amp;lt;mack@incise.org&amp;gt;, 2005.
#
# This software is in the public domain
# and is provided AS IS, with NO WARRANTY.

from Xlib.display import Display
from Xlib import X, XK

dpy = Display()
root = dpy.screen().root

root.grab_key(XK.string_to_keysym(&quot;F1&quot;), X.Mod1Mask, 1,
        X.GrabModeAsync, X.GrabModeAsync)
root.grab_button(1, X.Mod1Mask, 1, X.ButtonPressMask,
        X.GrabModeAsync, X.GrabModeAsync, X.NONE, X.NONE)
root.grab_button(3, X.Mod1Mask, 1, X.ButtonPressMask,
        X.GrabModeAsync, X.GrabModeAsync, X.NONE, X.NONE)

while 1:
    ev = root.display.next_event()

    if ev.type == X.KeyPress and ev.child != X.NONE:
        ev.window.circulate(X.RaiseLowest)
    elif ev.type == X.ButtonPress and ev.child != X.NONE:
        ev.child.grab_pointer(1, X.PointerMotionMask|X.ButtonReleaseMask,
                X.GrabModeAsync, X.GrabModeAsync, X.NONE, X.NONE, X.CurrentTime)
        attr = ev.child.get_geometry()
        start = ev
    elif ev.type == X.MotionNotify:
        #while(XCheckTypedEvent(dpy, MotionNotify, &amp;amp;ev));
        xdiff = ev.root_x - start.root_x
        ydiff = ev.root_y - start.root_y
        ev.window.configure(
            x = attr.x + (start.detail == 1 and xdiff or 0),
            y = attr.y + (start.detail == 1 and ydiff or 0),
            width = max(1, attr.width + (start.detail == 3 and xdiff or 0)),
            height = max(1, attr.height + (start.detail == 3 and ydiff or 0)))
    elif ev.type == X.ButtonRelease:
        dpy.ungrab_pointer(X.CurrentTime)&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Wed, 15 Aug 2018 12:20:17 +0000</pubDate>
<dc:creator>LaSombra</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://incise.org/tinywm.html</dc:identifier>
</item>
<item>
<title>Software development requires servant leaders</title>
<link>https://adl.io/essays/why-software-development-requires-servant-leaders/</link>
<guid isPermaLink="true" >https://adl.io/essays/why-software-development-requires-servant-leaders/</guid>
<description>&lt;p&gt;The idea of “servant” leaders has been on the rise in the agile community of late. Robert K. Greenleaf coined the term in a &lt;a href=&quot;https://amzn.to/2KHPIB6&quot;&gt;1970 essay&lt;/a&gt;, but the idea is timeless. Virtually every religion describes the concept. This one from the &lt;em&gt;Tao Te Ching&lt;/em&gt; is particularly poignant:&lt;/p&gt;&lt;blockquote readability=&quot;16&quot;&gt;
&lt;p&gt;The highest type of ruler is one of whose existence the people are barely aware.&lt;/p&gt;
&lt;p&gt;Next comes one whom they love and praise. Next comes one whom they fear. Next comes one whom they despise and defy.&lt;/p&gt;
&lt;p&gt;When you are lacking in faith, Others will be unfaithful to you.&lt;/p&gt;
&lt;p&gt;The Sage is self-effacing and scanty of words. When his task is accomplished and things have been completed, All the people say, “&lt;strong&gt;We ourselves have achieved it!&lt;/strong&gt;“&lt;/p&gt;
&lt;p&gt;— Lao Tzu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The idea applies to any kind of leader, but I think it’s especially applicable to leaders of software projects, where the unique dynamics of &lt;a href=&quot;https://chrismm.com/blog/project-delays-why-software-estimates/&quot;&gt;unpredictability&lt;/a&gt; and &lt;a href=&quot;https://www.extremetech.com/computing/259977-software-increasingly-complex-thats-dangerous&quot;&gt;complexity&lt;/a&gt; collide.&lt;/p&gt;
&lt;p&gt;Ever wonder why software people invent all kinds of alternative labels for “project” (e.g. “Scrum”, “Sprint”, “engagement”, “iteration”, “MVP”, etc) and “project manager” (“Scrum Master”, “Product Owner”, “Product Manager”, “engagement manager”, etc), and everyone else just uses the regular names? It’s not because we’re narcissists who need special labels. It’s because people keep running into difficulty trying to square the very definition of a project (something with “&lt;a href=&quot;https://www.pmi.org/about/learn-about-pmi/what-is-project-management&quot;&gt;defined scope, schedule and resources&lt;/a&gt;”) with our real world experiences. In software it’s &lt;strong&gt;common&lt;/strong&gt; to have something estimated at a day take a week instead. Sure, you can call your work a project; you can write down a scope and make a schedule, but it’ll probably be wrong.&lt;/p&gt;
&lt;p&gt;The inherent inaccuracy of software estimates creates extra tension that you don’t find in other industries. If you’re the CEO of a startup, and you’ve got a fixed technology budget, you don’t want to hear that your software will take &lt;a href=&quot;http://www.construx.com/Thought_Leadership/Books/The_Cone_of_Uncertainty/&quot;&gt;up to &lt;strong&gt;4X&lt;/strong&gt; longer&lt;/a&gt; than your team initially estimated.&lt;/p&gt;
&lt;p&gt;Because engineering managers inhabit the border between the business and the technical, they are the ones who need to resolve the tension between estimate and reality. It’s a bit like being the wishbone being pulled at both ends; either side can snap. When the business side “wins”, the developers end up in a death march. When development concerns outweigh business ones, you end up blowing the budget and deadline. Either way you’re broken. Successful software managers find ways to be &lt;em&gt;flexible&lt;/em&gt;; to bend without breaking and to resolve the tension gradually. Servant leadership can be a guide to finding this flexibility.&lt;/p&gt;
&lt;h2 id=&quot;what-servant-leadership-means-for-software&quot;&gt;What Servant Leadership Means for Software&lt;/h2&gt;
&lt;p&gt;At its core, servant leadership is about inverting the pyramid of power. Instead of exerting power from the top, servant leaders empower others and enable them from below. Here’s how that looks in software.&lt;/p&gt;
&lt;h3 id=&quot;prioritize-growth&quot;&gt;Prioritize Growth&lt;/h3&gt;
&lt;p&gt;Servant leadership works because it motivates people to bring their very best. By being aligned with their innate needs for autonomy, mastery and purpose (see Daniel Pink’s book &lt;a href=&quot;https://amzn.to/2I3ALri&quot;&gt;Drive&lt;/a&gt; for more on that), you unlock a completely different kind of engagement in your team. Command and Control may work on some battlefields, but in creative endeavors, blindly following directions is the last thing you want your people to do.&lt;/p&gt;
&lt;p&gt;Ask yourself:&lt;/p&gt;
&lt;blockquote readability=&quot;10.71186440678&quot;&gt;
&lt;p&gt;Do those served grow as persons? Do they, while being served, become healthier, wiser, freer, more autonomous, more likely themselves to become servants? — &lt;a href=&quot;https://www.greenleaf.org/what-is-servant-leadership/&quot;&gt;Robert K. Greenleaf&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When considering a project, consider the growth opportunity it represents for each member of your team. Always have an ear trained toward learning what challenges they are ready to take on.&lt;/p&gt;
&lt;h3 id=&quot;establish-trust&quot;&gt;Establish Trust&lt;/h3&gt;
&lt;p&gt;Establish trust with your team by showing you care and looking out for their best interests. Protect them from unreasonable deadlines or unnecessary off-project work. Immediately recognize their achievements. Give them every available tool and advantage to achieve their goals, but do not protect them from the consequences of their own behavior.&lt;/p&gt;
&lt;h3 id=&quot;give-developers-control-over-estimation&quot;&gt;Give Developers Control Over Estimation&lt;/h3&gt;
&lt;p&gt;Developers should estimate their own work, and should be encouraged to be as honest and realistic as possible. Managers shouldn’t “negotiate” with the estimate; that reduces its accuracy and disrespects its creator. Instead, managers should probe for thoroughness in a curious, conversational style that encourages “thinking out loud” about the risks that need to be incorporated into the estimates.&lt;/p&gt;
&lt;h3 id=&quot;drive-uncertainty-out-of-requirements&quot;&gt;Drive Uncertainty Out of Requirements&lt;/h3&gt;
&lt;p&gt;Vague or contradictory requirements are the bane of a developer’s existence. Computers are unyielding in their need for precise instructions, and developers spend most of their day talking with them.&lt;/p&gt;
&lt;p&gt;To be of service in the early stages of a project, managers need to play an active role in vetting, testing and refining requirements. In the same way a good QA team stretches the software to its limit to ensure it’s not broken, a good manager stretches the requirements to their limit to ensure they’re not broken.&lt;/p&gt;
&lt;h3 id=&quot;be-chief-unblocker&quot;&gt;Be “Chief Unblocker”&lt;/h3&gt;
&lt;p&gt;The best referees are the ones nobody notices because they make the right calls and stay aware of the emotional state of the game to prevent controversial calls from spiraling out of their control. It’s the same for managers and blockers. The best managers see blockers coming and act early to prevent them from ever surfacing. When prevention fails, they act quickly to resolve it, knowing that nothing outranks a blocker.&lt;/p&gt;
&lt;p&gt;This requires &lt;strong&gt;active listening&lt;/strong&gt; during stand ups and other meetings. Great managers hone their “blocker radar” by noticing patterns in status reports. When a developer’s standup is nearly identical today as it was yesterday, they notice; the developer might not be blocked yet, but they definitely didn’t achieve yesterday what they expected, and might be at risk of being blocked soon.&lt;/p&gt;
&lt;h3 id=&quot;have-empathy-for-the-customer&quot;&gt;Have Empathy for the Customer&lt;/h3&gt;
&lt;p&gt;Things often take a meandering path between the customer and the programming task. When developers don’t understand the &lt;strong&gt;Why&lt;/strong&gt; behind a request, they can struggle with motivation or even misinterpret the request and build the wrong thing. As the liaison between the team and the customer, the manager needs to excel at understanding the customer better than anyone else. If you don’t understand why a requirement exists… find out. Put yourself in the customers shoes to understand the underlying needs behind their requests.&lt;/p&gt;
</description>
<pubDate>Wed, 15 Aug 2018 08:33:50 +0000</pubDate>
<dc:creator>mooreds</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://adl.io/essays/why-software-development-requires-servant-leaders/</dc:identifier>
</item>
<item>
<title>SQLite Release 3.25.0 adds support for window functions</title>
<link>https://www.sqlite.org/draft/releaselog/current.html</link>
<guid isPermaLink="true" >https://www.sqlite.org/draft/releaselog/current.html</guid>
<description>&lt;head&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;link href=&quot;../sqlite.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;&lt;title&gt;SQLite Release 3.25.0 (Pending)&lt;/title&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;24.084955752212&quot;&gt;
&lt;div class=&quot;nosearch&quot;&gt;&lt;a href=&quot;https://www.sqlite.org/draft/index.html&quot;&gt;&lt;img class=&quot;logo&quot; src=&quot;https://www.sqlite.org/draft/images/sqlite370_banner.gif&quot; alt=&quot;SQLite&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;

&lt;p&gt;&lt;span&gt;*** DRAFT ***&lt;/span&gt;&lt;/p&gt;



&lt;/div&gt;
&lt;h2&gt;SQLite Release 3.25.0 (Pending)&lt;/h2&gt;
&lt;ol class=&quot;lessindent&quot;&gt;&lt;li&gt;Add support for &lt;a href=&quot;https://www.sqlite.org/draft/windowfunctions.html&quot;&gt;window functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Query optimizer improvements:
&lt;ol type=&quot;a&quot;&gt;&lt;li&gt;Avoid unnecessary loads of columns in an aggregate query that are not within an aggregate function and that are not part of the GROUP BY clause.&lt;/li&gt;
&lt;li&gt;The IN-early-out optimization: When doing a look-up on a multi-column index and an IN operator is used on a column other than the left-most column, then if no rows match against the first IN value, check to make sure there exist rows that match the columns to the right before continuing with the next IN value.&lt;/li&gt;
&lt;li&gt;Use the transitive property to try to propagate constant values within the WHERE clause. For example, convert &quot;a=99 AND b=a&quot; into &quot;a=99 AND b=99&quot;.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Use a separate mutex on every inode in the unix &lt;a href=&quot;https://www.sqlite.org/draft/vfs.html&quot;&gt;VFS&lt;/a&gt;, rather than a single mutex shared among them all, for slightly better concurrency in multi-threaded environments.&lt;/li&gt;
&lt;li&gt;Enhance the &lt;a href=&quot;https://www.sqlite.org/draft/pragma.html#pragma_integrity_check&quot;&gt;PRAGMA integrity_check&lt;/a&gt; command for improved detection of problems on the page freelist.&lt;/li&gt;
&lt;li&gt;Output infinity as 1e999 in the &quot;.dump&quot; command of the &lt;a href=&quot;https://www.sqlite.org/draft/cli.html&quot;&gt;command-line shell&lt;/a&gt;.
&lt;p&gt;&lt;strong&gt;Bug fixes:&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;On an UPSERT when the order of constraint checks is rearranged, ensure that the affinity transformations on the inserted content occur before any of the constraint checks. Fix for ticket &lt;a href=&quot;https://www.sqlite.org/src/info/79cad5e4b2e219dd197242e9e&quot;&gt;79cad5e4b2e219dd197242e9e&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Avoid using a prepared statement for &quot;.stats on&quot; command of the &lt;a href=&quot;https://www.sqlite.org/draft/cli.html&quot;&gt;CLI&lt;/a&gt; after it has been closed by the &quot;.eqp full&quot; logicc. Fix for ticket &lt;a href=&quot;https://www.sqlite.org/src/info/7be932dfa60a8a6b3b26bcf76&quot;&gt;7be932dfa60a8a6b3b26bcf76&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;A &lt;a href=&quot;https://www.sqlite.org/draft/changes.html&quot;&gt;complete list of SQLite releases&lt;/a&gt; in a single page and a &lt;a href=&quot;https://www.sqlite.org/draft/chronology.html&quot;&gt;chronology&lt;/a&gt; are both also available. A detailed history of every check-in is available at &lt;a href=&quot;http://www.sqlite.org/src/timeline&quot;&gt;SQLite version control site&lt;/a&gt;.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;*** DRAFT ***&lt;/span&gt;&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Wed, 15 Aug 2018 07:46:23 +0000</pubDate>
<dc:creator>MarkusWinand</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.sqlite.org/draft/releaselog/current.html</dc:identifier>
</item>
</channel>
</rss>