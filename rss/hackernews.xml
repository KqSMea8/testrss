<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Keeping a plaintext “did” file</title>
<link>http://theptrk.com/2018/07/11/did-txt-file/</link>
<guid isPermaLink="true" >http://theptrk.com/2018/07/11/did-txt-file/</guid>
<description>&lt;h3&gt;&lt;strong&gt;Goal: create an insanely simple “did” file accessible by terminal&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Time flies by when you’re learning how to code. Its super important to take a second every once in a while to simple write down what you &lt;strong&gt;did&lt;/strong&gt; during the past mental sprint. Writing down what you learned &lt;em&gt;solidifies&lt;/em&gt; the knowledge.&lt;/p&gt;
&lt;h2&gt;Cue the did.txt file&lt;/h2&gt;
&lt;p&gt;This file is simply an ongoing timestamped list of what you’ve done. There are many other options, “Notes” on Mac, OneNote but since we do not want to lose the flow of coding, we need this in the terminal&lt;/p&gt;
&lt;h2&gt;Version 1. A simple txt file&lt;/h2&gt;
&lt;p&gt;Type in command into your terminal and simply type out what you did.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ vim ~/did.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;example did.txt file&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-16-00-pm.png&quot;&gt;&lt;img data-attachment-id=&quot;432&quot; data-permalink=&quot;https://theptrk.com/2018/07/11/did-txt-file/screen-shot-2018-07-10-at-10-16-00-pm/&quot; data-orig-file=&quot;https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-16-00-pm.png&quot; data-orig-size=&quot;575,87&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;did-txt-file-example1&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-16-00-pm.png?w=574&amp;amp;h=88&quot; data-large-file=&quot;https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-16-00-pm.png?w=575&quot; class=&quot;alignnone wp-image-432&quot; src=&quot;https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-16-00-pm.png?w=574&amp;amp;h=88&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;88&quot; srcset=&quot;https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-16-00-pm.png?w=574&amp;amp;h=87 574w, https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-16-00-pm.png?w=150&amp;amp;h=23 150w, https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-16-00-pm.png?w=300&amp;amp;h=45 300w, https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-16-00-pm.png 575w&quot; sizes=&quot;(max-width: 574px) 100vw, 574px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Version 2. A simple txt file with time stamps&lt;/h2&gt;
&lt;p&gt;vim on your command line allows options and this includes running “ex commands”. Here we run the &lt;code&gt;r&lt;/code&gt; read command and read the &lt;code&gt;date&lt;/code&gt; command into the file as a timestamp at the top of the file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ vim +'r!date' ~/did.txt&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Version 3. A simple txt file with natural time stamps&lt;/h2&gt;
&lt;p&gt;Its likely more natural for you to type at the &lt;em&gt;bottom&lt;/em&gt; of the file so with &lt;code&gt;normal Go&lt;/code&gt; we move the cursor to the bottom &lt;em&gt;before&lt;/em&gt; reading from the &lt;code&gt;date&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ vim +'normal Go' +'r!date' ~/did2.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;example did.txt file&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-39-37-pm.png&quot;&gt;&lt;img data-attachment-id=&quot;434&quot; data-permalink=&quot;https://theptrk.com/2018/07/11/did-txt-file/screen-shot-2018-07-10-at-10-39-37-pm/&quot; data-orig-file=&quot;https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-39-37-pm.png&quot; data-orig-size=&quot;425,129&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Screen Shot 2018-07-10 at 10.39.37 PM&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-39-37-pm.png?w=489&amp;amp;h=149&quot; data-large-file=&quot;https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-39-37-pm.png?w=425&quot; class=&quot;alignnone wp-image-434&quot; src=&quot;https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-39-37-pm.png?w=489&amp;amp;h=149&quot; alt=&quot;&quot; width=&quot;489&quot; height=&quot;149&quot; srcset=&quot;https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-39-37-pm.png 425w, https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-39-37-pm.png?w=150&amp;amp;h=46 150w, https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-39-37-pm.png?w=300&amp;amp;h=91 300w&quot; sizes=&quot;(max-width: 489px) 100vw, 489px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Final Version. An alias to open did.txt&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Final Step: &lt;/strong&gt;Create your alias and add this to your &lt;code&gt;.bash_profile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alias did=&quot;vim +'normal Go' +'r!date' ~/did.txt&quot;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Congrats!&lt;/h2&gt;
&lt;p&gt;Now running &lt;code&gt;$ did&lt;/code&gt; in your terminal will bring you to your very own did file!&lt;/p&gt;
&lt;p&gt;&lt;span&gt;example did.txt file&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-45-25-pm.png&quot;&gt;&lt;img data-attachment-id=&quot;436&quot; data-permalink=&quot;https://theptrk.com/2018/07/11/did-txt-file/screen-shot-2018-07-10-at-10-45-25-pm/&quot; data-orig-file=&quot;https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-45-25-pm.png?w=249&amp;amp;h=111&quot; data-orig-size=&quot;244,109&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;did-file-example-4&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-45-25-pm.png?w=249&amp;amp;h=111?w=244&quot; data-large-file=&quot;https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-45-25-pm.png?w=249&amp;amp;h=111?w=244&quot; class=&quot;alignnone wp-image-436&quot; src=&quot;https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-45-25-pm.png?w=249&amp;amp;h=111&quot; alt=&quot;&quot; width=&quot;249&quot; height=&quot;111&quot; srcset=&quot;https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-45-25-pm.png 244w, https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-45-25-pm.png?w=150&amp;amp;h=67 150w&quot; sizes=&quot;(max-width: 249px) 100vw, 249px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more about &lt;a href=&quot;https://wp.me/p49UG8-53&quot;&gt;vim&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;wpcnt&quot;&gt;
&lt;div class=&quot;wpa wpmrec&quot;&gt;&lt;span class=&quot;wpa-about&quot;&gt;Advertisements&lt;/span&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;jp-post-flair&quot; class=&quot;sharedaddy sd-like-enabled sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded&quot; id=&quot;like-post-wrapper-61468172-431-5b4cc046af9b0&quot; data-src=&quot;//widgets.wp.com/likes/index.html?ver=20180319#blog_id=61468172&amp;amp;post_id=431&amp;amp;origin=theptrk.wordpress.com&amp;amp;obj_id=61468172-431-5b4cc046af9b0&quot; data-name=&quot;like-post-frame-61468172-431-5b4cc046af9b0&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Like this:&lt;/h3&gt;
&lt;div class=&quot;likes-widget-placeholder post-likes-widget-placeholder&quot;&gt;&lt;span class=&quot;button&quot;&gt;&lt;span&gt;Like&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;loading&quot;&gt;Loading...&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Mon, 16 Jul 2018 04:06:06 +0000</pubDate>
<dc:creator>theptrk</dc:creator>
<og:type>article</og:type>
<og:title>did.txt file</og:title>
<og:url>https://theptrk.com/2018/07/11/did-txt-file/</og:url>
<og:description>Goal: create an insanely simple “did” file accessible by terminal Time flies by when you’re learning how to code. Its super important to take a second every once in a while to sim…</og:description>
<og:image>https://theptrk.files.wordpress.com/2018/07/screen-shot-2018-07-10-at-10-45-25-pm.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://theptrk.com/2018/07/11/did-txt-file/</dc:identifier>
</item>
<item>
<title>Cloudflare, Mozilla, Fastly, and Apple Working on Encrypted SNI</title>
<link>https://twitter.com/grittygrease/status/1018566026320019457</link>
<guid isPermaLink="true" >https://twitter.com/grittygrease/status/1018566026320019457</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://twitter.com/grittygrease/status/1018566026320019457&quot;&gt;https://twitter.com/grittygrease/status/1018566026320019457&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=17538390&quot;&gt;https://news.ycombinator.com/item?id=17538390&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 218&lt;/p&gt;&lt;p&gt;# Comments: 106&lt;/p&gt;</description>
<pubDate>Mon, 16 Jul 2018 02:39:38 +0000</pubDate>
<dc:creator>sahin-boydas</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/grittygrease/status/1018566026320019457</dc:identifier>
</item>
<item>
<title>A Parable by Dijkstra (1973)</title>
<link>https://www.cs.utexas.edu/users/EWD/transcriptions/EWD05xx/EWD594.html</link>
<guid isPermaLink="true" >https://www.cs.utexas.edu/users/EWD/transcriptions/EWD05xx/EWD594.html</guid>
<description>&lt;p class=&quot;noindent&quot;&gt;(Recently I found the following text in manuscript among old papers of mine. It must have been written in the middle of 1973, but I don't think that in the intervening three years it has lost anything of its significance. Hence I now incorporate it in the EWD-series.)&lt;/p&gt;
&lt;p&gt;&lt;u&gt;A parable&lt;/u&gt;.&lt;/p&gt;
&lt;p&gt;Years ago a railway company was erected and one of its directors —probably the commercial bloke— discovered that the initial investments could be reduced significantly if only fifty percent of the cars would be equipped with a toilet, and, therefore, so was decided.&lt;/p&gt;
&lt;p&gt;Shortly after the company had started its operations, however, complaints about the toilets came pouring in. An investigation was carried out and revealed that the obvious thing had happened: despite its youth the company was already suffering from internal communication problems, for the director's decision on the toilets had not been transmitted to the shunting yard, where all cars were treated as equivalent, and, as a result, sometimes trains were composed with hardly any toilets at all.&lt;/p&gt;
&lt;p&gt;In order to solve the problem, a bit of information was associated with each car, telling whether it was a car with or without a toilet, and the shunting yard was instructed to compose trains with the numbers of cars of both types as equal as possible. It was a complication for the shunting yard, but, once it had been solved, the people responsible for the shunting procedures were quite proud that they could manage it.&lt;/p&gt;
&lt;p&gt;When the new shunting procedures had been made effective, however, complaints about the toilets continued. A new investigation was carried out and then it transpired that, although in each train about half the cars had indeed toilets, sometimes trains were composed with nearly all toilets in one half of the train. In order to remedy the situation, new instructions were issued, prescribing that cars with and cars without toilets should alternate. This was a more severe complication for the shunting people, but after some initial grumbling, eventually they managed.&lt;/p&gt;
&lt;p&gt;Complaints, however, continued and the reason turned out to be that, as the cars with toilets had their toilet at one of their ends, the distance between two successive toilets in the train could still be nearly three car lengths, and for mothers with children in urgent need —and perhaps even luggage piled up in the corridors— this still could lead to disasters. As a result, the cars with toilets got another bit of information attached to them, making them into directed objects, and the new instructions were, that in each train the cars with toilets should have the same orientation. This time, the new instructions for the shunting yard were received with less than enthusiasm, for the number of turntables was hardly sufficient; to be quite fair to the shunting people we must even admit that according to all reasonable standards, the number of turntables was insufficient, and it was only by virtue of the most cunning ingenuity, that they could just manage.&lt;/p&gt;
&lt;p&gt;With all toilets equally spaced along the train the company felt confident that now everything was alright, but passengers continued to complain: although no passenger was more than a car length away from the nearest toilet, passengers (in urgent need) did not know in which direction to start their stumbling itinerary along the corridor! To solve this problem, arrows saying &quot;TOILET&quot; were fixed in all corridors, thereby also making the other half of the cars into directed objects that should be properly oriented by the shunting procedures.&lt;/p&gt;
&lt;p&gt;When the new instruction reached the shunting yard, they created an atmosphere ranging from despair to revolt: it just couldn't be done! At that critical moment a man whose name has been forgotten and shall never be traced, made the following observation. When each car with a toilet was coupled, from now until eternity, at its toileted end with a car without a toilet, from then onwards the shunting yard, instead of dealing with N directed cars of two types, could deal with N/2 identical units that, to all intents and purposes, could be regarded as symmetrical. And this observation solved all shunting problems at the modest price of, firstly sticking to trains with an even number of cars only —the few additional cars needed for that could be paid out of the initial savings effected by the commercial bloke!— and, secondly, slightly cheating with regard to the equal spacing of the toilets. But, after all, who cares about the last three feet?&lt;/p&gt;
&lt;p&gt;Although at the time that this story took place, mankind was not blessed yet with automatic computers, our anonymous man who found this solution deserves to be called the world's first competent programmer.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;sup&gt;*&lt;/sup&gt;         &lt;sub&gt;*&lt;/sub&gt;         &lt;sup&gt;*&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;I have told the above story to different audiences. Programmers, as a rule, are delighted by it, and managers, invariably, get more and more annoyed as the story progresses; true mathematicians, however, fail to see the point.&lt;/p&gt;
&lt;div align=&quot;left&quot;&gt;
&lt;table width=&quot;400&quot; border=&quot;0&quot; cellspacing=&quot;2&quot; cellpadding=&quot;0&quot; readability=&quot;2&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td valign=&quot;top&quot;&gt;Plataanstraat 5&lt;br /&gt;NL-4565  NUENEN&lt;br /&gt;The Netherlands&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;prof.dr.Edsger W.Dijkstra&lt;br /&gt;Burroughs Research Fellow&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;
&lt;hr /&gt;&lt;span&gt;transcribed by Corrado Cantelmi&lt;br /&gt;revised Wed, 25 Aug 2010&lt;/span&gt;</description>
<pubDate>Mon, 16 Jul 2018 02:21:13 +0000</pubDate>
<dc:creator>fpvsoop</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cs.utexas.edu/users/EWD/transcriptions/EWD05xx/EWD594.html</dc:identifier>
</item>
<item>
<title>Async and Await in Rust: a full proposal</title>
<link>https://boats.gitlab.io/blog/post/2018-04-06-async-await-final/</link>
<guid isPermaLink="true" >https://boats.gitlab.io/blog/post/2018-04-06-async-await-final/</guid>
<description>&lt;p&gt;I’m really excited to announce the culmination of much of our work over the last four months: a pair of RFCs for supporting async &amp;amp; await notation in Rust. This will be very impactful for Rust in the network services space. The change is proposed as two RFCs:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2394&quot;&gt;RFC #2394:&lt;/a&gt;&lt;/strong&gt; which adds async &amp;amp; await notation to the language.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2395&quot;&gt;RFC #2395:&lt;/a&gt;&lt;/strong&gt; which moves a part of the futures library into std to support that syntax.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;These RFCs will enable basic async &amp;amp; await syntax support with the full range of Rust features - including borrowing across yield points. The rest of this blog post just covers the answers to some anticipated frequently asked questions; for more details see the two RFCs.&lt;/p&gt;

&lt;h2 id=&quot;why-is-await-written-await&quot;&gt;Why is &lt;code&gt;await&lt;/code&gt; written &lt;code&gt;await!()&lt;/code&gt;?&lt;/h2&gt;
&lt;p&gt;We aren’t exactly certain what syntax we want for the await keyword. If something is a future of a Result - as any IO future likely to be - you want to be able to await it and then apply the &lt;code&gt;?&lt;/code&gt; operator to it. But the order of precedence to enable this might seem surprising - &lt;code&gt;await io_future?&lt;/code&gt; would await first and &lt;code&gt;?&lt;/code&gt; second, despite &lt;code&gt;?&lt;/code&gt; being lexically more tightly bound than &lt;code&gt;await&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are a couple of different syntax designs, but to avoid having to settle on one, we propose to start with the most clearly noisy &amp;amp; non-permanent syntax: a compiler built-in like &lt;code&gt;format_args!&lt;/code&gt;. This is an application of &lt;a href=&quot;https://thefeedbackloop.xyz/stroustrups-rule-and-layering-over-time/&quot;&gt;Stroustrup’s rule&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;how-are-async-functions-evaluated&quot;&gt;How are async functions evaluated?&lt;/h2&gt;
&lt;p&gt;Async functions return &lt;strong&gt;immediately&lt;/strong&gt; when they are called - none of the code in their body is executed. What they return is a future, representing the state machine of their body transitioning from await to await until it finally returns the final value.&lt;/p&gt;
&lt;p&gt;There are other designs which you could imagine in which futures eagerly evaluate up to the first await point before returning. We have decided to instead return immediately because we believe the mental model is simpler - you always know that none of the body of the async function will be evaluated until you begin polling the future it returns. For use cases which have a short intiailization step, the &lt;code&gt;async_block!&lt;/code&gt; macro in the futures crate will provide a good alternative.&lt;/p&gt;
&lt;h2 id=&quot;how-much-of-futures-is-going-into-libstd&quot;&gt;How much of &lt;code&gt;futures&lt;/code&gt; is going into libstd?&lt;/h2&gt;
&lt;p&gt;Only a very small amount, not even the entirety of &lt;code&gt;futures-core&lt;/code&gt;. In particular, we are adding:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;code&gt;Future&lt;/code&gt; trait (so that async functions can return a &lt;code&gt;Future&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The task system &amp;amp; &lt;code&gt;Executor&lt;/code&gt; trait (because they’re needed for the definition of the &lt;code&gt;Future&lt;/code&gt; trait).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Not even &lt;code&gt;Stream&lt;/code&gt; is being added to libstd at this point, much less the higher level APIs like &lt;code&gt;Sink&lt;/code&gt;, the channel mechanisms, &lt;code&gt;futures-io&lt;/code&gt;, the threadpool executor, etc. Essentially we will provide the core abstraction, but components like event loops, async concurrency primitives, and so on will continue to live in the ecosystem.&lt;/p&gt;
&lt;p&gt;So you don’t have to dig into the RFCs, the definition of Future that we are adding is this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;pub trait Future {
    type Item;
    fn poll(self: Pin&amp;lt;Self&amp;gt;, ctx: &amp;amp;mut task::Context) -&amp;gt; Async&amp;lt;Self::Item&amp;gt;;
}

pub enum Async&amp;lt;T&amp;gt; {
    Ready(T),
    Pending,
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;what-is-a-pin-self&quot;&gt;What is a &lt;code&gt;Pin&amp;lt;Self&amp;gt;&lt;/code&gt;?&lt;/h2&gt;
&lt;p&gt;The Future trait defined in this RFC takes self as &lt;code&gt;Pin&amp;lt;Self&amp;gt;&lt;/code&gt;, rather than as &lt;code&gt;&amp;amp;mut self.&lt;/code&gt; The Pin API was the subject of &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/8bffc2fc5c0d6b25d101af69f18b9df9da7b134b/text/2349-pin.md&quot;&gt;another RFC&lt;/a&gt; earlier this year; it provides a new API which has stronger guarantees about movement than mutable references do. This way, we can guarantee that an async function (which may have internal references into itself) can never move.&lt;/p&gt;
&lt;p&gt;I discussed the importance of this change in an &lt;a href=&quot;https://boats.gitlab.io/blog/post/2018-01-25-async-i-self-referential-structs/&quot;&gt;earlier blog series&lt;/a&gt;, and Ralf Jung has &lt;a href=&quot;https://www.ralfj.de/blog/2018/04/05/a-formal-look-at-pinning.html&quot;&gt;another blog post&lt;/a&gt; describing the formal reasoning justifying the soundness of the pin APIs.&lt;/p&gt;
&lt;h2 id=&quot;what-happened-to-future-s-error-type&quot;&gt;What happened to &lt;code&gt;Future&lt;/code&gt;’s &lt;code&gt;Error&lt;/code&gt; type?&lt;/h2&gt;
&lt;p&gt;For a long time, many users have asked for us to remove the &lt;code&gt;Error&lt;/code&gt; type from &lt;code&gt;Future&lt;/code&gt;, because they did had a non-IO use case in which the &lt;code&gt;Error&lt;/code&gt; type was inappropriate. We’ve come around to agreeing with them; having the &lt;code&gt;Error&lt;/code&gt; type would require that async functions always return a &lt;code&gt;Result&lt;/code&gt;, and would not enable non-IO use cases for asynchronicity (such as lazily &amp;amp; concurrently evaluated pure computation).&lt;/p&gt;
&lt;p&gt;Futures which wish to have an error channel will instead of an &lt;code&gt;Output&lt;/code&gt; which is a &lt;code&gt;Result&lt;/code&gt;. Some &lt;code&gt;Try&lt;/code&gt; impls will make it possible to continue to use &lt;code&gt;?&lt;/code&gt; inside of poll in those cases, which returns &lt;code&gt;Async&amp;lt;Result&amp;lt;T, E&amp;gt;&amp;gt;&lt;/code&gt;. The error handling combinators will exist on an extension trait implemented for all futures of Results. We don’t think there will be a big ergonomics loss from this change, and in contrast it will open up the futures abstraction to many more use cases.&lt;/p&gt;
&lt;h2 id=&quot;why-not-impl-future&quot;&gt;Why not &lt;code&gt;-&amp;gt; impl Future&lt;/code&gt;?&lt;/h2&gt;
&lt;p&gt;An interesting thing about async &amp;amp; await is that an async function has two return types. The inner return type is the type of expressions that you &lt;code&gt;return&lt;/code&gt;, whereas the outer return type is the type that the function, when called, actually evaluates to. Every async function evaluates to an anonymous future type; we could have required users to write that they return an &lt;code&gt;impl Future&lt;/code&gt;, rather than returning their “inner” type. This would be more similar to languages like C#, which have users return a &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The trade off between returning the inner and outer type is discussed at length in the RFCs. In brief, returning &lt;code&gt;impl Future&lt;/code&gt; did not interact well with lifetime elision, and the main motivation in languages like C# was to support a kind of polymorphism we do not intend to support. This tipped the scales in favor of the inner return type.&lt;/p&gt;
</description>
<pubDate>Sun, 15 Jul 2018 18:52:03 +0000</pubDate>
<dc:creator>KenanSulayman</dc:creator>
<og:title>Async &amp; Await in Rust: a full proposal</og:title>
<og:description>I’m really excited to announce the culmination of much of our work over the last four months: a pair of RFCs for supporting async &amp; await notation in Rust. This will be very impactful for Rust in the network services space. The change is proposed as two RFCs: RFC #2394: which adds async &amp; await notation to the language. RFC #2395: which moves a part of the futures library into std to support that syntax.</og:description>
<og:url>https://boats.gitlab.io/blog/post/2018-04-06-async-await-final/</og:url>
<og:type>website</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://boats.gitlab.io/blog/post/2018-04-06-async-await-final/</dc:identifier>
</item>
<item>
<title>Modern codecs like AV1 can bring better quality video to the open web</title>
<link>https://blog.mozilla.org/blog/2018/07/11/royalty-free-web-video-codecs/</link>
<guid isPermaLink="true" >https://blog.mozilla.org/blog/2018/07/11/royalty-free-web-video-codecs/</guid>
<description>&lt;p&gt;Here’s a surprising fact: It costs money to watch video online, even on free sites like YouTube. That’s because about 4 in 5 videos on the web today rely on a patented technology called the &lt;a href=&quot;http://www.streamingmedia.com/Articles/Editorial/What-Is-.../What-is-H.264-74735.aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;H.264&lt;/a&gt; video codec.&lt;/p&gt;
&lt;p&gt;A codec is a piece of software that lets engineers shrink large media files and transmit them quickly over the internet. In browsers, codecs decode video files so we can play them on our phones, tablets, computers, and TVs. As web users, we take this performance for granted. But the truth is, companies pay millions of dollars in licensing fees to bring us free video.&lt;/p&gt;
&lt;p&gt;It took years for companies to put this complex, global set of legal and business agreements in place, so H.264 web video works everywhere. Now, as the industry shifts to using more efficient video codecs, those businesses are picking and choosing which next-generation technologies they will support. The fragmentation in the market is raising concerns about whether our favorite web past-time, watching videos, will continue to be accessible and affordable to all.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;A drive to create royalty-free codecs&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Mozilla is driven by a mission to make the web platform more capable, safe, and performant for all users. With that in mind, the company has been supporting work at the &lt;a href=&quot;https://xiph.org/&quot;&gt;Xiph.org Foundation&lt;/a&gt; to create royalty-free codecs that anyone can use to compress and decode media files in hardware, software, and web pages.&lt;/p&gt;
&lt;p&gt;But when it comes to video codecs, Xiph.org Foundation isn’t the only game in town.&lt;/p&gt;
&lt;p&gt;Over the last decade, several companies started building viable alternatives to patented video codecs. Mozilla worked on the &lt;a href=&quot;https://wiki.xiph.org/Daala&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Daala Project&lt;/a&gt;, Google released &lt;a href=&quot;https://www.webmproject.org/vp9/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VP9&lt;/a&gt;, and Cisco created &lt;a href=&quot;https://github.com/cisco/thor/commits/master&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Thor&lt;/a&gt; for low-complexity videoconferencing. All these efforts had the same goal: to create a next-generation video compression technology that would make sharing high-quality video over the internet faster, more reliable, and less expensive.&lt;/p&gt;
&lt;p&gt;In 2015, Mozilla, Google, Cisco, and others joined with Amazon and Netflix and hardware vendors AMD, ARM, Intel, and NVIDIA to form &lt;a href=&quot;https://aomedia.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AOMedia&lt;/a&gt;. As AOMedia grew, efforts to create an open video format coalesced around a new codec: &lt;a href=&quot;https://research.mozilla.org/av1-media-codecs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AV1&lt;/a&gt;. AV1 is based largely on Google’s VP9 code and incorporates tools and technologies from Daala, Thor, and VP10.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Why Mozilla loves AV1&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Mozilla loves AV1 for two reasons: AV1 is royalty-free, so anyone can use it free of charge. Software companies can use it to build video streaming into their applications. Web developers can build their own video players for their sites. It can open up business opportunities, and remove barriers to entry for entrepreneurs, artists, and regular people. Most importantly, a royalty-free codec can help keep high-quality video affordable for everyone.&lt;/p&gt;
&lt;div id=&quot;attachment_11543&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;a href=&quot;http://www.compression.ru/video/codec_comparison/hevc_2017/MSU_HEVC_comparison_2017_P5_HQ_encoders.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img class=&quot;wp-image-11543 size-full&quot; title=&quot;MSU study compares performance of modern video codecs&quot; src=&quot;https://ffp4g1ylyit3jdyti1hqcvtb-wpengine.netdna-ssl.com/wp-content/uploads/2018/07/MSU-compression-graph.png&quot; alt=&quot;&quot; width=&quot;975&quot; height=&quot;563&quot; srcset=&quot;https://blog.mozilla.org/wp-content/uploads/2018/07/MSU-compression-graph.png 975w, https://blog.mozilla.org/wp-content/uploads/2018/07/MSU-compression-graph-300x173.png 300w, https://blog.mozilla.org/wp-content/uploads/2018/07/MSU-compression-graph-768x443.png 768w, https://blog.mozilla.org/wp-content/uploads/2018/07/MSU-compression-graph-600x346.png 600w&quot; sizes=&quot;(max-width: 975px) 100vw, 975px&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;Source: Graphics &amp;amp; Media Lab Video Group, Moscow State University&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The second reason we love AV1 is that it delivers better compression technology than even high-efficiency codecs – about 30% better, according to a &lt;a href=&quot;http://www.compression.ru/video/codec_comparison/hevc_2017/MSU_HEVC_comparison_2017_P5_HQ_encoders.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Moscow State University study&lt;/a&gt;. For companies, that translates to smaller video files that are faster and cheaper to transmit and take up less storage space in their data centers. For the rest of us, we’ll have access to gorgeous, high-definition video through the sites and services we already know and love.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ffp4g1ylyit3jdyti1hqcvtb-wpengine.netdna-ssl.com/wp-content/uploads/2018/07/SP_Moz.org_Blogheader_AV1-15.png&quot;&gt;&lt;img class=&quot;alignnone size-extra-large wp-image-11560&quot; src=&quot;https://ffp4g1ylyit3jdyti1hqcvtb-wpengine.netdna-ssl.com/wp-content/uploads/2018/07/SP_Moz.org_Blogheader_AV1-15-1000x500.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;500&quot; srcset=&quot;https://blog.mozilla.org/wp-content/uploads/2018/07/SP_Moz.org_Blogheader_AV1-15-1000x500.png 1000w, https://blog.mozilla.org/wp-content/uploads/2018/07/SP_Moz.org_Blogheader_AV1-15-300x150.png 300w, https://blog.mozilla.org/wp-content/uploads/2018/07/SP_Moz.org_Blogheader_AV1-15-768x384.png 768w, https://blog.mozilla.org/wp-content/uploads/2018/07/SP_Moz.org_Blogheader_AV1-15-600x300.png 600w, https://blog.mozilla.org/wp-content/uploads/2018/07/SP_Moz.org_Blogheader_AV1-15.png 1400w&quot; sizes=&quot;(max-width: 1000px) 100vw, 1000px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Open source, all the way down&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;AV1 is well on its way to becoming a viable alternative to patented video codecs. As of June 2018, the AV1 &lt;a href=&quot;https://github.com/AOMediaCodec/av1-spec/releases/download/v1.0.0/av1-spec-v1.0.0.pdf&quot;&gt;1.0 specification&lt;/a&gt; is stable and available for public use on a royalty-free basis. Looking for a deep dive into the specific technologies that made the leap from Daala to AV1? Check out our Hacks post, &lt;a href=&quot;https://hacks.mozilla.org/2018/06/av1-next-generation-video-the-constrained-directional-enhancement-filter/&quot;&gt;AV1: next generation video – The Constrained Directional Enhancement Filter&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sun, 15 Jul 2018 18:11:52 +0000</pubDate>
<dc:creator>ALee</dc:creator>
<og:url>https://blog.mozilla.org/blog/2018/07/11/royalty-free-web-video-codecs</og:url>
<og:title>Modern codecs like AV1 can bring better quality video to the open web</og:title>
<og:description>Here’s a surprising fact: It costs money to watch video online, even on free sites like YouTube. That’s because roughly 80% of web videos rely on a patented technology called the H.264 video codec that lets engineers shrink large media files and transmit them quickly over the internet.</og:description>
<og:image>https://blog.mozilla.org/wp-content/uploads/2018/07/SP_Moz.org_Blogheader_AV1-18-1400x700.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.mozilla.org/blog/2018/07/11/royalty-free-web-video-codecs/</dc:identifier>
</item>
<item>
<title>When You Watch Sports, Your Brain Thinks You’re Playing</title>
<link>http://nautil.us/issue/39/sport/the-unique-neurology-of-the-sports-fans-brain</link>
<guid isPermaLink="true" >http://nautil.us/issue/39/sport/the-unique-neurology-of-the-sports-fans-brain</guid>
<description>&lt;p&gt;&lt;span class=&quot;dropcap&quot;&gt;S&lt;/span&gt;ports fans aren’t typically in the mood for academic research in the minutes before a big game. But Paul Bernhardt, an aspiring young behavioral scientist at Georgia State University, was determined. Armed with a bag of sterile vials, Bernhardt inched through the crowd at Atlanta’s Omni arena, politely asking anyone decked out in either University of Georgia or Georgia Tech basketball garb—the teams that were set to battle that evening—for a bit of saliva.&lt;/p&gt;
&lt;p&gt;The year was 1991. Fans of the Bulldogs and the Yellow Jackets, the state’s two most renowned collegiate sports institutions, had been hating each other’s guts since 1893, a rivalry affectionately known as COFH: Clean, Old-Fashioned Hate. (Yes, sports rivalries can have names; COFH is historically significant enough to have a 5,000-plus word entry in Wikipedia with 50 citations.) Bernhardt wasn’t there to celebrate a century of feuding, however; he was hoping to break new ground on the scientific understanding of such fandemonium—“highly identified” fans would be the proper psychology term—to explain why being a sports nut, bitter hatred and all, feels soooo gooooood.&lt;/p&gt;
&lt;img src=&quot;http://static.nautil.us/10095_253d812cbfbb77c03b910f9897e9487d.png&quot; width=&quot;733&quot; alt=&quot;&quot;/&gt;&lt;span class=&quot;caption&quot;&gt;&lt;strong&gt;clean old-fashioned hate:&lt;/strong&gt; Georgia Tech Yellow Jackets bond over their shared hatred of the University of Georgia Bulldogs.&lt;/span&gt; &lt;span class=&quot;credit&quot;&gt;Scott Cunningham / Stringer / Getty Images&lt;/span&gt;
&lt;p&gt;The fact that athletes experience a tidal rush of testosterone, a hormone associated not just with male sexuality but with self-esteem, upon winning a big game was well established. But there was a hypothesis floating around among social psychologists at the time that fans ride a similar hormonal high. Bernhardt just needed a little spit, which offers a reliable approximation of the body’s biochemistry at any given moment, to find out.&lt;/p&gt;
&lt;p&gt;“I’m sure people thought I was wacko, but it’s easier to get people to give you little spit than a little blood,” says Bernhardt, now a professor of psychology at Frostburg State University. “The woman I was dating at the time, who was with me, was so traumatized she buried her head in the book she’d brought.”&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
&lt;p&gt;Highly identified sports fans have an above average sense of meaning in life.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The game was extremely close, with UGA squeaking out a win at the buzzer. In the post-game chaos only eight fans, four Dawgs and four Jackets, returned their bottles—but the results were compelling. Testosterone levels typically peak shortly after waking each day, then drop about 35 percent by bedtime. When he got back to the lab Bernhardt discovered that the testosterone levels of the four jubilant winners were 20 percent higher as they exited into the late-night melee outside the Omni than when they entered. Players are known to experience roughly the same increase. (The Georgia Tech fans, meanwhile, had a 20 percent drop, though Bernhardt places less importance on that finding, as testosterone levels typically decline at that hour anyway.)&lt;/p&gt;
&lt;img src=&quot;http://static.nautil.us/10096_ee4117572afbc0cf760f70714af0ec52.png&quot; width=&quot;733&quot; alt=&quot;&quot;/&gt;&lt;p&gt;Soon after, he and his colleagues carried out another test with a larger, more statistically significant pool of subjects: 26 soccer fans watching a Brazil-Italy World Cup game in Atlanta, half at a Brazilian sports bar and half at an Italian bar. Again, a 20 percent increase in testosterone was observed among fans of the winning team, the Brazilians (along with a corresponding 20 percent drop for the Italians). “Statistically, the correlation is very strong,” says Bernhardt. “The importance of [the experiment] was to show that testosterone isn’t just about a body getting pumped up; it’s not, for want of a better term, about being burly. It is about a sense of status, of seizing the moment.” Testosterone is produced during moments of intense competition, even if the experience is purely psychological. “The fans are having a vicarious experience of the competition, as well as the experience of status gain that comes with that,” he says. Similar studies since then have confirmed this relationship, while others suggest that the entire panoply of neurochemicals associated with athleticism, from dopamine to adrenaline to oxytocin, are triggered to a similar degree in both the players and fans during a game.&lt;/p&gt;
&lt;p&gt;Thus it seems that fans can share much of an athlete’s thrill, without all the talent, training, and exertion.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dropcap&quot;&gt;B&lt;/span&gt;ernhardt may have opened the door on an important physiological dimension of fan behavior, but a broad conceptual framework explaining the human compulsion to watch other people play games—a condition that affects approximately 60 percent of Americans—was already coming into focus.&lt;sup&gt;1&lt;/sup&gt; In 1976, psychologist Robert Cialdini led a series of studies in which students of seven major football schools were gathered into lecture halls on a Monday following a big game. At schools where the team won, the percentage of students wearing team colors and apparel was far greater than at the losing schools. While the average sports fan might say, &lt;em&gt;duh, of course they were&lt;/em&gt;, Cialdini’s experiment was intended to provide empirical evidence in support of a concept he called Basking In Reflected Glory: “publicly announcing one’s association with successful others even though [one] ... has done nothing to bring about the other’s success.”&lt;/p&gt;
&lt;img src=&quot;http://static.nautil.us/10097_23b702c4c421ddb2d023fee968c0d839.png&quot; width=&quot;733&quot; alt=&quot;&quot;/&gt;&lt;p&gt;BIRGing, as it is now known in psychology-speak, is a subconscious strategy to maintain a positive self-image. “I was absolutely BIRGing with joy after the Dawgs kicked their Yellow Jacket asses,” one’s subconscious mind might say, if only it could speak.&lt;/p&gt;
&lt;p&gt;But what of the losers? It turns out they have clever strategies for feeling good, too. The first stage of coping with a loss is often CORFing—Cutting Off Reflected Failure. Here Cialdini’s research revealed that pronoun choice was highly subjective. BIRGers will say, “&lt;em&gt;We&lt;/em&gt; crushed them,” while CORFers invariably distance themselves from the failure: “&lt;em&gt;They&lt;/em&gt; blew it.” Losers may then continue with a suite of mnemonically-termed coping mechanisms, including: BIRFing—Basking In Reflected Failure, the underdog mentality; CORSing— Cutting Off Reflected Success, as in the nostalgic fan who rejects success gained through deceit (i.e. doping) and opines for the more pure glory of times past; and COFFing—Cutting Off Future Failure, a strategy of not getting too excited when a team with a historically poor record starts to do well (lest their success prove to be short-lived).&lt;/p&gt;
&lt;div class=&quot;reco&quot;&gt;
&lt;article class=&quot;issue-article&quot;&gt;&lt;div&gt;&lt;a href=&quot;http://nautil.us/issue/23/Dominoes/ptsd-the-wound-that-never-heals&quot; class=&quot;obnd_lnk&quot; data-trval=&quot;ptsd-the-wound-that-never-heals&quot; data-trlbl=&quot;foc_rec&quot; data-tract=&quot;internal_art&quot;&gt;&lt;img src=&quot;http://static.nautil.us/5879_927e838a450e2fe6225edfc3d12e2463.jpg&quot; alt=&quot;Sapolsky_TH-F1&quot; width=&quot;314&quot; height=&quot;177&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;article-tag&quot;&gt;&lt;span class=&quot;article-tag&quot;&gt;&lt;span class=&quot;article-tag-focus&quot;&gt;&lt;a href=&quot;http://nautil.us/term/f/Psychology&quot;&gt;Also in Psychology&lt;/a&gt;&lt;/span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;h4 class=&quot;article-title&quot;&gt;&lt;a href=&quot;http://nautil.us/issue/23/Dominoes/ptsd-the-wound-that-never-heals&quot; class=&quot;obnd_lnk&quot; data-trval=&quot;ptsd-the-wound-that-never-heals&quot; data-trlbl=&quot;foc_rec&quot; data-tract=&quot;internal_art&quot;&gt;PTSD: The Wound That Never Heals&lt;/a&gt;&lt;/h4&gt;
&lt;p class=&quot;article-author&quot;&gt;By Leela Corman&lt;/p&gt;
&lt;p&gt;Leela Corman is an illustrator, cartoonist, and dancer. Originally from New York, she and her husband, the cartoonist Tom Hart, and their daughter Molly Rose, now reside in Gainesville, Florida, where they operate the Sequential Artists Workshop, a school...&lt;strong&gt;&lt;a href=&quot;http://nautil.us/issue/23/Dominoes/ptsd-the-wound-that-never-heals&quot; class=&quot;obnd_lnk&quot; data-trval=&quot;ptsd-the-wound-that-never-heals&quot; data-trlbl=&quot;foc_rec&quot; data-tract=&quot;internal_art&quot;&gt;READ MORE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;/article&gt;&lt;/div&gt;
&lt;p&gt;These ups and downs of fandom help keep us plugged into the game, part of the perverse bliss of sports that psychologists refer to as “eustress,” a type of beneficial stress that is flavored with a touch of ecstasy. So while BIRGing and CORFing may seem like the silly, predictable machinations of the average sports fan, they underscore a shared sense of identity.&lt;/p&gt;
&lt;p&gt;Daniel Wann, a social psychologist at Murray State University, has spent the last 30 years elaborating on Cialdini’s theory that identification with sports teams is, at the very least, a means to boost self esteem—if not an opportunity to enhance overall mental health, he adds. Wann and his colleagues have carried out more than 20 studies in which diverse groups of sports fans, including high school students, college students, senior citizens, Australians, female fans, hockey fans, NASCAR fans, and others, were evaluated in regards to various measures by which psychologists gauge well-being—such as a sense of self-worth, frequency of positive emotions, feeling connected with others, belief in the trustworthiness of others, sense of vigor and energy, and so on. In virtually every single study, the degree of fan identification—that is, how devoted and enthusiastic a fan is—shows a positive statistical correlation with one or more of these factors. Wann’s Team Identification-Social Psychological Health Model, first published in 2006, describes nearly two dozen “well-being benefits” that he says are commonly associated with sports fans.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
&lt;p&gt;Sports are a potentially constructive outlet for the tribalist tendencies of modern humans.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using mediation analysis, a statistician’s approach to differentiating causality and correlation, he’s found that sometimes the well-being benefits flow directly from fandom—a sense of belonging, for example— while other times there is a “mediating” factor—I’m more trusting of others &lt;em&gt;because&lt;/em&gt; I have a strong sense of belonging in regards to my team. In all cases there was a causal connection between fandom and well-being, but sometimes the link was indirect. Similar phenomenon can be observed in other instances of strong identification with a group, whether a gang or a church congregation, though few cultural institutions today have as many die-hard adherents.&lt;/p&gt;
&lt;p&gt;And the rules don’t apply as well to casual fans, Wann cautions. “This effect is most prominent among those who are most intense. In order to really reap the well-being benefits of fan identification, it needs to be a central part of your overall social identity.” The biochemical aspects of fandom only serve to reinforce those good feelings.&lt;/p&gt;
&lt;img src=&quot;http://static.nautil.us/10098_c876914f82ce54cb533b186afd41166e.png&quot; width=&quot;733&quot; alt=&quot;&quot;/&gt;&lt;p&gt;His most recent study, which is pending publication, found that highly identified sports fans have an above average sense of meaning in life. This was one of those cases where A leads to B, but as a result of C, the mediating factor: “We found that identification wasn’t necessarily leading directly to meaning, but rather it was going through belonging,” says Wann. “So identification leads to belonging, which in turn leads to a sense of meaning.”&lt;/p&gt;
&lt;p&gt;Wann believes there is one very simple reason fans are so deeply fulfilled, which has nothing to do with sports itself. It’s not about winning or losing, he suggests; it’s about the human bonds we form in the process. “If you identify with the local team, that’s going to give you connections to others around you, and those connections will give you a sense that there is meaning in life. For example, if you are a Kansas Jayhawks fan”— which Wann, a University of Kansas alumnus, is—“and you happen to live in Lawrence, Kansas, and you’re out in the streets with your Jayhawks shirt on and your hat and your bumper sticker and all that, it’s really kind of hard to feel lonely. You have so many friends, so to speak, that you’ll feel connected to. You might not even know their names, but you feel as though you are unified with so many other people in the community.”&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dropcap&quot;&gt;A&lt;/span&gt;ffiliation with sports teams, it seems, is a contemporary form of tribalism. “Our sports heroes are our warriors,” Cialdini once remarked. And tribal affiliation, along with satisfying our need for a sense of belonging, produces another social pleasure that’s not so warm and fuzzy: the good vibes of walloping your opponent. It’s what Germans call &lt;em&gt;schadenfreude&lt;/em&gt;, literally “harm-joy,” the pleasure derived from others’ misfortune.&lt;/p&gt;
&lt;p&gt;Mina Cikara, director of the Harvard Intergroup Neuroscience Lab, says that while ingroup-outgroup dynamics stemming from this infallible aspect of human nature may lie at the roots of racism, religious intolerance, and war, she sees sports as a potentially constructive outlet for the tribalist tendencies of modern humans—we get much of the pleasure with little of the harm. Using fMRI imaging, Cikara observed the brain activity of 18 diehard Red Sox and Yankees fans (who have been mortal enemies ever since the Red Sox dealt Babe Ruth to the Yankees in 1920) while subjecting them to video clips from ESPN’s Gamecast. Upon witnessing their favored team score or strike out an opposing player, a flurry of activity is seen in the ventral striatum, a region of the brain associated with reward-based decision-making, as well as addiction.&lt;/p&gt;
&lt;img src=&quot;http://static.nautil.us/10099_995ca733e3657ff9f5f3c823d73371e1.png&quot; width=&quot;733&quot; alt=&quot;&quot;/&gt;&lt;p&gt;“The dopamine is saying, ‘hey, hey, that was good, let’s make sure to do that again,’ ” says Cikara. The effect was observed not just with clips where the Red Sox and Yankees played against each other, but also in another set of clips where each team faced off against the Orioles. When Yankees fans saw the Red Sox perform poorly against the Orioles, which had no direct bearing on their team’s success, they were rewarded with a hit of dopamine just the same: pure &lt;em&gt;schadenfreude&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Cikara studies &lt;em&gt;schadenfreude&lt;/em&gt; in the political realm as well, but says that sports fans make good guinea pigs because they’re willing to self-report feeling pleasure in response to the misfortune of others. Her work is aimed at finding strategies to head off the worst outcomes of the ‘us versus them’ mentality. With the intensely polarizing social dynamics found in so many other cultural contexts, where putting down the ‘other’ often leads to grave consequences, sports may be an important relief valve.&lt;/p&gt;
&lt;p&gt;“There is a script of being a good fan which means talking shit to the other fans,” says Cikara. “That allows for the enactment of some of these tribal behaviors in a space where it is acceptable and anticipated. Sports is a place where we as a society have decided that it’s OK to say nasty things and root for the downfall of another.” And that is perhaps more gratifying than we realize.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Brian J. Barth is a Toronto-based writer focused on culture, science, and the environment.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. Jones, J.M. As industry grows, percentage of U.S. sports fans steady. Gallup.com (2015).&lt;/p&gt;
&lt;div id=&quot;inpagesub&quot;&gt;
&lt;div class=&quot;secthdr&quot;&gt;Get the &lt;span class=&quot;plain&quot;&gt;Nautilus&lt;/span&gt; newsletter&lt;/div&gt;
&lt;p&gt;The newest and most popular articles delivered right to your inbox!&lt;/p&gt;

&lt;/div&gt;
&lt;section class=&quot;leaderboard-ad-belt&quot;&gt;&lt;div class=&quot;leaderboard-ad-belt-inner adarticle&quot;&gt;&lt;div id=&quot;div-gpt-ad-1380044019755-0&quot; class=&quot;leaderboard-ad&quot;/&gt;
&lt;/div&gt;
&lt;/section&gt;</description>
<pubDate>Sun, 15 Jul 2018 16:54:36 +0000</pubDate>
<dc:creator>prostoalex</dc:creator>
<og:type>website</og:type>
<og:url>http://nautil.us/issue/39/sport/the-unique-neurology-of-the-sports-fans-brain</og:url>
<og:title>The Unique Neurology of the Sports Fan’s Brain - Issue 39: Sport - Nautilus</og:title>
<og:description>Sports fans aren’t typically in the mood for academic research in the minutes before a big game. But Paul Bernhardt, an aspiring&amp;#8230;</og:description>
<og:image>http://static.nautil.us/10049_1759e864edd6cb2200926b3a2f729dac.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>http://nautil.us/issue/39/sport/the-unique-neurology-of-the-sports-fans-brain</dc:identifier>
</item>
<item>
<title>How to take 7 years to ship a beta</title>
<link>https://medium.com/@eigenbom/how-to-take-7-years-to-ship-a-beta-4fcfc2428d88</link>
<guid isPermaLink="true" >https://medium.com/@eigenbom/how-to-take-7-years-to-ship-a-beta-4fcfc2428d88</guid>
<description>&lt;h3 name=&quot;99c1&quot; id=&quot;99c1&quot; class=&quot;graf graf--h3 graf--leading&quot;&gt;Build Your Own Engine&lt;/h3&gt;
&lt;p name=&quot;7575&quot; id=&quot;7575&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;This is probably the most important part. If you’re a curious soul and need to understand how every little part of a game works, then this step is quite easy. Simply open up your code editor, download a basic windowing layer like &lt;a href=&quot;https://www.sfml-dev.org/&quot; data-href=&quot;https://www.sfml-dev.org/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;SFML&lt;/a&gt; (we aren’t savages and this isn’t handmade hero), and then start writing your resource manager, event system, animation system, physics system (which you’ll ultimately throw out and replace with &lt;a href=&quot;http://box2d.org/&quot; data-href=&quot;http://box2d.org/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;Box2D&lt;/a&gt;), scene manager, GUI code, serialisation framework, build tool-chain, entity-component system, and texture manager, to name but a few. By this stage you‘ll have a fully functioning non-game.&lt;/p&gt;
&lt;p name=&quot;c05c&quot; id=&quot;c05c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;To extend your development time even further consider using a language that introduces a major version upgrade (like C++11) partway through your development. &lt;em class=&quot;markup--em markup--p-em&quot;&gt;Just try&lt;/em&gt; to resist refactoring.&lt;/p&gt;
&lt;p name=&quot;e86d&quot; id=&quot;e86d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Don’t stop at creating your own engine. You can also create your own tools, like a custom sprite editor, because all those other sprite editors out there do not do &lt;em class=&quot;markup--em markup--p-em&quot;&gt;exactly what you need&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*sprSDQbv1rrNMUA6cx35-A.png&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*sprSDQbv1rrNMUA6cx35-A.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*sprSDQbv1rrNMUA6cx35-A.png&quot;/&gt;&lt;/div&gt;
&lt;h3 name=&quot;7cbb&quot; id=&quot;7cbb&quot; class=&quot;graf graf--h3 graf-after--figure&quot;&gt;Have An Unclear Game Idea&lt;/h3&gt;
&lt;p name=&quot;c3ec&quot; id=&quot;c3ec&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Before development be sure to have an unclear image about what kind of game you are making. This will lengthen both your engine development time and your game design time.&lt;/p&gt;
&lt;p name=&quot;9f38&quot; id=&quot;9f38&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;For instance, say you want to make a game with an infinite world where the player can keep walking in one direction and never reach the edge of the world. You will need to build a decent amount of technology to support that. A couple of years later you realise (from a game design perspective) that, no, you don’t actually need an infinite world. Throw away all those data structures and algorithms that you’ve built. The 3 months you spent building a fluid system that works on an infinite grid? Throw it away! A simple array of fluid cells will work!&lt;/p&gt;
&lt;p name=&quot;a5c5&quot; id=&quot;a5c5&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Your game idea doesn’t exist in a vacuum, and if it did it’d probably evaporate because it’s so amorphous. This benefits our time-stretching goal in the following way: by constantly monitoring similar games that are released you can simply change your game to be less like them. Do all those games have “sandbox” in the description? Just make yours an anti-sandbox with a specific goal, that’ll surely differentiate your game in the market. Are they all moddable? Throw away any ideas of modding and instead focus on providing more unique content. Or something like that. All that matters is that the idea for the game is in flux, constantly adapting to the market — to the extent that you cannot even write a single paragraph explaining what it is.&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*0uA_cLxH2wm3Zr4OgXNVDg.png&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*0uA_cLxH2wm3Zr4OgXNVDg.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*0uA_cLxH2wm3Zr4OgXNVDg.png&quot;/&gt;&lt;/div&gt;
&lt;h3 name=&quot;859b&quot; id=&quot;859b&quot; class=&quot;graf graf--h3 graf-after--figure&quot;&gt;Run A Crowdfunding Campaign&lt;/h3&gt;
&lt;p name=&quot;0773&quot; id=&quot;0773&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Inevitably you’ll run out of money. You could release the game sooner, but that’s the opposite of our goal, and so maybe you could run a crowdfunding campaign?&lt;/p&gt;
&lt;p name=&quot;9d4f&quot; id=&quot;9d4f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;First set aside 3 months to prepare, it’s very important to get it right. You’ll need a great trailer and to spend a substantial amount of time marketing your campaign. The feedback you get will be fantastic and everyone will be super nice and encouraging. If your campaign succeeds you’ll now be able to spend that money to speed up development and ship the game sooner! But beware! To take 7 years to ship a beta you really should spend that money not on making your game sooner, but making it … better.&lt;/p&gt;
&lt;p name=&quot;2682&quot; id=&quot;2682&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Bonus time here can be accrued by offering physical crowdfunding rewards like t-shirts. This is conditional on your perfectionism as you may decide to print them locally so you have more quality control. Definitely do this.&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*wp5mpGcLvbmP7MdMo70lZA.png&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*wp5mpGcLvbmP7MdMo70lZA.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*wp5mpGcLvbmP7MdMo70lZA.png&quot;/&gt;&lt;/div&gt;
&lt;h3 name=&quot;4e89&quot; id=&quot;4e89&quot; class=&quot;graf graf--h3 graf-after--figure&quot;&gt;Constantly Blog About Your Game&lt;/h3&gt;
&lt;p name=&quot;9da4&quot; id=&quot;9da4&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Forums like &lt;a href=&quot;http://forums.tigsource.com/index.php?topic=21997.0&quot; data-href=&quot;http://forums.tigsource.com/index.php?topic=21997.0&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;TIGsource&lt;/a&gt; can be a great way to make friends and get encouragement and feedback on your game. Developing a game by yourself can be lonely work, and thus you may find yourself creating a devlog. Good news! This is a great way to consume all that expendable time you have. Be sure to post frequently and in-depth about your game, to win awards for favourite devlog (because of all that time you are spending not making the game), and to end up with one of the biggest and most viewed devlogs. This is definitely your goal.&lt;/p&gt;
&lt;p name=&quot;3fe6&quot; id=&quot;3fe6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Bonus temporal adjustment points can be obtained by posting retrospective parody articles to Hacker News the day before your game comes out.&lt;/p&gt;
&lt;h3 name=&quot;e112&quot; id=&quot;e112&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Do All Your Own Testing&lt;/h3&gt;
&lt;p name=&quot;da80&quot; id=&quot;da80&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Every product needs testing. Every feature needs to be tested. By you. Under all conditions. On all platforms. &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Remember&lt;/strong&gt;: if you change one thing then all other things must be re-tested because you may have broken something.&lt;/p&gt;
&lt;p name=&quot;68ee&quot; id=&quot;68ee&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Warning: Crowdfunders and friends may offer you the opportunity to get some additional testers in. I made this mistake and shortened my development time, but you should definitely not.&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*3aBuHqXvPwzn6Y7dQsfbAw.png&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*3aBuHqXvPwzn6Y7dQsfbAw.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*3aBuHqXvPwzn6Y7dQsfbAw.png&quot;/&gt;&lt;/div&gt;
&lt;h3 name=&quot;916e&quot; id=&quot;916e&quot; class=&quot;graf graf--h3 graf-after--figure&quot;&gt;Do All The Side Things!&lt;/h3&gt;
&lt;p name=&quot;4df4&quot; id=&quot;4df4&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;As the years pass you’ll no doubt be very bored working on the same project, day in and day out. To make sure you are working on that same project for many more years it’s imperative that you take on numerous side projects.&lt;/p&gt;
&lt;p name=&quot;4ca4&quot; id=&quot;4ca4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;With &lt;a href=&quot;https://itch.io/jams&quot; data-href=&quot;https://itch.io/jams&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;endless game jams&lt;/a&gt; now available you could definitely spend a few days working on a side game. Maybe a parody game called &lt;a href=&quot;https://www.theverge.com/2016/8/30/12709270/no-mans-sky-super-mario-bros-procedurally-generated-mashup&quot; data-href=&quot;https://www.theverge.com/2016/8/30/12709270/no-mans-sky-super-mario-bros-procedurally-generated-mashup&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;No Mario’s Sky&lt;/a&gt;? Be careful though, because it’s likely your silly made-in-three-days games will get more press than anything you will ever do commercially.&lt;/p&gt;
&lt;p name=&quot;0514&quot; id=&quot;0514&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Game development involves many different disciplines and you should definitely try to &lt;em class=&quot;markup--em markup--p-em&quot;&gt;master all of them&lt;/em&gt;. My preferred way to learn is by finding an online community and involving myself in the competitions and events they hold. If this sounds too simple then you could always start your own community. Maybe it’s called &lt;a href=&quot;https://twitter.com/Pixel_Dailies&quot; data-href=&quot;https://twitter.com/Pixel_Dailies&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;Pixel Dailies&lt;/a&gt; and has become so big it requires 2 full-time moderators. Well, I guess you have the time to spare!&lt;/p&gt;
&lt;h3 name=&quot;6a79&quot; id=&quot;6a79&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p name=&quot;85ac&quot; id=&quot;85ac&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Those are just some things a developer can do to delay a project. Some more ideas are running an &lt;a href=&quot;https://eigenbom.github.io/notgdc2017/&quot; data-href=&quot;https://eigenbom.github.io/notgdc2017/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;unconference&lt;/a&gt;, releasing &lt;a href=&quot;https://bp.io/post/1303&quot; data-href=&quot;https://bp.io/post/1303&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;an iOS game&lt;/a&gt;, making an &lt;a href=&quot;https://bp.io/starwars/&quot; data-href=&quot;https://bp.io/starwars/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;infinite star wars&lt;/a&gt; crawl generator, creating &lt;a href=&quot;https://twitter.com/cosmic_txt&quot; data-href=&quot;https://twitter.com/cosmic_txt&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;twitter bots&lt;/a&gt;, and … well … &lt;a href=&quot;http://bp.io/&quot; data-href=&quot;http://bp.io/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;you get the point&lt;/a&gt;.&lt;/p&gt;
&lt;p name=&quot;7dac&quot; id=&quot;7dac&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I hope this article has inspired you to take your sweet time, and I look forward to seeing all your side projects, engine discussion, crowdfunding campaigns, game blogs, and constantly shifting game ideas. Tweet me at &lt;a href=&quot;https://twitter.com/eigenbom&quot; data-href=&quot;https://twitter.com/eigenbom&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;eigenbom&lt;/a&gt;.&lt;/p&gt;
&lt;p name=&quot;7b8d&quot; id=&quot;7b8d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Oh, by the way, I did mention that my game &lt;a href=&quot;https://playmoonquest.com&quot; data-href=&quot;https://playmoonquest.com&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;MoonQuest&lt;/a&gt; is out now on &lt;a href=&quot;https://store.steampowered.com/app/511540&quot; data-href=&quot;https://store.steampowered.com/app/511540&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;Steam Early Access&lt;/a&gt; and &lt;a href=&quot;https://eigenbom.itch.io/moonquest&quot; data-href=&quot;https://eigenbom.itch.io/moonquest&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;itch.io&lt;/a&gt;, didn’t I? I did all those things I mentioned above but I got there in the end. And, in hindsight, I wouldn’t change a thing.&lt;/p&gt;
&lt;p name=&quot;fb12&quot; id=&quot;fb12&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;But I promise my next project will be quicker.&lt;/p&gt;

&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*9PK1cY34XM5bxo3K5OQtpA.png&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot; data-is-featured=&quot;true&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*9PK1cY34XM5bxo3K5OQtpA.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*9PK1cY34XM5bxo3K5OQtpA.png&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 15 Jul 2018 16:23:10 +0000</pubDate>
<dc:creator>fmavituna</dc:creator>
<og:title>How to take 7 years to ship a beta. – Ben Porter – Medium</og:title>
<og:url>https://medium.com/@eigenbom/how-to-take-7-years-to-ship-a-beta-4fcfc2428d88</og:url>
<og:image>https://cdn-images-1.medium.com/max/1200/1*9PK1cY34XM5bxo3K5OQtpA.png</og:image>
<og:description>It’s been almost 7 years since I quit my last job.</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/@eigenbom/how-to-take-7-years-to-ship-a-beta-4fcfc2428d88</dc:identifier>
</item>
<item>
<title>Taking Go modules for a spin</title>
<link>https://dave.cheney.net/2018/07/14/taking-go-modules-for-a-spin</link>
<guid isPermaLink="true" >https://dave.cheney.net/2018/07/14/taking-go-modules-for-a-spin</guid>
<description>&lt;p&gt;This weekend I wanted to play with Ubuntu 18.04 on a spare machine. This gave me a perfect excuse to try out the &lt;a href=&quot;https://groups.google.com/forum/#!topic/golang-dev/a5PqQuBljF4&quot;&gt;modules feature&lt;/a&gt; recently merged into the Go 1.11 development branch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR: When Go 1.11 ships you’ll be able to download the tarball and unpack it anywhere you like. When Go 1.11 ships you’ll be able to write Go modules anywhere you like. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the tricky bit. &lt;a href=&quot;https://groups.google.com/forum/#!topic/golang-dev/a5PqQuBljF4&quot;&gt;Go 1.11 beta 1 shipped back in June&lt;/a&gt; so it predates the inclusion of the modules feature. Hopefully there will be a beta 2 in a few weeks and when that ships I’ll delete this section, but for now, I’ll quickly outline the steps to build &lt;a href=&quot;https://golang.org/doc/install/source&quot;&gt;Go 1.11 from source&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, we need a version of Go to act as the bootstrap compiler, I’m using Go 1.10, which I’ll download to &lt;code&gt;$HOME/go1.10&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;
% &lt;strong&gt;curl https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz | \
        tar tvz --transform=s/go/go.10/g&lt;/strong&gt;
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  126M  100  126M    0     0  1140k      0  0:01:53  0:01:53 --:--:-- 1093k
% &lt;strong&gt;go1.10/bin/go&lt;/strong&gt;
go version go1.10.3 linux/amd64
&lt;/pre&gt;
&lt;p&gt;Next, I’ll build Go 1.11 from the master branch using &lt;code&gt;./make.bash&lt;/code&gt;.&lt;span id=&quot;easy-footnote-1-3268&quot; class=&quot;easy-footnote-margin-adjust&quot;/&gt;&lt;span class=&quot;easy-footnote&quot;&gt;&lt;a href=&quot;https://dave.cheney.net/2018/07/14/taking-go-modules-for-a-spin#easy-footnote-bottom-1-3268&quot; title=&quot;There&amp;amp;#8217;s no need to run the &amp;lt;code&amp;gt;./all.bash&amp;lt;/code&amp;gt; tests, the &amp;lt;a href=&amp;quot;http://build.golang.org/&amp;quot;&amp;gt;build dashboard&amp;lt;/a&amp;gt; and trybots have done that for me.&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
% &lt;strong&gt;git clone https://go.googlesource.com/go go.tip -b master&lt;/strong&gt;
Cloning into 'go.tip'...
remote: Sending approximately 132.25 MiB ...
remote: Counting objects: 30, done
remote: Finding sources: 100% (8/8)
remote: Total 349279 (delta 284434), reused 349276 (delta 284434)
Receiving objects: 100% (349279/349279), 132.19 MiB | 1.42 MiB/s, done.
Resolving deltas: 100% (284434/284434), done.
Checking out files: 100% (7977/7977), done.
% &lt;strong&gt;cd go.tip/src&lt;/strong&gt;
% &lt;strong&gt;env GOROOT_BOOTSTRAP=$HOME/go1.10 ./make.bash&lt;/strong&gt;
Building Go cmd/dist using /home/dfc/go1.10.
Building Go toolchain1 using /home/dfc/go1.10.
Building Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.
Building Go toolchain2 using go_bootstrap and Go toolchain1.
Building Go toolchain3 using go_bootstrap and Go toolchain2.
Building packages and commands for linux/amd64.
---
Installed Go for linux/amd64 in /home/dfc/go.tip
Installed commands in /home/dfc/go.tip/bin
&lt;/pre&gt;
&lt;p&gt;Lastly, out of shot, I’ve added &lt;code&gt;$HOME/go.tip/bin&lt;/code&gt; to my &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we have a version of Go with module support installed, I wanted to try to use it to manage the dependencies for &lt;a href=&quot;https://github.com/davecheney/httpstat&quot;&gt;httpstat&lt;/a&gt;, a clone of the Python tool of the same name that many collaborators swarmed on to build in late 2016.&lt;/p&gt;
&lt;p&gt;To show that Go 1.11 won’t need you to declare a &lt;code&gt;$GOPATH&lt;/code&gt; or use a specific directly layout for the location of your project, I’m going to use my favourite directory for source code, &lt;code&gt;~/devel&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;
% &lt;strong&gt;git clone https://github.com/davecheney/httpstat devel/httpstat&lt;/strong&gt;
Cloning into 'devel/httpstat'...
remote: Counting objects: 2326, done.
remote: Total 2326 (delta 0), reused 0 (delta 0), pack-reused 2326
Receiving objects: 100% (2326/2326), 8.73 MiB | 830.00 KiB/s, done.
Resolving deltas: 100% (673/673), done.
Checking out files: 100% (1361/1361), done.
% &lt;strong&gt;cd devel/httpstat&lt;/strong&gt;
% &lt;strong&gt;go mod -init -module github.com/davecheney/httpstat&lt;/strong&gt;
go: creating new go.mod: module github.com/davecheney/httpstat
go: copying requirements from Gopkg.lock
&lt;/pre&gt;
&lt;p&gt;Nice, &lt;code&gt;go mod -init&lt;/code&gt; translated my existing &lt;code&gt;Gopkg.lock&lt;/code&gt; file into its own &lt;code&gt;go.mod&lt;/code&gt; format.&lt;/p&gt;
&lt;pre&gt;
% &lt;strong&gt;cat go.mod&lt;/strong&gt;
module github.com/davecheney/httpstat

require (
        github.com/fatih/color v1.5.0
        github.com/mattn/go-colorable v0.0.9
        github.com/mattn/go-isatty v0.0.3
        golang.org/x/net v0.0.0-20170922011244-0744d001aa84
        golang.org/x/sys v0.0.0-20170922123423-429f518978ab
        golang.org/x/text v0.0.0-20170915090833-1cbadb444a80
)
&lt;/pre&gt;
&lt;p&gt;Let’s give it a try&lt;/p&gt;
&lt;pre&gt;
% &lt;strong&gt;go build&lt;/strong&gt; 
go: finding golang.org/x/net v0.0.0-20170922011244-0744d001aa84
go: finding github.com/mattn/go-colorable v0.0.9
go: finding github.com/mattn/go-isatty v0.0.3
go: finding golang.org/x/sys v0.0.0-20170922123423-429f518978ab
go: finding github.com/fatih/color v1.5.0
go: finding golang.org/x/text v0.0.0-20170915090833-1cbadb444a80
go: downloading github.com/fatih/color v1.5.0
go: downloading github.com/mattn/go-isatty v0.0.3
go: downloading golang.org/x/net v0.0.0-20170922011244-0744d001aa84
go: downloading github.com/mattn/go-colorable v0.0.9
go: downloading golang.org/x/text v0.0.0-20170915090833-1cbadb444a80
&lt;/pre&gt;
&lt;p&gt;Very nice, &lt;code&gt;go build&lt;/code&gt; ignored the &lt;code&gt;vendor/&lt;/code&gt; folder in this repository (because we’re outside &lt;code&gt;$GOPATH&lt;/code&gt;) and fetched the revisions it needed.&lt;span id=&quot;easy-footnote-2-3268&quot; class=&quot;easy-footnote-margin-adjust&quot;/&gt;&lt;span class=&quot;easy-footnote&quot;&gt;&lt;a href=&quot;https://dave.cheney.net/2018/07/14/taking-go-modules-for-a-spin#easy-footnote-bottom-2-3268&quot; title=&quot;Oddly these are stored in &amp;lt;code&amp;gt;$HOME/go/src/mod&amp;lt;/code&amp;gt; not the &amp;lt;code&amp;gt;$GOCACHE&amp;lt;/code&amp;gt; variable that was added in Go 1.10.&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; Let’s try out the binary and make sure it works.&lt;/p&gt;
&lt;pre&gt;
% &lt;strong&gt;./httpstat golang.org&lt;/strong&gt;

Connected to 216.58.196.145:443

HTTP/2.0 200 OK
Server: Google Frontend
Alt-Svc: quic=&quot;:443&quot;; ma=2592000; v=&quot;44,43,39,35&quot;
Cache-Control: private
Content-Type: text/html; charset=utf-8
Date: Sat, 14 Jul 2018 08:20:43 GMT
Strict-Transport-Security: max-age=31536000; preload
Vary: Accept-Encoding
X-Cloud-Trace-Context: 323cd59570cc084fed506f7e85d79d9f

Body discarded

  DNS Lookup   TCP Connection   TLS Handshake   Server Processing   Content Transfer
[    171ms  |          18ms  |        559ms  |            226ms  |             5ms  ]
            |                |               |                   |                  |
   namelookup:171ms          |               |                   |                  |
                       connect:189ms         |                   |                  |
                                   pretransfer:749ms             |                  |
                                                     starttransfer:976ms            |
                                                                                total:981ms
&lt;/pre&gt;
&lt;p&gt;Move along, nothing to see here.&lt;/p&gt;

&lt;p&gt;You can build Go 1.11 from source right now &lt;em&gt;anywhere you like.&lt;/em&gt; You don’t need to set an environment variable or follow a predefined location.&lt;/p&gt;
&lt;p&gt;With Go 1.11 and modules you can write your Go modules &lt;em&gt;anywhere you like&lt;/em&gt;. You’re no longer forced into having one copy of a project checked out in a specific sub directory of your &lt;code&gt;$GOPATH&lt;/code&gt;.&lt;/p&gt;
&lt;ol class=&quot;easy-footnotes-wrapper&quot;&gt;&lt;li class=&quot;easy-footnote-single&quot;&gt;&lt;span id=&quot;easy-footnote-bottom-1-3268&quot; class=&quot;easy-footnote-margin-adjust&quot;/&gt;There’s no need to run the &lt;code&gt;./all.bash&lt;/code&gt; tests, the &lt;a href=&quot;http://build.golang.org/&quot;&gt;build dashboard&lt;/a&gt; and trybots have done that for me.&lt;/li&gt;
&lt;li class=&quot;easy-footnote-single&quot;&gt;&lt;span id=&quot;easy-footnote-bottom-2-3268&quot; class=&quot;easy-footnote-margin-adjust&quot;/&gt;Oddly these are stored in &lt;code&gt;$HOME/go/src/mod&lt;/code&gt; not the &lt;code&gt;$GOCACHE&lt;/code&gt; variable that was added in Go 1.10.&lt;/li&gt;
&lt;/ol&gt;
</description>
<pubDate>Sun, 15 Jul 2018 12:17:56 +0000</pubDate>
<dc:creator>101km</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://dave.cheney.net/2018/07/14/taking-go-modules-for-a-spin</dc:identifier>
</item>
<item>
<title>The hotel bathroom puzzle</title>
<link>https://nevalalee.wordpress.com/2015/11/27/the-hotel-bathroom-puzzle/</link>
<guid isPermaLink="true" >https://nevalalee.wordpress.com/2015/11/27/the-hotel-bathroom-puzzle/</guid>
<description>&lt;p class=&quot;p1&quot;&gt;&lt;img data-attachment-id=&quot;26867&quot; data-permalink=&quot;https://nevalalee.wordpress.com/2015/11/27/the-hotel-bathroom-puzzle/louis-xiv-bathroom-after/&quot; data-orig-file=&quot;https://nevalalee.files.wordpress.com/2015/11/louis-xiv-bathroom-after.jpg?w=700&quot; data-orig-size=&quot;350,251&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;2.4&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;1448611033&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;4.12&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;800&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0.066666666666667&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;1&amp;quot;}&quot; data-image-title=&quot;The bathroom at the Hotel Louis XIV&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://nevalalee.files.wordpress.com/2015/11/louis-xiv-bathroom-after.jpg?w=700?w=300&quot; data-large-file=&quot;https://nevalalee.files.wordpress.com/2015/11/louis-xiv-bathroom-after.jpg?w=700?w=350&quot; class=&quot;aligncenter size-full wp-image-26867&quot; src=&quot;https://nevalalee.files.wordpress.com/2015/11/louis-xiv-bathroom-after.jpg?w=700&quot; alt=&quot;The bathroom at the Hotel Louis XIV&quot; srcset=&quot;https://nevalalee.files.wordpress.com/2015/11/louis-xiv-bathroom-after.jpg 350w, https://nevalalee.files.wordpress.com/2015/11/louis-xiv-bathroom-after.jpg?w=150 150w, https://nevalalee.files.wordpress.com/2015/11/louis-xiv-bathroom-after.jpg?w=300 300w&quot; sizes=&quot;(max-width: 350px) 100vw, 350px&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;In his wonderful book &lt;a href=&quot;https://www.amazon.com/Evolution-Useful-Things-Artifacts-Zippers-Came/dp/0679740392&quot;&gt;&lt;em&gt;The Evolution of Useful Things&lt;/em&gt;&lt;/a&gt;, the author and civil engineer &lt;a href=&quot;https://nevalalee.wordpress.com/2015/01/16/a-potters-tools/&quot;&gt;Henry Petroski&lt;/a&gt; shares one of the most famous case studies in the history of design:&lt;/p&gt;
&lt;blockquote readability=&quot;22&quot;&gt;
&lt;p class=&quot;p1&quot;&gt;Before it was destroyed by fire, L’Hotel Louis XIV, which was located on the waterfront in Quebec, advertised private baths. However, their privacy was of a limited and precarious kind, for each bath was located between a pair of guest rooms, both of which opened into it. This arrangement is not uncommon in private homes, where bedrooms share a bathroom or where a bathroom opening onto a bedroom also opens into a hallway. In all such situations, the basic design objective is to achieve privacy for whoever might be using the bathroom. This can be achieved in many ways, of course, and the most obvious and common way is to have locks on each of the doors, so that the bathroom user may bar others from entering. The failure of this solution is frequent and frustrating: the person who has finished with the bathroom forgets to unlock the second door, causing at least a little inconvenience for the next user who tries to enter it. In bathrooms shared by siblings, screaming through the locked door may or may not get results, but generally there is little more than the temporary inconvenience of having to go around to the other door or to another bathroom in the house. Families that find bathroom doors too frequently locked can remove all locks from the doors and trust everyone to knock before entering.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;p1&quot;&gt;“In the case of bathrooms shared by unrelated guests,” Petroski continues, “the problem is less easily solved.” Consider, for example, the hotel bathroom shown above. There are two doors, each opening into a separate room occupied by a guest who is presumably a stranger to the other. You need locks on both doors to ensure privacy for each occupant, which means that you’ll invariably wind up with situations in which one guest leaves and forgets to unlock the second door, leading to considerable inconvenience. What do you do? You could, of course, tear down and rebuild the entire hotel, at great expense, so that each room has its own bathroom—a solution that might sound ridiculous, but isn’t so far removed from how &lt;a href=&quot;http://kotaku.com/the-messy-true-story-behind-the-making-of-destiny-1737556731&quot;&gt;similar design problems&lt;/a&gt; are addressed every day. More plausibly, you could somehow label the doors. Petroski notes that this was the approach employed by a similar house in which he once stayed in St. Louis: “The measures taken to avoid this situation consisted of a nicely printed sign placed prominently on the dresser beside the bathroom door, reminding each guest to unlock the other guest’s door before leaving the bathroom. I am sure I was not the only guest who suffered from the inadequacy of that solution.” Alternatively, if you were of a mechanical disposition, you could rig up an alarm system that would sound a buzzer if one door was unlocked without the other. This would have obvious shortcomings in practice, and it would also annoy guests who just wanted to use the bathroom in peace.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;img data-attachment-id=&quot;26868&quot; data-permalink=&quot;https://nevalalee.wordpress.com/2015/11/27/the-hotel-bathroom-puzzle/louis-xiv-bathroom-before/&quot; data-orig-file=&quot;https://nevalalee.files.wordpress.com/2015/11/louis-xiv-bathroom-before.jpg?w=700&quot; data-orig-size=&quot;350,251&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;2.4&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;1448611033&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;4.12&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;800&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0.066666666666667&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;1&amp;quot;}&quot; data-image-title=&quot;The bathroom at the Hotel Louis XIV&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://nevalalee.files.wordpress.com/2015/11/louis-xiv-bathroom-before.jpg?w=700?w=300&quot; data-large-file=&quot;https://nevalalee.files.wordpress.com/2015/11/louis-xiv-bathroom-before.jpg?w=700?w=350&quot; class=&quot;aligncenter size-full wp-image-26868&quot; src=&quot;https://nevalalee.files.wordpress.com/2015/11/louis-xiv-bathroom-before.jpg?w=700&quot; alt=&quot;The bathroom at the Hotel Louis XIV&quot; srcset=&quot;https://nevalalee.files.wordpress.com/2015/11/louis-xiv-bathroom-before.jpg 350w, https://nevalalee.files.wordpress.com/2015/11/louis-xiv-bathroom-before.jpg?w=150 150w, https://nevalalee.files.wordpress.com/2015/11/louis-xiv-bathroom-before.jpg?w=300 300w&quot; sizes=&quot;(max-width: 350px) 100vw, 350px&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;In the end, the proprietors of the Hotel Louis XIV came up with an ingenious answer, as outlined in the book &lt;em&gt;&lt;a href=&quot;http://www.amazon.com/By-Design-2nd-Bathroom-Lessons/dp/1563673495&quot;&gt;By Design&lt;/a&gt;&lt;/em&gt; by Ralph Caplan, which was Petroski’s source for the original case study:&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p class=&quot;p1&quot;&gt;Well, there were no locks on the bathroom doors of the Louis XIV, but tied to each doorknob was a three-and-a-half foot length of leather thong to which a hook was attached. When you were in the bathroom you simply linked the two hooks together, holding both doors shut. There was no way to get back into your own room without it at the same time unlocking the door for the other guest. It was memorable as the total integration of object and circumstance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;p1&quot;&gt;It’s a lovely solution—so much so, in fact, that Caplan’s book puts it into its own subtitle: &lt;em&gt;Why There Are No Locks on the Bathroom Doors in the Hotel Louis XIV&lt;/em&gt;. And at the heart of the answer lies a subtle change in the way the problem is understood. Other measures, like putting up a sign, focused on the idea that both doors had to have locks, when the lock is really just an interim solution to the underlying problem, rather than the problem itself. As Petroski puts it: “The basic design objective is to achieve privacy for whoever might be using the bathroom.” And once the problem is phrased in such a way as to leave locks out of the equation entirely, you’re that much closer to figuring out how to address it.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;And it’s a lesson that writers or other creative artists should take to heart. In &lt;em&gt;&lt;a href=&quot;https://nevalalee.wordpress.com/2015/11/12/my-great-books-9-on-directing-film/&quot;&gt;On Directing Film&lt;/a&gt;&lt;/em&gt;, David Mamet devotes what seems like an inordinate amount of time to teaching his students how to properly describe the objective of a scene, and reminding them how easy it is to confuse the means with the end. One of the pitfalls of figuring out a plot is that once we’ve come up with a “solution” to a problem, like putting locks on the doors, we spend all our energy trying to get out of all the new complications that the solution presents, rather than focusing on the issue that it was meant to satisfy. In many cases, like the proprietors of the rooming house in St. Louis, we end up affixing a label to explain what we mean, which is as close as you can get to unambiguous evidence that the solution you have in mind isn’t working. Donald Norman, in his classic book &lt;em&gt;&lt;a href=&quot;https://archive.org/details/DesignOfEverydayThings&quot;&gt;The Design of Everyday Things&lt;/a&gt;&lt;/em&gt;, provides examples of the labels we see on everything from doors to to hot and cold water faucets, and concludes: “When simple things need instructions, it is a certain sign of poor design.” And that’s as true of stories as of sinks. Whenever a movie gives us an introductory scroll of text, a lingering shot of a sign, or a chyron to explain where we are or how much time has passed, it signals that the underlying problem hasn’t really been solved. If you want to find the right answer, you have to start by asking the right question. And then you can &lt;a href=&quot;https://nevalalee.wordpress.com/2013/12/04/how-to-think-in-the-shower/&quot;&gt;soak in the tub&lt;/a&gt; until you’ve figured it out—as long as you remember to lock the door first.&lt;/p&gt;
&lt;div id=&quot;jp-post-flair&quot; class=&quot;sharedaddy sd-like-enabled sd-sharing-enabled&quot;&gt;

&lt;div class=&quot;sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded&quot; id=&quot;like-post-wrapper-18041633-26866-5b4cc04e953a2&quot; data-src=&quot;//widgets.wp.com/likes/index.html?ver=20180319#blog_id=18041633&amp;amp;post_id=26866&amp;amp;origin=nevalalee.wordpress.com&amp;amp;obj_id=18041633-26866-5b4cc04e953a2&quot; data-name=&quot;like-post-frame-18041633-26866-5b4cc04e953a2&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Like this:&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;button&quot;&gt;&lt;span&gt;Like&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;loading&quot;&gt;Loading...&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 14 Jul 2018 22:15:41 +0000</pubDate>
<dc:creator>tlrobinson</dc:creator>
<og:type>article</og:type>
<og:title>The hotel bathroom puzzle</og:title>
<og:url>https://nevalalee.wordpress.com/2015/11/27/the-hotel-bathroom-puzzle/</og:url>
<og:description>In his wonderful book The Evolution of Useful Things, the author and civil engineer Henry Petroski shares one of the most famous case studies in the history of design: Before it was destroyed by fi…</og:description>
<og:image>https://nevalalee.files.wordpress.com/2015/11/louis-xiv-bathroom-after.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://nevalalee.wordpress.com/2015/11/27/the-hotel-bathroom-puzzle/</dc:identifier>
</item>
<item>
<title>Cognitive Distortions of People Who Get Stuff Done (2012) [pdf]</title>
<link>https://pdfs.semanticscholar.org/presentation/1a59/7a9ca8b03d86ae9a2f86dd90e7bbff481fab.pdf</link>
<guid isPermaLink="true" >https://pdfs.semanticscholar.org/presentation/1a59/7a9ca8b03d86ae9a2f86dd90e7bbff481fab.pdf</guid>
<description>&lt;a href=&quot;https://pdfs.semanticscholar.org/presentation/1a59/7a9ca8b03d86ae9a2f86dd90e7bbff481fab.pdf&quot;&gt;Download PDF&lt;/a&gt;</description>
<pubDate>Sat, 14 Jul 2018 21:01:59 +0000</pubDate>
<dc:creator>bleigh0</dc:creator>
<og:type>article</og:type>
<og:title>The hotel bathroom puzzle</og:title>
<og:url>https://nevalalee.wordpress.com/2015/11/27/the-hotel-bathroom-puzzle/</og:url>
<og:description>In his wonderful book The Evolution of Useful Things, the author and civil engineer Henry Petroski shares one of the most famous case studies in the history of design: Before it was destroyed by fi…</og:description>
<og:image>https://nevalalee.files.wordpress.com/2015/11/louis-xiv-bathroom-after.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>application/pdf</dc:format>
<dc:identifier>https://pdfs.semanticscholar.org/presentation/1a59/7a9ca8b03d86ae9a2f86dd90e7bbff481fab.pdf</dc:identifier>
</item>
</channel>
</rss>