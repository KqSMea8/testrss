<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Windows 7 patch for Meltdown enabled arbitrary reads and writes in kernel memory</title>
<link>http://blog.frizk.net/2018/03/total-meltdown.html?m=1</link>
<guid isPermaLink="true" >http://blog.frizk.net/2018/03/total-meltdown.html?m=1</guid>
<description>Did you think &lt;a href=&quot;https://meltdownattack.com/&quot; target=&quot;_blank&quot;&gt;Meltdown&lt;/a&gt; was bad? Unprivileged applications being able to read kernel memory at speeds possibly as high as megabytes per second was not a good thing.&lt;p&gt;Meet the Windows 7 Meltdown patch from January. It stopped Meltdown but opened up a vulnerability way worse ... It allowed any process to read the complete memory contents at gigabytes per second, oh - it was possible to write to arbitrary memory as well.&lt;/p&gt;&lt;p&gt;No fancy exploits were needed. Windows 7 already did the hard work of mapping in the required memory into every running process. Exploitation was just a matter of read and write to already mapped in-process virtual memory. No fancy APIs or syscalls required - just standard read and write!&lt;/p&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-s3qfJMhl96g/WrgfS-G94nI/AAAAAAAAAR4/3xQxW40JN6sG83bdHi2HidX7GLNi4p-rwCK4BGAYYCw/s1600/win7-dump-combined.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;71&quot; src=&quot;https://3.bp.blogspot.com/-s3qfJMhl96g/WrgfS-G94nI/AAAAAAAAAR4/3xQxW40JN6sG83bdHi2HidX7GLNi4p-rwCK4BGAYYCw/s280/win7-dump-combined.png&quot; width=&quot;280&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;Accessing memory at over 4GB/s, dumping to disk is slower due to disk transfer speeds.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br/&gt;&lt;span&gt;How is this possible?&lt;/span&gt;&lt;br/&gt;In short - the User/Supervisor permission bit was set to User in the PML4 self-referencing entry. This made the page tables available to user mode code in every process. The page tables should normally only be accessible by the kernel itself.&lt;p&gt;The PML4 is the base of the 4-level in-memory page table hierarchy that the CPU Memory Management Unit (MMU) uses to translate the virtual addresses of a process into physical memory addresses in RAM. For more in-depth information about paging please have a look at Getting Physical: Extreme abuse of Intel based Paging Systems - &lt;a href=&quot;https://www.coresecurity.com/blog/getting-physical-extreme-abuse-of-intel-based-paging-systems-part-1&quot; target=&quot;_blank&quot;&gt;Part 1&lt;/a&gt; and &lt;a href=&quot;https://www.coresecurity.com/blog/getting-physical-extreme-abuse-of-intel-based-paging-systems-part-2-windows&quot; target=&quot;_blank&quot;&gt;Part 2&lt;/a&gt;.&lt;/p&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-Z0GfqG0uEEc/WrlBgw25SfI/AAAAAAAAAS0/-pMbY3vvW-0jNHLxpkMg6XXP6BazBvJYwCK4BGAYYCw/s1600/win7-pml4-2.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;92&quot; src=&quot;https://4.bp.blogspot.com/-Z0GfqG0uEEc/WrlBgw25SfI/AAAAAAAAAS0/-pMbY3vvW-0jNHLxpkMg6XXP6BazBvJYwCK4BGAYYCw/s280/win7-pml4-2.png&quot; width=&quot;280&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;PML4 self-referencing entry at offset 0xF68 with value 0x0000000062100867.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br/&gt;Windows have a special entry in this topmost PML4 page table that references itself, a self-referencing entry. In Windows 7 the PML4 self-referencing is fixed at the position 0x1ED, offset 0xF68 (it is randomized in Windows 10). This means that the PML4 will always be mapped at the address: 0xFFFFF6FB7DBED000 in virtual memory. This is normally a memory address only made available to the kernel (Supervisor). Since the permission bit was erroneously set to User this meant the PML4 was mapped into every process and made available to code executing in user-mode.&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-RylSKkq7cQ4/WrlAZyKmU0I/AAAAAAAAASo/IsocNqHkEMwSvGtpqrYBZuqlD804VPLzwCK4BGAYYCw/s1600/win7-notepad-memmap.PNG&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;101&quot; src=&quot;https://1.bp.blogspot.com/-RylSKkq7cQ4/WrlAZyKmU0I/AAAAAAAAASo/IsocNqHkEMwSvGtpqrYBZuqlD804VPLzwCK4BGAYYCw/s280/win7-notepad-memmap.PNG&quot; width=&quot;280&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;&quot;kernel address&quot; memory addresses mapped in every process as user-mode read/write pages.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br/&gt;Once read/write access has been gained to the page tables it will be trivially easy to gain access to the complete physical memory, unless it is additionally protected by Extended Page Tables (EPTs) used for Virtualization. All one have to do is to write their own Page Table Entries (PTEs) into the page tables to access arbitrary physical memory.&lt;p&gt;The last '7' in the PML4e 0x0000000062100867 (from above example) indicates that bits 0, 1, 2 are set, which means it's Present, Writable and User-mode accessible as per the description in the Intel Manual.&lt;/p&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-cySzPVEj6Rc/WrktmuF1MDI/AAAAAAAAASY/DIzZOHKBIg4CDo_ZB8lKMd79glIm8mk-ACK4BGAYYCw/s1600/win7-pml4.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;68&quot; src=&quot;https://3.bp.blogspot.com/-cySzPVEj6Rc/WrktmuF1MDI/AAAAAAAAASY/DIzZOHKBIg4CDo_ZB8lKMd79glIm8mk-ACK4BGAYYCw/s280/win7-pml4.png&quot; width=&quot;280&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;Excerpt from the Intel Manual, if bit 2 is set to '1' user-mode access are permitted.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br/&gt;&lt;span&gt;Can I try this out myself?&lt;/span&gt;&lt;br/&gt;Yes absolutely. The technique has been added as a memory acquisition device to the &lt;a href=&quot;https://github.com/ufrisk/pcileech&quot; target=&quot;_blank&quot;&gt;PCILeech direct memory access attack toolkit&lt;/a&gt;. Just download PCILeech and execute it with device type: &lt;span&gt;-device totalmeltdown&lt;/span&gt; on a vulnerable Windows 7 system.&lt;p&gt;Dump memory to file with the command: &lt;span&gt;&lt;span&gt;pcileech.exe dump -out memorydump.raw -device totalmeltdown -v -force&lt;/span&gt;&lt;/span&gt; .&lt;/p&gt;&lt;p&gt;If you have the &lt;a href=&quot;https://github.com/dokan-dev/dokany/releases&quot; target=&quot;_blank&quot;&gt;Dokany&lt;/a&gt; file system driver installed you should be able to mount the running processes as files and folders in the &lt;a href=&quot;https://blog.frizk.net/2018/03/memory-process-file-system.html&quot;&gt;Memory Process File System&lt;/a&gt; - with the virtual memory of the kernel and the processes as read/write.&lt;/p&gt;&lt;p&gt;To mount the processes issue the command: &lt;span&gt;pcileech.exe mount -device totalmeltdown&lt;/span&gt; .&lt;/p&gt;&lt;p&gt;Please remember to re-install your security updates if you temporarily uninstall the latest one in order to test this vulnerability.&lt;/p&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-9c4H8Du9hAo/Wrkow8_FpGI/AAAAAAAAASI/boLoB8uqyigstJhP0WaHJUS1YYttOruUQCK4BGAYYCw/s1600/win7-prsc-pcileech-mount.PNG&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;157&quot; src=&quot;https://4.bp.blogspot.com/-9c4H8Du9hAo/Wrkow8_FpGI/AAAAAAAAASI/boLoB8uqyigstJhP0WaHJUS1YYttOruUQCK4BGAYYCw/s280/win7-prsc-pcileech-mount.PNG&quot; width=&quot;280&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;A vulnerable system is &quot;exploited&quot; and the running processes are mounted with PCILeech.&lt;br/&gt;Process memory maps and PML4 are accessed.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br/&gt;&lt;span&gt;Is my system vulnerable?&lt;/span&gt;&lt;br/&gt;Only Windows 7 x64 systems patched with the 2018-01 or 2018-02 patches are vulnerable. If your system isn't patched since December 2017 or if it's patched with the 2018-03 patches or later it will be secure.&lt;p&gt;Other Windows versions - such as Windows 10 or 8.1 are completely secure with regards to this issue and have never been affected by it.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Other&lt;/span&gt;&lt;br/&gt;I discovered this vulnerability just after it had been patched in the 2018-03 Patch Tuesday. I have not been able to correlate the vulnerability to known CVEs or other known issues.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Update&lt;/span&gt;&lt;br/&gt;Windows 2008R2 was vulnerable as well.
&lt;/p&gt;</description>
<pubDate>Tue, 27 Mar 2018 19:18:28 +0000</pubDate>
<dc:creator>romac</dc:creator>
<og:url>http://blog.frizk.net/2018/03/total-meltdown.html</og:url>
<og:title>Total Meltdown?</og:title>
<og:description>Did you think Meltdown was bad? Unprivileged applications being able to read kernel memory at speeds possibly as high as megabytes per seco...</og:description>
<og:image>https://3.bp.blogspot.com/-s3qfJMhl96g/WrgfS-G94nI/AAAAAAAAAR4/3xQxW40JN6sG83bdHi2HidX7GLNi4p-rwCK4BGAYYCw/w1200-h630-p-k-no-nu/win7-dump-combined.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://blog.frizk.net/2018/03/total-meltdown.html?m=1</dc:identifier>
</item>
<item>
<title>Apple SIM</title>
<link>https://www.apple.com/ipad/apple-sim/</link>
<guid isPermaLink="true" >https://www.apple.com/ipad/apple-sim/</guid>
<description>&lt;p class=&quot;typography-intro large-8 medium-10 small-12&quot;&gt;Apple SIM gives you the convenience of choosing a cellular data plan from carrier partners right on your iPad. So you can stay connected when you’re away from a Wi‑Fi hotspot.&lt;sup&gt;&lt;span class=&quot;visuallyhidden&quot;&gt;footnote&lt;/span&gt;1&lt;/sup&gt; When you travel, Apple SIM gives you the flexibility to stay connected in more than 180 countries and regions. When you reach your destination and want to check your email, find directions, or send a message back home, you can purchase a cellular data plan for however long you need it.&lt;/p&gt;
</description>
<pubDate>Tue, 27 Mar 2018 18:33:28 +0000</pubDate>
<dc:creator>skuzins</dc:creator>
<og:url>https://www.apple.com/ipad/apple-sim/</og:url>
<og:title>Apple SIM</og:title>
<og:description>Apple SIM gives you more choices for staying connected with cellular data plans for iPad in more than 180 countries and regions around the world.</og:description>
<og:image>https://www.apple.com/ipad/apple-sim/images/og.png?201803221610</og:image>
<og:type>website</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.apple.com/ipad/apple-sim/</dc:identifier>
</item>
<item>
<title>Google Cloud Text-To-Speech Powered by DeepMind WaveNet Technology</title>
<link>https://cloudplatform.googleblog.com/2018/03/introducing-Cloud-Text-to-Speech-powered-by-Deepmind-WaveNet-technology.html</link>
<guid isPermaLink="true" >https://cloudplatform.googleblog.com/2018/03/introducing-Cloud-Text-to-Speech-powered-by-Deepmind-WaveNet-technology.html</guid>
<description></description>
<pubDate>Tue, 27 Mar 2018 18:11:13 +0000</pubDate>
<dc:creator>pseudobry</dc:creator>
<og:title>Introducing Cloud Text-to-Speech powered by DeepMind WaveNet technology</og:title>
<og:url>https://cloudplatform.googleblog.com/2018/03/introducing-Cloud-Text-to-Speech-powered-by-Deepmind-WaveNet-technology.html</og:url>
<og:type>article</og:type>
<og:image>https://storage.googleapis.com/deepmind-live-cms-alt/documents/wavenet-waveform-anim-optimised-171004-r01.gif</og:image>
<og:description>By Dan Aharon, Product Manager, Cloud AI Many Google products (e.g., the Google Assistant, Search, Maps) come with built-in high-quality t...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://cloudplatform.googleblog.com/2018/03/introducing-Cloud-Text-to-Speech-powered-by-Deepmind-WaveNet-technology.html</dc:identifier>
</item>
<item>
<title>Palantir worked with Cambridge Analytica on the Facebook data it acquired</title>
<link>https://www.cnbc.com/2018/03/27/palantir-worked-with-cambridge-analytica-on-the-facebook-data-whistleblower.html</link>
<guid isPermaLink="true" >https://www.cnbc.com/2018/03/27/palantir-worked-with-cambridge-analytica-on-the-facebook-data-whistleblower.html</guid>
<description>&lt;p&gt;Palantir, a secretive company co-founded by billionaire &lt;a href=&quot;https://www.cnbc.com/peter-thiel/&quot;&gt;Peter Thiel&lt;/a&gt;, worked with Cambridge Analytica, the political analysis firm that harvested data from &lt;a class=&quot;inline_quotes&quot; data-gdsid=&quot;139619&quot; data-inline-quote-symbol=&quot;FB&quot; href=&quot;https://www.cnbc.com/quotes/?symbol=FB&quot;&gt;Facebook&lt;/a&gt; users, whistleblower Christopher Wylie told U.K. lawmakers Tuesday.&lt;/p&gt;
&lt;p&gt;Wylie claimed that Cambridge Analytica CEO Alexander Nix was introduced to Palantir by Sophie Schmidt, the daughter of former Google CEO &lt;a href=&quot;https://www.cnbc.com/eric-schmidt/&quot;&gt;Eric Schmidt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thiel, who has not been accused of any wrongdoing, was not immediately available for comment when contacted by CNBC.&lt;/p&gt;

&lt;p&gt;Wylie, &lt;a href=&quot;https://www.cnbc.com/2018/03/27/christopher-wylie-facebook-cambridge-analytica-whistleblower-appears-in-front-of-uk-lawmakers.html&quot;&gt;a former employee of Cambridge Analytica,&lt;/a&gt; said Nix had &quot;several meetings&quot; with Palantir.&lt;/p&gt;
&lt;p&gt;&quot;Senior Palantir employees&quot; then worked on the Facebook profile data that was acquired by Cambridge Analytica, Wylie claimed.&lt;/p&gt;
&lt;p&gt;&quot;That was not an official contract between Palantir and Cambridge Analytica, but there were Palantir staff that would come into the office and work on that data,&quot; Wylie told lawmakers. He added that Palantir staff &quot;helped build the models we were working on.&quot;&lt;/p&gt;
&lt;p&gt;Wylie did not elaborate on the &quot;models&quot; being worked on but it relates to Cambridge Analytica's algorithms used to target people in political votes.&lt;/p&gt;
&lt;p&gt;A spokesperson for Palantir told CNBC the company has never had a relationship with Cambridge Analytica and has never worked on any Cambridge Analytica data. Cambridge Analytica was not immediately available for comment.&lt;/p&gt;
&lt;p&gt;Last year, The Observer newspaper reported that Cambridge Analytica and Palantir had meetings in 2013. According to the report, at least one senior Palantir employee consulted with Cambridge Analytica regarding a project in Trinidad and political work in the United States. Palantir decided against it, according to the British newspaper.&lt;/p&gt;
&lt;p&gt;Wylie gave testimony about the scandal in which &lt;a href=&quot;https://www.cnbc.com/2018/03/21/facebook-cambridge-analytica-scandal-everything-you-need-to-know.html&quot;&gt;50 million Facebook profiles were mined&lt;/a&gt; for data that was harvested by an app, which shared the information with Cambridge Analytica.&lt;/p&gt;
&lt;p&gt;Cambridge Analytica &lt;a href=&quot;https://www.cnbc.com/2018/03/20/cambridge-analytica-claimed-firm-ran-digital-campaign-for-trump-report-says.html&quot;&gt;claimed it worked on all the digital aspects&lt;/a&gt; of &lt;a href=&quot;https://www.cnbc.com/donald-trump/&quot;&gt;Donald Trump&lt;/a&gt;'s 2016 election campaign. &lt;a href=&quot;https://www.cnbc.com/id/105067724&quot;&gt;Thiel&lt;/a&gt; is a well-known supporter of Trump and &lt;a href=&quot;https://www.cnbc.com/2016/10/16/peter-thiel-to-donate-125-million-in-support-of-donald-trump.html&quot;&gt;donated over $1 million&lt;/a&gt; to his campaign. He is also on the board of Facebook. &lt;a href=&quot;https://www.cnbc.com/stephen-bannon/&quot;&gt;Steve Bannon&lt;/a&gt;, who was a top executive at Cambridge Analytica, led Trump's campaign.&lt;/p&gt;
&lt;p&gt;Palantir has &lt;a href=&quot;https://www.cnbc.com/2017/04/21/buzzfeed-palantir-loses-relationship-with-nsa-ceo-karp-bashes-trump.html&quot;&gt;previously done work&lt;/a&gt; for the National Security Agency and is backed by the &lt;a href=&quot;https://www.cnbc.com/2016/03/23/credit-suisse-cia-backed-palantir-to-fight-rogue-traders.html&quot;&gt;CIA's not-for-profit venture capital firm&lt;/a&gt;. Palantir's CEO Alex Karp, who is also not accused of wrongdoing, was also one of the technology executives who was &lt;a href=&quot;https://www.cnbc.com/2016/12/15/palantir-ceo-at-trump-tech-summit-raises-red-flags.html&quot;&gt;at a meeting with Trump&lt;/a&gt; in December 2016.&lt;/p&gt;

</description>
<pubDate>Tue, 27 Mar 2018 17:21:31 +0000</pubDate>
<dc:creator>jacobsheehy</dc:creator>
<og:type>article</og:type>
<og:url>https://www.cnbc.com/2018/03/27/palantir-worked-with-cambridge-analytica-on-the-facebook-data-whistleblower.html</og:url>
<og:image>https://fm.cnbc.com/applications/cnbc.com/resources/img/editorial/2018/03/15/105068487-GettyImages-619458242.1910x1000.jpg</og:image>
<og:title>Peter Thiel's Palantir worked with Cambridge Analytica on the Facebook data, whistleblower alleges</og:title>
<og:description>Palantir worked on the Facebook data that was acquired by Cambridge Analytica, whistleblower Christopher Wylie tells members of U.K. Parliament.</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnbc.com/2018/03/27/palantir-worked-with-cambridge-analytica-on-the-facebook-data-whistleblower.html</dc:identifier>
</item>
<item>
<title>Facebook&amp;#039;s Zuckerberg Says the Age of Privacy Is Over (2010)</title>
<link>https://archive.nytimes.com/www.nytimes.com/external/readwriteweb/2010/01/10/10readwriteweb-facebooks-zuckerberg-says-the-age-of-privac-82963.html</link>
<guid isPermaLink="true" >https://archive.nytimes.com/www.nytimes.com/external/readwriteweb/2010/01/10/10readwriteweb-facebooks-zuckerberg-says-the-age-of-privac-82963.html</guid>
<description>&lt;p&gt;Facebook founder Mark Zuckerberg told a live audience yesterday that if he were to create Facebook again today, user information would by default be public, not private as it was for years until the company changed dramatically in December.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;http://www.ustream.tv/recorded/3848950&quot;&gt;a six-minute interview on stage with TechCrunch founder Michael Arrington&lt;/a&gt;, Zuckerberg spent 60 seconds talking about Facebook's privacy policies. His statements were of major importance for the world's largest social network - and his arguments in favor of an about-face on privacy deserve close scrutiny.&lt;/p&gt;
&lt;p&gt;Zuckerberg offered roughly 8 sentences in response to Arrington's question about where privacy was going on Facebook and around the web. I'll post those sentences on their own first, then follow up with the questions they raise in my mind. You can also watch the video below, the privacy part we transcribe is from 3:00 to 4:00.&lt;/p&gt;
&lt;p&gt;Zuckerberg:&lt;br /&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;24&quot;&gt;
&lt;p&gt;&quot;When I got started in my dorm room at Harvard, the question a lot of people asked was 'why would I want to put any information on the Internet at all? Why would I want to have a website?'&lt;/p&gt;
&lt;p&gt;&quot;And then in the last 5 or 6 years, blogging has taken off in a huge way and all these different services that have people sharing all this information. People have really gotten comfortable not only sharing more information and different kinds, but more openly and with more people. That social norm is just something that has evolved over time.&lt;/p&gt;
&lt;p&gt;&quot;We view it as our role in the system to constantly be innovating and be updating what our system is to reflect what the current social norms are.&lt;/p&gt;
&lt;p&gt;&quot;A lot of companies would be trapped by the conventions and their legacies of what they've built, doing a privacy change - doing a privacy change for 350 million users is not the kind of thing that a lot of companies would do. But we viewed that as a really important thing, to always keep a beginner's mind and what would we do if we were starting the company now and we decided that these would be the social norms now and we just went for it.&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;That's Not a Believable Explanation&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This is a radical change from the way that Zuckerberg pounded on the importance of user privacy for years. That your information would only be visible to the people you accept as friends was fundamental to the DNA of the social network that hundreds of millions of people have joined over these past few years. Privacy control, &lt;a href=&quot;http://www.readwriteweb.com/archives/mark_zuckerberg_on_data_portab.php&quot;&gt;he told me&lt;/a&gt; less than 2 years ago, is &quot;the vector around which Facebook operates.&quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I don't buy Zuckerberg's argument that Facebook is now only reflecting the changes that society is undergoing. I think Facebook itself is a major agent of social change and by acting otherwise Zuckerberg is being arrogant and condescending.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Perhaps the new privacy controls will prove sufficient. Perhaps Facebook's pushing our culture away from privacy will end up being a good thing. The way the company is going about it makes me very uncomfortable, though, and some of the changes are clearly bad. It is clearly bad to no longer allow people to keep the pages they subscribe to private on Facebook.&lt;/p&gt;
&lt;p&gt;This major reversal, backed-up by superficial explanations, makes me wonder if Facebook's changing philosophies about privacy are just convenient stories to tell while the company shifts its strategy to exert control over the future of the web.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;Facebook's Different Stories&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;First the company kept user data siloed inside its site alone, saying that a high degree of user privacy would make users comfortable enough to share more information with a smaller number of trusted people.&lt;/p&gt;
&lt;p&gt;Now that it has 350 million people signed up and connected to their friends and family in a way they never have been before - now Facebook decides that the initial, privacy-centric, contract with users is out of date. That users actually want to share openly, with the world at large, and incidentally (as Facebook's Director of Public Policy Barry Schnitt told me in December) that it's time for increased pageviews and advertising revenue, too.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;The Flimsy Evidence&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;What makes Facebook think the world is becoming more public and less private? Zuckerberg cites the rise of blogging &quot;and all these different services that have people sharing all this information.&quot; That last part must mean Twitter, right? But blogging is tiny compared to Facebook! It's made a big impact on the world, but only because it perhaps doubled or tripled the small percentage of people online who publish long-form text content. Not very many people write blogs, almost everyone is on Facebook.&lt;/p&gt;
&lt;p&gt;Facebook's Barry Schnitt &lt;a href=&quot;http://www.readwriteweb.com/archives/why_facebook_changed_privacy_policies.php&quot;&gt;told us last month&lt;/a&gt; that he too believes the world is becoming more open and his evidence is Twitter, MySpace, comments posted to newspaper websites &lt;span class=&quot;italic&quot;&gt;and the rise of Reality TV.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;But Facebook is bigger and is growing much faster than all of those other things. Do they really expect us to believe that the popularity of reality TV is evidence that users want their Facebook friends lists and fan pages made permanently public? Why cite those kinds phenomena as evidence that the red hot social network needs to change its ways?&lt;/p&gt;
&lt;p&gt;The company's justifications of the claim that they are reflecting broader social trends just aren't credible. A much more believable explanation is that Facebook wants user information to be made public and so they &quot;just went for it,&quot; to use Zuckerberg's words from yesterday.&lt;/p&gt;
&lt;p&gt;(Why didn't Arrington press Zuckerberg on stage about this? The rise of blogging is evidence that Facebook needs to change its fundamental stance on privacy?)&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;This is Very Important&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Facebook allows everyday people to share the minutia of their daily lives with trusted friends and family, to easily distribute photos and videos - if you use it regularly you know how it has made a very real impact on families and social groups that used to communicate very infrequently. Accessible social networking technology changes communication between people in a way similar to if not as intensely as the introduction of the telephone and the printing press. It changes the fabric of peoples' lives together. 350 million people signed up for Facebook under the belief their information could be shared just between trusted friends. Now the company says that's old news, that people are changing. I don't believe it.&lt;/p&gt;
&lt;p&gt;I think Facebook is just saying that because that's what it wants to be true.&lt;/p&gt;
&lt;p&gt;Whether less privacy is good or bad is another matter, the change of the contract with users based on feigned concern for users' desires is offensive and makes any further moves by Facebook suspect.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;Copyright 2010 ReadWriteWeb. All Rights Reserved.&lt;/p&gt;

</description>
<pubDate>Tue, 27 Mar 2018 17:14:15 +0000</pubDate>
<dc:creator>ProAm</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://archive.nytimes.com/www.nytimes.com/external/readwriteweb/2010/01/10/10readwriteweb-facebooks-zuckerberg-says-the-age-of-privac-82963.html</dc:identifier>
</item>
<item>
<title>How I Erased Facebook Comments and Likes</title>
<link>http://www.jaruzel.com/blog/How-I-Erased-5000-Facebook-Comments-and-Likes</link>
<guid isPermaLink="true" >http://www.jaruzel.com/blog/How-I-Erased-5000-Facebook-Comments-and-Likes</guid>
<description>&lt;p&gt;Like many people I was appalled at the &lt;a href=&quot;https://www.theguardian.com/news/2018/mar/26/the-cambridge-analytica-files-the-story-so-far&quot; title=&quot;exposure of peoples Facebook data&quot;&gt;exposure of peoples Facebook data&lt;/a&gt; recently. Although I had stopped using Facebook to post about myself over a year ago, I was still using it to comment on, and react to friends posts and photos.&lt;/p&gt;
&lt;p&gt;When I stopped posting my own stuff on Facebook, I wrote a small script to delete every post I had ever made, so I knew that the posts part of my Facebook profile was already purged and clean. What I wanted to do now, was remove all my previous activity.&lt;/p&gt;
&lt;p&gt;I did not want to &lt;a href=&quot;https://twitter.com/search?q=%23DeleteFacebook&quot; title=&quot;#DeleteFacebook&quot;&gt;#DeleteFacebook&lt;/a&gt; as some of my extended family still use it heavily, and they live far enough away that regular face to face visits are impractical. Also, there are anecdotal rumours that asking Facebook to delete your profile merely tombstones that account, and the data is never properly purged from their systems (anonymised or not).&lt;/p&gt;
&lt;p&gt;I know I cannot close the barn door on any data of mine that's already out in the wild, but I can control any further scrapes of my Facebook data by manually removing as much of my Facebook Activity as I can. Unfortunately, and not unexpectedly, Facebook do not give you a simple way to do this.&lt;/p&gt;
&lt;p&gt;There are &lt;a href=&quot;https://chrome.google.com/webstore/search/delete%20facebook?hl=en&amp;amp;_category=extensions&quot; title=&quot;several browser extensions&quot;&gt;several browser extensions&lt;/a&gt; that are available to do what I am attempting, but as a hobbyist coder, it's always more fun to explore how to do these things yourself...&lt;/p&gt;
&lt;p&gt;So, where to start? Having already purged all my Posts from Facebook a year ago, I knew that the main Facebook site is such a mess of dynamic html that trying to scrape it via that would frustrate me pretty quickly. My tools of the trade are typically .NET framework based, and I am also not an expert at Javascript, so I fired up Visual Studio, created a new empty project, and dropped a standard WebBrowser control on a blank form.&lt;/p&gt;
&lt;p&gt;This didn't need to be good or clever code, it just needed to work...&lt;/p&gt;
&lt;p&gt;Having already identified that for me at least, scraping &lt;em&gt;www.facebook.com&lt;/em&gt; , would just be an exercise in frustration, I decided to use the very basic version of Facebook:&lt;/p&gt;
&lt;p&gt;https://mbasic.facebook.com&lt;/p&gt;
&lt;p&gt;This version is very light on Javascript, and the rendered html is served from the server, and not generated by the browser. This makes exploring the document html tags &lt;em&gt;much&lt;/em&gt; easier. In the basic version of Facebook, the Activity log is stored here:&lt;/p&gt;
&lt;p&gt;https://mbasic.facebook.com/&amp;lt;your-user-id&amp;gt;/allactivity&lt;/p&gt;
&lt;p&gt;On this page you can see all your recent activity, but more importantly, you can see links to the &lt;strong&gt;years&lt;/strong&gt; and &lt;strong&gt;months&lt;/strong&gt;. It's these links we'll be using to walk the activity history. I created some code that told the WebBrowser control to navigate there and tell me when it's done.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jaruzel.com/media/erase-facebook-01.jpg&quot; title=&quot;Facebook Activity Log&quot; class=&quot;inline-image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The first step was to collect only the top-level links of the root page of the Activity Log that linked to the next layer of activity. Helpfully these links follow a standard format and always contain:&lt;/p&gt;
&lt;p&gt;/allactivity?timeend=&lt;/p&gt;

&lt;p&gt;Once we've got a list of those, we navigate to each one. Again, we're only interested in any links that contain the above string. Any new links we've found (that we've not seen before) we add to the list of pages that we are interested in. In the basic version of Facebook, Activity links that are labelled with only a &lt;strong&gt;year&lt;/strong&gt; , tend to route to a similar page with the year broken down into further &lt;strong&gt;month&lt;/strong&gt; links. If the code walks these two levels correctly, you should have a list of URLs that contains 12 month links for every year your Facebook account has existed.&lt;/p&gt;
&lt;p&gt;At this point we can start hunting down Comments, Reactions and Likes. The Delete button for these can be easily identified by the following string matches in the links in each page:&lt;/p&gt;
&lt;p&gt;/allactivity/removecontent/&lt;/p&gt;
&lt;p&gt;/allactivity/delete/&lt;/p&gt;

&lt;p&gt;We use our previous list of URLs we collected, and direct the WebBrowser control to navigate to each one. Once there, we parse the all the links in the page looking for the above string matches. If a link contains one of these strings, that link is added to a list of URLs that we call the DeleteList. Once all the year/month URLs have been navigated, we should have all our basic Activity collected for deletion.&lt;/p&gt;
&lt;p&gt;Now we tell the WebBrowser control to navigate to each of the URLs in the DeleteList. Each URL, because it sat behind the &lt;strong&gt;Delete&lt;/strong&gt; button for an activity, causes Facebook to delete that specified Activity.&lt;/p&gt;
&lt;p&gt;Additionally, I added a check for a link that had the text &lt;strong&gt;load more&lt;/strong&gt; in it, as the basic version of Facebook doesn't show more than a few Activities per page. A busy month would result in several pages hidden behind nested &lt;strong&gt;load more&lt;/strong&gt; links.&lt;/p&gt;
&lt;p&gt;I deliberately added a one second throttle into the WebBrowser loop code, so that the automated navigation of the URLs remained stable, as previous scraping work like this showed that the WebBrowser control cannot keep up with fast code loops and page data can be truncated or not loaded. Also, I didn't want to trigger any anti-scraping detection that Facebook may have. They probably don't, but it's better to be safe than sorry.&lt;/p&gt;
&lt;p&gt;Having already run through my code without actually navigating to the &lt;strong&gt;Delete&lt;/strong&gt; pages, I was fairly sure that my code did what I needed to do. So I let it rip, and kissed goodbye to all my activity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Or So I Thought...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jaruzel.com/media/erase-facebook-02.jpg&quot; title=&quot;Facebook Delete Script in Action&quot; class=&quot;inline-image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;After some time (more than an hour, less than three). I rechecked my Activity Log via &lt;em&gt;mbasic.facebook.com&lt;/em&gt; and all seemed nice and empty. Hooray, success! To be absolutely sure, I switched to the full version of Facebook, and checked my Activity Log there. There were still hundreds of comments, likes, and reactions! Something, somewhere had gone wrong...&lt;/p&gt;
&lt;p&gt;I could continue to bore you with all the investigatory steps I took to track down what was going on, but I won't, as you are probably bored already. It turns out that the basic version of your Activity Log does not surface all your activity. To see &lt;em&gt;all&lt;/em&gt; your comments, or &lt;em&gt;all&lt;/em&gt; your reactions, you need to set a filter by clicking on the big filter button and picking an activity type from the list. You know when you've done it as the top of the log shows the filter type:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jaruzel.com/media/erase-facebook-03.jpg&quot; title=&quot;Facebook Activity Log Filter&quot; class=&quot;inline-image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In order to dig up every comment or reaction I ever made, I needed to repeat everything I'd done, for each Activity type I wanted to erase. For me, as I wasn't a heavy user of most of Facebooks features, this boiled down to just these:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Likes and Reactions&lt;/li&gt;
&lt;li&gt;Comments&lt;/li&gt;
&lt;li&gt;Videos I've Watched&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Yes, Facebook makes a note of every video you clicked on in your newsfeed. I hadn't realised this and stumbled over it as I was checking each Activity type. Personally, I think this meta-data is used heavily by the algorithms that analyses your profile for advertising. For once, Facebook does the honourable thing here, and there is a delete video history button, other activities don't seem to have this option.&lt;/p&gt;
&lt;p&gt;Anyway, once I'd re-run the code against each activity type, my activity feed is as clean as it can be. There are some activities that can't be deleted, such as changes to your profile information, but it's not much compared to what you &lt;strong&gt;can&lt;/strong&gt; delete.&lt;/p&gt;
&lt;p&gt;A couple of things I learnt on this journey:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Friending someone is also an &lt;strong&gt;activity&lt;/strong&gt; - I seem to have way less friends on Facebook than I had when I started this, I have no idea who I've lost by deleting those friending activities, so I guess those people couldn't have been that important to me.&lt;/li&gt;
&lt;li&gt;Even the mighty Facebook has database problems; I have five comments that still show up, but the Delete button just throws a 404 when clicked.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I hope the breakdown of my attempt to erase my Facebook history without deleting my Facebook account, has been an interesting read for you. If you want to ask questions, or simply throw abuse at me (please don't...), I can be found on &lt;a href=&quot;https://twitter.com/Jaruzel&quot; title=&quot;Twitter&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;- Jaruzel, March 2018&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 27 Mar 2018 15:55:02 +0000</pubDate>
<dc:creator>Jaruzel</dc:creator>
<og:image>http://www.jaruzel.com/site/_assets/default_image.jpg</og:image>
<og:title>How I Erased 5000+ Facebook Comments and Likes</og:title>
<og:description> Erasing all my Facebook Activities without Deleting my Account</og:description>
<og:url>http://www.jaruzel.com/blog/How-I-Erased-5000-Facebook-Comments-and-Likes</og:url>
<og:type>website</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jaruzel.com/blog/How-I-Erased-5000-Facebook-Comments-and-Likes</dc:identifier>
</item>
<item>
<title>Fast, Safe, and Complete(ish) Web Service in Rust</title>
<link>https://brandur.org/rust-web</link>
<guid isPermaLink="true" >https://brandur.org/rust-web</guid>
<description>&lt;p&gt;For years now, I’ve been having a crisis of faith in interpreted languages. They’re fast and fun to work in at small scale, but when you have a project that gets big, their attractive veneer quickly washes away. A big Ruby or JavaScript (just to name a few) program in production is a never ending game of whack-a-mock – you fix one problem only to find a new one somewhere else. No matter how many tests you write, or how well-disciplined your team, any new development is sure to introduce a stream of bugs that will need to be shored up over the course of months or years.&lt;/p&gt;&lt;p&gt;Central to the problem are the edges. People will reliably do a good job of building and testing the happy paths, but as humans we’re &lt;em&gt;terrible&lt;/em&gt; at considering the edge conditions, and it’s those edges and corners that cause trouble over the years that a program is in service.&lt;/p&gt;
&lt;p&gt;Constraints like a compiler and a discerning type system are tools that help us to find and think about those edges. There’s a spectrum of permissiveness across the world of programming languages, and my thesis right now is that more time spent in development satisfying a language’s rules will lead to less time spent fixing problems online.&lt;/p&gt;

&lt;p&gt;If it’s possible to build more reliable systems with programming languages with stricter constraints, what about languages with the &lt;em&gt;strongest&lt;/em&gt; constraints? I’ve skewed all the way to the far end of the spectrum and have been building a web service in Rust, a language infamous for its uncompromising compiler.&lt;/p&gt;
&lt;p&gt;The language is still new and somewhat impractical. It’s been a slog learning its rules around types, ownership, and lifetimes. Despite the difficulty, it’s been an interesting learning experience throughout, and it’s working. I run into fewer forgotten edge conditions and runtime errors are way down. Broad refactoring is no longer terror-inducing.&lt;/p&gt;
&lt;p&gt;Here we’ll run through some of the more novel ideas and features of Rust, its core libraries, and various frameworks that make this possible.&lt;/p&gt;

&lt;p&gt;I built my service on &lt;a href=&quot;https://github.com/actix/actix-web&quot;&gt;&lt;code&gt;actix-web&lt;/code&gt;&lt;/a&gt;, a web framework layered on &lt;a href=&quot;https://github.com/actix/actix&quot;&gt;&lt;code&gt;actix&lt;/code&gt;&lt;/a&gt;, an actor library for Rust. &lt;code&gt;actix&lt;/code&gt; is similar to what you might see in a language like Erlang, except that it adds another degree of robustness and speed by making heavy use of Rust’s sophisticated type and concurrency systems. For example, it’s not possible for an actor to receive a message that it can’t handle at runtime because it would have been disallowed at compile-time.&lt;/p&gt;
&lt;p&gt;There’s a small chance that you’ll recognize the name because &lt;code&gt;actix-web&lt;/code&gt; has made its way to the top of the &lt;a href=&quot;https://www.techempower.com/benchmarks/#section=data-r15&amp;amp;hw=ph&amp;amp;test=plaintext&quot;&gt;TechEmpower benchmarks&lt;/a&gt;. Programs built for these sorts of benchmarks often turn out to be a little contrived due to their optimizations, but its now contrived Rust code that’s sitting right up at the top of the list with contrived C++ and Java code. But regardless of how you feel about the validity of benchmark programs, the takeaway is that &lt;code&gt;actix-web&lt;/code&gt; is &lt;em&gt;fast&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://brandur.org/assets/rust-web/techempower@2x.png&quot;&gt;&lt;img data-rjs=&quot;2&quot; src=&quot;https://brandur.org/assets/rust-web/techempower.png&quot; class=&quot;overflowing&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
Rust is consistently ranking alongside C++ and Java on TechEmpower.
&lt;p&gt;The author of &lt;code&gt;actix-web&lt;/code&gt; (and &lt;code&gt;actix&lt;/code&gt;) commits a prodigious amount of code – the project is only about six months old, and not only is already more feature-complete and with better APIs than web frameworks seen in other open source languages, but more so than many of the frameworks bankrolled by large organizations with huge development teams. Niceties like HTTP/2, WebSockets, steaming responses, graceful shutdown, HTTPS, cookie support, static file serving, and good testing infrastructure are readily available out of the box. The documentation is still a bit rough, but I’ve yet to run into a single bug.&lt;/p&gt;
&lt;h3 id=&quot;diesel&quot;&gt;&lt;a href=&quot;https://brandur.org/rust-web#diesel&quot;&gt;Diesel and compile-time query checking&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I’ve been using &lt;a href=&quot;http://diesel.rs/&quot;&gt;&lt;code&gt;diesel&lt;/code&gt;&lt;/a&gt; as an ORM to talk to Postgres. The most comforting thing about the project is that it’s an ORM written by someone with a lot of past experience with building ORMs, having spent considerable time in the trenches with Active Record. Many of the pitfalls common to earlier generations of ORMs have been avoided – for example, &lt;code&gt;diesel&lt;/code&gt; doesn’t try to pretend that SQL dialects across every major database are the same, it excludes a custom DSL for migrations (raw SQL is used instead), and it doesn’t do automagical connection management at the global level. It &lt;em&gt;does&lt;/em&gt; bake powerful Postgres features like upsert and &lt;code&gt;jsonb&lt;/code&gt; right into the core library, and provides powerful safety mechanics wherever possible.&lt;/p&gt;
&lt;p&gt;Most of my database queries are written using &lt;code&gt;diesel&lt;/code&gt;’s type-safe DSL. If I misreference a field, try to insert a tuple into the wrong table, or even produce an impossible join, the compiler tells me about it. Here’s a typical operation (in this case, a Postgres batch &lt;code&gt;INSERT INTO ... ON CONFLICT ...&lt;/code&gt;, or “upsert”):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;time_helpers::log_timed(&amp;amp;log.new(o!(&quot;step&quot; =&amp;gt; &quot;upsert_episodes&quot;)), |_log| {
    Ok(diesel::insert_into(schema::episode::table)
        .values(ins_episodes)
        .on_conflict((schema::episode::podcast_id, schema::episode::guid))
        .do_update()
        .set((
            schema::episode::description.eq(excluded(schema::episode::description)),
            schema::episode::explicit.eq(excluded(schema::episode::explicit)),
            schema::episode::link_url.eq(excluded(schema::episode::link_url)),
            schema::episode::media_type.eq(excluded(schema::episode::media_type)),
            schema::episode::media_url.eq(excluded(schema::episode::media_url)),
            schema::episode::podcast_id.eq(excluded(schema::episode::podcast_id)),
            schema::episode::published_at.eq(excluded(schema::episode::published_at)),
            schema::episode::title.eq(excluded(schema::episode::title)),
        ))
        .get_results(self.conn)
        .chain_err(|| &quot;Error upserting podcast episodes&quot;)?)
})
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;More complex SQL is difficult to represent using the DSL, but luckily there’s a great alternative in the form of Rust’s built-in &lt;code&gt;include_str!&lt;/code&gt; macro. It ingests a file’s contents during compilation, and we can easily hand them off them to &lt;code&gt;diesel&lt;/code&gt; for parameter binding and execution:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;diesel::sql_query(include_str!(&quot;../sql/cleaner_directory_search.sql&quot;))
    .bind::&amp;lt;Text, _&amp;gt;(DIRECTORY_SEARCH_DELETE_HORIZON)
    .bind::&amp;lt;BigInt, _&amp;gt;(DELETE_LIMIT)
    .get_result::&amp;lt;DeleteResults&amp;gt;(conn)
    .chain_err(|| &quot;Error deleting directory search content batch&quot;)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The query lives in its own &lt;code&gt;.sql&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;WITH expired AS (
    SELECT id
    FROM directory_search
    WHERE retrieved_at &amp;lt; NOW() - $1::interval
    LIMIT $2
),
deleted_batch AS (
    DELETE FROM directory_search
    WHERE id IN (
        SELECT id
        FROM expired
    )
    RETURNING id
)
SELECT COUNT(*)
FROM deleted_batch;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We lose compile-time SQL checking with this approach, but we gain direct access to the raw power of SQL’s semantics, and great syntax highlighting in your favorite editor.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;actix-web&lt;/code&gt; is powered by &lt;a href=&quot;https://github.com/tokio-rs/tokio&quot;&gt;&lt;code&gt;tokio&lt;/code&gt;&lt;/a&gt;, a fast event loop library that’s the cornerstone of Rust’s concurrency story . When starting an HTTP server, &lt;code&gt;actix-web&lt;/code&gt; spawns a number of workers equal to the number of logical cores on the server, each in its own thread, and each with its own &lt;code&gt;tokio&lt;/code&gt; reactor.&lt;/p&gt;
&lt;p&gt;HTTP handlers can be written in a variety of ways. We might write one that returns content synchronously:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn index(req: HttpRequest) -&amp;gt; Bytes {
    ...
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This will block the underlying &lt;code&gt;tokio&lt;/code&gt; reactor until it’s finished, which is appropriate in situations where no other blocking calls need to be made; for example, rendering a static view from memory, or responding to a health check.&lt;/p&gt;
&lt;p&gt;We can also write an HTTP handler that returns a boxed future. This allows us to chain together a series of asynchronous calls to ensure that the reactor’s never needlessly blocked.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn index(req: HttpRequest) -&amp;gt; Box&amp;lt;Future&amp;lt;Item=HttpResponse, Error=Error&amp;gt;&amp;gt; {
    ...
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Examples of this might be responding with a file that we’re reading from disk (blocking on I/O, albeit minimally), or waiting on a response from our database. While waiting on a future’s result, the underlying &lt;code&gt;tokio&lt;/code&gt; reactor will happily fulfill other requests.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://brandur.org/assets/rust-web/concurrency-model.svg&quot;&gt;&lt;img data-rjs=&quot;2&quot; src=&quot;https://brandur.org/assets/rust-web/concurrency-model.svg&quot; class=&quot;overflowing&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
An example of a concurrency model with actix-web.
&lt;h3 id=&quot;sync-actors&quot;&gt;&lt;a href=&quot;https://brandur.org/rust-web#sync-actors&quot;&gt;Synchronous actors&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Support for futures in Rust is widespread, but not universal. Notably, &lt;code&gt;diesel&lt;/code&gt; doesn’t support asynchronous operations, so all its operations will block. Using it from directly within an &lt;code&gt;actix-web&lt;/code&gt; HTTP handler would lock up the thread’s &lt;code&gt;tokio&lt;/code&gt; reactor, and prevent that worker from serving other requests until the operation finished.&lt;/p&gt;
&lt;p&gt;Luckily, &lt;code&gt;actix&lt;/code&gt; has a great solution for this problem in the form of &lt;em&gt;synchronous actors&lt;/em&gt;. These are actors that expect to run their workloads synchronously, and so each is assigned its own dedicated OS-level thread. The &lt;code&gt;SyncArbiter&lt;/code&gt; abstraction is provided to easily start a number of copies of one type of actor, each sharing a message queue so that it’s easy to send work to the set (referenced as &lt;code&gt;addr&lt;/code&gt; below):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;// Start 3 `DbExecutor` actors, each with its own database
// connection, and each in its own thread
let addr = SyncArbiter::start(3, || {
    DbExecutor(SqliteConnection::establish(&quot;test.db&quot;).unwrap())
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Although operations within a synchronous actor are blocking, other actors in the system like HTTP workers don’t need to wait for any of it to finish – they get a future back that represents the message result so that they can do other work.&lt;/p&gt;
&lt;p&gt;In my implementation, fast workloads like parsing parameters and rendering views is performed inside handlers, and synchronous actors are never invoked if they don’t need to be. When a response requires database operations, a message is dispatched to a synchronous actor, and the HTTP worker’s underlying &lt;code&gt;tokio&lt;/code&gt; reactor serves other traffic while waiting for the future to resolve. When it does, it renders an HTTP response with the result, and sends it back to the waiting client.&lt;/p&gt;
&lt;h3 id=&quot;connection-management&quot;&gt;&lt;a href=&quot;https://brandur.org/rust-web#connection-management&quot;&gt;Connection management&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At first glance, introducing synchronous actors into the system might seem like purely a disadvantage because they’re an upper bound on parallelism. However, this limit can also be an advantage. One of the first scaling problems you’re likely to run into with Postgres is its modest limits around the maximum number of allowed simultaneous connections. Even the biggest instances on Heroku or GCP (Google Cloud Platform) max out at 500 connections, and the smaller instances have limits that are &lt;em&gt;much&lt;/em&gt; lower (my small GCP database limits me to 25). Big applications with coarse connection management schemes (e.g., Rails, but also many others) tend to resort to solutions like &lt;a href=&quot;https://pgbouncer.github.io/&quot;&gt;PgBouncer&lt;/a&gt; to sidestep the problem.&lt;/p&gt;
&lt;p&gt;Specifying the number of synchronous actors by extension also implies the maximum number of connections that a service will use, which leads to perfect control over its connection usage.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://brandur.org/assets/rust-web/connection-management.svg&quot;&gt;&lt;img data-rjs=&quot;2&quot; src=&quot;https://brandur.org/assets/rust-web/connection-management.svg&quot; class=&quot;overflowing&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
Connections are held only when a synchronous actor needs one.
&lt;p&gt;I’ve written my synchronous actors to check out individual connections from a connection pool (&lt;a href=&quot;https://github.com/sfackler/r2d2&quot;&gt;&lt;code&gt;r2d2&lt;/code&gt;&lt;/a&gt;) only when starting work, and check them back in after they’re done. When the service is idle, starting up, or shutting down, it uses zero connections. Contrast this to many web frameworks where the convention is to open a database connection as soon as a worker starts up, and to keep it open as long as the worker is alive. That approach has a ~2x connection requirement for graceful restarts because all workers being phased in immediately establish a connection, even while all workers being phased out are still holding onto one.&lt;/p&gt;
&lt;h3 id=&quot;ergonomics&quot;&gt;&lt;a href=&quot;https://brandur.org/rust-web#ergonomics&quot;&gt;The ergonomic advantage of synchronous code&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Synchronous operations aren’t as fast as a purely asynchronous approach, but they have the benefit of ease of use. It’s nice that futures are fast, but getting them properly composed is time consuming, and the compiler errors they generate if you make a mistake are truly the stuff of nightmares, which leads to a lot of time spent debugging.&lt;/p&gt;
&lt;p&gt;Writing synchronous code is faster and easier, and I’m personally fine with slightly suboptimal runtime speed if it means I can implement more core domain logic, more quickly.&lt;/p&gt;
&lt;h3 id=&quot;speed&quot;&gt;&lt;a href=&quot;https://brandur.org/rust-web#speed&quot;&gt;Slow, but only relative to &quot;very, VERY fast&quot;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;That might sound disparaging of this model’s performance characteristics, but keep in mind that it’s only slow compared to a purely-asynchronous stack (i.e., futures everywhere). It’s still a conceptually sound concurrent model with real parallelism, and compared with almost any other framework and programming language, it’s still really, &lt;em&gt;really&lt;/em&gt; fast. I write Ruby in my day job, and compared to our thread-less model (normal for Ruby because the GIL constrains thread performance) using forking processes on a VM &lt;a href=&quot;https://brandur.org/ruby-memory&quot;&gt;without a compacting GC&lt;/a&gt;, we’re talking orders of magnitude better speed and memory efficiency, easily.&lt;/p&gt;
&lt;p&gt;At the end of the day, your database is going to be a bottleneck for parallelism, and the synchronous actor model supports about as much parallelism as we can expect to get from it, while also supporting maximum throughput for any actions that don’t need database access.&lt;/p&gt;

&lt;p&gt;Like any good Rust program, APIs almost everywhere throughout return the &lt;code&gt;Result&lt;/code&gt; type. Futures plumb through their own version of &lt;code&gt;Result&lt;/code&gt; containing either a successful result or an error.&lt;/p&gt;
&lt;p&gt;I’m using &lt;a href=&quot;https://github.com/rust-lang-nursery/error-chain&quot;&gt;error-chain&lt;/a&gt; to define my errors. Most are internal, but I’ve defined a certain group with the explicit purpose of being user facing:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;error_chain!{
    errors {
        //
        // User errors
        //

        BadRequest(message: String) {
            description(&quot;Bad request&quot;),
            display(&quot;Bad request: {}&quot;, message),
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When a failure should be surfaced to a user, I make sure to map it to one of my user error types:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;Params::build(log, &amp;amp;request).map_err(|e|
    ErrorKind::BadRequest(e.to_string()).into()
)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After waiting on a synchronous actor and after attempting to construct a successful HTTP response, I potentially handle a user error and render it. The implementation turns out to be quite elegant (note that in future composition, &lt;code&gt;then&lt;/code&gt; differs from &lt;code&gt;and_then&lt;/code&gt; in that it handles a success &lt;em&gt;or&lt;/em&gt; a failure by receiving a &lt;code&gt;Result&lt;/code&gt;, as opposed to &lt;code&gt;and_then&lt;/code&gt; which only chains onto a success):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let message = server::Message::new(&amp;amp;log, params);

// Send message to synchronous actor
sync_addr
    .send(message)
    .and_then(move |actor_response| {
        // Transform actor response to HTTP response
    }
    .then(|res: Result&amp;lt;HttpResponse&amp;gt;|
        server::transform_user_error(res, render_user_error)
    )
    .responder()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Errors not intended to be seen by the user get logged and &lt;code&gt;actix-web&lt;/code&gt; surfaces them as a &lt;code&gt;500 Internal server error&lt;/code&gt; (although I’ll likely add a custom renderer for those too at some point).&lt;/p&gt;
&lt;p&gt;Here’s &lt;code&gt;transform_user_error&lt;/code&gt;. A &lt;code&gt;render&lt;/code&gt; function is abstracted so that we can reuse this generically between an API that renders JSON responses, and a web server that renders HTML.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;pub fn transform_user_error&amp;lt;F&amp;gt;(res: Result&amp;lt;HttpResponse&amp;gt;, render: F) -&amp;gt; Result&amp;lt;HttpResponse&amp;gt;
where
    F: FnOnce(StatusCode, String) -&amp;gt; Result&amp;lt;HttpResponse&amp;gt;,
{
    match res {
        Err(e @ Error(ErrorKind::BadRequest(_), _)) =&amp;gt; {
            // `format!` activates the `Display` traits and shows our error's `display`
            // definition
            render(StatusCode::BAD_REQUEST, format!(&quot;{}&quot;, e))
        }
        r =&amp;gt; r,
    }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Like web frameworks across many languages, &lt;code&gt;actix-web&lt;/code&gt; supports middleware. Here’s a simple one that initializes a per-request logger and installs it into the request’s &lt;code&gt;extensions&lt;/code&gt; (a collection of request state that will live for as long as the request does):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;pub mod log_initializer {
    pub struct Middleware;

    pub struct Extension(pub Logger);

    impl&amp;lt;S: server::State&amp;gt; actix_web::middleware::Middleware&amp;lt;S&amp;gt; for Middleware {
        fn start(&amp;amp;self, req: &amp;amp;mut HttpRequest&amp;lt;S&amp;gt;) -&amp;gt; actix_web::Result&amp;lt;Started&amp;gt; {
            let log = req.state().log().clone();
            req.extensions().insert(Extension(log));
            Ok(Started::Done)
        }

        fn response(
            &amp;amp;self,
            _req: &amp;amp;mut HttpRequest&amp;lt;S&amp;gt;,
            resp: HttpResponse,
        ) -&amp;gt; actix_web::Result&amp;lt;Response&amp;gt; {
            Ok(Response::Done(resp))
        }
    }

    /// Shorthand for getting a usable `Logger` out of a request.
    pub fn log&amp;lt;S: server::State&amp;gt;(req: &amp;amp;mut HttpRequest&amp;lt;S&amp;gt;) -&amp;gt; Logger {
        req.extensions().get::&amp;lt;Extension&amp;gt;().unwrap().0.clone()
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;A nice feature is that middleware state is keyed to a &lt;em&gt;type&lt;/em&gt; instead of a string (like you might find with Rack in Ruby for example). This not only has the benefit of type checking at compile-time so you can’t mistype a key, but also gives middlewares the power to control their modularity. If we wanted to strongly encapsulate the middleware above we could remove the &lt;code&gt;pub&lt;/code&gt; from &lt;code&gt;Extension&lt;/code&gt; so that it becomes private. Any other modules that tried to access its logger would be prevented from doing so by visibility checks in the compiler.&lt;/p&gt;
&lt;h3 id=&quot;asynchrony&quot;&gt;&lt;a href=&quot;https://brandur.org/rust-web#asynchrony&quot;&gt;Asynchrony all the way down&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Like handlers, &lt;code&gt;actix-web&lt;/code&gt; middleware can be asynchronous by returning a future instead of a &lt;code&gt;Result&lt;/code&gt;. This would, for example, let us to implement a rate limiting middleware that made a call out to Redis in a way that doesn’t block the HTTP worker. Did I mention that &lt;code&gt;actix-web&lt;/code&gt; is pretty fast?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;actix-web&lt;/code&gt; documents a few recommendations for &lt;a href=&quot;https://actix.github.io/actix-web/guide/qs_8.html&quot;&gt;HTTP testing methodologies&lt;/a&gt;. I settled on a series of unit tests that use &lt;code&gt;TestServerBuilder&lt;/code&gt; to compose a minimal app containing a single target handler, and then execute a request against it. This is a nice compromise because despite tests being minimal, they nonetheless exercise an end-to-end slice of the HTTP stack, which makes them fast &lt;em&gt;and&lt;/em&gt; complete:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;#[test]
fn test_handler_graphql_get() {
    let bootstrap = TestBootstrap::new();
    let mut server = bootstrap.server_builder.start(|app| {
        app.middleware(middleware::log_initializer::Middleware)
            .handler(handler_graphql_get)
    });

    let req = server
        .client(
            Method::GET,
            format!(&quot;/?query={}&quot;, test_helpers::url_encode(b&quot;{podcast{id}}&quot;)).as_str(),
        )
        .finish()
        .unwrap();

    let resp = server.execute(req.send()).unwrap();

    assert_eq!(StatusCode::OK, resp.status());
    let value = test_helpers::read_body_json(resp);

    // The `json!` macro is really cool:
    assert_eq!(json!({&quot;data&quot;: {&quot;podcast&quot;: []}}), value);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I make heavy use of &lt;code&gt;serde_json&lt;/code&gt;’s (the standard Rust JSON encoding and decoding library) &lt;code&gt;json!&lt;/code&gt; macro, used on the last line in the code above. If you look closely, you’ll notice that the in-line JSON is not a string – &lt;code&gt;json!&lt;/code&gt; lets me write actual JSON notation right into my code that gets checked and converted to a valid Rust structure by the compiler. This is &lt;em&gt;by far&lt;/em&gt; the most elegant approach to testing HTTP JSON responses that I’ve seen across any programming language, ever.&lt;/p&gt;

&lt;p&gt;It’d be fair to say that I could’ve written an equivalent service in Ruby in a tenth of the time it took me to write this one in Rust. Some of that is Rust’s learning curve, but a lot of it isn’t – the language is succinct to write, but appeasing the compiler is often a long and frustrating process.&lt;/p&gt;
&lt;p&gt;That said, over and over I’ve experienced passing that final hurdle, running my program, and experiencing a Haskell-esque euphoria in seeing it work &lt;em&gt;exactly&lt;/em&gt; as I’d intended it to. Contrast that to an interpreted language where you get it running on your 15th try, and even then, the edge conditions are almost certainly still wrong. Rust also makes big changes possible – it’s not unusual for me to refactor a thousand lines at a time, and once again, have the program run perfectly afterwards. Anyone who’s seen a large program in an interpreted language at production-scale knows that you never deploy a sizable refactor to an important service except in miniscule chunks – anything else is too risky.&lt;/p&gt;
&lt;p&gt;Should you write your next web service in Rust? I don’t know yet, but we’re getting to the point now where you should at least consider it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://brandur.org/assets/rust-web/rust@2x.jpg&quot;&gt;&lt;img data-rjs=&quot;2&quot; src=&quot;https://brandur.org/assets/rust-web/rust.jpg&quot; class=&quot;overflowing&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
Your daily dose of tangentially related photography: Rust on a beam near Pier 28 in San Francisco.


&lt;div class=&quot;info&quot; readability=&quot;10.399590163934&quot;&gt;
&lt;div class=&quot;publishing-info-bottom&quot; readability=&quot;11.261538461538&quot;&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Touring a Fast, Safe, and Complete(ish) Web Service in Rust&lt;/strong&gt; was published on &lt;strong&gt;March 27, 2018&lt;/strong&gt; from .&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Find me on Twitter at &lt;strong&gt;&lt;a href=&quot;https://twitter.com/brandur&quot;&gt;@brandur&lt;/a&gt;&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Please post comments and discussion to &lt;strong&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=16689108&quot;&gt;Hacker News&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Did I make a mistake? Please consider &lt;a href=&quot;https://github.com/brandur/sorg/edit/master/content/articles/rust-web.md&quot;&gt;sending a pull request&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 27 Mar 2018 15:02:37 +0000</pubDate>
<dc:creator>henridf</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://brandur.org/rust-web</dc:identifier>
</item>
<item>
<title>Facebook Container Extension: Take control of how you’re being tracked</title>
<link>https://blog.mozilla.org/firefox/facebook-container-extension/</link>
<guid isPermaLink="true" >https://blog.mozilla.org/firefox/facebook-container-extension/</guid>
<description>&lt;p&gt;Our &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/multi-account-containers/&quot;&gt;Multi-Account Containers&lt;/a&gt; extension has been a game changer for many users, letting them manage various parts of their online life without intermingling their accounts. To help Firefox users have more control of their data on Facebook, we’ve created the &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/facebook-container/&quot;&gt;Facebook Container Extension&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter wp-image-756 size-full&quot; src=&quot;https://ffp4g1ylyit3jdyti1hqcvtb-wpengine.netdna-ssl.com/firefox/files/2018/03/FF58_Moz.org_FacebookContainerExtension_blog-header-v1-02.jpg&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;661&quot; srcset=&quot;https://blog.mozilla.org/firefox/files/2018/03/FF58_Moz.org_FacebookContainerExtension_blog-header-v1-02.jpg 1200w, https://blog.mozilla.org/firefox/files/2018/03/FF58_Moz.org_FacebookContainerExtension_blog-header-v1-02-300x165.jpg 300w, https://blog.mozilla.org/firefox/files/2018/03/FF58_Moz.org_FacebookContainerExtension_blog-header-v1-02-768x423.jpg 768w, https://blog.mozilla.org/firefox/files/2018/03/FF58_Moz.org_FacebookContainerExtension_blog-header-v1-02-600x330.jpg 600w, https://blog.mozilla.org/firefox/files/2018/03/FF58_Moz.org_FacebookContainerExtension_blog-header-v1-02-1000x551.jpg 1000w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This extension helps you control more of your web activity from Facebook by isolating your identity into a separate container. This makes it harder for Facebook to track your activity on other websites via third-party cookies.&lt;/p&gt;
&lt;p&gt;Rather than stop using a service you find valuable and miss out on those adorable photos of your nephew, we think you should have tools to limit what data others can collect about you. That includes us: Mozilla does not collect data from your use of the Facebook Container extension. We only know the number of times the extension is installed or removed.&lt;/p&gt;
&lt;p&gt;When you install this extension it will delete your Facebook cookies and log you out of Facebook. The next time you visit Facebook it will open in a new blue-colored browser tab (aka “container tab”). In that tab you can login to Facebook and use it like you normally would. If you click on a non-Facebook link or navigate to a non-Facebook website in the URL bar, these pages will load outside of the container.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter wp-image-754 size-full&quot; src=&quot;https://ffp4g1ylyit3jdyti1hqcvtb-wpengine.netdna-ssl.com/firefox/files/2018/03/no-bubble.png&quot; alt=&quot;&quot; width=&quot;1144&quot; height=&quot;858&quot; srcset=&quot;https://blog.mozilla.org/firefox/files/2018/03/no-bubble.png 1144w, https://blog.mozilla.org/firefox/files/2018/03/no-bubble-300x225.png 300w, https://blog.mozilla.org/firefox/files/2018/03/no-bubble-768x576.png 768w, https://blog.mozilla.org/firefox/files/2018/03/no-bubble-600x450.png 600w, https://blog.mozilla.org/firefox/files/2018/03/no-bubble-1000x750.png 1000w&quot; sizes=&quot;(max-width: 1144px) 100vw, 1144px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Should you click on any Facebook Share buttons on other browser tabs it will load them within the Facebook container. You should know that when you’re using these buttons information will be sent to Facebook about the website that you shared from.&lt;/p&gt;
&lt;p&gt;If you use your Facebook credentials to create an account or log in using your Facebook credentials, it may not work properly and you may not be able to login. Also, because you’re logged into Facebook in the container tab, embedded Facebook comments and Like buttons in tabs outside the Facebook container tab will not work. This prevents Facebook from associating information about your activity on websites outside of Facebook to your Facebook identity. So it may look different than what you are used to seeing.&lt;/p&gt;
&lt;p&gt;There’s a lot of value in your social data. It’s important to regularly review your privacy settings on all sites and applications that use it. The &lt;a href=&quot;https://www.eff.org/deeplinks/2018/03/how-change-your-facebook-settings-opt-out-platform-api-sharing&quot;&gt;EFF&lt;/a&gt; has useful advice on how to keep your data where you want it to be, under more of your control.&lt;/p&gt;
</description>
<pubDate>Tue, 27 Mar 2018 14:26:37 +0000</pubDate>
<dc:creator>sanatgersappa</dc:creator>
<og:url>https://blog.mozilla.org/firefox/facebook-container-extension</og:url>
<og:title>Facebook Container Extension: Take control of how you’re being tracked – The Firefox Frontier</og:title>
<og:description>The Facebook container extension helps you control more of your web activity from Facebook by isolating your identity into a separate container. This makes it harder for Facebook to track your activity on other websites via third-party cookies.</og:description>
<og:image>https://blog.mozilla.org/firefox/files/2018/03/FF58_Moz.org_FacebookContainerExtension_blog-header-v1-02.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.mozilla.org/firefox/facebook-container-extension/</dc:identifier>
</item>
<item>
<title>Waymo teams up with Jaguar to intro a new, premium self-driving car</title>
<link>https://techcrunch.com/2018/03/27/waymo-teams-up-with-jaguar-to-intro-a-new-premium-self-driving-car/</link>
<guid isPermaLink="true" >https://techcrunch.com/2018/03/27/waymo-teams-up-with-jaguar-to-intro-a-new-premium-self-driving-car/</guid>
<description>&lt;p&gt;This morning at Chelsea Piers in NYC, &lt;a href=&quot;https://techcrunch.com/tag/waymo/&quot;&gt;Waymo&lt;/a&gt; CEO John Krafcik announced a new model of car powered by &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://www.crunchbase.com/organization/google-s-self-driving-car-project/&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;google-s-self-driving-car-project&quot;&gt;Waymo’s&lt;/a&gt; self-driving technology. Dubbed the world’s first premium fully self-driving car, Waymo has partnered with Jaguar Land Rover to bring the Waymo-outfitted Jaguar I-PACE to the public.&lt;/p&gt;
&lt;p&gt;Waymo plans to outfit 20,000 units to be used for Waymo’s public self-driving service over the next few years, which will allow the service to offer 1 million rides per day.&lt;/p&gt;
&lt;p&gt;This is the sixth model in Waymo’s lineup, including a small car, an SUV, a firefly prototype, a minivan (the Pacifica we’re all familiar with) and a semi-truck for operations.&lt;/p&gt;
&lt;p&gt;“We want to build a self-driving car for every passenger and every trip,” said John Krafcik at the reveal.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;breakout alignnone size-full wp-image-1612592&quot; src=&quot;https://techcrunch.com/wp-content/uploads/2018/03/40bd860c-9e77-4f5a-b4d4-8c4cea14d293.jpg&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;680&quot;/&gt;&lt;/p&gt;
&lt;p&gt;He also said that the Jaguar Land Rover model also has a bigger battery, allowing the car to drive all day. Moreover, this partnership signals a move across the Atlantic for Waymo, expressing interest in bringing self-driving cars over to Europe.&lt;/p&gt;
&lt;p&gt;Waymo has already announced that Waymo would bring self-driving service to the public in 2018.&lt;/p&gt;
&lt;p&gt;As part of the deal with Jaguar, Waymo plans to have 20,000 units on the streets, starting in Phoenix with about 100 square mile area, roughly one-sixth of the Phoenix metropolitan area.&lt;/p&gt;
&lt;p&gt;Krafcik was extremely vague at the event when asked how many cities he’d like to see Waymo in in the next two years. “More,” he said simply.&lt;/p&gt;
&lt;p&gt;This comes at a time when self-driving tech is having a bit of a publicity crisis. One of Uber’s self-driving cars was recently involved in a &lt;a href=&quot;https://techcrunch.com/2018/03/19/uber-self-driving-test-car-involved-in-accident-resulting-in-pedestrian-death/&quot;&gt;fatal collision with a pedestrian&lt;/a&gt;, which may slow public adoption of the technology.&lt;/p&gt;
&lt;p&gt;In turn, Uber’s self-driving testing has been suspended in the state of Arizona, where many AV companies test their fleet.&lt;/p&gt;
&lt;p&gt;When asked about the accident at today’s press event, Krafcik fell back on Waymo’s &lt;a href=&quot;https://www.bloomberg.com/news/articles/2018-03-24/ceo-krafcik-says-waymo-tech-robust-enough-to-avoid-uber-crash&quot;&gt;comments&lt;/a&gt; from this weekend.&lt;/p&gt;
&lt;p&gt;“We made some comments over the weekend over the situation in Arizona, and those comments suffice for now,” said Krafcik. “Today, we’re talking about moving forward into the future with technology we’re very confident in, with the I-PACE, and integration of our driver with I-PACE is a safe benchmark for the world.”&lt;/p&gt;
&lt;p&gt;Earlier this year, Waymo placed an order for &lt;a href=&quot;https://techcrunch.com/2018/01/29/waymo-orders-thousands-of-pacificas-for-2018-self-driving-fleet-rollout/&quot;&gt;even more Chrysler Pacifica minivans&lt;/a&gt; from FCA to outfit its self-driving fleet. This is on top of the original 500 vehicles already supplied to Waymo, as the company begins to ramp up to its 2018 public launch.&lt;/p&gt;
&lt;p&gt;Moreover, these companies seem to be racing to launch public fleets first. GM’s Cruise fleet is supposed to launch in 2019, with Uber working to get their fleet out by mid-2019.&lt;/p&gt;
&lt;p&gt;This also comes on the heels of a long and gritty legal battle between Uber and Waymo over self-driving IP, which was &lt;a href=&quot;https://techcrunch.com/2018/02/09/uber-settles-lawsuit-with-waymo/&quot;&gt;settled in February&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Developing…&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 27 Mar 2018 14:26:19 +0000</pubDate>
<dc:creator>kaboro</dc:creator>
<og:title>Waymo teams up with Jaguar to intro a new, premium self-driving car</og:title>
<og:description>This morning at Chelsea Piers in NYC, Waymo CEO John Krafcik announced a new model of car powered by Waymo’s self-driving technology. Dubbed the world’s first premium fully self-driving car, Waymo has partnered with Jaguar Land Rover to bring the Waymo-outfitted Jaguar I-PACE to the pub…</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2018/03/d14dde32-2cd8-4bc9-a4c2-d40e062279ff.jpg?w=602</og:image>
<og:url>http://social.techcrunch.com/2018/03/27/waymo-teams-up-with-jaguar-to-intro-a-new-premium-self-driving-car/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2018/03/27/waymo-teams-up-with-jaguar-to-intro-a-new-premium-self-driving-car/</dc:identifier>
</item>
<item>
<title>Oracle Wins Revival of Billion-Dollar Case Against Google</title>
<link>https://www.bloomberg.com/news/articles/2018-03-27/oracle-wins-revival-of-billion-dollar-case-against-google</link>
<guid isPermaLink="true" >https://www.bloomberg.com/news/articles/2018-03-27/oracle-wins-revival-of-billion-dollar-case-against-google</guid>
<description>&lt;p&gt;Google could owe Oracle Corp. billions of dollars for using Oracle-owned Java programming code in its Android operating system on mobile devices, an appeals court said, as the years-long feud between the two software giants draws near a close.&lt;/p&gt;


&lt;p&gt;Google’s use of Java shortcuts to develop Android went too far and was a violation of Oracle’s copyrights, the U.S. Court of Appeals for the &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/quote/1001L:US&quot; title=&quot;Company Overview&quot; rel=&quot;nofollow noopener&quot;&gt;Federal Circuit&lt;/a&gt; ruled Tuesday. The case -- first filed in 2010 -- was remanded to a federal court in California to determine how much the &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/quote/GOOGL:US&quot; title=&quot;Company Overview&quot; rel=&quot;nofollow noopener&quot;&gt;Alphabet Inc.&lt;/a&gt; unit should pay. Oracle had been &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/news/articles/2016-03-31/google-objects-to-oracle-s-8-8-billion-claim-for-java-trial&quot; title=&quot;Google Objects to Oracle’s $8.8 Billion Claim for Java Trial&quot; target=&quot;_blank&quot;&gt;seeking&lt;/a&gt; $8.8 billion, though that number could grow. Google expressed disappointment and said it’s considering its next steps in the case.&lt;/p&gt;


&lt;p&gt;The &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/news/terminal/P1ME5J6TTDS0&quot; title=&quot;$9 Billion Oracle, Google Android Spat Awaits Appeal Ruling&quot; class=&quot;terminal-news-story&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;dispute&lt;/a&gt;, which could have far-reaching implications for the entire software industry, has divided Silicon Valley for years between those who develop the code that makes software steps function and those who develop software programs and say their “fair use” of the code is an exception to copyright law.&lt;/p&gt;



&lt;p&gt;“It’s a momentous decision on the issue of fair use,” lawyer Mark Schonfeld of Burns &amp;amp; Levinson in Boston, who’s been following the case and isn’t involved. “It is very, very important for the software industry. I think it’s going to go to the &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/quote/1000L:US&quot; title=&quot;Company Overview&quot; rel=&quot;nofollow noopener&quot;&gt;Supreme Court&lt;/a&gt; because the Federal Circuit has made a very controversial decision.”&lt;/p&gt;


&lt;h3&gt;Computer Instructions&lt;/h3&gt;
&lt;p&gt;At issue are pre-written directions known as application program interfaces, or APIs, which can work across different types of devices and provide the instructions for things like connecting to the internet or accessing certain types of files. By using the APIs, programmers don’t have to write new code from scratch to implement every function in their software or change it for every type of device.&lt;/p&gt;
&lt;p&gt;“The Federal Circuit’s opinion upholds fundamental principles of copyright law and makes clear that Google violated the law,” Oracle General Counsel Dorian Daley said in a &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/news/terminal/P69E0R3MMTC0&quot; title=&quot;Oracle Statement&quot; class=&quot;terminal-news-story&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;statement&lt;/a&gt;. “This decision protects creators and consumers from the unlawful abuse of their rights.”&lt;/p&gt;
&lt;p&gt;Google and its supporters contend that the ruling, if left to stand, would harm development of new software programs and lead to higher costs for consumers.&lt;/p&gt;
&lt;p&gt;“We are disappointed the court reversed the jury finding that Java is open and free for everyone,” Google said in a statement. “This type of ruling will make apps and online services more expensive for users.”&lt;/p&gt;
&lt;h3&gt;Limited Freedom&lt;/h3&gt;

&lt;p&gt;Oracle said its APIs are freely available to those who want to build applications for computers and mobile devices, but draws the line at anyone who wants to use them for a competing platform or to embed them in an electronic device.&lt;/p&gt;
&lt;p&gt;“The fact that Android is free of charge does not make Google’s use of the Java API packages noncommercial,” the three-judge Federal Circuit panel in Washington ruled, noting that Android had generated more than $42 billion in revenue from advertising. It also said that Google had not made any alteration of the copyrighted material.&lt;/p&gt;
&lt;p&gt;The damages are likely to be hotly contested, with Oracle wanting more than the $8.8 billion it sought at the trial, and Google arguing the value is minimal, said lawyer Ping Hu, who heads the intellectual property group at Mirick O’Connell in Boston. The could mean more public information on how Google profits off an operating system that it offers for free.&lt;/p&gt;
&lt;p&gt;The decision “is a major win for Oracle, but it’s not the end of the war,” he said.&lt;/p&gt;
&lt;h3&gt;Rush to Mobile&lt;/h3&gt;
&lt;aside class=&quot;inline-newsletter&quot; data-state=&quot;ready&quot;/&gt;&lt;p&gt;Oracle claims Google was in such a rush in the mid-2000s to create an operating system for mobile devices that the company used key parts of copyrighted Java technology without paying royalties. Google, which gets the bulk of its profit from selling advertisements connected to search results, faced an “existential threat” because its search wasn’t optimized for mobile devices, according to Oracle.&lt;/p&gt;
&lt;p&gt;Google countered that Oracle was just jealous because it did what Oracle could not -- develop an operating system for mobile devices that was free and wildly popular. Google said it used a minuscule percentage of Oracle’s code, only enough to enable programmers to write applications for Android in the Java language.&lt;/p&gt;
&lt;p&gt;A federal jury in California &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/news/articles/2016-05-26/google-beats-oracle-copyright-suit-wiping-away-9-billion-claim&quot; title=&quot;Google Beats Oracle on Copyright, Defeating $9 Billion Claim (2)&quot; target=&quot;_blank&quot;&gt;agreed&lt;/a&gt; with Google in 2016, saying Google’s actions were a “fair use” that was exempt from copyright law. Tuesday’s Federal Circuit opinion reverses that verdict.&lt;/p&gt;
&lt;p&gt;“There is nothing fair about taking a copyrighted work verbatim and using it for the same purpose and function as the original in a competing platform,” the appeals court ruled.&lt;/p&gt;
&lt;h3&gt;Next Steps&lt;/h3&gt;
&lt;p&gt;Google is likely to ask that either the three-judge panel reconsider its decision, or have the issue go before all active judges of the court. The losing party could then ask the Supreme Court to take the case, which Google supporters are calling for.&lt;/p&gt;
&lt;p&gt;The Supreme Court had earlier &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/politics/articles/2015-06-29/google-rejected-by-u-s-high-court-in-oracle-java-copying-case&quot; title=&quot;Google Rejected by High Court in Oracle Java Copying Case (2)&quot; target=&quot;_blank&quot;&gt;declined&lt;/a&gt; to review a closely watched 2014 &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/news/articles/2014-05-09/oracle-can-pursue-claims-google-copied-java-court-says&quot; title=&quot;Oracle Can Pursue Claim That Google Copied Java, Court Says (3)&quot; target=&quot;_blank&quot;&gt;decision&lt;/a&gt; in which the Federal Circuit said the APIs were entitled to copyright protection. That ruling, along with Tuesday’s decision, “run counter to decades of software industry practice,” according to Meredith Rose, policy counsel at Public Knowledge. The group submitted legal arguments supporting Google.&lt;/p&gt;
&lt;p&gt;It “could have devastating effects on the competitiveness, openness, and development of the technology industry,” Rose said in a &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.publicknowledge.org/press-release/public-knowledge-responds-to-federal-circuit-ruling-on-oracle-v.-google/&quot; title=&quot;Statement&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;statement&lt;/a&gt;. “This could lead to higher prices, fewer choices, and worse products for consumers.”&lt;/p&gt;


&lt;p&gt;Java was created by &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/quote/0578320D:US&quot; title=&quot;Company Overview&quot; rel=&quot;nofollow noopener&quot;&gt;Sun Microsystems Inc.&lt;/a&gt; in the 1990s, and some have accused Oracle of violating Sun’s pledge to ensure that Java is widely available. Oracle &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/news/terminal/KWXCF00D9L37&quot; title=&quot;McNealy Has ‘Few Regrets’ as Oracle Takes Over Sun (Update4)&quot; class=&quot;terminal-news-story&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;bought&lt;/a&gt; Sun in January 2010 for $7.4 billion and &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/news/articles/2010-08-13/oracle-says-google-s-android-operating-system-infringes-its-java-patents&quot; title=&quot;Oracle Says Google Android Violates Its Java Patents (Update2)&quot; target=&quot;_blank&quot;&gt;sued&lt;/a&gt; Google fewer than eight months later.&lt;/p&gt;
&lt;p&gt;Part of Google’s defense focused on the idea that Java was developed for desktop computers, while Android was created for phones and other mobile devices. Oracle &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/news/terminal/NRXEGC6TTDS4&quot; title=&quot;Oracle Seeks to Expand Android Lawsuit Claims Against Google (2)&quot; class=&quot;terminal-news-story&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;sought&lt;/a&gt; to extend the case to desktops, where Android is now available, but the trial judge said he wanted to keep the case narrowly focused.&lt;/p&gt;
&lt;p&gt;The case is &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/quote/JAVA:US&quot; title=&quot;Company Overview&quot; rel=&quot;nofollow noopener&quot;&gt;Oracle America Inc.&lt;/a&gt; v. &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/quote/GOOGL:US&quot; title=&quot;Company Overview&quot; rel=&quot;nofollow noopener&quot;&gt;Google Inc.&lt;/a&gt;, 17-1118, U.S. Court of Appeals for the Federal Circuit (Washington). The trial court case is Oracle America Inc. v. Google Inc., 10cv3561, U.S. District Court for the Northern District of California (San Francisco).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;— With assistance by Gerrit De Vynck, Nico Grant, and Mark Bergen&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 27 Mar 2018 14:11:04 +0000</pubDate>
<dc:creator>uptown</dc:creator>
<og:description>Google could owe Oracle Corp. billions of dollars for using Oracle-owned Java programming code in its Android operating system on mobile devices, an appeals court said, as the years-long feud between the two software giants draws near a close.</og:description>
<og:image>https://assets.bwbx.io/images/users/iqjWHBFdfxIU/iyX2YpCdifMI/v0/1200x800.jpg</og:image>
<og:title>Google Could Owe Oracle $8.8 Billion in Android Fight</og:title>
<og:type>article</og:type>
<og:url>https://www.bloomberg.com/news/articles/2018-03-27/oracle-wins-revival-of-billion-dollar-case-against-google</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/news/articles/2018-03-27/oracle-wins-revival-of-billion-dollar-case-against-google</dc:identifier>
</item>
</channel>
</rss>