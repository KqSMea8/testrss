<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>If you type the letter “i” and it autocorrects to an “A” with a symbol</title>
<link>https://support.apple.com/en-ca/ht208240</link>
<guid isPermaLink="true" >https://support.apple.com/en-ca/ht208240</guid>
<description>&lt;div&gt;
&lt;h2&gt;Try setting up Text Replacement for the letter &quot;i&quot;&lt;/h2&gt;
&lt;p&gt;Here’s what you can do to work around the issue until it’s fixed in a future software update:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Go to Settings &amp;gt; General &amp;gt; Keyboard &amp;gt; Text Replacement.&lt;/li&gt;
&lt;li&gt;Tap &lt;img alt=&quot;&quot; src=&quot;https://support.apple.com/library/content/dam/edam/applecare/images/en_US/il/ios10-plus-add-icon.png&quot; width=&quot;17&quot;/&gt;.&lt;/li&gt;
&lt;li&gt;For Phrase, type an upper-case &quot;I&quot;. For Shortcut, type a lower-case &quot;i.&quot;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 05 Nov 2017 01:01:13 +0000</pubDate>
<dc:creator>doxinho</dc:creator>
<og:url>https://support.apple.com/en-ca/HT208240</og:url>
<og:title>If you type the letter “i” and it autocorrects to an “A” with a symbol</og:title>
<og:description>If you updated your iPhone, iPad, or iPod touch to iOS 11.1 and find that when you type the letter “i” it autocorrects to the letter “A” with a symbol, learn what to do.</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://support.apple.com/en-ca/ht208240</dc:identifier>
</item>
<item>
<title>Alpha Go Zero: How and Why It Works</title>
<link>http://tim.hibal.org/blog/alpha-zero-how-and-why-it-works/</link>
<guid isPermaLink="true" >http://tim.hibal.org/blog/alpha-zero-how-and-why-it-works/</guid>
<description>&lt;p&gt;DeepMind's AlphaGo made waves when it became the first AI to beat a top human Go player in March of 2016. This version of AlphaGo - AlphaGo Lee - used a large set of Go games from the best players in the world during its training process. A new paper was released a few days detailing a new neural net---AlphaGo Zero---that does not need humans to show it how to play Go. Not only does it outperform all previous Go players, human or machine, it does so after only three days of training time. This article will explain how and why it works.&lt;/p&gt;
&lt;h3&gt;Monte Carlo Tree Search&lt;/h3&gt;
&lt;p&gt;The go-to algorithm for writing bots to play discrete, deterministic games with perfect information is Monte Carlo tree search (MCTS). A bot playing a game like Go, chess, or checkers can figure out what move it should make by trying them all, then checking all possible responses by the opponent, all possible moves after that, etc. For a game like Go the number of moves to try grows really fast.&lt;br/&gt;Monte Carlo tree search will selectively try moves based on how good it thinks they are, thereby focusing its effort on moves that are most likely to happen.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_279.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-326&quot; src=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_279.png&quot; alt=&quot;AlphaGoZero01&quot; width=&quot;1232&quot; height=&quot;223&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More technically, the algorithm works as follows.  The game-in-progress is in an initial state &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_8320d1005489da544f0244dd5ee9af63.gif&quot; class=&quot;tex&quot; alt=&quot;s_0&quot;/&gt;&lt;/span&gt;, and it is the bot's turn to play. The bot can choose from a set of actions&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_ad70146b431bea9ae74cf8385470c544.gif&quot; class=&quot;tex&quot; alt=&quot;\mathcal{A}&quot;/&gt;&lt;/span&gt;. Monte Carlo tree search begins with a tree consisting of a single node for&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_8320d1005489da544f0244dd5ee9af63.gif&quot; class=&quot;tex&quot; alt=&quot;s_0&quot;/&gt;&lt;/span&gt;. This node is &lt;em&gt;expanded &lt;/em&gt;by trying every action&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_eaf8ec4fdaa140ea320fddff77a7ff97.gif&quot; class=&quot;tex&quot; alt=&quot;a \in \mathcal{A}&quot;/&gt;&lt;/span&gt; and constructing a corresponding child node for each action. Below we show this expansion for a game of tic-tac-toe:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_280.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-327&quot; src=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_280.png&quot; alt=&quot;AlphaGoZero02&quot; width=&quot;908&quot; height=&quot;423&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The value of each new child node must then be determined. The game in the child node is &lt;em&gt;rolled out&lt;/em&gt; by randomly taking moves from the child state until a win, loss, or tie is reached. Wins are scored at &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_7015440590904d38e35615ff0672d21c.gif&quot; class=&quot;tex&quot; alt=&quot;+1&quot;/&gt;&lt;/span&gt;, losses at &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_6bb61e3b7bce0931da574d19d1d82c88.gif&quot; class=&quot;tex&quot; alt=&quot;-1&quot;/&gt;&lt;/span&gt;, and ties at &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_cfcd208495d565ef66e7dff9f98764da.gif&quot; class=&quot;tex&quot; alt=&quot;0&quot;/&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_281.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-334&quot; src=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_281.png&quot; alt=&quot;AlphaGoZero03&quot; width=&quot;1073&quot; height=&quot;220&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The random rollout for the first child given above estimates a value of &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_7015440590904d38e35615ff0672d21c.gif&quot; class=&quot;tex&quot; alt=&quot;+1&quot;/&gt;&lt;/span&gt;. This value may not represent optimal play-it can vary based on how the rollout progresses. One can run rollouts unintelligently, drawing moves uniformly at random. One can often do better by following a better-though still typically random-strategy, or by estimating the value of the state directly. More on that later.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_282.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-335&quot; src=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_282.png&quot; alt=&quot;AlphaGoZero04&quot; width=&quot;918&quot; height=&quot;485&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Above we show the expanded tree with approximate values for each child node. Note that we store two properties: the accumulated value &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_61e9c06ea9a85a5088a499df6458d276.gif&quot; class=&quot;tex&quot; alt=&quot;W&quot;/&gt;&lt;/span&gt; and the number of times rollouts have been run at or below that node, &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_8d9c307cb7f3c4a32822a51922d1ceaa.gif&quot; class=&quot;tex&quot; alt=&quot;N&quot;/&gt;&lt;/span&gt;. We have only visited each node once.&lt;/p&gt;
&lt;p&gt;The information from the child nodes is then propagated back up the tree by increasing the parent's value and visit count. Its accumulated value is then set to the total accumulated value of its children:&lt;a href=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_283.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-336&quot; src=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_283.png&quot; alt=&quot;AlphaGoZero05&quot; width=&quot;900&quot; height=&quot;578&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Monte Carlo tree search continues for multiple iterations consisting of selecting a node, expanding it, and propagating back up the new information. Expansion and propagation have already been covered.&lt;/p&gt;
&lt;p&gt;Monte Carlo tree search does not expand all leaf nodes, as that would be very expensive. Instead, the selection process chooses nodes that strike a balance between being lucrative-having high estimated values-and being relatively unexplored-having low visit counts.&lt;/p&gt;
&lt;p&gt;A leaf node is selected by traversing down the tree from the root node, always choosing the child &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_865c0c0b4ab0e063e5caa3387c1a8741.gif&quot; class=&quot;tex&quot; alt=&quot;i&quot;/&gt;&lt;/span&gt; with the highest upper confidence tree (UCT) score:&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_40ebd778ad825303298c96edbd9a2b2e.gif&quot; class=&quot;tex&quot; alt=&quot;U_i = \frac{W_i}{N_i} + c\sqrt{\frac{\ln N_p}{N_i}}&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;br/&gt;where &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_540bdf656419f2a308d7ad1571c664a0.gif&quot; class=&quot;tex&quot; alt=&quot;W_i&quot;/&gt;&lt;/span&gt; is the accumulated value of the &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_865c0c0b4ab0e063e5caa3387c1a8741.gif&quot; class=&quot;tex&quot; alt=&quot;i&quot;/&gt;&lt;/span&gt;th child, &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_173eda91467d59e92b43f2a1d21ee177.gif&quot; class=&quot;tex&quot; alt=&quot;N_i&quot;/&gt;&lt;/span&gt; is the visit count for &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_865c0c0b4ab0e063e5caa3387c1a8741.gif&quot; class=&quot;tex&quot; alt=&quot;i&quot;/&gt;&lt;/span&gt;th child, and &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_766b775dcac93fa1cf6f6b365212665f.gif&quot; class=&quot;tex&quot; alt=&quot;N_p&quot;/&gt;&lt;/span&gt; is the number of visit counts for the parent node. The parameter &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_b6dbf81b750e9317026b593887c8f097.gif&quot; class=&quot;tex&quot; alt=&quot;c \geq 0&quot;/&gt;&lt;/span&gt; controls the tradeoff between choosing lucrative nodes (low &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_4a8a08f09d37b73795649038408b5f33.gif&quot; class=&quot;tex&quot; alt=&quot;c&quot;/&gt;&lt;/span&gt;) and exploring nodes with low visit counts (high &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_4a8a08f09d37b73795649038408b5f33.gif&quot; class=&quot;tex&quot; alt=&quot;c&quot;/&gt;&lt;/span&gt;). It is often set empirically.
&lt;p&gt;The UCT scores (&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_4c614360da93c0a041b22e537de151eb.gif&quot; class=&quot;tex&quot; alt=&quot;U&quot;/&gt;&lt;/span&gt;'s) for the tic-tac-toe tree with &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_27071423b9a403c9ffa1895ef3fefb6e.gif&quot; class=&quot;tex&quot; alt=&quot;c=1&quot;/&gt;&lt;/span&gt; are:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_284.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-337&quot; src=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_284.png&quot; alt=&quot;AlphaGoZero06&quot; width=&quot;899&quot; height=&quot;613&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this case we pick the first node, &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_4a1a7a321a00f1e0c682049fec14f8ae.gif&quot; class=&quot;tex&quot; alt=&quot;s_{0,1}&quot;/&gt;&lt;/span&gt;. (In the event of a tie one can either randomly break the tie or just pick the first of the bet nodes.) That node is expanded and the values are propagated back up:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_285.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-338&quot; src=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_285.png&quot; alt=&quot;AlphaGoZero07&quot; width=&quot;1082&quot; height=&quot;862&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note that each accumulated value &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_61e9c06ea9a85a5088a499df6458d276.gif&quot; class=&quot;tex&quot; alt=&quot;W&quot;/&gt;&lt;/span&gt; reflects whether X's won or lost. During selection, we keep track of whether it is X's or O's turn to move, and flip the sign of &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_61e9c06ea9a85a5088a499df6458d276.gif&quot; class=&quot;tex&quot; alt=&quot;W&quot;/&gt;&lt;/span&gt; whenever it is O's turn.&lt;/p&gt;
&lt;p&gt;We continue to run iterations of Monte Carlo tree search until we run out of time. The tree is gradually expanded and we (hopefully) explore the possible moves, identifying the best move to take. The bot then actually makes a move in the original, real game by picking the first child with the highest number of visits. For example, if the top of our tree looks like:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_286.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-340&quot; src=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_286.png&quot; alt=&quot;AlphaGoZero08&quot; width=&quot;884&quot; height=&quot;584&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;then the bot would choose the first action and proceed to &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_4a1a7a321a00f1e0c682049fec14f8ae.gif&quot; class=&quot;tex&quot; alt=&quot;s_{0,1}&quot;/&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;Efficiency Through Expert Policies&lt;/h3&gt;
&lt;p&gt;Games like chess and Go have very large branching factors. In a given game state there are many possible actions to take, making it very difficult to adequately explore the future game states. As a result, there are an estimated &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_1d4a91a803764b03d455054fa829fcd6.gif&quot; class=&quot;tex&quot; alt=&quot;10^{47}&quot;/&gt;&lt;/span&gt; board states in chess, and Go played on a traditional &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_d676449ed5bf5ad19089b753f2bf9324.gif&quot; class=&quot;tex&quot; alt=&quot;19 \times 19&quot;/&gt;&lt;/span&gt; board has around &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_df5777c0d368670abf08782217505ba7.gif&quot; class=&quot;tex&quot; alt=&quot;10^{170}&quot;/&gt;&lt;/span&gt; (Tic-tac-toe only has &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_23712318a400454a2c049f165106d985.gif&quot; class=&quot;tex&quot; alt=&quot;5478&quot;/&gt;&lt;/span&gt; states).&lt;/p&gt;
&lt;p&gt;Move evaluation with vanilla Monte Carlo tree search just isn't efficient enough. We need a way to further focus our attention to worthwhile moves.&lt;/p&gt;
&lt;p&gt;Suppose we have an &lt;em&gt;expert policy&lt;/em&gt; &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_4f08e3dba63dc6d40b22952c7a9dac6d.gif&quot; class=&quot;tex&quot; alt=&quot;\pi&quot;/&gt;&lt;/span&gt; that, for a given state &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_03c7c0ace395d80182db07ae2c30f034.gif&quot; class=&quot;tex&quot; alt=&quot;s&quot;/&gt;&lt;/span&gt;, tells us how likely an expert-level player is to make each possible action. For the tic-tac-toe example, this might look like:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_287.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-341&quot; src=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_287.png&quot; alt=&quot;AlphaGoZero09&quot; width=&quot;884&quot; height=&quot;539&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;where each &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_8cd4d4be01bd8f030b60a1660d20d142.gif&quot; class=&quot;tex&quot; alt=&quot;P_i = \pi(a_i \mid s_0)&quot;/&gt;&lt;/span&gt; is the probability of choosing the &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_865c0c0b4ab0e063e5caa3387c1a8741.gif&quot; class=&quot;tex&quot; alt=&quot;i&quot;/&gt;&lt;/span&gt;th action &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_2aecb1dc57e87620a373d19b0a889efb.gif&quot; class=&quot;tex&quot; alt=&quot;a_i&quot;/&gt;&lt;/span&gt; given the root state &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_8320d1005489da544f0244dd5ee9af63.gif&quot; class=&quot;tex&quot; alt=&quot;s_0&quot;/&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;If the expert policy is really good then we can produce a strong bot by directly drawing our next action according to the probabilities produces by &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_4f08e3dba63dc6d40b22952c7a9dac6d.gif&quot; class=&quot;tex&quot; alt=&quot;\pi&quot;/&gt;&lt;/span&gt;, or better yet, by taking the move with the highest probability. Unfortunately, getting an expert policy is difficult, and verifying that one's policy is optimal is difficult as well.&lt;/p&gt;
&lt;p&gt;Fortunately, one can improve on a policy by using a modified form of Monte Carlo tree search. This version will also store the probability of each node according to the policy, and this probability is used to adjust the node's score during selection. The probabilistic upper confidence tree score used by DeepMind is:&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_4bfa8a6e66f4d0333e7daf59c6dd3dbb.gif&quot; class=&quot;tex&quot; alt=&quot;U_i = \frac{W_i}{N_i} + c P_i\sqrt{\frac{\ln N_p}{1 + N_i}}&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;As before, the score trades off between nodes that consistently produce high scores and nodes that are unexplored. Now, node exploration is guided by the expert policy, biasing exploration towards moves the expert policy considers likely. If the expert policy truly is good, then Monte Carlo tree search efficiently focuses on good evolutions of the game state. If the expert policy is poor, then Monte Carlo tree search may focus on bad evolutions of the game state. Either way, in the limit as the number of samples gets large, the value of a node is dominated by the win/loss ratio &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_8c771be418fd24a81d1d17a071095383.gif&quot; class=&quot;tex&quot; alt=&quot;W_i/N_i&quot;/&gt;&lt;/span&gt;, as before.&lt;/p&gt;
&lt;h3&gt;Efficiency Through Value Approximation&lt;/h3&gt;
&lt;p&gt;A second form of efficiency can be achieved by avoiding expensive and potentially inaccurate random rollouts. One option is to use the expert policy from the previous section to guide the random rollout. If the policy is good, then the rollout should reflect more realistic, expert-level game progressions and thus more reliably estimate a state's value.&lt;/p&gt;
&lt;p&gt;A second option is to avoid rollouts altogether, and directly approximate the value of a state with a value approximator function &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_62c5b1b44f9852ea78f1eca562b94387.gif&quot; class=&quot;tex&quot; alt=&quot;\hat{W}(x)&quot;/&gt;&lt;/span&gt;. This function takes a state and directly computes a value in &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_d060b17b29e0dae91a1cac23ea62281a.gif&quot; class=&quot;tex&quot; alt=&quot;[-1,1]&quot;/&gt;&lt;/span&gt;, without conducting rollouts. Clearly, if &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_3ef3be39c0ce6db13e25b74b1c003dd1.gif&quot; class=&quot;tex&quot; alt=&quot;\hat{W}&quot;/&gt;&lt;/span&gt; is a good approximation of the true value, but can be executed faster than a rollout, then execution time can be saved without sacrificing performance.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_288.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-342&quot; src=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_288.png&quot; alt=&quot;AlphaGoZero10&quot; width=&quot;206&quot; height=&quot;214&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Value approximation can be used in tandem with an expert policy to speed up Monte Carlo tree search. A serious concern remains-how does one obtain an expert policy and a value function? Does an algorithm exist for training the expert policy and value function?&lt;/p&gt;
&lt;h3&gt;The Alpha Zero Neural Net&lt;/h3&gt;
&lt;p&gt;The Alpha Zero algorithm produces better and better expert policies and value functions over time by playing games against itself with accelerated Monte Carlo tree search. The expert policy &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_4f08e3dba63dc6d40b22952c7a9dac6d.gif&quot; class=&quot;tex&quot; alt=&quot;\pi&quot;/&gt;&lt;/span&gt; and the approximate value function &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_3ef3be39c0ce6db13e25b74b1c003dd1.gif&quot; class=&quot;tex&quot; alt=&quot;\hat{W}&quot;/&gt;&lt;/span&gt; are both represented by deep neural networks. In fact, to increase efficiency, Alpha Zero uses one neural network &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_8fa14cdd754f91cc6554c9e71929cce7.gif&quot; class=&quot;tex&quot; alt=&quot;f&quot;/&gt;&lt;/span&gt; that takes in the game state and produces both the probabilities over the next move and the approximate state value. (Technically, it takes in the previous eight game states and an indicator telling it whose turn it is.)&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_fa6d0507e25db8659672e83f5d2bceee.gif&quot; class=&quot;tex&quot; alt=&quot;f(s) \rightarrow [\boldsymbol{\mathbf{p}}, W]&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Leaves in the search tree are expanded by evaluating them with the neural network. Each child is initialized with &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_ea15e6b8b6bc7a151e69645fe1c1095e.gif&quot; class=&quot;tex&quot; alt=&quot;N = 0&quot;/&gt;&lt;/span&gt;, &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_302b9e6f697eb352475fa548227f04dd.gif&quot; class=&quot;tex&quot; alt=&quot;W = 0&quot;/&gt;&lt;/span&gt;, and with &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_44c29edb103a2872f519ad0c9a0fdaaa.gif&quot; class=&quot;tex&quot; alt=&quot;P&quot;/&gt;&lt;/span&gt; corresponding to the prediction from the network. The value of the expanded node is set to the predicted value and this value is then backed up the tree.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_289.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-343&quot; src=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_289.png&quot; alt=&quot;AlphaGoZero11&quot; width=&quot;1091&quot; height=&quot;656&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Selection and backup are unchanged. Simply put, during backup a parent's visit counts are incremented and its value is increased according to &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_61e9c06ea9a85a5088a499df6458d276.gif&quot; class=&quot;tex&quot; alt=&quot;W&quot;/&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The search tree following another selection, expansion, and backup step is:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_290.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-344&quot; src=&quot;http://tim.hibal.org/blog/wp-content/uploads/2017/11/Selection_290.png&quot; alt=&quot;AlphaGoZero12&quot; width=&quot;1042&quot; height=&quot;972&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The core idea of the Alpha Zero algorithm is that the predictions of the neural network can be improved, and the play generated by Monte Carlo tree search can be used to provide the training data. The policy portion of the neural network is improved by training the predicted probabilities &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_d9cb06675a8729d9045b594aa1f06d99.gif&quot; class=&quot;tex&quot; alt=&quot;\boldsymbol{\mathbf{p}}&quot;/&gt;&lt;/span&gt; for &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_8320d1005489da544f0244dd5ee9af63.gif&quot; class=&quot;tex&quot; alt=&quot;s_0&quot;/&gt;&lt;/span&gt; to match the improved probability &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_4ca25af2a824eac2ecc195483474c11c.gif&quot; class=&quot;tex&quot; alt=&quot;{\boldsymbol{\mathbf{\pi}}}&quot;/&gt;&lt;/span&gt; obtained from running Monte Carlo tree on &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_8320d1005489da544f0244dd5ee9af63.gif&quot; class=&quot;tex&quot; alt=&quot;s_0&quot;/&gt;&lt;/span&gt;. After running Monte Carlo tree search, the improved policy prediction is:&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_4119b84ff9bfd4075dc9f6dc81297ab3.gif&quot; class=&quot;tex&quot; alt=&quot;\pi_i = N_i^{1/\tau}&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;br/&gt;for a constant &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_a6f317b268ae825d94f832f970af607c.gif&quot; class=&quot;tex&quot; alt=&quot;\tau&quot;/&gt;&lt;/span&gt;.&lt;br/&gt;Values of &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_a6f317b268ae825d94f832f970af607c.gif&quot; class=&quot;tex&quot; alt=&quot;\tau&quot;/&gt;&lt;/span&gt; close to zero produce policies that choose the best move according to the Monte Carlo tree search evaluation.
&lt;p&gt;The value portion of the neural network is improved by training the predicted value to match the eventual win/loss/tie result of the game, &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_21c2e59531c8710156d34a3c30ac81d5.gif&quot; class=&quot;tex&quot; alt=&quot;Z&quot;/&gt;&lt;/span&gt;. Their loss function is:&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_11a3da921ad07da08d32bf89948e3f5e.gif&quot; class=&quot;tex&quot; alt=&quot;(W - Z)^2 + {\boldsymbol{\mathbf{\pi}}}^\top \ln\boldsymbol{\mathbf{p}} + \lambda \|\boldsymbol{\mathbf{\theta}}\|_2^2&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;br/&gt;where &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_5a7be5bbd5e56478a802b48ef376b9c6.gif&quot; class=&quot;tex&quot; alt=&quot;(W - Z)^2&quot;/&gt;&lt;/span&gt; is the value loss, &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_c9e01f0acf0156141afab72876c4b9fc.gif&quot; class=&quot;tex&quot; alt=&quot;\pi^\top \ln\boldsymbol{\mathbf{p}}&quot;/&gt;&lt;/span&gt; is the policy loss, and &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_9b77a081393ddce18178cabe3ff2f4fc.gif&quot; class=&quot;tex&quot; alt=&quot;\lambda \|\theta\|_2^2&quot;/&gt;&lt;/span&gt; is an extra regularization term with parameter &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_432b4cfb979f14a140b7205d6bc5dc56.gif&quot; class=&quot;tex&quot; alt=&quot;\lambda \geq 0&quot;/&gt;&lt;/span&gt; and &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_bf1635a14c502e61611a45cd1909b25e.gif&quot; class=&quot;tex&quot; alt=&quot;\boldsymbol{\mathbf{\theta}}&quot;/&gt;&lt;/span&gt; represents the parameters in the neural network.
&lt;p&gt;Training is done entirely in self-play. One stats with a randomly initialized set of neural network parameters &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_bf1635a14c502e61611a45cd1909b25e.gif&quot; class=&quot;tex&quot; alt=&quot;\boldsymbol{\mathbf{\theta}}&quot;/&gt;&lt;/span&gt;. This neural network is then used in multiple games in which it plays itself. In each of these games, for each move, Monte Carlo tree search is used to calculate &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_4f08e3dba63dc6d40b22952c7a9dac6d.gif&quot; class=&quot;tex&quot; alt=&quot;\pi&quot;/&gt;&lt;/span&gt;. The final outcome of each game determines that game's value for &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_21c2e59531c8710156d34a3c30ac81d5.gif&quot; class=&quot;tex&quot; alt=&quot;Z&quot;/&gt;&lt;/span&gt;. The parameters &lt;span class=&quot;MathJax_Preview&quot;&gt;&lt;img src=&quot;http://tim.hibal.org/blog/wp-content/plugins/latex/cache/tex_bf1635a14c502e61611a45cd1909b25e.gif&quot; class=&quot;tex&quot; alt=&quot;\boldsymbol{\mathbf{\theta}}&quot;/&gt;&lt;/span&gt; are then improved by using gradient descent (Or any of the more sophisticated accelerated descent methods-Alpha Zero used stochastic gradient descent with momentum and learning rate annealing.) on the loss function for a random selection of states played.&lt;/p&gt;
&lt;h3&gt;Closing Comments&lt;/h3&gt;
&lt;p&gt;And that's it. The folks at DeepMind contributed a clean and stable learning algorithm that trains game-playing agents efficiently using only data from self-play. While the current Zero algorithm only works for discrete games, it will be interesting whether it will be extended to MDPs or their partially observable counterparts in the future.&lt;/p&gt;
&lt;p&gt;It is interesting to see how quickly the field of AI is progressing. Those who claim we will be able to see the robot overlords coming in time should take heed - these AI's will only be human-level for a brief instant before blasting past us into superhuman territories, never to look back.&lt;/p&gt;
</description>
<pubDate>Sat, 04 Nov 2017 23:15:28 +0000</pubDate>
<dc:creator>Mageek</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://tim.hibal.org/blog/alpha-zero-how-and-why-it-works/</dc:identifier>
</item>
<item>
<title>Fake WhatsApp update from “WhatsApp Inc.” with Unicode whitespace: 1M downloads</title>
<link>https://twitter.com/virqdroid/status/926437790140772362</link>
<guid isPermaLink="true" >https://twitter.com/virqdroid/status/926437790140772362</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://twitter.com/virqdroid/status/926437790140772362&quot;&gt;https://twitter.com/virqdroid/status/926437790140772362&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=15626819&quot;&gt;https://news.ycombinator.com/item?id=15626819&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 460&lt;/p&gt;&lt;p&gt;# Comments: 180&lt;/p&gt;</description>
<pubDate>Sat, 04 Nov 2017 20:44:02 +0000</pubDate>
<dc:creator>jakub_g</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/virqdroid/status/926437790140772362</dc:identifier>
</item>
<item>
<title>What is backpropagation and what is it doing? [video]</title>
<link>https://www.youtube.com/watch?v=Ilg3gGewQ5U</link>
<guid isPermaLink="true" >https://www.youtube.com/watch?v=Ilg3gGewQ5U</guid>
<description>&lt;p id=&quot;eow-description&quot; class=&quot;&quot;&gt;What's actually happening to a neural network as it learns?&lt;/p&gt;&lt;p&gt;Training data generation + T-shirt at &lt;a href=&quot;https://www.youtube.com/redirect?q=http%3A%2F%2F3b1b.co%2Fcrowdflower&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; class=&quot;yt-uix-sessionlink&quot; data-sessionlink=&quot;itct=CDIQ6TgYACITCOm3pZjnp9cCFYzrfgodygIHRyj4HUiVh8G9hvCNrCI&quot; data-target-new-window=&quot;True&quot; data-url=&quot;/redirect?q=http%3A%2F%2F3b1b.co%2Fcrowdflower&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://3b1b.co/crowdflower&lt;/a&gt;&lt;br/&gt;Crowdflower does some cool work and addresses a meaningful need in machine learning, so I was pretty excited that they agreed to sponsor this video.&lt;/p&gt;&lt;p&gt;Find the full playlist at &lt;a href=&quot;https://www.youtube.com/redirect?q=http%3A%2F%2F3b1b.co%2Fneural-networks&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; class=&quot;yt-uix-sessionlink&quot; data-sessionlink=&quot;itct=CDIQ6TgYACITCOm3pZjnp9cCFYzrfgodygIHRyj4HUiVh8G9hvCNrCI&quot; data-target-new-window=&quot;True&quot; data-url=&quot;/redirect?q=http%3A%2F%2F3b1b.co%2Fneural-networks&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://3b1b.co/neural-networks&lt;/a&gt;&lt;br/&gt;The following video is sort of an appendix to this one. The main goal with the follow-on video is to show the connection between the visual walkthrough here, and the representation of these &quot;nudges&quot; in terms of partial derivatives that you will find when reading about backpropagation in other resources, like Michael Nielsen's book or Chis Olah's blog.&lt;/p&gt;&lt;p&gt;Thanks to everyone supporting on Patreon.&lt;br/&gt;&lt;a href=&quot;https://www.youtube.com/redirect?q=http%3A%2F%2F3b1b.co%2Fnn3-thanks&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; class=&quot;yt-uix-sessionlink&quot; data-sessionlink=&quot;itct=CDIQ6TgYACITCOm3pZjnp9cCFYzrfgodygIHRyj4HUiVh8G9hvCNrCI&quot; data-target-new-window=&quot;True&quot; data-url=&quot;/redirect?q=http%3A%2F%2F3b1b.co%2Fnn3-thanks&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://3b1b.co/nn3-thanks&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.youtube.com/redirect?q=http%3A%2F%2F3b1b.co%2Fsupport&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; class=&quot;yt-uix-sessionlink&quot; data-sessionlink=&quot;itct=CDIQ6TgYACITCOm3pZjnp9cCFYzrfgodygIHRyj4HUiVh8G9hvCNrCI&quot; data-target-new-window=&quot;True&quot; data-url=&quot;/redirect?q=http%3A%2F%2F3b1b.co%2Fsupport&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://3b1b.co/support&lt;/a&gt;&lt;/p&gt;&lt;p&gt;For more on backpropagation:&lt;br/&gt;&lt;a href=&quot;https://www.youtube.com/redirect?q=http%3A%2F%2Fneuralnetworksanddeeplearning.com%2Fchap2.html&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; class=&quot;yt-uix-sessionlink&quot; data-sessionlink=&quot;itct=CDIQ6TgYACITCOm3pZjnp9cCFYzrfgodygIHRyj4HUiVh8G9hvCNrCI&quot; data-target-new-window=&quot;True&quot; data-url=&quot;/redirect?q=http%3A%2F%2Fneuralnetworksanddeeplearning.com%2Fchap2.html&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://neuralnetworksanddeeplearning....&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.youtube.com/redirect?q=https%3A%2F%2Fgithub.com%2Fmnielsen%2Fneural-networks-and-deep-learning&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; class=&quot;yt-uix-sessionlink&quot; data-sessionlink=&quot;itct=CDIQ6TgYACITCOm3pZjnp9cCFYzrfgodygIHRyj4HUiVh8G9hvCNrCI&quot; data-target-new-window=&quot;True&quot; data-url=&quot;/redirect?q=https%3A%2F%2Fgithub.com%2Fmnielsen%2Fneural-networks-and-deep-learning&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://github.com/mnielsen/neural-ne...&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.youtube.com/redirect?q=http%3A%2F%2Fcolah.github.io%2Fposts%2F2015-08-Backprop%2F&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; class=&quot;yt-uix-sessionlink&quot; data-sessionlink=&quot;itct=CDIQ6TgYACITCOm3pZjnp9cCFYzrfgodygIHRyj4HUiVh8G9hvCNrCI&quot; data-target-new-window=&quot;True&quot; data-url=&quot;/redirect?q=http%3A%2F%2Fcolah.github.io%2Fposts%2F2015-08-Backprop%2F&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://colah.github.io/posts/2015-08-...&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Music by Vincent Rubinetti: &lt;a href=&quot;https://www.youtube.com/redirect?q=https%3A%2F%2Fsoundcloud.com%2Fvincerubinetti%2F&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; class=&quot;yt-uix-sessionlink&quot; data-sessionlink=&quot;itct=CDIQ6TgYACITCOm3pZjnp9cCFYzrfgodygIHRyj4HUiVh8G9hvCNrCI&quot; data-target-new-window=&quot;True&quot; data-url=&quot;/redirect?q=https%3A%2F%2Fsoundcloud.com%2Fvincerubinetti%2F&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://soundcloud.com/vincerubinetti/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;------------------&lt;/p&gt;&lt;p&gt;3blue1brown is a channel about animating math, in all senses of the word animate. And you know the drill with YouTube, if you want to stay posted on new videos, subscribe, and click the bell to receive notifications (if you're into that).&lt;/p&gt;&lt;p&gt;If you are new to this channel and want to see more, a good place to start is this playlist: &lt;a href=&quot;https://www.youtube.com/redirect?q=http%3A%2F%2F3b1b.co%2Frecommended&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; class=&quot;yt-uix-sessionlink&quot; data-sessionlink=&quot;itct=CDIQ6TgYACITCOm3pZjnp9cCFYzrfgodygIHRyj4HUiVh8G9hvCNrCI&quot; data-target-new-window=&quot;True&quot; data-url=&quot;/redirect?q=http%3A%2F%2F3b1b.co%2Frecommended&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://3b1b.co/recommended&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Various social media stuffs:&lt;br/&gt;Website: &lt;a href=&quot;https://www.youtube.com/redirect?q=https%3A%2F%2Fwww.3blue1brown.com&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; class=&quot;yt-uix-sessionlink&quot; data-sessionlink=&quot;itct=CDIQ6TgYACITCOm3pZjnp9cCFYzrfgodygIHRyj4HUiVh8G9hvCNrCI&quot; data-target-new-window=&quot;True&quot; data-url=&quot;/redirect?q=https%3A%2F%2Fwww.3blue1brown.com&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://www.3blue1brown.com&lt;/a&gt;&lt;br/&gt;Twitter: &lt;a href=&quot;https://www.youtube.com/redirect?q=https%3A%2F%2Ftwitter.com%2F3Blue1Brown&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; class=&quot;yt-uix-sessionlink&quot; data-sessionlink=&quot;itct=CDIQ6TgYACITCOm3pZjnp9cCFYzrfgodygIHRyj4HUiVh8G9hvCNrCI&quot; data-target-new-window=&quot;True&quot; data-url=&quot;/redirect?q=https%3A%2F%2Ftwitter.com%2F3Blue1Brown&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://twitter.com/3Blue1Brown&lt;/a&gt;&lt;br/&gt;Patreon: &lt;a href=&quot;https://www.youtube.com/redirect?q=https%3A%2F%2Fpatreon.com%2F3blue1brown&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; class=&quot;yt-uix-sessionlink&quot; data-sessionlink=&quot;itct=CDIQ6TgYACITCOm3pZjnp9cCFYzrfgodygIHRyj4HUiVh8G9hvCNrCI&quot; data-target-new-window=&quot;True&quot; data-url=&quot;/redirect?q=https%3A%2F%2Fpatreon.com%2F3blue1brown&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://patreon.com/3blue1brown&lt;/a&gt;&lt;br/&gt;Facebook: &lt;a href=&quot;https://www.youtube.com/redirect?q=https%3A%2F%2Fwww.facebook.com%2F3blue1brown&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; class=&quot;yt-uix-sessionlink&quot; data-sessionlink=&quot;itct=CDIQ6TgYACITCOm3pZjnp9cCFYzrfgodygIHRyj4HUiVh8G9hvCNrCI&quot; data-target-new-window=&quot;True&quot; data-url=&quot;/redirect?q=https%3A%2F%2Fwww.facebook.com%2F3blue1brown&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://www.facebook.com/3blue1brown&lt;/a&gt;&lt;br/&gt;Reddit: &lt;a href=&quot;https://www.youtube.com/redirect?q=https%3A%2F%2Fwww.reddit.com%2Fr%2F3Blue1Brown&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; class=&quot;yt-uix-sessionlink&quot; data-sessionlink=&quot;itct=CDIQ6TgYACITCOm3pZjnp9cCFYzrfgodygIHRyj4HUiVh8G9hvCNrCI&quot; data-target-new-window=&quot;True&quot; data-url=&quot;/redirect?q=https%3A%2F%2Fwww.reddit.com%2Fr%2F3Blue1Brown&amp;amp;v=Ilg3gGewQ5U&amp;amp;event=video_description&amp;amp;redir_token=WcC2FWYuzA5D3kNamdjVZNnFZCZ8MTUwOTk4NDA4M0AxNTA5ODk3Njgz&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://www.reddit.com/r/3Blue1Brown&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 04 Nov 2017 15:06:05 +0000</pubDate>
<dc:creator>adamnemecek</dc:creator>
<og:url>https://www.youtube.com/watch?v=Ilg3gGewQ5U</og:url>
<og:title>What is backpropagation and what is it actually doing? | Deep learning, chapter 3 - YouTube</og:title>
<og:description>What's actually happening to a neural network as it learns? Training data generation + T-shirt at http://3b1b.co/crowdflower Crowdflower does some cool work...</og:description>
<og:image>https://i.ytimg.com/vi/Ilg3gGewQ5U/maxresdefault.jpg</og:image>
<og:type>video</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.youtube.com/watch?v=Ilg3gGewQ5U</dc:identifier>
</item>
<item>
<title>How to Build Your Own Blockchain Part 3 – Writing Nodes That Mine and Talk</title>
<link>https://bigishdata.com/2017/11/02/build-your-own-blockchain-part-3-writing-nodes-that-mine/</link>
<guid isPermaLink="true" >https://bigishdata.com/2017/11/02/build-your-own-blockchain-part-3-writing-nodes-that-mine/</guid>
<description>&lt;p&gt;Hello all and welcome to Part 3 of building the JackBlockChain — JBC. Quick past intro, in &lt;a href=&quot;https://bigishdata.com/2017/10/17/write-your-own-blockchain-part-1-creating-storing-syncing-displaying-mining-and-proving-work/&quot;&gt;Part 1&lt;/a&gt; I coded and went over the top level math and requirements for a single node to mine its own blockchain; I create new blocks that have the valid information, save them to a folder, and then start mining a new block. &lt;a href=&quot;https://bigishdata.com/2017/10/27/build-your-own-blockchain-part-2-syncing-chains-from-different-nodes/&quot;&gt;Part 2&lt;/a&gt; covered having multiple nodes and them having the ability to sync. If node 1 was doing the mining on its own and node 2 wanted to grab node 1’s blockchain, it can now do so.&lt;/p&gt;
&lt;p&gt;For Part 3, read the TL;DR right below to see what we got going for us. And then read the rest of the post to get a (hopefully) great sense of how this happened.&lt;/p&gt;
&lt;h3&gt;Other Posts in This Series&lt;/h3&gt;
&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;Nodes will compete to see who gets credit for mining a block. It’s a race! To do this, we’re adjusting &lt;code&gt;mine.py&lt;/code&gt; to check if we have a valid block by only checking a section of nonce values rather than all the nonces until a match. Then APScheduler will handle running the mining jobs with the different nonce ranges. We shift the mining to the background if we want &lt;code&gt;node.py&lt;/code&gt; to mine as well as being a Flask web service. By the end, we can have different nodes that are competing for first mining and broadcasting their mined blocks!&lt;/p&gt;
&lt;p&gt;Before we start, &lt;a href=&quot;https://github.com/jackschultz/jbc&quot;&gt;here’s the code on Github&lt;/a&gt; if you want to checkout the whole thing. There are code segments on here to illustrate about what I did, but if you want to see the entire code, look there. The code works for me, but I’m also working on cleaning everything up, and writing a usable README so people can clone and run it themselves. &lt;a href=&quot;https://twitter.com/jack_schultz&quot;&gt;Twitter&lt;/a&gt;, and &lt;a href=&quot;https://bigishdata.com/contact/&quot;&gt;contact&lt;/a&gt; if you want to get in contact.&lt;/p&gt;
&lt;h3&gt;Mining with APScheduler and Mining Again&lt;/h3&gt;
&lt;p&gt;The first step here is to adjust mining to have the ability to stop if a different node has found the block with the index that it’s working on. From Part 1, the mining is a while loop which will only break whenz it finds a valid nonce. We need the ability to stop the mining if we’re notified of a different node’s success.&lt;/p&gt;

&lt;p&gt;I’m not going to lie here, it took awhile for me to figure out the best way to do this. Read the list below for all my different thoughts and why they didn’t work out.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Run on APScheduler, and when our Flask app gets hit with a block from a different node, stop the mining job for that index, and start mining for index + 1. This seemed like the thing to do, but I found out that the APScheduler &lt;code&gt;remove_job()&lt;/code&gt; function doesn’t work if the job has already been taken off the queue and is running. So I can’t stop mining.&lt;/li&gt;
&lt;li&gt;Celery? Celery would definitely work and I looked into it, but frankly, the amount of code and config required to get started with a basic use case is pretty large. Check out &lt;a href=&quot;http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html&quot;&gt;the intro page&lt;/a&gt; and you can see what I’m talking about. Celery would definitely be an option, I’m not trying to say it’s not worth it, but in this case, it has too much overhead.&lt;/li&gt;
&lt;li&gt;Gevent? I’ve used &lt;a href=&quot;https://bigishdata.com/2017/05/11/general-tips-for-web-scraping-with-python/&quot;&gt;Gevent in the past and am definitely a fan&lt;/a&gt; of using it for scraping where I grab a bunch of pages at once, and don’t have to wait for the request to return. Makes gathering pages much quicker. It can work in this case, but is mostly used for queues rather than single jobs. I’m not mining for a bunch of blocks at once, so don’t need to create multiple that Gevent would run. I only have one.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://python-rq.org/&quot;&gt;rq&lt;/a&gt;? Nope, same issue for stopping jobs that are running.&lt;/li&gt;
&lt;li&gt;After doing some research of other implementations, like looking at the &lt;a href=&quot;https://github.com/ethereum/pyethapp/blob/05d8037cd7ebb085b24af41b185eaef3385f88e8/pyethapp/pow_service.py&quot;&gt;Python Ethereum libraries&lt;/a&gt; on Github, I saw that the way they mine is using this term &lt;code&gt;rounds&lt;/code&gt; and &lt;code&gt;starting_nonce&lt;/code&gt;. Instead of using an entire while loop that goes through nonces until finding a correct one, we only will check nonces in the values of &lt;code&gt;[starting_nonce: starting_nonce+rounds]&lt;/code&gt;. If it’s successful, we move to the next block. If not, we run the job again with a different &lt;code&gt;starting_nonce&lt;/code&gt; value.&lt;/li&gt;
&lt;li&gt; When a mining job is called, it only checks a certain number of nonces at one time. If successful, it returns the valid nonce and hash. If not, it returns None. Combining that thought with APScheduler, it seems we have a deal.&lt;/li&gt;
&lt;li&gt;Then I realized that since we have these functions, I’d be able to use any of the libraries listed above to do the mining. If it lets you queue jobs, it’ll work when you split the mining into different parts. Actually, a good post would be to implement the mining using all the libraries that work. Let me know if you’d want that.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Below is the code that was rewritten in &lt;code&gt;mine.py&lt;/code&gt;. The main attractions are as follows.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Since when you run &lt;code&gt;mine.py&lt;/code&gt; you’re only wanting to do the mining, the APSchedule we’re going to use is the &lt;code&gt;BlockingScheduler&lt;/code&gt;. Later you’ll see we use the &lt;code&gt;BackgroundScheduler&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;There are multiple functions below for mining with different starting levels. You can mine for a the next block on a chain, mine for the block after a block, or mine and attempt to find the valid nonce for a block you just generated.&lt;/li&gt;
&lt;li&gt;Besides the scheduled job for mining the block, we also have a listener which checks the return values to see if we keep mining for the current block with the nonces in the range described in section 4 above, or go to the next block.&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
#mine.py

import apscheduler
from apscheduler.schedulers.blocking import BlockingScheduler

#if we're running mine.py, we don't want it in the background
#because the script would return after starting. So we want the
#BlockingScheduler to run the code.
sched = BlockingScheduler(standalone=True)

import logging
import sys
logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)

STANDARD_ROUNDS = 100000

def mine_for_block(chain=None, rounds=STANDARD_ROUNDS, start_nonce=0):
  if not chain:
    chain = sync.sync_local() #gather last node

  prev_block = chain.most_recent_block()
  return mine_from_prev_block(prev_block, rounds=rounds, start_nonce=start_nonce)

def mine_from_prev_block(prev_block, rounds=STANDARD_ROUNDS, start_nonce=0):
  #create new block with correct
  new_block = utils.create_new_block_from_prev(prev_block=prev_block)
  return mine_block(new_block, rounds=rounds, start_nonce=start_nonce)

def mine_block(new_block, rounds=STANDARD_ROUNDS, start_nonce=0):
  #Attempting to find a valid nonce to match the required difficulty
  #of leading zeros. We're only going to try 1000
  nonce_range = [i+start_nonce for i in range(rounds)]
  for nonce in nonce_range:
    new_block.nonce = nonce
    new_block.update_self_hash()
    if str(new_block.hash[0:NUM_ZEROS]) == '0' * NUM_ZEROS:
      print &quot;block %s mined. Nonce: %s&quot; % (new_block.index, new_block.nonce)
      assert new_block.is_valid()
      return new_block, rounds, start_nonce

  #couldn't find a hash to work with, return rounds and start_nonce
  #as well so we can know what we tried
  return None, rounds, start_nonce

def mine_for_block_listener(event):
  new_block, rounds, start_nonce = event.retval
  #if didn't mine, new_block is None
  #we'd use rounds and start_nonce to know what the next
  #mining task should use
  if new_block:
    print &quot;Mined a new block&quot;
    new_block.self_save()
    sched.add_job(mine_from_prev_block, args=[new_block], kwargs={'rounds':STANDARD_ROUNDS, 'start_nonce':0}, id='mine_for_block') #add the block again
  else:
    print &quot;No dice mining a new block. Restarting with different nonce range&quot;
    sched.add_job(mine_for_block, kwargs={'rounds':rounds, 'start_nonce':start_nonce+rounds}, id='mine_for_block') #add the block again
sched.print_jobs()

if __name__ == '__main__':

  sched.add_job(mine_for_block, kwargs={'rounds':STANDARD_ROUNDS, 'start_nonce':0}, id='mine_for_block') #add the block again
  sched.add_listener(mine_for_block_listener, apscheduler.events.EVENT_JOB_EXECUTED)#, args=sched)
  sched.start()
&lt;/pre&gt;
&lt;p&gt;When we run this, the node will mine successfully but in different jobs rather than only one. Great starting point.&lt;/p&gt;
&lt;h3&gt;Node Mining&lt;/h3&gt;
&lt;p&gt;The next part I want to add is the ability for the &lt;code&gt;node.py&lt;/code&gt; Flask node to run the mining as well. Like I said above, running &lt;code&gt;mine.py&lt;/code&gt; will only do the mining, but we’re going to need the mining to run in the background below the Flask node.  For this, we load the &lt;code&gt;BackgroundScheduler&lt;/code&gt;, tell the imported mine that we’re using out scheduler instead of the one in that file, and then add the job and listener as before.&lt;/p&gt;
&lt;p&gt;When we run this, we’ll see the output being the same, where we have a logging of the jobs being run, and also have the ability to go to &lt;code&gt;/blockchain.json&lt;/code&gt;, reloading it, and see the new nodes as they come.&lt;/p&gt;
&lt;pre&gt;
#node.py
.....
import mine
.....
from apscheduler.schedulers.background import BackgroundScheduler
sched = BackgroundScheduler(standalone=True)
.....

if __name__ == '__main__':

.....

  mine.sched = sched #to override the BlockingScheduler in this case, sched is the BackgroundSchedule
  sched.add_job(mine.mine_for_block, kwargs={'rounds':STANDARD_ROUNDS, 'start_nonce':0}, id='mine_for_block') #add the block again
  sched.add_listener(mine.mine_for_block_listener, apscheduler.events.EVENT_JOB_EXECUTED)
  sched.start()

  node.run(host='127.0.0.1', port=port)
&lt;/pre&gt;
&lt;h3&gt;Argparse&lt;/h3&gt;
&lt;p&gt;Intermission time! Previously, in order to see what port we want the node to run on, I simply checked if I passed an argument, and if I did, that’s the port.&lt;/p&gt;
&lt;pre&gt;
if __name__ == '__main__':
  if len(sys.argv) &amp;gt;= 2:
    port = sys.argv[1]
  else:
    port = 5000
&lt;/pre&gt;
&lt;p&gt;Simple, but too simple. Now, since I have the node being able to mine as well, I want to be able to specify whether or not the node should mine or not mine.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href=&quot;https://docs.python.org/2.7/library/argparse.html&quot;&gt;argparse&lt;/a&gt;. It’s very nice, and only takes a few line for me to define what args I’m looking for. We want to be able to say what port to run on defaulting to 5000, and also have the ability to say if we want to mine.&lt;/p&gt;
&lt;pre&gt;
if __name__ == '__main__':
  #args!
  parser = argparse.ArgumentParser(description='JBC Node')
  parser.add_argument('--port', '-p', default='5000',
                 help='what port we will run the node on')
  parser.add_argument('--mine', '-m', dest='mine', action='store_true')
  args = parser.parse_args()

  #only mine if we want to
  if args.mine:
    mine.sched = sched #to override the BlockingScheduler in the
    #in this case, sched is the background sched
    sched.add_job(mine.mine_for_block, kwargs={'rounds':STANDARD_ROUNDS, 'start_nonce':0}, id='mining') #add the block again
    sched.add_listener(mine.mine_for_block_listener, apscheduler.events.EVENT_JOB_EXECUTED)#, args=sched)
  
  sched.start() #want this to start so we can validate on the schedule and not rely on Flask

  #now we know what port to use
  node.run(host='127.0.0.1', port=args.port)
&lt;/pre&gt;
&lt;p&gt;For examples,&lt;code&gt;python node.py -m&lt;/code&gt; will run the node on port 5000 and mine as well. &lt;code&gt;python node.py -p 5001&lt;/code&gt; will run the node on port 5001 and not mine. &lt;code&gt;python --port=5002 -m&lt;/code&gt; will be on port 5002 and mine as well. You get the idea.&lt;/p&gt;
&lt;p&gt;Alright, back to the mining show.&lt;/p&gt;
&lt;h3&gt;Listening Nodes&lt;/h3&gt;
&lt;p&gt;In order for a node to be broadcasted, we need to have a Flask endpoint that accepts block dicts. We don’t want the node to run the job of validation — we want this to be thrown into the schedule.&lt;/p&gt;
&lt;p&gt;Initially here, the validation will check to see if it’s a valid block, and if it is, save it.&lt;/p&gt;
&lt;pre&gt;
#node.py
@node.route('/mined', methods=['POST'])
def mined():
  possible_block_dict = request.get_json()
  sched.add_job(mine.validate_possible_block, args=[possible_block_dict], id='validate_possible_block') #add the block again
  return jsonify(received=True)

#mine.py

def validate_possible_block(possible_block_dict):
  possible_block = Block(possible_block_dict)
  if possible_block.is_valid():
    possible_block.self_save()
    return True
return False
&lt;/pre&gt;
&lt;p&gt;To test, we run a node on one port to do the mining, and another node that is sitting there waiting for broadcasts. We watch the &lt;code&gt;chaindir&lt;/code&gt; of the non-mining node and we’ll see the nodes mined by its peer showing up.&lt;/p&gt;
&lt;p&gt;Side, the way we’re communicating using Flask and http is pretty simple compared to the different blockchains. Checkout how &lt;a href=&quot;https://github.com/ethereum/wiki/wiki/JSON-RPC&quot;&gt;Ethereum lets nodes talk to each other&lt;/a&gt;. Wanted to mention this so people reading don’t assume all blockchains spit simple json information back and forth over http. There are better ways.&lt;/p&gt;
&lt;h3&gt;Competing Mining Nodes&lt;/h3&gt;
&lt;p&gt;Time for the finale! The whole point of this post is to have multiple nodes that are both mining, the first to get a valid block broadcasts to the other nodes, where they all receive the block, and all start mining for the next.&lt;/p&gt;
&lt;p&gt;Remember right above when I said we wanted &lt;code&gt;validate_possible_block&lt;/code&gt; to be a job? This is because we want to check validation when there isn’t a mining job running. If the block is valid, we want to remove the mining job in the schedule queue. Since the listener inserted the next mining job with increased nonce range in the queue, we remove that one, and then insert a mining job for block after the new valid block and go from there.&lt;/p&gt;
&lt;pre&gt;
def validate_possible_block(possible_block_dict):
  possible_block = Block(possible_block_dict)
  if possible_block.is_valid():
    #this means someone else won
    possible_block.self_save()
    #we want to kill and restart the mining block so it knows it lost
    try:
      sched.remove_job('mining') 
      print &quot;removed running mine job in validating possible block&quot;
    except apscheduler.jobstores.base.JobLookupError:
      print &quot;mining job didn't exist when validating possible block&quot;
    print &quot;readding mine for block validating_possible_block&quot;
    sched.add_job(mine_for_block, kwargs={'rounds':STANDARD_ROUNDS, 'start_nonce':0}, id='mining') #add the block again

    return True
  return False
&lt;/pre&gt;
&lt;p&gt;When running this and looking at the nodes, it’s not simple to see which node won the mining of that block. This post isn’t about the data in a block, but we need a simple way to tell the world which node won.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;node.py&lt;/code&gt; we’re going to write to a &lt;code&gt;data.txt&lt;/code&gt; file that has the data for a block mined by a node on this port. Then in &lt;code&gt;utils.py&lt;/code&gt;, where we create an unmined, invalid block, we read the data file and input that into the header.&lt;/p&gt;
&lt;pre&gt;
#node.py

if __name__ == '__main__':
  .....
  filename = '%sdata.txt' % (CHAINDATA_DIR)
  with open(filename, 'w') as data_file:
    data_file.write(&quot;Mined by node on port %s&quot; % args.port)
  .....

#utils.py

def create_new_block_from_prev(prev_block=None):
  if not prev_block:
  #index zero and arbitrary previous hash
    index = 0
    prev_hash = ''
  else:
    index = int(prev_block.index) + 1
    prev_hash = prev_block.hash

  filename = '%sdata.txt' % (CHAINDATA_DIR)
  with open(filename, 'r') as data_file:
    data = data_file.read()
  nonce = 0
  timestamp = datetime.datetime.utcnow().strftime('%Y%m%d%H%M%S%f')
  block_info_dict = dict_from_block_attributes(index=index, timestamp=timestamp, data=data, prev_hash=prev_hash, nonce=nonce)
  print block_info_dict
  new_block = block.Block(block_info_dict)
  return new_block
&lt;/pre&gt;
&lt;p&gt;Side note, having a file with the data information seems like a good thing to have in the future when we’re trying to save actual data on the blockchain. Hmm….&lt;/p&gt;
&lt;p&gt;When you start up the two nodes, &lt;code&gt;$python node.py -m&lt;/code&gt; and in the 5001 hardlinked directory, &lt;code&gt;$python node.py -p 5001 -m&lt;/code&gt; we can watch all the logging, wait for nodes to be written to each &lt;code&gt;chaindata&lt;/code&gt; directory and see that new nodes are showing up at the same times and different nodes are winning.&lt;/p&gt;
&lt;p&gt;When running this with four nodes competing, it’s awesome to sit there watching the chaindir and seeing which node mined the next block that shows up. Watching code you wrote that works is one of the best feelings in programming. Remember that.&lt;/p&gt;
&lt;p&gt;Here are a couple screenshots when I ran the mining with nodes on ports 5000 and 5001. Port 5000 won 9 blocks, port 5001 won 7.&lt;/p&gt;
&lt;div data-shortcode=&quot;caption&quot; id=&quot;attachment_886&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;a href=&quot;https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-48-pm.png&quot;&gt;&lt;img data-attachment-id=&quot;886&quot; data-permalink=&quot;https://bigishdata.com/2017/11/02/build-your-own-blockchain-part-3-writing-nodes-that-mine/screen-shot-2017-11-01-at-9-14-48-pm/&quot; data-orig-file=&quot;https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-48-pm.png&quot; data-orig-size=&quot;2866,1006&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Screen Shot 2017-11-01 at 9.14.48 PM&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-48-pm.png?w=594&amp;amp;h=208&quot; data-large-file=&quot;https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-48-pm.png?w=960&quot; class=&quot; wp-image-886&quot; src=&quot;https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-48-pm.png?w=594&amp;amp;h=208&quot; alt=&quot;&quot; width=&quot;594&quot; height=&quot;208&quot; srcset=&quot;https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-48-pm.png?w=594&amp;amp;h=208 594w, https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-48-pm.png?w=1185&amp;amp;h=416 1185w, https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-48-pm.png?w=150&amp;amp;h=53 150w, https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-48-pm.png?w=300&amp;amp;h=105 300w, https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-48-pm.png?w=768&amp;amp;h=270 768w, https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-48-pm.png?w=1024&amp;amp;h=359 1024w&quot; sizes=&quot;(max-width: 594px) 100vw, 594px&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;Port 5000&lt;/p&gt;
&lt;/div&gt;
&lt;div data-shortcode=&quot;caption&quot; id=&quot;attachment_885&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;a href=&quot;https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-35-pm.png&quot;&gt;&lt;img data-attachment-id=&quot;885&quot; data-permalink=&quot;https://bigishdata.com/2017/11/02/build-your-own-blockchain-part-3-writing-nodes-that-mine/screen-shot-2017-11-01-at-9-14-35-pm/&quot; data-orig-file=&quot;https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-35-pm.png&quot; data-orig-size=&quot;2864,1014&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Screen Shot 2017-11-01 at 9.14.35 PM&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-35-pm.png?w=592&amp;amp;h=209&quot; data-large-file=&quot;https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-35-pm.png?w=960&quot; class=&quot;wp-image-885&quot; src=&quot;https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-35-pm.png?w=592&amp;amp;h=209&quot; alt=&quot;&quot; width=&quot;592&quot; height=&quot;209&quot; srcset=&quot;https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-35-pm.png?w=590&amp;amp;h=209 590w, https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-35-pm.png?w=1181&amp;amp;h=418 1181w, https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-35-pm.png?w=150&amp;amp;h=53 150w, https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-35-pm.png?w=300&amp;amp;h=106 300w, https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-35-pm.png?w=768&amp;amp;h=272 768w, https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-35-pm.png?w=1024&amp;amp;h=363 1024w&quot; sizes=&quot;(max-width: 592px) 100vw, 592px&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;Port 5001&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Look at this, we have the ability for a distributed set of nodes to be competing, trying to mine the blocks, getting credit for the mining, and being able to sync with other blocks when they want to run and mine the blockchain themselves. That’s pretty far down the line. But there are still more to go.&lt;/p&gt;
&lt;p&gt;The only data in each block is which node won the mining. The idea of a blockchain is distributed data storage (the term ‘ledger’ if you’ve heard that). We want more data. The blockchain only continues for with the first node that is broadcasted. What if two nodes find a valid node at the same time? How do we determine which block to go with? Along those lines, how do we make sure that the beginning blocks of the chain are never changed?&lt;/p&gt;
&lt;p&gt;I think the next big part of this series is dealing with the block header. Right now it’s slamming strings together and calculating the hash from that. &lt;span&gt;If you look at Bitcoin and Ethereum blockchains, they have way more sophisticated headers so miners know exactly exactly which blocks are valid no matter where they’re calculated. Another issue is storing the difficulty required for the hash. Right now it’s in the config&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;That’ll be next.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;If you’re still reading all the way down here, feel more than free to get in touch and ask questions or say hi. Like hearing from people. &lt;a href=&quot;https://twitter.com/jack_schultz&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;https://bigishdata.com/contact/&quot;&gt;contact&lt;/a&gt;, &lt;a href=&quot;https://github.com/jackschultz/jbc&quot;&gt;Github&lt;/a&gt;. Catch y’all next time.&lt;/p&gt;
&lt;div id=&quot;jp-post-flair&quot; class=&quot;sharedaddy sd-like-enabled sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded&quot; id=&quot;like-post-wrapper-92761702-859-59ff34fc18918&quot; data-src=&quot;//widgets.wp.com/likes/#blog_id=92761702&amp;amp;post_id=859&amp;amp;origin=bigishdata.wordpress.com&amp;amp;obj_id=92761702-859-59ff34fc18918&quot; data-name=&quot;like-post-frame-92761702-859-59ff34fc18918&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Like this:&lt;/h3&gt;
&lt;div class=&quot;likes-widget-placeholder post-likes-widget-placeholder&quot;&gt;&lt;span class=&quot;button&quot;&gt;&lt;span&gt;Like&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;loading&quot;&gt;Loading...&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Sat, 04 Nov 2017 15:05:32 +0000</pubDate>
<dc:creator>sidcool</dc:creator>
<og:type>article</og:type>
<og:title>How to Build Your Own Blockchain Part 3 — Writing Nodes that Mine and Talk</og:title>
<og:url>https://bigishdata.com/2017/11/02/build-your-own-blockchain-part-3-writing-nodes-that-mine/</og:url>
<og:description>Hello all and welcome to Part 3 of building the JackBlockChain — JBC. Quick past intro, in Part 1 I coded and went over the top level math and requirements for a single node to mine its own b…</og:description>
<og:image>https://bigishdata.files.wordpress.com/2017/11/screen-shot-2017-11-01-at-9-14-35-pm.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://bigishdata.com/2017/11/02/build-your-own-blockchain-part-3-writing-nodes-that-mine/</dc:identifier>
</item>
<item>
<title>Freelancer.com has ruined my life</title>
<link>https://www.trustpilot.com/reviews/59fdae7d31302a07249dc4fe</link>
<guid isPermaLink="true" >https://www.trustpilot.com/reviews/59fdae7d31302a07249dc4fe</guid>
<description>TLDR: Freelancer.com support agent single-handedly ruined my life.&lt;p&gt;Freelancer.com is ruining my life, and the lives of thousands of contractors, it's not to be trusted nor used. My review is long but worth reading and will show you how no one in their right mind, should use it.&lt;/p&gt;&lt;p&gt;I've been a member in this platform for over 5 years, I'm in the top 0.5% of contractors, I have 57 reviews, and 56 of them are perfect 5 stars. I only mentioned all of this, to show you that if they're treating me this way, then imagine how they would treat other users.&lt;/p&gt;&lt;p&gt;I had an issue with the website a while back, which I'll spare you the details of, that lead me to escalate the matter to get it solved, which I did. Prior to that issue, the website was placing a 2 months limitation on my account which stopped me from being paid or getting work, and after I resolved that I issue, I must have stepped on a few toes, because the day after, my account was placed under limitation once again. I contacted the website asking for an explanation, and the support agent rudely told me to stop asking questions and do my work, and they'll remove it when they feel like it. They didn't use these words, but it was the gest of it. I'm a proud person, and would never beg nor plead but i was put in a corner. A few months back my father passed away, and just a couple weeks later, i was in a bad car accident which left me in a bad shape and had to use all my savings to pay my medical bills. Right after that, the account was limited for two months as i mentioned earlier and i was barely getting by. But once the issue was resolved and the new &quot;open limitation&quot; was placed, i was desperate and strapped for cash. I had $3600 in my account which freelancer refused to allow me to withdraw, and at the same time I had bills piling up, so I contacted them appealing to their humanity and explaining that I did absolutely nothing wrong to deserve such treatment. I'm a well-respected person in my industry yet I was being treated like a criminal. It became clear later on that this limitation was placed by a support agent which I apparently angered during the first issue, and that the website had no basis nor reason to limit me. The first time I asked for the reason I was told that there's no reason and that I should keep working, then I was told that because a client complained, and in another occasion, i was told something else that I can't quite remember. At the end, they stopped making excuses and told me that the limitation will be lifted on the 4 of November, the date in which I'm writing this review. And I was told so on 5 separate occasions which I luckily have documented and asked for the Chat ID's (which is something you should always do when dealing with freelancer). A one-month limitation was hard and I didn't know if I can make it, but I basically had no choice, and they knew it. But a few days after this, the support agent that has something against me contacted me letting me know that she will only remove my limitation once I finish all my open projects, i tried to explain to her that this can't be, and that as a contractor I have no authority over clients to close projects, they can take forever with edits and improvements and new features, or just leave or any other scenario which I have no control over. I explained that my work is my life, that I will finish my work regardless because I have a responsibility toward my clients, and that how do they expect me to survive until then if my account is limited and I don't even have access to my money. And over our conversation that lasted a few weeks, i kept contacting freelancer and asking about the limitation and all the support agents assured me that it will be removed on the 4th, but she insisted that it won't, and apparently she won, because today I woke up, and indeed the limitation is still here.&lt;br/&gt;A support agent, that had something against me is ruining my life, is pushing me to depression and shortly homelessness. Last year around this time i was a successful business owner, and due to a series of misfortunate events, I have been reduced to this. Being treated like a thief or something, and constantly being threatened and told that my account can be suspended and deleted at any time.&lt;br/&gt;I gave 5 years to freelancer, I wholeheartedly trusted them, and one of their support agents basically ruined my life because I stepped on her toes. I'm at a loss for words, I don't know how I should feel, what I should do, the only clear thought in my mind is that I should warn people about this platform and tell them to stay the hell away. Whether you're a contractor or an employer, they will screw you mercilessly and you won't have a leg to stand on. If they did all of this to me, imagine what they would do to you...&lt;/p&gt;&lt;p&gt;PS: I heard of many cases where users had their accounts suspended after complaining about this platform. I realize the risk, and I'm taking it for you good people, so you know who you're dealing. And if my account does get suspended, I'll update my review and let you know.&lt;/p&gt;</description>
<pubDate>Sat, 04 Nov 2017 12:15:55 +0000</pubDate>
<dc:creator>hohaa</dc:creator>
<og:title>Aladin bensassi gave Freelancer 1 star. Check out the full review...</og:title>
<og:type>trustpilot:review</og:type>
<og:url>https://www.trustpilot.com/reviews/59fdae7d31302a07249dc4fe</og:url>
<og:image>https://share.trustpilot.com/images/review?locale=en-US&amp;reviewId=59fdae7d31302a07249dc4fe&amp;businessUnitId=4bdc0b310000640005057f15</og:image>
<og:description>&quot;TLDR: Freelancer.com support agent single-handedly ruined my life. Freelancer.com is ruining m ...&quot;</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.trustpilot.com/reviews/59fdae7d31302a07249dc4fe</dc:identifier>
</item>
<item>
<title>Evio – Fast event-loop networking for Go</title>
<link>https://github.com/tidwall/evio</link>
<guid isPermaLink="true" >https://github.com/tidwall/evio</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/tidwall/evio/blob/master/logo.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/tidwall/evio/raw/master/logo.png&quot; width=&quot;213&quot; height=&quot;75&quot; border=&quot;0&quot; alt=&quot;evio&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://travis-ci.org/tidwall/evio&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/d00a1e45faf22033689bd584057da69b090bde29/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f74696477616c6c2f6576696f2e7376673f7374796c653d666c61742d737175617265&quot; alt=&quot;Build Status&quot; data-canonical-src=&quot;https://img.shields.io/travis/tidwall/evio.svg?style=flat-square&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://godoc.org/github.com/tidwall/evio&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/1a9f5a297cc3aba08815fd43517cf9a772bb6fe2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6170692d7265666572656e63652d626c75652e7376673f7374796c653d666c61742d737175617265&quot; alt=&quot;GoDoc&quot; data-canonical-src=&quot;https://img.shields.io/badge/api-reference-blue.svg?style=flat-square&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;evio&lt;/code&gt; is an event loop networking framework that is fast and small. It makes direct &lt;a href=&quot;https://en.wikipedia.org/wiki/Epoll&quot;&gt;epoll&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Kqueue&quot;&gt;kqueue&lt;/a&gt; syscalls rather than using the standard Go &lt;a href=&quot;https://golang.org/pkg/net/&quot;&gt;net&lt;/a&gt; package, and works in a similar manner as &lt;a href=&quot;https://github.com/libuv/libuv&quot;&gt;libuv&lt;/a&gt; and &lt;a href=&quot;https://github.com/libevent/libevent&quot;&gt;libevent&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The goal of this project is to create a server framework for Go that performs on par with &lt;a href=&quot;http://redis.io&quot;&gt;Redis&lt;/a&gt; and &lt;a href=&quot;http://www.haproxy.org&quot;&gt;Haproxy&lt;/a&gt; for packet handling. My hope is to use this as a foundation for &lt;a href=&quot;https://github.com/tidwall/tile38&quot;&gt;Tile38&lt;/a&gt; and a future L7 proxy for Go... and a bunch of other stuff.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Just to be perfectly clear&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This project is not intended to be a general purpose replacement for the standard Go net package or goroutines. It's for building specialized services such as key value stores, L7 proxies, static websites, etc.&lt;/p&gt;
&lt;p&gt;You would not want to use this framework if you need to handle long-running requests (milliseconds or more). For example, a web api that needs to connect to a mongo database, authenticate, and respond; just use the Go net/http package instead.&lt;/p&gt;
&lt;p&gt;There are many popular event loop based applications in the wild such as Nginx, Haproxy, Redis, and Memcached. All of these are single-threaded and very fast and written in C.&lt;/p&gt;
&lt;p&gt;The reason I wrote this framework is so I can build certain network services that perform like the C apps above, but I also want to continue to work in Go.&lt;/p&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/tidwall/evio#performance&quot;&gt;Fast&lt;/a&gt; single-threaded event loop&lt;/li&gt;
&lt;li&gt;Simple API&lt;/li&gt;
&lt;li&gt;Low memory usage&lt;/li&gt;
&lt;li&gt;Supports tcp4, tcp6, and unix sockets&lt;/li&gt;
&lt;li&gt;Allows &lt;a href=&quot;https://github.com/tidwall/evio#multiple-addresses&quot;&gt;multiple network binding&lt;/a&gt; on the same event loop&lt;/li&gt;
&lt;li&gt;Flexible &lt;a href=&quot;https://github.com/tidwall/evio#ticker&quot;&gt;ticker&lt;/a&gt; event&lt;/li&gt;
&lt;li&gt;Fallback for non-epoll/kqueue operating systems by simulating events with the &lt;a href=&quot;https://golang.org/pkg/net/&quot;&gt;net&lt;/a&gt; package&lt;/li&gt;
&lt;li&gt;Ability to &lt;a href=&quot;https://github.com/tidwall/evio#wake-up&quot;&gt;wake up&lt;/a&gt; connections from long running background operations&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;h3&gt;Installing&lt;/h3&gt;
&lt;p&gt;To start using evio, install Go and run &lt;code&gt;go get&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ go get -u github.com/tidwall/evio
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will retrieve the library.&lt;/p&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;Starting a server is easy with &lt;code&gt;evio&lt;/code&gt;. Just set up your events and pass them to the &lt;code&gt;Serve&lt;/code&gt; function along with the binding address(es). Each connections receives an ID that's passed to various events to differentiate the clients. At any point you can close a client or shutdown the server by return a &lt;code&gt;Close&lt;/code&gt; or &lt;code&gt;Shutdown&lt;/code&gt; action from an event.&lt;/p&gt;
&lt;p&gt;Example echo server that binds to port 5000:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;github.com/tidwall/evio&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;main&lt;/span&gt;() {
        &lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;events&lt;/span&gt; evio.&lt;span class=&quot;pl-smi&quot;&gt;Events&lt;/span&gt;
        events.&lt;span class=&quot;pl-smi&quot;&gt;Data&lt;/span&gt; = &lt;span class=&quot;pl-c1&quot;&gt;func&lt;/span&gt;(id &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt;, in []&lt;span class=&quot;pl-k&quot;&gt;byte&lt;/span&gt;) (out []&lt;span class=&quot;pl-k&quot;&gt;byte&lt;/span&gt;, action evio.&lt;span class=&quot;pl-smi&quot;&gt;Action&lt;/span&gt;) {
                out = in
                &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;
        }
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:=&lt;/span&gt; evio.&lt;span class=&quot;pl-c1&quot;&gt;Serve&lt;/span&gt;(events, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;tcp://localhost:5000&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;); err != &lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt; {
                &lt;span class=&quot;pl-c1&quot;&gt;panic&lt;/span&gt;(err.&lt;span class=&quot;pl-c1&quot;&gt;Error&lt;/span&gt;())
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here the only event being used is &lt;code&gt;Data&lt;/code&gt;, which fires when the server receives input data from a client. The exact same input data is then passed through the output return value, which is then sent back to the client.&lt;/p&gt;
&lt;p&gt;Connect to the echo server:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ telnet localhost 5000
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Events&lt;/h3&gt;
&lt;p&gt;The event type has a bunch of handy events:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Serving&lt;/code&gt; fires when the server is ready to accept new connections.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Opened&lt;/code&gt; fires when a connection has opened.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Closed&lt;/code&gt; fires when a connection has closed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Detach&lt;/code&gt; fires when a connection has been detached using the &lt;code&gt;Detach&lt;/code&gt; return action.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Data&lt;/code&gt; fires when the server receives new data from a connection.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Prewrite&lt;/code&gt; fires prior to all write attempts from the server.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Postwrite&lt;/code&gt; fires immediately after every write attempt.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tick&lt;/code&gt; fires immediately after the server starts and will fire again after a specified interval.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Multiple addresses&lt;/h3&gt;
&lt;p&gt;An server can bind to multiple addresses and share the same event loop.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
evio.&lt;span class=&quot;pl-c1&quot;&gt;Serve&lt;/span&gt;(events, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;tcp://192.168.0.10:5000&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;unix://socket&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Ticker&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Tick&lt;/code&gt; event fires ticks at a specified interval. The first tick fires immediately after the &lt;code&gt;Serving&lt;/code&gt; events.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
events.&lt;span class=&quot;pl-smi&quot;&gt;Tick&lt;/span&gt; = &lt;span class=&quot;pl-c1&quot;&gt;func&lt;/span&gt;() (delay time.&lt;span class=&quot;pl-smi&quot;&gt;Duration&lt;/span&gt;, action &lt;span class=&quot;pl-v&quot;&gt;Action&lt;/span&gt;){
        log.&lt;span class=&quot;pl-c1&quot;&gt;Printf&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;tick&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
        delay = time.&lt;span class=&quot;pl-smi&quot;&gt;Second&lt;/span&gt;
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Wake up&lt;/h3&gt;
&lt;p&gt;A connection can be woken up using the &lt;code&gt;wake&lt;/code&gt; function that is made available through the &lt;code&gt;Serving&lt;/code&gt; event. This is useful for when you need to offload an operation to a background goroutine and then later notify the event loop that it's time to send some data.&lt;/p&gt;
&lt;p&gt;Example echo server that when encountering the line &quot;exec&quot; it waits 5 seconds before responding.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;wake&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt;(id &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;bool&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;mu&lt;/span&gt; sync.&lt;span class=&quot;pl-smi&quot;&gt;Mutex&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;execs&lt;/span&gt; = &lt;span class=&quot;pl-c1&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt;)

events.&lt;span class=&quot;pl-smi&quot;&gt;Serving&lt;/span&gt; = &lt;span class=&quot;pl-c1&quot;&gt;func&lt;/span&gt;(wakefn &lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt;(id &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;bool&lt;/span&gt;, addrs []net.&lt;span class=&quot;pl-smi&quot;&gt;Addr&lt;/span&gt;) (action evio.&lt;span class=&quot;pl-smi&quot;&gt;Action&lt;/span&gt;) {
        wake = wakefn &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; hang on to the wake function&lt;/span&gt;
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;
}
events.&lt;span class=&quot;pl-smi&quot;&gt;Data&lt;/span&gt; = &lt;span class=&quot;pl-c1&quot;&gt;func&lt;/span&gt;(id &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt;, in []&lt;span class=&quot;pl-k&quot;&gt;byte&lt;/span&gt;) (out []&lt;span class=&quot;pl-k&quot;&gt;byte&lt;/span&gt;, action evio.&lt;span class=&quot;pl-smi&quot;&gt;Action&lt;/span&gt;) {
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; in == &lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt; {
                &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; look for `in` param equal to `nil` following a wake call.&lt;/span&gt;
                mu.&lt;span class=&quot;pl-c1&quot;&gt;Lock&lt;/span&gt;()
                &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; execs[id] &amp;gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; {
                        out = &lt;span class=&quot;pl-c1&quot;&gt;append&lt;/span&gt;(out, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;exec&lt;span class=&quot;pl-cce&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;...)
                        execs[id]--
                }
                mu.&lt;span class=&quot;pl-c1&quot;&gt;Unlock&lt;/span&gt;()
        } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;string&lt;/span&gt;(in) == &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;exec&lt;span class=&quot;pl-cce&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; {
                &lt;span class=&quot;pl-k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt;(){
                        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; do some long running operation&lt;/span&gt;
                        time.&lt;span class=&quot;pl-c1&quot;&gt;Sleep&lt;/span&gt;(time.&lt;span class=&quot;pl-smi&quot;&gt;Second&lt;/span&gt;*&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;)
                        mu.&lt;span class=&quot;pl-c1&quot;&gt;Lock&lt;/span&gt;()
                        execs[id]++
                        mu.&lt;span class=&quot;pl-c1&quot;&gt;Unlock&lt;/span&gt;()
                        &lt;span class=&quot;pl-c1&quot;&gt;wake&lt;/span&gt;(id)
                }()
        } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
                out = in
        }
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Data translations&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Translate&lt;/code&gt; function wraps events and provides a &lt;code&gt;ReadWriter&lt;/code&gt; that can be used to translate data off the wire from one format to another. This can be useful for transparently adding compression or encryption.&lt;/p&gt;
&lt;p&gt;For example, let's say we need TLS support:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;Events&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; ... fill the events with happy functions&lt;/span&gt;

&lt;span class=&quot;pl-smi&quot;&gt;cer&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:=&lt;/span&gt; tls.&lt;span class=&quot;pl-c1&quot;&gt;LoadX509KeyPair&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;certs/ssl-cert-snakeoil.pem&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;certs/ssl-cert-snakeoil.key&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt; {
        log.&lt;span class=&quot;pl-c1&quot;&gt;Fatal&lt;/span&gt;(err)
}
&lt;span class=&quot;pl-smi&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:=&lt;/span&gt; &amp;amp;tls.&lt;span class=&quot;pl-smi&quot;&gt;Config&lt;/span&gt;{Certificates: []tls.&lt;span class=&quot;pl-smi&quot;&gt;Certificate&lt;/span&gt;{cer}}

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; wrap the events with a TLS translator&lt;/span&gt;

events = evio.&lt;span class=&quot;pl-c1&quot;&gt;Translate&lt;/span&gt;(events, &lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt;, 
        &lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;rw&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;pl-v&quot;&gt;ReadWriter&lt;/span&gt;) &lt;span class=&quot;pl-v&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;pl-v&quot;&gt;ReadWriter&lt;/span&gt; {
                &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; tls.&lt;span class=&quot;pl-c1&quot;&gt;Server&lt;/span&gt;(evio.&lt;span class=&quot;pl-c1&quot;&gt;NopConn&lt;/span&gt;(rw), config)
        },
)

log.&lt;span class=&quot;pl-c1&quot;&gt;Fatal&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;Serve&lt;/span&gt;(events, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;tcp://0.0.0.0:443&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we wrapped the event with a TLS translator. The &lt;code&gt;evio.NopConn&lt;/code&gt; function is used to converts the &lt;code&gt;ReadWriter&lt;/code&gt; a &lt;code&gt;net.Conn&lt;/code&gt; so the &lt;code&gt;tls.Server()&lt;/code&gt; call will work.&lt;/p&gt;
&lt;p&gt;There's a working TLS example at &lt;a href=&quot;https://github.com/tidwall/evio/blob/master/examples/http-server/main.go&quot;&gt;examples/http-server/main.go&lt;/a&gt; that binds to port 8080 and 4443 using an developer SSL certificate. The 8080 connections will be insecure and the 4443 will be secure.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;cd&lt;/span&gt; examples/http-server
$ go run main.go --tlscert example.pem
2017/11/02 06:24:33 http server started on port 8080
2017/11/02 06:24:33 https server started on port 4443
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ curl http://localhost:8080
Hello World&lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;
$ curl -k https://localhost:4443
Hello World&lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;More examples&lt;/h2&gt;
&lt;p&gt;Please check out the &lt;a href=&quot;https://github.com/tidwall/evio/blob/master/examples&quot;&gt;examples&lt;/a&gt; subdirectory for a simplified &lt;a href=&quot;https://github.com/tidwall/evio/blob/master/examples/redis-server/main.go&quot;&gt;redis&lt;/a&gt; clone, an &lt;a href=&quot;https://github.com/tidwall/evio/blob/master/examples/echo-server/main.go&quot;&gt;echo&lt;/a&gt; server, and a very basic &lt;a href=&quot;https://github.com/tidwall/evio/blob/master/examples/http-server/main.go&quot;&gt;http&lt;/a&gt; server with TLS support.&lt;/p&gt;
&lt;p&gt;To run an example:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ go run examples/http-server/main.go
$ go run examples/redis-server/main.go
$ go run examples/echo-server/main.go
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Performance&lt;/h2&gt;
&lt;h3&gt;Benchmarks&lt;/h3&gt;
&lt;p&gt;These benchmarks were run on an ec2 c4.xlarge instance in single-threaded mode (GOMAXPROC=1) over Ipv4 localhost. Check out &lt;a href=&quot;https://github.com/tidwall/evio/blob/master/benchmarks&quot;&gt;benchmarks&lt;/a&gt; for more info.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tidwall/evio/blob/master/benchmarks/out/echo.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/tidwall/evio/raw/master/benchmarks/out/echo.png&quot; width=&quot;336&quot; height=&quot;144&quot; border=&quot;0&quot; alt=&quot;echo benchmark&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/tidwall/evio/blob/master/benchmarks/out/http.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/tidwall/evio/raw/master/benchmarks/out/http.png&quot; width=&quot;336&quot; height=&quot;144&quot; border=&quot;0&quot; alt=&quot;http benchmark&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/tidwall/evio/blob/master/benchmarks/out/redis_pipeline_1.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/tidwall/evio/raw/master/benchmarks/out/redis_pipeline_1.png&quot; width=&quot;336&quot; height=&quot;144&quot; border=&quot;0&quot; alt=&quot;redis 1 benchmark&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/tidwall/evio/blob/master/benchmarks/out/redis_pipeline_8.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/tidwall/evio/raw/master/benchmarks/out/redis_pipeline_8.png&quot; width=&quot;336&quot; height=&quot;144&quot; border=&quot;0&quot; alt=&quot;redis 8 benchmark&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Contact&lt;/h2&gt;
&lt;p&gt;Josh Baker &lt;a href=&quot;http://twitter.com/tidwall&quot;&gt;@tidwall&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;evio&lt;/code&gt; source code is available under the MIT &lt;a href=&quot;https://github.com/tidwall/evio/blob/master/LICENSE&quot;&gt;License&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;</description>
<pubDate>Sat, 04 Nov 2017 10:18:38 +0000</pubDate>
<dc:creator>Acconut</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/1156077?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>tidwall/evio</og:title>
<og:url>https://github.com/tidwall/evio</og:url>
<og:description>evio - Fast event-loop networking for Go</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/tidwall/evio</dc:identifier>
</item>
<item>
<title>Show HN: Server.js – A modern Express alternative</title>
<link>https://serverjs.io/</link>
<guid isPermaLink="true" >https://serverjs.io/</guid>
<description>&lt;div class=&quot;features&quot;&gt;
&lt;div class=&quot;flex two three-600&quot; readability=&quot;10&quot;&gt;
&lt;div readability=&quot;7&quot;&gt;&lt;img src=&quot;https://serverjs.io/img/battery.svg&quot;/&gt;&lt;h2&gt;Batteries on&lt;/h2&gt;
&lt;p&gt;Everything you need is loaded by default&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt;&lt;img src=&quot;https://serverjs.io/img/socketio.svg&quot;/&gt;&lt;h2&gt;socket.io&lt;/h2&gt;
&lt;p&gt;Realtime channels in a couple of lines&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt;&lt;img src=&quot;https://serverjs.io/img/modern.svg&quot;/&gt;&lt;h2&gt;Modern ES7+&lt;/h2&gt;
&lt;p&gt;Use async/await and forget Callback Hell&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt;&lt;img src=&quot;https://serverjs.io/img/document.svg&quot;/&gt;&lt;h2&gt;Documented&lt;/h2&gt;
&lt;p&gt;Many tutorials and docs for productivity&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt;&lt;img src=&quot;https://serverjs.io/img/lock.svg&quot;/&gt;&lt;h2&gt;Secure&lt;/h2&gt;
&lt;p&gt;Sane defaults &amp;amp; great libraries underneath&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;https://serverjs.io/img/lego.svg&quot;/&gt;&lt;h2&gt;Extensible&lt;/h2&gt;
&lt;p&gt;[upcoming in 1.1]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://npm-stat.com/charts.html?package=server&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/server.svg&quot; alt=&quot;[Downloads]&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://www.paypal.me/franciscopresencia/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%20donate%20-%20paypal%20-blue.svg&quot; alt=&quot;[Donate]&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;http://eepurl.com/cGRggH&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%20subscribe%20-%20mailchimp%20-blue.svg&quot; alt=&quot;[Subscribe]&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/franciscop/server&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/franciscop/server.svg?style=shield&quot; alt=&quot;[Status]&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/franciscop/server&quot;&gt;&lt;img src=&quot;https://david-dm.org/franciscop/server/status.svg&quot; alt=&quot;[Dependencies status]&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://ci.appveyor.com/project/franciscop/server&quot;&gt;&lt;img src=&quot;https://img.shields.io/appveyor/ci/franciscop/server.svg?label=windows&quot; alt=&quot;[Windows Build]&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Powerful server for Node.js that just works so &lt;strong&gt;you can focus on your awesome project&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;// Include it and extract some methods for convenience
const server = require('server');
const { get, post } = server.router;

// Launch server with options and a couple of routes
server({ port: 8080 }, [
  get('/', ctx =&amp;gt; 'Hello world'),
  post('/', ctx =&amp;gt; console.log(ctx.data))
]);
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote class=&quot;external&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;Simplicity is a great virtue but it requires hard work to achieve it and education to appreciate it. And to make matters worse: complexity sells better.&lt;/p&gt;
&lt;cite&gt;― Edsger W. Dijkstra&lt;/cite&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;
&lt;p&gt;There's a &lt;a href=&quot;https://serverjs.io/tutorials/getting-started/&quot;&gt;whole tutorial on getting started for beginners&lt;/a&gt; but the quick version is to first install &lt;code&gt;server&lt;/code&gt; as a dependency:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-bash&quot;&gt;npm install server
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Server requires &lt;strong&gt;Node.js 7.6.0&lt;/strong&gt; or newer. &lt;strong&gt;Node.js 8.9.x&lt;/strong&gt; LTS is recommended for long-term support from Node.js.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then you can create a file called &lt;code&gt;index.js&lt;/code&gt; with this code:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;// Include the server in your file
const server = require('server');
const { get, post } = server.router;

// Handle requests to the url &quot;/&quot; ( http://localhost:3000/ )
server([
  get('/', ctx =&amp;gt; 'Hello world!')
]);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Execute this in the terminal to get the server started:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-bash&quot;&gt;node .
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And finally, open your browser on &lt;a href=&quot;http://localhost:3000/&quot;&gt;localhost:3000&lt;/a&gt; and you should see 'Hello world!' on your browser.&lt;/p&gt;
&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;
&lt;p&gt;The library is documented here:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class=&quot;button&quot; href=&quot;https://serverjs.io/documentation/&quot;&gt;Full Documentation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5.4878048780488&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://eepurl.com/cGRggH&quot;&gt;&lt;strong&gt;Subscribe here&lt;/strong&gt;&lt;/a&gt; to receive tutorials when released. Tutorials are &lt;em&gt;good for learning&lt;/em&gt; while the documentation is good for reference/quick use &lt;em&gt;once you know the basics&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can also download the repository and try the examples by browsing to them and &lt;code&gt;node .&lt;/code&gt; inside each of them in &lt;code&gt;/examples&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;use-cases&quot;&gt;Use cases&lt;/h2&gt;
&lt;p&gt;The package &lt;code&gt;server&lt;/code&gt; is great for many situations. Let's see some of them:&lt;/p&gt;
&lt;h3 id=&quot;small-to-medium-projects&quot;&gt;Small to medium projects&lt;/h3&gt;
&lt;p&gt;Everything works out of the box, you get great support for most features and you can easily tap into Express' middleware ecosystem. What's not to love?&lt;/p&gt;
&lt;p&gt;Some of the included features: body and file parsers, cookies, sessions, websockets, Redis, gzip, favicon, csrf, SSL, etc. They just work so you will save a headache or two and can focus on your actual project. Get a simple form going:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;const server = require('server');
const { get, post } = server.router;
const { render, redirect } = server.reply;

server(
  get('/', () =&amp;gt; render('index.pug')),
  post('/', ctx =&amp;gt; {
    console.log(ctx.data);
    return redirect('/');
  })
);
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;api-design&quot;&gt;API design&lt;/h3&gt;
&lt;p&gt;From the flexibility and expressivity of the bundle, designing APIs is a breeze:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;// books/router.js
const { get, post, put, del } = require('server/router');
const ctrl = require('./controller');

module.exports = [
  get('/book', ctrl.list),
  get('/book/:id', ctrl.item),
  post('/book', ctrl.create),
  put('/book/:id', ctrl.update),
  del('/book/:id', ctrl.delete)
];
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;real-time&quot;&gt;Real time&lt;/h3&gt;
&lt;p&gt;Websockets were never this easy to use! With socket.io on the front-end, you can simply do this in the back-end to handle those events:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;// chat/router.js
const { socket } = require('server/router');
const ctrl = require('./controller');

module.exports = [
  socket('connect', ctrl.join),
  socket('message', ctrl.message),
  socket('disconnect', ctrl.leave)
];
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;
&lt;p&gt;Licensed under the MIT License. See &lt;a href=&quot;https://github.com/franciscop/server/blob/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for the full license.&lt;/p&gt;
&lt;h2 id=&quot;author-support&quot;&gt;Author &amp;amp; support&lt;/h2&gt;
&lt;p&gt;This package was created by &lt;a href=&quot;http://francisco.io/&quot;&gt;Francisco Presencia&lt;/a&gt; but hopefully developed and maintained by many others. See the &lt;a href=&quot;https://github.com/franciscop/server/graphs/contributors&quot;&gt;the list of contributors here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I love using my work and I'm available for contractor work. Freelancing helps maintain &lt;code&gt;server&lt;/code&gt; and &lt;a href=&quot;https://github.com/franciscop/&quot;&gt;my other open source projects&lt;/a&gt; up to date! I am also on &lt;a href=&quot;https://www.codementor.io/franciscop&quot;&gt;Codementor&lt;/a&gt; so if you want to learn more Javascript/Node.js/etc contact me there.&lt;/p&gt;
&lt;p&gt;You can also &lt;a href=&quot;https://serverjs.io/sponsor&quot;&gt;sponsor the project&lt;/a&gt;, get your logo in here and some other perks with tons of ♥&lt;/p&gt;
</description>
<pubDate>Sat, 04 Nov 2017 08:03:25 +0000</pubDate>
<dc:creator>franciscop</dc:creator>
<og:title>Server.js - server.js</og:title>
<og:description>Flexible and powerful server for Node.js</og:description>
<og:url>http://serverjs.io/</og:url>
<og:image>https://serverjs.io/img/code.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://serverjs.io/</dc:identifier>
</item>
<item>
<title>Sometimes all a maintainer needs is a “thank you”</title>
<link>https://github.com/jhund/filterrific/issues/147#issuecomment-341867147</link>
<guid isPermaLink="true" >https://github.com/jhund/filterrific/issues/147#issuecomment-341867147</guid>
<description>&lt;p class=&quot;text-center mb-4&quot;&gt;
      &lt;strong&gt;Have a question about this project?&lt;/strong&gt; Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
    &lt;/p&gt;

    &lt;!-- '&quot;` --&gt;&lt;!-- &lt;/textarea&gt;&lt;/xmp&gt; --&gt;&lt;form accept-charset=&quot;UTF-8&quot; action=&quot;/join?return_to=%2Fjhund%2Ffilterrific%2Fissues%2Fnew&quot; autocomplete=&quot;off&quot; class=&quot;js-signup-form&quot; method=&quot;post&quot;&gt;      &lt;dl class=&quot;form-group&quot;&gt;&lt;dt class=&quot;input-label&quot;&gt;&lt;label autocapitalize=&quot;off&quot; autofocus=&quot;autofocus&quot; data-autocheck-authenticity-token=&quot;AcWA+aXxHGCuZ01HsfaN5lf2yD4Cgw0VIBvvlJeXbMfElL9RVa1gJJO/yPMIZcicZfkuwGPAGfK0J33PGMN9Ug==&quot; data-autocheck-url=&quot;/signup_check/username&quot; data-facebox-id=&quot;user-login-issues&quot; for=&quot;user_login_issues&quot; name=&quot;user[login]&quot;&gt;Pick a username&lt;/label&gt;&lt;/dt&gt;&lt;dd&gt;&lt;input autocapitalize=&quot;off&quot; autofocus=&quot;autofocus&quot; class=&quot;form-control&quot; data-autocheck-authenticity-token=&quot;AcWA+aXxHGCuZ01HsfaN5lf2yD4Cgw0VIBvvlJeXbMfElL9RVa1gJJO/yPMIZcicZfkuwGPAGfK0J33PGMN9Ug==&quot; data-autocheck-url=&quot;/signup_check/username&quot; data-facebox-id=&quot;user-login-issues&quot; id=&quot;user_login_issues&quot; name=&quot;user[login]&quot; size=&quot;30&quot; type=&quot;text&quot;/&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;dl class=&quot;form-group&quot;&gt;&lt;dt class=&quot;input-label&quot;&gt;&lt;label autocapitalize=&quot;off&quot; data-autocheck-authenticity-token=&quot;Wo2EviRgrFtDa0VorIyIz1XkKQlMyflm8G/YuCPC3tYoUS2wcjF0U9WfwCJWOLJv4KgI0doFd949KokbyPfmKA==&quot; data-autocheck-url=&quot;/signup_check/email&quot; data-facebox-id=&quot;user-email-issues&quot; for=&quot;user_email_issues&quot; name=&quot;user[email]&quot;&gt;Email Address&lt;/label&gt;&lt;/dt&gt;&lt;dd&gt;&lt;input autocapitalize=&quot;off&quot; class=&quot;form-control&quot; data-autocheck-authenticity-token=&quot;Wo2EviRgrFtDa0VorIyIz1XkKQlMyflm8G/YuCPC3tYoUS2wcjF0U9WfwCJWOLJv4KgI0doFd949KokbyPfmKA==&quot; data-autocheck-url=&quot;/signup_check/email&quot; data-facebox-id=&quot;user-email-issues&quot; id=&quot;user_email_issues&quot; name=&quot;user[email]&quot; size=&quot;30&quot; type=&quot;text&quot;/&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;dl class=&quot;form-group&quot;&gt;&lt;dt class=&quot;input-label&quot;&gt;&lt;label data-autocheck-authenticity-token=&quot;CLBvhTGM00+1aPVNROxqfTG6BILKi9eqA364Mg5rLBMhv/nKXEnKC5+GrqEatYK0i+KzrMukq+S3oaSKCRyg6g==&quot; data-autocheck-url=&quot;/signup_check/password&quot; data-facebox-id=&quot;user-password-issues&quot; for=&quot;user_password_issues&quot; name=&quot;user[password]&quot;&gt;Password&lt;/label&gt;&lt;/dt&gt;&lt;dd&gt;&lt;input class=&quot;form-control&quot; data-autocheck-authenticity-token=&quot;CLBvhTGM00+1aPVNROxqfTG6BILKi9eqA364Mg5rLBMhv/nKXEnKC5+GrqEatYK0i+KzrMukq+S3oaSKCRyg6g==&quot; data-autocheck-url=&quot;/signup_check/password&quot; data-facebox-id=&quot;user-password-issues&quot; id=&quot;user_password_issues&quot; name=&quot;user[password]&quot; size=&quot;30&quot; type=&quot;password&quot;/&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;input type=&quot;hidden&quot; name=&quot;source&quot; class=&quot;js-signup-source&quot; value=&quot;modal-issues&quot;/&gt;&lt;input class=&quot;form-control&quot; id=&quot;required_field_193f&quot; name=&quot;required_field_193f&quot; type=&quot;text&quot;/&gt;&lt;input class=&quot;form-control&quot; name=&quot;timestamp&quot; type=&quot;hidden&quot; value=&quot;1509897684249&quot;/&gt;&lt;input class=&quot;form-control&quot; name=&quot;timestamp_secret&quot; type=&quot;hidden&quot; value=&quot;5d3419a6e60eec992af9a59c81c00fa23b750ab82a86c03bb492ef6af2fcc906&quot;/&gt;&lt;button class=&quot;btn btn-primary mt-2 btn-block&quot; type=&quot;submit&quot; data-ga-click=&quot;(Logged out) New issue modal, clicked Sign up, text:sign-up&quot;&gt;Sign up for GitHub&lt;/button&gt;
&lt;/form&gt;
    &lt;p class=&quot;mt-4 text-gray text-center&quot;&gt;Already on GitHub? &lt;a href=&quot;https://github.com/login?return_to=%2Fjhund%2Ffilterrific%2Fissues%2Fnew&quot; data-ga-click=&quot;(Logged out) New issue modal, clicked Sign in, text:sign-in&quot;&gt;Sign in&lt;/a&gt; to your account&lt;/p&gt;
  </description>
<pubDate>Sat, 04 Nov 2017 03:18:41 +0000</pubDate>
<dc:creator>amingilani</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/1188552?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>Thank you · Issue #147 · jhund/filterrific</og:title>
<og:url>https://github.com/jhund/filterrific/issues/147</og:url>
<og:description>Hey @jhund
This isn't an issue. I just wanted to take the time and say thank you for creating this library. It's saved me hours and hours of work every single time I've worked on a project. Thank you.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/jhund/filterrific/issues/147</dc:identifier>
</item>
<item>
<title>Neugram – Scripting in Go</title>
<link>https://neugram.io/blog/neugram-briefly</link>
<guid isPermaLink="true" >https://neugram.io/blog/neugram-briefly</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;title&gt;The Neugram Blog: Neugram, briefly&lt;/title&gt;&lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;/favicon.png&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;150.93276866067&quot;&gt;

&lt;p&gt;&lt;em&gt;October 2017&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you program a lot in Go, you may find Neugram interesting.&lt;/p&gt;
&lt;p&gt;I started working on Neugram because as I spent more time programming in Go I found myself writing a larger fraction of the scripts better suited to Python or Perl in Go. My daily programming came to be dominated by bash and Go.&lt;/p&gt;
&lt;p&gt;The problem is, bash is an awkward language for a ~100 line program, and sometimes so is Go. While it is thoroughly enjoyable to use the same standard library in scripts as in big complex projects, Go is slower to work in than Python and Perl for a few reasons:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;No read-eval-print-loop.&lt;/li&gt;
&lt;li&gt;No &lt;a href=&quot;https://en.wikipedia.org/wiki/Shebang_%28Unix%29&quot;&gt;shebang&lt;/a&gt; support.&lt;/li&gt;
&lt;li&gt;Lots of unhelpful error handling. (Go’s explicit error handling is wonderful in large programs, but in small scripts where all you write is &lt;code&gt;if err != nil { log.Fatal(err) }&lt;/code&gt; it is a drag.)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;At first glance these look like features missing from Go. So I went about figuring out how to add them. Turns out, they are missing quite deliberately.&lt;/p&gt;
&lt;h2&gt;REPL&lt;/h2&gt;
&lt;p&gt;The grammar of Go needs to be changed to support line-by-line evaluation. Top-level constructions in a &lt;code&gt;.go&lt;/code&gt; file are declarations, not statements. There is no sequence in the declarations, all are evaluated simultaneously across all the files in a package. A declaraction on an earlier line in a file can happily refer to a name declared later in the file. If you want to type Go declarations into a REPL, nothing can execute until you declare the package done.&lt;/p&gt;
&lt;p&gt;So the first thing you need to do to define a REPL for Go is to step down a level. Instead of declaractions, process statements. Pretend everything typed into the REPL is happening inside the &lt;code&gt;func main() {}&lt;/code&gt; of a Go program. Now there is a sequence of events and statements can be evaluated as they are read.&lt;/p&gt;
&lt;p&gt;This shrinks the set of programs you can write dramatically. In Go there is no way to define a method on a type inside a function (that is, using statements). There is a good reason for this: all the methods of a type need to be defined simultaneously, so that the method set of a type doesn’t change over time. It would lead to a whole new class of confusing errors if you could write:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;func main() {
        type S string
        var s S
        _, ok1 := s.(io.Reader)
        func (S) Read(b []byte) (int, error) { ... }
        _, ok2 := s.(io.Reader)
        fmt.Println(ok1, ok2) // Prints: false, true
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That is why you cannot write that in Go.&lt;/p&gt;
&lt;p&gt;So for the language to be REPL-compatible it needs serious grammar surgery, which would make a REPL possible, but hurt the readability of big complex programs.&lt;/p&gt;
&lt;p&gt;Neugram has &lt;a href=&quot;https://github.com/neugram/ng/blob/master/eval/testdata/method2.ng&quot;&gt;its own statement-based method syntax&lt;/a&gt;, which diverges in a small but significant way from Go. (Though it won’t be properly functional until the &lt;a href=&quot;https://github.com/neugram/ng/issues/5&quot;&gt;Go generating backend&lt;/a&gt; is complete.)&lt;/p&gt;
&lt;h2&gt;Error handling&lt;/h2&gt;
&lt;p&gt;Explicit vs. implicit error handling is a contentious issue, but it is a safe bet that if you have chosen to use Go you strongly favor explicit error handling. The language does not make it easy to avoid handling your errors.&lt;/p&gt;
&lt;p&gt;Unfortunately, there is one place where even a strong supporter of explicit error handling can admit the process is tedious: when writing “all or nothing” scripts. That is, programs that either follow the narrow success path completely, or if they step off the path even slightly, exit immediately in error. Small Python scripts follow this process by default, and bash script authors often do by placing &lt;code&gt;set -e&lt;/code&gt; at the top of their scripts.&lt;/p&gt;
&lt;p&gt;Indeed, a common source of consternation for Java or Python programmers coming to Go is discovering that the small program they attempted to write to try out Go ended up needlessly wordy. This:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/python
f = open(&quot;hello.txt&quot;,&quot;w&quot; 
f.write(&quot;Hello, World!&quot;) 
f.write(&quot;Next line.&quot;)
f.close()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Becomes:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-go&quot;&gt;package main

import (
        &quot;os&quot;
        &quot;log&quot;
        &quot;fmt&quot;
)

func main() {
        f, err := os.Create(&quot;hello.txt&quot;)
        if err != nil {
                log.Fatal(err)
        }
        if _, err := fmt.Fprintf(f, &quot;Hello, World!\n&quot;); err != nil {
                log.Fatal(err)
        }
        if _, err := fmt.Fprintf(f, &quot;Next line.\n&quot;); err != nil {
                log.Fatal(err)
        }
        if err := f.Close(); err != nil {
                log.Fatal(err)
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is not quick to write and is one of the few places where explicit error handling in Go is unhelpful. Our script is no more robust for handling these errors explicitly.&lt;/p&gt;
&lt;p&gt;Neugram is designed to help with scripts like these.&lt;/p&gt;
&lt;p&gt;Neugram is &lt;code&gt;set -e&lt;/code&gt; for Go:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-neugram&quot;&gt;#!/usr/bin/ng

import &quot;os&quot;
import &quot;fmt&quot;

f := os.Create(&quot;hello.txt&quot;)
fmt.Fprintf(f, &quot;Hello, World!\n&quot;)
fmt.Fprintf(f, &quot;Next line.\n&quot;)
f.Close()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The elided errors in the Neugram program will turn into panics if they are non-nil. The result is a script which is not too much wordier than the python version, while taking advantage of all my Go knowledge. If you are a Go programmer, this may be interesting to you.&lt;/p&gt;
&lt;h2&gt;What’s next&lt;/h2&gt;
&lt;p&gt;Go is syntactically a big language. Neugram’s front end has to match it, and that’s a lot of work, much of which is still to do. The &lt;em&gt;mountain of bugs&lt;/em&gt; is my first priority.&lt;/p&gt;
&lt;p&gt;If you want to help out, try writing something and file all the bugs you run into (you will) on the &lt;a href=&quot;https://github.com/neugram/ng/issues&quot;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After that there are several other language extensions I’m interested in, focusing on making Neugram a good language for data analysis. In particular:&lt;/p&gt;
&lt;p&gt;I am hesitant to enter any discussion about programming languages, especially given how much more work Neugram needs to be generally usable. But there is only so long I can work quietly on a project, so I may as well at least admit it exists. Let me know what you think on the &lt;a href=&quot;https://groups.google.com/forum/#!forum/neugram&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;By David Crawshaw (&lt;a href=&quot;https://twitter.com/davidcrawshaw&quot;&gt;@davidcrawshaw&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://neugram.io/&quot;&gt;Home&lt;/a&gt;, &lt;a href=&quot;https://neugram.io/blog/&quot;&gt;Blog Archive&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Fri, 03 Nov 2017 23:22:12 +0000</pubDate>
<dc:creator>golangnews</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://neugram.io/blog/neugram-briefly</dc:identifier>
</item>
</channel>
</rss>