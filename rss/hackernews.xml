<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Reddit and the Struggle to Detoxify the Internet</title>
<link>https://www.newyorker.com/magazine/2018/03/19/reddit-and-the-quest-to-detoxify-the-internet?currentPage=all</link>
<guid isPermaLink="true" >https://www.newyorker.com/magazine/2018/03/19/reddit-and-the-quest-to-detoxify-the-internet?currentPage=all</guid>
<description>&lt;div class=&quot;SectionBreak__sectionBreak___1ppA7&quot; readability=&quot;177&quot;&gt;
&lt;p&gt;Which Web sites get the most traffic? According to the ranking service Alexa, the top three sites in the United States, as of this writing, are Google, YouTube, and Facebook. (Porn, somewhat hearteningly, doesn’t crack the top ten.) The rankings don’t reflect everything—the dark Web, the nouveau-riche recluses harvesting bitcoin—but, for the most part, people online go where you’d expect them to go. The only truly surprising entry, in fourth place, is Reddit, whose astronomical popularity seems at odds with the fact that many Americans have only vaguely heard of the site and have no real understanding of what it is. A link aggregator? A microblogging platform? A social network?&lt;/p&gt;
&lt;p&gt;To its devotees, Reddit feels proudly untamed, one of the last Internet giants to resist homogeneity. Most Reddit pages have a throwback aesthetic, with a few crudely designed graphics and a tangle of text: an original post, comments on the post, responses to the comments, responses to the responses. That’s pretty much it. Reddit is made up of more than a million individual communities, or subreddits, some of which have three subscribers, some twenty million. Every subreddit is devoted to a specific kind of content, ranging from vital to trivial: r/News, r/Politics, r/Trees (for marijuana enthusiasts), r/MarijuanaEnthusiasts (for tree enthusiasts), r/MildlyInteresting (“for photos that are, you know, mildly interesting”). Some people end up on Reddit by accident, find it baffling, and never visit again. But people who do use it—redditors, as they’re called—often use it all day long, to the near-exclusion of anything else. “For a while, we called ourselves the front page of the Internet,” Steve Huffman, Reddit’s C.E.O., said recently. “These days, I tend to say that we’re a place for open and honest conversations—‘open and honest’ meaning authentic, meaning messy, meaning the best and worst and realest and weirdest parts of humanity.”&lt;/p&gt;
&lt;p&gt;On November 23, 2016, shortly after President Trump’s election, Huffman was at his desk, in San Francisco, perusing the site. It was the day before Thanksgiving. Reddit’s administrators had just deleted a subreddit called r/Pizzagate, a forum for people who believed that high-ranking staffers of Hillary Clinton’s Presidential campaign, and possibly Clinton herself, were trafficking child sex slaves. The evidence, as extensive as it was unpersuasive, included satanic rituals, a map printed on a handkerchief, and an elaborate code involving the words “cheese” and “pizza.” In only fifteen days of existence, the Pizzagate subreddit had attracted twenty thousand subscribers. Now, in its place, was a scrubbed white page with the message “This community has been banned.”&lt;/p&gt;
&lt;p&gt;The reason for the ban, according to Reddit’s administrators, was not the beliefs of people on the subreddit, but the way they’d behaved—specifically, their insistence on publishing their enemies’ private phone numbers and addresses, a clear violation of Reddit’s rules. The conspiracy theorists, in turn, claimed that they’d been banned because Reddit administrators were part of the conspiracy. (Less than two weeks after Pizzagate was banned, a man fired a semiautomatic rifle inside a D.C. pizzeria called Comet Ping Pong, in an attempt to “self-investigate” claims that the restaurant’s basement was a dungeon full of kidnapped children. Comet Ping Pong does not have a basement.)&lt;/p&gt;
&lt;p&gt;Some of the conspiracy theorists left Reddit and reunited on Voat, a site made by and for the users that Reddit sloughs off. (Many social networks have such Bizarro networks, which brand themselves as strongholds of free speech and in practice are often used for hate speech. People banned from Twitter end up on Gab; people banned from Patreon end up on Hatreon.) Other Pizzagaters stayed and regrouped on r/The_Donald, a popular pro-Trump subreddit. Throughout the Presidential campaign, The_Donald was a hive of Trump boosterism. By this time, it had become a hermetic subculture, full of inside jokes and ugly rhetoric. The community’s most frequent commenters, like the man they’d helped propel to the Presidency, were experts at testing boundaries. Within minutes, they started to express their outrage that Pizzagate had been deleted.&lt;/p&gt;
&lt;p&gt;Redditors are pseudonymous, and their pseudonyms are sometimes prefaced by “u,” for “username.” Huffman’s is Spez. As he scanned The_Donald, he noticed that hundreds of the most popular comments were about him:&lt;/p&gt;
&lt;p&gt;“fuck u/spez”&lt;/p&gt;
&lt;p&gt;“u/spez is complicit in the coverup”&lt;/p&gt;
&lt;p&gt;“u/spez supports &lt;em class=&quot;small&quot;&gt;child rape&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;One commenter simply wrote “u/&lt;em class=&quot;small&quot;&gt;SPEZ IS A CUCK&lt;/em&gt;,” in bold type, a hundred and ten times in a row.&lt;/p&gt;
&lt;p&gt;Huffman, alone at his computer, wondered whether to respond. “I consider myself a troll at heart,” he said later. “Making people bristle, being a little outrageous in order to add some spice to life—I get that. I’ve done that.” Privately, Huffman imagined The_Donald as a misguided teen-ager who wouldn’t stop misbehaving. “If your little brother flicks your ear, maybe you ignore it,” he said. “If he flicks your ear a hundred times, or punches you, then maybe you give him a little smack to show you’re paying attention.”&lt;/p&gt;
&lt;div class=&quot;Callout__inset-left___2rZjf&quot; data-type=&quot;callout&quot; data-callout=&quot;inset-left&quot;&gt;
&lt;div class=&quot;CartoonEmbed__container___vf5AM&quot;&gt;
&lt;div class=&quot;placeholder&quot;&gt;

&lt;div class=&quot;placeholder-content&quot;&gt;
&lt;div class=&quot;Image__image___1PhYl&quot; role=&quot;button&quot; tabindex=&quot;0&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://media.newyorker.com/cartoons/5aa0831fc030133a76d22e9d/master/w_727,c_limit/180319_a21751.jpg&quot; title=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;span class=&quot;ImageCaption__caption___1EOQO ImageCaption__caption___1EOQO&quot;&gt;“He’s unbeatable on carpet.”&lt;/span&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Although redditors didn’t yet know it, Huffman could edit any part of the site. He wrote a script that would automatically replace his username with those of The_Donald’s most prominent members, directing the insults back at the insulters in real time: in one comment, “Fuck u/Spez” became “Fuck u/Trumpshaker”; in another, “Fuck u/Spez” became “Fuck u/MAGAdocious.”&lt;/p&gt;
&lt;p&gt;The_Donald’s users saw what was happening, and they reacted by spinning a conspiracy theory that, in this case, turned out to be true.&lt;/p&gt;
&lt;p&gt;“Manipulating the words of your users is fucked,” a commenter wrote.&lt;/p&gt;
&lt;p&gt;“Even Facebook and Twitter haven’t stooped this low.”&lt;/p&gt;
&lt;p&gt;“Trust nothing.”&lt;/p&gt;
&lt;p&gt;The incident became known as Spezgiving, and it’s still invoked, internally and externally, as a paradigmatic example of tech-executive overreach. Social-media platforms must do something to rein in their users, the consensus goes, but not &lt;em&gt;that&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Huffman can no longer edit the site indiscriminately, but his actions laid bare a fact that most social-media companies go to great lengths to conceal—that, no matter how neutral a platform may seem, there’s always a person behind the curtain. “I fucked up,” Huffman wrote in an apology the following week. “More than anything, I want Reddit to heal, and I want our country to heal.” Implicit in his apology was a set of questions, perhaps the central questions facing anyone who worries about the current state of civic discourse. Is it possible to facilitate a space for open dialogue without also facilitating hoaxes, harassment, and threats of violence? Where is the line between authenticity and toxicity? What if, after technology allows us to reveal our inner voices, what we learn is that many of us are authentically toxic?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;SectionBreak__sectionBreak___1ppA7&quot; readability=&quot;162&quot;&gt;
&lt;p&gt;The only way to understand the Internet, at least at first, was by metaphor. “Web” and “page” and “superhighway” are metaphors. So are “link,” “viral,” “post,” and “stream.” Last year, the Supreme Court heard a case about whether it was constitutional to bar registered sex offenders from using social media. In order to answer that question, the Justices had to ask another question: What is social media? In sixty minutes of oral argument, Facebook was compared to a park, a playground, an airport terminal, a polling place, and a town square.&lt;/p&gt;
&lt;p&gt;It might be most helpful to compare a social network to a party. The party starts out small, with the hosts and a few of their friends. Then word gets out and strangers show up. People take cues from the environment. Mimosas in a sun-dappled atrium suggest one kind of mood; grain alcohol in a moldy basement suggests another. Sometimes, a pattern emerges on its own. Pinterest, a simple photo-sharing site founded by three men, happened to catch on among women aspiring to an urbane life style, and today the front page is often a collage of merino scarves and expensive glassware. In other cases, the gatekeeping seems more premeditated. If you’re fourteen, Snapchat’s user interface is intuitive; if you’re twenty-two, it’s intriguing; if you’re over thirty-five, it’s impenetrable. This encourages old people to self-deport.&lt;/p&gt;
&lt;p&gt;Huffman and his college roommate, Alexis Ohanian, founded Reddit a few weeks after graduating from the University of Virginia, in 2005. The first people to show up were, like the co-founders, the kind of strong-headed young men who got excited about computer programming, video games, and edgy, self-referential humor. Reddit’s system was purely democratic, which is to say anarchic. Anyone could post any link, and the ones that got the most “upvotes” would rise to the top of a page. At the time, Facebook was available only to college students, and before joining it you had to provide your real name, your birthday, and a valid school e-mail address—the equivalent of being carded at the door. To join Reddit, all you needed was a username that hadn’t been claimed yet. You could start as many anonymous accounts as you wanted, which gave rise to creativity, and also to mischief.&lt;/p&gt;
&lt;p&gt;Back then, Ohanian was ungainly and clean-shaven, and he was often photographed in a hoodie and with a goofy smile. At his wedding, last year, wearing a beard and an Armani tuxedo, he was nearly unrecognizable. (The paparazzi weren’t too interested in him, though, given that his bride was Serena Williams.) Huffman, on the other hand, has always looked more or less the same: bright-blue eyes, chipmunk teeth, and a thatch of blond hair.&lt;/p&gt;
&lt;p&gt;A few months after Reddit launched, Huffman created the first constraints. People were posting links to vulgar and violent content—which was fine, except that Huffman wanted users to have some idea of what they were about to click on, so that they could avoid, say, inadvertently opening porn in front of their bosses. Huffman labelled some content N.S.F.W.—not safe for work—and separated it from everything else. That was the end of pure democracy.&lt;/p&gt;
&lt;p&gt;In 2006, Ohanian and Huffman sold Reddit to Condé Nast, a media conglomerate that owns more than twenty magazines, including this one. (Reddit now operates independently.) The sale made them twenty-two-year-old millionaires, but they didn’t fit in at a large corporation, and three years later they left. In their absence, the party got bigger and weirder, and ominous cliques started to gather in the corners. One popular subreddit, r/Jailbait, was devoted to sexually suggestive photos of young-looking women. This was profoundly creepy, but probably not illegal—the subreddit’s users swore that all the women in the photos were eighteen or older—and Reddit allowed the community to grow. In September of 2011, Anderson Cooper discussed the subreddit on CNN. “It’s pretty amazing that a big corporation would have something like this, which reflects badly on it,” he said. Traffic to Jailbait quadrupled overnight. Twelve days later, after someone in the group apparently shared a nude photo of a fourteen-year-old girl, the community was banned. And yet the founder of Jailbait, an infamous troll who went by u/Violentacrez, was allowed to stay on Reddit, as were some four hundred other communities he’d created—r/Jewmerica, r/ChokeABitch, and worse. (Yes, it gets worse.)&lt;/p&gt;
&lt;p&gt;Yishan Wong, an engineer who had worked at Facebook, was then Reddit’s C.E.O. He implied that he’d banned Jailbait only because the subreddit had violated U.S. law. “We stand for free speech,” he wrote in an internal post, in 2012. Reddit’s goal, he continued, was to “become a universal platform for human discourse.” Therefore, “it would not do if, in our youth, we decided to censor things simply because they were distasteful.”&lt;/p&gt;
&lt;p&gt;At the time, Wong’s free-speech absolutism was ubiquitous in Silicon Valley. Twitter’s executives referred to their company as “the free-speech wing of the free-speech party.” Facebook’s original self-description, “an online directory that connects people through social networks at colleges,” had evolved into a grandiose mission statement: “Facebook gives people the power to share and make the world more open and connected.” With the Arab Spring fresh in everyone’s mind, few questioned the assumption that “giving people the power” would inevitably lead to social progress. Barack Obama, who had been carried into office by a social-media groundswell, often expressed a similar optimism about the salubrious effects of the Internet. “In the twenty-first century, information is power,” Obama said in a 2011 speech on Middle East policy. “The truth cannot be hidden. . . . Such open discourse is important even if what is said does not square with our worldview.”&lt;/p&gt;
&lt;p&gt;Wong left the company in 2014, after two and a half years. His successor was Ellen Pao, a former venture capitalist. She lasted eight months. Early in her tenure, Reddit announced a crackdown on involuntary pornography. If you found a compromising photo of yourself circulating on Reddit without your consent, you could report it and the company would remove it. In retrospect, this seems like a straightforward business decision, but some redditors treated it as the first in an inevitable parade of horrors. “This rule is stupid and suppresses our rights,” u/penisfuckermcgee commented.&lt;/p&gt;
&lt;p&gt;A few months later, Reddit banned five of its most egregious communities, including r/FatPeopleHate and r/ShitNiggersSay. Again redditors were apoplectic (“We may as well take a one way ticket to North Korea”). Almost every day, strident misogynists called Pao a tyrant, an “Asian slut,” or worse. (Yes, it gets worse.) She resigned in July, 2015. “The Internet started as a bastion for free expression,” she wrote in the Washington &lt;em&gt;Post&lt;/em&gt;. “But that balancing act is getting harder. The trolls are winning.”&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;SectionBreak__sectionBreak___1ppA7&quot; readability=&quot;185.58098174057&quot;&gt;
&lt;p&gt;Over time, social networks have turned into institutions. More than two billion people now use Facebook. In other words, the company has achieved its mission of making the world more connected. In 2016, that meant, among other things, making the American electorate more connected to white supremacists, armed militias, Macedonian fake-news merchants, and micro-targeted campaign ads purchased in rubles. “I continue to believe Mr. Trump will not be President,” Obama said that year, despite the mounting aggression in some online forums. “And the reason is because I have a lot of faith in the American people.” (In response to Obama’s remarks, a commenter on The_Donald wrote, “&lt;em class=&quot;small&quot;&gt;FUCK THAT LOW ENERGY CUCK&lt;/em&gt;!”)&lt;/p&gt;
&lt;p&gt;Shortly after the election, Brad Parscale, the Trump campaign’s top digital strategist, &lt;a href=&quot;https://www.wired.com/2016/11/facebook-won-trump-election-not-just-fake-news/&quot; target=&quot;_blank&quot; class=&quot;ArticleBody__link___1FS03&quot;&gt;told &lt;em&gt;Wired&lt;/em&gt;&lt;/a&gt;, “Facebook and Twitter were the reason we won this thing.” Reddit was also an important part of Trump’s strategy. Parscale wrote—on Reddit, naturally—that “members here provided considerable growth and reach to our campaign.” The_Donald, in particular, proved a fecund host cell for viral memes. On July 2, 2016, Trump tweeted a photo collage of Hillary Clinton, piles of cash, and the phrase “Most Corrupt Candidate Ever!” written inside a six-pointed star. When Trump’s critics called attention to the image’s anti-Semitic implications, The_Donald’s users rushed to Trump’s defense, posting photos of other six-pointed stars in innocuous contexts. “Where is the outrage from the liberal left on this one?” a user wrote, beneath a photo of a “Frozen”-themed sticker book with a star on its cover. A few hours later, Trump tweeted the same photo, with a version of the same question, followed by “Dishonest media! #Frozen.”&lt;/p&gt;
&lt;p&gt;During the campaign, Trump, or someone typing on his behalf, participated in Reddit’s signature interview format—an A.M.A., for “ask me anything.” In response to a question about the “protected class of media elites,” Trump wrote, “I have been very concerned about media bias and the total dishonesty of the press. I think new media is a great way to get out the truth.” This drew hundreds of jubilant comments (u/&lt;em class=&quot;small&quot;&gt;RAINBOW&lt;/em&gt;_&lt;em class=&quot;small&quot;&gt;DILDO&lt;/em&gt;: “daddy &lt;em class=&quot;small&quot;&gt;YES&lt;/em&gt;”; u/CantContheDon: “&lt;em class=&quot;small&quot;&gt;WE’RE THE MEDIA NOW&lt;/em&gt;”).&lt;/p&gt;
&lt;p&gt;The_Donald, with more than half a million subscribers, is by far the biggest pro-Trump subreddit, but it ranks just below No. 150 on the list of all subreddits; it’s roughly the same size as r/CryptoCurrency and r/ComicBooks. “Some people on The_Donald are expressing their genuine political beliefs, and obviously that’s something we want to encourage,” Huffman said. “Others are maybe not expressing sincere beliefs, but are treating it more like a game—If I post this ridiculous or offensive thing, can I get people to upvote it? And then some people, to quote ‘The Dark Knight,’ just want to watch the world burn.” On some smaller far-right subreddits, the discourse is more unhinged. One, created in July of 2016, was called r/Physical_Removal. According to its “About Us” section, it was a subreddit for people who believe that liberals “qualify to get a helicopter ride.” “Helicopter ride,” an allusion to Augusto Pinochet’s reputed habit of throwing Communists out of helicopters, is alt-right slang for murder.&lt;/p&gt;
&lt;p&gt;The_Donald accounts for less than one per cent of Reddit’s traffic, but it occupies far more than one per cent of the Reddit-wide conversation. Trolls set a cunning trap. By ignoring their provocations, you risk seeming complicit. By responding, you amplify their message. Trump, perhaps the world’s most skilled troll, can get attention whenever he wants, simply by being outrageous. Traditional journalists and editors can decide to resist the bait, and sometimes they do, but that option isn’t available on user-generated platforms. Social-media executives claim to transcend subjectivity, and they have designed their platforms to be feedback machines, giving us not what we claim to want, nor what might be good for us, but what we actually pay attention to.&lt;/p&gt;
&lt;p&gt;There are no good solutions to this problem, and so tech executives tend to discuss it as seldom as possible, and only in the airiest of platitudes. Twitter has rebuffed repeated calls to ban President Trump’s account, despite his many apparent violations of company policy. (If tweeting that North Korea “won’t be around much longer” doesn’t break Twitter’s rule against “specific threats of violence,” it’s not clear what would.) Last fall, on his Facebook page, Mark Zuckerberg addressed—sort of, obliquely—the widespread critique that his company was exacerbating political polarization. “We’ll keep working to ensure the integrity of free and fair elections around the world, and to ensure our community is a platform for all ideas and force for good in democracy,” he wrote, then stepped away as a global howl of frustration grew in the comments.&lt;/p&gt;
&lt;div class=&quot;Callout__inset-left___2rZjf&quot; data-type=&quot;callout&quot; data-callout=&quot;inset-left&quot;&gt;
&lt;div class=&quot;CartoonEmbed__container___vf5AM&quot;&gt;
&lt;div class=&quot;placeholder&quot;&gt;

&lt;div class=&quot;placeholder-content&quot;&gt;
&lt;div class=&quot;Image__image___1PhYl&quot; role=&quot;button&quot; tabindex=&quot;0&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://media.newyorker.com/cartoons/5aa0831e09d3ca28d8f47d0b/master/w_727,c_limit/180319_a21483.jpg&quot; title=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I asked a few social-media executives to talk to me about all this. I didn’t expect definitive answers, I told them; I just wanted to hear them think through the questions. Unsurprisingly, no one jumped at the chance. Twitter mostly ignored my e-mails. Snapchat’s P.R. representatives had breakfast with me once, then ignored my e-mails. Facebook’s representatives talked to me for weeks, asking precise, intelligent questions, before they started to ignore my e-mails.&lt;/p&gt;
&lt;p&gt;Reddit has more reason to be transparent. It’s big, but doesn’t feel indispensable to most Internet users or, for that matter, to most advertisers. Moreover, Anderson Cooper’s CNN segment was hardly the only bit of vividly terrible press that Reddit has received over the years. All social networks contain vitriol and bigotry, but not all social networks are equally associated with these things in the public imagination. Recently, I typed “Reddit is” into Google. Three of the top suggested auto-completions were “toxic,” “cancer,” and “hot garbage.”&lt;/p&gt;
&lt;p&gt;Huffman, after leaving Condé Nast, spent a few months backpacking in Costa Rica, then founded a travel company called Hipmunk. In July, 2015, he returned to Reddit as C.E.O. In a post about his “top priority” in the job, he wrote, “The overwhelming majority of content on reddit comes from wonderful, creative, funny, smart, and silly communities. There is also a dark side, communities whose purpose is reprehensible, and we don’t have any obligation to support them. . . . Neither Alexis nor I created reddit to be a bastion of free speech.” This was shocking, and about half true. When free-speech absolutism was in vogue, Reddit’s co-founders were as susceptible to its appeal as anyone. In 2012, a &lt;em&gt;Forbes&lt;/em&gt; reporter asked Ohanian how the Founding Fathers might have reacted to Reddit. “A bastion of free speech on the World Wide Web? I bet they would like it,” Ohanian &lt;a href=&quot;https://www.forbes.com/sites/kashmirhill/2012/02/02/reddit-co-founder-alexis-ohanians-rosy-outlook-on-the-future-of-politics/3/#6a0fdcf86c46&quot; target=&quot;_blank&quot; class=&quot;ArticleBody__link___1FS03&quot;&gt;responded&lt;/a&gt;. “I would love to imagine that ‘Common Sense’ would have been a self-post on Reddit, by Thomas Paine, or actually a redditor named T_Paine.”&lt;/p&gt;
&lt;p&gt;Still, Ohanian and Huffman never took their own rhetoric too literally. The site’s rules were brief and vague, and their unwritten policy was even simpler. “We always banned people,” Huffman told me. “We just didn’t talk about it very much.” Because Reddit was so small, and misbehavior relatively rare, Huffman could do most of the banning himself, on an ad-hoc basis. “It wasn’t well thought out or even articulated, really. It was ‘That guy has the N-word in his username? Fuck that.’ Delete account.”&lt;/p&gt;
&lt;p&gt;As C.E.O., Huffman continued the trend Pao had started, banning a few viciously racist subreddits such as r/Coontown. “There was pushback,” Huffman told me. “But I had the moral authority, as the founder, to take it in stride.” If Pao was like a forbearing parent, then Huffman’s style was closer to “I brought you into this world, and I can take you out of it.” “Yes, I know that it’s really hard to define hate speech, and I know that any way we define it has the potential to set a dangerous precedent,” he told me. “I also know that a community called Coontown is not good for Reddit.” In most cases, Reddit didn’t suspend individual users’ accounts, Huffman said: “We just took away the spaces where they liked to hang out, and went, ‘Let’s see if this helps.’ ”&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;SectionBreak__sectionBreak___1ppA7&quot; readability=&quot;66&quot;&gt;
&lt;p&gt;Reddit’s headquarters, in a former radio tower in downtown San Francisco, look like a stereotypical startup office: high concrete ceilings, a large common area with beer and kombucha on tap. Each desk is decorated aggressively with personal flair—a “Make Reddit Great Again” hat, a glossy print magazine called &lt;em&gt;Meme Insider&lt;/em&gt;. Working at Reddit requires paying close anthropological attention to the motley tastes of redditors, and it’s not uncommon to see groups of fit, well-dressed employees cheerfully discussing the most recent post on r/CatDimension or r/PeopleFuckingDying.&lt;/p&gt;
&lt;p&gt;The first morning I visited the office, I ran into Huffman, who was wearing jeans, a T-shirt, and Adidas indoor-soccer shoes, as he tried to persuade an employee to buy a ticket to Burning Man. Huffman is far more unfiltered than other social-media executives, and every time he and I talked in the presence of Reddit’s head of P.R., he said at least one thing that made her wince. “There’s only one Steve,” Ohanian told me. “No matter when you catch him, for better or worse, that’s the Steve you’re gonna get.” I had a list of delicate topics that I planned to ask Huffman about eventually, including allegations of vote manipulation on Reddit’s front page and his personal feelings about Trump. Huffman raised all of them himself on the first day. “My political views might not be exactly what you’d predict,” he said. “I’m a gun owner, for example. And I don’t care all that much about politics, compared to other things.” He speaks in quick bursts, with an alpha-nerd combination of introversion and confidence. His opinion about Trump is that he is incompetent and that his Presidency has mostly been a failure. But, he told me, “I’m open to counterarguments.”&lt;/p&gt;
&lt;p&gt;That afternoon, I watched Huffman make a sales pitch to a group of executives from a New York advertising agency. Like many platforms, Reddit has struggled to convert its huge audience into a stable revenue stream, and its representatives spend a lot of time trying to convince potential advertisers that Reddit is not hot garbage. Huffman sat at the head of a long table, facing a dozen men and women in suits. The “snarky, libertarian” ethos of early Reddit, he said, “mostly came from me as a twenty-one-year-old. I’ve since grown out of that, to the relief of everyone.” The executives nodded and chuckled. “We had a lot of baggage,” he continued. “We let the story get away from us. And now we’re trying to get our shit together.”&lt;/p&gt;
&lt;p&gt;Later, Huffman told me that getting Reddit’s shit together would require continual intervention. “I don’t think I’m going to leave the office one Friday and go, ‘Mission accomplished—we fixed the Internet,’ ” he said. “Every day, you keep visiting different parts of the site, opening this random door or that random door—‘What’s it like in here? Does this feel like a shitty place to be? No, people are generally having a good time, nobody’s hatching any evil plots, nobody’s crying. O.K., great.’ And you move on to the next room.”&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;SectionBreak__sectionBreak___1ppA7&quot; readability=&quot;103.61266294227&quot;&gt;
&lt;p&gt;In January, Facebook announced that it would make news less visible in its users’ feeds. “Facebook was originally designed to connect friends and family—and it has excelled at that,” a product manager named Samidh Chakrabarti wrote on a company blog. “But as unprecedented numbers of people channel their political energy through this medium, it’s being used in unforeseen ways with societal repercussions that were never anticipated.” It wasn’t the most effusive mea culpa in history, but by Facebook’s standards it amounted to wailing and gnashing of teeth. “We want to make sure that our products are not just fun, but are good for people,” Mark Zuckerberg &lt;a href=&quot;https://www.nytimes.com/2018/01/11/technology/facebook-news-feed.html&quot; target=&quot;_blank&quot; class=&quot;ArticleBody__link___1FS03&quot;&gt;told the &lt;em&gt;Times&lt;/em&gt;&lt;/a&gt;. Direct pronouncements from him are so rare that even this pabulum was treated as push-alert-worthy news.&lt;/p&gt;
&lt;p&gt;In retrospect, although Facebook denies this, it seems clear that the company was preparing for a blow that was about to land. On February 16th, the special counsel Robert Mueller filed an indictment against several Russian individuals and businesses, including the Internet Research Agency, a company aligned with the Kremlin. The indictment mentioned Facebook thirty-five times, and not in ways that made the platform seem like a “force for good in democracy.” According to recent reporting by the Daily Beast, the Internet Research Agency also seeded Reddit with disinformation during the 2016 election. (A group of impostors even tried to set up an A.M.A.) Last Monday, the Washington &lt;em&gt;Post&lt;/em&gt; &lt;a href=&quot;https://www.washingtonpost.com/news/the-switch/wp/2018/03/05/senate-investigators-want-answers-from-reddit-and-tumblr-on-russia-meddling/?utm_term=.16f984d510f2&quot; target=&quot;_blank&quot; class=&quot;ArticleBody__link___1FS03&quot;&gt;reported&lt;/a&gt; that the Senate Intelligence Committee will question Reddit executives about this; the same day, Huffman admitted that the company had “found and removed a few hundred accounts” associated with Russian propaganda. (A Reddit representative told me that the company has been coöperating with congressional investigators “for months,” although they haven’t spoken about it publicly.) As in all such disinformation campaigns, the Russians did not act alone: their messages were upvoted and repeated by thousands of unsuspecting Americans. “I believe the biggest risk we face as Americans is our own ability to discern reality from nonsense,” Huffman wrote. “I wish there was a solution as simple as banning all propaganda, but it’s not that easy.”&lt;/p&gt;
&lt;p&gt;Zuckerberg recently set a “personal challenge” for himself: “enforcing our policies and preventing misuse of our tools.” This seems to be a reversal for Zuckerberg, who was once a fake-news truther. Two days after the 2016 election, he said, “The idea that fake news on Facebook, of which it’s a very small amount of the content, influenced the election in any way, I think, is a pretty crazy idea. Voters make decisions based on their lived experience.” This was a pretty crazy idea, and Zuckerberg has been walking it back ever since. It’s obvious that what we see online affects how we think and feel. We know this in part because Facebook has done research on it. In 2012, without notice or permission, Facebook tweaked the feeds of nearly seven hundred thousand of its users, showing one group more posts containing “positive emotional content” and the other more “negative emotional content.” Two years later, Facebook declassified the experiment and published the results. Users were livid, and, after that, Facebook either stopped conducting secret experiments or stopped admitting to them. But the results of the experiment were clear: the people with happier feeds acted happier, and vice versa. The study’s authors called it “massive-scale emotional contagion.” Since then, social media has only grown in size and influence, and the persuasive tools available to advertisers, spies, politicians, and propagandists have only become sharper. During the 2016 election, a few Russian impostors affected many Americans’ beliefs and, presumably, votes. With another election coming up, most of the loopholes that the Russians exploited have not been closed, and the main loophole—the open, connected, massively contagious world of social media—might not be closable.&lt;/p&gt;
&lt;p&gt;When I raised this issue with Huffman over dinner last summer, he said, “I go back and forth on whether Reddit is the tail or the dog. I think it’s a bit of both.” First, he laid out the tail hypothesis: “Reddit is a reflection of reality. People are enthusiastic about Bernie or Trump in real life, so they go on Reddit and talk about how much they like Bernie or Trump. So far, so good.” Then he laid out the dog hypothesis, which his fellow social-media executives almost never acknowledge—that reality is also a reflection of social media. “All sorts of weird things can happen online,” he said. “Imagine I post a joke where the point is to be offensive—like, to imply, ‘This is something that a racist person would say’—but you misread the context and think, ‘Yeah, that racist guy has a good point.’ That kind of dynamic, I think, explains a lot of what happened on The_Donald, at least in the early days—someone keeps pushing a joke or a meme to see how far they can take it, and the answer turns out to be Pretty fucking far.”&lt;/p&gt;
&lt;p&gt;Leftist communities on Reddit often implore the company to ban The_Donald. So far, Huffman has demurred. “There are arguments on both sides,” he said, “but, ultimately, my view is that their anger comes from feeling like they don’t have a voice, so it won’t solve anything if I take away their voice.” He thought of something else to say, but decided against it. Then he took a swig of beer and said it anyway. “I’m confident that Reddit could sway elections,” he told me. “We wouldn’t do it, of course. And I don’t know how many times we could get away with it. But, if we really wanted to, I’m sure Reddit could have swayed at least this election, this once.” That’s a terrifying thought. It’s also almost certainly true.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;SectionBreak__sectionBreak___1ppA7&quot; readability=&quot;240&quot;&gt;
&lt;p&gt;On August 11th, Huffman’s alma mater, the University of Virginia, was overrun by white nationalists carrying torches. “I was on a plane when I saw the news, and I got really emotional,” Huffman said. He told his employees, “If any of these people are on Reddit, I want them gone. Nuke ’em.” This felt cathartic, but personal catharsis is an awful way to make policy. “Luckily, my team knew me well enough to go, ‘Steve, you’re pissed off right now. Let’s talk about it more rationally on Monday.’ ”&lt;/p&gt;
&lt;p&gt;Early the next week, Reddit banned Physical_Removal. In Charlottesville, James Alex Fields, one of the white nationalists, had driven a car into a crowd of counterprotesters, injuring nineteen and killing a woman named Heather Heyer. “This is a good thing,” the top post on Physical_Removal read. “They are mockeries of life and need to fucking go.” Reddit had a rule prohibiting content that “encourages or incites violence,” and this was a violation of that rule. Huffman said, “We’d had our eye on that community for a while, and it felt good to get rid of them, I have to say. But it still didn’t feel like enough.”&lt;/p&gt;
&lt;p&gt;“Encouraging or inciting violence” was a narrow standard, and Huffman and his team agreed to expand it. Four words became thirty-six: “Do not post content that encourages, glorifies, incites, or calls for violence or physical harm against an individual or a group of people; likewise, do not post content that glorifies or encourages the abuse of animals.” This, too, required interpretation, and forced the company to create a non-exhaustive list of exceptions (“educational, newsworthy, artistic, satire, documentary”). Still, it made the team’s intentions clearer. Jessica Ashooh, Reddit’s head of policy, spent four years as a policy consultant in Abu Dhabi. “I know what it’s like to live under censorship,” she said. “My internal check, when I’m arguing for a restrictive policy on the site, is Do I sound like an Arab government? If so, maybe I should scale it back.” On the other hand, she said, “people hide behind the notion that there’s a bright line between ideology and action, but some ideologies are inherently more violent than others.”&lt;/p&gt;
&lt;p&gt;In October, on the morning the new policy was rolled out, Ashooh sat at a long conference table with a dozen other employees. Before each of them was a laptop, a mug of coffee, and a few hours’ worth of snacks. “Welcome to the Policy Update War Room,” she said. “And, yes, I’m aware of the irony of calling it a war room when the point is to make Reddit less violent, but it’s too late to change the name.” The job of policing Reddit’s most pernicious content falls primarily to three groups of employees—the community team, the trust-and-safety team, and the anti-evil team—which are sometimes described, respectively, as good cop, bad cop, and RoboCop. Community stays in touch with a cross-section of redditors, asking them for feedback and encouraging them to be on their best behavior. When this fails and redditors break the rules, trust and safety punishes them. Anti-evil, a team of back-end engineers, makes software that flags dodgy-looking content and sends that content to humans, who decide what to do about it.&lt;/p&gt;
&lt;p&gt;Ashooh went over the plan for the day. All at once, they would replace the old policy with the new policy, post an announcement explaining the new policy, warn a batch of subreddits that they were probably in violation of the new policy, and ban another batch of subreddits that were flagrantly, irredeemably in violation. I glanced at a spreadsheet with a list of the hundred and nine subreddits that were about to be banned (r/KKK, r/KillAllJews, r/KilltheJews, r/KilltheJoos), followed by the name of the employee who would carry out each deletion, and, if applicable, the reason for the ban (“mostly just swastikas?”). “Today we’re focussing on a lot of Nazi stuff and bestiality stuff,” Ashooh said. “Context matters, of course, and you shouldn’t get in trouble for posting a swastika if it’s a historical photo from the 1936 Olympics, or if you’re using it as a Hindu symbol. But, even so, there’s a lot that’s clear-cut.” I asked whether the same logic—that the Nazi flag was an inherently violent symbol—would apply to the Confederate flag, or the Soviet flag, or the flag under which King Richard fought the Crusades. “We can have those conversations in the future,” Ashooh said. “But we have to start somewhere.”&lt;/p&gt;
&lt;p&gt;At 10 &lt;em class=&quot;small&quot;&gt;a&lt;/em&gt;.&lt;em class=&quot;small&quot;&gt;m&lt;/em&gt;., the trust-and-safety team posted the announcement and began the purge. “Thank you for letting me do DylannRoofInnocent,” one employee said. “That was one of the ones I really wanted.”&lt;/p&gt;
&lt;p&gt;“What is ReallyWackyTicTacs?” another employee asked, looking down the list.&lt;/p&gt;
&lt;p&gt;“Trust me, you don’t want to know,” Ashooh said. “That was the most unpleasant shit I’ve ever seen, and I’ve spent a lot of time looking into Syrian war crimes.”&lt;/p&gt;
&lt;p&gt;Some of the comments on the announcement were cynical. “They don’t actually want to change anything,” one redditor wrote, arguing that the bans were meant to appease advertisers. “It was, in fact, never about free speech, it was about money.” One trust-and-safety manager, a young woman wearing a leather jacket and a ship captain’s cap, was in charge of monitoring the comments and responding to the most relevant ones. “Everyone seems to be taking it pretty well so far,” she said. “There’s one guy, freespeechwarrior, who seems very pissed, but I guess that makes sense, given his username.”&lt;/p&gt;
&lt;div class=&quot;Callout__inset-left___2rZjf&quot; data-type=&quot;callout&quot; data-callout=&quot;inset-left&quot;&gt;
&lt;div class=&quot;CartoonEmbed__container___vf5AM&quot;&gt;
&lt;div class=&quot;placeholder&quot;&gt;

&lt;div class=&quot;placeholder-content&quot;&gt;
&lt;div class=&quot;Image__image___1PhYl&quot; role=&quot;button&quot; tabindex=&quot;0&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://media.newyorker.com/cartoons/5aa0831e0a19141eb50335ba/master/w_727,c_limit/180319_a21730.jpg&quot; title=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;span class=&quot;ImageCaption__caption___1EOQO ImageCaption__caption___1EOQO&quot;&gt;“Are we gonna have to scrape the Daddy decal off the minivan?”&lt;/span&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;“People are making lists of all the Nazi subs getting banned, but nobody has noticed that we’re banning bestiality ones at the same time,” Ashooh said.&lt;/p&gt;
&lt;p&gt;“No one wants to admit it,” an employee said. “ ‘Guys, I was just browsing r/HorseCock and I couldn’t help but notice . . .’ ”&lt;/p&gt;
&lt;p&gt;The woman in the captain’s cap said, “O.K., someone just asked, ‘How will the exact phrase “kill yourself” be handled?’ ”&lt;/p&gt;
&lt;p&gt;“It all depends on context,” Ashooh said. “They’re going to get tired of hearing that, but it’s true.”&lt;/p&gt;
&lt;p&gt;“Uh-oh, looks like we missed a bestiality sub,” the woman in the captain’s cap said. “Apparently, SexWithDogs was on our list, but DogSex was not.”&lt;/p&gt;
&lt;p&gt;“Did you go to DogSex?” Ashooh said.&lt;/p&gt;
&lt;p&gt;“Yep.”&lt;/p&gt;
&lt;p&gt;“And what’s on it?”&lt;/p&gt;
&lt;p&gt;“I mean . . .”&lt;/p&gt;
&lt;p&gt;“Are there people having sex with dogs?”&lt;/p&gt;
&lt;p&gt;“Oh, yes, very much.”&lt;/p&gt;
&lt;p&gt;“Yeah, ban it.”&lt;/p&gt;
&lt;p&gt;“I’m going to get more cheese sticks,” the woman in the captain’s cap said, standing up. “How many cheese sticks is too many in one day? At what point am I encouraging or glorifying violence against my own body?”&lt;/p&gt;
&lt;p&gt;“It all depends on context,” Ashooh said.&lt;/p&gt;
&lt;p&gt;I understood why other companies had been reluctant to let me see something like this. Never again would I be able to read a lofty phrase about a social-media company’s shift in policy—“open and connected,” or “encouraging meaningful interactions”—without imagining a group of people sitting around a conference room, eating free snacks and making fallible decisions. Social networks, no matter how big they get or how familiar they seem, are not ineluctable forces but experimental technologies built by human beings. We can tell ourselves that these human beings aren’t gatekeepers, or that they have cleansed themselves of all bias and emotion, but this would have no relation to reality. “I have biases, like everyone else,” Huffman told me once. “I just work really hard to make sure that they don’t prevent me from doing what’s right.”&lt;/p&gt;
&lt;p&gt;In a perfect world, a thirty-four-year-old in soccer shoes wouldn’t have such fearsome power. In the world we live in, the least social-media executives can do is acknowledge that power. Last November, a group of computer scientists at three universities published a study called “You Can’t Stay Here: The Efficacy of Reddit’s 2015 Ban Examined Through Hate Speech.” They parsed a data set of a hundred million Reddit posts. Did the ban “diminish hateful behavior” over all, or did it merely “relocate such behavior to different parts of the site”? They concluded that the ban had worked: “Users participating in the banned subreddits either left the site or (for those who remained) dramatically reduced their hate speech usage.”&lt;/p&gt;
&lt;p&gt;Melissa Tidwell, Reddit’s general counsel, told me, “I am so tired of people who repeat the mantra ‘Free speech!’ but then have nothing else to say. Look, free speech is obviously a great ideal to strive toward. Who doesn’t love freedom? Who doesn’t love speech? But then, in practice, every day, gray areas come up.” Earlier that day, I’d watched Tidwell and a colleague spend several minutes debating whether a soft-core porn subreddit, r/GentlemenBoners, should be included in standard search results.&lt;/p&gt;
&lt;p&gt;“Does free speech mean literally anyone can say anything at any time?” Tidwell continued. “Or is it actually more conducive to the free exchange of ideas if we create a platform where women and people of color can say what they want without thousands of people screaming, ‘Fuck you, light yourself on fire, I know where you live’? If your entire answer to that very difficult question is ‘Free speech,’ then, I’m sorry, that tells me that you’re not really paying attention.”&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;SectionBreak__sectionBreak___1ppA7&quot; readability=&quot;188&quot;&gt;
&lt;p&gt;It has become a tradition for tech companies to release elaborate, self-referential jokes every April Fools’ Day. The point is to generate some free publicity that will make the company seem quirky and relatable, but it can also have the opposite effect, especially when the premise of the joke is Silicon Valley’s unprecedented power. A few years ago, Twitter announced that it would start charging for vowels. Last year, Google shared a mockup of its new data center on Mars, and Amazon revealed voice-recognition software that would take commands from pets. The companies hadn’t actually initiated any of these projects, but they probably could, one day, if they wanted to. Get it?&lt;/p&gt;
&lt;p&gt;Last April Fools’, instead of a parody announcement, Reddit unveiled a genuine social experiment. It was called r/Place, and it was a blank square, a thousand pixels by a thousand pixels. In the beginning, all million pixels were white. Once the experiment started, anyone could change a single pixel, anywhere on the grid, to one of sixteen colors. The only restriction was speed: the algorithm allowed each redditor to alter just one pixel every five minutes. “That way, no one person can take over—it’s too slow,” Josh Wardle, the Reddit product manager in charge of Place, explained. “In order to do anything at scale, they’re gonna have to coöperate.”&lt;/p&gt;
&lt;p&gt;Place had been active for about twenty minutes when I stopped by, and Wardle was huddled over his laptop, frantically refreshing dozens of tabs. So far, the square was mostly blank, with a few stray dots blinking in and out of existence. But redditors were making plans in the comments and, in true Reddit fashion, clinging to those plans with cultish intensity. The Blue Empire was conspiring to turn the whole square blue; the Red Empire vowed to make it red; already, they were on a war footing. Other groups planned elaborate messages, fractal patterns, and references to various memes. A multi-partisan group—leftists, Trump supporters, patriotic libertarians, and pre-political teen-agers—decided to draw an American flag in the center of the square. They congregated at r/AmericanFlagInPlace, where they hashed out the exact dimensions, the shapes of the stars and stripes, and strategies for repelling invaders. Meanwhile, a group of nihilists at r/BlackVoid prepared to blot out whatever the other groups created.&lt;/p&gt;
&lt;p&gt;Wardle went to great lengths to show me that Place was a pure democracy—the algorithm was designed so that, once it went live, all he could do was watch, along with everyone else. Now that he was watching, he seemed deeply nervous. “The idea was ‘Let’s put up a very simple microcosm of the Internet and just see what happens,’ ” he said. “Reddit itself is not the most complex idea. It’s sort of a blank canvas. The community takes that and does all sorts of creative things with it.”&lt;/p&gt;
&lt;p&gt;“And some terrible things,” I said.&lt;/p&gt;
&lt;div class=&quot;CneEmbed__cneEmbed___s8Ijz&quot; readability=&quot;6&quot;&gt;

&lt;div class=&quot;CneEmbed__embedCaption___9Ig9I&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span class=&quot;ImageCaption__caption___1EOQO ImageCaption__caption___1EOQO&quot;&gt;The idea behind r/Place was to put up a very simple microcosm of the Internet and see what happens.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;He paused. “I’m pretty confident,” he said. “I’d be lying if I said I was a hundred per cent confident.” Already, one of the top comments on Place read, “I give this an hour until swastikas.” Later, one of Wardle’s colleagues told me, “That was what kept Josh up at night. Before this went live, he was literally calculating, ‘O.K., it takes a minimum of seventeen pixels to make a swastika—what if we open this up to the world, and the headline the next day is “&lt;em class=&quot;small&quot;&gt;Reddit: A Place to Draw Swastikas on the Internet&lt;/em&gt;”?’ ”&lt;/p&gt;
&lt;p&gt;The upper-left corner was a choppy, flickering purple, as the Blue Empire and the Red Empire battled for dominance. A graffiti artist, or artists, wrote, “9/11 was an inside job”; a few minutes later, the “was” turned into “wasn’t,” and the “an” became “anime.” Elsewhere, “Dick butt” became “Dick butter,” then “Dick buffet.” And then the swastikas appeared—just a few of them, but enough to make Wardle raise the hood of his sweatshirt, retreat into an empty conference room, and shut the door, looking pallid.&lt;/p&gt;
&lt;p&gt;In his office, Huffman met with Chris Slowe, Reddit’s first employee, who is now the chief technical officer.&lt;/p&gt;
&lt;p&gt;“How is Place going?” Huffman asked.&lt;/p&gt;
&lt;p&gt;“Pretty much as expected,” Slowe said. “A lot of memes, some Pokémon, and a barrage of dicks.”&lt;/p&gt;
&lt;p&gt;“If there’s ever a Reddit musical, that wouldn’t be a bad title,” Huffman said. “Maybe I should write a memoir called ‘A Barrage of Dicks.’ ”&lt;/p&gt;
&lt;p&gt;“I have faith in our people,” Slowe said.&lt;/p&gt;
&lt;p&gt;Lunch was served: a shrimp-and-lentil salad and a vegan bean fricassee. People stood in the common area, holding paper plates, watching a live feed of Place on a wall-mounted TV.&lt;/p&gt;
&lt;p&gt;One employee, reading the comments, said, “A bunch of people are finding swastikas and then telling everyone else where they are, so that people can go get rid of them.”&lt;/p&gt;
&lt;p&gt;“I just saw it!” another said. He pointed to a section of the screen. As we watched, one swastika was erased and another was modified to become a Windows 95 logo. Eventually, the swastika-makers got bored and moved on.&lt;/p&gt;
&lt;p&gt;At one point, the American flag caught on fire; the fire was stamped out, and the Reddit employees cheered.&lt;/p&gt;
&lt;p&gt;“Feels like watching a football game in extreme slow motion,” one said.&lt;/p&gt;
&lt;p&gt;“Or like watching the election results.”&lt;/p&gt;
&lt;p&gt;“Oh, God, don’t say that.”&lt;/p&gt;
&lt;p&gt;Toward the end, the square was a dense, colorful tapestry, chaotic and strangely captivating. It was a collage of hundreds of incongruous images: logos of colleges, sports teams, bands, and video-game companies; a transcribed monologue from “Star Wars”; likenesses of He-Man, David Bowie, the “Mona Lisa,” and a former Prime Minister of Finland. In the final hours, shortly before the experiment ended and the image was frozen for posterity, BlackVoid launched a surprise attack on the American flag. A dark fissure tore at the bottom of the flag, then overtook the whole thing. For a few minutes, the center was engulfed in darkness. Then a broad coalition rallied to beat back the Void; the stars and stripes regained their form, and, in the end, the flag was still there.&lt;/p&gt;
&lt;p&gt;The final image contained no visible hate symbols, no violent threats, not even much nudity. Late in the day, Wardle emerged from hiding, poured himself a drink, and pushed back his hood. “It’s possible that I will be able to sleep tonight,” he said. ♦&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 12 Mar 2018 17:35:08 +0000</pubDate>
<dc:creator>smacktoward</dc:creator>
<og:image>https://media.newyorker.com/photos/5aa1b0a0b0d77f251878398f/16:9/w_1200,h_630,c_limit/180319_r31690-tout.jpg</og:image>
<og:title>Reddit and the Struggle to Detoxify the Internet</og:title>
<og:description>The trolls are winning. How do we fix life online without limiting free speech?</og:description>
<og:url>https://www.newyorker.com/magazine/2018/03/19/reddit-and-the-struggle-to-detoxify-the-internet</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.newyorker.com/magazine/2018/03/19/reddit-and-the-struggle-to-detoxify-the-internet</dc:identifier>
</item>
<item>
<title>Rust&amp;#039;s 2018 roadmap</title>
<link>https://blog.rust-lang.org/2018/03/12/roadmap.html</link>
<guid isPermaLink="true" >https://blog.rust-lang.org/2018/03/12/roadmap.html</guid>
<description>&lt;p&gt;Each year the Rust community &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/1728&quot;&gt;comes together&lt;/a&gt; to set out a roadmap. This year, in addition to the &lt;a href=&quot;https://blog.rust-lang.org/2017/09/05/Rust-2017-Survey-Results.html&quot;&gt;survey&lt;/a&gt;, we put out a &lt;a href=&quot;https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html&quot;&gt;call for blog posts&lt;/a&gt; in December, which resulted in &lt;a href=&quot;https://readrust.net/rust-2018/&quot;&gt;100 blog posts&lt;/a&gt; written over the span of a few weeks. The end result is the recently-merged &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2314&quot;&gt;2018 roadmap RFC&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;rust-2018-edition&quot;&gt;Rust: 2018 edition&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This year, we will deliver &lt;em&gt;Rust 2018&lt;/em&gt;, marking the first major new edition of Rust since 1.0&lt;/strong&gt; (aka Rust 2015).&lt;/p&gt;
&lt;p&gt;We will continue to publish releases every six weeks as usual. But we will designate a release in the latter third of the year (Rust 1.29 - 1.31) as &lt;em&gt;Rust 2018&lt;/em&gt;. This new “edition” of Rust will be the culmination of feature stabilization throughout the year, and will ship with polished documentation, tooling, and libraries that tie in to those features.&lt;/p&gt;
&lt;p&gt;The idea of editions is to signify major steps in Rust’s evolution, where a collection of new features or idioms, taken as a whole, changes the experience of using Rust. They’re a chance, every few years, to take stock of the work we’ve delivered in six-week increments. To tell a bigger story about where Rust is going. And to ship the whole stack as a polished product.&lt;/p&gt;
&lt;p&gt;We expect that each edition will have a core theme or focus. Thinking of 1.0 as “Rust 2015”, we have:&lt;/p&gt;
&lt;h2 id=&quot;what-will-be-in-rust-2018&quot;&gt;What will be in Rust 2018?&lt;/h2&gt;
&lt;p&gt;The roadmap doesn’t say &lt;em&gt;for certain&lt;/em&gt; what will ship in Rust 2018, but we have a pretty good idea, and we’ll cover the major suspects below.&lt;/p&gt;
&lt;h3 id=&quot;documentation-improvements&quot;&gt;Documentation improvements&lt;/h3&gt;
&lt;p&gt;Part of the goal with the Rust 2018 release is to provide high quality documentation for the full set of new and improved features and the idioms they give rise to. &lt;a href=&quot;https://doc.rust-lang.org/nightly/book/second-edition/&quot;&gt;The Rust Programming Language book&lt;/a&gt; has been completely re-written over the last 18 months, and will be updated throughout the year as features reach the stable compiler. &lt;a href=&quot;https://rustbyexample.com/&quot;&gt;Rust By Example&lt;/a&gt; will likewise undergo a revamp this year. And there are numerous third party books, like &lt;a href=&quot;http://shop.oreilly.com/product/0636920040385.do&quot;&gt;Programming Rust&lt;/a&gt;, reaching print as well.&lt;/p&gt;
&lt;h3 id=&quot;language-improvements&quot;&gt;Language improvements&lt;/h3&gt;
&lt;p&gt;The most prominent language work in the pipeline stems from &lt;a href=&quot;https://blog.rust-lang.org/2017/03/02/lang-ergonomics.html&quot;&gt;2017’s ergonomics initiative&lt;/a&gt;. Almost all of the accepted RFCs from the initiative are available on nightly today, and will be polished and stabilized over the next several months. Among these productivity improvements are a few “headliners” that will form the backbone of the release:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Ownership system improvements&lt;/strong&gt;, including making borrowing more flexible via “non-lexical lifetimes”, improved pattern matching integration, and more.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Trait system improvements&lt;/strong&gt;, including the long-awaited &lt;code class=&quot;highlighter-rouge&quot;&gt;impl Trait&lt;/code&gt; syntax for dealing with types abstractly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Module system improvements&lt;/strong&gt;, focused on increasing clarity and reducing complexity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generators/async/await:&lt;/strong&gt; work is rapidly progressing on first-class async programming support.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In addition, we anticipate a few more major features to stabilize prior to the Rust 2018 release, including &lt;strong&gt;SIMD&lt;/strong&gt;, &lt;strong&gt;custom allocators&lt;/strong&gt;, and &lt;strong&gt;macros 2.0&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;compiler-improvements&quot;&gt;Compiler improvements&lt;/h3&gt;
&lt;p&gt;As of &lt;a href=&quot;https://blog.rust-lang.org/2018/02/15/Rust-1.24.html&quot;&gt;Rust 1.24&lt;/a&gt;, incremental recompilation is available and enabled by default on the stable compiler. This feature already makes rebuilds significantly faster than fresh builds, but over the course of the year we expect continued improvements for &lt;em&gt;both&lt;/em&gt; fresh and re-builds. Compiler performance should not be an obstacle to productivity in Rust 2018.&lt;/p&gt;
&lt;h3 id=&quot;tooling-improvements&quot;&gt;Tooling improvements&lt;/h3&gt;
&lt;p&gt;Rust 2018 will see high quality 1.0 releases of the &lt;a href=&quot;https://github.com/rust-lang-nursery/rls&quot;&gt;Rust Language Server&lt;/a&gt; (“RLS”, which underlies much of our IDE integration story) and &lt;a href=&quot;https://github.com/rust-lang-nursery/rustfmt&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rustfmt&lt;/code&gt;&lt;/a&gt; (a standard formatting tool for Rust code). We will continue to improve Cargo by stabilizing custom registries, public dependencies, and a revised profile system. We’re also expecting further work on &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2136&quot;&gt;Cargo build system integration&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-lang/cargo/issues/4959&quot;&gt;Xargo integration&lt;/a&gt;, and &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2318&quot;&gt;custom test frameworks&lt;/a&gt;, though it’s unclear as yet how many of these will be complete prior to Rust 2018.&lt;/p&gt;
&lt;h3 id=&quot;library-improvements&quot;&gt;Library improvements&lt;/h3&gt;
&lt;p&gt;Building on &lt;a href=&quot;https://blog.rust-lang.org/2017/05/05/libz-blitz.html&quot;&gt;our work from last year&lt;/a&gt;, we will publish a 1.0 version of the &lt;a href=&quot;https://github.com/rust-lang-nursery/api-guidelines&quot;&gt;Rust API guidelines book&lt;/a&gt;, continue pushing important libraries to 1.0 status, improve discoverability through a revamped cookbook effort, and make heavy investments in libraries in specific domains—as we’ll see below.&lt;/p&gt;
&lt;h3 id=&quot;web-site-improvements&quot;&gt;Web site improvements&lt;/h3&gt;
&lt;p&gt;As part of Rust 2018, we will completely overhaul the Rust web site, making it useful for CTOs and engineers alike. It should be far easier to find information to help evaluate Rust for your use case, and to stay up to date with the latest tooling and ecosystem improvements.&lt;/p&gt;
&lt;h3 id=&quot;four-target-domains&quot;&gt;Four target domains&lt;/h3&gt;
&lt;p&gt;Part of our goal with Rust 2018 is to demonstrate Rust’s productivity in specific domains of use. We’ve selected four such domains to invest in and highlight this year:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Network services&lt;/strong&gt;. Rust’s reliability and low footprint make it an excellent match for network services and infrastructure, especially at high scale.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://internals.rust-lang.org/t/announcing-the-cli-working-group/6872&quot;&gt;Command-line apps&lt;/a&gt;&lt;/strong&gt; (CLI). Rust’s portability, reliability, ergonomics, and ability to produce static binaries come together to great effect for writing CLI apps.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://internals.rust-lang.org/t/come-join-the-rust-and-webassembly-working-group/6845&quot;&gt;WebAssembly&lt;/a&gt;&lt;/strong&gt;. The “wasm” web standard allows shipping native-like binaries to all major browsers, but GC support is still years away. Rust is &lt;a href=&quot;https://mgattozzi.com/rust-wasm&quot;&gt;extremely well positioned&lt;/a&gt; to target this domain, and provides a reasonable on-ramp for programmers coming from JS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://internals.rust-lang.org/t/announcing-the-embedded-devices-working-group/6839&quot;&gt;Embedded devices&lt;/a&gt;&lt;/strong&gt;. Rust has the potential to make programming resource-constrained devices much more productive—and fun! We want embedded programming to reach first-class status this year.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Each of these domains has a dedicated working group for the year. These WGs will work in a cross-cutting fashion, interfacing with language, tooling, library, and documentation work.&lt;/p&gt;
&lt;h3 id=&quot;compatibility-across-editions&quot;&gt;Compatibility across editions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;TL;DR: Rust will continue its stability guarantee of &lt;a href=&quot;https://blog.rust-lang.org/2014/10/30/Stability.html&quot;&gt;hassle-free updates to new versions&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Editions will have a meaning for the compiler. You will be able to write:&lt;/p&gt;
&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;py&quot;&gt;edition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2018&quot;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;in your Cargo.toml to &lt;em&gt;opt in&lt;/em&gt; to the new edition for your crate. Doing so may introduce new keywords or otherwise require adjustments to code. However:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You can use &lt;em&gt;old&lt;/em&gt; editions indefinitely on &lt;em&gt;new&lt;/em&gt; compilers; &lt;strong&gt;editions are opt-in&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Editions are set on a &lt;em&gt;per-crate&lt;/em&gt; basis and can be mixed and matched; &lt;strong&gt;you can be on a different edition from your dependencies&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Warning-free code in one edition must compile, and have the same behavior, on the next.&lt;/li&gt;
&lt;li&gt;Edition-related warnings, e.g. that an identifier will become a keyword in the next edition, must be easily fixable via an automated migration tool (rustfix). &lt;strong&gt;Only a small minority of crates should require &lt;em&gt;any&lt;/em&gt; manual work to opt in to a new edition&lt;/strong&gt;, and that manual work must be minimal.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In other words, the progression of new compiler versions is independent from editions; you can migrate at your leisure, and don’t have to worry about ecosystem compatibility; and edition migration is normally trivial.&lt;/p&gt;
&lt;h2 id=&quot;additional-2018-goals&quot;&gt;Additional 2018 goals&lt;/h2&gt;
&lt;p&gt;While the Rust 2018 release is our major focus this year, there are some additional ongoing concerns that we want to give attention to.&lt;/p&gt;
&lt;h3 id=&quot;better-serving-intermediate-rustaceans&quot;&gt;Better serving intermediate Rustaceans&lt;/h3&gt;
&lt;p&gt;One of the strongest messages we’ve heard from production users, and &lt;a href=&quot;https://blog.rust-lang.org/2017/09/05/Rust-2017-Survey-Results.html&quot;&gt;the 2017 survey&lt;/a&gt;, is that people need more resources to take them from understanding Rust’s concepts to knowing how to use them &lt;em&gt;effectively&lt;/em&gt;. The roadmap does not stipulate exactly what these resources should look like — &lt;a href=&quot;https://quietmisdreavus.net/code/2018/01/10/not-a-layer-cake-analogy/&quot;&gt;probably there should be several kinds&lt;/a&gt; — but commits us as a community to putting significant work into this space, and ending the year with some solid new material.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect and empower Rust’s global community&lt;/strong&gt;. We will pursue internationalization as a first-class concern, and proactively work to build ties between Rust subcommunities currently separated by language, geography, or culture. We will spin up and support Rust events worldwide, including further growth of the RustBridge program.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Grow Rust’s teams and new leaders within them&lt;/strong&gt;. We will refactor the Rust team structure to support more scale, agility, and leadership growth. We will systematically invest in mentoring, both by creating more on-ramp resources and through direct mentorship relationships.&lt;/p&gt;
&lt;h2 id=&quot;a-call-to-action&quot;&gt;A call to action&lt;/h2&gt;
&lt;p&gt;As always in the Rust world, the goals laid out here will ultimately be the result of a community-wide effort—maybe one including you! Here are some of the teams where we could use the most help. Note that all IRC channels refer to the irc.mozilla.org network.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;WebAssembly WG&lt;/strong&gt;. Compiling Rust to WebAssembly should be &lt;em&gt;the&lt;/em&gt; best choice for fast code on the Web. Check out &lt;a href=&quot;https://github.com/rust-lang-nursery/rust-wasm&quot;&gt;rust-lang-nursery/rust-wasm&lt;/a&gt; to learn more and get involved!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CLI WG&lt;/strong&gt;. Writing CLI apps in Rust should be a frictionless experience–from finding the right libraries and writing concise integration tests up to cross-platform distribution. Join us at &lt;a href=&quot;https://github.com/rust-lang-nursery/cli-wg&quot;&gt;rust-lang-nursery/cli-wg&lt;/a&gt; and help us reach that goal!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embedded Devices WG&lt;/strong&gt;. Quality, productivity, accessibility: Rust can change the embedded industry for the better. Let’s get this process started in 2018! Join us at &lt;a href=&quot;https://github.com/rust-lang-nursery/embedded-wg&quot;&gt;https://github.com/rust-lang-nursery/embedded-wg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ecosystem WG&lt;/strong&gt;. We’ll be providing guidance and support to important crates throughout the ecosystem. Drop into the &lt;a href=&quot;https://gitter.im/rust-lang/WG-ecosystem&quot;&gt;WG-ecosystem room&lt;/a&gt; and we’ll guide you to places that need help!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dev Tools Team&lt;/strong&gt;. There are always interesting things to tackle with developer tools (IDEs, Cargo, rustdoc, Clippy, Rustfmt, custom test frameworks, and more). Drop in to #rust-dev-tools and have a chat with the team!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rustdoc Team&lt;/strong&gt;. With your help, we can make documentation better for everyone. Come join us in #rustdoc on IRC, and we can help you get started!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Release Team&lt;/strong&gt;. Drop by #rust-release on IRC to get involved with regression triage and release production!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Community Team&lt;/strong&gt;. We’ve kicked off several new Teams within the Community Team and are eager to add new members: Events, Content, Switchboard, RustBridge, Survey, and Localization! &lt;a href=&quot;https://github.com/rust-community/team&quot;&gt;Check out our team repo&lt;/a&gt; or stop by our IRC channel, #rust-community, to learn more and get involved!&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Mon, 12 Mar 2018 16:56:23 +0000</pubDate>
<dc:creator>steveklabnik</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.rust-lang.org/2018/03/12/roadmap.html</dc:identifier>
</item>
<item>
<title>YC Seed Deck Template</title>
<link>https://blog.ycombinator.com/intro-to-the-yc-seed-deck/</link>
<guid isPermaLink="true" >https://blog.ycombinator.com/intro-to-the-yc-seed-deck/</guid>
<description>&lt;p&gt;Demo Day for our Winter 2018 batch is a week from today. We’re largely focused on preparing companies for their on-stage presentations, but are also working with them on slightly longer decks to use in follow-up conversations with investors.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.aaronkharris.com/advice-on-pitching&quot;&gt;I’ve written about pitching before&lt;/a&gt;, and realized that what we were missing was a clear template for how founders should lay out their stories through slides. The deck below is a template for how I think companies should build seed decks. While the main target for this template is a company raising its seed round, the deck is not all that different from best practices for a Series A deck – which we’ll release next.&lt;/p&gt;
&lt;p&gt;The key point to remember here is that founders should strive for clarity and concision. This is not the right place to write a treatise on your market or world philosophy. The simple truth is that there isn’t very much meaningful detail to explore for most seed stage companies. When founders pretend that there is, their stories get muddled, and the investors get lost.&lt;/p&gt;
&lt;p&gt;Focus on narrative. The rest is commentary.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/17nFIwCyf2Kz-Ao5HGnmvNZ74L8eSKA2C2Qdaoe-47OM/edit?ts=5aa2fa27#slide=id.p&quot;&gt;Here’s the template on Google Drive&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-2.jpeg&quot;&gt;&lt;img src=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-2.jpeg&quot; alt=&quot;&quot; width=&quot;2000&quot; height=&quot;1125&quot; class=&quot;aligncenter size-full wp-image-1102346&quot; srcset=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-2.jpeg 2000w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-2-300x169.jpeg 300w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-2-768x432.jpeg 768w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-2-1024x576.jpeg 1024w&quot; sizes=&quot;(max-width: 2000px) 100vw, 2000px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the title page. It has the name of your company, and a one line description of what you do.&lt;/p&gt;
&lt;p&gt;This is the only place in the deck where you can only have 1 slide for what you need to show. Any of the other slides in this deck should be treated as a first slide of a set. If you can keep the set to n=1, that’s ideal, but if you need more, that’s ok. You probably don’t want any set here where n &amp;gt; 3. This is a seed deck, remember.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-3.jpeg&quot;&gt;&lt;img src=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-3.jpeg&quot; alt=&quot;&quot; width=&quot;2000&quot; height=&quot;1125&quot; class=&quot;aligncenter size-full wp-image-1102345&quot; srcset=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-3.jpeg 2000w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-3-300x169.jpeg 300w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-3-768x432.jpeg 768w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-3-1024x576.jpeg 1024w&quot; sizes=&quot;(max-width: 2000px) 100vw, 2000px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is where you clearly state the problem. Particulars of how this problem impacts real world people/businesses are valuable.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-4.jpeg&quot;&gt;&lt;img src=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-4.jpeg&quot; alt=&quot;&quot; width=&quot;2000&quot; height=&quot;1125&quot; class=&quot;aligncenter size-full wp-image-1102344&quot; srcset=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-4.jpeg 2000w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-4-300x169.jpeg 300w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-4-768x432.jpeg 768w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-4-1024x576.jpeg 1024w&quot; sizes=&quot;(max-width: 2000px) 100vw, 2000px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the solution. You want to explain what you do very clearly, in as few words as possible. Describe the concrete benefits you provide&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-5.jpeg&quot;&gt;&lt;img src=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-5.jpeg&quot; alt=&quot;&quot; width=&quot;2000&quot; height=&quot;1125&quot; class=&quot;aligncenter size-full wp-image-1102343&quot; srcset=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-5.jpeg 2000w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-5-300x169.jpeg 300w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-5-768x432.jpeg 768w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-5-1024x576.jpeg 1024w&quot; sizes=&quot;(max-width: 2000px) 100vw, 2000px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Show off your traction (if you have it). Make the numbers clear and meaningful. It’s unlikely your curve will be this smooth. That’s ok.&lt;/p&gt;
&lt;p&gt;Add some context next to the chart if you’ve got some great stats you want to add.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-6.jpeg&quot;&gt;&lt;img src=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-6.jpeg&quot; alt=&quot;&quot; width=&quot;2000&quot; height=&quot;1125&quot; class=&quot;aligncenter size-full wp-image-1102342&quot; srcset=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-6.jpeg 2000w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-6-300x169.jpeg 300w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-6-768x432.jpeg 768w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-6-1024x576.jpeg 1024w&quot; sizes=&quot;(max-width: 2000px) 100vw, 2000px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Got more metrics? Awesome! Add them!&lt;/p&gt;
&lt;p&gt;Trick slide! Revenue would be better here, but this is ok.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-7.jpeg&quot;&gt;&lt;img src=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-7.jpeg&quot; alt=&quot;&quot; width=&quot;2000&quot; height=&quot;1125&quot; class=&quot;aligncenter size-full wp-image-1102341&quot; srcset=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-7.jpeg 2000w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-7-300x169.jpeg 300w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-7-768x432.jpeg 768w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-7-1024x576.jpeg 1024w&quot; sizes=&quot;(max-width: 2000px) 100vw, 2000px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tell the investor what makes you so special, what makes this work, what your insights are. This might take more than one slide.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-8.jpeg&quot;&gt;&lt;img src=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-8.jpeg&quot; alt=&quot;&quot; width=&quot;2000&quot; height=&quot;1125&quot; class=&quot;aligncenter size-full wp-image-1102340&quot; srcset=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-8.jpeg 2000w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-8-300x169.jpeg 300w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-8-768x432.jpeg 768w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-8-1024x576.jpeg 1024w&quot; sizes=&quot;(max-width: 2000px) 100vw, 2000px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Business model is important. You probably don’t know all the details yet, but you should know a lot of them. Lay it out. If you need more space to dig into something complicated, add slides.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-9.jpeg&quot;&gt;&lt;img src=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-9.jpeg&quot; alt=&quot;&quot; width=&quot;2000&quot; height=&quot;1125&quot; class=&quot;aligncenter size-full wp-image-1102339&quot; srcset=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-9.jpeg 2000w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-9-300x169.jpeg 300w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-9-768x432.jpeg 768w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-9-1024x576.jpeg 1024w&quot; sizes=&quot;(max-width: 2000px) 100vw, 2000px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What’s the market here? Is it going to be big? Will you make it big? How much money are you going to make off this thing? Convince the investor that they’re going to make lots of money with you&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-10.jpeg&quot;&gt;&lt;img src=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-10.jpeg&quot; alt=&quot;&quot; width=&quot;2000&quot; height=&quot;1125&quot; class=&quot;aligncenter size-full wp-image-1102338&quot; srcset=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-10.jpeg 2000w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-10-300x169.jpeg 300w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-10-768x432.jpeg 768w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-10-1024x576.jpeg 1024w&quot; sizes=&quot;(max-width: 2000px) 100vw, 2000px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Team! So important at seed. Talk about what makes your team particularly well suited to the problem. This should be about founders. Nobody cares about your advisors.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-11.jpeg&quot;&gt;&lt;img src=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-11.jpeg&quot; alt=&quot;&quot; width=&quot;2000&quot; height=&quot;1125&quot; class=&quot;aligncenter size-full wp-image-1102337&quot; srcset=&quot;https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-11.jpeg 2000w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-11-300x169.jpeg 300w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-11-768x432.jpeg 768w, https://blog.ycombinator.com/wp-content/uploads/2018/03/YC-seed-deck-template-11-1024x576.jpeg 1024w&quot; sizes=&quot;(max-width: 2000px) 100vw, 2000px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tell the investor how much money you need, and what it gets you. If you can lay out where you’ll be inside of a year, which should make you Series A ready, that’s powerful&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;br/&gt;This deck is intentionally simple in design. Kevin Hale wrote a great piece about how to design decks well. &lt;a href=&quot;https://blog.ycombinator.com/how-to-design-a-better-pitch-deck/&quot;&gt;https://blog.ycombinator.com/how-to-design-a-better-pitch-deck/&lt;/a&gt;&lt;a href=&quot;https://blog.ycombinator.com/intro-to-the-yc-seed-deck/#footnoteid1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;Thanks to Jared Friedman for suggesting that we put this together, and for reviewing it.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 12 Mar 2018 14:59:17 +0000</pubDate>
<dc:creator>craigcannon</dc:creator>
<og:title>The YC Seed Deck Template</og:title>
<og:url>https://blog.ycombinator.com/intro-to-the-yc-seed-deck/</og:url>
<og:type>article</og:type>
<og:description>I’ve written about pitching before, and realized that what we were missing is a clear template of how founders should lay out their story through slides. This deck is a template for how I think companies should build seed decks.</og:description>
<og:image>https://blog.ycombinator.com/wp-content/uploads/2018/03/The-YC-Seed-Deck-Template.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.ycombinator.com/intro-to-the-yc-seed-deck/</dc:identifier>
</item>
<item>
<title>Concurrency I can finally understand and write correctly</title>
<link>http://jordi.inversethought.com/blog/advent-of-d/#day18</link>
<guid isPermaLink="true" >http://jordi.inversethought.com/blog/advent-of-d/#day18</guid>
<description>&lt;p&gt;I wrote my &lt;a href=&quot;https://adventofcode.com/&quot;&gt;Advent of Code&lt;/a&gt; in D. The programming language. It was the first time I used D in earnest every day for something substantial. It was fun and I learned things along the way, such as easy metaprogramming, concurrency I could write correctly, and functional programming that doesn’t feel like I have one arm tied behind my back. I would do it all over again.&lt;/p&gt;
&lt;p&gt;My main programming languages are C++ and Python. For me, D is the combination of the best of these two: the power of C++ with the ease of use of Python. Or to put it another way, D is the C++ I always wanted. This used to be D’s sales pitch, down to its name. There’s lots of evident C++ heritage in D. It is a C++ successor worthy of consideration.&lt;/p&gt;

&lt;p&gt;This is the question people always ask me. Whenever I bring up D, I am faced with the following set of standard rebuttals:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Why not Rust?&lt;/li&gt;
&lt;li&gt;D? That’s still around?&lt;/li&gt;
&lt;li&gt;D doesn’t bring anything new or interesting&lt;/li&gt;
&lt;li&gt;But the GC…&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I’ll answer these briefly: D was easier for me to learn than Rust, yes, it’s still around and very lively, it has lots of interesting ideas, and what garbage collector? I guess there’s a GC, but I’ve never noticed and it’s never gotten in my way.&lt;/p&gt;
&lt;p&gt;I will let D speak for itself further below. For now, I would like to address the “why D?” rebuttals in a different way. It seems to me that people would rather not have to learn another new thing. Right now, Rust has a lot of attention and some of the code, and right now it seems like Rust may be the solution we always wanted for safe, systems-level coding. It takes effort to work on a new programming language. So, I think the “why D?” people are mostly saying, “why should &lt;em&gt;I&lt;/em&gt; have to care about a different programming language, can’t I just immediately dismiss D and spend time learning Rust instead?”&lt;/p&gt;
&lt;p&gt;I posit that no, you shouldn’t immediately dismiss D. If nothing else, try to listen to its ideas, many of which are distilled into Alexandrescu’s &lt;a href=&quot;https://www.worldcat.org/title/d-programming-language/oclc/456837504&quot;&gt;The D Programming Language&lt;/a&gt;. I recommend this book as good reading material for computer science, even if you never plan to write any D (as a language reference itself, it’s already dated in a number of ways, but I still recommend it for the ideas it discusses). Also browse the &lt;a href=&quot;https://tour.dlang.org/tour/en/gems/uniform-function-call-syntax-ufcs&quot;&gt;D Gems&lt;/a&gt; section in the D tour. In the meantime, let me show you what I learned about D while using it.&lt;/p&gt;

&lt;p&gt;I took slightly longer than 25 days to write my advent of code solutions, partly because some stumped me a little and partly because around actual Christmas I wanted to spend time with family instead of writing code. When I was writing code, I would say that nearly every day of advent of code forced me to look into a new aspect of D. You can see my solutions &lt;a href=&quot;http://inversethought.com/hg/aoc&quot;&gt;in this Mercurial repository.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am not going to go too much into details about the abstract theory concerning the solution of each problem. Perhaps another time. I will instead focus on the specific D techniques I learned about or found most useful for each.&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day01&quot;&gt;Day 1: parsing arguments, type conversions, template restrictions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day02&quot;&gt;Day 2: functional programming and uniform function call syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day03&quot;&gt;Day 3: let’s try some complex arithmetic!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day04&quot;&gt;Day 4: reusing familiar tools to find duplicates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day05&quot;&gt;Day 5: more practice with familiar tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day06&quot;&gt;Day 6: ranges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day07&quot;&gt;Day 7: structs and compile-time regexes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day08&quot;&gt;Day 8: more compile-time fun with mixin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day09&quot;&gt;Day 9: a switch statement!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day10&quot;&gt;Day 10: learning what ranges &lt;em&gt;cannot&lt;/em&gt; do&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day11&quot;&gt;Day 11: offline hex coding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day12&quot;&gt;Day 12: for want of a set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day13&quot;&gt;Day 13: more offline coding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day14&quot;&gt;Day 14: reusing older code as a module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day15&quot;&gt;Day 15: generators, lambdas, functions, and delegates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day16&quot;&gt;Day 16: permutations with primitive tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day17&quot;&gt;Day 17: avoiding all the work with a clever observation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day18&quot;&gt;Day 18: concurrency I can finally understand and write correctly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day19&quot;&gt;Day 19: string parsing with enums and final switches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day20&quot;&gt;Day 20: a physics problem with vector operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day21&quot;&gt;Day 21: an indexable, hashable, comparable struct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day22&quot;&gt;Day 22: more enums, final switches, and complex numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day23&quot;&gt;Day 23: another opcode parsing problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day24&quot;&gt;Day 24: a routine graph-search problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day25&quot;&gt;Day 25: formatted reads to finish off Advent of D&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Day 1: parsing arguments, type conversions, template restrictions&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day01/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day01/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;For Day 1, I was planning to be a bit more careful about everything around the code. I was going to carefully parse CLI arguments, produce docstrings and error messages when anything went wrong, and carefully validate template arguments with restrictions (comparable to &lt;a href=&quot;https://en.wikipedia.org/wiki/Concepts_(C%2B%2B)&quot;&gt;concepts in C++&lt;/a&gt;). While I could have done all of this, as days went by I tried to &lt;abbr title=&quot;Minimise program length&quot;&gt;golf&lt;/abbr&gt; my solutions, so I abandoned most of this boilerplate. Instead, I lazily relied on getting D stack traces at runtime or compiler errors when I messed up.&lt;/p&gt;
&lt;p&gt;As you can see from my solution, had I kept it up, the boilerplate isn’t &lt;em&gt;too&lt;/em&gt; bad, though. Template restrictions are achieved by adding &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw1&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;isNumeric&lt;span class=&quot;sy0&quot;&gt;!&lt;/span&gt;numType&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;, which checks at compile time that my template was given a template argument of the correct type, where &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;isNumeric&lt;/span&gt;&lt;/code&gt; comes from &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw2&quot;&gt;import&lt;/span&gt; std.&lt;span class=&quot;me1&quot;&gt;traits&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;. I also found that &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;getopt&lt;/span&gt;&lt;/code&gt; was a sufficiently mature standard library for handling command-line parsing. It’s not quite as rich as Python’s &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;argparse&lt;/span&gt;&lt;/code&gt;, merely sufficient. This about shows all it can do:&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;  &lt;span class=&quot;kw4&quot;&gt;string&lt;/span&gt; input&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; opts &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; getopt&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;br/&gt;    args&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;st0&quot;&gt;&quot;input|i&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;Input captcha to process&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;&amp;amp;&lt;/span&gt;input&lt;br/&gt;  &lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;p&gt;  &lt;span class=&quot;kw1&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;opts.&lt;span class=&quot;me1&quot;&gt;helpWanted&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;    defaultGetoptPrinter&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;st0&quot;&gt;&quot;Day 1 of AoC&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; opts.&lt;span class=&quot;me1&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Finally, a frequent workhorse that appeared from Day 1 was &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;std.&lt;span class=&quot;me1&quot;&gt;conv&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; for parsing strings into numbers. A single function, &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;to&lt;/span&gt;&lt;/code&gt; is surprisingly versatile and does much more than that, by taking a single template argument for converting (not casting) one type into another. It knows not only how to parse strings into numbers and vice versa, but also how to convert numerical types keeping as much precision as possible or reading list or &lt;abbr title=&quot;dict&quot;&gt;associative array&lt;/abbr&gt; literals from strings if they are in their standard string representation. It’s a good basic example of D’s power and flexibility in generic programming.&lt;/p&gt;

&lt;h2&gt;Day 2: functional programming and uniform function call syntax&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day02/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day02/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;For whatever reason, probably because I was kind of trying to golf my solutions, I ended up writing a lot of functionalish code, with lots of map, reduce, filter, and so forth. This started early on with Day 2. D is mostly unopinionated about which style of programming one should use and offers tools to do object-orientation, functional programming, or just plain procedural programming, presenting no obstacle to the mixing these styles. Lambdas are easily written inline with concise syntax, e.g. &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;x &lt;span class=&quot;sy0&quot;&gt;=&amp;gt;&lt;/span&gt; x&lt;span class=&quot;sy0&quot;&gt;*&lt;/span&gt;x&lt;/span&gt;&lt;/code&gt;, and the basic standard functional tools like &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;map&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; reduce&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; filter&lt;/span&gt;&lt;/code&gt; and so on are available.&lt;/p&gt;
&lt;p&gt;D’s approach to functional programming is quite pragmatic. While I rarely used it, because I wasn’t being too careful for these solutions, D functions can be labelled &lt;a href=&quot;https://dlang.org/spec/function.html#pure-functions&quot;&gt;&lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;pure&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, which means that they can have no side effects. However, this still lets them do local impure things such as reassigning a variable or having a for loop. The only restriction is that all of their impurity must be “on the stack”, and that they cannot call any impure functions themselves.&lt;/p&gt;
&lt;p&gt;Another feature that I came to completely fall in love with was what they call &lt;a href=&quot;https://tour.dlang.org/tour/en/gems/uniform-function-call-syntax-ufcs&quot;&gt;uniform function call syntax&lt;/a&gt; (UFCS). With some caveats, this basically means that&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt; foo.&lt;span class=&quot;me1&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;baz&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;is just sugar for&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt; bar&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;foo&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; baz&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If the function only has one argument, the round brackets are optional and &lt;code class=&quot;codecolorer text solarized-light&quot;&gt;&lt;span class=&quot;text&quot;&gt;foo.bar&lt;/span&gt;&lt;/code&gt; is sugar for &lt;code class=&quot;codecolorer text solarized-light&quot;&gt;&lt;span class=&quot;text&quot;&gt;bar(foo)&lt;/span&gt;&lt;/code&gt;. This very basic syntactic convenience makes it so easy and pleasant to chain function calls together, lending itself to making it more inviting to write functional code. It also is a happy unification between OOP and FP, because syntactically it’s the same to give an object a new member function as it is to create a free-standing function whose first argument is the object.&lt;/p&gt;

&lt;h2&gt;Day 3: let’s try some complex arithmetic!&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day03/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day03/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;For me, 2-dimensional geometry is often very well described by complex numbers. The spiral in the problem here seemed easy to describe as an &lt;abbr title=&quot;dict&quot;&gt;associative array&lt;/abbr&gt; from complex coordinates to integer values. So, I decided to give D’s &lt;code class=&quot;codecolorer text solarized-light&quot;&gt;&lt;span class=&quot;text&quot;&gt;std.complex&lt;/span&gt;&lt;/code&gt; a try. It was easy to use and there were no big surprises here.&lt;/p&gt;

&lt;h2&gt;Day 4: reusing familiar tools to find duplicates&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day04/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day04/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;There weren’t any new D techniques here, but it was nice to see how easy it was to build a simple word counter from D builtins. Slightly disappointed that this data structure itself wasn’t builtin like Python’s own &lt;code class=&quot;codecolorer text solarized-light&quot;&gt;&lt;span class=&quot;text&quot;&gt;collections.Counter&lt;/span&gt;&lt;/code&gt; but hardly an insurmountable problem.&lt;/p&gt;

&lt;h2&gt;Day 5: more practice with familiar tools&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day05/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day05/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Again, not much new D here. I like the relative ease with which it’s possible to read integers into a list using &lt;code class=&quot;codecolorer text solarized-light&quot;&gt;&lt;span class=&quot;text&quot;&gt;map&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;codecolorer text solarized-light&quot;&gt;&lt;span class=&quot;text&quot;&gt;std.conv.to&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Day 6: ranges&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day06/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day06/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;There’s usually a fundamental paradigm or structure in programming languages out of which everything else depends on. Haskell has functions and monads, C has pointers and arrays, C++ has classes and templates, Python has dicts and iterators, Javascript has callbacks and objects, Rust has borrowing and immutability. Ranges are one of D’s fundamental concepts. Roughly speaking, a range is anything that can be iterated over, like an array or a lazy generator. Thanks to D’s powerful metaprogramming, ranges can be defined to satisfy a kind of compile-time duck typing: if it has methods to check for emptiness, get the first element, and get the next element, then it’s an &lt;code class=&quot;codecolorer text solarized-light&quot;&gt;&lt;span class=&quot;text&quot;&gt;InputRange&lt;/span&gt;&lt;/code&gt;. This duck typing is kind of reminiscent of type classes in Haskell. D’s general principle of having containers and algorithms on those containers is built upon the range concept. Ranges are intended to be simpler reformulation of iterators from the C++ standard libary.&lt;/p&gt;
&lt;p&gt;I have been using ranges all along, as &lt;code class=&quot;codecolorer text solarized-light&quot;&gt;&lt;span class=&quot;text&quot;&gt;foreach&lt;/span&gt;&lt;/code&gt; loops are kind of like sugar for invoking those methods on ranges. However, for day 6 I actually wanted to use a method that had to invoke an &lt;code class=&quot;codecolorer text solarized-light&quot;&gt;&lt;span class=&quot;text&quot;&gt;std.range&lt;/span&gt;&lt;/code&gt; method, &lt;code class=&quot;codecolorer text solarized-light&quot;&gt;&lt;span class=&quot;text&quot;&gt;enumerate&lt;/span&gt;&lt;/code&gt;. It simply iterates over a range while simultaneously producing a counter. This I used to write some brief code to obtain both the maximum of an array and the index in which it occurs.&lt;/p&gt;
&lt;p&gt;Another range-related feature that appears for the first time here is slicing. Certain random-access ranges which allow integer indexing also allow slicing. The typical method to remove elements from an array is to use this slicing. For example, to remove the first five elements and the last two elements from an array:&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt; arr &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;..&lt;/span&gt;$&lt;span class=&quot;sy0&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here the dollar sign is sugar for &lt;code class=&quot;codecolorer text solarized-light&quot;&gt;&lt;span class=&quot;text&quot;&gt;arr.length&lt;/span&gt;&lt;/code&gt; and this removal is simply done by moving some start and end pointers in memory — no other bytes are touched.&lt;/p&gt;
&lt;p&gt;The D Tour has &lt;a href=&quot;https://tour.dlang.org/tour/en/basics/ranges&quot;&gt;a good taste of ranges&lt;/a&gt; and &lt;em&gt;Programming in D&lt;/em&gt; goes into &lt;a href=&quot;http://ddili.org/ders/d.en/ranges.html&quot;&gt;more depth&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Day 7: structs and compile-time regexes&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day07/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day07/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;My solution for this problem was more complicated, and it forced me to break out an actual tree data structure. Because I wasn’t trying to be particularly parsimonious about memory usage or execution speed, I decided to create the tree by having a node struct with a global associative array indexing all of the nodes.&lt;/p&gt;
&lt;p&gt;In D, structs have value semantics and classes have reference semantics. Roughly, this means that structs are on the stack, they get copied around when being passed into functions, while classes are always handled by reference instead and dynamically allocated and destroyed. Another difference between structs and classes is that classes have inheritance (and hence, polymorphic dispatch) but structs don’t. However, you can give structs methods, and they will have an implicit &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw2&quot;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; parameter, although this is little more than sugar for free-standing functions.&lt;/p&gt;
&lt;p&gt;Enough on OOP. Let’s talk about the really exciting stuff: compile-time regular expressions!&lt;/p&gt;
&lt;p&gt;For this problem, there was some input parsing to do. Let’s look at what I wrote:&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;void&lt;/span&gt; parseLine&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;string&lt;/span&gt; line&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt; &lt;span class=&quot;kw4&quot;&gt;static&lt;/span&gt; nodeRegex &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; regex&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;co4&quot;&gt;r&quot;(?P&amp;lt;name&amp;gt;\w+) \((?P&amp;lt;weight&amp;gt;\d+)\)( -&amp;gt; (?P&amp;lt;children&amp;gt;[\w,]+))?&quot;&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;  &lt;br/&gt; &lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; row &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; matchFirst&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;line&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; nodeRegex&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt; &lt;span class=&quot;co1&quot;&gt;// init the node struct here&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;codecolorer text solarized-light&quot;&gt;&lt;span class=&quot;text&quot;&gt;static&lt;/span&gt;&lt;/code&gt; keyword instructs D that this variable has to be computed at compile-time. D’s compiler basically has its own interpreter that can execute arbitrary code as long as all of the inputs are available at compile time. In this case, this parses and compiles this regex into the binary. The next line, where I call &lt;code class=&quot;codecolorer text solarized-light&quot;&gt;&lt;span class=&quot;text&quot;&gt;matchFirst&lt;/span&gt;&lt;/code&gt; on each line, is done at runtime, but if for whatever reason I had these strings available at compile time (say, defined as a big inline string a few lines above the same source file), I could also do the regex parsing at compile time if I wanted to.&lt;/p&gt;
&lt;p&gt;This is really nice. This is one of my favourite D features. Add a &lt;code class=&quot;codecolorer text solarized-light&quot;&gt;&lt;span class=&quot;text&quot;&gt;static&lt;/span&gt;&lt;/code&gt; and you can precompute into your binary just about anything. You often don’t even need any extra syntax. If the compiler realises that it has all of the information at compile time to do something, it might just do it. This is known as compile-time function execution, hereafter, CTFE. The D Tour has &lt;a href=&quot;https://tour.dlang.org/tour/en/gems/compile-time-function-evaluation-ctfe&quot;&gt;a good overview of the topic&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Day 8: more compile-time fun with mixin&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day08/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day08/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Day 8 was another problem where the most interesting part was parsing. As before, I used a compile-time regex. But the interesting part of this problem was the following bit of code for parsing strings into their corresponding D comparison operation, as I originally wrote it:&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; comparisons &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;st0&quot;&gt;&quot;&amp;lt;&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw2&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt; b&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;=&amp;gt;&lt;/span&gt; a  &lt;span class=&quot;sy0&quot;&gt;&amp;lt;&lt;/span&gt; b&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;st0&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw2&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt; b&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&quot;sy0&quot;&gt;&amp;gt;&lt;/span&gt; b&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;st0&quot;&gt;&quot;==&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw2&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt;  b&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&quot;sy0&quot;&gt;==&lt;/span&gt; b&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;st0&quot;&gt;&quot;&amp;lt;=&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw2&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt; b&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&quot;sy0&quot;&gt;&amp;lt;=&lt;/span&gt; b&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;st0&quot;&gt;&quot;&amp;gt;=&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw2&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt; b&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&quot;sy0&quot;&gt;&amp;gt;=&lt;/span&gt; b&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;st0&quot;&gt;&quot;!=&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw2&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt; b&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;=&amp;gt;&lt;/span&gt; a  &lt;span class=&quot;sy0&quot;&gt;!=&lt;/span&gt; b&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Okay, this isn’t terrible. It’s just… not very pretty. I don’t like that it’s basically the same line repeated six times. I furthermore also don’t like that within each line, I have to repeat the operator in the string part and in the function body. Enter the &lt;code class=&quot;codecolorer text solarized-light&quot;&gt;&lt;span class=&quot;text&quot;&gt;mixin&lt;/span&gt;&lt;/code&gt; keyword! Basically, string mixins allow you to evaluate any string at compile time. They’re kind of like the C preprocessor, but much safer. For example, string mixins only evaluate complete expressions, so no shenanigans like &lt;code class=&quot;codecolorer cpp solarized-light&quot;&gt;&lt;span class=&quot;cpp&quot;&gt;&lt;span class=&quot;co2&quot;&gt;#define private public&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; are allowed. My first attempt to shorten the above looked like this:&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;kw2&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; comparisons&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;kw4&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw1&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;cmp&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;st0&quot;&gt;&quot;&amp;lt;&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;==&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;&amp;lt;=&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;&amp;gt;=&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;!=&quot;&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;  comparisons&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;cmp&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw2&quot;&gt;mixin&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;st0&quot;&gt;&quot;function(int a, int b) =&amp;gt; a &quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;~&lt;/span&gt;cmp&lt;span class=&quot;sy0&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;st0&quot;&gt;&quot; b&quot;&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Since I decided to use a compile-time static loop to populate my array, I now needed a separate declaration of the variable which forced me to spell out its ungainly type: an associative array that takes a &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; and returns a function with that signature. The mixin here takes a concatenated string that evaluates to a function.&lt;/p&gt;
&lt;p&gt;However, this didn’t work for two reasons!&lt;/p&gt;
&lt;p&gt;The first one is that &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw1&quot;&gt;foreach&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; was &lt;a href=&quot;https://dlang.org/blog/2017/09/01/dmd-2-076-0-released/&quot;&gt;introduced on September 2017&lt;/a&gt;. The D compilers packaged in Debian didn’t have it yet when I wrote that code! The second problem is more subtle: initialisation of associative arrays currently cannot be statically done because their internal data structures rely on runtime computations, according to my understanding of &lt;a href=&quot;http://forum.dlang.org/thread/CANHcaG=vACzvcD=xSXaiCNe4FiUJAW7VPRQaPoxEh2-su9+GNg@mail.gmail.com&quot;&gt;this discussion&lt;/a&gt;. They might fix it some day?&lt;/p&gt;
&lt;p&gt;So, next best thing is my final answer:&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;kw2&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; comparisons&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;p&gt;&lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; getComparisons&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;Args&lt;span class=&quot;sy0&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw1&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;cmp&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt; Args&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;    comparisons&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;cmp&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw2&quot;&gt;mixin&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;st0&quot;&gt;&quot;function(int a, int b) =&amp;gt; a &quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;~&lt;/span&gt;cmp&lt;span class=&quot;sy0&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;st0&quot;&gt;&quot; b&quot;&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw1&quot;&gt;return&lt;/span&gt; comparisons&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;kw4&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;kw4&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw2&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;  comparisons &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; getComparisons&lt;span class=&quot;sy0&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;st0&quot;&gt;&quot;&amp;lt;&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;==&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;st0&quot;&gt;&quot;&amp;lt;=&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;&amp;gt;=&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;!=&quot;&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Alright, by size this is hardly shorter than the repetitive original. But I still think it’s better! It has no dull repetition where bugs are most often introduced, and it’s using a variable-argument templated function so that the mixin can have its values available at compile time. It uses the next best thing to compile-time initialisation, which is a module initialiser &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;kw4&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw2&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; that just calls the function to perform the init.&lt;/p&gt;

&lt;h2&gt;Day 9: a switch statement!&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day09/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day09/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Day 9 was a simpler parsing problem, so simple that instead of using a regex I decided to just use a switch statement. There isn’t anything terribly fancy about switch statements, and they work almost exactly the same as they do in other languages. The only distinct features of switch statements in D is that they work on numeric, string, or bool types and that they have deprecated implicit fallthrough. Fallthrough instead must be explicitly done with &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw1&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;kw1&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; or will be once the deprecation is complete.&lt;/p&gt;
&lt;p&gt;Oh, and you can also specify ranges for a case statement, e.g.&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;  &lt;span class=&quot;kw1&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;kw1&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;'z'&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;co1&quot;&gt;// do stuff with lowercase ASCII&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;kw1&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It’s the small conveniences that make this pleasant. &lt;em&gt;Programming in D&lt;/em&gt; has &lt;a href=&quot;http://ddili.org/ders/d.en/switch_case.html&quot;&gt;a good discussion&lt;/a&gt; on switch statements.&lt;/p&gt;

&lt;h2&gt;Day 10: learning what ranges &lt;em&gt;cannot&lt;/em&gt; do&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day10/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day10/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;So, superficially, you might think that expressions like &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;arr&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;..&lt;/span&gt;$&lt;span class=&quot;sy0&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;, which is valid, would also allow for things like &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;arr&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;$&lt;span class=&quot;sy0&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; to traverse the array in reverse order or some other syntax for having a different step size than +1. At least I did. These kinds of array indexing are common in numeric-based arrays such as Octave, Julia, R, or Python’s numpy. So for day 10’s hash, which requires reversing an array, I thought I could just do that.&lt;/p&gt;
&lt;p&gt;Turns out that the language doesn’t have syntax to allow this, but after &lt;a href=&quot;https://dlang.org/phobos/std_algorithm_mutation.html#.reverse&quot;&gt;a quick trip to the standard library&lt;/a&gt; I found the necessary functions. What I thought could be written as&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;arr&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;sy0&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;me1&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;b&lt;span class=&quot;sy0&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;me1&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;instead became&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;reverse&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;sy0&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;me1&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Other than this minor discovery about ranges, Day 10 was more about getting the algorithm right than using any specialised D utilities. Since real hashes typically allow several sizes, I templated the hash functions with the total size, rounds of hashing, and chunk size, with a template restriction that the chunk size must divide the total size:&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; getHash&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt; Size&lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt; Rounds&lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt; ChunkSize&lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;string&lt;/span&gt; input&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;br/&gt; &lt;span class=&quot;kw1&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt; Size &lt;span class=&quot;sy0&quot;&gt;%&lt;/span&gt; ChunkSize &lt;span class=&quot;sy0&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nu0&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;co1&quot;&gt;// ...&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Nothing new here. I just like that template restrictions are so easy to write.&lt;/p&gt;

&lt;h2&gt;Day 11: offline hex coding&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day11/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day11/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I did most of Day 11 on paper. It took me a while to figure out a proper hex coordinate system and what the distance function in that coordinate system should be. I had seen hex coordinates from playing &lt;a href=&quot;http://wesnoth.org/&quot;&gt;Battle for Wesnoth&lt;/a&gt;, but took me a while to figure them out again. Once I had that, the actual D code is pretty simple and used no techniques I hadn’t seen before. I think this is the first time I used the &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;cumulativeFold&lt;/span&gt;&lt;/code&gt; function, but other than that, nothing to see here. An immutable global &lt;abbr title=&quot;dict&quot;&gt;associative array&lt;/abbr&gt; populated at module init time like before,&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;kw4&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw2&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;  directions &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;st0&quot;&gt;&quot;ne&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;st0&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;st0&quot;&gt;&quot;nw&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;st0&quot;&gt;&quot;sw&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,-&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;st0&quot;&gt;&quot;s&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,-&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;st0&quot;&gt;&quot;se&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and that’s it.&lt;/p&gt;

&lt;h2&gt;Day 12: for want of a set&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day12/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day12/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The only new D technique for this problem was that I decided to use a set structure to keep track of which graph nodes had been visited. The only problem is that D doesn’t have a built-in set structure (yet?), but it does have a &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;setDifference&lt;/span&gt;&lt;/code&gt; function. It’s a bit clunky. It only works on ordered arrays, but that was sufficient for my purpose here, and probably not much worse than hashing with a traditional set structure would have been.&lt;/p&gt;
&lt;p&gt;One further observation: D has an &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw2&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; keyword, which can be used to test membership, like in Python (it also has an unrelated use for defining input and output arguments to functions), but unlike Python, only for associative arrays. This makes sense, because the complexity of testing for membership for other data structures can vary widely depending on the structure and the chosen algorithm, and there isn’t a clear universal choice like there is for associative arrays.&lt;/p&gt;
&lt;p&gt;If desired, however, it’s possible to define the &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw2&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; operator for any other class, like so:&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;bool&lt;/span&gt; opBinaryRight&lt;span class=&quot;sy0&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;st0&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;T elt&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;co1&quot;&gt;// check that elt is in `this`&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I would assume that’s what you could use to write a set class for D.&lt;/p&gt;

&lt;h2&gt;Day 13: more offline coding&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day13/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day13/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This one is another where I did most of the solution on paper and thus managed to write a very short program. No new D techniques here, just the usual functionalish style that I seem to be developing.&lt;/p&gt;

&lt;h2&gt;Day 14: reusing older code as a module&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day14/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day14/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The problem here is interesting because I’ve solved this labelling of connected components problem before in C++ for GNU Octave. I wrote &lt;a href=&quot;https://sourceforge.net/p/octave/image/ci/1b8b83d01211/tree/src/bwlabeln.cc#l370&quot;&gt;the initial bwlabeln implementation&lt;/a&gt; using &lt;a href=&quot;https://en.wikipedia.org/wiki/Disjoint-set_data_structure&quot;&gt;union-find&lt;/a&gt;. I was tempted to do the same here, but I couldn’t think of a quick way to do so, and talking to others in the #lobsters channel in IRC, I realised that a simpler recursive solution would work without overflowing the stack (because the problem is small enough, not because a stack-based algorithm is clever).&lt;/p&gt;
&lt;p&gt;The interesting part is reusing an earlier solution, the hashing algorithm from &lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day10&quot;&gt;Day 10&lt;/a&gt;. At first blush, this is quite simple: every D file also creates its own module, namespaced if desired by directories. It’s very reminiscent of Python’s &lt;code class=&quot;codecolorer python solarized-light&quot;&gt;&lt;span class=&quot;python&quot;&gt;&lt;span class=&quot;kw1&quot;&gt;import&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; statement and module namespacing. The only snag is that my other file has a &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;void&lt;/span&gt; main&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; function and so does this one. The linker won’t like that duplicate definition of symbols. For this purpose, D offers conditional compilation, which in C and C++ is usually achieved via &lt;a href=&quot;http://www.c4learn.com/c-programming/c-ifdef-conditional-compilation-directives/&quot;&gt;a familiar C preprocessor macro idiom.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In D, this idiom is codified into the language proper via the &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;version&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; kewyord, like so&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;standalone&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw4&quot;&gt;void&lt;/span&gt; main&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;co1&quot;&gt;// do main things here&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This instructs the compiler to compile the inside of the &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;version&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; block only if an option called “standalone” is passed in,&lt;/p&gt;
&lt;div class=&quot;codecolorer-container bash solarized-light&quot;&gt;
&lt;div class=&quot;bash codecolorer&quot;&gt;gdc &lt;span class=&quot;re5&quot;&gt;-O2&lt;/span&gt; &lt;span class=&quot;re5&quot;&gt;-fversion&lt;/span&gt;=standalone app.d &lt;span class=&quot;re5&quot;&gt;-o&lt;/span&gt; day10&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;or, with regrettably slightly different flags,&lt;/p&gt;
&lt;div class=&quot;codecolorer-container bash solarized-light&quot;&gt;
&lt;div class=&quot;bash codecolorer&quot;&gt;ldc2 &lt;span class=&quot;re5&quot;&gt;-O2&lt;/span&gt; &lt;span class=&quot;re5&quot;&gt;-d-version&lt;/span&gt;=standalone app.d &lt;span class=&quot;re5&quot;&gt;-of&lt;/span&gt; day10&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There are other built-in arguments for &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;version&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;, &lt;a href=&quot;https://dlang.org/spec/version.html#predefined-versions&quot;&gt;such as “linux” or “OSX” to conditionally compile for a particular operating system&lt;/a&gt;. This keyword offers quite a bit of flexibility for conditional compilation, and it’s a big improvement over C preprocessor idioms.&lt;/p&gt;

&lt;h2&gt;Day 15: generators, lambdas, functions, and delegates&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day15/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day15/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This problem was an opportunity to test out a new function, &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;generate&lt;/span&gt;&lt;/code&gt;, which takes a function and iterates it repeatedly on a range. Haskell calls this one &lt;code class=&quot;codecolorer haskell solarized-light&quot;&gt;&lt;span class=&quot;haskell&quot;&gt;&lt;a href=&quot;http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate&quot;&gt;&lt;span class=&quot;kw3&quot;&gt;iterate&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/code&gt;, which I think is a better name. It’s also a lazy generator, so you need something like &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;take&lt;/span&gt;&lt;/code&gt; to say how much of the generator do you want to use. For example, the Haskell code&lt;/p&gt;

&lt;p&gt;can be translated into D as&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; x &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nu0&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; pows &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; generate&lt;span class=&quot;sy0&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;sy0&quot;&gt;=&amp;gt;&lt;/span&gt; x&lt;span class=&quot;sy0&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There are &lt;a href=&quot;https://dlang.org/phobos/std_range.html#generate&quot;&gt;other examples in the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let also take a moment here to talk about the different anonymous functions in D. The following both declare a function that squares its input:&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;&lt;span class=&quot;kw2&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kw1&quot;&gt;return&lt;/span&gt; a&lt;span class=&quot;sy0&quot;&gt;^^&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;kw2&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kw1&quot;&gt;return&lt;/span&gt; a&lt;span class=&quot;sy0&quot;&gt;^^&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The difference is just a question of closure. The &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw2&quot;&gt;delegate&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; version carries a hidden pointer to its enclosing scope, so it can dynamically close over the outer scope variables. If you can’t afford to pay this runtime penalty, the &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw2&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; version doesn’t reference the enclosing scope (no extra pointer). So, for a generator, you typically want to use a &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw2&quot;&gt;delegate&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;, since you want the generator to remember its scoped variables across successive calls, like what I did:&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; generator&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;ulong&lt;/span&gt; val&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw4&quot;&gt;ulong&lt;/span&gt; mult&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw1&quot;&gt;return&lt;/span&gt; generate&lt;span class=&quot;sy0&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw2&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;      val &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;val &lt;span class=&quot;sy0&quot;&gt;*&lt;/span&gt; mult&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nu0&quot;&gt;2147483647&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;      &lt;span class=&quot;kw1&quot;&gt;return&lt;/span&gt; val&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This function returns a generator range where each entry will result in a new entry of this &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_congruential_generator&quot;&gt;pseudorandom linear congruence generator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw2&quot;&gt;delegate&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;/&lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw2&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; is part of the type, and can be omitted if it can be inferred by context (e.g. when passing a function into another function as an argument). Furthermore, there’s a lambda shorthand that I have been using all along, where the &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kw1&quot;&gt;return&lt;/span&gt; foo&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; boilerplate can be shortened to just &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;sy0&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;  &lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;=&amp;gt;&lt;/span&gt; a&lt;span class=&quot;sy0&quot;&gt;^^&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;2&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This form is only valid where there’s enough context to infer if it’s a &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw2&quot;&gt;delegate&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; or a &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw2&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;, as well as the type of &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;a&lt;/span&gt;&lt;/code&gt; itself. More details in &lt;a href=&quot;https://dlang.org/spec/expression.html#function_literals&quot;&gt;the language spec&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Day 16: permutations with primitive tools&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day16/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day16/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This permutations problem made me reach for the &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;std.&lt;span class=&quot;me1&quot;&gt;algorithm&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; function &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;bringToFront&lt;/span&gt;&lt;/code&gt; for cyclicly permuting an array in place like so,&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;   bringToFront&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;progs&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;rot&lt;span class=&quot;sy0&quot;&gt;..&lt;/span&gt;$&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; progs&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;me1&quot;&gt;rot&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It’s a surprisingly versatile function that can be used to perform more tricks than cyclic permutations. Its documentation is &lt;a href=&quot;https://dlang.org/phobos/std_algorithm_mutation.html#.bringToFront&quot;&gt;worth a read&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also ran into &lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=16959&quot;&gt;a D bug here&lt;/a&gt;. I had to create a character array from an immutable input string, but due to Unicode-related reasons that D has for handling characters especially, I had to cast to &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;ubyte&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; instead of &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Besides that, for the second part where you had to realise that permutations cannot have too big of an &lt;a href=&quot;https://en.wikipedia.org/wiki/Group_action#Orbits_and_stabilizers&quot;&gt;orbit&lt;/a&gt;, I also ended up using a string array with the &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;canFind&lt;/span&gt;&lt;/code&gt; from &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;std.&lt;span class=&quot;me1&quot;&gt;algorithm&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;. I would have preferred a string set with hashing instead of linear searching, but it didn’t make a huge difference for the size of this problem.&lt;/p&gt;
&lt;p&gt;I really want sets in the D standard library. Maybe I should see what I can do to make them happen.&lt;/p&gt;

&lt;h2&gt;Day 17: avoiding all the work with a clever observation&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day17/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day17/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This puzzle is a variation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Josephus_problem&quot;&gt;Josephus problem&lt;/a&gt;. I needed some help from #lobsters in IRC to figure out how to solve it. There aren’t any new D techniques, just some dumb array concatenation with the tilde operator for inserting elements into an array:&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;circ &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; circ&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;me1&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;~&lt;/span&gt; y &lt;span class=&quot;sy0&quot;&gt;~&lt;/span&gt; circ&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;pos&lt;span class=&quot;sy0&quot;&gt;..&lt;/span&gt;$&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The second part can be solved via the simple observation that you only&lt;br/&gt;need to track one position, the one immediately following zero.&lt;/p&gt;

&lt;h2&gt;Day 18: concurrency I can finally understand and write correctly&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day18/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day18/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This day was an exciting one for me. Discussing this problem with others, it seems many people had much difficulty solving this problem in other programming languages. Most people seemed to have to emulate their own concurrency with no help from their programming language of choice. In contrast, D absolutely shined here, because it is based on &lt;a href=&quot;https://en.wikipedia.org/wiki/Actor_model&quot;&gt;the actor concurrency model (message passing)&lt;/a&gt;, which precisely fits the problem statement. (There are other concurrency primitives in case the actor concurrency model isn’t sufficient, but it was sufficient for me.)&lt;/p&gt;
&lt;p&gt;The basic idea of concurrency in D is that each thread of execution localises all of its state. By default, threads share no data. In order to communicate with each other, threads pass messages. A thread can indicate at any time when it’s ready to send or receive messages. Messages can be any type, and each thread says what type it’s expecting to receive. If a thread receives a type it’s not prepared to handle, it will throw an exception.&lt;/p&gt;
&lt;p&gt;There are more details, such as what happens if a thread receives too many messages but doesn’t respond to any of them. Let’s not go into that now. Basic idea: threads get spawned, threads send and receive messages.&lt;/p&gt;
&lt;p&gt;Let’s spend a little bit of time looking at the relevant functions and types I used, all defined in &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;std.&lt;span class=&quot;me1&quot;&gt;concurrency&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;dl&gt;&lt;dt&gt;spawn&lt;/dt&gt;
&lt;dd&gt;Starts a thread of execution. The first argument is a reference to the function that this thread will execute, along with any arguments that function may take. Returns a &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;Tid&lt;/span&gt;&lt;/code&gt; type, a thread ID. This is used as the address to send messages to. A thread can refer to its parent thread via the special variable &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;ownerTid&lt;/span&gt;&lt;/code&gt;.
&lt;p&gt;Unless explicitly declared &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;shared&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;, the arguments of a threaded function must be immutable. This is how the compiler guarantees no race conditions when manipulating those variables. Of course, with &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;shared&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; variables, the programmer is signalling that they are taking over synchronisation of that data, which may require using low-level mutexes.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;send&lt;/dt&gt;
&lt;dd&gt;Send a message to a particular thread. The first argument is the thread id. The other arguments can be anything. It’s up to the receiving thread to handle the arguments it receives.&lt;/dd&gt;
&lt;dt&gt;receiveOnly&lt;/dt&gt;
&lt;dd&gt;Indicate that this thread is ready to receive a single type, and returns the value of that type. The type must of course be specified as a compile-time argument.&lt;/dd&gt;
&lt;dt&gt;receive&lt;/dt&gt;
&lt;dd&gt;Indicates what to do with any of several possible types. The arguments to this function are a collection of functions, whose parameters types will be dynamically type-matched with received types. I didn’t need this function, but I wanted to mention it exists.&lt;/dd&gt;
&lt;dt&gt;receiveTimeout&lt;/dt&gt;
&lt;dd&gt;The problem statement is designed to deadlock. Although there probably is a more elegant solution, timing out on deadlock was the solution I wrote. This function does just that: listens for a message for a set of amount of time. If a message is received in the designated time, its handler function is executed and &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;receiveTimeout&lt;/span&gt;&lt;/code&gt; returns &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw2&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;. If the timeout happens, it returns &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw2&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; instead.&lt;/dd&gt;
&lt;/dl&gt;&lt;p&gt;Armed with these tools, the solution was a breeze to write. I first spawn two threads and save their thread ids,&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;  &lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; tid1 &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; spawn&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;&amp;amp;&lt;/span&gt;runProgram&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; opcodes&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nu0&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; tid2 &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; spawn&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;&amp;amp;&lt;/span&gt;runProgram&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; opcodes&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nu0&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Each of the two threads defined by &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;runProgram&lt;/span&gt;&lt;/code&gt; then immediately stops, waiting for a thread id, to know whom to talk to,&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;void&lt;/span&gt; runProgram&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;immutable&lt;/span&gt; &lt;span class=&quot;kw4&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; opcodes&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw4&quot;&gt;ulong&lt;/span&gt; pid&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; otherProg &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; receiveOnly&lt;span class=&quot;sy0&quot;&gt;!&lt;/span&gt;Tid&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt; &lt;span class=&quot;co1&quot;&gt;// ...&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The parent thread then connects the two worker threads to each other,&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;  send&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;tid1&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; tid2&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  send&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;tid2&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; tid1&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And off they go, the two threads run through the opcodes in the problem statement, and eventually they deadlock, which I decided to handle with a timeout like so,&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;    &lt;span class=&quot;kw1&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;rcv&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt;&lt;br/&gt;      &lt;span class=&quot;kw1&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;!&lt;/span&gt;receiveTimeout&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;100&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;msecs&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;long&lt;/span&gt; val&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;regs&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;reg&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; val&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span class=&quot;kw1&quot;&gt;goto&lt;/span&gt; done&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;      &lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;br/&gt;      &lt;span class=&quot;co1&quot;&gt;// no timeout, handle next opcode&lt;/span&gt;&lt;br/&gt;      &lt;span class=&quot;kw1&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;kw2&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After the thread has timed out, it signals to the parent thread that it’s done,&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;  done&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt;&lt;br/&gt;  send&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;ownerTid&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; thisTid&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; sent&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The parent in turn receives two tuples with thread id and computed value from each thread, and based on that decides what to output, after figuring out which thread is which,&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;  &lt;span class=&quot;co1&quot;&gt;// Wait for both children to let us know they're done.&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; done1 &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; receiveOnly&lt;span class=&quot;sy0&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;Tid&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw4&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; done2 &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; receiveOnly&lt;span class=&quot;sy0&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;Tid&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw4&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw1&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;done1&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;==&lt;/span&gt; tid2&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;    writeln&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;done1&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw1&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;    writeln&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;done2&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And voilà, concurrency easy-peasy.&lt;/p&gt;

&lt;h2&gt;Day 19: string parsing with enums and final switches&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day19/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day19/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The only new D technique here are final switches. A &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kw1&quot;&gt;switch&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; is for &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;enum&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; types, to make the compiler enforce you writing a &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw1&quot;&gt;case&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; to match all of the possible values. That’s what I did here, where I wanted to make sure I matched the up, down, left, and right directions:&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;    &lt;span class=&quot;kw4&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kw1&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;dir&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;kw1&quot;&gt;case&lt;/span&gt; DIR.&lt;span class=&quot;me1&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt;&lt;br/&gt;      j&lt;span class=&quot;sy0&quot;&gt;++;&lt;/span&gt;&lt;br/&gt;      &lt;span class=&quot;kw1&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;kw1&quot;&gt;case&lt;/span&gt; DIR.&lt;span class=&quot;me1&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt;&lt;br/&gt;      j&lt;span class=&quot;sy0&quot;&gt;--;&lt;/span&gt;&lt;br/&gt;      &lt;span class=&quot;kw1&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;kw1&quot;&gt;case&lt;/span&gt; DIR.&lt;span class=&quot;me1&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt;&lt;br/&gt;      i&lt;span class=&quot;sy0&quot;&gt;--;&lt;/span&gt;&lt;br/&gt;      &lt;span class=&quot;kw1&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;kw1&quot;&gt;case&lt;/span&gt; DIR.&lt;span class=&quot;me1&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt;&lt;br/&gt;      i&lt;span class=&quot;sy0&quot;&gt;++;&lt;/span&gt;&lt;br/&gt;      &lt;span class=&quot;kw1&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The rest of the problem is merely some string parsing.&lt;/p&gt;

&lt;h2&gt;Day 20: a physics problem with vector operations&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day20/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day20/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I have not yet done serious numerical work with D, but I can see that it has all of the necessary ingredients for it. One of the most obvious amongst these is that it has &lt;a href=&quot;https://dlang.org/spec/arrays.html#array-operations&quot;&gt;built-in support for writing vector instructions&lt;/a&gt;. Given &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;struct&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; to model a particle in motion,&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;struct&lt;/span&gt; particle &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw4&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; pos&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw4&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; vel&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw4&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; acc&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;the following function return another particle where all of the vectors have been divided by its norm (i.e. normalised to 1):&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; unit&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;particle p&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt;&lt;br/&gt;    pos &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; p.&lt;span class=&quot;me1&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;    vel &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; p.&lt;span class=&quot;me1&quot;&gt;vel&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;    acc &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; p.&lt;span class=&quot;me1&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  pos&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;/=&lt;/span&gt; pos.&lt;span class=&quot;me1&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  vel&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;/=&lt;/span&gt; vel.&lt;span class=&quot;me1&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  acc&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;/=&lt;/span&gt; acc.&lt;span class=&quot;me1&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  particle u &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;pos&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; vel&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; acc&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw1&quot;&gt;return&lt;/span&gt; u&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;vec&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;/=&lt;/span&gt; scalar&lt;/span&gt;&lt;/code&gt; notation divides all of the vector by the given scalar. But that’s not all. You can also add or multiply vectors elementwise with similar syntax,&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;      &lt;span class=&quot;kw4&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; diff1 &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; p.&lt;span class=&quot;me1&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; diff2 &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; p.&lt;span class=&quot;me1&quot;&gt;vel&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;      diff1&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;-=&lt;/span&gt; p.&lt;span class=&quot;me1&quot;&gt;vel&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;      diff2&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;-=&lt;/span&gt; p.&lt;span class=&quot;me1&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;diff1&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;diff2&lt;/span&gt;&lt;/code&gt; give the vector difference between the position and velocity, and respectively, velocity in acceleration (I use the criterion of all of three of these being mostly collinear to determine if all particles have escaped the system and thus can no longer interact with any other particle).&lt;/p&gt;
&lt;p&gt;This is mostly syntactic sugar, however. Although the D compiler can sometimes turn instructions like these into native vector instructions like &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Vector_Extensions&quot;&gt;AVX&lt;/a&gt;, real vectorisation has to be done via &lt;a href=&quot;https://dlang.org/spec/simd.html&quot;&gt;some standard library support&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Day 21: an indexable, hashable, comparable struct&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day21/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day21/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I was happy to recognise, via some string mixins, that I could solve this problem by considering the &lt;a href=&quot;https://en.wikipedia.org/wiki/Dihedral_group&quot;&gt;dihedral group&lt;/a&gt; of the square:&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;immutable&lt;/span&gt; dihedralFun &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;st0&quot;&gt;&quot;function(ref const Pattern p) {&lt;br/&gt;  auto n = p.dim;&lt;br/&gt;  auto output = new int[][](n, n);&lt;br/&gt;  foreach(i; 0..n) {&lt;br/&gt;    foreach(j; 0..n) {&lt;br/&gt;      output[i][j] = p.grid[%s][%s];&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;  return output;&lt;br/&gt;}&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;p&gt;&lt;span class=&quot;kw4&quot;&gt;immutable&lt;/span&gt; dihedralFourGroup &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw2&quot;&gt;mixin&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;format&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;dihedralFun&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;st0&quot;&gt;&quot;j&quot;&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw2&quot;&gt;mixin&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;format&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;dihedralFun&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;n-i-1&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;j&quot;&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw2&quot;&gt;mixin&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;format&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;dihedralFun&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;st0&quot;&gt;&quot;n-j-1&quot;&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw2&quot;&gt;mixin&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;format&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;dihedralFun&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;n-i-1&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;n-j-1&quot;&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw2&quot;&gt;mixin&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;format&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;dihedralFun&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;j&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;st0&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw2&quot;&gt;mixin&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;format&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;dihedralFun&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;n-j-1&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw2&quot;&gt;mixin&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;format&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;dihedralFun&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;j&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;st0&quot;&gt;&quot;n-i-1&quot;&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw2&quot;&gt;mixin&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;format&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;dihedralFun&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;n-j-1&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;n-i-1&quot;&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This isn’t a new technique, but I’m really happy how it turns out. Almost like lisp macros, but without devolving into the lawless chaos of Python or Javascript &lt;code class=&quot;codecolorer python solarized-light&quot;&gt;&lt;span class=&quot;python&quot;&gt;&lt;span class=&quot;kw2&quot;&gt;eval&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; or C preprocessor macros. As an aside, the &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;format&lt;/span&gt;&lt;/code&gt; function accepts formatted strings with &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Strings/Articles/formatSpecifiers.html&quot;&gt;POSIX syntax for positional arguments&lt;/a&gt;, but there isn’t anything built-in as nice as Perl string interpolation or Python format strings.&lt;/p&gt;
&lt;p&gt;The real meat of this problem was to implement a grid structure that could be hashed, compared, and indexed. This is is all done with a number of utility functions. For indexing and slicing, the basic idea is that for a user-defined type &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;foo&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;  foo&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;bar&lt;span class=&quot;sy0&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;me1&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;is sugar for&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;  foo.&lt;span class=&quot;me1&quot;&gt;opIndex&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;foo.&lt;span class=&quot;me1&quot;&gt;opSlice&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;bar&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; baz&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;so those are the two functions you need to implement for indexing and slicing. Similarly, for equality comparison and hashing, you implement &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;opEquals&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;toHash&lt;/span&gt;&lt;/code&gt; respectively. I relied on the dihedral functions above for comparison for this problem.&lt;/p&gt;
&lt;p&gt;After implementing these functions for a struct (recall: like a class, but with value semantics and no inheritance), the rest of the problem was string parsing and a bit of logic to implement the fractal-like growth rule.&lt;/p&gt;

&lt;h2&gt;Day 22: more enums, final switches, and complex numbers&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day22/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day22/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Another rectangular grid problem, which I again decided to represent via complex numbers. The posssible infection states given in the problem I turned into an &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;enum&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; which I then checked with a &lt;code class=&quot;codecolorer d solarized-light&quot;&gt;&lt;span class=&quot;d&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kw1&quot;&gt;switch&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; as before. The grid is then just an associative array from complex grid positions to infection states.&lt;/p&gt;
&lt;p&gt;Nothing new here. By now these are all familiar tools and writing D code is becoming habitual for me.&lt;/p&gt;

&lt;h2&gt;Day 23: another opcode parsing problem&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day23/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day23/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This problem wasn’t technically difficult from a D point of view. The usual switches and string parsing techniques of &lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day08&quot;&gt;days 8&lt;/a&gt; and &lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day18&quot;&gt;18&lt;/a&gt; work just as well. In fact, I started with the code of &lt;a href=&quot;http://jordi.inversethought.com/blog/advent-of-d/#day18&quot;&gt;day 18&lt;/a&gt; and modified it slightly to fit this problem.&lt;/p&gt;
&lt;p&gt;The challenge was to statically analyse the opcode program to determine that it is implementing a very inefficient primality testing algorithm. I won’t go into an analysis of that program here because &lt;a href=&quot;https://markheath.net/post/advent-of-code-2017-day-23&quot;&gt;others have already done a remarkable job of explaining it&lt;/a&gt;. Once this analysis was complete, the meat of the problem then becomes to write a faster primality testing algorithm, such as dumb (but not too dumb) trial division,&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; isComposite&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;long&lt;/span&gt; p&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw1&quot;&gt;return&lt;/span&gt; iota&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; sqrt&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw2&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; p&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;sy0&quot;&gt;=&amp;gt;&lt;/span&gt; p &lt;span class=&quot;sy0&quot;&gt;%&lt;/span&gt; x &lt;span class=&quot;sy0&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nu0&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and use this test at the appropriate location.&lt;/p&gt;

&lt;h2&gt;Day 24: a routine graph-search problem&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day24/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day24/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This problem required some sort of graph structure, which I implemented as an associative array from node ids to all edges incident to that node. The problem then reduces to some sort of graph traversal (I did &lt;a href=&quot;https://en.wikipedia.org/wiki/Depth-first_search&quot;&gt;depth-first search&lt;/a&gt;), keeping track of edge weights.&lt;/p&gt;
&lt;p&gt;No new D techniques here either, just more practice with my growing bag of tricks.&lt;/p&gt;

&lt;h2&gt;Day 25: formatted reads to finish off Advent of D&lt;/h2&gt;
&lt;p&gt;(&lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day25/problem&quot;&gt;problem statement&lt;/a&gt; / &lt;a href=&quot;http://inversethought.com/hg/aoc/file/tip/2017/day25/app.d&quot;&gt;my solution&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The final problem involved parsing a slightly more verbose &lt;abbr title=&quot;Domain-specific languge&quot;&gt;DSL&lt;/abbr&gt;. For this, I decided to use formatted strings for reading, like so,&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; branchFmt &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;st0&quot;&gt;&quot;    - Write the value %d.&lt;br/&gt;    - Move one slot to the %s.&lt;br/&gt;    - Continue with state %s.&lt;br/&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;p&gt;&lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; parseBranch&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;File f&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw4&quot;&gt;int&lt;/span&gt; writeval&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw4&quot;&gt;string&lt;/span&gt; movedir&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw4&quot;&gt;char&lt;/span&gt; newstate&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;  f.&lt;span class=&quot;me1&quot;&gt;readf&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;branchFmt&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;&amp;amp;&lt;/span&gt;writeval&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;&amp;amp;&lt;/span&gt;movedir&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;&amp;amp;&lt;/span&gt;newstate&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw1&quot;&gt;return&lt;/span&gt; Branch&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;writeval &lt;span class=&quot;sy0&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kw2&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw2&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; movedir &lt;span class=&quot;sy0&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;st0&quot;&gt;&quot;left&quot;&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nu0&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nu0&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; newstate&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is admittedly a bit brittle. Even the type check between the formatted string and the expected types is done at runtime (but newer D versions have &lt;a href=&quot;https://dlang.org/phobos/std_stdio.html#.readf&quot;&gt;a compile-time version of readf&lt;/a&gt; for type-checking the format string). An error here can cause exceptions at runtime.&lt;/p&gt;
&lt;p&gt;Other than this, the only new technique here is that I actually wrote a loop to parse the program file:&lt;/p&gt;
&lt;div class=&quot;codecolorer-container d solarized-light&quot;&gt;
&lt;div class=&quot;d codecolorer&quot;&gt;&lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; parseInstructions&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;File f&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;  Instruction&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kw4&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; instructions&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;p&gt;  &lt;span class=&quot;kw1&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;!&lt;/span&gt;f.&lt;span class=&quot;me1&quot;&gt;eof&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;kw4&quot;&gt;char&lt;/span&gt; state&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;    f.&lt;span class=&quot;me1&quot;&gt;readf&lt;/span&gt;&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;st0&quot;&gt;&quot;In state %s:&lt;span class=&quot;es1&quot;&gt;\n&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;&amp;amp;&lt;/span&gt;state&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;    f.&lt;span class=&quot;me1&quot;&gt;readln&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co1&quot;&gt;// &quot;If the current value is 0:&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; if0 &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; f.&lt;span class=&quot;me1&quot;&gt;parseBranch&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;    f.&lt;span class=&quot;me1&quot;&gt;readln&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co1&quot;&gt;// &quot;If the current value is 1:&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span class=&quot;kw4&quot;&gt;auto&lt;/span&gt; if1 &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; f.&lt;span class=&quot;me1&quot;&gt;parseBranch&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;    f.&lt;span class=&quot;me1&quot;&gt;readln&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co1&quot;&gt;// Blank line&lt;/span&gt;&lt;br/&gt;    instructions&lt;span class=&quot;br0&quot;&gt;[&lt;/span&gt;state&lt;span class=&quot;br0&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; Instruction&lt;span class=&quot;br0&quot;&gt;(&lt;/span&gt;if0&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt; if1&lt;span class=&quot;br0&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;br/&gt;  &lt;span class=&quot;kw1&quot;&gt;return&lt;/span&gt; instructions&lt;span class=&quot;sy0&quot;&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;br0&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A small comfort here is that checking for eof in the loop condition actually works. This is always subtly wrong in C++ and I can never remember why.&lt;/p&gt;
&lt;p&gt;What’s left of the problem is absolutely routine D by now: associative arrays, &lt;abbr title=&quot;Uniform function-calling syntax&quot;&gt;UFCS&lt;/abbr&gt;, foreach loops, standard library utilities for summing and iterating and so forth. A few of my favourite things.&lt;/p&gt;

&lt;p&gt;The best part is that my code was also &lt;em&gt;fast&lt;/em&gt;! I was comparing my solutions above with someone else who was doing their Advent of Code in C. I could routinely match his execution speed on the problems where we bothered to compare, whenever we wrote similar algorithms. I’m eager to see what D can do when faced with some real number-crunching.&lt;/p&gt;
&lt;p&gt;After all this, I have come to appreciate D more, as well as seeing some of its weak points. I think I have already raved enough about how much I like its functional style, its standard library, its type-checking, and its compile-time calculation. I also ran into a few bugs and deprecated features. I have also observed some language questionable design choices. Not once did I notice having a garbage collector. It was lots of fun.&lt;/p&gt;
&lt;p&gt;Merry belated Christmas!&lt;/p&gt;
</description>
<pubDate>Mon, 12 Mar 2018 13:08:38 +0000</pubDate>
<dc:creator>jordigh</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://jordi.inversethought.com/blog/advent-of-d/</dc:identifier>
</item>
<item>
<title>Compressing and enhancing hand-written notes (2016)</title>
<link>https://mzucker.github.io/2016/09/20/noteshrink.html</link>
<guid isPermaLink="true" >https://mzucker.github.io/2016/09/20/noteshrink.html</guid>
<description>&lt;p&gt;I wrote a program to clean up scans of handwritten notes while simultaneously reducing file size.&lt;/p&gt;
&lt;p&gt;Example input and output:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1_comparison.png&quot; alt=&quot;input/output comparison&quot; class=&quot;center-image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Left:&lt;/em&gt; input scan @ 300 DPI, 7.2MB PNG / 790KB JPG. &lt;em&gt;Right:&lt;/em&gt; output @ same resolution, 121KB PNG.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer:&lt;/em&gt; the process described here is more or less what the &lt;a href=&quot;https://blogs.office.com/2015/04/02/office-lens-comes-to-iphone-and-android/&quot;&gt;Office Lens&lt;/a&gt; app does already, and there’s probably any number of other tools that do similar things. I’m not claiming to have come up with a radical new invention – just my own implementation of a useful tool.&lt;/p&gt;
&lt;p&gt;If you’re in a hurry, just check out the &lt;a href=&quot;https://github.com/mzucker/noteshrink&quot;&gt;github&lt;/a&gt; repo, or jump down to the &lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#results&quot;&gt;results&lt;/a&gt; section, where you can play with interactive 3D diagrams of color clusters.&lt;/p&gt;

&lt;p&gt;Some of my classes don’t have an assigned textbook. For these, I like to appoint weekly “student scribes” to share their lecture notes with the rest of the class, so that there’s some kind written resource for students to double-check their understanding of the material. The notes get posted to a course website as PDFs.&lt;/p&gt;
&lt;p&gt;At school we have a “smart” copier capable of scanning to PDF, but the documents it produces are… less than attractive. Here’s some example output from a handwritten homework page:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/copier_bad.png&quot; alt=&quot;omg copier&quot; class=&quot;center-threequarters border&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Seemingly at random, the copier chooses whether to &lt;a href=&quot;http://www.leptonica.com/binarization.html&quot;&gt;binarize&lt;/a&gt; each mark (like the &lt;em&gt;x&lt;/em&gt;’s), or turn them into abysmally blocky JPGs (like the square root symbols). Needless to say, we can do better.&lt;/p&gt;

&lt;p&gt;We start out with a scan of a lovely page of student notes like this one:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/images/noteshrink/notesA1.jpg&quot;&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1.jpg&quot; alt=&quot;a page of notes&quot; class=&quot;center-half border&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The original PNG image scanned at 300 DPI is about 7.2MB; the same image converted to a JPG at quality level 85 is about 790KB.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; Since PDFs of scans are typically just a &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_container_format&quot;&gt;container format&lt;/a&gt; around PNG or JPG, we certainly don’t expect to &lt;em&gt;reduce&lt;/em&gt; the required storage size when converting to PDF. 800KB per page is pretty hefty – for the sake of loading times, I’d love to see things closer to 100KB/page.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Although this student is a very neat note-taker, the scan shown above looks a bit messy (through no fault of her own). There’s lots of bleed-through from the opposite side of the page, which is both distracting for the viewer and hard for a JPG or PNG encoder to compress, compared to a constant-color background.&lt;/p&gt;
&lt;p&gt;This is what the output of my &lt;code class=&quot;highlighter-rouge&quot;&gt;noteshrink.py&lt;/code&gt; program looks like:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/images/noteshrink/notesA1_output.png&quot;&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1_output.png&quot; alt=&quot;a page of notes&quot; class=&quot;center-half border&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It’s a comparatively tiny PNG file, weighing in at just 121KB. My favorite part? Not only did the image get &lt;em&gt;smaller&lt;/em&gt;, it also got &lt;em&gt;clearer&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Here are the steps required to produce the compact, clean image above:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;Identify the background color of the original scanned image.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Isolate the foreground by thresholding on difference from background color.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert to an indexed color PNG by choosing a small number of “representative colors” from the foreground.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Before we delve into each one of these steps, it might be useful to recap &lt;em&gt;how&lt;/em&gt; color images are stored digitally. Because humans have three different types of color-sensitive cells in their eyes, we can reconstruct any color by combining various intensities of red, green, and blue light.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; The resulting system equates colors with 3D points in the &lt;a href=&quot;https://en.wikipedia.org/wiki/RGB_color_space&quot;&gt;RGB colorspace&lt;/a&gt;, illustrated here:&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://commons.wikimedia.org/wiki/File:RGB_color_cube.svg&quot; class=&quot;center-image&quot;&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/RGB_color_cube.svg&quot; alt=&quot;RGB color cube&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Although a true vector space would allow an infinite number of continuously varying pixel intensities, we need to discretize colors in order to store them digitally – typically assigning 8 bits each to the red, green, and blue channels. Nevertheless, considering colors in an image analogously to points in a continuous 3D space provides powerful tools for analysis, as we shall see when we step through the process outlined above.&lt;/p&gt;

&lt;p&gt;Since the majority of the page is free from ink or lines, we might expect the paper color to be the one that appears most frequently in the scanned image – and if the scanner always represented every bit of unmarked white paper as the same RGB triplet, we would have no problems picking it out. Regrettably, this is not the case; random variations in color appear due to dust specks and smudges on the glass, color variations of the page itself, sensor noise, etc. So in reality, the “page color” can spread across thousands of distinct RGB values.&lt;/p&gt;
&lt;p&gt;The original scanned image is 2,081 x 2,531, with a total area of 5,267,011 pixels. Although we &lt;em&gt;could&lt;/em&gt; consider each individual pixel, it’s much faster to work on a representative sample of the input image. The &lt;code class=&quot;highlighter-rouge&quot;&gt;noteshrink.py&lt;/code&gt; program samples 5% of the input image by default (more than sufficient for scans at 300 DPI), but for now, let’s look at an even smaller subset of 10,000 pixels chosen at random from the original scan:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1_samples_raw.png&quot; alt=&quot;random pixels&quot; class=&quot;center-image border&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Although it bears scant resemblance to the actual scanned page – there’s no text to be found – the distribution of colors in the two images is pretty much identical. Both are mostly grayish-white, with a handful of red, blue, and dark gray pixels. Here are the same 10,000 pixels, sorted by brightness (e.g. the sum of their R, G, and B intensities):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1_samples_sorted.png&quot; alt=&quot;random pixels, sorted&quot; class=&quot;center-image border&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Viewed from afar, the bottom 80-90% of the image all seems to be the same color; however, closer inspection reveals quite a bit of variation. In fact, the most frequent color in the image above, with RGB value (240, 240, 242), accounts for just 226 of the 10,000 samples – less than 3% of the total number of pixels.&lt;/p&gt;
&lt;p&gt;Because the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mode_(statistics)&quot;&gt;mode&lt;/a&gt; here accounts for such a small percentage of the sample, we should question how reliably it describes the distribution of colors in the image. We’ll have a better chance of identifying a prevalent page color if we first reduce the &lt;a href=&quot;https://en.wikipedia.org/wiki/Color_depth&quot;&gt;bit depth&lt;/a&gt; of the image before finding the mode. Here’s what things look like when we move from 8 bits per channel to 4 by zeroing out the four &lt;a href=&quot;https://en.wikipedia.org/wiki/Least_significant_bit&quot;&gt;least significant bits&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1_samples_sorted_4bit.png&quot; alt=&quot;random pixels, sorted, 4 bits per channel&quot; class=&quot;center-image border&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Now the most frequently occurring color has RGB value (224, 224, 224), and accounts for 3,623 (36%) of the sampled pixels. Essentially, by reducing the bit depth, we are grouping similar pixels into larger “bins”, which makes it easier to find a strong peak in the data.&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;There’s a tradeoff here between reliability and precision: small bins enable finer distinctions of color, but bigger bins are much more robust. In the end, I went with 6 bits per channel to identify the background color, which seemed like a good sweet spot between the two extremes.&lt;/p&gt;

&lt;p&gt;Once we have identified the background color, we can &lt;a href=&quot;https://en.wikipedia.org/wiki/Thresholding_(image_processing)&quot;&gt;threshold&lt;/a&gt; the image according to how similar each pixel in the image is to it. One natural way to calculate the similarity of two colors is to compute the &lt;a href=&quot;https://en.wikipedia.org/wiki/Euclidean_distance&quot;&gt;Euclidean distance&lt;/a&gt; of their coordinates in RGB space; however, this simple method fails to properly segment the colors shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/colors.svg&quot; alt=&quot;difficult&quot; class=&quot;center-image border&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Here’s a table specifying the colors and their Euclidean distances from the background color:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Color&lt;/th&gt;
&lt;th&gt;Where found&lt;/th&gt;
&lt;th&gt;R&lt;/th&gt;
&lt;th&gt;G&lt;/th&gt;
&lt;th&gt;B&lt;/th&gt;
&lt;th&gt;Dist. from BG&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;white&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;background&lt;/td&gt;
&lt;td&gt;238&lt;/td&gt;
&lt;td&gt;238&lt;/td&gt;
&lt;td&gt;242&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;—&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;gray&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;bleed-through from back&lt;/td&gt;
&lt;td&gt;160&lt;/td&gt;
&lt;td&gt;168&lt;/td&gt;
&lt;td&gt;166&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;129.4&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;black&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;ink on front of page&lt;/td&gt;
&lt;td&gt;71&lt;/td&gt;
&lt;td&gt;73&lt;/td&gt;
&lt;td&gt;71&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;290.4&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;red&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;ink on front of page&lt;/td&gt;
&lt;td&gt;219&lt;/td&gt;
&lt;td&gt;83&lt;/td&gt;
&lt;td&gt;86&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;220.7&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;pink&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;vertical line at left margin&lt;/td&gt;
&lt;td&gt;243&lt;/td&gt;
&lt;td&gt;179&lt;/td&gt;
&lt;td&gt;182&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;84.3&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;As you can see, the dark gray bleed-through that we would like to classify as background is actually &lt;em&gt;further&lt;/em&gt; away from the white page color than the pink line color which we hope to classify as foreground. Any threshold on Euclidean distance that marks pink as foreground would necessarily also have to include the bleed-through.&lt;/p&gt;
&lt;p&gt;We can get around this issue by moving from RGB space to &lt;a href=&quot;https://en.wikipedia.org/wiki/HSL_and_HSV&quot;&gt;Hue-Saturation-Value&lt;/a&gt; (HSV) space, which deforms the RGB cube into the cylindrical shape illustrated in this cutaway view:&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#fn:7&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://commons.wikimedia.org/wiki/File:HSV_color_solid_cylinder.png&quot; class=&quot;center-half&quot;&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/hsv.png&quot; alt=&quot;diagram of HSV space&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The HSV cylinder features a rainbow of colors distributed circularly about its outside top edge; &lt;em&gt;hue&lt;/em&gt; refers to the angle along this circle. The central axis of the cylinder ranges from black at the bottom to white at the top, with gray shades in between – this entire axis has zero &lt;em&gt;saturation&lt;/em&gt;, or intensity of color, and the vivid hues on the outside circumference all have a saturation of 1.0. Finally, &lt;em&gt;value&lt;/em&gt; refers to the overall brightness of the color, ranging from black at the bottom to bright shades at the top.&lt;/p&gt;
&lt;p&gt;So now let’s reconsider our colors above, this time in terms of value and saturation:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Color&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Saturation&lt;/th&gt;
&lt;th&gt;Value diff. from BG&lt;/th&gt;
&lt;th&gt;Sat. diff from BG&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;white&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0.949&lt;/td&gt;
&lt;td&gt;0.017&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;—&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;—&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;gray&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0.659&lt;/td&gt;
&lt;td&gt;0.048&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.290&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.031&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;black&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0.286&lt;/td&gt;
&lt;td&gt;0.027&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.663&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.011&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;red&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0.859&lt;/td&gt;
&lt;td&gt;0.621&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.090&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.604&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;pink&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0.953&lt;/td&gt;
&lt;td&gt;0.263&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.004&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.247&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;As you might expect, white, black, and gray vary significantly in value, but share similarly low saturation levels – well below either red or pink. With the additional information provided by HSV, we can successfully mark a pixel as belonging to the foreground if either one of these criteria holds:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;the value differs by more than 0.3 from the background color, &lt;em&gt;or&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;the saturation differs by more than 0.2 from the background color&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The former criterion pulls in the black pen marks, whereas the latter pulls in the red ink as well as the pink line. Both criteria successfully exclude the gray bleed-through from the foreground. Different images may require different saturation/value thresholds; see the &lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#results&quot;&gt;results&lt;/a&gt; section for details.&lt;/p&gt;

&lt;p&gt;Once we isolate the foreground, we are left with a new set of colors corresponding to the marks on the page. Let’s visualize the set – but this time, instead of considering colors as a collection of pixels, we will consider them as 3D points in the RGB colorspace. The resulting scatterplot ends up looking quite “clumpy”, with several bands of related colors:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1_points_only.svg&quot; alt=&quot;scan foreground colors&quot; class=&quot;canvas3d border&quot; id=&quot;notesA1pointsonly&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Our goal now is to convert the original 24 bit-per-pixel image into an &lt;a href=&quot;https://en.wikipedia.org/wiki/Indexed_color&quot;&gt;indexed color&lt;/a&gt; image by choosing a small number (8, in this example) of colors to represent the whole image. This has two effects: first, it reduces the file size because specifying a color now requires only 3 bits (since ). Furthermore, it makes the resulting image more visually cohesive because similarly colored ink marks are likely to be assigned the same color in the final output image.&lt;/p&gt;
&lt;p&gt;To accomplish this goal we will use a data-driven method that exploits the “clumpy” nature of the diagram above. Choosing colors that correspond to the centers of clusters will lead to a set of colors that accurately represents the underlying data. In technical terms, we’ll be solving a &lt;a href=&quot;https://en.wikipedia.org/wiki/Color_quantization&quot;&gt;color quantization&lt;/a&gt; problem (which is itself just a special case of &lt;a href=&quot;https://en.wikipedia.org/wiki/Vector_quantization&quot;&gt;vector quantization&lt;/a&gt;), through the use of &lt;a href=&quot;https://en.wikipedia.org/wiki/Cluster_analysis&quot;&gt;cluster analysis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The particular methodological tool for the job that I picked is &lt;a href=&quot;https://en.wikipedia.org/wiki/K-means_clustering&quot;&gt;&lt;em&gt;k&lt;/em&gt;-means clustering&lt;/a&gt;. Its overall goal is to find a set of means or centers which minimizes the average distance from each point to the nearest center. Here’s what you get when you use it to pick out seven different clusters on the dataset above:&lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#fn:8&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1_plot.svg&quot; alt=&quot;Notes A1&quot; class=&quot;canvas3d border&quot; id=&quot;notesA1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In this diagram, the points with black outlines represent foreground color samples, and the colored lines connect them to their closest center in the RGB colorspace. When the image is converted to indexed color, each foreground sample will get replaced with the color of the closest center. Finally, the circular outlines indicate the distance from each center its furthest associated sample.&lt;/p&gt;

&lt;p&gt;Aside from being able to set the value and saturation thresholds, the &lt;code class=&quot;highlighter-rouge&quot;&gt;noteshrink.py&lt;/code&gt; program has several other notable features. By default, it increases the vividness and contrast of the final palette by rescaling the minimum and maximum intensity values to 0 and 255, respectively. Without this adjustment, the 8-color palette for the scan above would look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1_palette.png&quot; alt=&quot;original palette&quot; class=&quot;center-image border&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The adjusted palette is more vibrant:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1_modified_palette.png&quot; alt=&quot;adjusted palette&quot; class=&quot;center-image border&quot;/&gt;&lt;/p&gt;
&lt;p&gt;There is also an option to force the background color to white after isolating the foreground colors. To further reduce the PNG image sizes after conversion to indexed color, &lt;code class=&quot;highlighter-rouge&quot;&gt;noteshrink.py&lt;/code&gt; can automatically run &lt;a href=&quot;http://optipng.sourceforge.net/pngtech/optipng.html&quot;&gt;PNG optimization&lt;/a&gt; tools such as &lt;a href=&quot;http://optipng.sourceforge.net/&quot;&gt;optipng&lt;/a&gt;, &lt;a href=&quot;http://pmt.sourceforge.net/pngcrush/&quot;&gt;pngcrush&lt;/a&gt;, or &lt;a href=&quot;https://pngquant.org/&quot;&gt;pngquant&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The program’s final output combines several output images together into PDFs like &lt;a href=&quot;https://mzucker.github.io/images/noteshrink/notesA.pdf&quot;&gt;this one&lt;/a&gt; using ImageMagick’s &lt;a href=&quot;http://www.imagemagick.org/script/convert.php&quot;&gt;convert&lt;/a&gt; tool. As a further bonus, &lt;code class=&quot;highlighter-rouge&quot;&gt;noteshrink.py&lt;/code&gt; automatically sorts input filenames numerically (as opposed to alphabetically, as the shell &lt;a href=&quot;https://en.wikipedia.org/wiki/Glob_(programming)&quot;&gt;globbing&lt;/a&gt; operator does). This is helpful when your dumb scanning program&lt;sup id=&quot;fnref:9&quot;&gt;&lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#fn:9&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt; produces output filenames like &lt;code class=&quot;highlighter-rouge&quot;&gt;scan 9.png&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;scan 10.png&lt;/code&gt;, and you don’t want their order to be swapped in the PDF.&lt;/p&gt;

&lt;p&gt;Here are some more examples of the program output. The first one (&lt;a href=&quot;https://mzucker.github.io/images/noteshrink/tree.pdf&quot;&gt;PDF&lt;/a&gt;) looks great with the default threshold settings:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/tree_comparison.png&quot; alt=&quot;tree comparison&quot; class=&quot;center-image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Here is the visualization of the color clusters:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/tree_plot.svg&quot; alt=&quot;tree plot&quot; class=&quot;canvas3d border&quot; id=&quot;tree&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The next one (&lt;a href=&quot;https://mzucker.github.io/images/noteshrink/notesB.pdf&quot;&gt;PDF&lt;/a&gt;) required lowering the saturation threshold to 0.045 because the blue-gray lines are so drab:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesB1_comparison.png&quot; alt=&quot;notesB comparison&quot; class=&quot;center-image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Color clusters:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesB1_plot.svg&quot; alt=&quot;notesB plot&quot; class=&quot;canvas3d border&quot; id=&quot;notesB1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Finally, an example scanned in from engineer’s graph paper (&lt;a href=&quot;https://mzucker.github.io/images/noteshrink/graph-paper-ink-only.pdf&quot;&gt;PDF&lt;/a&gt;). For this one, I set the value threshold to 0.05 because the contrast between the background and the lines was so low:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/engr_comparison.png&quot; alt=&quot;graph paper comparison&quot; class=&quot;center-image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Color clusters:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/engr_plot.svg&quot; alt=&quot;graph paper plot&quot; class=&quot;canvas3d border&quot; id=&quot;engr&quot;/&gt;&lt;/p&gt;
&lt;p&gt;All together, the four PDFs take up about 788KB, averaging about about 130KB per page of output.&lt;/p&gt;

&lt;p&gt;I’m glad I was able to produce a practical tool that I can use to prepare scribe note PDFs for my course websites. Beyond that, I really enjoyed preparing this writeup, especially because it prodded me to try to improve on the essentially 2D visualizations displayed on the Wikipedia &lt;a href=&quot;https://en.wikipedia.org/wiki/Color_quantization&quot;&gt;color quantization&lt;/a&gt; page, and also to finally learn &lt;a href=&quot;http://threejs.org/&quot;&gt;three.js&lt;/a&gt; (very fun, would use again).&lt;/p&gt;
&lt;p&gt;If I ever revisit this project, I’d like to play around with alternative quantization schemes. One that occurred to me this week was to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Spectral_clustering&quot;&gt;spectral clustering&lt;/a&gt; on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Nearest_neighbor_graph&quot;&gt;nearest neighbor graph&lt;/a&gt; of a set of color samples – I thought this was an exciting new idea when I dreamed it up, but it turns out there’s a &lt;a href=&quot;http://www.sciencedirect.com/science/article/pii/S003132031200074X&quot;&gt;2012 paper&lt;/a&gt; that proposes this exact approach. Oh well.&lt;/p&gt;
&lt;p&gt;You could also try using &lt;a href=&quot;https://en.wikipedia.org/wiki/Expectation%E2%80%93maximization_algorithm&quot;&gt;expectation maximization&lt;/a&gt; to form a &lt;a href=&quot;https://en.wikipedia.org/wiki/Mixture_model#Gaussian_mixture_model&quot;&gt;Gaussian mixture model&lt;/a&gt; describing the color distribution – not sure if that’s been done much in the past. Other fun ideas include trying out a “perceptually uniform” colorspace like &lt;a href=&quot;https://en.wikipedia.org/wiki/Lab_color_space&quot;&gt;L*a*b*&lt;/a&gt; to cluster in, and also to attempt to automatically determine the &lt;a href=&quot;https://en.wikipedia.org/wiki/Determining_the_number_of_clusters_in_a_data_set&quot;&gt;“best” number of clusters&lt;/a&gt; for a given image.&lt;/p&gt;
&lt;p&gt;On the other hand, I’ve got a backlog of blog entries to shove out the door, so I’m going to put a pin in this project for now, and invite you to go checkout the &lt;code class=&quot;highlighter-rouge&quot;&gt;noteshrink.py&lt;/code&gt; &lt;a href=&quot;https://github.com/mzucker/noteshrink&quot;&gt;github&lt;/a&gt; repository. Until next time!&lt;/p&gt;











</description>
<pubDate>Mon, 12 Mar 2018 10:56:18 +0000</pubDate>
<dc:creator>pablode</dc:creator>
<og:title>Compressing and enhancing hand-written notes</og:title>
<og:description>I wrote a program to clean up scans of handwritten notes while simultaneously reducing file size.</og:description>
<og:url>https://mzucker.github.io/2016/09/20/noteshrink.html</og:url>
<og:image>https://mzucker.github.io/images/noteshrink/noteshrink-comparison.png</og:image>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://mzucker.github.io/2016/09/20/noteshrink.html</dc:identifier>
</item>
<item>
<title>Slack&amp;#039;s bait and switch</title>
<link>https://opkode.com/blog/slacks-bait-and-switch/</link>
<guid isPermaLink="true" >https://opkode.com/blog/slacks-bait-and-switch/</guid>
<description>&lt;p&gt;Slack has finally decided to close down their IRC and XMPP gateways.&lt;/p&gt;
&lt;p&gt;True to form, you can only read their announcement if you already have a Slack account and are logged in to a workspace.&lt;/p&gt;
&lt;p&gt;Here's the gist of their announcement:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
As Slack has evolved over the years, we've built features and capabilities —
like Shared Channels, Threads, and emoji reactions (to name a few) — that the
IRC and XMPP gateways aren't able to handle. Our priority is to provide a
secure and high-quality experience across all platforms, and so the time has
come to close the gateways.
&lt;/pre&gt;
&lt;p&gt;They're of course being economical with the truth here.&lt;/p&gt;
&lt;p&gt;Perhaps their XMPP gateway can't handle &quot;Shared Channels&quot; and &quot;Threads&quot;, but that's because they purposefully stopped working on it.&lt;/p&gt;
&lt;p&gt;A &quot;Shared Channel&quot; simply means a chatroom which people from outside your workspace can participate in. If a workspace is mapped to a members-only chatroom, then making something a shared channel simply means updating the members list or making the chatroom open (so anybody can join it).&lt;/p&gt;
&lt;p&gt;Threads can be implemented by adding a &lt;tt class=&quot;docutils literal&quot;&gt;&amp;lt;thread&amp;gt;&lt;/tt&gt; element in the message stanza, as documented in &lt;a class=&quot;reference external&quot; href=&quot;https://xmpp.org/extensions/xep-0201.html&quot;&gt;XEP-201&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;strike&quot;&gt;And emoji... there's nothing in XMPP that prevents people from sending emoji.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;admonition note&quot; readability=&quot;13.994987468672&quot;&gt;
&lt;p class=&quot;first admonition-title&quot;&gt;Note&lt;/p&gt;
&lt;p&gt;UPDATE: Several readers have pointed out that &quot;emoji reactions&quot; and emoji are different things. Emoji reactions can be tacked to a particular message.&lt;/p&gt;
&lt;p&gt;Still, there's nothing fundamental about XMPP that prevents emoji reactions, and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/jabbercat/jabbercat/issues/80&quot;&gt;work is currently underway to add support for them&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;last&quot;&gt;The protocol is designed to be eXtensible (hence the X in XMPP) and new features are continuously being added.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;classic-bait-and-switch&quot; readability=&quot;39.725&quot;&gt;

&lt;p&gt;We all know the real reason Slack has closed off their gateways. Their business model dictates that they should.&lt;/p&gt;
&lt;p&gt;Slack's business model is to record everything said in a workspace and then to &lt;a class=&quot;reference external&quot; href=&quot;https://get.slack.help/hc/en-us/articles/115002422943-Message-and-storage-limits-on-the-Free-plan&quot;&gt;sell you access to their record of your conversations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;They're a typical walled garden, information silo or &lt;a class=&quot;reference external&quot; href=&quot;https://opkode.com/blog/review-who-owns-the-future/&quot;&gt;Siren Server&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So they have to close everything off, to make sure that people can't extract their conversations out of the silo.&lt;/p&gt;
&lt;p&gt;We saw it with Google, who built Gtalk on XMPP and even federated with other XMPP servers, only to later stop federation and XMPP support in favour of trying to herd the digital cattle into the Google+ enclosure.&lt;/p&gt;
&lt;p&gt;Facebook, who also built their chat app on XMPP at first allowed 3rd party XMPP clients to connect and then later dropped interoperability.&lt;/p&gt;
&lt;p&gt;Twitter, although not using or supporting XMPP, had a vibrant 3rd party client ecosystem which they killed off once they felt big enough.&lt;/p&gt;
&lt;p&gt;Slack, like so many others before them, pretend to care about interoperability, opening up just so slightly, so that they can lure in people with the promise of &quot;openness&quot;, before eventually closing the gate once they've achieved sufficient size and lock-in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;on-federation&quot; readability=&quot;59&quot;&gt;

&lt;p&gt;When we talk about &quot;federation&quot; in networks, we mean the ability to communicate between different service providers.&lt;/p&gt;
&lt;p&gt;For example, email is federated. You can set up your own email server, and then send emails to people with their own email servers, or to people with Gmail or Yahoo! accounts.&lt;/p&gt;
&lt;p&gt;You can email any other email address in the world, regardless of where that email address is hosted.&lt;/p&gt;
&lt;p&gt;If email never existed, and a company like Slack today would come out with this brand new concept of &quot;Electronic Mail&quot;, let's call it &lt;tt class=&quot;docutils literal&quot;&gt;digimail&lt;/tt&gt;, do you think they would standardise the digimail protocol and allow you to send messages to other digimail purveyors?&lt;/p&gt;
&lt;p&gt;We all know the answer to that. They won't, and neither would Google, Microsoft or Facebook.&lt;/p&gt;
&lt;p&gt;Heck, Facebook is actively trying to replace email since years.&lt;/p&gt;
&lt;p&gt;The reason email is federated, is because it was developed before surveillance capitalism was a thing and because it was established and entrenched long before these companies came around.&lt;/p&gt;
&lt;p&gt;There's a reason why your email address is still the de facto way to sign up for any service on the web (sometimes with one or two degrees of separation), and it's because of federation.&lt;/p&gt;
&lt;p&gt;XMPP is designed to allow federation. Think about that. Instead of having to sign up to various different chat providers, all which try to lock you in and monetize your conversations, you could instead have one chat account, and use that to chat with anybody else, regardless of which chat provider they are using.&lt;/p&gt;
&lt;p&gt;Alas, that's the dream, but because XMPP came much later to the scene, it didn't develop the critical mass as email has, and here we are. With dozens of chat apps, all non-interoperable and closed off.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-would-it-take-for-xmpp-to-take-off&quot; readability=&quot;40.970903522205&quot;&gt;

&lt;p&gt;One of the sad things that has come out of Slack's meteoric rise to success, has been how many free and open source projects have jumped over to using it (after previously using IRC or XMPP).&lt;/p&gt;
&lt;p&gt;In so doing, they have closed off their discussions from search engines and they prevent people from accessing their past archives.&lt;/p&gt;
&lt;p&gt;Slack has many cool features, and they work very well, I'm not going to deny it.&lt;/p&gt;
&lt;p&gt;However, the XMPP Software Foundation has done a lot of work in recent years to enable protocol extensions that provide features that people have come to expect from chat applications, for example:&lt;/p&gt;
&lt;p&gt;Unfortunately XMPP clients have been lagging far behind in various respects.&lt;/p&gt;
&lt;p&gt;One of the main problems is funding. The modern digital economy is largely set up around surveillance capitalism and user lock-in.&lt;/p&gt;
&lt;p&gt;So attempts to create software that doesn't follow these precepts, often end up unfunded or underfunded.&lt;/p&gt;
&lt;p&gt;However, our &quot;weakness&quot;, is also our strength.&lt;/p&gt;
&lt;p&gt;XMPP clients, and the XMPP network can provide something that Slack never can. Federation, free and open software, interoperability, extensibility and user choice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;converse-js&quot; readability=&quot;48&quot;&gt;

&lt;p&gt;For the last few years I've been working in my spare time on making a JavaScript XMPP chat client, called &lt;a class=&quot;reference external&quot; href=&quot;http://conversejs.org/&quot;&gt;converse.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Originally the idea was to make a Gtalk like chat client that you integrate in your website, and it can still be used like that.&lt;/p&gt;
&lt;div class=&quot;figure align-center&quot;&gt;&lt;img alt=&quot;A screenshot of converse.js as overlayed chatboxes&quot; src=&quot;https://opkode.com/img/converse-screenshot.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;However, in the last year I've updated it further so that it can also be used as a fullscreen application, like Slack is used.&lt;/p&gt;
&lt;p&gt;You can try the fullscreen version at &lt;a class=&quot;reference external&quot; href=&quot;https://inverse.chat/&quot;&gt;https://inverse.chat/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;figure align-center&quot;&gt;&lt;img alt=&quot;A screenshot of converse.js as a fullscreen application&quot; src=&quot;https://opkode.com/img/inverse-screenshot.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;If you have no-one to chat to, then come join the &lt;a class=&quot;reference external&quot; href=&quot;https://yax.im/i/#discuss@conference.conversejs.org?join&quot;&gt;discuss@conference.conversejs.org&lt;/a&gt; chat room.&lt;/p&gt;
&lt;p&gt;This link will take you directly there (via inverse.chat): &lt;a class=&quot;reference external&quot; href=&quot;https://inverse.chat/#converse/room?jid=discuss@conference.conversejs.org&quot;&gt;https://inverse.chat/#converse/room?jid=discuss@conference.conversejs.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Converse.js still lacks lots of features that Slack has, but that's not because XMPP itself can't support those features.&lt;/p&gt;
&lt;p&gt;What converse.js however &lt;em&gt;does&lt;/em&gt; have, is that it's free and open source software, based on a standard protocol and it can be extended, updated and improved upon, by anyone.&lt;/p&gt;
&lt;p&gt;We're actively working on adding new features and more and more people are joining in.&lt;/p&gt;
&lt;p&gt;Moreover, anybody can host it and you can integrate it into any website.&lt;/p&gt;
&lt;p&gt;Ultimately, I believe in the power and utility of interoperability and software freedom, even though the current trend is to close off and lock down.&lt;/p&gt;
&lt;p&gt;These information silos are as powerful as we make them. If enough projects choose standardised protocols and FOSS software, we will be able to create viable alternatives that foster freedom instead of lock-in.&lt;/p&gt;

&lt;/div&gt;
</description>
<pubDate>Mon, 12 Mar 2018 09:45:00 +0000</pubDate>
<dc:creator>jcbrand</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://opkode.com/blog/slacks-bait-and-switch/</dc:identifier>
</item>
<item>
<title>Surprising Things About School</title>
<link>https://threadreaderapp.com/thread/972346041189019648.html</link>
<guid isPermaLink="true" >https://threadreaderapp.com/thread/972346041189019648.html</guid>
<description>&lt;div readability=&quot;33.373860182371&quot;&gt;You wanna know how Jeff Sessions &amp;amp; others in the Trump administration are defeating the shadow coup plotters for the last year? j&lt;p&gt;Ponder this for a second, if you will. It contains plenty of evidence how it's being done:&lt;/p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-align=&quot;center&quot; data-dnt=&quot;true&quot;&gt;

&lt;/blockquote&gt;
&lt;/div&gt;&lt;div readability=&quot;37&quot;&gt;Jeff Sessions appointed a SECRET PROSECUTOR to *investigate* these FISA abuses/political corruption inside the DOJ/FBI and he likely did the appointing of this special prosecutor MONTHS ago, last May or August.&lt;p&gt;Note the PAST TENSE language Sessions uses here. &lt;span class=&quot;entity-image&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://threadreaderapp.com/images/1px.png&quot; data-src=&quot;https://pbs.twimg.com/media/DXzWt1CVQAI4ZHK.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;In this interview Sessions also CONFIRMS publicly for the first time that DOJ Inspector General Michael Horowitz &amp;amp; his 500 investigators are directly investigating the FISA COURT ABUSE that's been uncovered &amp;amp; revealed to the public only recently in the Grassley/Nunes memos.&lt;/p&gt;</description>
<pubDate>Mon, 12 Mar 2018 07:38:10 +0000</pubDate>
<dc:creator>shubhamjain</dc:creator>
<og:title>Unrolled thread from @AustenAllred</og:title>
<og:image>https://threadreaderapp.com/images/screenshots/thread/972346041189019648.jpg</og:image>
<og:url>https://threadreaderapp.com/thread/972346041189019648.html</og:url>
<og:description>&quot;This is a tweetstorm about things that have surprised me having started a school, coming from a non-educational background1. Students’ brain […]&quot; @AustenAllred</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://threadreaderapp.com/thread/972346041189019648.html</dc:identifier>
</item>
<item>
<title>Intel Fights for Its Future</title>
<link>https://mondaynote.com/intel-fights-for-its-future-6498f886992b</link>
<guid isPermaLink="true" >https://mondaynote.com/intel-fights-for-its-future-6498f886992b</guid>
<description>&lt;p name=&quot;1752&quot; id=&quot;1752&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;by Jean-Louis Gassée&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4 name=&quot;52f8&quot; id=&quot;52f8&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;&lt;em class=&quot;markup--em markup--h4-em&quot;&gt;The Smartphone 2.0 era has destroyed many companies: Nokia, Blackberry, Palm… Will Intel be another victim, either as a result of the proposed Broadcom-Qualcomm combination, or as a consequence of a suicidal defensive move?&lt;/em&gt;&lt;/h4&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*1juqjHzZRRGcx2MCG3MhnQ.jpeg&quot; data-width=&quot;545&quot; data-height=&quot;307&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*1juqjHzZRRGcx2MCG3MhnQ.jpeg&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;f33f&quot; id=&quot;f33f&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;In November 2017, &lt;a href=&quot;https://en.wikipedia.org/wiki/Broadcom&quot; data-href=&quot;https://en.wikipedia.org/wiki/Broadcom&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Broadcom&lt;/a&gt; (revenue $17.6B, &lt;a href=&quot;https://en.wikipedia.org/wiki/Market_capitalization&quot; data-href=&quot;https://en.wikipedia.org/wiki/Market_capitalization&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;market cap&lt;/a&gt; $104B) announced its intent to acquire &lt;a href=&quot;https://en.wikipedia.org/wiki/Qualcomm&quot; data-href=&quot;https://en.wikipedia.org/wiki/Qualcomm&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Qualcomm&lt;/a&gt; (revenue $22.9B, market cap $93B). Simplifying for today’s purposes, these two companies make a range of competing and complementary chips used in networking and wireless applications. Notably, Qualcomm makes &lt;a href=&quot;https://en.wikipedia.org/wiki/Qualcomm_Snapdragon&quot; data-href=&quot;https://en.wikipedia.org/wiki/Qualcomm_Snapdragon&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Snapdragon&lt;/a&gt; CPUs for smartphones and wireless modems that connect mobile devices to cellular networks. Broadcom fields an impressive (if indiscriminate) product portfolio, the result of a series of corporate accretions.&lt;/p&gt;
&lt;p name=&quot;4b19&quot; id=&quot;4b19&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In spite of its successful record of Mergers and Acquisitions (&lt;a href=&quot;https://en.wikipedia.org/wiki/Mergers_and_acquisitions&quot; data-href=&quot;https://en.wikipedia.org/wiki/Mergers_and_acquisitions&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;M&amp;amp;A&lt;/a&gt;), Broadcom’s proposal didn’t go over well.&lt;/p&gt;
&lt;p name=&quot;c981&quot; id=&quot;c981&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;First, it looks very expensive: Broadcom’s opening bid was $130B. Qualcomm recently let it be known they’d consider $160B.&lt;/p&gt;
&lt;p name=&quot;df4e&quot; id=&quot;df4e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Second, it raises national security concerns. Avago, a Singaporean company, acquired Broadcom — and assumed the more recognized name — in 2016. To conciliate &lt;a href=&quot;https://www.reuters.com/article/us-qualcomm-m-a-broadcom-exclusive/u-s-has-ordered-broadcom-to-give-notice-of-steps-to-redomicile-idUSKCN1GL2X8&quot; data-href=&quot;https://www.reuters.com/article/us-qualcomm-m-a-broadcom-exclusive/u-s-has-ordered-broadcom-to-give-notice-of-steps-to-redomicile-idUSKCN1GL2X8&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;US objections&lt;/a&gt;, Avago/Broadcom now promises to redomicile itself in the US.&lt;/p&gt;
&lt;p name=&quot;307a&quot; id=&quot;307a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Finally, the combined entity might be too big, anti-competitive. Of course, this is the idea: combine corporate bodies to achieve better “supply harmony” a.k.a. &lt;a href=&quot;http://www.businessdictionary.com/definition/pricing-power.html&quot; data-href=&quot;http://www.businessdictionary.com/definition/pricing-power.html&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;pricing power&lt;/a&gt;. But is it really “too big”? The combined revenue of the two companies is in the $40B range; compare that to the $200B or more achieved by real giants such as Amazon or Apple.&lt;br/&gt; Or let’s see that $40B next to the $63B earned in 2017 by Intel, the subject of this examination.&lt;/p&gt;
&lt;p name=&quot;899e&quot; id=&quot;899e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Intel sees the Qualcomm+Broadcom combination as &lt;a href=&quot;https://www.wsj.com/articles/intel-considers-possible-bid-for-broadcom-1520633986&quot; data-href=&quot;https://www.wsj.com/articles/intel-considers-possible-bid-for-broadcom-1520633986&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;an existential threat&lt;/a&gt;, an urgent one. But rather than going to the Feds to try and scuttle the deal through a long and uncertain process, Intel is rumored to be “working with advisors” (in plainer English, the company’s Investment Bankers) on a countermove: &lt;a href=&quot;https://www.wsj.com/articles/intel-considers-possible-bid-for-broadcom-1520633986&quot; data-href=&quot;https://www.wsj.com/articles/intel-considers-possible-bid-for-broadcom-1520633986&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;acquire Broadcom&lt;/a&gt;.&lt;/p&gt;
&lt;p name=&quot;f770&quot; id=&quot;f770&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Why the sudden sense of urgency? What is the existential threat? And wouldn’t the always risky move of combining two cultures, employees, and physical plants introduce an even greater peril?&lt;/p&gt;
&lt;p name=&quot;3980&quot; id=&quot;3980&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;To begin with, the threat to Intel’s business isn’t new; the company has been at risk for more than a decade. By declining Steve Jobs’ proposal to make the original iPhone CPU in 2005, Intel missed a huge opportunity. The company’s disbelief in Apple’s ambitious forecast was badly mistaken: &lt;a href=&quot;http://www.asymco.com/2018/02/27/the-number/&quot; data-href=&quot;http://www.asymco.com/2018/02/27/the-number/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;More than 1.8 billion iOS devices&lt;/a&gt; have been sold thus far.&lt;/p&gt;
&lt;p name=&quot;f425&quot; id=&quot;f425&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Intel passed on the biggest product wave the industry has seen, bigger than the PC. Samsung and now &lt;a href=&quot;https://en.wikipedia.org/wiki/TSMC&quot; data-href=&quot;https://en.wikipedia.org/wiki/TSMC&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;TSMC&lt;/a&gt; manufacture iPhone CPUs. Just as important, there are billions of Android-powered machines, as well. One doesn’t have to assume 100% share in the smartphone CPU market to see Intel’s gigantic loss.&lt;/p&gt;
&lt;p name=&quot;02ae&quot; id=&quot;02ae&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;One may wonder why then-CEO Paul Otellini didn’t make Apple &lt;a href=&quot;https://www.youtube.com/watch?v=SeldwfOwuL8&quot; data-href=&quot;https://www.youtube.com/watch?v=SeldwfOwuL8&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;an offer they couldn’t refuse&lt;/a&gt;: Access to Intel’s superior silicon manufacturing technology. At the time, Apple had nothing; Intel held all the cards.&lt;/p&gt;
&lt;p name=&quot;41b2&quot; id=&quot;41b2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;But a poison had infected Intel execs’ minds, creating a durable Reality Distortion Field. The poison was the company’s rightfully celebrated history — Intel put the silicon in Silicon Valley, after all — and, even more poisonous: &lt;a href=&quot;https://en.wikipedia.org/wiki/Wintel&quot; data-href=&quot;https://en.wikipedia.org/wiki/Wintel&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Wintel&lt;/a&gt;. The company didn’t have a complete Windows CPU monopoly but they depended on Microsoft for its x86 margins&lt;/p&gt;
&lt;p name=&quot;bc5e&quot; id=&quot;bc5e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;A few years later, after the dramatic rise of &lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot; data-href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;ARM&lt;/a&gt;-powered smartphones, Intel execs’ faith in Wintel was unshaken: “The temporary advantage these less sophisticated, &lt;em class=&quot;markup--em markup--p-em&quot;&gt;Windows-less&lt;/em&gt; ARM chips are enjoying will be erased by the superior silicon manufacturing process of the &lt;a href=&quot;https://en.wikipedia.org/wiki/X86&quot; data-href=&quot;https://en.wikipedia.org/wiki/X86&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;x86&lt;/a&gt;. It’s nothing…”&lt;/p&gt;
&lt;p name=&quot;93b9&quot; id=&quot;93b9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Wintel-friendly mavens were desperate to endorse the theory [as always, edits and emphasis mine]:&lt;/p&gt;
&lt;blockquote name=&quot;9553&quot; id=&quot;9553&quot; class=&quot;graf graf--blockquote graf--startsWithDoubleQuote graf-after--p&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;“Another reason to trust in the resiliency of the Wintel era is the staying power of the more traditional PC, [David Stinner, president of solutions-provider US itek Group] said. It’s too early to tell whether the Wintel reign will waver in the tablet and smartphone space, but Intel and Microsoft will always be powerhouses in the desktop and notebook markets. And this second group, though overshadowed at times by today’s &lt;strong class=&quot;markup--strong markup--blockquote-strong&quot;&gt;mobility hype&lt;/strong&gt;, isn’t going away any time soon…”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;f172&quot; id=&quot;f172&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;&lt;a href=&quot;https://www.crn.com/news/components-peripherals/232400295/solution-providers-intel-smartphones-wintel-here-to-stay.htm&quot; data-href=&quot;https://www.crn.com/news/components-peripherals/232400295/solution-providers-intel-smartphones-wintel-here-to-stay.htm&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Solution Providers: Intel Smartphones, ‘Wintel’ Here To Stay&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p name=&quot;8405&quot; id=&quot;8405&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;(The CRN article from 2012 is worth reading for the unintended humor and hubris: “&lt;em class=&quot;markup--em markup--p-em&quot;&gt;‘The best of Intel computing is coming to smartphones,’ [Intel CEO Paul] Otellini told the audience.&lt;/em&gt;” But let’s be kind…it’s so easy to see the future as a linear continuation of the past.)&lt;/p&gt;
&lt;p name=&quot;d4c0&quot; id=&quot;d4c0&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Watching Intel execs wince at the evocation of this dogma confirms the reality of its power.&lt;/p&gt;
&lt;p name=&quot;3612&quot; id=&quot;3612&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;And the poison works like this. Picture equally meritorious CPU chips: same manufacturing cost, same processing power, thermal dissipation, etc. One runs Windows, the other doesn’t. Which one sells at a higher price/profit? ‘We were lucky’ becomes ‘We know what we’re doing’.&lt;/p&gt;
&lt;p name=&quot;f36d&quot; id=&quot;f36d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Intel execs aren’t completely blind. Year after year they’ve tried other product avenues, from server farms to bubble memories and, more recently, IoT, Wearables, Autonomous Vehicles technology…but they’ve yet to find an outlet that has the size and “juice” of chips running Windows (and now cloud servers).&lt;/p&gt;
&lt;p name=&quot;b62a&quot; id=&quot;b62a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;As a result, Intel products may seem haphazard — non-volatile memories, programmable chips, IoT products, self-driving technology (MobileEye was dumped by Tesla and &lt;a href=&quot;https://newsroom.intel.com/news-releases/intel-mobileye-acquisition/&quot; data-href=&quot;https://newsroom.intel.com/news-releases/intel-mobileye-acquisition/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;acquired by Intel last year&lt;/a&gt;) — but they’re powered by a single workhorse: The x86 chips that make up more than 80% of Intel's revenue and close to 100% of it’s profit. How would an acquisition of Broadcom/Avago’s truly random &lt;a href=&quot;https://www.broadcom.com/products/&quot; data-href=&quot;https://www.broadcom.com/products/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;product portfolio&lt;/a&gt; — wireless “solutions”, storage adaptors, fibre channel networking — fit into Intel’s monomaniacal culture?&lt;/p&gt;
&lt;p name=&quot;ef2b&quot; id=&quot;ef2b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;But perhaps the ultimate source of urgency for Intel is the resolution of Qualcomm vs Apple.&lt;/p&gt;
&lt;p name=&quot;1f70&quot; id=&quot;1f70&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Belatedly, Intel realized it needed a seat at the smartphone table. Despite &lt;a href=&quot;https://www.fool.com/investing/2017/07/26/the-price-of-intel-corporations-10-nanometer-failu.aspx&quot; data-href=&quot;https://www.fool.com/investing/2017/07/26/the-price-of-intel-corporations-10-nanometer-failu.aspx&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;troubles with its more advanced manufacturing&lt;/a&gt; processes, the company managed to supply some &lt;a href=&quot;https://www.barrons.com/articles/qualcomm-intel-setup-unchanged-with-apples-iphone-x-says-raymond-james-1505318098&quot; data-href=&quot;https://www.barrons.com/articles/qualcomm-intel-setup-unchanged-with-apples-iphone-x-says-raymond-james-1505318098&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;wireless modems for the iPhone 7, 8 and X&lt;/a&gt;. Ironically, the alliance was aided by a long standing and bitter &lt;a href=&quot;https://www.engadget.com/2017/04/28/apple-blocks-qualcomm-patent-license-payments/&quot; data-href=&quot;https://www.engadget.com/2017/04/28/apple-blocks-qualcomm-patent-license-payments/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;intellectual property dispute&lt;/a&gt; between Apple and Qualcomm. If Broadcom’s acquisition of Qualcomm proceeds, &lt;a href=&quot;https://bgr.com/2017/11/08/broadcom-qualcomm-takeover-apple-analysis/&quot; data-href=&quot;https://bgr.com/2017/11/08/broadcom-qualcomm-takeover-apple-analysis/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;the dispute with Apple could disappear&lt;/a&gt;:&lt;/p&gt;
&lt;p name=&quot;fb79&quot; id=&quot;fb79&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“…Broadcom is already an Apple parts supplier, and it wouldn’t want to jeopardize a good relationship with a negotiation over royalties. The exact percentage that Qualcomm charges in royalties is of the utmost importance to a standalone Qualcomm…But for a merged Broadcom-Qualcomm, the exact amount of the royalty would be less important than a good working relationship with Apple.”&lt;/p&gt;
&lt;p name=&quot;485d&quot; id=&quot;485d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;If the dispute is settled, Intel loses its wireless modems deal with Apple. No mobile CPUs + no modems = nothing of substance. Broadcom would be in charge — &lt;em class=&quot;markup--em markup--p-em&quot;&gt;they&lt;/em&gt; would hold all the cards.&lt;/p&gt;
&lt;p name=&quot;16eb&quot; id=&quot;16eb&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Is it any wonder that Intel wants to find ways to scuttle the deal?&lt;/p&gt;
&lt;p name=&quot;ef87&quot; id=&quot;ef87&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;What would be worse: being pushed further away from the mobile feast by a Broadcom-Qualcomm combination, or led to an organization and product morass by fee-hungry bankers?&lt;/p&gt;
&lt;p name=&quot;efad&quot; id=&quot;efad&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In the end, Intel’s best hope might lie in a stalemate, no Broadcom-Qualcomm transaction, no suicidal Broadcom acquisition.&lt;/p&gt;
&lt;p name=&quot;1430&quot; id=&quot;1430&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;— JLG@mondaynote.com&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 12 Mar 2018 06:33:46 +0000</pubDate>
<dc:creator>KKKKkkkk1</dc:creator>
<og:title>Intel Fights For Its Future – Monday Note</og:title>
<og:url>https://mondaynote.com/intel-fights-for-its-future-6498f886992b</og:url>
<og:image>https://cdn-images-1.medium.com/max/1200/1*1juqjHzZRRGcx2MCG3MhnQ.jpeg</og:image>
<og:description>by Jean-Louis Gassée</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://mondaynote.com/intel-fights-for-its-future-6498f886992b?gi=70ea5ddaeb3f</dc:identifier>
</item>
<item>
<title>TLS 1.3 and Proxies</title>
<link>https://www.imperialviolet.org/2018/03/10/tls13.html</link>
<guid isPermaLink="true" >https://www.imperialviolet.org/2018/03/10/tls13.html</guid>
<description>&lt;p&gt;I'll generally ignore the internet froth in a given week as much as possible, but when Her Majesty's Government starts &lt;a href=&quot;https://www.ncsc.gov.uk/blog-post/tls-13-better-individuals-harder-enterprises&quot;&gt;repeating misunderstandings about TLS 1.3&lt;/a&gt; it is necessary to write something, if only to have a pointer ready for when people start citing it as evidence.&lt;/p&gt;
&lt;p&gt;The first misunderstanding in the piece is the claim that it's possible for man-in-the-middle proxies to selectively proxy TLS 1.2 connections, but not TLS 1.3 connections because the latter encrypts certificates.&lt;/p&gt;
&lt;p&gt;The TLS 1.2 proxy behaviour that's presumed here is the following: the proxy forwards the client's ClientHello message to the server and inspects the resulting ServerHello and certificates. Based on the name in the certificate, the proxy may “drop out” of the connection (i.e. allow the client and server to communicate directly) or may choose to interpose itself, answering the client with an alternative ServerHello and the server with an alternative ClientKeyExchange, negotiating different encrypted sessions with each and forwarding so that it can see the plaintext of the connection. In order to satisfy the client in this case the client must trust the proxy, but that's taken care of in the enterprise setting by installing a root CA on the client. (Or, &lt;a href=&quot;https://www.eff.org/deeplinks/2011/05/syrian-man-middle-against-facebook&quot;&gt;in Syria&lt;/a&gt;, by hoping that users click through the the certificate error.)&lt;/p&gt;
&lt;p&gt;While there do exist products that attempt to do this, they break repeatedly because it's a fundamentally flawed design: by forwarding the ClientHello to the server, the proxy has committed to supporting every feature that the client advertises because, if the server selects a given feature, it's too late for the proxy to change its mind. Therefore, with every new cipher suite, new curve, and new extension introduced, a proxy that does this finds that it cannot understand the connection that it's trying to interpose.&lt;/p&gt;
&lt;p&gt;One option that some proxies take is to try and heuristically detect when it can't support a connection and fail open. However, if you believe that your proxy is a strong defense against something then failing open is a bit of problem.&lt;/p&gt;
&lt;p&gt;Thus another avenue that some proxies have tried is to use the same heuristics to detect unsupported connections, discard the incomplete, outgoing connection, and start another by sending a ClientHello that only includes features that the proxy supports. That's unfortunate for the server because it doubles its handshaking cost, but gives the proxy a usable connection.&lt;/p&gt;
&lt;p&gt;However, both those tricks only slow down the rate at which customers lurch from outage to outage. The heuristics are necessarily imprecise because TLS extensions can change anything about a connection after the ClientHello and some additions to TLS have memorably broken them, leading to confused proxies cutting enterprises off from the internet.&lt;/p&gt;
&lt;p&gt;So the idea that selective proxying based on the server certificate ever functioned is false. A proxy can, with all versions of TLS, examine a ClientHello and decide to proxy the connection or not but, if it does so, it must craft a fresh ClientHello to send to the server containing only features that it supports. Making assumptions about any TLS message after a ClientHello that you didn't craft is invalid. Since, in practice, this has not been as obvious as the designers of TLS had imagined, the 1.3 draft &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-tls-tls13-26#section-9.3&quot;&gt;has a section&lt;/a&gt; laying out these requirements.&lt;/p&gt;
&lt;p&gt;Sadly, it's precisely this sort of proxy misbehaviour that has delayed TLS 1.3 for over a year while my colleagues (David Benjamin and Steven Valdez) repeatedly deployed experiments and measured success rates of different serialisations. In the end we found that making TLS 1.3 &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-tls-tls13-26#appendix-D.4&quot;&gt;look like a TLS 1.2 resumption&lt;/a&gt; solved a huge number of problems, suggesting that many proxies blindly pass through such connections. (Which should, again, make one wonder about what security properties they're providing.)&lt;/p&gt;
&lt;p&gt;But, given all that, you might ponder why we bothered encrypting certificates? Partly it's one component of an effort to make browsing more private but, more concretely, it's because anything not encrypted suffers these problems. TLS 1.3 was difficult to deploy because TLS's handshake is, perforce, exposed to the network. The idea that we should make TLS a little more efficient by &lt;em&gt;compressing&lt;/em&gt; certificates has been bouncing around for many years. But it's only with TLS 1.3 that we might &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-tls-certificate-compression-02&quot;&gt;make it happen&lt;/a&gt; because everyone expected to hit another swamp of proxy issues if we tried it without encrypting certificates first.&lt;/p&gt;
&lt;p&gt;It's also worth examining the assumption behind waiting for the server certificate before making an interception decision: that the client might be malicious and attempt to fool the proxy but (to quote the article) the certificate is “tightly bound to the server we’re actually interacting with”. The problem here is that a certificate for any given site, and a valid signature over a ServerKeyExchange from that certificate, is easily available: just connect to the server and it'll send it to you. Therefore if you're worried about malware, how is it that the malware C&amp;amp;C server won't just reply with a certificate for a reputable site? The malware client, after all, can be crafted to compensate for any such trickery. Unless the proxy is interposing and performing the cryptographic checks, then the server certificate isn't tightly bound to anything at all and the whole reason for the design seems flawed.&lt;/p&gt;
&lt;p&gt;On that subject, I'll briefly mention the fact that HTTPS proxies &lt;a href=&quot;https://jhalderm.com/pub/papers/interception-ndss17.pdf&quot;&gt;aren't always so great at performing cryptographic checks&lt;/a&gt;. (We recently notified a major proxy vendor that their product didn't appear to validate certificates at all. We were informed that they &lt;em&gt;can&lt;/em&gt; validate certificates, it's just disabled by default. It's unclear what fraction of their customers are aware of that.)&lt;/p&gt;
&lt;p&gt;Onto the second claim of the article: that TLS 1.3 is incompatible with PCI-DSS (credit card standards) and HIPAA (US healthcare regulation). No reasoning is given for the claim, so let's take a look:&lt;/p&gt;
&lt;p&gt;Many PCI-DSS compliant systems use TLS 1.2, primarily stemming from &lt;a href=&quot;https://www.pcisecuritystandards.org/document_library?category=pcidss&amp;amp;document=pci_dss&quot;&gt;requirement 4.1&lt;/a&gt;: “use strong cryptography and security protocols to safeguard sensitive cardholder data during transmission over open, public networks, including a) only trusted keys and certificates are accepted, b) the protocol in use only supports secure versions or configurations, and c) the encryption strength is appropriate for the encryption methodology in use”.&lt;/p&gt;
&lt;p&gt;As you can see, the PCI-DSS requirements are general enough to adapt to new versions of TLS and, if TLS 1.2 is sufficient, then TLS 1.3 is better. (Even those misunderstanding aspects of TLS 1.3 are saying it's stronger than 1.2.)&lt;/p&gt;
&lt;p&gt;HIPAA is likewise, &lt;a href=&quot;https://www.law.cornell.edu/cfr/text/45/164.312&quot;&gt;requiring&lt;/a&gt; that one must “implement technical security measures to guard against unauthorized access to electronic protected health information that is being transmitted over an electronic communications network”.&lt;/p&gt;
&lt;p&gt;TLS 1.3 is enabled in Chrome 65, which is rolling out now. It is a major improvement in TLS and lets us eliminate &lt;a href=&quot;https://jhalderm.com/pub/papers/forward-secrecy-imc16.pdf&quot;&gt;session-ticket encryption keys&lt;/a&gt; as a mass-decryption threat, which both PCI-DSS- and HIPAA-compliance experts should take great interest in. It does not require special measures by proxies—they need only implement TLS 1.2 correctly.&lt;/p&gt;
</description>
<pubDate>Sun, 11 Mar 2018 21:44:11 +0000</pubDate>
<dc:creator>wglb</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.imperialviolet.org/2018/03/10/tls13.html</dc:identifier>
</item>
<item>
<title>Fountain pen inks: the good, the bad, and the ugly (2011)</title>
<link>http://richardspens.com/ref/care/inks.htm</link>
<guid isPermaLink="true" >http://richardspens.com/ref/care/inks.htm</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;meta http-equiv=&quot;content-language&quot; content=&quot;en&quot; /&gt;&lt;title&gt;Inks: The Good, the Bad, and the Ugly&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../../css/pens.css&quot; /&gt;&lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;&lt;meta name=&quot;generator&quot; content=&quot;BBEdit 11.6&quot; /&gt;&lt;meta name=&quot;author&quot; content=&quot;Copyright © RichardsPens.com, last edited 12 June 2017&quot; /&gt;&lt;meta name=&quot;description&quot; content=&quot;Feed your fountain pen a steady diet of fountain pen ink. Period. This injunction may seem obvious, but it is not quite so obvious as it appears.&quot; /&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;317.6532912743&quot;&gt;

&lt;p class=&quot;tag&quot;&gt; (&lt;em&gt;This page revised June 12, 2017&lt;/em&gt;) &lt;/p&gt;
&lt;p class=&quot;def ctr&quot;&gt;[  &lt;strong&gt;&lt;a href=&quot;http://richardspens.com/ref/00_refp.htm&quot; title=&quot;Go to the Reference Info index page.&quot;&gt;Reference Info Index&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;http://richardspens.com/ref/glossary/00_gls.htm&quot; title=&quot;Go to the Glossopedia.&quot;&gt;Glossopedia&lt;/a&gt;&lt;/strong&gt;  ]&lt;/p&gt;
&lt;hr class=&quot;tag rt10&quot; /&gt;&lt;p&gt;&lt;strong&gt;Fountain pens require ink. But what kind of ink? And why? And how?&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;stt&quot;&gt;First Principles&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://richardspens.com/images/ref/care/fp_ink.png&quot; width=&quot;120&quot; height=&quot;120&quot; class=&quot;pad4x0&quot; align=&quot;right&quot; alt=&quot;Fountain pen ink bottle&quot; /&gt;&lt;img src=&quot;http://richardspens.com/images/pixel.gif&quot; width=&quot;8&quot; height=&quot;126&quot; align=&quot;right&quot; alt=&quot;&quot; /&gt;&lt;strong class=&quot;grn&quot;&gt;GOOD:&lt;/strong&gt; Feed your fountain pen a steady diet of fountain pen ink. &lt;strong&gt;Period.&lt;/strong&gt; This injunction may seem obvious, but it is not quite so obvious as it appears. Fountain pen ink is a solution. To the chemist, a solution consists of a fluid in which other substances are dissolved (the solvent), and the dissolved substances (the solutes). The solutes are actually reduced to the molecular level, the same as the solvent, and all the different molecules are mixed up evenly to create a uniform fluid, a pure liquid that contains no microscopic particles of solid material. The solvent in fountain pen ink is distilled water, and the solutes are dyes, wetting agents, and mold inhibitors. Because it’s a solution, fountain pen ink contains no solid matter at all. This is an important point to remember.&lt;/p&gt;
&lt;p&gt;&lt;strong class=&quot;ORG&quot;&gt;BAD:&lt;/strong&gt; Certain manufacturers of artists’ inks and paints, such as Winsor &amp;amp; Newton, market some of their calligraphy inks as being suitable for fountain pens. Don’t believe it. Calligraphy inks are pigmented; that is, they derive their color not from dissolved dyes but instead from finely ground solid matter — like paint. In theory, the pigment in these inks is so fine that it will remain in suspension under the impetus of &lt;a href=&quot;https://en.wikipedia.org/wiki/Brownian_motion&quot; target=&quot;_blank&quot;&gt;Brownian motion&lt;/a&gt; in the liquid component of the ink. Unfortunately, this does not always happen. In a calligrapher’s dip pen any separation of solid components is not a problem because the nib is easy to remove and clean and because there is no feed with hidden passages to clog. &lt;img src=&quot;http://richardspens.com/images/ref/feeds/evolution/stipula.jpg&quot; alt=&quot;&quot; width=&quot;227&quot; height=&quot;70&quot; align=&quot;left&quot; /&gt; But as the ink passes through the very fine fissures of a fountain pen’s feed and the slit of the nib, pigment particles come in contact with the walls of these passages and are attracted to the surfaces. A layer of pigment builds up and will inevitably clog the feed, the nib, or both. The modern plastic feed shown here illustrates the myriad nooks and crannies into which ink can find its way before drying out to clog the works.&lt;/p&gt;
&lt;p&gt;Note, however, that a new type of ink has appeared in the past few years. Called nanoparticle ink, it contains pigment — but the pigment is much more finely ground than in traditional calligraphy inks; so finely ground, in fact, that Brownian motion can easily keep it suspended. In general, nanoparticle inks can be considered safe for fountain pens, but I rate them as high-maintenance inks (see below) because the very existence of particulate matter brings with it more risk of clogging than is present with inks that are true solutions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://richardspens.com/images/ref/care/india_ink.png&quot; width=&quot;120&quot; height=&quot;120&quot; class=&quot;pad4x0&quot; align=&quot;right&quot; alt=&quot;Fountain pen ink bottle&quot; /&gt;&lt;img src=&quot;http://richardspens.com/images/pixel.gif&quot; width=&quot;8&quot; height=&quot;126&quot; align=&quot;right&quot; alt=&quot;&quot; /&gt;There are other inks, less obviously troublesome, that you should avoid. Right at the top of this list is inkjet-printer ink. This stuff might seem appealing; refills are inexpensive, and the colors — especially the ones rated for 70 years or longer — are remarkably permanent. But there are some very bad things in inkjet ink. It frequently uses pigment, not dye, for color, and there are also particulate resins for better adhesion. Various glycols (diethylene, alkylene, &lt;em&gt;etc.&lt;/em&gt;) enhance penetration; these substances can exacerbate bleeding and feathering in a fountain pen. They also retard evaporation, making the ink take longer to dry on the paper.&lt;/p&gt;
&lt;p&gt;Another kind of ink whose potential for disaster is not immediately obvious is whiteboard marker ink. Like inkjet ink, this stuff is based on pigment, not dye, and that means it can and will clog feeds. It also contains particulate resins for adhesion as well as various alcohols (such as ethanol and 2-propanol) that can damage the feed and barrel in some types of fountain pens.&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;300&quot; height=&quot;134&quot; src=&quot;http://richardspens.com/images/ref/care/inks/whiteout-feed.jpg&quot; alt=&quot;Nib and feed with white-out&quot; align=&quot;left&quot; /&gt;&lt;strong class=&quot;red&quot;&gt;UGLY:&lt;/strong&gt; India ink, white-out, and other similar fluids are certain death to fountain pens. These fluids are pigmented, and they are frequently not water based. (India ink is water based; but it also contains gum arabic for permanence, and it takes great pleasure in gumming up fountain pens.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;From an email I received from Mike and Linda Kennedy at &lt;a href=&quot;http://www.indy-pen-dance.com/&quot; title=&quot;Visit this site.&quot; target=&quot;_blank&quot;&gt;Indy-Pen-Dance&lt;/a&gt;:&lt;/strong&gt; &lt;em&gt;“The nib and feed in this image came out of a pen in which white-out was used. Just separating these parts required several rounds in an ultrasonic cleaner with Rapido-eze, and that’s when we took this picture. We were able to get the mess cleaned up, but it was an expensive learning experience for the owner of the pen. Believe it or not, we have received (and repaired) fountain pens that had been filled with latex paint and model paint!”&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;stt&quot;&gt;Maintenance: Low, Medium, or High&lt;/p&gt;
&lt;p&gt;Even when you’re scrupulous about using fountain pen ink only, your pen can experience ink-related problems. These difficulties happen because even the best inks are not perfect; and when pen maintenance is also imperfect, writing performance can suffer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using fountain pens, like shaving with a cut-throat razor, is partly a sensual experience, and it involves ritual.&lt;/strong&gt; Maintaining your pens is part of the ritual. Every ink requires you to commit a certain amount of time and effort to using your pens. Your choice of inks will depend on how much fiddling you enjoy balanced against how much you are willing to tolerate. But not all inks require the same amount of involvement; the less trouble a given ink requires, the higher its &lt;em&gt;usability score.&lt;/em&gt; An ink’s usability score is a composite rating, so to speak, that reflects the amount of time and effort you have to put into using that ink. The composite is built on factors such as these:&lt;/p&gt;
&lt;ul class=&quot;ball def&quot; readability=&quot;11.947800869985&quot;&gt;&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Flow.&lt;/strong&gt; Inks that flow well — but not too well — score high because they don’t make the pen fight back when you’re trying to write with it. Inks with good flow will start readily and will flow evenly, without exhibiting a tendency to skip or to produce dry patches. Inks that flow too well often tend to feather or bleed, especially on cheap papers, and this sort of excessive flow lowers an ink’s score.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;strong&gt;Staining.&lt;/strong&gt; Inks that stain little or not at all score high because they don’t make you disassemble and scrub out your transparent or partially transparent pens so you can see through them or polish the plating off your two-tone nibs trying to keep them bright. The color of a given ink affects its staining tendency; reds and other colors containing red dyes have a high tendency to stain (and therefore somewhat lower scores), while pure blues — especially washable ones — stain little or not at all.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;Lubrication.&lt;/strong&gt; Inks that lubricate well score high because they give you a smooth glide instead of making your nib feel dry and gritty so that you have to push harder. Some users refer to inks that lubricate well as being “greasy,” but there is no actual grease in fountain pen ink.&lt;/p&gt;
&lt;blockquote class=&quot;nt&quot;&gt;
&lt;table class=&quot;note&quot; readability=&quot;4&quot;&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td class=&quot;note&quot;&gt;&lt;a href=&quot;javascript:showPop('ref/icons.htm','icons_pop',500,530,true);&quot; title=&quot;Read about these symbols.&quot;&gt;&lt;img src=&quot;http://richardspens.com/images/icons/lg/info.png&quot; alt=&quot;Note&quot; width=&quot;71&quot; height=&quot;70&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td class=&quot;note&quot;&gt;
&lt;p&gt;Note&lt;/p&gt;
&lt;em&gt;Lubrication,&lt;/em&gt; as used here, does not refer to the addition of special substances for the ostensible purpose of lubricating the pen’s piston or other filler parts. It refers to an inherent quality of all fountain pen inks, a quality that depends upon the choices made with regard to the ink’s basic components.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;strong&gt;Clogging.&lt;/strong&gt; Inks that don’t clog score high because they don’t make you disassemble your pen to floss the nib and feed. Typically, the more intensely saturated the color is, the greater are the dye load and the concomitant risk of clogging.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.9405940594059&quot;&gt;
&lt;p&gt;&lt;strong&gt;“Creepability.”&lt;/strong&gt; This is a handy made-up word that refers to an ink’s tendency to display &lt;a href=&quot;http://richardspens.com/ref/glossary/N.htm#nib_creep&quot;&gt;nib creep&lt;/a&gt;. Inks that tend not to creep score higher because they don’t make you take out a tissue and wipe the nib to no avail every few minutes. This also raises your spirits by reducing your stress level.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Waterman inks were the first high-scoring (low-maintenance) inks I discovered. On a scale of 1 to 10, I rate Waterman inks a solid 10. They flow remarkably well under a broad variety of conditions in almost any pen. They lubricate exceptionally well, imparting a glassy-smooth ride. They are not heavily saturated, and the dyes in them tend to be relatively nonstaining. Waterman Mysterious Blue is almost stain free. But Waterman’s palette is not the most inspiring in the world. Recently Diamine, which has been making inks since 1864, appeared in the marketplace with a much more exciting range of colors and with characteristics very similar to those of Waterman, so that now I rely almost entirely on these two brands, the majority of whose colors sport very high scores. Some Diamine colors, however, especially their reds and colors containing red dyes, such as pinks, violets, oranges, and browns, appear more prone to clogging issue, and these inks have much lower scores. As it happens, I use Skrip Red (made in Slovenia) in one pen at my workbench, and it’s remarkably good. Its being red reduces its score slightly, but not enough to be a major consideration for me.&lt;/p&gt;

&lt;p&gt;Toward the middle of the scale fall the vast majority of inks, including Aurora, Pelikan, Parker Quink (except the black, which scores surprisingly low because it exhibits serious flow issues in Parker pens), J. Herbin, Lamy, Omas, Namiki, and many more.&lt;/p&gt;

&lt;p&gt;On the high-maintenance (low scoring) end of the scale we find several brands of very heavily saturated “boutique” brands, most of which score in the range from 3 to 5. As described earlier, fountain pen ink is a solution; the solvent is water, and the solutes are the dyes, the surfactant, and the fungicide. The nature of chemical solutions is that as the temperature declines, the solvent can keep less of the solutes in solution. The more solute you start with, the more likely it is that some of it will precipitate out (come out of solution) as time passes and conditions such as humidity and temperature vary. As the dye comes out of solution it precipitates onto the interior surfaces of the pen — particularly the fissures in the feed. This leads eventually to a clog. See the &lt;strong&gt;Science Experiment&lt;/strong&gt; to the right.&lt;/p&gt;
&lt;p&gt;Some boutique inks also score lower because of differences in flow and drying rate among their various colors. Private Reserve Sherwood Green is a lovely color, but I give it a score of 2 because it sometimes never dries. (I've come back six months after writing something with it and smeared it while handling the paper.) On the other hand, Private Reserve Tanzanite, sometimes called “the Ex-Lax of inks,” stains badly and flows far too readily. It also scores a 2 or a 3. If you like the color of Tanzanite, try mixing Waterman Serenity Blue and Waterman Tender Purple in equal parts. The resulting color, which I have dubbed “Blurple,” is virtually indistinguishable from Tanzanite.&lt;/p&gt;
&lt;p&gt;In the same way that a heavily saturated ink can precipitate in your pens, it can also do so in the bottle. In fact, if you habitually leave ink bottles open for extended periods, the water gradually evaporates, rendering the solution more saturated than the manufacturer intended. Even otherwise “safe” inks can do this. Do not shake an ink bottle before filling your pens from it — and if you ever see a sludge in the bottom of an ink bottle, the wisest course if you want to avoid clogging is to discard the contents.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let it be clearly understood that the designation of a given ink as high maintenance (by me or by anyone else) should not be construed as a warning to avoid said ink.&lt;/strong&gt; With proper care, including more frequent flushing, use in opaque pens only, adjustment of nibs for richer flow, &lt;em&gt;etc.,&lt;/em&gt; these inks are eminently usable, so long as you use them in pens that like them and give them the attention to maintenance that they need. &lt;strong&gt;Please note also that I do not have a documented scale of maintenance levels.&lt;/strong&gt; This is all a gut-feel sort of thing, based on experience and anecdotal information.&lt;/p&gt;
&lt;blockquote class=&quot;ca&quot;&gt;
&lt;table class=&quot;note&quot; readability=&quot;12.28080857282&quot;&gt;&lt;tr readability=&quot;44.210910862153&quot;&gt;&lt;td class=&quot;note&quot;&gt;&lt;a href=&quot;javascript:showPop('ref/icons.htm','icons_pop',500,530,true);&quot; title=&quot;Click to read about these symbols.&quot;&gt;&lt;img src=&quot;http://richardspens.com/images/icons/lg/caution.png&quot; alt=&quot;CAUTION&quot; width=&quot;80&quot; height=&quot;70&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td class=&quot;note&quot; readability=&quot;42.245981490502&quot;&gt;
&lt;p&gt;CAUTION&lt;/p&gt;
&lt;strong class=&quot;def&quot;&gt;For many years, I’ve tried not to say anything negative about particular inks, but I am now convinced that there are several problems that can be traced to the use of Private Reserve or Noodler’s inks. Among these problems are flow issues and clogging, mold, staining, and actual destruction of pens.&lt;/strong&gt;
&lt;p&gt;Along with certain other “boutique” inks, these two brands are more &lt;a href=&quot;http://richardspens.com/ref/care/inks.htm#clog&quot;&gt;prone to clog&lt;/a&gt; than more conventional inks because of the heavy dye load they use to produce their deeply saturated colors. Also, some Private Reserve inks behave just like phthalocyanine- and quinacridone-based watercolor paints, which use pigments for their color and are more likely to produce clogs than saturated dye-based inks.&lt;/p&gt;
&lt;p&gt;Noodler’s “bulletproof” inks contain a component that causes the dye in the ink to bond chemically with the paper. Unfortunately, this bonding agent is particulate, not in solution. It settles, and you have to shake the bottle to disperse it when filling a pen. It also settles in the pen, and it can cause clogs. To combat (but not cure) this tendency, Noodler’s adds extra surfactant (wetting agent), which can cause bleeding and feathering.&lt;/p&gt;
&lt;p&gt;Some other Noodler’s inks, whose identities I have not yet pinned down, will reduce latex sacs to goo. This destruction occurs without the presence of metal; it is not the “gummy sac” problem that is caused by improperly formulated latex.&lt;/p&gt;
&lt;p&gt;Private Reserve inks are known to have had &lt;a href=&quot;http://richardspens.com/ref/care/inks.htm#mold&quot;&gt;mold issues&lt;/a&gt; on multiple occasions, and it is not clear to me that the problem has yet been solved for good.&lt;/p&gt;
&lt;p&gt;Various Private Reserve and Noodler’s inks are known for staining pens, and at least some Noodler’s inks are known to &lt;a href=&quot;http://richardspens.com/ref/care/inks.htm#dinner&quot;&gt;destroy pens&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Experience has shown that Noodler’s Eel inks often do not flow properly in pens that work with virtually any other kind of ink. I see no need for an ink with the “lubricating” properties of Eel, and I do not recommend its use. (If pen makers thought this sort of ink was a good idea, they would be selling it and taking the profits to the bank.)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/blockquote&gt;

&lt;p class=&quot;stt&quot;&gt;Inks with a Non-Neutral pH: Your Pen Could Be on the Menu&lt;/p&gt;
&lt;p&gt;Some ink manufacturers state that the pH (degree of acidity or alkalinity) of an ink is not a factor in whether that ink can damage pens. This assertion appears to be untrue.&lt;/p&gt;
&lt;p&gt;Strongly alkaline inks can eat some organic resins, especially celluloid and Omas’ vegetal resin — which is very much like celluloid. (Omas’ own inks tend to be highly acidic.) Parker made the “51” of acrylic because its super-quick drying “51” ink turned out to like noshing on celluloid pens. (The problem was largely due to the ink’s alkalinity that contributed to quick drying by eating into the paper’s cellulose fibers.) Noodler’s Polar inks seem to be similarly harmful, at least to celluloid; it appears that these inks leach the camphor out of the celluloid. Because camphor is the plasticizing and stabilizing agent that turns guncotton into celluloid, the ink breaks down the celluloid and could conceivably return it to its original explosive state.&lt;/p&gt;
&lt;p&gt;Most Japanese inks are alkaline. Alkaline inks are hostile to latex. I have experimental evidence that at least some of the Pilot Iroshizuku colors will destroy latex sacs. For this reason, I recommend that you avoid using Japanese inks in sac-filling pens as well as in pens that are made of organic resins and use the barrel for the ink reservoir (as described in the preceding paragraph).&lt;/p&gt;
&lt;p&gt;More ugliness is contained in bottles labeled Parker “51” or Parker SuperChrome. These are vintage inks, but there are still some bottles in existence. &lt;em&gt;Don’t be tempted to use them!&lt;/em&gt; Parker introduced the super fast-drying “51” ink in 1941 for use with the “51” pen — and no others. The problem was that “51” ink ate pens. It didn’t eat the “51”, but it did cause the diaphragm in the pen’s Vacumatic filling system to ossify very rapidly. With the 1948 introduction of the Aero-metric “51”, Parker withdrew ”51” ink, replacing it with SuperChrome. The newer ink wasn’t as hostile to pens as the old, but it still had a pH of about 12, and it wasn’t good for them, and Parker withdrew it in 1956. The photo below shows what happened to the sterling silver breather tube from a “51” that had been used with SuperChrome.&lt;/p&gt;
&lt;center&gt;&lt;img width=&quot;400&quot; height=&quot;172&quot; src=&quot;http://richardspens.com/images/ref/care/inks/bt_swiss_cheese_2.jpg&quot; alt=&quot;Swiss cheesed breather tube&quot; /&gt;&lt;/center&gt;
&lt;p&gt;Among modern inks, Noodler’s Baystate colors stain terribly and are are also corrosive enough to destroy some plastics, including the materials from which Pilot and Lamy feeds are made and the resins used in the barrels of some makers’ piston-filling pens. (See the photos below, showing an undamaged Vanishing Point feed and one that has begun to die due to exposure to Baystate Blue, which has a measured pH of 4.53.)&lt;/p&gt;
&lt;center&gt;&lt;img class=&quot;hairline&quot; width=&quot;600&quot; height=&quot;225&quot; src=&quot;http://richardspens.com/images/ref/care/inks/vp_feeds.jpg&quot; alt=&quot;Feeds&quot; /&gt;&lt;/center&gt;
&lt;p&gt;Some Noodler’s inks do not play nicely together; this means that you cannot mix them. The Pelikan M1000 shown below was sent to Chartpak, Pelikan’s U.S. distributor, for repair. To remove the stuck-on cap, the Chartpak repairer had to disassemble it; then the pieces could be popped off the barrel. The section had come loose from the barrel, and the interior of the barrel was badly stained and seriously cracked. Because the pen was a gift to its owner from a now-deceased relative, the repair department manager at Chartpak sent it to Mike Kennedy at Indy-Pen-Dance in the hope that it could be saved instead of simply being thrown in the trash. No such luck. It is not known what exact inks had been used in it beyond that they were all Noodler’s inks that the owner mixed to produce a custom color, but what they did to the pen is horrifying. The pen was not reparable.&lt;/p&gt;
&lt;center&gt;&lt;img class=&quot;hairline&quot; src=&quot;http://richardspens.com/images/ref/care/inks/m1000_damaged_by_noodlers.jpg&quot; width=&quot;400&quot; height=&quot;295&quot; alt=&quot;Pen body&quot; /&gt;&lt;/center&gt;
&lt;blockquote class=&quot;nt&quot;&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;stt&quot;&gt;Creeping Crud: the Dreaded SITB, or Slime in the Bottle&lt;/p&gt;
&lt;p&gt;Sometimes an ink can undergo an adverse chemical reaction among its various components: the fungicide might react slowly with the dye and — over time — produce a slimy film or threadlike bits of slime. This is bad news. I’ve seen suggestions that filtering the slime out will leave the remaining ink usable, but it’s not really a good idea. There is no way to tell what the chemistry of the ink is anymore; if the reaction involved the fungicide, for example, the ink no longer contains sufficient mold inhibitor, and it can develop mold very suddenly — in the bottle or in your pen! One visit to a pen repairer to have the pen cleaned out will cost you at least the price of two bottles of ink. Is it worth the risk?&lt;/p&gt;

&lt;p class=&quot;stt&quot;&gt;More Crud: Mold&lt;/p&gt;
&lt;p&gt;To a chemist, the aniline dyes used in fountain pen inks are organic in nature, and the very presence of these dyes in ink can give rise to mold because to mold they look like food. Mold spores are everywhere around us; every time a bottle of ink is opened, some spores find their way from the atmosphere into the ink. Inks contain chemicals to inhibit mold growth, but not all inks contain enough mold inhibitor.&lt;/p&gt;
&lt;p class=&quot;stt&quot;&gt;Your Grandfather’s Ink&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://richardspens.com/images/ref/care/iron_gall_ink.png&quot; width=&quot;120&quot; height=&quot;120&quot; class=&quot;pad4x0&quot; align=&quot;right&quot; alt=&quot;Iron gall ink for fountain pens&quot; /&gt;&lt;img src=&quot;http://richardspens.com/images/pixel.gif&quot; width=&quot;8&quot; height=&quot;126&quot; align=&quot;right&quot; alt=&quot;&quot; /&gt;I’ve left one particular type of ink until the end. &lt;a href=&quot;http://richardspens.com/ref/glossary/I.htm#iron_gall_ink&quot;&gt;Iron gall ink&lt;/a&gt; was invented more than 1500 years ago. It was used by innumerable nameless scribes to copy sacred manuscripts; by great secular writers and thinkers such as Voltaire, Shakespeare, and Leibniz; and by ordinary people. When fountain pens came into existence, iron gall ink made the leap to the new technology, and it is still in use today because it is a very permanent ink. But it has a couple of drawbacks. First, but of less serious consequence for most of us, is its reputation for destroying, over the course of centuries, the paper on which it is used. Of more concern to you, as a fountain pen user, is that it is rather acidic: it can corrode metal pen parts such as steel nibs and cartridge nipples, and plated trim rings — every part that comes in contact with it. Only gold alloys are safe from its ravages; if your pen features a gold nib and has no other metal parts that are continually exposed to the ink (such as a metal cartridge nipple), you can use iron gall inks such as Montblanc Blue-Black and Diamine Registrar’s ink with impunity.&lt;/p&gt;
&lt;p&gt;You should note that iron gall ink is not the only acidic ink that is currently available. Your best course, if you’re concerned about the pH of your inks, is to look for inks that advertise neutral-pH formulas.&lt;/p&gt;
&lt;p class=&quot;stt&quot;&gt;The Bottom Line&lt;/p&gt;
&lt;p&gt;Be sensible. Know what inks you are using and how to handle them; and take good care of your pens to ensure that they’ll deliver the writing performance that was designed into them. If you’re like most collector/users, you have more pens than you want to use at one time — when you take a pen out of your rotation, flush it thoroughly (see &lt;strong&gt;&lt;a href=&quot;http://richardspens.com/ref/care/care.htm&quot; title=&quot;Read this article.&quot;&gt;Care and Feeding: How to Pamper Your Pens&lt;/a&gt;&lt;/strong&gt;), and let it dry uncapped overnight before putting it into your pen chest for a bit of well-earned relaxation.&lt;/p&gt;
&lt;div class=&quot;tag&quot; id=&quot;notes&quot;&gt;Notes:
&lt;ol readability=&quot;5.4035087719298&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;The discussion of solutions in this article is necessarily simplified. For example, it speaks of liquids, but gases and solids can also form solutions. For example, fish breathe by extracting dissolved oxygen gas from the liquid water in which they live.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6.8127572016461&quot;&gt;
&lt;p&gt;For those of a curious disposition, the destruction of paper by iron gall ink is simply a greatly accelerated form of natural decomposition, catalyzed by active soluble salts remaining in the ink (frequently due to a lack of understanding as to the correct form of iron sulfate to be used in preparing the ink). Properly balanced ink does not contain excess soluble salts and is, for all practical purposes, not harmful. For more information, see the Glossopedia entry on &lt;a href=&quot;http://richardspens.com/ref/glossary/I.htm#iron_gall_ink&quot;&gt;iron gall ink&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;hr class=&quot;rt10&quot; /&gt;&lt;p&gt;&lt;span class=&quot;tag&quot;&gt;The information in this article is as accurate as possible, but you should not take it as absolutely authoritative or complete. If you have additions or corrections to this page, please consider &lt;a href=&quot;mailto:richard@richardspens.com?subject=Pen%20reference%20information&quot; title=&quot;Send email about correcting or enhancing these reference pages.&quot;&gt;sharing them with us&lt;/a&gt; to improve the accuracy of our information.&lt;/span&gt; &lt;/p&gt;

&lt;/body&gt;</description>
<pubDate>Sun, 11 Mar 2018 20:43:02 +0000</pubDate>
<dc:creator>fanf2</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://richardspens.com/ref/care/inks.htm</dc:identifier>
</item>
</channel>
</rss>