<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Microsoft Joins the Open Invention Network</title>
<link>https://globenewswire.com/news-release/2018/10/10/1619375/0/en/Microsoft-Joins-the-Open-Invention-Network-Community.html</link>
<guid isPermaLink="true" >https://globenewswire.com/news-release/2018/10/10/1619375/0/en/Microsoft-Joins-the-Open-Invention-Network-Community.html</guid>
<description>&lt;span class=&quot;article-body&quot; itemprop=&quot;articleBody&quot;&gt;DURHAM, N.C., Oct. 10, 2018 (GLOBE NEWSWIRE) -- Open Invention Network (OIN) announced today that Microsoft has become a member of the OIN community.  By joining OIN, Microsoft is demonstrating its commitment to open source software (OSS) and innovation through collaborative development.  With more than 2,650 members, including numerous Fortune 500 enterprises, OIN is the largest patent non-aggression community in history and represents a core set of community values related to open source licensing, which has become the norm.  &lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;article-body&quot; itemprop=&quot;articleBody&quot;&gt;“Open source development continues to expand into new products and markets to create unrivaled levels of innovation.  Through its participation in OIN, Microsoft is explicitly acknowledging the importance of open source software to its future growth,&quot; said Keith Bergelt, CEO of Open Invention Network.  “Microsoft’s participation in OIN adds to our strong community, which through its breadth and depth has reduced patent risk in core technologies, and unequivocally signals for all companies who are using OSS but have yet to join OIN that the litmus test for authentic behavior in the OSS community includes OIN participation.”&lt;/span&gt;&lt;span class=&quot;article-body&quot; itemprop=&quot;articleBody&quot;&gt;“Microsoft sees open source as a key innovation engine, and for the past several years we have increased our involvement in, and contributions to, the open source community,” said Erich Andersen, Corporate Vice President and Chief IP Counsel, Microsoft. “We believe the protection OIN offers the open source community helps increase global contributions to and adoption of open source technologies.  We are honored to stand with OIN as an active participant in its program to protect against patent aggression in core Linux and other important OSS technologies.”&lt;/span&gt;&lt;span class=&quot;article-body&quot; itemprop=&quot;articleBody&quot;&gt;OIN’s community practices patent non-aggression in core open source technologies by cross-licensing Linux System patents to one another on a royalty-free basis. Patents owned by Open Invention Network are similarly licensed royalty-free to any organization that agrees not to assert its patents against the Linux System.  The OIN license can be signed online at &lt;a href=&quot;https://www.globenewswire.com/Tracker?data=85Hhd1Y27-lI_QoNqzQkMshSSwMWFhTp7qS_udVXdudy3hQ1Uji-In43AbVyREigP4ub-aW-lp8bqNWWqB5ygw==&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;&quot;&gt;&lt;u&gt;http://www.j-oin.net/&lt;/u&gt;&lt;/a&gt;.&lt;/span&gt;&lt;span class=&quot;article-body&quot; itemprop=&quot;articleBody&quot;&gt;&lt;strong&gt;&lt;em&gt;About Open Invention Network&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span class=&quot;article-body&quot; itemprop=&quot;articleBody&quot;&gt;Open Invention Network (OIN) is the largest patent non-aggression community in history and supports freedom of action in Linux as a key element of open source software. Funded by Google, IBM, NEC, Philips, Red Hat, Sony, SUSE, and Toyota, OIN has more than 2,650 community members and owns more than 1,300 global patents and applications.  The OIN patent license and member cross-licenses are available royalty-free to any party that joins the OIN community.&lt;/span&gt;&lt;span class=&quot;article-body&quot; itemprop=&quot;articleBody&quot;&gt;For more information, visit &lt;a href=&quot;https://www.globenewswire.com/Tracker?data=85Hhd1Y27-lI_QoNqzQkMkYxI6rm6VThIhbmue2z4vbgZkFUwZ93Cha6MEzT8se2UGQfBa8X75Pw0aUVcqYve1P1Ml-rHVxnC5li1P2brhIBfnQG9lxHd9JDly7L8wbV&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;&quot;&gt;&lt;u&gt;http://www.openinventionnetwork.com&lt;/u&gt;&lt;/a&gt;.&lt;/span&gt;&lt;span class=&quot;article-body&quot; itemprop=&quot;articleBody&quot;&gt;&lt;strong&gt;&lt;em&gt;Media-Only Contact:&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span class=&quot;article-body&quot; itemprop=&quot;articleBody&quot;&gt;Ed Schauweker&lt;br/&gt;AVID Public Relations for Open Invention Network&lt;br/&gt;&lt;u&gt;ed@avidpr.com&lt;/u&gt;&lt;br/&gt;+1 (703) 963-5238&lt;/span&gt;</description>
<pubDate>Wed, 10 Oct 2018 13:54:07 +0000</pubDate>
<dc:creator>MikusR</dc:creator>
<og:title>Microsoft Joins the Open Invention Network Community</og:title>
<og:type>article</og:type>
<og:image>http://globenewswire.com/Attachment/LogoDisplay/508655?filename=508655.png&amp;size=1</og:image>
<og:url>http://globenewswire.com/news-release/2018/10/10/1619375/0/en/Microsoft-Joins-the-Open-Invention-Network-Community.html</og:url>
<og:description>Microsoft’s participation in OIN will drive additional innovation and enhance patent non-aggression in Linux and adjacent OSS technologies</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://globenewswire.com/news-release/2018/10/10/1619375/0/en/Microsoft-Joins-the-Open-Invention-Network-Community.html</dc:identifier>
</item>
<item>
<title>Amazon scraps secret AI recruiting tool that showed bias against women</title>
<link>https://www.reuters.com/article/us-amazon-com-jobs-automation-insight/amazon-scraps-secret-ai-recruiting-tool-that-showed-bias-against-women-idUSKCN1MK08G</link>
<guid isPermaLink="true" >https://www.reuters.com/article/us-amazon-com-jobs-automation-insight/amazon-scraps-secret-ai-recruiting-tool-that-showed-bias-against-women-idUSKCN1MK08G</guid>
<description>&lt;p&gt;SAN FRANCISCO (Reuters) - Amazon.com Inc’s (&lt;span id=&quot;”symbol_AMZN.O_0”&quot;&gt;&lt;a href=&quot;https://www.reuters.com/finance/stocks/overview?symbol=AMZN.O&quot;&gt;AMZN.O&lt;/a&gt;&lt;/span&gt;) machine-learning specialists uncovered a big problem: their new recruiting engine did not like women.&lt;/p&gt;
&lt;p&gt;The team had been building computer programs since 2014 to review job applicants’ resumes with the aim of mechanizing the search for top talent, five people familiar with the effort told Reuters.&lt;/p&gt;
&lt;p&gt;Automation has been key to Amazon’s e-commerce dominance, be it inside warehouses or driving pricing decisions. The company’s experimental hiring tool used artificial intelligence to give job candidates scores ranging from one to five stars - much like shoppers rate products on Amazon, some of the people said.&lt;/p&gt;
&lt;p&gt;“Everyone wanted this holy grail,” one of the people said. “They literally wanted it to be an engine where I’m going to give you 100 resumes, it will spit out the top five, and we’ll hire those.”&lt;/p&gt;
&lt;p&gt;But by 2015, the company realized its new system was not rating candidates for software developer jobs and other technical posts in a gender-neutral way.&lt;/p&gt;
&lt;p&gt;That is because Amazon’s computer models were trained to vet applicants by observing patterns in resumes submitted to the company over a 10-year period. Most came from men, a reflection of male dominance across the tech industry. &lt;/p&gt;
&lt;p&gt;In effect, Amazon’s system taught itself that male candidates were preferable. It penalized resumes that included the word “women’s,” as in “women’s chess club captain.” And it downgraded graduates of two all-women’s colleges, according to people familiar with the matter. They did not specify the names of the schools.&lt;/p&gt;
&lt;p&gt;Amazon edited the programs to make them neutral to these particular terms. But that was no guarantee that the machines would not devise other ways of sorting candidates that could prove discriminatory, the people said.&lt;/p&gt;
&lt;p&gt;The Seattle company ultimately disbanded the team by the start of last year because executives lost hope for the project, according to the people, who spoke on condition of anonymity. Amazon’s recruiters looked at the recommendations generated by the tool when searching for new hires, but never relied solely on those rankings, they said.&lt;/p&gt;
&lt;p&gt;Amazon declined to comment on the technology’s challenges, but said the tool “was never used by Amazon recruiters to evaluate candidates.” The company did not elaborate further. It did not dispute that recruiters looked at the recommendations generated by the recruiting engine.&lt;/p&gt;
&lt;p&gt;The company’s experiment, which Reuters is first to report, offers a case study in the limitations of machine learning. It also serves as a lesson to the growing list of large companies including Hilton Worldwide Holdings Inc (&lt;span id=&quot;”symbol_HLT.N_1”&quot;&gt;&lt;a href=&quot;https://www.reuters.com/finance/stocks/overview?symbol=HLT.N&quot;&gt;HLT.N&lt;/a&gt;&lt;/span&gt;) and Goldman Sachs Group Inc (&lt;span id=&quot;”symbol_GS.N_2”&quot;&gt;&lt;a href=&quot;https://www.reuters.com/finance/stocks/overview?symbol=GS.N&quot;&gt;GS.N&lt;/a&gt;&lt;/span&gt;) that are looking to automate portions of the hiring process.&lt;/p&gt;
&lt;p&gt;Some 55 percent of U.S. human resources managers said artificial intelligence, or AI, would be a regular part of their work within the next five years, according to a 2017 survey by talent software firm CareerBuilder.&lt;/p&gt;
&lt;p&gt;Employers have long dreamed of harnessing technology to widen the hiring net and reduce reliance on subjective opinions of human recruiters. But computer scientists such as Nihar Shah, who teaches machine learning at Carnegie Mellon University, say there is still much work to do.&lt;/p&gt;
&lt;p&gt;“How to ensure that the algorithm is fair, how to make sure the algorithm is really interpretable and explainable - that’s still quite far off,” he said.&lt;/p&gt;
&lt;div class=&quot;Slideshow_container Slideshow_small Slideshow_standard&quot;&gt;
&lt;div class=&quot;Slideshow_preview-container&quot;&gt;
&lt;div class=&quot;LazyImage_container LazyImage_dark&quot;&gt;&lt;img src=&quot;https://s3.reutersmedia.net/resources/r/?m=02&amp;amp;d=20181010&amp;amp;t=2&amp;amp;i=1313083806&amp;amp;r=LYNXNPEE9906Q&quot;/&gt;
&lt;/div&gt;

Slideshow &lt;span class=&quot;Slideshow_count&quot;&gt;(6 Images)&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;MASCULINE LANGUAGE&lt;/h3&gt;
&lt;p&gt;Amazon’s experiment began at a pivotal moment for the world’s largest online retailer. Machine learning was gaining traction in the technology world, thanks to a surge in low-cost computing power. And Amazon’s Human Resources department was about to embark on a hiring spree: Since June 2015, the company’s global headcount has more than tripled to 575,700 workers, regulatory filings show.&lt;/p&gt;
&lt;p&gt;So it set up a team in Amazon’s Edinburgh engineering hub that grew to around a dozen people. Their goal was to develop AI that could rapidly crawl the web and spot candidates worth recruiting, the people familiar with the matter said.&lt;/p&gt;
&lt;p&gt;The group created 500 computer models focused on specific job functions and locations. They taught each to recognize some 50,000 terms that showed up on past candidates’ resumes. The algorithms learned to assign little significance to skills that were common across IT applicants, such as the ability to write various computer codes, the people said.&lt;/p&gt;
&lt;p&gt;Instead, the technology favored candidates who described themselves using verbs more commonly found on male engineers’ resumes, such as “executed” and “captured,” one person said.&lt;/p&gt;
&lt;p&gt;Gender bias was not the only issue. Problems with the data that underpinned the models’ judgments meant that unqualified candidates were often recommended for all manner of jobs, the people said. With the technology returning results almost at random, Amazon shut down the project, they said.&lt;/p&gt;
&lt;h3&gt;THE PROBLEM, OR THE CURE?&lt;/h3&gt;
&lt;p&gt;Other companies are forging ahead, underscoring the eagerness of employers to harness AI for hiring.&lt;/p&gt;
&lt;p&gt;Kevin Parker, chief executive of HireVue, a startup near Salt Lake City, said automation is helping firms look beyond the same recruiting networks upon which they have long relied. His firm analyzes candidates’ speech and facial expressions in video interviews to reduce reliance on resumes.&lt;/p&gt;
&lt;p&gt;“You weren’t going back to the same old places; you weren’t going back to just Ivy League schools,” Parker said. His company’s customers include Unilever PLC (&lt;span id=&quot;”symbol_ULVR.L_3”&quot;&gt;&lt;a href=&quot;https://www.reuters.com/finance/stocks/overview?symbol=ULVR.L&quot;&gt;ULVR.L&lt;/a&gt;&lt;/span&gt;) and Hilton.&lt;/p&gt;
&lt;p&gt;Goldman Sachs has created its own resume analysis tool that tries to match candidates with the division where they would be the “best fit,” the company said.&lt;/p&gt;
&lt;p&gt;Microsoft Corp’s (&lt;span id=&quot;”symbol_MSFT.O_4”&quot;&gt;&lt;a href=&quot;https://www.reuters.com/finance/stocks/overview?symbol=MSFT.O&quot;&gt;MSFT.O&lt;/a&gt;&lt;/span&gt;) LinkedIn, the world’s largest professional network, has gone further. It offers employers algorithmic rankings of candidates based on their fit for job postings on its site.&lt;/p&gt;
&lt;p&gt;Still, John Jersin, vice president of LinkedIn Talent Solutions, said the service is not a replacement for traditional recruiters.&lt;/p&gt;
&lt;p&gt;“I certainly would not trust any AI system today to make a hiring decision on its own,” he said. “The technology is just not ready yet.”&lt;/p&gt;
&lt;p&gt;Some activists say they are concerned about transparency in AI. The American Civil Liberties Union is currently challenging a law that allows criminal prosecution of researchers and journalists who test hiring websites’ algorithms for discrimination.&lt;/p&gt;
&lt;p&gt;“We are increasingly focusing on algorithmic fairness as an issue,” said Rachel Goodman, a staff attorney with the Racial Justice Program at the ACLU.&lt;/p&gt;
&lt;p&gt;Still, Goodman and other critics of AI acknowledged it could be exceedingly difficult to sue an employer over automated hiring: Job candidates might never know it was being used.&lt;/p&gt;
&lt;p&gt;As for Amazon, the company managed to salvage some of what it learned from its failed AI experiment. It now uses a “much-watered down version” of the recruiting engine to help with some rudimentary chores, including culling duplicate candidate profiles from databases, one of the people familiar with the project said.&lt;/p&gt;
&lt;p&gt;Another said a new team in Edinburgh has been formed to give automated employment screening another try, this time with a focus on diversity.&lt;/p&gt;
&lt;div class=&quot;Attribution_container&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;Attribution_attribution&quot; readability=&quot;7&quot;&gt;
&lt;p class=&quot;Attribution_content&quot;&gt;Reporting By Jeffrey Dastin in San Francisco; Editing by Jonathan Weber and Marla Dickerson&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;StandardArticleBody_trustBadgeContainer&quot;&gt;&lt;span class=&quot;StandardArticleBody_trustBadgeTitle&quot;&gt;Our Standards:&lt;/span&gt;&lt;span class=&quot;trustBadgeUrl&quot;&gt;&lt;a href=&quot;http://thomsonreuters.com/en/about-us/trust-principles.html&quot;&gt;The Thomson Reuters Trust Principles.&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 10 Oct 2018 13:38:29 +0000</pubDate>
<dc:creator>wyldfire</dc:creator>
<og:title>Amazon scraps secret AI recruiting tool that showed bias against women</og:title>
<og:url>https://www.reuters.com/article/us-amazon-com-jobs-automation-insight/amazon-scraps-secret-ai-recruiting-tool-that-showed-bias-against-women-idUSKCN1MK08G</og:url>
<og:type>article</og:type>
<og:description>Amazon.com Inc's machine-learning specialists uncovered a big problem: thei...</og:description>
<og:image>https://s3.reutersmedia.net/resources/r/?m=02&amp;d=20181010&amp;t=2&amp;i=1313083806&amp;w=1200&amp;r=LYNXNPEE9906Q</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reuters.com/article/us-amazon-com-jobs-automation-insight/amazon-scraps-secret-ai-recruiting-tool-that-showed-bias-against-women-idUSKCN1MK08G</dc:identifier>
</item>
<item>
<title>“12 years ago today, I finished writing Hacker News”</title>
<link>https://twitter.com/paulg/status/1049723540902215681?s=21</link>
<guid isPermaLink="true" >https://twitter.com/paulg/status/1049723540902215681?s=21</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://twitter.com/paulg/status/1049723540902215681?s=21&quot;&gt;https://twitter.com/paulg/status/1049723540902215681?s=21&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=18183822&quot;&gt;https://news.ycombinator.com/item?id=18183822&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 347&lt;/p&gt;
&lt;p&gt;# Comments: 178&lt;/p&gt;
</description>
<pubDate>Wed, 10 Oct 2018 11:31:52 +0000</pubDate>
<dc:creator>theCricketer</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/paulg/status/1049723540902215681?s=21</dc:identifier>
</item>
<item>
<title>The hacker&amp;#039;s guide to uncertainty estimates</title>
<link>https://erikbern.com/2018/10/08/the-hackers-guide-to-uncertainty-estimates.html</link>
<guid isPermaLink="true" >https://erikbern.com/2018/10/08/the-hackers-guide-to-uncertainty-estimates.html</guid>
<description>&lt;time datetime=&quot;2018-10-08T00:00:00-04:00&quot; class=&quot;post-date&quot;&gt;2018-10-08&lt;/time&gt;&lt;p&gt;It started with a tweet:&lt;/p&gt;
&lt;div class=&quot;jekyll-twitter-plugin&quot; readability=&quot;5.3333333333333&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; readability=&quot;4.4444444444444&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;New years resolution: every plot I make during 2018 will contain uncertainty estimates&lt;/p&gt;
— Erik Bernhardsson (@fulhack) &lt;a href=&quot;https://twitter.com/fulhack/status/950065836194066433?ref_src=twsrc%5Etfw&quot;&gt;January 7, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;Why? Because I’ve been sitting in 100,000,000 meetings where people endlessly debate whether the monthly number of widgets is going up or down, or whether widget method X is more productive than widget method Y. For almost any graph, quantifying the uncertainty seems useful, so I started trying. A few months later:&lt;/p&gt;
&lt;div class=&quot;jekyll-twitter-plugin&quot; readability=&quot;5.2&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; readability=&quot;4.8&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I'm four months into this year and I gotta tell you – the rabbit hole of estimating uncertainty is DEEP &lt;a href=&quot;https://t.co/wvSlsYskrt&quot;&gt;https://t.co/wvSlsYskrt&lt;/a&gt;&lt;/p&gt;
— Erik Bernhardsson (@fulhack) &lt;a href=&quot;https://twitter.com/fulhack/status/995359796302876674?ref_src=twsrc%5Etfw&quot;&gt;May 12, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I never studied statistics and learned it kind of “backwards” through machine learning, so I consider myself more as a hacker who picked up statistics along the way. Earlier this year I had some basic knowledge of bootstrapping and confidence intervals, but along the way I had to pick up a whole arsenal of tricks going all the way to Monte Carlo methods and inverse Hessians. It seemed useful to share some of the methods I’ve used the most, so I wrote this post!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: this post features some math which might not render properly outside the &lt;a href=&quot;https://erikbern.com/2018/10/08/the-hackers-guide-to-uncertainty-estimates.html&quot;&gt;canonical location&lt;/a&gt; of the post.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I don’t believe in learning things without a concrete example, so let’s generate some data. We’re going to generate a fake time series where the dates range from 2017-07-01 to 2018-07-31. Let’s say the observations are all the weights of an elephant.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;30&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate_time_series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                         &lt;span class=&quot;n&quot;&gt;start_date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gauss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timedelta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;365&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x_scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# for plotting&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t_scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timedelta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;365&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_scale&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate_time_series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before we get started with anything, we need graphics. Let’s plot to see what’s going on!&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Date'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Weight of elephant (kg)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://erikbern.com/assets/uncertainty/output_4_1.png&quot; alt=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;First of all, let’s not fit any fancy models. We’re just going to break it up into a few buckets and compute the mean within each bucket. But let’s first pause and talk about uncertainty.&lt;/p&gt;

&lt;p&gt;This makes me sometimes feel dumb but I keep confusing what “uncertainty” means and I think it’s important to be hyper clear because we’re going to do all of them. Let’s say we’re trying to understand quantity sold as a function of cost. There’s multiple different things we can estimate the distribution for:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The data itself. Given a certain time frame , what’s the distribution of the elephant’s weight during that time interval?&lt;/li&gt;
&lt;li&gt;The uncertainty of some parameter, like the parameter  in a linear relationship . &lt;em&gt;Or&lt;/em&gt; the uncertainty of some estimator, like the &lt;em&gt;mean&lt;/em&gt; of a number of observations.&lt;/li&gt;
&lt;li&gt;The uncertainty of predicted quantities. So if we predict that for a date  (possibly in the future), the elephant is going to weight  kg, we want to know the uncertainty of the quantity .&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Hope that makes sense! Let’s start with the most basic model – just break things up in buckets. I recommend the excellent &lt;a href=&quot;https://seaborn.pydata.org/&quot;&gt;Seaborn&lt;/a&gt; package if we just want to get some basic idea of distributions and uncertainty estimates. Seaborn usually operates on dataframes so we’ll need to convert:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pandas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Weight (kg)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Month'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Y-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;seaborn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boxplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Month'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Weight (kg)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://erikbern.com/assets/uncertainty/output_6_1.png&quot; alt=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;These last charts show the &lt;em&gt;distribution&lt;/em&gt; of the dataset. Let’s now try to figure out the uncertainty of a very common estimator: the &lt;em&gt;mean&lt;/em&gt;!&lt;/p&gt;
&lt;h2 id=&quot;computing-the-uncertainty-of-the-mean--normal-distributions&quot;&gt;Computing the uncertainty of the mean – normal distributions&lt;/h2&gt;
&lt;p&gt;Under some mild assumptions (I’m going to get back to this in a sec and scrutinize it), we can compute the confidence intervals &lt;em&gt;of the mean estimator&lt;/em&gt; as:&lt;/p&gt;
&lt;p&gt;Where  is the mean and  is the standard deviation, a.k.a. the square root of the variance. I don’t think this formula is super important to remember, but I think it’s somewhat useful to remember that the &lt;em&gt;size of the confidence interval is inversely related to the square root of the number of samples.&lt;/em&gt; For instance, this is useful when you’re running an A/B test – if you want to detect a 1% difference then you need something on the order of  samples. (This is a rule of thumb, don’t use it for your medical device software).&lt;/p&gt;
&lt;p&gt;By the way – what’s the 1.96 number from? It’s directly related to the size of the uncertainty estimate. With  you will cover about 95% of the probability distribution.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;plot_confidence_interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;observations_by_group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;observations_by_group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lo_bound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hi_bound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;series&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;observations_by_group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lo_bound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.96&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hi_bound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.96&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill_between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Confidence interval (normal)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;observations_by_month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Month'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Weight (kg)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;observations_by_month&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plot_confidence_interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;observations_by_month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Weight of elephant (kg)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://erikbern.com/assets/uncertainty/output_9_1.png&quot; alt=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Note that this shows the uncertainty of the &lt;em&gt;mean&lt;/em&gt; and that this is not the same thing as the &lt;em&gt;distribution of the data&lt;/em&gt; itself. That’s why you see far fewer than 95% of the points within the red shaded area. If we added more and more points, the red shaded area would get more and more narrow, whereas the blue dots would still have about the same range. However the true mean should in theory be within the red shaded area 95% of the time.&lt;/p&gt;
&lt;p&gt;I mentioned earlier that the formula for confidence interval only applies under some mild assumptions. What are those? It’s the assumption of &lt;em&gt;normality&lt;/em&gt;. For a large number of observations, this is nothing to worry about, and this is due to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_limit_theorem&quot;&gt;central limit theorem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at a type of dataset that I often work on: conversions. For the sake of the argument, let’s say we’re running an A/B test that has some impact, and that we’re trying to understand the impact on conversion rate &lt;em&gt;by state&lt;/em&gt;. Conversion is always 0 or 1. The code to generate this data set isn’t super important, so don’t pay too much attention to this:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;STATES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'CA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'NY'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'FL'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'TX'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'PA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'IL'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'OH'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GROUPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'control'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate_binary_categorical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STATES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GROUPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;zs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z_std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Don't pay too much attention to this code. The main thing happens in&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# numpy.random.binomial, which is where we draw the &quot;k out of n&quot; outcomes.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;e_obs_per_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exponential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state_biases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;noise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z_std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state_biases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;poisson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e_obs_per_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binomial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For each state and each “group” (test and control) we generated  users, out of which  have converted. Let’s plot the conversion rate per state to see what’s going on!&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate_binary_categorical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STATES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Conversion rate'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://erikbern.com/assets/uncertainty/output_14_1.png&quot; alt=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;How do we compute confidence intervals for these numbers? We could of course use the method I just covered further up where we compute the mean and the standard deviations. But in this case there’s a trick we can use!&lt;/p&gt;
&lt;p&gt;Since all outcomes are 0 or 1, and drawn with the same (unknown) probability, we know that the number of ones and zeros follows a &lt;a href=&quot;https://en.wikipedia.org/wiki/Binomial_distribution&quot;&gt;binomial distribution&lt;/a&gt;. This means that the confidence interval of a “ out of ” scenario is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Beta_distribution&quot;&gt;Beta distribution&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ve personally benefitted from memorizing the formula for the confidence interval and think I probably use it more than the previous (Normal based) one. In particular all you need to remember is&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scipy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.025&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.975&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;array([0.00629335, 0.07107612])
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will compute a 95% confidence interval if you plug in values for  and . In this case we see that if we have 100 website visitors and 3 of them purchased the product, then range is 0.6%-7.1%. Let’s try this for our dataset:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scipy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.025&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scipy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.975&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STATES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yerr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linewidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elinewidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Conversion rate'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://erikbern.com/assets/uncertainty/output_18_1.png&quot; alt=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Nice! 👌&lt;/p&gt;
&lt;h2 id=&quot;bootstrapping&quot;&gt;Bootstrapping&lt;/h2&gt;
&lt;p&gt;Another approach that can be useful is bootstrapping. It allows you do compute the same statistics without memorizing any formulas. The idea is to compute the mean, but do it for &lt;em&gt;bootstraps&lt;/em&gt;, where each bootstrap is a random sample (with replacement) from our observations. For every bootstrap, we compute a mean, and then we take the mean in the 97.5th and the 2.5th percentile as the confidence interval:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lo_bound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hi_bound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;months&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;observations_by_month&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;months&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;series&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;observations_by_month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bootstrapped_means&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# sample with replacement&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bootstrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bootstrapped_means&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lo_bound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;percentile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bootstrapped_means&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hi_bound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;percentile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bootstrapped_means&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;97.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill_between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;months&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Confidence interval'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Weight of elephant (kg)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://erikbern.com/assets/uncertainty/output_20_1.png&quot; alt=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Miraculously, this charts look very similar to the one before! Just kidding – that was sort of expected :)&lt;/p&gt;
&lt;p&gt;Bootstrapping is nice because it lets you dodge any questions about what probability distribution the data is generated from. It’s basically plug and play, and works on almost everything, though it can be a bit slow.&lt;/p&gt;
&lt;p&gt;☠ Be aware though that there’s a &lt;em&gt;danger zone&lt;/em&gt; of bootstrapping. My understanding is that bootstrapping will &lt;em&gt;converge&lt;/em&gt; towards the correct estimates as the number of samples goes to infinity, but if you’re working with small samples, you can get really wonky results. I generally never trust bootstrapping for anything less than say 50 samples, and you probably shouldn’t do that either.&lt;/p&gt;
&lt;p&gt;As a side note, Seaborn’s &lt;code class=&quot;highlighter-rouge&quot;&gt;barplot&lt;/code&gt; actually plots confidence intervals using bootstrapping:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;seaborn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;barplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Month'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Weight (kg)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://erikbern.com/assets/uncertainty/output_23_2.png&quot; alt=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Again, Seaborn is great for exploratory analysis, and some of its charts can do basic statistics.&lt;/p&gt;

&lt;p&gt;Let’s crank it up a notch. We’re going to fit a straight line to this cloud of points.&lt;/p&gt;
&lt;p&gt;There’s some smart ways you can implement linear regression so that it’s extremely fast, but we’re not going to use those methods because they don’t generalize very well.&lt;/p&gt;
&lt;p&gt;I’m going to do it in what I think of as the most general possible way. We’re going to define a &lt;em&gt;model&lt;/em&gt; (in this case a straight line), a &lt;em&gt;loss function&lt;/em&gt; (squared deviations from this straight line) and then optimize it using a general-purpose solver (scipy.optimize.minimize).&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate_time_series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;l2_loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;k_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scipy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minimize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l2_loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;linewidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Weight of elephant (kg)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://erikbern.com/assets/uncertainty/output_26_1.png&quot; alt=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;linear-regression-with-uncertainty-using-maximum-likelihood&quot;&gt;Linear regression with uncertainty, using maximum likelihood&lt;/h2&gt;
&lt;p&gt;We just fit  and  but there’s no uncertainty estimates here. There’s several things we could estimate uncertainties for, but let’s start with the &lt;em&gt;uncertainty of the predicted values&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We can do that by fitting a normal distribution around the line &lt;em&gt;at the same time&lt;/em&gt; as we’re fitting  and . I’m going to do this using &lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_likelihood_estimation&quot;&gt;Maximum Likelihood&lt;/a&gt;. If you’re not familiar with this method, don’t be scared! If there’s &lt;em&gt;any&lt;/em&gt; method in statistics that I’ve found as easily accessible (it’s basic probability theory) and useful, it’s this method.&lt;/p&gt;
&lt;p&gt;In fact, minimizing squared loss (which we just did, in the previous snippet) is actually a special case of maximum likelihood! Minimizing the squared loss is the same thing as &lt;em&gt;maximizing the logarithm of the probability of all the data.&lt;/em&gt; This is usually called the “log likelihood”.&lt;/p&gt;
&lt;p&gt;So we already have an expression to minimize the squared loss. If we make the variance an unknown variable  we can fit that at the same time! The quantity we’re going to try to minimize now turns into&lt;/p&gt;
&lt;p&gt;Where  are the predicted values by our model. Let’s try to fit that!&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy.optimize&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;neg_log_likelihood&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Since sigma &amp;gt; 0, we use use log(sigma) as the parameter instead.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# That way we have an unconstrained problem.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_sigma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_sigma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; \
        &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;k_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_sigma_hat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scipy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minimize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;neg_log_likelihood&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sigma_hat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_sigma_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'green'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linewidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill_between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.96&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigma_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.96&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigma_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Weight of elephant (kg)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://erikbern.com/assets/uncertainty/output_28_2.png&quot; alt=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The uncertainty estimate here isn’t actually 💯 because it doesn’t take into account the uncertainty of , , and  in itself. It’s a decent approximation, but to get it right we need to do those things at the same time. So let’s do it.&lt;/p&gt;

&lt;p&gt;So let’s take it to the next level and try to estimate the uncertainty estimate of  and &lt;em&gt;and&lt;/em&gt; ! I think this will show how bootstrapping is basically cookie cutter — you can plug it into almost anything in order to estimate uncertainties.&lt;/p&gt;
&lt;p&gt;For every bootstrap estimate, I’m going to draw a line. We can also take all those lines and compute a confidence interval:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;curves&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# sample with replacement&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bootstrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xs_bootstrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ys_bootstrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scipy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minimize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;l2_loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs_bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys_bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;curves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Plot individual lines&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curve&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linewidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'green'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Plot 95% confidence interval&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;percentile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;97.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill_between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Weight of elephant (kg)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://erikbern.com/assets/uncertainty/output_31_1.png&quot; alt=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Whoa, what’s going on here? This uncertainty is &lt;em&gt;very&lt;/em&gt; different from the earlier plot. This seems confusing until you realize that they show two very different things:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The first plot finds &lt;em&gt;one&lt;/em&gt; solution of  and  and shows the uncertainty of the &lt;em&gt;predictions.&lt;/em&gt; So, if you’re asked what’s the range of the elephant’s weight in the next month, you can get it from the chart.&lt;/li&gt;
&lt;li&gt;The second plot finds &lt;em&gt;many&lt;/em&gt; solutions of  and , and shows the uncertainty of . So this answers a different question – what’s the trend of the elephant’s weight over time and what’s the uncertainty &lt;em&gt;of the trend&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;It turns out we can combine the two approaches and make it even more complicated by fitting drawing bootstrap samples and fitting , , and  at the same time. Then for each of those estimates, we can predict new values . Let’s do it 😎.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;curves&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# sample with replacement&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bootstrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xs_bootstrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ys_bootstrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_sigma_hat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scipy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minimize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;neg_log_likelihood&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs_bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys_bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;curves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Note what's going on here: we're _adding_ the random term&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# to the predictions!&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_sigma_hat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Plot 95% confidence interval&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;percentile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;97.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill_between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Weight of elephant (kg)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://erikbern.com/assets/uncertainty/output_33_2.png&quot; alt=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Nice! It’s getting serious now 😅 – you can see a hyperbolic shape if you look closely!&lt;/p&gt;
&lt;p&gt;The trick here is that for every bootstrap estimates of  we also need to draw random predictions. As you can see in the code, we’re actually adding random normal variables to the predicted values for . That’s also why the shape end up a big squiggly.&lt;/p&gt;
&lt;p&gt;Unfortunately bootstrapping turns out to be fairly slow for this problem – for each of the bootstraps, we need to fit a model. Let’s look at another option:&lt;/p&gt;

&lt;p&gt;It’s going to get a bit wilder now. I’m going to switch to some Bayesian methods, where we estimate , , and  by drawing samples. It’s similar to bootstrapping, but MCMC has far better theoretical underpinnings (we are sampling from a “posterior distribution” using Bayes rule), and it’s often orders of magnitude faster.&lt;/p&gt;
&lt;p&gt;For this, we’re going to use a library called &lt;a href=&quot;http://emcee.readthedocs.io/&quot;&gt;emcee&lt;/a&gt; which I’ve found pretty easy to use. All it needs is a log-likelihood function, which as it turns out we just defined earlier! We just need to take the &lt;em&gt;negative&lt;/em&gt; of it.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;25&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;emcee&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate_time_series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log_likelihood&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neg_log_likelihood&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ndim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nwalkers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ndim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nwalkers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sampler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emcee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnsembleSampler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nwalkers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_likelihood&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sampler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_mcmc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s plot the sampled values for  and !&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Grab the last 10 from each walker&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sampler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_sigma&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;linewidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'green'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Weigh of elephant (kg)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://erikbern.com/assets/uncertainty/output_39_1.png&quot; alt=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;There’s a bit more stuff that goes into these methods – the sampling is a bit finicky and requires a bit of handholding to get to work well. I don’t want to get into all the specifics, and I’m a layman myself. But it can often be several orders of magnitude faster than booststrapping and it also handles situation with less data much better.&lt;/p&gt;
&lt;p&gt;We end up with samples from the posterior distribution of . We can look at the probability distribution of these unknowns:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Grab slightly more samples this time&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sampler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;k_samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_sigma_samples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;seaborn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k_samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'k'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;seaborn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;seaborn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_sigma_samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sigma'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://erikbern.com/assets/uncertainty/output_41_2.png&quot; alt=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;You can see that these distribution sort of center around , , and  which is how we constructed them in the first place. That’s somewhat reassuring!&lt;/p&gt;
&lt;p&gt;Finally, we can plot the full uncertainty of predictions using the same methodology as for boostraps:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;28&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sampler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;curves&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_sigma&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;curves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_sigma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Plot 95% confidence interval&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;percentile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;97.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill_between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Weight of elephant (kg)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://erikbern.com/assets/uncertainty/output_43_1.png&quot; alt=&quot;png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;These Bayesian methods don’t end here. In particular there’s several libraries that work with these kind of problems. It turns out that if you express the problem in a more structured way (not just a negative log-likelihood function), you can make the sampling scale to large problems (as in, thousands of unknown parameters). For Python there’s &lt;a href=&quot;https://docs.pymc.io/&quot;&gt;PyMC3&lt;/a&gt; and &lt;a href=&quot;http://pystan.readthedocs.io/en/latest/&quot;&gt;PyStan&lt;/a&gt;, as well as the slightly more experimental (?) &lt;a href=&quot;http://edwardlib.org/&quot;&gt;Edward&lt;/a&gt; and &lt;a href=&quot;http://pyro.ai/&quot;&gt;Pyro&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve taken you a bit down the rabbit hole – but it goes much further. In fact, forcing myself to estimate uncertainties for anything I do has been a great forcing function to learn a ton about statistics that I’ve been deferring for too long and I recommend it to anyone who is interested.&lt;/p&gt;
&lt;p&gt;Making decisions based on data is hard! But if we were a bit more disciplined about quantifying the uncertainty, we might make better decisions. It’s not easy right now to do this, but I &lt;em&gt;really&lt;/em&gt; hope we’ll see a popularization of these methods using more accessible tools.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/jim_savage_&quot;&gt;Jim Savage&lt;/a&gt; for some feedback on an earlier draft! All the code is available as a &lt;a href=&quot;https://github.com/erikbern/uncertainty&quot;&gt;notebook on Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’m looking for data engineers to join my team at &lt;a href=&quot;https://better.com&quot;&gt;Better&lt;/a&gt;! Feel free to reach out at erik at better dot com, or also DM on Twitter, or &lt;a href=&quot;https://boards.greenhouse.io/better/jobs/960417&quot;&gt;apply directly&lt;/a&gt; if you want to. You can read a bit more about the role in a &lt;a href=&quot;https://erikbern.com/2018/01/28/im-looking-for-data-engineers.html&quot;&gt;previous blog post&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Wed, 10 Oct 2018 06:39:09 +0000</pubDate>
<dc:creator>mzl</dc:creator>
<og:title>The hacker’s guide to uncertainty estimates</og:title>
<og:description>I made a New Year’s resolution: every plot I make during 2018 will contain uncertainty estimates. Nine months in and I have learned a lot, so I put together a summary of some of the most useful methods.</og:description>
<og:url>https://erikbern.com/2018/10/08/the-hackers-guide-to-uncertainty-estimates.html</og:url>
<og:image>https://erikbern.com/assets/uncertainty/output_39_1.png</og:image>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://erikbern.com/2018/10/08/the-hackers-guide-to-uncertainty-estimates.html</dc:identifier>
</item>
<item>
<title>Introduction to Differential Equations (2008)</title>
<link>http://tutorial.math.lamar.edu/Classes/DE/Definitions.aspx</link>
<guid isPermaLink="true" >http://tutorial.math.lamar.edu/Classes/DE/Definitions.aspx</guid>
<description>&lt;span id=&quot;SHLink_NoteMobile&quot; class=&quot;SH-Link content-note-link-mobile&quot;&gt;Show Mobile Notice&lt;/span&gt;&lt;span id=&quot;SHImg_NoteMobile&quot; class=&quot;fas fa-caret-right SH-padding content-note-link-mobile&quot; aria-hidden=&quot;true&quot;/&gt; &lt;span id=&quot;SHALink_S_Note&quot; class=&quot;SH-Link SH-Hide SH-Bracket&quot;&gt;Show All Notes&lt;/span&gt; &lt;span id=&quot;SHALink_H_Note&quot; class=&quot;SH-Link SH-Hide SH-Bracket&quot;&gt;Hide All Notes&lt;/span&gt;
&lt;div id=&quot;SHObj_NoteMobile&quot; class=&quot;content-note-container content-note-container-mobile&quot; readability=&quot;35&quot;&gt;

&lt;p&gt;You appear to be on a device with a &quot;narrow&quot; screen width (&lt;em&gt;i.e.&lt;/em&gt; you are probably on a mobile phone). Due to the nature of the mathematics on this site it is best views in landscape mode. If your device is not in landscape mode many of the equations will run off the side of your device (should be able to scroll to see them) and some of the menu items will be cut off due to the narrow screen width.&lt;/p&gt;
&lt;/div&gt;

&lt;h3&gt;Section 1-1 : Definitions&lt;/h3&gt;
&lt;h4&gt;Differential Equation&lt;/h4&gt;
&lt;p&gt;The first definition that we should cover should be that of &lt;strong&gt;differential equation&lt;/strong&gt;. A differential equation is any equation which contains derivatives, either ordinary derivatives or partial derivatives.&lt;/p&gt;

&lt;p&gt;There is one differential equation that everybody probably knows, that is Newton’s Second Law of Motion. If an object of mass \(m\) is moving with acceleration \(a\) and being acted on with force \(F\) then Newton’s Second Law tells us.&lt;/p&gt;
\[\begin{equation}F = ma \label{eq:eq1} \end{equation}\]
&lt;p&gt;To see that this is in fact a differential equation we need to rewrite it a little. First, remember that we can rewrite the acceleration, \(a\), in one of two ways.&lt;/p&gt;
\[\begin{equation}a = \frac{{dv}}{{dt}}\hspace{0.25in}{\mbox{OR}}\hspace{0.25in}\,\,\,\,\,\,a = \frac{{{d^2}u}}{{d{t^2}}} \label{eq:eq2}\end{equation}\]
&lt;p&gt;Where \(v\) is the velocity of the object and \(u\) is the position function of the object at any time \(t\). We should also remember at this point that the force, \(F\) may also be a function of time, velocity, and/or position.&lt;/p&gt;
&lt;p&gt;So, with all these things in mind Newton’s Second Law can now be written as a differential equation in terms of either the velocity, \(v\), or the position, \(u\), of the object as follows.&lt;/p&gt;
\[\begin{equation}m\frac{{dv}}{{dt}} = F\left( {t,v} \right)\label{eq:eq3}\end{equation}\] \[\begin{equation}m\frac{{{d^2}u}}{{d{t^2}}} = F\left( {t,u,\frac{{du}}{{dt}}} \right) \label{eq:eq4}\end{equation}\]
&lt;p&gt;So, here is our first differential equation. We will see both forms of this in later chapters.&lt;/p&gt;
&lt;p&gt;Here are a few more examples of differential equations.&lt;/p&gt;
\[\begin{equation}ay'' + by' + cy = g\left( t \right)\label{eq:eq5}\end{equation}\] \[\begin{equation}\sin \left( y \right)\frac{{{d^2}y}}{{d{x^2}}} = \left( {1 - y} \right)\frac{{dy}}{{dx}} + {y^2}{{\bf{e}}^{ - 5y}}\label{eq:eq6}\end{equation}\] \[\begin{equation}{y^{\left( 4 \right)}} + 10y''' - 4y' + 2y = \cos \left( t \right) \label{eq:eq7}\end{equation}\] \[\begin{equation}{\alpha ^2}\frac{{{\partial ^2}u}}{{\partial {x^2}}} = \frac{{\partial u}}{{\partial t}}\label{eq:eq8}\end{equation}\] \[\begin{equation}{a^2}{u_{xx}} = {u_{tt}}\label{eq:eq9}\end{equation}\] \[\begin{equation}\frac{{{\partial ^3}u}}{{{\partial ^2}x\partial t}} = 1 + \frac{{\partial u}}{{\partial y}} \label{eq:eq10}\end{equation}\]
&lt;h4&gt;Order&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;order&lt;/strong&gt; of a differential equation is the largest derivative present in the differential equation. In the differential equations listed above \(\eqref{eq:eq3}\) is a first order differential equation, \(\eqref{eq:eq4}\), \(\eqref{eq:eq5}\), \(\eqref{eq:eq6}\), \(\eqref{eq:eq8}\), and \(\eqref{eq:eq9}\) are second order differential equations, \(\eqref{eq:eq10}\) is a third order differential equation and \(\eqref{eq:eq7}\) is a fourth order differential equation.&lt;/p&gt;
&lt;p&gt;Note that the order does not depend on whether or not you’ve got ordinary or partial derivatives in the differential equation.&lt;/p&gt;
&lt;p&gt;We will be looking almost exclusively at first and second order differential equations in these notes. As you will see most of the solution techniques for second order differential equations can be easily (and naturally) extended to higher order differential equations and we’ll discuss that idea later on.&lt;/p&gt;
&lt;h4&gt;Ordinary and Partial Differential Equations&lt;/h4&gt;
&lt;p&gt;A differential equation is called an &lt;strong&gt;ordinary differential equation&lt;/strong&gt;, abbreviated by &lt;strong&gt;ode,&lt;/strong&gt; if it has ordinary derivatives in it. Likewise, a differential equation is called a &lt;strong&gt;partial differential equation&lt;/strong&gt;, abbreviated by &lt;strong&gt;pde,&lt;/strong&gt; if it has partial derivatives in it. In the differential equations above \(\eqref{eq:eq3}\) - \(\eqref{eq:eq7}\) are ode’s and \(\eqref{eq:eq8}\) - \(\eqref{eq:eq10}\) are pde’s.&lt;/p&gt;
&lt;p&gt;The vast majority of these notes will deal with ode’s. The only exception to this will be the last chapter in which we’ll take a brief look at a common and basic solution technique for solving pde’s.&lt;/p&gt;
&lt;h4&gt;Linear Differential Equations&lt;/h4&gt;
&lt;p&gt;A &lt;strong&gt;linear differential equation&lt;/strong&gt; is any differential equation that can be written in the following form.&lt;/p&gt;
\[\begin{equation} {a_n}\left( t \right){y^{\left( n \right)}}\left( t \right) + {a_{n - 1}}\left( t \right){y^{\left( {n - 1} \right)}}\left( t \right) + \cdots + {a_1}\left( t \right)y'\left( t \right) + {a_0}\left( t \right)y\left( t \right) = g\left( t \right) \label{eq:eq11}\end{equation}\]
&lt;p&gt;The important thing to note about linear differential equations is that there are no products of the function, \(y\left( t \right)\), and its derivatives and neither the function or its derivatives occur to any power other than the first power. Also note that neither the function or its derivatives are “inside” another function, for example, \(\sqrt {y'} \) or \({{\bf{e}}^y}\).&lt;/p&gt;
&lt;p&gt;The coefficients \({a_0}\left( t \right),\,\, \ldots \,\,,{a_n}\left( t \right)\) and \(g\left( t \right)\) can be zero or non-zero functions, constant or non-constant functions, linear or non-linear functions. Only the function,\(y\left( t \right)\), and its derivatives are used in determining if a differential equation is linear.&lt;/p&gt;
&lt;p&gt;If a differential equation cannot be written in the form, \(\eqref{eq:eq11}\) then it is called a &lt;strong&gt;non-linear&lt;/strong&gt; differential equation.&lt;/p&gt;
&lt;p&gt;In \(\eqref{eq:eq5}\) - \(\eqref{eq:eq7}\) above only \(\eqref{eq:eq6}\) is non-linear, the other two are linear differential equations. We can’t classify \(\eqref{eq:eq3}\) and \(\eqref{eq:eq4}\) since we do not know what form the function \(F\) has. These could be either linear or non-linear depending on \(F\).&lt;/p&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;A &lt;strong&gt;solution&lt;/strong&gt; to a differential equation on an interval \(\alpha &amp;lt; t &amp;lt; \beta \) is any function \(y\left( t \right)\) which satisfies the differential equation in question on the interval \(\alpha &amp;lt; t &amp;lt; \beta \). It is important to note that solutions are often accompanied by intervals and these intervals can impart some important information about the solution. Consider the following example.&lt;/p&gt;

&lt;div class=&quot;example&quot; readability=&quot;9&quot;&gt;&lt;span class=&quot;example-title&quot;&gt;Example 1&lt;/span&gt; Show that \(y\left( x \right) = {x^{ - \,\frac{3}{2}}}\) is a solution to \(4{x^2}y'' + 12xy' + 3y = 0\) for \(x &amp;gt; 0\).
&lt;div class=&quot;example-content&quot; readability=&quot;48&quot;&gt;&lt;span id=&quot;SHLink_Soln1&quot; class=&quot;SH-Link soln-title&quot;&gt;Show Solution&lt;/span&gt; &lt;span id=&quot;SHImg_Soln1&quot; class=&quot;fas fa-caret-right&quot; aria-hidden=&quot;true&quot;/&gt;
&lt;div id=&quot;SHObj_Soln1&quot; class=&quot;soln-content&quot; readability=&quot;66&quot;&gt;
&lt;p&gt;We’ll need the first and second derivative to do this.&lt;/p&gt;
\[y'\left( x \right) = - \frac{3}{2}{x^{ - \frac{5}{2}}}\hspace{0.25in}y''\left( x \right) = \frac{{15}}{4}{x^{ - \frac{7}{2}}}\]
&lt;p&gt;Plug these as well as the function into the differential equation.&lt;/p&gt;
\[\begin{align*}4{x^2}\left( {\frac{{15}}{4}{x^{ - \,\frac{7}{2}}}} \right) + 12x\left( { - \frac{3}{2}{x^{ - \,\frac{5}{2}}}} \right) + 3\left( {{x^{ - \,\frac{3}{2}}}} \right) &amp;amp; = 0\\ 15{x^{ - \,\frac{3}{2}}} - 18{x^{ - \,\frac{3}{2}}} + 3{x^{ - \,\frac{3}{2}}} &amp;amp; = 0\\ 0 &amp;amp; = 0\end{align*}\]
&lt;p&gt;So, \(y\left( x \right) = {x^{ - \frac{3}{2}}}\) does satisfy the differential equation and hence is a solution. Why then did we include the condition that \(x &amp;gt; 0\)? We did not use this condition anywhere in the work showing that the function would satisfy the differential equation.&lt;/p&gt;
&lt;p&gt;To see why recall that&lt;/p&gt;
\[y\left( x \right) = {x^{ - \frac{3}{2}}} = \frac{1}{{\sqrt {{x^3}} }}\]
&lt;p&gt;In this form it is clear that we’ll need to avoid \(x = 0\) at the least as this would give division by zero.&lt;/p&gt;
&lt;p&gt;Also, there is a general rule of thumb that we’re going to run with in this class. This rule of thumb is : Start with real numbers, end with real numbers. In other words, if our differential equation only contains real numbers then we don’t want solutions that give complex numbers. So, in order to avoid complex numbers we will also need to avoid negative values of \(x\).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So, we saw in the last example that even though a function may symbolically satisfy a differential equation, because of certain restrictions brought about by the solution we cannot use all values of the independent variable and hence, must make a restriction on the independent variable. This will be the case with many solutions to differential equations.&lt;/p&gt;
&lt;p&gt;In the last example, note that there are in fact many more possible solutions to the differential equation given. For instance, all of the following are also solutions&lt;/p&gt;
\[\begin{align*}y\left( x \right) &amp;amp; = {x^{ - \frac{1}{2}}}\\ y\left( x \right) &amp;amp; = - 9{x^{ - \frac{3}{2}}}\\ y\left( x \right) &amp;amp; = 7{x^{ - \frac{1}{2}}}\\ y\left( x \right) &amp;amp; = - 9{x^{ - \frac{3}{2}}} + 7{x^{ - \frac{1}{2}}}\end{align*}\]
&lt;p&gt;We’ll leave the details to you to check that these are in fact solutions. Given these examples can you come up with any other solutions to the differential equation? There are in fact an infinite number of solutions to this differential equation.&lt;/p&gt;
&lt;p&gt;So, given that there are an infinite number of solutions to the differential equation in the last example (provided you believe us when we say that anyway….) we can ask a natural question. Which is the solution that we want or does it matter which solution we use? This question leads us to the next definition in this section.&lt;/p&gt;

&lt;h4&gt;Initial Condition(s)&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Initial Condition(s)&lt;/strong&gt; are a condition, or set of conditions, on the solution that will allow us to determine which solution that we are after. Initial conditions (often abbreviated i.c.’s when we’re feeling lazy…) are of the form,&lt;/p&gt;
\[y\left( {{t_0}} \right) = {y_0}\hspace{0.25in}{\mbox{and/or }}{y^{\left( k \right)}}\left( {{t_0}} \right) = {y_k}\]
&lt;p&gt;So, in other words, initial conditions are values of the solution and/or its derivative(s) at specific points. As we will see eventually, solutions to “nice enough” differential equations are unique and hence only one solution will meet the given initial conditions.&lt;/p&gt;
&lt;p&gt;The number of initial conditions that are required for a given differential equation will depend upon the order of the differential equation as we will see.&lt;/p&gt;

&lt;div class=&quot;example&quot; readability=&quot;10&quot;&gt;&lt;span class=&quot;example-title&quot;&gt;Example 2&lt;/span&gt; \(y\left( x \right) = {x^{ - \frac{3}{2}}}\) is a solution to \(4{x^2}y'' + 12xy' + 3y = 0\), \(y\left( 4 \right) = \frac{1}{8}\), and \(y'\left( 4 \right) = - \frac{3}{{64}}\).
&lt;div class=&quot;example-content&quot; readability=&quot;35.5&quot;&gt;&lt;span id=&quot;SHLink_Soln2&quot; class=&quot;SH-Link soln-title&quot;&gt;Show Solution&lt;/span&gt; &lt;span id=&quot;SHImg_Soln2&quot; class=&quot;fas fa-caret-right&quot; aria-hidden=&quot;true&quot;/&gt;
&lt;div id=&quot;SHObj_Soln2&quot; class=&quot;soln-content&quot; readability=&quot;41&quot;&gt;
&lt;p&gt;As we saw in previous example the function is a solution and we can then note that&lt;/p&gt;
\[\begin{align*}y\left( 4 \right) &amp;amp; = {4^{ - \frac{3}{2}}} = \frac{1}{{{{\left( {\sqrt 4 } \right)}^3}}} = \frac{1}{8}\\ y'\left( 4 \right) &amp;amp; = - \frac{3}{2}{4^{ - \frac{5}{2}}} = - \frac{3}{2}\frac{1}{{{{\left( {\sqrt 4 } \right)}^5}}} = - \frac{3}{{64}}\end{align*}\]
&lt;p&gt;and so this solution also meets the initial conditions of \(y\left( 4 \right) = \frac{1}{8}\) and \(y'\left( 4 \right) = - \frac{3}{{64}}\). In fact, \(y\left( x \right) = {x^{ - \frac{3}{2}}}\) is the only solution to this differential equation that satisfies these two initial conditions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h4&gt;Initial Value Problem&lt;/h4&gt;
&lt;p&gt;An &lt;strong&gt;Initial Value Problem&lt;/strong&gt; (or &lt;strong&gt;IVP&lt;/strong&gt;) is a differential equation along with an appropriate number of initial conditions.&lt;/p&gt;

&lt;div class=&quot;example&quot; readability=&quot;13&quot;&gt;&lt;span class=&quot;example-title&quot;&gt;Example 3&lt;/span&gt; The following is an IVP.
&lt;p&gt;\[4{x^2}y'' + 12xy' + 3y = 0\hspace{0.25in}y\left( 4 \right) = \frac{1}{8},\,\,\,\,y'\left( 4 \right) = - \frac{3}{{64}}\]&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;example&quot; readability=&quot;14&quot;&gt;&lt;span class=&quot;example-title&quot;&gt;Example 4&lt;/span&gt; Here’s another IVP.
&lt;p&gt;\[2t\,y' + 4y = 3\hspace{0.25in}\,\,\,\,\,\,y\left( 1 \right) = - 4\]&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As we noted earlier the number of initial conditions required will depend on the order of the differential equation.&lt;/p&gt;

&lt;h4&gt;Interval of Validity&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;interval of validity&lt;/strong&gt; for an IVP with initial condition(s)&lt;/p&gt;
\[y\left( {{t_0}} \right) = {y_0}\hspace{0.25in}{\mbox{and/or }}{y^{\left( k \right)}}\left( {{t_0}} \right) = {y_k}\]
&lt;p&gt;is the largest possible interval on which the solution is valid and contains \({t_0}\). These are easy to define, but can be difficult to find, so we’re going to put off saying anything more about these until we get into actually solving differential equations and need the interval of validity.&lt;/p&gt;
&lt;h4&gt;General Solution&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;general solution&lt;/strong&gt; to a differential equation is the most general form that the solution can take and doesn’t take any initial conditions into account.&lt;/p&gt;

&lt;div class=&quot;example&quot; readability=&quot;12&quot;&gt;&lt;span class=&quot;example-title&quot;&gt;Example 5&lt;/span&gt; \(\displaystyle y\left( t \right) = \frac{3}{4} + \frac{c}{{{t^2}}}\) is the general solution to \[2t\,y' + 4y = 3\]
&lt;div class=&quot;example-content&quot; readability=&quot;36&quot;&gt;
&lt;p&gt;We’ll leave it to you to check that this function is in fact a solution to the given differential equation. In fact, all solutions to this differential equation will be in this form. This is one of the first differential equations that you will learn how to solve and you will be able to verify this shortly for yourself.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4&gt;Actual Solution&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;actual solution&lt;/strong&gt; to a differential equation is the specific solution that not only satisfies the differential equation, but also satisfies the given initial condition(s).&lt;/p&gt;

&lt;div class=&quot;example&quot; readability=&quot;15&quot;&gt;&lt;span class=&quot;example-title&quot;&gt;Example 6&lt;/span&gt; What is the actual solution to the following IVP? \[2t\,y' + 4y = 3\hspace{0.25in}\,\,\,\,\,\,y\left( 1 \right) = - 4\]
&lt;div class=&quot;example-content&quot; readability=&quot;38.5&quot;&gt;&lt;span id=&quot;SHLink_Soln6&quot; class=&quot;SH-Link soln-title&quot;&gt;Show Solution&lt;/span&gt; &lt;span id=&quot;SHImg_Soln6&quot; class=&quot;fas fa-caret-right&quot; aria-hidden=&quot;true&quot;/&gt;
&lt;div id=&quot;SHObj_Soln6&quot; class=&quot;soln-content&quot; readability=&quot;47&quot;&gt;
&lt;p&gt;This is actually easier to do than it might at first appear. From the previous example we already know (well that is provided you believe our solution to this example…) that all solutions to the differential equation are of the form.&lt;/p&gt;
\[y\left( t \right) = \frac{3}{4} + \frac{c}{{{t^2}}}\]
&lt;p&gt;All that we need to do is determine the value of \(c\) that will give us the solution that we’re after. To find this all we need do is use our initial condition as follows.&lt;/p&gt;
\[ - 4 = y\left( 1 \right) = \frac{3}{4} + \frac{c}{{{1^2}}}\hspace{0.25in} \Rightarrow \hspace{0.25in}c = - 4 - \frac{3}{4} = - \frac{{19}}{4}\]
&lt;p&gt;So, the actual solution to the IVP is.&lt;/p&gt;
\[y\left( t \right) = \frac{3}{4} - \frac{{19}}{{4{t^2}}}\]&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;From this last example we can see that once we have the general solution to a differential equation finding the actual solution is nothing more than applying the initial condition(s) and solving for the constant(s) that are in the general solution.&lt;/p&gt;

&lt;h4&gt;Implicit/Explicit Solution&lt;/h4&gt;
&lt;p&gt;In this case it’s easier to define an explicit solution, then tell you what an implicit solution isn’t, and then give you an example to show you the difference. So, that’s what we’ll do.&lt;/p&gt;
&lt;p&gt;An &lt;strong&gt;explicit solution&lt;/strong&gt; is any solution that is given in the form \(y = y\left( t \right)\). In other words, the only place that \(y\) actually shows up is once on the left side and only raised to the first power. An &lt;strong&gt;implicit solution&lt;/strong&gt; is any solution that isn’t in explicit form. Note that it is possible to have either general implicit/explicit solutions and actual implicit/explicit solutions.&lt;/p&gt;

&lt;div class=&quot;example&quot; readability=&quot;16.5&quot;&gt;&lt;span class=&quot;example-title&quot;&gt;Example 7&lt;/span&gt; \({y^2} = {t^2} - 3\) is the actual implicit solution to \(y' = \frac{t}{y},\,\,\,\,\,y\left( 2 \right) = - 1\)
&lt;div class=&quot;example-content&quot; readability=&quot;35&quot;&gt;
&lt;p&gt;At this point we will ask that you trust us that this is in fact a solution to the differential equation. You will learn how to get this solution in a later section. The point of this example is that since there is a \({y^2}\) on the left side instead of a single \(y\left( t \right)\)this is not an explicit solution!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;example&quot; readability=&quot;13&quot;&gt;&lt;span class=&quot;example-title&quot;&gt;Example 8&lt;/span&gt; Find an actual explicit solution to \(y' = \frac{t}{y},\,\,\,\,\,y\left( 2 \right) = - 1\).
&lt;div class=&quot;example-content&quot; readability=&quot;37.5&quot;&gt;&lt;span id=&quot;SHLink_Soln8&quot; class=&quot;SH-Link soln-title&quot;&gt;Show Solution&lt;/span&gt; &lt;span id=&quot;SHImg_Soln8&quot; class=&quot;fas fa-caret-right&quot; aria-hidden=&quot;true&quot;/&gt;
&lt;div id=&quot;SHObj_Soln8&quot; class=&quot;soln-content&quot; readability=&quot;45&quot;&gt;
&lt;p&gt;We already know from the previous example that an implicit solution to this IVP is \({y^2} = {t^2} - 3\). To find the explicit solution all we need to do is solve for \(y\left( t \right)\).&lt;/p&gt;
\[y\left( t \right) = \pm \sqrt {{t^2} - 3} \]
&lt;p&gt;Now, we’ve got a problem here. There are two functions here and we only want one and in fact only one will be correct! We can determine the correct function by reapplying the initial condition. Only one of them will satisfy the initial condition.&lt;/p&gt;
&lt;p&gt;In this case we can see that the “-“ solution will be the correct one. The actual explicit solution is then&lt;/p&gt;
\[y\left( t \right) = - \sqrt {{t^2} - 3} \]&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In this case we were able to find an explicit solution to the differential equation. It should be noted however that it will not always be possible to find an explicit solution.&lt;/p&gt;
&lt;p&gt;Also, note that in this case we were only able to get the explicit actual solution because we had the initial condition to help us determine which of the two functions would be the correct solution.&lt;/p&gt;
&lt;p&gt;We’ve now gotten most of the basic definitions out of the way and so we can move onto other topics.&lt;/p&gt;
</description>
<pubDate>Wed, 10 Oct 2018 06:13:28 +0000</pubDate>
<dc:creator>peter_d_sherman</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://tutorial.math.lamar.edu/Classes/DE/Definitions.aspx</dc:identifier>
</item>
<item>
<title>Brief aerobic exercise immediately enhances attention and perceptual speed</title>
<link>https://www.sciencedirect.com/science/article/pii/S0001691817301336</link>
<guid isPermaLink="true" >https://www.sciencedirect.com/science/article/pii/S0001691817301336</guid>
<description>&lt;article class=&quot;col-lg-12 col-md-16 pad-left pad-right&quot; role=&quot;main&quot; lang=&quot;en&quot; readability=&quot;5.1188118811881&quot;&gt;&lt;noscript readability=&quot;3&quot;&gt;
&lt;p&gt;JavaScript is disabled on your browser. Please enable JavaScript to use all the features on this page.&lt;/p&gt;
&lt;/noscript&gt;




&lt;section class=&quot;ReferencedArticles&quot;/&gt;&lt;section class=&quot;ReferencedArticles&quot;/&gt;
&lt;div class=&quot;Abstracts&quot; id=&quot;abstracts&quot;&gt;
&lt;div class=&quot;abstract author-highlights&quot; id=&quot;ab0010&quot; lang=&quot;en&quot;&gt;
&lt;h2 class=&quot;section-title&quot;&gt;Highlights&lt;/h2&gt;
&lt;div id=&quot;as0010&quot;&gt;

&lt;dl class=&quot;list&quot; readability=&quot;2.5&quot;&gt;&lt;dt class=&quot;list-label&quot;&gt;•&lt;/dt&gt;
&lt;dd class=&quot;list-description&quot; readability=&quot;-1&quot;&gt;
&lt;p id=&quot;p0005&quot;&gt;Acute exercise is thought to facilitate cognitive processes by replenishing energy levels.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;list-label&quot;&gt;•&lt;/dt&gt;
&lt;dd class=&quot;list-description&quot; readability=&quot;0&quot;&gt;
&lt;p id=&quot;p0010&quot;&gt;Various cognitive performances were measured before and following 15 min of exercise vs. relaxation/concentration.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;list-label&quot;&gt;•&lt;/dt&gt;
&lt;dd class=&quot;list-description&quot; readability=&quot;-1&quot;&gt;
&lt;p id=&quot;p0015&quot;&gt;Pre- to post-intervention changes in feelings of energy were also assessed in each group.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;list-label&quot;&gt;•&lt;/dt&gt;
&lt;dd class=&quot;list-description&quot; readability=&quot;-1&quot;&gt;
&lt;p id=&quot;p0020&quot;&gt;Significantly differences were found for cognitive processing speed.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;list-label&quot;&gt;•&lt;/dt&gt;
&lt;dd class=&quot;list-description&quot; readability=&quot;-1&quot;&gt;
&lt;p id=&quot;p0025&quot;&gt;These differences were fully mediated by changes in feelings of energy.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;abstract author&quot; id=&quot;ab0005&quot; lang=&quot;en&quot; readability=&quot;11.5&quot;&gt;
&lt;h2 class=&quot;section-title&quot;&gt;Abstract&lt;/h2&gt;
&lt;div id=&quot;as0005&quot; readability=&quot;18&quot;&gt;
&lt;p id=&quot;sp0030&quot;&gt;While the effects of acute exercise on mood and cognitive functions have been separately documented over the last decade, recent findings have pointed to a possible connection between affective responses to exercise and cognitive performance. The main objective of this study was to test whether the effects of acute exercise on cognition were mediated by changes in feelings of energy. One-hundred-and-one undergraduate students were randomized into one of two experimental conditions: 15 min of jogging at “moderate” intensity, or 15 min of relaxation/concentration (control condition). Perceptual speed, visual attentional control, working memory, and cognitive flexibility were assessed pre- and post-intervention in both groups via the Trail Making Test. Self-rated feelings of energy were also recorded pre- and post-intervention. Only completion time for the TMT-A significantly improved from pre- to post-intervention in participants who exercised compared with participants who practiced relaxation/concentration. No Group × Time interaction was found with regard to the other TMT variables. Finally, changes in feelings of energy were found to fully mediate the relationship between exercise and perceptual speed/visual attentional control. Taken together, our data suggest that a brief bout of moderate intensity exercise can improve the efficiency of certain cognitive processes through increases in feelings of energy, but further research is required to evaluate the duration of benefits and to determine whether these apply to other populations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul id=&quot;issue-navigation&quot; class=&quot;issue-navigation u-margin-s-bottom u-bg-grey1&quot;&gt;&lt;li class=&quot;previous move-left u-padding-s-ver u-padding-s-left&quot;&gt;&lt;button class=&quot;button-alternative button-alternative-tertiary&quot; disabled=&quot;disabled&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;button-alternative-text&quot;&gt;&lt;strong&gt;Previous&lt;/strong&gt;  &lt;/span&gt;&lt;/button&gt;&lt;/li&gt;
&lt;li class=&quot;next move-right u-padding-s-ver u-padding-s-right&quot;&gt;&lt;button class=&quot;button-alternative button-alternative-tertiary&quot; disabled=&quot;disabled&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;button-alternative-text&quot;&gt;&lt;strong&gt;Next&lt;/strong&gt;  &lt;/span&gt;&lt;/button&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;Keywords&quot;&gt;
&lt;div id=&quot;ks0005&quot; class=&quot;keywords-section&quot;&gt;
&lt;h2 class=&quot;section-title&quot;&gt;Keywords&lt;/h2&gt;
&lt;p&gt;&lt;span id=&quot;tx0010&quot;&gt;Acute aerobic exercise&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;tx0015&quot;&gt;Feelings of energy&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;tx0020&quot;&gt;Cognitive functions&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;button class=&quot;button button-anchor&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;button-text&quot;&gt;Recommended articles&lt;/span&gt;&lt;/button&gt;&lt;button class=&quot;button button-anchor&quot; disabled=&quot;disabled&quot; type=&quot;button&quot;&gt;&lt;span class=&quot;button-text&quot;&gt;Citing articles (0)&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;copyright-line&quot;&gt;© 2018 Elsevier B.V. All rights reserved.&lt;/span&gt;&lt;/p&gt;
&lt;/article&gt;&lt;div class=&quot;u-show-from-md col-lg-6 col-md-8 pad-right&quot;&gt;
&lt;aside class=&quot;RelatedContent&quot; aria-label=&quot;Related content&quot;&gt;&lt;section class=&quot;SidePanel&quot;&gt;&lt;header id=&quot;recommended-articles-header&quot; class=&quot;side-panel-header&quot;&gt;&lt;button class=&quot;button-link side-panel-toggle is-up button-link-primary&quot; aria-expanded=&quot;true&quot; type=&quot;button&quot;&gt;
&lt;h2 class=&quot;section-title&quot;&gt;&lt;span class=&quot;button-link-text&quot;&gt;Recommended articles&lt;/span&gt;&lt;/h2&gt;
&lt;/button&gt;&lt;/header&gt;&lt;div class=&quot;&quot; aria-hidden=&quot;false&quot; aria-describedby=&quot;recommended-articles-header&quot;&gt;
&lt;p&gt;&lt;span class=&quot;size-m&quot;&gt;No articles found.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section class=&quot;SidePanel&quot;&gt;&lt;header id=&quot;citing-articles-header&quot; class=&quot;side-panel-header&quot;&gt;&lt;h2 class=&quot;section-title&quot;&gt;Citing articles&lt;/h2&gt;
&lt;/header&gt;
&lt;/section&gt;&lt;section class=&quot;SidePanel hidden&quot;&gt;
&lt;/section&gt;&lt;/aside&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 10 Oct 2018 04:43:33 +0000</pubDate>
<dc:creator>laurex</dc:creator>
<og:description>While the effects of acute exercise on mood and cognitive functions have been separately documented over the last decade, recent findings have pointed…</og:description>
<og:image>https://ars.els-cdn.com/content/image/S00016918.gif</og:image>
<og:title>Brief aerobic exercise immediately enhances visual attentional control and perceptual speed. Testing the mediating role of feelings of energy</og:title>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.sciencedirect.com/science/article/pii/S0001691817301336</dc:identifier>
</item>
<item>
<title>Leaked Google briefing, admitting a “shift towards censorship”</title>
<link>https://www.scribd.com/document/390521673/The-Good-Censor-GOOGLE-LEAK</link>
<guid isPermaLink="true" >https://www.scribd.com/document/390521673/The-Good-Censor-GOOGLE-LEAK</guid>
<description> 
&lt;p&gt;&lt;span class=&quot;a&quot;&gt;// Insights Lab&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;a&quot;&gt;Can Google protect&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;free-speech&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;a&quot;&gt;and &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;a&quot;&gt; police&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;harmful content?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;a&quot;&gt;From elections and political propaganda, trolls and gendered&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;bigotry, to hate speech and religious extremism,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;a&quot;&gt;debates&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;about who can and should be heard on the internet rage like&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;never before.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;a&quot;&gt; As governments struggle to apply existing&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;legislation to the Wild West online,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;a&quot;&gt;users are asking if the&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;openness of the internet should be celebrated after all.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;a&quot;&gt;Bots and troll farms lash out at free thought and controversial&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;opinion, while faceless users attack each other without&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;empathy.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;a&quot;&gt;Free speech becomes a social, economic and&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;political weapon.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;a&quot;&gt; Automated technologies lack the&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;sophistication to adjudicate effectively. In response, people&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;think twice before airing their thoughts aloud, while critique is&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;buried under avalanches of automated rebuttals, vitriolic&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;attacks and nonsensical rhetoric.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;a&quot;&gt;As the tech firms struggle&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;to deal with the issues, the public and governments grow&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;increasingly impatient.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;a&quot;&gt; &lt;/span&gt;&lt;span class=&quot;a&quot;&gt;Yet, amongst all this negativity, seeds of political harmony,&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;gender and racial equality, and tolerance are sown on the&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;internet.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;a&quot;&gt;Is it possible to have an open and inclusive internet&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;a&quot;&gt; &lt;/span&gt;&lt;span class=&quot;a&quot;&gt;while simultaneously limiting political oppression and&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;despotism, hate, violence and harassment?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;a&quot;&gt;Who should be&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;responsible for censoring ‘unwanted’ conversation, anyway?&lt;/span&gt; &lt;span class=&quot;a&quot;&gt;Governments? Users? Google?&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 10 Oct 2018 03:08:15 +0000</pubDate>
<dc:creator>freedomben</dc:creator>
<og:title>The Good Censor - GOOGLE LEAK | Facebook | Censorship</og:title>
<og:type>scribd-com:document</og:type>
<og:url>https://www.scribd.com/document/390521673/The-Good-Censor-GOOGLE-LEAK</og:url>
<og:description>A leaked Google briefing in which the company admits a &quot;shift towards censorship&quot; in Silicon Valley.</og:description>
<og:image>https://imgv2-2-f.scribdassets.com/img/document/390521673/original/03cfc7605f/1539132956?v=1</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.scribd.com/document/390521673/The-Good-Censor-GOOGLE-LEAK</dc:identifier>
</item>
<item>
<title>Ask HN: What can be done to prevent a climate catastrophe?</title>
<link>https://news.ycombinator.com/item?id=18181503</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=18181503</guid>
<description>&lt;tr readability=&quot;0.55737704918033&quot;&gt;&lt;td bgcolor=&quot;#FF6600&quot;&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5.0642954856361&quot;&gt;&lt;td&gt;
&lt;table class=&quot;fatitem&quot; border=&quot;0&quot; readability=&quot;4.2202462380301&quot;&gt;&lt;tr class=&quot;athing&quot; id=&quot;18181503&quot; readability=&quot;0&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; class=&quot;title&quot;/&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;title&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=18181503&quot; class=&quot;storylink&quot;&gt;Ask HN: What can be done to prevent a climate catastrophe?&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0.69767441860465&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td class=&quot;subtext&quot;&gt;&lt;span class=&quot;score&quot; id=&quot;score_18181503&quot;&gt;303 points&lt;/span&gt; by &lt;a href=&quot;https://news.ycombinator.com/user?id=andrewstuart&quot; class=&quot;hnuser&quot;&gt;andrewstuart&lt;/a&gt; &lt;span class=&quot;age&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=18181503&quot;&gt;21 hours ago&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;unv_18181503&quot;/&gt; | &lt;a href=&quot;https://news.ycombinator.com/hide?id=18181503&amp;amp;goto=item%3Fid%3D18181503&quot;&gt;hide&lt;/a&gt; | &lt;a href=&quot;https://hn.algolia.com/?query=Ask%20HN%3A%20What%20can%20be%20done%20to%20prevent%20a%20climate%20catastrophe%3F&amp;amp;sort=byDate&amp;amp;dateRange=all&amp;amp;type=story&amp;amp;storyText=false&amp;amp;prefix&amp;amp;page=0&quot; class=&quot;hnpast&quot;&gt;past&lt;/a&gt; | &lt;a href=&quot;https://www.google.com/search?q=Ask%20HN%3A%20What%20can%20be%20done%20to%20prevent%20a%20climate%20catastrophe%3F&quot;&gt;web&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/fave?id=18181503&amp;amp;auth=cd9508d9866cd8278e5d00dd1eeb9e922d4a54ee&quot;&gt;favorite&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/item?id=18181503&quot;&gt;459 comments&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;11.5&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td readability=&quot;14&quot;&gt;It seems to me that governments can be counted out of taking the leadership needed to solve this within 12 years. If anything they seem to want to act against solving this issue in some cases.
&lt;p&gt;So what can we do so our children don't live in some ghastly hothouse world?&lt;/p&gt;
&lt;p&gt;The scientists have told us its our final chance.... not to start within 12 years, but solve it within 12 years.&lt;/p&gt;
&lt;p&gt;I feel like the young people need to take charge of the world because the older generations have had their chance and not fixed it.&lt;/p&gt;
&lt;p&gt;Maybe corporations are the ones who can be pressured to take the lead.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1&quot;&gt;&lt;td&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;10&quot; width=&quot;0&quot;/&gt;&lt;br/&gt;&lt;center&gt;&lt;span class=&quot;yclinks&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/newsguidelines.html&quot;&gt;Guidelines&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/newsfaq.html&quot;&gt;FAQ&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Support&lt;/a&gt; | &lt;a href=&quot;https://github.com/HackerNews/API&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/security.html&quot;&gt;Security&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/lists&quot;&gt;Lists&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/bookmarklet.html&quot; rel=&quot;nofollow&quot;&gt;Bookmarklet&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/legal/&quot;&gt;Legal&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/apply/&quot;&gt;Apply to YC&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Contact&lt;/a&gt;&lt;/span&gt;
&lt;/center&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Wed, 10 Oct 2018 02:25:12 +0000</pubDate>
<dc:creator>andrewstuart</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=18181503</dc:identifier>
</item>
<item>
<title>Choosing to stay out of the community</title>
<link>http://rachelbythebay.com/w/2018/10/09/moat/</link>
<guid isPermaLink="true" >http://rachelbythebay.com/w/2018/10/09/moat/</guid>
<description>&lt;p&gt;In the past couple of weeks, there's been a lot of commotion in the open source / free software world about codes of conduct and specific people (Linus) and specific projects (Linux) and so on. This is a thing now, that is a thing now, this is good, this is bad, we're pulling our code, you're a bad person, you're a this, you're a that. We don't like you, all of you are this way, none of you are that way. We're being attacked, we don't attack, blah blah blah blah blah.&lt;/p&gt;
&lt;p&gt;In that vein, I received a question from Peter who writes...&lt;/p&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;I have with great interest for many years been reading about your experiences with, and thoughts on corporate culture.&lt;/p&gt;
&lt;p&gt;The Linux kernel community is now going through a cultural change, which I have my own conflicting thoughts about. I would like to hear your opinion on this matter, if you think that you have the time, and something interesting to say about it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;... and there are links to the lkml posts about Linus going on a break, and all of that stuff. Everything you've already heard about on HN and/or your favorite this-leaning or that-leaning web site.&lt;/p&gt;
&lt;p&gt;This is a legitimate question, and I have an answer, but I don't think many people are going to like it.&lt;/p&gt;
&lt;p&gt;My response to this is to say &quot;wow, look at how screwed up these communities are&quot;, and then tag on &quot;just like I always suspected&quot;, and then finally I add &quot;and that reinforces my decision to &lt;em&gt;stay out of them&lt;/em&gt;&quot;.&lt;/p&gt;
&lt;p&gt;So, okay, what does that mean in practice? I wrote a really horrible utility that Should Not Exist at a former employer. Some folks there wanted to open source it. (Why they didn't attack the root cause instead of investing in this horrible thing is a story for another time). I did not want to deal with the community, and the things which would come from opening it up. So, I didn't put any effort into it, and it didn't happen under my tenure.&lt;/p&gt;
&lt;p&gt;I've felt this way for a long time, and I still do, and apparently have no reason to change. My take on it is, and has been: if the community is so toxic, then it can operate without some of us.&lt;/p&gt;
&lt;p&gt;Really, I'm not just making this up here on the fly. I have actual &lt;a href=&quot;http://rachelbythebay.com/w/2013/06/03/bugs/&quot;&gt;written proof&lt;/a&gt; in a post of mine from June 2013.&lt;/p&gt;
&lt;p&gt;Notice this part:&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;While it's probably true that the dictator &lt;em&gt;does&lt;/em&gt; suck at design, the talented user wants no part of the drama which would follow such a report. There is absolutely no benefit to lighting that particular fuse. And so, the problem is never reported, and the patch is never conveyed upstream. It effectively becomes a private fork limited to the talented user's systems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I wrote that as a cautionary tale those 5 years ago, but it was actually me describing &lt;em&gt;what I was already doing&lt;/em&gt;. And, guess what, I'm still going to be doing it. Grab it, fork it locally, fix it locally, and share fixes with a few trusted individuals who have been invited to participate in the system.&lt;/p&gt;
&lt;p&gt;Does this help the community? Nope. Wasted effort abounds.&lt;/p&gt;
&lt;p&gt;I'm here to remind everyone of that post, and to point out that I'm not the only one doing this. There could be an entire &quot;shadow ecosystem&quot; of invite-only source repos being shared among friends who are responsible for those they invite, including possibly having whole &quot;trees&quot; pruned if they turn out to be troublesome.&lt;/p&gt;
&lt;p&gt;What's funny is that my friends in the know tell me this is how private warez torrent sites work: you invite someone, and now you're responsible for their behavior. If they mess up, you deal with them, or you might be out, too.&lt;/p&gt;
&lt;p&gt;How do you fix this? I don't think you do. Be a good person and you will be invited to a private/secret repository. Continue to be reasonable and respectful to those who are part of it and you can maintain your access.&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;While I have your attention, I want to try to explain some terms I use in the real world, and specifically the difference between them.&lt;/p&gt;
&lt;p&gt;The notion of &quot;Vegas rules&quot; is inspired by their marketing schtick of &quot;what happens in (Las) Vegas stays in (Las) Vegas&quot;. Basically, it's what you apply to a meeting or project or whatever when the actual discussions are private, but the fact that the meeting occurred &lt;em&gt;is not&lt;/em&gt;. People know that Las Vegas exists. That's not the secret. The secret is what happens there, as the line goes.&lt;/p&gt;
&lt;p&gt;So, then, contrast that with this.&lt;/p&gt;
&lt;p&gt;&quot;Fight Club rules&quot;, then, are inspired by the movie, in which a bunch of people get together and do things but don't even acknowledge it exists the rest of the time. It encompasses the &quot;private discussions&quot; angle of &quot;Vegas rules&quot;, but it also goes a step beyond that to indicate that the event, venue, project, tool, or whatever is itself not to be discussed.&lt;/p&gt;
&lt;p&gt;The private/secret repos I'm talking about? They're probably operating under Fight Club rules. If you aren't plugged in, they don't even exist as far as you are concerned. You don't even know you're missing out.&lt;/p&gt;
&lt;p&gt;I think I'm okay with that.&lt;/p&gt;
</description>
<pubDate>Wed, 10 Oct 2018 01:53:51 +0000</pubDate>
<dc:creator>pulisse</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://rachelbythebay.com/w/2018/10/09/moat/</dc:identifier>
</item>
<item>
<title>Memory Allocators 101 – Write a simple memory allocator (2016)</title>
<link>https://arjunsreedharan.org/post/148675821737/memory-allocators-101</link>
<guid isPermaLink="true" >https://arjunsreedharan.org/post/148675821737/memory-allocators-101</guid>
<description>&lt;p&gt;Code related to this article: &lt;a href=&quot;https://t.umblr.com/redirect?z=%2F%2Fgithub.com%2Farjun024%2Fmemalloc&amp;amp;t=ZTllYzkzOTgzZDhjM2EwNTJhMmE2NDM1MjllM2RhN2U0ZWZjOGI5ZCxGcHpyWHZINg%3D%3D&amp;amp;b=t%3AlMu0rOs9jGwbQo_qiwGh_A&amp;amp;p=https%3A%2F%2Farjunsreedharan.org%2Fpost%2F148675821737%2Fmemory-allocators-101-write-a-simple-memory&amp;amp;m=1&quot; data-href=&quot;//github.com/arjun024/memalloc&quot; target=&quot;_blank&quot;&gt;github.com/arjun024/memalloc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This article is about writing a simple memory allocator in C.&lt;br/&gt;We will implement &lt;a href=&quot;https://t.umblr.com/redirect?z=http%3A%2F%2Fman7.org%2Flinux%2Fman-pages%2Fman3%2Ffree.3.html&amp;amp;t=M2EzY2U0ZGRhYjBhNjA3Y2U4NDczMjc3ZTg1ZWQxMjI3MWJjNzZjNixGcHpyWHZINg%3D%3D&amp;amp;b=t%3AlMu0rOs9jGwbQo_qiwGh_A&amp;amp;p=https%3A%2F%2Farjunsreedharan.org%2Fpost%2F148675821737%2Fmemory-allocators-101-write-a-simple-memory&amp;amp;m=1&quot; target=&quot;_blank&quot; data-href=&quot;http://man7.org/linux/man-pages/man3/free.3.html&quot;&gt;malloc()&lt;/a&gt;, &lt;a href=&quot;https://t.umblr.com/redirect?z=http%3A%2F%2Fman7.org%2Flinux%2Fman-pages%2Fman3%2Ffree.3.html&amp;amp;t=M2EzY2U0ZGRhYjBhNjA3Y2U4NDczMjc3ZTg1ZWQxMjI3MWJjNzZjNixGcHpyWHZINg%3D%3D&amp;amp;b=t%3AlMu0rOs9jGwbQo_qiwGh_A&amp;amp;p=https%3A%2F%2Farjunsreedharan.org%2Fpost%2F148675821737%2Fmemory-allocators-101-write-a-simple-memory&amp;amp;m=1&quot; target=&quot;_blank&quot; data-href=&quot;http://man7.org/linux/man-pages/man3/free.3.html&quot;&gt;calloc()&lt;/a&gt;, &lt;a href=&quot;https://t.umblr.com/redirect?z=http%3A%2F%2Fman7.org%2Flinux%2Fman-pages%2Fman3%2Ffree.3.html&amp;amp;t=M2EzY2U0ZGRhYjBhNjA3Y2U4NDczMjc3ZTg1ZWQxMjI3MWJjNzZjNixGcHpyWHZINg%3D%3D&amp;amp;b=t%3AlMu0rOs9jGwbQo_qiwGh_A&amp;amp;p=https%3A%2F%2Farjunsreedharan.org%2Fpost%2F148675821737%2Fmemory-allocators-101-write-a-simple-memory&amp;amp;m=1&quot; target=&quot;_blank&quot; data-href=&quot;http://man7.org/linux/man-pages/man3/free.3.html&quot;&gt;realloc()&lt;/a&gt; and &lt;a href=&quot;https://t.umblr.com/redirect?z=http%3A%2F%2Fman7.org%2Flinux%2Fman-pages%2Fman3%2Ffree.3.html&amp;amp;t=M2EzY2U0ZGRhYjBhNjA3Y2U4NDczMjc3ZTg1ZWQxMjI3MWJjNzZjNixGcHpyWHZINg%3D%3D&amp;amp;b=t%3AlMu0rOs9jGwbQo_qiwGh_A&amp;amp;p=https%3A%2F%2Farjunsreedharan.org%2Fpost%2F148675821737%2Fmemory-allocators-101-write-a-simple-memory&amp;amp;m=1&quot; target=&quot;_blank&quot; data-href=&quot;http://man7.org/linux/man-pages/man3/free.3.html&quot;&gt;free()&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a beginner level article, so I will not spell out every detail.&lt;br/&gt;This memory allocator will not be fast and efficient, we will not adjust allocated memory to align to a page boundary, but we will build a memory allocator that works. That’s it.&lt;/p&gt;
&lt;p&gt;If you want to take a look at the code in full, take a look at my github repo &lt;a href=&quot;https://t.umblr.com/redirect?z=%2F%2Fgithub.com%2Farjun024%2Fmemalloc&amp;amp;t=ZTllYzkzOTgzZDhjM2EwNTJhMmE2NDM1MjllM2RhN2U0ZWZjOGI5ZCxGcHpyWHZINg%3D%3D&amp;amp;b=t%3AlMu0rOs9jGwbQo_qiwGh_A&amp;amp;p=https%3A%2F%2Farjunsreedharan.org%2Fpost%2F148675821737%2Fmemory-allocators-101-write-a-simple-memory&amp;amp;m=1&quot; target=&quot;_blank&quot; data-href=&quot;//github.com/arjun024/memalloc&quot;&gt;memalloc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before we get into building the memory allocator, you need to be familiar with the memory layout of a program. A process runs within its own virtual address space that’s distinct from the virtual address spaces of other processes. This virtual address space typically comprises of 5 sections:&lt;/p&gt;
&lt;strong&gt;Text section&lt;/strong&gt;: The part that contains the binary instructions to be executed by the processor.&lt;br/&gt;&lt;strong&gt;Data section&lt;/strong&gt;: Contains non-zero initialized static data.&lt;br/&gt;&lt;strong&gt;BSS&lt;/strong&gt; (Block Started by Symbol) : Contains zero-initialized static data. Static data uninitialized in program is initialized 0 and goes here.&lt;br/&gt;&lt;strong&gt;Heap&lt;/strong&gt;: Contains the dynamically allocated data.&lt;br/&gt;&lt;strong&gt;Stack&lt;/strong&gt;: Contains your automatic variables, function arguments, copy of base pointer etc. &lt;img src=&quot;https://static.tumblr.com/gltvynn/tHIobhrb5/memlayout.jpg&quot; alt=&quot;Memory layout&quot;/&gt;&lt;p&gt;As you can see in the image, the stack and the heap grow in the opposite directions.&lt;br/&gt;Sometimes the data, bss and heap sections are collectively referred to as the “&lt;em&gt;data segment&lt;/em&gt;”,&lt;br/&gt;the end of which is demarcated by a pointer named program break or &lt;strong&gt;brk&lt;/strong&gt;.&lt;br/&gt;That is, &lt;em&gt;brk&lt;/em&gt; points to the end of the heap.&lt;/p&gt;
&lt;p&gt;Now if we want to allocate more memory in the heap, we need to request the system to increment brk. Similarly, to release memory we need to request the system to decrement &lt;em&gt;brk&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Assuming we run Linux (or a Unix-like system), we can make use of &lt;code&gt;sbrk()&lt;/code&gt; system call that lets us manipulate the program break.&lt;/p&gt;
&lt;p&gt;Calling &lt;code&gt;sbrk(0)&lt;/code&gt; gives the current address of program break.&lt;br/&gt;Calling &lt;code&gt;sbrk(x)&lt;/code&gt; with a positive value increments brk by x bytes, as a result allocating memory.&lt;br/&gt;Calling &lt;code&gt;sbrk(-x)&lt;/code&gt; with a negative value decrements brk by x bytes, as a result releasing memory.&lt;br/&gt;On failure, sbrk() returns &lt;code&gt;(void*) -1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To be honest, sbrk() is not our best buddy in 2016. There are better alternatives like &lt;em&gt;mmap()&lt;/em&gt; available today. sbrk() is not really thread safe. It can can only grow or shrink in LIFO order.&lt;br/&gt;If you do a &lt;code&gt;man 2 sbrk&lt;/code&gt; on your macbook, it will tell you:&lt;br/&gt;&lt;/p&gt;
&lt;pre class=&quot;prettyprint lang-bsh&quot;&gt;
The brk and sbrk functions are historical curiosities left over from earlier days before the advent of virtual memory management.
&lt;/pre&gt;
&lt;p&gt;However, the glibc implementation of malloc still uses sbrk() for allocating memory that’s not too big in size.&lt;sup&gt;[1]&lt;/sup&gt;&lt;br/&gt;So, we will go ahead with sbrk() for our simple memory allocator.&lt;/p&gt;
&lt;h3&gt;malloc()&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;malloc(size)&lt;/em&gt; function allocates &lt;em&gt;size&lt;/em&gt; bytes of memory and returns a pointer to the allocated memory.&lt;br/&gt;Our simple malloc will look like:&lt;/p&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
void *malloc(size_t size)
{
        void *block;
        block = sbrk(size);
        if (block == (void*) -1)
                return NULL;
        return block;
}
&lt;/pre&gt;
&lt;p&gt;In the above code, we call sbrk() with the given size.&lt;br/&gt;On success, &lt;em&gt;size&lt;/em&gt; bytes are allocated on the heap.&lt;br/&gt;That was easy. Wasn’t it?&lt;/p&gt;
&lt;p&gt;The tricky part is freeing this memory.&lt;br/&gt;The &lt;em&gt;free(ptr)&lt;/em&gt; function frees the memory block pointed to by ptr, which must have been returned by a previous call to malloc(), calloc() or realloc().&lt;br/&gt;But to free a block of memory, the first order of business is to know the size of the memory block to be freed. In the current scheme of things, this is not possible as the size information is not stored anywhere. So, we will have to find a way to store the size of an allocated block somewhere.&lt;/p&gt;
&lt;p&gt;Moreover, we need to understand that the heap memory the operating system has provided is contiguous. So we can only release memory which is at the end of the heap. We can’t release a block of memory in the middle to the OS. Imagine your heap to be something like a long loaf of bread that you can stretch and shrink at one end, but you have to keep it in one piece.&lt;br/&gt;To address this issue of not being able to release memory that’s not at the end of the heap, we will make a distinction between freeing memory and releasing memory.&lt;br/&gt;From now on, freeing a block of memory does not necessarily mean we release memory back to OS. It just means that we keep the block marked as free. This block marked as free may be reused on a later malloc() call. Since memory not at the end of the heap can’t be released, this is the only way ahead for us.&lt;/p&gt;
&lt;p&gt;So now, we have two things to store for every block of allocated memory:&lt;br/&gt;    1. size&lt;br/&gt;    2. Whether a block is free or not-free?&lt;/p&gt;
&lt;p&gt;To store this information, we will add a header to every newly allocated memory block.&lt;br/&gt;The header will look something like this:&lt;/p&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
struct header_t {
        size_t size;
        unsigned is_free;
};
&lt;/pre&gt;
&lt;p&gt;The idea is simple. When a program requests for &lt;em&gt;size&lt;/em&gt; bytes of memory, we calculate &lt;code&gt;total_size = header_size + size&lt;/code&gt;, and call &lt;code&gt;sbrk(total_size)&lt;/code&gt;. We use this memory space returned by sbrk() to fit in both the header and the actual memory block. The header is internally managed, and is kept completely hidden from the calling program.&lt;/p&gt;
&lt;p&gt;Now, each one of our memory blocks will look like:&lt;br/&gt;&lt;img src=&quot;https://static.tumblr.com/gltvynn/2YZobhtak/node.png&quot; width=&quot;50%&quot; alt=&quot;memory block with header&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We can’t be completely sure the blocks of memory allocated by our malloc is contiguous. Imagine the calling program has a foreign sbrk(), or there’s a section of memory &lt;em&gt;mmap()&lt;/em&gt;ed in between our memory blocks. We also need a way to traverse through our blocks for memory (why traverse? we will get to know when we look at the implementation of &lt;em&gt;free()&lt;/em&gt;). So to keep track of the memory allocated by our malloc, we will put them in a linked list. Our header will now look like:&lt;/p&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
struct header_t {
        size_t size;
        unsigned is_free;
        struct header_t *next;
};
&lt;/pre&gt;
&lt;p&gt;and the linked list of memory blocks like this:&lt;/p&gt;
&lt;img src=&quot;https://static.tumblr.com/gltvynn/hjcobhtc6/nodes.png&quot; alt=&quot;linked list of memory blocks&quot;/&gt;&lt;p&gt;We will have a head and tail pointer to keep track of the list.&lt;/p&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
struct header_t *head, *tail;
&lt;/pre&gt;
&lt;p&gt;To prevent two or more threads from concurrently accessing memory, we will put a basic locking mechanism in place.&lt;/p&gt;
&lt;p&gt;We’ll have a global lock, and before every action on memory you have to acquire the lock, and once you are done you have to release the lock.&lt;/p&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
pthread_mutex_t global_malloc_lock;
&lt;/pre&gt;
&lt;p&gt;Our malloc is now modified to:&lt;/p&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
void *malloc(size_t size)
{
        size_t total_size;
        void *block;
        struct header_t *header;
        if (!size)
                return NULL;
        pthread_mutex_lock(&amp;amp;global_malloc_lock);
        header = get_free_block(size);
        if (header) {
                header-&amp;gt;is_free = 0;
                pthread_mutex_unlock(&amp;amp;global_malloc_lock);
                return (void*)(header + 1);
        }
        total_size = sizeof(struct header_t) + size;
        block = sbrk(total_size);
        if (block == (void*) -1) {
                pthread_mutex_unlock(&amp;amp;global_malloc_lock);
                return NULL;
        }
        header = block;
        header-&amp;gt;size = size;
        header-&amp;gt;is_free = 0;
        header-&amp;gt;next = NULL;
        if (!head)
                head = header;
        if (tail)
                tail-&amp;gt;next = header;
        tail = header;
        pthread_mutex_unlock(&amp;amp;global_malloc_lock);
        return (void*)(header + 1);
}

struct header_t *get_free_block(size_t size)
{
        struct header_t *curr = head;
        while(curr) {
                if (curr-&amp;gt;is_free &amp;amp;&amp;amp; curr-&amp;gt;size &amp;gt;= size)
                        return curr;
                curr = curr-&amp;gt;next;
        }
        return NULL;
}
&lt;/pre&gt;
&lt;p&gt;Let me explain the code:&lt;/p&gt;
&lt;p&gt;We check if the requested size is zero. If it is, then we return &lt;code&gt;NULL&lt;/code&gt;.&lt;br/&gt;For a valid size, we first acquire the lock. The we call &lt;code&gt;get_free_block()&lt;/code&gt; - it traverses the linked list and see if there already exist a block of memory that is marked as free and can accomodate the given size. Here, we take a first-fit approach in searching the linked list.&lt;/p&gt;
&lt;p&gt;If a sufficiently large free block is found, we will simply mark that block as not-free, release the global lock, and then return a pointer to that block. In such a case, the &lt;em&gt;header&lt;/em&gt; pointer will refer to the header part of the block of memory we just found by traversing the list. Remember, we have to hide the very existence of the header to an outside party. When we do &lt;code&gt;(header + 1)&lt;/code&gt;, it points to the byte right after the end of the header. This is incidentally also the first byte of the actual memory block, the one the caller is interested in. This is cast to &lt;code&gt;(void*)&lt;/code&gt; and returned.&lt;/p&gt;
&lt;p&gt;If we have not found a sufficiently large free block, then we have to extend the heap by calling sbrk(). The heap has to be extended by a size that fits the requested &lt;em&gt;size&lt;/em&gt; as well a header. For that, we first compute the total size: &lt;code&gt;total_size = sizeof(struct header_t) + size;&lt;/code&gt;. Now, we request the OS to increment the program break: &lt;code&gt;sbrk(total_size)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the memory thus obtained from the OS, we first make space for the header. In C, there is no need to cast a &lt;code&gt;void*&lt;/code&gt; to any other pointer type, it is always safely promoted. That’s why we don’t explicitly do: &lt;code&gt;header = (header_t *)block;&lt;/code&gt;&lt;br/&gt;We fill this header with the requested size (not the total size) and mark it as not-free. We update the &lt;em&gt;next&lt;/em&gt; pointer, head and tail so to reflect the new state of the linked list. As explained earlier, we hide the header from the caller and hence return &lt;code&gt;(void*)(header + 1)&lt;/code&gt;. We make sure we release the global lock as well.&lt;/p&gt;
&lt;h3&gt;free()&lt;/h3&gt;
&lt;p&gt;Now, we will look at what free() should do. free() has to first deterimine if the block-to-be-freed is at the end of the heap. If it is, we can release it to the OS. Otherwise, all we do is mark it ‘free’, hoping to reuse it later.&lt;/p&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
void free(void *block)
{
        struct header_t *header, *tmp;
        void *programbreak;

        if (!block)
                return;
        pthread_mutex_lock(&amp;amp;global_malloc_lock);
        header = (struct header_t*)block - 1;

        programbreak = sbrk(0);
        if ((char*)block + header-&amp;gt;size == programbreak) {
                if (head == tail) {
                        head = tail = NULL;
                } else {
                        tmp = head;
                        while (tmp) {
                                if(tmp-&amp;gt;next == tail) {
                                        tmp-&amp;gt;next = NULL;
                                        tail = tmp;
                                }
                                tmp = tmp-&amp;gt;next;
                        }
                }
                sbrk(0 - sizeof(struct header_t) - header-&amp;gt;size);
                pthread_mutex_unlock(&amp;amp;global_malloc_lock);
                return;
        }
        header-&amp;gt;is_free = 1;
        pthread_mutex_unlock(&amp;amp;global_malloc_lock);
}
&lt;/pre&gt;
&lt;p&gt;Here, first we get the header of the block we want to free. All we need to do is get a pointer that is behind the block by a distance equalling the size of the header. So, we cast &lt;em&gt;block&lt;/em&gt; to a header pointer type and move it behind by 1 unit.&lt;br/&gt;&lt;code&gt;header = (struct header_t*)block - 1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sbrk(0)&lt;/code&gt; gives the current value of program break. To check if the block to be freed is at the end of the heap, we first find the end of the current block. The end can be computed as &lt;code&gt;(char*)block + header-&amp;gt;size&lt;/code&gt;. This is then compared with the program break.&lt;/p&gt;
&lt;p&gt;If it is in fact at the end, then we could shrink the size of the heap and release memory to OS. We first reset our head and tail pointers to reflect the loss of the last block. Then the amount of memory to be released is calculated. This the sum of sizes of the header and the acutal block: &lt;code&gt;sizeof(struct header_t) + header-&amp;gt;size&lt;/code&gt;. To release this much amount of memory, we call sbrk() with the negative of this value.&lt;/p&gt;
&lt;p&gt;In the case the block is not the last one in the linked list, we simply set the &lt;em&gt;is_free&lt;/em&gt; field of its header. This is the field checked by &lt;em&gt;get_free_block()&lt;/em&gt; before actually calling sbrk() on a malloc().&lt;/p&gt;
&lt;h3&gt;calloc()&lt;/h3&gt;
The calloc(num, nsize) function allocates memory for an array of &lt;em&gt;num&lt;/em&gt; elements of &lt;em&gt;nsize&lt;/em&gt; bytes each and returns a pointer to the allocated memory. Additionally, the memory is all set to zeroes.
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
void *calloc(size_t num, size_t nsize)
{
        size_t size;
        void *block;
        if (!num || !nsize)
                return NULL;
        size = num * nsize;
        /* check mul overflow */
        if (nsize != size / num)
                return NULL;
        block = malloc(size);
        if (!block)
                return NULL;
        memset(block, 0, size);
        return block;
}
&lt;/pre&gt;
&lt;p&gt;Here, we do a quick check for multiplicative overflow, then call our malloc(),&lt;br/&gt;and clears the allocated memory to all zeroes using &lt;a href=&quot;https://t.umblr.com/redirect?z=http%3A%2F%2Fman7.org%2Flinux%2Fman-pages%2Fman3%2Fmemset.3.html&amp;amp;t=NWY5OTY3YzZlZjA3MThlNWYyYjUwNGZkNDI3NTk0YTM5NGIyMjg1MCxGcHpyWHZINg%3D%3D&amp;amp;b=t%3AlMu0rOs9jGwbQo_qiwGh_A&amp;amp;p=https%3A%2F%2Farjunsreedharan.org%2Fpost%2F148675821737%2Fmemory-allocators-101-write-a-simple-memory&amp;amp;m=1&quot; target=&quot;_blank&quot; data-href=&quot;http://man7.org/linux/man-pages/man3/memset.3.html&quot;&gt;memset()&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;realloc()&lt;/h3&gt;
&lt;p&gt;realloc() changes the size of the given memory block to the size given.&lt;/p&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
void *realloc(void *block, size_t size)
{
        struct header_t *header;
        void *ret;
        if (!block || !size)
                return malloc(size);
        header = (struct header_t*)block - 1;
        if (header-&amp;gt;size &amp;gt;= size)
                return block;
        ret = malloc(size);
        if (ret) {
                
                memcpy(ret, block, header-&amp;gt;size);
                free(block);
        }
        return ret;
}
&lt;/pre&gt;
&lt;p&gt;Here, we first get the block’s header and see if the block already has the size to accomodate the requested size. If it does, there’s nothing to be done.&lt;/p&gt;
&lt;p&gt;If the current block does not have the requested size, then we call malloc() to get a block of the request size, and relocate contents to the new bigger block using &lt;a href=&quot;https://t.umblr.com/redirect?z=http%3A%2F%2Fman7.org%2Flinux%2Fman-pages%2Fman3%2Fmemcpy.3.html&amp;amp;t=Y2I5MTJhZTVjMjZlMDI0MGY0MmU5OWM3Y2Q2ZWQwNGRiMmIwMDQ0YSxGcHpyWHZINg%3D%3D&amp;amp;b=t%3AlMu0rOs9jGwbQo_qiwGh_A&amp;amp;p=https%3A%2F%2Farjunsreedharan.org%2Fpost%2F148675821737%2Fmemory-allocators-101-write-a-simple-memory&amp;amp;m=1&quot; target=&quot;_blank&quot; data-href=&quot;http://man7.org/linux/man-pages/man3/memcpy.3.html&quot;&gt;memcpy()&lt;/a&gt;. The old memory block is then freed.&lt;/p&gt;
&lt;h3&gt;Compiling and using our memory allocator.&lt;/h3&gt;
&lt;p&gt;You can get the code from my github repository - &lt;a href=&quot;https://t.umblr.com/redirect?z=%2F%2Fgithub.com%2Farjun024%2Fmemalloc&amp;amp;t=ZTllYzkzOTgzZDhjM2EwNTJhMmE2NDM1MjllM2RhN2U0ZWZjOGI5ZCxGcHpyWHZINg%3D%3D&amp;amp;b=t%3AlMu0rOs9jGwbQo_qiwGh_A&amp;amp;p=https%3A%2F%2Farjunsreedharan.org%2Fpost%2F148675821737%2Fmemory-allocators-101-write-a-simple-memory&amp;amp;m=1&quot; target=&quot;_blank&quot; data-href=&quot;//github.com/arjun024/memalloc&quot;&gt;memalloc&lt;/a&gt;.&lt;br/&gt;We’ll compile our memory allocator and then run a utility like &lt;strong&gt;ls&lt;/strong&gt; using our memory allocator.&lt;/p&gt;
&lt;p&gt;To do that, we will first compile it as a library file.&lt;/p&gt;
&lt;pre class=&quot;prettyprint lang-bsh&quot;&gt;
$ gcc -o memalloc.so -fPIC -shared memalloc.c
&lt;/pre&gt;
&lt;p&gt;The &lt;em&gt;-fPIC&lt;/em&gt; and &lt;em&gt;-shared&lt;/em&gt; options makes sure the compiled output has position-independent code and tells the linker to produce a shared object suitable for dynamic linking.&lt;/p&gt;
&lt;p&gt;On Linux, if you set the enivornment variable &lt;strong&gt;LD_PRELOAD&lt;/strong&gt; to the path of a shared object, that file will be loaded before any other library. We could use this trick to load our compiled library file first, so that the later commands run in the shell will use our malloc(), free(), calloc() and realloc().&lt;/p&gt;
&lt;pre class=&quot;prettyprint lang-bsh&quot;&gt;
$ export LD_PRELOAD=$PWD/memalloc.so
&lt;/pre&gt;
&lt;p&gt;Now,&lt;/p&gt;
&lt;pre class=&quot;prettyprint lang-bsh&quot;&gt;
$ ls
memalloc.c              memalloc.so
&lt;/pre&gt;
&lt;p&gt;Voila! That’s our memory allocator serving &lt;em&gt;ls&lt;/em&gt;.&lt;br/&gt;Print some debug message in malloc() and see it for yourself if you don’t believe me.&lt;/p&gt;
&lt;p&gt;Thank you for reading. All comments are welcome. Please report bugs if you find any.&lt;/p&gt;
&lt;h3&gt;Footnotes, References&lt;/h3&gt;
&lt;p&gt;See a list of memory allocators:&lt;br/&gt;&lt;a href=&quot;https://t.umblr.com/redirect?z=https%3A%2F%2Fgithub.com%2Fblanham%2Fliballoc%2F&amp;amp;t=Nzk1OGUxZGMwZDYwMmY3MDU4ZmY0YzNjYTcyNmUwZjgyNzU0MzY4OSxGcHpyWHZINg%3D%3D&amp;amp;b=t%3AlMu0rOs9jGwbQo_qiwGh_A&amp;amp;p=https%3A%2F%2Farjunsreedharan.org%2Fpost%2F148675821737%2Fmemory-allocators-101-write-a-simple-memory&amp;amp;m=1&quot; target=&quot;_blank&quot; data-href=&quot;https://github.com/blanham/liballoc/&quot;&gt;liballoc&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://t.umblr.com/redirect?z=http%3A%2F%2Fg.oswego.edu%2Fdl%2Fhtml%2Fmalloc.html%2520dlmalloc&amp;amp;t=MzlkZDU5NDc0YzA3MzY3Y2U5YThlNTRkNTcyMWI3NzdhMTc5MTYxOSxGcHpyWHZINg%3D%3D&amp;amp;b=t%3AlMu0rOs9jGwbQo_qiwGh_A&amp;amp;p=https%3A%2F%2Farjunsreedharan.org%2Fpost%2F148675821737%2Fmemory-allocators-101-write-a-simple-memory&amp;amp;m=1&quot; target=&quot;_blank&quot; data-href=&quot;http://g.oswego.edu/dl/html/malloc.html dlmalloc&quot;&gt;Doug Lea’s Memory Allocator&lt;/a&gt;.&lt;br/&gt;&lt;a href=&quot;https://t.umblr.com/redirect?z=http%3A%2F%2Fgoog-perftools.sourceforge.net%2Fdoc%2Ftcmalloc.html&amp;amp;t=OWZmMTY0M2Q1NjE3OTQ4MzQ5MzgzOWNkYzQxYTRhMTFjMmQxYjZjZSxGcHpyWHZINg%3D%3D&amp;amp;b=t%3AlMu0rOs9jGwbQo_qiwGh_A&amp;amp;p=https%3A%2F%2Farjunsreedharan.org%2Fpost%2F148675821737%2Fmemory-allocators-101-write-a-simple-memory&amp;amp;m=1&quot; target=&quot;_blank&quot; data-href=&quot;http://goog-perftools.sourceforge.net/doc/tcmalloc.html&quot;&gt;TCMalloc&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://t.umblr.com/redirect?z=http%3A%2F%2Fwww.malloc.de%2Fen%2F&amp;amp;t=MmZkZmE2MzRiYWU2MmRlY2RlODMyNjQ2MzQ2ZTg3NWVjZTUxNWE1MyxGcHpyWHZINg%3D%3D&amp;amp;b=t%3AlMu0rOs9jGwbQo_qiwGh_A&amp;amp;p=https%3A%2F%2Farjunsreedharan.org%2Fpost%2F148675821737%2Fmemory-allocators-101-write-a-simple-memory&amp;amp;m=1&quot; target=&quot;_blank&quot; data-href=&quot;http://www.malloc.de/en/&quot;&gt;ptmalloc&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&quot;https://t.umblr.com/redirect?z=https%3A%2F%2Fwww.gnu.org%2Fsoftware%2Flibc%2Fmanual%2Fhtml_node%2FMalloc-Tunable-Parameters.html&amp;amp;t=ZGVjN2Y3MTU3NDg1YWMzZDc5MjZiYmNiZmYyOTJmYzIzODM0ODZmNyxGcHpyWHZINg%3D%3D&amp;amp;b=t%3AlMu0rOs9jGwbQo_qiwGh_A&amp;amp;p=https%3A%2F%2Farjunsreedharan.org%2Fpost%2F148675821737%2Fmemory-allocators-101-write-a-simple-memory&amp;amp;m=1&quot; target=&quot;_blank&quot; data-href=&quot;https://www.gnu.org/software/libc/manual/html_node/Malloc-Tunable-Parameters.html&quot;&gt;The GNU C Library: Malloc Tunable Parameters&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://t.umblr.com/redirect?z=http%3A%2F%2Fwiki.osdev.org%2FMemory_Allocation&amp;amp;t=NjY5MWUzMDc0NmY3ZGUyNDRlNmVmNzQ0MDJjMWY1YTY4MjYwNTI0NixGcHpyWHZINg%3D%3D&amp;amp;b=t%3AlMu0rOs9jGwbQo_qiwGh_A&amp;amp;p=https%3A%2F%2Farjunsreedharan.org%2Fpost%2F148675821737%2Fmemory-allocators-101-write-a-simple-memory&amp;amp;m=1&quot; target=&quot;_blank&quot; data-href=&quot;http://wiki.osdev.org/Memory_Allocation&quot;&gt;OSDev - Memory allocation&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://t.umblr.com/redirect?z=http%3A%2F%2Fjamesgolick.com%2F2013%2F5%2F15%2Fmemory-allocators-101.html&amp;amp;t=M2YzNDcwMzkzM2NlN2Y4NGQwMjQxOGI1OGQ1OWYxYjMwZWY4NWJlMSxGcHpyWHZINg%3D%3D&amp;amp;b=t%3AlMu0rOs9jGwbQo_qiwGh_A&amp;amp;p=https%3A%2F%2Farjunsreedharan.org%2Fpost%2F148675821737%2Fmemory-allocators-101-write-a-simple-memory&amp;amp;m=1&quot; target=&quot;_blank&quot; data-href=&quot;http://jamesgolick.com/2013/5/15/memory-allocators-101.html&quot;&gt;Memory Allocators 101 - James Golick&lt;/a&gt;&lt;/p&gt;

&lt;a rel=&quot;tag&quot; class=&quot;article-tag&quot; href=&quot;https://arjunsreedharan.org/tagged/c&quot;&gt;c&lt;/a&gt;&lt;a rel=&quot;tag&quot; class=&quot;article-tag&quot; href=&quot;https://arjunsreedharan.org/tagged/memory&quot;&gt;memory&lt;/a&gt;&lt;a rel=&quot;tag&quot; class=&quot;article-tag&quot; href=&quot;https://arjunsreedharan.org/tagged/Memory-Allocation&quot;&gt;Memory Allocation&lt;/a&gt;&lt;a rel=&quot;tag&quot; class=&quot;article-tag&quot; href=&quot;https://arjunsreedharan.org/tagged/operating-system&quot;&gt;operating system&lt;/a&gt;&lt;p class=&quot;credit disclaimer visible-desktop&quot;&gt;Disclaimer: The views expressed here are solely those of the author in his private capacity and do not in any way represent the views of the author's employer or any organization associated with the author.&lt;/p&gt;


</description>
<pubDate>Wed, 10 Oct 2018 00:20:30 +0000</pubDate>
<dc:creator>DonbunEf7</dc:creator>
<og:title>Memory Allocators 101 - Write a simple memory allocator</og:title>
<og:url>https://arjunsreedharan.org/post/148675821737/memory-allocators-101-write-a-simple-memory</og:url>
<og:type>tumblr-feed:entry</og:type>
<og:description>Code related to this article: github.com/arjun024/memalloc This article is about writing a simple memory allocator in C. We will implement malloc(), calloc(), realloc() and free(). This is a beginner...</og:description>
<og:image>https://static.tumblr.com/gltvynn/tHIobhrb5/memlayout.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://arjunsreedharan.org/post/148675821737/memory-allocators-101-write-a-simple-memory</dc:identifier>
</item>
</channel>
</rss>