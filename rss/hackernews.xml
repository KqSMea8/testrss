<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Thank you HN</title>
<link>https://news.ycombinator.com/item?id=17745688</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=17745688</guid>
<description>About a couple of years ago, I submitted a thread here called &quot;Ask HN: I'm depressed, what should I do?&quot; [0].
&lt;p&gt;I was in a very dark place personally and professionally. I had turned to my family and friends without success, and posted here looking for a moral boost.&lt;/p&gt;&lt;p&gt;I would like to thank all the people that have responded with kindness.&lt;/p&gt;
&lt;p&gt;I just wanted to say that your words helped, that I think about this thread often, and that your effort did actually help someone from a tough spot.&lt;/p&gt;
&lt;p&gt;Update on my situation:&lt;/p&gt;
&lt;p&gt;By the time that I got an offer I could live with, I had sent over 250 applications and done around 20 interviews.&lt;/p&gt;
&lt;p&gt;I started with 33k€ a year (translates to a little less than 2000€ per month), now I'm at 38k€.&lt;/p&gt;
&lt;p&gt;I rented a place downtown, and started working out (lost 18kg and counting), I'm going to run a marathon in 3 months!!!&lt;/p&gt;
&lt;p&gt;Overall, I'm not exactly where I want to be, but -for once- I can see myself getting there.&lt;/p&gt;
&lt;p&gt;I'm hopeful for the future, and I would like to thank the many people that helped me to get here.&lt;/p&gt;
&lt;p&gt;Just to sum up, be kind when you can, it can change someone's life.&lt;/p&gt;
&lt;p&gt;[0]: &lt;a href=&quot;https://news.ycombinator.com/item?id=13134183&quot; rel=&quot;nofollow&quot;&gt;https://news.ycombinator.com/item?id=13134183&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 12 Aug 2018 18:32:55 +0000</pubDate>
<dc:creator>throwAwayXYZ69</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=17745688</dc:identifier>
</item>
<item>
<title>USA Temperature: can I sucker you?</title>
<link>https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/</link>
<guid isPermaLink="true" >https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/</guid>
<description>&lt;p&gt;Suppose I wanted to convince people that temperature in the USA wasn’t going up, it was going down. What would I show? Let’s try yearly average temperature in the conterminous U.S., also known as the “lower 48 states” (I’ll just call it “USA”):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tamino.files.wordpress.com/2018/08/usa1.jpg&quot;&gt;&lt;img data-attachment-id=&quot;9997&quot; data-permalink=&quot;https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/usa-2/&quot; data-orig-file=&quot;https://tamino.files.wordpress.com/2018/08/usa1.jpg?w=500&amp;amp;h=333&quot; data-orig-size=&quot;829,552&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;USA&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://tamino.files.wordpress.com/2018/08/usa1.jpg?w=500&amp;amp;h=333?w=300&quot; data-large-file=&quot;https://tamino.files.wordpress.com/2018/08/usa1.jpg?w=500&amp;amp;h=333?w=500&quot; src=&quot;https://tamino.files.wordpress.com/2018/08/usa1.jpg?w=500&amp;amp;h=333&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;333&quot; class=&quot;alignnone size-full wp-image-9997&quot; srcset=&quot;https://tamino.files.wordpress.com/2018/08/usa1.jpg?w=500&amp;amp;h=333 500w, https://tamino.files.wordpress.com/2018/08/usa1.jpg?w=150&amp;amp;h=100 150w, https://tamino.files.wordpress.com/2018/08/usa1.jpg?w=300&amp;amp;h=200 300w, https://tamino.files.wordpress.com/2018/08/usa1.jpg?w=768&amp;amp;h=511 768w, https://tamino.files.wordpress.com/2018/08/usa1.jpg 829w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-9984&quot;/&gt;&lt;br/&gt;Well that won’t do. It shows that temperature has been rising, not falling. By the way, I’ve included two trend estimates. The blue straight line is a &lt;em&gt;linear&lt;/em&gt; trend estimate and it’s going up. The red curvy line is a nonlinear trend estimate, it has gone up and down and up, and is now rising fast. Scary fast. That definitely won’t do.&lt;/p&gt;
&lt;p&gt;But wait! The temperature shown is the &lt;em&gt;mean&lt;/em&gt; temperature, which is the average of the high and low temperatures. What if I tried just low temperatures?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg&quot;&gt;&lt;img data-attachment-id=&quot;9999&quot; data-permalink=&quot;https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/usalowtemperature-2/&quot; data-orig-file=&quot;https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg?w=500&amp;amp;h=333&quot; data-orig-size=&quot;829,552&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;USALowTemperature&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg?w=500&amp;amp;h=333?w=300&quot; data-large-file=&quot;https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg?w=500&amp;amp;h=333?w=500&quot; src=&quot;https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg?w=500&amp;amp;h=333&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;333&quot; class=&quot;alignnone size-full wp-image-9999&quot; srcset=&quot;https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg?w=500&amp;amp;h=333 500w, https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg?w=150&amp;amp;h=100 150w, https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg?w=300&amp;amp;h=200 300w, https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg?w=768&amp;amp;h=511 768w, https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg 829w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That won’t do either. Scary fast.&lt;/p&gt;
&lt;p&gt;How about high temperatures?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg&quot;&gt;&lt;img data-attachment-id=&quot;10000&quot; data-permalink=&quot;https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/usahightemperature-2/&quot; data-orig-file=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg?w=500&amp;amp;h=333&quot; data-orig-size=&quot;829,552&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;USAHighTemperature&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg?w=500&amp;amp;h=333?w=300&quot; data-large-file=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg?w=500&amp;amp;h=333?w=500&quot; src=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg?w=500&amp;amp;h=333&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;333&quot; class=&quot;alignnone size-full wp-image-10000&quot; srcset=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg?w=500&amp;amp;h=333 500w, https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg?w=150&amp;amp;h=100 150w, https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg?w=300&amp;amp;h=200 300w, https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg?w=768&amp;amp;h=511 768w, https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg 829w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That still won’t do, but it’s a &lt;em&gt;little&lt;/em&gt; better. There’s a more pronounced hump in the 1930s — that’s the dustbowl era. Could I maybe make the most of that?&lt;/p&gt;
&lt;p&gt;Let’s try this: look at high temperature during the different &lt;em&gt;seasons&lt;/em&gt; of the year. After all, we know winter has been warming faster than summer, maybe summertime only — or maybe at least &lt;em&gt;one&lt;/em&gt; of the seasons — will give a more useful “sucker people” picture. Here are the average high temperatures for all four seasons separately:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg&quot;&gt;&lt;img data-attachment-id=&quot;9988&quot; data-permalink=&quot;https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/hightemperature4seasons/&quot; data-orig-file=&quot;https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg?w=500&amp;amp;h=333&quot; data-orig-size=&quot;829,552&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;HighTemperature4Seasons&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg?w=500&amp;amp;h=333?w=300&quot; data-large-file=&quot;https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg?w=500&amp;amp;h=333?w=500&quot; src=&quot;https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg?w=500&amp;amp;h=333&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;333&quot; class=&quot;alignnone size-full wp-image-9988&quot; srcset=&quot;https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg?w=500&amp;amp;h=333 500w, https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg?w=150&amp;amp;h=100 150w, https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg?w=300&amp;amp;h=200 300w, https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg?w=768&amp;amp;h=511 768w, https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg 829w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now we’re getting somewhere! Summer high temperature has still been increasing overall, but that hump during the 1930s (the dust bowl era) is far more pronounced. Maybe I could make something of that?&lt;/p&gt;
&lt;p&gt;Perhaps I could just get rid of some of the data I don’t like. I can’t get rid of the most recent stuff — then people will figure out I’m trying to sucker them. How about I get rid of some of the early stuff? I’ll start with 1918, instead of starting when the data actually start (1895). That leaves this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg&quot;&gt;&lt;img data-attachment-id=&quot;9989&quot; data-permalink=&quot;https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/usahightemperaturesummersince1918/&quot; data-orig-file=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg?w=500&amp;amp;h=333&quot; data-orig-size=&quot;829,552&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;USAHighTemperatureSummerSince1918&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg?w=500&amp;amp;h=333?w=300&quot; data-large-file=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg?w=500&amp;amp;h=333?w=500&quot; src=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg?w=500&amp;amp;h=333&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;333&quot; class=&quot;alignnone size-full wp-image-9989&quot; srcset=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg?w=500&amp;amp;h=333 500w, https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg?w=150&amp;amp;h=100 150w, https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg?w=300&amp;amp;h=200 300w, https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg?w=768&amp;amp;h=511 768w, https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg 829w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally! I’ve got a graph that &lt;em&gt;looks&lt;/em&gt; like there’s nothing to worry about, where the linear trend is so small you almost can’t tell it’s still (barely) rising, and I only had to pick one of 12 possible combinations (mean/high/low temperature over winter/spring/summer/autumn) and leave out the early data to get it. Clever.&lt;/p&gt;
&lt;p&gt;Even so, the trend is still going up even if just barely. And that’s the linear trend; the nonlinear trend looks like it might be rising noticeably lately, maybe even getting close to as hot as the summer of the dust bowl era. Could I fix that?&lt;/p&gt;
&lt;p&gt;Of course I can! Instead of using the USA temperature data from the “experts,” those people at NOAA (the National Oceanic and Atmospheric Administration) who think they’re so good at it just because they’ve spent decades studying all that “math” and learning how to do it “right,” I’ll just take the raw data and form a simple average. Those NOAA people will tell you that isn’t right, that over the years new stations have come online and old ones have retired so you have to take that into account. They’ll talk about fancy-schmancy math stuff like “area weighting.” That’s all just NOAA tricks, aren’t they just a bunch of frauds? We can completely ignore the fact that over the years the average location of all the contributing stations has moved slightly northward to colder territory:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tamino.files.wordpress.com/2018/08/latitude.jpg&quot;&gt;&lt;img data-attachment-id=&quot;9990&quot; data-permalink=&quot;https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/latitude-2/&quot; data-orig-file=&quot;https://tamino.files.wordpress.com/2018/08/latitude.jpg?w=500&amp;amp;h=333&quot; data-orig-size=&quot;829,552&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Latitude&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://tamino.files.wordpress.com/2018/08/latitude.jpg?w=500&amp;amp;h=333?w=300&quot; data-large-file=&quot;https://tamino.files.wordpress.com/2018/08/latitude.jpg?w=500&amp;amp;h=333?w=500&quot; src=&quot;https://tamino.files.wordpress.com/2018/08/latitude.jpg?w=500&amp;amp;h=333&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;333&quot; class=&quot;alignnone size-full wp-image-9990&quot; srcset=&quot;https://tamino.files.wordpress.com/2018/08/latitude.jpg?w=500&amp;amp;h=333 500w, https://tamino.files.wordpress.com/2018/08/latitude.jpg?w=150&amp;amp;h=100 150w, https://tamino.files.wordpress.com/2018/08/latitude.jpg?w=300&amp;amp;h=200 300w, https://tamino.files.wordpress.com/2018/08/latitude.jpg?w=768&amp;amp;h=511 768w, https://tamino.files.wordpress.com/2018/08/latitude.jpg 829w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Heck we can completely ignore &lt;em&gt;everything&lt;/em&gt; that they’ve learned about how to do it right … mainly because if we just take a simple, naive average we’ll get what we want.&lt;/p&gt;
&lt;p&gt;There’s a graph going around the internet from Steve Goddard a.k.a. Tony Heller, claiming to show that temperature in the U.S. has been declining, using only high temperatures, using only summertime temperatures, using only data since 1918, based on a simple average without taking into account new stations coming online or old stations retiring or area-weighting or any of that “expert” stuff:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg&quot;&gt;&lt;img data-attachment-id=&quot;9991&quot; data-permalink=&quot;https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/thsummer_tmax/&quot; data-orig-file=&quot;https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg?w=500&amp;amp;h=459&quot; data-orig-size=&quot;680,624&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;THSummer_tmax&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg?w=500&amp;amp;h=459?w=300&quot; data-large-file=&quot;https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg?w=500&amp;amp;h=459?w=500&quot; src=&quot;https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg?w=500&amp;amp;h=459&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;459&quot; class=&quot;alignnone size-full wp-image-9991&quot; srcset=&quot;https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg?w=500&amp;amp;h=459 500w, https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg?w=150&amp;amp;h=138 150w, https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg?w=300&amp;amp;h=275 300w, https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg 680w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Imagine that.&lt;/p&gt;
&lt;hr/&gt;
This blog is made possible by readers like you; join others by &lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=Y6U22NEABG9Q2&quot;&gt;donating at My Wee Dragon&lt;/a&gt;.
&lt;hr/&gt;
&lt;div class=&quot;wpcnt&quot;&gt;
&lt;div class=&quot;wpa wpmrec&quot;&gt;&lt;span class=&quot;wpa-about&quot;&gt;Advertisements&lt;/span&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;jp-post-flair&quot; class=&quot;sharedaddy sd-like-enabled sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded&quot; id=&quot;like-post-wrapper-530201-9984-5b70ca1123f47&quot; data-src=&quot;//widgets.wp.com/likes/index.html?ver=20180319#blog_id=530201&amp;amp;post_id=9984&amp;amp;origin=tamino.wordpress.com&amp;amp;obj_id=530201-9984-5b70ca1123f47&quot; data-name=&quot;like-post-frame-530201-9984-5b70ca1123f47&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Like this:&lt;/h3&gt;
&lt;div class=&quot;likes-widget-placeholder post-likes-widget-placeholder&quot;&gt;&lt;span class=&quot;button&quot;&gt;&lt;span&gt;Like&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;loading&quot;&gt;Loading...&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Sun, 12 Aug 2018 15:54:54 +0000</pubDate>
<dc:creator>xg15</dc:creator>
<og:type>article</og:type>
<og:title>USA Temperature: can I sucker you?</og:title>
<og:url>https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/</og:url>
<og:description>Suppose I wanted to convince people that temperature in the USA wasn’t going up, it was going down. What would I show? Let’s try yearly average temperature in the conterminous U.S., als…</og:description>
<og:image>https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/</dc:identifier>
</item>
<item>
<title>Academic Torrents – Making 27TB of research data available</title>
<link>http://academictorrents.com/</link>
<guid isPermaLink="true" >http://academictorrents.com/</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;http://academictorrents.com/&quot;&gt;http://academictorrents.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=17744150&quot;&gt;https://news.ycombinator.com/item?id=17744150&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 693&lt;/p&gt;&lt;p&gt;# Comments: 92&lt;/p&gt;</description>
<pubDate>Sun, 12 Aug 2018 12:56:52 +0000</pubDate>
<dc:creator>jacquesm</dc:creator>
<og:type>article</og:type>
<og:title>USA Temperature: can I sucker you?</og:title>
<og:url>https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/</og:url>
<og:description>Suppose I wanted to convince people that temperature in the USA wasn’t going up, it was going down. What would I show? Let’s try yearly average temperature in the conterminous U.S., als…</og:description>
<og:image>https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/</dc:identifier>
</item>
<item>
<title>Show HN: Didyougogo – An Altavista slayer</title>
<link>http://didyougogo.com/blog/didyougogo.html</link>
<guid isPermaLink="true" >http://didyougogo.com/blog/didyougogo.html</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;&lt;title&gt;Didyougogo - An Altavista-slayer&lt;/title&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;42.115171990172&quot;&gt;
&lt;div readability=&quot;40.156326781327&quot;&gt;

&lt;h2&gt;An Altavista-slayer&lt;/h2&gt;
&lt;p&gt;Imagine a web search service of googol proportions that:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;doesn't use javascript or cookies&lt;/li&gt;
&lt;li&gt;doesn't track you&lt;/li&gt;
&lt;li&gt;is built completely on open-source code&lt;/li&gt;
&lt;li&gt;offers both a public GUI and a API, both equally open, allowing you to query in your favorite language and read/write in your favorite format&lt;/li&gt;
&lt;li&gt;through the GUI and API provides a way to query both in natural language and in structured query languages&lt;/li&gt;
&lt;li&gt;has a ranking model that encourages a good ratio between content and markup (less markup/script is better)&lt;/li&gt;
&lt;li&gt;is community-driven, enabling the public to:
&lt;ul&gt;&lt;li&gt;add to the public index&lt;/li&gt;
&lt;li&gt;create personal indexes&lt;/li&gt;
&lt;li&gt;create queries that join between all indexes&lt;/li&gt;
&lt;li&gt;curate indexes&lt;/li&gt;
&lt;li&gt;add to the code that runs their favorite search service&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;encourages good nettiquette (e.g. small page size)&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;This is such a service.&lt;/h3&gt;
&lt;p&gt;I'm Marcus, founder of Didyougogo and author of the software behind it. For the past ten years I've been trying to improve my programming and math skills to get to a level where I could write a proper web search engine for the written word using absolute cutting-edge IR methods. The final result is something I have not seen or read about: a language represented as a 65K wide vector-space, serialized into a binary tree that is balanced according to node's cosine angle between them and their closest neighbours. Querying is very fast, even for long phrases. Fuzzy, prefix, suffix and wildcard type queries comes for free with the vector-space model. The system uses relatively little resources and can run on as little as 1 CPU and 1GB RAM.&lt;/p&gt;
&lt;p&gt;I hereby present my (0.1 alpha MVP) Altavista-killer *: &lt;a href=&quot;http://didyougogo.com&quot;&gt;didyougogo.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;* Because calling something a Google-killer makes you sound really wierd. And because the Altavista search engine came as a standalone installation (which is also the case with the Didyougogo software).&lt;/p&gt;
&lt;h3&gt;What to do now?&lt;/h3&gt;
&lt;p&gt;Me, personally, I would like to spend the next ten years building the strongest web search service in the world. Here's what I have in mind:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;build a public analytics view that shows num of pages, num of sites, top 100 semantic topics and other interesting metrics&lt;/li&gt;
&lt;li&gt;create a way for on-prem installations to talk to public installations (to interchange data)&lt;/li&gt;
&lt;li&gt;build a tool for the public to create queries that act as &quot;instant answers&quot; on the didyougogo site&lt;/li&gt;
&lt;li&gt;add voice-capabilities&lt;/li&gt;
&lt;li&gt;create a strong sales strategy:
&lt;ul&gt;&lt;li&gt;approach companies that would benefit from the indexed data and ask them to integrate it into their day-to-day business of driving traffic and sales&lt;/li&gt;
&lt;li&gt;entice them to try an on-prem installation enabling them to query and join between private and public data so that they are able to see trends within their market place&lt;/li&gt;
&lt;li&gt;gamify the search result page in a tastefull manner that serves both the public and companies trying to market their ideas&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;build a strong, knowledgable and curious team and a community&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Check it out please (feedback greatly appreciated)!&lt;/h3&gt;
&lt;p&gt;Submit a page, do a search.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://didyougogo.com&quot;&gt;Didyougogo&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/kreeben/resin&quot;&gt;Source code&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/kreeben/resin/issues&quot;&gt;Give feedback here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Investors&lt;/h3&gt;
&lt;p&gt;This service needs computing, storage and a small-ish team of developers. If you are willing and able to offer sponsorship, reach out to me at marcuslager at the biggest email provider in the world * dot com.&lt;/p&gt;
&lt;p&gt;* It's a real dragon. Someone should slay it.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;</description>
<pubDate>Sun, 12 Aug 2018 12:32:19 +0000</pubDate>
<dc:creator>misterman0</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://didyougogo.com/blog/didyougogo.html</dc:identifier>
</item>
<item>
<title>Traveling to the Sun: Why Won’t Parker Solar Probe Melt?</title>
<link>https://www.nasa.gov/feature/goddard/2018/traveling-to-the-sun-why-won-t-parker-solar-probe-melt</link>
<guid isPermaLink="true" >https://www.nasa.gov/feature/goddard/2018/traveling-to-the-sun-why-won-t-parker-solar-probe-melt</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://www.nasa.gov/feature/goddard/2018/traveling-to-the-sun-why-won-t-parker-solar-probe-melt&quot;&gt;https://www.nasa.gov/feature/goddard/2018/traveling-to-the-sun-why-won-t-parker-solar-probe-melt&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=17743599&quot;&gt;https://news.ycombinator.com/item?id=17743599&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 271&lt;/p&gt;&lt;p&gt;# Comments: 102&lt;/p&gt;</description>
<pubDate>Sun, 12 Aug 2018 09:01:20 +0000</pubDate>
<dc:creator>shreyanshd</dc:creator>
<og:description>This summer, NASA's Parker Solar Probe will launch to travel closer to the Sun, deeper into the solar atmosphere, than any mission before it. Cutting-edge technology and engineering will help it beat the heat.</og:description>
<og:title>Traveling to the Sun: Why Won’t Parker Solar Probe Melt?</og:title>
<og:image>http://www.nasa.gov/sites/default/files/thumbnails/image/solarswingby.gif</og:image>
<og:url>http://www.nasa.gov/feature/goddard/2018/traveling-to-the-sun-why-won-t-parker-solar-probe-melt</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nasa.gov/feature/goddard/2018/traveling-to-the-sun-why-won-t-parker-solar-probe-melt/</dc:identifier>
</item>
<item>
<title>The Xi Text Engine CRDT</title>
<link>https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/crdt-details.md</link>
<guid isPermaLink="true" >https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/crdt-details.md</guid>
<description>
&lt;p&gt;This document contains a detailed description of the data structures and operations Xi uses for text. These data structures and the &lt;code&gt;merge&lt;/code&gt; operation also form a Conflict-free Replicated Data Type (CRDT). It being a CRDT allows Xi to be used for concurrent editing of text on multiple devices, it can merge edits, including those made offline, between multiple devices and converge on a consistent document that includes all changes.&lt;/p&gt;
&lt;p&gt;Beyond synchronizing text, these data structures and operations allow Xi to handle asynchronous editing of the text from plugins, support undo and redo, and allow incremental updating of editor state and the view based on differences between revisions.&lt;/p&gt;
&lt;p&gt;Many of these data structures and operations have been in Xi for a while but they've recently been heavily overhauled and extended as part of &lt;a href=&quot;https://github.com/google/xi-editor/issues/250&quot;&gt;a project&lt;/a&gt; that added multi-device syncing support via the CRDT merge operation. This was done for &lt;a href=&quot;https://fuchsia.googlesource.com/xi/&quot; rel=&quot;nofollow&quot;&gt;use on the Fuchsia operating system&lt;/a&gt;, where it uses &lt;a href=&quot;https://fuchsia.googlesource.com/ledger/&quot; rel=&quot;nofollow&quot;&gt;Ledger&lt;/a&gt; to synchronize documents between devices.&lt;/p&gt;
&lt;p&gt;What follows is both a description of a data structure for text and a code tour of the &lt;code&gt;xi-rope&lt;/code&gt; crate. It describes the actual Rust data structures and algorithms used, because the primary novelty and difficulty of this CRDT is in the optimized representation that allows for better time and memory complexity. If you want an overview of the motivation behind using a CRDT and a conceptual description of what the CRDT does see &lt;a href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/crdt.md&quot;&gt;&lt;code&gt;crdt.md&lt;/code&gt;&lt;/a&gt;. The intended audience is anyone interested in implementing CRDTs, anyone who wants to work on Xi, or just anyone curious enough.&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/crdt-details.md#motivation&quot;&gt;Motivation&lt;/a&gt;: Why Xi's CRDT is the way it is.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/crdt-details.md#representation&quot;&gt;Representation&lt;/a&gt;: Describes the representation Xi uses to implement the CRDT in a memory and time efficient way.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/crdt-details.md#operations&quot;&gt;Operations&lt;/a&gt;: Describes all the operations implemented on the representation to allow it to support undo, asynchronous edits, distributed synchronization and more.
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/crdt-details.md#enginemerge&quot;&gt;Engine::merge&lt;/a&gt;: Description of the CRDT merge operation used for multi-device syncing.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;The Xi CRDT attempts to have a number of properties that many other asynchronous text editing solutions don't:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Usable without a central server: Even though the Fuchsia Ledger does sync to a cloud server, it can't actually inspect the data or perform operations, so conflict resolution must be possible on every device independently.&lt;/li&gt;
&lt;li&gt;Support large documents: The memory complexity of the representation and the time complexity of common operations should be low enough to support very large text documents like books or long code files.&lt;/li&gt;
&lt;li&gt;Support long histories: Similarly, documents that have gone through many edits should be efficient to edit both in time and memory.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;As of the time this document was written, it satisfies all of these properties to some extent, but some operations and representations are not as memory and time efficient as we'd like. However, everything has been designed with a few more key optimizations in mind. Those optimizations should bring the memory and time complexity down to where we want.&lt;/p&gt;
&lt;h3&gt;Transform Property 2 (TP2) and Operational Transforms&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Operational_transformation&quot; rel=&quot;nofollow&quot;&gt;Operational Transformation (OT)&lt;/a&gt; is a common way to implement asynchronous text editing. It works by sending &lt;em&gt;operations&lt;/em&gt; like inserts and deletes between peers and transforming them to apply to the current text. Unfortunately many implementations of OT have a problem where they don't always preserve ordering when text is deleted.&lt;/p&gt;
&lt;p&gt;For example see the following diagram showing 3 peers sending edits between each other ending up in an inconsistent state. The arrows represent operations being sent asynchronously between devices in a peer-to-peer editing system based on OT, with time progressing downward. Whenever an edit is made the operation is sent to all other peers, but due to asynchronous communication they can be arbitrarily delayed. When an operation arrives at a peer it is transformed and applied to the current text. For clarity, not all arrows are shown, but you can imagine that the arrival of missing sends just got delayed past the end of the diagram.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/tp2.png&quot;&gt;&lt;img src=&quot;https://github.com/google/xi-editor/raw/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/tp2.png&quot; alt=&quot;TP2 Problem&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Acting consistently in cases like this is called having &quot;Transform Property 2&quot; (see &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.53.933&amp;amp;rep=rep1&amp;amp;type=pdf&quot; rel=&quot;nofollow&quot;&gt;Operational Transformation in Real-Time Group Editors: Issues, Algorithms, and Achievements&lt;/a&gt; by Sun &amp;amp; Ellis, 1998). One approach to the problem is to serialize all edits through a central server which does all the transformation. With this approach, the ordering relative to deleted text may not be preserved, but at least all clients will converge to the same state. This is what Google Docs and many other collaborative editing systems do.&lt;/p&gt;
&lt;p&gt;Xi avoids this problem by using &quot;tombstones&quot; (see &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.103.2679&amp;amp;rep=rep1&amp;amp;type=pdf&quot; rel=&quot;nofollow&quot;&gt;Tombstone Transformation Functions for Ensuring Consistency in Collaborative Editing Systems&lt;/a&gt;), which leave deleted characters in the representation so that ordering can be preserved. This will be described in detail later.&lt;/p&gt;
&lt;h2&gt;Representation&lt;/h2&gt;
&lt;p&gt;The conceptual representation described in &lt;a href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/crdt.md&quot;&gt;&lt;code&gt;crdt.md&lt;/code&gt;&lt;/a&gt; would be very inefficient to use directly. If we had to store an ID and ordering edges for each character and reconstruct the current text via topological sort every time we wanted to know what the current text is, Xi would be incredibly slow and would use much more memory than is necessary.&lt;/p&gt;
&lt;p&gt;Instead, we use a representation that allows all the operations we care about to be fast. We also take advantage of the typical patterns of text document usage to make the representation more memory efficient for common cases.&lt;/p&gt;
&lt;p&gt;The key optimization that shapes everything else is to avoid using IDs for characters or storing ordering edges explicitly. Instead, we represent the identity of characters implicitly by their position in the current text. But then how do we reference them in our revision history? If we use indices into the current text, they will get outdated by changes. We could rewrite all the indices in the history every time we made an edit, but that would be terribly inefficient. Instead the set of inserted characters in every revision is treated as a &lt;em&gt;coordinate transform&lt;/em&gt; for the older revisions. In order to find the character referred to by an older revision you have to transform the indices it uses based on the insertions made after it. This allows us to make our history append-only, leaving the indices referring to the text at the time of the revision.&lt;/p&gt;
&lt;p&gt;That description is almost certainly too vague to be understandable at this point, but don't worry, there will be a full description with diagrams later on.&lt;/p&gt;
&lt;p&gt;Starting from the basic building blocks and proceeding towards the top level CRDT &lt;code&gt;Engine&lt;/code&gt;, here are all the structures:&lt;/p&gt;
&lt;h3&gt;Rope&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Rope&lt;/span&gt;(Arc&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;RopeBody&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;);

#[derive(Clone)]
&lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;RopeBody&lt;/span&gt; {
    &lt;span class=&quot;pl-c&quot;&gt;/// Used for efficiently seeking to an index in the tree&lt;/span&gt;
    len: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;,
    &lt;span class=&quot;pl-c&quot;&gt;/// Used for rebalancing&lt;/span&gt;
    height: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;,
    val: RopeVal,
}

&lt;span class=&quot;pl-k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;RopeVal&lt;/span&gt; {
    &lt;span class=&quot;pl-en&quot;&gt;Leaf&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;String&lt;/span&gt;),
    &lt;span class=&quot;pl-en&quot;&gt;Internal&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;Rope&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;),
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All the Rust code in this document is simplified from the actual implementation so that it still conveys the structure and memory properties of the representation but elides details not necessary to understand the CRDT. See the code or generated docs for the full definitions. For example, the real struct for &lt;code&gt;Rope&lt;/code&gt; is called &lt;code&gt;Node&amp;lt;N: NodeInfo&amp;gt;&lt;/code&gt; and is a generic structure not specific to text, that is later instantiated for text as &lt;code&gt;pub type Rope = Node&amp;lt;RopeInfo&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When representing potentially large amounts of text, Xi avoids using &lt;code&gt;String&lt;/code&gt;s and instead uses a data structure called &lt;code&gt;Rope&lt;/code&gt;. This is essentially an immutable &lt;code&gt;String&lt;/code&gt; except many operations that would be &lt;code&gt;O(n)&lt;/code&gt; with normal strings are instead &lt;code&gt;O(log n)&lt;/code&gt; or &lt;code&gt;O(1)&lt;/code&gt;. Some examples of operations like this:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Copying&lt;/li&gt;
&lt;li&gt;Extracting a substring by index&lt;/li&gt;
&lt;li&gt;Inserting one piece of text in the middle of another producing a new piece of text&lt;/li&gt;
&lt;li&gt;Deleting an interval from a piece of text, producing a new piece of text&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Behind the scenes, &lt;code&gt;Rope&lt;/code&gt; is an immutable balanced tree structure using Rust's atomic reference counting smart pointer (&lt;code&gt;Arc&lt;/code&gt;) to share data, so &quot;copying&quot; any sub-tree is a very fast &lt;code&gt;O(1)&lt;/code&gt; operation. The leaves of the tree are chunks of text with a maximum size.&lt;/p&gt;
&lt;p&gt;An example of a &lt;code&gt;O(log n)&lt;/code&gt; operation is deleting an interval of a &lt;code&gt;Rope&lt;/code&gt;, which only requires creating a few new nodes that reference the sub-trees to the right and left of the deleted interval, and creating up to two new leaves if the deleted interval doesn't lie on chunk boundaries.&lt;/p&gt;
&lt;p&gt;Obviously &lt;code&gt;Rope&lt;/code&gt;s will be slower and take more memory than small &lt;code&gt;Strings&lt;/code&gt; but they have an asymptotic advantage when working with large documents.&lt;/p&gt;
&lt;p&gt;For a deeper look at &lt;code&gt;Rope&lt;/code&gt;s see the &lt;a href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/rope_science/intro.md&quot;&gt;Rope Science&lt;/a&gt; series.&lt;/p&gt;
&lt;h3&gt;Subset&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Segment&lt;/span&gt; {
    len: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;,
    count: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;,
}

&lt;span class=&quot;pl-k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Subset&lt;/span&gt; {
    &lt;span class=&quot;pl-c&quot;&gt;/// Invariant, maintained by `SubsetBuilder`: all `Segment`s have non-zero&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;/// length, and no `Segment` has the same count as the one before it.&lt;/span&gt;
    segments: &lt;span class=&quot;pl-k&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;Segment&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;,
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;Subset&lt;/code&gt; structure in &lt;code&gt;multiset.rs&lt;/code&gt; represents a multi-subset of a string, meaning that every character in the string has a count (often &lt;code&gt;0&lt;/code&gt;) representing how many times it is in the &lt;code&gt;Subset&lt;/code&gt;. Most of the time this structure is used to represent plain-old subsets and the counts are only ever &lt;code&gt;0&lt;/code&gt; for something not in the set or &lt;code&gt;1&lt;/code&gt; for a character in the set. It is primarily used to efficiently represent inserted and deleted regions of a document.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The exact nature of the characters is not central to the CRDT algorithm. It's most convenient for indices to match the representation, so throughout this document &quot;characters&quot; are actually counting UTF-8 code units, so for example an emoji would be multiple &quot;characters&quot; in this sense.&lt;/p&gt;
&lt;p&gt;It stores this information compactly as a list of consecutive &lt;code&gt;Segment&lt;/code&gt;s with a &lt;code&gt;length&lt;/code&gt; and a &lt;code&gt;count&lt;/code&gt;. This way a &lt;code&gt;Subset&lt;/code&gt; representing 1000 consecutive characters in the middle of a string will only require 3 segments (a 0-count one at the start, a 1-count one in the middle, and another 0-count one at the end). So as &lt;code&gt;(len, count)&lt;/code&gt; tuples this would look like: &lt;code&gt;(n, 0), (1000, 1), (m, 0)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The primary reason that &lt;code&gt;Subset&lt;/code&gt;s can have counts greater than &lt;code&gt;1&lt;/code&gt; is to represent concurrent deletes, for example if two concurrent edits delete the same character, and one of them is undone, subtracting one of the deletes from the &lt;code&gt;Subset&lt;/code&gt; of deleted characters should still leave the character deleted once. For this reason, the &lt;code&gt;Subset&lt;/code&gt;s of deleted characters which are described later have counts that represent how many times each character has been deleted.&lt;/p&gt;
&lt;p&gt;Note that an &quot;empty&quot; &lt;code&gt;Subset&lt;/code&gt; where all the characters have count &lt;code&gt;0&lt;/code&gt; is still represented as a single segment with the length of the base string and count set to &lt;code&gt;0&lt;/code&gt;. This allows functions using &lt;code&gt;Subset&lt;/code&gt;s to panic if they are used with strings or other &lt;code&gt;Subset&lt;/code&gt;s of the wrong length. This gives a level of dynamic checking that algorithms are using &lt;code&gt;Subset&lt;/code&gt;s correctly.&lt;/p&gt;
&lt;h3&gt;Delta&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;DeltaElement&lt;/span&gt; {
    &lt;span class=&quot;pl-c&quot;&gt;/// Represents a range of text in the base document. Includes beginning, excludes end.&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;Copy&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;),
    &lt;span class=&quot;pl-en&quot;&gt;Insert&lt;/span&gt;(Rope),
}

&lt;span class=&quot;pl-k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Delta&lt;/span&gt; {
    els: &lt;span class=&quot;pl-k&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;DeltaElement&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;,
    &lt;span class=&quot;pl-c&quot;&gt;/// The total length of the base document, used for checks in some operations&lt;/span&gt;
    base_len: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;,
}

&lt;span class=&quot;pl-k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;InsertDelta&lt;/span&gt;(Delta);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A &lt;code&gt;Delta&lt;/code&gt; represents the difference between one string (&lt;em&gt;A&lt;/em&gt;) and another (&lt;em&gt;B&lt;/em&gt;). It stores this as a list of intervals copied from the &lt;em&gt;A&lt;/em&gt; string and new inserted sections. All the indices of the copied intervals are non-decreasing. So a deletion is represented as a section of the &lt;em&gt;A&lt;/em&gt; string which isn't copied to the &lt;em&gt;B&lt;/em&gt; string, and insertions are represented as inserted sections in between copied sections. &lt;code&gt;Delta&lt;/code&gt; is the data structure the text editor interface creates when the user or a plugin edits the document, these are then applied to the document by the &lt;code&gt;Engine::edit_rev&lt;/code&gt; operation described later.&lt;/p&gt;
&lt;p&gt;There is also a type &lt;code&gt;InsertDelta&lt;/code&gt; that is just a wrapper around a &lt;code&gt;Delta&lt;/code&gt; but represents a guarantee that the &lt;code&gt;Delta&lt;/code&gt; only inserts, that is, the entire &lt;em&gt;A&lt;/em&gt; string is copied by the &lt;code&gt;Copy&lt;/code&gt; intervals.&lt;/p&gt;
&lt;h3&gt;Text, tombstones and the &quot;union string&quot;&lt;/h3&gt;
&lt;p&gt;A super important part of being able to provide the properties we desire in our CRDT is that we never throw useful information away. This means that when you delete text in Xi, or undo an insert, the text doesn't actually get thrown away, just marked as deleted. You can think of this as if there is a &quot;union string&quot; that contains all the characters that have ever been inserted, with some marked as deleted.&lt;/p&gt;
&lt;p&gt;When we delete or undo, we don't touch the union string, we just change a &lt;code&gt;Subset&lt;/code&gt; (&lt;code&gt;deletes_from_union&lt;/code&gt;, more on that later) which marks which characters of the union string are deleted. These deleted characters are sometimes called &quot;tombstones&quot; both within Xi and the academic CRDT literature.&lt;/p&gt;
&lt;p&gt;If we wanted to go from the &quot;union string&quot; to the current text of the document, you'd delete the characters marked in &lt;code&gt;deletes_from_union&lt;/code&gt; from the union string. The problem is, Xi access the current text &lt;strong&gt;very often&lt;/strong&gt;, so this would be an inefficient way to actually store the text for large documents.&lt;/p&gt;
&lt;p&gt;As an optimization, we store the union string as two separate parts: &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;tombstones&lt;/code&gt;. The &lt;code&gt;text&lt;/code&gt; stores the current visible document contents, so it is really fast to access, and &lt;code&gt;tombstones&lt;/code&gt; stores all the characters that are currently in the &lt;code&gt;deletes_from_union&lt;/code&gt; set. We still store the &lt;code&gt;deletes_from_union&lt;/code&gt; set to mark deleted characters. Note that the union string is still used for most indices as a coordinate space for &lt;code&gt;Subset&lt;/code&gt;s like &lt;code&gt;deletes_from_union&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's an example of what this looks like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;union string:       abcdefgh
deletes_from_union: -+---+-+
text:               acdeg
tombstones:         bfh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We can now also look at &lt;code&gt;deletes_from_union&lt;/code&gt; as describing the interleaving of characters from &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;tombstones&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;text:               a cde g
deletes_from_union: -+---+-+
tombstones:          b   f h
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The union string is still an important and useful concept because it makes a lot of the operations easier to implement and understand. Almost all explanations will be in terms of the union string, if you want you can largely ignore that fact that it's actually stored as two separate parts. Most operations are done in terms of the union string and then at the very end they shuffle some things around between the current &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;tombstones&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Revision&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Revision&lt;/span&gt; {
    &lt;span class=&quot;pl-c&quot;&gt;/// This uniquely represents the identity of this revision and it stays&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;/// the same even if it is rebased or merged between devices.&lt;/span&gt;
    rev_id: RevId,
    &lt;span class=&quot;pl-c&quot;&gt;/// The largest undo group number of any edit in the history up to this&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;/// point. Used to optimize undo to not look further back.&lt;/span&gt;
    max_undo_so_far: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;,
    edit: Contents,
}

&lt;span class=&quot;pl-k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Contents&lt;/span&gt; {
    Edit {
        &lt;span class=&quot;pl-c&quot;&gt;/// Used to order concurrent inserts, for example auto-indentation&lt;/span&gt;
        &lt;span class=&quot;pl-c&quot;&gt;/// should go before typed text.&lt;/span&gt;
        priority: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;,
        &lt;span class=&quot;pl-c&quot;&gt;/// Groups related edits together so that they are undone and re-done&lt;/span&gt;
        &lt;span class=&quot;pl-c&quot;&gt;/// together. For example, an auto-indent insertion would be un-done&lt;/span&gt;
        &lt;span class=&quot;pl-c&quot;&gt;/// along with the newline that triggered it.&lt;/span&gt;
        undo_group: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;,
        &lt;span class=&quot;pl-c&quot;&gt;/// The subset of the characters of the union string from after this&lt;/span&gt;
        &lt;span class=&quot;pl-c&quot;&gt;/// revision that were added by this revision.&lt;/span&gt;
        inserts: Subset,
        &lt;span class=&quot;pl-c&quot;&gt;/// The subset of the characters of the union string from after this&lt;/span&gt;
        &lt;span class=&quot;pl-c&quot;&gt;/// revision that were deleted by this revision.&lt;/span&gt;
        deletes: Subset,
    },
    Undo {
        &lt;span class=&quot;pl-c&quot;&gt;/// The set of groups toggled between undone and done.&lt;/span&gt;
        &lt;span class=&quot;pl-c&quot;&gt;/// Just the `symmetric_difference` (XOR) of the two sets.&lt;/span&gt;
        toggled_groups: BTreeSet&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;,  &lt;span class=&quot;pl-c&quot;&gt;// set of undo_group id's&lt;/span&gt;
        &lt;span class=&quot;pl-c&quot;&gt;/// Used to store a reversible difference between the deleted&lt;/span&gt;
        &lt;span class=&quot;pl-c&quot;&gt;/// characters before and after this operation.&lt;/span&gt;
        deletes_bitxor: Subset,
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Revision&lt;/code&gt;s represent a single edit to the document. Typing a character into a Xi document will create a new &lt;code&gt;Revision&lt;/code&gt; with a &lt;code&gt;Contents::Edit&lt;/code&gt; with an empty &lt;code&gt;deletes&lt;/code&gt; subset and an &lt;code&gt;inserts&lt;/code&gt; subset containing the character inserted.&lt;/p&gt;
&lt;p&gt;They can also represent more complex things like selecting multiple ranges of text using multiple cursors (which Xi supports) and then pasting. This would result in a &lt;code&gt;Contents::Edit&lt;/code&gt; with an &lt;code&gt;inserts&lt;/code&gt; subset containing multiple separate segments of pasted characters, and a &lt;code&gt;deletes&lt;/code&gt; subset containing the multiple ranges of previous text that were replaced.&lt;/p&gt;
&lt;p&gt;Note that the &lt;code&gt;inserts&lt;/code&gt; and &lt;code&gt;deletes&lt;/code&gt; &lt;code&gt;Subset&lt;/code&gt;s are based on the union string from after the &lt;code&gt;Revision&lt;/code&gt; is applied. The fact that the union string includes deleted characters allows insertions and deletions to maintain their position easily in the face of concurrency and undo. For example, say I have the text &quot;ac&quot; and I change it to &quot;abc&quot;, but then undo the first edit leaving &quot;b&quot;. If I re-do the first edit, Xi needs to know that the &quot;b&quot; goes between the two deleted characters. You might be able to think of ways to do this with other coordinates, but it's much easier and less fraught when coordinates only change on insertions instead of insertions, deletions and undo.&lt;/p&gt;
&lt;p&gt;A key property of &lt;code&gt;Revision&lt;/code&gt;s is that they contain all the necessary information to apply them as well as reverse them. This is important both for undo and also for some operations we'll get to later. This is why &lt;code&gt;Contents::undo&lt;/code&gt; stores the set of toggled groups rather than the new set of undone groups. It's also why it stores a reversible set of changes to the deleted characters (more on those later), this could be found by replaying all of history using the new set of undo groups, but then it would be inefficient to apply and reverse (because it would be proportional to the length of history).&lt;/p&gt;
&lt;h3&gt;RevId &amp;amp; RevToken&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;RevId&lt;/span&gt; {
    &lt;span class=&quot;pl-c&quot;&gt;// 96 bits has a 10^(-12) chance of collision with 400 million sessions and 10^(-6) with 100 billion.&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;// `session1==session2==0` is reserved for initialization which is the same on all sessions.&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;// A colliding session will break merge invariants and the document will start crashing Xi.&lt;/span&gt;
    session1: &lt;span class=&quot;pl-k&quot;&gt;u64&lt;/span&gt;,
    &lt;span class=&quot;pl-c&quot;&gt;// if this was a tuple field instead of two fields, alignment padding would add 8 more bytes.&lt;/span&gt;
    session2: &lt;span class=&quot;pl-k&quot;&gt;u32&lt;/span&gt;,
    &lt;span class=&quot;pl-c&quot;&gt;// There will probably never be a document with more than 4 billion edits&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;// in a single session.&lt;/span&gt;
    num: &lt;span class=&quot;pl-k&quot;&gt;u32&lt;/span&gt;,
}

&lt;span class=&quot;pl-c&quot;&gt;/// Valid within a session. If there's a collision the most recent matching&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Revision will be used, which means only the (small) set of concurrent edits&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// could trigger incorrect behavior if they collide, so u64 is safe.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;RevToken&lt;/span&gt; = &lt;span class=&quot;pl-k&quot;&gt;u64&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;RevId&lt;/code&gt; is used to uniquely identify the revision. The trick is offline devices have to be able to generate non-colliding IDs, which they do by generating random &quot;session IDs&quot; that become part of their revision numbers for that execution, with &lt;code&gt;num&lt;/code&gt; being just an incrementing counter. The reason the IDs aren't fully random is so that eventually we can delta-compress them and the IDs will take on average 1 bit per revision instead of 128 bits. This is only necessary for the multi-device syncing case, in the single-device case the session ID is always &lt;code&gt;(1,0)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RevToken&lt;/code&gt; is used to make the API simpler, it is just the hash of a &lt;code&gt;RevId&lt;/code&gt;. This makes things easy for plugins and other things that need to reference revisions.&lt;/p&gt;
&lt;h3&gt;Engine&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Represents the current state of a document and all of its history&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Engine&lt;/span&gt; {
    &lt;span class=&quot;pl-c&quot;&gt;/// The session ID used to create new `RevId`s for edits made on this device&lt;/span&gt;
    session: SessionId,
    &lt;span class=&quot;pl-c&quot;&gt;/// The incrementing revision number counter for this session used for `RevId`s&lt;/span&gt;
    rev_id_counter: &lt;span class=&quot;pl-k&quot;&gt;u32&lt;/span&gt;,
    &lt;span class=&quot;pl-c&quot;&gt;/// The current contents of the document as would be displayed on screen&lt;/span&gt;
    text: Rope,
    &lt;span class=&quot;pl-c&quot;&gt;/// Storage for all the characters that have been deleted  but could&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;/// return if a delete is un-done or an insert is re- done.&lt;/span&gt;
    tombstones: Rope,
    &lt;span class=&quot;pl-c&quot;&gt;/// Imagine a &quot;union string&quot; that contained all the characters ever&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;/// inserted, including the ones that were later deleted, in the locations&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;/// they would be if they hadn't been deleted.&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;///&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;/// This is a `Subset` of the &quot;union string&quot; representing the characters&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;/// that are currently deleted, and thus in `tombstones` rather than&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;/// `text`. The count of a character in `deletes_from_union` represents&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;/// how many times it has been deleted, so if a character is deleted twice&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;/// concurrently it will have count `2` so that undoing one delete but not&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;/// the other doesn't make it re-appear.&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;///&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;/// You could construct the &quot;union string&quot; from `text`, `tombstones` and&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;/// `deletes_from_union` by splicing a segment of `tombstones` into `text`&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;/// wherever there's a non-zero-count segment in `deletes_from_union`.&lt;/span&gt;
    deletes_from_union: Subset,
    undone_groups: BTreeSet&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;,  &lt;span class=&quot;pl-c&quot;&gt;// set of undo_group id's&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;/// The revision history of the document&lt;/span&gt;
    revs: &lt;span class=&quot;pl-k&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;Revision&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;,
}

&lt;span class=&quot;pl-c&quot;&gt;/// the session ID component of a `RevId`&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;SessionId&lt;/span&gt; = (&lt;span class=&quot;pl-k&quot;&gt;u64&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;u32&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Engine&lt;/code&gt; is the top-level container of text state for the CRDT. It stores the current state of the document and all the &lt;code&gt;Revision&lt;/code&gt;s that lead up to it. This allows operations that require knowledge of history to apply &lt;code&gt;Revision&lt;/code&gt;s in reverse from the current state to find the state at a point in the past, without having to store the state at every point in history. Be sure to read the code in this case, all the fields are described by doc comments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SUPER IMPORTANT INSIGHT:&lt;/strong&gt; Because the union string preserves the textual ordering of inserted characters, indices in the union string only depend on the set of inserted characters and not what order they were added in the history. This means that the correct representation of a &lt;code&gt;Revision&lt;/code&gt; for a given edit &lt;em&gt;doesn't depend on the order&lt;/em&gt; of &lt;code&gt;Revision&lt;/code&gt;s before it in the history, only what &lt;em&gt;set&lt;/em&gt; of &lt;code&gt;Revision&lt;/code&gt;s is before it.&lt;/p&gt;
&lt;h3&gt;Example History&lt;/h3&gt;
&lt;p&gt;Bringing it all together, here's a sketch of how a simple editing scenario would be represented this way.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/representation-overview.png&quot;&gt;&lt;img src=&quot;https://github.com/google/xi-editor/raw/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/representation-overview.png&quot; alt=&quot;Representation example&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Shown below is a longer history of &lt;code&gt;Edit&lt;/code&gt; &lt;code&gt;Revision&lt;/code&gt;s. At each point, the &lt;code&gt;inserts&lt;/code&gt; and &lt;code&gt;deletes&lt;/code&gt; &lt;code&gt;Subset&lt;/code&gt;s of the &lt;code&gt;Revision&lt;/code&gt; that was just added are shown. Below that is what the contents of &lt;code&gt;Engine&lt;/code&gt; would be immediately after that &lt;code&gt;Revision&lt;/code&gt; was added to it.&lt;/p&gt;
&lt;p&gt;Also included is a &quot;Concepts&quot; section that includes things that aren't actually stored but are useful for understanding the representation. This includes the &quot;union&quot; string that all indices are based on. It also includes &lt;code&gt;back_computed_deletions_from_6_union&lt;/code&gt;, which is like &lt;code&gt;deletes_from_union&lt;/code&gt; except instead of being based on the union at the time of the edit, it is based on the union of &lt;code&gt;Revision&lt;/code&gt; 6. This shows that since we never throw away information, we can represent the &lt;code&gt;text&lt;/code&gt; at any past &lt;code&gt;Revision&lt;/code&gt; as a set of deletions from the union string of any later revision.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;()  Revision: before any revisions are made
    Engine:   text=&quot;&quot; tombstones=&quot;&quot; deletes_from_union={}
    Concepts: union=&quot;&quot; back_computed_deletions_from_6_union={0,1,2,3,4,5}
(1) Revision: inserts={0, 1, 2} deletes={}
    Engine:   text=&quot;123&quot; tombstones=&quot;&quot; deletes_from_union={}
    Concepts: union=&quot;123&quot; back_computed_deletions_from_6_union={0,1,2}
(2) Revision: inserts={} deletes={0, 1, 2}
    Engine:   text=&quot;&quot; tombstones=&quot;123&quot; deletes_from_union={0,1,2}
    Concepts: union=&quot;123&quot; back_computed_deletions_from_6_union={0,1,2,3,4,5}
(3) Revision: inserts={0} deletes={}
    Engine:   text=&quot;a&quot; tombstones=&quot;123&quot; deletes_from_union={1,2,3}
    Concepts: union=&quot;a123&quot; back_computed_deletions_from_6_union={1,2,3,4,5}
(4) Revision: inserts={1} deletes={}
    Engine:   text=&quot;ab&quot; tombstones=&quot;123&quot; deletes_from_union={2,3,4}
    Concepts: union=&quot;ab123&quot; back_computed_deletions_from_6_union={1,3,4,5}
(5) Revision: inserts={1} deletes={}
    Engine:   text=&quot;axb&quot; tombstones=&quot;123&quot; deletes_from_union={3,4,5}
    Concepts: union=&quot;axb123&quot; back_computed_deletions_from_6_union={3,4,5}
(6) Revision: inserts={} deletes={1}
    Engine:   text=&quot;ab&quot; tombstones=&quot;x123&quot; deletes_from_union={1,3,4,5}
    Concepts: union=&quot;axb123&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Operations&lt;/h2&gt;
&lt;p&gt;Now that you know what we have to work with, let's go over the operations that &lt;code&gt;Engine&lt;/code&gt; supports. Each of these operations relies on a bunch of different shared helpers, as we go from the simplest operations to the most complex, we'll gradually build up the set of helpers we use.&lt;/p&gt;
&lt;p&gt;After describing how each operation or helper works there'll often be a code block with the actual function, it isn't necessary to understand the code and it may have complications that aren't mentioned, so feel free to skip them, they're there if you want to confirm or enhance your understanding.&lt;/p&gt;
&lt;h3&gt;Subset helpers&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Subset&lt;/code&gt; has a number of operations that produce new &lt;code&gt;Subset&lt;/code&gt;s, these form the core of most work the CRDT operations do. It's better to explain them together near the start since they're used everywhere:&lt;/p&gt;
&lt;h4&gt;Subset::union&lt;/h4&gt;
&lt;p&gt;Takes two &lt;code&gt;Subset&lt;/code&gt;s and produces a new &lt;code&gt;Subset&lt;/code&gt; of the same string where each character has the sum of the counts it has in each input. When treating a &lt;code&gt;Subset&lt;/code&gt; as a normal set, this is just the union.&lt;/p&gt;
&lt;h4&gt;Subset::transform_expand&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Subset::transform_expand&lt;/code&gt; takes a &lt;code&gt;Subset&lt;/code&gt; and another &quot;transform&quot; &lt;code&gt;Subset&lt;/code&gt; and transforms the first &lt;code&gt;Subset&lt;/code&gt; through the coordinate transform represented by the &quot;transform&quot;. Now what does this mean:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Revision&lt;/code&gt;s are never modified, and their &lt;code&gt;Edit&lt;/code&gt;s always refer to the union string that existed when they were created. For operations on multiple &lt;code&gt;Revision&lt;/code&gt;s, we have to be able to map coordinates in one's union string to coordinates in another's. We can deal with this by treating &lt;code&gt;Subset&lt;/code&gt;s of inserted characters as coordinate transforms. Since the only difference to the union string is the inserted characters, if we can map the coordinates of a &lt;code&gt;Subset&lt;/code&gt; from one union string to another, we can work with edits from multiple &lt;code&gt;Revision&lt;/code&gt;s together.&lt;/p&gt;
&lt;p&gt;We can do this by &quot;expanding&quot; the indices in a &lt;code&gt;Subset&lt;/code&gt; after each insert by the size of that insert, where the inserted characters are the &quot;transform&quot;. Conceptually if a &lt;code&gt;Subset&lt;/code&gt; represents the set of characters in a string that were inserted by an edit, then it can be used as a transform from the coordinate space before that edit to after that edit by mapping a &lt;code&gt;Subset&lt;/code&gt; of the string before the insertion onto the 0-count regions of the transform &lt;code&gt;Subset&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The actual procedure works by iterating over the segments of the transform:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;When it encounters a 0-count segment it keeps putting (potentially partial) segments from &lt;code&gt;self&lt;/code&gt; into the output until it fills its size.&lt;/li&gt;
&lt;li&gt;When it encounters a non-0-count transform segment it outputs a 0-count segment of the same size.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The &lt;code&gt;SubsetBuilder&lt;/code&gt; used for the output automatically merges consecutive segments that have the same count. See the diagram below for how this plays out:&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/trans-expand-1.png&quot;&gt;&lt;img src=&quot;https://github.com/google/xi-editor/raw/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/trans-expand-1.png&quot; alt=&quot;transform_expand workings&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One example of how this can be used is to find the characters that were inserted by a past &lt;code&gt;Revision&lt;/code&gt; in the coordinates of the current union string instead of the past one:&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/trans-expand-2.png&quot;&gt;&lt;img src=&quot;https://github.com/google/xi-editor/raw/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/trans-expand-2.png&quot; alt=&quot;transform_expand usage&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Map the contents of `self` into the 0-regions of `other`.&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Precondition: `self.count(CountMatcher::All) == other.count(CountMatcher::Zero)`&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;transform&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;, other: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;Subset, union: &lt;span class=&quot;pl-k&quot;&gt;bool&lt;/span&gt;) -&amp;gt; Subset {
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; sb &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; SubsetBuilder&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;new&lt;/span&gt;();
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; seg_iter &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.segments.&lt;span class=&quot;pl-en&quot;&gt;iter&lt;/span&gt;();
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; cur_seg &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; Segment {len: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, count: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;};
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; oseg &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;other.segments {
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; oseg.count &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; {
            sb.&lt;span class=&quot;pl-en&quot;&gt;push_segment&lt;/span&gt;(oseg.len, &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; union { oseg.count } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; });
        } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;pl-c&quot;&gt;// fill 0-region with segments from self.&lt;/span&gt;
            &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; to_be_consumed &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; oseg.len;
            &lt;span class=&quot;pl-k&quot;&gt;while&lt;/span&gt; to_be_consumed &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; {
                &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; cur_seg.len &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; {
                    cur_seg &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; seg_iter.&lt;span class=&quot;pl-en&quot;&gt;next&lt;/span&gt;().&lt;span class=&quot;pl-en&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&quot;self must cover all 0-regions of other&quot;&lt;/span&gt;).&lt;span class=&quot;pl-en&quot;&gt;clone&lt;/span&gt;();
                }
                &lt;span class=&quot;pl-c&quot;&gt;// consume as much of the segment as possible and necessary&lt;/span&gt;
                &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; to_consume &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; cmp&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;min&lt;/span&gt;(cur_seg.len,to_be_consumed);
                sb.&lt;span class=&quot;pl-en&quot;&gt;push_segment&lt;/span&gt;(to_consume,cur_seg.count);
                to_be_consumed &lt;span class=&quot;pl-k&quot;&gt;-=&lt;/span&gt; to_consume;
                cur_seg.len &lt;span class=&quot;pl-k&quot;&gt;-=&lt;/span&gt; to_consume;
            }
        }
    }
    &lt;span class=&quot;pl-c1&quot;&gt;assert_eq!&lt;/span&gt;(cur_seg.len, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&quot;the 0-regions of other must be the size of self&quot;&lt;/span&gt;);
    &lt;span class=&quot;pl-c1&quot;&gt;assert_eq!&lt;/span&gt;(seg_iter.&lt;span class=&quot;pl-en&quot;&gt;next&lt;/span&gt;(), &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&quot;the 0-regions of other must be the size of self&quot;&lt;/span&gt;);
    sb.&lt;span class=&quot;pl-en&quot;&gt;build&lt;/span&gt;()
}

&lt;span class=&quot;pl-c&quot;&gt;/// Transform through coordinate transform represented by other.&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// The equation satisfied is as follows:&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;///&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// s1 = other.delete_from_string(s0)&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;///&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// s2 = self.delete_from_string(s1)&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;///&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// element in self.transform_expand(other).delete_from_string(s0) if (not in s1) or in s2&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;transform_expand&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;, other: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;Subset) -&amp;gt; Subset {
    &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;transform&lt;/span&gt;(other, &lt;span class=&quot;pl-c1&quot;&gt;false&lt;/span&gt;)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Subset::transform_union&lt;/h4&gt;
&lt;p&gt;Like &lt;code&gt;transform_expand&lt;/code&gt; except it preserves the non-zero segments of the transform instead of mapping them to 0-segments. This is the same as &lt;code&gt;transform_expand&lt;/code&gt;ing and then taking the &lt;code&gt;union&lt;/code&gt; with the transform, but more efficient. These two operations are frequently chained so a shortcut is useful, for example to transform a set of deletions to the coordinate space including some new characters, while also adding those insertions to the deleted set. So:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
a.&lt;span class=&quot;pl-en&quot;&gt;transform_union&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;b) &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; a.&lt;span class=&quot;pl-en&quot;&gt;transform_expand&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;b).&lt;span class=&quot;pl-en&quot;&gt;union&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;b)
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Subset::transform_shrink&lt;/h4&gt;
&lt;p&gt;The reverse of &lt;code&gt;Subset::transform_expand&lt;/code&gt;. It takes a &lt;code&gt;Subset&lt;/code&gt; and a transform &lt;code&gt;Subset&lt;/code&gt; that are based on the same string and removes sections of the former that align with non-zero segments of the latter. In most uses these sections of the former always have count 0 (otherwise this transform would lose information), but there are some things like garbage collection that intentionally use this to discard information.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Transform subset through other coordinate transform, shrinking.&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// The following equation is satisfied:&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;///&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// C = A.transform_expand(B)&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;///&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// B.transform_shrink(C).delete_from_string(C.delete_from_string(s)) =&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;///   A.delete_from_string(B.delete_from_string(s))&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;transform_shrink&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;, other: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;Subset) -&amp;gt; Subset {
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; sb &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; SubsetBuilder&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;new&lt;/span&gt;();
    &lt;span class=&quot;pl-c&quot;&gt;// discard ZipSegments where the shrinking set has positive count&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; zseg &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;zip&lt;/span&gt;(other) {
        &lt;span class=&quot;pl-c&quot;&gt;// TODO: should this actually do something like subtract counts?&lt;/span&gt;
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; zseg.b_count &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; {
            sb.&lt;span class=&quot;pl-en&quot;&gt;push_segment&lt;/span&gt;(zseg.len, zseg.a_count);
        }
    }
    sb.&lt;span class=&quot;pl-en&quot;&gt;build&lt;/span&gt;()
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Engine::get_rev&lt;/h3&gt;
&lt;p&gt;This operation is used in the plugin API and is probably the simplest operation, but it still relies on a lot of sub-steps that are shared with other operations.&lt;/p&gt;
&lt;p&gt;The idea behind how it works is that we already have all the characters we need in the &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;tombstones&lt;/code&gt; &lt;code&gt;Rope&lt;/code&gt;s we store, but some of the characters from the past revision might have been deleted, and some new characters might have been inserted that weren't in the past revision. We need to find a way to delete the newer insertions from &lt;code&gt;text&lt;/code&gt; and insert the things that weren't deleted at the past point from where they are in &lt;code&gt;tombstones&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The way we describe the current state of &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;tombstones&lt;/code&gt; relative to the &quot;union string&quot; is with &lt;code&gt;deletes_from_union&lt;/code&gt; (see &lt;a href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/crdt-details.md#engine&quot;&gt;Engine&lt;/a&gt;), so what if we could find a similar &lt;code&gt;old_deletes_from_cur_union&lt;/code&gt; that represented what the old revision's text looked like relative to the current union string. This would be the same as our current &lt;code&gt;deletes_from_union&lt;/code&gt; except characters inserted after the old revision would be marked deleted and newer deletes would be un-marked. The function that finds this is &lt;code&gt;Engine::deletes_from_cur_union_for_index&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once we have this &lt;code&gt;old_deletes_from_cur_union&lt;/code&gt; and a new &lt;code&gt;deletes_from_union&lt;/code&gt;, we need a way to take our current &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;tombstones&lt;/code&gt; and get a &lt;code&gt;Rope&lt;/code&gt; of what the &lt;code&gt;text&lt;/code&gt; would have looked like at that old revision. We can do this by performing inserts and deletes on the &lt;code&gt;text&lt;/code&gt; &lt;code&gt;Rope&lt;/code&gt; based on the differences between the old and new deletions. We already have a way of describing inserts and deletes (a &lt;code&gt;Delta&lt;/code&gt;), and we can create one using a helper called &lt;code&gt;Delta::synthesize&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then we just have to apply the &lt;code&gt;Delta&lt;/code&gt; we synthesized to the current &lt;code&gt;text&lt;/code&gt;, returning the resulting old text.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Get text of a given revision, if it can be found.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;get_rev&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;, rev: RevToken) -&amp;gt; &lt;span class=&quot;pl-k&quot;&gt;Option&lt;/span&gt;&amp;lt;Rope&amp;gt; {
    &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;find_rev_token&lt;/span&gt;(rev).&lt;span class=&quot;pl-en&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;rev_index&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;rev_content_for_index&lt;/span&gt;(rev_index))
}

&lt;span class=&quot;pl-c&quot;&gt;/// Get text of a given revision, if it can be found.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;rev_content_for_index&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;, rev_index: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;) -&amp;gt; Rope {
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; old_deletes_from_union &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;deletes_from_cur_union_for_index&lt;/span&gt;(rev_index);
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; delta &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; Delta&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;synthesize&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.tombstones,
        &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.deletes_from_union, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;old_deletes_from_union);
    delta.&lt;span class=&quot;pl-en&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.text)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Engine::deletes_from_cur_union_for_index&lt;/h4&gt;
&lt;p&gt;If you look back at the &lt;a href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/crdt-details.md#example-history&quot;&gt;example history scenario&lt;/a&gt;, you'll see &lt;code&gt;back_computed_deletions_from_6_union&lt;/code&gt;, which shows that for any past &lt;code&gt;Revision&lt;/code&gt; we can find a set of deletions from the current union string that result in the past text. This helper is what computes deletion sets like &lt;a href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/crdt-details.md#example-history&quot;&gt;&lt;code&gt;back_computed_deletions_from_6_union&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We can find an &lt;code&gt;old_deletes_from_cur_union&lt;/code&gt; by taking our current &lt;code&gt;deletes_from_union&lt;/code&gt; and walking backwards through our list of &lt;code&gt;Revision&lt;/code&gt;s undoing the changes they have made since the old revision.&lt;/p&gt;
&lt;p&gt;There's a problem with this though, the &lt;code&gt;inserts&lt;/code&gt; and &lt;code&gt;deletes&lt;/code&gt; subsets for a &lt;code&gt;Revision&lt;/code&gt; use indices in the coordinate space of the union string at the time the &lt;code&gt;Revision&lt;/code&gt; was created, which may be smaller than our current union string.&lt;/p&gt;
&lt;p&gt;We could keep track of the transform and account for it, but it's easier to use a helper we need anyway elsewhere that computes what the &lt;code&gt;deletes_from_union&lt;/code&gt; actually would have been at that previous point in time, that is, relative to the old union string not the current one like we want. This helper is called &lt;code&gt;Engine::deletes_from_union_for_index&lt;/code&gt; and it performs the work of un-deleting and un-undoing everything after the old revision.&lt;/p&gt;
&lt;p&gt;Then we can take this &lt;code&gt;old_deletes_from_union&lt;/code&gt; and &lt;code&gt;Subset::transform_union&lt;/code&gt; it through the &lt;code&gt;inserts&lt;/code&gt; since that old revision to get the &lt;code&gt;old_deletes_from_cur_union&lt;/code&gt; we wanted. This puts it in the right coordinate space and the &lt;code&gt;union&lt;/code&gt; part of &lt;code&gt;transform_union&lt;/code&gt; makes sure that new inserts are considered as deleted (so not present) in &lt;code&gt;old_deletes_from_cur_union&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Get the Subset to delete from the current union string in order to obtain a revision's content&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;deletes_from_cur_union_for_index&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;, rev_index: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;) -&amp;gt; Cow&amp;lt;Subset&amp;gt; {
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; deletes_from_union &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;deletes_from_union_for_index&lt;/span&gt;(rev_index);
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; rev &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.revs[rev_index &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;..] {
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; Edit { &lt;span class=&quot;pl-k&quot;&gt;ref&lt;/span&gt; inserts, .. } &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; rev.edit {
            &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;inserts.&lt;span class=&quot;pl-en&quot;&gt;is_empty&lt;/span&gt;() {
                deletes_from_union &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; Cow&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;Owned&lt;/span&gt;(deletes_from_union.&lt;span class=&quot;pl-en&quot;&gt;transform_union&lt;/span&gt;(inserts));
            }
        }
    }
    deletes_from_union
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Engine::deletes_from_union_for_index&lt;/h4&gt;
&lt;p&gt;This function uses the property that each &lt;code&gt;Revision&lt;/code&gt; contains the information necessary to reverse it, in order to work backwards from the current state of &lt;code&gt;deletes_from_union&lt;/code&gt; to the past state. For every &lt;code&gt;Edit&lt;/code&gt; revision it &lt;code&gt;subtract&lt;/code&gt;s the &lt;code&gt;deletes&lt;/code&gt; (meaning if something was deleted twice, this will only reverse one), but only if they weren't undone, and then uses &lt;code&gt;transform_shrink&lt;/code&gt; to reverse the coordinate transform of the &lt;code&gt;inserts&lt;/code&gt; so that the indices in the intermediate &lt;code&gt;old_deletes_from_union&lt;/code&gt; refer to the previous union string. &lt;code&gt;Undo&lt;/code&gt; edits store the symmetric differences of the &lt;code&gt;deletes_from_union&lt;/code&gt; and the currently undone groups, so those are just reversed.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Find what the `deletes_from_union` field in Engine would have been at the time&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// of a certain `rev_index`. In other words, the deletes from the union string at that time.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;deletes_from_union_for_index&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;, rev_index: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;) -&amp;gt; Cow&amp;lt;Subset&amp;gt; {
    &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;deletes_from_union_before_index&lt;/span&gt;(rev_index &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;)
}

&lt;span class=&quot;pl-c&quot;&gt;/// Garbage collection means undo can sometimes need to replay the very first&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// revision, and so needs a way to get the deletion set before then.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;deletes_from_union_before_index&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;, rev_index: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;, invert_undos: &lt;span class=&quot;pl-k&quot;&gt;bool&lt;/span&gt;) -&amp;gt; Cow&amp;lt;Subset&amp;gt; {
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; deletes_from_union &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; Cow&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;Borrowed&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.deletes_from_union);
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; undone_groups &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; Cow&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;Borrowed&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.undone_groups);

    &lt;span class=&quot;pl-c&quot;&gt;// invert the changes to deletes_from_union starting in the present and working backwards&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; rev &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.revs[rev_index..].&lt;span class=&quot;pl-en&quot;&gt;iter&lt;/span&gt;().&lt;span class=&quot;pl-en&quot;&gt;rev&lt;/span&gt;() {
        deletes_from_union &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;match&lt;/span&gt; rev.edit {
            Edit { &lt;span class=&quot;pl-k&quot;&gt;ref&lt;/span&gt; inserts, &lt;span class=&quot;pl-k&quot;&gt;ref&lt;/span&gt; deletes, &lt;span class=&quot;pl-k&quot;&gt;ref&lt;/span&gt; undo_group, .. } &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
                &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; undone_groups.&lt;span class=&quot;pl-en&quot;&gt;contains&lt;/span&gt;(undo_group) {
                    &lt;span class=&quot;pl-c&quot;&gt;// no need to un-delete undone inserts since we'll just shrink them out&lt;/span&gt;
                    Cow&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;Owned&lt;/span&gt;(deletes_from_union.&lt;span class=&quot;pl-en&quot;&gt;transform_shrink&lt;/span&gt;(inserts))
                } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
                    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; un_deleted &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; deletes_from_union.&lt;span class=&quot;pl-en&quot;&gt;subtract&lt;/span&gt;(deletes);
                    Cow&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;Owned&lt;/span&gt;(un_deleted.&lt;span class=&quot;pl-en&quot;&gt;transform_shrink&lt;/span&gt;(inserts))
                }
            }
            Undo { &lt;span class=&quot;pl-k&quot;&gt;ref&lt;/span&gt; toggled_groups, &lt;span class=&quot;pl-k&quot;&gt;ref&lt;/span&gt; deletes_bitxor } &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
                &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; invert_undos {
                    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; new_undone &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; undone_groups.&lt;span class=&quot;pl-en&quot;&gt;symmetric_difference&lt;/span&gt;(toggled_groups).&lt;span class=&quot;pl-en&quot;&gt;cloned&lt;/span&gt;().&lt;span class=&quot;pl-en&quot;&gt;collect&lt;/span&gt;();
                    undone_groups &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; Cow&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;Owned&lt;/span&gt;(new_undone);
                    Cow&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;Owned&lt;/span&gt;(deletes_from_union.&lt;span class=&quot;pl-en&quot;&gt;bitxor&lt;/span&gt;(deletes_bitxor))
                } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
                    deletes_from_union
                }
            }
        }
    }
    deletes_from_union
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Delta::synthesize&lt;/h4&gt;
&lt;p&gt;This function is just a big hand-written triply-nested looping algorithm that loops over a &lt;code&gt;from_dels&lt;/code&gt; and &lt;code&gt;to_dels&lt;/code&gt; subset and uses a &lt;code&gt;tombstones&lt;/code&gt; to construct a &lt;code&gt;Delta&lt;/code&gt;. It's not particularly interesting, easy or worthwhile to understand.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Synthesize a delta from a &quot;union string&quot; and two subsets: an old set&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// of deletions and a new set of deletions from the union. The Delta is&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// from text to text, not union to union; anything in both subsets will&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// be assumed to be missing from the Delta base and the new text. You can&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// also think of these as a set of insertions and one of deletions, with&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// overlap doing nothing. This is basically the inverse of `factor`.&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;///&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Since only the deleted portions of the union string are necessary,&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// instead of requiring a union string the function takes a `tombstones`&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// rope which contains the deleted portions of the union string. The&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// `from_dels` subset must be the interleaving of `tombstones` into the&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// union string.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;synthesize&lt;/span&gt;(tombstones: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;Node&amp;lt;N&amp;gt;, from_dels: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;Subset, to_dels: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;Subset) -&amp;gt; Delta&amp;lt;N&amp;gt; {
  &lt;span class=&quot;pl-c&quot;&gt;// ...&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Engine::delta_rev_head&lt;/h3&gt;
&lt;p&gt;This operation is similar to &lt;code&gt;Engine::get_head&lt;/code&gt; except it returns a &lt;code&gt;Delta&lt;/code&gt; from the text at a specified revision to the current head text. This is useful for things like updating the position of cursors and rich text spans when edits are made.&lt;/p&gt;
&lt;p&gt;Like &lt;code&gt;Engine::get_head&lt;/code&gt; it starts by calling &lt;code&gt;Engine::deletes_from_cur_union_for_index&lt;/code&gt; to get a &lt;code&gt;Subset&lt;/code&gt; describing the state of the text at the old revision relative to the current union string. Now we can just use &lt;code&gt;Delta::synthesize&lt;/code&gt; to create a &lt;code&gt;Delta&lt;/code&gt; from the old to the new &lt;code&gt;deletes_from_union&lt;/code&gt;. The problem is, &lt;code&gt;Delta::synthesize&lt;/code&gt; expects the tombstones &lt;code&gt;Rope&lt;/code&gt; you give it to correspond to &lt;code&gt;from_dels&lt;/code&gt;, but we have one for &lt;code&gt;to_dels&lt;/code&gt;. To fix this, we can use a helper called &lt;code&gt;shuffle_tombstones&lt;/code&gt; to move characters in and out of the tombstones to get an &lt;code&gt;old_tombstones&lt;/code&gt; corresponding to &lt;code&gt;from_dels&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;shuffle_tombstones&lt;/h4&gt;
&lt;p&gt;Constructing a &lt;code&gt;tombstones&lt;/code&gt; to go with an older &lt;code&gt;deletes_from_union&lt;/code&gt; given the current &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;tombstones&lt;/code&gt; and &lt;code&gt;deletes_from_union&lt;/code&gt; may involve moving characters from &lt;code&gt;text&lt;/code&gt; to the old &lt;code&gt;tombstones&lt;/code&gt;, and removing characters from the &lt;code&gt;tombstones&lt;/code&gt; that weren't deleted at the time. We can describe the necessary changes using a &lt;code&gt;Delta&lt;/code&gt;, but how do we create it?&lt;/p&gt;
&lt;p&gt;We can note that since the 0-segments of &lt;code&gt;deletes_from_union&lt;/code&gt; correspond to characters in &lt;code&gt;text&lt;/code&gt; and the non-zero segments correspond to characters in &lt;code&gt;tombstones&lt;/code&gt;, if we take the complement (0 becomes 1, non-zero becomes 0) of &lt;code&gt;deletes_from_union&lt;/code&gt; we can use helpers designed for use with tombstones on &lt;code&gt;text&lt;/code&gt; and vice-versa. So we can use &lt;code&gt;Delta::synthesize&lt;/code&gt; with the &lt;code&gt;text&lt;/code&gt; (where you would normally put the tombstones) and the complement of the old and new &lt;code&gt;deletes_from_union&lt;/code&gt; to create the required &lt;code&gt;Delta&lt;/code&gt; of the &lt;code&gt;tombstones&lt;/code&gt; when it normally creates deltas of &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Move sections from text to tombstones and out of tombstones based on a new and old set of deletions&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;shuffle_tombstones&lt;/span&gt;(text: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;Rope, tombstones: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;Rope,
        old_deletes_from_union: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;Subset, new_deletes_from_union: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;Subset) -&amp;gt; Rope {
    &lt;span class=&quot;pl-c&quot;&gt;// Taking the complement of deletes_from_union leads to an interleaving valid for swapped text and tombstones,&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;// allowing us to use the same method to insert the text into the tombstones.&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; inverse_tombstones_map &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; old_deletes_from_union.&lt;span class=&quot;pl-en&quot;&gt;complement&lt;/span&gt;();
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; move_delta &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; Delta&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;synthesize&lt;/span&gt;(text, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;inverse_tombstones_map, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;new_deletes_from_union.&lt;span class=&quot;pl-en&quot;&gt;complement&lt;/span&gt;());
    move_delta.&lt;span class=&quot;pl-en&quot;&gt;apply&lt;/span&gt;(tombstones)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Engine::edit_rev&lt;/h3&gt;
&lt;p&gt;This is the mini-CRDT function, it enables concurrent edits, but each peer can only have one in flight at a time and all edits must go through a central server. The form this takes is that you can submit &lt;code&gt;Delta&lt;/code&gt;s to the &lt;code&gt;Engine&lt;/code&gt; that are based on a revision that is not the current head. For example a plugin can get the text at a revision, make an edit and submit it along with the &lt;code&gt;RevToken&lt;/code&gt; it is based on, but by that time there might have been new edits. That's not a problem since &lt;code&gt;edit_rev&lt;/code&gt; can accept an arbitrary past &lt;code&gt;base_rev&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This operation has a number of stages:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Use the &lt;code&gt;Delta::factor&lt;/code&gt; helper to split the given &lt;code&gt;delta&lt;/code&gt; into &lt;code&gt;ins_delta&lt;/code&gt; and &lt;code&gt;deletes&lt;/code&gt;. This helper returns an &lt;code&gt;InsertDelta&lt;/code&gt; containing only the inserts and a &lt;code&gt;Subset&lt;/code&gt; based on the text (before the inserts) containing the deleted characters. When you see &quot;delta&quot; from now on, it refers to both pieces.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;Engine::deletes_from_union_for_index&lt;/code&gt; to work backwards from the present to find the &lt;code&gt;deletes_from_union&lt;/code&gt; at the time of the base revision: &lt;code&gt;deletes_at_rev&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Transform the delta to be based on the union string at the time of &lt;code&gt;base_rev&lt;/code&gt; rather than the &lt;code&gt;text&lt;/code&gt; at the time of &lt;code&gt;base_rev&lt;/code&gt;. This makes later transformations easier.
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;The &lt;code&gt;deletes&lt;/code&gt; are transformed using &lt;code&gt;Subset::transform_expand&lt;/code&gt; to expand the indices to include the characters that weren't in the text the &lt;code&gt;deletes&lt;/code&gt; was based on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ins_delta&lt;/code&gt; is transformed using the similar &lt;code&gt;InsertDelta::transform_expand&lt;/code&gt; helper. The thing is, with inserts it is ambigous if deleted characters between the same two characters in &lt;code&gt;text&lt;/code&gt; should be placed before or after characters inserted in the same place.&lt;/p&gt;
&lt;p&gt;This comes into play with arbitrary undo, where if we have &quot;abc&quot;, we delete &quot;b&quot;, and then insert to get &quot;azc&quot;, then undo the deletion of &quot;b&quot;, should we get &quot;abzc&quot; or &quot;azbc&quot;? We decided to put the inserts after the deletes, so we would get &quot;abzc&quot;, but it's not important.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Transform the delta to be based on the current head revision's union string instead of &lt;code&gt;base_rev&lt;/code&gt;'s union string.
&lt;ul&gt;&lt;li&gt;This is done by looping over every &lt;code&gt;Edit&lt;/code&gt; &lt;code&gt;Revision&lt;/code&gt; since &lt;code&gt;base_rev&lt;/code&gt; and &lt;code&gt;transform_expand&lt;/code&gt;-ing both the &lt;code&gt;ins_delta&lt;/code&gt; and &lt;code&gt;deletes&lt;/code&gt; by the inserted characters.&lt;/li&gt;
&lt;li&gt;But again we have the problem of whether we put the &lt;code&gt;ins_delta&lt;/code&gt; inserts before or after inserts in the same place since then. For this we use the &lt;code&gt;priority&lt;/code&gt; field of &lt;code&gt;Revision&lt;/code&gt;. The &lt;code&gt;priority&lt;/code&gt; of the incoming edit we're transforming is compared with the &lt;code&gt;priority&lt;/code&gt; of the inserts we're transforming it by, and they're ordered in ascending order of priority.&lt;/li&gt;
&lt;li&gt;Each concurrent plugin has a different &lt;code&gt;priority&lt;/code&gt; and they are useful for expressing what we expect concurrent edits to do. For example inserted auto-indentation should come before new user edits, but matched brackets should come after concurrent user edits, we can set the &lt;code&gt;priority&lt;/code&gt; of the plugins to get this behavior. In the case of concurrent edits by the same plugin on different synced devices we break ties by session ID.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Subset::transform_expand&lt;/code&gt; the &lt;code&gt;deletes&lt;/code&gt; to apply to the head union string after &lt;code&gt;ins_delta&lt;/code&gt; is applied instead of before. This matches the meaning of &lt;code&gt;inserts&lt;/code&gt; and &lt;code&gt;deletes&lt;/code&gt; in &lt;code&gt;Revision&lt;/code&gt;, whereas &lt;code&gt;Delta::factor&lt;/code&gt; gives them to us based on the same string. We &lt;code&gt;transform_expand&lt;/code&gt; a &lt;code&gt;Subset&lt;/code&gt; by an &lt;code&gt;InsertDelta&lt;/code&gt; by first using the &lt;code&gt;InsertDelta::inserted_subset&lt;/code&gt; helper to get a &lt;code&gt;Subset&lt;/code&gt; of the post-insert string designating which characters were inserted.&lt;/li&gt;
&lt;li&gt;Transform the &lt;code&gt;ins_delta&lt;/code&gt; to be based on the head &lt;code&gt;text&lt;/code&gt; instead of the union string. Now that we've done all the transformation, we can commit it, and since inserts can only affect the &lt;code&gt;text&lt;/code&gt; we can use &lt;code&gt;Subset::transform_shrink&lt;/code&gt; and know that only &lt;code&gt;Copy&lt;/code&gt; regions of the &lt;code&gt;InsertDelta&lt;/code&gt; will be collapsed so that the indices of inserted segments can be applied to &lt;code&gt;text&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Apply the &lt;code&gt;ins_delta&lt;/code&gt; to &lt;code&gt;text&lt;/code&gt; using &lt;code&gt;Delta::apply&lt;/code&gt; and also &lt;code&gt;transform_expand&lt;/code&gt; &lt;code&gt;deletes_from_union&lt;/code&gt; to include the newly inserted characters.&lt;/li&gt;
&lt;li&gt;Now that we've applied the inserts, we just need to apply the deletions. But wait! What if the undo group of this edit was undone between &lt;code&gt;base_rev&lt;/code&gt; and now? The edit might already be undone, in which case the &lt;code&gt;deletes&lt;/code&gt; shouldn't apply and the inserted characters should be deleted.
&lt;ol&gt;&lt;li&gt;We solve this by checking if our undo group is currently undone and if it is we set &lt;code&gt;to_delete&lt;/code&gt; to the inserted characters, and otherwise set it to &lt;code&gt;deletes&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then we compute a new &lt;code&gt;deletes_from_union&lt;/code&gt; by using &lt;code&gt;Subset::union&lt;/code&gt; to delete the characters in &lt;code&gt;to_delete&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;We use a helper called &lt;code&gt;shuffle&lt;/code&gt; which is like (and uses) &lt;code&gt;shuffle_tombstones&lt;/code&gt; but it updates both the &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;tombstones&lt;/code&gt; from corresponding to an old &lt;code&gt;deletes_from_union&lt;/code&gt; to a new one. It &quot;shuffles&quot; characters between &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;tombstones&lt;/code&gt; as necessary so that their new state corresponds to the new &lt;code&gt;deletes_from_union&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;And that's it, after that we just package up the inserted and deleted characters into a &lt;code&gt;Revision&lt;/code&gt; and add it to the list of &lt;code&gt;revs&lt;/code&gt; in &lt;code&gt;Engine&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Returns a tuple of a new `Revision` representing the edit based on the&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// current head, a new text `Rope`, a new tombstones `Rope` and a new `deletes_from_union`.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;mk_new_rev&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;, new_priority: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;, undo_group: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;,
        base_rev: RevToken, delta: Delta&amp;lt;RopeInfo&amp;gt;) -&amp;gt; (Revision, Rope, Rope, Subset) {
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; ix &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;find_rev_token&lt;/span&gt;(base_rev).&lt;span class=&quot;pl-en&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&quot;base revision not found&quot;&lt;/span&gt;);
    &lt;span class=&quot;pl-c&quot;&gt;// 1. split&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; (ins_delta, deletes) &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; delta.&lt;span class=&quot;pl-en&quot;&gt;factor&lt;/span&gt;();

    &lt;span class=&quot;pl-c&quot;&gt;// 2. Work backwards to find the old deletes_from_union&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; deletes_at_rev &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;deletes_from_union_for_index&lt;/span&gt;(ix);
    &lt;span class=&quot;pl-c&quot;&gt;// 3. rebase delta to be on the base_rev union instead of the text&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; union_ins_delta &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; ins_delta.&lt;span class=&quot;pl-en&quot;&gt;transform_expand&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;deletes_at_rev, &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;);
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; new_deletes &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; deletes.&lt;span class=&quot;pl-en&quot;&gt;transform_expand&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;deletes_at_rev);

    &lt;span class=&quot;pl-c&quot;&gt;// 4. rebase the delta to be on the head union instead of the base_rev union&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; new_full_priority &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; FullPriority { priority: new_priority, session_id: &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.session };
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; r &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.revs[ix &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;..] {
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; Edit { priority, &lt;span class=&quot;pl-k&quot;&gt;ref&lt;/span&gt; inserts, .. } &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; r.edit {
            &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;inserts.&lt;span class=&quot;pl-en&quot;&gt;is_empty&lt;/span&gt;() {
                &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; full_priority &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; FullPriority { priority, session_id: r.rev_id.&lt;span class=&quot;pl-en&quot;&gt;session_id&lt;/span&gt;() };
                &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; after &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; new_full_priority &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;=&lt;/span&gt; full_priority;  &lt;span class=&quot;pl-c&quot;&gt;// should never be ==&lt;/span&gt;
                union_ins_delta &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; union_ins_delta.&lt;span class=&quot;pl-en&quot;&gt;transform_expand&lt;/span&gt;(inserts, after);
                new_deletes &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; new_deletes.&lt;span class=&quot;pl-en&quot;&gt;transform_expand&lt;/span&gt;(inserts);
            }
        }
    }

    &lt;span class=&quot;pl-c&quot;&gt;// 5. rebase the deletion to be after the inserts instead of directly on the head union&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; new_inserts &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; union_ins_delta.&lt;span class=&quot;pl-en&quot;&gt;inserted_subset&lt;/span&gt;();
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;new_inserts.&lt;span class=&quot;pl-en&quot;&gt;is_empty&lt;/span&gt;() {
        new_deletes &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; new_deletes.&lt;span class=&quot;pl-en&quot;&gt;transform_expand&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;new_inserts);
    }

    &lt;span class=&quot;pl-c&quot;&gt;// 6. rebase insertions on text&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; cur_deletes_from_union &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.deletes_from_union;
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; text_ins_delta &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; union_ins_delta.&lt;span class=&quot;pl-en&quot;&gt;transform_shrink&lt;/span&gt;(cur_deletes_from_union);
    &lt;span class=&quot;pl-c&quot;&gt;// 7. apply inserts and rebase deletes_from_union&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; text_with_inserts &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; text_ins_delta.&lt;span class=&quot;pl-en&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.text);
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; rebased_deletes_from_union &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; cur_deletes_from_union.&lt;span class=&quot;pl-en&quot;&gt;transform_expand&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;new_inserts);

    &lt;span class=&quot;pl-c&quot;&gt;// 8. is the new edit in an undo group that was already undone due to concurrency?&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; undone &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.undone_groups.&lt;span class=&quot;pl-en&quot;&gt;contains&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;undo_group);
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; new_deletes_from_union &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; to_delete &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; undone { &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;new_inserts } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;new_deletes };
        rebased_deletes_from_union.&lt;span class=&quot;pl-en&quot;&gt;union&lt;/span&gt;(to_delete)
    };

    &lt;span class=&quot;pl-c&quot;&gt;// 9. move deleted or undone-inserted things from text to tombstones&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; (new_text, new_tombstones) &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;shuffle&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;text_with_inserts, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.tombstones,
        &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;rebased_deletes_from_union, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;new_deletes_from_union);

    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; head_rev &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.revs.&lt;span class=&quot;pl-en&quot;&gt;last&lt;/span&gt;().&lt;span class=&quot;pl-en&quot;&gt;unwrap&lt;/span&gt;();
    (Revision {
        rev_id: &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;next_rev_id&lt;/span&gt;(),
        max_undo_so_far: std&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;cmp&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;max&lt;/span&gt;(undo_group, head_rev.max_undo_so_far),
        edit: Edit {
            priority: new_priority,
            undo_group: undo_group,
            inserts: new_inserts,
            deletes: new_deletes,
        }
    }, new_text, new_tombstones, new_deletes_from_union)
}

&lt;span class=&quot;pl-c&quot;&gt;// TODO: have `base_rev` be an index so that it can be used maximally efficiently with the&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;// head revision, a token or a revision ID. Efficiency loss of token is negligible but unfortunate.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;edit_rev&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;, priority: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;, undo_group: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;,
        base_rev: RevToken, delta: Delta&amp;lt;RopeInfo&amp;gt;) {
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; (new_rev, new_text, new_tombstones, new_deletes_from_union) &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;mk_new_rev&lt;/span&gt;(priority, undo_group, base_rev, delta);
    &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.rev_id_counter &lt;span class=&quot;pl-k&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;;
    &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.revs.&lt;span class=&quot;pl-en&quot;&gt;push&lt;/span&gt;(new_rev);
    &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.text &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; new_text;
    &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.tombstones &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; new_tombstones;
    &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.deletes_from_union &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; new_deletes_from_union;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;InsertDelta::transform_expand&lt;/h4&gt;
&lt;p&gt;This is another big function with lots of nested loops. Unlike &lt;code&gt;Subset::transform_expand&lt;/code&gt; it takes a boolean parameter &lt;code&gt;after&lt;/code&gt; that resolves the ambiguity of whether inserts should go before or after the characters being transformed over.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Do a coordinate transformation on an insert-only delta. The `after` parameter&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// controls whether the insertions in `self` come after those specific in the&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// coordinate transform.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;transform_expand&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;, xform: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;Subset, after: &lt;span class=&quot;pl-k&quot;&gt;bool&lt;/span&gt;) -&amp;gt; InsertDelta&amp;lt;N&amp;gt; {
    &lt;span class=&quot;pl-c&quot;&gt;// ...&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;shuffle&lt;/h4&gt;
&lt;p&gt;This helper is used in many different operations that use the pattern of computing how &lt;code&gt;deletes_from_union&lt;/code&gt; should change and then updating &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;tombstones&lt;/code&gt; to reflect that new state.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Move sections from text to tombstones and vice versa based on a new and old set of deletions.&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Returns a tuple of a new text `Rope` and a new `Tombstones` rope described by `new_deletes_from_union`.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;shuffle&lt;/span&gt;(text: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;Rope, tombstones: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;Rope,
        old_deletes_from_union: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;Subset, new_deletes_from_union: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;Subset) -&amp;gt; (Rope,Rope) {
    &lt;span class=&quot;pl-c&quot;&gt;// Delta that deletes the right bits from the text&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; del_delta &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; Delta&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;synthesize&lt;/span&gt;(tombstones, old_deletes_from_union, new_deletes_from_union);
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; new_text &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; del_delta.&lt;span class=&quot;pl-en&quot;&gt;apply&lt;/span&gt;(text);
    (new_text, &lt;span class=&quot;pl-en&quot;&gt;shuffle_tombstones&lt;/span&gt;(text,tombstones,old_deletes_from_union,new_deletes_from_union))
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Engine::undo&lt;/h3&gt;
&lt;p&gt;Undo works conceptually by rewinding to the earliest point in history that a toggled undo group appears, and replaying history from there but with revisions in the new &lt;code&gt;undone_groups&lt;/code&gt; not applied.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;First, it uses the &lt;code&gt;max_undo_so_far&lt;/code&gt; field on every &lt;code&gt;Revision&lt;/code&gt; as well as the set of changed undo groups to find the latest point before any of the changed groups were used.&lt;/li&gt;
&lt;li&gt;Next it uses &lt;code&gt;Engine::deletes_from_union_before_index&lt;/code&gt; to find the &lt;code&gt;deletes_from_union&lt;/code&gt; before that earliest revision. The earliest revision might have been the very first one so that's why we need to get it from &lt;em&gt;before&lt;/em&gt; the revision and not &lt;em&gt;at&lt;/em&gt; the previous revision.&lt;/li&gt;
&lt;li&gt;Then it loops over history after that point manipulating &lt;code&gt;deletes_from_union&lt;/code&gt; to either &lt;code&gt;transform_expand&lt;/code&gt; by the &lt;code&gt;inserts&lt;/code&gt; and &lt;code&gt;union&lt;/code&gt; the &lt;code&gt;deletes&lt;/code&gt; in the normal case, or &lt;code&gt;transform_union&lt;/code&gt; (transform then delete) over the &lt;code&gt;inserts&lt;/code&gt; in the undone case.&lt;/li&gt;
&lt;li&gt;Now that it has a fixed &lt;code&gt;deletes_from_union&lt;/code&gt; it uses &lt;code&gt;shuffle&lt;/code&gt; to update &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;tombstones&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;// This computes undo all the way from the beginning. An optimization would be to not&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;// recompute the prefix up to where the history diverges, but it's not clear that's&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;// even worth the code complexity.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;compute_undo&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;, groups: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;BTreeSet&amp;lt;&lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;&amp;gt;) -&amp;gt; (Revision, Subset) {
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; toggled_groups &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.undone_groups.&lt;span class=&quot;pl-en&quot;&gt;symmetric_difference&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;groups).&lt;span class=&quot;pl-en&quot;&gt;cloned&lt;/span&gt;().&lt;span class=&quot;pl-en&quot;&gt;collect&lt;/span&gt;();
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; first_candidate &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;find_first_undo_candidate_index&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;toggled_groups);
    &lt;span class=&quot;pl-c&quot;&gt;// the `false` below: don't invert undos since our first_candidate is based on the current undo set, not past&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; deletes_from_union &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;deletes_from_union_before_index&lt;/span&gt;(first_candidate, &lt;span class=&quot;pl-c1&quot;&gt;false&lt;/span&gt;).&lt;span class=&quot;pl-en&quot;&gt;into_owned&lt;/span&gt;();

    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; rev &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.revs[first_candidate..] {
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; Edit { &lt;span class=&quot;pl-k&quot;&gt;ref&lt;/span&gt; undo_group, &lt;span class=&quot;pl-k&quot;&gt;ref&lt;/span&gt; inserts, &lt;span class=&quot;pl-k&quot;&gt;ref&lt;/span&gt; deletes, .. } &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; rev.edit {
            &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; groups.&lt;span class=&quot;pl-en&quot;&gt;contains&lt;/span&gt;(undo_group) {
                &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;inserts.&lt;span class=&quot;pl-en&quot;&gt;is_empty&lt;/span&gt;() {
                    deletes_from_union &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; deletes_from_union.&lt;span class=&quot;pl-en&quot;&gt;transform_union&lt;/span&gt;(inserts);
                }
            } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
                &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;inserts.&lt;span class=&quot;pl-en&quot;&gt;is_empty&lt;/span&gt;() {
                    deletes_from_union &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; deletes_from_union.&lt;span class=&quot;pl-en&quot;&gt;transform_expand&lt;/span&gt;(inserts);
                }
                &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;deletes.&lt;span class=&quot;pl-en&quot;&gt;is_empty&lt;/span&gt;() {
                    deletes_from_union &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; deletes_from_union.&lt;span class=&quot;pl-en&quot;&gt;union&lt;/span&gt;(deletes);
                }
            }
        }
    }

    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; deletes_bitxor &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.deletes_from_union.&lt;span class=&quot;pl-en&quot;&gt;bitxor&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;deletes_from_union);
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; max_undo_so_far &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.revs.&lt;span class=&quot;pl-en&quot;&gt;last&lt;/span&gt;().&lt;span class=&quot;pl-en&quot;&gt;unwrap&lt;/span&gt;().max_undo_so_far;
    (Revision {
        rev_id: &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;next_rev_id&lt;/span&gt;(),
        max_undo_so_far,
        edit: Undo { toggled_groups, deletes_bitxor }
    }, deletes_from_union)
}

&lt;span class=&quot;pl-k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;undo&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;, groups: BTreeSet&amp;lt;&lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;&amp;gt;) {
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; (new_rev, new_deletes_from_union) &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;compute_undo&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;groups);

    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; (new_text, new_tombstones) &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;pl-en&quot;&gt;shuffle&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.text, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.tombstones, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.deletes_from_union, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;new_deletes_from_union);

    &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.text &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; new_text;
    &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.tombstones &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; new_tombstones;
    &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.deletes_from_union &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; new_deletes_from_union;
    &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.undone_groups &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; groups;
    &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.revs.&lt;span class=&quot;pl-en&quot;&gt;push&lt;/span&gt;(new_rev);
    &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.rev_id_counter &lt;span class=&quot;pl-k&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Engine::gc&lt;/h3&gt;
&lt;p&gt;This is a large function that is only used in the single-device case to limit the size of history and the size of &lt;code&gt;deletes_from_union&lt;/code&gt; so that operations like insertion and undo are always fast even on large documents with long histories. It throws away information, so it is incorrect in the multi-device case, and so we have plans for optimizing all our representations and algorithms so that it is unnecessary and we can remove it. It's not particularly interesting, if you want to see how it works you can read the code.&lt;/p&gt;
&lt;h3&gt;Engine::merge&lt;/h3&gt;
&lt;p&gt;This is the operation you were (maybe) waiting for! The CRDT merge operation that allows peer-to-peer syncing of edits in a conflict-free eventually-consistent way. It takes &lt;code&gt;self&lt;/code&gt; and another instance of &lt;code&gt;Engine&lt;/code&gt; and incorporates any changes which that &lt;code&gt;Engine&lt;/code&gt; has into &lt;code&gt;self&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It does this by finding changes which the other &lt;code&gt;Engine&lt;/code&gt; has but &lt;code&gt;self&lt;/code&gt; doesn't and doing a whole bunch of transformations so that those edits can be appended directly on to the end of &lt;code&gt;self&lt;/code&gt;'s list of &lt;code&gt;revs&lt;/code&gt;. The append-only nature of merge preserves the ability for operations like &lt;code&gt;Engine::delta_rev_head&lt;/code&gt; to work, and allows future optimizations of how things are persisted.&lt;/p&gt;
&lt;p&gt;The fact that, even in a merge, &lt;code&gt;Revision&lt;/code&gt;s are only ever appended leads to the interesting fact that two peers (Separate devices/engines that share state my merging) can have &lt;code&gt;Engine&lt;/code&gt;s that represent the same document contents and history, but where the &lt;code&gt;Revision&lt;/code&gt;s are in a totally different order. This is fine though because the &lt;code&gt;Revision&lt;/code&gt; ids allow us to compare the identity of two &lt;code&gt;Revision&lt;/code&gt;s even if their &lt;code&gt;Subset&lt;/code&gt;s are different due to transforms, and undo groups allow us to maintain and manipulate undo history order separately from CRDT history order.&lt;/p&gt;
&lt;p&gt;In practice the order of the &lt;code&gt;Revision&lt;/code&gt; history will tend to be very similar between peers. Any edit that occurs while another edit is visible on screen (present in this peer's &lt;code&gt;Engine&lt;/code&gt;) will never be re-ordered before that visible edit. Thus if there are no concurrent edits made on devices that sync with each other by merging, the devices will end up with the same &lt;code&gt;Revision&lt;/code&gt; history.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As of the time this was written, Xi's &lt;code&gt;merge&lt;/code&gt; implementation does not support undo operations, and will panic if one is encountered. We plan to fix this and expect that the structure of the merge operation will stay the same, just with more cases. So for the rest of this description, presume &lt;code&gt;Edit&lt;/code&gt;s are the only type of &lt;code&gt;Revision&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Base and common revisions&lt;/h4&gt;
&lt;p&gt;An important part of merging is figuring out which revisions the two sides have in common. These common revisions are found as two parts:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The &quot;base&quot;: A prefix of the same length of both histories such that the set of revisions in both prefixes is the same.
&lt;ul&gt;&lt;li&gt;Note that they aren't necessarily in the same order, just all shared. That's because all indices are relative to the union string, which is the same regardless of the order of the revisions that created it.&lt;/li&gt;
&lt;li&gt;We ignore everything in this prefix, so the longer it is the faster the merge runs, but a length of 0 is perfectly fine and in fact at the time this was written, that's what Xi uses.&lt;/li&gt;
&lt;li&gt;Ideally this should be the longest prefix length such that the set of revisions in the prefix is equal in both histories, and we plan on using this later as an important optimization.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The &quot;common&quot; revisions: After the base, some revisions on each side will be shared by both sides. The common revisions are the intersection of the two revision sets after the base.
&lt;ul&gt;&lt;li&gt;Note that the common revisions aren't necessarily in the same positions or order on each side.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/merge-intro.png&quot;&gt;&lt;img src=&quot;https://github.com/google/xi-editor/raw/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/merge-intro.png&quot; alt=&quot;CRDT Merge Flow Example&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you're wondering how you can end up with common revisions not in the base, and in different positions and ordering, it's rare, but it can happen under high levels of asynchrony. These cases can occur even with only two peers.&lt;/p&gt;
&lt;p&gt;See the example sequence below, where the boxes represent revisions, and the arrows represent merges. The red arrow with its two sides illustrated below it, shows such a tricky merge.&lt;/p&gt;
&lt;p&gt;This example isn't meant to show a networking scenario, just a legal sequence of applying operations on two CRDT instances. These scenarios can be caused by asynchrony of the network, but exactly how depends on the syncing topology and ordering guarantees, some ways of using &lt;code&gt;merge&lt;/code&gt; may require 3 peers to trigger a case like this in real use.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/merge-common-diff-3.png&quot;&gt;&lt;img src=&quot;https://github.com/google/xi-editor/raw/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/merge-common-diff-3.png&quot; alt=&quot;CRDT merge common in different order&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first two steps of the &lt;code&gt;merge&lt;/code&gt; operation are to find the base index and common revision set. As of writing these are both the easiest possible correct representations, and not the fastest ones, but we plan on optimizing soon.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Find an index before which everything is the same&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;find_base_index&lt;/span&gt;(a: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;[Revision], b: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;[Revision]) -&amp;gt; &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt; {
    &lt;span class=&quot;pl-c1&quot;&gt;assert!&lt;/span&gt;(a.&lt;span class=&quot;pl-en&quot;&gt;len&lt;/span&gt;() &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; b.&lt;span class=&quot;pl-en&quot;&gt;len&lt;/span&gt;() &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;);
    &lt;span class=&quot;pl-c1&quot;&gt;assert!&lt;/span&gt;(a[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;].rev_id &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; b[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;].rev_id);
    &lt;span class=&quot;pl-c&quot;&gt;// TODO find the maximum base revision.&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;// returning 1 should have the same behavior, but worse performance&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;;
}

&lt;span class=&quot;pl-c&quot;&gt;/// Find a set of revisions common to both lists&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;find_common&lt;/span&gt;(a: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;[Revision], b: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;[Revision]) -&amp;gt; BTreeSet&amp;lt;RevId&amp;gt; {
    &lt;span class=&quot;pl-c&quot;&gt;// TODO make this faster somehow?&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; a_ids: BTreeSet&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;RevId&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; a.&lt;span class=&quot;pl-en&quot;&gt;iter&lt;/span&gt;().&lt;span class=&quot;pl-en&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;r&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; r.rev_id).&lt;span class=&quot;pl-en&quot;&gt;collect&lt;/span&gt;();
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; b_ids: BTreeSet&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;RevId&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; b.&lt;span class=&quot;pl-en&quot;&gt;iter&lt;/span&gt;().&lt;span class=&quot;pl-en&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;r&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; r.rev_id).&lt;span class=&quot;pl-en&quot;&gt;collect&lt;/span&gt;();
    a_ids.&lt;span class=&quot;pl-en&quot;&gt;intersection&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;b_ids).&lt;span class=&quot;pl-en&quot;&gt;cloned&lt;/span&gt;().&lt;span class=&quot;pl-en&quot;&gt;collect&lt;/span&gt;()
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Rearranging&lt;/h4&gt;
&lt;p&gt;To make the rest of the algorithm easier, it would be nice if we didn't have to worry about any of the common revisions and could just work with the new revisions on each side. We can realize this by transforming and reordering all the new revisions on each side after all of the common revisions.&lt;/p&gt;
&lt;p&gt;We can safely use transforms to reorder two revisions if neither of the revisions depends on the other. A revision depends on all the revisions that were in the &lt;code&gt;Engine&lt;/code&gt; at the time &lt;code&gt;Engine::edit_rev&lt;/code&gt; was called. We know that a new revision can't depend on a common revision after it, because the append-only nature means that ordering couldn't occur. Furthermore, the common revision can't depend on the new revision, because by definitions the other peer has the common revision but not the new revision, and merges never merge a revision but not its dependencies. Thus, even without explicit dependency information, we know we can reorder all the new revisions on each side after all the common revisions.&lt;/p&gt;
&lt;p&gt;Note that though it's nice to think about it as reordering the histories, really we just need to compute the transformed new revisions, transforming each new revision to be based on all common revisions after it. See the &quot;computed&quot; and &quot;taken to next step&quot; annotations of the diagram below, they are what &lt;code&gt;rearrange&lt;/code&gt; returns, note that transformed operations are marked with a prime tick but they maintain their ID.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/merge-rearrange.png&quot;&gt;&lt;img src=&quot;https://github.com/google/xi-editor/raw/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/merge-rearrange.png&quot; alt=&quot;CRDT merge rearrange&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We do the rearranging by working from the end of the list of revisions to the beginning. We build up a &lt;code&gt;Subset&lt;/code&gt; representing all the characters that were added to the union string by the common revisions after each point. Starting with the identity transformation (an entirely 0-count &lt;code&gt;Subset&lt;/code&gt;), whenever we encounter a common revision we add the characters it inserts to the transform. When we encounter a new revision we &lt;code&gt;transform_expand&lt;/code&gt; its inserts and deletes by the transform &lt;code&gt;Subset&lt;/code&gt; and add it to the output &lt;code&gt;Vec&lt;/code&gt;. Then we &lt;code&gt;transform_shrink&lt;/code&gt; the transform &lt;code&gt;Subset&lt;/code&gt; by the characters inserted in the new revision, because we only want to fast-forward new revisions over common revisions after them, not new revisions after them.&lt;/p&gt;
&lt;p&gt;That was likely too imprecise and hard to follow, so here's an example diagram and the code:&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/merge-rearrange-example.png&quot;&gt;&lt;img src=&quot;https://github.com/google/xi-editor/raw/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/merge-rearrange-example.png&quot; alt=&quot;CRDT merge rearrange example&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Returns the operations in `revs` that don't have their `rev_id` in&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// `base_revs`, but modified so that they are in the same order but based on&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// the `base_revs`. This allows the rest of the merge to operate on only&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// revisions not shared by both sides.&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;///&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Conceptually, see the diagram below, with `.` being base revs and `n` being&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// non-base revs, `N` being transformed non-base revs, and rearranges it:&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// .n..n...nn..  -&amp;gt; ........NNNN -&amp;gt; returns vec![N,N,N,N]&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;rearrange&lt;/span&gt;(revs: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;[Revision], base_revs: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;BTreeSet&amp;lt;RevId&amp;gt;, head_len: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;pl-k&quot;&gt;Vec&lt;/span&gt;&amp;lt;Revision&amp;gt; {
    &lt;span class=&quot;pl-c&quot;&gt;// transform representing the characters added by common revisions after a point.&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; s &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; Subset&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;new&lt;/span&gt;(head_len);

    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; out &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;with_capacity&lt;/span&gt;(revs.&lt;span class=&quot;pl-en&quot;&gt;len&lt;/span&gt;() &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt; base_revs.&lt;span class=&quot;pl-en&quot;&gt;len&lt;/span&gt;());
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; rev &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; revs.&lt;span class=&quot;pl-en&quot;&gt;iter&lt;/span&gt;().&lt;span class=&quot;pl-en&quot;&gt;rev&lt;/span&gt;() {
        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; is_base &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; base_revs.&lt;span class=&quot;pl-en&quot;&gt;contains&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;rev.rev_id);
        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; contents &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;match&lt;/span&gt; rev.edit {
            Contents&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;Edit {priority, undo_group, &lt;span class=&quot;pl-k&quot;&gt;ref&lt;/span&gt; inserts, &lt;span class=&quot;pl-k&quot;&gt;ref&lt;/span&gt; deletes} &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
                &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; is_base {
                    s &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; inserts.&lt;span class=&quot;pl-en&quot;&gt;transform_union&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;s);
                    &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;
                } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
                    &lt;span class=&quot;pl-c&quot;&gt;// fast-forward this revision over all common ones after it&lt;/span&gt;
                    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; transformed_inserts &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; inserts.&lt;span class=&quot;pl-en&quot;&gt;transform_expand&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;s);
                    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; transformed_deletes &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; deletes.&lt;span class=&quot;pl-en&quot;&gt;transform_expand&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;s);
                    &lt;span class=&quot;pl-c&quot;&gt;// we don't want new revisions before this to be transformed after us&lt;/span&gt;
                    s &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; s.&lt;span class=&quot;pl-en&quot;&gt;transform_shrink&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;transformed_inserts);
                    &lt;span class=&quot;pl-c1&quot;&gt;Some&lt;/span&gt;(Contents&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;Edit {
                        inserts: transformed_inserts,
                        deletes: transformed_deletes,
                        priority, undo_group,
                    })
                }
            },
            Contents&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;Undo { .. } &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;panic!&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&quot;can't merge undo yet&quot;&lt;/span&gt;),
        };
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Some&lt;/span&gt;(edit) &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; contents {
            out.&lt;span class=&quot;pl-en&quot;&gt;push&lt;/span&gt;(Revision { edit, rev_id: rev.rev_id, max_undo_so_far: rev.max_undo_so_far });
        }
    }

    out.&lt;span class=&quot;pl-en&quot;&gt;as_mut_slice&lt;/span&gt;().&lt;span class=&quot;pl-en&quot;&gt;reverse&lt;/span&gt;();
    out
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Computing Deltas&lt;/h4&gt;
&lt;p&gt;Merging the changes from &lt;code&gt;other&lt;/code&gt; into &lt;code&gt;self&lt;/code&gt; doesn't just involve appending the &lt;code&gt;Revision&lt;/code&gt;s, we also have to update the &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;tombstones&lt;/code&gt; of &lt;code&gt;self&lt;/code&gt; to correspond with those new revisions. In &lt;code&gt;Engine::edit_rev&lt;/code&gt; we transform an &lt;code&gt;InsertDelta&lt;/code&gt; until we can apply it to the text, but when merging we don't have any &lt;code&gt;Delta&lt;/code&gt;s. Additionally, the operation for resolving the order of concurrent insertions based on priority is &lt;code&gt;Delta::transform_expand&lt;/code&gt; and we don't have an equivalent for &lt;code&gt;Subset&lt;/code&gt; (&lt;code&gt;Subset::transform_expand&lt;/code&gt; does a slightly different thing).&lt;/p&gt;
&lt;p&gt;There's two possible approaches:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Transform the new revisions from &lt;code&gt;other&lt;/code&gt; and append them, using a newly written equivalent of &lt;code&gt;Delta::transform_expand&lt;/code&gt; for &lt;code&gt;Subset&lt;/code&gt;s. Then work through the resulting histories to figure out what characters we need to add to the &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;tombstones&lt;/code&gt;, and where. We think it may be easier to support undo and incremental Ledger updating with this approach, and we plan on switching eventually, but for now it's not what we chose first.&lt;/li&gt;
&lt;li&gt;Create some &lt;code&gt;Delta&lt;/code&gt;s! We can turn the new revisions from &lt;code&gt;other&lt;/code&gt; into a different representation that encodes the &lt;code&gt;inserts&lt;/code&gt; as an &lt;code&gt;InsertDelta&lt;/code&gt; so that we can transform them using &lt;code&gt;Delta::transform_expand&lt;/code&gt; and eventually apply them to the &lt;code&gt;text&lt;/code&gt; of &lt;code&gt;self&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;We can create these &lt;code&gt;DeltaOp&lt;/code&gt;s by working backwards from the end of the &lt;code&gt;rearrange&lt;/code&gt;d new revisions from &lt;code&gt;other&lt;/code&gt; and keeping track of all the characters they insert in a &lt;code&gt;Subset&lt;/code&gt; using &lt;code&gt;Subset::transform_union&lt;/code&gt;. Then for each revision we can use &lt;code&gt;shuffle_tombstones&lt;/code&gt; to extract a &lt;code&gt;Rope&lt;/code&gt; of all the inserted characters, and then use &lt;code&gt;Delta::synthesize&lt;/code&gt; to create a &lt;code&gt;Delta&lt;/code&gt; from our &lt;code&gt;Subset&lt;/code&gt; of inserts to the inserts &lt;code&gt;Subset&lt;/code&gt; from the previous iteration (one step forward in time since we're iterating backwards). This gives us a &lt;code&gt;Delta&lt;/code&gt; inserting the new characters from this &lt;code&gt;Revision&lt;/code&gt;, which we can bundle into a &lt;code&gt;DeltaOp&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;DeltaOp&lt;/span&gt; {
    rev_id: RevId,
    priority: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;,
    undo_group: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;,
    inserts: InsertDelta&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;RopeInfo&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;,
    deletes: Subset,
}

&lt;span class=&quot;pl-c&quot;&gt;/// Transform `revs`, which doesn't include information on the actual content of the operations,&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// into an `InsertDelta`-based representation that does by working backward from the text and tombstones.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;compute_deltas&lt;/span&gt;(revs: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;[Revision], text: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;Rope, tombstones: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;Rope, deletes_from_union: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;Subset) -&amp;gt; &lt;span class=&quot;pl-k&quot;&gt;Vec&lt;/span&gt;&amp;lt;DeltaOp&amp;gt; {
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; out &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;with_capacity&lt;/span&gt;(revs.&lt;span class=&quot;pl-en&quot;&gt;len&lt;/span&gt;());

    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; cur_all_inserts &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; Subset&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;new&lt;/span&gt;(deletes_from_union.&lt;span class=&quot;pl-en&quot;&gt;len&lt;/span&gt;());
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; rev &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; revs.&lt;span class=&quot;pl-en&quot;&gt;iter&lt;/span&gt;().&lt;span class=&quot;pl-en&quot;&gt;rev&lt;/span&gt;() {
        &lt;span class=&quot;pl-k&quot;&gt;match&lt;/span&gt; rev.edit {
            Contents&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;Edit {priority, undo_group, &lt;span class=&quot;pl-k&quot;&gt;ref&lt;/span&gt; inserts, &lt;span class=&quot;pl-k&quot;&gt;ref&lt;/span&gt; deletes} &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
                &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; older_all_inserts &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; inserts.&lt;span class=&quot;pl-en&quot;&gt;transform_union&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;cur_all_inserts);

                &lt;span class=&quot;pl-c&quot;&gt;// TODO could probably be more efficient by avoiding shuffling from head every time&lt;/span&gt;
                &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; tombstones_here &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;shuffle_tombstones&lt;/span&gt;(text, tombstones, deletes_from_union, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;older_all_inserts);
                &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; delta &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; Delta&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;synthesize&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;tombstones_here, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;older_all_inserts, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;cur_all_inserts);
                &lt;span class=&quot;pl-c&quot;&gt;// TODO create InsertDelta directly and more efficiently instead of factoring&lt;/span&gt;
                &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; (ins, _) &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; delta.&lt;span class=&quot;pl-en&quot;&gt;factor&lt;/span&gt;();
                out.&lt;span class=&quot;pl-en&quot;&gt;push&lt;/span&gt;(DeltaOp {
                    rev_id: rev.rev_id,
                    priority, undo_group,
                    inserts: ins,
                    deletes: deletes.&lt;span class=&quot;pl-en&quot;&gt;clone&lt;/span&gt;(),
                });

                cur_all_inserts &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; older_all_inserts;
            },
            Contents&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;Undo { .. } &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;panic!&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&quot;can't merge undo yet&quot;&lt;/span&gt;),
        }
    }

    out.&lt;span class=&quot;pl-en&quot;&gt;as_mut_slice&lt;/span&gt;().&lt;span class=&quot;pl-en&quot;&gt;reverse&lt;/span&gt;();
    out
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Computing Transforms&lt;/h4&gt;
&lt;p&gt;Now we have a list of &lt;code&gt;DeltaOp&lt;/code&gt;s from &lt;code&gt;other&lt;/code&gt; and a list of new &lt;code&gt;Revision&lt;/code&gt;s from &lt;code&gt;self&lt;/code&gt;. Keeping in mind the goal of appending the changes from other, we need to transform the &lt;code&gt;DeltaOp&lt;/code&gt;s to be based on top of the new &lt;code&gt;Revision&lt;/code&gt;s from &lt;code&gt;self&lt;/code&gt;. This really just involves figuring out the correct indices in the union string that includes the newly inserted characters from &lt;code&gt;self&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In order to do this we need the new &lt;code&gt;inserts&lt;/code&gt; from &lt;code&gt;self&lt;/code&gt;, but in order to resolve the order of concurrent inserts, we also need the &quot;priority&quot; of the edits. So we have a helper called &lt;code&gt;compute_transforms&lt;/code&gt; that returns a list of &lt;code&gt;(priority, inserts)&lt;/code&gt; tuples.&lt;/p&gt;
&lt;p&gt;This helper does one other important thing, which is combine sequential edits by the same peer with the same priority into one transform. This is important because the next stage does a lot of work per-transform. Without this optimization a paragraph of typed inserted characters would be hundreds of transforms, but with the optimization it is one transform.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Computes a series of priorities and transforms for the deltas on the right&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// from the new revisions on the left.&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;///&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Applies an optimization where it combines sequential revisions with the&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// same priority into one transform to decrease the number of transforms that&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// have to be considered in `rebase` substantially for normal editing&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// patterns. Any large runs of typing in the same place by the same user (e.g&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// typing a paragraph) will be combined into a single segment in a transform&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// as opposed to thousands of revisions.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;compute_transforms&lt;/span&gt;(revs: &lt;span class=&quot;pl-k&quot;&gt;Vec&lt;/span&gt;&amp;lt;Revision&amp;gt;) -&amp;gt; &lt;span class=&quot;pl-k&quot;&gt;Vec&lt;/span&gt;&amp;lt;(FullPriority, Subset)&amp;gt; {
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; out &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;new&lt;/span&gt;();
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; last_priority: &lt;span class=&quot;pl-k&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;;
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; r &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; revs.&lt;span class=&quot;pl-en&quot;&gt;into_iter&lt;/span&gt;() {
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; Contents&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;Edit {priority, inserts, .. } &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; r.edit {
            &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; inserts.&lt;span class=&quot;pl-en&quot;&gt;is_empty&lt;/span&gt;() {
                &lt;span class=&quot;pl-k&quot;&gt;continue&lt;/span&gt;;
            }
            &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Some&lt;/span&gt;(priority) &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; last_priority {
                &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; last: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; (FullPriority, Subset) &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; out.&lt;span class=&quot;pl-en&quot;&gt;last_mut&lt;/span&gt;().&lt;span class=&quot;pl-en&quot;&gt;unwrap&lt;/span&gt;();
                last.&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; last.&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;transform_union&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;inserts);
            } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
                last_priority &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Some&lt;/span&gt;(priority);
                &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; prio &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; FullPriority { priority, session_id: r.rev_id.&lt;span class=&quot;pl-en&quot;&gt;session_id&lt;/span&gt;() };
                out.&lt;span class=&quot;pl-en&quot;&gt;push&lt;/span&gt;((prio, inserts));
            }
        }
    }
    out
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Rebasing&lt;/h4&gt;
&lt;p&gt;Now that we have the &lt;code&gt;DeltaOp&lt;/code&gt;s and transforms, we just need to forward the &lt;code&gt;DeltaOp&lt;/code&gt;s through the transforms. The helper for this is named &lt;code&gt;rebase&lt;/code&gt; since it's analogous to a &lt;code&gt;git rebase&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Basically, for every &lt;code&gt;DeltaOp&lt;/code&gt; from &lt;code&gt;other&lt;/code&gt;, we:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;Delta::transform_expand&lt;/code&gt; it by each transform from &lt;code&gt;self&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Update the transforms for the next round so they include the &lt;code&gt;DeltaOp&lt;/code&gt;s inserts, and so effectively they become part of the base for both sides.&lt;/li&gt;
&lt;li&gt;Apply the &lt;code&gt;DeltaOp&lt;/code&gt; to the &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;tombstones&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;Revision&lt;/code&gt; from it and append it to the history.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This procedure works iteratively starting with the results of &lt;code&gt;compute_transforms&lt;/code&gt; and &lt;code&gt;compute_deltas&lt;/code&gt;. Every iteration it takes the first &lt;code&gt;DeltaOp&lt;/code&gt;, transforms it and applies it to the text, and updates all the transforms so that it is effectively in the base of both sides. See the diagrams below of an initial state, the operations performed in the first iteration, and the state after the first iteration. You can refer to the code further below to see how they align.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/merge-rebase-initial.png&quot;&gt;&lt;img src=&quot;https://github.com/google/xi-editor/raw/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/merge-rebase-initial.png&quot; alt=&quot;CRDT merge rebase initial state&quot;/&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/merge-rebase-trace.png&quot;&gt;&lt;img src=&quot;https://github.com/google/xi-editor/raw/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/merge-rebase-trace.png&quot; alt=&quot;CRDT merge rebase trace&quot;/&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/merge-rebase-after.png&quot;&gt;&lt;img src=&quot;https://github.com/google/xi-editor/raw/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/img/merge-rebase-after.png&quot; alt=&quot;CRDT merge rebase state after&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Rebase `b_new` on top of `expand_by` and return revision contents that can be appended as new&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// revisions on top of the revisions represented by `expand_by`.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;rebase&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; expand_by: &lt;span class=&quot;pl-k&quot;&gt;Vec&lt;/span&gt;&amp;lt;(FullPriority, Subset)&amp;gt;, b_new: &lt;span class=&quot;pl-k&quot;&gt;Vec&lt;/span&gt;&amp;lt;DeltaOp&amp;gt;, &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; text: Rope, &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; tombstones: Rope,
        &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; deletes_from_union: Subset, &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; max_undo_so_far: &lt;span class=&quot;pl-k&quot;&gt;usize&lt;/span&gt;) -&amp;gt; (&lt;span class=&quot;pl-k&quot;&gt;Vec&lt;/span&gt;&amp;lt;Revision&amp;gt;, Rope, Rope, Subset) {
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; out &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;with_capacity&lt;/span&gt;(b_new.&lt;span class=&quot;pl-en&quot;&gt;len&lt;/span&gt;());

    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; next_expand_by &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;with_capacity&lt;/span&gt;(expand_by.&lt;span class=&quot;pl-en&quot;&gt;len&lt;/span&gt;());
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; op &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; b_new.&lt;span class=&quot;pl-en&quot;&gt;into_iter&lt;/span&gt;() {
        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; DeltaOp { rev_id, priority, undo_group, &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; inserts, &lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; deletes } &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; op;
        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; full_priority &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; FullPriority { priority, session_id: rev_id.&lt;span class=&quot;pl-en&quot;&gt;session_id&lt;/span&gt;() };
        &lt;span class=&quot;pl-c&quot;&gt;// (1) (2) (3) expand by each in expand_by&lt;/span&gt;
        &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;(trans_priority, &lt;span class=&quot;pl-k&quot;&gt;ref&lt;/span&gt; trans_inserts) &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;expand_by {
            &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; after &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; full_priority &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;=&lt;/span&gt; trans_priority;  &lt;span class=&quot;pl-c&quot;&gt;// should never be ==&lt;/span&gt;
            &lt;span class=&quot;pl-c&quot;&gt;// d-expand by other&lt;/span&gt;
            inserts &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; inserts.&lt;span class=&quot;pl-en&quot;&gt;transform_expand&lt;/span&gt;(trans_inserts, after);
            &lt;span class=&quot;pl-c&quot;&gt;// trans-expand other by expanded so they have the same context&lt;/span&gt;
            &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; inserted &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; inserts.&lt;span class=&quot;pl-en&quot;&gt;inserted_subset&lt;/span&gt;();
            &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; new_trans_inserts &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; trans_inserts.&lt;span class=&quot;pl-en&quot;&gt;transform_expand&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;inserted);
            &lt;span class=&quot;pl-c&quot;&gt;// The deletes are already after our inserts, but we need to include the other inserts&lt;/span&gt;
            deletes &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; deletes.&lt;span class=&quot;pl-en&quot;&gt;transform_expand&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;new_trans_inserts);
            &lt;span class=&quot;pl-c&quot;&gt;// (6) On the next step we want things in expand_by to have op in the context&lt;/span&gt;
            next_expand_by.&lt;span class=&quot;pl-en&quot;&gt;push&lt;/span&gt;((trans_priority, new_trans_inserts));
        }

        &lt;span class=&quot;pl-c&quot;&gt;// (4) Update the text and tombstones&lt;/span&gt;
        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; text_inserts &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; inserts.&lt;span class=&quot;pl-en&quot;&gt;transform_shrink&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;deletes_from_union);
        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; text_with_inserts &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; text_inserts.&lt;span class=&quot;pl-en&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;text);
        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; inserted &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; inserts.&lt;span class=&quot;pl-en&quot;&gt;inserted_subset&lt;/span&gt;();

        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; expanded_deletes_from_union &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; deletes_from_union.&lt;span class=&quot;pl-en&quot;&gt;transform_expand&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;inserted);
        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; new_deletes_from_union &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; expanded_deletes_from_union.&lt;span class=&quot;pl-en&quot;&gt;union&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;deletes);
        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; (new_text, new_tombstones) &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;pl-en&quot;&gt;shuffle&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;text_with_inserts, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;tombstones, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;expanded_deletes_from_union, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;new_deletes_from_union);

        text &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; new_text;
        tombstones &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; new_tombstones;
        deletes_from_union &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; new_deletes_from_union;

        &lt;span class=&quot;pl-c&quot;&gt;// (5) Build a revision and append it to the history&lt;/span&gt;
        max_undo_so_far &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; std&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;cmp&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;max&lt;/span&gt;(max_undo_so_far, undo_group);
        out.&lt;span class=&quot;pl-en&quot;&gt;push&lt;/span&gt;(Revision {
            rev_id, max_undo_so_far,
            edit: Contents&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;Edit {
                priority, undo_group, deletes,
                inserts: inserted,
            }
        });

        expand_by &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; next_expand_by;
        next_expand_by &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;with_capacity&lt;/span&gt;(expand_by.&lt;span class=&quot;pl-en&quot;&gt;len&lt;/span&gt;());
    }

    (out, text, tombstones, deletes_from_union)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;That's it!&lt;/h4&gt;
&lt;p&gt;After all those stages are complete, the merge is done. The &lt;code&gt;rebase&lt;/code&gt; has appended the transformed versions of all the new &lt;code&gt;Revision&lt;/code&gt;s from &lt;code&gt;other&lt;/code&gt; and updated the &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;tombstones&lt;/code&gt; and &lt;code&gt;deletes_from_union&lt;/code&gt;. The actual &lt;code&gt;Engine::merge&lt;/code&gt; function just ties all these helpers together:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-rust&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;/// Merge the new content from another Engine into this one with a CRDT merge&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;merge&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;, other: &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;Engine) {
    &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; new_revs, text, tombstones, deletes_from_union) &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; base_index &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;find_base_index&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.revs, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;other.revs);
        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; a_to_merge &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.revs[base_index..];
        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; b_to_merge &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;other.revs[base_index..];

        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; common &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;find_common&lt;/span&gt;(a_to_merge, b_to_merge);

        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; a_new &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;rearrange&lt;/span&gt;(a_to_merge, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;common, &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.deletes_from_union.&lt;span class=&quot;pl-en&quot;&gt;len&lt;/span&gt;());
        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; b_new &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;rearrange&lt;/span&gt;(b_to_merge, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;common, other.deletes_from_union.&lt;span class=&quot;pl-en&quot;&gt;len&lt;/span&gt;());

        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; b_deltas &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;compute_deltas&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;b_new, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;other.text, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;other.tombstones, &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;other.deletes_from_union);
        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; expand_by &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;compute_transforms&lt;/span&gt;(a_new);

        &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; max_undo &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;max_undo_group_id&lt;/span&gt;();
        &lt;span class=&quot;pl-en&quot;&gt;rebase&lt;/span&gt;(expand_by, b_deltas, &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.text.&lt;span class=&quot;pl-en&quot;&gt;clone&lt;/span&gt;(), &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.tombstones.&lt;span class=&quot;pl-en&quot;&gt;clone&lt;/span&gt;(), &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.deletes_from_union.&lt;span class=&quot;pl-en&quot;&gt;clone&lt;/span&gt;(), max_undo)
    };

    &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.text &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; text;
    &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.tombstones &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; tombstones;
    &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.deletes_from_union &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; deletes_from_union;
    &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.revs.&lt;span class=&quot;pl-en&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;mut&lt;/span&gt; new_revs);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Testing&lt;/h4&gt;
&lt;p&gt;Every operation is tested in the &lt;code&gt;tests&lt;/code&gt; module of &lt;code&gt;engine.rs&lt;/code&gt;. The &lt;code&gt;Engine::merge&lt;/code&gt; function is tested using a facility for creating and running &quot;merge scripts&quot; that describe a sequence of operations on multiple engines, merges between them, and assertions about their contents. This makes building complex merge scenarios to test much easier.&lt;/p&gt;
</description>
<pubDate>Sat, 11 Aug 2018 23:24:38 +0000</pubDate>
<dc:creator>jxub</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/1342004?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>google/xi-editor</og:title>
<og:url>https://github.com/google/xi-editor</og:url>
<og:description>A modern editor with a backend written in Rust. https://google.github.io/xi-editor</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/crdt-details.md</dc:identifier>
</item>
<item>
<title>Myth Debugging: Is the Wii More Demanding to Emulate Than the GameCube?</title>
<link>https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/</link>
<guid isPermaLink="true" >https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/</guid>
<description>&lt;header&gt;&lt;img src=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/MythDebuggingBanner.png&quot;/&gt;&lt;img class=&quot;mini&quot; src=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/MythDebuggingBannermini.png&quot;/&gt;&lt;/header&gt;&lt;p&gt;On the &lt;a href=&quot;https://forums.dolphin-emu.org/&quot;&gt;Dolphin Forums&lt;/a&gt;, one of the more common questions that come up is &quot;&lt;em&gt;How come I can emulate this Wii game just fine but this GameCube game is slow?&lt;/em&gt;&quot; While those more knowledgeable about the intricacies of emulation may roll their eyes, it does warrant some explanation. Usually when stepping down from a newer console emulator to an older console emulator, the minimum requirements for emulation drop significantly. While there are some exceptions when dealing with exceptionally obtuse hardware, that concern doesn't hold up here: The GameCube and Wii, they're nearly identical hardware wise! The Wii at its core is really just a Super Charged GameCube with a few extra pieces bolted on.&lt;/p&gt;
&lt;p&gt;Common knowledge would say that games running on stronger hardware should be harder to emulate, but that isn't always necessarily true, even in the case of incredibly similar hardware. In order to explain further, let's look at what makes each of these consoles tick.&lt;/p&gt;
&lt;h3 id=&quot;cpu-emulation-gekko-vs-broadway&quot;&gt;CPU Emulation - Gekko V.S. Broadway&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#cpu-emulation-gekko-vs-broadway&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;



&lt;p&gt;The GameCube and Wii have very similar CPUs. The biggest difference between the two is that the GameCube's Gekko PowerPC Processor, a modified &lt;a href=&quot;https://en.wikipedia.org/wiki/PowerPC_7xx#PowerPC_750CXe&quot;&gt;PPC750CXe&lt;/a&gt;, is only 486MHz while the Wii Broadway Power PC Processor, a close to stock &lt;a href=&quot;https://en.wikipedia.org/wiki/PowerPC_G3&quot;&gt;PPC750CL&lt;/a&gt;, is 729MHz. That pegs the Wii processor at roughly 67% more powerful than the GameCube! That means that Dolphin's CPU thread should be much more stressed out by Wii games, right? Not necessarily, in fact the Wii's extra power can actually play out in Dolphin's favor!&lt;/p&gt;
&lt;p&gt;The GameCube's slower processor &lt;em&gt;may&lt;/em&gt; have proven to be a bottleneck for many developers. Plenty of GameCube games have some pretty creative solutions that rely on rather obscure behaviors of the processor which are more expensive to emulate. On the other hand, once the Wii was released and developers had a little more breathing room, a lot of those tricks suddenly stopped happening! Most of the power went toward more math calculations which map incredibly well to Dolphin's JIT. On that note, many Wii games actually are &lt;em&gt;easier&lt;/em&gt; on Dolphin thanks to the processor being stronger.&lt;/p&gt;
&lt;p&gt;That is not to say that a Wii game &lt;em&gt;can't&lt;/em&gt; be more demanding than a GameCube games, though. Ambitious developers could get everything and more out of the Wii that they could out of the GameCube. Overall though, the Wii's stronger processor doesn't do much to make emulation harder.&lt;/p&gt;
&lt;h3 id=&quot;gpu-emulation-flipper-vs-hollywood&quot;&gt;GPU Emulation - Flipper V.S. Hollywood&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#gpu-emulation-flipper-vs-hollywood&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Hollywood_(graphics_chip)&quot;&gt;&lt;img src=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/Hollywood_gpu.png&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Hollywood&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Much like with the processor, the Wii's GPU is a supercharged version of what was in the GameCube. It features a 243MHz Fixed-Function GPU (Hollywood) compared to a nearly identical except clockrate 162MHz GPU (Flipper.)&lt;/p&gt;
&lt;p&gt;The main bottleneck for emulating their GPUs comes from Dolphin having to flush the pipeline cache in situations when Flipper and Hollywood's GPUs didn't! They were extremely robust and could handle tons of state changes without flushing. The fact that Hollywood can draw more pixels and render more triangles is of very little concern to Dolphin, as the host GPU in a modern PC mixed with the CPU Vertex Loader JIT is more than enough to handle it. While there may be some extreme examples here and there of a game taking advantage of the Wii's extra GPU power to make Dolphin stumble, the bump in clock for the Wii GPU doesn't make a major difference in most cases.&lt;/p&gt;
&lt;h3 id=&quot;sound-emulation-the-gamecube-and-wii-dsps&quot;&gt;Sound Emulation - The GameCube and Wii DSPs&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#sound-emulation-the-gamecube-and-wii-dsps&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There isn't that much to say here except for a few minor differences. Even then, if you only care about performance, High Level Emulation (HLE) trivializes the performance impact of emulating the DSP in modern Dolphin. The main difference between the two DSPs is that the Wii processes 3ms of data at a time vs the GameCube, which processes five 1ms pieces of data at a time. While the Wii does have more channels than the GameCube, its workflow is slightly more efficient to emulate. The result? Both DSPs are roughly the same when it comes to emulation.&lt;/p&gt;
&lt;h3 id=&quot;wii-specific-hardware-starlet-and-friends&quot;&gt;Wii Specific Hardware - Starlet and Friends&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#wii-specific-hardware-starlet-and-friends&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For a quick aside, on top of having faster variants of the GameCube hardware, the Wii also had a bunch of new hardware related to Bluetooth, Wi-Fi, the SD Slot, etc. The PPC can't directly access the new hardware and instead talks to a small ARM coprocessor (&lt;a href=&quot;http://wiibrew.org/wiki/Hardware/Starlet&quot;&gt;Starlet&lt;/a&gt;) which manages access. Because Dolphin uses HLE for Starlet, it doesn't impact performance in most cases.&lt;/p&gt;
&lt;p&gt;The only time where IOS-HLE noticeably impacts Dolphin is on various asynchronous events (such as a some parts of online functionality) that Dolphin handles synchronously, resulting in some stuttering here and there. This is mostly noticeable when connecting to servers in games.&lt;/p&gt;
&lt;h3 id=&quot;ram-watch-gamecube-aram-vs-wii-mem2&quot;&gt;RAM Watch - GameCube ARAM V.S. Wii MEM2&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#ram-watch-gamecube-aram-vs-wii-mem2&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It shouldn't be any surprise that the Wii also saw an upgrade in RAM over the GameCube. Both consoles feature a 24MB MEM1 region that is more or less identical for emulation purposes.&lt;/p&gt;
&lt;p&gt;The main change is that the GameCube had 16MB of slower A(udio)RAM that wasn't directly mappable to the processor. The Wii dropped this ARAM in favor of adding a 64MB MEM2 region that games could directly map without having to use paging. This is the first hardware change that greatly impacts emulation.&lt;/p&gt;
&lt;h4 id=&quot;aram-flips-the-script&quot;&gt;ARAM Flips The Script!&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#aram-flips-the-script&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;While ARAM could be used for audio processing, some ambitious developers thought it would be a waste to leave that 16MB of RAM sitting there just for audio when they only have 24MB of regular RAM. They couldn't directly map this 16MB of RAM, but they could use it as &lt;em&gt;virtual memory&lt;/em&gt; by paging data in and out via Direct Memory Access!&lt;/p&gt;
&lt;p&gt;Games commonly achieved this through accessing &lt;em&gt;currently&lt;/em&gt; unpaged memory and triggering an exception. Then their specially programmed exception handler would map in memory from the ARAM into the page they were trying to access while paging something else out (which if accessed later on, could be paged back in!) When the exception handler returned program execution back to where it was, the fetch/load/store would go through as if the memory was mapped all along. Some of the most demanding games on the GameCube resorted to this to get an edge over their competition by essentially having an extra 16MB of virtual memory to work with.&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://dolphin-emu.org/blog/2016/09/06/booting-the-final-gc-game/&quot;&gt;&lt;img src=&quot;https://dolphin-emu.org/m/user/blog/finalgcgame/virtualphysmemorymmu.svg&quot; alt=&quot;Virtual Memory&quot;/&gt;&lt;/a&gt; Click the image to go to our blog article that deals with MMU emulation in more detail.&lt;/div&gt;
&lt;p&gt;The early libraries provided by Nintendo didn't provide for using the ARAM as virtual memory, so most of the early games (except for &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Star_Wars_Rogue_Squadron_II:_Rogue_Leader&quot;&gt;Rogue Squadron II&lt;/a&gt;, of course) didn't use the ARAM for virtual memory. This behavior became &lt;em&gt;much&lt;/em&gt; more widespread when Nintendo started providing a library to help developers page memory into and out of ARAM. While there are a few custom implementations, a majority of games that make use of the ARAM as virtual memory use Nintendo's libraries.&lt;/p&gt;
&lt;p&gt;Dolphin didn't actually receive its initial implementation of full MMU emulation until July of 2010, so instead of leaving these games completely broken, a more evil solution was devised. The games using Nintendo's library were &lt;em&gt;very&lt;/em&gt; predictable in how they set up their page tables. By simply marking those regions of memory as valid, the games would be able to read from and write to virtual memory without issues. This bypassed the whole song and dance of memchecks, the exception handler, and paging data in and out of the ARAM!&lt;/p&gt;
&lt;p&gt;This didn't quite work for games with custom solutions. For them, &lt;em&gt;Full MMU&lt;/em&gt; was devised. By emulating memchecks and the rest of the process of paging data in and out of ARAM, Dolphin could finally boot those games... at a cost. Full MMU was incredibly slow and left most of these games nearly unplayable despite the emulator finally being able to boot them. A few notable examples include, but are not limited to: &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Star_Wars_Rogue_Squadron_II:_Rogue_Leader&quot;&gt;Star Wars: Rogue Squadron 2&lt;/a&gt;, &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Star_Wars_Rogue_Squadron_III:_Rebel_Strike&quot;&gt;Star Wars: Rogue Squadron 3&lt;/a&gt;, &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Star_Wars:_The_Clone_Wars&quot;&gt;Star Wars: The Clone Wars&lt;/a&gt;, and &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Spider-Man_2&quot;&gt;Spider-Man 2&lt;/a&gt;. A special mention has to go to &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Star_Wars:_The_Clone_Wars&quot;&gt;Star Wars: The Clone Wars&lt;/a&gt;, as its requirement of &lt;a href=&quot;https://dolphin-emu.org/blog/2016/09/06/booting-the-final-gc-game/&quot;&gt;Dynamic Block Address Translation&lt;/a&gt; forced a rewrite of Dolphin's MMU emulation that slowed down the other full MMU games thanks to added emulation.&lt;/p&gt;
&lt;p&gt;If you're wondering why Full MMU games are so much slower, it's because Dolphin can no longer assume the memory the game is reading to and writing to is actually valid. Instead it has to enable expensive memchecks and &lt;em&gt;make sure&lt;/em&gt; that memory is valid before letting the game access it. This is slow, very slow. In recent years, many, many optimizations to the JIT have made some Full MMU titles run fairly well. They're still &lt;em&gt;extremely&lt;/em&gt; demanding, but, many of them can run on modern hardware without slowdown.&lt;/p&gt;
&lt;p&gt;Wii games don't have to do any of this - they have full access to the 64MB of MEM2. This means that Dolphin doesn't have to worry about MMU emulation in general. As with any great rule, there are some exceptions, such as &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Cars_2&quot;&gt;games&lt;/a&gt; that are &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Toy_Story_3&quot;&gt;purposefully&lt;/a&gt; trying to &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Disney_Infinity&quot;&gt;break&lt;/a&gt; Dolphin. Those games will be covered in another article as they seem to particular target Dolphin's weaknesses and thus some of their behaviors doesn't actually make sense for the source hardware.&lt;/p&gt;
&lt;h3 id=&quot;other-demanding-behaviors&quot;&gt;Other Demanding Behaviors&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#other-demanding-behaviors&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some games are very lightweight to emulate while others are problematic. This is because of the various features these games require. Full MMU emulation is just one of many, but, here are some of the other common behaviors that affect emulator performance.&lt;/p&gt;
&lt;h4 id=&quot;readingwriting-embeddedexternal-framebuffer-copies&quot;&gt;&lt;strong&gt;Reading/Writing Embedded/External FrameBuffer Copies&lt;/strong&gt;&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#readingwriting-embeddedexternal-framebuffer-copies&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If a game reads the framebuffer, Dolphin has to send what the host GPU is rendering to the CPU. By default, Dolphin turns this feature off because it's very slow, instead opting to store it only as a texture on the GPU. This works for most effects as long as the GameCube/Wii CPU doesn't need to use it for anything in particular. With Store EFB/XFB Copies to RAM, we faithfully copy the framebuffer off of the host GPU and into RAM. This is much slower on modern computers than it is on the GameCube and Wii for several reasons, including the fact that the GameCube/Wii CPU and GPU share RAM. Dolphin has to copy the memory across PCIe, send everything to the GPU, and then wait for it to finish doing its work before continuing. Because GPUs work in batches and Dolphin doesn't know when to flush in advance, this is very inefficient.&lt;/p&gt;

&lt;div&gt;&lt;a href=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/MarioSunshine.jpg&quot;&gt;&lt;img src=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/MarioSunshinethumb.jpg&quot; alt=&quot;Super Mario Sunshine&quot;/&gt;&lt;/a&gt; Mario is unaffected (and rather unimpressed) by the goop in Super Mario Sunshine with Store EFB Copies to Texture Only enabled.&lt;/div&gt;

&lt;h4 id=&quot;cpu-readingwriting-directly-to-the-embedded-framebuffer&quot;&gt;&lt;strong&gt;CPU Reading/Writing directly to the Embedded FrameBuffer&lt;/strong&gt;&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#cpu-readingwriting-directly-to-the-embedded-framebuffer&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;While the CPU/GPU shared RAM on the console, sometimes developers wanted to access the framebuffer directly. The framebuffer is embedded in the GPU (EFB), but mapped to the CPU and can be accessed, The option to enable this behavior in Dolphin is known as &lt;em&gt;EFB Access from CPU&lt;/em&gt;. Games like &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Super_Mario_Galaxy&quot;&gt;Super Mario Galaxy&lt;/a&gt; and &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=The_Legend_of_Zelda:_Twilight_Princess_(Wii)&quot;&gt;Twilight Princess (on Wii)&lt;/a&gt; do this to help see the depth of what you're pointing at when aiming various weapons with the Wii pointer. By disabling this with &lt;em&gt;Skip EFB Access from CPU&lt;/em&gt; in Dolphin, you'll end up missing a lot due to the game not being able to tell how far your target is from where you're aiming. This will make for some interesting shot trajectories.&lt;/p&gt;

&lt;div&gt;&lt;a href=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/SuperMarioGalaxy.jpg&quot;&gt;&lt;img src=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/SuperMarioGalaxythumb.jpg&quot; alt=&quot;Super Mario Galaxy&quot;/&gt;&lt;/a&gt; Pull Stars and aiming both require EFB Access from CPU in order to function in Dolphin.&lt;/div&gt;

&lt;p&gt;It should be noted that Dolphin is extremely good at minimizing the impact of certain access patterns, and has an EFB peek cache available to OpenGL and Vulkan. An example of a game slow strictly from EFB Access is &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Monster_Hunter_Tri&quot;&gt;Monster Hunter Tri&lt;/a&gt;, which uses it for selecting custom colors from a palette and controlling bloom intensity.&lt;/p&gt;
&lt;h4 id=&quot;lots-of-state-changes&quot;&gt;&lt;strong&gt;Lots of State Changes&lt;/strong&gt;&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#lots-of-state-changes&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;As mentioned above in the GPU section, one particularly difficult thing about emulating the GameCube/Wii is that Flipper/Hollywood can pipeline a lot of state changes that require modern PC GPUs to flush the pipeline. These games may be doing something that is tolerable for their target hardware but is &lt;em&gt;incredibly inefficient&lt;/em&gt; to do on a modern GPU! Two prominent examples are the snow in Flanoir in &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Tales_of_Symphonia&quot;&gt;Tales of Symphonia&lt;/a&gt; and the minimap in &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=The_Legend_of_Zelda:_Twilight_Princess&quot;&gt;Twilight Princess&lt;/a&gt;.&lt;/p&gt;

&lt;div&gt;&lt;a href=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/FaronWoods.jpg&quot;&gt;&lt;img src=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/TwilightPrincessMap.jpg&quot; alt=&quot;The Legend of Zelda: Twilight Princess&quot;/&gt;&lt;/a&gt; The fully rendered minimap can require a beast of a computer.&lt;/div&gt;

&lt;p&gt;When properties are varying per-batch, modern GPUs struggle to keep up and Dolphin does little to help currently. The one thing to note is that Vulkan helps a lot in draw call bottlenecked situations thanks to more efficient handling of draw calls and far fewer API calls. This is because Vulkan has a single immutable pipeline switch and can be potentially cut down to just three API calls, compared to tens in OpenGL. In the case of &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=The_Legend_of_Zelda:_Twilight_Princess&quot;&gt;The Legend of Zelda: Twilight Princess&lt;/a&gt;, the performance difference is so huge that maximum speed can be doubled just by using Vulkan in some areas.&lt;/p&gt;
&lt;h4 id=&quot;other-notable-demanding-behaviors&quot;&gt;&lt;strong&gt;Other Notable Demanding Behaviors&lt;/strong&gt;&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#other-notable-demanding-behaviors&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Some other examples include games like &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=F-Zero_GX&quot;&gt;F-Zero GX&lt;/a&gt;, &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Super_Monkey_Ball&quot;&gt;Super Monkey Ball&lt;/a&gt;, and &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Dragon_Ball:_Revenge_of_King_Piccolo&quot;&gt;Dragon Ball: Revenge of King Piccolo&lt;/a&gt;, which rely on CPU behaviors that require more exact emulation of certain CPU instructions. Suffice to say, games have a lot of ways to make things hard on Dolphin.&lt;/p&gt;
&lt;h3 id=&quot;a-look-at-the-numbers&quot;&gt;A Look at the Numbers&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#a-look-at-the-numbers&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now it's time to put everything into practice and get some test results. The test machine for the following is an i7-6700K running Windows 10 and used the OpenGL graphics backend unless specified otherwise.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Settings&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Single Core&lt;/li&gt;
&lt;li&gt;Native Resolution&lt;/li&gt;
&lt;li&gt;EFB/XFB Copies specified by GameINI&lt;/li&gt;
&lt;li&gt;MMU Emulation Enabled&lt;/li&gt;
&lt;li&gt;Per-game speedhacks disabled&lt;/li&gt;
&lt;li&gt;All other settings default unless specified otherwise&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;base-analysis&quot;&gt;&lt;strong&gt;Base Analysis&lt;/strong&gt;&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#base-analysis&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Despite the small sample size, some trends start to show up. &lt;em&gt;In general&lt;/em&gt; GameCube games did run at a higher framerate than Wii games in this test. But that alone doesn't tell the whole story! Many of the more demanding GameCube games have higher requirements than most of the Wii games. Star Wars: Rogue Squadron III, a GameCube game, had the lowest performance out of all of the games. Other interesting notes is that &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Metroid_Prime_(GC)&quot;&gt;Metroid Prime 1 (GC)&lt;/a&gt; is more demanding than &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Super_Smash_Bros._Brawl&quot;&gt;Super Smash Bros. Brawl&lt;/a&gt; &lt;em&gt;and&lt;/em&gt; &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Super_Mario_Galaxy&quot;&gt;Super Mario Galaxy&lt;/a&gt; within the confines of this test. In order to understand &lt;em&gt;why&lt;/em&gt;, deeper analysis into the games is required.&lt;/p&gt;
&lt;h4 id=&quot;metal-gear-solid-the-twin-snakes&quot;&gt;&lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Metal_Gear_Solid:_The_Twin_Snakes&quot;&gt;Metal Gear Solid: The Twin Snakes&lt;/a&gt;&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#metal-gear-solid-the-twin-snakes&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;&lt;a href=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/MGSMinimap.png&quot;&gt;&lt;img src=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/MGSMinimapthumb.jpg&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;This game uses a feature known as &lt;em&gt;Line-Width&lt;/em&gt; to render the minimap which is fairly slow to emulate thanks to requiring a geometry shader. Certain areas also use Line-Width's sister feature, &lt;em&gt;Point-Size&lt;/em&gt; in order to render dots of snow during some of the outdoor segments. It should be noted that modern GPUs &lt;em&gt;do&lt;/em&gt; have an implementation of Line-Width/Point-Size, but, differences in how they work cause the effects to render incorrectly. In order to get an accurate reproduction of what the GameCube/Wii rendered, Dolphin must use a geometry shader. Depending on the GPU, &lt;a href=&quot;http://www.joshbarczak.com/blog/?p=667&quot;&gt;geometry shaders&lt;/a&gt; can become a bottleneck, so it's worth noting when a game uses these two features.&lt;/p&gt;
&lt;p&gt;The game also &lt;em&gt;optionally&lt;/em&gt; requires &lt;em&gt;Store XFB Copies to Texture and RAM&lt;/em&gt; in order to render the codec screen correctly and does use ARAM as virtual memory. While &lt;em&gt;Store XFB Copies to Texture and RAM&lt;/em&gt; greatly limits the max potential framerate, it didn't push the framerate lower in more demanding areas. The scene used in the test &lt;strong&gt;did not&lt;/strong&gt; require &lt;em&gt;Store XFB Copies to Texture and RAM&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&quot;mario-party-2&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Mario_Party_2&quot;&gt;Mario Party 2&lt;/a&gt;&lt;/strong&gt;&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#mario-party-2&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Nintendo_64&quot;&gt;Nintendo 64 Virtual Console games&lt;/a&gt; use a MIPS JIT that runs on PPC. Emulating a JIT within a JIT is not the most efficient task, but sometimes that's the task you're given. With N64 Virtual Console games not being much of a challenge graphically, all of the challenge comes from trying to JIT their JIT fast enough. Thanks to many optimizations to previously expensive instructions, games like &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Mario_Party_2&quot;&gt;Mario Party 2&lt;/a&gt; can be emulated without too much difficulty.&lt;/p&gt;
&lt;p&gt;This wasn't always the case - even &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Super_Mario_64&quot;&gt;Super Mario 64&lt;/a&gt; was a struggle back in the days of 3.5 and many other Virtual Console games &lt;a href=&quot;https://dolphin-emu.org/blog/2016/04/01/dolphin-progress-report-march-2016/#40-9154-instruction-slice-timing-issue-fixes-by-phire&quot;&gt;didn't run correctly&lt;/a&gt;, &lt;a href=&quot;https://dolphin-emu.org/blog/2014/08/31/dolphin-progress-report-august-2014/#audio-accuracy-assault-40-2368-40-2386-and-40-2547-by-booto&quot;&gt;were missing audio&lt;/a&gt;, or even &lt;a href=&quot;https://dolphin-emu.org/blog/2015/06/01/dolphin-progress-report-may-2015/#40-6204-use-proper-floating-point-depth-precision-by-armada-phire-and-fiora&quot;&gt;required ridiculously precise depth emulation&lt;/a&gt;. It's easy to say that these games are trivial to emulate because emulation is nearly perfect now, but getting here was a rather bumpy ride.&lt;/p&gt;
&lt;h4 id=&quot;metroid-prime-and-metroid-prime-trilogy-metroid-prime&quot;&gt;&lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Metroid_Prime_(GC)&quot;&gt;Metroid Prime&lt;/a&gt; and &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Metroid_Prime_(Metroid_Prime:_Trilogy)&quot;&gt;Metroid Prime Trilogy - Metroid Prime&lt;/a&gt;&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#metroid-prime-and-metroid-prime-trilogy-metroid-prime&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Metroid_Prime_(GC)&quot;&gt;Metroid Prime 1 on GC&lt;/a&gt; has a speedhack available to assist Dolphin with the detection of the idle loop. For the purposes of this test, it was not used.&lt;/p&gt;
&lt;p&gt;Metroid Prime Trilogy's version of &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Metroid_Prime_(Metroid_Prime:_Trilogy)&quot;&gt;Metroid Prime&lt;/a&gt; requires &lt;em&gt;Store EFB Copies to Texture and RAM&lt;/em&gt; for the scanner (much like the other Prime games) but the original &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Metroid_Prime_(GC)&quot;&gt;GameCube version&lt;/a&gt; does not. &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Metroid_Prime_2:_Echoes_(GC)&quot;&gt;Metroid Prime 2&lt;/a&gt; &lt;em&gt;does&lt;/em&gt; require &lt;em&gt;Store EFB Copies to Texture and RAM&lt;/em&gt; for the scanner and runs a bit slower because of that, but not as slow as the Wii version.&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/MetroidTrilogy.png&quot;&gt;&lt;img src=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/MetroidTrilogythumb.jpg&quot; alt=&quot;Metroid Prime Trilogy&quot;/&gt;&lt;/a&gt; Metroid Prime Trilogy is among the most demanding games in Dolphin.&lt;/div&gt;
&lt;p&gt;Another factor that slows down the &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Category:Metroid_Prime_(Series)&quot;&gt;Metroid Prime games&lt;/a&gt; is the insistance to draw their 3D map screens primarily using the Line-Width feature. Some of their more complicated maps can push this feature so hard that it can bottleneck Dolphin by itself! The test for the article was in one of the areas &lt;em&gt;not&lt;/em&gt; affected by the usage of Line-Width. On a final note, &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Metroid_Prime:_Trilogy&quot;&gt;Metroid Prime Trilogy&lt;/a&gt; is one of the games where performance just seems to be relatively static regardless of what how much is going on. Very little fluctuation with a ton of action, doesn't speed up when nothing is going on. This is partially due to Dolphin not detecting the idle-loop and a low performance ceiling thanks to expensive features like &lt;em&gt;Store EFB Copies to Texture and RAM&lt;/em&gt; being required.&lt;/p&gt;
&lt;h4 id=&quot;super-smash-bros-melee-and-brawl&quot;&gt;&lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Super_Smash_Bros._Melee&quot;&gt;Super Smash Bros. Melee&lt;/a&gt; and &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Super_Smash_Bros._Brawl&quot;&gt;Brawl&lt;/a&gt;&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#super-smash-bros-melee-and-brawl&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Both of these games use fairly generic settings and don't do anything that's all that slow in Dolphin. &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Super_Smash_Bros._Brawl&quot;&gt;Brawl&lt;/a&gt; pushes more vertices than &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Super_Smash_Bros._Melee&quot;&gt;Melee&lt;/a&gt; and has more sophisticated physics, making it a little bit slower to emulate overall. There are some menus in Brawl that use EFB access for &lt;em&gt;something&lt;/em&gt; but that was easily solved with the EFB peek cache.&lt;/p&gt;
&lt;p&gt;While &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Super_Smash_Bros._Melee&quot;&gt;Melee&lt;/a&gt; is lightweight overall, there is a particular level that is slower than the rest by a non-trivial margin - Fountain of Dreams.&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/Melee.jpg&quot;&gt;&lt;img src=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/Meleethumb.jpg&quot; alt=&quot;Super Smash Bros. Melee&quot;/&gt;&lt;/a&gt; Fountain of Dreams ends up Melee's most demanding stage due to the starry backdrop.&lt;/div&gt;
&lt;p&gt;While a lot of people have attributed the slowdown to the reflection in the water, the true culprit is actually the backdrop and fountain sprays! To render the many stars and the spraying water, &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Super_Smash_Bros._Melee&quot;&gt;Melee&lt;/a&gt; uses Point-Size. Just like with &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Metal_Gear_Solid:_The_Twin_Snakes&quot;&gt;Metal Gear Solid: The Twin Snakes&lt;/a&gt;, Dolphin needs to use a geometry shader in order to emulate the effect properly, resulting in the stage being more demanding. Running the performance test on this stage would have made &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Super_Smash_Bros._Melee&quot;&gt;Super Smash Bros. Melee&lt;/a&gt; slower than &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Super_Smash_Bros._Brawl&quot;&gt;Super Smash Bros. Brawl&lt;/a&gt;, which would have been misleading.&lt;/p&gt;
&lt;h4 id=&quot;super-mario-galaxy-and-super-mario-sunshine&quot;&gt;&lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Super_Mario_Galaxy&quot;&gt;Super Mario Galaxy&lt;/a&gt; and &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Super_Mario_Sunshine&quot;&gt;Super Mario Sunshine&lt;/a&gt;&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#super-mario-galaxy-and-super-mario-sunshine&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;&lt;a href=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/SunshineOcclusion.png&quot;&gt;&lt;img src=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/SunshineOcclusionthumb.jpg&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Turning radius tightens when Mario can't be seen!&lt;/p&gt;
&lt;/div&gt;
As mentioned above, &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Super_Mario_Galaxy&quot;&gt;Super Mario Galaxy&lt;/a&gt; needs &lt;em&gt;EFB Access from CPU&lt;/em&gt; for seeing what the Wii pointer is pointing at on screen. Without it enabled, star bits fly toward the lower left corner and pull stars cease to function whatsoever. &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Super_Mario_Galaxy&quot;&gt;Super Mario Galaxy&lt;/a&gt; also pushes a lot of polygons and can easily bottleneck weaker computers with the number of draw calls it has in the main hub areas. Surprisingly enough, many of the actual levels are easier to emulate than the Comet Observatory.
&lt;p&gt;&lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Super_Mario_Sunshine&quot;&gt;Super Mario Sunshine&lt;/a&gt; is a bit less demanding thanks to being a 30 FPS game, likely due to the limitations of the GameCube. Despite needing &lt;em&gt;Store EFB Copies to Texture and RAM&lt;/em&gt; in order to clear the goop and &lt;em&gt;EFB Access from CPU&lt;/em&gt; to tell if Mario is behind objects, &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Super_Mario_Sunshine&quot;&gt;Super Mario Sunshine&lt;/a&gt; ended up less demanding in the performance test.&lt;/p&gt;
&lt;h4 id=&quot;spider-man-2&quot;&gt;&lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Spider-Man_2&quot;&gt;Spider-Man 2&lt;/a&gt;&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#spider-man-2&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;As a full MMU title, Dolphin has a spotty record of being able to run it well in the past. It runs as well as it ever has in Dolphin nowadays, minus some lost performance thanks to Dynamic BATs. It also requires &lt;em&gt;Store EFB Copies to Texture and RAM&lt;/em&gt; for various reflections to render correctly. Despite the MMU pedigree, &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Spider-Man_2&quot;&gt;Spider-Man 2&lt;/a&gt; is nowhere near as slow as the two Rogue Squadron games on the GameCube and easily stays above full-speed on the i7-6700K.&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/Spiderman.jpg&quot;&gt;&lt;img src=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/Spidermanthumb.jpg&quot; alt=&quot;Spiderman 2&quot;/&gt;&lt;/a&gt; Spider-Man 2's webswinging was its main draw and remains robust.&lt;/div&gt;
&lt;h4 id=&quot;the-legend-of-zelda-twilight-princess-gc-and-wii&quot;&gt;&lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=The_Legend_of_Zelda:_Twilight_Princess&quot;&gt;The Legend of Zelda: Twilight Princess&lt;/a&gt; (&lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=The_Legend_of_Zelda:_Twilight_Princess_(GC)&quot;&gt;GC&lt;/a&gt; and &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=The_Legend_of_Zelda:_Twilight_Princess_(Wii)&quot;&gt;Wii&lt;/a&gt;)&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#the-legend-of-zelda-twilight-princess-gc-and-wii&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=The_Legend_of_Zelda:_Twilight_Princess&quot;&gt;The Legend of Zelda: Twilight Princess&lt;/a&gt; represents &lt;strong&gt;four&lt;/strong&gt; bars on the graph above because it manages to highlight several issues all at once. It shows how a particular bottleneck can even the odds between a GameCube and Wii game &lt;em&gt;and&lt;/em&gt; shows a performance difference when that bottleneck is no longer the primary factor! Unlike OpenGL, Vulkan is able to power through the Minimap's many draw calls. Both the GameCube version and the Wii version are bottlenecked by the minimap in OpenGL and run about the same speed. But when you're no longer bottlenecked on draw calls, it becomes clear that the Wii version is more demanding than the GameCube version. This is due to heavier use of &lt;em&gt;EFB Access from CPU&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&quot;star-wars-rogue-squadron-iii&quot;&gt;&lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Star_Wars_Rogue_Squadron_III:_Rebel_Strike&quot;&gt;Star Wars: Rogue Squadron III&lt;/a&gt;&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#star-wars-rogue-squadron-iii&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Last but not least, &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Star_Wars_Rogue_Squadron_III:_Rebel_Strike&quot;&gt;Rogue Squadron III&lt;/a&gt; stands alone as the slowest game tested by far. The actual reason for why it's slow is very predictable:&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/Factor5.jpg&quot;&gt;&lt;img src=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/Factor5.jpg&quot; alt=&quot;Evil&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;...What else did you expect? There isn't a single reason why this game is slow - the reason it's difficult to emulate is &lt;em&gt;everything&lt;/em&gt; it does.&lt;/p&gt;
&lt;p&gt;To start off with the basics, &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Star_Wars_Rogue_Squadron_III:_Rebel_Strike&quot;&gt;Star Wars: Rogue Squadron III&lt;/a&gt; is a very high polygon GameCube game, hitting over 120,000 polygons in land levels like Hoth! This is a tremendously high count for a 60 FPS GameCube game and can stand tall against many Wii games. For comparison, in the hub area of Super Mario Galaxy, the game will push out between 160,000 and 180,000 polygons depending on where characters are moving. &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Star_Wars_Rogue_Squadron_III:_Rebel_Strike&quot;&gt;Rogue Squadron III&lt;/a&gt; &lt;em&gt;also&lt;/em&gt; pushed the GameCube CPU as hard as it would go, sometimes even lagging on console during intense battle scenes. Increasing Dolphin's emulated CPU clock rate can smooth out this lag - assuming you have a PC capable of running this game at full speed.&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/GLRE64-1.png&quot;&gt;&lt;img src=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/GLRE64-1.png&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Transition with Store XFB Copies to Texture Only&lt;/p&gt;
&lt;/div&gt;
&lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Star_Wars_Rogue_Squadron_III:_Rebel_Strike&quot;&gt;Rogue Squadron III&lt;/a&gt; also uses features that are slow for Dolphin to emulate on top of just being demanding in general. Unlike Rogue Squadron II, &lt;em&gt;Store XFB Copies to Texture and RAM&lt;/em&gt; is required for menu transitions as they take a capture of what was on screen and fade it out rather than actually fading out what's on screen. &lt;em&gt;Store EFB Copies to Texture and RAM&lt;/em&gt; is needed in several stages where the game pulls out some fairly fancy framebuffer effects. Those two alone would be bad enough, but &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Star_Wars_Rogue_Squadron_III:_Rebel_Strike&quot;&gt;Rogue Squadron III&lt;/a&gt; &lt;em&gt;also&lt;/em&gt; need &lt;em&gt;EFB Access from CPU&lt;/em&gt; for various occlusion effects, even though Dolphin can't render them correctly anyway. The game has self-shadowing models and a lot of dynamic lighting effects that cause tons of shader generation when not using Ubershaders. Other notable features to mention is that &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Star_Wars_Rogue_Squadron_III:_Rebel_Strike&quot;&gt;Rogue Squadron III&lt;/a&gt; has very high resolution textures for the GameCube era &lt;em&gt;and&lt;/em&gt; fake HDR bloom.
&lt;p&gt;But we're not done, yet! The game also uses obscure features like &lt;a href=&quot;https://dolphin-emu.org/blog/2015/02/01/dolphin-progress-report-january-2015/#40-5279-add-zfreeze-emulation-to-hardware-backends-by-neobrain-phire-and-nanobyte011&quot;&gt;zFreeze&lt;/a&gt; for its skyboxes and Line-Width for rendering wireframes of weapons and ships. While it's not &lt;em&gt;particularly&lt;/em&gt; demanding about either of these features, it's more that poor Dolphin has to emulate on top of everything else.&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/RS3ShipSelect.png&quot;&gt;&lt;img src=&quot;https://dolphin-emu.org/m/user/blog/myth-debugging-gc-vs-wii/RS3ShipSelectthumb.jpg&quot;/&gt;&lt;/a&gt;
&lt;p&gt;They used every feature...&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Star_Wars_Rogue_Squadron_III:_Rebel_Strike&quot;&gt;Star Wars: Rogue Squadron III&lt;/a&gt; is, of course, a full MMU game much like its launch title older brother. While Rogue Squadron II started booting in 2010 alongside full MMU emulation, Rogue Squadron III was much more stubborn about it, &lt;a href=&quot;https://dolphin-emu.org/blog/2014/10/31/dolphin-progress-report-october-2014/#40-3473-fix-mmu-loadsstores-that-cross-page-boundaries-by-fiora&quot;&gt;requiring hands on debugging to uncover its new trick&lt;/a&gt; of storing/reading data &lt;em&gt;across&lt;/em&gt; pages.&lt;/p&gt;
&lt;p&gt;If that wasn't bad enough, as of the writing of this article, &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Star_Wars_Rogue_Squadron_III:_Rebel_Strike&quot;&gt;Rogue Squadron III&lt;/a&gt; doesn't actually run in Dolphin. Instead, two separate test builds were used to gather frame-rate data, the most recent of which being &lt;a href=&quot;https://github.com/dolphin-emu/dolphin/pull/7214&quot;&gt;Stenzek's pull request&lt;/a&gt; that should allow the game to run in single core again until a more drastic rewrite can be done to Dolphin's FIFO emulation. It should also be noted that while &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Star_Wars_Rogue_Squadron_III:_Rebel_Strike&quot;&gt;Rogue Squadron III&lt;/a&gt; had the lowest frame-rate reading in the test, there's really more to it than that. The amount of code it generated forced many JIT cache flushes (which result in a nifty stutter,) and there were particular areas in the game where Dolphin would drop to single digit framerates and the game's lighting effects would begin flickering. With all due respect to &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Star_Wars:_The_Clone_Wars&quot;&gt;Star Wars: The Clone Wars&lt;/a&gt; and its Dynamic BATs, &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Star_Wars_Rogue_Squadron_III:_Rebel_Strike&quot;&gt;Rogue Squadron III&lt;/a&gt; is the ultimate game to emulate on the GameCube.&lt;/p&gt;
&lt;h3 id=&quot;optimizing-dolphin-for-these-cases&quot;&gt;Optimizing Dolphin For These Cases&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#optimizing-dolphin-for-these-cases&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Just because a game is slow now doesn't mean it will always be slow in Dolphin (except for &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Star_Wars_Rogue_Squadron_III:_Rebel_Strike&quot;&gt;Rogue Squadron III&lt;/a&gt;). Throughout Dolphin's past, various features have been merged targeting individual bottlenecks, doubling or tripling the max performance of a game overnight. One recent example of this is &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Silent_Hill:_Shattered_Memories&quot;&gt;Silent Hill: Shattered Memories&lt;/a&gt; which bottlenecked on &lt;a href=&quot;https://dolphin-emu.org/blog/2016/09/01/dolphin-progress-report-august-2016/#50-389-pixel-engine-token-cleanup-and-optimization-by-degasus&quot;&gt;PE Tokens&lt;/a&gt; which were previously sent one at a time. By simply batching them together, the game went from being one of the slowest in Dolphin to merely very demanding.&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://dolphin-emu.org/m/user/blog/progress-report/2016-august/petokenperf.svg&quot;&gt;&lt;img src=&quot;https://dolphin-emu.org/m/user/blog/progress-report/2016-august/petokenperf.svg&quot; alt=&quot;Silent Hill Chart&quot;/&gt;&lt;/a&gt; Silent Hill is a lot faster these days.&lt;/div&gt;
&lt;p&gt;Is there hope for these cases to have a similar turn around?&lt;/p&gt;
&lt;h4 id=&quot;draw-call-bottleneck&quot;&gt;&lt;strong&gt;Draw Call Bottleneck&lt;/strong&gt;&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#draw-call-bottleneck&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The draw-call bottleneck is something that's been looked at in the past and a plan has even been drawn up. By having a second level FIFO, Dolphin could better analyze the most efficient way to render a game by tracking the state and batching tasks for the GPU in a more efficient manner. The major problem with this is that it would require a sizable rewrite to Dolphin's GPU emulation core.&lt;/p&gt;
&lt;h4 id=&quot;cpu-and-mmu-bottlenecked-titles&quot;&gt;&lt;strong&gt;CPU and MMU Bottlenecked Titles&lt;/strong&gt;&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#cpu-and-mmu-bottlenecked-titles&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;While not the death knell it once was, the Enable MMU titles are still slow to emulate. All hope isn't lost, as some of the remaining performance hit could be mitigated by inlining the page table cache. The other potential way to make these games faster is for the JIT to be faster in general, as the CPU thread is where they're getting stopped up. While Dolphin's JIT pushes its current design pretty hard, it's relatively simple compared to many modern efforts. With a full redesign, it's possible that Dolphin's JIT could be made far more efficient for some of the games that currently trip it up.&lt;/p&gt;
&lt;h4 id=&quot;store-efbxfb-copies-to-texture-and-ram-titles&quot;&gt;&lt;strong&gt;Store EFB/XFB Copies to Texture and RAM Titles&lt;/strong&gt;&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#store-efbxfb-copies-to-texture-and-ram-titles&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A lot of effort has gone into trying to find ways to make storing EFB/XFB copes to RAM faster over the years, but it's been rough going to solve the problem. It was previously thought that &lt;em&gt;locking&lt;/em&gt; could potentially lessen the impact of these features, but various limitations have currently grounded the experiment. The concept is that Dolphin can &lt;em&gt;lock&lt;/em&gt; the EFB/XFB copy regions in memory and turn off &lt;em&gt;Storing to RAM&lt;/em&gt; unless the game actually tries to access those addresses! That way, Dolphin could enable the feature only when needed, and if they were on for a fraction of the time, the performance hit would be smaller in most games.&lt;/p&gt;
&lt;p&gt;The problem for this one is twofold. Dolphin does not get the granularity it wants when locking memory, and those calls to the kernel to actually lock the memory end up slower than waiting for the GPU in previous attempts. There is the potential that locking could be optimized to be a net gain in the future, but for now efforts have been put on pause.&lt;/p&gt;
&lt;h3 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;a class=&quot;headerlink&quot; href=&quot;https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/#in-conclusion&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Overall, whether a game was released on the GameCube or Wii doesn't matter all that much to how demanding it is to run on Dolphin. It's how the game makes use of what resources are available that determines how difficult a game is to run. Whether it's a Wii game using that extra clockrate for tough to emulate instructions or a GameCube game making use of ARAM as virtual memory, it all comes down to what the game itself was doing. Dolphin may have lucked out a bit in how the Wii was designed because most games don't rely on features that make games more strenuous to emulate.&lt;/p&gt;
&lt;p&gt;There is one more question to pose: what if a Wii game pushed Dolphin as hard as &lt;a href=&quot;https://wiki.dolphin-emu.org/index.php?title=Star_Wars_Rogue_Squadron_III:_Rebel_Strike&quot;&gt;Star Wars: Rogue Squadron III&lt;/a&gt;? That'd be a nightmare! &lt;strong&gt;And Factor 5 planned to do just that&lt;/strong&gt; with Star Wars: Rogue Leaders for the Nintendo Wii. This port of &lt;em&gt;all three Rogue Squadron games&lt;/em&gt; to Wii with additional features looked like it would be the ultimate test for Dolphin!&lt;/p&gt;
&lt;center&gt;Star Wars: Rogue Leaders on Wii&lt;/center&gt;
&lt;div class=&quot;text-center&quot;&gt;&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;//www.youtube.com/embed/s-X8C_8nJQ4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, it never got released. On a personal note, we'd like to think if it were released and could run on Dolphin, it'd be incredibly slow and missing a bunch of effects.&lt;/p&gt;
</description>
<pubDate>Sat, 11 Aug 2018 22:56:01 +0000</pubDate>
<dc:creator>chx</dc:creator>
<og:title>Dolphin Emulator</og:title>
<og:type>product</og:type>
<og:image>https://sphotos-a.ak.fbcdn.net/hphotos-ak-prn1/73367_365599063538538_1010982140_n.png</og:image>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://dolphin-emu.org/blog/2018/07/21/myth-debugging-wii-more-demanding-emulate-gamecube/</dc:identifier>
</item>
<item>
<title>Worst Computer Bugs in History: Therac-25 (2017)</title>
<link>https://blog.bugsnag.com/bug-day-race-condition-therac-25/</link>
<guid isPermaLink="true" >https://blog.bugsnag.com/bug-day-race-condition-therac-25/</guid>
<description>&lt;blockquote readability=&quot;9.8878504672897&quot;&gt;
&lt;p&gt;The Worst Computer Bugs in History is a mini series to commemorate &lt;a href=&quot;https://blog.bugsnag.com/bug-day-2017/&quot;&gt;the discovery of the first computer bug&lt;/a&gt; seventy years ago. Although these stories are more extreme than most software bugs engineers will encounter during their careers, they are worth studying for the insights they can offer into software development and deployment. These computer bugs left a significant impact on the people who experienced them, and we hope they’ll offer valuable lessons we can all apply to our own work and projects. Read about other computer bugs in the series: &lt;a href=&quot;https://blog.bugsnag.com/bug-day-ariane-5-disaster/&quot;&gt;The Ariane 5 Disaster&lt;/a&gt;, the &lt;a href=&quot;https://blog.bugsnag.com/bug-day-mars-climate-orbiter/&quot;&gt;Mars Climate Orbiter&lt;/a&gt;, and &lt;a href=&quot;https://blog.bugsnag.com/bug-day-460m-loss/&quot;&gt;losing $460 million in 45 minutes&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Therac-25 was a radiation therapy machine manufactured by AECL in the 80s, which offered a revolutionary dual treatment mode. It was also designed from the outset to use software based safety systems rather than hardware controls.&lt;/p&gt;
&lt;p&gt;The removal of these hardware safety measures had tragic consequences, as race conditions in the codebase led to the death of three patients, and caused debilitating injuries to at least three other patients. The manufacturer ultimately became the target of several lawsuits from families of the victims, and became subject to a Class I recall from the FDA, a situation which only happens if the agency believes there is significant risk of death or serious injury through continued use of a medical device.&lt;/p&gt;
&lt;h3 id=&quot;what-is-radiation&quot;&gt;What is radiation?&lt;/h3&gt;
&lt;p&gt;Radiation is toxic to living cells, and in large enough quantities will cause them to die. For example, cancerous cells can be killed by a dose of radiation which specifically targets the affected area. However, care must be taken to ensure that the dose is not too large, as this would kill healthy surrounding tissue, and could lead to serious injury or death for the patient.&lt;/p&gt;
&lt;p&gt;The Therac-25 was a linear accelerator with two modes of operation. Firstly, it could fire a beam of low-energy electrons, which do not penetrate far into the body, and are therefore well-suited at killing shallow tissues, such as in skin cancer. The second mode of operation delivers radiation via a beam of higher-energy X-Ray photons. These particles travel further and are best suited to treating deeper tissues, such as cancer of the lungs.&lt;/p&gt;
&lt;h3 id=&quot;revolutionary-design&quot;&gt;Revolutionary Design&lt;/h3&gt;
&lt;p&gt;Dual-mode operation was truly revolutionary at the time. Hospitals would not need to maintain two separate machines, reducing their maintenance costs, and logistics could be simplified, as patients would not need to be moved from one room to the next.&lt;/p&gt;
&lt;p&gt;The low-power mode used scanning magnets to spread the electron beam, whereas the high-power mode was activated by rotating four components into the beam. This process took around 8 seconds to complete, and afterwards, it would spread and direct a beam of the appropriate strength towards its target.&lt;/p&gt;
&lt;h3 id=&quot;software-not-hardware-for-safety-controls&quot;&gt;Software, not hardware, for safety controls&lt;/h3&gt;
&lt;p&gt;Therac-25 relied on software controls to switch between modes, rather than physical hardware. Preceding models used separate circuits to monitor radiation intensity, and hardware interlocks to ensure that spreading magnets were correctly positioned. Using software instead would in theory reduce complexity, and reduce manufacturing costs.&lt;/p&gt;
&lt;h3 id=&quot;malfunction-54-error-message&quot;&gt;Malfunction 54 error message&lt;/h3&gt;
&lt;p&gt;Over the course of several weeks, one radiology technician had become very quick at typing commands into the Therac-25 machine. One fateful day, she accidentally entered ‘x’ for X-Ray rather than ‘e’ for Electron, so pressed the up key to choose the correct mode. Upon starting the program, the machine shut down, displaying the error “Malfunction 54.” Due to the frequency at which other malfunctions occurred, and that “treatment pause” typically indicated a low-priority issue, the technician resumed treatment.&lt;/p&gt;
&lt;p&gt;The patient was receiving his 9th treatment, and immediately knew something had gone terribly wrong. He reported hearing a buzzing sound, which was later determined to be the machine delivering radiation at maximum capacity, and feeling as though someone had poured hot coffee over his bath.&lt;/p&gt;
&lt;p&gt;After a few days, the patient suffered paralysis due to radiation overexposure, and ultimately died of further complications. The manufacturer believed the root cause was due to an electrical shock, and the machine was put back into service despite an electric company verifying this was not the issue, and that similar incidents had been reported to AECL before.&lt;/p&gt;
&lt;h3 id=&quot;reproducing-the-error&quot;&gt;Reproducing the error&lt;/h3&gt;
&lt;p&gt;The bug was finally reproduced when the same technician operated the machine on another patient, who also died from radiation overexposure. The hospital physicist was convinced that there was an issue with the machine spreading magnets, and after a lot of trial and error, managed to reproduce the issue by performing data entry incredibly quickly.&lt;/p&gt;
&lt;p&gt;The dose of delivered radiation was so great that the physicist had to adjust the sensitivity of his detection equipment. The dose was in the range of 10-20,000 rads, which was over 100x the expected dose, and more than enough to kill a grown adult.&lt;/p&gt;
&lt;h3 id=&quot;race-conditions&quot;&gt;Race conditions&lt;/h3&gt;
&lt;p&gt;The operator’s intention was to use the low-power beam, whereas in reality the high-power beam had been used without the spreading magnets in place, delivering a much higher dose than expected. This was due to a race condition within the codebase, which had actually been present in the preceding model, Therac-20, but had been prevented by hardware safety controls.&lt;/p&gt;
&lt;p&gt;The software consisted of several routines running concurrently. Both the Data Entry and Keyboard Handler routines shared a single variable, which recorded whether the technician had completed entering commands.&lt;/p&gt;
&lt;p&gt;Once the data entry phase was marked complete, the magnet setting phase began. However, if a specific sequence of edits was applied in the Data Entry phase during the 8 second magnet setting phase, the setting was not applied to the machine hardware, due to the value of the completion variable. The UI would then display the wrong mode to the user, who would confirm the potentially lethal treatment.&lt;/p&gt;
&lt;p&gt;This bug had actually always been present in the Therac-20 codebase, a fact which was only discovered 2 months after the FDA recall. Hardware safety features on that model meant the error condition had never been detected, and the code was copied across to the Therac-25 with the cultural assumption that it had been battle-tested.&lt;/p&gt;
&lt;h3 id=&quot;byte-overflow&quot;&gt;Byte overflow&lt;/h3&gt;
&lt;p&gt;An additional concurrency bug caused the last known incident, which was due to overflow in a one-byte shared variable.&lt;/p&gt;
&lt;p&gt;Before firing an electron beam, an operator needs to position the machine precisely to target the treatment area. The parameters are then verified by the operator via keystrokes, and “set” pressed, to move the hardware to the correct position.&lt;/p&gt;
&lt;p&gt;During verification, the Class3 variable determines whether the hardware is configured correctly. A non-zero value indicates failure, whereas a zero value indicates that everything is setup correctly, and that treatment can proceed.&lt;/p&gt;
&lt;p&gt;Because the setup code ran hundreds of times and a byte can only hold 255 possible values, on the 256th attempt of setup, the shared variable would be set to 0.&lt;/p&gt;
&lt;p&gt;If at this exact time, the operator was unfortunate enough to hit the “set” button, the program would continue down a codepath which would fire a concentrated X-Ray beam, as the Class3 variable would indicate that the hardware was setup correctly. This did happen, and delivered a lethal dose of radiation to the patient.&lt;/p&gt;
&lt;h3 id=&quot;aftermath&quot;&gt;Aftermath&lt;/h3&gt;
&lt;p&gt;Worse still, an internal FDA memo stated that AECL had no formal software specifications or test plan for their device.&lt;/p&gt;
&lt;p&gt;Additionally, the software was not evaluated by independent testers, which may have helped combat cultural biases within the organization. A hardware simulator was also used for the majority of development, due to the difficulties of safely testing the actual hardware.&lt;/p&gt;
&lt;h3 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h3&gt;
&lt;p&gt;There are several takeaway messages from the whole affair.&lt;/p&gt;
&lt;p&gt;Firstly, users will ignore cryptic error messages, particularly if they occur often. “Malfunction 54” does not convey the severity of the machine state, and the average user certainly won’t consult the accompanying physical manual to find out what it means.&lt;/p&gt;
&lt;p&gt;Secondly, usability can sometimes get in the way of safety. In this case it would have been preferable, although admittedly annoying, to have forced the user to re-enter commands in the case that they made an error, and to review the commands before executing.&lt;/p&gt;
&lt;p&gt;A final note is that in safety-critical systems, code should be subject to formal analysis from independent parties from those who developed it. Some level of automated testing at the unit level is also needed, rather than only testing the system as a whole.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Therac-25 is an extreme example of what can go wrong with software systems, and the devastating consequences that bugs can have on regular people.&lt;/p&gt;
&lt;p&gt;Although most of us won’t work on safety-critical systems, software errors can still have a significant impact on our users. Most of us will have experienced a software failure during an important slideshow presentation, an app on our phones crashing in the middle of an activity, or a data breach that leaks our credentials to the entire internet.&lt;/p&gt;
&lt;p&gt;What’s the worst thing that could go wrong in your application?&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Our series on the Worst Software Bugs in History is in honor of &lt;a href=&quot;https://blog.bugsnag.com/bug-day-2017/&quot;&gt;Bug Day 2017&lt;/a&gt;. Seventy years ago, Grace Hopper discovered the first computer bug — a moth was stuck between relays in the Harvard Mark II computer she was working on. The notion of bugs was described in other fields previously, but the moth discovery was the first use of the term “debugging” in the field of computers.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Sources:&lt;br/&gt;http://courses.cs.vt.edu/cs3604/lib/Therac_25/Therac_1.html &lt;a href=&quot;https://en.wikipedia.org/wiki/Therac-25&quot;&gt;https://en.wikipedia.org/wiki/Therac-25&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 11 Aug 2018 16:24:39 +0000</pubDate>
<dc:creator>dangom</dc:creator>
<og:title>The Worst Computer Bugs in History: Race conditions in Therac-25</og:title>
<og:url>https://blog.bugsnag.com/bug-day-race-condition-therac-25/</og:url>
<og:type> article</og:type>
<og:image>https://blog.bugsnag.com/img/feature/therac-25.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.bugsnag.com/bug-day-race-condition-therac-25/</dc:identifier>
</item>
<item>
<title>GitLab is now running on GCP</title>
<link>https://twitter.com/gitlabstatus/status/1028266757188870150</link>
<guid isPermaLink="true" >https://twitter.com/gitlabstatus/status/1028266757188870150</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://twitter.com/gitlabstatus/status/1028266757188870150&quot;&gt;https://twitter.com/gitlabstatus/status/1028266757188870150&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=17740072&quot;&gt;https://news.ycombinator.com/item?id=17740072&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 245&lt;/p&gt;&lt;p&gt;# Comments: 141&lt;/p&gt;</description>
<pubDate>Sat, 11 Aug 2018 15:36:40 +0000</pubDate>
<dc:creator>sahin-boydas</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/gitlabstatus/status/1028266757188870150</dc:identifier>
</item>
<item>
<title>Monsanto ordered to pay $289M damages in Roundup cancer trial</title>
<link>https://www.bbc.com/news/world-us-canada-45152546</link>
<guid isPermaLink="true" >https://www.bbc.com/news/world-us-canada-45152546</guid>
<description>&lt;figure class=&quot;media-landscape has-caption full-width lead&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                &lt;img class=&quot;js-image-replace&quot; alt=&quot;A soybean field is fumigated near Urdinarrain, Entre Rios province, Argentina, on February 8, 2018&quot; src=&quot;https://ichef.bbci.co.uk/news/320/cpsprodpb/1162D/production/_102931217_048026140afp.jpg&quot; width=&quot;976&quot; height=&quot;549&quot;/&gt;&lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;AFP&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Crops are often treated with the herbicide glyphosate
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;story-body__introduction&quot;&gt;Chemical giant Monsanto has been ordered to pay $289m (£226m) damages to a man who claimed herbicides containing glyphosate had caused his cancer.&lt;/p&gt;&lt;p&gt;In a landmark case, a Californian jury found that Monsanto knew its Roundup and RangerPro weedkillers were dangerous and failed to warn consumers.&lt;/p&gt;&lt;p&gt;It's the first lawsuit to go to trial alleging a glyphosate link to cancer.&lt;/p&gt;&lt;p&gt;Monsanto denies that glyphosate causes cancer and says it intends to appeal against the ruling.&lt;/p&gt;&lt;p&gt;&quot;The jury got it wrong,&quot; vice-president Scott Partridge said outside the courthouse in San Francisco.&lt;/p&gt;&lt;p&gt;The claimant in the case, groundskeeper Dewayne Johnson, is among more than 5,000 similar plaintiffs across the US.&lt;/p&gt;&lt;p&gt;Correspondents say the California ruling is likely to lead to hundreds of other claims against Monsanto, which was recently bought by the German conglomerate Bayer AG.&lt;/p&gt;&lt;p&gt;Mr Johnson was diagnosed with non-Hodgkin's lymphoma in 2014. His lawyers said he regularly used a form of RangerPro while working at a school in Benicia, California.&lt;/p&gt;&lt;figure class=&quot;media-landscape no-caption body-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;Glyphosate controversy far from settled&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Analysis by James Cook, BBC North America Correspondent&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Reuters&lt;/span&gt;
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;p&gt;The implications of this verdict will be felt far beyond Monsanto's headquarters in Missouri.&lt;/p&gt;&lt;p&gt;Glyphosate is the world's most common weedkiller and the science about its safety is still far from settled.&lt;/p&gt;&lt;p&gt;In 2015 the International Agency for Research on Cancer, &lt;a href=&quot;http://www.iarc.fr/en/media-centre/iarcnews/pdf/MonographVolume112.pdf&quot; class=&quot;story-body__link-external&quot;&gt;the World Health Organisation's cancer agency, concluded that it was &quot;probably carcinogenic to humans&quot;&lt;/a&gt;. but the US Environmental Protection Agency (EPA) continues to insist that glyphosate is safe when used carefully.&lt;/p&gt;&lt;p&gt;Campaigners question how the EPA assessment was reached, citing evidence of what they say was inappropriate industry involvement in the decision.&lt;/p&gt;&lt;p&gt;Some Democrats have even called for a Department of Justice investigation into &lt;a href=&quot;https://www.nytimes.com/2017/03/14/business/monsanto-roundup-safety-lawsuit.html&quot; class=&quot;story-body__link-external&quot;&gt;alleged collusion between government officials and Monsanto&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;In California, where a judge recently ruled that coffee must carry a cancer warning, the agriculture industry sued to prevent such a label for glyphosate even though &lt;a href=&quot;http://www.latimes.com/business/la-fi-glyphosate-prop65-story.html#&quot; class=&quot;story-body__link-external&quot;&gt;the state lists it as a chemical known to cause cancer&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;In Europe, too, the battle over glyphosate has been fierce. French President Emmanuel Macron is trying to ban it despite the resistance of some French lawmakers and the fact that &lt;a href=&quot;https://www.bbc.co.uk/news/world-europe-42135437&quot; class=&quot;story-body__link&quot;&gt;the European Commission recently granted the weedkiller another five-year licence&lt;/a&gt;.&lt;/p&gt;&lt;figure class=&quot;media-landscape no-caption body-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;p&gt;Jurors found on Friday that the company had acted with &quot;malice&quot; and that its weedkillers contributed &quot;substantially&quot; to Mr Johnson's terminal illness.&lt;/p&gt;&lt;p&gt;Following an eight-week trial, the jury ordered the agricultural multi-national to pay $250m in punitive damages together with other costs that brought the total figure to almost $290m.&lt;/p&gt;&lt;p&gt;Mr Johnson's lawyer, Brent Wisner, said the jury's verdict showed that the evidence against the product was &quot;overwhelming&quot;.&lt;/p&gt;&lt;p&gt;&quot;When you are right, it is really easy to win,&quot; he said, adding that the ruling was just &quot;the tip of the spear&quot; of future legal cases.&lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;AFP&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Dewayne Johnson (R) hugged his lawyer after hearing the verdict
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;In a statement after the ruling, Monsanto said it was &quot;sympathetic to Mr Johnson and his family&quot; but it would &quot;continue to vigorously defend this product, which has a 40-year history of safe use&quot;.&lt;/p&gt;&lt;p&gt;&quot;Today's decision does not change the fact that more than 800 scientific studies and reviews - and conclusions by the US Environmental Protection Agency, the US National Institutes of Health and regulatory authorities around the world - support the fact that glyphosate does not cause cancer, and did not cause Mr Johnson's cancer,&quot; it added.&lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;AFP&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Monsanto vice-president Scott Partridge told reporters outside the court that the company would appeal
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;</description>
<pubDate>Sat, 11 Aug 2018 13:31:47 +0000</pubDate>
<dc:creator>dtien</dc:creator>
<og:title>Monsanto told to pay $289m in cancer trial</og:title>
<og:type>article</og:type>
<og:description>A US jury finds the company knew its Roundup weedkillers were dangerous, but Monsanto vows to appeal.</og:description>
<og:url>https://www.bbc.co.uk/news/world-us-canada-45152546</og:url>
<og:image>https://ichef.bbci.co.uk/news/1024/branded_news/1162D/production/_102931217_048026140afp.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bbc.com/news/world-us-canada-45152546</dc:identifier>
</item>
</channel>
</rss>