<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Astonishing OS X bug lets anyone log into a High Sierra machine</title>
<link>https://techcrunch.com/2017/11/28/astonishing-os-x-bug-lets-anyone-log-into-a-high-sierra-machine/</link>
<guid isPermaLink="true" >https://techcrunch.com/2017/11/28/astonishing-os-x-bug-lets-anyone-log-into-a-high-sierra-machine/</guid>
<description>&lt;img src=&quot;https://tctechcrunch2011.files.wordpress.com/2017/11/technicaldiff.jpg?w=738&quot; class=&quot;&quot;/&gt;&lt;p id=&quot;speakable-summary&quot;&gt;&lt;strong&gt;Update&lt;/strong&gt;: Apple has acknowledged the issue and is working on it. Statement and workaround below.&lt;/p&gt;&lt;p&gt;Wow, this is a bad one. On Macs running the latest version of High Sierra — 10.13.1 (17B48) — it appears that anyone can log in just by putting “root” in the user name field. This is a huge, &lt;em&gt;huge&lt;/em&gt; problem. Apple will fix it probably within hours, but holy moly. &lt;strong&gt;Do not leave your Mac unattended until this is resolved.&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The bug is most easily accessed by going to Preferences and then entering one of the panels that has a lock in the lower left-hand corner. Normally you’d click that to enter your user name and password, which are required to change important settings like those in Security &amp;amp; Privacy.&lt;/p&gt;
&lt;p&gt;No need to do that any more! Just enter “root” instead of your user name and hit enter. After a few tries, it should log right in. &lt;strong&gt;There’s no need to do this yourself to verify it. Doing so creates a “root” account that others may be able to take advantage of if you don’t disable it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://tctechcrunch2011.files.wordpress.com/2017/11/ooooooh-dear.gif&quot; rel=&quot;noopener&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1571932&quot; src=&quot;https://tctechcrunch2011.files.wordpress.com/2017/11/ooooooh-dear.gif?w=712&amp;amp;h=436&quot; alt=&quot;&quot; width=&quot;712&quot; height=&quot;436&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The bug appears to have been first noticed by &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/lemiorhan/status/935578694541770752&quot; rel=&quot;noopener&quot;&gt;Lemi Orhan Ergin&lt;/a&gt;, founder of Software Craftsman Turkey, who noted it publicly on Twitter.&lt;/p&gt;
&lt;p&gt;Needless to say, this is incredibly, incredibly bad. Once you log in, you’ve essentially authenticated yourself as the owner of the computer. You can add administrators, change critical settings, lock out the current owner, and so on. &lt;strong&gt;Do not leave your Mac unattended until this is resolved.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So far this has worked on every preference panel we’ve tried, and when I used “root” at the login screen it immediately created and pulled up a new user with system administrator privileges. It didn’t work on a 10.13 (17A365) machine, but that one is also loaded up with AOL bloatware — sorry, &lt;em&gt;Oath&lt;/em&gt; bloatware — which may affect things.&lt;/p&gt;
&lt;p&gt;Apple offered the following statement:&lt;/p&gt;
&lt;blockquote readability=&quot;10.851674641148&quot;&gt;
&lt;p&gt;We are working on a software update to address this issue. In the meantime, setting a root password prevents unauthorized access to your Mac. To enable the Root User and set a password, please follow the instructions here: &lt;a target=&quot;_blank&quot; href=&quot;https://support.apple.com/en-us/HT204012&quot; rel=&quot;noopener&quot;&gt;https://support.apple.com/en-us/HT204012&lt;/a&gt;. If a Root User is already enabled, to ensure a blank password is not set, please follow the instructions from the ‘Change the root password’ section.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can find Directory Utility via the instructions in that link, but you can also hit command-space now to open Spotlight and just type it in. Once it opens, click the lock and enter your password and then under the Edit menu you’ll have the option to change the root password. It looks like this:&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://tctechcrunch2011.files.wordpress.com/2017/11/screen-shot-2017-11-28-at-2-30-04-pm.png&quot; rel=&quot;noopener&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1572076&quot; src=&quot;https://tctechcrunch2011.files.wordpress.com/2017/11/screen-shot-2017-11-28-at-2-30-04-pm.png?w=1024&amp;amp;h=549&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;549&quot; srcset=&quot;https://tctechcrunch2011.files.wordpress.com/2017/11/screen-shot-2017-11-28-at-2-30-04-pm.png?w=1024&amp;amp;h=549 1024w, https://tctechcrunch2011.files.wordpress.com/2017/11/screen-shot-2017-11-28-at-2-30-04-pm.png?w=150&amp;amp;h=80 150w, https://tctechcrunch2011.files.wordpress.com/2017/11/screen-shot-2017-11-28-at-2-30-04-pm.png?w=300&amp;amp;h=161 300w, https://tctechcrunch2011.files.wordpress.com/2017/11/screen-shot-2017-11-28-at-2-30-04-pm.png?w=768&amp;amp;h=412 768w, https://tctechcrunch2011.files.wordpress.com/2017/11/screen-shot-2017-11-28-at-2-30-04-pm.png?w=680&amp;amp;h=364 680w, https://tctechcrunch2011.files.wordpress.com/2017/11/screen-shot-2017-11-28-at-2-30-04-pm.png 1952w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;/a&gt;Anything’s better than nothing, which is the password the root user has now, but make it strong just in case.&lt;/p&gt;
&lt;p&gt;We hope Apple has a fix soon because even though this workaround exists, we can’t be sure of the extent of this particular flaw until Apple takes a look. &lt;strong&gt;No one should leave their Mac unattended until this is resolved.&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 28 Nov 2017 20:42:30 +0000</pubDate>
<dc:creator>wyc</dc:creator>
<og:title>Huge security flaw lets anyone log into a High Sierra Mac</og:title>
<og:description>Wow, this is a bad one. On Macs running the latest version of High Sierra (10.13.1 (17B48)), it appears that anyone can log in just by putting &quot;root&quot; in the..</og:description>
<og:image>https://tctechcrunch2011.files.wordpress.com/2017/11/technicaldiff.jpg</og:image>
<og:url>http://social.techcrunch.com/2017/11/28/astonishing-os-x-bug-lets-anyone-log-into-a-high-sierra-machine/</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2017/11/28/astonishing-os-x-bug-lets-anyone-log-into-a-high-sierra-machine/</dc:identifier>
</item>
<item>
<title>macOS High Sierra: Anyone can login as “root” with empty password</title>
<link>https://twitter.com/lemiorhan/status/935578694541770752</link>
<guid isPermaLink="true" >https://twitter.com/lemiorhan/status/935578694541770752</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://twitter.com/lemiorhan/status/935578694541770752&quot;&gt;https://twitter.com/lemiorhan/status/935578694541770752&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=15800676&quot;&gt;https://news.ycombinator.com/item?id=15800676&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 1280&lt;/p&gt;&lt;p&gt;# Comments: 427&lt;/p&gt;</description>
<pubDate>Tue, 28 Nov 2017 19:41:10 +0000</pubDate>
<dc:creator>vladikoff</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/lemiorhan/status/935578694541770752</dc:identifier>
</item>
<item>
<title>How Stylo Brought Rust and Servo to Firefox</title>
<link>http://bholley.net/blog/2017/stylo.html</link>
<guid isPermaLink="true" >http://bholley.net/blog/2017/stylo.html</guid>
<description>&lt;p&gt;Two weeks ago, we released &lt;a href=&quot;https://blog.mozilla.org/blog/2017/11/14/introducing-firefox-quantum/&quot;&gt;Firefox Quantum&lt;/a&gt; to the world. It’s been a big moment for Mozilla, shaping up to be a blockbuster release that’s changing how people &lt;a href=&quot;https://www.wired.com/story/firefox-quantum-the-browser-built-for-2017/&quot;&gt;think&lt;/a&gt; &lt;a href=&quot;https://thenextweb.com/apps/2017/11/15/how-to-switch-from-ram-hungry-chrome-to-speedy-firefox-quantum-in-2-minutes/&quot;&gt;and&lt;/a&gt; &lt;a href=&quot;https://lifehacker.com/why-you-should-check-out-the-new-firefox-quantum-browse-1820430885&quot;&gt;talk&lt;/a&gt; &lt;a href=&quot;https://siliconangle.com/blog/2017/11/14/meet-firefox-quantum-mozillas-compelling-answer-chrome-yet/&quot;&gt;about&lt;/a&gt; Firefox. It’s also a cathartic moment for me personally: I’ve spent the last two years pouring my heart and soul into Quantum’s headline act, known as Stylo, and it means a lot to see it so well-received.&lt;/p&gt;
&lt;p&gt;But while all the positive buzz is gratifying, it’s easy to miss the deeper significance of what we just shipped. &lt;strong&gt;Stylo was the culmination of a near-decade of R&amp;amp;D, a multiple-moonshot effort to build a better browser by building a better language.&lt;/strong&gt; This is the story of how it happened.&lt;/p&gt;
&lt;h3 id=&quot;safety-at-scale&quot;&gt;Safety at Scale&lt;/h3&gt;
&lt;p&gt;Systems programmers have been struggling with memory safety for a long time. It is virtually impossible to develop and maintain a large-scale C/C++ application without introducing bugs that, under the right conditions and input, cause control flow to go off the rails and compromise security. There are those who &lt;a href=&quot;http://robert.ocallahan.org/2017/07/confession-of-cc-programmer.html?showComment=1500294954081#c7680963704647462136&quot;&gt;claim otherwise&lt;/a&gt;, but I’m quite skeptical.&lt;/p&gt;
&lt;p&gt;Browsers are the canonical example here. They’re enormous - millions of lines of C++ code, thousands of contributors, decades of cruft - and there’s enough at stake to create large incentives to find and avoid security-sensitive bugs. Mozilla, Google, Apple, and Microsoft have been at this for decades with access to some of the best talent in the world, and vulnerabilities haven’t stopped. So it’s pretty clear by now that “don’t make mistakes” is not a viable strategy.&lt;/p&gt;
&lt;p&gt;Adding concurrency into the mix makes things &lt;a href=&quot;http://bholley.net/blog/2015/must-be-this-tall-to-write-multi-threaded-code.html&quot;&gt;exponentially worse&lt;/a&gt;, which is a shame because concurrency is the only way a program can utilize more than a fraction of the resources in a modern CPU. But with engineers struggling to keep the core pipeline correct under single-threaded execution, multi-threaded algorithms haven’t been a luxury any browser vendor could afford. There are too many details to get right, and getting any of them even slightly wrong can be catastrophic.&lt;/p&gt;
&lt;p&gt;Getting details right at scale generally requires the right tools. For example, register allocation is a tedious process that bedeviled assembly programmers, whereas higher-level languages like C++ handle it automatically and get it right &lt;em&gt;every single time&lt;/em&gt;. But while C++ effortlessly handles many low-level details, it just wasn’t built to guarantee memory and thread safety.&lt;/p&gt;
&lt;p&gt;Could the right tool be built? In the late 2000s, some people at Mozilla decided to try, and announced &lt;a href=&quot;https://www.rust-lang.org&quot;&gt;Rust&lt;/a&gt; and &lt;a href=&quot;https://servo.org/&quot;&gt;Servo&lt;/a&gt;. The plan was simple: &lt;a href=&quot;http://venge.net/graydon/talks/intro-talk-2.pdf&quot;&gt;build a replacement for C++&lt;/a&gt;, and use the result to &lt;a href=&quot;https://www.slideshare.net/BrendanEich/future-tense-7782010&quot;&gt;build a replacement for Gecko&lt;/a&gt;. In other words, Boil the Ocean - twice.&lt;/p&gt;
&lt;h3 id=&quot;rust&quot;&gt;Rust&lt;/h3&gt;
&lt;p&gt;I am a firm proponent of incrementalism. I think the desire to throw everything away and start from scratch tends to be an emotional one, and generally indicates a lack of focus and clear thinking about what will actually move the needle.&lt;/p&gt;
&lt;p&gt;This may sound antithetical to big, bold changes, but it’s not. Almost everything successful is incremental in one way or another. The teams behind revolutionary products succeed because they make strategic bets about which things to reinvent, and don’t waste energy rehashing stuff that doesn’t matter.&lt;/p&gt;
&lt;p&gt;The creators of Rust understood this, and the language owes its remarkable success to careful and pragmatic decisions about scope and focus:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;They borrowed Apple’s &lt;a href=&quot;https://llvm.org/&quot;&gt;C++ compiler backend&lt;/a&gt;, which lets Rust match C++ in speed without reimplementing decades of platform-specific code generation optimizations.&lt;/li&gt;
&lt;li&gt;They leaned on the existing corpus of research languages, which contained droves of well-vetted ideas that nonetheless hadn’t been or couldn’t be integrated into C++.&lt;/li&gt;
&lt;li&gt;They included the &lt;em&gt;unsafe&lt;/em&gt; keyword - an escape hatch which, for an explicit section of code, allows programmers to override the safety checks and do anything they might do in C++. This allowed people to start building real things in Rust without waiting for the language to grow idiomatic support for each and every use case.&lt;/li&gt;
&lt;li&gt;They built a convenient &lt;a href=&quot;https://crates.io/&quot;&gt;package ecosystem&lt;/a&gt;, allowing the out-of-the-box capabilities of Rust to grow while the core language and standard library remained small.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;These tactics were by no means the only ingredients to Rust’s success. But they made success &lt;em&gt;possible&lt;/em&gt; by neutralizing the structural advantages of C++ and allowing Rust’s good ideas - particularly its control over mutable aliasing - to reach production code.&lt;/p&gt;
&lt;h3 id=&quot;servo&quot;&gt;Servo&lt;/h3&gt;
&lt;p&gt;Rust is a big leap forward for the industry, and should make its creators proud. But the grand plan for Firefox required a second moonshot, Servo, with an even steeper path to success.&lt;/p&gt;
&lt;p&gt;At first glance, the two phases seem analogous: build Rust to replace C++, and then build Servo to replace Gecko. However, there’s a crucial difference - nobody expects the Rust compiler to handle C++ code, but browsers must maintain backwards-compatibility with every single webpage ever written. What’s more, the breadth of the web platform is staggering. It grew organically over almost three decades, has no clear limits in scope, and has lots of tricky observables that thwart attempts to simplify. Reimplementing every last feature and quirk from scratch would probably require thousands of engineer-years. And Mozilla, already heavily outgunned by its for-profit rivals, could only afford to commit a handful of heads to the Servo project.&lt;/p&gt;
&lt;p&gt;That kind of headcount math led some people within Mozilla to dismiss Servo as a boondoggle, and the team needed to move fast to demonstrate that Rust could truly build the engine of the future. Rather than grinding through features indiscriminately, they stood up a skeleton, stubbed out the long tail, and focused on reimagining the core pipeline to eliminate performance bottlenecks. Meanwhile, they also invested heavily in community outreach and building a smooth workflow for volunteers. If they could build a compelling next-generation core, they wagered that a safe language and more-accurate specifications from WHATWG could allow an &lt;a href=&quot;https://github.com/servo/servo/graphs/contributors&quot;&gt;army of volunteers&lt;/a&gt; to fill in the rest.&lt;/p&gt;
&lt;p&gt;By 2015, the Servo team had built some seriously impressive stuff. They had CSS and layout engines with full type-safe concurrency, which allowed them to run circles around production browsers on multi-core machines. They also had an early prototype of a full-GPU graphics layer called WebRender which dramatically lowered the cost of rendering. With Firefox falling behind in the market, Servo seemed like just the sort of secret sauce that could get us back in the game. But while Servo continued to build volunteer momentum, the completion curve still stretched too far into the future to make it an actionable replacement for Gecko.&lt;/p&gt;
&lt;h3 id=&quot;stylo&quot;&gt;Stylo&lt;/h3&gt;
&lt;p&gt;Whenever a problem seems impossibly hard, tackling it incrementally is a reliable way to gain traction. So near the end of 2015, some of us started brainstorming ways to use &lt;em&gt;parts&lt;/em&gt; of Servo in Firefox. Several proposals floated around, but the two that seemed most workable were the CSS engine and WebRender. This post is about the former, but WebRender integration is also making &lt;a href=&quot;https://hacks.mozilla.org/2017/10/the-whole-web-at-maximum-fps-how-webrender-gets-rid-of-jank/&quot;&gt;exciting progress&lt;/a&gt;, and you can expect to hear more about it soon.&lt;/p&gt;
&lt;p&gt;Servo’s CSS engine was an attractive integration target because it was extremely fast and relatively mature. It also serves as the bridge between the DOM and layout, providing a beachhead for further expansion of Rust into rendering code. Unfortunately, CSS engines are also tightly coupled with DOM and layout code, so there is no clean API surface at which to cut. Swapping it out is a daunting task, to say nothing of the complexities of mixing in a new programming language. So there was a lot of skepticism and &lt;a href=&quot;https://youtu.be/_ecNqY9krY0?t=4m9s&quot;&gt;some chuckling&lt;/a&gt; when we started telling people what we were up to.&lt;/p&gt;
&lt;p&gt;But we dove in anyway. It was a small team - just me and &lt;a href=&quot;https://github.com/heycam&quot;&gt;Cameron McCormack&lt;/a&gt; for the first few months, after which point &lt;a href=&quot;https://github.com/emilio&quot;&gt;Emilio Cobos&lt;/a&gt; joined us as a volunteer. We picked our battles carefully, seeking to maintain momentum and prove viability without drowning in too many tricky details. In April 2016, we got our first &lt;a href=&quot;http://bholley.net/images/posts/stylo-rendering-something.png&quot;&gt;pixels on the screen&lt;/a&gt;. In May, we &lt;a href=&quot;http://bholley.net/images/posts/stylo-rendering-wikipedia.png&quot;&gt;rendered Wikipedia&lt;/a&gt;. In June, we rendered Wikipedia &lt;a href=&quot;http://bholley.net/images/posts/stylo-rendering-wikipedia-fast.png&quot;&gt;&lt;em&gt;fast&lt;/em&gt;&lt;/a&gt;. The numbers were encouraging enough to convince management to launch it as part of &lt;a href=&quot;https://wiki.mozilla.org/Quantum&quot;&gt;Project Quantum&lt;/a&gt;, and scale up resourcing to get it done.&lt;/p&gt;
&lt;p&gt;Over the next fifteen months, we transformed that prototype into the most advanced CSS engine ever built, one which harnesses the guarantees of Rust to achieve a degree of parallelism that would be intractable to replicate in C++. The technical details are too involved to get into here, but you can learn more about them in Lin Clark’s &lt;a href=&quot;https://hacks.mozilla.org/2017/08/inside-a-super-fast-css-engine-quantum-css-aka-stylo/&quot;&gt;excellent writeup&lt;/a&gt;, Manish Goregaokar’s &lt;a href=&quot;https://blog.rust-lang.org/2017/11/14/Fearless-Concurrency-In-Firefox-Quantum.html&quot;&gt;release-day post&lt;/a&gt;, or my &lt;a href=&quot;https://www.youtube.com/watch?v=UN_iIExdB9Q&quot;&gt;high-level overview&lt;/a&gt; from last December.&lt;/p&gt;
&lt;h3 id=&quot;the-team&quot;&gt;The Team&lt;/h3&gt;
&lt;p&gt;Stylo shipped, first and foremost, thanks to the dedication and passion of the people who worked on it. They tackled challenge after challenge, pushing themselves to the limit and learning whatever new skills or roles were required to move things forward. The core team of staff and volunteers spanned more than ten countries, and worked (quite literally) around the clock for over a year to get it done on time.&lt;/p&gt;
&lt;p&gt;But the real team was also much larger than the set of people working on it full-time. Stylo needed the expertise of a lot of different groups with different goals. We had to ask for a lot of help, and we rarely needed to ask twice. The entire Mozilla community (including the Rust community) deeply wanted us to succeed, so much so that almost everyone was willing to drop what they were doing to get us unblocked. I originally kept a list of people to thank, but I gave up when it got too big, and when I realized the countless ways in which so many Mozillians helped us in some way, big or small.&lt;/p&gt;
&lt;p&gt;So thank you, Mozilla community. Stylo is a testament to your hard work, your ingenuity, and your good-natured, scrappy grit. Be proud of this release - it’s a game-changer for the open web, and you made it happen.&lt;/p&gt;
</description>
<pubDate>Tue, 28 Nov 2017 17:28:57 +0000</pubDate>
<dc:creator>mnemonik</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://bholley.net/blog/2017/stylo.html</dc:identifier>
</item>
<item>
<title>U.S. judge says Uber withheld evidence, delays Waymo trial</title>
<link>https://www.reuters.com/article/us-alphabet-uber-ruling/u-s-judge-says-uber-withheld-evidence-delays-waymo-trial-idUSKBN1DS26X</link>
<guid isPermaLink="true" >https://www.reuters.com/article/us-alphabet-uber-ruling/u-s-judge-says-uber-withheld-evidence-delays-waymo-trial-idUSKBN1DS26X</guid>
<description>&lt;p data-reactid=&quot;38&quot;&gt;SAN FRANCISCO (Reuters) - Uber Technologies Inc withheld evidence in a lawsuit filed by Alphabet Inc’s Waymo, a U.S. judge said on Tuesday, delaying a trial to give Waymo time to review a letter alleging Uber trained employees to steal trade secrets and hide their tracks.&lt;/p&gt;
&lt;div class=&quot;PrimaryAsset_container_2pnvl&quot; data-reactid=&quot;39&quot;&gt;
&lt;div class=&quot;Image_container_1tVQo&quot; data-reactid=&quot;40&quot;&gt;

&lt;span class=&quot;Image_caption_KoNH1&quot; data-reactid=&quot;45&quot;&gt;FILE PHOTO - Uber's logo is pictured at its office in Tokyo, Japan, November 27, 2017. REUTERS/Kim Kyung-Hoon/File Photo&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p data-reactid=&quot;46&quot;&gt;The multibillion-dollar case has hobbled Uber’s self-driving vehicle ambitions, and the latest setback comes as new Chief Executive Dara Khosrowshahi is working to lock in a major share sale this week and prepare for an initial public offering in 2019.&lt;/p&gt;
&lt;p data-reactid=&quot;47&quot;&gt;The hearing on Tuesday centered on a letter from a lawyer for former Uber security analyst Richard Jacobs that Uber did not show Waymo as both sides prepared their cases.&lt;/p&gt;
&lt;p data-reactid=&quot;48&quot;&gt;U.S. District Judge William Alsup agreed to Waymo’s request to delay the trial scheduled for next week, saying in San Francisco federal court that “if even half of what this letter is true it would be a huge injustice to force Waymo to go to trial” as planned.&lt;/p&gt;
&lt;p data-reactid=&quot;49&quot;&gt;It was the second time the judge has agreed to delay a trial at Waymo’s request. In October, he chided Uber layers for disclosing thousands of emails to Waymo just before the trial had been set to begin.&lt;/p&gt;
&lt;p data-reactid=&quot;50&quot;&gt;Alsup expressed his frustration with the company again on Tuesday.&lt;/p&gt;
&lt;p data-reactid=&quot;51&quot;&gt;“You’re just making the impression that this is a total cover-up,” he told Uber at the hearing.&lt;/p&gt;
&lt;p data-reactid=&quot;52&quot;&gt;Jacobs testified on Tuesday that Uber deliberately researched competitors and used technology to avoid a paper trail.&lt;/p&gt;
&lt;p data-reactid=&quot;53&quot;&gt;Uber employees researching rivals were given training with the purpose to “impede, obstruct or influence any lawsuit against Uber,” Jacobs said, including a communication strategy “to ensure we didn’t create a paper trail that came back to haunt the company in any potential civil or criminal litigation.”&lt;/p&gt;
&lt;p data-reactid=&quot;54&quot;&gt;Waymo has estimated damages in the case at about $1.9 billion and wants to curtail Uber’s self-driving car program, which Waymo says uses its technology.&lt;/p&gt;
&lt;p data-reactid=&quot;55&quot;&gt;Uber has denied using Waymo trade secrets and rejects the financial damages claim, but has fired the leader of its autonomous vehicle division, who is alleged to have stolen Waymo data before joining Uber.&lt;/p&gt;
&lt;div class=&quot;Image_container_1tVQo&quot; data-reactid=&quot;56&quot;&gt;

&lt;span class=&quot;Image_caption_KoNH1&quot; data-reactid=&quot;61&quot;&gt;FILE PHOTO - The Waymo logo is displayed during the company's unveil of a self-driving Chrysler Pacifica minivan during the North American International Auto Show in Detroit, Michigan, U.S., January 8, 2017. REUTERS/Brendan McDermid&lt;/span&gt;&lt;/div&gt;
&lt;p data-reactid=&quot;62&quot;&gt;An Uber representative on Tuesday referred to an earlier company statement, which said Uber “has been waiting for its day in court for quite some time now” and was keen to have a jury hear the merits of the case.&lt;/p&gt;
&lt;p data-reactid=&quot;63&quot;&gt;Jacobs said that Uber reached a $4.5 million settlement, including a consulting contract, after he was fired. Under questioning by Uber lawyers, he described the importance of using secure communications for legitimate reasons, including ensuring the safety of workers abroad.&lt;/p&gt;
&lt;p data-reactid=&quot;64&quot;&gt;Waymo has accused Uber of concealing Jacobs’ letter to an Uber in-house lawyer, saying the note contained important facts about the case, according to a court filing on Monday.&lt;/p&gt;
&lt;p data-reactid=&quot;65&quot;&gt;Jacobs testified at the hearing that the letter contained allegations that Uber’s markets analytics group “exists expressly for the purpose for acquiring trade secrets, code base and competitive intelligence.”&lt;/p&gt;
&lt;p data-reactid=&quot;66&quot;&gt;Jacobs said he learned of this activity through discussions at Uber with his manager and other colleagues.&lt;/p&gt;
&lt;p data-reactid=&quot;67&quot;&gt;Waymo sued Uber in February, claiming that former Waymo executive Anthony Levandowski downloaded more than 14,000 confidential files before leaving to set up a self-driving truck company, called Otto, which Uber acquired soon after.&lt;/p&gt;
&lt;p data-reactid=&quot;68&quot;&gt;Uber denied using any of Waymo’s trade secrets. Levandowski has declined to answer questions about the allegations, citing constitutional protections against self-incrimination.&lt;/p&gt;
&lt;p data-reactid=&quot;69&quot;&gt;The trial had been scheduled to begin on Dec. 4. Waymo said it learned of the new evidence last week after the U.S. Department of Justice shared it with Alsup.&lt;/p&gt;
&lt;p data-reactid=&quot;70&quot;&gt;The ride-hailing service is the most valuable private U.S. company, but its aggressive expansion has been dogged by scandals.&lt;/p&gt;
&lt;p data-reactid=&quot;71&quot;&gt;A consortium led by Japan’s SoftBank Group Corp this week is launching a multi-billion dollar tender offer for Uber shares, a deal that would bring the ride services company a well regarded, deep-pocketed investor.&lt;/p&gt;
&lt;p data-reactid=&quot;72&quot;&gt;Most recently, Uber revealed that the data of 57 million Uber customers and 600,000 drivers had been stolen in a breach more than a year ago, and that the company had paid two hackers $100,000 to cover it up. Governments across the globe have launched investigations into the incident.&lt;/p&gt;
&lt;div class=&quot;Attribution_attribution_o4ojT&quot; data-reactid=&quot;73&quot; readability=&quot;8&quot;&gt;
&lt;p class=&quot;Attribution_content_27_rw&quot; data-reactid=&quot;74&quot;&gt;Reporting by Heather Somerville; Writing by Dan Levine and Peter Henderson; Editing by Meredith Mazzilli&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ArticleBody_trustBadgeContainer_1_iEv&quot; data-reactid=&quot;75&quot;&gt;&lt;span class=&quot;ArticleBody_trustBadgeTitle_3xFqc&quot; data-reactid=&quot;76&quot;&gt;Our Standards:&lt;/span&gt;&lt;span class=&quot;trustBadgeUrl&quot; data-reactid=&quot;77&quot;&gt;&lt;a href=&quot;http://thomsonreuters.com/en/about-us/trust-principles.html&quot; data-reactid=&quot;78&quot;&gt;The Thomson Reuters Trust Principles.&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 28 Nov 2017 17:19:32 +0000</pubDate>
<dc:creator>AnimalMuppet</dc:creator>
<og:title>Uber-Waymo trial delayed as U.S. judge raises prospect of 'cover-up'</og:title>
<og:url>https://www.reuters.com/article/us-alphabet-uber-ruling/u-s-judge-says-uber-withheld-evidence-delays-waymo-trial-idUSKBN1DS26X</og:url>
<og:type>article</og:type>
<og:description>Uber Technologies Inc withheld evidence in a lawsuit filed by Alphabet Inc's Waymo, a U.S. judge said on Tuesday, delaying a trial to give Waymo time to review a letter alleging Uber trained employees to steal trade secrets and hide their tracks.</og:description>
<og:image>https://s4.reutersmedia.net/resources/r/?m=02&amp;d=20171128&amp;t=2&amp;i=1211570098&amp;w=&amp;fh=545px&amp;fw=&amp;ll=&amp;pl=&amp;sq=&amp;r=LYNXMPEDAR1CS</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reuters.com/article/us-alphabet-uber-ruling/u-s-judge-says-uber-withheld-evidence-delays-waymo-trial-idUSKBN1DS26X</dc:identifier>
</item>
<item>
<title>Brown University raising $120M to eliminate all student loans</title>
<link>https://www.cnbc.com/2017/09/25/brown-university-raising-120-million-to-eliminate-all-student-loans.html</link>
<guid isPermaLink="true" >https://www.cnbc.com/2017/09/25/brown-university-raising-120-million-to-eliminate-all-student-loans.html</guid>
<description>&lt;p&gt;Brown University has initiated a $120 million campaign to &lt;a class=&quot;inline_asset&quot; href=&quot;https://news.brown.edu/articles/2017/09/promise&quot; title=&quot;https://news.brown.edu/articles/2017/09/promise&quot;&gt;drop all loans from financial aid&lt;/a&gt; packages awarded to their undergraduates.&lt;/p&gt;
&lt;p&gt;Student debt is at an &lt;a href=&quot;https://www.cnbc.com/2017/08/29/student-loan-balances-jump-nearly-150-percent-in-a-decade.html&quot;&gt;all-time high — the average outstanding balance is $34,144, up 62 percent over the last 10 years&lt;/a&gt; — and Brown will become the &lt;a class=&quot;inline_asset&quot; href=&quot;https://www.cappex.com/hq/articles-and-advice/college-search/college-lists/Colleges-Offering-Generous-No-Loans-Financial-Aid-Policies&quot;&gt;sixteenth U.S. institution&lt;/a&gt;, and the sixth in the Ivy League (excluding Cornell and Dartmouth), to offer all of its undergraduates a loan-free education.&lt;/p&gt;
&lt;p&gt;In 2016, the average Brown student graduated with a debt of $23,810, compared with $8,908 for Princeton, which adopted the no-loans policy in 2001.&lt;/p&gt;

&lt;p&gt;The plan aims to replace financial aid packages with grants that do not have to be repaid. All undergraduates — domestic and international — will be included, university President Christina Paxson said.&lt;/p&gt;
&lt;p&gt;&quot;If we're successful in raising one quarter of the total amount — $30 million — by December, Brown will eliminate loans in financial aid awards for all current and incoming students starting with the 2018-19 academic year,&quot; Paxson said in a statement.&lt;/p&gt;
&lt;p&gt;The university plans to add $4.5 million to its financial aid budget each year to cover its 6,500 undergraduates.&lt;/p&gt;
&lt;p&gt;Currently, Brown has a no-loans financial aid policy that is extended only to students who qualify for a Pell Grant or whose family earnings fall below $60,000. Brown was the second university to adopt that plan after Princeton in 1998.&lt;/p&gt;
&lt;p&gt;Of the estimated 4,200 U.S. colleges and universities, only 58 have no loans for low-income students and just 15 have no loans for any of their undergraduates, said Mark Kantrowitz, publisher and vice president of strategy at &lt;a class=&quot;inline_asset&quot; href=&quot;https://www.cappex.com/&quot;&gt;Cappex.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Brown's move &lt;a href=&quot;https://www.cnbc.com/2017/08/21/free-college-grows-as-arkansas-indiana-montana-rhode-island-join-in.html&quot;&gt;is the latest&lt;/a&gt; in an effort to make higher education more affordable. In April, &lt;a href=&quot;https://www.cnbc.com/2017/07/11/free-college-in-new-york-california-may-be-next.html&quot;&gt;N&lt;/a&gt;&lt;a href=&quot;https://www.cnbc.com/2017/07/11/free-college-in-new-york-california-may-be-next.html&quot;&gt;ew York state made tuition free&lt;/a&gt; for community colleges and public four-year schools for state residents with annual incomes up to $100,000. In June, the University of Michigan announced &lt;a href=&quot;https://www.cnbc.com/2017/06/16/university-of-michigan-launches-zero-tuition-college.html&quot;&gt;it will offer up to four years of free tuition for in-state students with a family income of up to $65,000&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most prior moves to help students with debt are specifically aimed at low-income families. &lt;a href=&quot;https://www.cnbc.com/2017/08/01/these-colleges-are-completely-tuition-free.html&quot;&gt;Only a few American universities&lt;/a&gt;, including Springs College and College of the Ozarks, are tuition-free for students from all socioeconomic backgrounds.&lt;/p&gt;
&lt;p&gt;Brown's plan to eliminate loans may help its own students, but the real question is, will other institutions follow?&lt;/p&gt;
&lt;p&gt;&quot;One of the reasons Ivy League schools can do these programs is not only because they have large endowments but also because they have very few low-income students,&quot; Kantrowitz said. &quot;Longer term, I would expect to see more focus on free tuition, as opposed to no loans.&quot;&lt;/p&gt;
</description>
<pubDate>Tue, 28 Nov 2017 14:39:47 +0000</pubDate>
<dc:creator>champagnepapi</dc:creator>
<og:type>article</og:type>
<og:url>https://www.cnbc.com/2017/09/25/brown-university-raising-120-million-to-eliminate-all-student-loans.html</og:url>
<og:image>https://fm.cnbc.com/applications/cnbc.com/resources/img/editorial/2017/09/22/104726092-GettyImages-548776423-brown-university.1910x1000.jpg</og:image>
<og:title>Brown University raising $120 million to eliminate all student loans</og:title>
<og:description>Brown University has initiated a $120 million campaign to drop all loans from financial aid packages awarded.</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnbc.com/2017/09/25/brown-university-raising-120-million-to-eliminate-all-student-loans.html</dc:identifier>
</item>
<item>
<title>HP installs system-slowing spyware on its PCs</title>
<link>https://www.engadget.com/2017/11/28/hp-quietly-installs-system-slowing-spyware-on-its-pcs/</link>
<guid isPermaLink="true" >https://www.engadget.com/2017/11/28/hp-quietly-installs-system-slowing-spyware-on-its-pcs/</guid>
<description>&lt;p&gt;The software -- first identified on November 15 -- is called &quot;HP Touchpoint Analytics Service&quot; and appears to replace the self-managed HP Touchpoint Manager solution. According to the official productivity description, it features &quot;the tools you need to ensure all your managed devices' security -- and brings you greater peace of mind&quot;. The problem is, it's installing itself without permission and is wreaking havoc on customers' systems.&lt;/p&gt;
&lt;p&gt;One &lt;a href=&quot;https://h30434.www3.hp.com/t5/Desktop-Software-and-How-To-Questions/I-Didn-t-Install-HP-TouchpointAnalyticsClient-and-It-s/td-p/6427652&quot;&gt;complaint&lt;/a&gt; on the HP support site says: &quot;It's been making my computer work so hard I can hear it like cranking away and the light in the back of my computer is flashing rapidly in-tune with the cranking. In Task Manager I can see it starting and stopping numerous applications.&quot;&lt;/p&gt;
&lt;p&gt;It's not yet clear how the new driver is being installed. It may have come with the latest Windows updates, or via HP and its support assistant processes, but regardless, customers aren't happy. &quot;I understand that it hoovers all sorts of telemetry data -- and I am not willing to share too much of it really, definitely not without my knowledge,&quot; says one &lt;a href=&quot;https://h30434.www3.hp.com/t5/Desktop-Software-and-How-To-Questions/HP-Touchpoint-Manager-deployed-on-my-PC/m-p/6425651/highlight/true#M69977&quot;&gt;user&lt;/a&gt; on HP's forums.&lt;/p&gt;
&lt;p&gt;The offending driver can be &lt;a href=&quot;https://www.ghacks.net/2017/11/27/hp-installing-hp-touchpoint-analytics-client-telemetry-service/&quot;&gt;removed&lt;/a&gt; relatively quickly and easily, but against a wider backdrop of repeated &lt;a href=&quot;https://www.engadget.com/2017/09/15/study-says-apple-data-mining-safeguards-dont-protect-privacy-en/&quot;&gt;privacy&lt;/a&gt; scandals that's hardly the point. There's no sign of an official response -- or even acknowledgement -- from HP on the matter, but they can be sure their customers will take them to task over it. We reached out to the company for a comment on the issue and will update this post when we hear back.&lt;/p&gt;
</description>
<pubDate>Tue, 28 Nov 2017 14:13:25 +0000</pubDate>
<dc:creator>artsandsci</dc:creator>
<og:type>article</og:type>
<og:url>https://www.engadget.com/2017/11/28/hp-quietly-installs-system-slowing-spyware-on-its-pcs/</og:url>
<og:title>HP quietly installs system-slowing spyware on its PCs</og:title>
<og:description>Customers say the driver is being installed without their permission.</og:description>
<og:image>https://o.aolcdn.com/images/dims?resize=1200%2C630&amp;crop=1200%2C630%2C0%2C0&amp;quality=80&amp;image_uri=https%3A%2F%2Fimg.vidible.tv%2Fprod%2F2017-11%2F28%2F5a1dc2391e642221a81f2aad%2F5a1dc2cf4bf87a02f9e3bec4_o_U_v1.jpg&amp;client=cbc79c14efcebee57402&amp;signature=33321fbfc56b7463c0bab7d58493f7d7fa7715d7</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.engadget.com/2017/11/28/hp-quietly-installs-system-slowing-spyware-on-its-pcs/</dc:identifier>
</item>
<item>
<title>The Poor Man&amp;#039;s 3D Camera</title>
<link>http://etodd.io/2017/11/28/poor-mans-3d-camera/</link>
<guid isPermaLink="true" >http://etodd.io/2017/11/28/poor-mans-3d-camera/</guid>
<description>&lt;time datetime=&quot;2017-11-28T08:00:00-05:00&quot; class=&quot;right&quot;&gt; 28 Nov 2017&lt;/time&gt;&lt;p&gt;Each of us have our own giants to face. This is a story about one of my giants. Something I never imagined could make a grown man cry, until it did.&lt;/p&gt;
&lt;p&gt;A 3D camera.&lt;/p&gt;
&lt;p&gt;No one can face your giants for you. This is a story, not a walkthrough. Expect no useful information. For that I recommend &lt;a href=&quot;https://www.youtube.com/watch?v=C7307qRmlMI&quot;&gt;50 Game Camera Mistakes&lt;/a&gt; by thatgamecompany's John Nesky. His job title is literally &quot;camera designer&quot;.&lt;/p&gt;
&lt;p&gt;The story starts in 2014 with a seemingly harmless seven-day game jam.&lt;/p&gt;
&lt;h2&gt;7DFPS 2014&lt;/h2&gt;
&lt;p&gt;Exhausted from crunching on &lt;a href=&quot;http://etodd.io/2015/06/25/poor-mans-postmortem-lemma/&quot;&gt;my first game&lt;/a&gt;, I decide it would be good to take a break and make a first-person shooter for &lt;a href=&quot;http://7dfps.com/&quot;&gt;7DFPS&lt;/a&gt;. This is a terrible decision.&lt;/p&gt;
&lt;p&gt;The idea is simple: an FPS where you are the bullet. Click to jump from wall to wall. If someone's head happens to be between you and the next wall, sucks for them.&lt;/p&gt;

&lt;p&gt;The main problem is that, when you shoot to a new surface, the game necessarily buries your face directly into that surface, filling the whole screen with a solid blue color.&lt;/p&gt;
&lt;p&gt;You can see my first solution above. After landing, the game &quot;reflects&quot; your direction off the surface you landed on, and tweens the camera to face the new direction. So when you shoot into a wall head-on, the camera does a complete 180.&lt;/p&gt;
&lt;p&gt;Of course, I can't place the camera directly on the surface, or there would be clipping artifacts. So I space the camera a bit out from the wall, which leads to another problem:&lt;/p&gt;
&lt;img src=&quot;http://etodd.io/assets/camera1.png&quot;/&gt;&lt;p&gt;Here the extra space between the camera and the surface allows you to aim at any location on the surface and launch there. In theory, your &quot;character&quot; is actually flush with the surface, which should make this physically impossible.&lt;/p&gt;
&lt;p&gt;I throw a band-aid on this problem by clamping the camera so that it can't aim at or behind the surface it's attached to.&lt;/p&gt;
&lt;img src=&quot;http://etodd.io/assets/camera2.png&quot;/&gt;&lt;p&gt;I end up working 96 hours in a week to finish this masterpiece that will surely take the world by storm. Two YouTubers play it for a grand total of 10,000 views. Like every good vacation, the experience leaves me exhausted and depressed on Monday morning.&lt;/p&gt;
&lt;p&gt;Over the next 8 months, I finish my other game, take an &lt;em&gt;actual&lt;/em&gt; vacation, then, instead of throwing away the Unity prototype like any sane person would, I start rebuilding it in a brand new custom C++ engine.&lt;/p&gt;
&lt;p&gt;The new game is an expansion of the prototype, which means more features, more gameplay, more pain and suffering! One of the first new features is the ability to crawl along walls, floors, and ceilings:&lt;/p&gt;
&lt;img src=&quot;http://etodd.io/assets/2d5U09X.gif&quot;/&gt;&lt;p&gt;A couple months later, camera problems start to manifest. As players crawl around different surfaces, I have to forcefully nudge the camera to keep it from staring straight into a wall. I use &lt;a href=&quot;https://en.wikipedia.org/wiki/Slerp&quot;&gt;spherical linear interpolation&lt;/a&gt; (slerp) to smooth out the transition between angled surfaces, but it's still not great.&lt;/p&gt;
&lt;p&gt;In the gif below, the player on the right does not manually move their camera at all; the wall forces them to look up automatically.&lt;/p&gt;

&lt;p&gt;At this point, everything is completely unreadable and confusing. The first-person view prevents players from seeing their character, and they often take several minutes to realize they're playing as a creepy crawly spider bot. Once they finally get it, they can't figure out why the camera keeps getting forced around, and why they can't aim at the surface they're attached to.&lt;/p&gt;
&lt;p&gt;I slap on another band-aid in the form of a shader that blacks out everything &quot;behind&quot; you, everything that's physically impossible to reach. I also have it darken out of range areas.&lt;/p&gt;
&lt;a href=&quot;http://etodd.io/assets/I4jJmfj.png&quot;&gt;&lt;img src=&quot;http://etodd.io/assets/I4jJmfjl.png&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Now the game is not only unreadable and confusing, but also ugly!&lt;/p&gt;
&lt;p&gt;By sheer chance, I happen to turn on a debug flag that moves the camera back from the player two units. Literally the poor man's third-person camera. And behold, it was not the worst thing in the world.&lt;/p&gt;

&lt;p&gt;I finally realize I'm making a third-person game, and so set about implementing it for real.&lt;/p&gt;
&lt;h2&gt;The Culling Saga&lt;/h2&gt;
&lt;p&gt;One of the deadliest scourges of humanity, right after Facebook and taxes, is a third-person camera that constantly zooms and bumps around to avoid in-game geometry.&lt;/p&gt;
&lt;p&gt;Rather than move the camera, I decide to just cull anything that blocks the camera's view. Half of the job is done right out the gate because my game engine, like most engines, automatically culls triangles that face away from the camera (also known as &quot;back-faces&quot;).&lt;/p&gt;
&lt;p&gt;I write a shader to handle the rest. It culls everything within a certain distance of the camera.&lt;/p&gt;

&lt;p&gt;What's that you say? My screenshots look weird with spider bots floating in empty space because the wall got culled?&lt;/p&gt;
&lt;a href=&quot;http://etodd.io/assets/nkmN4zw.png&quot;&gt;&lt;img src=&quot;http://etodd.io/assets/nkmN4zwl.png&quot;/&gt;&lt;/a&gt;
&lt;p&gt;It'll be fine. It's fine. Don't worry about it. What, what now? You can catch glimpses of stuff you're not supposed to see, including the skybox? Look, I'm sure it's just a minor thing.&lt;/p&gt;
&lt;a href=&quot;http://etodd.io/assets/s3TxXIt.png&quot;&gt;&lt;img src=&quot;http://etodd.io/assets/s3TxXItl.png&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Okay. That's pretty bad.&lt;/p&gt;
&lt;p&gt;What if instead of carving spheres around the player and camera, I use a cylinder instead? And what if I actually render a solid black cylinder whenever the camera is inside a wall?&lt;/p&gt;

&lt;p&gt;So close, yet so far. The cylinder blocks out most of the ugly geometry it needs to, but sometimes you can still see through things. I could extend the cylinder to block more, but I would have to clip it so it stays inside the level geometry.&lt;/p&gt;
&lt;p&gt;Even now, the cylinder sometimes blocks too much, because I only clip it against the player's current wall.&lt;/p&gt;

&lt;p&gt;Here I only want the cylinder to block the ugly insides of the ledge. Instead it blocks everything behind the player.&lt;/p&gt;
&lt;p&gt;I would have to query all the geometry surrounding the player and clip the cylinder against all those planes. And that's assuming I can figure out what's &quot;inside&quot; and &quot;outside&quot; the level geometry, which is not air-tight. There are overlapping faces, shapes that clip into each other, and plenty of other lazy hacks— I mean, clever tricks.&lt;/p&gt;
&lt;p&gt;What if I just turn off back-face culling? Use the same culling shader, and instead of the cylinder, rely on the back-faces to block anything you're not supposed to see. This works perfectly in some cases:&lt;/p&gt;
&lt;a href=&quot;http://etodd.io/assets/enhQ7kS.png&quot;&gt;&lt;img src=&quot;http://etodd.io/assets/enhQ7kSl.png&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Other times it does a great job of showing off my lazy hacks, like this ramp that simply extends into the floor rather than meeting it cleanly:&lt;/p&gt;
&lt;img src=&quot;http://etodd.io/assets/jQWSryN.png&quot;/&gt;&lt;p&gt;It doesn't help that the back-faces still receive accurate lighting. Feels like the level is a hollow shell.&lt;/p&gt;
&lt;p&gt;Fine. I'll spend a couple weeks welding level geometry together, and I'll render the back-faces in solid black. How about now?&lt;/p&gt;

&lt;p&gt;Getting less terrible all the time. With a little depth buffer bias, a special tag in the G-buffer for back-faces, and a few extra texture taps in the composite shader, I can filter out those pesky lines too:&lt;/p&gt;

&lt;p&gt;The gifs above also show off the new culling shape. Instead of a cylinder, which indiscriminately carves out an uncouth shape much larger than necessary:&lt;/p&gt;
&lt;img src=&quot;http://etodd.io/assets/camera3.png&quot;/&gt;&lt;p&gt;I switch to a cone, to ensure I only cull things what need culling.&lt;/p&gt;
&lt;img src=&quot;http://etodd.io/assets/camera4.png&quot;/&gt;&lt;p&gt;But the cone has problems too. It's possible for the player to back up so close to a wall that the cone intersects the wall in an incredibly narrow circle, leaving a tiny hole for the player to peer through.&lt;/p&gt;
&lt;p&gt;From somewhere deep inside my repressed memories of Calc II springs an exotic mathematical creature known as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Paraboloid&quot;&gt;paraboloid&lt;/a&gt;:&lt;/p&gt;
&lt;img src=&quot;http://etodd.io/assets/camera5.png&quot;/&gt;&lt;p&gt;A quick trip to the grimoire to remind myself of the formula, a few incantations in a darkened room with a mirror, and the creature is summoned into GLSL form. The culled circle still tapers a little, but it's enough to see fairly well.&lt;/p&gt;

&lt;p&gt;Good enough for government work. Ship it!&lt;/p&gt;
&lt;h2&gt;UX&lt;/h2&gt;
&lt;p&gt;UX is, like, super important. Take it from me, a full-stack growth-hacking happiness engineer co-founder. Let me tell you about Our Incredible Journey. At first, the game had a terrible retention rate. I did some A/B testing, streamlined the user onboarding, pivoted to clickbait, bought some fraudulent traffic, and now I'm at $10k MRR. I'm also taking cold showers every morning and learning Farsi on Duolingo.&lt;/p&gt;
&lt;p&gt;If you can keep your eyes from rolling back completely and irreparably inside your head, &quot;User Experience&quot; is a decent descriptor for the interactive aspects of game development, the other contender being &quot;Game Feel&quot;. It's the thing you can only get by interacting with the software yourself. It's the thing that makes you smile with surprise when you pick up the controller for the first time, even though you've spent the last hour watching someone else play.&lt;/p&gt;
&lt;p&gt;It's also basically impossible for me to get right on the first ten tries.&lt;/p&gt;
&lt;p&gt;Here's an example of my terrible camera UX. When you hit an enemy player without killing them, you bounce off. The camera instantly snaps around to follow your new trajectory. Of course I slerp the rotation a little, but still, you can barely see it happen.&lt;/p&gt;

&lt;p&gt;I have no reason to lock the camera like this, it's just a carry-over from when the game was first-person, when it made sense to always point the camera where the player was headed next.&lt;/p&gt;
&lt;p&gt;It takes someone at a convention telling me what an idiot I am to make me finally unlock the camera. A one-line change that takes a whole year.&lt;/p&gt;

&lt;p&gt;Later, someone on Twitch yells out a self-evidently brilliant suggestion: let the camera lag behind the player a little when they launch. This also takes only a handful of lines to test out, although the numbers don't feel good until a week or two of tweaking.&lt;/p&gt;

&lt;p&gt;So many of my design decisions are simply carried over from old and outdated assumptions, even though they stopped making sense several versions ago.&lt;/p&gt;
&lt;p&gt;Here's an example. Remember how I clamp the camera rotation to keep the player from aiming at the surface they're currently attached to?&lt;/p&gt;
&lt;img src=&quot;http://etodd.io/assets/camera2.png&quot;/&gt;&lt;p&gt;Turns out this gets old after a while, especially in third-person. People want freedom, they don't want you shoving their camera around. I grudgingly loosen the shackles a bit by clamping the rotation against a cone instead of a plane.&lt;/p&gt;
&lt;img src=&quot;http://etodd.io/assets/camera9.png&quot;/&gt;&lt;p&gt;I use spherical interpolation again to smoothly swing the cone around and nudge the camera away from the wall.&lt;/p&gt;

&lt;p&gt;Unfortunately, slerp doesn't always rotate the way you want it to. Sometimes the cone pushes the camera in a completely different direction as it rotates to match the surface.&lt;/p&gt;
&lt;img src=&quot;http://etodd.io/assets/TQ0r4j9.gif&quot;/&gt;&lt;p&gt;Instead of rotating the cone, I decide to instantly snap it to the surface, but scale it up slowly. So it starts as a thin sliver and slowly expands into a fat cone, pushing the camera out as it grows.&lt;/p&gt;

&lt;p&gt;Everything's going just swimmingly until &lt;a href=&quot;https://twitter.com/foolmoron&quot;&gt;Momin Khan&lt;/a&gt; asks me... is it even necessary to clamp the camera any more? It made sense when the game was first-person, but that was two years ago.&lt;/p&gt;
&lt;p&gt;I immediately get defensive. How else can I keep the camera from staring straight at the wall for 90% of the game? But I slowly realize he's right.&lt;/p&gt;
&lt;p&gt;I compromise in the end. I nudge the camera for a split second after landing, then shrink the cone back down to zero to allow glorious unfettered camera freedom.&lt;/p&gt;

Full range of motion, baybee
&lt;p&gt;Now that the player can aim at their currently attached surface, what happens when they try to launch there?&lt;/p&gt;
&lt;img src=&quot;http://etodd.io/assets/camera1.png&quot;/&gt;&lt;p&gt;I eventually solve this problem by allowing spider bots to &quot;dash&quot; along the surface.&lt;/p&gt;

&lt;p&gt;I have no physical explanation for how they do it. It's a video game.&lt;/p&gt;
&lt;p&gt;There's another problem, however. Normally, the game does a raycast starting at the third-person camera and continuing straight through the reticle. When the spider bot launches, it compensates and launches where the player wants it to go, like this:&lt;/p&gt;
&lt;img src=&quot;http://etodd.io/assets/camera6.png&quot;/&gt;&lt;p&gt;However, sometimes the camera can see and aim at a point the spider bot can't reach.&lt;/p&gt;
&lt;img src=&quot;http://etodd.io/assets/camera7.png&quot;/&gt;&lt;p&gt;I solve this by ruling everything behind the player's current surface &quot;out of bounds&quot;. I even have a shader to darken the forbidden areas.&lt;/p&gt;
&lt;a href=&quot;http://etodd.io/assets/7vq39WZ.png&quot;&gt;&lt;img src=&quot;http://etodd.io/assets/7vq39WZl.png&quot;/&gt;&lt;/a&gt; Look, Simba. Everything the light touches is our kingdom.
&lt;p&gt;This is really frustrating and confusing to people. Finally Nathan Fouts from &lt;a href=&quot;http://mommysbestgames.com/&quot;&gt;Mommy's Best Games&lt;/a&gt; tells me to just cheat and let the player go there even if it doesn't make physical sense.&lt;/p&gt;
&lt;p&gt;I don't like the idea of breaking my game physics so I compromise by having the spider bot dash to the edge and then fly the rest of the way.&lt;/p&gt;
&lt;img src=&quot;http://etodd.io/assets/camera8.png&quot;/&gt;&lt;p&gt;It all happens so fast, you don't even notice it. Here it is in slow motion:&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Some tasks cannot be sped up. If I had put &quot;make 3D camera&quot; on a Gantt chart, I would have stopped 10% of the way through this article and called it good.&lt;/p&gt;
&lt;p&gt;The point is, most of these ideas are simple and obvious in hindsight, but I had to make a lot of mistakes to find them. It's nearly impossible to coalesce good design decisions straight from the ether. The only reliable method is iteration and trial and error.&lt;/p&gt;
&lt;p&gt;Thanks for reading. What embarrassingly obvious design improvements have you been slapped in the face with?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://deceivergame.com/&quot;&gt;Deceiver&lt;/a&gt; is set to launch on Kickstarter in early February 2018. Join the &lt;a href=&quot;http://eepurl.com/U50O5&quot;&gt;mail list&lt;/a&gt; to be notified of its release, or check out the &lt;a href=&quot;https://github.com/etodd/deceiver&quot;&gt;source code&lt;/a&gt; on GitHub.&lt;/p&gt;
</description>
<pubDate>Tue, 28 Nov 2017 13:33:57 +0000</pubDate>
<dc:creator>et1337</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://etodd.io/2017/11/28/poor-mans-3d-camera/</dc:identifier>
</item>
<item>
<title>Show HN: Golang DNS server, including DNSSEC and DNS-over-TLS</title>
<link>https://github.com/tenta-browser/tenta-dns</link>
<guid isPermaLink="true" >https://github.com/tenta-browser/tenta-dns</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tenta-browser/tenta-dns/blob/master/logo.png?raw=true&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/tenta-browser/tenta-dns/raw/master/logo.png?raw=true&quot; alt=&quot;Tenta Gopher&quot; title=&quot;Tenta Gopher&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A full-fledged DNS solution, including DNSSEC and DNS-over-TLS&lt;/p&gt;
&lt;p&gt;Tenta DNS provides a DNS server suite comprising an authoritative DNS server, recursive DNS server, and NSnitch, which provides a DNS server capable of recording the IP address of requests made against it and then makes that IP available via a JSON API. Tenta DNS also provides lookups for Tor Node membership, DNS blacklist status and Geo data. Finally, Tenta DNS includes built-in BGP integration, offering single engine convenience for DNS anycasting. We welcome people to use our hosted versions of recursive resolver and NSnitch. Please see &lt;code&gt;Usage&lt;/code&gt;, for details on how to set Tenta DNS as your default DNS resolver, or &lt;code&gt;APIs&lt;/code&gt;, for NSnitch REST API information.&lt;/p&gt;
&lt;p&gt;Contact: &lt;a href=&quot;mailto:developer@tenta.io&quot;&gt;developer@tenta.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just want to use our hosted recursive resolver? We offer two options, using either &lt;a href=&quot;https://opennic.org&quot; rel=&quot;nofollow&quot;&gt;OpenNIC&lt;/a&gt; root servers or the normal ICANN root servers.&lt;/p&gt;
&lt;p&gt;Our OpenNIC nameservers are at &lt;code&gt;99.192.182.100&lt;/code&gt; and &lt;code&gt;66.244.159.100&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ICANN nameservers are at &lt;code&gt;99.192.182.200&lt;/code&gt; and &lt;code&gt;66.244.159.200&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Please consult our &lt;a href=&quot;https://tenta.com/dns-setup-guides&quot; rel=&quot;nofollow&quot;&gt;how-to page&lt;/a&gt;, on setting up your DNS resolver.&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;Run &lt;code&gt;install-deps.sh&lt;/code&gt; (or &lt;code&gt;install-deps.bat&lt;/code&gt; on windows).&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;build.sh&lt;/code&gt; or (or &lt;code&gt;build.bat&lt;/code&gt; on windows).&lt;/li&gt;
&lt;li&gt;Modify &lt;code&gt;etc/config.toml&lt;/code&gt; and &lt;code&gt;etc\conf.d\*.toml&lt;/code&gt; for your installation.&lt;/li&gt;
&lt;li&gt;🙈🙉🙊&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'd be thrilled for people to use our APIs as part of your app or system. In order to use our hosted API, please provide a link to &lt;a href=&quot;https://tenta.com/&quot; rel=&quot;nofollow&quot;&gt;https://tenta.com/&lt;/a&gt; with the text &quot;Powered by Tenta&quot; or similar. If you need to perform arbitrary lookups (e.g. you want information for an IP different than the requesting IP, like from a server), message us for an API key. If you need CORS whitelisted for the public APIs, please email us with your domain name(s).&lt;/p&gt;
&lt;p&gt;All APIs under the path &lt;code&gt;/api/v1&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;status&lt;/code&gt;: Public status checking endpoint for basic liveness monitoring&lt;/li&gt;
&lt;li&gt;&lt;code&gt;report&lt;/code&gt;: Generate a report from a specific DNS lookup. Only works on subdomains, explicity looked up via DNS already.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;randomizer&lt;/code&gt;: Generate (and optionally redirect to) a random subdomain. Set &lt;code&gt;?api_response=true&lt;/code&gt; to get a JSON result instead of a redirect.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geolookup&lt;/code&gt;: GeoIP info about the requesting IP.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geolookup/{IP}&lt;/code&gt;: GeoIP info about the specified IP address. Requires auth.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blacklist&lt;/code&gt;: Perform DNS blacklist lookup for the requesting IP.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blacklist/{IP}&lt;/code&gt;: DNS blacklist info for the specified IP address. Requires auth.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stats&lt;/code&gt;: Work in Progress. Server performance information.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to the REST APIs, core functionality relies upon DNS lookups. After creating glue records pointing &lt;code&gt;ns1.nstoro.com&lt;/code&gt; and &lt;code&gt;ns2.nstoro.com&lt;/code&gt; to the IP(s) of a Tenta DNS server.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;From javascript, load nstoro.com/api/v1/randomizer, it will redirect to abc123.nstoro.com/api/v1/report (where abc123 is a big random)&lt;/li&gt;
&lt;li&gt;Since the domain name is not cached (since it's totally random), the browser initiates a DNS lookup&lt;/li&gt;
&lt;li&gt;Since the intermediate resolver cannot have it cached, it too initiates a DNS lookup&lt;/li&gt;
&lt;li&gt;When nsnitch gets the lookup, it returns a valid answer for the domain name, and stores the IP that contacted it along with details&lt;/li&gt;
&lt;li&gt;When the browser actually makes the request, the stored data is sent back&lt;/li&gt;
&lt;li&gt;Data automatically expires after 5 minutes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We rely on lots of excellent open source libraries, including &lt;a href=&quot;https://github.com/miekg/dns&quot;&gt;miekg/dns&lt;/a&gt; and &lt;a href=&quot;https://github.com/osrg/gobgp&quot;&gt;osrg/gobgp&lt;/a&gt;, as well as many others. For a complete list of our dependencies and required notification, please take a look at &lt;a href=&quot;https://github.com/tenta-browser/tenta-dns/blob/master/NOTICES.md&quot;&gt;NOTICES.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;words.txt&lt;/code&gt; file used for random names in NSnitch is from &lt;a href=&quot;http://dreamsteep.com/projects/the-english-open-word-list.html&quot; rel=&quot;nofollow&quot;&gt;dreamsteep.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;http://www.apache.org/licenses/LICENSE-2.0
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;
&lt;p&gt;Please see &lt;a href=&quot;https://github.com/tenta-browser/tenta-dns/blob/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for more. For any questions, please contact &lt;a href=&quot;mailto:developer@tenta.io&quot;&gt;developer@tenta.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You're welcome to use the hosted version of our JSON APIs free on your site. We kindly ask that in return you show us some link love to &lt;a href=&quot;https://tenta.com&quot; rel=&quot;nofollow&quot;&gt;https://tenta.com&lt;/a&gt;. We’d love to know how you’re using it, so do let us know!&lt;/p&gt;

&lt;p&gt;We welcome contributions, feedback and plain old complaining. Feel free to open an issue or shoot us a message to &lt;a href=&quot;mailto:developer@tenta.io&quot;&gt;developer@tenta.io&lt;/a&gt;. If you'd like to contribute, please open a pull request and send us an email to sign a contributor agreement.&lt;/p&gt;

&lt;p&gt;Tenta DNS is brought to you by Team Tenta. Tenta is your &lt;a href=&quot;https://tenta.com&quot; rel=&quot;nofollow&quot;&gt;private, encrypted browser&lt;/a&gt; that protects your data instead of selling it. We're building a next-generation browser that combines all the privacy tools you need, including built-in OpenVPN. Everything is encrypted by default. That means your bookmarks, saved tabs, web history, web traffic, downloaded files, IP address and DNS. A truly incognito browser that's fast and easy.&lt;/p&gt;
&lt;/article&gt;</description>
<pubDate>Tue, 28 Nov 2017 13:21:06 +0000</pubDate>
<dc:creator>tenta</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/29059958?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>tenta-browser/tenta-dns</og:title>
<og:url>https://github.com/tenta-browser/tenta-dns</og:url>
<og:description>tenta-dns - Recursive and authoritative DNS server in go, including DNSSEC and DNS-over-TLS</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/tenta-browser/tenta-dns</dc:identifier>
</item>
<item>
<title>DRM’s Dead Canary: How We Lost the Web, What We Learned, and What to Do Next</title>
<link>https://www.eff.org/deeplinks/2017/10/drms-dead-canary-how-we-just-lost-web-what-we-learned-it-and-what-we-need-do-next</link>
<guid isPermaLink="true" >https://www.eff.org/deeplinks/2017/10/drms-dead-canary-how-we-just-lost-web-what-we-learned-it-and-what-we-need-do-next</guid>
<description>&lt;p&gt;EFF has been fighting against DRM and the laws behind it for a decade and a half, intervening in the &lt;a href=&quot;https://www.eff.org/broadcastflag&quot;&gt;US Broadcast Flag&lt;/a&gt;, the &lt;a href=&quot;https://www.eff.org/issues/wipo-broadcasting-treaty&quot;&gt;UN Broadcasting Treaty&lt;/a&gt;, the &lt;a href=&quot;https://w2.eff.org/IP/DVB/dvb_paper_032007.pdf&quot;&gt;European DVB CPCM standard&lt;/a&gt;, the &lt;a href=&quot;https://www.eff.org/press/releases/eff-makes-formal-objection-drm-html5&quot;&gt;W3C EME standard&lt;/a&gt; and many other skirmishes, battles and even wars over the years. With that long history behind us, there are two things we want you to know about DRM:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Everybody on the inside secretly knows that DRM &lt;em&gt;technology&lt;/em&gt; is irrelevant, but DRM &lt;em&gt;law&lt;/em&gt; is &lt;em&gt;everything&lt;/em&gt;; and&lt;/li&gt;
&lt;li&gt;The reason companies want DRM has nothing to do with copyright.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;These two points have just been demonstrated in a messy, drawn-out fight over the standardization of DRM in browsers, and since we threw a lot of blood and treasure at that fight, one thing we hope to salvage is an object lesson that will drive these two points home and provide a roadmap for the future of DRM fighting.&lt;/p&gt;
&lt;h2&gt;DRM IS TECHNOLOGICALLY BANKRUPT; DRM LAW IS DEADLY&lt;/h2&gt;
&lt;p&gt;Here's how DRM works, at a high level: a company wants to provide a customer (you) with digital asset (like a movie, a book, a song, a video game or an app), but they want to control what you do with that file after you get it.&lt;/p&gt;
&lt;p&gt;So they encrypt the file. &lt;a href=&quot;https://www.eff.org/encrypt-the-web&quot;&gt;We &lt;em&gt;love&lt;/em&gt; encryption&lt;/a&gt;. Encryption &lt;em&gt;works&lt;/em&gt;. With relatively little effort, anyone can scramble a file so well that no one will ever be able to decrypt it unless they're provided with the key.&lt;/p&gt;
&lt;p&gt;Let's say this is Netflix. They send you a movie that's been scrambled and they want to be sure you can't save it and watch it later from your hard-drive. But they also need to give you a way to view the movie, too. At some point, that means unscrambling the movie. And there's only one way to unscramble a file that's been competently encrypted: you have to use the key.&lt;/p&gt;
&lt;p&gt;So Netflix also gives you the unscrambling key.&lt;/p&gt;
&lt;p&gt;But if you have the key, you can just unscramble the Netflix movies and save them to your hard drive. How can Netflix give you the key but control how you use it?&lt;/p&gt;
&lt;p&gt;Netflix has to &lt;em&gt;hide&lt;/em&gt; the key, somewhere on your computer, like in a browser extension or an app. This is where the technological bankruptcy comes in. Hiding something well is hard. Hiding something well in a piece of equipment that you give to your adversary to take away with them and do anything they want with is &lt;em&gt;impossible&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Maybe you can't find the keys that Netflix hid in your browser. But someone can: a bored grad student with a free weekend, a self-taught genius decapping a chip in their basement, a competitor with a full-service lab. One tiny flaw in any part of the fragile wrapping around these keys, and they're free.&lt;/p&gt;
&lt;p&gt;And once that flaw is exposed, anyone can write an app or a browser plugin that does have a save button. It's game over for the DRM technology. (The keys &lt;a href=&quot;https://freedom-to-tinker.com/index.php?s=aacs&quot;&gt;escape pretty regularly, just as fast as they can be revoked by the DRM companies&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;DRM gets made over the course of years, by skilled engineers, at a cost of millions of dollars. It gets broken in days, by teenagers, with hobbyist equipment. That's not because the DRM-makers are stupid, it's because they're &lt;em&gt;doing&lt;/em&gt; something stupid.&lt;/p&gt;
&lt;p&gt;Which is where the law comes in. DRM law gives rightsholders more forceful, far-ranging legal powers than laws governing any other kind of technology. In 1998, Congress passed the Digital Millennium Copyright Act (DMCA), whose Section 1201 provides for felony liability for anyone commercially engaged in bypassing a DRM system: 5 years in prison and a $500,000 fine for a &lt;em&gt;first offense&lt;/em&gt;. Even noncommercial bypass of DRM is subject to liability. It also makes it legally risky to even &lt;em&gt;talk&lt;/em&gt; about how to bypass a DRM system.&lt;/p&gt;
&lt;p&gt;So the law shores up DRM systems with a broad range of threats. If Netflix designs a video player that won't save a video unless you break some DRM, they now have the right to sue -- or sic the police -- on any rival that rolls out an improved alternative streaming client, or a video-recorder that works with Netflix. Such tools wouldn't violate copyright law any more than a VCR or a Tivo does, but because that recorder would have to break Netflix DRM, they could use DRM law to crush it.&lt;/p&gt;
&lt;p&gt;DRM law goes beyond mere bans on tampering with DRM. Companies also use Section 1201 of the DMCA to threaten security researchers who discover flaws in their products. The law becomes a weapon they can aim at anyone who wants to warn their customers (still you) that the products you're relying on aren't fit for use. That includes warning people about flaws in DRM that expose them to being hacked.&lt;/p&gt;
&lt;p&gt;It's not just the USA and not just the DMCA, either. The US Trade Representative has &quot;convinced&quot; countries around the world to adopt a version of this rule.&lt;/p&gt;
&lt;h2&gt;DRM HAS NOTHING TO DO WITH COPYRIGHT&lt;/h2&gt;
&lt;p&gt;DRM law has the power to do untold harm. Because it affords corporations the power to control the use of their products after sale, the power to decide who can compete with them and under what circumstances, and even who gets to warn people about defective products, DRM laws represent a powerful temptation.&lt;/p&gt;
&lt;p&gt;Some things that aren't copyright infringement: buying a DVD while you're on holiday and playing it when you get home. It is obviously not a copyright infringement to go into a store in (say) New Delhi and buy a DVD and bring it home to (say) Topeka. The rightsholder made their movie, sold it to the retailer, and you paid the retailer the asking price. This is the opposite of copyright infringement. That's paying for works on the terms set by the rightsholder. But because DRM stops you from playing out-of-region discs on your home player, the studios can invoke copyright law to decide where you can consume the copyrighted works you've bought, fair and square.&lt;/p&gt;
&lt;p&gt;Other not-infringements: fixing your car (GM uses DRM to control who can diagnose an engine, and to force mechanics to spend tens of thousands of dollars for diagnostic information they could otherwise determine themselves or obtain from third parties); refilling an ink cartridge (HP pushed out a fake security update that added DRM to millions of inkjet printers so that they'd refuse remanufactured or third-party cartridges), or toasting home-made bread (though this hasn't happened yet, there's no reason that a company couldn't put DRM in its toasters to control whose bread you can use).&lt;/p&gt;
&lt;p&gt;It's also not a copyright infringement to watch Netflix in a browser that Netflix hasn't approved. It's not a copyright infringement to record a Netflix movie to watch later. It's not a copyright infringement to feed a Netflix video to an algorithm that can warn you about upcoming strobe effects that can trigger life-threatening seizures in people with photosensitive epilepsy.&lt;/p&gt;
&lt;h2&gt;WHICH BRINGS US TO THE W3C&lt;/h2&gt;
&lt;p&gt;The W3C is the world's foremost open web standards body, a consortium whose members (companies, universities, government agencies, civil society groups and others) engage in protracted wrangles over the best way for everyone to deliver web content. They produce &quot;recommendations&quot; (W3C-speak for &quot;standards&quot;) that form the invisible struts that hold up the web. These agreements, produced through patient negotiation and compromise, represent an agreement by major stakeholders about the best (or least-worst) way to solve thorny technological problems.&lt;/p&gt;
&lt;p&gt;In 2013, Netflix and a few other media companies convinced the W3C to start work on a DRM system for the web. This DRM system, Encrypted Media Extensions (EME), represented a sharp departure from the W3C's normal business. First, EME would not be a complete standard: the organization would specify an API through which publishers and browser vendors would make DRM work, but the actual &quot;content decryption module&quot; (CDM) wouldn't be defined by the standard. That means that EME was a standard in name only: if you started a browser company and followed all the W3C's recommendations, you still wouldn't be able to play back a Netflix video. For that, you'd need Netflix's permission.&lt;/p&gt;
&lt;p&gt;It's hard to overstate how weird this is. Web standards are about &quot;permissionless interoperability.&quot; The standards for formatting text mean that anyone can make a tool that can show you pages from the &lt;em&gt;New York Times&lt;/em&gt;' website; images from Getty; or interactive charts on Bloomberg. The companies can still decide who can see which pages on their websites (by deciding who gets a password and which parts of the website each password unlocks), but they don't get to decide who can make the web browsing program you type the password into in order to access the website.&lt;/p&gt;
&lt;p&gt;A web in which every publisher gets to pick and choose which browsers you can use to visit their sites is a very different one from the historical web. Historically, anyone could make a new browser by making sure it adhered to W3C recommendations, and then start to compete. And while the web has always been dominated by a few browsers, &lt;em&gt;which&lt;/em&gt; browsers dominate have changed every decade or so, as new companies and even nonprofits like Mozilla (who make Firefox) overthrew the old order. Technologies that have stood in the way of this permissionless interoperabilty -- for instance, patent-encumbered video -- have been seen as impediments to the idea of the open web, not standardization opportunities.&lt;/p&gt;
&lt;p&gt;When the W3C starts making technologies that only work when they're blessed by a handful of entertainment companies, they're putting their thumbs -- their &lt;em&gt;fists&lt;/em&gt; -- on the scales in favor of ensuring that the current browser giants get to enjoy a permanent reign.&lt;/p&gt;
&lt;p&gt;But that's the least of it. Until EME, W3C standards were designed to give the users of the web (e.g. you) more control over what your computer did while you were accessing other peoples' websites. With EME -- and for the first time ever -- the W3C is designing technology that takes away your control. EME is designed to allow Netflix -- and other big companies -- to decide what your browser does, even (especially) when you disagree about what that should be.&lt;/p&gt;
&lt;p&gt;Since the earliest days of computing, there's been a simmering debate about whether computers exist to control their users, or vice versa (as the visionary computer scientist and education specialist Seymour Papert put it, &quot;children should be programming the computer rather than being programmed by it&quot; -- that applies equally well to adults). Every W3C standard until 2017 was on the side of people controlling computers. EME breaks with that. It is a subtle, but profound shift.&lt;/p&gt;
&lt;h2&gt;WHY WOULD THE W3C DO THIS?&lt;/h2&gt;
&lt;p&gt;Ay yi yi. &lt;em&gt;That&lt;/em&gt; is the three billion user question.&lt;/p&gt;
&lt;p&gt;The W3C version of the story goes something like this. The rise of apps has weakened the web. In the pre-app days, the web was the only game in town, so companies had to play by web rules: open standards, open web. But now that apps exist and nearly everyone uses them, big companies can boycott the web, forcing their users into apps instead. That just accelerates the rise of apps, and weakens the web even more. Apps are used to implement DRM, so DRM-using companies are moving to apps. To keep entertainment companies from killing the web outright, the Web must have DRM too.&lt;/p&gt;
&lt;p&gt;Even if those companies don't abandon the web altogether, continues this argument, getting them to make their DRM at the W3C is better than letting them make it on an ad-hoc basis. Left to their own devices, they could make DRM that made no accommodations for people with disabilities, and without the W3C's moderating influence, these companies would make DRM that would be hugely invasive of web users' privacy.&lt;/p&gt;
&lt;p&gt;The argument ends with a broad justification for DRM: companies have the right to protect their copyrights. We can't expect an organization to spend fortunes creating or licensing movies and then distribute them in a way that lets anyone copy and share them.&lt;/p&gt;
&lt;p&gt;We think that these arguments don't hold much water. The web does indeed lack some of its earlier only-game-in-town muscle, but the reality is that companies make money by going where their customers are, and every potential customer has a browser, while only &lt;em&gt;existing&lt;/em&gt; customers have a company's apps. The more hoops a person has to jump through in order to become your customer, the fewer customers you'll have. Netflix is in a hyper-competitive market with tons of new entrants (e.g. &lt;a href=&quot;http://www.latimes.com/business/la-fi-disney-streaming-20170907-story.html&quot;&gt;Disney&lt;/a&gt;), and being &quot;that streaming service you can't use on the web&quot; is a serious deficit.&lt;/p&gt;
&lt;p&gt;We also think that the media companies and tech companies would struggle to arrive at a standard for DRM outside of the W3C, even a really terrible one. We've spent a lot of time in &lt;a href=&quot;https://www.eff.org/effector/15/13&quot;&gt;the smoke-filled rooms of DRM standardization&lt;/a&gt; and the core dynamic there is the media companies demanding full-on lockdown for every frame of video, and tech companies insisting that the best anyone can hope for is an ineffectual &quot;speed-bump&quot; that they hope will mollify the media companies. Often as not, these negotiations collapse under their own weight.&lt;/p&gt;
&lt;p&gt;Then there's the matter of patents: companies that think DRM is a good idea also &lt;em&gt;love&lt;/em&gt; software patents, and the result is an impenetrable thicket of patents that make getting anything done next to impossible. The W3C's patent-pooling mechanism (which is uniquely comprehensive in the standards world and stands as an example of the best way to do this sort of thing) was essential to making DRM standardization possible. What's more, there are key players in the DRM world, like Adobe, who hold significant patent portfolios but are playing an ever-dwindling role in the world of DRM (the avowed goal of EME was to &quot;kill Flash&quot;). If the companies involved had to all sit down and negotiate a new patent deal without the W3C's framework, any of these companies could &quot;turn troll&quot; and insist that all the rest would have to shell out big dollars to license their patents -- they have nothing to lose by threatening the entire enterprise, and everything to gain from even a minuscule per-user royalty for something that will be rolled out into &lt;em&gt;three billion&lt;/em&gt; browsers.&lt;/p&gt;
&lt;p&gt;Finally, there's no indication that EME had anything to do with protecting legitimate business interests. Streaming video services like Netflix rely on customers to subscribe to a whole library with constantly added new materials and a recommendation engine to help them navigate the catalog.&lt;/p&gt;
&lt;p&gt;DRM for streaming video is all about preventing competition, not protecting copyrights. The purpose of DRM is to give companies the legal tools to prevent activities that would otherwise be allowed. The DRM part doesn't have to &quot;work&quot; (in the sense of preventing copyright infringement) so long as it allows for the invocation of the DMCA.&lt;/p&gt;
&lt;p&gt;To see how true this is, just look at Widevine, Google's version of EME. Google bought the company that made Widevine in 2010, but it wasn't until 2016 that an independent researcher actually took a close look at how well it prevented videos from leaking. That researcher, &lt;a href=&quot;https://www.wired.com/2016/06/bug-chrome-makes-easy-pirate-movies/&quot;&gt;David Livshits found that Widevine was trivial to circumvent&lt;/a&gt;, and it had been since its inception, and that the errors that made Widevine so ineffective were obvious to even a cursory examination. If the millions of dollars and the high-power personnel committed to EME were allocated to create a technology that would effectively prevent copyright infringement, then you'd think that Netflix or one of the other media companies in the negotiations would have diverted some of those resources to a quick audit to make sure that the stuff actually worked as advertised.&lt;/p&gt;
&lt;p&gt;(Funny story: Livshits is an Israeli at Ben Gurion University, and Israel happens to be the rare country that doesn't ban breaking DRM, meaning that Israelis are among the only people who can do this kind of research without fear of legal retaliation)&lt;/p&gt;
&lt;p&gt;But the biggest proof that EME was just a means to shut down legitimate competitors -- and not an effort to protect copyright -- is what happened next.&lt;/p&gt;
&lt;h2&gt;A CONTROLLED EXPERIMENT&lt;/h2&gt;
&lt;p&gt;When EFF joined the W3C, our opening bid was &quot;Don't make DRM.&quot;&lt;/p&gt;
&lt;p&gt;We put the case to the organization, describing the way that DRM interferes with the important copyright exceptions (like those that allow people to record and remix copyrighted works for critical or transformative purposes) and the myriad problems presented by the DMCA and laws like it around the world.&lt;/p&gt;
&lt;p&gt;The executive team of the W3C basically dismissed all arguments about fair use and user rights in copyright as a kind of unfortunate casualty of the need to keep Netflix from ditching the web in favor of apps, and as for the DMCA, they said that they couldn't do anything about this crazy law, but they were sure that the W3C's members were not interested in abusing the DMCA, they just wanted to keep their high-value movies from being shared on the internet.&lt;/p&gt;
&lt;p&gt;So we changed tack, and proposed a kind of &quot;controlled experiment&quot; to find out what the DRM fans at the W3C were trying to accomplish.&lt;/p&gt;
&lt;p&gt;The W3C is a consensus body: it makes standards by getting everyone in a room to compromise, moving toward a position that everyone can live with. Our ideal world was &quot;No DRM at the W3C,&quot; and DRM is a bad enough idea that it was hard to imagine much of a compromise from there.&lt;/p&gt;
&lt;p&gt;But after listening closely to the DRM side's disavowals of DMCA abuse, we thought we could find something that would represent an improvement on the current status quo and that should fit with their stated views.&lt;/p&gt;
&lt;p&gt;We proposed a kind of DRM non-aggression pact, through which W3C members would promise that they'd only sue people under laws like DMCA 1201 if there was some other law that had been broken. So if someone violates your copyright, or incites someone to violate your copyright, or interferes with your contracts with your users, or misappropriates your trade secrets, or counterfeits your trademarks, or does &lt;em&gt;anything else that violates your legal rights&lt;/em&gt;, you can throw the book at them.&lt;/p&gt;
&lt;p&gt;But if someone goes around your DRM and &lt;em&gt;doesn't&lt;/em&gt; violate any other laws, the non-aggression pact means that you couldn't use the W3C standardised DRM as a route to legally shut them down. That would protect security researchers, it would protect people analyzing video to add subtitles and other assistive features, it would protect archivists who had the legal right to make copies, and it would protect people making new browsers.&lt;/p&gt;
&lt;p&gt;If all you care about is making an effective technology that prevents lawbreaking, this agreement should be a no-brainer. For starters, if you think DRM &lt;em&gt;is&lt;/em&gt; an effective technology, it shouldn't matter if it's illegal to criticize it.&lt;/p&gt;
&lt;p&gt;And since the nonaggression pact kept all other legal rights intact, there was no risk that agreeing to it would allow someone to break the law with impunity. Anyone who violated copyrights (or any other rights) would be square in the DMCA's crosshairs, and companies would have their finger on the trigger.&lt;/p&gt;
&lt;h2&gt;NOT SURPRISED BUT STILL DISAPPOINTED&lt;/h2&gt;
&lt;p&gt;Of course, they &lt;em&gt;hated&lt;/em&gt; this idea.&lt;/p&gt;
&lt;p&gt;The studios, the DRM vendors and the large corporate members of the W3C participated in a desultory, brief &quot;negotiation&quot; before voting to terminate further discussion and press on. The W3C executive helped them dodge discussions, chartering further work on EME without any parallel work on protecting the open web, even as opposition within the W3C mounted.&lt;/p&gt;
&lt;p&gt;By the time the dust settled, EME was published after the most divided votes the W3C had ever seen, with the W3C executive unilaterally &lt;a href=&quot;https://lists.w3.org/Archives/Public/public-html-media/2017Jul/0000.html&quot;&gt;declaring&lt;/a&gt; that issues for security research, accessibility, archiving and innovation had been dealt with as much as they could be (despite the fact that literally nothing binding was done about any of these things). The &quot;consensus&quot; process of the W3C has so thoroughly hijacked that EME's publication was only supported &lt;a href=&quot;https://arstechnica.com/gadgets/2017/09/drm-for-html5-published-as-a-w3c-recommendation-after-58-4-approval/&quot;&gt;by 58% of the members&lt;/a&gt; who voted in the final poll, and many of those members expressed regret that they were cornered into voting for something they objected to.&lt;/p&gt;
&lt;p&gt;When the W3C executive declared that any protections for the open web were incompatible with the desires of the DRM-boosters, it was a kind of ironic vindication. After all, this is where we'd started, with EFF insisting that DRM wasn't compatible with security disclosures, with accessibility, with archiving or innovation. Now, it seemed, everyone agreed.&lt;/p&gt;
&lt;p&gt;What's more, they all implicitly agreed that DRM wasn't about protecting copyright. It was about using copyright to seize other rights, like the right to decide who could criticize your product -- or compete with it.&lt;/p&gt;
&lt;p&gt;DRM's sham cryptography means that it only works if you're not allowed to know about its defects. This proposition was conclusively proved when &lt;a href=&quot;https://lists.w3.org/Archives/Public/public-html-media/2017Jun/0015.html&quot;&gt;a W3C member proposed&lt;/a&gt; that the Consortium should protect disclosures that affected EME's &quot;privacy sandbox&quot; and opened users to invasive spying, and within minutes, &lt;a href=&quot;https://lists.w3.org/Archives/Public/public-html-media/2017Jun/0017.html&quot;&gt;Netflix's representative said that even this was not worth considering.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In a twisted way, Netflix was right. DRM is so fragile, so incoherent, that it is simply incompatible with the norms of the marketplace and science, in which anyone is free to describe their truthful discoveries, even if they frustrate a giant company's commercial aspirations.&lt;/p&gt;
&lt;p&gt;The W3C tacitly admitted this when they tried to convene &lt;a href=&quot;https://www.w3.org/2016/02/proposed-techpolig.htm&quot;&gt;a discussion group&lt;/a&gt; to come up with some nonbinding guidelines for when EME-using companies should use the power of DRM law to punish their critics and when they should permit the criticism.&lt;/p&gt;
&lt;h2&gt;&quot;RESPONSIBLE DISCLOSURE&quot; ON OUR TERMS, OR JAIL&lt;/h2&gt;
&lt;p&gt;They called this &quot;responsible disclosure,&quot; but it was far from the kinds of &quot;responsible disclosure&quot; we see today. In current practice, companies offer security researchers enticements to disclose their discoveries to vendors before going public. These enticements range from bug-bounty programs that pay out cash, to leaderboards that provide glory to the best researchers, to binding promises to act on disclosures in a timely way, rather than crossing their fingers, sitting on the newly discovered defects, and hoping no one else re-discovers them and exploits them.&lt;/p&gt;
&lt;p&gt;The tension between independent security researchers and corporations is as old as computing itself. Computers are hard to secure, thanks to their complexity. Perfection is elusive. Keeping the users of networked computers safe requires constant evaluation and disclosure, so that vendors can fix their bugs and users can make informed decisions about which systems are safe enough to use.&lt;/p&gt;
&lt;p&gt;But companies aren't always the best stewards of bad news about their own products. As researchers have discovered -- the hard way -- telling a company about its mistakes may be the polite thing to do, but it's very risky behavior, apt to get you threatened with legal reprisals if you go public. Many's the researcher who told a company about a bug, only to have the company sit on that news for an intolerably long time, putting its users at risk. Often, these bugs only come to light when they are independently discovered by bad actors, who figure out how to exploit them, turning them into attacks that compromise millions of users, so many that the bug's existence can no longer be swept under the rug.&lt;/p&gt;
&lt;p&gt;As the research world grew more gunshy about talking to companies, companies were forced to make real, binding assurances that they would honor the researchers' discoveries by taking swift action in a defined period, by promising not to threaten researchers over presenting their findings, and even by bidding for researchers' trust with cash bounties. Over the years, the situation has improved, with most big companies offering some kind of disclosure program.&lt;/p&gt;
&lt;p&gt;But the reason companies offer those bounties and assurances is that &lt;em&gt;they have no choice&lt;/em&gt;. Telling the truth about defective products is not illegal, so researchers who discover those truths are under no obligation to play by companies' rules. That forces companies to demonstrate their goodwill with good conduct, binding promises and pot-sweeteners.&lt;/p&gt;
&lt;p&gt;Companies definitely want to be able to decide who can tell the truth about their products and when. We know that because when they get the chance to flex that muscle, they flex it. We know it because they said so at the W3C. We know it because they demanded that they get that right as part of the DRM package in EME.&lt;/p&gt;
&lt;p&gt;Of all the lows in the W3C DRM process, the most shocking was when the historic defenders of the open web tried to turn an effort to protect the rights of researchers to warn billions of people about harmful defects in their browsers into an effort to advise companies on when they should hold off on exercising that right -- a right they wouldn’t have without the W3C making DRM for the web.&lt;/p&gt;
&lt;h2&gt;DRM IS THE OPPOSITE OF SECURITY&lt;/h2&gt;
&lt;p&gt;From the first days of the DRM fight at the W3C, we understood that the DRM vendors and the media companies they supplied weren't there to protect copyright, they were there to grab legally enforceable non-copyright privileges. We also knew that DRM was incompatible with security research: because DRM relies on obfuscation, anyone who documents how DRM works also makes it stop working.&lt;/p&gt;
&lt;p&gt;This is especially clear in terms of what &lt;em&gt;wasn't&lt;/em&gt; said at the W3C: when we proposed that people should be able to break DRM to generate subtitles or conduct security audits, the arguments were always about whether that was acceptable, but it was never about whether it was possible.&lt;/p&gt;
&lt;p&gt;Recall that EME is supposed to be a system that helps companies ensure that their movies aren't saved to their users' hard-drives and shared around the internet. For this to work, it should be, you know, &lt;em&gt;hard&lt;/em&gt; to do that.&lt;/p&gt;
&lt;p&gt;But in every discussion of when people should be allowed to break EME, it was always a given that anyone who wanted to could do so. After all, when you hide secrets in software you give to people who you want to keep them secret from, you are probably going to be disappointed.&lt;/p&gt;
&lt;p&gt;From day one, we understood that we would arrive at a point in which the DRM advocates at the W3C would be obliged to admit that the survival of their plan relied on being able to silence people who examined their products.&lt;/p&gt;
&lt;p&gt;However, we did hold out hope that when this became clear to everyone, that they would understand that DRM couldn't peacefully co-exist with the open web.&lt;/p&gt;
&lt;p&gt;We were wrong.&lt;/p&gt;
&lt;h2&gt;THE W3C IS THE CANARY IN THE COALMINE&lt;/h2&gt;
&lt;p&gt;The success of DRM at the W3C is a parable about market concentration and the precarity of the open web. Hundreds of security researchers lobbied the W3C to protect their work, UNESCO publicly condemned the extension of DRM to the web, and the many crypto-currency members of the W3C warned that using browsers for secure, high-stakes applications like moving around peoples' life-savings could only happen if browsers were subjected to the same security investigations as every other technology in our life (except DRM technologies).&lt;/p&gt;
&lt;p&gt;There is no shortage of businesses that want to be able to control what their customers and competitors do with their products. When the US Copyright Office &lt;a href=&quot;http://copyright.gov/1201/2015/comments-020615/&quot;&gt;held hearings on DRM in 2015&lt;/a&gt;, they heard about DRM in medical implants and cars, farm equipment and voting machines. Companies have discovered that adding DRM to their products is the most robust way to control the marketplace, a cheap and reliable way to convert commercial preferences about who can repair, improve, and supply their products into legally enforceable rights.&lt;/p&gt;
&lt;p&gt;The marketplace harms from this anti-competitive behavior are easy to see. For example, the &lt;a href=&quot;https://ifixit.org/revolution&quot;&gt;aggressive use of DRM to prevent independent repair shops&lt;/a&gt; ends up diverting tons of e-waste to landfill or recycling, at the cost of local economies and the ability of people to get full use out of your property. A phone that you recycle instead of repairing is a phone you have to pay to replace -- and repair creates many more jobs than recycling (recycling a ton of e-waste creates &lt;a href=&quot;https://ifixit.org/revolution&quot;&gt;15 jobs&lt;/a&gt;; repairing it creates &lt;a href=&quot;https://ifixit.org/revolution&quot;&gt;150 jobs&lt;/a&gt;). Repair jobs are local, entrepreneurial jobs, because you don't need a lot of capital to start a repair shop, and your customers want to bring their gadgets to someone local for service (no one wants to send a phone to China for repairs -- let alone a car!).&lt;/p&gt;
&lt;p&gt;But those economic harms are only the tip of the iceberg. Laws like DMCA 1201 incentivize DRM by promising the power to control competition, but DRM's worst harms are in the realm of security. When the W3C published EME, it bequeathed to the web an unauditable attack-surface in browsers used by billions of people for their most sensitive and risky applications. These browsers are also the control panels for the Internet of Things: the sensor-studded, actuating gadgets that can see us, hear us, and act on the physical world, with the power to boil, freeze, shock, concuss, or betray us in a thousand ways.&lt;/p&gt;
&lt;p&gt;The gadgets themselves have DRM, intended to lock our repairs and third-party consumables, meaning that everything from your toaster to your car is becoming off-limits to scrutiny by independent researchers who can give you unvarnished, unbiased assessments of the security and reliability of these devices.&lt;/p&gt;
&lt;p&gt;In a competitive market, you'd expect non-DRM options to proliferate in answer to this bad behavior. After all, no customer &lt;em&gt;wants&lt;/em&gt; DRM: no car-dealer ever sold a new GM by boasting that it was a felony for your favorite mechanic to fix it.&lt;/p&gt;
&lt;p&gt;But we don't live in an a competitive market. Laws like DMCA 1201 undermine the competition that might counter their worst effects.&lt;/p&gt;
&lt;p&gt;The companies that fought DRM at the W3C -- browser vendors, Netflix, tech giants, the cable industry -- all trace their success to business strategies that shocked and outraged established industry when they first emerged. Cable started as &lt;a href=&quot;https://www.eff.org/deeplinks/2016/04/save-comcast&quot;&gt;unlicensed businesses that retransmitted broadcasts and charged for it&lt;/a&gt;. Apple's dominance started with &lt;a href=&quot;https://www.eff.org/deeplinks/2016/04/save-itunes&quot;&gt;ripping CDs and ignoring the howls of the music industry&lt;/a&gt; (just as Firefox got where it is by &lt;a href=&quot;https://www.eff.org/deeplinks/2016/04/save-firefox&quot;&gt;blocking obnoxious ads&lt;/a&gt; and ignoring the web-publishers who lost millions as a result). Of course, Netflix's revolutionary red envelopes were &lt;a href=&quot;https://www.eff.org/deeplinks/2016/04/save-netflix&quot;&gt;treated as a form of theft&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These businesses started as pirates and became admirals, and treat their origin stories as legends of plucky, disruptive entrepreneurs taking on a dinosauric and ossified establishment. But they treat any disruption aimed at &lt;em&gt;them&lt;/em&gt; as an affront to the natural order of things. To &lt;a href=&quot;https://whitmansyawp.wordpress.com/2016/04/13/douglas-adams-quote-technology-rules/&quot;&gt;paraphrase Douglas Adams&lt;/a&gt;, any technology invented in your adolescence is amazing and world-changing; anything invented after you turn 30 is immoral and needs to be destroyed.&lt;/p&gt;
&lt;h2&gt;LESSONS FROM THE W3C&lt;/h2&gt;
&lt;p&gt;Most people don't understand the risks of DRM. The topic is weird, technical, esoteric and take too long to explain. The pro-DRM side wants to make the debate about piracy and counterfeiting, and those are easy stories to tell.&lt;/p&gt;
&lt;p&gt;But people who want DRM don't really care about that stuff, and we can prove it: just ask them if they'd be willing to promise not to use the DMCA unless someone is violating copyright, and watch them squirm and weasel about why policing copyright involves shutting down competitive activities that don't violate copyright. Point out that they didn't even question &lt;em&gt;whether&lt;/em&gt; someone could break their DRM, because, of course, DRM is so technologically incoherent that it only works if it's against the law to understand how it works, and it can be defeated just by looking closely at it.&lt;/p&gt;
&lt;p&gt;Ask them to promise not to invoke the DMCA against people who have discovered defects in their products and listen to them defend the idea that companies should get a veto over publication of true facts about their mistakes and demerits.&lt;/p&gt;
&lt;p&gt;These inconvenient framings at least establish what we're fighting about, dispensing with the disingenuous arguments about copyright and moving on to the real issues: competition, accessibility, security.&lt;/p&gt;
&lt;p&gt;This won't win the fight on its own. These are still wonky and nuanced ideas.&lt;/p&gt;
&lt;p&gt;One thing we've learned from 15-plus years fighting DRM: it's easier to get people to take notice of &lt;em&gt;procedural&lt;/em&gt; issues than &lt;em&gt;substantive&lt;/em&gt; ones. We labored in vain to get people to take notice of the Broadcasting Treaty, a bafflingly complex and horribly overreaching treaty from WIPO, a UN specialized agency. No one cared until someone started stealing piles of our handouts and &lt;a href=&quot;https://boingboing.net/2011/07/07/wipos-broadcast-trea.html&quot;&gt;hiding them in the toilets so no one could read them&lt;/a&gt;. &lt;em&gt;That&lt;/em&gt; was global news: it's hard to figure out what something like the Broadcast Treaty is about, but it's easy to call shenanigans when someone tries to hide your literature in the toilet so delegates don’t see the opposing view.&lt;/p&gt;
&lt;p&gt;So it was that four years of beating the drum about DRM at the W3C barely broke the surface, but when we resigned from the W3C over the final vote, everyone sat up and took notice, asking how they could help fix things. The short answer is, &quot;It's too late: we resigned because we had run out of options.&lt;/p&gt;
&lt;p&gt;But the long answer is a little more hopeful. EFF is &lt;a href=&quot;https://www.eff.org/press/releases/eff-lawsuit-takes-dmca-section-1201-research-and-technology-restrictions-violate&quot;&gt;suing the US government&lt;/a&gt; to overturn Section 1201 of the DMCA. As we proved at the W3C, there is no appetite for making DRM unless there's a law like DMCA 1201 in the mix. DRM on its own does nothing except provide an opportunity for competitors to kick butt with innovative offerings that cost less and do more.&lt;/p&gt;
&lt;p&gt;The Copyright Office is about to hold &lt;a href=&quot;https://www.eff.org/deeplinks/2017/09/once-again-were-asking-copyright-office-protect-your-right-fix-study-secure-remix&quot;&gt;fresh hearings&lt;/a&gt; about DMCA 1201.&lt;/p&gt;
&lt;p&gt;The W3C fight proved that we could shift the debate to the real issues. The incentives that led to the W3C being colonized by DRM are still in play and other organizations will face this threat in the years to come. We'll continue to refine this tactic there and keep fighting, and we'll keep reporting on how it goes so that you can help us fight. All we ask is that you keep paying attention. As we learned at the W3C, we can't do it without you.&lt;/p&gt;
</description>
<pubDate>Tue, 28 Nov 2017 09:55:04 +0000</pubDate>
<dc:creator>mimi89999</dc:creator>
<og:type>article</og:type>
<og:title>DRM's Dead Canary: How We Just Lost the Web, What We Learned from It, and What We Need to Do Next</og:title>
<og:url>https://www.eff.org/deeplinks/2017/10/drms-dead-canary-how-we-just-lost-web-what-we-learned-it-and-what-we-need-do-next</og:url>
<og:description>EFF has been fighting against DRM and the laws behind it for a decade and a half, intervening in the US Broadcast Flag, the UN Broadcasting Treaty, the European DVB CPCM standard, the W3C EME standard and many other skirmishes, battles and even wars over the years. With that long history behind us...</og:description>
<og:image>https://www.eff.org/files/issues/og-drm-ugly.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.eff.org/deeplinks/2017/10/drms-dead-canary-how-we-just-lost-web-what-we-learned-it-and-what-we-need-do-next</dc:identifier>
</item>
<item>
<title>Firefox Debugger</title>
<link>https://mozilladevelopers.github.io/playground/debugger</link>
<guid isPermaLink="true" >https://mozilladevelopers.github.io/playground/debugger</guid>
<description>&lt;div data-reactid=&quot;74&quot; readability=&quot;32.603936629861&quot;&gt;
&lt;h2 data-reactid=&quot;75&quot;&gt;Introduction to Firefox Debugger&lt;/h2&gt;
&lt;p data-reactid=&quot;76&quot;&gt;Are you only using &lt;code data-reactid=&quot;78&quot;&gt;console.log&lt;/code&gt; to debug your JavaScript code? It is OK to admit. Using&lt;code data-reactid=&quot;80&quot;&gt;console.log&lt;/code&gt; is easy and convenient, but it has limitations. It isn’t great for catching things as they happen, or diving deep into code to see exactly where it is broken. To do that, you’ll need a full-featured debugger. The Firefox Debugger has comprehensive tools to evaluate and repair broken code. Once you learn the basics, you’ll find that using a debugger is not only fast and easy, but it can save you from hours of frustration, and potential ‘bang-head-on-desk’ sessions.&lt;/p&gt;
&lt;p data-reactid=&quot;82&quot;&gt;We’ll learn the basics of Firefox Debugger by debugging a simple to-do app. You will need Firefox to follow along. Don’t have Firefox? Check out &lt;a href=&quot;https://www.mozilla.org/firefox/developer/?utm_source=moz-playground&amp;amp;utm_medium=referral&amp;amp;utm_content=debugger-part1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; data-reactid=&quot;85&quot;&gt;Firefox Developer Edition&lt;/a&gt;.&lt;/p&gt;
&lt;p data-reactid=&quot;87&quot;&gt;Before diving in, let’s take a look at the Debugger interface. Hit &lt;span class=&quot;shortcut&quot; data-reactid=&quot;90&quot;&gt;option&lt;/span&gt; + &lt;span class=&quot;shortcut&quot; data-reactid=&quot;92&quot;&gt;command&lt;/span&gt; + &lt;span class=&quot;shortcut&quot; data-reactid=&quot;95&quot;&gt;S&lt;/span&gt; on Mac or &lt;span class=&quot;shortcut&quot; data-reactid=&quot;97&quot;&gt;shift&lt;/span&gt; + &lt;span class=&quot;shortcut&quot; data-reactid=&quot;100&quot;&gt;ctrl&lt;/span&gt; + &lt;span class=&quot;shortcut&quot; data-reactid=&quot;102&quot;&gt;S&lt;/span&gt; on Windows to open the Debugger. &lt;/p&gt;
&lt;p data-reactid=&quot;105&quot;&gt;The Debugger is divided into three panes:&lt;/p&gt;
&lt;div class=&quot;img-caption&quot; data-reactid=&quot;106&quot;&gt;&lt;img class=&quot;img-caption__img&quot; src=&quot;https://mozilladevelopers.github.io/playground/static/overview.aefc26f7.png&quot; alt=&quot;overview&quot; data-reactid=&quot;107&quot;/&gt;&lt;span class=&quot;img-caption__text&quot; data-reactid=&quot;108&quot;&gt;An overview of the Firefox Debugger Panel&lt;/span&gt;&lt;/div&gt;

&lt;ul class=&quot;list&quot; data-reactid=&quot;110&quot;&gt;&lt;li data-reactid=&quot;111&quot;&gt;The &lt;strong data-reactid=&quot;113&quot;&gt;source list pane&lt;/strong&gt; shows all the JavaScript files related to the current page or project.&lt;/li&gt;
&lt;li data-reactid=&quot;115&quot;&gt;The &lt;strong data-reactid=&quot;117&quot;&gt;source pane&lt;/strong&gt; shows the content of those files.&lt;/li&gt;
&lt;li data-reactid=&quot;119&quot;&gt;The &lt;strong data-reactid=&quot;121&quot;&gt;tool pane&lt;/strong&gt; contains info and tools.&lt;/li&gt;
&lt;/ul&gt;&lt;p data-reactid=&quot;123&quot;&gt;The tool pane can be broken down into five sections:&lt;/p&gt;
&lt;div class=&quot;img-caption&quot; data-reactid=&quot;124&quot;&gt;&lt;img class=&quot;img-caption__img&quot; src=&quot;https://mozilladevelopers.github.io/playground/static/tools.6d537673.png&quot; alt=&quot;tools&quot; data-reactid=&quot;125&quot;/&gt;&lt;span class=&quot;img-caption__text&quot; data-reactid=&quot;126&quot;&gt;All of the tools available in the tools pane&lt;/span&gt;&lt;/div&gt;

&lt;ul class=&quot;list&quot; data-reactid=&quot;128&quot;&gt;&lt;li data-reactid=&quot;129&quot;&gt;The &lt;strong data-reactid=&quot;131&quot;&gt;toolbar&lt;/strong&gt; has buttons that control the debugger’s movement through the script.&lt;/li&gt;
&lt;li data-reactid=&quot;133&quot;&gt;The &lt;strong data-reactid=&quot;135&quot;&gt;watch expressions&lt;/strong&gt; section allows us to watch expressions as executions are paused.&lt;/li&gt;
&lt;li data-reactid=&quot;137&quot;&gt;The &lt;strong data-reactid=&quot;139&quot;&gt;breakpoints&lt;/strong&gt; section displays all of the breakpoints that have been set. Next to each breakpoint is a checkbox to enable or disable that breakpoint.&lt;/li&gt;
&lt;li data-reactid=&quot;141&quot;&gt;The &lt;strong data-reactid=&quot;143&quot;&gt;call stack&lt;/strong&gt; section displays each level of the call stack, as well as the function name, filename, and line number.&lt;/li&gt;
&lt;li data-reactid=&quot;145&quot;&gt;The &lt;strong data-reactid=&quot;147&quot;&gt;scopes&lt;/strong&gt; section displays all objects that are in scope.&lt;/li&gt;
&lt;/ul&gt;&lt;p data-reactid=&quot;149&quot;&gt;Don’t worry if you don’t understand what all of these terms and symbols mean. We’ll cover them in the following sections. Just take note of where things are so that you can follow along.&lt;/p&gt;
&lt;p data-reactid=&quot;150&quot;&gt;Now that we’ve reviewed the Debugger interface, let’s use it to fix a broken to-do app.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 28 Nov 2017 09:37:38 +0000</pubDate>
<dc:creator>Vinnl</dc:creator>
<og:url>https://mozilladevelopers.github.io/playground/debugger</og:url>
<og:title>Go beyond console.log!</og:title>
<og:description>Still using console.log for debugging JavaScript? There is a better way! Learn how to use Firefox Debugger to debug and fix your code.</og:description>
<og:image>/playground/static/fb.b7e08052.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://mozilladevelopers.github.io/playground/debugger/</dc:identifier>
</item>
</channel>
</rss>