<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>An Interesting Pattern in the Prime Numbers: Parallax Compression</title>
<link>http://www.novaspivack.com/science/we-have-discovered-a-new-pattern-in-the-prime-numbers-parallax-compression</link>
<guid isPermaLink="true" >http://www.novaspivack.com/science/we-have-discovered-a-new-pattern-in-the-prime-numbers-parallax-compression</guid>
<description>&lt;p&gt;(UPDATE: Thanks to comments from readers we have found that the pattern does not exactly match the GCD triangle for some values of the number of cells and rows:  this possibly makes it a more interesting finding.  Join the discussion in the Telegram group as well – details below) .&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Early this year a software engineer,&lt;/span&gt; &lt;a href=&quot;mailto:shaunxcode@gmail.com&quot;&gt;&lt;span&gt;Shaun Gilchrist&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, reached out to me after reading a&lt;/span&gt; &lt;a href=&quot;http://www.novaspivack.com/science/a-new-way-to-find-patterns-in-distributions-of-numbers&quot;&gt;&lt;span&gt;blog post of mine from many years ago&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, about my informal search for hidden patterns in the prime numbers.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The Ulam Spiral revealed non-random patterns, but they didn’t quite match up. Both Shaun and I had long felt there was a better way to wrap the primes that would reveal a deeper structure.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Shaun explained that he had developed&lt;/span&gt; &lt;a href=&quot;https://beta.observablehq.com/@montyxcantsin/unwinding-the-ulam-spiral&quot;&gt;&lt;span&gt;a new algorithm&lt;/span&gt;&lt;/a&gt; &lt;span&gt;(he calls it “Parallax Compression”) for wrapping the primes on a plane, and visualizing their distribution, inspired by the Ulam Spiral. Here is a more robust Github version of the code in a &lt;a href=&quot;https://www.dropbox.com/s/d2dfwhxdmzkp4y4/a-pattern-in-the-primes.nb?dl=0&quot;&gt;Mathematica notebook&lt;/a&gt;  if you want to explore it yourself (note: Thanks to Stephen Wolfram for taking a look at the Mathematica code and advising us in January, when we were wondering whether this might break crypto and needed advice; the answer is no, it doesn’t break crypto, but Mathematica is pretty great!).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;After his initial discovery, Shaun searched the Web for anyone else who was thinking this way and that led him to my blog post, and to me.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Shaun’s algorithm reveals an interesting non-random, fractal-like pattern in the distribution of primes, that to our knowledge, has never been seen before.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It makes it possible to easily see where there are regions of prime and non-prime numbers, anywhere on the number line, at any level of scale.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;When one looks at a visualization of this pattern, it appears reminiscent of runes, Mayan glyphs, tapestries, and hieroglyphics. If you look at it for a moment or two you will see there are several levels of nested geometric shapes within it that appear to have a kind of fractal symmetry:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.novaspivack.com/wp-content/uploads/2018/05/Screenshot-2018-05-18-19.06.04-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-3184&quot; src=&quot;http://www.novaspivack.com/wp-content/uploads/2018/05/Screenshot-2018-05-18-19.06.04-1.png&quot; alt=&quot;&quot; width=&quot;714&quot; height=&quot;603&quot; srcset=&quot;http://www.novaspivack.com/wp-content/uploads/2018/05/Screenshot-2018-05-18-19.06.04-1.png 714w, http://www.novaspivack.com/wp-content/uploads/2018/05/Screenshot-2018-05-18-19.06.04-1-300x253.png 300w&quot; sizes=&quot;(max-width: 714px) 100vw, 714px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;A cell is colored black if there is at least 1 prime number within it, and red if there are no primes within it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Here, the width of a cell, n, is 100, so each cell represents 100 integers in the sequence, and the pattern holds for 100 rows.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Initially we found that this pattern matches a known numerical sequence,&lt;a href=&quot;http://oeis.org/A054521&quot;&gt;OEIS A054521&lt;/a&gt; — and it recurs for other even values of n, so it is self-similar at various levels of scale.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;For example, If n = 50, then each cell represents 50 integers, and the pattern holds for 50 rows. If n = 200 then each cell represents 200 integers, and pattern holds for 200 rows.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://streamable.com/l7r96&quot;&gt;Here is an animation&lt;/a&gt; (Thanks to Ian Rust) that shows the pattern approaching the GCD sequence pattern, as the values of n increase.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;However, some readers noted today in the thread on Hacker News that GCD doesn’t hold for all values of n.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;For example, for odd values of n we see a different pattern that is also rather interesting. Here is n = 99:&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.novaspivack.com/wp-content/uploads/2018/05/Screenshot-2018-05-18-19.05.47-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-3185&quot; src=&quot;http://www.novaspivack.com/wp-content/uploads/2018/05/Screenshot-2018-05-18-19.05.47-1.png&quot; alt=&quot;&quot; width=&quot;648&quot; height=&quot;552&quot; srcset=&quot;http://www.novaspivack.com/wp-content/uploads/2018/05/Screenshot-2018-05-18-19.05.47-1.png 648w, http://www.novaspivack.com/wp-content/uploads/2018/05/Screenshot-2018-05-18-19.05.47-1-300x256.png 300w&quot; sizes=&quot;(max-width: 648px) 100vw, 648px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Like the GCD pattern we see for even values of n, the odd valued n pattern also recurs for different sized odd values of n. This means that this pattern is not simply the GCD sequence — there are variances that we don’t understand yet.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;This algorithm also reveals sequences (that we call “runs”) of primes and non-primes along various axes that might be useful for predicting prime and non-prime regions.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;After Shaun reached out to me with his discovery, we spent many sleepless days and nights collaborating to see if there were even deeper patterns behind this new visualization and eventually we made a little progress finding at least one known sequence that generated the pattern for even values of n, without needing any primality testing. But as noted above, it doesn’t hold for all values of n, and we have not done a formal proof nor have we tested a large set of values of n and compared results.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;We’re not exactly sure what this all means yet — it might not mean much — it might just be a pretty visualization — but it’s interesting enough (to us at least) that we decided eventually to make this public so that others could help us explore it further, in case there is something more to this.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Perhaps this is a topographical map of the distribution of the prime numbers? Perhaps this might be useful in number theory, or in some area of science? The self-similarity at various levels of scale, and the fact that it isn’t fully described for all values of n by a known sequence means there may still be more to understand about this. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;In general, finding any kind of non-random pattern in the distribution of primes is potentially interesting. Are there connections between this and other research findings, such as this recent article we found on&lt;/span&gt; &lt;a href=&quot;https://www.quantamagazine.org/a-chemist-shines-light-on-a-surprising-prime-number-pattern-20180514/&quot;&gt;&lt;span&gt;aperiodic order in the primes&lt;/span&gt;&lt;/a&gt;&lt;span&gt;?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;We don’t know yet, but we are curious to find out. We are not mathematicians, but hopefully some mathematicians reading this will take it further than we can.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;We hope you enjoy this, and if you make further progress on this, or find anything that may be connected, please let us know. (You can discuss it with us, and others who are interested, on&lt;/span&gt; &lt;a href=&quot;https://t.me/joinchat/G8AnchIna2q8yn1lGHirkA&quot;&gt;&lt;span&gt;this Telegram group&lt;/span&gt;&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 18 May 2018 17:17:02 +0000</pubDate>
<dc:creator>airesearcher</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.novaspivack.com/science/we-have-discovered-a-new-pattern-in-the-prime-numbers-parallax-compression</dc:identifier>
</item>
<item>
<title>Chinese Government Fabricates Social Media Posts for Strategic Distraction</title>
<link>https://gking.harvard.edu/50c</link>
<guid isPermaLink="true" >https://gking.harvard.edu/50c</guid>
<description>&lt;h3&gt;Abstract:&lt;/h3&gt;
&lt;p&gt;The Chinese government has long been suspected of hiring as many as 2,000,000 people to surreptitiously insert huge numbers of pseudonymous and other deceptive writings into the stream of real social media posts, as if they were the genuine opinions of ordinary people. Many academics, and most journalists and activists, claim that these so-called ``50c party'' posts vociferously argue for the government's side in political and policy debates. As we show, this is also true of the vast majority of posts openly accused on social media of being 50c. Yet, almost no systematic empirical evidence exists for this claim, or, more importantly, for the Chinese regime's strategic objective in pursuing this activity. In the first large scale empirical analysis of this operation, we show how to identify the secretive authors of these posts, the posts written by them, and their content. We estimate that the government fabricates and posts about 448 million social media comments a year. In contrast to prior claims, we show that the Chinese regime's strategy is to avoid arguing with skeptics of the party and the government, and to not even discuss controversial issues. We show that the goal of this massive secretive operation is instead to distract the public and change the subject, as most of the these posts involve cheerleading for China, the revolutionary history of the Communist Party, or other symbols of the regime. We discuss how these results fit with what is known about the Chinese censorship program, and suggest how they may change our broader theoretical understanding of ``common knowledge'' and information control in authoritarian regimes.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;This paper is related to our articles in &lt;em&gt;Science,&lt;/em&gt;&lt;span&gt; “&lt;/span&gt;&lt;a href=&quot;http://gking.harvard.edu/publications/randomized-experimental-study-censorship-china&quot;&gt;Reverse-Engineering Censorship In China: Randomized Experimentation And Participant Observation&lt;/a&gt;&lt;span&gt;”, and &lt;/span&gt;the &lt;/span&gt;&lt;em&gt;American Political Science Review,&lt;/em&gt;&lt;span&gt; “&lt;/span&gt;&lt;a href=&quot;http://gking.harvard.edu/publications/how-Censorship-China-Allows-Government-Criticism-Silences-Collective-Expression&quot;&gt;How Censorship In China Allows Government Criticism But Silences Collective Expression&lt;/a&gt;&lt;span&gt;”.&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 18 May 2018 17:14:34 +0000</pubDate>
<dc:creator>Lionsion</dc:creator>
<og:type>article</og:type>
<og:title>How the Chinese Government Fabricates Social Media Posts for Strategic Distraction, not Engaged Argument</og:title>
<og:description>Gary King, Jennifer Pan, and Margaret E. Roberts. 2017. “How the Chinese Government Fabricates Social Media Posts for Strategic Distraction, not Engaged Argument.” American Political Science Review, 111, 3, Pp. 484-501.</og:description>
<og:image>https://gking.harvard.edu/files/gking/files/screen_shot_2016-05-18_at_12.11.46_pm.png?m=1463587964</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://gking.harvard.edu/50c</dc:identifier>
</item>
<item>
<title>Introducing Git protocol version 2</title>
<link>https://opensource.googleblog.com/2018/05/introducing-git-protocol-version-2.html</link>
<guid isPermaLink="true" >https://opensource.googleblog.com/2018/05/introducing-git-protocol-version-2.html</guid>
<description>&lt;div dir=&quot;ltr&quot;&gt;&lt;br/&gt;&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Today we announce Git protocol version 2, a major update of Git's &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/technical/pack-protocol.html&quot;&gt;&lt;span class=&quot;s2&quot;&gt;wire protocol&lt;/span&gt;&lt;/a&gt; (how clones, fetches and pushes are communicated between clients and servers). This update removes one of the most inefficient parts of the Git protocol and fixes an extensibility bottleneck, unblocking the path to more wire protocol improvements in the future.&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;The protocol version 2 spec can be found &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/technical/protocol-v2.html&quot;&gt;&lt;span class=&quot;s2&quot;&gt;here&lt;/span&gt;&lt;/a&gt;. The main improvements are:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;The main motivation for the new protocol was to enable server side filtering of references (branches and tags). Prior to protocol v2, servers responded to all fetch commands with an initial reference advertisement, listing all references in the repository. This complete listing is sent even when a client only cares about updating a single branch, e.g.: `git fetch origin master`. For repositories that contain 100s of thousands of references (the Chromium repository has over 500k branches and tags) the server could end up sending 10s of megabytes of data that get ignored. This typically dominates both time and bandwidth during a fetch, especially when you are updating a branch that's only a few commits behind the remote, or even when you are only checking if you are up-to-date, resulting in a no-op fetch.&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;We recently rolled out support for protocol version 2 at Google and have seen a performance improvement of 3x for no-op fetches of a single branch on repositories containing 500k references. Protocol v2 has also enabled a reduction of 8x of the overhead bytes (non-packfile) sent from googlesource.com servers. A majority of this improvement is due to filtering references advertised by the server to the refs the client has expressed interest in.&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;strong&gt;Getting over the hurdles&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;The Git project has tried on a number of occasions over the years to either limit the initial &lt;a href=&quot;https://public-inbox.org/git/CACBZZX70NTic2WtrXooTg+yBbiFFDAEX_Y-b=W=rAkcYKJ3T2g@mail.gmail.com/&quot;&gt;&lt;span class=&quot;s2&quot;&gt;ref advertisement&lt;/span&gt;&lt;/a&gt; or move to a &lt;a href=&quot;https://public-inbox.org/git/1432677675-5118-1-git-send-email-sbeller@google.com/&quot;&gt;&lt;span class=&quot;s2&quot;&gt;new protocol&lt;/span&gt;&lt;/a&gt; altogether but continued to run into two problems: (1) the initial request is rigid and does not include a field that could be used to request that new servers modify their response without breaking compatibility with existing servers and (2) error handling is not well enough defined to allow safely using a new protocol that existing servers do not understand with a quick fallback to the old protocol. To migrate to a new protocol version, we needed to find a side channel which existing servers would ignore but could be used to safely communicate with newer servers.&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;p1&quot;&gt;&lt;span&gt;&lt;span class=&quot;s1&quot;&gt;There are three main transports that are used to speak Git’s wire-protocol (git://, ssh://, and https://), and the side channel that we use to request v2 needs to communicate in such a way that an older server would ignore any additional data sent and not crash. The http transport was the easiest as we can simply include an additional http header in the request (&lt;/span&gt;&lt;span class=&quot;s4&quot;&gt;“Git-Protocol: version=2”&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;). The ssh transport is a bit more difficult as it requires sending an environment variable (&lt;/span&gt;&lt;span class=&quot;s4&quot;&gt;“GIT_PROTOCOL=version=2”&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;) to be set on the remote end. This is more challenging because it requires server administrators to configure sshd to accept the new environment variable on their server. The most difficult transport is the anonymous Git transport (git://).&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;p1&quot;&gt;&lt;span&gt;&lt;span class=&quot;s1&quot;&gt;Initial requests made to a server using the anonymous Git transport are made in the form of a single packet-line which includes the requested service (git-upload-pack for fetches and git-receive-pack for pushes), and the repository followed by a NUL byte. Later virtualization support was added and a hostname parameter could be tacked on and  terminated by a NUL byte:&lt;/span&gt; &lt;span class=&quot;s4&quot;&gt;`0033git-upload-pack /project.git\0host=myserver.com\0`&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;. Ideally we’d be able to add a new parameter to be used to request v2 by adding it in the same manner as the hostname was added:&lt;/span&gt; &lt;span class=&quot;s4&quot;&gt;`003dgit-upload-pack /project.git\0host=myserver.com\0version=2\0`.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;Unfortunately due to a bug &lt;a href=&quot;https://github.com/git/git/commit/49ba83fb67d9e447b86953965ce5f949c6a93b81#diff-f1c031e638a78dd61428fbec6d53dd09R405&quot;&gt;&lt;span class=&quot;s2&quot;&gt;introduced in 2006&lt;/span&gt;&lt;/a&gt; we aren't able to place any extra arguments (separated by NULs) other than the host because otherwise the parsing of those arguments would enter an infinite loop. When this bug was &lt;a href=&quot;https://github.com/git/git/commit/73bb33a94ec67a53e7d805b12ad9264fa25f4f8d&quot;&gt;&lt;span class=&quot;s2&quot;&gt;fixed in 2009&lt;/span&gt;&lt;/a&gt;, a check was put in place to disallow extra arguments so that new clients wouldn't trigger this bug in older servers.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;p1&quot;&gt;&lt;span&gt;&lt;span class=&quot;s1&quot;&gt;Fortunately, that check doesn't notice if we send additional request arguments hidden behind a second NUL byte, which was pointed out &lt;a href=&quot;https://public-inbox.org/git/20090605171627.d92f6060.vsu@altlinux.ru/&quot;&gt;&lt;span class=&quot;s2&quot;&gt;back in 2009&lt;/span&gt;&lt;/a&gt;.  This allows requests structured like:&lt;/span&gt; &lt;span class=&quot;s4&quot;&gt;`003egit-upload-pack /project.git\0host=myserver.com\0\0version=2\0`.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;By placing version information behind a second NUL byte we can skirt around both the infinite loop bug and the explicit disallowal of extra arguments besides hostname. Only newer servers will know to look for additional information hidden behind two NUL bytes and older servers won’t croak.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Now, in every case, a client can issue a request to use v2, using a transport-specific side channel, and v2 servers can respond using the new protocol while older servers will ignore the side channel and just respond with a ref advertisement.&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;strong&gt;Try it for yourself&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;To try out protocol version 2 for yourself you'll need an up to date version of Git (support for v2 was recently &lt;a href=&quot;https://github.com/git/git/commit/9bfa0f9be3e718f701200a242ea04259a4dc4dfc&quot;&gt;&lt;span class=&quot;s2&quot;&gt;merged&lt;/span&gt;&lt;/a&gt; to Git's master branch and is expected to be part of Git 2.18) and a v2 enabled server (repositories on googlesource.com and Cloud Source Repositories are v2 enabled). If you enable tracing and run the `ls-remote` command querying for a single branch, you can see the server sends a much smaller set of references when using protocol version 2:&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;p1&quot;&gt;

&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;# Using the original wire protocol&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;GIT_TRACE_PACKET=1 git -c protocol.version=0 ls-remote https://chromium.googlesource.com/chromium/src.git master&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;strong id=&quot;docs-internal-guid-8af7ca85-7522-0a31-5efb-10d982a67ce6&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;# Using protocol version 2&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;GIT_TRACE_PACKET=1 git -c protocol.version=2 ls-remote https://chromium.googlesource.com/chromium/src.git master&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;

&lt;/div&gt;

&lt;div class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;em&gt;By Brandon Williams, Git-core Team&lt;/em&gt;&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 18 May 2018 17:13:47 +0000</pubDate>
<dc:creator>robmaceachern</dc:creator>
<og:url>https://opensource.googleblog.com/2018/05/introducing-git-protocol-version-2.html</og:url>
<og:title>Introducing Git protocol version 2</og:title>
<og:description>The latest news from Google on open source releases, major projects, events, and student outreach programs.</og:description>
<og:type>article</og:type>
<og:image>https://opensource.google.com/assets/static/images/home/blog/blog_image_1.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://opensource.googleblog.com/2018/05/introducing-git-protocol-version-2.html</dc:identifier>
</item>
<item>
<title>How to Come Up with Profitable Business Ideas</title>
<link>https://www.indiehackers.com/round-table/how-to-come-up-with-profitable-online-business-ideas</link>
<guid isPermaLink="true" >https://www.indiehackers.com/round-table/how-to-come-up-with-profitable-online-business-ideas</guid>
<description>&lt;p&gt;During college, I took a year off to work on an e-commerce startup with a friend. We made a number of classic first-time entrepreneur mistakes, and after a year we decided to shut down the company. I went back to school, finished my degree, and started interviewing for jobs at different startups.&lt;/p&gt;
&lt;p&gt;The whole experience left me feeling pretty burnt out on tech. While working on the startup, I'd lost touch with the intrinsic joy of building things for their own sake, and I'd been focusing on work to the point where I was neglecting my personal health.&lt;/p&gt;
&lt;p&gt;I felt like getting back into the startup world would just continue that trend, and after spending some time reflecting I realized that what I really wanted to do was travel for an extended period and work on just-for-fun side projects.&lt;/p&gt;
&lt;p&gt;So that's what I did. I picked up some freelance web development work and I emailed a bunch of hotels in Central America to see if they'd give me room and board in exchange for web and marketing help. I heard back from a hotel in Costa Rica, and I started working with them to promote yoga retreats during the country's low season.&lt;/p&gt;
&lt;p&gt;However, right after we started the project, someone stole their yoga instructor's laptop, and she decided to leave Costa Rica for her native England. All of a sudden, there was no more work for me to do, and it looked like I was going to have to cut my stay there short.&lt;/p&gt;
&lt;p&gt;I still wanted to hang out in Costa Rica, so I pitched the hotel owner on bringing a group of developers to his hotel for a &quot;programming retreat.&quot; Occupancy rates are low in hotels during the off-season, and the idea was that we could fill his hotel for a few months when it would otherwise be empty. We threw together a landing page and started taking sign-ups. Around this time, my co-founder Alexey came on board.&lt;/p&gt;
&lt;p&gt;It turned out there was quite a bit of interest in what we were doing — 30 people came on our first trip, and &lt;a href=&quot;https://www.hackerparadise.org/&quot;&gt;Hacker Paradise&lt;/a&gt; was born! People had such a great time that we decided to keep doing it, and to turn it into a sustainable business. We also decided to open up the community to designers, entrepreneurs, and other non-technical creative types.&lt;/p&gt;
</description>
<pubDate>Fri, 18 May 2018 16:55:48 +0000</pubDate>
<dc:creator>ChanningAllen</dc:creator>
<og:description>Interested in building a startup, or starting your own small business to make money on the side? Learn by example from dozens of entrepreneurs who share how they came up with great business ideas.</og:description>
<og:image>https://storage.googleapis.com/indie-hackers.appspot.com/round-table-images/how-did-you-come-up-with-your-business-idea.jpg</og:image>
<og:title>How to Come Up with Profitable Online Business Ideas</og:title>
<og:type>article</og:type>
<og:url>https://www.indiehackers.com/round-table/how-to-come-up-with-profitable-online-business-ideas</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.indiehackers.com/round-table/how-to-come-up-with-profitable-online-business-ideas</dc:identifier>
</item>
<item>
<title>Solving dynamic programming interview problems</title>
<link>http://blog.refdash.com/dynamic-programming-tutorial-example/</link>
<guid isPermaLink="true" >http://blog.refdash.com/dynamic-programming-tutorial-example/</guid>
<description>&lt;p&gt;Despite having significant experience building software products, many engineers feel jittery at the thought of going through a coding interview that focuses on algorithms. I’ve interviewed hundreds of engineers and some of the most common questions that make engineers uneasy are the ones that involve Dynamic Programming (DP).&lt;/p&gt;
&lt;p&gt;Many tech companies like to ask DP questions in their interviews. While we can debate whether they’re effective in evaluating someone’s ability to perform in an engineering role, DP continues to be an area that engineers trip on their way to finding a job that they love.&lt;/p&gt;
&lt;h3&gt;Dynamic Programming – Predictable and Preparable&lt;/h3&gt;
&lt;p&gt;One of the reasons why I personally believe that DP questions might not be the best way to test engineering ability is that they’re predictable and easy to pattern match. They allow us to filter much more for preparedness as opposed to an engineering quality.&lt;/p&gt;
&lt;p&gt;These questions typically seem pretty complex on the outside and might give you an impression that a person who solves them is very good at algorithms. Similarly, people who may not be able to get over some mind-twisting concepts of DP might seem pretty weak in their knowledge of algorithms.&lt;/p&gt;
&lt;p&gt;The reality is different and the biggest factor in the performance is preparedness. So let’s make sure everyone is prepared for it. Once and for all.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The biggest factor in solving dynamic programming problems is preparedness.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;7 Steps to solve a Dynamic Programming problem&lt;/h3&gt;
&lt;p&gt;In the rest of this post, I will go over a recipe that you can follow to figure out if a problem is a “DP problem”, as well as to figure out a solution to such a problem. Specifically, I will go through the following steps:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;How to recognize a DP problem&lt;/li&gt;
&lt;li&gt;Identify problem variables&lt;/li&gt;
&lt;li&gt;Clearly express the recurrence relation&lt;/li&gt;
&lt;li&gt;Identify the base cases&lt;/li&gt;
&lt;li&gt;Decide if you want to implement it iteratively or recursively&lt;/li&gt;
&lt;li&gt;Add memoization&lt;/li&gt;
&lt;li&gt;Determine time complexity&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;Sample DP Problem&lt;/h3&gt;
&lt;div&gt;For the purpose of having an example for abstractions that I am going to make, let me introduce a sample problem. In each of the sections, I will refer to the problem, but you could also read the sections independently of the problem.&lt;/div&gt;
&lt;h3&gt;Problem statement:&lt;/h3&gt;
&lt;div&gt;&lt;img class=&quot;aligncenter size-medium&quot; src=&quot;https://j.gifs.com/BLj1o2.gif&quot; width=&quot;480&quot; height=&quot;360&quot;/&gt;&lt;br/&gt;&lt;em&gt;In this problem, we’re on a crazy jumping ball, trying to stop, while avoiding spikes along the way.&lt;/em&gt;
&lt;h3&gt;Here are the rules:&lt;/h3&gt;
&lt;p&gt;1) You’re given a flat runway with a bunch of spikes in it. The runway is represented by a boolean array which indicates if a particular (discrete) spot is clear of spikes. It is True for clear and False for not clear.&lt;/p&gt;
&lt;p&gt;Example array representation&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-126 size-full aligncenter&quot; src=&quot;http://35.184.221.11/wp-content/uploads/2018/05/post_illustration_1.jpg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;140&quot; srcset=&quot;http://blog.refdash.com/wp-content/uploads/2018/05/post_illustration_1.jpg 600w, http://blog.refdash.com/wp-content/uploads/2018/05/post_illustration_1-300x70.jpg 300w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;br/&gt;2) You’re given a starting speed S. S is a non-negative integer at any given point and it indicates how much you will move forward with the next jump.&lt;/p&gt;
&lt;p&gt;3) Every time you land on a spot, you can adjust your speed by up to 1 unit before the next jump.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-127 size-full aligncenter&quot; src=&quot;http://35.184.221.11/wp-content/uploads/2018/05/post_illustration.jpg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;220&quot; srcset=&quot;http://blog.refdash.com/wp-content/uploads/2018/05/post_illustration.jpg 600w, http://blog.refdash.com/wp-content/uploads/2018/05/post_illustration-300x110.jpg 300w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;br/&gt;4) You want to safely stop anywhere along the runway (does not need to be at the end of the array). You stop when your speed becomes 0. However, if you land on a spike at any point, your crazy bouncing ball bursts and it’s a game over.&lt;/p&gt;
&lt;p&gt;The output of your function should be a boolean indicating whether we can safely stop anywhere along the runway.&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Step 1: How to recognize a Dynamic Programming problem&lt;/h2&gt;
&lt;p&gt;First, let’s make it clear that DP is essentially just an optimization technique. DP is a method for solving problems by breaking it down into a collection of simpler subproblems, solving each of those subproblems just once, and storing their solutions. The next time the same subproblem occurs, instead of recomputing its solution, one simply looks up the previously computed solution. This saves computation time at the expense of a (hopefully) modest expenditure in storage space.&lt;/p&gt;
&lt;p&gt;Recognizing that a problem can be solved using DP is the first and often the most difficult step in solving it. What you want to ask yourself is whether your problem solution can be expressed as a function of solutions to similar smaller problems.&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;In the case of our example problem, given a point on the runway, a speed, and the runway ahead, we could determine the spots where we could potentially jump next. Furthermore, it seems that whether we can stop from the current point with the current speed depends only on whether we could stop from the point we choose to go to next. That is a great thing because by moving forward we shorten the runway ahead and make our problem smaller. We should be able to repeat this process all the way until we get to a point where it is obvious whether we can stop.&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Recognizing a Dynamic Programming problem is often the most difficult step in solving it. Can the problem solution be expressed as a function of solutions to similar smaller problems?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Step 2: Identify problem variables&lt;/h2&gt;
&lt;p&gt;Now we have established that there is some recursive structure between our subproblems. Next, we need to express the problem in terms of the function parameters and see which of those parameters are changing. Typically in interviews, you will have one or two changing parameters, but technically this could be any number. A classic example of a one-changing-parameter problem is “determine an n-th Fibonacci number”. Such example for a two-changing-parameters problem is “Compute edit distance between strings”. If you’re not familiar with these problems, don’t worry about it.&lt;/p&gt;
&lt;p&gt;A way to determine the number of changing parameters is to list examples of several subproblems and compare the parameters. Counting the number of changing parameters is valuable to determine the number of subproblems we have to solve, but it is also important in its own right in helping us strengthen the understanding of the recurrence relation from step 1.&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;In our example, the two parameters that could change for every subproblem are:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Array position (P)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Speed (S)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;One could say that the runway ahead is changing as well, but that would be redundant considering that the entire non-changing runway and the position (P) carry that information already.&lt;/p&gt;
&lt;p&gt;Now, with these 2 changing parameters and other static parameters, we have the complete description of our sub-problems.&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Identify the changing parameters and determine the number of subproblems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Step 3: Clearly express the recurrence relation&lt;/h2&gt;
&lt;p&gt;This is an important step that many rush through in order to get into coding. Expressing the recurrence relation as clearly as possible will strengthen your problem understanding and make everything else significantly easier.&lt;/p&gt;
&lt;p&gt;Once you figure out that the recurrence relation exists and you specify the problems in terms of parameters, this should come as a natural step. How do problems relate to each other? In other words, let’s assume that you have computed the subproblems. How would you compute the main problem?&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;&lt;span&gt;Here is how we think about it in our sample problem:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Because you can adjust your speed by up to 1 before jumping to the next position, there are only 3 possible speeds and therefore 3 spots in which we could be next.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;More formally, if our speed is S, position P, we could go from (S, P) to:&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;(S, P + S)&lt;/strong&gt;;  # if we do not change the speed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(S – 1, P + S – 1)&lt;/strong&gt;;  # if we change the speed by -1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(S + 1, P + S + 1)&lt;/strong&gt;;  # if we change the speed by +1&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;If we can find a way to stop in any of the subproblems above, then we can also stop from (S, P). This is because we can transition from (S, P) to any of the above three options.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;This is typically a fine level of understanding of the problem (plain English explanation), but you sometimes might want to express the relation mathematically as well. Let’s call a function that we’re trying to compute canStop. Then:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;canStop(S, P) = canStop(S, P + S) || canStop(S – 1, P + S – 1) || canStop(S + 1, P + S + 1)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Woohoo, it seems like we have our recurrence relation!&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Recurrence relation: Assuming you have computed the subproblems, how would you compute the main problem?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Step 4: Identify the base cases&lt;/h2&gt;
&lt;p&gt;A base case is a subproblem that doesn’t depend on any other subproblem. In order to find such subproblems, you typically want to try a few examples, see how your problem simplifies into smaller subproblems, and at what point it cannot be simplified further.&lt;/p&gt;
&lt;p&gt;The reason a problem cannot be simplified further is that one of the parameters would become a value that is not possible given &lt;strong&gt;constraints&lt;/strong&gt; of a problem.&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;In our example problem, we have two changing parameters, S and P. Let’s think about what possible values of S and P might not be legal:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;P should be within the bounds of the given runway&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P cannot be such that runway[P] is false because that would mean that we’re standing on a spike&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S cannot be negative and a S==0 indicates that we’re done&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;p&gt;Sometimes it can be a little challenging to convert assertions that we make about parameters into programmable base cases. This is because, in addition to listing the assertions if you want to make your code look concise and not check for unnecessary conditions, you need to also think about which of these conditions are even possible.&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;In our example:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;P &amp;lt; 0 || P &amp;gt;= &lt;em&gt;length of runway&lt;/em&gt;&lt;/strong&gt; seems like the right thing to do. An alternative could be to consider making&lt;/span&gt; &lt;em&gt;&lt;span&gt;P == end of runway&lt;/span&gt;&lt;/em&gt; &lt;span&gt;a base case. However, it is possible that a problem splits into a subproblem which goes beyond the end of the runway, so we really need to check for inequality.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;This seems pretty obvious. We can simply check &lt;em&gt;&lt;strong&gt;if runway[P] is false.&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Similar to #1, we could simply check for S &amp;lt; 0 and S == 0. However, here we can reason that it is impossible for S to be &amp;lt; 0 because S decreases by at most 1, so it would have to go through S == 0 case beforehand. Therefore &lt;em&gt;&lt;strong&gt;S == 0&lt;/strong&gt;&lt;/em&gt; is a sufficient base case for the S parameter.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;h2&gt;Step 5: Decide if you want to implement it iteratively or recursively&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;The way we talked about the steps so far might lead you to think that we should implement the problem recursively. However, everything that we’ve talked about so far is completely agnostic to whether you decide to implement the problem recursively or iteratively. In both approaches, you would have to determine the recurrence relation and the base cases.&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To decide whether to go iteratively or recursively, you want to carefully think about the trade-offs&lt;/strong&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;Recursive&lt;/th&gt;
&lt;th&gt;Iterative&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Asymptotic time complexity&lt;/th&gt;
&lt;td&gt;Same assuming memoization&lt;/td&gt;
&lt;td&gt;Same&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;Memory usage&lt;/th&gt;
&lt;td&gt;Recursive stack, Sparse memoization&lt;/td&gt;
&lt;td&gt;Full memoization&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;Execution speed&lt;/th&gt;
&lt;td&gt;Often faster depending on the input&lt;/td&gt;
&lt;td&gt;Slower, needs to do same work regardless of the input&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;Stack overflow&lt;/th&gt;
&lt;td&gt;Problem&lt;/td&gt;
&lt;td&gt;No issues as long as enough memory for full memoization&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;More intuitive / easier to implement&lt;/th&gt;
&lt;td&gt;Often easier to reason about&lt;/td&gt;
&lt;td&gt;most people find it harder to reason through&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Stack overflow issues are typically a deal breaker&lt;/strong&gt; &lt;span&gt;and a reason why you would not want to have recursion in a (backend) production system. However, for the purposes of the interview, as long as you mention the trade-offs, you should typically be fine with either of the implementations. You should feel comfortable implementing both.&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;&lt;strong&gt;In our particular problem, I implemented both versions. Here is python code for that:&lt;/strong&gt;&lt;br/&gt;A recursive solution:&lt;/p&gt;
&lt;div id=&quot;crayon-5affd9db2f4eb173522288&quot; class=&quot;crayon-syntax crayon-theme-son-of-obsidian-copy crayon-font-droid-sans-mono crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-always wrap&quot;&gt;


&lt;div class=&quot;crayon-plain-wrap&quot;&gt;
&lt;textarea class=&quot;crayon-plain print-no&quot; data-settings=&quot;dblclick&quot; readonly=&quot;readonly&quot;&gt;
def canStopRecursive(runway, initSpeed, startIndex = 0):
  # negative base cases need to go first
  if (startIndex &amp;gt;= len(runway) or startIndex &amp;lt; 0 or
      initSpeed &amp;lt; 0 or not runway[startIndex]):
    return False`
  # base case for a stopping condition
  if initSpeed == 0:
    return True
  # Try all possible paths
  for adjustedSpeed in [initSpeed, initSpeed - 1, initSpeed + 1]:
    # Recurrence relation: If you can stop from any of the subproblems,
    # you can also stop from the main problem
    if canStopRecursive(
        runway, adjustedSpeed, startIndex + adjustedSpeed):
      return True
  return False
&lt;/textarea&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;show&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4eb173522288-1&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;canStopRecursive&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;runway&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4eb173522288-2&quot;&gt; &lt;span class=&quot;crayon-p&quot;&gt;# negative base cases need to go first&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4eb173522288-3&quot;&gt; &lt;span class=&quot;crayon-st&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;runway&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;or&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4eb173522288-4&quot;&gt;     &lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;runway&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4eb173522288-5&quot;&gt;   &lt;span class=&quot;crayon-st&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;`&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4eb173522288-6&quot;&gt; &lt;span class=&quot;crayon-p&quot;&gt;# base case for a stopping condition&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4eb173522288-7&quot;&gt; &lt;span class=&quot;crayon-st&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4eb173522288-8&quot;&gt;   &lt;span class=&quot;crayon-st&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;True&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4eb173522288-9&quot;&gt; &lt;span class=&quot;crayon-p&quot;&gt;# Try all possible paths&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4eb173522288-10&quot;&gt; &lt;span class=&quot;crayon-st&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;adjustedSpeed&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4eb173522288-11&quot;&gt;   &lt;span class=&quot;crayon-p&quot;&gt;# Recurrence relation: If you can stop from any of the subproblems,&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4eb173522288-12&quot;&gt;   &lt;span class=&quot;crayon-p&quot;&gt;# you can also stop from the main problem&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4eb173522288-13&quot;&gt;   &lt;span class=&quot;crayon-st&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;canStopRecursive&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4eb173522288-14&quot;&gt;       &lt;span class=&quot;crayon-v&quot;&gt;runway&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;adjustedSpeed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;adjustedSpeed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4eb173522288-15&quot;&gt;     &lt;span class=&quot;crayon-st&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;True&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4eb173522288-16&quot;&gt; &lt;span class=&quot;crayon-st&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;False&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;An iterative solution:&lt;/p&gt;
&lt;div id=&quot;crayon-5affd9db2f4f4903011015&quot; class=&quot;crayon-syntax crayon-theme-son-of-obsidian-copy crayon-font-droid-sans-mono crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-always wrap&quot;&gt;


&lt;div class=&quot;crayon-plain-wrap&quot;&gt;
&lt;textarea class=&quot;crayon-plain print-no&quot; data-settings=&quot;dblclick&quot; readonly=&quot;readonly&quot;&gt;
def canStopIterative(runway, initSpeed, startIndex = 0):
  # maximum speed cannot be larger than length of the runway. We will talk about
  # making this bound tighter later on.
  maxSpeed = len(runway)
  if (startIndex &amp;gt;= len(runway) or startIndex &amp;lt; 0 or initSpeed &amp;lt;; 0 or initSpeed &amp;gt; maxSpeed or not runway[startIndex]):
    return False
  # {position i : set of speeds for which we can stop from position i}
  memo = {}
  # Base cases, we can stop when a position is not a spike and speed is zero.
  for position in range(len(runway)):
    if runway[position]:
      memo[position] = set([0])
  # Outer loop to go over positions from the last one to the first one
  for position in reversed(range(len(runway))):
    # Skip positions which contain spikes
    if not runway[position]:
      continue
    # For each position, go over all possible speeds
    for speed in range(1, maxSpeed + 1):
      # Recurrence relation is the same as in the recursive version.
      for adjustedSpeed in [speed, speed - 1, speed + 1]:
        if (position + adjustedSpeed in memo and
            adjustedSpeed in memo[position + adjustedSpeed]):
          memo[position].add(speed)
          break
  return initSpeed in memo[startIndex]
&lt;/textarea&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;show&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-1&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;canStopIterative&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;runway&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-2&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-p&quot;&gt;# maximum speed cannot be larger than length of the runway. We will talk about&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-3&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-p&quot;&gt;# making this bound tighter later on.&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-4&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;maxSpeed&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;runway&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-5&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;runway&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;maxSpeed&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;runway&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-6&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;False&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-7&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-p&quot;&gt;# {position i : set of speeds for which we can stop from position i}&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-8&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-9&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-p&quot;&gt;# Base cases, we can stop when a position is not a spike and speed is zero.&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-10&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;runway&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-11&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;runway&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-12&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;crayon-cn&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-13&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-p&quot;&gt;# Outer loop to go over positions from the last one to the first one&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-14&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;reversed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;runway&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-15&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-p&quot;&gt;# Skip positions which contain spikes&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-16&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;runway&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-17&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;continue&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-18&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-p&quot;&gt;# For each position, go over all possible speeds&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-19&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-cn&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;maxSpeed&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-20&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;crayon-p&quot;&gt;# Recurrence relation is the same as in the recursive version.&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-21&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;adjustedSpeed&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-22&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;adjustedSpeed&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;and&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-23&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;adjustedSpeed&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;adjustedSpeed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-24&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-25&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;break&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f4903011015-26&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;initSpeed&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;]&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Step 6: Add memoization&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Memoization&lt;/strong&gt; is a technique that is closely associated with DP. It is used for storing the results of expensive function calls and returning the cached result when the same inputs occur again. Why are we adding memoization to our recursion? We encounter the same subproblems which without memoization are computed repeatedly. Those repetitions very often lead to exponential time complexities.&lt;/p&gt;
&lt;p&gt;In recursive solutions, adding memoization should feel straightforward. Let’s see why. Remember that memoization is just a cache of the function results. There are times when you want to deviate from this definition in order to squeeze out some minor optimizations, but treating memoization as a function result cache is the most intuitive way to implement it.&lt;/p&gt;
&lt;p&gt;This means that you should:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Store your function result into your memory before every &lt;em&gt;&lt;span&gt;return&lt;/span&gt;&lt;/em&gt; &lt;em&gt;&lt;span&gt;statement&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Look up the memory for the function result before you start doing any other computation&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;div&gt;
&lt;p&gt;Here is the code from above with added memoization (added lines are highlighted):&lt;/p&gt;
&lt;div id=&quot;crayon-5affd9db2f4f9084377124&quot; class=&quot;crayon-syntax crayon-theme-son-of-obsidian-copy crayon-font-droid-sans-mono crayon-os-pc print-yes notranslate&quot; data-settings=&quot; minimize scroll-always wrap&quot;&gt;


&lt;div class=&quot;crayon-plain-wrap&quot;&gt;
&lt;textarea class=&quot;crayon-plain print-no&quot; data-settings=&quot;dblclick&quot; readonly=&quot;readonly&quot;&gt;
def canStopRecursiveWithMemo(runway, initSpeed, startIndex = 0, memo = None):
  # Only done the first time to initialize the memo.
  if memo == None:
    memo = {}
  # First check if the result exists in memo
  if startIndex in memo and initSpeed in memo[startIndex]:
    return memo[startIndex][initSpeed]
  # negative base cases need to go first
  if (startIndex &amp;gt;= len(runway) or startIndex &amp;lt; 0 or
      initSpeed &amp;lt; 0 or not runway[startIndex]):
    insertIntoMemo(memo, startIndex, initSpeed, False)
    return False
  # base case for a stopping condition
  if initSpeed == 0:
    insertIntoMemo(memo, startIndex, initSpeed, True)
    return True
  # Try all possible paths
  for adjustedSpeed in [initSpeed, initSpeed - 1, initSpeed + 1]:
    # Recurrence relation: If you can stop from any of the subproblems,
    # you can also stop from the main problem
    if canStopRecursiveWithMemo(
        runway, adjustedSpeed, startIndex + adjustedSpeed, memo):
      insertIntoMemo(memo, startIndex, initSpeed, True)
      return True
  insertIntoMemo(memo, startIndex, initSpeed, False)
  return False
&lt;/textarea&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-main&quot;&gt;
&lt;table class=&quot;crayon-table&quot;&gt;&lt;tr class=&quot;crayon-row&quot;&gt;&lt;td class=&quot;crayon-nums&quot; data-settings=&quot;show&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;crayon-code&quot;&gt;
&lt;div class=&quot;crayon-pre&quot;&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-1&quot;&gt;&lt;span class=&quot;crayon-e&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;canStopRecursiveWithMemo&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;runway&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-marked-line crayon-top crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-2&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-p&quot;&gt;# Only done the first time to initialize the memo.&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-marked-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-3&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-marked-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-4&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;}&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-marked-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-5&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-p&quot;&gt;# First check if the result exists in memo&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-marked-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-6&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;startIndex&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;initSpeed&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-marked-line crayon-bottom&quot; id=&quot;crayon-5affd9db2f4f9084377124-7&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;]&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-8&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-p&quot;&gt;# negative base cases need to go first&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-9&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;runway&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;or&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-10&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;runway&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-marked-line crayon-top crayon-bottom&quot; id=&quot;crayon-5affd9db2f4f9084377124-11&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;insertIntoMemo&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-12&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;False&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-13&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-p&quot;&gt;# base case for a stopping condition&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-14&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-marked-line crayon-top crayon-bottom&quot; id=&quot;crayon-5affd9db2f4f9084377124-15&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;insertIntoMemo&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-16&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;True&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-17&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-p&quot;&gt;# Try all possible paths&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-18&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;adjustedSpeed&lt;/span&gt; &lt;span class=&quot;crayon-st&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;crayon-sy&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;crayon-cn&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-19&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-p&quot;&gt;# Recurrence relation: If you can stop from any of the subproblems,&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-20&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-p&quot;&gt;# you can also stop from the main problem&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-21&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;crayon-e&quot;&gt;canStopRecursiveWithMemo&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-22&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;runway&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;adjustedSpeed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt; &lt;span class=&quot;crayon-o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;adjustedSpeed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;crayon-o&quot;&gt;:&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-marked-line crayon-top crayon-bottom&quot; id=&quot;crayon-5affd9db2f4f9084377124-23&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;insertIntoMemo&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-24&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;True&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-marked-line crayon-top crayon-bottom&quot; id=&quot;crayon-5affd9db2f4f9084377124-25&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-e&quot;&gt;insertIntoMemo&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;crayon-v&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;startIndex&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-v&quot;&gt;initSpeed&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;crayon-sy&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;crayon-line crayon-striped-line&quot; id=&quot;crayon-5affd9db2f4f9084377124-26&quot;&gt;&lt;span class=&quot;crayon-h&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;crayon-st&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;crayon-t&quot;&gt;False&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In order to illustrate the effectiveness of memoization and different approaches, let’s do some quick tests. I will stress test all three methods that we have seen so far. Here is the set up:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;I created a runway of length 1000 with spikes in random places (I chose to have a probability of a spike being in any given spot to be 20%)&lt;/li&gt;
&lt;li&gt;initSpeed = 30&lt;/li&gt;
&lt;li&gt;I ran all functions 10 times and measured the average time of execution&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Here are the results (in seconds):&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;Time (s)&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;canStopRecursive&lt;/th&gt;
&lt;td&gt;10.239&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;canStopIterative&lt;/th&gt;
&lt;td&gt;0.021&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;canStopRecursiveWithMemo&lt;/th&gt;
&lt;td&gt;0.008&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;You can see that the pure recursive approach takes about 500x more time than the iterative approach and about 1300x more time than the recursive approach with memoization. Note that this discrepancy would grow rapidly with the length of the runway. I encourage you to try running it yourself.&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Step 7: Determine Time complexity&lt;/h2&gt;
&lt;p&gt;There are some simple rules that can make computing time complexity of a dynamic programming problem much easier. Here are two steps that you need to do:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Count the number of states – this will depend on the number of changing parameters in your problem&lt;/li&gt;
&lt;li&gt;Think about the work done per each state. In other words, if everything else but one state has been computed, how much work do you have to do to compute that last state&lt;/li&gt;
&lt;/ol&gt;&lt;div&gt;
&lt;p&gt;In our example problem, the number of states is &lt;strong&gt;|P| * |S|,&lt;/strong&gt; where&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;P is the set of all positions (|P| indicates the number of elements in P)&lt;/li&gt;
&lt;li&gt;S is the set of all speeds&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The work done per each state is O(1) in this problem because, given all other states, we simply have to look at 3 subproblems to determine the resulting state.&lt;/p&gt;
&lt;p&gt;As we noted in the code before, |S| is limited by length of the runway (|P|), so we could say that the number of states is |P|^2 and because work done per each state is O(1), then the total time complexity is O(|P|^2).&lt;/p&gt;
&lt;p&gt;However, it seems that |S| can be further limited because if it were really |P| it is very clear that stopping would not be possible because you would have to jump the length of the entire runway on the first move.&lt;/p&gt;
&lt;p&gt;So let’s see how we can put a tighter bound on |S|. Let’s call maximum speed S. Assume that we’re starting from position 0. How quickly could we stop if we were trying to stop as soon as possible and if we ignore potential spikes?&lt;img class=&quot;wp-image-204 size-full aligncenter&quot; src=&quot;http://blog.refdash.com/wp-content/uploads/2018/05/post_illustration_4-1.jpg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;140&quot; srcset=&quot;http://blog.refdash.com/wp-content/uploads/2018/05/post_illustration_4-1.jpg 600w, http://blog.refdash.com/wp-content/uploads/2018/05/post_illustration_4-1-300x70.jpg 300w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In the first iteration, we would have to come at least to the point (S-1), by adjusting our speed at zero by -1. From there we would at a minimum go by (S-2) steps forward, and so on.&lt;/p&gt;
&lt;p&gt;For a runway of &lt;strong&gt;length L&lt;/strong&gt;&lt;span&gt;, the following has to hold:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; =&amp;gt; (S-1) + (S-2) + (S-3) + ….+ 1 &amp;lt; L&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; =&amp;gt; S * (S – 1) / 2 &amp;lt; L&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; =&amp;gt; S^2 – S – 2L &amp;lt; 0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you find roots of the above function, they will be:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;r1 = 1/2 + sqrt(1/4 + 2L) and r2 = 1/2 – sqrt(1/4 + 2L)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can write our inequality as:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(S – r1) * (S – r2) &amp;lt; 0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Considering that S – r2 &amp;gt; 0 for any S &amp;gt; 0 and L &amp;gt; 0, we need the following:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;S – 1/2 – sqrt(1/4 + 2L) &amp;lt; 0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; =&amp;gt; S &amp;lt; 1/2 + sqrt(1/4 + 2L)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That is the maximum speed that we could possibly have on a runway of a length L. If we had a speed higher than that, we could not stop even theoretically, irrespective of the position of the spikes.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;That means that the total time complexity depends only on the length of the runway L in the following form:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;O(L * sqrt(L)) which is better than O(L^2)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;O(L * sqrt(L)) is the upper bound on the time complexity&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Awesome, you made it through! 🙂&lt;/p&gt;
&lt;p&gt;The 7 steps that we went through should give you a framework for systematically solving any dynamic programming problem. I highly recommend practicing this approach on a few more problems to perfect your approach.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here are some next steps that you can take:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;Extend the sample problem by trying to find a path to a stopping point. We solved a problem that tells you whether you can stop, but what if you wanted to also know the steps to take in order to stop eventually along the runway. How would you modify the existing implementation to do that?&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;One thing that could be quite useful in solidifying your understanding of memoization and understanding that it is just a function result cache is reading about decorators in python or similar concepts in other languages. Think about how they would allow you to implement memoization in general for any function that you want to memoize.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Work on more DP problems by following the steps we went through. You can always find a bunch of them online (ex.&lt;/span&gt; &lt;a href=&quot;https://leetcode.com/tag/dynamic-programming/&quot;&gt;&lt;span&gt;LeetCode&lt;/span&gt;&lt;/a&gt; &lt;span&gt;or&lt;/span&gt; &lt;a href=&quot;http://www.geeksforgeeks.org/dynamic-programming/&quot;&gt;&lt;span&gt;GeeksForGeeks&lt;/span&gt;&lt;/a&gt;&lt;span&gt;).&lt;/span&gt; &lt;span&gt;As you practice, keep in mind one thing: Learn ideas, don’t learn problems. The number of ideas is significantly smaller and it’s an easier space to conquer which will also serve you much better.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;When you feel like you’ve conquered these ideas, check out &lt;a href=&quot;https://refdash.com/?utm_source=dp_blog&quot;&gt;Refdash&lt;/a&gt; where you are interviewed by a senior engineer and get a detailed feedback on your coding, algorithms, and system design.&lt;/p&gt;
</description>
<pubDate>Fri, 18 May 2018 16:14:20 +0000</pubDate>
<dc:creator>otasevic</dc:creator>
<og:type>article</og:type>
<og:title>Dynamic Programming: 7 Steps to Solve any DP Interview Problem</og:title>
<og:description>Simple 7 step tutorial to solve any Dynamic Programming interview problem - explained with a clear and easy example. Dynamic Programming problems are frequently asked in technical interviews and can seem tricky but can be practiced and mastered with the right approach.</og:description>
<og:url>http://blog.refdash.com/dynamic-programming-tutorial-example/</og:url>
<og:image>http://blog.refdash.com/wp-content/uploads/2018/05/farzad-nazifi-71686-unsplash-e1526498694701.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://blog.refdash.com/dynamic-programming-tutorial-example/</dc:identifier>
</item>
<item>
<title>Congress wants to extend the copyright on some sound recordings to 144 years</title>
<link>https://boingboing.net/2018/05/18/orrin-fucking-hatch.html</link>
<guid isPermaLink="true" >https://boingboing.net/2018/05/18/orrin-fucking-hatch.html</guid>
<description>&lt;div id=&quot;story&quot; readability=&quot;82.706219312602&quot;&gt;&lt;span id=&quot;metadata&quot;/&gt;
&lt;p&gt;&lt;span id=&quot;metadata&quot;&gt;Back in March, the House passed the &lt;a href=&quot;https://www.eff.org/deeplinks/2018/03/music-modernization-act-good-solution-songwriters-dont-combine-it-bad-copyright&quot;&gt;Music Modernization Act&lt;/a&gt;, a welcome bill made it easier for musicians to get paid reliably for digital streaming.&lt;/span&gt;&lt;/p&gt;
&lt;span id=&quot;metadata&quot;/&gt;

&lt;span id=&quot;metadata&quot;&gt;&lt;span id=&quot;more-592104&quot;/&gt;&lt;/span&gt;
&lt;p&gt;Then it went to the Senate, and Orrin Hatch turned it into shit.&lt;/p&gt;
&lt;p&gt;Hatch merged the bill with the CLASSICS act, which creates a new federal copyright rule for pre-1972 sound recordings; in some cases, this will create a 144 year copyright term for these older recordings. What's more, it gives an unassailable advantage to the biggest streaming companies like Spotify and Pandora, whose existing music publisher agreements lock in a much lower royalty rate than the statute provides for, something no new competitor will be able to use.&lt;/p&gt;
&lt;p&gt;Extending the term of copyright on public domain works is a terrible idea, as we learned with the Sonny Bono Copyright Act in 1998: the main effects of taking material out of the public domain and putting it back in copyright was to enrich large publishing businesses at the expense of scholarship, archiving, librarianship, education and access, while dooming enormous chunks of our collective culture to be &quot;orphan works,&quot; with no discoverable owner, likely to have every known copy disappear or disintegrate before they re-entered the public domain and could be reissued.&lt;/p&gt;
&lt;p&gt;Hatch's mischief repeats the worst copyright errors of the past without learning a thing from them. For example, Hatch could have prevented the orphan works problem by asking copyright holders of pre-1972 recordings to register them with the Library of Congress: any work not registered would be in the public domain, and any work that was registered would have a named party from whom to seek a license.&lt;/p&gt;
&lt;p&gt;That would have still been a pointless wealth-transfer from archivists, scholars, teachers and enthusiasts (the only people who really care about these very old recordings) to a small cartel of giant music companies, but at least it wouldn't have erased our culture wholesale.&lt;/p&gt;
&lt;p&gt;The Senate is now considering the bill: &lt;a href=&quot;https://act.eff.org/action/stop-another-expansion-of-copyright-tell-the-senate-to-vote-no-on-s-2823&quot;&gt;Write to your Senator&lt;/a&gt; to head off this foolishness before it can erase the bulk of the history of recorded music.&lt;/p&gt;
&lt;blockquote readability=&quot;22&quot;&gt;
&lt;p&gt;Twenty years later, the fight for term extension has begun anew. Buried in an otherwise harmless act, passed by the House and now being considered in the Senate, this new bill purports to create a new digital performance right—basically the right to control copies of recordings on any digital platform (ever hear of the internet?)—for musical recordings made before 1972. These recordings would now have a new right, protected until 2067, which, for some, means a total term of protection of 144 years. The beneficiaries of this monopoly need do nothing to get the benefit of this gift. They don’t have to make the work available. Nor do they have to register their claims in advance.&lt;/p&gt;
&lt;p&gt;That this statute has nothing to do with the constitutional purpose of “promot[ing] Progress” is clear from its very title. The “Compensating Legacy Artists for their Songs, Service, and Important Contributions to Society Act” (or CLASSICS) is as blatant a gift without any public return as is conceivable. And it's not just a gift through cash; it's a gift through a monopoly regulation of speech. Archives with recordings of music from the 1930s or 1940s would now have to clear permission before streaming their musical content even if the underlying work was in the public domain.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.wired.com/story/congress-latest-move-to-extend-copyright-protection-is-misguided/&quot;&gt;Congress' Latest Move to Extend Copyright Protection Is Misguided&lt;/a&gt; [Lawrence Lessig/Wired]&lt;/p&gt;



&lt;/div&gt;&lt;div id=&quot;next-post-thumbnails&quot; readability=&quot;39.427012278308&quot;&gt;
&lt;div class=&quot;nextstory&quot; readability=&quot;33.333333333333&quot;&gt;

&lt;a href=&quot;https://boingboing.net/2018/05/11/fanflick-editor.html?utm_source=moreatbb&amp;amp;utm_medium=nextpost&amp;amp;utm_campaign=nextpostthumbnails&quot; onclick=&quot;clickTrack(this.href, 'Next Post Button', 'Next Post Thumbnails');&quot;&gt;&lt;img width=&quot;600&quot; height=&quot;300&quot; src=&quot;https://i0.wp.com/media.boingboing.net/wp-content/uploads/2018/05/catalog-missing-4b-1.png?fit=600%2C300&amp;amp;ssl=1&quot; class=&quot;attachment-medium size-medium wp-post-image&quot; alt=&quot;&quot; srcset=&quot;https://i0.wp.com/media.boingboing.net/wp-content/uploads/2018/05/catalog-missing-4b-1.png?w=1200&amp;amp;ssl=1 1200w, https://i0.wp.com/media.boingboing.net/wp-content/uploads/2018/05/catalog-missing-4b-1.png?resize=300%2C150&amp;amp;ssl=1 300w, https://i0.wp.com/media.boingboing.net/wp-content/uploads/2018/05/catalog-missing-4b-1.png?resize=600%2C300&amp;amp;ssl=1 600w, https://i0.wp.com/media.boingboing.net/wp-content/uploads/2018/05/catalog-missing-4b-1.png?resize=768%2C384&amp;amp;ssl=1 768w, https://i0.wp.com/media.boingboing.net/wp-content/uploads/2018/05/catalog-missing-4b-1.png?resize=930%2C465&amp;amp;ssl=1 930w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Wonderful EFF supporters keep on coming up with great new entries for EFF's Catalog of Missing Devices, which lists fictional devices that should exist, but don't, because to achieve their legal, legitimate goals, the manufacturer would have to break some Digital Rights Management and risk retaliation under Section 1201 of the Digital Millennium Copyright Act. […]&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://boingboing.net/2018/05/11/fanflick-editor.html&quot;&gt;READ THE REST&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&quot;nextstory&quot; readability=&quot;13.2&quot;&gt;

&lt;a href=&quot;https://boingboing.net/2018/05/10/if-you-watch-one-cat-video-thi.html?utm_source=moreatbb&amp;amp;utm_medium=nextpost&amp;amp;utm_campaign=nextpostthumbnails&quot; onclick=&quot;clickTrack(this.href, 'Next Post Button', 'Next Post Thumbnails');&quot;&gt;&lt;img width=&quot;600&quot; height=&quot;384&quot; src=&quot;https://i1.wp.com/media.boingboing.net/wp-content/uploads/2018/05/Screen-Shot-2018-05-09-at-3.01.58-PM.png?fit=600%2C384&amp;amp;ssl=1&quot; class=&quot;attachment-medium size-medium wp-post-image&quot; alt=&quot;&quot; srcset=&quot;https://i1.wp.com/media.boingboing.net/wp-content/uploads/2018/05/Screen-Shot-2018-05-09-at-3.01.58-PM.png?w=1037&amp;amp;ssl=1 1037w, https://i1.wp.com/media.boingboing.net/wp-content/uploads/2018/05/Screen-Shot-2018-05-09-at-3.01.58-PM.png?resize=300%2C192&amp;amp;ssl=1 300w, https://i1.wp.com/media.boingboing.net/wp-content/uploads/2018/05/Screen-Shot-2018-05-09-at-3.01.58-PM.png?resize=600%2C384&amp;amp;ssl=1 600w, https://i1.wp.com/media.boingboing.net/wp-content/uploads/2018/05/Screen-Shot-2018-05-09-at-3.01.58-PM.png?resize=768%2C491&amp;amp;ssl=1 768w, https://i1.wp.com/media.boingboing.net/wp-content/uploads/2018/05/Screen-Shot-2018-05-09-at-3.01.58-PM.png?resize=930%2C595&amp;amp;ssl=1 930w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Watch this while you can. Run. Thanks, Doug!&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://boingboing.net/2018/05/10/if-you-watch-one-cat-video-thi.html&quot;&gt;READ THE REST&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&quot;nextstory&quot; readability=&quot;26.190476190476&quot;&gt;

&lt;a href=&quot;https://boingboing.net/2018/05/09/faleena-hopkins.html?utm_source=moreatbb&amp;amp;utm_medium=nextpost&amp;amp;utm_campaign=nextpostthumbnails&quot; onclick=&quot;clickTrack(this.href, 'Next Post Button', 'Next Post Thumbnails');&quot;&gt;&lt;img width=&quot;600&quot; height=&quot;360&quot; src=&quot;https://i1.wp.com/media.boingboing.net/wp-content/uploads/2018/05/1110.jpg?fit=600%2C360&amp;amp;ssl=1&quot; class=&quot;attachment-medium size-medium wp-post-image&quot; alt=&quot;&quot; srcset=&quot;https://i1.wp.com/media.boingboing.net/wp-content/uploads/2018/05/1110.jpg?w=1110&amp;amp;ssl=1 1110w, https://i1.wp.com/media.boingboing.net/wp-content/uploads/2018/05/1110.jpg?resize=300%2C180&amp;amp;ssl=1 300w, https://i1.wp.com/media.boingboing.net/wp-content/uploads/2018/05/1110.jpg?resize=600%2C360&amp;amp;ssl=1 600w, https://i1.wp.com/media.boingboing.net/wp-content/uploads/2018/05/1110.jpg?resize=768%2C461&amp;amp;ssl=1 768w, https://i1.wp.com/media.boingboing.net/wp-content/uploads/2018/05/1110.jpg?resize=930%2C558&amp;amp;ssl=1 930w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Over the past 20 years, the world has become a lot more cognizant of the risks of unbalanced copyright, as what was once a way to help creators gain leverage over publishers, studios and labels became a rubric for mass surveillance, unaccountable censorship and monopolism.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://boingboing.net/2018/05/09/faleena-hopkins.html&quot;&gt;READ THE REST&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&quot;nextstory&quot; readability=&quot;30.475638051044&quot;&gt;

&lt;a href=&quot;https://boingboing.net/2018/05/16/start-a-cybersecurity-career-w.html?utm_source=moreatbb&amp;amp;utm_medium=nextpost&amp;amp;utm_campaign=nextpostthumbnails&quot; onclick=&quot;clickTrack(this.href, 'Next Post Button', 'Next Post Thumbnails');&quot;&gt;&lt;img width=&quot;600&quot; height=&quot;450&quot; src=&quot;https://i2.wp.com/media.boingboing.net/wp-content/uploads/2018/05/sale_15098_primary_image.jpg?fit=600%2C450&amp;amp;ssl=1&quot; class=&quot;attachment-medium size-medium wp-post-image&quot; alt=&quot;&quot; srcset=&quot;https://i2.wp.com/media.boingboing.net/wp-content/uploads/2018/05/sale_15098_primary_image.jpg?w=630&amp;amp;ssl=1 630w, https://i2.wp.com/media.boingboing.net/wp-content/uploads/2018/05/sale_15098_primary_image.jpg?resize=300%2C225&amp;amp;ssl=1 300w, https://i2.wp.com/media.boingboing.net/wp-content/uploads/2018/05/sale_15098_primary_image.jpg?resize=600%2C450&amp;amp;ssl=1 600w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p&gt;We live during a time where cyberattacks regularly make news headlines, so it should come as no surprise that cybersecurity professionals are experiencing a surge in demand at even the entry level, making now the ideal time to learn the tools of the trade if you’re considering a career switch. The 2018 Supercharged Cybersecurity Bundle offers […]&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://boingboing.net/2018/05/16/start-a-cybersecurity-career-w.html&quot;&gt;READ THE REST&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&quot;nextstory&quot; readability=&quot;30.708121827411&quot;&gt;

&lt;a href=&quot;https://boingboing.net/2018/05/15/5-courses-to-help-you-get-proj.html?utm_source=moreatbb&amp;amp;utm_medium=nextpost&amp;amp;utm_campaign=nextpostthumbnails&quot; onclick=&quot;clickTrack(this.href, 'Next Post Button', 'Next Post Thumbnails');&quot;&gt;&lt;img width=&quot;600&quot; height=&quot;400&quot; src=&quot;https://i2.wp.com/media.boingboing.net/wp-content/uploads/2018/05/tEMyfr4.jpg?fit=600%2C400&amp;amp;ssl=1&quot; class=&quot;attachment-medium size-medium wp-post-image&quot; alt=&quot;&quot; srcset=&quot;https://i2.wp.com/media.boingboing.net/wp-content/uploads/2018/05/tEMyfr4.jpg?w=2000&amp;amp;ssl=1 2000w, https://i2.wp.com/media.boingboing.net/wp-content/uploads/2018/05/tEMyfr4.jpg?resize=300%2C200&amp;amp;ssl=1 300w, https://i2.wp.com/media.boingboing.net/wp-content/uploads/2018/05/tEMyfr4.jpg?resize=600%2C400&amp;amp;ssl=1 600w, https://i2.wp.com/media.boingboing.net/wp-content/uploads/2018/05/tEMyfr4.jpg?resize=768%2C512&amp;amp;ssl=1 768w, https://i2.wp.com/media.boingboing.net/wp-content/uploads/2018/05/tEMyfr4.jpg?resize=930%2C620&amp;amp;ssl=1 930w, https://i2.wp.com/media.boingboing.net/wp-content/uploads/2018/05/tEMyfr4.jpg?w=1940&amp;amp;ssl=1 1940w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p&gt;It’s no secret that companies are eager to hire new project managers and pay them hefty salaries to ensure their initiatives make it from A to B. However, demand alone isn’t quite enough to get your foot in the door as a project manager these days. Without the right certifications, companies will have a hard time […]&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://boingboing.net/2018/05/15/5-courses-to-help-you-get-proj.html&quot;&gt;READ THE REST&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&quot;nextstory&quot; readability=&quot;28.987834549878&quot;&gt;

&lt;a href=&quot;https://boingboing.net/2018/05/14/learn-virtually-anything-with.html?utm_source=moreatbb&amp;amp;utm_medium=nextpost&amp;amp;utm_campaign=nextpostthumbnails&quot; onclick=&quot;clickTrack(this.href, 'Next Post Button', 'Next Post Thumbnails');&quot;&gt;&lt;img width=&quot;600&quot; height=&quot;400&quot; src=&quot;https://i2.wp.com/media.boingboing.net/wp-content/uploads/2018/05/man-relax-couch-study.jpg?fit=600%2C400&amp;amp;ssl=1&quot; class=&quot;attachment-medium size-medium wp-post-image&quot; alt=&quot;&quot; srcset=&quot;https://i2.wp.com/media.boingboing.net/wp-content/uploads/2018/05/man-relax-couch-study.jpg?w=2250&amp;amp;ssl=1 2250w, https://i2.wp.com/media.boingboing.net/wp-content/uploads/2018/05/man-relax-couch-study.jpg?resize=300%2C200&amp;amp;ssl=1 300w, https://i2.wp.com/media.boingboing.net/wp-content/uploads/2018/05/man-relax-couch-study.jpg?resize=600%2C400&amp;amp;ssl=1 600w, https://i2.wp.com/media.boingboing.net/wp-content/uploads/2018/05/man-relax-couch-study.jpg?resize=768%2C512&amp;amp;ssl=1 768w, https://i2.wp.com/media.boingboing.net/wp-content/uploads/2018/05/man-relax-couch-study.jpg?resize=930%2C620&amp;amp;ssl=1 930w, https://i2.wp.com/media.boingboing.net/wp-content/uploads/2018/05/man-relax-couch-study.jpg?w=1940&amp;amp;ssl=1 1940w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Whether you’re looking to switch careers or advance in the one you’re in, chances are you’re going to need to add some new skills to your repertoire before you can make your move. While going back to school is certainly an option, Virtual Training Company makes it possible for users to acquire new skills in […]&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://boingboing.net/2018/05/14/learn-virtually-anything-with.html&quot;&gt;READ THE REST&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;

&lt;/div&gt;</description>
<pubDate>Fri, 18 May 2018 15:04:33 +0000</pubDate>
<dc:creator>stablemap</dc:creator>
<og:type>article</og:type>
<og:title>Congress wants to extend the copyright on some sound recordings to 144 years</og:title>
<og:description>Congress wants to extend the copyright on some sound recordings to 144 years</og:description>
<og:url>https://boingboing.net/2018/05/18/orrin-fucking-hatch.html</og:url>
<og:image>https://media.boingboing.net/wp-content/uploads/2018/05/musiccopyright.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://boingboing.net/2018/05/18/orrin-fucking-hatch.html</dc:identifier>
</item>
<item>
<title>Steve Wozniak Recounts His Efforts to Engineer the Apple II Floppy Disk System</title>
<link>https://paleotronic.com/2018/05/19/steve-wozniak-talks-disk/</link>
<guid isPermaLink="true" >https://paleotronic.com/2018/05/19/steve-wozniak-talks-disk/</guid>
<description>&lt;h3&gt;&lt;img class=&quot;aligncenter size-large wp-image-409&quot; src=&quot;https://i1.wp.com/paleotronic.com/wp-content/uploads/2018/05/paleotronic0218-300dpi-28.png?resize=1024%2C724&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;724&quot; srcset=&quot;https://i1.wp.com/paleotronic.com/wp-content/uploads/2018/05/paleotronic0218-300dpi-28.png?resize=1024%2C724&amp;amp;ssl=1 1024w, https://i1.wp.com/paleotronic.com/wp-content/uploads/2018/05/paleotronic0218-300dpi-28.png?resize=300%2C212&amp;amp;ssl=1 300w, https://i1.wp.com/paleotronic.com/wp-content/uploads/2018/05/paleotronic0218-300dpi-28.png?resize=768%2C543&amp;amp;ssl=1 768w&quot; sizes=&quot;(max-width: 1000px) 100vw, 1000px&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;/h3&gt;
&lt;h3 class=&quot;p2&quot;&gt;Paleotronic was lucky enough to be given the chance to have a chat with Apple co-founder and&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt; engineer-extraordinare Steve Wozniak, who gave us a personal look into the development of the Disk II.&lt;/h3&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;I &lt;/span&gt;like talking about it, it’s a very interesting story, especially parts that are not so much told. And probably, you’ve read some of the common parts, about how I was in a staff meeting and raised my hand and said, “If we have a floppy disk in two weeks, can we show it at CES?”&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I knew you could never design disk drives in less than a half year to a year plan in a company, and I had never been around disk drives, I had never studied nor been near hardware or software. All I knew was maybe my one way to get to Las Vegas wasn’t just to ask and say “Hey, I’ll help you with the marketing”, it was that I might be able to do some engineering – but how do you do it?&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Okay, very shortly after that, Steve Jobs got a floppy disk, (one) he’d been looking at before. Shugart was going to move from the 8-inch larger floppies down to a smaller 5-inch, and smaller is more personal, so Steve got me one of those. I opened up the data sheets, and I know how you can, if you record data on to a cassette tape, this is how I – how we had our Apple II working, you would record signals that went up and down in voltage, you play tones into a cassette tape, and when you played it back you got the same thing back, and you could count the timing between pulses and decide if its ones or zeroes.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;So I was thinking a floppy disk must be like that somewhere. I studied Shugart’s chips and schematics. They had a set of wires, maybe about ten or fifteen wires that carried data into their chips that then piece-mealed out a byte at a time and a bit at a time, and I looked at their diagrams and the bits were coming out either four microseconds apart or eight microseconds. For example, a zero might be a full eight microseconds before the cassette tape signal – the “floppy tape” signal – actually reversed itself. It might be eight microseconds, but if four microseconds in it flipped, and then four microseconds later it flipped again, the bit was a one. Ah ha!&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Okay, that was the understanding I needed, and now, I was well aware that I had a computer, and the ability to put a few chips on it, to actually send data out at my rate. Why go through this big structure that speaks its own little language: “Click, here is a signal for here to record on the disk, here’s a byte, let me know when you’re done.” I didn’t need all that stuff! I just needed to write it, and so I started developing a very tight circuit, took almost nothing, and it was probably only a couple of days before I could write some ones and zeroes on to a disk. (But) I thought, how do you know if you wrote them if you can’t actually read them?&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;So then, I sat down, “Oh my gosh, how am I going to read these?” and it might have been the weekend by the time I even had a tiny circuit. (I realised) the microprocessor (CPU) would actually have to be involved in the timing. This is bad programming practice in todays very advanced languages, (it’s) very bad to base your timing on the microprocessor timing itself. Every thirty-two microseconds I had to write eight of these little 4 microsecond “chunks”.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Our microprocessor ran at about a megahertz, so that’s about one microsecond is the closest timing you could get, but I wrote code that very carefully timed itself so that every thirty-two microseconds, it put a signal out on the line to my little controller that then made those little four microsecond ups and downs – it made those “shift” out. There was a new chip that I had wanted to use for this, and it sort of inspired my thinking that maybe it could be used for a floppy disk controller some day. It was an eight bit register – you could load in eight bits parallel, and then shift them out serial, or vice-versa. And it was a one dollar chip, it was the normal little low-cost TTL chip, so I used that and now I could write the ones and zeroes. How do I actually read them back?&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Of course _I_ could read them back, I could look at an oscilloscope (connected) to the read head and see that the signals are coming back, they are there – how do I detect them? And the solution I came up with there was even more unusual – I look back on my own designs and I have no idea, I had never read a book on it, I’d never done it, I’d never been around anyone who’d done it, I didn’t have anyone telling me, “here’s how you read the data from a disk”. Yes, there was a big chip made, a big expensive chip that could sort-of do the whole job, but that’s not my approach.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;So, they’re going to come back in four microsecond and eight microsecond chunks, and I’ve got to tell what’s going on. Normally, you’d put put some signal into a timer that times up four microseconds, and then checks the line to see if its reversed or not – it’s a complicated, many many parts procedure, which is why most floppy disk controllers were still fifty chips. And then I remembered a course I’d had at Berkeley, my junior year, in state machines. I was very good at understanding state machines. You have a number that is the state, it says where I am now in a sequence. It’s kind of like the address of a microprocessor. And then you put in a few more bits of data, for example the one data bit coming from the floppy disk. You put it in, and then when a clock signal comes – clocks come ching, ching, ching ching… seven million times a second, I had clock signals, it decides (based) on my state now, and my state to come, where do I go?&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Well, the decision chip was a one dollar chip, called a PROM. 256 by eight-bit PROM, a little PROM. You put in a certain number of inputs into it, and it decides what the output is, and the output goes back to the little register that holds your current state. So if there’s a zero coming, the state might say “hold state fifty”, a zero comes: “hold state fifty”. A one comes: “go to state fifty-one”. You could set up timing so that it could actually determine if things came in four microseconds, if they came in eight – very complicated to take your mind down to those little levels. It’s like programming a four-bit microprocessor – it’s tonnes harder than an eight-bit microprocessor, and this is like a one-bit microprocessor! Very difficult. Somehow, I finally solved it, and i could get the ones and zeroes back, but then I said, but how am I going to tell where the bytes start and stop?&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I wasn’t sure I was going to figure out how to do this, and then I realised there were a few of these four and eight microsecond bit codes that weren’t used, that didn’t correspond to any real data bits that could have come, but my method of detecting what’s coming, what’s coming, what’s coming would slip, slip, slip, slip, slip, and eventually, after about six to eight of those little unused (codes) it would slip into line with the bytes. Don’t ask me, it just happened! Total serendipity, I wasn’t sure if I’d solve it or not.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I worked Christmas Day and New Year’s Day and it came time to get to the show – I almost had it! I was working with Randy Wigginton, he was writing the higher level code to say –  see, with a cassette tape, if you wanted to run a program called “checkbook” you’d have to grab a cassette tape, put it in a cassette tape player, let it play some tones for half a minute, and then beep, you’d have a program running. Then you could put another cassette tape in that said “my checkbook data”. You could read it in… slow, slow, slow. We were used to big computer systems where you just said RUN WUMPUS. RUN whatever. I wanted to get to that point where I could type in RUN CHECKBOOK and it would run right off the disk. Or RUN COLOR MATH and it would run our flash card program for kids.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Randy was working with me, and we almost had it done. It was the night of the show, we had to fly to Las Vegas, stayed in this little motel called the Villa Roma. Played some good pranks on their phones. I used to travel with all my kids in those days, they didn’t have any airline security even. Had a lot of fun. I reversed the buttons on one phone, instead of going 1, 2, 3 horizontally, it went 1, 2, 3 vertically so the next person (who stayed) would (dial) what they thought was right…&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Also, I had gotten to design the first hotel movie system for a guy in Hollywood when I worked at Hewlett Packard and this hotel, I think – maybe it was a later hotel I got to, but it had movies and I was with Randy – and I said, “Oh, they have to encode your room number somewhere”. I opened up the little box with a screwdriver, and there were some dip switches, and I switched them to another position, and didn’t get billed for the movie.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Anyway, we were at Villa Roma in Las Vegas, and Randy and I started walking along this little section called the Strip – not like today’s Strip, it wasn’t full of resort, resort, resort, it was much smaller places. We walked down to the convention centre with our stuff and we sat their working, trying to get every little sector of ones and zeroes – the right bytes – on every sector on this disk, so when you put it in, you could type RUN – we actually simplified it for the time, you’d type R CHECKBOOK and it would run CHECKBOOK.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;We worked all night long and we finally got it totally functional by 6:30 in the morning. The show was going to start and we’d been up all night! I said, “You know, we’d better make one copy of it. It’s time to make a backup, I believe in that.” I only had two floppy disks with me, That’s it, period! I didn’t have any good software to say “copy a disk” yet – we weren’t at that point – so I’d slide a disk in, and I’d type one number into memory, (for example) a one, and then I’d CALL a little routine, and it would read all the data from track one. Then I’d flip the other disk in, I’d type a one in the right place, and then I’d go to a different address and run a program that said “write track one”.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Read track two, write track two… switching the floppies about like the first Macintosh, and when I got all done, I looked at my two floppies – tthey weren’t really labelled – and I realised that I’d copied the bad one on to the good!&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;So, that ruined that plan. I went to the hotel room – had to get some sleep – woke up at ten o’clock in the morning. By then, it’s all in your head. All of the methods you’ve used are in your head, and you can recreate it accurately in a shorter time, and I managed to get it recreated probably by around noon. I took a floppy disk down to this little table we were at – we just had a table – and put the floppy disk on the computer and there it was running. Oh my gosh!&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I also taught Steve Jobs how to play craps that trip, and I also taught Randy Wiggington, even though he was in high school. He won thirty-five bucks! The important things in life are the ones you remember with emotion and fun smiles.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I left out one part. The day before we went to Vegas, I thought why do we have these seven little chips – seven chips because we only had one drive, it would be eight when we shipped it – why do I have seven chips when these competitors have fifty chips _and_ a big one, an expensive one? So I pulled open a manual for a competitor’s floppy, I had got somewhere, (and) I started going through it and reading all the data specs of their chip that would do everything.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I finally realised at the end mine would do more, because I could write software that would modify mine, and in not too long a time after that – half a year at the most – I figured out (that) where i was writing four bits before, there were enough codes left over I could actually write eight bits, and all I had to do was extend the timing to allow four microseconds, eight microseconds or twelve.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;So, allowing the twelve caused us a few little analog problems that we worked on (and) had to put in a little corrective part, but boy, that gave us 16 sectors instead of 13 – 16/13 times as much data, by writing programs on the processor, on the host computer (being an Apple II) – it’s software was so involved with the little hardware I’d built (and) with the floppy disk itself, they were just all tied together in my head, it was all one.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I also improved the speed. One of the things is, you had a little head that had to choose a track, that the early floppy disk had thirty-six tracks. You’d be on track one (really zero, that’s where programmers start) and if you wanted to go to track one, *click*, you’d wait 15 milliseconds and it’s there. Then you’d say, go to track ten, and the Shugart drive, with its own circuits which I had ripped out, would go *click* *click* *click*, fifteen milliseconds for each track to make sure it stopped without overshooting.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I said, “Wait a minute…” high-school physics, or anybody’s experience – you push something heavy, you know, a heavy wagon, and it goes faster, if you keep pushing the same it goes faster and faster, and then (you) slow it down. So I got this idea, why don’t I speed up the head that’s moving from track one to track two to track three… speed it up until it’s half-way to the destination – which I know – and then start slowing it down so that it doesn’t overshoot at the end. I made a little table (to calculate the distances) and I love the sound that my disk drive makes!&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;The disk drives in those days, when they went from track one to track twenty, you’d hear “ennnnnnnnnnnh” – this horrible sound like a buzz-saw. Mine went “shew, shew, shew.” Beautiful sounding, and it did it twice as fast.&lt;/p&gt;
&lt;p class=&quot;p6&quot;&gt;&lt;em&gt;Could you please talk a bit more about how you discovered the five-and-three Disk II encoding method?&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;At first, I would just put out a byte of zeroes and one, and every two bits was two four microsecond slots. So if it was “one zero”, it was a switchover and that meant it was a one (bit), and if it was “one one”, it was just a zero bit. So I would put those out, but then I realised that without screwing out the timing that the disk drive was designed for very much, I will let it get it four microsecond chunks, eight microsecond chunks and twelve.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Engineering-wise you design things to be optimal for four and eight, twelve might have had a problem. I realised I could store “five and three”, that’s what gave me sixteen sectors of data instead of thirteen. The code was so hard to write because I was doing this very bad thing of using the microprocessor timing – how long does our microprocessor take for every single instruction, and you have to count on it always being exact and the same, so far a violation of… actually even good design principles back then would have been more generous. But I made up for it by other parts of the design that were so good. So, what I did was I had this tight code, that has to be in loops to get five bits of data in thirty-two microseconds instead of four bits of data, and always loop back – no matter how many loops it took – to loop back and keep the timing exact.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;It was so hard, for about a month I worked on it every single night, starting near the end of the day – figuring out the methodology, the sorts of variables I would have, what they would hold, how they’d be – and then I would start working through the process that was in my head so thoroughly, and I’d get 90% done maybe, by four in the morning, two in the morning, and I’d just be so tired, “I’ll go home and finish it tomorrow.”&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;And I went close to a month thinking I’d always finish it tomorrow, and finally one night – Steve Jobs kept asking me every day, “Where’s the sixteen-bit code, how’s it coming?”&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt; and so finally I stayed all night, I got near the end, 90% done, and I just worked it through and finished it, didn’t have to start over again the next day. That was tough for me.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;After this, there was something that came up that was very important to me. This floppy disk was getting so much notoriety in the company, out of the company, (because it was such an) amazing design – I like engineers to look at my work and say, “How did you ever come up with something such a different way?” I went over to our building where we had some technician groups. They worked with turning designs like mine – I had designed a printer controller code, a serial controller card, Wendell Sanders had designed a modem control card – we would send these control cards over there, and they would work with the company that would make a PC board for it. That was one of the key steps to making a product. Turning a design and wire into a product that can be manufactured, you need a PC board.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;So I went over to that group and they said that their PC board company was kind of busy, but one of the technicians, Cliff Houston, said, “Why don’t you do it yourself?” Well, my gosh, sure I can do it! Okay! I just didn’t know where you get the supplies – he had all the supplies. Laid it out on a drafting board. Clear pieces of mylar, and coloured tape that traces out where all the silver traces on the PC (board) will be, and some layouts that match the pins that the chips would plug in at, and I laid it out and I worked every night for at least a week, maybe two weeks.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;Late late late, the two Houston brothers, Dick and Cliff, would go home – midnight, one, whatever. I always worked past them, and maybe an hour or two… I was working so close, because I wanted my chips to be as close as possible, the wiring to be as short as possible, it was all in line with my design philosophy, and I wanted to take every (possible moment) to lay every little trace as perfectly as it could be. I got (it) done one night, and Cliff Houston came over, and asked, “How many feed-through holes do you have” – that’s where you have to drill a hole to connect the top wire to the bottom (underside) of the board. Very common. A board that size might even have twenty or thirty of them. I had eight, because I had designed to lay out the chips in the exact optimal order. I might have had thirty if I’d done it otherwise, and nobody cares about it, because it’s just the way you do it.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;So he said “Eight, huh?” I said, “Yeah, (but) I figured out that if I had designed the shift register to go left to right instead of right to left” – the shift register was that part that converted eight bits into one and vice-versa – “If I had only designed it the other way, I would’ve had three fewer crossovers,” and he said, “Steve, you mean you’re going to go with less than perfect?” Okay, so that’s a challenge! So what I did is I took it all apart, I ripped off all my little red tapes where the wires would go, thought it out – I redesigned it on paper to be the other way, and then I laid it out – I don’t even know if I ever built one and tested it – and then I laid it out like that and for the next week or two, every night until two to four in the morning.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I came in to a staff meeting, and at the staff meeting Steve Jobs accused me of slacking off for coming in every morning at ten in the morning – he didn’t know I was doing this. You know, that board was so important to me, because it represented myself. So I kind of blew up at that board meeting and explained how late I’d been working every night on a real product. I won that one!&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;So, because I realised that (with) all of my resources, including the microprocessor, the hardware that was extensible through slots, and some software, I could do the job locally and save an awful lot of this mucky-muss of changing a whole bunch of things and to send out bytes with a one-bit for the data’s coming and wait for a zero to say, okay it got received – I just got rid of all of that junk, I like to get rid of middlemen.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I could have done it on any other small computer with a microprocessor that had at least one slot. The only difference the other two personal computers out at the time that you could just take them out of a box and use them, were the Commodore Pet and the TRS-80, and they didn’t have slots to a microprocessor. They had serial busses coming out, but that means that the microprocessor data has to go on a serial bus at a slower speed, and come out and somehow try to direct a floppy disk what to do, and you can’t keep the metadata – where are the files on the disk? – you can’t keep any of that in your RAM when you do that, so they weren’t open to the subject. Our slots made it possible.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;But there were things that called themselves computers before us that weren’t really full computers unless you added so much no person could afford them, and those were like the Altair, and they had slots, and it could’ve been programmed on to a computer like that, or even super-expensive not sold to personal people computers like they had at Intel. I could’ve done the same thing with a floppy disk.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I just thought of it partly because my steps were, (first) I like to minimise everything, get rid of everything you can – I don’t have time for a huge design, to actually build it and construct it and test it and all, and secondly, because I’d never done it before. I just sat down, figuring out that they wanted these four microsecond and eight microsecond chunks – I didn’t know how a floppy disk worked, ever, and then it all started flowing into my head of a trivial way to create it.&lt;/p&gt;
&lt;p class=&quot;p4&quot;&gt;I took out twenty chips that Shugart had to do all that stuff, including the chips from them that would do that little fifteen millisecond track one… track two… track three… track four… they had chips (to) do that. In software I can count fifteen milliseconds so trivially and just send the code out, I don’t need any extra chips.&lt;/p&gt;

</description>
<pubDate>Fri, 18 May 2018 14:42:08 +0000</pubDate>
<dc:creator>empressplay</dc:creator>
<og:type>article</og:type>
<og:title>Steve Wozniak Talks Disk ][ - Paleotronic Magazine</og:title>
<og:description>Paleotronic was lucky enough to be given the chance to have a chat with Apple co-founder and  engineer-extraordinare Steve Wozniak, who gave us a personal look into the development of the Disk II. I like talking [...]</og:description>
<og:url>https://paleotronic.com/2018/05/19/steve-wozniak-talks-disk/</og:url>
<og:image>https://i1.wp.com/paleotronic.com/wp-content/uploads/2018/05/paleotronic0218-300dpi-28.png?fit=1920%2C1357&amp;ssl=1</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://paleotronic.com/2018/05/19/steve-wozniak-talks-disk/</dc:identifier>
</item>
<item>
<title>Data Science Is America’s Hottest Job</title>
<link>https://www.bloomberg.com/news/articles/2018-05-18/-sexiest-job-ignites-talent-wars-as-demand-for-data-geeks-soars</link>
<guid isPermaLink="true" >https://www.bloomberg.com/news/articles/2018-05-18/-sexiest-job-ignites-talent-wars-as-demand-for-data-geeks-soars</guid>
<description>&lt;p&gt;Murray Webb had been a lackluster student more interested in sports than schoolwork while attending a small Virginia college. Then he transferred to Kennesaw State University in suburban Atlanta to pursue a master’s degree in applied statistics and landed four job offers upon graduation. Webb, 33, now earns $160,000 a year targeting health-care customers for hospitals and says he is approached weekly by companies and recruiters seeking data scientists.&lt;/p&gt;


&lt;p&gt;Webb is part of a national employment trend that has data scientists at tech companies such as &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/quote/9865065Z:US&quot; title=&quot;Company Overview&quot;&gt;Airbnb Inc.&lt;/a&gt; and &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/quote/0084207D:US&quot; title=&quot;Company Overview&quot;&gt;Uber Technologies Inc.&lt;/a&gt; adding the words “I’m hiring” next to their LinkedIn.com profiles.&lt;/p&gt;


&lt;p&gt;“The word on the street is there’s definitely a shortage of people who can do data science,” said Daniel Gutierrez, managing editor of the journal insideBIGDATA in Los Angeles. “A lot of people are transitioning from other fields like economics, psychology, mathematics, because they see the field is exploding and there’s money to be made.”&lt;/p&gt;



&lt;p&gt;Indeed, it turns out that even in the wake of &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/quote/FB:US&quot; title=&quot;Company Overview&quot;&gt;Facebook Inc.&lt;/a&gt;’s privacy scandal and other big-data blunders, finding people who can turn social-media clicks and user-posted photos into monetizable binary code is among the biggest challenges facing U.S. industry. People with data science bona fides are among the most sought-after professionals in business, with some data science Ph.Ds commanding as much as $300,000 or more from consulting firms.&lt;/p&gt;


&lt;h3&gt;‘Run on the Bank’&lt;/h3&gt;
&lt;p&gt;“I like to say we’re seeing the employment equivalent of a run on the bank, and it’s because everyone’s chasing the same talent at the same time,” said Jennifer Priestley, a professor of statistics and data science at Kennesaw State University.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;
&lt;div id=&quot;lazy-img-327851587&quot; class=&quot;lazy-img&quot;&gt;&lt;img src=&quot;https://assets.bwbx.io/images/users/iqjWHBFdfxIU/ilfk0W5yfMs0/v0/60x-1.jpg&quot; data-native-src=&quot;https://assets.bwbx.io/images/users/iqjWHBFdfxIU/ilfk0W5yfMs0/v0/-1x-1.jpg&quot; class=&quot;lazy-img__image&quot; data-img-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;news-figure-caption-text caption&quot;&gt;
&lt;p&gt;Murray Webb&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Source: Murray Webb&lt;/p&gt;
&lt;p&gt;Job postings for data scientists rose 75 percent from January 2015 to January 2018 at Indeed.com, while job searches for data scientist roles rose 65 percent. A growing specialty is “sentiment analysis,” or finding a way to quantify how many tweets are trashing your company or praising it.&lt;/p&gt;
&lt;p&gt;A typical data scientist job pays about $119,000 at the midpoint of salaries and rises to $168,000 at the 95th percentile, according to staffing agency Robert Half Technology.&lt;/p&gt;
&lt;h3&gt;‘Compete Differently’&lt;/h3&gt;
&lt;p&gt;Andrew Gardner, a senior machine learning manager in Atlanta at IT security firm Symantec Corp., fields at least one “serious inquiry” weekly from recruiters trying to hire him away even as he’s trying to fill roles at Symantec. To compete for talent, Gardner is offering more perks including the ability to telecommute: “You have to compete a little differently.”&lt;/p&gt;

&lt;p&gt;Aspirants like Jiong Gao, who is pursuing a master’s in data science and analytics at Georgia State University, are rushing to get in while the getting’s good.&lt;/p&gt;
&lt;p&gt;“It’s the sexiest job in the 21st century,” said a grinning Gao, 25, referencing the title of a 2012 Harvard Business Review &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://hbr.org/2012/10/data-scientist-the-sexiest-job-of-the-21st-century&quot; title=&quot;link to article&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;article.&lt;/a&gt; “For everyone who has a background in computers, statistics and mathematics, it’s the hottest job.”&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;
&lt;div id=&quot;lazy-img-327851588&quot; class=&quot;lazy-img&quot;&gt;&lt;img src=&quot;https://assets.bwbx.io/images/users/iqjWHBFdfxIU/izDBo8H9fkN0/v0/60x-1.jpg&quot; data-native-src=&quot;https://assets.bwbx.io/images/users/iqjWHBFdfxIU/izDBo8H9fkN0/v0/-1x-1.jpg&quot; class=&quot;lazy-img__image&quot; data-img-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Source: Jiong Gao&lt;/p&gt;
&lt;p&gt;Companies are begging colleges to let them help with class projects, hoping to get a foot in the door with future data scientists. Atlanta-based &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/quote/EFX:US&quot; title=&quot;Company Overview&quot;&gt;Equifax Inc.&lt;/a&gt; was one of 11 companies doing data science and prescriptive analytics projects with Cornell University this year, with Equifax offering up voluminous data sets scrubbed of personally identifiable information. The official goal was to determine how customers prioritized paying bills, such as whether someone is more prone to paying a mortgage, car or cell phone bill first, said Chris Yasko, who heads a data science research unit at Equifax.&lt;/p&gt;
&lt;p&gt;The unstated goal was making a connection with future graduates.&lt;/p&gt;
&lt;p&gt;&quot;Honey, we have a backlog of companies that want to bring their data into our classroom,” said Priestley “I probably have a conversation with a company every week that wants to do that.”&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;
&lt;div id=&quot;lazy-img-327851559&quot; class=&quot;lazy-img&quot;&gt;&lt;img src=&quot;https://assets.bwbx.io/images/users/iqjWHBFdfxIU/ips7nAIImqtQ/v0/60x-1.jpg&quot; data-native-src=&quot;https://assets.bwbx.io/images/users/iqjWHBFdfxIU/ips7nAIImqtQ/v0/-1x-1.jpg&quot; class=&quot;lazy-img__image&quot; data-img-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;news-figure-caption-text caption&quot;&gt;
&lt;p&gt;Jennifer Priestley&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Source: Jennifer Priestley&lt;/p&gt;
&lt;h3&gt;‘Wild West’&lt;/h3&gt;&lt;p&gt;Equifax is shortening the hiring process to keep anyone from slipping away. A data science candidate interviewed on a Friday had an offer in hand by the following Monday, said Peter Maynard, senior vice president of global analytics. The company hasn’t seen a drop-off in candidate interest despite suffering a data breach that exposed some 146 million people’s personal information, the company said.&lt;/p&gt;
&lt;aside class=&quot;inline-newsletter&quot; data-state=&quot;ready&quot;/&gt;&lt;p&gt;Experts in data science describe a wild west atmosphere right now, with little agreement over how to define the field and scores of people rushing to add “scientist” to their resumes whether or not it’s accurate. A common definition calls data science a meshing of statistics, math and computer science, with practitioners using the Python and R programming languages to create algorithms for things like “recommendation engines” - those programs that predict what you may want to buy next based on your recent searches.&lt;/p&gt;
&lt;p&gt;“It used to be that if you were a mathematician you became a teacher, and then you became a geologist because your knowledge helped find oil, and then you went over to Wall Street,” said Jim Sterne, chairman of the Digital Analytics Association. “And now, the quote is, the best minds of our generation are being put to work in advertising.”&lt;/p&gt;
</description>
<pubDate>Fri, 18 May 2018 13:52:56 +0000</pubDate>
<dc:creator>dsgerard</dc:creator>
<og:description>Murray Webb had been a lackluster student more interested in sports than schoolwork while attending a small Virginia college. Then he transferred to Kennesaw State University in suburban Atlanta to pursue a master’s degree in applied statistics and landed four job offers upon graduation. Webb, 33, now earns $160,000 a year targeting health-care customers for hospitals and says he is approached weekly by companies and recruiters seeking data scientists.</og:description>
<og:image>https://assets.bwbx.io/images/users/iqjWHBFdfxIU/iwHG9VYz_290/v0/1200x800.jpg</og:image>
<og:title>This Is America’s Hottest Job</og:title>
<og:type>article</og:type>
<og:url>https://www.bloomberg.com/news/articles/2018-05-18/-sexiest-job-ignites-talent-wars-as-demand-for-data-geeks-soars</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/news/articles/2018-05-18/-sexiest-job-ignites-talent-wars-as-demand-for-data-geeks-soars</dc:identifier>
</item>
<item>
<title>Jim Black&amp;#039;s Steve Jobs Story</title>
<link>https://m.facebook.com/JamesHBlack/posts/10156560054277932</link>
<guid isPermaLink="true" >https://m.facebook.com/JamesHBlack/posts/10156560054277932</guid>
<description>&lt;p&gt;I had the privilege of working with &lt;a href=&quot;https://m.facebook.com/profile.php?id=100006735798590&amp;amp;__tn__=%2As-R&quot;&gt;John Carmack&lt;/a&gt; as a technology evangelist at Apple when he ported Quake III Arena to Rhapsody, Apple’s internal name for the OpenStep/Mach kernel based MacOS X. I enjoyed John's reminiscence about working with Steve and Apple and thought I would share a few of my own memories from that time which provided me with some of the most satisfying moments and lessons of my career.&lt;/p&gt;
&lt;p&gt;John was the first game developer I ever worked with. Three weeks after I sent him development hardware (an iMac) he informed me that the PC and Mac versions of Quake III Arena were in “feature parity.” I still recall my shock upon reading that email from him.&lt;/p&gt;
&lt;p&gt;John agreed to come to Cupertino and meet with several teams to share his development experiences with them. I picked him up in the lobby of the Fairmont Hotel in downtown San Jose. He stood unassumingly in the lobby, framed in the background by a Christmas Tree.&lt;/p&gt;
&lt;p&gt;On day one, we met with several internal teams at Apple. I was accustomed to see 3rd party developers emerge somewhat awed by their meetings with Apple engineers. In John’s case the reaction was reversed. I’ve never seen anyone grok complex systems and architectures so quickly and thoroughly as John. Amusingly, he walked around the Apple campus unrecognized by all but for the occasional, former NeXT employee.&lt;/p&gt;
&lt;p&gt;On Day 2, John was to meet with Steve. I never knew whether it was by design or not, but on that day John wore a T-shirt that featured a smiley face with a bullet hole in the forehead from which trickled a few drops of blood. After an hour of waiting for Steve in IL1, he marched into the room, and immediately mistook me for John Carmack, extending his hand to shake mine (we had never met). I locked eyes with Steve Jobs and looked down significantly at the Apple badge on my belt. Without missing a beat, Steve shifted his extended hand to John's.&lt;/p&gt;
&lt;p&gt;That’s when Steve noticed the T-shirt and the meeting, as soon as it had begun, took a turn for the worse.&lt;/p&gt;
&lt;p&gt;Steve’s jaw muscles visibly tensed and he became stone-faced. Clearly deeply offended by John’s T-shirt, he sat down at the conference table and looked straight ahead, silent.&lt;/p&gt;
&lt;p&gt;John kicked off the meeting by saying, “So I’ve been working with MacOS for the past month and here’s what I learned.” His #1 concern (at an extremely high level) concerned OpenGL permissions and security for which he felt Apple needed a better solution than what he’d learned about the day before in meetings with the graphics team, even if it came at a slight cost in performance for 3D games. This was, suffice to say, typical of John in that he was approaching an issue from an objective engineering perspective and arguing for the most technically correct solution rather than pushing for something that might be of benefit to his personal projects.&lt;/p&gt;
&lt;p&gt;Steve listened and abruptly said, “That’s not what we’re doing!” Then he looked at the three Apple employees in the room and asked, “Is it?” I confirmed that what John was raising as a concern came from a meeting with the graphics architecture team the day before. Without batting an eye, Steve stood up, tramped over to a Polycom phone and dialed from apparent memory the phone number of the engineering director whose admin informed Steve that he was at an offsite in Palo Alto. Steve hung up, sat down, and about 30 seconds later the phone rang with the engineering director on the line.&lt;/p&gt;
&lt;p&gt;Steve said, “I’m here with a graphics developer. I want you to tell him everything we’re doing in MacOS X from a graphics architecture perspective.” Then he put his elbows on the table and adopted a prayer-like hand pose, listening to and weighing the arguments from his trusted director of engineering and from the game guy with the bloody smiley-face T-shirt.&lt;/p&gt;
&lt;p&gt;And what happened next was one of the most impressive things I’ve ever witnessed about Steve or any Silicon Valley exec. Early on in the discussion, the Apple engineer realized that “graphics engineer” in the room was John Carmack. And he realized that he was going to need to defend his technical decision, on the merits, in front of Steve. After extended back and forth, the Apple engineer said, “John, what you’re arguing for is the ideal …”&lt;/p&gt;
&lt;p&gt;He never made it to the next word because Steve suddenly stood bolt upright, slamming both palms onto the desk and shouting, “NO!!!!”&lt;/p&gt;
&lt;p&gt;“NO!!! What John is saying is NOT the ideal. What John is saying is what we have to do!!! Why are we doing this? Why are we going to all this trouble to build this ship when you’re putting a TORPEDO IN ITS HULL?!!!!”&lt;/p&gt;
&lt;p&gt;All of this was said with the utmost conviction and at extremely high volume. To his credit, John, seated directly next to a yelling Steve Jobs, didn’t even flinch.&lt;/p&gt;
&lt;p&gt;What was so impressive to me in that meeting was not the drama so much as it was that Steve Jobs made a decision on the merits to side with John on a technical issue rather than his longstanding and trusted graphics engineer. He overcame his original distaste for the T-shirt and made the right call. Most CEOs would have dismissed John’s comments or paid them lip service. Steve listened to both sides and made a call that would have long lasting implications for MacOS.&lt;/p&gt;
&lt;p&gt;As a comical aftermath to the story, John next told Steve point blank that the iMac mouse “sucked.” Steve sighed and explained that “iMac was for first-time computer buyers and every study showed that if you put more than one button on the mouse, the users ended up staring at the mouse.” John sat expressionless for 2 seconds, then moved on to another topic without comment.&lt;/p&gt;
&lt;p&gt;After the meeting ended, I walked John to the Apple store on campus (this was before there were actual Apple stores) and asked him on the way what he thought of Steve’s response to the mouse comment. John replied, “I wanted to ask him what would happen if you put more than one key on a keyboard. But I didn’t.”&lt;/p&gt;
&lt;p&gt;Good call, John &lt;span class=&quot;_47e3 _5mfr&quot; title=&quot;smile emoticon&quot;&gt;&lt;img class=&quot;img&quot; height=&quot;16&quot; role=&quot;presentation&quot; src=&quot;https://static.xx.fbcdn.net/images/emoji.php/v9/f4c/1/16/1f642.png&quot; width=&quot;16&quot; alt=&quot;&quot;/&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;_7oe&quot;&gt;:)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 18 May 2018 12:58:21 +0000</pubDate>
<dc:creator>tzhenghao</dc:creator>
<og:title>Jim Black</og:title>
<og:description>I had the privilege of working with John Carmack as a technology evangelist at Apple when he ported Quake III Arena to Rhapsody, Apple’s internal name for the OpenStep/Mach kernel based MacOS X. I...</og:description>
<og:image>https://scontent.fphx1-2.fna.fbcdn.net/v/t1.0-1/cp0/e15/q65/p200x200/13330918_10154313355222932_4749469445887012237_n.jpg?_nc_cat=0&amp;oh=cc28de52ab2d1e6eb6c94bc05675bf9c&amp;oe=5B8D7253</og:image>
<og:url>https://www.facebook.com/story.php?story_fbid=10156560054277932&amp;id=768242931</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://m.facebook.com/JamesHBlack/posts/10156560054277932</dc:identifier>
</item>
<item>
<title>Show HN: Whiteboardfree – Developer Jobs at Companies That Don&amp;#039;t Whiteboard</title>
<link>https://whiteboardfree.com/</link>
<guid isPermaLink="true" >https://whiteboardfree.com/</guid>
<description>&lt;div class=&quot;job-post&quot; readability=&quot;36.432098765432&quot;&gt;&lt;a class=&quot;job-title&quot; href=&quot;https://whiteboardfree.com/job_posts/54&quot;&gt;Backend Engineer&lt;/a&gt;
&lt;p&gt;ROOM8 - San Francisco, CA&lt;/p&gt;
&lt;p&gt;BACKEND ENGINEER ROOM8, a San Francisco based app startup, is expanding our team. We are looking for a Superstar Engineer to help take us to the next level. Applicants should have startup experienc...&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;job-post&quot; readability=&quot;33.037313432836&quot;&gt;&lt;a class=&quot;job-title&quot; href=&quot;https://whiteboardfree.com/job_posts/52&quot;&gt;Software Engineer, Data Engineering&lt;/a&gt;
&lt;p&gt;Lyft - San Francisco, CA&lt;/p&gt;
&lt;p&gt;At Lyft, community is what we are and it’s what we do. It’s what makes us different. To create the best ride for all, we start in our own community by creating an open, inclusive, and diverse organiza...&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;job-post&quot; readability=&quot;32.704918032787&quot;&gt;&lt;a class=&quot;job-title&quot; href=&quot;https://whiteboardfree.com/job_posts/51&quot;&gt;Backend Engineer&lt;/a&gt;
&lt;p&gt;Alluvium - New York, NY&lt;/p&gt;
&lt;p&gt;At Alluvium, we put machine learning to work inside the production lifecycle of industrial operations. Our products provide operators a portal into the stability of that production and a means to ensu...&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;job-post&quot; readability=&quot;35.036734693878&quot;&gt;&lt;a class=&quot;job-title&quot; href=&quot;https://whiteboardfree.com/job_posts/50&quot;&gt;iOS Developer&lt;/a&gt;
&lt;p&gt;Big Nerd Ranch - Atlanta, GA&lt;/p&gt;
&lt;p&gt;At Big Nerd Ranch we empower individuals and organizations to dream big and achieve more through innovative digital product development and training. We do this through our signature immersive bootca...&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;job-post&quot; readability=&quot;27.795918367347&quot;&gt;&lt;a class=&quot;job-title&quot; href=&quot;https://whiteboardfree.com/job_posts/49&quot;&gt;Senior Software Development Engineer - Application &amp;amp; Cloud Services&lt;/a&gt;
&lt;p&gt;GoDaddy - Kirkland, WA&lt;/p&gt;
&lt;p&gt;GoDaddy powers the world's largest cloud platform dedicated to small, independent ventures. With nearly 17 million customers worldwide and over 75 million domain names under management, GoDaddy is the...&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;job-post&quot; readability=&quot;35.389312977099&quot;&gt;&lt;a class=&quot;job-title&quot; href=&quot;https://whiteboardfree.com/job_posts/48&quot;&gt;Front End Engineer&lt;/a&gt;
&lt;p&gt;FaunaDB - San Francisco, CA (Remote OK)&lt;/p&gt;
&lt;p&gt;*Fauna is a remote-first employer based in SF. We work diligently to craft a remote experience where every team and individual thrives. We are a post Series A startup offering the most secure, transac...&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;job-post&quot; readability=&quot;32.54132231405&quot;&gt;&lt;a class=&quot;job-title&quot; href=&quot;https://whiteboardfree.com/job_posts/43&quot;&gt;Frontend Engineer&lt;/a&gt;
&lt;p&gt;Zapier - (Remote OK)&lt;/p&gt;
&lt;p&gt;We're looking for a Frontend Engineer to join the engineering team at Zapier. Want to create a simple product that allows anyone to do complex, incredible things with the world's APIs? Then keep readi...&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;job-post&quot; readability=&quot;29.275092936803&quot;&gt;&lt;a class=&quot;job-title&quot; href=&quot;https://whiteboardfree.com/job_posts/42&quot;&gt;Infrastructure Engineer (Western Hemisphere)&lt;/a&gt;
&lt;p&gt;Zapier - (Remote OK)&lt;/p&gt;
&lt;p&gt;Normally we hire candidates for our Engineering team from anywhere in the world. However, right now we are in need of someone who can help during Western Hemisphere business hours (UTC -2 to UTC -10.)...&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;job-post&quot; readability=&quot;34.918604651163&quot;&gt;&lt;a class=&quot;job-title&quot; href=&quot;https://whiteboardfree.com/job_posts/41&quot;&gt;Principal Software Engineer&lt;/a&gt;
&lt;p&gt;Solarwinds - Austin, Texas&lt;/p&gt;
&lt;p&gt;SolarWinds provides powerful and affordable monitoring and management software that is designed to make jobs easier for IT professionals, MSPs, and DevOps pros. SolarWinds MSPis the world's leading IT...&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;job-post&quot; readability=&quot;32.87456445993&quot;&gt;&lt;a class=&quot;job-title&quot; href=&quot;https://whiteboardfree.com/job_posts/40&quot;&gt;Senior Engineer: Backend Storage&lt;/a&gt;
&lt;p&gt;Digital Ocean - New York, New York (Remote OK)&lt;/p&gt;
&lt;p&gt;DigitalOcean’s Storage Team builds and runs cloud-scale distributed powering internal and customer-facing services and products. We’re creating flexible and powerful solutions that our customers will ...&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;job-post&quot; readability=&quot;33.257261410788&quot;&gt;&lt;a class=&quot;job-title&quot; href=&quot;https://whiteboardfree.com/job_posts/39&quot;&gt;API Engineer&lt;/a&gt;
&lt;p&gt;drchrono - Sunnyvale, CA&lt;/p&gt;
&lt;p&gt;If revolutionizing healthcare excites you, join our growing team and help us achieve our mission to build better software for doctors and patients and improve healthcare for all. drchrono was founded ...&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;job-post&quot; readability=&quot;36.552941176471&quot;&gt;&lt;a class=&quot;job-title&quot; href=&quot;https://whiteboardfree.com/job_posts/38&quot;&gt;Python Developer&lt;/a&gt;
&lt;p&gt;GitPrime - Durango, CO (Remote OK)&lt;/p&gt;
&lt;p&gt;Fantastic opportunity for an ambitious programmer. Our stack: React, Python/Django, Postgres on AWS. We have plenty of work at all levels of the code -- so whether you want to focus on customer-facing...&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;job-post&quot; readability=&quot;32.571428571429&quot;&gt;&lt;a class=&quot;job-title&quot; href=&quot;https://whiteboardfree.com/job_posts/37&quot;&gt;Senior Software Engineer&lt;/a&gt;
&lt;p&gt;Netflix - Los Gatos, CA&lt;/p&gt;
&lt;p&gt;Netflix is disrupting the way content is created and viewed around the world. Our 100+ million global subscribers stream billions of hours of Netflix Originals, TV shows, and movies. Personalization i...&lt;/p&gt;
&lt;/div&gt;

</description>
<pubDate>Fri, 18 May 2018 12:57:01 +0000</pubDate>
<dc:creator>vbordo</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://whiteboardfree.com/</dc:identifier>
</item>
</channel>
</rss>