<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Nuklear: A single-header ANSI C GUI library</title>
<link>https://github.com/vurtun/nuklear</link>
<guid isPermaLink="true" >https://github.com/vurtun/nuklear</guid>
<description>&lt;h3&gt;Readme.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/vurtun/nuklear&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/e371dd25dfe791d50cb104097ad159b685d4c56c/68747470733a2f2f7472617669732d63692e6f72672f76757274756e2f6e756b6c6561722e737667&quot; alt=&quot;Build Status&quot; data-canonical-src=&quot;https://travis-ci.org/vurtun/nuklear.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a minimal state immediate mode graphical user interface toolkit written in ANSI C and licensed under public domain. It was designed as a simple embeddable user interface for application and does not have any dependencies, a default render backend or OS window and input handling but instead provides a very modular library approach by using simple input state for input and draw commands describing primitive shapes as output. So instead of providing a layered library that tries to abstract over a number of platform and render backends it only focuses on the actual UI.&lt;/p&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Immediate mode graphical user interface toolkit&lt;/li&gt;
&lt;li&gt;Single header library&lt;/li&gt;
&lt;li&gt;Written in C89 (ANSI C)&lt;/li&gt;
&lt;li&gt;Small codebase (~18kLOC)&lt;/li&gt;
&lt;li&gt;Focus on portability, efficiency and simplicity&lt;/li&gt;
&lt;li&gt;No dependencies (not even the standard library if not wanted)&lt;/li&gt;
&lt;li&gt;Fully skinnable and customizable&lt;/li&gt;
&lt;li&gt;Low memory footprint with total memory control if needed or wanted&lt;/li&gt;
&lt;li&gt;UTF-8 support&lt;/li&gt;
&lt;li&gt;No global or hidden state&lt;/li&gt;
&lt;li&gt;Customizable library modules (you can compile and use only what you need)&lt;/li&gt;
&lt;li&gt;Optional font baker and vertex buffer output&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rawgit.com/vurtun/nuklear/master/doc/nuklear.html&quot; rel=&quot;nofollow&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Building&lt;/h2&gt;
&lt;p&gt;This library is self contained in one single header file and can be used either in header only mode or in implementation mode. The header only mode is used by default when included and allows including this header in other headers and does not contain the actual implementation.&lt;/p&gt;
&lt;p&gt;The implementation mode requires to define the preprocessor macro &lt;code&gt;NK_IMPLEMENTATION&lt;/code&gt; in &lt;em&gt;one&lt;/em&gt; .c/.cpp file before &lt;code&gt;#include&lt;/code&gt;ing this file, e.g.:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
#&lt;span class=&quot;pl-k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;NK_IMPLEMENTATION&lt;/span&gt;
#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;nuklear.h&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;IMPORTANT: Every time you include &quot;nuklear.h&quot; you have to define the same optional flags. This is very important not doing it either leads to compiler errors or even worse stack corruptions.&lt;/p&gt;
&lt;h2&gt;Gallery&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.githubusercontent.com/assets/8057201/11761525/ae06f0ca-a0c6-11e5-819d-5610b25f6ef4.gif&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/11761525/ae06f0ca-a0c6-11e5-819d-5610b25f6ef4.gif&quot; alt=&quot;screenshot&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://cloud.githubusercontent.com/assets/8057201/13538240/acd96876-e249-11e5-9547-5ac0b19667a0.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/13538240/acd96876-e249-11e5-9547-5ac0b19667a0.png&quot; alt=&quot;screen&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://cloud.githubusercontent.com/assets/8057201/13538243/b04acd4c-e249-11e5-8fd2-ad7744a5b446.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/13538243/b04acd4c-e249-11e5-8fd2-ad7744a5b446.png&quot; alt=&quot;screen2&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://cloud.githubusercontent.com/assets/8057201/9976995/e81ac04a-5ef7-11e5-872b-acd54fbeee03.gif&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/9976995/e81ac04a-5ef7-11e5-872b-acd54fbeee03.gif&quot; alt=&quot;node&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://cloud.githubusercontent.com/assets/8057201/15991632/76494854-30b8-11e6-9555-a69840d0d50b.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/15991632/76494854-30b8-11e6-9555-a69840d0d50b.png&quot; alt=&quot;skinning&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://cloud.githubusercontent.com/assets/8057201/14902576/339926a8-0d9c-11e6-9fee-a8b73af04473.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/14902576/339926a8-0d9c-11e6-9fee-a8b73af04473.png&quot; alt=&quot;gamepad&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt; init gui state &lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; nk_context ctx;
&lt;span class=&quot;pl-en&quot;&gt;nk_init_fixed&lt;/span&gt;(&amp;amp;ctx, calloc(&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, MAX_MEMORY), MAX_MEMORY, &amp;amp;font);

&lt;span class=&quot;pl-k&quot;&gt;enum&lt;/span&gt; {EASY, HARD};
&lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; op = EASY;
&lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; value = &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;6f&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; i =  &lt;span class=&quot;pl-c1&quot;&gt;20&lt;/span&gt;;

&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (nk_begin(&amp;amp;ctx, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Show&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, nk_rect(&lt;span class=&quot;pl-c1&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;220&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;220&lt;/span&gt;),
    NK_WINDOW_BORDER|NK_WINDOW_MOVABLE|NK_WINDOW_CLOSABLE)) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt; fixed widget pixel width &lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;nk_layout_row_static&lt;/span&gt;(&amp;amp;ctx, &lt;span class=&quot;pl-c1&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;);
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;nk_button_label&lt;/span&gt;(&amp;amp;ctx, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;button&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)) {
        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt; event handling &lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
    }

    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt; fixed widget window ratio width &lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;nk_layout_row_dynamic&lt;/span&gt;(&amp;amp;ctx, &lt;span class=&quot;pl-c1&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;);
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;nk_option_label&lt;/span&gt;(&amp;amp;ctx, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;easy&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, op == EASY)) op = EASY;
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;nk_option_label&lt;/span&gt;(&amp;amp;ctx, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;hard&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, op == HARD)) op = HARD;

    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt; custom widget pixel width &lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;nk_layout_row_begin&lt;/span&gt;(&amp;amp;ctx, NK_STATIC, &lt;span class=&quot;pl-c1&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;);
    {
        &lt;span class=&quot;pl-c1&quot;&gt;nk_layout_row_push&lt;/span&gt;(&amp;amp;ctx, &lt;span class=&quot;pl-c1&quot;&gt;50&lt;/span&gt;);
        &lt;span class=&quot;pl-c1&quot;&gt;nk_label&lt;/span&gt;(&amp;amp;ctx, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Volume:&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, NK_TEXT_LEFT);
        &lt;span class=&quot;pl-c1&quot;&gt;nk_layout_row_push&lt;/span&gt;(&amp;amp;ctx, &lt;span class=&quot;pl-c1&quot;&gt;110&lt;/span&gt;);
        &lt;span class=&quot;pl-c1&quot;&gt;nk_slider_float&lt;/span&gt;(&amp;amp;ctx, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &amp;amp;value, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;0f&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;1f&lt;/span&gt;);
    }
    &lt;span class=&quot;pl-c1&quot;&gt;nk_layout_row_end&lt;/span&gt;(&amp;amp;ctx);
}
&lt;span class=&quot;pl-en&quot;&gt;nk_end&lt;/span&gt;(&amp;amp;ctx);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.githubusercontent.com/assets/8057201/10187981/584ecd68-675c-11e5-897c-822ef534a876.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/10187981/584ecd68-675c-11e5-897c-822ef534a876.png&quot; alt=&quot;example&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Bindings&lt;/h2&gt;
&lt;p&gt;There are a number of nuklear bindings for different languges created by other authors. I cannot atest for their quality since I am not necessarily proficient in either of these languages. Furthermore there are no guarantee that all bindings will always be kept up to date:&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;p&gt;Developed by Micha Mettke and every direct or indirect contributor to the GitHub.&lt;/p&gt;
&lt;p&gt;Embeds &lt;code&gt;stb_texedit&lt;/code&gt;, &lt;code&gt;stb_truetype&lt;/code&gt; and &lt;code&gt;stb_rectpack&lt;/code&gt; by Sean Barret (public domain) Embeds &lt;code&gt;ProggyClean.ttf&lt;/code&gt; font by Tristan Grimmer (MIT license).&lt;/p&gt;
&lt;p&gt;Big thank you to Omar Cornut (ocornut@github) for his &lt;a href=&quot;https://github.com/ocornut/imgui&quot;&gt;imgui&lt;/a&gt; library and giving me the inspiration for this library, Casey Muratori for handmade hero and his original immediate mode graphical user interface idea and Sean Barret for his amazing single header &lt;a href=&quot;https://github.com/nothings/stb&quot;&gt;libraries&lt;/a&gt; which restored my faith in libraries and brought me to create some of my own.&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;------------------------------------------------------------------------------
This software is available under 2 licenses -- choose whichever you prefer.
------------------------------------------------------------------------------
ALTERNATIVE A - MIT License
Copyright (c) 2017 Micha Mettke
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the &quot;Software&quot;), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
------------------------------------------------------------------------------
ALTERNATIVE B - Public Domain (www.unlicense.org)
This is free and unencumbered software released into the public domain.
Anyone is free to copy, modify, publish, use, compile, sell, or distribute this
software, either in source code form or as a compiled binary, for any purpose,
commercial or non-commercial, and by any means.
In jurisdictions that recognize copyright laws, the author or authors of this
software dedicate any and all copyright interest in the software to the public
domain. We make this dedication for the benefit of the public at large and to
the detriment of our heirs and successors. We intend this dedication to be an
overt act of relinquishment in perpetuity of all present and future rights to
this software under copyright law.
THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-----------------------------------------------------------------------------
&lt;/code&gt;
&lt;/pre&gt;&lt;/article&gt;</description>
<pubDate>Sat, 10 Feb 2018 13:31:33 +0000</pubDate>
<dc:creator>mpweiher</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/8057201?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>vurtun/nuklear</og:title>
<og:url>https://github.com/vurtun/nuklear</og:url>
<og:description>nuklear - A single-header ANSI C gui library</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/vurtun/nuklear</dc:identifier>
</item>
<item>
<title>The insane amount of backward compatibility in Google Maps</title>
<link>https://www.tnhh.net/posts/google-maps-insane-backward-compatibility.html</link>
<guid isPermaLink="true" >https://www.tnhh.net/posts/google-maps-insane-backward-compatibility.html</guid>
<description>&lt;p&gt;I still keep a couple of my favorite old smartphones. Sometimes I use one of them as my primary device for fun. Phones are among the fastest evolving markets, even a year makes a whole lot of differences. One of the biggest challenges with using old phones is the software: they don’t run modern software. And old software isn’t compatible with new websites, frameworks, encryption standards, APIs. Use an old device, and you will find yourself unable to get anything done. Every app crashes or complains that it can’t connect to the server. Even with Apple who is doing a fantastic job of keeping their phones updated, you may notice that many sites and apps have started dropping support for the iPhone 5, which is still a totally capable device.&lt;/p&gt;
&lt;p&gt;But there is always an unlikely app that consistently works on all of my devices, regardless of their OS and how old they are: &lt;em&gt;Google Maps&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Google Maps still works today on Android 1.0, the earliest version available (Maps actually still works with some of the beta versions before that). I believe Maps was only a prototype app in Android 1.0. If I recall correctly, Google didn’t have any official real device to run Android 1.0. That was back all the way in 2007.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/android10.png&quot; alt=&quot;Google Maps Android 1.0&quot;/&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/android11.png&quot; alt=&quot;Google Maps Android 1.0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;But then, you say, Android is Google’s OS for Pete’s sake. How about iOS? Google Maps for iOS 1.0, released late 2012, still works just fine. That was the first version of Google Maps ever released as a standalone app after Apple ditched Google’s map solution on iOS:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/ios70.png&quot; alt=&quot;Google Maps iOS 7&quot;/&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/ios71.png&quot; alt=&quot;Google Maps iOS 7&quot;/&gt;&lt;/p&gt;
&lt;p&gt;But wait… There is more. This is native iOS Maps on iOS 6, which was released in early 2012, and it still works. I just noticed that the Normal and Hybrid map modes stopped working recently, but that’s alright, I can still navigate (plus, I can always download and use Google’s official app on iOS 6):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/ios60.png&quot; alt=&quot;Google Maps iOS 6&quot;/&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/ios61.png&quot; alt=&quot;Google Maps iOS 6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;But that’s only 6 years ago. Let’s go hardcore. How about Google Maps on Java phones (the dumb bricks that run Java “midlets” or whatever the ancient Greeks call it)? It works too. Note that, other than Google Maps and Opera Mini, I do not note many Internet “midlets” that still work, &lt;a href=&quot;http://blog.textit.in/your-path-to-a-$16b-exit-build-a-j2me-app&quot;&gt;including Whatsapp that is praised for their willingness to deal with ancient phones&lt;/a&gt;. Whatsapp actually has a time-bomb programmed in the app of some sort and it will kick you out if it realizes that it hasn’t been updated recently. What a dumb idea.&lt;/p&gt;
&lt;p&gt;Back to Google Maps. The app (? - applet? midlet?) was last updated in 2008, but even street view works today:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/j2me0.png&quot; alt=&quot;Google Maps J2ME&quot;/&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/j2me1.png&quot; alt=&quot;Google Maps J2ME&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Now if that hasn’t impressed you yet, let me introduce you to my Palm Treo 755p, released in 2007.&lt;/p&gt;
&lt;p&gt;The phone runs Palm OS 5. It doesn’t understand Unicode. Of course, it has no idea what an “emoji” is. When you send it a text message that has one character outside of the printable ASCII range, it freaks out and corrupts the whole message. It doesn’t have Wifi of any kind. It doesn’t even connect to the Sprint’s 2G EV-DO/1xRTT network (because the data provision server is long dead). In short, it has no easy way to connect to the Internet at all. In order to get the thing to connect to the Internet, I had to fucking emulate a Dial-up Modem over Bluetooth using a Raspberry Pi. Since then, I have repurposed my Raspberry Pi, and it was painful to set up so I don’t have a picture of Google Maps working now.&lt;/p&gt;
&lt;p&gt;This was last year: Seemed like there was only one person left in this world who was still using that “app” in 2017, and that was me. The Palm OS didn’t even have screenshot functionality. But lo and behold, Google Maps worked (There are some missing loading tiles in the picture because I wanted to test wheter it worked offline with cached tiles, and it did):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/palmos0.jpg&quot; alt=&quot;Google Maps PalmOS&quot;/&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/palmos1.jpg&quot; alt=&quot;Google Maps PalmOS&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The only exception to me on Google Maps, so far, was the WebOS map app (released in 2009). It doesn’t work anymore – but forget about that, there is an unofficial app that runs on WebOS that still works today:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/webos0.png&quot; alt=&quot;Google Maps WebOS 2&quot;/&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/webos1.png&quot; alt=&quot;Google Maps WebOS 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;And they all work with the &lt;a href=&quot;https://www.justinobeirne.com/google-maps-moat/&quot;&gt;newest maps data&lt;/a&gt;. The Steve Jobs auditorium is in a new building.&lt;/p&gt;
&lt;p&gt;Even in old versions, Google Maps had different layers and turn-by-turn navigation, and sometimes Street view - it is and has always been functional and useful. It is a relatively complex application, having that level of backward compatibility and functionality maintained is a great thing. Regardless whether all this compatibility is intentional or not, I think it is a very respectable achievement. Google Maps took something that is already good and make it even better over the years without compromising. That can’t be said with everything Google did, especially compared to Talk/Hangouts, which I mentioned in &lt;a href=&quot;https://www.tnhh.net/posts/google-talk.html&quot;&gt;my previous rant&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I noticed that the only other product I see running well on old devices is Google search, which works with many kinds of old browsers. Gmail in general is bad about legacy support, although in many cases you can still access a limited version of Gmail on a web browser. The lack of legacy support of Gmail is partly due to its encryption protocol requirements. I do understand that, though: Emails are incredibly personal, giving up legacy compatibility for security is a worthy cause.&lt;/p&gt;
&lt;p&gt;I hope regardless of what feature or architectural change happens to Maps to the future, the team keep testing and maintaining this legendary compatibility in Google Maps. We’ll never know how valuable it is until we’re lost in the middle of nowhere. In that moment, we’d be so thankful to find out that Google Maps still works on our ancient phone that is left in the glovebox.&lt;/p&gt;
&lt;p&gt;Disclaimer: Except for the Android 1.0 app and the midlet were run emulated on software, everything else ran on real hardware. I do not expect that to make any difference on real hardware.&lt;/p&gt;
&lt;hr/&gt;&lt;footer role=&quot;contentinfo&quot; readability=&quot;3&quot;&gt;
&lt;p class=&quot;byline&quot;&gt;&lt;strong&gt;The insane amount of backward compatibility in Google Maps&lt;/strong&gt; was published on &lt;time datetime=&quot;2018-02-09T00:00:00+00:00&quot;&gt;February 09, 2018&lt;/time&gt;.&lt;/p&gt;
&lt;/footer&gt;</description>
<pubDate>Sat, 10 Feb 2018 12:47:15 +0000</pubDate>
<dc:creator>jimmies</dc:creator>
<og:type>article</og:type>
<og:title>The insane amount of backward compatibility in Google Maps</og:title>
<og:description>I still keep a couple of my favorite old smartphones. Sometimes I use one of them as my primary device for fun. Phones are among the fastest evolving markets, even a year makes a whole lot of differences. One of the biggest challenges with using old phones is the software: they don’t run modern software. And old software isn’t compatible with new websites, frameworks, encryption standards, APIs. Use an old device, and you will find yourself unable to get anything done. Every app crashes or complains that it can’t connect to the server. Even with Apple who is doing a fantastic job of keeping their phones updated, you may notice that many sites and apps have started dropping support for the iPhone 5, which is still a totally capable device.</og:description>
<og:url>https://www.tnhh.net/posts/google-maps-insane-backward-compatibility.html</og:url>
<og:image>https://www.tnhh.net/images/default-thumb.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.tnhh.net/posts/google-maps-insane-backward-compatibility.html</dc:identifier>
</item>
<item>
<title>Quiet for Android – TCP over sound</title>
<link>https://github.com/quiet/org.quietmodem.Quiet</link>
<guid isPermaLink="true" >https://github.com/quiet/org.quietmodem.Quiet</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://discordapp.com/invite/eRw5UjF&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/c49e84a4d16e6e7d7103edba859dcb74d92912c4/68747470733a2f2f646973636f72646170702e636f6d2f6170692f6775696c64732f3239303938353634383035343230363436342f656d6265642e706e673f7374796c653d736869656c64&quot; alt=&quot;Quiet Modem Chat&quot; data-canonical-src=&quot;https://discordapp.com/api/guilds/290985648054206464/embed.png?style=shield&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;org.quietmodem.Quiet allows you to pass data through the speakers on your Android device. This library can operate either as a raw frame layer or as a UDP/TCP stack.&lt;/p&gt;
&lt;p&gt;This package contains prebuilt library files for &lt;a href=&quot;https://github.com/quiet/quiet&quot;&gt;libquiet&lt;/a&gt; and &lt;a href=&quot;https://github.com/quiet/quiet-lwip&quot;&gt;quiet-lwip&lt;/a&gt; as well as their dependencies. On top of that, it adds Java bindings which closely mimic the familiar interfaces from the java.net.* package.&lt;/p&gt;
&lt;p&gt;This package is provided under the 3-clause BSD license. The licenses of its dependencies are also included and are licensed under a mix of BSD and MIT.&lt;/p&gt;
&lt;p&gt;Quiet comes with support for armeabi-v7a, arm64-v8a, x86, and x86_64. It requires Android API 14 for 32-bit mode and API 21 for 64-bit mode. It requires only the &lt;code&gt;RECORD_AUDIO&lt;/code&gt; permission.&lt;/p&gt;
&lt;p&gt;For testing purposes, Genymotion is highly recommended over the default emulator. Genymotion provides access to the microphone while the default Android Studio one does not and will throw an exception when Quiet attempts to use the microphone.&lt;/p&gt;
&lt;h2&gt;Why sound? Isn't that outdated?&lt;/h2&gt;
&lt;p&gt;If you are old enough, you may remember using dial-up modems to connect to the internet. In a sense, this package brings that back. While it's true that this is somewhat of a retro approach, consider the advantages of using sound.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;Highly cross-platform. Any device with speakers and a microphone and sufficient computational power can use this medium to communicate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No pairing. Unlike Bluetooth, sound can be used instantly without the need to pair devices. This reduces the friction and improves the user experience.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Embeddable content. Similar to a QR code, short packets of data can be encoded into streaming or recorded audio and can then be later decoded by this package.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;What does it sound like?&lt;/h2&gt;
&lt;p&gt;The answer to this depends on which operating mode you choose. Quiet provides audible and near-ultrasonic modes. Audible modes sound something like a puff of air. The near-ultrasonic modes run at 17+kHz and are virtually inaudible to adults. Either mode can operate at relatively low volumes as long as there isn't too much background noise.&lt;/p&gt;
&lt;h2&gt;How fast does it go?&lt;/h2&gt;
&lt;p&gt;Quiet's provided audible mode transfers at approximately 7kbps. In cases where two devices are connected over a cable (via 3.5mm jack) it can run in cable mode, which transfers at approximately 64kbps.&lt;/p&gt;
&lt;h2&gt;Other Platforms&lt;/h2&gt;
&lt;p&gt;Desktop/Laptop: &lt;a href=&quot;https://github.com/quiet/quiet&quot;&gt;libquiet&lt;/a&gt; and &lt;a href=&quot;https://github.com/quiet/quiet-lwip&quot;&gt;quiet-lwip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Javascript: &lt;a href=&quot;https://github.com/quiet/quiet-js&quot;&gt;quiet-js&lt;/a&gt; (&lt;em&gt;UDP/TCP coming soon&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;iOS: &lt;a href=&quot;https://github.com/quiet/QuietModemKit&quot;&gt;QuietModemKit&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Apps that use org.quietmodem.Quiet&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alexbirkett/QuietShare&quot;&gt;Quiet Share&lt;/a&gt; - A proof of concept app that allows text and links to be shared from one device to another.&lt;/p&gt;

&lt;p&gt;Quiet can be used either as a raw frame layer or in UDP/TCP mode. For the latter, it provides the &lt;a href=&quot;https://savannah.nongnu.org/projects/lwip/&quot; rel=&quot;nofollow&quot;&gt;lwIP TCP stack&lt;/a&gt; which operates entirely independently from the stack provided by Android.&lt;/p&gt;
&lt;p&gt;Make sure to have the &lt;a href=&quot;https://developer.android.com/ndk/index.html&quot; rel=&quot;nofollow&quot;&gt;Android NDK&lt;/a&gt; installed and set the location of it at &lt;code&gt;ndk.dir&lt;/code&gt; in &lt;code&gt;local.properties&lt;/code&gt;. This is necessary to build the JNI wrapper included in this project.&lt;/p&gt;
&lt;h2&gt;Frame Mode&lt;/h2&gt;
&lt;p&gt;Assuming we're working from MainActivity.java, we start with&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;java.io.IOException&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;org.quietmodem.Quiet.*&lt;/span&gt;;

&lt;span class=&quot;pl-smi&quot;&gt;FrameReceiverConfig&lt;/span&gt; receiverConfig &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;
&lt;span class=&quot;pl-smi&quot;&gt;FrameTransmitterConfig&lt;/span&gt; transmitterConfig &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;

&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
    transmitterConfig &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;FrameTransmitterConfig&lt;/span&gt;(
            &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;,
            &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;audible-7k-channel-0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
    receiverConfig &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;FrameReceiverConfig&lt;/span&gt;(
            &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;,
            &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;audible-7k-channel-0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
} &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;IOException&lt;/span&gt; e) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; could not build configs&lt;/span&gt;
}

&lt;span class=&quot;pl-smi&quot;&gt;FrameReceiver&lt;/span&gt; receiver &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;
&lt;span class=&quot;pl-smi&quot;&gt;FrameTransmitter&lt;/span&gt; transmitter &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;

&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
    receiver &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;FrameReceiver&lt;/span&gt;(receiverConfig);
    transmitter &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;FrameTransmitter&lt;/span&gt;(transmitterConfig);
} &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;ModemException&lt;/span&gt; e) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; could not set up receiver/transmitter&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This sets up our transmitter and receiver using the packaged configuration. We choose the audible mode here. Now we can transmit.&lt;/p&gt;
&lt;p&gt;On one side we might run&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; set receiver to block until a frame is received&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; by default receivers are nonblocking&lt;/span&gt;
receiver&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;setBlocking(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;);

&lt;span class=&quot;pl-k&quot;&gt;byte&lt;/span&gt;[] buf &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;pl-c1&quot;&gt;1024&lt;/span&gt;];
&lt;span class=&quot;pl-k&quot;&gt;long&lt;/span&gt; recvLen &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
    recvLen &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; receiver&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;receive(buf);
} &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;IOException&lt;/span&gt; e) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; read timed out&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And on the other side&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt; payload &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello, World!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
    transmitter&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;send(payload&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getBytes());
} &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;IOException&lt;/span&gt; e) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; our message might be too long or the transmit queue full&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's enough to send our frame across. Frame mode is useful when we want to send small bits of data that can easily fit in one frame and do not need a concept of a sender or receiver, that is, frames are a broadcast medium.&lt;/p&gt;
&lt;h2&gt;UDP/TCP Mode&lt;/h2&gt;
&lt;p&gt;If we want to do interactions between two devices, or if we'd like retransmits and automatic data segmentation, then TCP is the way to go.&lt;/p&gt;
&lt;p&gt;First we build a new NetworkInterface.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;java.io.IOException&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;java.net.SocketException&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;org.quietmodem.Quiet.*&lt;/span&gt;;

&lt;span class=&quot;pl-smi&quot;&gt;FrameReceiverConfig&lt;/span&gt; receiverConfig &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;
&lt;span class=&quot;pl-smi&quot;&gt;FrameTransmitterConfig&lt;/span&gt; transmitterConfig &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;

&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
    transmitterConfig &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;FrameTransmitterConfig&lt;/span&gt;(
            &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;,
            &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;audible-7k-channel-0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
    receiverConfig &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;FrameReceiverConfig&lt;/span&gt;(
            &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;,
            &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;audible-7k-channel-0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
} &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;IOException&lt;/span&gt; e) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; could not build configs&lt;/span&gt;
}

&lt;span class=&quot;pl-smi&quot;&gt;NetworkInterfaceConfig&lt;/span&gt; conf &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;NetworkInterfaceConfig&lt;/span&gt;(
            receiverConfig,
            transmitterConfig);

&lt;span class=&quot;pl-smi&quot;&gt;NetworkInterface&lt;/span&gt; intf &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
    intf &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;NetworkInterface&lt;/span&gt;(conf);
} &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;ModemException&lt;/span&gt; e) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; network interface failure&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This example omits an IP address and netmask from &lt;code&gt;NetworkInterfaceConfig()&lt;/code&gt; which tells Quiet to create an Auto IP. This will automatically assign our interface an address, although it does take several seconds to probe and settle on an address once we instantiate the interface.&lt;/p&gt;
&lt;p&gt;If we're using Quiet in an ad-hoc manner, we'll need to discover any peers nearby. We can do this by using a broadcast UDP packet.&lt;/p&gt;
&lt;p&gt;On each side we might run something like this.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; org.quietmodem.Quiet.DatagramSocket&lt;/span&gt;
&lt;span class=&quot;pl-smi&quot;&gt;DatagramSocket&lt;/span&gt; s &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; bind to wildcard:3333 -- note that this is&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; using org.quietmodem.Quiet.InetSocketAddress&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; not java.net.InetSocketAddress&lt;/span&gt;
    sSend &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;DatagramSocket&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;InetSocketAddress&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;0.0.0.0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3333&lt;/span&gt;));
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; listen on 3334&lt;/span&gt;
    sRecv &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;DatagramSocket&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;InetSocketAddress&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;0.0.0.0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3334&lt;/span&gt;));

    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; don't block for more than 10 seconds&lt;/span&gt;
    sRecv&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;setSoTimeout(&lt;span class=&quot;pl-c1&quot;&gt;10000&lt;/span&gt;);

    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; get broadcast permission&lt;/span&gt;
    sSend&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;setBroadcast(&lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;);
} &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;SocketException&lt;/span&gt; e) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; exception creating DatagramSocket&lt;/span&gt;
}

&lt;span class=&quot;pl-k&quot;&gt;byte&lt;/span&gt;[] send &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;MARCO&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getBytes();
&lt;span class=&quot;pl-k&quot;&gt;byte&lt;/span&gt;[] recv &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;pl-c1&quot;&gt;1024&lt;/span&gt;];
&lt;span class=&quot;pl-smi&quot;&gt;InetSocketAddress&lt;/span&gt; peer &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; get ready to do a broadcast to port 3334&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; again, this is org.quietmodem.Quiet.DatagramPacket&lt;/span&gt;
    &lt;span class=&quot;pl-smi&quot;&gt;DatagramPacket&lt;/span&gt; p &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;DatagramPacket&lt;/span&gt;(send, send&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;length,
                    &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;InetSocketAddress&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;169.254.255.255&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3334&lt;/span&gt;));
    &lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
        sSend&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;send(p);
    } &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;IOException&lt;/span&gt; e) {
        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; exception sending on DatagramSocket&lt;/span&gt;
    }

    &lt;span class=&quot;pl-smi&quot;&gt;DatagramPacket&lt;/span&gt; pRecv &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;DatagramPacket&lt;/span&gt;(recv, recv&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;length);
    &lt;span class=&quot;pl-k&quot;&gt;boolean&lt;/span&gt; received &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;false&lt;/span&gt;;
    &lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
        sRecv&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;receive(pRecv);

        received &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;;
        peer &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; pRecv&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getSocketAddress();

        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; respond so that the other peer knows we're here&lt;/span&gt;
        p&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;setData(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;POLO&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getBytes());
        p&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;setSocketAddress(peer);
        sSend&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;send(p);
    } &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;IOException&lt;/span&gt; e) {
        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; exception receiving on DatagramSocket&lt;/span&gt;
    }

    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (received) {
        &lt;span class=&quot;pl-k&quot;&gt;break&lt;/span&gt;;
    }

    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; our 10-second read timeout acts as a sleep&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; continue broadcasting until we get a bite&lt;/span&gt;
}

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; now use the peer's address somehow....&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; continue sending UDP or establish a TCP connection&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; on another port&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; when finished, close sSend, sRecv and intf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/article&gt;</description>
<pubDate>Sat, 10 Feb 2018 06:07:11 +0000</pubDate>
<dc:creator>adulau</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/17815378?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>quiet/org.quietmodem.Quiet</og:title>
<og:url>https://github.com/quiet/org.quietmodem.Quiet</og:url>
<og:description>org.quietmodem.Quiet - Quiet for Android - TCP over sound</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/quiet/org.quietmodem.Quiet</dc:identifier>
</item>
<item>
<title>In web design, everything easy is hard again</title>
<link>https://frankchimero.com/writing/everything-easy-is-hard-again/</link>
<guid isPermaLink="true" >https://frankchimero.com/writing/everything-easy-is-hard-again/</guid>
<description>&lt;div class=&quot;section title&quot;&gt;

&lt;img src=&quot;https://frankchimero.com/writing/everything-easy-is-hard-again/images/everythingeasy.svg&quot;/&gt;&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;23&quot;&gt;&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/speaking.png&quot; class=&quot;tinycentered&quot;/&gt;&lt;p&gt;This past summer, I gave a lecture at a web conference and afterward got into a fascinating conversation with a young digital design student. It was fun to compare where we were in our careers. I had fifteen years of experience designing for web clients, she had one year, and yet some how, we were in the same situation: we enjoyed the work, but were utterly confused and overwhelmed by the rapidly increasing complexity of it all. What the hell happened? (That’s a rhetorical question, of course.)&lt;/p&gt;
&lt;p&gt;It was a relief for both of us to mutually confess our frustration and confusion, and I began to wonder if this situation was something to laugh off or take seriously. Neither of us had an answer, but a bit of time and distance has shown me that we must do both. I’d like to extend that conversation today and attempt to capture my perspective on that confusion and what it costs us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section fade&quot; readability=&quot;34.757785467128&quot;&gt;
&lt;p&gt;Absence was the primary source of my confusion. Three years ago, I stopped making websites for clients to focus on &lt;a href=&quot;http://goabstract.com&quot;&gt;Abstract&lt;/a&gt;, a software company I co-founded. My work there finished at the beginning of last year, and after a little time off, I decided to reopen the design studio I was running beforehand.&lt;/p&gt;
&lt;p&gt;And wouldn’t you know it? The first few jobs through the door were websites. A lot can change in three years, so I decided to brush up on the latest developments in how to best make websites… and oh my…&lt;/p&gt;
&lt;p&gt;Things have gotten messy, haven’t they?&lt;/p&gt;
&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/whoa.png&quot; class=&quot;tinycentered&quot;/&gt;&lt;hr/&gt;&lt;p&gt;The complexity was off-putting at first. I was unsure if I even wanted tackle a website after seeing the current working methods. Eventually, I agreed to the projects. My gut told me that a lot of the new complexities in workflows, toolchains, and development methods are completely optional for many projects. That belief is the second thread of this talk: I’d like to make a modest defense of simple design and implementation as a better option for the web and the people who work there.&lt;/p&gt;
&lt;p&gt;But, I am getting ahead of myself. First, I should tell you a bit more about who I am and where I come from.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section black&quot; readability=&quot;58&quot;&gt;&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/cake.png&quot; class=&quot;tinycentered&quot;/&gt;&lt;p&gt;I run a boutique design studio, which is a pretentious way of saying that it’s tiny with a capital-T. The studio does all kinds of work: books, magazines, branding, and yes, of course, websites. This year is an anniversary. The studio is celebrating 15 years in business, and I’m personally celebrating 20 years of making websites. As with any big anniversary, you get sentimental about how things started.&lt;/p&gt;
&lt;p&gt;The studio began in 2002 as a man (that’s me) with a laptop and a stack of paper at a desk in the corner of his apartment.&lt;/p&gt;
&lt;p&gt;Fifteen years later, the studio is still a man with a laptop and a stack of paper at a desk in the corner of his apartment.&lt;/p&gt;
&lt;p&gt;It’s difficult to fathom how much has changed around the studio in the last 15 years. Back then, there were no social media as we know of them today—no Facebook, no Instagram, no snaps; most of the sites you visit today did not exist back then, and most of the sites we visited then do not exist now. There were no iPhones. You would go online to fetch directions and print out the map like a neanderthal. We were hitting rocks together trying to make graphic design.&lt;/p&gt;
&lt;p&gt;Everything is different now, but I am still at my desk.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;At first I was bummed about my studio’s lack of visible progress, but then it hit me: what if I nailed it? Why change if it’s working? I’ve been able to approach a lot of different projects from many different angles, and I’m happy to report that I’ve gotten pretty good at a lot of it! Time and practice really do help.&lt;/p&gt;
&lt;p&gt;Except with the websites. They separate themselves from the others, because I don’t feel much better at making them after 20 years. My knowledge and skills develop a bit, then things change, and half of what I know becomes dead weight. This hardly happens with any of the other work I do.&lt;/p&gt;
&lt;p&gt;I wonder if I have twenty years of experience making websites, or if it is really five years of experience, repeated four times. If you’ve been working in the technology industry a while, please tell me this sounds familiar to you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; readability=&quot;56&quot;&gt;
&lt;p&gt;Let me give you an example of these five year cycles.&lt;/p&gt;
&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/okcomputer.jpg&quot; class=&quot;tinycentered&quot;/&gt;&lt;p&gt;As I said, I made my first website 20 years ago. I know this because I was a teenager doing the Lord’s work: transcribing the lyrics to Radiohead’s &lt;em&gt;OK Computer&lt;/em&gt;. It was 1997, I was learning HTML, and there was one problem with the design that was confusing me:&lt;/p&gt;

&lt;p&gt;Twenty years later, we’re still working out the answer to that very basic question.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
&amp;lt;table&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;Hi&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;Mom&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Back in 1997, we used tables and spacer gifs. It was like designing a website in a spreadsheet from hell. I found this process fun for some reason. Perhaps I was fascinated by the potential of bashing together something in my room, hitting a button, then having it be “out there.”&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
{ float: left; }
&lt;/pre&gt;
&lt;p&gt;About five years later, websites moved to using floats in CSS because tables were not semantic. Fair enough! Since then, I’ve spent about 200 hours reading about how to get floats to clear. I’m still not sure I understand it; I type &lt;code&gt;clear: both&lt;/code&gt; and say a prayer to the box model.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
{ display: flex; }
&lt;/pre&gt;
&lt;p&gt;I was saved by Flexbox after five years of guess work. It is my baby. I was trained as a print designer, and with flexbox, I can type 3 or 4 lines of CSS, and have two blocks of text line up at the baseline. Hallelujah. I only needed to wait a decade to get this.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
{ display: grid; }
&lt;/pre&gt;
&lt;p&gt;And now, after flexing with flexbox, along comes CSS Grid: a powerful new feature that promises to make responsive web design even more confusing. Of course, I am joking about this, because Grid is a big improvement in controlling layout on the web. But it is a bit spooky to sit down and learn more about it, because every time I see a diagram explaining how CSS Grid works...&lt;/p&gt;
&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/tables.gif&quot;/&gt;&lt;p&gt;I’m reminded of the table layouts I was doing in 1997. There’s a voice in the back of my head saying we’re stuck in a loop and it’s repeating. We’ve completed a lap on a cycle which will go around forever. Another approach for layout will come along five years from now, it will probably resemble floats, and not knowing how to clear a float will bite me in the ass for the second time in my career.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section realblack&quot; readability=&quot;45&quot;&gt;&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/understanding.gif&quot;/&gt;&lt;p&gt;There are similar examples of the cycle in other parts of how websites get designed and made. Nothing stays settled, so of course a person with one year of experience and one with fifteen years of experience can both be confused. Things are so often only understood by those who are well-positioned in the middle of the current wave of thought. If you’re before the sweet spot in the wave, your inexperience means you know nothing. If you are after, you will know lots of things that aren’t applicable to that particular way of doing things. I don’t bring this up to imply that the young are dumb or that the inexperienced are inept—of course they’re not. But remember: if you stick around in the industry long enough, you’ll get to feel all three situations.&lt;/p&gt;
&lt;p&gt;One argument says that continual change in methodology is rigorous and healthy. I agree. Keeping things in play helps us to more easily fix what’s wrong. It’d be terrible if nothing could ever change. But I also agree with the other argument: people only have so much patience. How many laps around the cycle can a person run? I’m on lap five now, and I can tell you that it is exhausting to engage with rehashed ideas from the past without feeling a tiny amount of prejudice against them.&lt;/p&gt;
&lt;p&gt;Methods that were once taboo are back on the table. For instance, last week I was reading a post about the benefits of not using stylesheets and instead having inline styles for everything. The post made a few compelling points, but this approach would have been crazy talk a few years ago.&lt;/p&gt;
&lt;p&gt;So much of how we build websites and software comes down to how we think. The churn of tools, methods, and abstractions also signify the replacement of ideology. A person must usually think in a way similar to the people who created the tools to successfully use them. It’s not as simple as putting down a screwdriver and picking up a wrench. A person needs to revise their whole frame of thinking; they must change their mind.&lt;/p&gt;
&lt;p&gt;In one way, it is easier to be inexperienced: you don’t have to learn what is no longer relevant. Experience, on the other hand, creates two distinct struggles: the first is to identify and unlearn what is no longer necessary (that’s work, too). The second is to remain open-minded, patient, and willing to engage with what’s new, even if it resembles a new take on something you decided against a long time ago.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; readability=&quot;49.604352126607&quot;&gt;&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/seuss.gif&quot;/&gt;&lt;p&gt;That spirit of willingness was in me when I was investigating everything that had changed in the last 3 years. I started with the best of intentions, but the more I learned, the grumpier I got. It seemed that most of the new methods involved setting up elaborate systems to automate parts of the work. This is fine for particularly complicated and large projects, but setting up the system and maintaining it seemed to be more effort for an experienced person on a small project than doing the work without it.&lt;/p&gt;
&lt;p&gt;The new methods were invented to manage a level of complexity that is completely foreign to me and my work. It was easy to back away from most of this new stuff when I realized I have alternate ways of managing complexity. Instead of changing my tools or workflow, I change my design. It’s like designing a house so it’s easy to build, instead of setting up cranes typically used for skyscrapers.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Directness is best in my experience, so a great photo, memorable illustration, or pitch-perfect sentence does most of the work. Beyond that, fancy implementation has never moved the needle much for my clients.&lt;/p&gt;
&lt;p&gt;My web design philosophy is no razzle-dazzle. My job is to help my clients identify and express the one or two uniquely true things about their project or company, then enhance it through a memorable design with a light touch. If complexity comes along, we focus in on it, look for patterns, and change the blueprint for what we’re building. We don’t necessarily go looking for better tools or fancier processes. In the past, I’ve called this following the &lt;a href=&quot;https://frankchimero.com/writing/the-webs-grain/&quot;&gt;grain of the web&lt;/a&gt;, which is to use design choices that swing with what HTML, CSS, and screens make easy, flexible, and resilient.&lt;/p&gt;
&lt;p&gt;It seems there are fewer and fewer notable websites built with this approach each year. So, I thought it would be useful remind everyone that the easiest and cheapest strategy for dealing with complexity is not to invent something to manage it, but to avoid the complexity altogether with a more clever plan.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section fade&quot; readability=&quot;52.390524379025&quot;&gt;
&lt;p&gt;To test how much complexity comes along with my limited needs, I wrote down the technical requirements of my web design practice. It’s not a long list:&lt;/p&gt;
&lt;h2&gt;simple, responsive layout&lt;br/&gt;web fonts and nicely set text&lt;br/&gt;performant, scalable images&lt;/h2&gt;
&lt;p&gt;All of these have been more than met for at least five years, but the complexity of even these very fundamental needs has ballooned in the last few years.&lt;/p&gt;
&lt;p&gt;For instance, I just showed you four different methods to put two things next to each other. Each new method mostly replaces the last, so hopefully we’re reaching a stabilization point with flexbox and CSS Grid. But who knows what will come out five years from now?&lt;/p&gt;
&lt;a href=&quot;https://abookapart.com/products/webfont-handbook&quot;&gt;&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/webfonts.jpg&quot; class=&quot;full&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Webfonts? I thought we could jot down a few lines with &lt;code&gt;@font-face&lt;/code&gt;, but &lt;a href=&quot;https://abookapart.com/products/webfont-handbook&quot;&gt;A Book Apart&lt;/a&gt; just published a 90 page e-book on how to load those fonts. This is totally surprising to me: I thought implementing webfonts was a relatively easy procedure, but I guess not!&lt;/p&gt;
&lt;a href=&quot;https://imgix.com&quot;&gt;&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/imgix.jpg&quot; class=&quot;full&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Even images are now complicated. Vector images get served as SVGs, but digging deep into this can make you go cross-eyed, because an SVG is essentially another web page to embed in your webpage. And with raster, the need to send along the best-sized image for the right device is complicated enough that &lt;a href=&quot;https://imgix.com&quot;&gt;paid services&lt;/a&gt; have come along to manage this for you. Serving an image is now as complicated as serving a video.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;My point is that the foundations are now sufficiently complicated enough on their own that it seems foolish to go add more optional complexity on top of it. I’ve kept my examples to the most basic of web implementations, and I haven’t touched on Javascript, animation, libraries, frameworks, pre-processors, package managers, automation, testing, or deployment. Whew.&lt;/p&gt;

&lt;p&gt;All of that bundled together is the popular way to work in 2018. But other people’s toolchains are absolutely inscrutable from the outside. Even getting started is touchy. Last month, I had to install a package manager to install a package manager. That’s when I closed my laptop and slowly backed away from it. We’re a long way from the CSS Zen Garden where I started.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; readability=&quot;49&quot;&gt;
&lt;p&gt;If you go talk to a senior software developer, you’ll probably hear them complain about spaghetti code. This is when code is overwrought, unorganized, opaque, and snarled with dependencies. I perked up when I heard the term used for the first time, because, while I can’t identify spaghetti code as a designer, I sure as hell know about spaghetti workflows and spaghetti toolchains. It feels like we’re there now on the web.&lt;/p&gt;
&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/notepad.gif&quot; class=&quot;full&quot;/&gt;&lt;p&gt;That breaks my heart, because so much of my start on the web came from being able to see and easily make sense of any site I’d visit. I had view source, but each year that goes by, it becomes less and less helpful as a way to investigate other people’s work. Markup balloons in size and becomes illegible because computers are generating it without an eye for context. Styles become overly verbose and redundant to the point of confusion. Functionality gets obfuscated behind compressed Javascript.&lt;/p&gt;
&lt;p&gt;This situation is annoying to me, because my thoughts turn to that young designer I mentioned at the start of my talk. How many opportunities did I have to reproduce what I saw by having legible examples in front of me? And how detrimental is it to have that kind of information obfuscated for her? Before, the websites could explain themselves; now, someone needs to walk you through it.&lt;/p&gt;
&lt;p&gt;Illegibility comes from complexity without clarity. I believe that the legibility of the source is one of the most important properties of the web. It’s the main thing that keeps the door open to independent, unmediated contributions to the network. If you can write markup, you don’t need Medium or Twitter or Instagram (though they’re nice to have). And the best way to help someone &lt;em&gt;write&lt;/em&gt; markup is to make sure they can &lt;em&gt;read&lt;/em&gt; markup.&lt;/p&gt;
&lt;p&gt;I wonder what young designers think of this situation and how they are educating themselves in a complicated field. How do they learn if the code is illegible? Does it seem like more experienced people are pulling up the ladder of opportunity by doing this? Twenty years ago, I decided to make my own website, because I saw an example of HTML and I could read it. Many of my design peers are the same. We possess skills to make websites, but we stopped there. We stuck with markup and never progressed into full-on programming, because we were only willing to go as far as things were legible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section black&quot; readability=&quot;51&quot;&gt;
&lt;p&gt;If knowledge about the web deteriorates quickly, it’s worthwhile to develop a solid personal philosophy toward change and learning.&lt;/p&gt;
&lt;p&gt;Silicon Valley has tried to provide a few of these. All are about speed. The most famous comes from Facebook, with their “Move fast and break things” mantra. This phrase has been thrown under the bus enough times by now, but it is interesting that so few are willing to commit to its opposite: “Go slow and fix things.”&lt;/p&gt;
&lt;p&gt;Let me show you a video about speed.&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/u5QpfAUUxGc?rel=0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;This has been my favorite internet discovery of the last few months. I’ve watched it enough times to overthink it. See, the rabbit doesn’t lose because he gets tired. He loses because he gets confused about which direction to go. Did you notice how it stops in the middle and stares blankly as everyone around it yells loudly about things it doesn’t understand? That’s me on Twitter.&lt;/p&gt;
&lt;p&gt;As someone who has decades of experience on the web, I hate to compare myself to the tortoise, but hey, if it fits, it fits. Let’s be more like that tortoise: diligent, direct, and purposeful. The web needs pockets of slowness and thoughtfulness as its reach and power continues to increase. What we depend upon must be properly built and intelligently formed. We need to create space for complexity’s important sibling: nuance. Spaces without nuance tend to gravitate towards stupidity. And as an American, I can tell you, there are no limits to the amount of damage that can be inflicted by that dangerous cocktail of fast-moving-stupid.&lt;/p&gt;
&lt;p&gt;The web also needs diligent people so that the idea of what the web is and what it does remains legible to everyone. This applies to being able to read the systems and social environments the web creates so we know what’s real and what’s not, but the call for legibility should also humbly apply to writing legible code and designs systems that are easy for nearly anyone to interpret thanks to their elegance. That important work has a place, too.&lt;/p&gt;
&lt;p&gt;It’s by keeping our work legible that we keep the door open to the next generation of our co-workers. What works for them also works for us, because whether you are just out of school or have twenty years of experience, you’ll eventually end up in the same spot: your first year of making websites.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 10 Feb 2018 05:30:45 +0000</pubDate>
<dc:creator>josephscott</dc:creator>
<og:type>article</og:type>
<og:title>Everything Easy is Hard Again</og:title>
<og:description>Design and writing by Frank Chimero</og:description>
<og:url>https://www.frankchimero.com/writing/everything-easy-is-hard-again/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://frankchimero.com/writing/everything-easy-is-hard-again/</dc:identifier>
</item>
<item>
<title>PopcornNotify – Send simple emails and text messages from one API</title>
<link>https://popcornnotify.com/</link>
<guid isPermaLink="true" >https://popcornnotify.com/</guid>
<description>&lt;p class=&quot;indigo-text text-lighten-1&quot;&gt;The client libraries will look for an environment variable called &lt;code&gt;POPCORNNOTIFY_API_KEY&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;pre_block&quot;&gt;
&lt;code class=&quot;code_block language-bash grey lighten-5&quot;&gt;export POPCORNNOTIFY_API_KEY=&quot;abc123456&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p class=&quot;indigo-text text-lighten-1&quot;&gt;Or, you can pass your API key to notify as an argument.&lt;/p&gt;
&lt;pre class=&quot;pre_block&quot;&gt;
&lt;code class=&quot;code_block language-python grey lighten-5&quot;&gt;# python
notify('5555555555', 'Bork bork', api_key='*******')&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;pre_block&quot;&gt;
&lt;code class=&quot;code_block language-javascript grey lighten-5&quot;&gt;// javascript
notify('5555555555', 'Bork bork', {api_key:'*******'})&lt;/code&gt;
&lt;/pre&gt;
&lt;p class=&quot;hide indigo-text text-lighten-1&quot;&gt;API keys cost $45 for 12 months and 10,000 messages. &lt;a class=&quot;hide&quot; href=&quot;https://popcornnotify.com/account/create&quot;&gt;Buy an API key here.&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;indigo-text text-lighten-1&quot;&gt;Pricing: API keys cost $10 for each 1,000 messages and last one year.&lt;a class=&quot;hide&quot; href=&quot;https://popcornnotify.com/account/create&quot;&gt;Buy an API key here.&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 10 Feb 2018 02:17:16 +0000</pubDate>
<dc:creator>FriedPickles</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://popcornnotify.com/</dc:identifier>
</item>
<item>
<title>GitHub shouldn&amp;#039;t allow username reuse</title>
<link>https://donatstudios.com/GithubsTotalSecurityFacepalm</link>
<guid isPermaLink="true" >https://donatstudios.com/GithubsTotalSecurityFacepalm</guid>
<description>&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; In discussing this with people online, I’ve come to the conclusion that the bigger, more important issue is lack of &lt;strong&gt;permalinks&lt;/strong&gt; to repository instances. Path reuse, rather than username reuse.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;There is a very popular tool for embedding data files into your Go binaries called &lt;code&gt;go-bindata&lt;/code&gt;. Several days ago however the user who ran it, &quot;Jim Teeuwen&quot; (&lt;a href=&quot;https://web.archive.org/web/20150609210529/https://github.com/jteeuwen&quot;&gt;wayback machine&lt;/a&gt;), completely disappeared from the internet – deleting his Github account and personal domain in the process.&lt;/p&gt;
&lt;p&gt;While this is within his rights to do, this broke a dependency many people had within their projects.&lt;/p&gt;
&lt;p&gt;To fix this, some users of the project recreated the &lt;strong&gt;account&lt;/strong&gt; and the repository based on a fork of the project.&lt;/p&gt;
&lt;p&gt;They have an official announcement/disclosure here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jteeuwen/go-bindata/issues/5&quot;&gt;https://github.com/jteeuwen/go-bindata/issues/5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At the very least they are being honest about it.&lt;/p&gt;
&lt;p&gt;The fact that they were &lt;strong&gt;allowed&lt;/strong&gt; to do this however represents a fundamental flaw in Github's security model.&lt;/p&gt;
&lt;p&gt;Usernames, once deleted, should &lt;strong&gt;never&lt;/strong&gt; be allowed to be valid again. Many sites including Google do it this way.&lt;/p&gt;
&lt;p&gt;Allowing username reuse completely breaks any trust that what I pull is what it claims to be.&lt;/p&gt;
&lt;p&gt;What if this user had been malicious? It may have taken a while before someone actually noticed this wasn't the original user and the code was doing something more than it claimed to.&lt;/p&gt;
&lt;p&gt;While Go's &lt;code&gt;go get&lt;/code&gt; functionality is no doubt naive and just pulls the head of a repository, this is not exclusively Go's problem as this affects any &lt;strong&gt;package manager&lt;/strong&gt; that runs on tags. Simply tag malicious changes beyond the current release and it would be deployed to many users likely with little actual review.&lt;/p&gt;
&lt;p&gt;This should not be possible. This is scary and should be fixed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Many people are arguing that this is the developers fault or the package managers fault. I do not agree, but as far as I see it that doesn't matter anyway. The simple fact of the matter is that it &lt;em&gt;is&lt;/em&gt; being used like that, like it or not, and the simplest and I argue most correct fix is for Github to prevent the issue.&lt;/p&gt;
&lt;p&gt;I think another good option would be Github offering permalinks to repos, such that if they were deleted and recreated the pathing would change.&lt;/p&gt;
&lt;p&gt;It affects &lt;strong&gt;not only package managers&lt;/strong&gt; and programs and software, but humans. Humans navigating Github. I have no way to tell while navigating the site if a project is the original or a charade. That is a problem.&lt;/p&gt;
&lt;p&gt;As for the title change, I agreed with Hacker News that the original was a bit hyperbolic. I have a tendency to resort to hyperbole to get my emotional point across - and it doesn't always read correctly on the internet.&lt;/p&gt;
&lt;hr/&gt;
</description>
<pubDate>Fri, 09 Feb 2018 21:21:59 +0000</pubDate>
<dc:creator>donatj</dc:creator>
<og:title>GitHub Shouldn't Allow Username Reuse</og:title>
<og:image>https://donatstudios.com/images/site/JesseDonat.jpg</og:image>
<og:url>https://donatstudios.com/GithubsTotalSecurityFacepalm</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://donatstudios.com/GithubsTotalSecurityFacepalm</dc:identifier>
</item>
<item>
<title>Meltdown Initial Performance Regressions</title>
<link>http://www.brendangregg.com/blog/2018-02-09/kpti-kaiser-meltdown-performance.html</link>
<guid isPermaLink="true" >http://www.brendangregg.com/blog/2018-02-09/kpti-kaiser-meltdown-performance.html</guid>
<description>&lt;div readability=&quot;334.50371210559&quot;&gt;
&lt;p&gt;The recently revealed &lt;a href=&quot;https://spectreattack.com/&quot;&gt;Meltdown and Spectre&lt;/a&gt; bugs are not just extraordinary issues of security, but also performance. The patches that workaround Meltdown introduce the largest kernel performance regressions I've ever seen. Many thanks to the engineers working hard to develop workarounds to these processor bugs.&lt;/p&gt;
&lt;p&gt;In this post I'll look at the Linux kernel page table isolation (KPTI) patches that workaround Meltdown: what overheads to expect, and ways to tune them. Much of my testing was on Linux 4.14.11 and 4.14.12 a month ago, before we deployed in production. Some older kernels have the KAISER patches for Meltdown, and so far the performance overheads look similar. These results aren't final, since more changes are still being developed, such as for Spectre.&lt;/p&gt;
&lt;p&gt;Note that there are potentially four layers of overhead for Meltdown/Spectre, this is just one. They are:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Guest kernel KPTI patches (this post)&lt;/li&gt;
&lt;li&gt;Intel microcode updates&lt;/li&gt;
&lt;li&gt;Cloud provider hypervisor changes (for cloud guests)&lt;/li&gt;
&lt;li&gt;Retpoline compiler changes&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;KPTI Factors&lt;/h2&gt;
&lt;p&gt;To understand the KPTI overhead, there are at least five factors at play. In summary:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Syscall rate&lt;/strong&gt;: there are overheads relative to the syscall rate, although high rates are needed for this to be noticable. At 50k syscalls/sec per CPU the overhead may be 2%, and climbs as the syscall rate increases. At my employer (Netflix), high rates are unusual in cloud, with some exceptions (databases).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Context switches&lt;/strong&gt;: these add overheads similar to the syscall rate, and I think the context switch rate can simply be added to the syscall rate for the following estimations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Page fault rate:&lt;/strong&gt; adds a little more overhead as well, for high rates.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Working set size (hot data)&lt;/strong&gt;: more than 10 Mbytes will cost additional overhead due to TLB flushing. This can turn a 1% overhead (syscall cycles alone) into a 7% overhead. This overhead can be reduced by A) pcid, available in Linux 4.14, and B) Huge pages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cache access pattern&lt;/strong&gt;: the overheads are exacerbated by certain access patterns that switch from caching well to caching a little less well. Worst case, this can add an additional 10% overhead, taking (say) the 7% overhead to 17%.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To explore these I wrote a simple microbenchmark where I could vary the syscall rate and the working set size (&lt;a href=&quot;https://github.com/brendangregg/Misc/tree/master/s1bench&quot;&gt;source&lt;/a&gt;). I then analyzed performance during the benchmark (&lt;a href=&quot;http://www.brendangregg.com/activebenchmarking.html&quot;&gt;active benchmarking&lt;/a&gt;), and used other benchmarks to confirm findings. In more detail:&lt;/p&gt;
&lt;h2&gt;1. Syscall rate&lt;/h2&gt;
&lt;p&gt;This is the cost of extra CPU cycles in the syscall path. Plotting the percent performance loss vs syscall rate per CPU, for my microbenchmark:&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://www.brendangregg.com/blog/images/2018/kpti_0m_c59xl_41112.png&quot; border=&quot;0&quot; width=&quot;600&quot;/&gt;&lt;/center&gt;
&lt;p&gt;Applications that have high syscall rates include proxies, databases, and others that do lots of tiny I/O. Also microbenchmarks, which often stress-test the system, will suffer the largest losses. Many services at Netflix are below 10k syscalls/sec per CPU, so this type of overhead is expected to be negligible for us (&amp;lt;0.5%).&lt;/p&gt;
&lt;p&gt;If you don't know your syscall rate, you can measure it, eg, using &lt;a href=&quot;http://www.brendangregg.com/perf.html&quot;&gt;perf&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;narrow&quot;&gt;
&lt;strong&gt;sudo perf stat -e raw_syscalls:sys_enter -a -I 1000&lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;This shows the system-wide syscall rate. Divide it by the CPU count (as reported by mpstat, etc) for the per-CPU rate. Then by 1000 for the graph above. Note that this perf stat command causes some overhead itself, which may be noticeable for high syscall rates (&amp;gt;100k/sec/CPU). You can switch to ftrace/mcount to measure it with lower overhead if that is desired. For example, using my &lt;a href=&quot;https://github.com/brendangregg/perf-tools&quot;&gt;perf-tools&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;narrow&quot;&gt;
&lt;strong&gt;sudo ./perf-tools/bin/funccount -i 1 -d 10 '[sS]y[sS]_*'&lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;Then summing the syscall column.&lt;/p&gt;
&lt;p&gt;I could have taken one measurement and extrapolated most of the above graph based on a model, but it's good to double check that there's no hidden surprises. The graph is mostly as expected, expect the lower right which shows variance and missing data points: these missing points are due to slightly negative values that are elided by the logarithmic scale. It would be easy to dismiss this all as a 0.2% error margin, magnified by the logarithmic scale, but I think much of it is part of the profile which changes at this syscall rate (between 5k and 10k syscalls/sec/CPU). This will be more obvious in the next sections, where I'll explore it further.&lt;/p&gt;
&lt;p&gt;My microbenchmark calls a fast syscall in a loop, along with a user-level loop to simulate an application working set size. By gradually increasing the time in the user-level loop from zero, the syscall rate decreases as more cycles are consumed in a CPU-bound user-mode thread. This gives us a spectrum from a high syscall rate of &amp;gt;1M/sec, down to a low syscall rate and mostly user time (&amp;gt;99%). I then measured this syscall range with and without the KPTI patches (by setting nopti, and also running older and newer kernels to double check).&lt;/p&gt;
&lt;p&gt;I collected CPU profile as a &lt;a href=&quot;http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html&quot;&gt;CPU flame graph&lt;/a&gt; for both systems, but they was boring for a change: extra cycles were just in the syscall code, as one would expect reading the &lt;a href=&quot;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=5aa90a84589282b87666f92b6c3c917c8080a9bf&quot;&gt;KPTI changes&lt;/a&gt;. To understand the overhead further I'll need to use instruction-level profiling, such as by using perf annotate, and PMC (Performance Monitoring Counter) analysis of the CPU cycles (more on this later).&lt;/p&gt;
&lt;h2&gt;2. Context Switch &amp;amp; Page Fault Rate&lt;/h2&gt;
&lt;p&gt;These are tracked by the kernel and easily read via /proc or sar(1):&lt;/p&gt;
&lt;pre&gt;
# &lt;strong&gt;sar -wB 1&lt;/strong&gt;
Linux 4.14.12-virtual (bgregg-c5.9xl-i-xxx)       02/09/2018      _x86_64_     (36 CPU)

05:24:51 PM    proc/s   &lt;strong&gt;cswch/s&lt;/strong&gt;
05:24:52 PM      0.00 &lt;strong&gt;146405.00&lt;/strong&gt;

05:24:51 PM  pgpgin/s pgpgout/s   &lt;strong&gt;fault/s&lt;/strong&gt;  majflt/s  pgfree/s pgscank/s pgscand/s pgsteal/s %vmeff
05:24:52 PM      0.00      0.00      &lt;strong&gt;2.00&lt;/strong&gt;      0.00     50.00      0.00      0.00      0.00   0.00
[...]
&lt;/pre&gt;
&lt;p&gt;As with syscalls, the higher these rates are, the higher the overheads. I'd add the context switch rate (cswch/s) to the syscall rate for the estimation graphs on this page (normalized per-CPU).&lt;/p&gt;
&lt;h2&gt;3. Working Set Size (hot data)&lt;/h2&gt;
&lt;p&gt;Now my microbenchmark simulates a working set size (WSS) – an area of frequently accessed memory – by reading 100 Mbytes of data in a loop and striding by the cacheline size. Performance gets much worse for lower syscall rates:&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://www.brendangregg.com/blog/images/2018/kpti_100m_c59xl_41112.png&quot; border=&quot;0&quot; width=&quot;600&quot;/&gt;&lt;/center&gt;
&lt;p&gt;Note the overhead &quot;jump&quot; between 10k and 5k syscalls/sec/CPU? The characteristics of this jump is dependent on the instance type, processor, and workload, and can appear at different points with different magnitudes: this is showing a c5.9xl with a 1.8% jump, but on a m4.2xl the jump is around 50k syscalls/sec/CPU and is much larger: 10% (shown &lt;a href=&quot;http://www.brendangregg.com/blog/images/2018/kpti_100m_m42xl_41112.png&quot;&gt;here&lt;/a&gt;). I’ll analyze this in the next section. Here, we just want to look at the overall trend: much worse performance given a working set.&lt;/p&gt;
&lt;p&gt;Will your overhead look like this graph, or the earlier one, or worse? That depends on your working set size: this graph is for 100 Mbytes, and the earlier was zero. See my previous post on &lt;a href=&quot;http://www.brendangregg.com/blog/2018-01-17/measure-working-set-size.html&quot;&gt;working set size estimation&lt;/a&gt; and the full &lt;a href=&quot;http://www.brendangregg.com/wss.html&quot;&gt;website&lt;/a&gt;. My guess is that 100 Mbytes is a large-ish case of memory needed syscall-to-syscall.&lt;/p&gt;
&lt;p&gt;Linux 4.14 introduced &lt;a href=&quot;https://kernelnewbies.org/Linux_4.14#Longer-lived_TLB_Entries_with_PCID&quot;&gt;pcid support&lt;/a&gt;, which improves performance provided the processor also has pcid (looks like it's common in EC2). Gil Tene wrote a post explaining why &lt;a href=&quot;http://archive.is/ma8Iw&quot;&gt;PCID is now a critical performance/security feature on x86&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's also possible to use huge pages to improve performance further (either transparent huge pages, THP, which is easy to setup but has had problems in older versions with compaction; or explicit huge pages, which should perform better). The following graph summarizes the options:&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://www.brendangregg.com/blog/images/2018/multi_pcid_THP_100m_c59xl_41112_a0.png&quot; border=&quot;0&quot; width=&quot;600&quot;/&gt;&lt;/center&gt;
&lt;p&gt;For this microbenchmark, huge pages improved performance so much – despite KPTI – that it turned the performance loss into a performance gain. The logarithmic axis has elided the negative points, but here they are on a linear axis, zoomed:&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://www.brendangregg.com/blog/images/2018/multi_pcid_THP_100m_c59xl_41112_zoom.png&quot; border=&quot;0&quot; width=&quot;600&quot;/&gt;&lt;/center&gt;
&lt;p&gt;Let's say your server was doing 5k syscalls/sec/CPU, and you suspect you have a large working set, similar to this 100 Mbyte test. On recent LTS Linux (4.4 or 4.9) with KPTI (or KAISER) patches, the performance overhead would be about 2.1%. Linux 4.14 has pcid support, so that overhead becomes about 0.5%. With huge pages, the overhead becomes a &lt;em&gt;gain&lt;/em&gt; of 3.0%.&lt;/p&gt;
&lt;p&gt;A quick look at TLB PMCs explains much of this overhead: here I'm using tlbstat, a quick tool I hacked up in my &lt;a href=&quot;https://github.com/brendangregg/pmc-cloud-tools&quot;&gt;pmc-cloud-tools&lt;/a&gt; repository. The following results look at a single point in the above graph (on a different system with full PMCs) where the worst case overhead from no KPTI to KPTI without pcid was 8.7%.&lt;/p&gt;
&lt;pre class=&quot;narrow&quot;&gt;
&lt;em&gt;nopti:&lt;/em&gt;
# &lt;strong&gt;tlbstat -C0 1&lt;/strong&gt;
K_CYCLES   K_INSTR      IPC DTLB_WALKS ITLB_WALKS K_DTLBCYC  K_ITLBCYC  &lt;strong&gt;DTLB% ITLB%&lt;/strong&gt;
2835385    2525393     0.89 291125     4645       6458       187         &lt;strong&gt;0.23  0.01&lt;/strong&gt;
2870816    2549020     0.89 269219     4922       5221       194         0.18  0.01
2835761    2524070     0.89 255815     4586       4993       157         0.18  0.01
[...]

&lt;em&gt;pti, nopcid:&lt;/em&gt;
# &lt;strong&gt;tlbstat -C0 1&lt;/strong&gt;
K_CYCLES   K_INSTR      IPC DTLB_WALKS ITLB_WALKS K_DTLBCYC  K_ITLBCYC  &lt;strong&gt;DTLB% ITLB%&lt;/strong&gt;
2873801    2328845     0.81 6546554    4474231    83593      63481       &lt;strong&gt;2.91  2.21&lt;/strong&gt;
2863330    2326694     0.81 6506978    4482513    83209      63480       2.91  2.22
2864374    2329642     0.81 6500716    4496114    83094      63577       2.90  2.22
[...]

&lt;em&gt;pti, pcid:&lt;/em&gt;
# &lt;strong&gt;tlbstat -C0 1&lt;/strong&gt;
K_CYCLES   K_INSTR      IPC DTLB_WALKS ITLB_WALKS K_DTLBCYC  K_ITLBCYC  &lt;strong&gt;DTLB% ITLB%&lt;/strong&gt;
2862069    2488661     0.87 359117     432040     6241       9185        &lt;strong&gt;0.22  0.32&lt;/strong&gt;
2855214    2468445     0.86 313171     428546     5820       9092        0.20  0.32
2869416    2488607     0.87 334598     434110     6011       9208        0.21  0.32
[...]

&lt;em&gt;pti, pcid + thp:&lt;/em&gt;
# &lt;strong&gt;tlbstat -C0 1&lt;/strong&gt;
K_CYCLES   K_INSTR      IPC DTLB_WALKS ITLB_WALKS K_DTLBCYC  K_ITLBCYC  &lt;strong&gt;DTLB% ITLB%&lt;/strong&gt;
2863464    2594463     0.91 2601       298946     57         6215        &lt;strong&gt;0.00  0.22&lt;/strong&gt;
2845726    2568730     0.90 3330       295951     42         6156        0.00  0.22
2872419    2597000     0.90 2746       298328     64         6211        0.00  0.22
[...]
&lt;/pre&gt;
&lt;p&gt;The last two columns show cycles where a data TLB or instruction TLB walk was active in at least one PMH (page miss handler). The first two outputs show TLB details for the 8.7% performance loss, and the extra TLB walk cycles added up to 4.88% of all cycles. The remaining outputs show the introduction of PCID, and the addition of THP. PCID reduces both types of TLB walks, bringing the data walks similar to the pre-KPTI levels. Instruction walks are still elevated. The final output shows the difference huge pages make: data TLB walks are now zero. Instruction walks are still elevated, and I can see from /proc/PID/smaps that the instruction text is not using huge pages: I'll try to fix that with more tuning, which should improve performance even further.&lt;/p&gt;
&lt;p&gt;Just to show how bad it gets: this is the first point on the graph where the overhead was over 800%, showing the non-KPTI vs KPTI without pcid systems:&lt;/p&gt;
&lt;pre class=&quot;narrow&quot;&gt;
&lt;em&gt;nopti:&lt;/em&gt;
# &lt;strong&gt;tlbstat -C0 1&lt;/strong&gt;
K_CYCLES   K_INSTR      IPC DTLB_WALKS ITLB_WALKS K_DTLBCYC  K_ITLBCYC  &lt;strong&gt;DTLB% ITLB%&lt;/strong&gt;
2854768    2455917     0.86 565        2777       50         40          &lt;strong&gt;0.00  0.00&lt;/strong&gt;
2884618    2478929     0.86 950        2756       6          38          0.00  0.00
2847354    2455187     0.86 396        297403     46         40          0.00  0.00
[...]

&lt;em&gt;pti, nopcid:&lt;/em&gt;
# &lt;strong&gt;tlbstat -C0 1&lt;/strong&gt;
K_CYCLES   K_INSTR      IPC DTLB_WALKS ITLB_WALKS K_DTLBCYC  K_ITLBCYC  &lt;strong&gt;DTLB% ITLB%&lt;/strong&gt;
2875793    276051      0.10 89709496   65862302   787913     650834     &lt;strong&gt;27.40 22.63&lt;/strong&gt;
2860557    273767      0.10 88829158   65213248   780301     644292     27.28 22.52
2885138    276533      0.10 89683045   65813992   787391     650494     27.29 22.55
2532843    243104      0.10 79055465   58023221   693910     573168     27.40 22.63
[...]
&lt;/pre&gt;
&lt;p&gt;Half the CPU cycles have page walks active. I've never seen TLB pain this bad, ever. Just the IPC (instructions per cycle) alone tells you something bad is happening: dropping from 0.86 to 0.10, which is relative to the performance loss. I still recommend including IPC along with (not instead of) any %CPU measurement, so that you really know what the cycles are, as I discussed in &lt;a href=&quot;http://www.brendangregg.com/blog/2017-05-09/cpu-utilization-is-wrong.html&quot;&gt;CPU Utilization is Wrong&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;4. Cache Access Pattern&lt;/h2&gt;
&lt;p&gt;Depending on the memory access pattern and working set size, an additional 1% to 10% overhead can occur at a certain syscall rate. This was seen as the jump in the earlier graph. Based on PMC analysis and the description of the changes, one suspected factor is additional page table memory demand on the KPTI system, causing the workload to fall out of a CPU cache sooner. Here are the relevant metrics:&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://www.brendangregg.com/blog/images/2018/kpti_pmcs1.png&quot; border=&quot;0&quot; width=&quot;600&quot;/&gt;&lt;/center&gt;
&lt;p&gt;This shows that the performance loss jump corresponds to a similar drop in last-level cache (LLC) references (first two graphs): that is not actually interesting, as the lower reference rate is expected from a lower workload throughput. What is interesting is an abrupt drop in LLC hit ratio, from about 55% to 50%, which does not happen without the KPTI patches (the last nopti graph, which shows a small LLC hit ratio improvement). This is sounding like the extra KPTI page table references has pushed the working set out of a CPU cache, causing an abrupt drop in performance.&lt;/p&gt;
&lt;p&gt;I don't think a 55% to 50% drop in LLC hit ratio can fully explain a 10% performance loss alone. Another factor is at play that would require additional PMCs to analyze, however, this target is an m4.16xl where PMCs are restricted to the architectural set. I described this in &lt;a href=&quot;http://www.brendangregg.com/blog/2017-05-04/the-pmcs-of-ec2.html&quot;&gt;The PMCs of EC2&lt;/a&gt;: the architectural set is better than nothing, and a year ago we had nothing. Late last year, EC2 gained two more options for PMC analysis: the &lt;a href=&quot;http://www.brendangregg.com/blog/2017-11-29/aws-ec2-virtualization-2017.html&quot;&gt;Nitro hypervisor&lt;/a&gt;, which provides all PMCs (more or less), and the bare metal instance type (currently in public preview). My earlier TLB analysis was on a c5.9xl, a Nitro hypervisor system. Unfortunately, the &quot;jump&quot; on that system is only about 1%, making it harder to spot outside the normal variance.&lt;/p&gt;
&lt;p&gt;In short, there are some additional memory overheads with KPTI that can cause workloads to drop out of CPU cache a little sooner.&lt;/p&gt;
&lt;h2&gt;Sanity Tests&lt;/h2&gt;
&lt;p&gt;Putting these graphs to the test: a MySQL OLTP benchmark ran with 75k syscalls/sec/CPU (600k syscalls/sec across 8 CPUs), and is expected to have a large working set (so more closely resembles this 100Mb working set test, than the 0Mb one). The graph estimates the performance loss of KPTI (without huge pages or pcid) to be about 4%. The measured performance loss was 5%. On a 64-CPU system, with the same workload and same per-CPU syscall rate, the measured performance loss was 3%. Other tests were similarly close, as has been the production roll out.&lt;/p&gt;
&lt;p&gt;The test that least matched the previous graphs was an application with a stress test driving 210k syscalls/sec/CPU + 27k context-switches/sec/CPU, and a small working set (~25 Mbytes). The estimated performance loss should have been less than 12%, but it was 25%. To check that there wasn't an additional overhead source, I analyzed this and saw that the 25% was due to TLB page walk cycles, which is the same overheads studied earlier. I'd guess the large discrepancy was because that application workload was more sensitive to TLB flushing than my simple microbenchmark.&lt;/p&gt;
&lt;h2&gt;Fixing Performance&lt;/h2&gt;
&lt;h3&gt;1. Linux 4.14 &amp;amp; pcid&lt;/h3&gt;
&lt;p&gt;I mentioned this earlier, and showed the difference in the graph. Get on 4.14, at least, with CPUs that support pcid (check /proc/cpuinfo).&lt;/p&gt;
&lt;h3&gt;2. Huge Pages&lt;/h3&gt;
&lt;p&gt;I mentioned this earlier too. I won't summarize how to configure huge pages here with all their caveats, since that's a huge topic.&lt;/p&gt;
&lt;h3&gt;3. Syscall Reductions&lt;/h3&gt;
&lt;p&gt;If you were at the more painful end of the performance loss spectrum due to a high syscall rate, then an obvious move is to analyze what those syscalls are and look for ways to eliminate some. This used to be routine for systems performance analysis many years ago, but more recently the focus has been user-mode wins.&lt;/p&gt;
&lt;p&gt;There are many ways to analyze syscalls. Here are several, ordered from most to least overhead:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;strace&lt;/li&gt;
&lt;li&gt;perf record&lt;/li&gt;
&lt;li&gt;perf trace&lt;/li&gt;
&lt;li&gt;sysdig&lt;/li&gt;
&lt;li&gt;perf stat&lt;/li&gt;
&lt;li&gt;bcc/eBPF&lt;/li&gt;
&lt;li&gt;ftrace/mcount&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The fastest is ftrace/mcount, and I already had an example earlier from my &lt;a href=&quot;https://github.com/brendangregg/perf-tools&quot;&gt;perf-tools&lt;/a&gt; repo for counting syscalls. Summarizing 10 seconds:&lt;/p&gt;
&lt;pre class=&quot;narrow&quot;&gt;
# &lt;strong&gt;./perf-tools/bin/funccount -d 10 '[sS]y[sS]_*'&lt;/strong&gt;
Tracing &quot;[sS]y[sS]_*&quot; for 10 seconds...

FUNC                              COUNT
SyS_epoll_wait                        1
SyS_exit_group                        1
SyS_fcntl                             1
SyS_ftruncate                         1
[...]
SyS_newstat                          56
SyS_mremap                           62
SyS_rt_sigaction                     73
SyS_select                         1895
SyS_read                           1909
SyS_clock_gettime                  3791
SyS_rt_sigprocmask                 3856

Ending tracing...
&lt;/pre&gt;
&lt;p&gt;Here's the same using my bcc/eBPF version of funccount and the syscall tracepoints, which was only possible since Linux 4.14 thanks to Yonghong Song's &lt;a href=&quot;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=cf5f5cea270655dd49370760576c64b228583b79&quot;&gt;support&lt;/a&gt; for this:&lt;/p&gt;
&lt;pre class=&quot;narrow&quot;&gt;
# &lt;strong&gt;/usr/share/bcc/tools/funccount -d 10 't:syscalls:sys_enter*'&lt;/strong&gt;
Tracing 310 functions for &quot;t:syscalls:sys_enter*&quot;... Hit Ctrl-C to end.

FUNC                                    COUNT
syscalls:sys_enter_nanosleep                1
syscalls:sys_enter_newfstat                 3
syscalls:sys_enter_mmap                     3
syscalls:sys_enter_inotify_add_watch        9
syscalls:sys_enter_poll                    11
syscalls:sys_enter_write                   61
syscalls:sys_enter_perf_event_open        111
syscalls:sys_enter_close                  152
syscalls:sys_enter_open                   157
syscalls:sys_enter_bpf                    310
syscalls:sys_enter_ioctl                  395
syscalls:sys_enter_select                2287
syscalls:sys_enter_read                  2445
syscalls:sys_enter_clock_gettime         4572
syscalls:sys_enter_rt_sigprocmask        4572
Detaching...
&lt;/pre&gt;
&lt;p&gt;Now that you know the most frequent syscalls, look for ways to reduce them. You can use other tools to inspect their arguments and stack traces (eg: using perf record, or kprobe in perf-tools, trace in bcc, etc), and look for optimization opportunities. This is performance engineering 101.&lt;/p&gt;
&lt;h2&gt;Conclusion and Further Reading&lt;/h2&gt;
&lt;p&gt;The KPTI patches to mitigate Meltdown can incur massive overhead, anything from 1% to over 800%. Where you are on that spectrum depends on your syscall and page fault rates, due to the extra CPU cycle overheads, and your memory working set size, due to TLB flushing on syscalls and context switches. I described these in this post, and analyzed them for a microbenchmark. Of course, nothing beats testing with real workloads, and the analysis I've included here may be more useful in explaining why performance regressed and showing opportunities to tune it, than for the estimated regressions.&lt;/p&gt;
&lt;p&gt;Practically, I'm expecting the cloud systems at my employer (Netflix) to experience between 0.1% and 6% overhead with KPTI due to our syscall rates, and I'm expecting we'll take that down to less than 2% with tuning: using 4.14 with pcid support, huge pages (which can also provide some gains), syscall reductions, and anything else we find.&lt;/p&gt;
&lt;p&gt;This is only one out of four potential sources of overhead from Meltdown/Spectre: there's also cloud hypervisor changes, Intel microcode, and compilation changes. These KPTI numbers are also not final, as Linux is still being developed and improved.&lt;/p&gt;
&lt;p&gt;Some related reading and references:&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;&lt;em&gt;You can comment here, but I can't guarantee your comment will remain here forever: I might switch comment systems at some point (eg, if disqus add advertisements).&lt;/em&gt;&lt;/p&gt;</description>
<pubDate>Fri, 09 Feb 2018 18:33:30 +0000</pubDate>
<dc:creator>natbobc</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.brendangregg.com/blog/2018-02-09/kpti-kaiser-meltdown-performance.html</dc:identifier>
</item>
<item>
<title>Uber and Waymo Reach Settlement</title>
<link>https://www.uber.com/newsroom/uber-waymo-settlement/</link>
<guid isPermaLink="true" >https://www.uber.com/newsroom/uber-waymo-settlement/</guid>
<description>&lt;div id=&quot;&quot;&gt;&lt;p&gt;&lt;span class=&quot;article-dateline&quot;&gt;US &lt;span class=&quot;push-micro--sides&quot;&gt;—&lt;/span&gt; Feb 9, 2018&lt;/span&gt;

&lt;span class=&quot;posted-by&quot;&gt;Written by&lt;/span&gt;&lt;span id=&quot;post-author&quot; class=&quot;author&quot;&gt;Dara Khosrowshahi, CEO&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div id=&quot;post-content&quot; readability=&quot;84.827376116978&quot;&gt;
&lt;div readability=&quot;65&quot;&gt;
&lt;p&gt;&lt;em&gt;Below is a statement from Dara Khosrowshahi, CEO of Uber, regarding a settlement reached in our litigation with Waymo.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;My job as Uber’s CEO is to set the course for the future of the company: innovating and growing responsibly, as well as acknowledging and correcting mistakes of the past. In doing so, I want to express regret for the actions that have caused me to write this letter.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;To our friends at Alphabet: we are partners, you are an important investor in Uber, and we share a deep belief in the power of technology to change people’s lives for the better. Of course, we are also competitors. And while we won’t agree on everything going forward, we agree that Uber’s acquisition of Otto could and should have been handled differently.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;To our employees, in particular the great and talented people of Uber’s Advanced Technologies Group: I am inspired by your passion and commitment to bringing self-driving vehicles to life. Over the last year, you’ve been distracted from your mission. For that I am sorry.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;There is no question that self-driving technology is crucial to the future of transportation—a future in which Uber intends to play an important role. Through that lens, the acquisition of Otto made good business sense.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But the prospect that a couple of Waymo employees may have inappropriately solicited others to join Otto, and that they may have potentially left with Google files in their possession, in retrospect, raised some hard questions.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;To be clear, while we do not believe that any trade secrets made their way from Waymo to Uber, nor do we believe that Uber has used any of Waymo’s proprietary information in its self-driving technology, we are taking steps with Waymo to ensure our Lidar and software represents just our good work.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;While I cannot erase the past, I can commit, on behalf of every Uber employee, that we will learn from it, and it will inform our actions going forward. I’ve told Alphabet that the incredible people at Uber ATG are focused on ensuring that our development represents the very best of Uber’s innovation and experience in self-driving technology.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;As we change the way we operate and put integrity at the core of every decision we make, we look forward to the great race to build the future. We believe that race should be fair—and one whose ultimate winners are people, cities and our environment.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Dara&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;</description>
<pubDate>Fri, 09 Feb 2018 15:54:26 +0000</pubDate>
<dc:creator>chollida1</dc:creator>
<og:type>article</og:type>
<og:title>Uber and Waymo Reach Settlement | Uber Newsroom</og:title>
<og:description>The latest news, updates, and announcements from Uber.</og:description>
<og:url>https://www.uber.com/newsroom/uber-waymo-settlement/</og:url>
<og:image>https://newsroomadmin.uberinternal.com/wp-content/uploads/2018/02/Volvo-SF-1.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.uber.com/newsroom/uber-waymo-settlement/</dc:identifier>
</item>
<item>
<title>VLC 3.0 release</title>
<link>https://www.videolan.org/vlc/releases/3.0.0.html</link>
<guid isPermaLink="true" >https://www.videolan.org/vlc/releases/3.0.0.html</guid>
<description>&lt;nav id=&quot;nav&quot; class=&quot;navbar navbar-default navbar-fixed-top&quot;&gt;
&lt;/nav&gt;
&lt;div class=&quot;container&quot; readability=&quot;6.9078947368421&quot;&gt;
&lt;center readability=&quot;2&quot;&gt;

&lt;p&gt;VLC 3.0.0 is the first version of &quot;Vetinari&quot; branch of our popular media player.&lt;/p&gt;
&lt;/center&gt;
&lt;div class=&quot;container&quot; readability=&quot;7.0679611650485&quot;&gt;

&lt;p&gt;
&lt;h2 class=&quot;subtext2&quot; id=&quot;text_1&quot;&gt;Hardware accelerated decoding for HD and UHD&lt;/h2&gt;
&lt;h2 class=&quot;subtext2&quot; id=&quot;text_2&quot;&gt;Supports HDR and HDR tone-mapping&lt;/h2&gt;
&lt;h2 class=&quot;subtext2&quot; id=&quot;text_3&quot;&gt;360° video navigation&lt;/h2&gt;
&lt;h2 class=&quot;subtext2&quot; id=&quot;text_4&quot;&gt;Chromecast streaming&lt;/h2&gt;
&lt;h2 class=&quot;subtext2&quot; id=&quot;text_5&quot;&gt;Optimized for iPhone X&lt;/h2&gt;
&lt;h2 class=&quot;subtext2&quot; id=&quot;text_6&quot;&gt;Faster version for UWP and XBox One&lt;/h2&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;section class=&quot;features&quot;&gt;&lt;div class=&quot;container&quot;&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm-6&quot;&gt;
&lt;ul&gt;&lt;li&gt;VLC 3.0 &quot;Vetinari&quot; is a new major update of VLC.&lt;/li&gt;
&lt;li&gt;VLC 3.0 activates &lt;strong&gt;hardware decoding&lt;/strong&gt; by default, to get &lt;a href=&quot;https://vimeo.com/254723528&quot;&gt;4K and 8K playback!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;It supports &lt;strong&gt;10bits&lt;/strong&gt; and &lt;strong&gt;HDR&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;VLC supports &lt;strong&gt;360 video&lt;/strong&gt; and &lt;strong&gt;3D audio&lt;/strong&gt;, up to Ambisoncics 3rd order&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm-6&quot;&gt;
&lt;ul&gt;&lt;li&gt;Allows &lt;strong&gt;audio passthrough&lt;/strong&gt; for HD audio codecs&lt;/li&gt;
&lt;li&gt;Can stream to &lt;strong&gt;Chromecast&lt;/strong&gt; devices, even in formats not supported natively&lt;/li&gt;
&lt;li&gt;Can play &lt;strong&gt;Blu-Ray Java menus&lt;/strong&gt;: BD-J&lt;/li&gt;
&lt;li&gt;VLC supports browsing of &lt;strong&gt;local network&lt;/strong&gt; drives and NAS&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section&gt;
&lt;/section&gt;&lt;section class=&quot;bg-gray features no-check&quot;&gt;&lt;div class=&quot;container&quot;&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-6&quot;&gt;
&lt;p&gt;Core&lt;/p&gt;
&lt;div class=&quot;clearme&quot;&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;Network browsing for distant filesystems (SMB, FTP, SFTP, NFS...)&lt;/li&gt;
&lt;li&gt;HDMI passthrough for Audio HD codecs, like E-AC3, TrueHD or DTS-HD&lt;/li&gt;
&lt;li&gt;12bits codec and extended colorspaces (HDR)&lt;/li&gt;
&lt;li&gt;Stream to distant renderers, like Chromecast&lt;/li&gt;
&lt;li&gt;360 video and 3D audio playback with viewpoint change&lt;/li&gt;
&lt;li&gt;Support for Ambisonics audio and more than 8 audio channels&lt;/li&gt;
&lt;li&gt;Subtitles size modification live&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;col-md-6&quot;&gt;
&lt;p&gt;Acceleration&lt;/p&gt;
&lt;div class=&quot;clearme&quot;&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;Hardware decoding and display on all platforms&lt;/li&gt;
&lt;li&gt;HEVC hardware decoding on Windows, using DxVA2 and D3D11&lt;/li&gt;
&lt;li&gt;HEVC hardware decoding using OMX and MediaCodec (Android)&lt;/li&gt;
&lt;li&gt;MPEG-2, VC1/WMV3 hardware decoding on Android&lt;/li&gt;
&lt;li&gt;Important improvements for the MMAL decoder and output for rPI and rPI2&lt;/li&gt;
&lt;li&gt;HEVC and H.264 hardware decoding for macOS and and iOS based on VideoToolbox&lt;/li&gt;
&lt;li&gt;New VA-API decoder and rendering for Linux&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-6&quot;&gt;
&lt;p&gt;Codecs&lt;/p&gt;
&lt;div class=&quot;clearme&quot;&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;BD-Java menus and overlay in Blu-Ray&lt;/li&gt;
&lt;li&gt;Experimental AV1 video and Daala video decoders&lt;/li&gt;
&lt;li&gt;OggSpots video decoder&lt;/li&gt;
&lt;li&gt;New MPEG-1 &amp;amp; 2 audio layer I, II, III + MPEG 2.5 decoder based on libmpg123&lt;/li&gt;
&lt;li&gt;New BPG decoder based on libbpg&lt;/li&gt;
&lt;li&gt;TDSC, Canopus HQX, Cineform, SpeedHQ, Pixlet, QDMC and FMVC decoders&lt;/li&gt;
&lt;li&gt;TTML subtitles support&lt;/li&gt;
&lt;li&gt;Rewrite of webVTT subtitles support, including CSS style support&lt;/li&gt;
&lt;li&gt;BluRay text subtitles (HDMV) deocoder&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;col-md-6&quot;&gt;
&lt;p&gt;Containers&lt;/p&gt;
&lt;div class=&quot;clearme&quot;&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;Rework of the MP4 demuxer&lt;/li&gt;
&lt;li&gt;Rework of the TS demuxer&lt;/li&gt;
&lt;li&gt;HD-DVD .evo support&lt;/li&gt;
&lt;li&gt;Rework of the PS demuxer&lt;/li&gt;
&lt;li&gt;Improvements on MKV&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;col-md-6&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Video outputs and filters&lt;/p&gt;
&lt;div class=&quot;clearme&quot;&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;OpenGL as Linux/BSD default video output&lt;/li&gt;
&lt;li&gt;Improvements in OpenGL output: direct displaying and HDR tonemapping&lt;/li&gt;
&lt;li&gt;Rework of the Android video outputs&lt;/li&gt;
&lt;li&gt;New Direct3D11 video output supporting both Windows desktop and WinRT modes&lt;/li&gt;
&lt;li&gt;HDR10 support in Direct3D11 with Windows 10 Fall Creator Update&lt;/li&gt;
&lt;li&gt;Hardware deinterlacing on the rPI, using MMAL&lt;/li&gt;
&lt;li&gt;Video filter to convert between fps rates&lt;/li&gt;
&lt;li&gt;Hardware accelerated deinterlacing/adjust/sharpen/chroma with VA-API&lt;/li&gt;
&lt;li&gt;Hardware accelerated adjust/invert/posterize/sepia/sharpen with CoreImage&lt;/li&gt;
&lt;li&gt;Hardware accelerated deinterlacing/adjust/chroma with D3D9 and D3D11&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;col-md-6&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Audio outputs and filters&lt;/p&gt;
&lt;div class=&quot;clearme&quot;&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;Complete rewrite of the AudioTrack Android output&lt;/li&gt;
&lt;li&gt;New Tizen audio output&lt;/li&gt;
&lt;li&gt;HDMI/SPDIF pass-through support for WASAPI (AC3/DTS/DTSHD/EAC3/TRUEHD)&lt;/li&gt;
&lt;li&gt;Support EAC3 and TRUEHD pass-through for PulseAudio&lt;/li&gt;
&lt;li&gt;Rework of the AudioUnit modules to share more code between iOS and macOS&lt;/li&gt;
&lt;li&gt;SoX Resampler library audio filter module (converter and resampler)&lt;/li&gt;
&lt;li&gt;Ambisonics audio renderer, supporting up to 3rd order&lt;/li&gt;
&lt;li&gt;Binauralizer audio filter, working with Ambisonics or 5.1/7.1 streams&lt;/li&gt;
&lt;li&gt;Pitch shifting module&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-6&quot;&gt;
&lt;p&gt;OS Versions&lt;/p&gt;
&lt;div class=&quot;clearme&quot;&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;Windows XP ➔ 10 RS3&lt;/li&gt;
&lt;li&gt;macOS 10.7 ➔ 10.13&lt;/li&gt;
&lt;li&gt;iOS 7 ➔ 11&lt;/li&gt;
&lt;li&gt;Android 2.3 ➔ 8.1&lt;/li&gt;
&lt;li&gt;Android TV, Chromebooks with Play Store&lt;/li&gt;
&lt;li&gt;Windows RT 8.1, Windows Phone 8.1&lt;/li&gt;
&lt;li&gt;Windows 10 Mobile, Xbox 1, Windows Store&lt;/li&gt;
&lt;li&gt;GNU/Linux, Ubuntu, *BSD&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;col-md-6&quot;&gt;
&lt;p&gt;Android specific&lt;/p&gt;
&lt;div class=&quot;clearme&quot;&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;Chromecast support from your phone&lt;/li&gt;
&lt;li&gt;HEVC hardware decoding using MediaCodec&lt;/li&gt;
&lt;li&gt;Android Auto with voice actions&lt;/li&gt;
&lt;li&gt;Available on all Android TV, Chromebooks &amp;amp; DeX&lt;/li&gt;
&lt;li&gt;Support for Picture-in-Picture&lt;/li&gt;
&lt;li&gt;Playlist files detection&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;div class=&quot;container&quot; readability=&quot;6.2242990654206&quot;&gt;



&lt;div&gt;
&lt;h2&gt;Android&lt;/h2&gt;
&lt;a href=&quot;https://play.google.com/store/apps/details?id=org.videolan.vlc&quot;&gt;&lt;img src=&quot;https://www.videolan.org/images/get_it_on_play_logo_large.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/div&gt;


&lt;div&gt;
&lt;h2&gt;iOS&lt;/h2&gt;
&lt;a href=&quot;http://itunes.apple.com/app/vlc-ios/id650377962&quot;&gt;&lt;img src=&quot;https://www.videolan.org/images/appstoredownload-en.png&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;div&gt;
&lt;h2&gt;Windows Store and UWP&lt;/h2&gt;
&lt;a href=&quot;https://www.microsoft.com/en-US/store/p/vlc/9nblggh4vvnh&quot;&gt;&lt;img src=&quot;https://www.videolan.org/images/badges/WS_green.png&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;Windows Phone&lt;/h2&gt;
&lt;a href=&quot;http://www.windowsphone.com/s?appid=44fa83f7-a98d-4647-b9d4-c35ed729d0c9&quot;&gt;&lt;img src=&quot;https://www.videolan.org/images/badges/WPS_cyan.png&quot;/&gt;&lt;/a&gt;&lt;/div&gt;


&lt;div readability=&quot;7&quot;&gt;
&lt;h2&gt;Linux&lt;/h2&gt;
&lt;p&gt;Ask your favorite packager for VLC 3.0!&lt;/p&gt;
&lt;/div&gt;




&lt;p&gt;For any questions related to this release, please &lt;a href=&quot;https://www.videolan.org/contact.html&quot;&gt;contact us&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 09 Feb 2018 15:15:25 +0000</pubDate>
<dc:creator>jbk</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.videolan.org/vlc/releases/3.0.0.html</dc:identifier>
</item>
<item>
<title>Amazon will launch its own delivery service to compete with FedEx, UPS</title>
<link>https://bgr.com/2018/02/09/amazon-delivery-service-swa-fedex-ups/</link>
<guid isPermaLink="true" >https://bgr.com/2018/02/09/amazon-delivery-service-swa-fedex-ups/</guid>
<description>&lt;p&gt;Amazon may be a one stop shop for home goods, electronics, furniture, clothing and more, but in order to actually get items to your home, the e-commerce giant has to depend on delivery services like FedEx and UPS. That may change in the coming weeks though, as the &lt;a href=&quot;https://www.wsj.com/articles/amazon-to-launch-delivery-service-that-would-vie-with-fedex-ups-1518175920&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;WSJ&lt;/em&gt;&lt;/a&gt; reports that Amazon will launch its own delivery service. Dubbed “Shipping with Amazon” (SWA), the service will pick up packages from businesses and deliver them to customers.&lt;/p&gt;
&lt;p&gt;Sources claims that Amazon will begin rolling out the service in Los Angeles within the next few weeks in Los Angeles with third-party sellers that do business through Amazon.com. The company then plans to expand even further before the end of the year, even opening up the service to businesses that aren’t third-party merchants.&lt;/p&gt;


&lt;p&gt;&lt;em&gt;WSJ&lt;/em&gt; first reported on &lt;a href=&quot;https://www.wsj.com/articles/amazons-newest-ambitioncompeting-directly-with-ups-and-fedex-1474994758&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;a delivery service pilot program from Amazon&lt;/a&gt; back in 2016, and this new initiative appears to be the result of a successful test run. SWA rolled out some time ago in London and, as &lt;em&gt;WSJ&lt;/em&gt; points out, Amazon already delivers its own orders in 37 US cities. Between &lt;a href=&quot;https://bgr.com/2017/10/25/amazon-key-release-date-price-features/&quot; rel=&quot;nofollow&quot;&gt;Amazon Key&lt;/a&gt;, an expansion into ocean freight and the establishment of an air cargo hub, Amazon has made major strides in building a parcel delivery network in recent years.&lt;/p&gt;
&lt;p&gt;Considering the decades FedEx and UPS have had to build out their networks, it will be an uphill climb for Amazon to make a dent in the industry. That said, Amazon has reportedly been working on making its own logistics network a reality after a disappointing holiday season in 2013 during which countless packages were delivered late.&lt;/p&gt;
&lt;p&gt;As is often the case for Amazon, the ace in the hole for SWA may be the price. Those familiar with Amazon’s plans say that the company will undercut FedEx and UPS when the service launches in full. Since it already delivers some of its own packages, Amazon can fill extra space in its trucks with more packages, which won’t add to the overhead. If SWA is cheaper than FedEx or UPS, you can bet that customers will opt for Amazon’s service instead.&lt;/p&gt;

</description>
<pubDate>Fri, 09 Feb 2018 15:14:29 +0000</pubDate>
<dc:creator>artsandsci</dc:creator>
<og:type>article</og:type>
<og:title>Amazon will launch its own delivery service to compete with FedEx, UPS</og:title>
<og:url>https://bgr.com/2018/02/09/amazon-delivery-service-swa-fedex-ups/</og:url>
<og:description>Amazon may be a one stop shop for home goods, electronics, furniture, clothing and more, but in order to actually get items to your home, the e-commerce giant has to depend on delivery services lik…</og:description>
<og:image>https://boygeniusreport.files.wordpress.com/2017/11/amazon-key.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://bgr.com/2018/02/09/amazon-delivery-service-swa-fedex-ups/</dc:identifier>
</item>
</channel>
</rss>