<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>How poverty changes your mindset</title>
<link>http://review.chicagobooth.edu/behavioral-science/2018/article/how-poverty-changes-your-mind-set</link>
<guid isPermaLink="true" >http://review.chicagobooth.edu/behavioral-science/2018/article/how-poverty-changes-your-mind-set</guid>
<description>&lt;p&gt;The proportion of the global population living on less than $1.90 per person per day has fallen—from 18 percent in 2008 to 11 percent in 2013, according to the World Bank. In the United States, however, the poverty rate has been more stubborn—41 million people lived below the country’s poverty line in 2016, about 13 percent of the population, nearly the same rate as in 2007. Recent policy initiatives haven’t meaningfully reduced that rate. House Speaker Paul Ryan (Republican of Wisconsin) indicated this past December that the government would make fighting poverty, but also welfare, which many Republicans believe is a failed policy, a priority in 2018.&lt;/p&gt;&lt;p&gt;US lawmakers have expressed frustration when investments such as welfare programs don’t pull people out of poverty. “I believe in helping those who cannot help themselves but would if they could,” said Senator Orrin Hatch (Republican of Utah) this past December, when explaining his views on government spending. “I have a rough time wanting to spend billions and billions and trillions of dollars to help people who won’t help themselves, won’t lift a finger, and expect the federal government to do everything.” &lt;/p&gt;
&lt;p&gt;Hatch’s statement reflects a common view that removing government support would force many poor people to improve their conditions themselves. Without welfare and government assistance, would able-bodied people find a job, get an education, stop buying lottery tickets, and focus on paying bills?&lt;/p&gt;
&lt;p&gt;Not quite, indicate researchers, whose work is telling a different story of poverty. Contrary to the refrain that bad decisions lead to poverty, data indicate that it is the cognitive toll of being poor that leads to bad decisions. And actually, decisions that may &lt;em&gt;seem&lt;/em&gt; counterproductive could be entirely rational, even shrewd. The findings suggest that to successfully reduce poverty, it would help to take this psychology into account. &lt;/p&gt;
&lt;h2&gt;What drives ‘bad’ decisions&lt;/h2&gt;
&lt;p&gt;In a 2013 study published in &lt;em&gt;Science&lt;/em&gt;, researchers from the University of Warwick, Harvard, Princeton, and the University of British Columbia find that for poor individuals, working through a difficult financial problem produces a cognitive strain that’s equivalent to a 13-point deficit in IQ or a full night’s sleep lost. Similar cognitive deficits were observed in people who were under real-life financial stress. Theirs is one of multiple studies suggesting that poverty can harm cognition. &lt;/p&gt;
&lt;p&gt;But it was the fact that cognition seems to change with changing financial conditions that Chicago Booth’s &lt;a href=&quot;http://review.chicagobooth.edu/experts/anuj-k-shah&quot;&gt;Anuj K. Shah&lt;/a&gt;, along with Harvard’s &lt;a href=&quot;http://review.chicagobooth.edu/experts/sendhil-mullainathan&quot;&gt;Sendhil Mullainathan&lt;/a&gt; and Princeton’s &lt;a href=&quot;http://review.chicagobooth.edu/experts/eldar-shafir&quot;&gt;Eldar Shafir&lt;/a&gt;, two authors of the &lt;em&gt;Science&lt;/em&gt; paper, were interested in getting to the root of. They suspected that poverty might essentially create a new mind-set—one that shifts what people pay attention to and therefore how they make decisions. &lt;/p&gt;
&lt;p&gt;“Some say you really have to understand the broad social structure of being poor, and what people do and don’t have access to,” says Shah. “Others say that poor individuals have different values or preferences. We stepped back and asked: ‘Is there something else going on?’” &lt;/p&gt;
&lt;div id=&quot;game&quot; readability=&quot;28&quot;&gt;
&lt;p class=&quot;sideHead&quot;&gt;&lt;strong&gt;What’s on your mind?&lt;/strong&gt;&lt;/p&gt;
&lt;p id=&quot;gameIntro&quot;&gt;For an illustration of how poverty can affect one's thought process, try the test below. We'll give you 20 seconds to review a list of words, then ask you to write down as many as you can recall. For more, see “Money on the brain,” below.&lt;/p&gt;
&lt;p id=&quot;inputInstructions&quot;&gt;Now write down as many of the words as you can remember. There's no time limit. When you're ready, click the Submit button to see how you did.&lt;/p&gt;
&lt;p id=&quot;resultsGraf&quot;&gt;You remembered &lt;span id=&quot;answerCount&quot;&gt;1&lt;/span&gt; out of 12 words correctly. Just as significant, you &lt;span id=&quot;magicWord&quot;&gt;left out&lt;/span&gt; the magic word: &lt;span id=&quot;money&quot;&gt;money&lt;/span&gt;. Although ‘money’ was not on the list, in an experiment, poorer participants were more likely to remember seeing it, as the words on the list are all associated with financial concerns.&lt;/p&gt;
&lt;div id=&quot;resultsCharts&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;Percentage in the original experiment who included the word ‘money’&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;http://review.chicagobooth.edu/sites/default/files/Poverty-Words-Money.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;&lt;button id=&quot;startButton&quot; onclick=&quot;startGame()&quot;&gt;Start&lt;/button&gt;&lt;/p&gt;
&lt;p id=&quot;countdowntimer&quot;&gt;20&lt;/p&gt;
&lt;p&gt;Rent&lt;br/&gt;Loan&lt;br/&gt;Phone&lt;br/&gt;Dollar&lt;br/&gt;Coin&lt;br/&gt;Gas&lt;br/&gt;Bills&lt;br/&gt;Expense&lt;br/&gt;Grocery&lt;br/&gt;Utilities&lt;br/&gt;Cash&lt;br/&gt;Pay&lt;/p&gt;

&lt;/div&gt;
&lt;p&gt;To test the idea, the researchers designed experiments that stripped away money and put other resources in demand. In one such study, the researchers had participants play variants of the popular games &lt;em&gt;Wheel of Fortune&lt;/em&gt;, &lt;em&gt;Angry Birds&lt;/em&gt;, and &lt;em&gt;Family Feud&lt;/em&gt;, looking for how scarcity affected players’ attention. “Rich” people in these constructs had more chances to earn points, so more time to play the game. “Poor” people had fewer chances. &lt;/p&gt;
&lt;p&gt;In the &lt;em&gt;Wheel of Fortune&lt;/em&gt;–style game, the researchers measured how cognitively fatigued the players became. Logic would predict that rich players would be more fatigued, since they were allowed more turns to make more guesses. Instead, the researchers observed that poor players, having received fewer tries to guess at the answers, were more fatigued, having put more effort into each guess. &lt;/p&gt;
&lt;p&gt;In an &lt;em&gt;Angry Birds&lt;/em&gt;–style game in which people tried to shoot targets, rich players were given more chances to train a virtual slingshot on a target. Poor players, given fewer attempts, spent longer lining up their shots, and many scored more points per shot than rich players. For all the extra shots rich players had, they didn’t do as well, proportionally. “It seems that to understand the psychology of scarcity, we must also appreciate the psychology of abundance. If scarcity can engage us too much, abundance might engage us too little,” the researchers write.&lt;/p&gt;

&lt;p&gt;In some ways, scarcity appears to make people better problem solvers. In these game versions of the world, says Shah, the players randomly assigned to be poor focused on what was concrete and in front of them. And that’s what happens in real life, too, write Shah, Mullainathan, and Shafir. When money is tight, “the very lack of available resources makes each expense more insistent and more pressing. A trip to the grocery store looms larger, and this month’s rent constantly seizes our attention. Because these problems feel bigger and capture our attention, we engage more deeply in solving them.” &lt;/p&gt;
&lt;p&gt;Unfortunately, one way to solve the problem in the short run is to borrow, which can backfire. In the experiments, when poor participants were allowed to borrow resources, that borrowing undid some of the advantages of scarcity. When the researchers looked at performance as a function of borrowing, they find that poor players often borrowed more than they should have, and performed better when they weren’t permitted to borrow. Poverty led to wise decisions, but it also led to counterproductive ones.  &lt;/p&gt;
&lt;h2&gt;Trade-offs become real&lt;/h2&gt;
&lt;p&gt;Shah, Mullainathan, and Shafir looked further into how poverty affects decision-making, and find that poor people may evaluate trade-offs better than their wealthier counterparts. Just as the &lt;em&gt;Angry Birds&lt;/em&gt; players spent more time lining up a shot, people with actual financial concerns might also make better, more focused decisions, closer to what economists consider ideal.&lt;/p&gt;
&lt;p&gt;The researchers asked real people of various socioeconomic strata if they were willing to travel an extra 30 minutes to save $50 on a $300 tablet. Some said they were. But when asked if they’d drive that far to save the same amount on a $1,000 tablet, some of the respondents changed their minds. Their answer depended on their income. &lt;/p&gt;

&lt;p&gt;Many people were, irrationally, more likely to say yes when buying a $300 tablet rather than a $1,000 one. But that response was more common among wealthier people. For poorer individuals, the cost of the tablet often didn’t matter—regardless of the price, they were just as likely to travel for the discount.&lt;/p&gt;
&lt;p&gt;That’s the correct financial decision, according to traditional economics—to drive the extra distance no matter the original cost. Saving $50 is the same regardless of the amount of the item in question. But wealthier participants saw the savings in relative terms, noticing the percentage savings. By contrast, poorer participants thought in absolute terms. To them, $50 saved was $50 to spend on groceries or the electric bill. &lt;/p&gt;
&lt;p&gt;The same pattern showed up in experiments that involved smaller and larger amounts of money or other rewards. Even calories fit the pattern: people who were dieting, and therefore in a scarcity mind-set, recognized that an order of McDonald’s fries was just as fattening whether thought of in terms of daily or weekly calorie intakes. But people who were not dieting were more swayed by context. Once again, scarcity prompted the more accurate decision. &lt;/p&gt;
&lt;h2&gt;Put it into practice&lt;/h2&gt;
&lt;p&gt;If people in poverty are making smart decisions considering the situation, how could that be recognized and better encouraged? There may be ways to help people when they’re facing potentially expensive borrowing decisions. For example, Chicago Booth’s &lt;a href=&quot;http://review.chicagobooth.edu/experts/marianne-bertrand&quot;&gt;Marianne Bertrand&lt;/a&gt; and University of California at Berkeley’s &lt;a href=&quot;http://review.chicagobooth.edu/experts/adair-morse&quot;&gt;Adair Morse&lt;/a&gt; studied high-interest payday loans and find that people made better decisions when the interest rate was expressed in terms of dollar amounts, namely the cost they’d pay over three months. “We’d explain this by saying that a dollar amount is a lot more concrete,” says Shah. “You can think about exactly what you’d have to give up to pay off the loan.”&lt;/p&gt;
&lt;p&gt;“Program designers and policy makers often suffer from a failure to accurately take the perspective of the people they are trying to help,” says Chicago Booth’s &lt;a href=&quot;http://review.chicagobooth.edu/experts/christopher-j-bryan&quot;&gt;Christopher J. Bryan&lt;/a&gt;. “They design programs that would be appealing to people if they had the luxury of being able to devote careful thought and attention to considering them. But poverty imposes a heavy attentional ‘tax’ that prevents people from devoting that kind of thought to new opportunities, so program uptake is low.”&lt;/p&gt;

&lt;p&gt;Bryan was the lead author of a policy paper that recommended new strategies to policy makers and other relevant parties based on recent findings. Among other things, he and his coresearchers advise that an effort be made to reduce the up-front cost of future-oriented behaviors. For example, they point out that in a study by researchers at the World Bank, Harvard, and Yale, giving kids free school uniforms boosted school enrollment in Kenya by more than 6 percentage points. Similarly, researchers at Stanford, Harvard, and the University of Toronto, in conjunction with H&amp;amp;R Block, find that offering US students assistance with their applications for federally funded college student aid has been shown to increase enrollment in college by 24 percent. &lt;/p&gt;
&lt;p&gt;The researchers urge service providers to weigh price and inconvenience carefully, particularly when offering health-related services, which many people may forgo if the cost or the distance is too great. A program in Uganda brought health products such as water-purification tablets and antimalarial drugs to people door-to-door, which removed the issue of making people travel to get these products. That simple step to counter the inconvenience of seeking out products and services had an effect. “It can sometimes be better to charge a small fee and make a service very convenient than to charge nothing for a very inconvenient service,” write the researchers. In this case, the cost of delivery was included in the price of the products. &lt;/p&gt;
&lt;p&gt;The researchers also recommend taking into account the timing of incentives—and they advise to avoid offering them when money is tight and people are consumed with the pressing need to budget what little they have to meet basic needs. In India, where sugarcane farmers are paid annually after the harvest, farmers’ attention scores were the equivalent of 10 IQ points higher than just before the harvest, when farmers were relatively poor, according to data from the 2013 &lt;em&gt;Science&lt;/em&gt; study mentioned earlier. &lt;/p&gt;
&lt;p&gt;Offering subsidies or other incentives when people are more receptive to and have the spare capacity to consider them, such as after a harvest or a payday, may make a difference over the long run. One effort, in Tanzania, asked people to sign up for health insurance at cashpoint locations right after payday, and the timing led to a 20 percentage point increase in health-insurance use. &lt;/p&gt;
&lt;p&gt;Introducing cognitive aids can help address the limited capacity for attention that may constrain people in poverty. In one study, it helped to show farmers research regarding the most productive ways to plant their crops. When poor, stressed, and in a scarcity mind-set, farmers had a harder time taking in the information. “This result has nothing to do with the intelligence of the farmers,” writes Bryan’s team. “A fact is only obvious if the observer has the spare attentional capacity to notice it.” &lt;/p&gt;
&lt;p&gt;They also suggest that reminders, in the form of text messages or stickers, can be effective. Such gentle pushes—for instance, to take medication on schedule—can help people remember to do what they may otherwise forget, since other duties and obligations may compete for attention. &lt;/p&gt;
&lt;p&gt;For those who design and implement antipoverty initiatives, it’s important to recognize that while scarcity can help people focus on costs and benefits, it can also cause stress that shifts attention and steals cognitive bandwidth. A big step forward would be to understand these psychological limits that poverty imposes and make some policy tweaks, write the researchers, to “substantially improve the impact they have on the poor.”&lt;/p&gt;
</description>
<pubDate>Sun, 25 Feb 2018 23:12:05 +0000</pubDate>
<dc:creator>bryanwbh</dc:creator>
<og:type>article</og:type>
<og:url>http://review.chicagobooth.edu/behavioral-science/2018/article/how-poverty-changes-your-mind-set</og:url>
<og:title>How poverty changes your mind-set</og:title>
<og:description>Understanding psychology may be key to addressing the problem</og:description>
<og:image>http://review.chicagobooth.edu/sites/default/files/article_art/FEA_Poverty3.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://review.chicagobooth.edu/behavioral-science/2018/article/how-poverty-changes-your-mind-set</dc:identifier>
</item>
<item>
<title>What is happening in the Arctic is now beyond words, so here are the pictures</title>
<link>http://www.climatecodered.org/2018/02/what-is-happening-in-arctic-is-now.html</link>
<guid isPermaLink="true" >http://www.climatecodered.org/2018/02/what-is-happening-in-arctic-is-now.html</guid>
<description>In the depths of the northern winter, and with 24-hour darkness at the North Pole, an extraordinary climate warming event is happening. And for many scientists it is now beyond words. So here from Zack Labe (&lt;a href=&quot;https://twitter.com/ZLabe&quot;&gt;@ZLabe&lt;/a&gt;) are some images which tell the story of the recording-smashing warming and sea-ice melting occurring right now high in the Arctic.&lt;br/&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;
&lt;div dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Sea ice extent in the Bering Sea (Arctic) continues its decline. &quot;Warm&quot; and strong southerly winds have contributed to this anomalous retreat of ice into the Bering Strait. 2018 is the clear outlier in the satellite era (each thin line = 1979-2017, &lt;a href=&quot;https://twitter.com/NSIDC?ref_src=twsrc%5Etfw&quot;&gt;@NSIDC&lt;/a&gt; data) &lt;a href=&quot;https://t.co/kzEV6yEFmp&quot;&gt;pic.twitter.com/kzEV6yEFmp&lt;/a&gt;&lt;/div&gt;
— Zack Labe (@ZLabe) &lt;a href=&quot;https://twitter.com/ZLabe/status/967538448327352321?ref_src=twsrc%5Etfw&quot;&gt;February 24, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;br/&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;
&lt;div dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;The extreme event continues to unfold in the high &lt;a href=&quot;https://twitter.com/hashtag/Arctic?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Arctic&lt;/a&gt; today in response to a surge of moisture and &quot;warmth&quot;&lt;p&gt;2018 is well exceeding previous years (thin lines) for the month of February. 2018 is the red line. Average temperature is in white (&lt;a href=&quot;https://t.co/kO5ufUWrKq&quot;&gt;https://t.co/kO5ufUWrKq&lt;/a&gt;) &lt;a href=&quot;https://t.co/cLeMxSxvWo&quot;&gt;pic.twitter.com/cLeMxSxvWo&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
— Zack Labe (@ZLabe) &lt;a href=&quot;https://twitter.com/ZLabe/status/967838618252320768?ref_src=twsrc%5Etfw&quot;&gt;February 25, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;br/&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;

— Lars Kaleschke (@seaice_de) &lt;a href=&quot;https://twitter.com/seaice_de/status/967679640402874369?ref_src=twsrc%5Etfw&quot;&gt;February 25, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;br/&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;
&lt;div dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;February? This is crazy. Retreat of sea ice in the Bering Sea continues - well below the previous record low in the satellite era. &lt;a href=&quot;https://t.co/9UoqZvaFr2&quot;&gt;pic.twitter.com/9UoqZvaFr2&lt;/a&gt;&lt;/div&gt;
— Zack Labe (@ZLabe) &lt;a href=&quot;https://twitter.com/ZLabe/status/966343051210735616?ref_src=twsrc%5Etfw&quot;&gt;February 21, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;br/&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;

— Zack Labe (@ZLabe) &lt;a href=&quot;https://twitter.com/ZLabe/status/967145033970298880?ref_src=twsrc%5Etfw&quot;&gt;February 23, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;br/&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;

— Zack Labe (@ZLabe) &lt;a href=&quot;https://twitter.com/ZLabe/status/967498889854050304?ref_src=twsrc%5Etfw&quot;&gt;February 24, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;br/&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;
&lt;div dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;The most intense surge of moisture/warmth (relative to average) for this event will be pushing over the North Pole tomorrow. Temperatures projected near 0°C. Meanwhile, brutal cold remains over Europe.&lt;p&gt;Graphics available from &lt;a href=&quot;https://t.co/PsOBvTVbA2&quot;&gt;https://t.co/PsOBvTVbA2&lt;/a&gt; &lt;a href=&quot;https://t.co/LK6rvpaow6&quot;&gt;pic.twitter.com/LK6rvpaow6&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
— Zack Labe (@ZLabe) &lt;a href=&quot;https://twitter.com/ZLabe/status/967591344402124802?ref_src=twsrc%5Etfw&quot;&gt;February 25, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;

— Zack Labe (@ZLabe) &lt;a href=&quot;https://twitter.com/ZLabe/status/798240539409690625?ref_src=twsrc%5Etfw&quot;&gt;November 14, 2016&lt;/a&gt;&lt;/blockquote&gt;

</description>
<pubDate>Sun, 25 Feb 2018 22:49:38 +0000</pubDate>
<dc:creator>Red_Tarsius</dc:creator>
<og:url>http://www.climatecodered.org/2018/02/what-is-happening-in-arctic-is-now.html</og:url>
<og:title>What is happening in the Arctic is now beyond words, so here are the pictures</og:title>
<og:description>The climate emergency requires actions at emergency speed for a rapid transition to a post-carbon, safe-climate future.</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.climatecodered.org/2018/02/what-is-happening-in-arctic-is-now.html</dc:identifier>
</item>
<item>
<title>A Brief Introduction to Machine Learning for Engineers (2017)</title>
<link>https://arxiv.org/abs/1709.02840</link>
<guid isPermaLink="true" >https://arxiv.org/abs/1709.02840</guid>
<description>&lt;div id=&quot;&quot;&gt;
&lt;p&gt;&lt;span class=&quot;descriptor&quot;&gt;Abstract:&lt;/span&gt; This monograph aims at providing an introduction to key concepts, algorithms, and theoretical frameworks in machine learning, including supervised and unsupervised learning, statistical learning theory, probabilistic graphical models and approximate inference. The intended readership consists of electrical engineers with a background in probability and linear algebra. The treatment builds on first principles, and organizes the main ideas according to clearly defined categories, such as discriminative and generative models, frequentist and Bayesian approaches, exact and approximate inference, directed and undirected models, and convex and non-convex optimization. The mathematical framework uses information-theoretic measures as a unifying tool. The text offers simple and reproducible numerical examples providing insights into key motivations and conclusions. Rather than providing exhaustive details on the existing myriad solutions in each specific category, for which the reader is referred to textbooks and papers, this monograph is meant as an entry point for an engineer into the literature on machine learning.&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;29.526315789474&quot;&gt;
&lt;h2&gt;Submission history&lt;/h2&gt;
From: Osvaldo Simeone [&lt;a href=&quot;https://arxiv.org/show-email/b614b33d/1709.02840&quot;&gt;view email&lt;/a&gt;]&lt;br /&gt;&lt;strong&gt;[v1]&lt;/strong&gt; Fri, 8 Sep 2017 19:21:26 GMT (6401kb)&lt;br /&gt;&lt;/div&gt;</description>
<pubDate>Sun, 25 Feb 2018 22:28:33 +0000</pubDate>
<dc:creator>lainon</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arxiv.org/abs/1709.02840</dc:identifier>
</item>
<item>
<title>What I Learned Burning $14k on YouTube Ads for Candy Japan</title>
<link>https://www.candyjapan.com/behind-the-scenes/what-i-learned-advertising-on-youtube</link>
<guid isPermaLink="true" >https://www.candyjapan.com/behind-the-scenes/what-i-learned-advertising-on-youtube</guid>
<description>&lt;p&gt;YouTube allows you to pay to show an ad before a video plays.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.candyjapan.com/&quot;&gt;Candy Japan&lt;/a&gt; is a service aimed at people with some interest in Japan, and there is an endless supply of videos aimed at the same audience. While the chances of success seemed low due to the high cost of advertising there, the promise of hitting a major new source of customers made it worth a shot.&lt;/p&gt;
&lt;p&gt;Here's what I learned along the way from creating the video all the way to tweaking the ad campaign and finally looking at the results.&lt;/p&gt;
&lt;h2&gt;Creating an ad for YouTube&lt;/h2&gt;
&lt;p&gt;With AdWords you just need three lines of text, but to advertise on YouTube you need a video to show.&lt;/p&gt;
&lt;p&gt;The major types of videos are screencasts, live action or an animation. Screencasts might work well if you were trying to sell an app or a game, but wasn't really applicable for my candy subscription service.&lt;/p&gt;
&lt;p&gt;I considered a live video showing the candy boxes being delivered, or an animated explainer video. Since the people viewing my ad had a high likelihood of also liking anime, I figured an ad in a similar style might be a good match.&lt;/p&gt;
&lt;h3&gt;Process &amp;amp; cost of creating an animated ad&lt;/h3&gt;
&lt;p&gt;I found some examples indicating that an animation would cost about $100 - $150 per second to make. Given that a typical YouTube ad is 30 seconds, you can see this gets expensive fast.&lt;/p&gt;
&lt;p&gt;I found two options: either hire an animation studio, or work with a freelancer. Since I had already worked with an artist to create the manga illustration for the site, I asked him if he might be able to create an animation too.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Creating an ad for YouTube&quot; src=&quot;https://www.candyjapan.com/static/mangaexplainer.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Me and my wife came up with a quick storyboard, just using stick figures. I compiled them into a slideshow, wrote the voiceover dialog and mumbled it out while flipping the slides to create the timings.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;candyjapan-stickfigure&quot; src=&quot;https://www.candyjapan.com/static/candyjapan-stickfigure.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Based on our stick figure slides, the artist drew up keyframes. That moved things forward, as we could now discuss particular changes we wanted.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;candyjapan-box-flying&quot; src=&quot;https://www.candyjapan.com/static/candyjapan-box-flying.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Based on my mumblings I ordered a voiceover with a professional actress reading out the lines properly. The voiceover cost was about $100, which seemed relatively cheap now, as I was already paying about $3000 for the animation.&lt;/p&gt;
&lt;p&gt;With rough sketches and a voice track timed to them, work could start to turn them into final animation assets.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=-0aY1GxvRMk&quot;&gt;&lt;img alt=&quot;candy-flying-ad&quot; src=&quot;https://www.candyjapan.com/static/candy-flying-ad.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The whole process from finding someone able to do this to actually having an uploadable video took 4 months. I imagine that going with a studio might have been a better choice, as the cost would have been similar but the turnaround time would likely have been much faster.&lt;/p&gt;
&lt;p&gt;Here's the &lt;a href=&quot;https://www.youtube.com/watch?v=-0aY1GxvRMk&quot;&gt;end result&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;You've got to spend money to spend money&lt;/h2&gt;
&lt;p&gt;Now after spending a lot of money to create an ad, you can finally get started spending even more money showing the ad to people.&lt;/p&gt;
&lt;p&gt;YouTube itself is used to upload the video. You can make it unlisted if you want. Then to get the ad to appear before videos (&lt;em&gt;&quot;In-stream ad&quot;&lt;/em&gt; ), you use AdWords to create a campaign. The YouTube video ID is used to link the AdWords ad with the video.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Editing a YouTube ad on AdWords&quot; src=&quot;https://www.candyjapan.com/static/adwords-youtube-ad.png&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;How YouTube ads are priced&lt;/h3&gt;
&lt;p&gt;Just like AdWords, the cost of an ad view is based on an auction between advertisers. However the auction is not based on clicks, but on views. To enter this auction the minimum bid is $0.01 per view, which might sound low, but isn't really.&lt;/p&gt;
&lt;p&gt;Internet advertising is usually priced in terms of 1000 views, called the CPM rate. The low end starts at much less than a dollar, for example &lt;a href=&quot;https://www.projectwonderful.com/advertisehere.php?id=70571&amp;amp;type=3%C2%AEions=1,0,2,9,&amp;amp;sumdata=1&quot;&gt;advertising on Explain XKCD costs about $0.20 per 1000 views&lt;/a&gt;. Mid range would be single digits, say &lt;a href=&quot;https://www.buysellads.com/buy/detail/19392&quot;&gt;$3 for showing an ad on Cult of Mac&lt;/a&gt;. The upper range is low double digits, for instance &lt;a href=&quot;https://www.buysellads.com/buy/detail/282603&quot;&gt;a banner on bitcoin.com costs $30 per 1000 views&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Translating the YouTube ads &quot;per view&quot; thinking into CPM: $0.01 per view would be $10 CPM. And this is just the &lt;strong&gt;minimum bid&lt;/strong&gt; that it is possible to pay. Bidding this low probably wouldn't get you many views, and I found myself bidding much higher (equivalent to &lt;a href=&quot;https://fitsmallbusiness.com/tv-advertising/&quot;&gt;actual TV ad prices&lt;/a&gt;) to get just enough views to determine whether my campaigns were working at all.&lt;/p&gt;
&lt;p&gt;Now the good news: you don't have to pay if someone quickly skips your video! So if you manage to come up with an ad that is completely uninteresting to people outside of your target audience such that they skip it immediately, you don't have to pay for those views.&lt;/p&gt;
&lt;p&gt;I found that 30% of people would actually watch our ad (70% skip). When you take into account that only 30% of people will watch the ad, a more accurate comparison with banner ads would be an interstitial ad with a $3 CPM minimum (1000 impressions _ 30% view ad _ $0.01).&lt;/p&gt;
&lt;p&gt;Now you might understand why I want to get people not in my target audience to skip – it's cheaper because you don't pay when people skip your ad!&lt;/p&gt;
&lt;h2&gt;Targeting options&lt;/h2&gt;
&lt;p&gt;Compared to TV advertising, YouTube really shines with all the options you have for showing your ad to only your desired audience. The main targeting options are topics, placements and audiences. Topics and placements control which videos your ad is shown against, while audiences allow you to show ads based on who is viewing the ad.&lt;/p&gt;
&lt;h3&gt;Topics&lt;/h3&gt;
&lt;p&gt;It would be a huge pain to have to individually select thousands of videos to show your ad against. That's where topics come in, as they are pre-made groups of videos relating to a certain subject.&lt;/p&gt;
&lt;p&gt;For example if you are trying to market a strategy game, you are in luck, because there is a topic just for that.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;adwords-youtube-topics&quot; src=&quot;https://www.candyjapan.com/static/adwords-youtube-topics.png&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;Placements&lt;/h3&gt;
&lt;p&gt;With placements you can show your ad before a certain video, or before all the videos of your chosen YouTube channels.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;adwords-placements&quot; src=&quot;https://www.candyjapan.com/static/adwords-placements.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;For instance if you were selling an app for creating bingo cards, you could find all the &quot;how to make bingo cards&quot;-type videos and show your ad before those.&lt;/p&gt;
&lt;p&gt;Sadly in practice I found that it was difficult to get views this way, at least for any price I was willing to test. Even when listing thousands of videos, I wasn't able to get any meaningful amount of views for my ad. It could be that a lot of the videos I tried were either unpopular, had monetization disabled or my bids were just way too low.&lt;/p&gt;
&lt;h3&gt;Audiences&lt;/h3&gt;
&lt;p&gt;With audience matching Google tries to figure out what type of a person is viewing a video, and if that matches your selection then your ad can be shown.&lt;/p&gt;
&lt;p&gt;There are a lot of options here. You can target investors, cooking enthusiasts, people into DIY, pet lovers, gamers and more.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;adwords-audiences&quot; src=&quot;https://www.candyjapan.com/static/adwords-audiences.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Audience matching finally gave me enough clicks to find out whether anyone ever buys anything through YouTube ads.&lt;/p&gt;
&lt;h3&gt;Keywords&lt;/h3&gt;
&lt;p&gt;In the beginning I said there are topics, placements and audiences, but actually there is another targeting method. One where I still have no idea how it is supposed to work: keywords.&lt;/p&gt;
&lt;p&gt;I assumed to trigger a keyword match, the video title or description would have to match it. This turned out not to be the case.&lt;/p&gt;
&lt;p&gt;For example when I tried the keyword &quot;anime&quot;, my ad got shown before these videos: &lt;a href=&quot;https://www.youtube.com/watch?v=3jf66b9VQ8c&quot;&gt;some Lithuanian song&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=qBqEFwhdoo8&quot;&gt;a tutorial on how to make gnomes&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=86f3332Kp2w&quot;&gt;some german rap video&lt;/a&gt;. Not exactly anime.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Targeting options&quot; src=&quot;https://www.candyjapan.com/static/gnomesbro.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&quot;Keywords can trigger your ad to show when people view related content on YouTube, websites or apps&quot;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Apparently this &quot;related content&quot; is defined more broadly than I had assumed.&lt;/p&gt;
&lt;h2&gt;I know what video you saw last summer&lt;/h2&gt;
&lt;p&gt;Oh yeah, I wanted to mention a cool tracking thing YouTube provides. As you might assume, you can easily track when a click on the ad results in a sale. But the cool part is that you can also track when someone views your ad, and then a bit later types in your web address to make the purchase without ever clicking the link.&lt;/p&gt;
&lt;p&gt;In other words you can track both people who click through an ad directly, or who see your ad and then visit your site a bit later (this is known as a &quot;&lt;em&gt;view-through conversion&lt;/em&gt; &quot;). It's magic. Magical enough that you'll have to take Google's word on it that these customers actually did view the ad, since you won't be able to detect it yourself.&lt;/p&gt;
&lt;p&gt;Besides purely trusting the reports given to me, I also added a field to my order form where I asked people &quot;where did you hear about Candy Japan?&quot;. This confirmed that YouTube really was sending these new customers.&lt;/p&gt;
&lt;h2&gt;Tweaking the campaign: exclude!&lt;/h2&gt;
&lt;p&gt;AdWords gives you a lot of interesting data about which of your targeting options converted and which did not. Looking carefully at the data AdWords gave me, I did find a few simple ways for lowering the cost of a sale.&lt;/p&gt;
&lt;p&gt;The key realization here is that advertising is as much about showing your ad to people, as it is about NOT showing it to those less likely to buy. An easy start is to just stop all topics or audiences that don't seem to be working.&lt;/p&gt;
&lt;p&gt;If that still doesn't make your campaign profitable, there are broader exclusions and bid adjustments you can make based on age, gender, device, location, parental status and household income. For instance you might find that people in certain locations or age groups are less likely to buy than others.&lt;/p&gt;
&lt;p&gt;With these adjustments I was able to significantly lower the cost per conversion for the campaign.&lt;/p&gt;
&lt;h2&gt;In conclusion, did you break even?&lt;/h2&gt;
&lt;p&gt;Nope. I lost money.&lt;/p&gt;
&lt;p&gt;Many viewers did place an order after seeing the ad, but not enough to justify continuing the campaign. This was true even taking into account the full lifetime value of a customer. While I was not able to make the campaign break even, by tweaking the targeting options I was able to get pretty close.&lt;/p&gt;
&lt;p&gt;For now I have stopped the campaign and will reflect a bit on what went wrong before possibly trying again.&lt;/p&gt;
&lt;p&gt;As advice for someone else who wants to try advertising on YouTube, I'd say your product or service should make at least tens of dollars in profit to at least have a shot at making the numbers work. Advertising an app with a flat cost of only a few dollars would be unlikely to work even at the lowest bid levels.&lt;/p&gt;
&lt;p&gt;If you do have a suitable product, be prepared to spend thousands while you tweak your campaign towards profitability.&lt;/p&gt;
&lt;p&gt;Thanks for reading. If you would like to try some candy yourself, you can &lt;a href=&quot;https://www.candyjapan.com/&quot;&gt;sign up here&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sun, 25 Feb 2018 21:14:55 +0000</pubDate>
<dc:creator>jbardnz</dc:creator>
<og:title>What I Learned Burning $13,867 on YouTube Ads for Candy Japan</og:title>
<og:description>Explains how expensive it is to advertise on YouTube, what is involved in launching a campaign and finally tweaking it towards profitability.</og:description>
<og:url>https://www.candyjapan.com/behind-the-scenes/what-i-learned-advertising-on-youtube</og:url>
<og:type>article</og:type>
<og:image>https://www.candyjapan.com/static/iceberg.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.candyjapan.com/behind-the-scenes/what-i-learned-advertising-on-youtube</dc:identifier>
</item>
<item>
<title>KaiOS – A Powerful Smartphone Operating System</title>
<link>https://www.kaiostech.com/</link>
<guid isPermaLink="true" >https://www.kaiostech.com/</guid>
<description>&lt;div class=&quot;slider__slide&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;
&lt;h2&gt;The emerging OS&lt;/h2&gt;
KaiOS powers a new category of light phones and other connected devices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;slider__slide&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;
&lt;h2&gt;Connects without exception&lt;/h2&gt;
KaiOS allows partners to bring the digital revolution to everyone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;slider__slide&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;
&lt;h2&gt;Kai is real&lt;/h2&gt;
KaiOS is already used by millions of users in North America and India.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 25 Feb 2018 20:32:47 +0000</pubDate>
<dc:creator>fstephany</dc:creator>
<og:type>website</og:type>
<og:title>A Powerful Operating System- KaiOS</og:title>
<og:description>KaiOS is a mobile operating system. It merges the power of a smartphone with the affordability of a feature phone. KaiOS supports 4G and has an app store.</og:description>
<og:url>https://www.kaiostech.com/</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.kaiostech.com/</dc:identifier>
</item>
<item>
<title>Requests-HTML: HTML Parsing for Humans</title>
<link>https://github.com/kennethreitz/requests-html</link>
<guid isPermaLink="true" >https://github.com/kennethreitz/requests-html</guid>
<description>&lt;h3&gt;README.rst&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;h2&gt;Requests-HTML: HTML Parsing for Humans™&lt;/h2&gt;
&lt;p&gt;This library intends to make parsing HTML (e.g. scraping the web) as simple and intuitive as possible.&lt;/p&gt;
&lt;p&gt;When using this library you automatically get:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;CSS Selectors (a.k.a jQuery-style, thanks to PyQuery).&lt;/li&gt;
&lt;li&gt;XPath Selectors, for the faint at heart.&lt;/li&gt;
&lt;li&gt;Mocked user-agent (like a real web browser).&lt;/li&gt;
&lt;li&gt;Automatic following of redirects.&lt;/li&gt;
&lt;li&gt;Connection–pooling and cookie persistience.&lt;/li&gt;
&lt;li&gt;The Requests experience you know and love, with magic parsing abilities.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Other nice features include:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Markdown export of pages and elements.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;Make a GET request to 'python.org', using Requests:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-text-python-console&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; requests_html &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; session
&amp;gt;&amp;gt;&amp;gt; r &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; session.get(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;https://python.org/&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Grab a list of all links on the page, as–is (anchors excluded):&lt;/p&gt;
&lt;div class=&quot;highlight highlight-text-python-console&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; r.html.links
{'/users/membership/', '/about/gettingstarted/', 'http://feedproxy.google.com/~r/PythonInsider/~3/zVC80sq9s00/python-364-is-now-available.html', '/about/success/', 'http://flask.pocoo.org/', 'http://www.djangoproject.com/', '/blogs/', ... '/psf-landing/', 'https://wiki.python.org/moin/PythonBooks'}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Grab a list of all links on the page, in absolute form (anchors excluded):&lt;/p&gt;
&lt;div class=&quot;highlight highlight-text-python-console&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; r.html.absolute_links
{'http://feedproxy.google.com/~r/PythonInsider/~3/zVC80sq9s00/python-364-is-now-available.html', 'https://www.python.org/downloads/mac-osx/', 'http://flask.pocoo.org/', 'https://www.python.org/docs.python.org/3/tutorial/', 'http://www.djangoproject.com/', 'https://wiki.python.org/moin/BeginnersGuide', 'https://www.python.org/about/success/', 'http://twitter.com/ThePSF', 'https://www.python.org/events/python-user-group/634/', ..., 'https://wiki.python.org/moin/PythonBooks'}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Select an element with a CSS Selector:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-text-python-console&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; about &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; r.html.find(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;#about&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Grab an element's text contents:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-text-python-console&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(about.text)
About
Applications
Quotes
Getting Started
Help
Python Brochure
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Introspect an Element's attributes:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-text-python-console&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; about.attrs
{'id': 'about', 'class': 'tier-1 element-1  ', 'aria-haspopup': 'true'}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Select Elements within Elements:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-text-python-console&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; about.find(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
[&amp;lt;Element 'a' href='/about/' title='' class=''&amp;gt;, &amp;lt;Element 'a' href='/about/apps/' title=''&amp;gt;, &amp;lt;Element 'a' href='/about/quotes/' title=''&amp;gt;, &amp;lt;Element 'a' href='/about/gettingstarted/' title=''&amp;gt;, &amp;lt;Element 'a' href='/about/help/' title=''&amp;gt;, &amp;lt;Element 'a' href='http://brochure.getpython.info/' title=''&amp;gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Render an Element as Markdown:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-text-python-console&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(about.markdown)

* [About](/about/)

  * [Applications](/about/apps/)
  * [Quotes](/about/quotes/)
  * [Getting Started](/about/gettingstarted/)
  * [Help](/about/help/)
  * [Python Brochure](http://brochure.getpython.info/)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Search for text on the page:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-text-python-console&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; r.html.search(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Python is a &lt;span class=&quot;pl-c1&quot;&gt;{}&lt;/span&gt; language&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]
programming
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More complex CSS Selector example (copied from Chrome dev tools):&lt;/p&gt;
&lt;div class=&quot;highlight highlight-text-python-console&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; r &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; session.get(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;https://github.com/&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&amp;gt;&amp;gt;&amp;gt; sel &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;body &amp;gt; div.application-main &amp;gt; div.jumbotron.jumbotron-codelines &amp;gt; div &amp;gt; div &amp;gt; div.col-md-7.text-center.text-md-left &amp;gt; p&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(r.html.find(sel, &lt;span class=&quot;pl-v&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;).text)
GitHub is a development platform inspired by the way you work. From open source to business, you can host and review code, manage projects, and build software alongside millions of other developers.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;XPath is also supported:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-text-python-console&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; r.html.xpath(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
[&amp;lt;Element 'a' class='btn' href='https://help.github.com/articles/supported-browsers'&amp;gt;]
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Installation&lt;/h2&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ pipenv install requests-html
✨🍰✨
&lt;/pre&gt;&lt;/div&gt;
&lt;/article&gt;</description>
<pubDate>Sun, 25 Feb 2018 17:54:07 +0000</pubDate>
<dc:creator>ingve</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/119893?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>kennethreitz/requests-html</og:title>
<og:url>https://github.com/kennethreitz/requests-html</og:url>
<og:description>requests-html - HTML Parsing for Humans™</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/kennethreitz/requests-html</dc:identifier>
</item>
<item>
<title>Web application from scratch, part I</title>
<link>https://defn.io/2018/02/25/web-app-from-scratch-01/</link>
<guid isPermaLink="true" >https://defn.io/2018/02/25/web-app-from-scratch-01/</guid>
<description>&lt;p&gt;This is the first in a series of posts in which I’m going to go through the process of building a web application (and its web server) from scratch in Python. For the purposes of this series, I’m going to solely rely on the Python standard library and I’m going to ignore the WSGI standard.&lt;/p&gt;
&lt;p&gt;Without further ado, let’s get to it!&lt;/p&gt;

&lt;p&gt;To begin with, we’re going to write the HTTP server that will power our web app. But first, we need to spend a little time looking into how the HTTP protocol works.&lt;/p&gt;
&lt;h2 id=&quot;how-http-works&quot;&gt;How HTTP works&lt;/h2&gt;
&lt;p&gt;Simply put, HTTP clients connect to HTTP servers over the network and send them a string of data representing the request. The server then interprets that request and sends the client back a response. The entire protocol and the formats of those requests and responses are described in &lt;a href=&quot;https://tools.ietf.org/html/rfc2616&quot;&gt;RFC2616&lt;/a&gt;, but I’m going to informally describe them below so you don’t have to read the whole thing.&lt;/p&gt;
&lt;h3 id=&quot;request-format&quot;&gt;Request format&lt;/h3&gt;
&lt;p&gt;Requests are represented by a series of &lt;code&gt;\r\n&lt;/code&gt;-separated lines, the first of which is called the “request line”. The request line is made up of an HTTP method, followed by a space, followed by the path of the file being requested, followed by another space, followed by the HTTP protocol version the client speaks and, finally, followed by a carriage return (&lt;code&gt;\r&lt;/code&gt;) and a line feed (&lt;code&gt;\n&lt;/code&gt;) character:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;GET /some-path HTTP/1.1\r\n
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After the request line come zero or more header lines. Each header line is made up of the header name, followed by a colon, followed by an optional value, followed by &lt;code&gt;\r\n&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;Host: example.com\r\n
Accept: text/html\r\n
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The end of the headers section is signaled by an empty line:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;\r\n
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Finally, the request may contain a “body” – an arbitrary payload that is sent to the server with the request.&lt;/p&gt;
&lt;p&gt;Putting it all together, here’s a simple &lt;code&gt;GET&lt;/code&gt; request:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;GET / HTTP/1.1\r\n
Host: example.com\r\n
Accept: text/html\r\n
\r\n
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and here’s a simple &lt;code&gt;POST&lt;/code&gt; request with a body:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;POST / HTTP/1.1\r\n
Host: example.com\r\n
Accept: application/json\r\n
Content-type: application/json\r\n
Content-length: 2\r\n
\r\n
{}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;response-format&quot;&gt;Response format&lt;/h3&gt;
&lt;p&gt;Responses, like requests, are made up of a series of &lt;code&gt;\r\n&lt;/code&gt;-separated lines. The first line in the response is called the “status line” and it is made up of the HTTP protocol version, followed by a space, followed by the response status code, followed by another space, then the status code reason, followed by &lt;code&gt;\r\n&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;HTTP/1.1 200 OK\r\n
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After the status line come the response headers, then an empty line and then an optional response body:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;HTTP/1.1 200 OK\r\n
Content-type: text/html\r\n
Content-length: 15\r\n
\r\n
&amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;a-simple-server&quot;&gt;A simple server&lt;/h2&gt;
&lt;p&gt;Based on what we know so far about the protocol, let’s write a server that sends the same response regardless of the incoming request.&lt;/p&gt;
&lt;p&gt;To start out, we need to create a socket, bind it to an address and then start listening for connections.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;import socket

HOST = &quot;127.0.0.1&quot;
PORT = 9000

# By default, socket.socket creates TCP sockets.
with socket.socket() as server_sock:
    # This tells the kernel to reuse sockets that are in `TIME_WAIT` state.
    server_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    # This tells the socket what address to bind to.
    server_sock.bind((HOST, PORT))

    # 0 is the number of pending connections the socket may have before
    # new connections are refused.  Since this server is going to process
    # one connection at a time, we want to refuse any additional connections.
    server_sock.listen(0)
    print(f&quot;Listening on {HOST}:{PORT}...&quot;)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you try to run this code now, it’ll print to standard out that it’s listening on &lt;code&gt;127.0.0.1:9000&lt;/code&gt; and then exit. In order to actually process incoming connections we need to call the &lt;code&gt;accept&lt;/code&gt; method on our socket. Doing so will block the process until a client connects to our server.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;with socket.socket() as server_sock:
    server_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_sock.bind((HOST, PORT))
    server_sock.listen(0)
    print(f&quot;Listening on {HOST}:{PORT}...&quot;)

    client_sock, client_addr = server_sock.accept()
    print(f&quot;New connection from {client_addr}.&quot;)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Once we have a socket connection to the client, we can start to communicate with it. Using the &lt;code&gt;sendall&lt;/code&gt; method, let’s send the connecting client an example response:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;RESPONSE = b&quot;&quot;&quot;\
HTTP/1.1 200 OK
Content-type: text/html
Content-length: 15

&amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;&quot;&quot;&quot;.replace(b&quot;\n&quot;, b&quot;\r\n&quot;)

with socket.socket() as server_sock:
    server_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_sock.bind((HOST, PORT))
    server_sock.listen(0)
    print(f&quot;Listening on {HOST}:{PORT}...&quot;)

    client_sock, client_addr = server_sock.accept()
    print(f&quot;New connection from {client_addr}.&quot;)
    with client_sock:
        client_sock.sendall(RESPONSE)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you run the code now and then visit &lt;a href=&quot;http://127.0.0.1:9000&quot;&gt;http://127.0.0.1:9000&lt;/a&gt; in your favourite browser, it should render the string “Hello!”. Unfortunately, the server will exit after it sends the response so refreshing the page will fail. Let’s fix that:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;RESPONSE = b&quot;&quot;&quot;\
HTTP/1.1 200 OK
Content-type: text/html
Content-length: 15

&amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;&quot;&quot;&quot;.replace(b&quot;\n&quot;, b&quot;\r\n&quot;)

with socket.socket() as server_sock:
    server_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_sock.bind((HOST, PORT))
    server_sock.listen(0)
    print(f&quot;Listening on {HOST}:{PORT}...&quot;)

    while True:
        client_sock, client_addr = server_sock.accept()
        print(f&quot;New connection from {client_addr}.&quot;)
        with client_sock:
            client_sock.sendall(RESPONSE)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;At this point we have a web server that can serve a simple HTML web page on every request, all in about 25 lines of code. That’s not too bad!&lt;/p&gt;
&lt;h2 id=&quot;a-file-server&quot;&gt;A file server&lt;/h2&gt;
&lt;p&gt;Let’s extend the HTTP server so that it can serve files off of disk.&lt;/p&gt;
&lt;h3 id=&quot;request-abstraction&quot;&gt;Request abstraction&lt;/h3&gt;
&lt;p&gt;Before we can do that, we have to be able to read and parse incoming request data from the client. Since we know that request data is represented by a series of lines, each separated by &lt;code&gt;\r\n&lt;/code&gt; characters, let’s write a generator function that reads data from a socket and yields each individual line:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;import typing


def iter_lines(sock: socket.socket, bufsize: int = 16_384) -&amp;gt; typing.Generator[bytes, None, bytes]:
    &quot;&quot;&quot;Given a socket, read all the individual CRLF-separated lines
    and yield each one until an empty one is found.  Returns the
    remainder after the empty line.
    &quot;&quot;&quot;
    buff = b&quot;&quot;
    while True:
        data = sock.recv(bufsize)
        if not data:
            return b&quot;&quot;

        buff += data
        while True:
            try:
                i = buff.index(b&quot;\r\n&quot;)
                line, buff = buff[:i], buff[i + 2:]
                if not line:
                    return buff

                yield line
            except IndexError:
                break
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This may look a bit daunting, but essentially what it does is it reads as much data as it can from the socket (in &lt;code&gt;bufsize&lt;/code&gt; chunks), joins that data together in a buffer (&lt;code&gt;buff&lt;/code&gt;) and continually splits the buffer into individual lines, yielding one at a time. Once it finds an empty line, it returns the extra data that it read.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;iter_lines&lt;/code&gt;, we can begin printing the requests we get from our clients:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;with socket.socket() as server_sock:
    server_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_sock.bind((HOST, PORT))
    server_sock.listen(0)
    print(f&quot;Listening on {HOST}:{PORT}...&quot;)

    while True:
        client_sock, client_addr = server_sock.accept()
        print(f&quot;New connection from {client_addr}.&quot;)
        with client_sock:
            for request_line in iter_lines(client_sock):
                print(line)

            client_sock.sendall(RESPONSE)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you run the server now and visit &lt;a href=&quot;http://127.0.0.1:9000&quot;&gt;http://127.0.0.1:9000&lt;/a&gt;, you should see something like this in your console:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;Received connection from ('127.0.0.1', 62086)...
b'GET / HTTP/1.1'
b'Host: localhost:9000'
b'Connection: keep-alive'
b'Cache-Control: max-age=0'
b'Upgrade-Insecure-Requests: 1'
b'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.167 Safari/537.36'
b'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'
b'Accept-Encoding: gzip, deflate, br'
b'Accept-Language: en-US,en;q=0.9,ro;q=0.8'
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Pretty neat! Let’s abstract over that data by defining a &lt;code&gt;Request&lt;/code&gt; class:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;import typing


class Request(typing.NamedTuple):
    method: str
    path: str
    headers: typing.Mapping[str, str]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For now, the request class is only going to know about methods, paths and request headers. We’ll leave parsing query string parameters and reading request bodies for later.&lt;/p&gt;
&lt;p&gt;To encapsulate the logic needed to build up a request, we’ll add a class method to &lt;code&gt;Request&lt;/code&gt; called &lt;code&gt;from_socket&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;class Request(typing.NamedTuple):
    method: str
    path: str
    headers: typing.Mapping[str, str]

    @classmethod
    def from_socket(cls, sock: socket.socket) -&amp;gt; &quot;Request&quot;:
        &quot;&quot;&quot;Read and parse the request from a socket object.

        Raises:
          ValueError: When the request cannot be parsed.
        &quot;&quot;&quot;
        lines = iter_lines(sock)

        try:
            request_line = next(lines).decode(&quot;ascii&quot;)
        except StopIteration:
            raise ValueError(&quot;Request line missing.&quot;)

        try:
            method, path, _ = request_line.split(&quot; &quot;)
        except ValueError:
            raise ValueError(f&quot;Malformed request line {request_line!r}.&quot;)

        headers = {}
        for line in lines:
            try:
                name, _, value = line.decode(&quot;ascii&quot;).partition(&quot;:&quot;)
                headers[name.lower()] = value.lstrip()
            except ValueError:
                raise ValueError(f&quot;Malformed header line {line!r}.&quot;)

        return cls(method=method.upper(), path=path, headers=headers)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It uses the &lt;code&gt;iter_lines&lt;/code&gt; function we defined earlier to read the request line. That’s where it gets the &lt;code&gt;method&lt;/code&gt; and the &lt;code&gt;path&lt;/code&gt;, then it reads each individual header line and parses those. Finally, it builds the &lt;code&gt;Request&lt;/code&gt; object and returns it. If we plug that into our server loop, it should look something like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;with socket.socket() as server_sock:
    server_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_sock.bind((HOST, PORT))
    server_sock.listen(0)
    print(f&quot;Listening on {HOST}:{PORT}...&quot;)

    while True:
        client_sock, client_addr = server_sock.accept()
        print(f&quot;Received connection from {client_addr}...&quot;)
        with client_sock:
            request = Request.from_socket(client_sock)
            print(request)
            client_sock.sendall(RESPONSE)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you connect to the server now, you should see lines like this one get printed out:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;Request(method='GET', path='/', headers={'host': 'localhost:9000', 'user-agent': 'curl/7.54.0', 'accept': '*/*'})
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Because &lt;code&gt;from_socket&lt;/code&gt; can raise an exception under certain circumstances, the server might crash if given an invalid request right now. To simulate this, you can use telnet to connect to the server and send it some bogus data:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;~&amp;gt; telnet 127.0.0.1 9000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
hello
Connection closed by foreign host.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Sure enough, the server crashed:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;Received connection from ('127.0.0.1', 62404)...
Traceback (most recent call last):
  File &quot;server.py&quot;, line 53, in parse
    request_line = next(lines).decode(&quot;ascii&quot;)
ValueError: not enough values to unpack (expected 3, got 1)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;server.py&quot;, line 82, in &amp;lt;module&amp;gt;
    with client_sock:
  File &quot;server.py&quot;, line 55, in parse
    raise ValueError(&quot;Request line missing.&quot;)
ValueError: Malformed request line 'hello'.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;To handle these kinds of issues a little more gracefully, let’s wrap the call to &lt;code&gt;from_socket&lt;/code&gt; in a try-except block and send the client a “400 Bad Request” response when we get a malformed request:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;BAD_REQUEST_RESPONSE = b&quot;&quot;&quot;\
HTTP/1.1 400 Bad Request
Content-type: text/plain
Content-length: 11

Bad Request&quot;&quot;&quot;.replace(b&quot;\n&quot;, b&quot;\r\n&quot;)

with socket.socket() as server_sock:
    server_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_sock.bind((HOST, PORT))
    server_sock.listen(0)
    print(f&quot;Listening on {HOST}:{PORT}...&quot;)

    while True:
        client_sock, client_addr = server_sock.accept()
        print(f&quot;Received connection from {client_addr}...&quot;)
        with client_sock:
            try:
                request = Request.from_socket(client_sock)
                print(request)
                client_sock.sendall(RESPONSE)
            except Exception as e:
                print(f&quot;Failed to parse request: {e}&quot;)
                client_sock.sendall(BAD_REQUEST_RESPONSE)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If we try to break it now, our client will get a response back and the server will stay up:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot;&gt;~&amp;gt; telnet 127.0.0.1 9000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
hello
HTTP/1.1 400 Bad Request
Content-type: text/plain
Content-length: 11

Bad RequestConnection closed by foreign host.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;At this point we’re ready to start implementing the file serving part, but first let’s make our default response a “404 Not Found” response:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;NOT_FOUND_RESPONSE = b&quot;&quot;&quot;\
HTTP/1.1 404 Not Found
Content-type: text/plain
Content-length: 9

Not Found&quot;&quot;&quot;.replace(b&quot;\n&quot;, b&quot;\r\n&quot;)

#...

with socket.socket() as server_sock:
    server_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_sock.bind((HOST, PORT))
    server_sock.listen(0)
    print(f&quot;Listening on {HOST}:{PORT}...&quot;)

    while True:
        client_sock, client_addr = server_sock.accept()
        print(f&quot;Received connection from {client_addr}...&quot;)
        with client_sock:
            try:
                request = Request.from_socket(client_sock)
                print(request)
                client_sock.sendall(NOT_FOUND_RESPONSE)
            except Exception as e:
                print(f&quot;Failed to parse request: {e}&quot;)
                client_sock.sendall(BAD_REQUEST_RESPONSE)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Additionally, let’s add a “405 Method Not Allowed” response. We’re going to need it for when we get anything other than a &lt;code&gt;GET&lt;/code&gt; request.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;METHOD_NOT_ALLOWED_RESPONSE = b&quot;&quot;&quot;\
HTTP/1.1 405 Method Not Allowed
Content-type: text/plain
Content-length: 17

Method Not Allowed&quot;&quot;&quot;.replace(b&quot;\n&quot;, b&quot;\r\n&quot;)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Let’s define a &lt;code&gt;SERVER_ROOT&lt;/code&gt; constant to represent where the server should serve files from and a &lt;code&gt;serve_file&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;import mimetypes
import os
import socket
import typing

SERVER_ROOT = os.path.abspath(&quot;www&quot;)

FILE_RESPONSE_TEMPLATE = &quot;&quot;&quot;\
HTTP/1.1 200 OK
Content-type: {content_type}
Content-length: {content_length}

&quot;&quot;&quot;.replace(&quot;\n&quot;, &quot;\r\n&quot;)


def serve_file(sock: socket.socket, path: str) -&amp;gt; None:
    &quot;&quot;&quot;Given a socket and the relative path to a file (relative to
    SERVER_SOCK), send that file to the socket if it exists.  If the
    file doesn't exist, send a &quot;404 Not Found&quot; response.
    &quot;&quot;&quot;
    if path == &quot;/&quot;:
        path = &quot;/index.html&quot;

    abspath = os.path.normpath(os.path.join(SERVER_ROOT, path.lstrip(&quot;/&quot;)))
    if not abspath.startswith(SERVER_ROOT):
        sock.sendall(NOT_FOUND_RESPONSE)
        return

    try:
        with open(abspath, &quot;rb&quot;) as f:
            stat = os.fstat(f.fileno())
            content_type, encoding = mimetypes.guess_type(abspath)
            if content_type is None:
                content_type = &quot;application/octet-stream&quot;

            if encoding is not None:
                content_type += f&quot;; charset={encoding}&quot;

            response_headers = FILE_RESPONSE_TEMPLATE.format(
                content_type=content_type,
                content_length=stat.st_size,
            ).encode(&quot;ascii&quot;)

            sock.sendall(response_headers)
            sock.sendfile(f)
    except FileNotFoundError:
        sock.sendall(NOT_FOUND_RESPONSE)
        return
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;serve_file&lt;/code&gt; takes the client socket and a path to a file. It then tries to resolve that path to a real file inside of the &lt;code&gt;SERVER_ROOT&lt;/code&gt;, returning a “not found” response if the file resolves outside of the server root. Then it tries to open the file and figure out its mime type and size (using &lt;code&gt;os.fstat&lt;/code&gt;), then it constructs the response headers and uses the &lt;code&gt;sendfile&lt;/code&gt; system call to write the file to the socket. If it can’t find the file on disk, then it sends a “not found” response.&lt;/p&gt;
&lt;p&gt;If we add &lt;code&gt;serve_file&lt;/code&gt; into the mix, our server loop should now look like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;with socket.socket() as server_sock:
    server_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_sock.bind((HOST, PORT))
    server_sock.listen(0)
    print(f&quot;Listening on {HOST}:{PORT}...&quot;)

    while True:
        client_sock, client_addr = server_sock.accept()
        print(f&quot;Received connection from {client_addr}...&quot;)
        with client_sock:
            try:
                request = Request.from_socket(client_sock)
                if request.method != &quot;GET&quot;:
                    client_sock.sendall(METHOD_NOT_ALLOWED_RESPONSE)
                    continue

                serve_file(client_sock, request.path)
            except Exception as e:
                print(f&quot;Failed to parse request: {e}&quot;)
                client_sock.sendall(BAD_REQUEST_RESPONSE)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you add a file called &lt;code&gt;www/index.html&lt;/code&gt; next to your &lt;code&gt;server.py&lt;/code&gt; file and visit &lt;a href=&quot;http://localhost:9000&quot;&gt;http://localhost:9000&lt;/a&gt; you should see the contents of that file. Cool, eh?&lt;/p&gt;
&lt;h2 id=&quot;winding-down&quot;&gt;Winding down&lt;/h2&gt;
&lt;p&gt;That’s it for part 1. In part 2 we’re going to cover extracting &lt;code&gt;Server&lt;/code&gt; and &lt;code&gt;Response&lt;/code&gt; abstractions as well as making the server handle multiple concurrent connections. If you’d like to check out the full source code and follow along, you can find it &lt;a href=&quot;https://github.com/Bogdanp/web-app-from-scratch/tree/part-01&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See ya next time!&lt;/p&gt;
&lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;/h2&gt;
&lt;p&gt;If you’d like to find out about new parts as they come out, you can subscribe to the newsletter for this series by filling the form below.&lt;/p&gt;

</description>
<pubDate>Sun, 25 Feb 2018 17:22:49 +0000</pubDate>
<dc:creator>Bogdanp</dc:creator>
<og:title>Web application from scratch, Part I</og:title>
<og:description>This is the first in a series of posts in which I’m going to go through the process of building a web application (and its web server) from scratch in Python. For the purposes of this series, I’m going to solely rely on the Python standard library and I’m going to ignore the WSGI standard. Without further ado, let’s get to it! The web server To begin with, we’re going to write the HTTP server that will power our web app.</og:description>
<og:type>article</og:type>
<og:url>https://defn.io/2018/02/25/web-app-from-scratch-01/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://defn.io/2018/02/25/web-app-from-scratch-01/</dc:identifier>
</item>
<item>
<title>Mark Felt-Tipped: Uncovering top-secret information by counting pixels</title>
<link>https://matthi.coffee/2018/mark-felt-tipped/</link>
<guid isPermaLink="true" >https://matthi.coffee/2018/mark-felt-tipped/</guid>
<description>&lt;h5&gt;Feb 25, 2018&lt;/h5&gt;
&lt;p&gt;On Saturday, the House Intelligence Committee &lt;a href=&quot;https://www.nytimes.com/2018/02/24/us/politics/democratic-memo-released-fbi-surveillance-carter-page.html?hp&amp;amp;action=click&amp;amp;pgtype=Homepage&amp;amp;clickSource=story-heading&amp;amp;module=first-column-region%C2%AEion=top-news&amp;amp;WT.nav=top-news&quot;&gt;released the Democratic&lt;/a&gt; (&lt;a href=&quot;http://docs.house.gov/meetings/ig/ig00/20180205/106838/hmtg-115-ig00-20180205-sd002.pdf&quot;&gt;PDF&lt;/a&gt;) rebuttal to the &lt;a href=&quot;https://www.nytimes.com/interactive/2018/02/02/us/politics/nunes-memo-gop-fbi-annotated.html&quot;&gt;&lt;em&gt;Nunes Memo&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While the full release of Nune’s memo was was approved by President Trump, the White House denied a similar request to publish the minority party’s response, citing concerns about the release of classified information. The version of the new memo released to the public was therefore heavily redacted.&lt;/p&gt;
&lt;p&gt;While the document still lays out the pieces of evidence used in FISA applications for the surveillance of Trump campaign advisor Carter Page, the individual claims’ details have been omitted. So while, for example, his meetings in Moscow are mentioned, the specific identities of his contacts at those meetings have been redacted.&lt;/p&gt;
&lt;p&gt;The document was released as a PDF that appears to be a scan of a printed copy that was manually redacted using a black felt-tipped pen or text marker.&lt;/p&gt;
&lt;img class=&quot;lazyload&quot; data-src=&quot;/images/trump-memo/redaction-example.jpg&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;Felt-tipped pen redactions in the released memo.&lt;/span&gt;
&lt;p&gt;While this method of redaction effectively obscures the relevant sentence fragments, the text’s layout remains unchanged. This opens up the tantalizing opportunity to reconstruct &lt;em&gt;top-secret&lt;/em&gt; information by correctly guessing fragments that result in the flow of text after each redaction to align to the released version.&lt;/p&gt;
&lt;p&gt;While most redactions appear to be too long to guess and manually check, there is one significant single-word redaction where the process described above leads to success with trivial ease.&lt;/p&gt;
&lt;p&gt;On page 3, the first paragraph contains the sentence “By then, the FBI had already opened sub-inquiries into [REDACTED] individuals linked to the Trump campaign”. The size of the redaction and context of the sentence strongly suggest the classified information to be a numeral.&lt;/p&gt;
&lt;img class=&quot;lazyload&quot; data-src=&quot;/images/trump-memo/individuals-redacted.jpg&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;Original release: a single, redacted numeral&lt;/span&gt;
&lt;p&gt;In the following illustractions, versions of the line with different numerals as the redacted word are overlayed the original release. Trial-and-error determined Times New Roman at 17pt to be a good fit for the original fiint and size. The original was slightly rotated to provide the best possible fit, since it was apparently scanned at a slight angle. A perfect recreation will diverge little from just the original, with the tested text lying directly on top of the original. Wrong guesses lead to clearly visible offsets. The software used is &lt;a href=&quot;http://www.pixelmator.com&quot;&gt;Pixelmator&lt;/a&gt;, a Photoshop-like image editor.&lt;/p&gt;
&lt;p&gt;Only the numerals “zero” to “ten” roughly fit the size of the redacted word, with “zero” and “one” being excluded because the resulting text would be nonsensical. Trying the remaining numerals “two” to “ten” results in the following.&lt;/p&gt;
&lt;img class=&quot;lazyload&quot; data-src=&quot;/images/trump-memo/individuals-two.jpg&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;'two' leads to a bad fit past the redaction&lt;/span&gt; &lt;img class=&quot;lazyload&quot; data-src=&quot;/images/trump-memo/individuals-two-detail.jpg&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;Larger view showing the clear tracking error after 'two'&lt;/span&gt; &lt;img class=&quot;lazyload&quot; data-src=&quot;/images/trump-memo/individuals-three.jpg&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;'three'&lt;/span&gt; &lt;img class=&quot;lazyload&quot; data-src=&quot;/images/trump-memo/individuals-four.jpg&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;'four'&lt;/span&gt; &lt;img class=&quot;lazyload&quot; data-src=&quot;/images/trump-memo/individuals-four-detail.jpg&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;Larger view showing constant fit before and after 'four'&lt;/span&gt; &lt;img class=&quot;lazyload&quot; data-src=&quot;/images/trump-memo/individuals-five.jpg&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;'five'&lt;/span&gt; &lt;img class=&quot;lazyload&quot; data-src=&quot;/images/trump-memo/individuals-six.jpg&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;'six'&lt;/span&gt; &lt;img class=&quot;lazyload&quot; data-src=&quot;/images/trump-memo/individuals-seven.jpg&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;'seven'&lt;/span&gt; &lt;img class=&quot;lazyload&quot; data-src=&quot;/images/trump-memo/individuals-eight.jpg&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;'eight'&lt;/span&gt; &lt;img class=&quot;lazyload&quot; data-src=&quot;/images/trump-memo/individuals-nine.jpg&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;'nine'&lt;/span&gt; &lt;img class=&quot;lazyload&quot; data-src=&quot;/images/trump-memo/individuals-ten.jpg&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;'ten'&lt;/span&gt;
&lt;p&gt;It is clearly visible that the numeral “four” gives us far higher accuracy for the text overlays that follow. We have defeated some three-letter agency’s tradecraft, and exposed &lt;em&gt;top-secret&lt;/em&gt; information with a $30 graphics program.&lt;/p&gt;
&lt;p&gt;I am working on automating this process and trying to find similar hits for the remaining redactions.&lt;/p&gt;
&lt;p&gt;Follow me on Twitter for updates: &lt;a href=&quot;https://twitter.com/whereismatthi&quot;&gt;@whereismatthi&lt;/a&gt;. Send inquiries to &lt;a href=&quot;mailto:m@matthi.coffee&quot;&gt;m@matthi.coffee&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2&gt;Other Articles&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://matthi.coffee/2018/mark-felt-tipped/&quot;&gt;Mark Felt-Tipped&lt;/a&gt; &lt;span class=&quot;mini-note&quot;&gt;Feb 25, 2018&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://matthi.coffee/2018/contact/&quot;&gt;Contact&lt;/a&gt; &lt;span class=&quot;mini-note&quot;&gt;Jan 1, 2018&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 25 Feb 2018 16:54:53 +0000</pubDate>
<dc:creator>matt4077</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://matthi.coffee/2018/mark-felt-tipped/</dc:identifier>
</item>
<item>
<title>An SVG that always shows today&amp;#039;s date</title>
<link>https://shkspr.mobi/blog/2018/02/this-svg-always-shows-todays-date/</link>
<guid isPermaLink="true" >https://shkspr.mobi/blog/2018/02/this-svg-always-shows-todays-date/</guid>
<description>&lt;p&gt;For &lt;a href=&quot;https://edent.tel/&quot;&gt;my contact page&lt;/a&gt;, I wanted a generic calendar icon to let people view my diary. Calendar icons are almost always a skeuomorph of a paper calendar, but I wondered if I could make it slightly more useful by creating a &lt;em&gt;dynamic&lt;/em&gt; icon.&lt;/p&gt;
&lt;p&gt;Here it is, &lt;a href=&quot;https://shkspr.mobi/svg/calendar.svg&quot;&gt;an SVG calendar which always display's today's date&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;small&gt;The background image is derived from the &lt;a href=&quot;https://github.com/twitter/twemoji/blob/gh-pages/2/svg/1f4c5.svg&quot;&gt;Twitter TweMoji Calendar icon&lt;/a&gt; - CC-BY.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Text support in SVG is a little awkward, so let me explain how I did this.&lt;/p&gt;
&lt;p&gt;SVG supports JavaScript. This will run as soon as the image is loaded.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;svg onload=&quot;init(evt)&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;
aria-label=&quot;Calendar&quot; role=&quot;img&quot; viewBox=&quot;0 0 512 512&quot;&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Next step is to get the various date strings. I'm using the &lt;code&gt;en-GB&lt;/code&gt; locale as that's where I'm based.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;script type=&quot;text/ecmascript&quot;&amp;gt;&amp;lt;![CDATA[
function init(evt) {
  var time = new Date();
  var locale = &quot;en-gb&quot;;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I want to display something like &quot;Sunday 25 FEB&quot; - the locale options allow for short and long names. So you could have &quot;SUN 25 February&quot;.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  var DD   = time.getDate();
  var DDDD = time.toLocaleString(locale, {weekday: &quot;long&quot;});
  var MMM = time.toLocaleString(locale,  {month:   &quot;short&quot;});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Finally, we need to add the text on to the image.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  var svgDocument = evt.target.ownerDocument;

  var dayNode = svgDocument.createTextNode(DD);
  svgDocument.getElementById(&quot;day&quot;).appendChild(dayNode);

  var weekdayNode = svgDocument.createTextNode(DDDD);
  svgDocument.getElementById(&quot;weekday&quot;).appendChild(weekdayNode);

  var monthNode = svgDocument.createTextNode(MMM.toUpperCase());
  svgDocument.getElementById(&quot;month&quot;).appendChild(monthNode);

}
]]&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Text positioning is relatively simplistic. An X &amp;amp; Y position which is anchored to the &lt;em&gt;bottom&lt;/em&gt; of the text - remember that letters with descenders like &lt;code&gt;g&lt;/code&gt; will extend beyond the bottom of the Y co-ordinate. This is also where we set the colour of the text, its size, and a font.&lt;/p&gt;
&lt;p&gt;A monospace font makes it easier to predict the layout.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;text id=&quot;month&quot;
  x=&quot;32&quot; 
  y=&quot;164&quot; 
  fill=&quot;#fff&quot; 
  font-family=&quot;monospace&quot;
  font-size=&quot;140px&quot;
  style=&quot;text-anchor: left&quot;&amp;gt;&amp;lt;/text&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;A word on anchoring. To centre the anchor, use &lt;code&gt;style=&quot;text-anchor: middle&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A quick test shows that this works on all desktop browsers and Android browsers. I've not tested on iPhones or anything more exotic.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;footer class=&quot;entry-footer&quot;/&gt;</description>
<pubDate>Sun, 25 Feb 2018 16:08:48 +0000</pubDate>
<dc:creator>edent</dc:creator>
<og:type>article</og:type>
<og:title>This SVG always shows today's date</og:title>
<og:url>https://shkspr.mobi/blog/2018/02/this-svg-always-shows-todays-date/</og:url>
<og:description>For my contact page, I wanted a generic calendar icon to let people view my diary. Calendar icons are almost always a skeuomorph of a paper calendar, but I wondered if I could make it slightly more…</og:description>
<og:image>https://shkspr.mobi/blog/wp-content/uploads/2018/02/calendar-fs8.png</og:image>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://shkspr.mobi/blog/2018/02/this-svg-always-shows-todays-date/</dc:identifier>
</item>
<item>
<title>Crankshaft – A GNU/Linux for the Raspberry Pi as an Android Auto headunit</title>
<link>http://getcrankshaft.com/</link>
<guid isPermaLink="true" >http://getcrankshaft.com/</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;/&gt;&lt;link href=&quot;https://fonts.googleapis.com/css?family=Open+Sans:300&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/screen.css&quot; type=&quot;text/css&quot;/&gt;&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;180x180&quot; href=&quot;/apple-touch-icon.png&quot;/&gt;&lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;/favicon.png&quot; sizes=&quot;32x32&quot;/&gt;&lt;title&gt;crankshaft: raspberry pi + android auto + free software + love.&lt;/title&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;22.717534410533&quot;&gt;
&lt;nav&gt;&lt;div class=&quot;container&quot;&gt;&lt;a href=&quot;http://getcrankshaft.com/&quot;&gt;&lt;img src=&quot;http://getcrankshaft.com/images/crankshaft-logo.png&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/nav&gt;&lt;div class=&quot;content&quot;&gt;
&lt;header&gt;&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;column&quot; readability=&quot;6.9948630136986&quot;&gt;
&lt;div readability=&quot;10.308219178082&quot;&gt;
&lt;p&gt;raspberry pi 💖 android auto&lt;/p&gt;
&lt;p&gt;Crankshaft is a turn-key GNU/Linux distribution for the Raspberry Pi that transforms it to an Android Auto headunit. All you need is a RPi3 board and &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-touch-display/&quot;&gt;its official 7&quot; touchscreen&lt;/a&gt;.&lt;br/&gt;&lt;a href=&quot;https://youtu.be/oq1TR78kpL4&quot; target=&quot;_blank&quot;&gt;Driving demo&lt;/a&gt;, &lt;a href=&quot;https://youtu.be/tFEpfuDBDjM&quot; target=&quot;_blank&quot;&gt;Features demo&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;subtitle&quot;&gt;Latest version: Alpha 0.1.0&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;column&quot;&gt;&lt;img src=&quot;http://getcrankshaft.com/images/crankshaft1.jpg&quot; alt=&quot;Not a sheep&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/header&gt;&lt;div class=&quot;container&quot;&gt;
&lt;h2 class=&quot;editable&quot;&gt;Crankshaft at a glance&lt;/h2&gt;
&lt;ul class=&quot;thirds&quot; readability=&quot;0.90502793296089&quot;&gt;&lt;li readability=&quot;0&quot;&gt;

&lt;h3 class=&quot;editable&quot;&gt;Free Software&lt;/h3&gt;
&lt;p class=&quot;editable&quot;&gt;Crankshaft is a distribution based on &lt;a href=&quot;https://github.com/f1xpl/openauto&quot; target=&quot;_blank&quot;&gt;OpenAuto&lt;/a&gt; and &lt;a href=&quot;https://github.com/f1xpl/aasdk&quot; target=&quot;_blank&quot;&gt;aasdk&lt;/a&gt;. All components of Crankshaft are licensed under the GPLv3.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;

&lt;h3 class=&quot;editable&quot;&gt;Fun &amp;amp; Likeable&lt;/h3&gt;
&lt;p class=&quot;editable&quot;&gt;It should just works. We want to create something we'd want to use ourselves and be proud of.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;

&lt;h3 class=&quot;editable&quot;&gt;Easy&lt;/h3&gt;
&lt;p class=&quot;editable&quot;&gt;No manual needed. &lt;a href=&quot;https://thepihut.com/blogs/raspberry-pi-tutorials/45295044-raspberry-pi-7-touch-screen-assembly-guide&quot; target=&quot;_blank&quot;&gt;Assemble the hardware&lt;/a&gt;. Download &amp;amp; unzip the image. Write it to an SDcard. Start. Plug phone in.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;columns&quot; readability=&quot;8.5441527446301&quot;&gt;
&lt;div&gt;&lt;img src=&quot;http://getcrankshaft.com/images/crankshaft2.jpg&quot; alt=&quot;Not a sheep either&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;12.816229116945&quot;&gt;
&lt;h2 class=&quot;editable&quot;&gt;Can I trust it to work?&lt;/h2&gt;
&lt;p class=&quot;editable&quot;&gt;It is alpha-level software, so of course not. But we hope you give it a try when it's safe to do so: Please don't drive and fumble with the toy. But we really hope you try and have fun with it. One day we will have a free software that you can trust that works the way you want, displays the information you want, and &lt;em&gt;does only that&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/htruong/crankshaft/issues/2&quot; target=&quot;_blank&quot;&gt;Phones/Hardware compatibility list&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://photos.app.goo.gl/81hQ6wTuLFNGmRHh2&quot; target=&quot;_blank&quot;&gt;Add your glamorous pictures&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;container&quot; id=&quot;donate&quot; readability=&quot;6.8818897637795&quot;&gt;
&lt;h2 class=&quot;editable&quot;&gt;Support us&lt;/h2&gt;

&lt;/div&gt;
&lt;div class=&quot;container&quot; readability=&quot;5.9733333333333&quot;&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;7.2533333333333&quot;&gt;
&lt;p class=&quot;quote editable&quot;&gt;I... the royal we, you know, the editorial...&lt;/p&gt;

&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;copyright&quot;&gt;&lt;a href=&quot;https://cloudcannon.com/&quot;&gt;Template by CloudCannon&lt;/a&gt;. Made with love from Raleigh, NC, USA. 2018.&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Sun, 25 Feb 2018 14:00:09 +0000</pubDate>
<dc:creator>jimmies</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://getcrankshaft.com/</dc:identifier>
</item>
</channel>
</rss>