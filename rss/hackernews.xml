<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Nasa’s IMAGE satellite, lost since 2005, found alive</title>
<link>https://skyriddles.wordpress.com/2018/01/21/nasas-long-dead-image-satellite-is-alive/</link>
<guid isPermaLink="true" >https://skyriddles.wordpress.com/2018/01/21/nasas-long-dead-image-satellite-is-alive/</guid>
<description>&lt;p&gt;Over the past week the station has been dedicated to an S-band scan looking for new targets and refreshing the frequency list, triggered by the recent launch of the mysterious ZUMA mission.  This tends to be a semi-annual activity as it can eat up a lot of observing resources even with much of the data gathering automated the data reviewing is tedious.&lt;/p&gt;
&lt;p&gt;Upon reviewing the data from January 20, 2018, I noticed a curve consistent with an satellite in High Earth Orbit (HEO) on 2275.905MHz, darn not ZUMA… This is not uncommon during these searches.  So I set to work to identify the source.&lt;/p&gt;
&lt;p&gt;A quick identity scan using ‘strf’ (sat tools rf) revealed the signal to come from 2000-017A, 26113, called &lt;a href=&quot;https://directory.eoportal.org/web/eoportal/satellite-missions/i/image-mission&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IMAGE&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;IMAGE ‘Found in Space!’&lt;/h2&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;33&quot; data-permalink=&quot;https://skyriddles.wordpress.com/2018/01/21/nasas-long-dead-image-satellite-is-alive/image3/&quot; data-orig-file=&quot;https://skyriddles.files.wordpress.com/2018/01/image3.png?w=840&quot; data-orig-size=&quot;1202,707&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;image3&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://skyriddles.files.wordpress.com/2018/01/image3.png?w=840?w=300&quot; data-large-file=&quot;https://skyriddles.files.wordpress.com/2018/01/image3.png?w=840?w=840&quot; class=&quot;alignnone size-full wp-image-33&quot; src=&quot;https://skyriddles.files.wordpress.com/2018/01/image3.png?w=840&quot; alt=&quot;image3&quot; srcset=&quot;https://skyriddles.files.wordpress.com/2018/01/image3.png?w=840 840w, https://skyriddles.files.wordpress.com/2018/01/image3.png?w=150 150w, https://skyriddles.files.wordpress.com/2018/01/image3.png?w=300 300w, https://skyriddles.files.wordpress.com/2018/01/image3.png?w=768 768w, https://skyriddles.files.wordpress.com/2018/01/image3.png?w=1024 1024w, https://skyriddles.files.wordpress.com/2018/01/image3.png 1202w&quot; sizes=&quot;(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Discovery plot above obtained of IMAGE and the first fit attempt that lead to revealing it’s identity.&lt;/p&gt;
&lt;h2&gt;IMAGE Calling Home, is Anyone Listening?&lt;/h2&gt;
&lt;p&gt;I didn’t think of it much more and went about my data review looking for any evidence of ZUMA.  But as I reviewed another chunk of spectrum a bit lower in frequency I was greeted by a much stronger carrier and what appeared to be data side bands.&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;35&quot; data-permalink=&quot;https://skyriddles.wordpress.com/2018/01/21/nasas-long-dead-image-satellite-is-alive/image8/&quot; data-orig-file=&quot;https://skyriddles.files.wordpress.com/2018/01/image8.png?w=840&quot; data-orig-size=&quot;1202,707&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;image8&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://skyriddles.files.wordpress.com/2018/01/image8.png?w=840?w=300&quot; data-large-file=&quot;https://skyriddles.files.wordpress.com/2018/01/image8.png?w=840?w=840&quot; class=&quot;alignnone size-full wp-image-35&quot; src=&quot;https://skyriddles.files.wordpress.com/2018/01/image8.png?w=840&quot; alt=&quot;image8&quot; srcset=&quot;https://skyriddles.files.wordpress.com/2018/01/image8.png?w=840 840w, https://skyriddles.files.wordpress.com/2018/01/image8.png?w=150 150w, https://skyriddles.files.wordpress.com/2018/01/image8.png?w=300 300w, https://skyriddles.files.wordpress.com/2018/01/image8.png?w=768 768w, https://skyriddles.files.wordpress.com/2018/01/image8.png?w=1024 1024w, https://skyriddles.files.wordpress.com/2018/01/image8.png 1202w&quot; sizes=&quot;(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The above images shows the data (+ 1.7MHz) at the top of the plot and the carrier centered on 2270.505MHz at the lower end of the plot, there was also a data side band at -1.7MHz, not shown for clarity.  With a properly equipped ground station, telemetry would certainly be possible to copy.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;CLARIFICATION, January 25, 2018 –&lt;/strong&gt; To help clarify the data side band observations please examine the image below as the classified STSS Demo 2, [2009-052B, 35938], mission in low earth orbit (LEO) also has a data side band on or about IMAGE’s.  Note the long duration of the IMAGE data side band corresponding to maximum elevation and closest approach to my ground station vs. the relatively brief one from STSS Demo 2. This can also be seen in the plot above but just is not that clear and no identification of the signals was presented.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;60&quot; data-permalink=&quot;https://skyriddles.wordpress.com/2018/01/21/nasas-long-dead-image-satellite-is-alive/screenshot_2018-01-25_00-23-24/&quot; data-orig-file=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-25_00-23-24.png?w=840&quot; data-orig-size=&quot;1202,707&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Screenshot_2018-01-25_00-23-24&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-25_00-23-24.png?w=840?w=300&quot; data-large-file=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-25_00-23-24.png?w=840?w=840&quot; class=&quot;alignnone size-full wp-image-60&quot; src=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-25_00-23-24.png?w=840&quot; alt=&quot;Screenshot_2018-01-25_00-23-24&quot; srcset=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-25_00-23-24.png?w=840 840w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-25_00-23-24.png?w=150 150w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-25_00-23-24.png?w=300 300w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-25_00-23-24.png?w=768 768w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-25_00-23-24.png?w=1024 1024w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-25_00-23-24.png 1202w&quot; sizes=&quot;(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;So what was IMAGE?  I did a little Googling and discovered that it had been ‘Lost in Space’ since December 18, 2005 after just dropping off the grid suddenly.  The mission was designed to image the magnetosphere, more details about that can be found in the &lt;a href=&quot;ftp://ftp.hq.nasa.gov/pub/pao/presskit/2000/image.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;press kit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;NASA considered the spacecraft a total loss due to a design flaw that manifested while the spacecraft was in its extended mission.  The &lt;a href=&quot;https://image.gsfc.nasa.gov/publication/document/IMAGE_FRB_Final_Report.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NASA failure review&lt;/a&gt; did however conclude that it was possible for the spacecraft to be revived by permitting a ‘Transponder SSPC reset’ after it passed through eclipse in 2007.  One must assume that didn’t occur in 2007 and they gave up.&lt;/p&gt;
&lt;h2&gt;IMAGE Still Spinning Near Operational Value&lt;/h2&gt;
&lt;p&gt;So with an undead satellite to monitor, I took up the task of collecting more data about it and let the system carry on without me in the search for ZUMA for a few hours.  Based on information in the NASA failure report and eoPortal the nominal spin rate of the spacecraft was noted as around 0.5 rpm that’s a period of about 120 seconds. By monitoring with my real-time receiver (see below) I was able to notice both a subtle period in the signal amplitude and frequency that appeared to be coincident.&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;42&quot; data-permalink=&quot;https://skyriddles.wordpress.com/2018/01/21/nasas-long-dead-image-satellite-is-alive/screenshot_2018-01-20_20-07-21/&quot; data-orig-file=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_20-07-21.png?w=840&quot; data-orig-size=&quot;1107,874&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Screenshot_2018-01-20_20-07-21&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_20-07-21.png?w=840?w=300&quot; data-large-file=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_20-07-21.png?w=840?w=840&quot; class=&quot;alignnone size-full wp-image-42&quot; src=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_20-07-21.png?w=840&quot; alt=&quot;Screenshot_2018-01-20_20-07-21&quot; srcset=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_20-07-21.png?w=840 840w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_20-07-21.png?w=150 150w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_20-07-21.png?w=300 300w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_20-07-21.png?w=768 768w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_20-07-21.png?w=1024 1024w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_20-07-21.png 1107w&quot; sizes=&quot;(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;After extracting some of the data from the strf plots, I was able to produce a curve that allowed for the extraction of the present period of the spacecraft as noted in the graph below it is presently about 175 seconds or 0.34 rpm.&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;36&quot; data-permalink=&quot;https://skyriddles.wordpress.com/2018/01/21/nasas-long-dead-image-satellite-is-alive/image-plot/&quot; data-orig-file=&quot;https://skyriddles.files.wordpress.com/2018/01/image-plot.png?w=840&quot; data-orig-size=&quot;856,341&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;IMAGE plot&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://skyriddles.files.wordpress.com/2018/01/image-plot.png?w=840?w=300&quot; data-large-file=&quot;https://skyriddles.files.wordpress.com/2018/01/image-plot.png?w=840?w=840&quot; class=&quot;alignnone size-full wp-image-36&quot; src=&quot;https://skyriddles.files.wordpress.com/2018/01/image-plot.png?w=840&quot; alt=&quot;IMAGE plot&quot; srcset=&quot;https://skyriddles.files.wordpress.com/2018/01/image-plot.png?w=840 840w, https://skyriddles.files.wordpress.com/2018/01/image-plot.png?w=150 150w, https://skyriddles.files.wordpress.com/2018/01/image-plot.png?w=300 300w, https://skyriddles.files.wordpress.com/2018/01/image-plot.png?w=768 768w, https://skyriddles.files.wordpress.com/2018/01/image-plot.png 856w&quot; sizes=&quot;(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;IMAGE Doppler Data Matches SpaceTrack TLE&lt;/h2&gt;
&lt;p&gt;As the day progressed the Doppler data made it crystal clear this was the lost IMAGE mission.&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;39&quot; data-permalink=&quot;https://skyriddles.wordpress.com/2018/01/21/nasas-long-dead-image-satellite-is-alive/screenshot_2018-01-20_22-15-55/&quot; data-orig-file=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-55.png?w=840&quot; data-orig-size=&quot;1202,707&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Screenshot_2018-01-20_22-15-55&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-55.png?w=840?w=300&quot; data-large-file=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-55.png?w=840?w=840&quot; class=&quot;alignnone size-full wp-image-39&quot; src=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-55.png?w=840&quot; alt=&quot;Screenshot_2018-01-20_22-15-55&quot; srcset=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-55.png?w=840 840w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-55.png?w=150 150w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-55.png?w=300 300w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-55.png?w=768 768w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-55.png?w=1024 1024w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-55.png 1202w&quot; sizes=&quot;(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;37&quot; data-permalink=&quot;https://skyriddles.wordpress.com/2018/01/21/nasas-long-dead-image-satellite-is-alive/screenshot_2018-01-20_22-15-10/&quot; data-orig-file=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-10.png?w=840&quot; data-orig-size=&quot;869,694&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Screenshot_2018-01-20_22-15-10&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-10.png?w=840?w=300&quot; data-large-file=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-10.png?w=840?w=840&quot; class=&quot;alignnone size-full wp-image-37&quot; src=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-10.png?w=840&quot; alt=&quot;Screenshot_2018-01-20_22-15-10&quot; srcset=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-10.png?w=840 840w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-10.png?w=150 150w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-10.png?w=300 300w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-10.png?w=768 768w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-10.png 869w&quot; sizes=&quot;(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;A fit without performing any fit functions and the curve clearly follows the behaviour of IMAGE’s TLE as provided by SpaceTrack.&lt;/p&gt;
&lt;h2&gt;IMAGE Track from COSPAR 8049&lt;/h2&gt;
&lt;p&gt;Below is the tracking plot from my ground station for the pass this data was collected from.  As you can see around 17:17UTC on January 20, 2018 it passed right overhead of me creating an impressive signal in my omnidirection search antenna.&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;41&quot; data-permalink=&quot;https://skyriddles.wordpress.com/2018/01/21/nasas-long-dead-image-satellite-is-alive/image7/&quot; data-orig-file=&quot;https://skyriddles.files.wordpress.com/2018/01/image7.png?w=840&quot; data-orig-size=&quot;1010,793&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;image7&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://skyriddles.files.wordpress.com/2018/01/image7.png?w=840?w=300&quot; data-large-file=&quot;https://skyriddles.files.wordpress.com/2018/01/image7.png?w=840?w=840&quot; class=&quot;alignnone size-full wp-image-41&quot; src=&quot;https://skyriddles.files.wordpress.com/2018/01/image7.png?w=840&quot; alt=&quot;image7&quot; srcset=&quot;https://skyriddles.files.wordpress.com/2018/01/image7.png?w=840 840w, https://skyriddles.files.wordpress.com/2018/01/image7.png?w=150 150w, https://skyriddles.files.wordpress.com/2018/01/image7.png?w=300 300w, https://skyriddles.files.wordpress.com/2018/01/image7.png?w=768 768w, https://skyriddles.files.wordpress.com/2018/01/image7.png 1010w&quot; sizes=&quot;(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;IMAGE Basking in the Sun&lt;/h2&gt;
&lt;p&gt;IMAGE was placed into an interesting HEO with a 90 degree inclination.  Periodically the spacecraft will enter an eclipse and NASA surmised that this may trigger it to restart and apply power back to the communications system.  That appears to have happened!  As you will note from the plots below the Sun angles are presently good for IMAGE and it may just stay operational for some time to come.&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;40&quot; data-permalink=&quot;https://skyriddles.wordpress.com/2018/01/21/nasas-long-dead-image-satellite-is-alive/screenshot_2018-01-20_16-46-46/&quot; data-orig-file=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_16-46-46.png?w=840&quot; data-orig-size=&quot;1010,793&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Screenshot_2018-01-20_16-46-46&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_16-46-46.png?w=840?w=300&quot; data-large-file=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_16-46-46.png?w=840?w=840&quot; class=&quot;alignnone size-full wp-image-40&quot; src=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_16-46-46.png?w=840&quot; alt=&quot;Screenshot_2018-01-20_16-46-46&quot; srcset=&quot;https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_16-46-46.png?w=840 840w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_16-46-46.png?w=150 150w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_16-46-46.png?w=300 300w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_16-46-46.png?w=768 768w, https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_16-46-46.png 1010w&quot; sizes=&quot;(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;IMAGE Reboot?&lt;/h2&gt;
&lt;p&gt;Like ISEE3 is it possible for IMAGE to be rebooted and controlled again?  Maybe, as it seems that the main reasons for it not calling home before have resolved themselves at least temporarily.&lt;/p&gt;
&lt;p&gt;A few major questions remain about the health of the spacecraft:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;What is the condition of the battery designed to power IMAGE during eclipse?&lt;/li&gt;
&lt;li&gt;What is the condition of the science payloads?  Did the heaters keep working while communication was out?&lt;/li&gt;
&lt;li&gt;Can IMAGE still accept commands and does it’s telemetry make any sense?  I.e. has long years in the harsh space environment damaged the computers and other hardware due to extremes of temperature and radiation?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;At the very least it made for an interesting Saturday afternoon in the radio room.&lt;/p&gt;
&lt;div id=&quot;jp-post-flair&quot; class=&quot;sharedaddy sd-like-enabled sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded&quot; id=&quot;like-post-wrapper-141190471-32-5a6b50dd76206&quot; data-src=&quot;//widgets.wp.com/likes/#blog_id=141190471&amp;amp;post_id=32&amp;amp;origin=skyriddles.wordpress.com&amp;amp;obj_id=141190471-32-5a6b50dd76206&quot; data-name=&quot;like-post-frame-141190471-32-5a6b50dd76206&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Like this:&lt;/h3&gt;
&lt;div class=&quot;likes-widget-placeholder post-likes-widget-placeholder&quot;&gt;&lt;span class=&quot;button&quot;&gt;&lt;span&gt;Like&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;loading&quot;&gt;Loading...&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;author-info&quot;&gt;
&lt;div class=&quot;author-avatar&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://1.gravatar.com/avatar/a8b2adfc562f8cb13811740dece1a73e?s=42&amp;amp;d=identicon&amp;amp;r=G&quot; class=&quot;avatar avatar-42&quot; height=&quot;42&quot; width=&quot;42&quot;/&gt;&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Fri, 26 Jan 2018 03:30:16 +0000</pubDate>
<dc:creator>sohkamyung</dc:creator>
<og:type>article</og:type>
<og:title>NASA’s Long Dead ‘IMAGE’ Satellite is Alive!</og:title>
<og:url>https://skyriddles.wordpress.com/2018/01/21/nasas-long-dead-image-satellite-is-alive/</og:url>
<og:description>Over the past week the station has been dedicated to an S-band scan looking for new targets and refreshing the frequency list, triggered by the recent launch of the mysterious ZUMA mission.  This t…</og:description>
<og:image>https://skyriddles.files.wordpress.com/2018/01/screenshot_2018-01-20_22-15-55.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://skyriddles.wordpress.com/2018/01/21/nasas-long-dead-image-satellite-is-alive/</dc:identifier>
</item>
<item>
<title>Former employees say Lyft staffers spied on passengers</title>
<link>https://techcrunch.com/2018/01/25/lyft-god-view/</link>
<guid isPermaLink="true" >https://techcrunch.com/2018/01/25/lyft-god-view/</guid>
<description>&lt;img src=&quot;https://tctechcrunch2011.files.wordpress.com/2018/01/lyft-spying.png?w=738&quot; class=&quot;&quot;/&gt;&lt;p id=&quot;speakable-summary&quot;&gt;Similar to Uber’s “God View” scandal, Lyft staffers have been abusing customer insight software to view the personal contact info and ride history of the startup’s passengers. One source that formerly worked with Lyft tells TechCrunch that widespread access to the company’s backend let staffers “see pretty much everything including feedback, and yes, pick up and drop off coordinates.”&lt;/p&gt;&lt;p&gt;When asked if staffers, ranging from core team members to customer service reps, abused this privilege, the source said “Hell yes. I definitely looked at my friends’ rider history and looked at what drivers said about them. I never got in trouble.” Another supposed employee anonymously reported on workplace app Blind that staffers had access to this private information and that the access was abused.&lt;/p&gt;
&lt;p&gt;Our source says that the data insights tool logs all usage, so staffers were warned by their peers to be careful when accessing it surreptitiously. For example, some thought that repeatedly searching for the same person might get noticed. But despite Lyft logging the access, enforcement was weak, so team members still abused it.&lt;/p&gt;
&lt;p&gt;Lyft tells TechCrunch that staffers in several departments that might need access to this data for their job have the ability to look up this information. That includes data analytics, engineering (particularly those working on fraud or investigations), customer support, insurance and the trust and safety team. A Lyft spokesperson confirmed it’s investigating the issue and that there have been instances of enforcement in the past. They provided this statement:&lt;/p&gt;
&lt;blockquote readability=&quot;17&quot;&gt;
&lt;p&gt;Maintaining the trust of passengers and drivers is fundamental to Lyft. The specific allegations in this post would be a violation of Lyft’s policies and a cause for termination, and have not been raised with our Legal or Executive teams. We are conducting an investigation into the matter.&lt;/p&gt;
&lt;p&gt;Access to data is restricted to certain teams that need it to do their jobs. For those teams, each query is logged and attributed to a specific individual. We require employees to be trained in our data privacy practices and responsible use policy, which categorically prohibit accessing and using customer data for reasons other than those required by their specific role at the company. Employees are required to sign confidentiality and responsible use agreements that bar them from accessing, using, or disclosing customer data outside the confines of their job responsibilities.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The news raises serious questions about proper data privacy at Lyft. While occasional access to rider data can be essential to some roles at the company, like if someone loses an item, widespread and improperly restricted access could be seen as a violation of riders’ trust. Lyft has tried to position itself as the friendlier, more ethical alternative to Uber, but staffers may have engaged in the same shady behavior.&lt;/p&gt;
&lt;div id=&quot;attachment_300161&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;32&quot;&gt;&lt;img class=&quot;wp-image-300161 size-full&quot; src=&quot;https://tctechcrunch2011.files.wordpress.com/2011/05/godview-png.jpg?w=620&amp;amp;h=408&quot; alt=&quot;&quot; width=&quot;620&quot; height=&quot;408&quot; srcset=&quot;https://tctechcrunch2011.files.wordpress.com/2011/05/godview-png.jpg 620w, https://tctechcrunch2011.files.wordpress.com/2011/05/godview-png.jpg?w=150&amp;amp;h=99 150w, https://tctechcrunch2011.files.wordpress.com/2011/05/godview-png.jpg?w=300&amp;amp;h=197 300w&quot; sizes=&quot;(max-width: 620px) 100vw, 620px&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;An image of Uber’s former God View program&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Back in 2014, &lt;a target=&quot;_blank&quot; href=&quot;https://www.buzzfeed.com/johanabhuiyan/uber-is-investigating-its-top-new-york-executive-for-privacy?utm_term=.iiyMPGOkM#.pdrPYOQ3P&quot; rel=&quot;noopener&quot;&gt;BuzzFeed&lt;/a&gt; broke news that Uber used a system called “God View” that let staffers see details about riders and their trips. That led to an investigation by the New York Attorney General’s office. It struck a &lt;a target=&quot;_blank&quot; href=&quot;https://ag.ny.gov/press-release/ag-schneiderman-announces-settlement-uber-enhance-rider-privacy&quot; rel=&quot;noopener&quot;&gt;settlement with Uber&lt;/a&gt; where the startup agreed to limit access to designated employees using multi-factor authentication, establish someone to supervise privacy of the system and audit usage of it. Yet reports surfaced in 2016 that Uber employees were &lt;a target=&quot;_blank&quot; href=&quot;https://www.revealnews.org/article/uber-said-it-protects-you-from-spying-security-sources-say-otherwise/&quot; rel=&quot;noopener&quot;&gt;still abusing&lt;/a&gt; the system renamed “Heaven View.”&lt;/p&gt;
&lt;p&gt;In early 2015, Lyft’s &lt;span class=&quot;s1&quot;&gt;CEO Logan Green and president John Zimmer responded to questioning about data privacy at Lyft and Uber from Senator Al Franken, writing that&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;“As recent events in our industry have made clear, customers may be justifiably concerned about a company making improper use of their trip data. We’ve taken this opportunity to reevaluate our own restrictions and protections to ensure that we are doing everything we can to keep our customers’ trip data safe.”&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;slideshow slideshowify&quot;&gt;
&lt;ol&gt;&lt;li&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img data-thumb=&quot;https://tctechcrunch2011.files.wordpress.com/2018/01/img_5101.jpg?w=80&amp;amp;h=60&amp;amp;crop=1&quot; data-full-size-image=&quot;https://tctechcrunch2011.files.wordpress.com/2018/01/img_5101.jpg&quot; data-large-size-image=&quot;https://tctechcrunch2011.files.wordpress.com/2018/01/img_5101.jpg?w=1&amp;amp;h=1&quot; data-trigger-notification=&quot;1&quot; data-scalable=&quot;false&quot; alt=&quot;&quot; data-src=&quot;https://tctechcrunch2011.files.wordpress.com/2018/01/img_5101.jpg?w=1&amp;amp;h=1&quot; data-tc-lazyload=&quot;deferred&quot; src=&quot;https://s0.wp.com/wp-content/themes/vip/techcrunch-2013/assets/images/1x1.png&quot; width=&quot;1&quot; height=&quot;1&quot;/&gt;&lt;/div&gt;
&lt;h3 class=&quot;title&quot;&gt;IMG_5101&lt;/h3&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img data-thumb=&quot;https://tctechcrunch2011.files.wordpress.com/2018/01/img_5102.jpg?w=80&amp;amp;h=60&amp;amp;crop=1&quot; data-full-size-image=&quot;https://tctechcrunch2011.files.wordpress.com/2018/01/img_5102.jpg&quot; data-large-size-image=&quot;https://tctechcrunch2011.files.wordpress.com/2018/01/img_5102.jpg?w=1&amp;amp;h=1&quot; data-trigger-notification=&quot;1&quot; data-scalable=&quot;false&quot; alt=&quot;&quot; data-src=&quot;https://tctechcrunch2011.files.wordpress.com/2018/01/img_5102.jpg?w=1&amp;amp;h=1&quot; data-tc-lazyload=&quot;deferred&quot; src=&quot;https://s0.wp.com/wp-content/themes/vip/techcrunch-2013/assets/images/1x1.png&quot; width=&quot;1&quot; height=&quot;1&quot;/&gt;&lt;/div&gt;
&lt;h3 class=&quot;title&quot;&gt;IMG_5102&lt;/h3&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img data-thumb=&quot;https://tctechcrunch2011.files.wordpress.com/2018/01/img_5103.jpg?w=80&amp;amp;h=60&amp;amp;crop=1&quot; data-full-size-image=&quot;https://tctechcrunch2011.files.wordpress.com/2018/01/img_5103.jpg&quot; data-large-size-image=&quot;https://tctechcrunch2011.files.wordpress.com/2018/01/img_5103.jpg?w=1&amp;amp;h=1&quot; data-trigger-notification=&quot;1&quot; data-scalable=&quot;false&quot; alt=&quot;&quot; data-src=&quot;https://tctechcrunch2011.files.wordpress.com/2018/01/img_5103.jpg?w=1&amp;amp;h=1&quot; data-tc-lazyload=&quot;deferred&quot; src=&quot;https://s0.wp.com/wp-content/themes/vip/techcrunch-2013/assets/images/1x1.png&quot; width=&quot;1&quot; height=&quot;1&quot;/&gt;&lt;/div&gt;
&lt;h3 class=&quot;title&quot;&gt;IMG_5103&lt;/h3&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;
&lt;p class=&quot;p1&quot;&gt;Today, though, TechCrunch received a tip about a supposed Lyft staffer with either a Lyft email address or public Lyft job listing who was using anonymous workplace app Blind to blow the whistle about data privacy abuse at the company.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;They claimed that staffers could use Lyft’s backend software to view unmasked personally identifiable information. This was said to be used to look up ex-lovers, check where their significant others were riding and to stalk people they found attractive who shared a Lyft Line with them. Staffers also could see who had bad ratings from drivers, or even look up the phone numbers of celebrities. One staffer apparently bragged about obtaining Facebook CEO Mark Zuckerberg’s phone number.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Lyft employees are active on Blind, and wrong information is typically challenged. But no one came out contradicting the original report before press time, beyond one person saying that access was limited, logged and audited, though it’s not clear to what degree. They also noted that some unmasked personal data was visible in places it didn’t need to be.&lt;/p&gt;
&lt;p&gt;Our source confirmed some of these practices to TechCrunch, saying they would check to see where their significant other was Lyfting to. “It was addictive. &lt;span class=&quot;_5yl5&quot;&gt;People were definitely doing what I was” &lt;/span&gt;they noted. New staffers were particularly keen to try it despite warnings to be careful.&lt;/p&gt;
&lt;p&gt;The situation highlights how having policies against bad behavior inside fast-moving startups doesn’t necessarily prevent abuse. Diligent enforcement must also be undertaken despite the costs or time required.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Additional reporting by Sarah Perez&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 25 Jan 2018 21:52:49 +0000</pubDate>
<dc:creator>dhruvarora013</dc:creator>
<og:title>Former employees say Lyft staffers spied on passengers</og:title>
<og:description>Similar to Uber's &quot;God View&quot; scandal, Lyft staffers have been abusing customer insight software to view the personal contact info and ride history of the..</og:description>
<og:image>https://tctechcrunch2011.files.wordpress.com/2018/01/lyft-spying.png</og:image>
<og:url>http://social.techcrunch.com/2018/01/25/lyft-god-view/</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2018/01/25/lyft-god-view/</dc:identifier>
</item>
<item>
<title>Some obscure C features</title>
<link>https://mort.coffee/home/obscure-c-features/</link>
<guid isPermaLink="true" >https://mort.coffee/home/obscure-c-features/</guid>
<description>&lt;p&gt;Date: 2018-01-25&lt;/p&gt;
&lt;p&gt;I have been working on &lt;a href=&quot;https://github.com/mortie/snow&quot;&gt;Snow&lt;/a&gt;, a unit testing library for C. I wanted to see how close I could come to making a DSL (domain specific language) with its own syntax and features, using only the C preprocessor and more obscure C features and GNU extensions. I will not go into detail about how Snow works unless it's directly relevant, so I recommend taking a quick look at the readme on &lt;a href=&quot;https://github.com/mortie/snow&quot;&gt;the GitHub page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Sending blocks as arguments to macros&lt;/h2&gt;
&lt;p&gt;Let's start with the trick that's probably both the most useful in everyday code, and the least technically complicated.&lt;/p&gt;
&lt;p&gt;Originally, I defined macros like &lt;code&gt;describe&lt;/code&gt;, &lt;code&gt;subdesc&lt;/code&gt;, and &lt;code&gt;it&lt;/code&gt; similar to this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;#define describe(name, block) \
        void test_##name() { \
                /* some code, omitted for brevity */ \
                block \
                /* more code */ \
        }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The intended use would then be like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;describe(something, {
        /* code */
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The C preprocessor doesn't really &lt;em&gt;understand&lt;/em&gt; the code; it only copies and pastes strings around. It splits the string between the opening &lt;code&gt;(&lt;/code&gt; and the closing &lt;code&gt;)&lt;/code&gt; by comma; that means, in this case, &lt;code&gt;something&lt;/code&gt; would be sent in as the first argument, and &lt;code&gt;{ /* code */ }&lt;/code&gt; as the second argument (pretend &lt;code&gt;/* code */&lt;/code&gt; is actual code; the preprocessor actually strips out comments). The C preprocessor is smart enough to know that you might want to pass function calls to macros, and function calls contain commas, so parentheses will &quot;guard&quot; the commas they contain. &lt;code&gt;describe(something, foo(10, 20))&lt;/code&gt; would therefore pass &lt;code&gt;something&lt;/code&gt; as the first argument, and &lt;code&gt;foo(10, 20)&lt;/code&gt; as the second argument.&lt;/p&gt;
&lt;p&gt;Now, we're not passing in function calls, but blocks. The preprocessor only considers parentheses; braces &lt;code&gt;{ }&lt;/code&gt; or brackets &lt;code&gt;[ ]&lt;/code&gt; don't guard their contents. That means this call will fail:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;describe(something, {
        int a, b;
        /* code */
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The preprocessor will interpret &lt;code&gt;something&lt;/code&gt; as the first argument, &lt;code&gt;{ int a&lt;/code&gt; as the second argument, and &lt;code&gt;b; /* code */ }&lt;/code&gt; as the third argument, but &lt;code&gt;describe&lt;/code&gt; only takes two arguments! The preprocessor will halt and show an error message.&lt;/p&gt;
&lt;p&gt;So, how do we fix this? Not being able to write commas outside of parentheses in our blocks is quite the limitation. Not only does it prevent us from declaring multiple variables in one statement, it also messes with array declarations like &lt;code&gt;int foo[] = { 10, 20, 30 };&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Well, the preprocessor supports variadic macros; macros which can take an unlimited amount of arguments. The way they are implemented is that any extra arguments (indicated by &lt;code&gt;...&lt;/code&gt; in the macro definition) are made available through the &lt;code&gt;__VA_ARGS__&lt;/code&gt; identifier; &lt;code&gt;__VA_ARGS__&lt;/code&gt; is replaced with all the extra arguments separated by commas. So, what happens if we define the macro like this?&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;#define describe(name, ...) \
        void test_##name() { \
                /* some code, omitted for brevity */ \
                __VA_ARGS__ \
                /* more code */ \
        }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Let's call &lt;code&gt;describe&lt;/code&gt; like we did above:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;describe(something, {
        int a, b;
        /* code */
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, the arguments will be interpreted the same way as before; &lt;code&gt;something&lt;/code&gt; will be the first argument, &lt;code&gt;{ int a&lt;/code&gt; will be the second argument, and &lt;code&gt;b; /* code */ }&lt;/code&gt; will be the third. However, &lt;code&gt;__VA_ARGS__&lt;/code&gt; will be replaced by the second and third argument with a comma inbetween, and together they produce &lt;code&gt;{ int a, b; /* code */ }&lt;/code&gt;, just as we intended. The entire &lt;code&gt;describe&lt;/code&gt; call will be expanded into this (with added newlines and indentation for clarity; the actual preprocessor would put it all on one line):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;void test_something() {
        /* some code, omitted for brevity */
        {
                int a, b;
                /* code */
        }
        /* more code */
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And just like that, we successfully passed a block of code, with unguarded commas, to a macro.&lt;/p&gt;
&lt;p&gt;Credit for this solution goes to &lt;a href=&quot;https://stackoverflow.com/a/13842612/1578823&quot;&gt;this stackoverflow answer&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Generic macros with _Generic&lt;/h2&gt;
&lt;p&gt;I wanted to be able to use one set of macros, &lt;code&gt;asserteq&lt;/code&gt; and &lt;code&gt;assertneq&lt;/code&gt;, to be able to do most simple equality checks, instead of having to write &lt;code&gt;asserteq_str&lt;/code&gt; for strings, &lt;code&gt;asserteq_int&lt;/code&gt; for integers, etc. The C11 standard added the &lt;code&gt;_Generic&lt;/code&gt; keyword, which sounds like it's perfect for that; given a list of types and expressions, &lt;code&gt;_Generic&lt;/code&gt; will choose the expression whose associated type is compatible with a controlling expression. For example, this code will print &quot;I am an int&quot;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;_Generic(10,
        int: printf(&quot;I am an int\n&quot;),
        char *: printf(&quot;I am a string\n&quot;)
);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;By itself, &lt;code&gt;_Generic&lt;/code&gt; isn't terribly useful, but it can be used to make faux-generic function-like macros. The &lt;a href=&quot;http://en.cppreference.com/w/c/language/generic&quot;&gt;cppreference.com&lt;/a&gt; page uses the example of a generic &lt;code&gt;cbrt&lt;/code&gt; (cube root) macro:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;#define cbrt(x) _Generic((x), \
        long double: cbrtl, \
        float: cbrtf, \
        default: cbrt)(x)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Calling &lt;code&gt;cbrt&lt;/code&gt; on a long double will now call &lt;code&gt;cbrtl&lt;/code&gt;, while calling &lt;code&gt;cbrt&lt;/code&gt; on a double will call the regular &lt;code&gt;cbrt&lt;/code&gt; function, etc. Note that &lt;code&gt;_Generic&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; part of the preprocessor; the preprocessor will just spit out the &lt;code&gt;_Generic&lt;/code&gt; syntax with &lt;code&gt;x&lt;/code&gt; replaced with the macro's argument, and it's the actual compiler's job to figure out what type the controlling expression is and choose the appropriate expression.&lt;/p&gt;
&lt;p&gt;I have a bunch of asserteq functions for the various types; &lt;code&gt;asserteq_ptr(void *a, void *b)&lt;/code&gt;, &lt;code&gt;asserteq_int(intmax_t a, intmax_t b)&lt;/code&gt;, &lt;code&gt;asserteq_str(const char *a, const char *b)&lt;/code&gt;, etc. (In reality, the function signatures are a lot uglier, and they're prefixed with &lt;code&gt;_snow_&lt;/code&gt;, but for the sake of this article, I'll pretend they look like &lt;code&gt;void asserteq_&amp;lt;suffix&amp;gt;(&amp;lt;type&amp;gt; a, &amp;lt;type&amp;gt; b)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;At first glance, &lt;code&gt;_Generic&lt;/code&gt; looks perfect for this use case; just define an &lt;code&gt;asserteq&lt;/code&gt; macro like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;#define asserteq(a, b) _Generic((b), \
        const char *: asserteq_str, \
        char *: asserteq_str, \
        void *: asserteq_ptr, \
        int: asserteq_int)(a, b)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It's sadly not that simple. &lt;code&gt;_Generic&lt;/code&gt; will match only specific types; &lt;code&gt;int&lt;/code&gt; matches only &lt;code&gt;int&lt;/code&gt;, not &lt;code&gt;long&lt;/code&gt;. &lt;code&gt;void *&lt;/code&gt; matches void pointers, not any other form of pointer. There's no way to say &quot;match every pointer type&quot;, for example.&lt;/p&gt;
&lt;p&gt;However, there is a &lt;code&gt;default&lt;/code&gt; clause, just like in switch statements. My first solution was to just pass anything not otherwise specified to &lt;code&gt;asserteq_int&lt;/code&gt;, and use &lt;code&gt;_Pragma&lt;/code&gt; (like &lt;code&gt;#pragma&lt;/code&gt;, but can be used inside macros) to ignore the warnings:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;#define asserteq(a, b) \
        do { \
                _Pragma(&quot;GCC diagnostic push&quot;) \
                _Pragma(&quot;GCC diagnostic ignored \&quot;-Wint-conversion\&quot;&quot;) \
                _Generic((b), \
                        const char *: asserteq_str, \
                        char *: asserteq_str, \
                        default: asserteq_int)(a, b) \
                _Pragma(&quot;GCC diagnostic pop&quot;) \
        } while (0)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That solution &lt;em&gt;worked&lt;/em&gt; but it's not exactly nice. I assume it would eventually break, either due to compiler optimizations or due to weird systems where an &lt;code&gt;intmax_t&lt;/code&gt; is smaller than a pointer or whatever. Luckily, the good people over in &lt;code&gt;##C@freenode&lt;/code&gt; had an answer: subtracting a pointer from a pointer results in a &lt;code&gt;ptrdiff_t&lt;/code&gt;! That means we can nest &lt;code&gt;_Generic&lt;/code&gt;s, and appropriately choose &lt;code&gt;asserteq_int&lt;/code&gt; for any integer types, or &lt;code&gt;asserteq_ptr&lt;/code&gt; for any pointer types:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;#define asserteq(a, b) _Generic((b), \
        const char *: asserteq_str, \
        char *: asserteq_str, \
        default: _Generic((b) - (b), \
                ptrdiff_t: asserteq_ptr(a, b), \
                default: asserteq_int(a, b)))(a, b)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Defer, label pointers, and goto *(void *)&lt;/h2&gt;
&lt;p&gt;I once saw a demonstration of &lt;a href=&quot;https://gobyexample.com/defer&quot;&gt;Golang's defer statement&lt;/a&gt;, and fell in love. It immediately struck me as a much better way to clean up than relying solely on the try/catch stuff we've been used to ever since 1985. Naturally, I wanted to use that for tearing down test cases in Snow, but there's not exactly any obvious way to implement it in C.&lt;/p&gt;
&lt;p&gt;For those unfamiliar with it, in Go, &lt;code&gt;defer&lt;/code&gt; is basically a way to say, &quot;run this expression once the function returns&quot;. It works like a stack; when the function returns, the most recently deferred expression will be executed first, and the first deferred expression will be executed last. The beautiful part is that even if the function returns early, either because some steps can be skipped, or because something failed, all the appropriate deferred expressions, and &lt;em&gt;only&lt;/em&gt; the appropriate deferred expressions, will be executed. Replace &quot;function&quot; with &quot;test case&quot;, and it sounds perfect for tearing down tests.&lt;/p&gt;
&lt;p&gt;So, how would you implement that in C? Well, it turns out that GCC has two useful non-standard extensions (which are also supported by Clang by the way): local labels, and labels as values.&lt;/p&gt;
&lt;p&gt;Local labels are basically regular labels which you can jump to with &lt;code&gt;goto&lt;/code&gt;, but instead of being global to the entire function, they're only available in the block they're declared in. That's fairly straightforward. You declare that a label should be block scoped by just putting &lt;code&gt;__label__ label_name;&lt;/code&gt; at the top of the block, and then you can use &lt;code&gt;label_name:&lt;/code&gt; anywhere within the block to actually create the label. A &lt;code&gt;goto label_name&lt;/code&gt; from anywhere within the block will then go to the label, as expected.&lt;/p&gt;
&lt;p&gt;Labels as values is weirder. GCC adds a new unary &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator, which gets a pointer to a label as a &lt;code&gt;void *&lt;/code&gt;. Moreover, if you save that pointer in a variable which is accessible outside the block, you can jump back in to that block from outside of it, even though it's a local label. This will print &quot;hello&quot; in an infinite loop:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;{
        void *somelabel;

        {
                __label__ lbl;
                lbl:
                somelabel = &amp;amp;&amp;amp;lbl;
                printf(&quot;hello\n&quot;);
        }

        goto *somelabel;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Yes, the &lt;code&gt;somelabel&lt;/code&gt; is a &lt;code&gt;void *&lt;/code&gt;. Yes, we dereference &lt;code&gt;somelabel&lt;/code&gt; to go to it. I don't know how that works, but the important part is that it does. Other than being dereferencable, the &lt;code&gt;void *&lt;/code&gt; we get from the unary &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; works exactly like any other &lt;code&gt;void *&lt;/code&gt;, and can even be in an array. Knowing this, implementing &lt;code&gt;defer&lt;/code&gt; isn't too hard; here's a simplified implementation of the &lt;code&gt;it(description, block)&lt;/code&gt; macro (using the &lt;code&gt;__VA_ARGS__&lt;/code&gt; trick from before) which describes one test case, and the &lt;code&gt;defer(expr)&lt;/code&gt; macro which can be used inside the &lt;code&gt;it&lt;/code&gt; block:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;#define it(description, ...) \
        do { \
                __label__ done_label; \
                void *defer_labels[32]; \
                int defer_count = 0; \
                int run_defer = 0; \
                __VA_ARGS__ \
                done_label: \
                run_defer = 1; \
                if (defer_count &amp;gt; 0) { \
                        defer_count -= 1; \
                        goto *defer_labels[defer_count]; \
                } \
        } while (0)

#define defer(expr) \
        do { \
                __label__ lbl; \
                lbl: \
                if (run_defer) { \
                        expr; \
                        /* Go to the previous defer, or the end of the `it` block */ \
                        if (defer_count &amp;gt; 0) { \
                                defer_count -= 1; \
                                goto *defer_labels[defer_count]; \
                        } else { \
                                goto done_label; \
                        } \
                } else { \
                        defer_labels[defer_count] = &amp;amp;&amp;amp;lbl; \
                        defer_count += 1; \
                } \
        } while (0)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That might not be the most understandable code you've ever seen, but let's break it down with an example.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;it(&quot;whatever&quot;, {
        printf(&quot;Hello World\n&quot;);
        defer(printf(&quot;world\n&quot;));
        defer(printf(&quot;hello &quot;));
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Running that through the preprocessor, we get this code:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;do {
        __label__ done_label;
        void *defer_labels[32];
        int defer_count = 0;
        int run_defer = 0;

        {
                printf(&quot;Hello World\n&quot;);

                do {
                        __label__ lbl;
                        lbl:
                        if (run_defer) {
                                printf(&quot;world\n&quot;);

                                /* Go to the previous defer, or the end of the `it` block */
                                if (defer_count &amp;gt; 0) {
                                        defer_count -= 1;
                                        goto *defer_labels[defer_count];
                                } else {
                                        goto done_label;
                                }
                        } else {
                                defer_labels[defer_count] = &amp;amp;&amp;amp;lbl;
                                defer_count += 1;
                        }
                } while (0);

                do {
                        __label__ lbl;
                        lbl:
                        if (run_defer) {
                                printf(&quot;hello &quot;);

                                /* Go to the previous defer, or the end of the `it` block */
                                if (defer_count &amp;gt; 0) {
                                        defer_count -= 1;
                                        goto *defer_labels[defer_count];
                                } else {
                                        goto done_label;
                                }
                        } else {
                                defer_labels[defer_count] = &amp;amp;&amp;amp;lbl;
                                defer_count += 1;
                        }
                } while (0);
        }

        done_label:
        run_defer = 1;
        if (defer_count &amp;gt; 0) {
                defer_count -= 1;
                goto *defer_labels[defer_count];
        }
} while (0);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That's still not extremely obvious on first sight, but it's at least more obvious than staring at the macro definitions. The first time through, &lt;code&gt;run_defer&lt;/code&gt; is false, so both the &lt;code&gt;defer&lt;/code&gt; blocks will just add their labels to the &lt;code&gt;defer_labels&lt;/code&gt; array and increment &lt;code&gt;defer_count&lt;/code&gt;. Then, just through normal execution (without any &lt;code&gt;goto&lt;/code&gt;), we end up at the label called &lt;code&gt;done_label&lt;/code&gt;, where we set &lt;code&gt;run_defer&lt;/code&gt; to true. Because &lt;code&gt;defer_count&lt;/code&gt; is 2, we decrement &lt;code&gt;defer_count&lt;/code&gt; and jump to &lt;code&gt;defer_labels[1]&lt;/code&gt;, which is the last defer.&lt;/p&gt;
&lt;p&gt;This time, because &lt;code&gt;run_defer&lt;/code&gt; is true, we run the deferred expression &lt;code&gt;printf(&quot;hello &quot;)&lt;/code&gt;, decrement &lt;code&gt;defer_count&lt;/code&gt; again, and jump to &lt;code&gt;defer_labels[0]&lt;/code&gt;, which is the first defer.&lt;/p&gt;
&lt;p&gt;The first defer runs its expression, &lt;code&gt;printf(&quot;world\n&quot;)&lt;/code&gt;, but because &lt;code&gt;defer_count&lt;/code&gt; is now 0, we jump back to &lt;code&gt;done_label&lt;/code&gt;. &lt;code&gt;defer_count&lt;/code&gt; is of course still 0, so we just exit the block.&lt;/p&gt;
&lt;p&gt;The really nice thing about this system is that a failing assert can at any time just say &lt;code&gt;goto done_label&lt;/code&gt;, and only the expressions which were deferred &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;goto&lt;/code&gt; will be executed.&lt;/p&gt;
&lt;p&gt;(Note: in the actual implementation in Snow, &lt;code&gt;defer_labels&lt;/code&gt; is of course a dynamically allocated array which is &lt;code&gt;realloc&lt;/code&gt;'d when necessary. It's also global to avoid an allocation and free for every single test case. I omitted that part because it's not that relevant, and would've made the example code unnecessarily complicated.)&lt;/p&gt;
&lt;h2&gt;Automatically call all functions created by describe&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;describe&lt;/code&gt; macro is meant to be used at the top level, outside of functions, because it creates functions. It's basically just this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;#define describe(name, ...) \
        void test_##name() { \
                __VA_ARGS__ \
        }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Calling &lt;code&gt;describe(something, {})&lt;/code&gt; will create a function called &lt;code&gt;test_something&lt;/code&gt;. Currently, that function has to be called manually, because no other part of Snow knows what the function is named. If you have used the &lt;code&gt;describe&lt;/code&gt; macro to define the functions &lt;code&gt;test_foo&lt;/code&gt;, &lt;code&gt;test_bar&lt;/code&gt;, and &lt;code&gt;test_baz&lt;/code&gt;, the main function will look like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;snow_main({
        test_foo();
        test_bar();
        test_baz();
})
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I would have loved it if &lt;code&gt;snow_main&lt;/code&gt; could just know what functions are declared by &lt;code&gt;describe&lt;/code&gt;, and automatically call them. I will go over a couple of ways I tried, which eventually turned out to not be possible, and then one way which would definitely work, but which is a little too crazy, even for me.&lt;/p&gt;
&lt;h3&gt;Static array of function pointers&lt;/h3&gt;
&lt;p&gt;What if, instead of just declaring functions with &lt;code&gt;describe&lt;/code&gt;, we also appended them to an array of function pointers? What if &lt;code&gt;snow.h&lt;/code&gt; contained code like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;void (*described_functions[512])();

#define describe(name, ...) \
        void test_##name() { \
                __VA_ARGS__ \
        } \
        described_functions[__COUNTER__] = &amp;amp;test_##name
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;__COUNTER__&lt;/code&gt; is a special macro which starts at 0, and is incremented by one every time it's referenced. That means that assuming nothing else uses &lt;code&gt;__COUNTER__&lt;/code&gt;, this solution &lt;em&gt;would&lt;/em&gt; have worked, and would have been relatively clean, if only it was valid syntax. Sadly, you can't set the value of an index in an array like that in the top level in C, only inside functions.&lt;/p&gt;
&lt;h3&gt;Appending to a macro&lt;/h3&gt;
&lt;p&gt;What if we had a macro which we appended &lt;code&gt;test_##name();&lt;/code&gt; to every time a function is declared by &lt;code&gt;describe&lt;/code&gt;? It turns out that this is &lt;em&gt;almost&lt;/em&gt; possible using some obscure GCC extensions. I found this solution &lt;a href=&quot;https://stackoverflow.com/a/45761452/1578823&quot;&gt;on StackOverflow&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;#define described_functions test_foo();

#pragma push_macro(&quot;described_functions&quot;)
#undef described_functions
#define described_functions _Pragma(&quot;pop_macro(\&quot;described_functions\&quot;)&quot;) described_functions test_bar();

#pragma push_macro(&quot;described_functions&quot;)
#undef described_functions
#define described_functions _Pragma(&quot;pop_macro(\&quot;described_functions\&quot;)&quot;) described_functions test_baz();

described_functions // expands to test_foo(); test_bar(); test_baz();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is actually a way to append a string to a macro which works, at least in GCC. Snow could have used that... except for one problem: you of course can't use #define from within a macro, and we would have needed to do this from within the &lt;code&gt;describe&lt;/code&gt; macro. I have searched far and wide for a way, even a weird GCC-specific possibly pragma-related way, to redefine a macro from within another macro, but I haven't found anything. Close, but no cigar.&lt;/p&gt;
&lt;h3&gt;The way which actually works&lt;/h3&gt;
&lt;p&gt;I mentioned that there &lt;em&gt;is&lt;/em&gt; actually one way to do it. Before I show you, I need to cover &lt;code&gt;dlopen&lt;/code&gt; and &lt;code&gt;dlsym&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void *dlopen(const char *filename, int flags)&lt;/code&gt; opens a binary (usually a shared object... &lt;em&gt;usually&lt;/em&gt;), and returns a handle. Giving &lt;code&gt;dlopen&lt;/code&gt; NULL as the file name gives us a handle to the main program.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void *dlsym(void *handle, const char *symbol)&lt;/code&gt; returns a pointer to a symbol (for example a function) in the binary which &lt;code&gt;handle&lt;/code&gt; refers to.&lt;/p&gt;
&lt;p&gt;We can use dlopen and dlsym like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;dlfcn.h&amp;gt;

void foo() {
        printf(&quot;hello world\n&quot;);
}

int main() {
        void *h = dlopen(NULL, RTLD_LAZY);

        void *fptr = dlsym(h, &quot;foo&quot;);
        void (*f)() = fptr;
        f();

        dlclose(h);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Compile that code with &lt;code&gt;gcc -Wl,--export-dynamic -ldl -o something something.c&lt;/code&gt;, and run &lt;code&gt;./something&lt;/code&gt;, and you'll see it print &lt;code&gt;hello world&lt;/code&gt; to the terminal. That means we can actually call functions dynamically based on an arbitrary string at runtime. (The &lt;code&gt;-Wl,--export-dynamic&lt;/code&gt; is necessary to tell the linker to export the symbols, such that they're available to us through dlsym).&lt;/p&gt;
&lt;p&gt;Being able to run functions based on a runtime C string, combined with our friend &lt;code&gt;__COUNTER__&lt;/code&gt;, opens up some interesting possibilities. We could write a program like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;dlfcn.h&amp;gt;

/* Annoyingly, the concat_ and concat macros are necessary to
 * be able to use __COUNTER__ in an identifier name */
#define concat_(a, b) a ## b
#define concat(a, b) concat_(a, b)

#define describe(...) \
        void concat(test_, __COUNTER__)() { \
                __VA_ARGS__ \
        }

describe({
        printf(&quot;Hello from function 0\n&quot;);
})

describe({
        printf(&quot;Hi from function 1\n&quot;);
})

int main() {
        void *h = dlopen(NULL, RTLD_LAZY);
        char symbol[32] = { '\0' };

        for (int i = 0; i &amp;lt; __COUNTER__; ++i) {
                snprintf(symbol, 31, &quot;test_%i&quot;, i);
                void *fptr = dlsym(h, symbol);
                void (*f)() = fptr;
                f();
        }

        dlclose(h);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Run that through the preprocessor, and we get:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-C&quot;&gt;void test_0() {
        { printf(&quot;Hello from function 0\n&quot;); }
}
void test_1() {
        { printf(&quot;Hi from function 1\n&quot;); }
}

int main() {
        void *h = dlopen(NULL, RTLD_LAZY);
        char symbol[32] = { '\0' };

        for (int i = 0; i &amp;lt; 2; ++i) {
                snprintf(symbol, 31, &quot;test_%i&quot;, i);
                void *fptr = dlsym(h, symbol);
                void (*f)() = fptr;
                f();
        }

        dlclose(h);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That for loop in our main function will first call &lt;code&gt;test_0()&lt;/code&gt;, then &lt;code&gt;test_1()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I hope you understand why even though this technically works, it's not exactly something I want to include in Snow ;)&lt;/p&gt;
</description>
<pubDate>Thu, 25 Jan 2018 20:17:06 +0000</pubDate>
<dc:creator>mort96</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mort.coffee/home/obscure-c-features/</dc:identifier>
</item>
<item>
<title>How a fix in Go 1.9 sped up our Gitaly service by 30x</title>
<link>https://about.gitlab.com/2018/01/23/how-a-fix-in-go-19-sped-up-our-gitaly-service-by-30x/</link>
<guid isPermaLink="true" >https://about.gitlab.com/2018/01/23/how-a-fix-in-go-19-sped-up-our-gitaly-service-by-30x/</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://gitlab.com/gitlab-org/gitaly&quot;&gt;Gitaly&lt;/a&gt; is a Git RPC service that we are currently rolling out across GitLab.com, to replace our legacy NFS-based file-sharing solution. We expect it to be faster, more stable and the basis for amazing new features in future.&lt;/p&gt;
&lt;p&gt;We're still in the process of porting Git operations to Gitaly, but the service has been running in production on GitLab.com for about nine months, and currently peaks at about 1,000 &lt;a href=&quot;https://grpc.io/&quot;&gt;gRPC&lt;/a&gt; requests per second. We expect the migration effort to be completed by the beginning of April at which point all Git operations in the GitLab application will use the service and we'll be able to decommission NFS infrastructure.&lt;/p&gt;
&lt;h2 id=&quot;worrying-performance-improvements&quot;&gt;Worrying performance improvements&lt;/h2&gt;
&lt;p&gt;The first time we realized that something might be wrong was shortly after we'd finished deploying a new release.&lt;/p&gt;
&lt;p&gt;We were monitoring the performance of one of the gRPC endpoints for the Gitaly service and noticed that the 99th percentile performance of the endpoint had dropped from 400ms down to 100ms.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://about.gitlab.com/images/blogimages/how-a-fix-in-go-19-sped-up-our-gitaly-service-by-30x/graph-01.png&quot; alt=&quot;400ms to 100ms latency drop&quot; class=&quot;shadow&quot;/&gt;&lt;em&gt;Latencies drop from 400ms to 100ms after a deploy, for no good reason&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This should have been fantastic news, but it wasn't. There were no changes that should have led to faster response times. We hadn't optimized anything in that release; we hadn't changed the runtime and the new release was using the same version of Git.&lt;/p&gt;
&lt;p&gt;Everything &lt;em&gt;should have&lt;/em&gt; been exactly the same.&lt;/p&gt;
&lt;p&gt;We started digging into the data a little more and quickly realised that 400ms is a very high latency for an operation that simply confirms the existence of a &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Internals-Git-References&quot;&gt;Git reference&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;How long had it been this way? Well it started about 24 hours after the previous deployment.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://about.gitlab.com/images/blogimages/how-a-fix-in-go-19-sped-up-our-gitaly-service-by-30x/graph-02.png&quot; alt=&quot;100ms to 400ms latency hike&quot; class=&quot;shadow&quot;/&gt;&lt;em&gt;Latencies rising over a 24 hour period following a deployment, for no good reason&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When browsing our Prometheus performance data, it quickly became apparent that this pattern was being repeated with each deployment: things would start fast and gradually slow down. This was occurring across all endpoints. It had been this way for a while.&lt;/p&gt;
&lt;p&gt;The first assumption was that there was some sort of resource leak in the application, causing the host to slow down over time. Unfortunately the data didn't back this up. CPU usage of the Gitaly service did increase, but the hosts still had lots of capacity.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://about.gitlab.com/images/blogimages/how-a-fix-in-go-19-sped-up-our-gitaly-service-by-30x/graph-03.png&quot; alt=&quot;Gitaly CPU charts&quot; class=&quot;shadow&quot;/&gt;&lt;em&gt;Gitaly CPU increasing with process age, but not enough to explain the problem&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;At this point, we still didn't have any good leads as to the cause of the problem, so we decided to further improve the observability of the application by adding &lt;a href=&quot;https://golang.org/pkg/net/http/pprof/&quot;&gt;pprof profiling support&lt;/a&gt; and &lt;a href=&quot;https://github.com/google/cadvisor&quot;&gt;cAdvisor&lt;/a&gt; metrics.&lt;/p&gt;
&lt;h2 id=&quot;profiling&quot;&gt;Profiling&lt;/h2&gt;
&lt;p&gt;Adding pprof support to a Go process is &lt;a href=&quot;https://gitlab.com/gitlab-org/gitaly/merge_requests/442&quot;&gt;very easy&lt;/a&gt;. The process already has a Prometheus listener and we added a pprof handler on the same listener.&lt;/p&gt;
&lt;p&gt;Since production teams would need to be able to perform the profiling without our assistance, we also &lt;a href=&quot;https://gitlab.com/gitlab-com/runbooks/blob/master/howto/gitaly-profiling.md&quot;&gt;added a runbook&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Go's pprof support is easy to use and in our testing, we found that the overhead it added to production workloads was negligible, meaning we could use it in production without concern about the impact it would have on site performance.&lt;/p&gt;
&lt;h2 id=&quot;cadvisor&quot;&gt;cAdvisor&lt;/h2&gt;
&lt;p&gt;The Gitaly service spawns Git child processes for many of its endpoints. Unfortunately these Git child processes don't have the same instrumentation as the parent process so it was difficult to tell if they were contributing to the problem. (Note: we record &lt;a href=&quot;http://man7.org/linux/man-pages/man2/getrlimit.2.html&quot;&gt;&lt;code&gt;getrlimit(2)&lt;/code&gt;&lt;/a&gt; metrics for Git processes but cannot observe grandchild processes spawned by Git, which often do much of the heavy lifting)&lt;/p&gt;
&lt;p&gt;On GitLab.com, Gitaly is managed through systemd, which will automatically create a cgroup for each service it manages.&lt;/p&gt;
&lt;p&gt;This means that Gitaly and its child processes are contained within a single cgroup, which we could monitor with &lt;a href=&quot;https://github.com/google/cadvisor&quot;&gt;cAdvisor&lt;/a&gt;, a Google monitoring tool which supports cgroups and is compatible with Prometheus.&lt;/p&gt;
&lt;p&gt;Although we didn't have direct metrics to determine the behavior of the Git processes, we could infer it using the cgroup metrics and the Gitaly process metrics: the difference between the two would tell us the resources (CPU, memory, etc) being consumed by the Git child processes.&lt;/p&gt;
&lt;p&gt;At our request, the production team &lt;a href=&quot;https://gitlab.com/gitlab-com/infrastructure/issues/3307&quot;&gt;added cAdvisor to the Gitaly servers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Having cAdvisor gives us the ability to know what the Gitaly service, including all its child processes, is doing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://about.gitlab.com/images/blogimages/how-a-fix-in-go-19-sped-up-our-gitaly-service-by-30x/graph-04.png&quot; alt=&quot;cAdvisor graphs for the Gitaly cgroup&quot; class=&quot;shadow&quot;/&gt;&lt;em&gt;cAdvisor graphs of the Gitaly cgroup&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;from-bad-to-worse-much-much-worse&quot;&gt;From bad to worse. Much, much worse…&lt;/h2&gt;
&lt;p&gt;In the meantime, &lt;strong&gt;&lt;a href=&quot;https://gitlab.com/gitlab-org/gitaly/issues/823&quot;&gt;the situation had got far worse&lt;/a&gt;&lt;/strong&gt;. Instead of only seeing gradual latency increases over time, we were now seeing far more serious lockups.&lt;/p&gt;
&lt;p&gt;Individual Gitaly server instances would grind to a halt, to the point where all new incoming TCP connections were not being accepted. This proved to be a problem to using pprof: during the lockup the connection would time out when attempting to profile the process. Since the reason we added pprof was to observe the process under duress, that approach was a bust.&lt;/p&gt;
&lt;p&gt;Interestingly, during a lock-up, CPU would actually decrease – the system was not overloaded, but actually &lt;em&gt;idled&lt;/em&gt;. Iops, iowait and CPU would all drop way down.&lt;/p&gt;
&lt;p&gt;Eventually, after a few minutes the service would recover and there would be a surge in backlogged requests. Usually though, as soon as the state was detected, the production team would restart the service manually.&lt;/p&gt;
&lt;p&gt;The team spent a significant amount of time trying to recreate the problem locally, with little success.&lt;/p&gt;
&lt;h2 id=&quot;forking-locks&quot;&gt;Forking locks&lt;/h2&gt;
&lt;p&gt;Without pprof, we fell back to &lt;a href=&quot;http://pro-tips-dot-com.tumblr.com/post/47677612115/kill-a-hung-go-process-and-print-stack-traces&quot;&gt;SIGABRT thread dumps&lt;/a&gt; of hung processes. Using these, we determined that the process had a large amount of contention around &lt;a href=&quot;https://gitlab.com/gitlab-org/gitaly/issues/823#note_50951140&quot;&gt;&lt;code&gt;syscall.ForkLock&lt;/code&gt;&lt;/a&gt; during the lockups. In one dump, 1,400 goroutines were blocked waiting on &lt;code&gt;ForkLock&lt;/code&gt; – most for several minutes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;syscall.ForkLock&lt;/code&gt; has &lt;a href=&quot;https://github.com/golang/go/blob/release-branch.go1.8/src/syscall/exec_unix.go#L17&quot;&gt;the following documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Lock synchronizing creation of new file descriptors with fork.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Each Gitaly server instance was &lt;code&gt;fork/exec&lt;/code&gt;'ing Git processes about 20 times per second so we seemed to finally have a very promising lead.&lt;/p&gt;
&lt;h2 id=&quot;serendipity&quot;&gt;Serendipity&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://gitlab.com/gitlab-com/www-gitlab-com/merge_requests/9365#note_54342481&quot;&gt;Researching ForkLock&lt;/a&gt; led us to an issue on the Go repository, opened in 2013, about switching from &lt;code&gt;fork/exec&lt;/code&gt; to &lt;a href=&quot;https://about.gitlab.com/2018/01/23/how-a-fix-in-go-19-sped-up-our-gitaly-service-by-30x/man7.org/linux/man-pages/man2/clone.2.html&quot;&gt;&lt;code&gt;clone(2)&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;CLONE_VFORK&lt;/code&gt; and &lt;code&gt;CLONE_VM&lt;/code&gt; on systems that support it: &lt;a href=&quot;https://github.com/golang/go/issues/5838&quot;&gt;golang/go#5838&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;clone(2)&lt;/code&gt; syscall with &lt;code&gt;CLONE_VFORK&lt;/code&gt; and &lt;code&gt;CLONE_VM&lt;/code&gt; is the same as the &lt;a href=&quot;http://man7.org/linux/man-pages/man3/posix_spawn.3.html&quot;&gt;&lt;code&gt;posix_spawn(3)&lt;/code&gt;&lt;/a&gt; c function, but the latter is easier to refer to, so let's use that.&lt;/p&gt;
&lt;p&gt;When using &lt;code&gt;fork&lt;/code&gt;, the child process will start with a copy of the parent processes' memory. Unfortunately this process takes longer the larger the virtual memory footprint the process has. Even with copy-on-write, it can take several hundred milliseconds in a memory-intensive process. &lt;code&gt;posix_spawn&lt;/code&gt; doesn't copy the parent processes' memory space and has a roughly constant time.&lt;/p&gt;
&lt;p&gt;Some good benchmarks of &lt;code&gt;fork/exec&lt;/code&gt; vs. &lt;code&gt;posix_spawn&lt;/code&gt; can be found here: &lt;a href=&quot;https://github.com/rtomayko/posix-spawn#benchmarks&quot;&gt;https://github.com/rtomayko/posix-spawn#benchmarks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This seemed like a possible explanation. Over time, the virtual memory size (VMM) of the Gitaly process would increase. As VMM increased, each &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fork.2.html&quot;&gt;&lt;code&gt;fork(2)&lt;/code&gt;&lt;/a&gt; syscall would take longer. As fork latency increased, &lt;code&gt;syscall.ForkLock&lt;/code&gt; contention would increase. If &lt;code&gt;fork&lt;/code&gt; time exceeded the frequency of &lt;code&gt;fork&lt;/code&gt; requests, the system could temporarily lock up entirely.&lt;/p&gt;
&lt;p&gt;(Interestingly, &lt;a href=&quot;https://golang.org/pkg/net/#TCPListener.Accept&quot;&gt;&lt;code&gt;TCPListener.Accept&lt;/code&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/golang/go/blob/2ea7d3461bb41d0ae12b56ee52d43314bcdb97f9/src/net/sock_cloexec.go#L20&quot;&gt;also interacts&lt;/a&gt; with &lt;code&gt;syscall.ForkLock&lt;/code&gt;, although only on older versions of Linux. Could this be the cause of our failure to connect to the pprof listener during a lockup?)&lt;/p&gt;
&lt;p&gt;By some incredibly good luck, &lt;a href=&quot;https://github.com/golang/go/issues/5838&quot;&gt;golang/go#5838&lt;/a&gt;, the switch from &lt;code&gt;fork&lt;/code&gt; to &lt;code&gt;posix_spawn&lt;/code&gt;, had, after several years' delay, recently landed in Go 1.9, just in time for us. Gitaly had been compiled with Go 1.8. We quickly built and tested a new binary with Go 1.9 and manually deployed this on one of our production servers.&lt;/p&gt;
&lt;h3 id=&quot;spectacular-results&quot;&gt;Spectacular results&lt;/h3&gt;
&lt;p&gt;Here's the CPU usage of Gitaly processes across the fleet:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://about.gitlab.com/images/blogimages/how-a-fix-in-go-19-sped-up-our-gitaly-service-by-30x/graph-05.png&quot; alt=&quot;CPU after Go 1.9&quot; class=&quot;shadow&quot;/&gt;&lt;em&gt;CPU after recompiling with Go 1.9&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here's the 99th percentile latency figures. This chart is using a logarithmic scale, so we're talking about two orders of magnitude faster!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://about.gitlab.com/images/blogimages/how-a-fix-in-go-19-sped-up-our-gitaly-service-by-30x/graph-06.png&quot; alt=&quot;30x latency drops with Go 1.9&quot; class=&quot;shadow&quot;/&gt;&lt;em&gt;Endpoint latency after recompiling with Go 1.9 (log scale)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Recompiling with Go 1.9 solved the problem, thanks to the switch to &lt;code&gt;posix_spawn&lt;/code&gt;. We learnt several other lessons in the process too:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Having solid application monitoring in place allowed us to detect this issue, and start investigating it, far earlier than we otherwise would have been able to.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.golang.org/profiling-go-programs&quot;&gt;pprof&lt;/a&gt; can be really helpful, but may not help when a process has locked up and won't accept new connections. pprof is lightweight enough that you should consider adding it to your application &lt;em&gt;before&lt;/em&gt; you need it.&lt;/li&gt;
&lt;li&gt;When all else fails, &lt;a href=&quot;http://pro-tips-dot-com.tumblr.com/post/47677612115/kill-a-hung-go-process-and-print-stack-traces&quot;&gt;&lt;code&gt;SIGABRT thread dumps&lt;/code&gt;&lt;/a&gt; might help.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/google/cadvisor&quot;&gt;&lt;code&gt;cAdvisor&lt;/code&gt;&lt;/a&gt; is great for monitoring cgroups. Systemd services each run in their own cgroup, so &lt;code&gt;cAdvisor&lt;/code&gt; is an easy way of monitoring a service and all its child processes, together.&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;note&quot;&gt;&lt;a href=&quot;https://unsplash.com/photos/jJbQBP_yh68?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Photo&lt;/a&gt; by Javier García on &lt;a href=&quot;https://unsplash.com/search/photos/slow?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 25 Jan 2018 20:01:37 +0000</pubDate>
<dc:creator>rfks</dc:creator>
<og:title>How a fix in Go 1.9 sped up our Gitaly service by 30x</og:title>
<og:type>article</og:type>
<og:url>https://about.gitlab.com/2018/01/23/how-a-fix-in-go-19-sped-up-our-gitaly-service-by-30x/</og:url>
<og:image>https://about.gitlab.com/images/blogimages/how-a-fix-in-go-19-sped-up-our-gitaly-service-by-30x/cover.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://about.gitlab.com/2018/01/23/how-a-fix-in-go-19-sped-up-our-gitaly-service-by-30x/</dc:identifier>
</item>
<item>
<title>DNA seen through the eyes of a coder (2017)</title>
<link>https://ds9a.nl/amazing-dna/</link>
<guid isPermaLink="true" >https://ds9a.nl/amazing-dna/</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;&lt;title&gt;DNA seen through the eyes of a coder&lt;/title&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#FFFFFF&quot; id=&quot;readabilityBody&quot; readability=&quot;411.06792175526&quot;&gt;
&lt;center readability=&quot;3&quot;&gt;&lt;big&gt;DNA seen through the eyes of a coder&lt;/big&gt;
&lt;p&gt;&lt;small&gt;or&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;big&gt;If you are a hammer, everything looks like a nail&lt;/big&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;table width=&quot;100%&quot; readability=&quot;0.953125&quot;&gt;&lt;tr readability=&quot;1.90625&quot;&gt;&lt;td align=&quot;right&quot;&gt;&lt;small&gt;`This is one of the coolest things I've read in a while.' -- &lt;a href=&quot;http://www.livejournal.com/users/jwz/&quot;&gt;jwz&lt;/a&gt;&lt;/small&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;This is just some rambling by a computer programmer about DNA. I'm not a molecular geneticist. If you spot the inevitable mistakes, please mail me (&lt;a href=&quot;http://ds9a.nl&quot;&gt;bert hubert&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/PowerDNS_Bert&quot;&gt;@PowerDNS_Bert&lt;/a&gt;) at &lt;a href=&quot;mailto:bert@hubertnet.nl&quot;&gt;bert@hubertnet.nl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm not trying to force my view unto the DNA - each observation here is quite 'uncramped'. To see where I got all this from, head to the &lt;a href=&quot;https://ds9a.nl/amazing-dna/#bibliography&quot;&gt;bibliography&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Quick links: &lt;a href=&quot;https://ds9a.nl/amazing-dna/#source&quot;&gt;The source code&lt;/a&gt;, &lt;a href=&quot;https://ds9a.nl/amazing-dna/#pic&quot;&gt;Position Independent Code&lt;/a&gt;, &lt;a href=&quot;https://ds9a.nl/amazing-dna/#conditional&quot;&gt;Conditional compilation&lt;/a&gt;, &lt;a href=&quot;https://ds9a.nl/amazing-dna/#epigenetics&quot;&gt;Epigenetics&lt;/a&gt;, &lt;a href=&quot;https://ds9a.nl/amazing-dna/#dead-code&quot;&gt;Dead code, bloat, comments ('junk dna')&lt;/a&gt;, &lt;a href=&quot;https://ds9a.nl/amazing-dna/#fork&quot;&gt;fork() and fork bombs ('tumors')&lt;/a&gt;, &lt;a href=&quot;https://ds9a.nl/amazing-dna/#mirroring&quot;&gt;Mirroring, failover&lt;/a&gt;, &lt;a href=&quot;https://ds9a.nl/amazing-dna/#apis&quot;&gt;Cluttered APIs, dependency hell&lt;/a&gt;, &lt;a href=&quot;https://ds9a.nl/amazing-dna/#viruses&quot;&gt;Viruses, worms&lt;/a&gt;, &lt;a href=&quot;https://ds9a.nl/amazing-dna/#central-dogma&quot;&gt;Central Dogma&lt;/a&gt;, &lt;a href=&quot;https://ds9a.nl/amazing-dna/#binpatch&quot;&gt;Binary patching aka 'Gene therapy'&lt;/a&gt;, &lt;a href=&quot;https://ds9a.nl/amazing-dna/#regression&quot;&gt;Bug Regression&lt;/a&gt;, &lt;a href=&quot;https://ds9a.nl/amazing-dna/#rss&quot;&gt;Reed-Solomon codes: 'Forward Error Correction'&lt;/a&gt;, &lt;a href=&quot;https://ds9a.nl/amazing-dna/#holy&quot;&gt;Holy Code&lt;/a&gt;, &lt;a href=&quot;https://ds9a.nl/amazing-dna/#framing&quot;&gt;Framing errors: start and stop bits&lt;/a&gt;, &lt;a href=&quot;https://ds9a.nl/amazing-dna/#smp&quot;&gt;Massive multiprocessing: each cell is a universe&lt;/a&gt;, &lt;a href=&quot;https://ds9a.nl/amazing-dna/#bootstrapping&quot;&gt;Self hosting &amp;amp; bootstrapping&lt;/a&gt;, &lt;a href=&quot;https://ds9a.nl/amazing-dna/#makefile&quot;&gt;The Makefile&lt;/a&gt;, &lt;a href=&quot;https://ds9a.nl/amazing-dna/#Plugins&quot;&gt;Plugins&lt;/a&gt;, &lt;a href=&quot;https://ds9a.nl/amazing-dna/#bibliography&quot;&gt;Further reading&lt;/a&gt;&lt;/small&gt;.&lt;/p&gt;
&lt;h3&gt;Updates&lt;/h3&gt;
&lt;p&gt;25th of August 2017:&lt;br /&gt;This page has led to a two-hour presentation called &lt;a href=&quot;https://ds9a.nl/dna&quot;&gt;DNA: The code of Life&lt;/a&gt; as presented at &lt;a href=&quot;https://sha2017.org&quot;&gt;SHA 2017&lt;/a&gt;. Includes slides and video and a &lt;a href=&quot;https://medium.com/@bert.hubert/dna-the-code-of-life-12db4a17c66d&quot;&gt;summarising blogpost&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;20th of January 2016:&lt;br /&gt;Added a section on Plugins, or Plasmids.&lt;/p&gt;
&lt;p&gt;24th of February 2013:&lt;br /&gt;Added a bit on epigenetics, updated the font, small updates here and there.&lt;/p&gt;
&lt;p&gt;3rd of January 2008:&lt;br /&gt;A lot of updates are arriving since this page was linked on &lt;a href=&quot;http://reddit.com&quot;&gt;Reddit.com&lt;/a&gt;, I'm currently evaluating and merging the suggested changes. Please do keep sending updates!&lt;/p&gt;
&lt;p&gt;23rd of September 2006:&lt;br /&gt;Small update on the number of genes. Some other updates have been sent to me over the past four years, and I'll try to work them in to the page.&lt;/p&gt;
&lt;p&gt;16th of June 2002:&lt;br /&gt;Added tiny piece on the &lt;a href=&quot;https://ds9a.nl/amazing-dna/#fork&quot;&gt;halting problem&lt;/a&gt; and cancer. I think this is a new insight, but I'm not sure. On the todolist: Code reuse through alternative splicing.&lt;/p&gt;
&lt;p&gt;18th of May 2002:&lt;br /&gt;In the meantime some people who *are* geneticists have read this and have spotted and fixed some, but not many, mistakes. I recently added information on the cell as a state machine and on forking and forkbombs.&lt;/p&gt;
&lt;p&gt;24th of May 2002:&lt;br /&gt;Some clarifications from the great people on #bioinformatics on OPN. Added a bunch of pictures to lighten up the page. Added piece on the &lt;a href=&quot;https://ds9a.nl/amazing-dna/#central-dogma&quot;&gt;Central Dogma&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The source code&lt;/h2&gt;
&lt;p&gt; Is &lt;a href=&quot;ftp://ftp.ensembl.org/pub/current_genbank/homo_sapiens/&quot;&gt;here&lt;/a&gt;. This not a joke. We can wonder about the license though. Maybe we should ask the walking product of this source: &lt;a href=&quot;http://www.guardian.co.uk/Archive/Article/0,4273,4403109,00.html&quot;&gt;Craig Venter&lt;/a&gt;. The source can be &lt;a href=&quot;http://www.ensembl.org/Homo_sapiens/&quot;&gt;viewed&lt;/a&gt; via a wonderful set of perl scripts called '&lt;a href=&quot;http://www.ensembl.org/Homo_sapiens/Download/&quot;&gt;Ensembl&lt;/a&gt;'. The human genome is about 3 gigabases long, which boils down to 750 megabytes. Depressingly enough, this is only 2.8 &lt;a href=&quot;http://ftp.mozilla.org/pub/mozilla/releases/&quot;&gt;Mozilla browsers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;DNA is not like C source but more like byte-compiled code for a virtual machine called 'the nucleus'. It is very doubtful that there is a source to this byte compilation - what you see is all you get.&lt;/p&gt;
&lt;table readability=&quot;6.5&quot;&gt;&lt;tr readability=&quot;16.5&quot;&gt;&lt;td readability=&quot;10&quot;&gt;The language of DNA is digital, but not binary. Where binary encoding has 0 and 1 to work with (2 - hence the 'bi'nary), DNA has 4 positions, T, C, G and A.
&lt;p&gt;Whereas a digital byte is mostly 8 binary digits, a DNA 'byte' (called a 'codon') has three digits. Because each digit can have 4 values instead of 2, an DNA codon has 64 possible values, compared to a binary byte which has 256.&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;https://ds9a.nl/amazing-dna/dna.jpg&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;A typical example of a DNA codon is 'GCC', which encodes the amino acid Alanine. A larger number of these amino acids combined are called a 'polypeptide' or 'protein', and these are chemically active in making a living being.&lt;/p&gt;
&lt;p&gt;See also &lt;a href=&quot;http://www.ultranet.com/~jkimball/BiologyPages/C/Codons.html&quot;&gt;http://www.ultranet.com/~jkimball/BiologyPages/C/Codons.html&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Position Independent Code&lt;/h2&gt;
&lt;p&gt; Dynamically linked libraries (.so under Unix, .dll on Microsoft) code cannot use static addresses internally because the code may appear in different places in memory in different situations. DNA has this too, where it is called 'transposing code':&lt;/p&gt;
&lt;table readability=&quot;4.4457831325301&quot;&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td width=&quot;10%&quot;&gt;&lt;/td&gt;
&lt;td width=&quot;75%&quot;&gt;Nearly half of the human genome is composed of transposable elements or jumping DNA. First recognized in the 1940s by Dr. Barbara McClintock in studies of peculiar inheritance patterns found in the colors of Indian corn, jumping DNA refers to the idea that some stretches of DNA are unstable and &quot;transposable,&quot; ie., they can move around -- on and between chromosomes.&lt;/td&gt;
&lt;td width=&quot;15%&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0&quot;&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.ornl.gov/hgmis/resource/people.html&quot;&gt;http://www.ornl.gov/hgmis/resource/people.html&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h2&gt;Conditional compilation&lt;/h2&gt;
&lt;table readability=&quot;9.2089136490251&quot;&gt;&lt;tr readability=&quot;32.958217270195&quot;&gt;&lt;td&gt;&lt;img src=&quot;http://whyfiles.org/034clone/images/human_chrom.gif&quot; /&gt;&lt;/td&gt;
&lt;td readability=&quot;31.988857938719&quot;&gt; Of the &lt;a href=&quot;http://www.commondreams.org/views01/0212-02.htm&quot;&gt;20,000 to 30,000 genes&lt;/a&gt; now thought to be in the human genome, most cells express only a very small part - which makes sense, a liver cell has little need for the DNA code that makes neurons.
&lt;p&gt;But as almost all cells carry around a full copy ('distribution') of the genome, a system is needed to #ifdef out stuff not needed. And that is just how it works. The genetic code is full of #if/#endif statements.&lt;/p&gt;
&lt;p&gt;This is why '&lt;a href=&quot;http://www.ultranet.com/~jkimball/BiologyPages/S/Stem_Cells.html&quot;&gt;stem cells&lt;/a&gt;' are so hot right now - these cells have the ability to differentiate into everything. The code hasn't been #ifdeffed out yet, so to speak.&lt;/p&gt;
&lt;p&gt;Stated more exactly, stem cells do not have everything turned on - they are not at once liver cells and neurons. Cells can be likened to state machines, starting out as a stem cell. Over the lifetime of the cell, during which time it may clone ('fork()') many times, it specializes. Each specialization can be regarded as choosing a branch in a tree.&lt;/p&gt;
&lt;p&gt;Each cell can make (or be induced to make) decisions about its future, which each make it more specialized. These decisions are persistent over cloning using transcription factors and by modifying the way DNA is stored spacially ('steric effects').&lt;/p&gt;
&lt;p&gt;A liver cell, although it carries the genes to do so, will generally not be able to function as a skin cell. There are some indications out there that it is possible to 'breed' cells 'upwards' into the hierarchy, making them pluripotent. See also &lt;a href=&quot;http://www.sciencedaily.com/releases/2002/01/020131074645.htm&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h2&gt;Epigenetics &amp;amp; imprinting: runtime binary patching&lt;/h2&gt;
&lt;p&gt; Although the actual relevant changes in the DNA of an organism rarely occur within a generation, substantial tinkering goes on by activating or deactivating parts of our genome, without altering the actual code.&lt;/p&gt;
&lt;p&gt;This can be compared to the Linux kernel, which at boot time discovers what CPU it is running on, and actually disables parts of its binary code in case (for example) it is running on a single CPU system. This goes beyond something like if(numcpus &amp;gt; 1), it is the actual nopping out of locking. Crucially, this nopping occurs in memory and not on the disk based image.&lt;/p&gt;
&lt;p&gt;Similarly, as an embryo develops in the mother's womb, its DNA is edited substantially to reduce its growth rate, and the size of the placenta. In such a way, the competing interests of the father ('large strong children') and the mother ('survive pregnancy') are balanced. Such 'imprinting' can only happen within the mother, since the father's genome doesn't know anything about the size of the mother.&lt;/p&gt;
&lt;p&gt;Recently, it is also becoming clear that the metabolic status of the parents influences the &lt;a href=&quot;http://en.wikipedia.org/wiki/Transgenerational_epigenetics&quot;&gt;chances of long life, cancer and diabetes in their grandchildren&lt;/a&gt;. This also makes sense, as surviving in a food poor climate may require a different metabolic strategy than in one where food is abundantly available.&lt;/p&gt;
&lt;p&gt;Mechanisms behind epigenetics and imprinting are 'methylation', which attaches methyl groups to DNA to 'flip' their activation status, but also histone modification, which can curl up DNA so it is not activated.&lt;/p&gt;
&lt;p&gt;Some of these DNA edits are heritable and passed on to children, other forms may only impact one animal.&lt;/p&gt;
&lt;p&gt;This field is still developing rapidly, and it may be that our DNA is much more dynamic than originally thought.&lt;/p&gt;
&lt;h2&gt;Dead code, bloat, comments ('junk dna')&lt;/h2&gt;

&lt;table readability=&quot;9.5&quot;&gt;&lt;tr readability=&quot;32&quot;&gt;&lt;td&gt;&lt;img src=&quot;https://ds9a.nl/amazing-dna/intron.gif&quot; /&gt;&lt;/td&gt;
&lt;td readability=&quot;29&quot;&gt;The genome is littered with old copies of genes and experiments that went wrong somewhere in the recent past - say, the last half a million years. This code is there but inactive. These are called the 'pseudo genes'.
&lt;p&gt;Furthermore, 97% of your DNA is commented out. DNA is linear and read from start to end. The parts that should not be decoded are marked very clearly, much like C comments. The 3% that is used directly form the so called 'exons'. The comments, that come 'inbetween' are called 'introns'.&lt;/p&gt;
&lt;p&gt;These comments are fascinating in their own right. Like C comments they have a start marker, like /*, and a stop marker, like */. But they have some more structure. Remember that DNA is like a tape - the comments need to be snipped out physically! The start of a comment is almost always indicated by the letters 'GT', which thus corresponds to /*, the end is signalled by 'AG', which is then like */.&lt;/p&gt;
&lt;p&gt;However because of the snipping, some glue is needed to connect the code before the comment to the code after, which makes the comments more like html comments, which are longer: '&amp;lt;!--' signifies the start, '--&amp;gt;' the end.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;So an actual stretch of DNA with exons and introns might look like this:&lt;/p&gt;
&lt;pre&gt;
ACTUAL CODE&amp;lt;!-- blah blah blah blah ---- blah --&amp;gt;ACTUAL CODE
  |         |            |           |        |        |
exon 1    donor       intron 1     branch  acceptor  exon 2
     (start of comment)                 (end of comment)
&lt;/pre&gt;
&lt;p&gt;The start of the comment is clear, which is then followed by a lot of non-coding DNA. Somewhere very near the end of the comment there is a 'branch site', which indicates that the comment will end soon. Then some more comment follows, and then the actual terminator.&lt;/p&gt;
&lt;p&gt;The actual cutting of the comments happens after the DNA has been transcribed into RNA and is performed by looping the comment and bringing the pieces of actual code close together. Then the RNA is cut at the 'branch site' near the end of the comment, after which the 'donor' (comment start) and 'acceptor' (comment end) are connected to each other.&lt;/p&gt;
&lt;p&gt;Now, what are these comments good for? That discussion is part of a &lt;a href=&quot;http://www.tuxedo.org/~esr/jargon/html/entry/holy-wars.html&quot;&gt;holy war&lt;/a&gt; that can rival the vi/emacs one. When comparing different species, we know that some introns show fewer code changes than the neighboring exons. This suggests that the comments are doing something important.&lt;/p&gt;
&lt;p&gt;There are lots of possible explanations for the massive amount of non-coding DNA - one of the most appealing (to a coder) has to do with 'folding propensity'. DNA needs to be stored in a highly coiled form, but not all DNA codes lend themselves well to this.&lt;/p&gt;
&lt;p&gt;This may remind you of &lt;a href=&quot;http://www-2.cs.cmu.edu/~412/applications/ln/lecture16.html&quot;&gt;RLL or MFM&lt;/a&gt; coding. On a hard disk, a bit is encoded by a polarity transition or the lack thereof. A naive encoding would encode a 0 as 'no transition' and 1 as 'a transition'.&lt;/p&gt;
&lt;p&gt;Encoding 000000 is easy - just keep the magnetic phase unchanged for a few micrometers. However, when decoding, uncertainty creaps in - how many micrometers did we read? Does this correspond to 6 zeroes or 5? To prevent this problem, data is treated such that these long stretches of no transitions do not occur.&lt;/p&gt;
&lt;p&gt;If we see 'no transition,no transition,transition,transition' on disk, we can be sure that this corresponds to '0011' - it is exceedingly unlikely that our reading process is so imprecise that this might correspond to '00011' or '00111'. So we need to insert spacers so as to prevent too little transitions. This is called 'Run Lenght Limiting' on magnetic media.&lt;/p&gt;
&lt;p&gt;The thing to note is that sometimes, transitions need to be inserted to make sure that the data can be stored reliably. Introns may do much the same thing by making sure that the resulting code can be coiled properly.&lt;/p&gt;
&lt;p&gt;However, this area of molecular biology is a minefield! Huge diatribes rage about variants with exciting names like 'introns early' or 'introns late', and massive words like 'folding propensity' and 'stem-loop potential'. I think it best to let this discussion rage on a bit.&lt;/p&gt;
&lt;p&gt;A fascinating link of uncertain scientific value is &lt;a href=&quot;http://post.queensu.ca/~forsdyke/introns.htm&quot;&gt;http://post.queensu.ca/~forsdyke/introns.htm&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;2013 Update: ten years on, the debate still hasn't settled! It is very clear that 'junk dna' is a misnommer, but as to its immediate function, there is no consensus. Check out &lt;a href=&quot;http://blogs.nature.com/news/2012/09/fighting-about-encode-and-junk.html&quot;&gt;Fighting about ENCODE and junk&lt;/a&gt; for a discussion of where we stand.&lt;/p&gt;
&lt;h2&gt;fork() and fork bombs ('tumors')&lt;/h2&gt;
&lt;p&gt; Like with unix, cells are not 'spawned' - they are forked. All cells started out from your ovum which has forked itself many times since. Like processes, both halves of the fork() are (mostly) identical to begin with, but they may from then on decide to do different things.&lt;/p&gt;
&lt;p&gt;As with unix, great problems arise when cells keep on forking. They quickly exhaust resources, sometimes leading to death. This is called a tumor. The cell is riddled with 'ulimits' and 'watchdogs' to prevent this sort of thing from happening. The number of divisions is limited by &lt;a href=&quot;http://www.ellison-med-fn.org/emf_award.jsp?award_id=10&quot;&gt;Telomere shortening&lt;/a&gt;, for example.&lt;/p&gt;
&lt;p&gt;A cell cannot clone unless very stringent conditions are met - a '&lt;a href=&quot;http://www.openbsd.org/&quot;&gt;secure by default&lt;/a&gt;' configuration. It is only when these safeguards fail that tumors can grow. Like with computer security, it is hard to strike a balance between security ('no cells can divide') and usability.&lt;/p&gt;
&lt;p&gt;Compare this to the well known &lt;a href=&quot;http://www.cs.washington.edu/homes/csk/halt.html&quot;&gt;Halting Problem&lt;/a&gt;, first described by the founder of Computer Science, &lt;a href=&quot;http://www.turing.org.uk/turing/&quot;&gt;Alan Turing&lt;/a&gt;. Perhaps it is as impossible to predict if a program will ever finish as it is to create a functional genome that cannot get cancer?&lt;/p&gt;
&lt;table readability=&quot;12.5&quot;&gt;&lt;tr readability=&quot;32&quot;&gt;&lt;td readability=&quot;17&quot;&gt;
&lt;h2&gt;Mirroring, failover&lt;/h2&gt;
 Each DNA Helix is redundant in itself - you can see the genome as a twisted ladder whereby each spoke contains two bases - hence the word 'basepair'. If one of these bases is missing, it can be derived from the one on the other side. T always binds to A, C always to G. So, we can state that the genome is mirrored within the helix. 'RAID-1' so to speak.
&lt;p&gt;Furthermore, there are two copies of each chromosome present - one from each parent, with the notable exception of the Y chromosome, which is only present in males. The actual details are complicated - but most genes are thus present twice. In case one is broken or unusefully mutated, the other independent copy is still there. This is what we would normally call 'failover'.&lt;/p&gt;
&lt;h2&gt;Cluttered APIs, dependency hell&lt;/h2&gt;
 As proteins interact in the cell, they rely on eachothers' characteristics. It has just been shown that proteins that interact with a lot of other proteins cannot evolve, or at least, only do so at a very slow rate. See Nature, 28 June 2001, and M. Kimura, T. Ohta, Science, 26 April 2002.
&lt;p&gt;They propose that this is because of great internal dependencies which inhibit the changing of the 'contract' of the protein. It is also noted that evolution does take place, but very slowly as both parts of the dependency need to evolve in a compatible way at the same time.&lt;/p&gt;
&lt;h2&gt;Viruses, worms&lt;/h2&gt;
 Somebody recently proposed in a discussion that it would be really cool to hack the genome and compromise it so as to insert code that would copy itself to other genomes, using the host-body as its vehicle. 'Just like the nimda worm!'&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;https://ds9a.nl/amazing-dna/helix.gif&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;He shortly thereafter realised that this is exactly what biological viruses have been doing for millions of years. And they are exceedingly good at it.&lt;/p&gt;
&lt;p&gt;A lot of these viruses have become a fixed part of our genome and hitch a ride with all of us. To do so, they have to hide from the virus scanner which tries to detect foreign code and prevent it from getting into the DNA.&lt;/p&gt;
&lt;h2&gt;The Central Dogma: .c -&amp;gt; .o -&amp;gt; a.out/.exe&lt;/h2&gt;
&lt;p&gt; When scientists were still discovering the basics of genetics they were faced with lots of different chemicals but the correlation was unclear. When it became clear what comes from what it was hailed as a great triumph and called 'The Central Dogma'.&lt;/p&gt;
&lt;p&gt;This dogma tells us that DNA is used to make RNA and that RNA is used to make proteins, which is like saying that from a .c file comes a .o object file, which can be compiled into an executable (a.out/exe). It also tells us that this is the only order in which information flows.&lt;/p&gt;
&lt;p&gt;Now, the Central Dogma has recenly been tarnished somewhat. Like any billion year old coding project, a lot of hacking has been going on, and sometimes information flows the other way. Sometimes RNA patches the DNA and at other times, the DNA is modified by proteines created earlier.&lt;/p&gt;
&lt;p&gt;But generally, the dependencies are clear, so the Central Dogma remains important.&lt;/p&gt;
&lt;h2&gt;Binary patching aka 'Gene therapy'&lt;/h2&gt;
&lt;table readability=&quot;7.3463114754098&quot;&gt;&lt;tr readability=&quot;26.936475409836&quot;&gt;&lt;td&gt;&lt;img src=&quot;https://ds9a.nl/amazing-dna/genetherapy1big.gif&quot; /&gt;&lt;/td&gt;
&lt;td readability=&quot;27.426229508197&quot;&gt; We can fiddle easily enough with DNA. There are companies to which you can send an ASCII file with DNA characters, and they will synthesise the corresponding 'output' for you. We can also splice DNA into developing animals and plants.
&lt;p&gt;It is far harder to 'patch the running executable', as any programmer can attest. It is just like that with the genome. To change a running copy ('a human'), you need to edit each and every relevant copy of the gene you want to patch.&lt;/p&gt;
&lt;p&gt;For many years, medical science has tried to patch people with SCID, or 'Severe Combined Immunodefeciency', which is a very nasty disease which in effect disables the immune system - leading to very ill patients. It has been clear for quite a while now which letters in the DNA need to be fixed in order to cure these people.&lt;/p&gt;
&lt;p&gt;Many attempts where made to patch running people, using viruses that insert new DNA into living organisms, but this proved to be very hard. The genome is guarded far too well for such a simple approach to work - cells guard their code better than Microsoft!&lt;/p&gt;
&lt;p&gt;However, recently the right virus was found which was able to breach the protection of the genome and fix the broken characters, leading to &lt;a href=&quot;http://news.bbc.co.uk/hi/english/health/newsid_1906000/1906999.stm&quot;&gt;apparently healthy people&lt;/a&gt;.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h2&gt;Bug Regression&lt;/h2&gt;
&lt;p&gt; When fixing a bug in a computer program, we often introduce new bugs in the course of doing so. The genome is rife with this thing. A lot of African Americans are immune to Malaria but instead suffer from sickle cell anemia:&lt;/p&gt;
&lt;table readability=&quot;4.4911504424779&quot;&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td width=&quot;10%&quot;&gt;&lt;/td&gt;
&lt;td width=&quot;75%&quot;&gt;In tropical regions of the world where the parasite-borne disease malaria is prevalent, people with a single copy of a particular genetic mutation have a survival advantage.&lt;br /&gt;...&lt;br /&gt;While inheriting one copy of the mutation confers a benefit, inheriting two copies is a tragedy. Children born with two copies of the genetic mutation have sickle cell anemia, a painful disease that affects the red blood cells.&lt;/td&gt;
&lt;td width=&quot;15%&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0&quot;&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.fda.gov/fdac/features/496_sick.html&quot;&gt;http://www.fda.gov/fdac/features/496_sick.html&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;There are quite a few examples of this happening. See also the wonderful book &lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0060932902&quot;&gt;'Genome' by Matt Ridley.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Reed-Solomon codes: 'Forward Error Correction'&lt;/h2&gt;
&lt;p&gt; Like computer storage, DNA (and its intermediate 'RNA') can get corrupted. To protect against common 'single bit errors', the encoding from individual DNA letters to proteins is degenerate. There are 4 RNA characters, U, C, G and A - in other words, a 'byte' is 2 bits long. Three characters correspond to an amino acid.&lt;/p&gt;
&lt;table readability=&quot;4&quot;&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td&gt;&lt;img src=&quot;https://ds9a.nl/amazing-dna/nucleotides.jpg&quot; /&gt;&lt;/td&gt;
&lt;td&gt;6 bits could conceivably map to 64 amino acids, yet there are only 20 in use. For example, UCU, UCC, UCA and UCG all encode for 'Serine', whereas only UGG maps to 'Tryptophan'.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Now, it turns out that some likely 'typos' (UCU -&amp;gt; UCC) in the encoding lead to an identical amino acid being expressed. For more about this fascinating phenomenon, read &lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0465045669&quot;&gt;'Metamagical Themas' by Douglas Hofstadter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt; Some code is sacred. We may not remember who wrote it, or why - we just know that it works. The guy who thought it up may have left the company already. Such code is not to be tinkered with.&lt;/p&gt;
&lt;p&gt;DNA knows the concept of the 'molecular clock'. Some parts of the genome are actively changing and some parts are sacrosanct. A good example of the latter are the Histone genes H3 and H4.&lt;/p&gt;
&lt;p&gt;These genes are fundamental to the actual storage of the genome and are thus of paramount importance. Any failure in this code rapidly leads to a non-functioning organism.&lt;/p&gt;
&lt;p&gt;So it is to be expected that this code isn't tinkered with and that turns out the case. The H3 an H4 genes have a *zero* effective mutation rate in humans. But it goes far beyond that. You share almost the exact same code with anything from chickens to grass or moulds.&lt;/p&gt;
&lt;table readability=&quot;2.8055555555556&quot;&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td width=&quot;10%&quot;&gt;&lt;/td&gt;
&lt;td width=&quot;75%&quot;&gt;RATES OF NUCLEOTIDE SUBSTITUTION PER SITE PER &lt;strong&gt;1000 MILLION YEARS&lt;/strong&gt; BETWEEN VARIOUS HUMAN AND RODENT PROTEINS-CODING GENES WITH DIVERGENCE SET AT 80 MILLION YEARS BASED ON FOSSIL EVIDENCE:
&lt;table border=&quot;1&quot; width=&quot;100%&quot;&gt;&lt;tr&gt;&lt;td&gt;gene&lt;/td&gt;
&lt;td&gt;Number of codons&lt;/td&gt;
&lt;td&gt;Effective rate&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;histone 3&lt;/td&gt;
&lt;td&gt;135&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;histone 4&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;insulin&lt;/td&gt;
&lt;td&gt;51&lt;/td&gt;
&lt;td&gt;0.13&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;gamma interferon&lt;/td&gt;
&lt;td&gt;136&lt;/td&gt;
&lt;td&gt;2.79&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;td width=&quot;15%&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0&quot;&gt;&lt;td&gt;&lt;/td&gt;
&lt;td readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.staffs.ac.uk/schools/sciences/biology/Handbooks/evolseqphylo.htm&quot;&gt;http://www.staffs.ac.uk/schools/sciences/biology/Handbooks/evolseqphylo.htm&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Now, it does appear that there are two ways the genome can make sure that code does not mutate. The first way is described above: use amino acids that are highly degenerate and making sure that those typos that DO occur result in the same output.&lt;/p&gt;
&lt;p&gt;Furthermore, genes can be copied earlier or later in the cell's reproductive process, leading to more or less favourable copying conditions. Many more of such conditions apply.&lt;/p&gt;
&lt;p&gt;It appears as if H3 and H4 were authored very carefully as they do have a lot of 'synonymous changes', which through the clever techniques described above do not lead to changes in the output.&lt;/p&gt;
&lt;h2&gt;Framing errors: start and stop bits&lt;/h2&gt;

&lt;pre&gt;
...0 0000 0001   0000 0010  0000 0011 0...
&lt;/pre&gt;
&lt;p&gt;This clearly describes the 8 bit values 1, 2 and 3. The spaces I added make it clear where a byte starts and stops. Many serial devices employ stop and start bits to encode where you start reading. If we shift this sequence slightly:&lt;/p&gt;
&lt;pre&gt;
...00 0000 0010   000 00100  000 00110 ...
&lt;/pre&gt;
&lt;p&gt;It suddenly reads 2, 4, 6! To prevent this from happening in DNA there are elaborate signals that tell the cell where to start reading. Interestingly, there are pieces of genome that can be read from multiple starting points, and produce useful (but different) results either way. That is what I call a cool hack!&lt;/p&gt;
&lt;p&gt;Each way a strand of DNA can be read is called an&lt;a href=&quot;http://bioweb.uwlax.edu/GenWeb/Molecular/Seq_Anal/Translation/translation.html&quot;&gt;Open Reading Frame&lt;/a&gt; and there are generally 6, 3 each way.&lt;/p&gt;
&lt;h2&gt;Massive multiprocessing: each cell is a universe&lt;/h2&gt;
&lt;p&gt; Now, DNA is not like a computer programming language. It really isn't. But there are some whopping analogies. We can view each cell as a CPU, running its own kernel. Each cell has a copy of the entire kernel, but choses to activate only the relevant parts. Which modules or drivers it loads, so to speak.&lt;/p&gt;
&lt;table readability=&quot;5.5&quot;&gt;&lt;tr readability=&quot;17&quot;&gt;&lt;td readability=&quot;15&quot;&gt;If a cell needs to do something ('call a function'), it whips up the right piece of the genome and transcribes it into RNA. The RNA is then translated into a sequence of amino acids, which together make up a protein the DNA coded for. Now for the really cool bit :-)
&lt;p&gt;This protein is tagged with a shipping address. This is a marker consisting of several amino acids which tell the rest of the cell where this protein needs to go. There is machinery which acts on these instructions, and delivers the protein, which is potentially on the outside of the cell.&lt;/p&gt;
&lt;p&gt;The delivery instruction is then stripped off and several post processing steps may be performed, possibly activating the protein - which is good, because you may not want to transport an active protein through places where it should not do work.&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;center&gt;&lt;img src=&quot;https://ds9a.nl/amazing-dna/cell.jpg&quot; /&gt;&lt;br /&gt;A Cell&lt;/center&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h2&gt;Self hosting &amp;amp; bootstrapping&lt;/h2&gt;
&lt;p&gt; If we were to destroy all existing C compilers on the planet and leave only the code for one, we would be in great trouble. Yes, we have the C code to a C compiler, but we need a C compiler to compile it!&lt;/p&gt;
&lt;p&gt;In actual fact, this was solved by not writing the first C compiler in C (duh), but in a language that was available already: B. See &lt;a href=&quot;http://cm.bell-labs.com/cm/cs/who/dmr/chist.html&quot;&gt;here&lt;/a&gt; for details about 'bootstrapping'.&lt;/p&gt;
&lt;p&gt;The same holds for the genome. To create a new 'binary' of a specimen, a *living* copy is required. The genome needs an elaborate toolchain in order to deliver a living thing. The code itself is impotent. This toolchain is commonly called 'your parents'.&lt;/p&gt;
&lt;p&gt;Update: Recently, it has become possible to 'bootstrap' life with very little actually living source material. The dictum &quot;every cell comes from a cell&quot; is becoming less true. See for example &lt;a href=&quot;http://en.wikipedia.org/wiki/Mycoplasma_laboratorium&quot;&gt;Mycoplasma laboratorium&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It appears that RNA, which is an intermediate code between DNA and a protein, may have been the 'B' for DNA. Which begs the question where RNA came from. It is very interesting to note that extra-terrestial objects often contain amino acids! See &lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=amino+acids+meteorites&quot;&gt;http://www.google.com/search?hl=en&amp;amp;q=amino+acids+meteorites&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The Makefile&lt;/h2&gt;

&lt;table readability=&quot;7.5898734177215&quot;&gt;&lt;tr readability=&quot;26.090189873418&quot;&gt;&lt;td&gt;&lt;img src=&quot;https://ds9a.nl/amazing-dna/homeobox.gif&quot; /&gt;&lt;/td&gt;
&lt;td readability=&quot;24.667088607595&quot;&gt;Organisms typically start out as a single cell, which as said before contains two entire copies of the genome. The big tarfile so to speak, with all files extracted, ready to go. Now what?
&lt;p&gt;Enter the &lt;a href=&quot;http://www.people.virginia.edu/~rjh9u/homeo.html&quot;&gt;Homeobox genes&lt;/a&gt;. Cells must be copied and assigned a purpose. The Homeobox genes start out by laying a 'top to bottom' dependency which reads 'start with the head'. In order to make this happen, a chemical gradient is created by which cells can sense where they are, and decide if they need to do things useful for building a head, or for building a primordial notochord.&lt;/p&gt;
&lt;p&gt;Only discovered in 1983, the Homeobox genes are a very exciting area of research right now. It is interesting to note that like a Makefile, 'HOX' genes only trigger things in other genes and don't materially build things themselves.&lt;/p&gt;
&lt;p&gt;The homeobox 'syntax' appears to be very 'holy' in the sense described above. What happens if you copy paste the 'legs selector' part of a mouse HOX gene into the fruitfly Homeobox:&lt;/p&gt;
&lt;p&gt;The fruitfly and human genomes did not branch just millions of years ago but &lt;strong&gt;hundreds of millions of years&lt;/strong&gt; ago. And you can copy paste parts ('Selectors' in the genetic language) of the Makefile and it still clicks. Please note that the 'build a leg' routine in a fruitfly is of course radically different from that in a mouse, but the 'selector' correctly triggers the right instructions.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h2&gt;Plugins: Plasmids&lt;/h2&gt;

&lt;p&gt;All living organisms have DNA, sometimes organized into multiple chromosomes ('libraries'), sometimes in only one, typically circular in that case. This goes for most bacteria. Next to this large main genome, such bacteria frequently also host 'plasmids': tiny circles of DNA with specific functions.&lt;/p&gt;
&lt;p&gt;Such plasmids are somewhat portable between species, and through a variety of mechanisms they do indeed get transferred horizontally. By this way even non-identical bacteria can 'learn' antibiotic resistance from each other, for example.&lt;/p&gt;
&lt;p&gt;Compared to the programming world, a plasmid is not voluntary, and is like LD_PRELOADing a .so or the equivalent on other platforms. And in fact, plasmids are frequently injected for research purposes. They can easily be injected in all kinds of bacteria, and immediately get to work.&lt;/p&gt;
&lt;p&gt;Plasmids copy themselves independently from the main chromosome, and are thus a permanent fixture of bacteria. To make this happen, a plasmid features the magnificently named 'Origin of Replication' gene which gets triggered when the cell wants to divide.&lt;/p&gt;
&lt;h2&gt;Further reading&lt;/h2&gt;

&lt;table cellpadding=&quot;10&quot; readability=&quot;23.279653487339&quot;&gt;&lt;tr valign=&quot;top&quot; readability=&quot;8.8646616541353&quot;&gt;&lt;td&gt;&lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0060932902&quot;&gt;Genome&lt;/a&gt; by Matt Ridley&lt;/td&gt;
&lt;td readability=&quot;9&quot;&gt;An amazing account of an effect each chromosome has on our lives. Very readable yet strict in not 'dumbing down' the theory. Contains an impressive set of references.
&lt;p&gt;Source of many of the more impressive examples found on this page.&lt;/p&gt;
&lt;p&gt;And to help Matt along in the quest he clearly sets out in his book, I would like to state quite clearly:&lt;/p&gt;
&lt;center&gt;&lt;big&gt;Genes are not there to cause diseases&lt;/big&gt;&lt;/center&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr valign=&quot;top&quot; readability=&quot;12.777292576419&quot;&gt;&lt;td&gt;&lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0471330612&quot;&gt;Human Molecular Genetics, second edition&lt;/a&gt; by Tom Strachan and Andrew P. Read&lt;/td&gt;
&lt;td&gt;Neatly fills the gap between 'primary literature' (ie, peer reviewed academic magazines and papers) and introductory textbooks. I'm litteraly dragging myself through this book, constantly looking things up in order to understand everything. If you really want to know the details about introns, exons, RNA in all its variants, how genes cause and prevent diseases, this is the book.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr valign=&quot;top&quot; readability=&quot;14.361022364217&quot;&gt;&lt;td&gt;&lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0192860925&quot;&gt;The Selfish Gene&lt;/a&gt; by Richard Dawkins&lt;/td&gt;
&lt;td readability=&quot;11.389830508475&quot;&gt;&lt;a href=&quot;http://www.amazon.com/exec/obidos/search-handle-url/index%3Dbooks%26field-author%3DDawkins%2C%20Richard/&quot;&gt;Richard Dawkins&lt;/a&gt; is the &lt;a href=&quot;http://www.amazon.com/exec/obidos/search-handle-url/index%3Dbooks%26field-author%3DStevens%2C%20Richard/&quot;&gt;Richard Stevens&lt;/a&gt; of evolution theory. Both have contributed practical work but are most famous for their crystal clear expositions of existing theory, opening up the world they describe to an audience of millions.
&lt;p&gt;In this book, Dawkins explains evolution from a 'gene' standpoint rather then from a 'species' standpoint. It turns out to make a lot more sense this way and helps understand how genes power you, and not the other way around. It is not that genes help you do what you want to do, you ARE the genes.&lt;/p&gt;
&lt;p&gt;Also explains a lot about how genes work along the way.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr valign=&quot;top&quot; readability=&quot;5.9024390243902&quot;&gt;&lt;td&gt;&lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0393315703&quot;&gt;The Blind Watchmaker : Why the Evidence of Evolution Reveals a Universe Without Design&lt;/a&gt; by Richard Dawkins&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;Again a book by Dawkins. More about evolution than about genes but clearly explains how evolution can be responsible for the intricate design found in many living things.
&lt;p&gt;Again very readable and fascinating on every level.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr valign=&quot;top&quot; readability=&quot;13.901376146789&quot;&gt;&lt;td&gt;&lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0465045669&quot;&gt;Metamagical Themas&lt;/a&gt; by Douglas Hofstadter&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;This is an 'idea' book. It is filled to the brim with ideas, they simply ooze out of the pages. Many of these ideas are about information theory, genetics, life, intelligence, music, mathematics and people.
&lt;p&gt;Clearly not a genetic textbook but has been influential in imbueing enthousiasm for all things genetic in many people. Can often be found dirt cheap in second hand bookstores.&lt;/p&gt;
&lt;p&gt;Recommended.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;</description>
<pubDate>Thu, 25 Jan 2018 19:17:15 +0000</pubDate>
<dc:creator>sundarurfriend</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://ds9a.nl/amazing-dna/</dc:identifier>
</item>
<item>
<title>2018 Stellar roadmap</title>
<link>https://www.stellar.org/blog/2018-Stellar-Roadmap/</link>
<guid isPermaLink="true" >https://www.stellar.org/blog/2018-Stellar-Roadmap/</guid>
<description>&lt;p&gt;Hello and welcome. First of all, before we dig into our strategic goals for the upcoming year, I want to share the exciting recent growth Stellar has seen in r.p.w.—a seldom-discussed, yet crucial, cryptocurrency metric:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.stellar.org/wp-content/uploads/2018/01/stellar-randos-per-week.png&quot; alt=&quot;Stellar – Randos per week&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As any industry insider will tell you, this is &lt;em&gt;the&lt;/em&gt; critical indicator for a decentralized protocol. We seem to have finally hit the inflection point, where one rando sees another rando talking to someone wearing a Stellar tee-shirt and just comes over and stands there. Recent milestones include:&lt;/p&gt;
&lt;div readability=&quot;12&quot;&gt;
&lt;p&gt;“What exactly are your services? Create ICO tokens on the stellar network?” – MoonTtrading&lt;/p&gt;
&lt;p&gt;“So . . . how are you different from bitcoins?” – coin_spy_pro&lt;/p&gt;
&lt;p&gt;“Hey man remember me? We met once a long time ago and now my brother is really into cryptocurrency.” – Kevin&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Our internal projections, based on the most recent data, estimate that by quarter’s end all mankind will stride up to Stellar, take a wide stance, and ask us what we think about RaiBlocks.&lt;/p&gt;
&lt;p&gt;The above notwithstanding, &lt;a href=&quot;https://www.stellar.org/blog/Q1-2018-stellar-and-state-of-crypto/&quot; target=&quot;_blank&quot;&gt;our last post&lt;/a&gt; has the best information on Stellar’s recent performance metrics. Today, we’ll be discussing how to keep all those metrics moving up and to the right. This is our 2018 Roadmap; it has two main goals.&lt;/p&gt;
&lt;h2&gt;Goal #1: &lt;span&gt;SDEX – the Stellar Decentralized Exchange&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;At the end of 2017 we recruited a veteran team, with a substantial track record of product and marketing success, to build a front-end for Stellar’s inherent decentralized exchange. &lt;strong&gt;SDEX&lt;/strong&gt; is the working name for the project, and internal prototypes are underway. We’ll reveal further details on SDEX’s specific roadmap, brand, and leadership in the near future.&lt;/p&gt;
&lt;p&gt;SDEX will be the world-class front-end that our underlying technology has long deserved. It will enable on-chain, protocol-level trades for any Stellar token, and we will create liquidity to minimize spreads and maximize choice of assets. Specific niceties the SDEX implies:&lt;/p&gt;
&lt;p&gt;– &lt;strong&gt;Day One&lt;/strong&gt; trading for any Stellar ICO token&lt;br/&gt;– atomic pathfinding to discover the &lt;strong&gt;cheapest rates&lt;/strong&gt; between any two assets&lt;br/&gt;– very &lt;strong&gt;low trading fees&lt;/strong&gt;&lt;br/&gt;– end-user control of secret keys&lt;/p&gt;
&lt;p&gt;For SDEX to compete with other major exchanges we will need to increase the quality and number of &lt;strong&gt;anchors&lt;/strong&gt; and &lt;strong&gt;market-makers&lt;/strong&gt; on our network. We continue to offer &lt;a href=&quot;https://www.stellar.org/lumens/stellar-partnership-grant-program/&quot; target=&quot;_blank&quot;&gt;grants of up to $2M&lt;/a&gt; for partners in these areas.&lt;/p&gt;
&lt;p&gt;The Exchange also promotes our vision of moving more real-world assets on the blockchain. ICOs are already coming to Stellar because we’re cheap, scalable, and fast. See Mobius’s &lt;a href=&quot;https://medium.com/mobius-network/mobius-we-did-it-ae32826f2c2a&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;We Did It!&lt;/strong&gt;&lt;/a&gt; announcement, posted just a few days ago, for their impression of our platform.&lt;/p&gt;
&lt;p&gt;In 2018, we will put significant energy into bringing a wider variety of financial instruments on to the network. SDEX will be the exchange of first resort for all Stellar tokens, and we foresee a future where, say, carbon credits, oil futures, and the latest digital asset are all traded together—cheaply and quickly.&lt;/p&gt;
&lt;h4&gt;Secondary Product Objective: Better Ecosystem Support&lt;/h4&gt;
&lt;p&gt;We recognize that our platform is only as useful as the tools built on top of it. As noted, we’re seeing more interest in Stellar than ever before, from randos and !randos alike, and we want to make sure it’s easy for anyone to begin building on our network. We need a robust and informed community of developers and entrepreneurs alongside us to become a global financial protocol.&lt;/p&gt;
&lt;p&gt;In 2018, we plan:&lt;/p&gt;
&lt;p&gt;– better overall brand communication&lt;br/&gt;– more implementation walk-throughs to help people get going&lt;br/&gt;– better technical documentation, including release notes&lt;br/&gt;– continued improvement to our Horizon API and the surrounding SDKs&lt;/p&gt;
&lt;p&gt;We will also continue to award lumens, via the &lt;a href=&quot;https://www.stellar.org/lumens/build/&quot; target=&quot;_blank&quot;&gt;Stellar Build Challenge&lt;/a&gt;, to people and businesses who contribute to our ecosystem.&lt;/p&gt;
&lt;h2&gt;Goal #2: &lt;span&gt;Lightning Network on Stellar&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Technology has always been the strongest part of the Stellar story, and we will make it even stronger in 2018. We’ve noted the market demand for more private channel transactions on Stellar, and we will integrate Lightning in 2018. For those of you unfamiliar with the tech, this &lt;em&gt;Vice&lt;/em&gt; piece is a decent introduction: &lt;a href=&quot;https://motherboard.vice.com/en_us/article/gyw9aq/wtf-is-the-lightning-network-and-will-it-save-bitcoin&quot; target=&quot;_blank&quot;&gt;WTF is the Lightning Network and Will It Save Bitcoin?&lt;/a&gt; Of course, unlike Bitcoin, Stellar doesn’t need “saving” . . . we’re just going from a good place to an even better one.&lt;/p&gt;
&lt;p&gt;Lightning will have a huge positive effect on Stellar’s long-term scalability and &lt;a href=&quot;https://medium.com/@thecryptoconomy/the-barely-discussed-incredible-benefit-of-the-lightning-network-4ce82c75eb58&quot; target=&quot;_blank&quot;&gt;security&lt;/a&gt;. We’ve been aware of Lightning’s potential for Stellar &lt;a href=&quot;http://jedmccaleb.com/blog/bitcoin-lightning-stellar/&quot;&gt;for a while&lt;/a&gt;, and we’ve recently collaborated with Stellar advisor and Bitcoin Core developer &lt;a href=&quot;https://rubin.io/&quot; target=&quot;_blank&quot;&gt;Jeremy Rubin&lt;/a&gt; to optimize our implementation. Expect a detailed technical post on this soon.&lt;/p&gt;
&lt;p&gt;We intend to extend Stellar Core with a &lt;strong&gt;Bump Sequence&lt;/strong&gt; operation; you can see our progress and read the formal spec on &lt;a href=&quot;https://github.com/stellar/stellar-protocol/issues/53&quot; target=&quot;_blank&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Secondary Tech Objectives&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Hardening&lt;/em&gt;: as we make performance improvements, the network must remain resilient and secure. We will reduce the attack surface at the protocol layer by adding invariant support (with checks performed constantly by the validator). Those checks will reduce the impact of bugs on the ledger state.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Decentralization:&lt;/em&gt; we want to make it easier to run a full validator. In order for the network to be as decentralized as possible, the overhead of running nodes should be minimal. By making nodes more reliable and self sufficient, node operators can spend time doing other things. We’ll also be making improvements to how we monitor the network’s health, and the way nodes exchange data, by revisiting some characteristics of the peer-to-peer code.&lt;/p&gt;
&lt;p&gt;As always, encourage our community to modify and audit Core’s protocol implementation. We are rewriting part of the data layer for improved code semantics. Check our github to get involved:&lt;/p&gt;
&lt;a href=&quot;https://github.com/stellar&quot; target=&quot;_blank&quot;&gt;https://github.com/stellar&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/stellar/go&quot; target=&quot;_blank&quot;&gt;https://github.com/stellar/go&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/stellar/stellar-core&quot; target=&quot;_blank&quot;&gt;https://github.com/stellar/stellar-core&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/stellar/horizon&quot; target=&quot;_blank&quot;&gt;https://github.com/stellar/horizon&lt;/a&gt;
&lt;h3&gt;That’s It&lt;/h3&gt;
&lt;p&gt;For those of you hoping for splashy partnership announcements, that’s not our goal here. Also, at a philosophical level, we believe that applauding our &lt;em&gt;n&lt;/em&gt;th partner is less important than ensuring existing partnerships are successful.&lt;/p&gt;
&lt;p&gt;We closed 37 partners last year and highlighted a few, including &lt;a href=&quot;https://www.ibm.com/press/us/en/pressrelease/53290.wss&quot; target=&quot;_blank&quot;&gt;IBM&lt;/a&gt; and &lt;a href=&quot;https://tempo.eu.com/en&quot; target=&quot;_blank&quot;&gt;Tempo&lt;/a&gt;, in our &lt;a href=&quot;https://www.stellar.org/blog/Q1-2018-stellar-and-state-of-crypto/&quot; target=&quot;_blank&quot;&gt;Stellar and the State of Cryptocurrency&lt;/a&gt; post from last week. Corporate development work will continue: we’ve planned major partnership events around the world this Spring.&lt;/p&gt;
&lt;p&gt;In the meantime, we are focused on making sure Stellar as a platform is ready for the vastly increased attention, growth, and scrutiny to come in 2018.&lt;/p&gt;
&lt;p&gt;Thank you.&lt;/p&gt;
</description>
<pubDate>Thu, 25 Jan 2018 17:14:48 +0000</pubDate>
<dc:creator>manojlds</dc:creator>
<og:type>article</og:type>
<og:title>2018 Stellar Roadmap - Stellar</og:title>
<og:description>Hello and welcome. First of all, before we dig into our strategic goals for the upcoming year, I want to …</og:description>
<og:url>https://www.stellar.org/blog/2018-Stellar-Roadmap/</og:url>
<og:image>https://www.stellar.org/wp-content/uploads/2018/01/stellar-randos-per-week.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.stellar.org/blog/2018-Stellar-Roadmap/</dc:identifier>
</item>
<item>
<title>Senator asks FBI director to name the cryptographers who support backdoors</title>
<link>https://gizmodo.com/senator-demands-fbi-director-explain-his-encryption-bac-1822400040</link>
<guid isPermaLink="true" >https://gizmodo.com/senator-demands-fbi-director-explain-his-encryption-bac-1822400040</guid>
<description>&lt;div class=&quot;img-wrapper lazy-image&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;img-permalink-sub-wrapper&quot;&gt;&lt;span class=&quot;js_lightbox-wrapper lightbox-wrapper&quot;&gt;&lt;img src=&quot;https://i.kinja-img.com/gawker-media/image/upload/s--AbB5F2TH--/c_scale,fl_progressive,q_80,w_800/ftfrbwp9m4iklz19lupg.jpg&quot; class=&quot;lazyload ls-lazy-image-tag&quot; data-sizes=&quot;auto&quot; data-width=&quot;1024&quot; data-chomp-id=&quot;ftfrbwp9m4iklz19lupg&quot; data-format=&quot;jpg&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
Christopher Wray prepares to testify during his confirmation hearing before the Senate Judiciary Committee July 12, 2017. Photo: Getty&lt;/div&gt;
&lt;p&gt;One US senator is calling out the director of the Federal Bureau of Investigation for pushing the moronic notion that there is somehow a good way to add backdoors to encryption used to protect devices like Apple’s iPhone.&lt;/p&gt;


&lt;p&gt;In a &lt;a href=&quot;https://www.reuters.com/article/us-usa-cyber-fbi/fbi-chief-calls-unbreakable-encryption-urgent-public-safety-issue-idUSKBN1EY1S7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; onclick=&quot;window.ga('send', 'event', 'Embedded Url', 'External link', 'https://www.reuters.com/article/us-usa-cyber-fbi/fbi-chief-calls-unbreakable-encryption-urgent-public-safety-issue-idUSKBN1EY1S7', {metric25:1})&quot;&gt;speech&lt;/a&gt; earlier this month, FBI Director Christopher Wray carried on the time-honored agency tradition of claiming that Silicon Valley can backdoor encryption safely if its workforce just &lt;em&gt;nerds&lt;/em&gt; a little bit harder. The argument, made by Wray and other officials before him, is that the tech industry’s best and brightest are just being recalcitrant and could offer up a golden key for law enforcement to access encrypted communications if they really wanted to. After all, these are the people that created self-driving cars, the thinking goes. Why can’t they break encryption in a good way while they’re at it?&lt;br/&gt;&lt;/p&gt;


&lt;p&gt;The problem, according to Wray, is that law enforcement is stymied by phone encryption, which is now widespread. During his January 9th speech at the International Conference on Cyber Security in New York, Wray called the prevalence of encryption an “urgent public safety issue” and said it had prevented law enforcement from accessing some 7,800 devices in the last fiscal year. Tech companies, Wray said, “should be able to design devices that both provide data security and permit lawful access with a court order.”&lt;/p&gt;
&lt;p&gt;But this is exactly what cryptographers and tech companies have repeatedly warned they can’t do, arguing that creating “lawful access” would also open the door to all sorts of hackers and malicious actors, undermining the security of the entire internet in the process.&lt;/p&gt;
&lt;p&gt;Wray’s speech undoubtedly spurred frustration in Silicon Valley, and it appears he pissed off Sen. Ron Wyden as well. During Wray’s confirmation process last summer, Wyden pressed him on the topic of encryption. Wray claimed he hadn’t formed a policy position on the issue, and Wyden requested that Wray consult with him before going public with his position. That apparently didn’t happen.&lt;/p&gt;
&lt;div class=&quot;js_ad-mobile-dynamic js_ad-dynamic ad-mobile-dynamic&quot;&gt;
&lt;div class=&quot;ad-unit js_ad-unit hide-contents ad-mobile js_ad-mobile&quot;&gt;
&lt;div class=&quot;ad-mobile-inner&quot;&gt;
&lt;p class=&quot;ad-label proxima&quot;&gt;&lt;small class=&quot;proxima&quot;&gt;Advertisement&lt;/small&gt;&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In a &lt;a href=&quot;https://www.wyden.senate.gov/download/?id=B31DD6FF-98E8-490C-B491-7DE6C7559C71&amp;amp;download=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; onclick=&quot;window.ga('send', 'event', 'Embedded Url', 'External link', 'https://www.wyden.senate.gov/download/?id=B31DD6FF-98E8-490C-B491-7DE6C7559C71&amp;amp;download=1', {metric25:1})&quot;&gt;letter&lt;/a&gt; sent to Wray today, Wyden chastised him for advocating “a flawed policy that would harm American security, liberty, and our economy” and for not contacting Wyden prior to giving his speech.&lt;/p&gt;
&lt;p&gt;Wyden ripped into Wray’s speech:&lt;/p&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;Your stated position parrots the same debunked arguments espoused by your predecessors, all of whom ignored the widespread and vocal consensus of cryptographers. For years, these experts have repeatedly stated that what you are asking for is not, in fact, possible. Building secure software is extremely difficult, and vulnerabilities are often introduced inadvertently in the design process. Eliminating these vulnerabilities is a mammoth task, and experts are unified in their opinion that introducing deliberate vulnerabilities would likely create catastrophic unintended consequences that could debilitate software functionality and security entirely.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Democratic senator also demanded that Wray release a list of the cryptographers he’d met with to form his opinions on encryption, specifically identifying which experts advised backdooring encryption:&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;I would like to learn more about how you arrived at and justify this ill-informed policy proposal. Please provide me with a list of the cryptographers with whom you’ve personally discussed this topic since our July 2017 meeting and specifically identify those experts who advised you that companies can feasibly design government access features into their products without weakening cybersecurity. Please provide this information by February 23, 2018.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We’re guessing it’s a short list.&lt;/p&gt;
</description>
<pubDate>Thu, 25 Jan 2018 16:45:33 +0000</pubDate>
<dc:creator>enraged_camel</dc:creator>
<og:title>Senator Demands FBI Director Explain His Encryption Backdoor Bullshit</og:title>
<og:type>article</og:type>
<og:image>https://i.kinja-img.com/gawker-media/image/upload/s--A0iU-DWI--/c_fill,fl_progressive,g_center,h_450,q_80,w_800/ftfrbwp9m4iklz19lupg.jpg</og:image>
<og:url>https://gizmodo.com/senator-demands-fbi-director-explain-his-encryption-bac-1822400040</og:url>
<og:description>One US senator is calling out the director of the Federal Bureau of Investigation for pushing the moronic notion that there is somehow a good way to add backdoors to encryption used to protect devices like Apple’s iPhone.</og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://gizmodo.com/senator-demands-fbi-director-explain-his-encryption-bac-1822400040</dc:identifier>
</item>
<item>
<title>Robinhood Crypto – Invest in Bitcoin and other cryptocurrencies</title>
<link>https://crypto.robinhood.com/</link>
<guid isPermaLink="true" >https://crypto.robinhood.com/</guid>
<description>&lt;div readability=&quot;62.353846153846&quot;&gt;
&lt;p&gt;Robinhood Financial LLC and Robinhood Crypto, LLC are wholly-owned subsidiaries of Robinhood Markets, Inc. Equities and options are offered to self-directed customers by Robinhood Financial. Robinhood Financial is a member of the Financial Industry Regulatory Authority (FINRA) and the Securities Investor Protection Corporation (SIPC), which protects securities customers of its members up to $500,000 (including $250,000 for claims for cash). Explanatory brochure available upon request or at www.sipc.org. Cryptocurrency trading is offered through an account with Robinhood Crypto. Robinhood Crypto is not a member of FINRA or SIPC. Cryptocurrencies are not stocks and your cryptocurrency investments are not protected by either FDIC or SIPC insurance.&lt;/p&gt;
&lt;p&gt;Getting “early access” to options or Web is defined as signing up with a valid email address for a spot in Robinhood Financial’s respective waitlist queues for Web or for options. Getting “early access” to Robinhood Crypto is defined as signing up with a valid email address for a spot in Robinhood Crypto’s waitlist queue. Early access to the waitlist for Web, options, or Robinhood Crypto should in no way be construed as confirmation that a brokerage account with Robinhood Financial has been opened or will even be approved for opening. Priority may be given to Robinhood Gold subscribers and existing customers of Robinhood Financial.&lt;/p&gt;
&lt;p&gt;Free trading of stocks and options refers to $0 commissions for Robinhood Financial self-directed individual cash or margin brokerage accounts that trade U.S. listed securities via mobile devices or Web. Relevant SEC &amp;amp; FINRA fees may apply. Please see the &lt;a target=&quot;_blank&quot; href=&quot;https://d2ue93q3u507c2.cloudfront.net/assets/robinhood/legal/RHF%20Retail%20Commisions%20and%20Fees%20Schedule.pdf&quot;&gt;Commission and Fee Schedule&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Robinhood Financial is currently registered in the following &lt;a href=&quot;https://d2ue93q3u507c2.cloudfront.net/assets/robinhood/legal/RHF%20Jurisdictions.pdf&quot; target=&quot;_blank&quot;&gt;jurisdictions&lt;/a&gt;. This is not an offer, solicitation of an offer, or advice to buy or sell securities, or open a brokerage account in any jurisdiction where Robinhood Financial is not registered. Additional information about your broker can be found by clicking&lt;a href=&quot;https://brokercheck.finra.org/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Margin trading involves interest charges and risks, including the potential to lose more than deposited or the need to deposit additional collateral in a falling market. Before using margin, customers must determine whether this type of trading strategy is right for them given their specific investment objectives, experience, risk tolerance, and financial situation. For more information please see Robinhood Financial’s &lt;a href=&quot;https://d2ue93q3u507c2.cloudfront.net/assets/robinhood/legal/RHF%20Margin%20Account%20Disclosure.pdf&quot; target=&quot;_blank&quot;&gt;Margin Disclosure Statement&lt;/a&gt;, &lt;a href=&quot;https://d2ue93q3u507c2.cloudfront.net/assets/robinhood/legal/RHF%20Margin%20Agreement.pdf&quot; target=&quot;_blank&quot;&gt;Margin Agreement&lt;/a&gt; and &lt;a href=&quot;http://www.finra.org/Investors/SmartInvesting/AdvancedInvesting/MarginInformation/P005927&quot; target=&quot;_blank&quot;&gt;FINRA Investor Information&lt;/a&gt;. These disclosures contain information on Robinhood Financial’s lending policies, interest charges, and the risks associated with margin accounts.&lt;/p&gt;
&lt;p&gt;Investors should consider the investment objectives and unique risk profile of Exchange Traded Funds (ETFs) carefully before investing. ETFs are subject to risks similar to those of other diversified portfolios. Leveraged and Inverse ETFs may not be suitable for all investors and may increase exposure to volatility through the use of leverage, short sales of securities, derivatives and other complex investment strategies.&lt;/p&gt;
&lt;p&gt;Although ETFs are designed to provide investment results that generally correspond to the performance of their respective underlying indices, they may not be able to exactly replicate the performance of the indices because of expenses and other factors. A prospectus contains this and other information about the ETF and should be read carefully before investing. Customers should obtain prospectuses from issuers and/or their third party agents who distribute and make prospectuses available for review. ETFs are required to distribute portfolio gains to shareholders at year end. These gains may be generated by portfolio rebalancing or the need to meet diversification requirements. ETF trading will also generate tax consequences. Additional regulatory guidance on Exchange Traded Products can be found by clicking &lt;a href=&quot;http://www.sec.gov/investor/alerts/etfs.pdf&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Options transactions may involve a high degree of risk. Please review the options disclosure document entitled the Characteristics and Risks of Standardized Options available through &lt;a href=&quot;https://about.robinhood.com/legal&quot; target=&quot;_blank&quot;&gt;https://about.robinhood.com/legal&lt;/a&gt; or &lt;a href=&quot;https://www.theocc.com&quot; target=&quot;_blank&quot;&gt;https://www.theocc.com&lt;/a&gt; to learn more about the risks associated with options trading.&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;83.025695931478&quot;&gt;
&lt;p&gt;Third party information provided for product features, communications, and communications emanating from social media communities, market prices, data and other information available through Robinhood Markets, Inc., Robinhood Financial LLC or Robinhood Crypto, LLC are meant for informational purposes only and are not intended as an offer or solicitation for the purchase or sale of any financial instrument or cryptocurrency or as an official confirmation of any transaction. The information provided is not warranted as to completeness or accuracy and is subject to change without notice. Any information about Robinhood Crypto on any Robinhood website (including &lt;a href=&quot;https://robinhood.com&quot; target=&quot;_blank&quot;&gt;www.robinhood.com&lt;/a&gt; and &lt;a href=&quot;https://blog.robinhood.com&quot; target=&quot;_blank&quot;&gt;blog.robinhood.com&lt;/a&gt;), the Robinhood platform, e-mails, or any other communications, are meant for informational purposes only and are not intended as an offer, solicitation, or advertisement for Robinhood Crypto or any goods or services offered by Robinhood Crypto. The Robinhood website provides its users links to social media sites and email. The linked social media and email messages are pre-populated. However, these messages can be deleted or edited by users, who are under no obligation to send any pre-populated messages. Any comments or statements made herein do not reflect the views of Robinhood Markets Inc., Robinhood Financial LLC, Robinhood Crypto, LLC, or any of their subsidiaries or affiliates.&lt;/p&gt;
&lt;p&gt;Investors should be aware that system response, execution price, speed, liquidity, market data, and account access times are affected by many factors, including market volatility, size and type of order, market conditions, system performance, and other factors.&lt;/p&gt;
&lt;p&gt;All investments involve risk and the past performance of a security, or financial product does not guarantee future results or returns. Keep in mind that while diversification may help spread risk it does not assure a profit, or protect against loss, in a down market. There is always the potential of losing money when you invest in securities, or other financial products. Investors should consider their investment objectives and risks carefully before investing.&lt;/p&gt;
&lt;p&gt;Cryptocurrency is a digital representation of value that functions as a medium of exchange, a unit of account, or a store of value, but it does not have legal tender status. Cryptocurrencies are sometimes exchanged for U.S. dollars or other currencies around the world, but they are not currently backed nor supported by any government or central bank. Their value is completely derived by market forces of supply and demand, and they are more volatile than traditional currencies. Trading in cryptocurrencies comes with significant risks, including volatile market price swings or flash crashes, market manipulation, and cybersecurity risks. In addition, cryptocurrency markets and exchanges are not regulated with the same controls or customer protections available in equity, option, futures, or foreign exchange investing. Cryptocurrency trading requires knowledge of cryptocurrency markets. In attempting to profit through cryptocurrency trading, you must compete with traders worldwide. You should have appropriate knowledge and experience before engaging in substantial cryptocurrency trading. Cryptocurrency trading may not generally be appropriate, particularly with funds drawn from retirement savings, student loans, mortgages, emergency funds, or funds set aside for other purposes. Cryptocurrency trading can lead to large and immediate financial losses. Under certain market conditions, you may find it difficult or impossible to liquidate a position quickly at a reasonable price. This can occur, for example, when the market for a particular cryptocurrency suddenly drops, or if trading is halted due to recent news events, unusual trading activity, or changes in the underlying cryptocurrency system. Several federal agencies have also published advisory documents surrounding the risks of virtual currency. For more information see, the &lt;a href=&quot;http://files.consumerfinance.gov/f/201408_cfpb_consumer-advisory_virtual-currencies.pdf&quot; target=&quot;_blank&quot;&gt;CFPB’s Consumer Advisory&lt;/a&gt;, the &lt;a href=&quot;http://www.cftc.gov/idc/groups/public/@customerprotection/documents/file/customeradvisory_urvct121517.pdf&quot; target=&quot;_blank&quot;&gt;CFTC’s Customer Advisory&lt;/a&gt;, the &lt;a href=&quot;https://investor.gov/additional-resources/news-alerts/alerts-bulletins/investor-alert-bitcoin-other-virtual-currency&quot; target=&quot;_blank&quot;&gt;SEC’s Investor Alert&lt;/a&gt;, and &lt;a href=&quot;http://www.finra.org/investors/alerts/bitcoin-more-bit-risky&quot; target=&quot;_blank&quot;&gt;FINRA’s Investor Alert&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;© 2018 Robinhood. All rights reserved.&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Thu, 25 Jan 2018 16:07:54 +0000</pubDate>
<dc:creator>uptown</dc:creator>
<og:image>https://d2ue93q3u507c2.cloudfront.net/assets/marketing/images/og/robinhood.jpg</og:image>
<og:type>website</og:type>
<og:url>https://crypto.robinhood.com</og:url>
<og:description>Invest in cryptocurrencies, stocks, ETFs, and options commission-free — all in one app.</og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://crypto.robinhood.com/</dc:identifier>
</item>
<item>
<title>Why I left Google (HN search results)</title>
<link>https://hn.algolia.com/?query=why%20i%20left%20google&amp;sort=byPopularity&amp;prefix&amp;page=0&amp;dateRange=all&amp;type=story</link>
<guid isPermaLink="true" >https://hn.algolia.com/?query=why%20i%20left%20google&amp;sort=byPopularity&amp;prefix&amp;page=0&amp;dateRange=all&amp;type=story</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://hn.algolia.com/?query=why%20i%20left%20google&amp;sort=byPopularity&amp;prefix&amp;page=0&amp;dateRange=all&amp;type=story&quot;&gt;https://hn.algolia.com/?query=why%20i%20left%20google&amp;sort=byPopularity&amp;prefix&amp;page=0&amp;dateRange=all&amp;type=story&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=16231658&quot;&gt;https://news.ycombinator.com/item?id=16231658&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 311&lt;/p&gt;&lt;p&gt;# Comments: 188&lt;/p&gt;</description>
<pubDate>Thu, 25 Jan 2018 15:52:38 +0000</pubDate>
<dc:creator>kelukelugames</dc:creator>
<og:url>https://hn.algolia.com/?query=why%20i%20left%20google&amp;sort=byPopularity&amp;prefix&amp;page=0&amp;dateRange=all&amp;type=story</og:url>
<og:title>HN Search powered by Algolia</og:title>
<og:description>Hacker News Search, millions articles and comments at your fingertips.</og:description>
<og:image>https://d3nb9u6x572n0.cloudfront.net/yc-logo.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://hn.algolia.com/?query=why%20i%20left%20google&amp;sort=byPopularity&amp;prefix&amp;page=0&amp;dateRange=all&amp;type=story</dc:identifier>
</item>
<item>
<title>Google doesn’t necessarily need innovation</title>
<link>https://medium.com/@steve.yegge/google-doesnt-necessarily-need-innovation-95cea96d0eeb?r=1</link>
<guid isPermaLink="true" >https://medium.com/@steve.yegge/google-doesnt-necessarily-need-innovation-95cea96d0eeb?r=1</guid>
<description>&lt;p name=&quot;fe86&quot; id=&quot;fe86&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;I’m getting a lot of calls from reporters, asking me for a hot take on my claim yesterday that Google has lost the ability to innovate. And since I’m busy with my new job at Grab, I don’t have time to talk to everyone. So let’s just nip this in the bud here.&lt;/p&gt;
&lt;p name=&quot;7814&quot; id=&quot;7814&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Most big companies don’t innovate at a large scale. It’s normal. You have two perfectly valid alternatives for responding to market shifts: You can acquire the innovator (or one of their competitors), or you can build your own competing product and compete head-to-head.&lt;/p&gt;
&lt;p name=&quot;abe9&quot; id=&quot;abe9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Acquisitions happen all the time. Sometimes the safest thing to do is wait for an innovator to become hugely successful, and then use your deep pockets to buy them up. Google buying YouTube, Facebook buying Instagram, and Amazon buying Twitch are all good examples. Nothing wrong with this approach.&lt;/p&gt;
&lt;p name=&quot;f0e2&quot; id=&quot;f0e2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Uber didn’t invent food delivery, but they were able to recognize its potential very early, and utilize their ride-hailing network to get a leg up on the original innovator(s). They were also able to build out the necessarily technology very quickly because they have great engineers. And now they’re becoming dominant in the space. Great example of how you don’t need innovation if you can respond and execute very quickly.&lt;/p&gt;
&lt;p name=&quot;ae52&quot; id=&quot;ae52&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Similarly, you may not remember, but Microsoft created the XBox as a response to the Playstation, which was looming as an existential threat to Microsoft’s business. If every household had a Playstation, and it became their window into the online world, then the PC would be obsoleted, or so their thinking went at the time. It wasn’t a guaranteed outcome, but it was dangerous enough to warrant a competitive response from Microsoft. They executed really well and achieved dominance for years, right up until that dumbass VP (what was his name?) ruined everything at E3 a couple years ago, by doing everything I accused Google of recently: Losing touch with their customers, being arrogant, and launching something nobody wanted. Now Microsoft is on the bottom again in that space, struggling to catch up.&lt;/p&gt;
&lt;p name=&quot;89ef&quot; id=&quot;89ef&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Jeff Bezos is an exception. He innovates all the time, and he doesn’t fear failure. Many of his innovation attempts fall flat, but he almost never throws the idea away. Instead he keeps hammering at it until its form is the correct one for success. Amazon continues to churn out innovations at a rate that is much, much higher than for any other company their size, and of course now he’s the richest man in the world.&lt;/p&gt;
&lt;p name=&quot;641a&quot; id=&quot;641a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Google’s problem, in my personal opinion, is that although by and large they are not innovating (which, again, is normal for big companies), they also aren’t doing the alternatives very well. Their acquisitions have slowed; instead they prefer to build competing offerings. (Is this arrogance? Sometimes, for sure.)&lt;/p&gt;
&lt;p name=&quot;e48f&quot; id=&quot;e48f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;But it seems to me they are too slow to respond. For instance they waited years too long to get into both the Cloud and Social spaces, showing a kind of institutional blindness, which wouldn’t be a problem if they would “go to the ground” more often. And when they do respond, they’re slow to execute, because of the complacency and the politics.&lt;/p&gt;
&lt;p name=&quot;f3b4&quot; id=&quot;f3b4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;These things are fixable.&lt;/p&gt;
&lt;p name=&quot;fb4f&quot; id=&quot;fb4f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;That’s all I was trying to say in my post. Google’s not going to die, and the sky isn’t falling. But if they’re too conservative to innovate like Jeff Bezos does, then they need to get a lot better at responding and executing quickly as markets open up.&lt;/p&gt;
&lt;p name=&quot;7085&quot; id=&quot;7085&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Also, I wasn’t suggesting that Grab is an innovation; we all know ride-hailing is an industry where everyone (including Uber) is copying each other at this point, in an effort to be first to lock in a network effect. But Grab has to solve these problems in Southeast Asia, which I tried to paint as a really unique challenge in my last post. Grab &lt;em class=&quot;markup--em markup--p-em&quot;&gt;specializes&lt;/em&gt; in Southeast Asia, and that kind of specialization and focus is critical, because cultural and regulatory barriers can catch you in surprising ways. It’s the Gerber baby food in Africa problem all over again.&lt;/p&gt;
&lt;p name=&quot;b9c9&quot; id=&quot;b9c9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Some people have responded negatively to my post’s tone, because we Westerners (especially in the tech industry) are pretty jaded. My post was a reflection of the experience I had last week in Jakarta, which is a world so different as to be almost something out of the movies. Unless you’ve been there yourself, it’s hard to appreciate how big this disruptor is.&lt;/p&gt;
&lt;p name=&quot;b71c&quot; id=&quot;b71c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I’ll follow up soon with a post about specific skills and job roles that Grab is hiring for. Google has an interesting problem of too much talent. It’s hard to do anything there because for any idea you propose, three or four teams will run in shouting that they own that, you can’t touch it, and oh by the way, they’re not working on it for a few years. Microsoft calls this “cookie-licking”, and it’s obviously not good, but it’s very common there. I’ve heard from folks at other big names in the area that a lot of companies have this problem. And it’s ironic, because there’s an infinite amount of work to be done, and yet somehow it’s entirely covered by their existing staff, with no room for anyone to do something new. It’s pretty crazy.&lt;/p&gt;
&lt;p name=&quot;06c3&quot; id=&quot;06c3&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;I’ll post again soon.&lt;/p&gt;
</description>
<pubDate>Thu, 25 Jan 2018 14:30:31 +0000</pubDate>
<dc:creator>ot</dc:creator>
<og:title>Google doesn’t necessarily need innovation – Steve Yegge – Medium</og:title>
<og:url>https://medium.com/@steve.yegge/google-doesnt-necessarily-need-innovation-95cea96d0eeb</og:url>
<og:description>I’m getting a lot of calls from reporters, asking me for a hot take on my claim yesterday that Google has lost the ability to innovate.</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/@steve.yegge/google-doesnt-necessarily-need-innovation-95cea96d0eeb?r=1</dc:identifier>
</item>
</channel>
</rss>