<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>In Pursuit of Production Minimalism</title>
<link>https://brandur.org/minimalism</link>
<guid isPermaLink="true" >https://brandur.org/minimalism</guid>
<description>&lt;p&gt;While working at Lockheed during the cold war, Kelly Johnson was reported to have coined &lt;a href=&quot;https://en.wikipedia.org/wiki/KISS_principle&quot;&gt;KISS&lt;/a&gt; (“keep it simple, stupid”); a principle that suggests glibly that systems should be designed to be as simple as possible.&lt;/p&gt;&lt;p&gt;While complexity is never a conscious design goal of any project, it arises inherently as new features are pursued or new components are introduced. KISS encourages designers to actively counteract this force by making simplicity an objective in itself, and thus produce products that are more maintainable, more reliable, and more flexible. In the case of jet fighters, that might mean a plane that can be repaired in the field with few tools and under the stressful conditions of combat.&lt;/p&gt;
&lt;p&gt;During his tenure, Lockheed’s Skunk Works would produce planes like the U-2 and SR-71; so notable for their engineering excellence that they’ve left a legacy that we reflect on even today.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://brandur.org/assets/minimalism/sr71@2x.jpg&quot;&gt;&lt;img data-rjs=&quot;2&quot; src=&quot;https://brandur.org/assets/minimalism/sr71.jpg&quot; class=&quot;overflowing&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
The famous SR-71, one of the flag ships of Lockheed's Skunk Works. Very fast even if not particularly simple.

&lt;p&gt;Many of us pursue work in the engineering field because we’re intellectually curious. Technology is cool, and new technology is even better. We want to be using what everyone’s talking about.&lt;/p&gt;
&lt;p&gt;Our news sources, meetups, conferences, and even conversations bias towards shiny new tech that’s either under active development or being energetically promoted. Older components that sit quietly and do their job well disappear into the background.&lt;/p&gt;
&lt;p&gt;Over time, technologies are added, but are rarely removed. Left unchecked, production stacks that have been around long enough become sprawling patchworks combining everything under the sun. This effect is dangerous:&lt;/p&gt;
&lt;ul readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;More parts means more cognitive complexity. If a system becomes too difficult to understand then the risk of bugs or operational mishaps increases as developers make changes without understanding all the intertwined concerns.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Nothing operates flawlessly once it hits production. Every component in the stack is a candidate for failure, and with sufficient scale, &lt;em&gt;something&lt;/em&gt; will be failing all the time.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;With more technologies engineers will tend to be come jacks of all trades, but masters of none. If a particularly nefarious problem comes along, it may be harder to diagnose and repair because there are few specialists around who are able to dig deeply.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Even knowing this, the instinct to expand our tools is hard to suppress. Oftentimes persuasion is a core competency of our jobs, and we can use that same power to convince ourselves and our peers that it’s critical to get new technologies into our stack &lt;em&gt;right now&lt;/em&gt;. That Go-based HA key/value store will take our uptime and fault resilience to new highs. That real-time event stream will enable an immutable ledger that will become foundational keystone for the entire platform. That sexy new container orchestration system that will take ease of deployment and scaling to new levels. In many cases, a step back and a moment of dispassionate thought would reveal that their use could be withheld until a time when they’re known to be well vetted, and it’s well understood how they’ll fit into the current architecture (and what they’ll replace).&lt;/p&gt;

&lt;p&gt;In his book &lt;em&gt;Nine Chains to the Moon&lt;/em&gt; (published 1938), inventor R. Buckminster Fuller described the idea of &lt;strong&gt;&lt;em&gt;ephemeralization&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Do more and more with less and less until eventually you can do everything with nothing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It suggests improving increasing productive output by continually improving the efficiency of a system even while keeping input the same. I project this onto technology to mean building a stack that scales to more users and more activity while the people and infrastructure supporting it stay fixed. This is accomplished by building systems that are more robust, more automatic, and less prone to problems because the tendency to grow in complexity that’s inherent to them has been understood, harnessed, and reversed.&lt;/p&gt;
&lt;p&gt;For a long time we had a very big and very aspirational goal of ephemeralization at Heroku. The normal app platform that we all know was referred to as “user space” while the internal infrastructure that supported it was called “kernel space”. We want to break up the kernel in the kernel and move it piece by piece to run inside the user space that it supported, in effect rebuilding Heroku so that it itself ran &lt;em&gt;on Heroku&lt;/em&gt;. In the ultimate manifestation of ephemeralization, the kernel would diminish in size until it vanished completely. The specialized components that it contained would be retired, and we’d be left a single perfectly uniform stack.&lt;/p&gt;
&lt;p&gt;Realistic? Probably not. Useful? Yes. Even falling short of an incredibly ambitious goal tends to leave you somewhere good.&lt;/p&gt;

&lt;p&gt;Here are a few examples of minimalism and ephemeralization in practice from Heroku’s history:&lt;/p&gt;
&lt;ul readability=&quot;14&quot;&gt;&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;The core database that tracked all apps, users, releases, configuration, etc. used to be its own special snowflake hosted on a custom-built AWS instance. It was eventually folded into Heroku Postgres, and became just one more node to be managed along with every other customer DB.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;Entire products were retired where possible. For example, the &lt;code&gt;ssl:ip&lt;/code&gt; add-on (providing SSL/TLS terminate for an app), which used to be provisioned and run on its own dedicated servers, was end-of-lifed completely when a better (and cheaper) option for terminating SSL was available through Amazon. With SNI support now widespread, &lt;code&gt;ssl:endpoint&lt;/code&gt; will eventually follow suit.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;All non-ephemeral data was moved out of Redis so that the only data store handling persistent data for internal apps was Postgres. This had the added advantage of stacks being able to tolerate a downed Redis and stay online.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;After a misguided foray into production polyglotism, the last component written in Scala was retired. Fewer programming languages in use meant that the entire system became easier to operate, and by more engineers.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;The component that handled Heroku orgs was originally run as its own microservice. It eventually became obvious that there had been a time when our microservice expansion had been a little overzealous, so to simplify operation, we folded a few services back into the hub.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To recognize the effort that went into tearing down or replacing old technology, we created a ritual where we symbolically fed dead components to a flame called a &lt;a href=&quot;https://brandur.org/fragments/burn-parties&quot;&gt;burn party&lt;/a&gt;. The time and energy spent on some of these projects would in some cases be as great, or even greater, as it would for shipping a new product.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://brandur.org/assets/minimalism/fire@2x.jpg&quot;&gt;&lt;img data-rjs=&quot;2&quot; src=&quot;https://brandur.org/assets/minimalism/fire.jpg&quot; class=&quot;overflowing&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
At Heroku, we'd hold regular &quot;burn parties&quot; to recognize the effort that went into deprecating old products and technology.

&lt;p&gt;Practicing minimalism in production is mostly about recognizing that the problem exists. After achieving that, mitigations are straightforward:&lt;/p&gt;
&lt;ul readability=&quot;17&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Retire old technology.&lt;/em&gt;&lt;/strong&gt; Is something new being introduced? Look for opportunities to retire older technology that’s roughly equivalent. If you’re about to put Kafka in, maybe you can get away with retiring Rabbit or NSQ.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Build common service conventions.&lt;/em&gt;&lt;/strong&gt; Standardize on one database, one language/runtime, one job queue, one web server, one reverse proxy, etc. If not one, then standardize on &lt;em&gt;as few as possible&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Favor simplicity and reduce moving parts.&lt;/em&gt;&lt;/strong&gt; Try to keep the total number of things in a system small so that it stays easy to understand and easy to operate. In some cases this will be a compromise because a technology that’s slight less suited to a job may have to be re-used even if there’s a new one that would technically be a better fit.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Don’t use new technology the day, or even the year, that it’s initially released.&lt;/em&gt;&lt;/strong&gt; Save yourself time and energy by letting others vet it, find bugs, and do the work to stabilize it. Avoid it permanently if it doesn’t pick up a significant community that will help support it well into the future.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Avoid custom technology.&lt;/em&gt;&lt;/strong&gt; Software that you write is software that you have to maintain. Forever. Don’t succumb to NIH when there’s a well supported public solution that fits just as well (or even almost as well).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Use services.&lt;/em&gt;&lt;/strong&gt; Software that you install is software that you have to operate. From the moment it’s activated, someone will be taking regular time out of their schedule to perform maintenance, troubleshoot problems, and install upgrades. Don’t succumb to NHH (not hosted here) when there’s a public service available that will do the job better.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;It’s not that new technology should &lt;em&gt;never&lt;/em&gt; be introduced, but it should be done with rational defensiveness, and with a critical eye in how it’ll fit into an evolving (and hopefully ever-improving) architecture.&lt;/p&gt;

&lt;p&gt;Antoine de Saint Exupéry, a French poet and pioneering aviator, had this to say on the subject:&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;It seems that perfection is reached not when there is nothing left to add, but when there is nothing left to take away.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://brandur.org/assets/minimalism/sea@2x.jpg&quot;&gt;&lt;img data-rjs=&quot;2&quot; src=&quot;https://brandur.org/assets/minimalism/sea.jpg&quot; class=&quot;overflowing&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
Nothing left to add. Nothing left to take away.
&lt;p&gt;Most of us can benefit from architecture that’s a little simpler, a little more conservative, and a little more directed. Only by concertedly building a minimal stack that’s stable and nearly perfectly operable can we maximize our ability to push forward with new products and ideas.&lt;/p&gt;

&lt;div class=&quot;info&quot; readability=&quot;13.66890080429&quot;&gt;
&lt;div class=&quot;publishing-info-bottom&quot; readability=&quot;9.3162393162393&quot;&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;In Pursuit of Production Minimalism&lt;/strong&gt; was published on &lt;strong&gt;May 10, 2017&lt;/strong&gt; from &lt;strong&gt;San Francisco&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Find me on Twitter at &lt;strong&gt;&lt;a href=&quot;https://twitter.com/brandur&quot;&gt;@brandur&lt;/a&gt;&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Did I make a mistake? Please consider &lt;a href=&quot;https://github.com/brandur/sorg/edit/master/content/articles/minimalism.md&quot;&gt;sending a pull request&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;attribution==&quot;&gt;Photographs by &lt;strong&gt;&lt;a href=&quot;https://www.flickr.com/photos/i-am-mclovin/14601998033/&quot;&gt;Ben Harrington&lt;/a&gt;&lt;/strong&gt; (SR-71), &lt;strong&gt;&lt;a href=&quot;https://www.flickr.com/photos/learnscope/5032942270/&quot;&gt;Robyn Jay&lt;/a&gt;&lt;/strong&gt; (embers of a burning fire), and &lt;strong&gt;&lt;a href=&quot;https://www.flickr.com/photos/alamin_bd/22969073683/&quot;&gt;Md. Al Amin&lt;/a&gt;&lt;/strong&gt; (boat and sky). Licensed under Creative Commons BY-NC-ND 2.0, BY-SA 2.0, and CC BY 2.0 respectively.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 02 Aug 2018 20:35:50 +0000</pubDate>
<dc:creator>grey-area</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://brandur.org/minimalism</dc:identifier>
</item>
<item>
<title>The BASIC Engine</title>
<link>https://basicengine.org</link>
<guid isPermaLink="true" >https://basicengine.org</guid>
<description>&lt;div class=&quot;imageblock&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;content&quot;&gt;&lt;img src=&quot;https://basicengine.org/images/rev1.jpg&quot; alt=&quot;250&quot; width=&quot;250&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Figure 1. A BASIC Engine rev1&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;The BASIC Engine is a very low-cost single-board home computer with advanced 2D color graphics and sound capabilities, roughly comparable to late-1980s or early-1990s computers and video game consoles. It can be built at home without special skills or tools and using readily available components for under 10 Euros in parts, or mass-produced for even less.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 02 Aug 2018 19:59:57 +0000</pubDate>
<dc:creator>fcambus</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://basicengine.org/</dc:identifier>
</item>
<item>
<title>Apple becomes the first $1T company</title>
<link>https://www.washingtonpost.com/news/business/wp/2018/08/02/apple-becomes-the-first-1-trillion-company-in-history/</link>
<guid isPermaLink="true" >https://www.washingtonpost.com/news/business/wp/2018/08/02/apple-becomes-the-first-1-trillion-company-in-history/</guid>
<description>&lt;div class=&quot;pb-sig-line inline-content hasnt-headshot has-0-headshots hasnt-bio is-not-column&quot;&gt;&lt;span class=&quot;pb-byline&quot; itemprop=&quot;author&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Person&quot;&gt;&lt;span class=&quot;byline-role&quot;&gt;by&lt;/span&gt; &lt;a href=&quot;https://www.washingtonpost.com/people/thomas-heath/&quot;&gt;&lt;span itemprop=&quot;name&quot;&gt;Thomas Heath&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;pb-timestamp&quot; itemprop=&quot;datePublished&quot; content=&quot;2018-08-02T04:23-500&quot;&gt;August 2 at 4:23 PM&lt;/span&gt; &lt;span class=&quot;pb-tool email&quot;&gt;&lt;a href=&quot;mailto:thomas.heath@washpost.com?subject=Reader%20feedback%20for%20'Apple%20is%20the%20first%20$1%20trillion%20company%20in%20history'&quot;&gt;&lt;span class=&quot;envelope-label&quot;&gt;Email the author&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;p data-elm-loc=&quot;1&quot;&gt;Apple became the first $1 trillion publicly traded company shortly before noon Thursday, briefly crossing the lofty mark in a closely watched ascent that made stock market history.&lt;/p&gt;
&lt;p data-elm-loc=&quot;2&quot;&gt;“Apple’s $1 trillion cap is equal to about 5 percent of the total gross domestic product of the United States in 2018,” said David Kass, professor of finance at the University of Maryland. “That puts this company in perspective.”&lt;/p&gt;
&lt;p data-elm-loc=&quot;3&quot;&gt;Apple closed Thursday above the $1 trillion mark, finishing the day up 2.92 percent at a share price of $207.39. The price gave the stock a market value of $1,001,678,000,000 — or $1.002 trillion rounded up.&lt;/p&gt;
&lt;p data-elm-loc=&quot;4&quot;&gt;Apple first crossed the threshold in Thursday trading following a strong third-quarter report that showed earnings beat expectations and also showed increased revenue from the technology giant’s services and software businesses.&lt;/p&gt;
&lt;p data-elm-loc=&quot;5&quot;&gt;Wall Street loved it. Apple climbed nearly 9 percent following the earnings report.&lt;/p&gt;
&lt;p data-elm-loc=&quot;6&quot;&gt;“The combination of a strong macro environment and an increasingly engaged customer base led to double-digit growth in all regions,” Morgan Stanley said in a note, according to CNBC. “A clean beat on the path to $1 trillion.”&lt;/p&gt;
&lt;p data-elm-loc=&quot;7&quot;&gt;Apple on Wednesday stated in a regulatory filing that as of July 20, 2018, the company had 4,829,926,000 shares, said Howard Silverblatt, a senior index analyst with S&amp;amp;P Dow Jones Indices.&lt;/p&gt;
&lt;p data-elm-loc=&quot;8&quot;&gt;Based on that number, Apple needed a $207.05 price to reach $1 trillion in market value, Silverblatt said. If the company continues to buy back its shares, the $207.05 price will rise. In calculating market cap, S&amp;amp;P uses the most recent number of shares trading multiplied by the stock price.&lt;/p&gt;
&lt;p data-elm-loc=&quot;9&quot;&gt;“These are the actual shares outstanding able to trade, even though some may be held by insiders, interlocks or others,” Silverblatt said.&lt;/p&gt;
&lt;p data-elm-loc=&quot;10&quot;&gt;In other words, the share price means people would pay a lot — $1 trillion — to buy the company.&lt;/p&gt;
&lt;p data-elm-loc=&quot;11&quot;&gt;Why?&lt;/p&gt;
&lt;p data-elm-loc=&quot;12&quot;&gt;Apple is among the most widely held stocks in the world. It makes more money and pays its owners — the shareholders — more than any other public enterprise on the planet.&lt;/p&gt;
&lt;p data-elm-loc=&quot;13&quot;&gt;Because of its size and value, the health of Apple ripples through the U.S. economy and its markets. It pays dividends to tens of millions of investors who own Apple stock directly or indirectly, from pension funds to individuals.&lt;/p&gt;
&lt;p data-elm-loc=&quot;14&quot;&gt;“It’s probably the most popular equity investment anywhere,” Kass said, “and as it reaches new heights, it is taking consumers, investors and others along with it.”&lt;/p&gt;
&lt;p data-elm-loc=&quot;15&quot;&gt;If you invested $10,000 in Apple when it first sold publicly traded stock at its initial public offering price of $22 in December 1980, it would now be worth around $6.3 million, including reinvested dividends.&lt;/p&gt;
&lt;p data-elm-loc=&quot;16&quot;&gt;For comparison, the same $10,000 invested in a Standard &amp;amp; Poor’s 500-stock index fund would now be worth $2 million.&lt;/p&gt;
&lt;p data-elm-loc=&quot;17&quot;&gt;Apple came of age at such a speed that it surpassed a giant like ExxonMobil, which is still a very profitable oil company. If you bought $10,000 of Exxon at the same time you bought Apple, the Exxon shares would now be worth $1,133,839 — a very hefty gain but a fraction of the still-youthful Apple.&lt;/p&gt;
&lt;p data-elm-loc=&quot;18&quot;&gt;“What’s remarkable about Apple is not so much its stock price as the amount of money that it makes,” said Chris Brightman, chief investment officer of Research Affiliates, an institutional investor with more than $200 billion under management. “Some companies are priced by the market on hopes and dreams of future profits. Amazon is the poster child there. You have other companies that don’t make any money, like Tesla. Apple is not at all in that category.”&lt;/p&gt;
&lt;p data-elm-loc=&quot;19&quot;&gt;Ivan Feinseth, chief investment officer at Tigress Financial Partners, sums up its success this way: “One word: iPhone.”&lt;/p&gt;
&lt;p data-elm-loc=&quot;20&quot;&gt;“They revolutionized communications,” he said.&lt;/p&gt;
&lt;p data-elm-loc=&quot;21&quot;&gt;The iPhone’s launch on June 29, 2007, turned the Cupertino, Calif.-based Apple into a financial juggernaut.&lt;/p&gt;
&lt;p data-elm-loc=&quot;22&quot;&gt;That year saw Apple’s market value climb from $72 billion to $173 billion. By 2010, its value was nearly $300 billion. It breached $500 billion in 2012, then $600 billion in 2016.&lt;/p&gt;
&lt;p data-elm-loc=&quot;23&quot;&gt;As the stock market has climbed up and up this year, technology companies have propelled the gains. Amazon.com, Google parent Alphabet and Microsoft have all watched their fortunes rise — and investors have watched closely to see which would hit $1 trillion first. (Amazon founder Jeffrey P. Bezos owns The Washington Post.)&lt;/p&gt;
&lt;p data-elm-loc=&quot;24&quot;&gt;“Someone’s got to cross that [$1 trillion] line first,” financial historian Niall Ferguson said. “I guess you wouldn’t have put your money on Apple being the winner prior to the iPhone.”&lt;/p&gt;

</description>
<pubDate>Thu, 02 Aug 2018 15:53:06 +0000</pubDate>
<dc:creator>fmihaila</dc:creator>
<og:type>article</og:type>
<og:url>https://www.washingtonpost.com/business/economy/apple-is-the-first-1-trillion-company-in-history/2018/08/02/ea3e7a02-9599-11e8-a679-b09212fb69c2_story.html</og:url>
<og:image>https://www.washingtonpost.com/resizer/TDxhWdiwm06MfsDRpxDPdsnjEsQ=/1484x0/arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/KCR7IPUWNQI6RAIML6TQLET5KQ.jpg</og:image>
<og:title>Apple is the first $1 trillion company in history</og:title>
<og:description>The consumer tech giant and maker of the iPhone rides a better-than-expected quarterly earnings report into the history books.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.washingtonpost.com/business/economy/apple-is-the-first-1-trillion-company-in-history/2018/08/02/ea3e7a02-9599-11e8-a679-b09212fb69c2_story.html</dc:identifier>
</item>
<item>
<title>Announcing Rust 1.28</title>
<link>https://blog.rust-lang.org/2018/08/02/Rust-1.28.html</link>
<guid isPermaLink="true" >https://blog.rust-lang.org/2018/08/02/Rust-1.28.html</guid>
<description>&lt;p&gt;The Rust team is happy to announce a new version of Rust, 1.28.0. Rust is a systems programming language focused on safety, speed, and concurrency.&lt;/p&gt;&lt;p&gt;If you have a previous version of Rust installed via rustup, getting Rust 1.28.0 is as easy as:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rustup update stable
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you don’t have it already, you can &lt;a href=&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code class=&quot;highlighter-rouge&quot;&gt;rustup&lt;/code&gt;&lt;/a&gt; from the appropriate page on our website, and check out the &lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1280-2018-08-02&quot;&gt;detailed release notes for 1.28.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;h2 id=&quot;whats-in-1280-stable&quot;&gt;What’s in 1.28.0 stable&lt;/h2&gt;
&lt;h3 id=&quot;global-allocators&quot;&gt;Global Allocators&lt;/h3&gt;
&lt;p&gt;Allocators are the way that programs in Rust obtain memory from the system at runtime. Previously, Rust did not allow changing the way memory is obtained, which prevented some use cases. On some platforms, this meant using jemalloc, on others, the system allocator, but there was no way for users to control this key component. With 1.28.0, the &lt;code class=&quot;highlighter-rouge&quot;&gt;#[global_allocator]&lt;/code&gt; attribute is now stable, which allows Rust programs to set their allocator to the system allocator, as well as define new allocators by implementing the &lt;a href=&quot;https://doc.rust-lang.org/stable/std/alloc/trait.GlobalAlloc.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GlobalAlloc&lt;/code&gt;&lt;/a&gt; trait.&lt;/p&gt;
&lt;p&gt;The default allocator for Rust programs on some platforms is jemalloc. The standard library now provides a handle to the system allocator, which can be used to switch to the system allocator when desired, by declaring a static and marking it with the &lt;code class=&quot;highlighter-rouge&quot;&gt;#[global_allocator]&lt;/code&gt; attribute.&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[global_allocator]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLOBAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// This will allocate memory using the system allocator.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, sometimes you want to define a custom allocator for a given application domain. This is also relatively easy to do by implementing the &lt;code class=&quot;highlighter-rouge&quot;&gt;GlobalAlloc&lt;/code&gt; trait. You can read more about how to do this in the &lt;a href=&quot;https://doc.rust-lang.org/stable/std/alloc/trait.GlobalAlloc.html&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;improved-error-message-for-formatting&quot;&gt;Improved error message for formatting&lt;/h3&gt;
&lt;p&gt;Work on diagnostics continues, this time with an emphasis on formatting:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;format!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{_foo}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6u&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Previously, the error message emitted here was relatively poor:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;error: invalid format string: expected `'}'`, found `'_'`
  |
2 |     format!(&quot;{_foo}&quot;, _foo = 6usize);
  |             ^^^^^^^^
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, we emit a diagnostic that tells you the specific reason the format string is invalid:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;error: invalid format string: invalid argument name `_foo`
  |
2 |     let _ = format!(&quot;{_foo}&quot;, _foo = 6usize);
  |                       ^^^^ invalid argument name in format string
  |
  = note: argument names cannot start with an underscore
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See the &lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1280-2018-08-02&quot;&gt;detailed release notes&lt;/a&gt; for more.&lt;/p&gt;
&lt;h3 id=&quot;library-stabilizations&quot;&gt;Library stabilizations&lt;/h3&gt;
&lt;p&gt;We’ve already mentioned the stabilization of the &lt;code class=&quot;highlighter-rouge&quot;&gt;GlobalAlloc&lt;/code&gt; trait, but another important stabilization is the &lt;a href=&quot;https://doc.rust-lang.org/stable/std/num/index.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NonZero&lt;/code&gt;&lt;/a&gt; number types. These are wrappers around the standard unsigned integer types: &lt;code class=&quot;highlighter-rouge&quot;&gt;NonZeroU8&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NonZeroU16&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NonZeroU32&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NonZeroU64&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NonZeroU128&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;NonZeroUsize&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This allows for size optimization, for example, &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&amp;lt;u8&amp;gt;&lt;/code&gt; is two bytes large, but &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&amp;lt;NonZeroU8&amp;gt;&lt;/code&gt; is just one byte large. Note that this optimization remains even when &lt;code class=&quot;highlighter-rouge&quot;&gt;NonZeroU8&lt;/code&gt; is wrapped inside another struct; the example below illustrates that &lt;code class=&quot;highlighter-rouge&quot;&gt;Door&lt;/code&gt; is still 1 byte large despite being placed inside an &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&lt;/code&gt;. This optimization applies to user-defined enums as well: &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&lt;/code&gt; is not special.&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NonZeroU8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NonZeroU8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Door&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;assert_eq!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;size_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Door&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;assert_eq!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;size_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Door&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A number of other libraries have also been stabilized: you can see the more &lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1280-2018-08-02&quot;&gt;detailed release notes&lt;/a&gt; for full details.&lt;/p&gt;
&lt;h3 id=&quot;cargo-features&quot;&gt;Cargo features&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-lang/cargo/pull/5584/&quot;&gt;Cargo will now no longer allow you to publish crates with build scripts that modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; directory.&lt;/a&gt; The &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; directory in a crate should be considered to be immutable.&lt;/p&gt;
&lt;h2 id=&quot;contributors-to-1280&quot;&gt;Contributors to 1.28.0&lt;/h2&gt;
&lt;p&gt;Many people came together to create Rust 1.28. We couldn’t have done it without all of you. &lt;a href=&quot;https://thanks.rust-lang.org/rust/1.28.0&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 02 Aug 2018 15:47:07 +0000</pubDate>
<dc:creator>steveklabnik</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.rust-lang.org/2018/08/02/Rust-1.28.html</dc:identifier>
</item>
<item>
<title>Show HN: Standup tool that works like Snapchat stories for remote teams</title>
<link>https://standups.io/index.html</link>
<guid isPermaLink="true" >https://standups.io/index.html</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://standups.io/index.html&quot;&gt;https://standups.io/index.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=17672247&quot;&gt;https://news.ycombinator.com/item?id=17672247&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 226&lt;/p&gt;&lt;p&gt;# Comments: 80&lt;/p&gt;</description>
<pubDate>Thu, 02 Aug 2018 15:37:21 +0000</pubDate>
<dc:creator>jpincheira</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://standups.io/index.html</dc:identifier>
</item>
<item>
<title>Building a Kickass Portfolio</title>
<link>https://zen-of-programming.com/kickass-portfolio</link>
<guid isPermaLink="true" >https://zen-of-programming.com/kickass-portfolio</guid>
<description>&lt;p&gt;According to GitHub, I have had a portfolio site since September 1st, 2016. And, according to Google Analytics, I got less than 300 views on the two iterations of my portfolio from September of 2016 through October of 2017. In October 2017, I did a complete rewrite of &lt;a href=&quot;https://www.alispit.tel&quot;&gt;my site&lt;/a&gt;, and the results were pretty dramatic. I got 1,861 views the first month, and I've averaged around a thousand hits on a month since then. Of course, correlation is not causation, but I do think the redesign definitely had a positive impact. It's not exactly Facebook, but for a portfolio site that doesn't provide the viewer with anything but information about me, I think these numbers are pretty okay!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zen-of-programming.com/portfolio/analytics.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In this post, I am going to go through an in-depth look at what has worked for me, what hasn't, my tips for building an awesome portfolio, and other people's portfolios that I love.&lt;/p&gt;
&lt;h2&gt;What Didn't Work&lt;/h2&gt;
&lt;p&gt;Before I get to my current portfolio that I really love, I want to talk about my first two sites.&lt;/p&gt;
&lt;h3&gt;My First Portfolio&lt;/h3&gt;
&lt;p&gt;The first one was a Jekyll site which used SASS and Pug. I deployed it &lt;a href=&quot;http://average-cause.surge.sh/&quot;&gt;here&lt;/a&gt; for nostalgia's sake -- check out the projects -- they're all from college, and most are in C++!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zen-of-programming.com/portfolio/og-portfolio.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This setup was unnecessarily complex for the actual content of the website. I used Jekyll, MaterializeCSS, SASS, and Pug for such a simple page -- I think the Gulp setup was longer than the actual CSS needed! I was just transitioning on to writing frontend code at any capacity, so this was really a learning opportunity for me to use SASS and Gulp. I had no need for Jekyll either -- I only had a few projects listed and only one page.&lt;/p&gt;
&lt;p&gt;Also, there are a bunch of 404's showing up in the console for resources that were unfound. If I was a developer looking at the site, I would definitely be critical of that.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zen-of-programming.com/portfolio/404s.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The screenshots for my projects are not great. They are all either of code or cropped in an un-optimal way.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zen-of-programming.com/portfolio/project-list.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The fonts are also too small, it is difficult to read the text. My social icons are not exactly the most prominent, which means that they probably didn't have too high of an engagement rate.&lt;/p&gt;
&lt;p&gt;There were some things that I did well, though. I really like the highlighted words in the bio -- it draws the user to look at those keywords, even if they don't read the whole bio. I also appreciate that the site is responsive, so users could view the site on different sized screens. Currently, around 1/3 of my traffic comes from mobile sources, so its important to remember those users!&lt;/p&gt;
&lt;h3&gt;My Second Portfolio&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://zen-of-programming.com/portfolio/bubble-portfolio.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The second iteration was an HTML and CSS site with moving polka dots in the background. You can check it out &lt;a href=&quot;http://third-match.surge.sh/&quot;&gt;here&lt;/a&gt;. I will admit, that I still have a soft spot for this portfolio.&lt;/p&gt;
&lt;p&gt;I really like the moving bubbles, and how they change with user interaction. I also enjoy the minimalism of the site. I think the quick bio on the homepage is effective and expressed my interests well.&lt;/p&gt;
&lt;p&gt;Again, the fonts are somewhat small, and having to go to a new HTML page to view any information about me is probably not the best. Also, having my talks and my code projects on the same page leads to unbalance.&lt;/p&gt;
&lt;p&gt;Overall, though you can see a lot of the themes of this portfolio in my current one.&lt;/p&gt;
&lt;h2&gt;What Worked&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://zen-of-programming.com/portfolio/current-portfolio.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In October of last year, I started from scratch and built a &lt;a href=&quot;https://www.alispit.tel&quot;&gt;portfolio&lt;/a&gt; that was a little bit out of the box. &lt;strong&gt;Your portfolio is one of the only sites that you will build that is a complete creative expression of yourself with no constraints.&lt;/strong&gt; So, I went all in, interactivity, animations, you name it, it has it.&lt;/p&gt;
&lt;p&gt;If you click anywhere on the homepage, a random shape appears. If you hover over the letters, they animate. If you hover over my picture on the bio page, it spins.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zen-of-programming.com/portfolio/random-shapes.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I used Vue for this portfolio, so it seamlessly transitions from page to page. I also increased the font sizes, so readers could gather information more quickly and easily. My contact page offers large buttons to follow me elsewhere on the internet.&lt;/p&gt;
&lt;p&gt;The original version of this design was built in HTML, CSS, and a very few lines of JavaScript. As far as my technology needs go, this was totally fine. I wanted to move to Vue for my own maintainability needs -- the reconfigured setup makes adding new projects a lot easier. I also like the smooth routing that Vue Router offers, instead of navigating to an actual new page.&lt;/p&gt;
&lt;p&gt;This design grabs people's attention, and they stay on the site in order to interact with it. Also, people reach out to me about my site a bunch, which, if I was looking for a job, would be awesome!&lt;/p&gt;
&lt;h3&gt;What I could still do better&lt;/h3&gt;
&lt;p&gt;As far as effectiveness for converting people to my other social media, I could have links to my sites on each page rather than just the contact page. I also probably need to cull through my projects and choose a few to feature, rather than have 26 personal projects listed! I also don't have screenshots of my projects -- this is intentional, but I could probably get more traffic to them if I put pictures on them. I didn't like the different color palettes that adding in screenshots of my program would create. Also, I don't have many projects that I find super impressive in themselves. For the most part, they are pretty small, and I create them to learn something. I could further optimize my site, but for now, I really like where its at.&lt;/p&gt;
&lt;h2&gt;My tips for building a kickass portfolio&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Make a portfolio that is a true expression of yourself. Programming is in a lot of ways a creative field, so use your creativity!&lt;/li&gt;
&lt;li&gt;Make the site interactive, so people want to stay on your site, and they remember it.&lt;/li&gt;
&lt;li&gt;Buy a domain name -- I moved from aspittel.github.io to alispit.tel. I really like the play on my name, and you can get a lot of domains for pretty cheap. I use NameCheap, and it's totally worth the $8.00 a year for the domain.&lt;/li&gt;
&lt;li&gt;Make sure you don't have console errors -- a lot of technical employers look for this, so make sure that your site is bug-free!&lt;/li&gt;
&lt;li&gt;Don't use a technology just for the sake of it. If you have a super minimalistic personal website, don't use a heavy-duty framework or library just for the sake of using it.&lt;/li&gt;
&lt;li&gt;Make sure your website works on mobile phones, and I would encourage making it work for users that use a split-screen setup.&lt;/li&gt;
&lt;li&gt;I would steer away from using a template found online -- to me, it's pretty apparent when these are used. I understand using them for people who aren't web developers, but if you are a web developer show off your skills!&lt;/li&gt;
&lt;li&gt;Use it to market yourself -- if you want to show off specific skills to employers, make sure those skills are featured on your site. I want people to visit &lt;a href=&quot;https://zen-of-programming.com/&quot;&gt;my blog&lt;/a&gt;, so I have it featured on my home page. I also want to do more speaking, so I have a whole page dedicated to my talks. I no longer want to write C++ code professionally, so I took those projects off of my site.&lt;/li&gt;
&lt;li&gt;Make sure your links aren't broken. I have totally been guilty of this at certain points, but it doesn't look great, and then your viewers can't see that destination!&lt;/li&gt;
&lt;li&gt;Update your portfolio -- I'm guilty of not doing this that often too, but I try at least every few months to add new projects and talks to my site.&lt;/li&gt;
&lt;li&gt;Use a critical eye, and be intentional about the design. I use Sketch to draft my sites before moving to code.&lt;/li&gt;
&lt;li&gt;Think about page speed -- I run lighthouse testing on all of my sites to make sure they are performant.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;A few of my favorite portfolios&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://timobecker.com/&quot;&gt;Timo Becker&lt;/a&gt; - You connect the dots and create different illustrations -- just play with it, it's awesome.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://benhalpern.com/&quot;&gt;Ben Halpern&lt;/a&gt; - this site is so memorable and fun.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://julia.im/&quot;&gt;Julia Khusainova&lt;/a&gt; - This site is really minimalistic, but gets the point across.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nik.org/&quot;&gt;Nik Papic&lt;/a&gt; - another simple but pretty one.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rleonardi.com/interactive-resume/&quot;&gt;Robby Leonardi&lt;/a&gt; - a game resume!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://flexdinesh.github.io/&quot;&gt;Dinesh Pandiyan&lt;/a&gt; - the color change is a really cool feature, and I like the minimalist design.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Your site&lt;/h2&gt;
&lt;p&gt;I love looking at other people's portfolios and offering advice on them. I comment on portfolio feedback threads all the time when I see them. If you have one you're looking for feedback on, &lt;a href=&quot;https://twitter.com/aspittel&quot;&gt;Tweet&lt;/a&gt; me a link to your site, and I will look over it and send some feedback! Or, if you just have an awesome one, send it to me too! I would love to add it to my list of favorites. Also, if you liked this article &lt;a href=&quot;https://tinyletter.com/ali_writes_code&quot;&gt;subscribe&lt;/a&gt; to my weekly newsletter that contains my favorite links from the week!&lt;/p&gt;
</description>
<pubDate>Thu, 02 Aug 2018 14:12:03 +0000</pubDate>
<dc:creator>aspit</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://zen-of-programming.com/kickass-portfolio/</dc:identifier>
</item>
<item>
<title>A Brief History of the BEAM Compiler</title>
<link>http://blog.erlang.org/beam-compiler-history/</link>
<guid isPermaLink="true" >http://blog.erlang.org/beam-compiler-history/</guid>
<description>&lt;p&gt;June 18, 2018 · by Björn Gustavsson .&lt;/p&gt;&lt;div readability=&quot;353.90848032139&quot;&gt;
&lt;p&gt;This blog post is a brief history lesson about the Erlang compiler for the BEAM machine. To provide some context, there will first be a quick look at the abstract machines for Erlang.&lt;/p&gt;
&lt;h2 id=&quot;a-brief-overview-of-the-early-erlang-implementations&quot;&gt;A brief overview of the early Erlang implementations&lt;/h2&gt;
&lt;h3 id=&quot;the-prolog-interpreter&quot;&gt;The Prolog interpreter&lt;/h3&gt;
&lt;p&gt;The first version of Erlang was implemented in Prolog in 1986. That version of Erlang was used to find out which features of the languages were useful and which were not. New languages features could be added or deleted in a matter of hours or days.&lt;/p&gt;
&lt;h3 id=&quot;jam-joes-abstract-machine&quot;&gt;JAM (Joe’s Abstract Machine)&lt;/h3&gt;
&lt;p&gt;It soon became clear that Erlang needed to be at least 40 times faster to be useful in real projects.&lt;/p&gt;
&lt;p&gt;In 1989 JAM (Joe’s Abstract Machine) was first implemented. &lt;a href=&quot;http://www.erlang-factory.com/conference/ErlangUserConference2013/speakers/MikeWilliams&quot;&gt;Mike Williams&lt;/a&gt; wrote the runtime system in C, &lt;a href=&quot;https://github.com/joearms&quot;&gt;Joe Armstrong&lt;/a&gt; wrote the compiler, and &lt;a href=&quot;https://github.com/rvirding&quot;&gt;Robert Virding&lt;/a&gt; wrote the libraries.&lt;/p&gt;
&lt;p&gt;JAM turned out be 70 times faster than the Prolog interpreter. Success?&lt;/p&gt;
&lt;h3 id=&quot;team-turbo-erlang-abstract-machine&quot;&gt;TEAM (Turbo Erlang Abstract Machine)&lt;/h3&gt;
&lt;p&gt;It soon became clear that Erlang still needed to be faster to be useful in real projects.&lt;/p&gt;
&lt;p&gt;Therefore Bogumil (“Bogdan”) Hausman created TEAM (Turbo Erlang Abstract Machine). It compiled the Erlang code to C code, which was then compiled to native code using GCC.&lt;/p&gt;
&lt;p&gt;It was significantly faster than JAM for small projects. Unfortunately, compilation was very slow, and the code size of the compiled code was too big to make it useful for large projects.&lt;/p&gt;
&lt;h3 id=&quot;beam-bogdans-erlang-abstract-machine&quot;&gt;BEAM (Bogdan’s Erlang Abstract Machine)&lt;/h3&gt;
&lt;p&gt;Bogumil Hausman next machine was called BEAM (Bogdan’s Erlang Abstract Machine). It was a hybrid machine that could execute both native code and &lt;a href=&quot;https://en.wikipedia.org/wiki/Threaded_code&quot;&gt;threaded code&lt;/a&gt; with an &lt;a href=&quot;https://en.wikipedia.org/wiki/Interpreter_(computing)&quot;&gt;interpreter&lt;/a&gt;. That allowed customers to compile their time-critial modules to native code and all other modules to threaded BEAM code. The threaded BEAM in itself was faster than JAM code.&lt;/p&gt;
&lt;p&gt;Bogdan’s original compiler for BEAM shared the compiler front end with JAM. Essentially, the front end at that time did the same thing as the front end in the current compiler as described in &lt;a href=&quot;http://blog.erlang.org/compiler-lost-in-translation&quot;&gt;Lost in Translation (Exploring the Compiler’s Front End)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I don’t have the source code for Bodgan’s original compiler, but as far as I can determine it had three compiler passes that translated the abstract format to threaded BEAM code.&lt;/p&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;beam_compile&lt;/code&gt; - Translated the abstract format to BEAM instructions.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;beam_optimize&lt;/code&gt; - Optimized the BEAM instructions. This pass was mandatory, since it did some necessary transformations of the BEAM instructions.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;beam_asm&lt;/code&gt; - Converted the symbolic BEAM assembly format to a binary BEAM module.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;vee-virdings-erlang-engine&quot;&gt;VEE (Virding’s Erlang Engine)&lt;/h3&gt;
&lt;p&gt;Here we must mention VEE (Virding’s Erlang Engine) for reasons that will soon become clear.&lt;/p&gt;
&lt;p&gt;VEE was an experimental implementation with a different memory model compared to JAM and BEAM. Instead of JAM’s and BEAM’s separate heaps for each process, VEE used a single shared heap with a real-time garbage collector. That made message passing blindlingly fast compared to JAM and BEAM.&lt;/p&gt;
&lt;p&gt;Overall, though, there was no speed gain compared to JAM. The reason was probably that the single shared heap decreased the cache hit rate.&lt;/p&gt;
&lt;h2 id=&quot;the-maturation-of-beam&quot;&gt;The maturation of BEAM&lt;/h2&gt;
&lt;p&gt;The OTP group and Erlang/OTP was created to industrialize Erlang and make it suitable for huge real-world projects. The first release, OTP R1B, was released in 1996.&lt;/p&gt;
&lt;p&gt;This is the point where the history lesson may become a little bit more subjective.&lt;/p&gt;
&lt;p&gt;I joined the Erlang/OTP team at the end of 1996. My first small code contributions to Erlang/OTP were included in OTP R1D.&lt;/p&gt;
&lt;p&gt;I worked in the ERTS (Erlang Run-Time System) team, which at that time was lead by Kenneth Lundin. Initially I worked with the Erlang runtime system for Microsoft Windows. After some time (maybe a year or so), Kenneth asked me to help stabilizing and improving BEAM. Gradually BEAM become my main responsibility, and when Bogdan left Ericsson, I become the main developer responsible for the BEAM &lt;a href=&quot;https://en.wikipedia.org/wiki/Interpreter_(computing)&quot;&gt;interpreter&lt;/a&gt; and compiler.&lt;/p&gt;
&lt;p&gt;This blog post desperately tries to cover the history of the BEAM &lt;em&gt;compiler&lt;/em&gt;, but I think that some more historical context is needed before we can approach the compiler.&lt;/p&gt;
&lt;p&gt;The overall goal of the work on BEAM from OTP R1 up to OTP R5 was to make it stable enough and fast enough to be useful in real projects.&lt;/p&gt;
&lt;p&gt;There were two major obstacles to reaching that goal:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;BEAM/C, that is, native code via C code.&lt;/li&gt;
&lt;li&gt;The huge number of ever-changing BEAM instructions.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;beamc-must-die&quot;&gt;BEAM/C must die!&lt;/h3&gt;
&lt;p&gt;It soon became obvious that BEAM/C, the compiler passes that compiled Erlang code to C code, had to die. At the time that I started working on BEAM, there were three distinct flavors of BEAM/C: one for GCC on Sparc, one for GCC on non-sparc CPUs (such as Intel x86), and one for other C compilers that did not support GCC’s extension for taking the address of a label. Bugs not only showed up in the native code, but the mere existence of BEAM/C complicated and caused bugs in the threaded BEAM interpreter.&lt;/p&gt;
&lt;p&gt;Unfortunately, early in my career of improving BEAM, I made some optimizations of the size of the C code generated by BEAM/C. That came back to bite me later when I suggested that we should remove BEAM/C. The size improvements made it possible to fit more Erlang code compiled to native code into the system, and the native code was faster than threaded BEAM code. Our customer at the time (&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.140.9122&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;the AXD 301 project&lt;/a&gt;) needed the extra speed improvements that BEAM/C gave them and did not allow us to remove BEAM/C unless we could improve the performance of threaded BEAM code to similar or better than BEAM/C performance.&lt;/p&gt;
&lt;h3 id=&quot;the-ever-changing-beam-instructions&quot;&gt;The ever-changing BEAM instructions&lt;/h3&gt;
&lt;p&gt;At that time, the BEAM interpreter had over &lt;a href=&quot;http://www.cs-lab.org/historical_beam_instruction_set.html&quot;&gt;300 instructions&lt;/a&gt;. While JAM had a very simple loader that essentially only loaded the JAM files into memory, the loader for BEAM had to translate every instruction from the byte format in the BEAM files to the threaded code format in memory. The BEAM had hand-written code for the loading of every single instruction.&lt;/p&gt;
&lt;p&gt;To make it worse, the instruction set was constantly evolving. Bug fixes and performance improvements needed new instructions, and those instructions had to be implemented in the compiler, threaded code interpreter (the &lt;code class=&quot;highlighter-rouge&quot;&gt;process_main()&lt;/code&gt; function in &lt;code class=&quot;highlighter-rouge&quot;&gt;beam_emu.c&lt;/code&gt;), and the loader. In every minor and major release of Erlang/OTP, the users of BEAM had to recompile all of their Erlang code because the instruction set had changed.&lt;/p&gt;
&lt;p&gt;There must be a better way, I thought. I started to write a simple Perl script to a least automate the mapping from instruction name to instruction number in the compiler, interpreter, and loader. &lt;a href=&quot;https://github.com/tonyrog&quot;&gt;Tony Rogvall&lt;/a&gt; suggested that I could be more ambitious and generate most of the code for for the loader using the Perl script. He also suggested that operands for many instructions could be packed into a single word. That would reduce load code size and also improve the cache hit rate, improving execution speed.&lt;/p&gt;
&lt;p&gt;So I started writing the first version of the &lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-21.0-rc1/erts/emulator/internal_doc/beam_makeops.md&quot;&gt;beam_makeops script&lt;/a&gt; and rewriting the loader. I prefer to work incrementally, making minor changes to a code base that is always working. But I could not rewrite the loader incrementally, so I hacked away frantically for two or three days until I had a bare bones version of the new loader working. I could then relax a little and somewhat more slowly add more features to &lt;code class=&quot;highlighter-rouge&quot;&gt;beam_makeops&lt;/code&gt; and the loader.&lt;/p&gt;
&lt;p&gt;The new loader took over some tasks formerly done by the compiler.&lt;/p&gt;
&lt;p&gt;For example, the BEAM machine has several specialized &lt;code class=&quot;highlighter-rouge&quot;&gt;move&lt;/code&gt; instructions. There is one instruction for moving something into an X register, another for moving an atom into an X register, and so on. Before the new loader, the compiler knew about all those variants of &lt;code class=&quot;highlighter-rouge&quot;&gt;move&lt;/code&gt; instructions and selected the appropriate one. With the new loader, there is only one &lt;code class=&quot;highlighter-rouge&quot;&gt;move&lt;/code&gt; instruction that the compiler needs to care about, and the loader will select the appropriate specialized &lt;code class=&quot;highlighter-rouge&quot;&gt;move&lt;/code&gt; instruction to use at load time.&lt;/p&gt;
&lt;p&gt;Another minor optimization done by the compiler was combining of common instructions sequences. For example, a &lt;code class=&quot;highlighter-rouge&quot;&gt;move&lt;/code&gt; instruction followed by a &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; instruction would be combined to a &lt;code class=&quot;highlighter-rouge&quot;&gt;move_call&lt;/code&gt; instruction. That optimization was also moved to the loader.&lt;/p&gt;
&lt;p&gt;All those capabilities made it possible to significantly simplify and reduce the number of instructions known to the compiler. More importantly, that made it possible to keep the instruction set stable (while still allowing minor optimizations and performance tuning by tweaking only the loader and interpreter), avoiding the need to recompile all Erlang code every time there was a new release.&lt;/p&gt;
&lt;p&gt;If my memory doesn’t fail me, the new loader was introduced in OTP R4.&lt;/p&gt;
&lt;h2 id=&quot;otp-r5b-the-new-beam&quot;&gt;OTP R5B: The “new” BEAM&lt;/h2&gt;
&lt;p&gt;Moving forward to OTP R5.&lt;/p&gt;
&lt;p&gt;OTP R5 was the last release that supported JAM.&lt;/p&gt;
&lt;p&gt;OTP R5 can also be said to be first release that featured the “new” BEAM. In that release, the &lt;a href=&quot;http://www.erlang.se/~bjorn/beam_file_format.html&quot;&gt;modern BEAM file format&lt;/a&gt; was introduced. The same file format is used today. At that time, there were 78 BEAM instructions; in OTP 20, there are 159 instructions (actually, 129 active instructions and 30 obsoleted instructions no longer used). While new instructions have been introduced when needed and obsolete instructions have been removed, it has always been possible to load BEAM files compiled from at least two major releases back.&lt;/p&gt;
&lt;p&gt;Execution of threaded BEAM had become fast enough, so that BEAM/C could be dropped (already in R4, I think). But strangely enough, the customers still wanted more speed.&lt;/p&gt;
&lt;p&gt;The BEAM compiler in R5 was still Bogdan’s original compiler. While it did more optimizations than the JAM ever did, we knew that more optimizations were possible.&lt;/p&gt;
&lt;h2 id=&quot;r6b-enter-kernel-erlang&quot;&gt;R6B: Enter Kernel Erlang&lt;/h2&gt;
&lt;p&gt;Meanwhile, on the top floor Robert Virding was busy writing a new compiler for his VEE machine. In that new compiler, Robert introduced a new intermediate format that he called &lt;em&gt;Kernel Erlang&lt;/em&gt;. The idea was that more optimizations could be applied to the code in that format before generating code for the actual machine.&lt;/p&gt;
&lt;p&gt;At that time, there was no actual interpreter that could execute the code emitted by his new compiler (he had not updated the VEE machine yet). The machine he had in mind was a register machine. It was similar to BEAM, except that it did stack trimming.&lt;/p&gt;
&lt;p&gt;We wanted the better performance that we could get from Robert’s compiler, but the question was: should we implement a new interpreter (or adapt BEAM) to execute the code from Robert’s compiler, or should we adapt Robert’s compiler to generate BEAM code?&lt;/p&gt;
&lt;p&gt;Because we now for the first time had a stable implementation of BEAM, we decided not to rock the boat again; thus, we decided that I should adapt the code generator part of Robert’s compiler for BEAM.&lt;/p&gt;
&lt;p&gt;For the most part, I used Robert’s name for instructions. For example, the instruction to load a term into a register was called &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; in the original BEAM, while Robert’s compiler used the &lt;code class=&quot;highlighter-rouge&quot;&gt;move&lt;/code&gt;. The more major changes was in the handling of the stack. Robert’s compiler had stack trimming, which I had to remove and rewrite to handle BEAM’s fixed stack frame. (I reintroduced a limited form of stack trimming later.)&lt;/p&gt;
&lt;p&gt;Since JAM was not supported in OTP R6, all customers that had previously used JAM had to migrate to BEAM. To minimize the risk of the migration as much as possible, one of our customers requested that we made the battle-tested original BEAM compiler available as an option in OTP R6.&lt;/p&gt;
&lt;p&gt;Therefore, we added options to choose which version of the compiler to use. To use the old compiler, one would write:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;$ erlc +v1 some_module.erl
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Default was Robert’s new compiler, which was called &lt;code class=&quot;highlighter-rouge&quot;&gt;v2&lt;/code&gt;. There was also an undocumented, unofficial compiler version called &lt;code class=&quot;highlighter-rouge&quot;&gt;v3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All compilers shared the front end and the &lt;code class=&quot;highlighter-rouge&quot;&gt;beam_asm&lt;/code&gt; pass that created the final BEAM module.&lt;/p&gt;
&lt;h3 id=&quot;the-v1_compiler&quot;&gt;The v1_compiler&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;v1&lt;/code&gt; compiler had the following passes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;v1_adapt&lt;/li&gt;
&lt;li&gt;v1_compile&lt;/li&gt;
&lt;li&gt;v1_optimize&lt;/li&gt;
&lt;li&gt;v1_cleanup&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;v1_compile&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;v1_optimize&lt;/code&gt; passes were essentially the &lt;code class=&quot;highlighter-rouge&quot;&gt;beam_compile&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;beam_optimize&lt;/code&gt; passes from Bogdan’s compiler.&lt;/p&gt;
&lt;p&gt;There had been some changes to the front end since R5, so the &lt;code class=&quot;highlighter-rouge&quot;&gt;v1_adapt&lt;/code&gt; pass was there to hide those changes for the &lt;code class=&quot;highlighter-rouge&quot;&gt;v1_compile&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;v1_optimize&lt;/code&gt; passes. The &lt;code class=&quot;highlighter-rouge&quot;&gt;v1_cleanup&lt;/code&gt; pass was an additional minor optimization pass; I think it was present in OTP R5 as well.&lt;/p&gt;
&lt;h3 id=&quot;the-v2_compiler&quot;&gt;The v2_compiler&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;v2&lt;/code&gt; compiler was Robert’s new compiler. It had the following passes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;v2_kernel&lt;/li&gt;
&lt;li&gt;v2_kernopt&lt;/li&gt;
&lt;li&gt;v2_match&lt;/li&gt;
&lt;li&gt;v2_life&lt;/li&gt;
&lt;li&gt;v2_codegen&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;v2_kernel&lt;/code&gt; pass translated the abstract format to Kernel Erlang.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v2_kernopt&lt;/code&gt; did very basic optimizations of the Kernel Erlang code, essentially only &lt;a href=&quot;https://en.wikipedia.org/wiki/Constant_folding&quot;&gt;constant propagation and constant folding&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v2_match&lt;/code&gt; did pattern matching compilation. JAM would match clauses in function heads or &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; expressions sequentially. The old BEAM compiler would do only a little bit better in that it could match multiple integers or atoms in a single instruction. Robert’s compiler was the first Erlang compiler to properly compile pattern matching using the algorithm described in &lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/the-implementation-of-functional-programming-languages/&quot;&gt;The Implementation of Functional Programming Languages&lt;/a&gt; by Simon Peyton Jones.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v2_life&lt;/code&gt; would calculate life-time information needed by the &lt;code class=&quot;highlighter-rouge&quot;&gt;v2_codegen&lt;/code&gt; pass, and &lt;code class=&quot;highlighter-rouge&quot;&gt;v2_codegen&lt;/code&gt; would generate the BEAM assembly code.&lt;/p&gt;
&lt;h2 id=&quot;r7b-enter-core-erlang&quot;&gt;R7B: Enter Core Erlang&lt;/h2&gt;
&lt;p&gt;Meanwhile, &lt;a href=&quot;https://github.com/richcarl&quot;&gt;Richard Carlsson&lt;/a&gt; and the &lt;a href=&quot;https://www.it.uu.se/research/group/hipe/&quot;&gt;HiPE group&lt;/a&gt; at Uppsala University come up with the idea for a new intermediate format useful as an interchange format for different Erlang implementations and for optimizing Erlang programs.&lt;/p&gt;
&lt;p&gt;The new format was called &lt;a href=&quot;https://www.it.uu.se/research/group/hipe/cerl/doc/core_erlang-1.0.3.pdf&quot;&gt;Core Erlang&lt;/a&gt;. Robert liked the idea and started to implement Core Erlang in the compiler. The undocumented implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;v3&lt;/code&gt; compiler in OTP R6 is based on a draft version of the Core Erlang specification.&lt;/p&gt;
&lt;p&gt;In OTP R7B, the v1 and v2 compilers were removed, and the only remaining compiler was the &lt;code class=&quot;highlighter-rouge&quot;&gt;v3&lt;/code&gt; compiler that used Core Erlang. It had the following passes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;v3_core&lt;/li&gt;
&lt;li&gt;v3_core_opt&lt;/li&gt;
&lt;li&gt;v3_kernel&lt;/li&gt;
&lt;li&gt;v3_life&lt;/li&gt;
&lt;li&gt;v3_codegen&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;v3_core&lt;/code&gt; pass translated the abstract format to Core Erlang.&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;v3_core_opt&lt;/code&gt; pass essentially only called &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_core_fold&lt;/code&gt;, which did &lt;a href=&quot;https://en.wikipedia.org/wiki/Constant_folding&quot;&gt;constant propagation and constant folding&lt;/a&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_core_fold&lt;/code&gt; still do those things, and &lt;a href=&quot;http://blog.erlang.org/core-erlang-optimizations&quot;&gt;more&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The remaining passes do the same thing as today.&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;v3_kernel&lt;/code&gt; pass translates from Core Erlang to Kernel Erlang, and also does pattern matching compilation (in the same way as in &lt;code class=&quot;highlighter-rouge&quot;&gt;v2_match&lt;/code&gt;). The optimizations in &lt;code class=&quot;highlighter-rouge&quot;&gt;v2_kernopt&lt;/code&gt; are now done in &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_core_fold&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;v3_life&lt;/code&gt; pass (despite its name) no longer calculates life-time information. The life-time information is instead calculated by &lt;code class=&quot;highlighter-rouge&quot;&gt;v3_kernel&lt;/code&gt; and passed on as annotations.&lt;/p&gt;
&lt;p&gt;The reason that &lt;code class=&quot;highlighter-rouge&quot;&gt;v3_life&lt;/code&gt; still exists is that Robert had continued to work on his own version of &lt;code class=&quot;highlighter-rouge&quot;&gt;codegen&lt;/code&gt; that did not have all my changes in it to work for BEAM. While implementing the Core Erlang passes, he also did many improvements to &lt;code class=&quot;highlighter-rouge&quot;&gt;codegen&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When it was time to integrate our different versions of the compiler, Robert looked in horror at all my changes in &lt;code class=&quot;highlighter-rouge&quot;&gt;codegen&lt;/code&gt;. To avoid having to reintroduce all my adapations and optimizations for BEAM into his new version of &lt;code class=&quot;highlighter-rouge&quot;&gt;codegen&lt;/code&gt;, Robert wrote an adapter pass that translated from the new Kernel Erlang format to the old format so that my &lt;code class=&quot;highlighter-rouge&quot;&gt;codegen&lt;/code&gt; would work. The adapter pass is called &lt;code class=&quot;highlighter-rouge&quot;&gt;v3_life&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Thus, &lt;code class=&quot;highlighter-rouge&quot;&gt;v3_codegen&lt;/code&gt; is essentially &lt;code class=&quot;highlighter-rouge&quot;&gt;v2_codegen&lt;/code&gt; with a new name.&lt;/p&gt;
&lt;p&gt;In the upcoming OTP 21, &lt;code class=&quot;highlighter-rouge&quot;&gt;v3_life&lt;/code&gt; has been combined with &lt;code class=&quot;highlighter-rouge&quot;&gt;v3_codegen&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;learning-erlang-from-robert&quot;&gt;Learning Erlang from Robert&lt;/h2&gt;
&lt;p&gt;In the time period that Robert and I worked together on the compiler, I usually worked on &lt;code class=&quot;highlighter-rouge&quot;&gt;v3_codegen&lt;/code&gt; and the passes below, while Robert worked on all passes above &lt;code class=&quot;highlighter-rouge&quot;&gt;v3_codegen&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Occasionally, I would add some optimizations to &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_core_fold&lt;/code&gt; and give them to Robert to incorporate into his latest version of &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_core_fold&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I would then look at what Robert had done with my code, and learn.&lt;/p&gt;
&lt;p&gt;Usually Robert had subtly improved my code, made it slightly cleaner and simpler. But one time I handed Robert an optimization of &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; clauses. The code I got back was very different. Robert had broken apart my optimization into several simpler optimizations that achieved the same purpose (and more) than my more complicated optimization.&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Thu, 02 Aug 2018 14:10:16 +0000</pubDate>
<dc:creator>jxub</dc:creator>
<og:description>This blog post is a brief history lesson about the Erlang compiler for the BEAM machine. To provide some context, there will first be a quick look at the abstract machines for Erlang.</og:description>
<og:title>A Brief History of the BEAM Compiler</og:title>
<dc:format>text/html</dc:format>
<dc:identifier>http://blog.erlang.org/beam-compiler-history/</dc:identifier>
</item>
<item>
<title>You don’t need standups</title>
<link>https://medium.com/@jsonpify/you-dont-need-standup-9a74782517c1</link>
<guid isPermaLink="true" >https://medium.com/@jsonpify/you-dont-need-standup-9a74782517c1</guid>
<description>&lt;p name=&quot;6533&quot; id=&quot;6533&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Notice: Below represents my PERSONAL beliefs about agile and team organization. Your results may vary.&lt;/em&gt;&lt;/p&gt;
&lt;p name=&quot;4370&quot; id=&quot;4370&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I recently became a technical product manager at work and this puts me in charge of a team of engineers for the first time. Up until January I was a developer who was upset at how many meetings I had.&lt;/p&gt;
&lt;p name=&quot;dcaa&quot; id=&quot;dcaa&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So I ran an experiment for the last six months which consisted of a few new behaviors:&lt;/p&gt;
&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;da4c&quot; id=&quot;da4c&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;No stand-ups&lt;/li&gt;
&lt;li name=&quot;bc92&quot; id=&quot;bc92&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;No planning at regular intervals&lt;/li&gt;
&lt;li name=&quot;bdf1&quot; id=&quot;bdf1&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;No retros&lt;/li&gt;
&lt;li name=&quot;460e&quot; id=&quot;460e&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;All meetings are optional&lt;/li&gt;
&lt;/ol&gt;&lt;p name=&quot;2a1d&quot; id=&quot;2a1d&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;This may sound extreme. But there is some logic to this madness.&lt;/p&gt;
&lt;p name=&quot;1394&quot; id=&quot;1394&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I wanted the team to know I trusted them. To know that it’s ok to tackle tech debt, explore, and work at their own pace. I laid out the goals for the quarter and trusted that the work would get done. Then I got the fuck out of the way.&lt;/p&gt;
&lt;p name=&quot;818a&quot; id=&quot;818a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Would you believe it: work got done. A lot of it.&lt;/p&gt;
&lt;p name=&quot;8d57&quot; id=&quot;8d57&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We were an extremely productive team that responded to change and nailed every goal we set out to.&lt;/p&gt;
&lt;p name=&quot;da55&quot; id=&quot;da55&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;But before we go into detail about why this experiment worked, let’s see how a typical agile team operates.&lt;/p&gt;
&lt;p name=&quot;c4da&quot; id=&quot;c4da&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;A typical agile team&lt;/strong&gt;&lt;/p&gt;
&lt;p name=&quot;47c7&quot; id=&quot;47c7&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We’re going to create a fictitious team called the SuperAgileRockstars.&lt;/p&gt;
&lt;p name=&quot;c834&quot; id=&quot;c834&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;SuperAgileRockstars do weekly sprints.&lt;/p&gt;
&lt;p name=&quot;e583&quot; id=&quot;e583&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So every Monday they spend an hour planning the work for the week. They meet every morning at 10am for standup where each team member says what they did yesterday, what they are doing today, if tasks are blocked, and give announcements. At the end of the week they spend an hour doing a retrospective where they discuss what went right, what went wrong, and create tasks to address these issues.&lt;/p&gt;
&lt;p name=&quot;6246&quot; id=&quot;6246&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;It sounds pretty logical, right?&lt;/p&gt;
&lt;p name=&quot;2d01&quot; id=&quot;2d01&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;How can this paradise of productivity be broken? Let’s see.&lt;/p&gt;
&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;7c63&quot; id=&quot;7c63&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Trello (or whatever you use) has to be kept in sync with what’s discussed in these meetings. It often isn’t. As the team grows this becomes even more complicated.&lt;/li&gt;
&lt;li name=&quot;273e&quot; id=&quot;273e&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Stand-ups ENCOURAGE plans to change daily. Lack of consistency is a great way to ruin developer flow.&lt;/li&gt;
&lt;li name=&quot;ae16&quot; id=&quot;ae16&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Standup forces every team member to be productive at a set place and a set time&lt;/li&gt;
&lt;li name=&quot;4a34&quot; id=&quot;4a34&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Extroverts thrive at stand-ups, planning, and retros. It’s no wonder that tech debt is such a common problem. Developers shouldn’t have to PUSH for tech debt to be addressed. Teams should operate at a sustainable pace.&lt;/li&gt;
&lt;li name=&quot;9312&quot; id=&quot;9312&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Why do we encourage problems to be discussed once a week? We should address them immediately, not just at retros.&lt;/li&gt;
&lt;li name=&quot;fb4f&quot; id=&quot;fb4f&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Sprints encourage iterative development. This sounds really good to people like me who strongly advocate small, concise, pull requests over long-living feature branches. But it’s not the same thing. Sprints encourage features over tech debt. How often have you had to advocate spending an entire sprint tackling tech debt?&lt;/li&gt;
&lt;/ol&gt;&lt;p name=&quot;c86b&quot; id=&quot;c86b&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;What would happen if we didn’t plan every week, didn’t do retros, and didn’t do standup?&lt;/p&gt;
&lt;p name=&quot;2be8&quot; id=&quot;2be8&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Stop doing standup&lt;/strong&gt;&lt;/p&gt;
&lt;p name=&quot;fde6&quot; id=&quot;fde6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Standup has always bothered me. It usually serves to interrupt developers, make them feel pressured to prioritize features over tech debt, and has been known to last longer than 1/2 hour.&lt;/p&gt;
&lt;p name=&quot;7394&quot; id=&quot;7394&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The natural side effects of not doing standup are:&lt;/p&gt;
&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;d505&quot; id=&quot;d505&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Developers communicate more&lt;/li&gt;
&lt;li name=&quot;1a79&quot; id=&quot;1a79&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Your team becomes more remote-friendly&lt;/li&gt;
&lt;li name=&quot;e023&quot; id=&quot;e023&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Tech debt gets addressed&lt;/li&gt;
&lt;li name=&quot;98d1&quot; id=&quot;98d1&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Developers feel more in control and less stressed&lt;/li&gt;
&lt;li name=&quot;b220&quot; id=&quot;b220&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Developers know you trust them and that you have their back&lt;/li&gt;
&lt;/ol&gt;&lt;p name=&quot;d4a0&quot; id=&quot;d4a0&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;At Spotify my role is a technical product manager. It’s my role to “steer the ship” (e.g. decide what we work on). If I’m changing my mind about this on a daily basis that’s problematic. If the entire organization changes its mind on a daily basis then it’s my job to fix that.&lt;/p&gt;
&lt;p name=&quot;214f&quot; id=&quot;214f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The reality is: I’ve told my bosses what we’ll deliver by the end of the quarter and I would rather trust that my team know what’s required to get there and be creative along the way.&lt;/p&gt;
&lt;p name=&quot;fe8b&quot; id=&quot;fe8b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I want to give them as much freedom as possible to get shit done.&lt;/p&gt;
&lt;p name=&quot;7998&quot; id=&quot;7998&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Feel like taking a day off to work on open source? Fuck yeah.&lt;/p&gt;
&lt;p name=&quot;d86b&quot; id=&quot;d86b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Feel like working on something completely different for a few days? Have fun.&lt;/p&gt;
&lt;p name=&quot;6077&quot; id=&quot;6077&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Think our tech debt is out of hand so you want to spend some time fixing it up? We are best friends now.&lt;/p&gt;
&lt;p name=&quot;b8ed&quot; id=&quot;b8ed&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I know you’re going to get us to our goals and who am I to tell you every single day, “well the highest priority item on the backlog is x,y,z”.&lt;/p&gt;
&lt;p name=&quot;3fe2&quot; id=&quot;3fe2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Fuck that noise.&lt;/p&gt;
&lt;p name=&quot;e532&quot; id=&quot;e532&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Stop planning every sprint&lt;/strong&gt;&lt;/p&gt;
&lt;p name=&quot;1f47&quot; id=&quot;1f47&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Planning on a regular basis is another thing that has always bothered me. It’s rare, in my experience, that things change so drastically that the entire team needs to get together and figure things out. But if there is an emergency then by all means call a meeting and communicate that shit. That said, I’m not against planning, I’m against planning on an interval.&lt;/p&gt;
&lt;p name=&quot;bcd8&quot; id=&quot;bcd8&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So what do things look like if we don’t plan every week or two:&lt;/p&gt;
&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;6dc9&quot; id=&quot;6dc9&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Developers are trusted to be working on the correct things&lt;/li&gt;
&lt;li name=&quot;47f9&quot; id=&quot;47f9&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Developers aren’t interrupted nearly as much so things get done&lt;/li&gt;
&lt;li name=&quot;5d2e&quot; id=&quot;5d2e&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Backlog is used as a priority queue of work to be done&lt;/li&gt;
&lt;li name=&quot;d3f5&quot; id=&quot;d3f5&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Tasks are added to the backlog as needed, continuously&lt;/li&gt;
&lt;li name=&quot;f794&quot; id=&quot;f794&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Blockers are communicated right away&lt;/li&gt;
&lt;li name=&quot;ad6e&quot; id=&quot;ad6e&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Planning happens when plans change. Meeting fatigue is reduced and the team knows this was a last resort and is important&lt;/li&gt;
&lt;/ol&gt;&lt;p name=&quot;a948&quot; id=&quot;a948&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Stop doing retros&lt;/strong&gt;&lt;/p&gt;
&lt;p name=&quot;2a5d&quot; id=&quot;2a5d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Say you’re in a relationship and it’s going amazing. You should totally start going to couples therapy once a week, right?&lt;/p&gt;
&lt;p name=&quot;1ac0&quot; id=&quot;1ac0&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Of course not. So why the fuck are we doing retros every week or every month?&lt;/p&gt;
&lt;p name=&quot;e863&quot; id=&quot;e863&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Furthermore, why are we waiting until retros to discuss problems or to give praise?&lt;/p&gt;
&lt;p name=&quot;166a&quot; id=&quot;166a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;What do things look like when we stop doing retros:&lt;/p&gt;
&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;3d6d&quot; id=&quot;3d6d&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Developers aren’t interrupted and get shit done&lt;/li&gt;
&lt;li name=&quot;286f&quot; id=&quot;286f&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Problems are addressed sooner&lt;/li&gt;
&lt;li name=&quot;4e14&quot; id=&quot;4e14&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Stickies and sharpies are returned and we buy lunch instead&lt;/li&gt;
&lt;/ol&gt;&lt;p name=&quot;72fd&quot; id=&quot;72fd&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Here’s some questions I know you’re wanting to ask&lt;/strong&gt;&lt;/p&gt;
&lt;p name=&quot;492d&quot; id=&quot;492d&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“How will I know what to work on?”&lt;/p&gt;
&lt;p name=&quot;3946&quot; id=&quot;3946&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Good: Pick an item from the backlog.&lt;/p&gt;
&lt;p name=&quot;7ce9&quot; id=&quot;7ce9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Better: The backlog is prioritized and you pick the highest priority item from the backlog.&lt;/p&gt;
&lt;p name=&quot;88d3&quot; id=&quot;88d3&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Best: You work on tech debt or open source because you need a mental health day.&lt;/p&gt;
&lt;p name=&quot;7829&quot; id=&quot;7829&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“What do I do if I’m blocked?”&lt;/p&gt;
&lt;p name=&quot;7cf9&quot; id=&quot;7cf9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Good: Pick a different item from the backlog.&lt;/p&gt;
&lt;p name=&quot;5d75&quot; id=&quot;5d75&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Better: Create a “blocked” column in trello, move the task there, then pick a different item from the backlog.&lt;/p&gt;
&lt;p name=&quot;8e2b&quot; id=&quot;8e2b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Best: Put the task in the “blocked” column, pick a different item from the backlog, and drop a message in slack letting the team know it’s blocked.&lt;/p&gt;
&lt;p name=&quot;2680&quot; id=&quot;2680&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“How will I track the progress?”&lt;/p&gt;
&lt;p name=&quot;b974&quot; id=&quot;b974&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Good: Ask the team. Don’t ask every day.&lt;/p&gt;
&lt;p name=&quot;5a1e&quot; id=&quot;5a1e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Better: Keep the backlog up-to-date &amp;amp; relevant. Fucking look at Trello.&lt;/p&gt;
&lt;p name=&quot;5824&quot; id=&quot;5824&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Best: Communicate to the team if anything high priority is happening. Otherwise trust that work is getting done until that trust is broken. Casually get updates every so often over lunch and/or beers.&lt;/p&gt;
&lt;p name=&quot;dc71&quot; id=&quot;dc71&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“Hold on. We totally handle tech debt and we do stand-ups!”&lt;/p&gt;
&lt;p name=&quot;49da&quot; id=&quot;49da&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Awesome!&lt;/p&gt;
&lt;p name=&quot;d45b&quot; id=&quot;d45b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;You must have vocal developers who are willing to push for tech debt to be addressed and management that deeply cares about engineering quality.&lt;/p&gt;
&lt;p name=&quot;4c7c&quot; id=&quot;4c7c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The reality is that most companies don’t operate this way and even your company is likely not a great environment for introverts.&lt;/p&gt;
&lt;p name=&quot;f982&quot; id=&quot;f982&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p name=&quot;e9be&quot; id=&quot;e9be&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Effective teams question everything. They also trust each other. They also get a lot of shit done.&lt;/p&gt;
&lt;p name=&quot;5acf&quot; id=&quot;5acf&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This article is my attempt to question what’s become the default behavior of agile teams. Daily stand-ups, weekly/bi-weekly planning, and weekly/bi-weekly retros. We didn’t even discuss estimation either.&lt;/p&gt;
&lt;p name=&quot;9dc9&quot; id=&quot;9dc9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;My advice for all teams is to not start by complicating things.&lt;/p&gt;
&lt;p name=&quot;93e8&quot; id=&quot;93e8&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;Stand-ups, planning, and retros are a tool and you should be putting a lot of thought into what tools you use.&lt;/p&gt;
</description>
<pubDate>Thu, 02 Aug 2018 14:08:31 +0000</pubDate>
<dc:creator>jxub</dc:creator>
<og:title>You don’t need standup – palmerj3 – Medium</og:title>
<og:url>https://medium.com/@jsonpify/you-dont-need-standup-9a74782517c1</og:url>
<og:description>Notice: Below represents my PERSONAL beliefs about agile and team organization. Your results may vary.</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/@jsonpify/you-dont-need-standup-9a74782517c1</dc:identifier>
</item>
<item>
<title>France bans smartphone use in schools</title>
<link>https://www.theverge.com/2018/8/1/17640476/france-bans-smartphone-cellphones-school-emmanuel-macron</link>
<guid isPermaLink="true" >https://www.theverge.com/2018/8/1/17640476/france-bans-smartphone-cellphones-school-emmanuel-macron</guid>
<description>&lt;p id=&quot;cJ17j1&quot;&gt;Many French students will have their social media scrolling forcibly ended during school hours this upcoming year, after French lawmakers voted to ban smartphone use in schools.&lt;/p&gt;
&lt;p id=&quot;ezljUp&quot;&gt;On Monday, lawmakers decided that students under the age of 15 must leave their cellphones at home, or at least have them turned off during the school day. French high schools will be allowed to decide whether they implement the ban in their classrooms.&lt;/p&gt;
&lt;p id=&quot;AvLNQ7&quot;&gt;The measure prohibits the use of tablets, computers, and other internet-connected devices as well. There are exceptions in place for students with disabilities and for the educational use of devices in the classroom and in extra-curricular activities. This was &lt;a href=&quot;https://www.cnn.com/2018/07/31/europe/france-smartphones-school-ban-intl/&quot;&gt;a campaign promise&lt;/a&gt; of French president Emmanuel Macron, and after the measure was passed he tweeted, “Commitment held.”&lt;/p&gt;
&lt;div id=&quot;OMSn0B&quot; readability=&quot;6.1434599156118&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; readability=&quot;5.6708860759494&quot;&gt;
&lt;p lang=&quot;fr&quot; dir=&quot;ltr&quot;&gt;L’interdiction générale des téléphones portables dans les écoles et les collèges a été définitivement adoptée par l’Assemblée nationale aujourd’hui.&lt;br/&gt;Engagement tenu ✅&lt;/p&gt;
— Emmanuel Macron (@EmmanuelMacron) &lt;a href=&quot;https://twitter.com/EmmanuelMacron/status/1023983502960803846?ref_src=twsrc%5Etfw&quot;&gt;July 30, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p id=&quot;fJhDpH&quot;&gt;This new measure isn’t France’s first foray into banning cellphone use. In 2010, the use of smartphones was prohibited “during all teaching activity,” &lt;a href=&quot;https://www.cnn.com/2018/07/31/europe/france-smartphones-school-ban-intl/&quot;&gt;according to a report from CNN&lt;/a&gt;. And earlier this year, the lawmakers &lt;a href=&quot;https://www.theverge.com/2018/2/6/16979342/france-bans-texting-driving-pulled-over&quot;&gt;banned texting in your car&lt;/a&gt; even when you’re pulled over on the side of the road.&lt;/p&gt;
&lt;p id=&quot;A9g28f&quot;&gt;“This isn’t a 21st-century law in our eyes, but a law from the era of news channels and binary debate,” Alex Corbière, a deputy from the left-wing Unbowed France party told CNN yesterday. “In reality, the ban has already been made. I don’t know a single teacher in this country that allows the use of phones in class.”&lt;/p&gt;
&lt;p id=&quot;en8AdY&quot;&gt;Last December, &lt;a href=&quot;https://www.theverge.com/2017/12/12/16767676/france-kids-phone-policy-schools&quot;&gt;the French government announced&lt;/a&gt; this ban as an attempt to send a “public health message,” as officials believed kids shouldn’t be spending as much time as they do on their devices.&lt;/p&gt;


</description>
<pubDate>Thu, 02 Aug 2018 13:21:36 +0000</pubDate>
<dc:creator>deegles</dc:creator>
<og:description>Students can still have their phones, but they better be turned off, mister</og:description>
<og:image>https://cdn.vox-cdn.com/thumbor/ChxMKvN2gYC59QsO0htzoRmFikc=/0x216:3000x1787/fit-in/1200x630/cdn.vox-cdn.com/uploads/chorus_asset/file/11908757/152602014.jpg.jpg</og:image>
<og:title>France bans smartphone use in schools</og:title>
<og:type>article</og:type>
<og:url>https://www.theverge.com/2018/8/1/17640476/france-bans-smartphone-cellphones-school-emmanuel-macron</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theverge.com/2018/8/1/17640476/france-bans-smartphone-cellphones-school-emmanuel-macron</dc:identifier>
</item>
<item>
<title>Pyxel: A retro game development environment in Python</title>
<link>https://github.com/kitao/pyxel</link>
<guid isPermaLink="true" >https://github.com/kitao/pyxel</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;[ &lt;a href=&quot;https://github.com/kitao/pyxel/blob/master/README.md&quot;&gt;English&lt;/a&gt; | &lt;a href=&quot;https://github.com/kitao/pyxel/blob/master/README.ja.md&quot;&gt;Japanese&lt;/a&gt; | &lt;a href=&quot;https://github.com/kitao/pyxel/blob/master/README.pt-br.md&quot;&gt;Português&lt;/a&gt; ]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pyxel&lt;/strong&gt; is a retro game development environment in Python.&lt;/p&gt;
&lt;p&gt;Thanks to its simple specifications inspired by retro gaming consoles, such as only 16 colors can be displayed and only 4 sounds can be played back at the same time, you can feel free to enjoy making pixel art style games.&lt;/p&gt;
&lt;a href=&quot;https://github.com/kitao/pyxel/blob/master/pyxel/examples/01_hello_pyxel.py&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/kitao/pyxel/master/pyxel/examples/screenshots/01_hello_pyxel.gif&quot; width=&quot;48%&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/kitao/pyxel/blob/master/pyxel/examples/02_jump_game.py&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/kitao/pyxel/master/pyxel/examples/screenshots/02_jump_game.gif&quot; width=&quot;48%&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/kitao/pyxel/blob/master/pyxel/examples/03_draw_api.py&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/kitao/pyxel/master/pyxel/examples/screenshots/03_draw_api.gif&quot; width=&quot;48%&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/kitao/pyxel/blob/master/pyxel/examples/04_sound_api.py&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/kitao/pyxel/master/pyxel/examples/screenshots/04_sound_api.gif&quot; width=&quot;48%&quot;/&gt;&lt;/a&gt;
&lt;p&gt;The specifications of the gaming console, APIs, and palettes of Pyxel are referring to awesome &lt;a href=&quot;https://www.lexaloffle.com/pico-8.php&quot; rel=&quot;nofollow&quot;&gt;PICO-8&lt;/a&gt; and &lt;a href=&quot;https://tic.computer/&quot; rel=&quot;nofollow&quot;&gt;TIC-80&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pyxel is open source and free to use. Let's start making a retro game with Pyxel!&lt;/p&gt;
&lt;h2&gt;Specifications&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Run on Windows, Mac, and Linux&lt;/li&gt;
&lt;li&gt;Code writing with Python3&lt;/li&gt;
&lt;li&gt;Fixed 16 color palette&lt;/li&gt;
&lt;li&gt;256x256 sized 4 image banks&lt;/li&gt;
&lt;li&gt;4 channels with 64 definable sound banks&lt;/li&gt;
&lt;li&gt;Keyboard, mouse, and joystick(WIP) inputs&lt;/li&gt;
&lt;li&gt;Image and sound editor (WIP)&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;How to Install&lt;/h2&gt;
&lt;h3&gt;Windows&lt;/h3&gt;
&lt;p&gt;After installing &lt;a href=&quot;https://www.python.org/&quot; rel=&quot;nofollow&quot;&gt;Python3&lt;/a&gt;, the following &lt;code&gt;pip&lt;/code&gt; command installs Pyxel:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
pip install pyxel
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Mac&lt;/h3&gt;
&lt;p&gt;After installing &lt;a href=&quot;https://www.python.org/&quot; rel=&quot;nofollow&quot;&gt;Python3&lt;/a&gt; and &lt;a href=&quot;http://www.glfw.org/&quot; rel=&quot;nofollow&quot;&gt;glfw&lt;/a&gt;, install Pyxel with &lt;code&gt;pip&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;If &lt;a href=&quot;https://brew.sh/&quot; rel=&quot;nofollow&quot;&gt;Homebrew&lt;/a&gt; package manager is ready, the following command installs all the necessary packages:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
brew install python3 glfw
pip3 install pyxel
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Linux&lt;/h3&gt;
&lt;p&gt;Install the required packages in a way appropriate for each distribution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Arch:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Install &lt;a href=&quot;https://aur.archlinux.org/packages/python-pyxel/&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;python-pixel&lt;/code&gt;&lt;/a&gt; by using your favorite AUR helper:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
yay -S python-pyxel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Debian:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
apt-get install python3 python3-pip glfw libportaudio2 libasound-dev
pip3 install pyxel
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Install examples&lt;/h3&gt;
&lt;p&gt;After installing Pyxel, the examples of Pyxel will be copied to the current directory with the following command:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
install_pyxel_examples
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;How to Use&lt;/h2&gt;
&lt;h3&gt;Create Pyxel Application&lt;/h3&gt;
&lt;p&gt;After importing the Pyxel module in your python code, specify the window size with &lt;code&gt;init&lt;/code&gt; function first, then starts the Pyxel application with &lt;code&gt;run&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; pyxel

pyxel.init(&lt;span class=&quot;pl-c1&quot;&gt;160&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;120&lt;/span&gt;)

&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;update&lt;/span&gt;():
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; pyxel.btnp(pyxel.&lt;span class=&quot;pl-c1&quot;&gt;KEY_Q&lt;/span&gt;):
        pyxel.quit()

&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;draw&lt;/span&gt;():
    pyxel.cls(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;)
    pyxel.rect(&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;11&lt;/span&gt;)

pyxel.run(update, draw)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The arguments of &lt;code&gt;run&lt;/code&gt; function are &lt;code&gt;update&lt;/code&gt; function to update each frame and &lt;code&gt;draw&lt;/code&gt; function to draw screen when necessary.&lt;/p&gt;
&lt;p&gt;In an actual application, it is recommended to wrap pyxel code in a class as below:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; pyxel

&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;App&lt;/span&gt;:
    &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;&lt;span class=&quot;pl-smi&quot;&gt;self&lt;/span&gt;&lt;/span&gt;):
        pyxel.init(&lt;span class=&quot;pl-c1&quot;&gt;160&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;120&lt;/span&gt;)
        &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;
        pyxel.run(&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.update, &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.draw)

    &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;update&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;&lt;span class=&quot;pl-smi&quot;&gt;self&lt;/span&gt;&lt;/span&gt;):
        &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.x &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;%&lt;/span&gt; pyxel.width

    &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;draw&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;&lt;span class=&quot;pl-smi&quot;&gt;self&lt;/span&gt;&lt;/span&gt;):
        pyxel.cls(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;)
        pyxel.rect(&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.x, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.x &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt;)

App()
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Special Controls&lt;/h3&gt;
&lt;p&gt;The following special controls can be performed while a Pyxel application is running:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Alt(Option)+1&lt;/code&gt;&lt;br/&gt;Save the screenshot to the desktop&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt(Option)+2&lt;/code&gt;&lt;br/&gt;Reset the recording start time of the screen capture video&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt(Option)+3&lt;/code&gt;&lt;br/&gt;Save the screen capture video (gif) to the desktop (up to 30 seconds)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt(Option)+0&lt;/code&gt;&lt;br/&gt;Toggle the performance monitor (fps, update time, and draw time)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt(Option)+Enter&lt;/code&gt;&lt;br/&gt;Toggle full screen&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Create Images&lt;/h3&gt;
&lt;p&gt;There are the following methods to create images for Pyxel:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Create an image from a list of strings with &lt;code&gt;Image.set&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;Load a png file in Pyxel palette with &lt;code&gt;Image.load&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;Create images with Pyxel Editor (WIP)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Please refer to the API reference for usage of &lt;code&gt;Image.set&lt;/code&gt; and &lt;code&gt;Image.load&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Because Pyxel uses the same palette as &lt;a href=&quot;https://www.lexaloffle.com/pico-8.php&quot; rel=&quot;nofollow&quot;&gt;PICO-8&lt;/a&gt;, when creating png images for Pyxel, it is recommended to use &lt;a href=&quot;https://www.aseprite.org/&quot; rel=&quot;nofollow&quot;&gt;Aseprite&lt;/a&gt; in PICO-8 palette mode.&lt;/p&gt;
&lt;h2&gt;API Reference&lt;/h2&gt;
&lt;h3&gt;System&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;&lt;br/&gt;The width and height of the screen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;frame_count&lt;/code&gt;&lt;br/&gt;The number of the elapsed frames&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;init(width, height, [caption], [scale], [palette], [fps], [border_width], [border_color])&lt;/code&gt;&lt;br/&gt;Initialize the Pyxel application with screen size (&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;)&lt;br/&gt;It is also possible to specify the window title with &lt;code&gt;caption&lt;/code&gt;, the display magnification with &lt;code&gt;scale&lt;/code&gt;, the palette color with &lt;code&gt;palette&lt;/code&gt;, the frame rate with &lt;code&gt;fps&lt;/code&gt;, and the margin width and color outside the screen with &lt;code&gt;border_width&lt;/code&gt; and &lt;code&gt;border_color&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;run(update, draw)&lt;/code&gt;&lt;br/&gt;Start the Pyxel application and call &lt;code&gt;update&lt;/code&gt; function for frame update and &lt;code&gt;draw&lt;/code&gt; function for drawing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;quit()&lt;/code&gt;&lt;br/&gt;End the Pyxel application at the end of the current frame&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Input&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;code&gt;mouse_x&lt;/code&gt;, &lt;code&gt;mouse_y&lt;/code&gt;&lt;br/&gt;The current position of the mouse cursor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;btn(key)&lt;/code&gt;&lt;br/&gt;Return &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; is pressed, otherwise return &lt;code&gt;False&lt;/code&gt; (&lt;a href=&quot;https://github.com/kitao/pyxel/blob/master/pyxel/constants.py&quot;&gt;key definition list&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;btnp(key, [hold], [period])&lt;/code&gt;&lt;br/&gt;Return &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; is pressed at that frame, otherwise return &lt;code&gt;False&lt;/code&gt;. When &lt;code&gt;hold&lt;/code&gt; and &lt;code&gt;period&lt;/code&gt; are specified, &lt;code&gt;True&lt;/code&gt; will be returned at the &lt;code&gt;period&lt;/code&gt; frame interval when the &lt;code&gt;key&lt;/code&gt; is held down for more than &lt;code&gt;hold&lt;/code&gt; frames&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;btnr(key)&lt;/code&gt;&lt;br/&gt;Return &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; is released at that frame, otherwise return &lt;code&gt;False&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Graphics&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;code&gt;image(img)&lt;/code&gt;&lt;br/&gt;Operate the image bank &lt;code&gt;img&lt;/code&gt;(0-3) (see the Image class) e.g. &lt;code&gt;pyxel.image(0).load(0, 0, 'title.png')&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;clip(x1, y1, x2, y2)&lt;/code&gt;&lt;br/&gt;Set the drawing area of the screen to (&lt;code&gt;x1&lt;/code&gt;, &lt;code&gt;y1&lt;/code&gt;)-(&lt;code&gt;x2&lt;/code&gt;, &lt;code&gt;y2&lt;/code&gt;). Reset the drawing area with &lt;code&gt;clip()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pal(col1, col2)&lt;/code&gt;&lt;br/&gt;Replace color &lt;code&gt;col1&lt;/code&gt; with &lt;code&gt;col2&lt;/code&gt; at drawing. &lt;code&gt;pal()&lt;/code&gt; to reset to the initial palette&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cls(col)&lt;/code&gt;&lt;br/&gt;Clear screen with color &lt;code&gt;col&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pix(x, y, col)&lt;/code&gt;&lt;br/&gt;Draw a pixel of color &lt;code&gt;col&lt;/code&gt; at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;line(x1, y1, x2, y2, col)&lt;/code&gt;&lt;br/&gt;Draw a line of color &lt;code&gt;col&lt;/code&gt; from (&lt;code&gt;x1&lt;/code&gt;, &lt;code&gt;y1&lt;/code&gt;) to (&lt;code&gt;x2&lt;/code&gt;, &lt;code&gt;y2&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rect(x1, y1, x2, y2, col)&lt;/code&gt;&lt;br/&gt;Draw a rectangle of color &lt;code&gt;col&lt;/code&gt; from (&lt;code&gt;x1&lt;/code&gt;, &lt;code&gt;y1&lt;/code&gt;) to (&lt;code&gt;x2&lt;/code&gt;, &lt;code&gt;y2&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rectb(x1, y1, x2, y2, col)&lt;/code&gt;&lt;br/&gt;Draw the outline of a rectangle of color &lt;code&gt;col&lt;/code&gt; from (&lt;code&gt;x1&lt;/code&gt;, &lt;code&gt;y1&lt;/code&gt;) to (&lt;code&gt;x2&lt;/code&gt;, &lt;code&gt;y2&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;circ(x, y, r, col)&lt;/code&gt;&lt;br/&gt;Draw a circle of radius &lt;code&gt;r&lt;/code&gt; and color &lt;code&gt;col&lt;/code&gt; at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;circb(x, y, r, col)&lt;/code&gt;&lt;br/&gt;Draw the outline of a circle of radius &lt;code&gt;r&lt;/code&gt; and color &lt;code&gt;col&lt;/code&gt; at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;blt(x, y, img, sx, sy, w, h, [colkey])&lt;/code&gt;&lt;br/&gt;Copy the region of size (&lt;code&gt;w&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt;) from (&lt;code&gt;sx&lt;/code&gt;, &lt;code&gt;sy&lt;/code&gt;) of the image bank &lt;code&gt;img&lt;/code&gt;(0-3) to (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;). If negative value is set for &lt;code&gt;w&lt;/code&gt; and/or &lt;code&gt;h&lt;/code&gt;, it will reverse horizontally and/or vertically. If &lt;code&gt;colkey&lt;/code&gt; is speficied, treated as transparent color&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;text(x, y, s, col)&lt;/code&gt;&lt;br/&gt;Draw a string &lt;code&gt;s&lt;/code&gt; of color &lt;code&gt;col&lt;/code&gt; at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Audio&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;code&gt;sound(snd)&lt;/code&gt;&lt;br/&gt;Operate the sound bank &lt;code&gt;snd&lt;/code&gt;(0-63) (see the Sound class) e.g. &lt;code&gt;pyxel.sound(0).speed = 60&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;play(ch, snd, loop=False)&lt;/code&gt;&lt;br/&gt;Play the sound bank &lt;code&gt;snd&lt;/code&gt;(0-63) on channel &lt;code&gt;ch&lt;/code&gt;(0-3). Play in order when &lt;code&gt;snd&lt;/code&gt; is a list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;stop(ch)&lt;/code&gt;&lt;br/&gt;Stop playback of channel &lt;code&gt;ch&lt;/code&gt;(0-3)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Image Class&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;&lt;br/&gt;The width and height of the Image&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt;&lt;br/&gt;The data of the Image (NumPy array)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;set(x, y, data)&lt;/code&gt;&lt;br/&gt;Set the image as a list of strings at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;)&lt;br/&gt;e.g. &lt;code&gt;pyxel.image(0).set(10, 10, ['1234', '5678', '9abc', 'defg'])&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;load(x, y, filename)&lt;/code&gt;&lt;br/&gt;Read png image at (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;copy(x, y, img, sx, sy, width, height)&lt;/code&gt;&lt;br/&gt;Copy the region of size (&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;) from (&lt;code&gt;sx&lt;/code&gt;, &lt;code&gt;sy&lt;/code&gt;) of the image bank &lt;code&gt;img&lt;/code&gt;(0-3) to (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Sound Class&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;code&gt;note&lt;/code&gt;&lt;br/&gt;List of note(0-127) (33 = 'A2' = 440Hz)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tone&lt;/code&gt;&lt;br/&gt;List of tone(0:Triangle / 1:Square / 2:Pulse / 3:Noise)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;volume&lt;/code&gt;&lt;br/&gt;List of volume(0-7)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;effect&lt;/code&gt;&lt;br/&gt;List of effects(0:None / 1:Slide / 2:Vibrato / 3:FadeOut)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;speed&lt;/code&gt;&lt;br/&gt;The length of one note(120 = 1 second per tone)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;set(note, tone, volume, effect, speed)&lt;/code&gt;&lt;br/&gt;Set a note, tone, volume, and effect with a string. If the tone, volume, and effect length are shorter than the note, it is repeated from the beginning&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;set_note(note)&lt;/code&gt;&lt;br/&gt;Set the note with a string consists of 'CDEFGAB'+'#-'+'0123' or 'R'. Case-insensitive and whitespace is ignored&lt;br/&gt;e.g. &lt;code&gt;pyxel.sound(0).set_note('G2B-2D3R RF3F3F3')&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;set_tone(tone)&lt;/code&gt;&lt;br/&gt;Set the tone with a string consists of 'TSPN'. Case-insensitive and whitespace is ignored&lt;br/&gt;e.g. &lt;code&gt;pyxel.sound(0).set_tone('TTSS PPPN')&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;set_volume(volume)&lt;/code&gt;&lt;br/&gt;Set the volume with a string consists of '01234567'. Case-insensitive and whitespace is ignored&lt;br/&gt;e.g. &lt;code&gt;pyxel.sound(0).set_volume('7777 7531')&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;set_effect(effect)&lt;/code&gt;&lt;br/&gt;Set the effect with a string consists of 'NSVF'. Case-insensitive and whitespace is ignored&lt;br/&gt;e.g. &lt;code&gt;pyxel.sound(0).set_effect('NFNF NVVS')&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;Pyxel is under &lt;a href=&quot;http://en.wikipedia.org/wiki/MIT_License&quot; rel=&quot;nofollow&quot;&gt;MIT license&lt;/a&gt;. It can be reused within proprietary software provided that all copies of the licensed software include a copy of the MIT License terms and the copyright notice.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 02 Aug 2018 05:21:31 +0000</pubDate>
<dc:creator>autocorr</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/678802?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>kitao/pyxel</og:title>
<og:url>https://github.com/kitao/pyxel</og:url>
<og:description>pyxel - A retro game development environment in Python</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/kitao/pyxel</dc:identifier>
</item>
</channel>
</rss>