<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Tell HN: Slack decides to close down IRC and XMPP gateways</title>
<link>https://news.ycombinator.com/item?id=16539857</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=16539857</guid>
<description>&lt;tr readability=&quot;0.55737704918033&quot;&gt;&lt;td bgcolor=&quot;#FF6600&quot;&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.8539719626168&quot;&gt;&lt;td&gt;
&lt;table class=&quot;fatitem&quot; border=&quot;0&quot; readability=&quot;5.6723130841121&quot;&gt;&lt;tr class=&quot;athing&quot; id=&quot;16539857&quot; readability=&quot;0&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; class=&quot;title&quot;/&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;title&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=16539857&quot; class=&quot;storylink&quot;&gt;Tell HN: Slack decides to close down IRC and XMPP gateways&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0.74074074074074&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td class=&quot;subtext&quot;&gt;&lt;span class=&quot;score&quot; id=&quot;score_16539857&quot;&gt;437 points&lt;/span&gt; by &lt;a href=&quot;https://news.ycombinator.com/user?id=elektron&quot; class=&quot;hnuser&quot;&gt;elektron&lt;/a&gt; &lt;span class=&quot;age&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=16539857&quot;&gt;2 hours ago&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;unv_16539857&quot;/&gt; | &lt;a href=&quot;https://news.ycombinator.com/hide?id=16539857&amp;amp;goto=item%3Fid%3D16539857&quot;&gt;hide&lt;/a&gt; | &lt;a href=&quot;https://hn.algolia.com/?query=Tell%20HN%3A%20Slack%20decides%20to%20close%20down%20IRC%20and%20XMPP%20gateways&amp;amp;sort=byDate&amp;amp;dateRange=all&amp;amp;type=story&amp;amp;storyText=false&amp;amp;prefix&amp;amp;page=0&quot; class=&quot;hnpast&quot;&gt;past&lt;/a&gt; | &lt;a href=&quot;https://www.google.com/search?q=Tell%20HN%3A%20Slack%20decides%20to%20close%20down%20IRC%20and%20XMPP%20gateways&quot;&gt;web&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/fave?id=16539857&amp;amp;auth=c33ea2865cd55911df7158412e8dd973e76c0525&quot;&gt;favorite&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/item?id=16539857&quot;&gt;193 comments&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;19.5&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td readability=&quot;24&quot;&gt;11:14 -!- Message of the day
&lt;p&gt;Hello! We have news to share — we've decided it's time to close down the IRC and XMPP gateways to Slack.&lt;/p&gt;
&lt;p&gt;After years of evolving, Slack is at the point where the gateways can no longer handle all of our features or security needs.&lt;/p&gt;
&lt;p&gt;If you've been using the gateways for accessibility reasons, we're glad to let you know that it's now possible to navigate Slack by keyboard and with a screen reader — and we're making more improvements on a continual basis.&lt;/p&gt;
&lt;p&gt;Still, we know this is a disruptive change, and we want to help with this transition in any way we can. Please follow this link to learn more about the upcoming changes:&lt;/p&gt;
&lt;p&gt;slack.com/account/gateways&lt;/p&gt;
&lt;p&gt;11:14 -!- End of MOTD command&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0.73972602739726&quot;&gt;&lt;td&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;10&quot; width=&quot;0&quot;/&gt;&lt;br/&gt;&lt;center&gt;&lt;a href=&quot;https://www.ycombinator.com/apply/&quot;&gt;Applications are open for YC Summer 2018&lt;/a&gt;&lt;/center&gt;
&lt;br/&gt;&lt;center&gt;&lt;span class=&quot;yclinks&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/newsguidelines.html&quot;&gt;Guidelines&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/newsfaq.html&quot;&gt;FAQ&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Support&lt;/a&gt; | &lt;a href=&quot;https://github.com/HackerNews/API&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/security.html&quot;&gt;Security&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/lists&quot;&gt;Lists&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/bookmarklet.html&quot; rel=&quot;nofollow&quot;&gt;Bookmarklet&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/legal/&quot;&gt;Legal&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/apply/&quot;&gt;Apply to YC&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Contact&lt;/a&gt;&lt;/span&gt;
&lt;/center&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Wed, 07 Mar 2018 21:01:51 +0000</pubDate>
<dc:creator>elektron</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=16539857</dc:identifier>
</item>
<item>
<title>Facebook Really Is Spying on You, Just Not Through Your Phone&amp;#039;s Mic</title>
<link>https://www.wsj.com/articles/facebook-really-is-spying-on-you-just-not-through-your-phones-mic-1520448644</link>
<guid isPermaLink="true" >https://www.wsj.com/articles/facebook-really-is-spying-on-you-just-not-through-your-phones-mic-1520448644</guid>
<description>&lt;p&gt; “Can I try the Cole Haans in a size 8?”  Later that night on Facebook: An advertisement for Cole Haan pumps. &lt;/p&gt; &lt;p&gt;OK, maybe a coincidence.&lt;/p&gt; &lt;p&gt; “What’s the best high-tech scale?” my wife asks aloud.  Five minutes later on Instagram: An ad for scales. &lt;/p&gt; &lt;p&gt;Wait,...
  &lt;/p&gt;</description>
<pubDate>Wed, 07 Mar 2018 20:12:40 +0000</pubDate>
<dc:creator>asclepi</dc:creator>
<og:title>Facebook Really Is Spying on You, Just Not Through Your Phone’s Mic</og:title>
<og:description>Facebook is now so good at watching what we do online—and even offline, wandering around the physical world—it doesn’t need to hear us to know what we like. Here are some ways to limit the amount of data Facebook and advertisers are collecting about you.</og:description>
<og:url>https://www.wsj.com/articles/facebook-really-is-spying-on-you-just-not-through-your-phones-mic-1520448644</og:url>
<og:image>https://si.wsj.net/public/resources/images/BN-XT668_STERN0_SOC_20180307132149.jpg</og:image>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wsj.com/articles/facebook-really-is-spying-on-you-just-not-through-your-phones-mic-1520448644</dc:identifier>
</item>
<item>
<title>The New Wave of Indian Type</title>
<link>https://design.google/library/new-wave-indian-type-design/</link>
<guid isPermaLink="true" >https://design.google/library/new-wave-indian-type-design/</guid>
<description>&lt;p&gt;As mobile access grows and more people around the world start using the internet—a billion people are expected to come online over the next few years in emerging markets alone—it’s also necessary to elevate the quality and range of digital typefaces available in different writing systems. This challenge is especially striking in India, a country that recognizes 23 official languages, but counted almost 1600 (including dialects) in their last census. Some of these languages and their scripts have descended from ancient Brahmi, others are based in Arabic, while the ongoing use of English, a language that's reach and influence has grown considerably since India's independence from Britain in 1947, means that Latin letters are also a common sight.&lt;/p&gt;
&lt;p&gt;The Bombay-based type designer Girish Dalvi has a gift for conveying the sheer scale of this typographic challenge. A professor of design at the Indian Institute of Technology and a co-founder of the Ek Type collective, Dalvi describes the immensity of Indian culture and language with a quote from the Argentine writer Jorge Luis Borges, “India is larger than the world.” Dalvi allows a beat to pass before adding that Borges did, in fact, have a good rationale for this saying. “India is an extremely diverse country,” says Dalvi. “The language and script change every five hundred miles, and so does Indian design.”&lt;/p&gt;
&lt;p&gt;Keeping pace with the subcontinent’s linguistic diversity is challenging enough in print, but the relatively small number of digital fonts available for Indic languages reveals a striking disparity. Even the most widely used Indian script, Devanagari, has far fewer typographic options compared to the superabundance of Latin fonts. Some scripts like Bengali, Tamil, Urdu, and Tibetan have even fewer fonts available. But the balance is beginning to shift as a cohort of Indian type designers develop new digital fonts, and the movement is still growing in part because many of these designers release their designs with open source licenses. The code is then readily available for others to experiment and develop their own contributions, improving the quality and variety of typography across India’s many writing systems.&lt;/p&gt;
</description>
<pubDate>Wed, 07 Mar 2018 17:24:13 +0000</pubDate>
<dc:creator>carbolite103</dc:creator>
<og:description>Studying the open source, collaborative work of Indian typographers, as a model for global font design</og:description>
<og:title>The New Wave of Indian Type</og:title>
<og:image>https://storage.googleapis.com/gd-wagtail-prod-assets/original_images/the_new_wave_of_open_source_indian_type_design_share.png</og:image>
<og:url>https://design.google/library/new-wave-indian-type-design/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://design.google/library/new-wave-indian-type-design/</dc:identifier>
</item>
<item>
<title>Statement on Potentially Unlawful Online Platforms for Trading Digital Assets</title>
<link>https://www.sec.gov/news/public-statement/enforcement-tm-statement-potentially-unlawful-online-platforms-trading</link>
<guid isPermaLink="true" >https://www.sec.gov/news/public-statement/enforcement-tm-statement-potentially-unlawful-online-platforms-trading</guid>
<description>&lt;div readability=&quot;31&quot;&gt;
&lt;div class=&quot;field_speaker_name_and_title&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Divisions of Enforcement and Trading and Markets&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div readability=&quot;133.49011317&quot;&gt;
&lt;p&gt;Online trading platforms have become a popular way investors can buy and sell digital assets, including coins and tokens offered and sold in so-called Initial Coin Offerings (&quot;ICOs&quot;).  The platforms often claim to give investors the ability to quickly buy and sell digital assets.  Many of these platforms bring buyers and sellers together in one place and offer investors access to automated systems that display priced orders, execute trades, and provide transaction data.&lt;/p&gt;
&lt;p&gt;A number of these platforms provide a mechanism for trading assets that meet the definition of a &quot;security&quot; under the federal securities laws.  If a platform offers trading of digital assets that are securities and operates as an &quot;exchange,&quot; as defined by the federal securities laws, then the platform must register with the SEC as a national securities exchange or be exempt from registration.  The federal regulatory framework governing registered national securities exchanges and exempt markets is designed to protect investors and prevent against fraudulent and manipulative trading practices.&lt;/p&gt;
&lt;h2&gt;Considerations for Investors Using Online Trading Platforms&lt;/h2&gt;
&lt;p&gt;To get the protections offered by the federal securities laws and SEC oversight when trading digital assets that are securities, investors should use a platform or entity registered with the SEC, such as a national securities exchange, alternative trading system (&quot;ATS&quot;), or broker-dealer.&lt;/p&gt;
&lt;p&gt;The SEC staff has concerns that many online trading platforms appear to investors as SEC-registered and regulated marketplaces when they are not.  Many platforms refer to themselves as &quot;exchanges,&quot; which can give the misimpression to investors that they are regulated or meet the regulatory standards of a national securities exchange.  Although some of these platforms claim to use strict standards to pick only high-quality digital assets to trade, the SEC does not review these standards or the digital assets that the platforms select, and the so-called standards should not be equated to the listing standards of national securities exchanges.  Likewise, the SEC does not review the trading protocols used by these platforms, which determine how orders interact and execute, and access to a platform's trading services may not be the same for all users.  Again, investors should not assume the trading protocols meet the standards of an SEC-registered national securities exchange.  Lastly, many of these platforms give the impression that they perform exchange-like functions by offering order books with updated bid and ask pricing and data about executions on the system, but there is no reason to believe that such information has the same integrity as that provided by national securities exchanges.&lt;/p&gt;
&lt;p&gt;In light of the foregoing, here are some questions investors should ask before they decide to trade digital assets on an online trading platform: &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Do you trade securities on this platform?  If so, is the platform registered as a national securities exchange (&lt;a href=&quot;https://www.sec.gov/fast-answers/divisionsmarketregmrexchangesshtml.html&quot;&gt;see our link to the list below&lt;/a&gt;)?   &lt;/li&gt;
&lt;li&gt;Does the platform operate as an ATS?  If so, is the ATS registered as a broker-dealer and has it filed a Form ATS with the SEC (&lt;a href=&quot;https://www.sec.gov/foia/docs/atslist.htm&quot;&gt;see our link to the list below&lt;/a&gt;)? &lt;/li&gt;
&lt;li&gt;Is there information in &lt;a href=&quot;https://brokercheck.finra.org/&quot;&gt;FINRA's BrokerCheck&lt;/a&gt;® about any individuals or firms operating the platform?&lt;/li&gt;
&lt;li&gt;How does the platform select digital assets for trading? &lt;/li&gt;
&lt;li&gt;Who can trade on the platform?&lt;/li&gt;
&lt;li&gt;What are the trading protocols?&lt;/li&gt;
&lt;li&gt;How are prices set on the platform?&lt;/li&gt;
&lt;li&gt;Are platform users treated equally? &lt;/li&gt;
&lt;li&gt;What are the platform's fees?&lt;/li&gt;
&lt;li&gt;How does the platform safeguard users' trading and personally identifying information? &lt;/li&gt;
&lt;li&gt;What are the platform's protections against cybersecurity threats, such as hacking or intrusions?&lt;/li&gt;
&lt;li&gt;What other services does the platform provide?  Is the platform registered with the SEC for these services?&lt;/li&gt;
&lt;li&gt;Does the platform hold users' assets?  If so, how are these assets safeguarded?&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Resources for Investors&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.investor.gov/additional-resources/specialized-resources/spotlight-initial-coin-offerings-digital-assets&quot;&gt;Investor.gov Spotlight on Initial Coin Offerings and Digital Assets&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sec.gov/news/public-statement/statement-clayton-2017-12-11&quot;&gt;Chairman Jay Clayton Statement on Cryptocurrencies and Initial Coin Offerings&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sec.gov/news/testimony/testimony-virtual-currencies-oversight-role-us-securities-and-exchange-commission&quot;&gt;Chairman Jay Clayton's Testimony on Virtual Currencies: The Roles of the SEC and CFTC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sec.gov/litigation/investreport/34-81207.pdf&quot;&gt;Report of Investigation Pursuant to Section 21(a) of the Securities and Exchange Act of 1934:  The DAO&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Investors can find a list of SEC-registered national securities exchanges here:  &lt;a href=&quot;https://www.sec.gov/fast-answers/divisionsmarketregmrexchangesshtml.html&quot;&gt;List of Active National Securities Exchanges&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Investors can find a list of ATSs that have filed a Form ATS with the SEC here:  &lt;a href=&quot;https://www.sec.gov/foia/docs/atslist.htm&quot;&gt;List of Active Alternative Trading Systems&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Considerations for Market Participants Operating Online Trading Platforms&lt;/h2&gt;
&lt;p&gt;A platform that trades securities and operates as an &quot;exchange,&quot; as defined by the federal securities laws, must register as a national securities exchange or operate under an exemption from registration, such as the exemption provided for ATSs under SEC Regulation ATS.  An SEC-registered national securities exchange must, among other things, have rules designed to prevent fraudulent and manipulative acts and practices.  Additionally, as a self-regulatory organization (&quot;SRO&quot;), an SEC-registered national securities exchange must have rules and procedures governing the discipline of its members and persons associated with its members, and enforce compliance by its members and persons associated with its members with the federal securities laws and the rules of the exchange.  Further, a national securities exchange must itself comply with the federal securities laws and must file its rules with the Commission.&lt;/p&gt;
&lt;p&gt;An entity seeking to operate as an ATS is also subject to regulatory requirements, including registering with the SEC as a broker-dealer and becoming a member of an SRO.  Registration as a broker-dealer subjects the ATS to a host of regulatory requirements, such as the requirement to have reasonable policies and procedures to prevent the misuse of material non-public information, books and records requirements, and financial responsibility rules, including, as applicable, requirements concerning the safeguarding and custody of customer funds and securities.  The overlay of SRO membership imposes further regulatory requirements and oversight.  An ATS must comply with the federal securities laws and its SRO's rules, and file a Form ATS with the SEC. &lt;/p&gt;
&lt;p&gt;Some online trading platforms may not meet the definition of an exchange under the federal securities laws, but directly or indirectly offer trading or other services related to digital assets that are securities.  For example, some platforms offer digital wallet services (to hold or store digital assets) or transact in digital assets that are securities.  These and other services offered by platforms may trigger other registration requirements under the federal securities laws, including broker-dealer, transfer agent, or clearing agency registration, among other things.  In addition, a platform that offers digital assets that are securities may be participating in the unregistered offer and sale of securities if those securities are not registered or exempt from registration. &lt;/p&gt;
&lt;p&gt;In advancing the SEC's mission to protect investors, the SEC staff will continue to focus on platforms that offer trading of digital assets and their compliance with the federal securities laws. &lt;/p&gt;
&lt;h2&gt;Consultation with Securities Counsel and the SEC Staff&lt;/h2&gt;
&lt;p&gt;We encourage market participants who are employing new technologies to develop trading platforms to consult with legal counsel to aid in their analysis of federal securities law issues and to contact SEC staff, as needed, for assistance in analyzing the application of the federal securities laws.In particular, staff providing assistance on these matters can be reached at FinTech@sec.gov.&lt;/p&gt;
&lt;h3&gt;Resources for Market Participants&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gpo.gov/fdsys/pkg/FR-1998-12-22/pdf/98-33299.pdf&quot;&gt;Regulation of Exchanges and Alternative Trading Systems&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Select Commission Enforcement Actions&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sec.gov/news/press-release/2018-23&quot;&gt;SEC v. Jon E. Montroll and Bitfunder&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sec.gov/news/press-release/2014-273&quot;&gt;In re BTC Trading, Corp. and Ethan Burnside.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sec.gov/news/press-release/2017-185-0&quot;&gt;SEC v. REcoin Group Foundation, LLC et al.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sec.gov/news/press-release/2017-219&quot;&gt;SEC v. PlexCorps et al.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sec.gov/news/press-release/2017-227&quot;&gt;In re Munchee, Inc.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sec.gov/news/press-release/2018-8&quot;&gt;SEC v. AriseBank et al.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Wed, 07 Mar 2018 16:47:02 +0000</pubDate>
<dc:creator>matthewbauer</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.sec.gov/news/public-statement/enforcement-tm-statement-potentially-unlawful-online-platforms-trading</dc:identifier>
</item>
<item>
<title>Economist behind Uber study admits error, adjusts numbers</title>
<link>https://twitter.com/StephenZoepf/status/970754550968676352/photo/1?ref_src=twsrc%5Etfw&amp;ref_url=https:%2F%2Fwww.recode.net%2F2018%2F3%2F3%2F17074782%2Fuber-mit-study-less-than-4-hour-flawed</link>
<guid isPermaLink="true" >https://twitter.com/StephenZoepf/status/970754550968676352/photo/1?ref_src=twsrc%5Etfw&amp;ref_url=https%3A%2F%2Fwww.recode.net%2F2018%2F3%2F3%2F17074782%2Fuber-mit-study-less-than-4-hour-flawed</guid>
<description>&lt;p&gt;I did 100+ rides and tracked *all* my hours. Uber tells you the hours *app is on*, which eliminates time getting to/from market, deadheading long fares, cleaning, maintenance, refueling, breaks, etc. I figured $19/hr gross but only ~1/2 that net in SF/Oak: &amp;lt;min wage.&lt;/p&gt;
</description>
<pubDate>Wed, 07 Mar 2018 15:53:35 +0000</pubDate>
<dc:creator>resalisbury</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/StephenZoepf/status/970754550968676352/photo/1</dc:identifier>
</item>
<item>
<title>Research suggests some potential benefits to being a loner</title>
<link>http://www.bbc.com/future/story/20180228-there-are-benefits-to-being-antisocial-or-a-loner</link>
<guid isPermaLink="true" >http://www.bbc.com/future/story/20180228-there-are-benefits-to-being-antisocial-or-a-loner</guid>
<description>&lt;p&gt;I can be a reluctant socialiser. I’m sometimes secretly pleased &lt;a href=&quot;https://www.thecut.com/2017/11/why-canceling-plans-is-so-satisfying.html&quot;&gt;when social plans are called off&lt;/a&gt;. I get restless a few hours into a hangout. I even once went on a free 10-day silent meditation retreat – not for the meditation, but for the silence.&lt;/p&gt;&lt;p&gt;So I can relate to author Anneli Rufus, who recounted in Party of One: The Loners’ Manifesto:&lt;/p&gt;&lt;p&gt;“When parents on TV shows punished their kids by ordering them to go to their rooms, I was confused. I loved my room. Being there behind a locked door was a treat. To me a punishment was being ordered to play Yahtzee with my cousin Louis.”&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;You might also like:&lt;/strong&gt;&lt;/em&gt;&lt;br/&gt;• &lt;a href=&quot;http://www.bbc.com/future/story/20170518-the-everyday-habits-that-reveal-our-personalities&quot;&gt;The everyday habits that reveal our personalities&lt;/a&gt; &lt;br/&gt;• &lt;a href=&quot;http://www.bbc.com/future/story/20180213-five-myths-about-loneliness&quot;&gt;Five myths about loneliness &lt;/a&gt;&lt;br/&gt;• &lt;a href=&quot;http://www.bbc.com/future/story/20180219-toxic-perfectionism-is-on-the-rise&quot;&gt;The dangerous downsides of perfectionism&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Asocial tendencies like these are often far from ideal. Abundant research shows the harms of social isolation, considered a serious public health problem in countries that have rapidly ageing populations (though talk of a &lt;a href=&quot;http://www.bbc.com/future/story/20180213-five-myths-about-loneliness&quot;&gt;‘loneliness epidemic’&lt;/a&gt; may be overblown). In the UK, the Royal College of General Practitioners says that loneliness has the &lt;a href=&quot;https://www.theguardian.com/society/2017/oct/12/loneliness-as-bad-for-health-as-long-term-illness-says-gps-chief&quot;&gt;same risk level for premature death&lt;/a&gt; as diabetes. Strong social connections are important for &lt;a href=&quot;https://greatergood.berkeley.edu/article/item/how_social_connections_keep_seniors_healthy#gsc.tab=0&quot;&gt;cognitive functioning&lt;/a&gt;, motor function and a smoothly running immune system.&lt;/p&gt;&lt;p&gt;This is especially clear from cases of &lt;a href=&quot;http://www.bbc.com/future/story/20140514-how-extreme-isolation-warps-minds&quot;&gt;extreme social isolation&lt;/a&gt;. Examples of people kept in captivity, children kept isolated in abusive orphanages, and prisoners kept in solitary confinement all show how prolonged solitude can lead to hallucinations and other forms of mental instability.&lt;/p&gt;&lt;p&gt;But these are severe and involuntary cases of aloneness. For those of us who just prefer plenty of alone time, emerging research suggests some good news: there are upsides to being reclusive – for both our work lives and our emotional well-being.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Creative space&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;One key benefit is improved creativity. Gregory Feist, who focuses on the psychology of creativity at California’s San Jose State University, has defined creativity as thinking or activity with &lt;a href=&quot;https://books.google.co.uk/books?hl=en&amp;amp;lr=&amp;amp;id=1EBT3Qj5L5EC&amp;amp;oi=fnd&amp;amp;pg=PA113&amp;amp;dq=gregory+feist&amp;amp;ots=7LcrBBYETm&amp;amp;sig=EpMJ9fPRAmcoKAWwGapzB_VC8ZQ#v=onepage&amp;amp;q=gregory%20feist&amp;amp;f=false&quot;&gt;two key elements&lt;/a&gt;: originality and usefulness. He has found that personality traits commonly associated with creativity are openness (receptiveness to new thoughts and experiences), self-efficacy (confidence), and autonomy (independence) – which may include “a lack of concern for social norms” and “a preference for being alone”. In fact, Feist’s research on both artists and scientists shows that one of the most prominent features of creative folks is their lesser interest in socialising.&lt;/p&gt;&lt;p&gt;One reason for this is that such people are likely to spend sustained time alone working on their craft. Plus, Feist says, many artists “are trying to make sense of their internal world and a lot of internal personal experiences that they’re trying to give expression to and meaning to through their art.” Solitude allows for the reflection and observation necessary for that creative process.&lt;/p&gt;&lt;p&gt;A recent vindication of these ideas came from University at Buffalo psychologist Julie Bowker, who researches social withdrawal. Social withdrawal usually is categorised into three types: shyness caused by fear or anxiety; avoidance, from a dislike of socialising; and unsociability, from a preference for solitude.&lt;/p&gt;&lt;p&gt;A &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0191886917304920&quot;&gt;paper&lt;/a&gt; by Bowker and her colleagues was the first to show that a type of social withdrawal could have a positive effect – they found that creativity was linked specifically to unsociability. They also found that unsociability had no correlation with aggression (shyness and avoidance did).&lt;/p&gt;&lt;p&gt;This was significant because while previous research had suggested that unsociability might be harmless, Bowker and colleagues’ paper showed that it could actually be beneficial. Unsociable people are likely to be “having just enough interaction,” Bowker says. “They have a preference for being alone, but they also don’t mind being with others.”&lt;/p&gt;&lt;p&gt;There is gender and cultural variation, of course. For instance, some research suggests that &lt;a href=&quot;http://onlinelibrary.wiley.com/doi/10.1111/sode.12181/abstract&quot;&gt;unsociable children in China&lt;/a&gt; have more interpersonal and academic problems than unsociable kids in the West. Bowker says that these differences are narrowing as the world becomes more globalised.&lt;/p&gt;&lt;p&gt;Still, it turns out that solitude is important for more than creativity.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Inward focus&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;It’s commonly believed that leaders need to be gregarious. But this depends – among other things, on the personalities of their employees. One &lt;a href=&quot;https://hbr.org/2010/12/the-hidden-advantages-of-quiet-bosses&quot;&gt;2011 study&lt;/a&gt; showed that in branches of a pizza chain where employees were more passive, extroverted bosses were associated with higher profits. But in branches where employees were more proactive, introverted leaders were more effective. One reason for this is that introverted people are less likely to feel threatened by strong personalities and suggestions. They’re also &lt;a href=&quot;http://www.bbc.com/capital/story/20150819-is-there-room-for-introverts-at-the-top&quot;&gt;more likely to listen&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Since ancient times, meanwhile, people have been aware of a link between isolation and mental focus. After all, cultures with traditions of religious hermits believe that solitude is important for enlightenment.&lt;/p&gt;&lt;p&gt;Recent research has given us a better understanding of why. One benefit of unsociability is the brain’s state of active mental rest, which goes hand-in-hand with the stillness of being alone. When another person is present, your brain &lt;a href=&quot;http://archive.boston.com/bostonglobe/ideas/articles/2011/03/06/the_power_of_lonely/?page=3&quot;&gt;can’t help but pay some attention&lt;/a&gt;. This can be a positive distraction. But it’s still a distraction.&lt;/p&gt;&lt;p&gt;Daydreaming in the absence of such distractions activates the brain’s &lt;a href=&quot;http://www.bbc.com/capital/story/20171204-the-compelling-case-for-working-a-lot-less&quot;&gt;default-mode networ&lt;/a&gt;k. Among other functions, this network helps to consolidate memory and understand others’ emotions. Giving free rein to a wandering mind not only helps with focus in the long term but strengthens your sense of both yourself and others. Paradoxically, therefore, periods of solitude actually help when it comes time to socialise once more. And the occasional absence of focus ultimately helps concentration in the long run.&lt;/p&gt;&lt;p&gt;A more recent proponent of thoughtful and productive solitude is Susan Cain, author of Quiet: The Power of Introverts in a World That Can’t Stop Talking and founder of &lt;a href=&quot;https://www.quietrev.com/&quot;&gt;Quiet Revolution&lt;/a&gt;, a company that promotes quiet and &lt;a href=&quot;http://www.bbc.com/capital/story/20170331-how-do-younetworkin-anation-of-introverts&quot;&gt;introvert-friendly workplaces&lt;/a&gt;. “These days, we tend to believe that creativity emerges from a decidedly gregarious process, but in fact it requires sustained attention and deep focus,” she says. “Also, humans are such porous, social beings that when we surround ourselves with others, we automatically take in their opinions and aesthetics. To truly chart our own path or vision, we have to be willing to sequester ourselves, at least for some period of time.”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Hermit health&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Still, the line between useful solitude and dangerous isolation can be blurry. “Almost anything can be adaptive and maladaptive, depending on how extreme they get,” Feist says. A disorder has to do with dysfunction. If someone stops caring about people and cuts off all contact, this could point to a pathological neglect of social relations. But creative unsociability is a far cry from this.&lt;/p&gt;&lt;p&gt;In fact, Feist says, “there’s a real danger with people who are never alone.” It’s hard to be introspective, self-aware, and fully relaxed unless you have occasional solitude. In addition, introverts tend to have fewer but stronger friendships – which has been linked to &lt;a href=&quot;http://www.independent.co.uk/voices/comment/having-fewer-friends-is-better-for-you-and-that-s-great-news-for-introverts-like-me-10459033.html&quot;&gt;greater happiness&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;As with many things, quality reigns over quantity. Nurturing a few solid relationships without feeling the need to constantly populate your life with chattering voices ultimately may be better for you.&lt;/p&gt;&lt;p&gt;Thus, if your personality tends toward unsociability, you shouldn’t feel the need to change. Of course, that comes with caveats. But as long as you have regular social contact, you are choosing solitude rather than being forced into it, you have at least a few good friends and your solitude is good for your well-being or productivity, there’s no point agonising over how to fit a square personality into a round hole.&lt;/p&gt;&lt;p&gt;So feel free to de-clutter your social calendar. It’s psychologist-approved.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Join 800,000+ Future fans by liking us on &lt;/em&gt;&lt;a href=&quot;https://www.facebook.com/BBCFuture&quot;&gt;&lt;strong&gt;&lt;em&gt;Facebook&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;em&gt;, or follow us on &lt;/em&gt;&lt;a href=&quot;https://twitter.com/bbc_future&quot;&gt;&lt;strong&gt;&lt;em&gt;Twitter&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;If you liked this story, &lt;/em&gt;&lt;a href=&quot;http://pages.emails.bbc.com/subscribe/?ocid=fut.bbc.email.we.email-signup&quot;&gt;&lt;strong&gt;&lt;em&gt;sign up for the weekly bbc.com features newsletter&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;em&gt;, called “If You Only Read 6 Things This Week”. A handpicked selection of stories from BBC Future, Earth, Culture, Capital, and Travel, delivered to your inbox every Friday.&lt;/em&gt;&lt;/p&gt;
                        </description>
<pubDate>Wed, 07 Mar 2018 15:17:03 +0000</pubDate>
<dc:creator>raphar</dc:creator>
<og:title>Why being a loner may be good for your health</og:title>
<og:type>article</og:type>
<og:url>http://www.bbc.com/future/story/20180228-there-are-benefits-to-being-antisocial-or-a-loner</og:url>
<og:description>We tend to decry being alone. But emerging research suggests some potential benefits to being a loner – including for our creativity, mental health and even leadership skills.
</og:description>
<og:image>http://ichef.bbci.co.uk/wwfeatures/live/624_351/images/live/p0/5z/w1/p05zw18v.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.bbc.com/future/story/20180228-there-are-benefits-to-being-antisocial-or-a-loner</dc:identifier>
</item>
<item>
<title>Ask HN: Best way to learn modern C++?</title>
<link>https://news.ycombinator.com/item?id=16535886</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=16535886</guid>
<description>&lt;tr class=&quot;athing comtr&quot; id=&quot;16536336&quot; readability=&quot;4.3880239520958&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537247&quot; readability=&quot;11.641196013289&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.8205980066445&quot;&gt;&lt;tr readability=&quot;11.641196013289&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;13.09634551495&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;25.852104664391&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I agree with this completely :)&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;I would also like to add that it helps to read &quot;The Design and Evolution of C++&quot;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;I found that I plateaued early in my C++ journey. However, I was always reading from the experts and it really helped to read material from Dr. Stroustrup. Once I began to see the common thread behind what he was saying and understood why some things were the way they were, it helped understand when it's a good time to use/not-use certain things. This helped break past that barrier and to improve my skill further.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Also, it helped to write a _lot_ of c++ code and think about how that could be better.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;I'm afraid I didn't read a tonne of good C++ code in that period but somehow, I managed to keep growing and at some point, it became my &quot;go to&quot; language and I really started to like it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Long story, short: Read books from the experts, esp. Dr. Stroustrup. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537428&quot; readability=&quot;5.6894117647059&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8447058823529&quot;&gt;&lt;tr readability=&quot;5.6894117647059&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.6894117647059&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.864532019704&quot;&gt;&lt;span class=&quot;c00&quot;&gt;&amp;gt; I would also like to add that it helps to read &quot;The Design and Evolution of C++&quot;.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;I think that book is worth reading even to people who have no intention of going anywhere near C++, as long as they are interested in programming language design and evolution. I wish there were more books like this one to explain the kind of thinking that went into the design of a language and to tell its history. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537864&quot; readability=&quot;5.2415094339623&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6207547169811&quot;&gt;&lt;tr readability=&quot;5.2415094339623&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.2990566037736&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;16.238747553816&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Agreed.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;I had commented on the book on HN about a month ago:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=16275341&quot; rel=&quot;nofollow&quot;&gt;https://news.ycombinator.com/item?id=16275341&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Excerpt from it:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;&quot;I found that book very interesting in many regards. I had bought and read it several years ago (out of interest, though I have not worked on C++ professionally).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Stroustrup goes into a lot of details about the reasons for many design decisions in the language.&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;That's one of the reasons that make the book interesting. He even goes into human and cultural aspects of programming. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538815&quot; readability=&quot;2.2068965517241&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536507&quot; readability=&quot;4.4979919678715&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16539023&quot; readability=&quot;6.3168316831683&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16540303&quot; readability=&quot;4&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Good to see that three decades later, C++ still has a massive inferiority complex about its older brother, C.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537974&quot; readability=&quot;1.2967741935484&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538173&quot; readability=&quot;3.4437086092715&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7218543046358&quot;&gt;&lt;tr readability=&quot;3.4437086092715&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Would not recommend Principles and Practice Using C++, it is a fluff loaded book seemingly made to sell to university students.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538393&quot; readability=&quot;7.1428571428571&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.5714285714286&quot;&gt;&lt;tr readability=&quot;7.1428571428571&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I think it's a great introduction to Programming, but if you already know some other language, it tends to be verbose - but Stroustrup always tends to be verbose. I, for one, really like his style.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16540451&quot; readability=&quot;1.3783783783784&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536812&quot; readability=&quot;1.5142857142857&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537177&quot; readability=&quot;14.105960264901&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;7.0529801324503&quot;&gt;&lt;tr readability=&quot;14.105960264901&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.2317880794702&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.6662908680947&quot;&gt;&lt;span class=&quot;c00&quot;&gt;One of the trickier things about C++ for me (in terms of “getting lost”) when I first started was that there’s no standard C++ project structure. It varies based on the build system you use, whether what you’re building is just an API or something else, and personal preference. I recommend looking at some open source C++ projects like Tensorflow (Google), LevelDB (also Google), folly (Facebook), MongoDB, and Thrill (a Spark clone in C++, &lt;a href=&quot;https://github.com/thrill/thrill&quot; rel=&quot;nofollow&quot;&gt;https://github.com/thrill/thrill&lt;/a&gt;). Also pick your own projects you’re interested in. Take a look at basic tutorials for build systems like make, CMake, and Bazel. Hopefully that’ll give you an idea of what a modern C++ project actually looks like, and will help you start your own.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;For books I’d like to add to the current top comment (may go away) API Design for C++. It’s a great reference on exactly what it sounds like. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537395&quot; readability=&quot;2.3097345132743&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536172&quot; readability=&quot;8.1718464351005&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.0859232175503&quot;&gt;&lt;tr readability=&quot;8.1718464351005&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.5804387568556&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;16.952380952381&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Once you've got the basics down from a tutorial (old C++ or modern C++), move on to internalizing all the lessons here:&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;&lt;a href=&quot;https://isocpp.org/faq&quot; rel=&quot;nofollow&quot;&gt;https://isocpp.org/faq&lt;/a&gt; (what Marshall Cline's excellent C++ FAQ has become)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;and here:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;&lt;a href=&quot;https://herbsutter.com/gotw/&quot; rel=&quot;nofollow&quot;&gt;https://herbsutter.com/gotw/&lt;/a&gt; (Not as organized, but Herb Sutter wrestles with the essential questions of how to deal with the tricky bits of C++)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;If you've got the cash, read Effective Modern C++ by Scott Meyers.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Finally, if you're ready to snark at all you've learned, read the C++ FQA:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;&lt;a href=&quot;http://yosefk.com/c++fqa/&quot; rel=&quot;nofollow&quot;&gt;http://yosefk.com/c++fqa/&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536386&quot; readability=&quot;5.4339622641509&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7169811320755&quot;&gt;&lt;tr readability=&quot;5.4339622641509&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I would like to point out that yosefk fqa is a bit old now, and while some problems mentioned are still relevant, tools and conformity across up to date compilers are magnitudes better now.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16540281&quot; readability=&quot;14.53488372093&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;7.2674418604651&quot;&gt;&lt;tr readability=&quot;14.53488372093&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;10.174418604651&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;19.886104783599&quot;&gt;&lt;span class=&quot;c00&quot;&gt;The question assumes that there is a single &quot;proper&quot; way to code in C++ that everyone agrees on. But that's just not the case. For example, Google bans exceptions, operator overloading, and most uses of Boost in their C++ code. Facebook embraces all those things. QT re-invents most of the standard library.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;A lot of the C++ language is sort of experimental. Sometimes features get thrown in and then deprecated and/or taken out, like the &quot;export&quot; keyword for templates, or throw specifications. Most programmers have strong opinions about which C++ features are bad. But that's all they are-- opinions. The C++ standard supports pretty much any way of doing things you could imagine-- async, sync, multiple inheritance, functional, you name it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;If you're a novice, my advice is to learn C really well. Then choose a C++ style guide and follow its recommendations closely. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536662&quot; readability=&quot;5.9336823734729&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537508&quot; readability=&quot;2.2427184466019&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16539573&quot; readability=&quot;11.860538827258&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.9302694136292&quot;&gt;&lt;tr readability=&quot;11.860538827258&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;17.790808240887&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;34.906616862327&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Others have talked about how to learn the language but many people often find that hardest thing to do is to even compile their first C++ file. This is the &quot;build system escalation policy&quot; that I personally use, depending on what I need:&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;1: Experimental, throw-away code: online IDEs or Godbolt if I care about compiler output. You would be surprised how much mileage you can get out of a simple online IDE when you are just learning or exploring a new thing and don't care about preserving your work.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;2: Single-file code or small multi-file projects with no dependencies (like exercises or code samples from a book): direct calls to clang++/g++ in the command prompt or a simple build.sh shell script when I have to build multiple files. Make is a fantastic tool for this so you can learn and use that instead. I would actually encourage beginners to play directly with the compiler and learn the basic flags though, but this is personal preference.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;3a: Personal projects that pull in other dependencies (either system wide or libraries from github or other sources): Make or cmake would probably work here equally well. I actually prefer cmake for its find_package and external project functionality. Notice the jump in complexity from 2 to 3, this is something you have to deal with and eventually you will have to pick a build tool and learn it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;3b: After learning to use Bazel I have mostly migrated to it for all my personal projects, but there was an initial learning curve for sure (not worse than cmake though).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;4: At work: Whatever your company/team/group uses, you will most likely have little input on this if the codebase is old and established.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;If you are in Windows you can use vanilla Visual Studio C++ (Community edition is free and has all the bells and whistles) for 1-3, or use Visual Studio + cmake (you can generate VS solution files from cmake). &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536350&quot; readability=&quot;6.4900662251656&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2450331125828&quot;&gt;&lt;tr readability=&quot;6.4900662251656&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.5629139072848&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.805653710247&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Use it.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Not being a smart@$$ here. Any language you want to learn will only become natural when you've used it for a significant project or set of exercises. Either clone or port something non trivial, or use it for your latest pet project, or get permission to use it at work. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536827&quot; readability=&quot;4.4736842105263&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2368421052632&quot;&gt;&lt;tr readability=&quot;4.4736842105263&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;That's a pretty useless answer. It's easy to use C++, but in a non-idiomatic or C-style way. I think the OP is aware of this problem and is looking for concrete examples of modern C++.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537387&quot; readability=&quot;6.6160337552743&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.3080168776371&quot;&gt;&lt;tr readability=&quot;6.6160337552743&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.1983122362869&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.8891352549889&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I think reading best practices and most other forms of technical training work best after some experience is gained, even poor experience doing it the wrong way.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;It's similar to why university lectures work best if the audience has already done its assigned reading. The people in the audience have better questions in mind while listening, so they can better intuit when a gap is filled in or if some part of the explanation doesn't make sense. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537283&quot; readability=&quot;7.5164835164835&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.7582417582418&quot;&gt;&lt;tr readability=&quot;7.5164835164835&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;From experience I can tell you this: just 'use it' is not enough for some. I have seen truly, truly horrible code written by people who have been using C++ for decades. Let that sink in a bit, then realize that while 'use it' isn't bad advice, it is too general and too limited of a statement :P. You need to &lt;em&gt;learn&lt;/em&gt; the right usage as well.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536760&quot; readability=&quot;5.4210526315789&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7105263157895&quot;&gt;&lt;tr readability=&quot;5.4210526315789&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I'd still argue that there's a lot of value in some form of teaching (via book or video or whatever). If left to their own devices, novices will often come up with messy, non-idiomatic ways to do things.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536793&quot; readability=&quot;9.6381578947368&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.8190789473684&quot;&gt;&lt;tr readability=&quot;9.6381578947368&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.2286184210526&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;13.881154499151&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I find using both in combination is usually the best way to go. If you're just reading a book and doing exercises in it, you wont learn as well. Making something you want to make and using books as reference while developing makes you learn a lot quicker.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Also, the answer to this question depends a lot on your previous experience with other languages. If you're well-versed in another C-like language, jumping right in and starting to make something will probably teach you a lot, really quickly. If you're more of a beginner in programming generally, you need a book or a teacher. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537019&quot; readability=&quot;8.7928870292887&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.3964435146444&quot;&gt;&lt;tr readability=&quot;8.7928870292887&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;10.746861924686&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;20.887940234792&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I completely agree.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Not learning from books/teaching can make it hard to improve. I love reading other peoples code and thought processes because it often reveals how I'm missing something in my toolbox.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Studies have shown that one of the best ways to remember is to take a stab at a problem before learning the solution. So even quizzes on using libraries has helped me learn methods and concepts I would have not learned on my own if left to my own way of coding. I try a simple problem on my own before learning that there is a cleaner, more efficient solution. It's easier and more approachable to do that with small problems than trying to revise an entire document of code.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Lastly, I think a lot of experts underestimate the gap between novice and intermediate, where it's really hard and frustrating to attempt things that are a bit more complicated, requiring more background knowledge than just whats shown on the surface. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536811&quot; readability=&quot;10.425702811245&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.2128514056225&quot;&gt;&lt;tr readability=&quot;10.425702811245&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.7389558232932&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.9052631578947&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Ya, I think a balanced approach is the best, begin by reaing or watching videos, but not too much, just to get an overall idea, then get hands on but don't stop there, read more code and watch more videos and continue the process for your life time!&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;I sometimes get carried away and stop reading more after I cross some threshold which prevented me from noticing lot of nice things like best practices that were happening in the industry/or better design patterns etc.. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536361&quot; readability=&quot;2.3823529411765&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536156&quot; readability=&quot;9.5430579964851&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.7715289982425&quot;&gt;&lt;tr readability=&quot;9.5430579964851&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;IMO, the classic C++ book/author is still the best: Effective C++. Don't forget about the sequels, including the mostly overlooked Effective STL (which I happen to like better than the first two books). And to address the modern part of this question, I'll add that Scott Meyers has written Effective Modern C++ as well, but I'd read that last after getting the hang of C++03. No matter what people say, I tend to believe C++11 and on is not really a different language as much as it is syntactic sugar to cover up the ugliest parts of C++.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536380&quot; readability=&quot;9.6955859969559&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.8477929984779&quot;&gt;&lt;tr readability=&quot;9.6955859969559&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.8477929984779&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.9296875&quot;&gt;&lt;span class=&quot;c00&quot;&gt;As someone who programmed in &quot;classic C++&quot; for decades, I feel like modern C++ is pretty different, and that it's not just syntactic sugar to make some ugly things easier. The biggest example is that my natural inclination to use raw pointers everywhere and manage all memory myself, while idiomatic modern C++ is full of unique_ptrs and shared_ptrs everywhere, and raw pointers seem to be regarded as a code smell. Converting to this style is not an automatic process.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;For people who are coming from a classic C++ background, I find Bancila's Modern C++ Programming Cookbook to be a good first stop for discovering modern C++ idioms. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537705&quot; readability=&quot;9.4959677419355&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.7479838709677&quot;&gt;&lt;tr readability=&quot;9.4959677419355&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;OK from that perspective I can relate. Even before using C++11 I was using a lot of the new STL through Boost. If you use Boost, the only fundamental differences are syntax like auto, variadic macros, constexpr, noexcept, and lambdas all of which are familiar enough to get by. The only practical differences that have no equivalent in C++03 is move operations and maybe the threading/chrono stuff. Effective Modern C++ covers that so that's all I needed to &quot;upgrade.&quot;&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537280&quot; readability=&quot;3.6378600823045&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.8189300411523&quot;&gt;&lt;tr readability=&quot;3.6378600823045&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I remember being placed on a C++ project for a few months after having been away from the language for almost 10 years. The lack of raw pointers was an immediate slap in the face and had me going &quot;WTF am I looking at?&quot;&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538321&quot; readability=&quot;4.3807339449541&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1903669724771&quot;&gt;&lt;tr readability=&quot;4.3807339449541&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.9426605504587&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.7938144329897&quot;&gt;&lt;span class=&quot;c5a&quot;&gt;I suppose you shouldn't be using pointers if not required, not even smart(er) ones.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c5a&quot;&gt;They are not free and prevent certain kinds of optimization as well as allow accidentally sharing state. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536531&quot; readability=&quot;6.2827868852459&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.141393442623&quot;&gt;&lt;tr readability=&quot;6.2827868852459&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;IMO, Effective C++ is just a collection of warnings about pitfalls, something that is unfortunately needed for C++ programming, so do read it. But it is neither an introduction nor a collection of big picture advice.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536608&quot; readability=&quot;3.5375722543353&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7687861271676&quot;&gt;&lt;tr readability=&quot;3.5375722543353&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I usually recommend Effective C++ as the C++ book that everybody should read second. I'm still not sure what the best book to read first is, though...&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537337&quot; readability=&quot;3.4320987654321&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.716049382716&quot;&gt;&lt;tr readability=&quot;3.4320987654321&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Probably Tour of C++ if you're already familiar with older C++. (Or just get the book it's taken from, C++ Programming Language 4th Ed.)&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537237&quot; readability=&quot;3.3939393939394&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6969696969697&quot;&gt;&lt;tr readability=&quot;3.3939393939394&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I picked it up to learn modern C++ and was totally confused. Use xxx instead of yyy. Er, what's xxx and yyy?!&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537766&quot; readability=&quot;5.6470588235294&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8235294117647&quot;&gt;&lt;tr readability=&quot;5.6470588235294&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;That is arguably true for the first two books, but Effective STL is very opiniated. Scott Meyers argues not to use for loops when possible and to use the algorithm library everywhere instead. I tried convincing my team to do this but we were using C++03 and writing a struct functor is no fun... I think in C++11 a for loop and even a for each loop should be modernized with a good lambda instead.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538907&quot; readability=&quot;4.7240618101545&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3620309050773&quot;&gt;&lt;tr readability=&quot;4.7240618101545&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.1412803532009&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.860788863109&quot;&gt;&lt;span class=&quot;c00&quot;&gt;It's a pity that one of the most recommended books is about the pitfalls of C++ and is by someone on his own admission has never written production C++ code.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Of course it's a very good book though.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;My recommendation is for &quot;Accelerated C++&quot; by Koenig and Moo. It's rooted in actual teaching experience and compared to most C++ books is pretty slim.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;The only negatives these days is that it is a bit old and (still) expensive. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537369&quot; readability=&quot;4.2795698924731&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536139&quot; readability=&quot;3.5871886120996&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536804&quot; readability=&quot;10.961194029851&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.4805970149254&quot;&gt;&lt;tr readability=&quot;10.961194029851&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;If you know C, C++ Common Knowledge (&lt;a href=&quot;https://www.amazon.com/Common-Knowledge-Essential-Intermediate-Programming/dp/0321321928&quot; rel=&quot;nofollow&quot;&gt;https://www.amazon.com/Common-Knowledge-Essential-Intermedia...&lt;/a&gt;) will give you a quick run of the gotchas you're to avoid. From there, move to Scott Meyer's books, which will give you some good foundational knowledge on how features of the language work together. In particular I like that each concept is presented in a bite-sized chapter that you can read in a couple of hours and think about for the rest of the day. Even though the first two are about &quot;classic C++&quot; I wouldn't skip them. For a glimpse of the true power of modern C++, check the Boost Hana library docs, hopefully this will serve you as motivation to keep on going. Above all, don't do this alone. The compiler errors that you get once you start applying modern (template) techniques can be a bit of a rabbit hole and takes a bit to get an eye for deciphering them. Lean on coworkers, local user groups and/or the C++ slack group which is pretty supportive. Best of luck.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536884&quot; readability=&quot;6.379746835443&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.1898734177215&quot;&gt;&lt;tr readability=&quot;6.379746835443&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.5569620253165&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8453608247423&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I’m on my phone so I don’t have links, but the last few CPPCons have had talks by very prominent C++ luminaries talking about how to properly teach C++. They may be of interest.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;The biggest message seems to be “don’t treat C++ as C with extra stuff, it’s its own language.” &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537619&quot; readability=&quot;2.7072243346008&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538464&quot; readability=&quot;1.1818181818182&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16539803&quot; readability=&quot;3.6333333333333&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.8166666666667&quot;&gt;&lt;tr readability=&quot;3.6333333333333&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;What would you say are important features missing in C++11 that are in the current standard? I ask because I'm trying to get back into C++ development after many years and even C++11 seems like a new language to me.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536280&quot; readability=&quot;1.4210526315789&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536756&quot; readability=&quot;5.3221757322176&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6610878661088&quot;&gt;&lt;tr readability=&quot;5.3221757322176&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Don’t forget SFINAE. It’s what most of the modern type traits rely on and something you’d have to understand, at least conceptually, to fully understand how to effectively use things like std::enable_if.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537439&quot; readability=&quot;5.075&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536368&quot; readability=&quot;2.9411764705882&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537269&quot; readability=&quot;3.0535714285714&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537976&quot; readability=&quot;2.6551724137931&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.3275862068966&quot;&gt;&lt;tr readability=&quot;2.6551724137931&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I wonder if at some point it will be possible to discuss C++ on HN without the majority of the conversation becoming side tracked into discussing Rust.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536107&quot; readability=&quot;4.5&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.25&quot;&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Piggybacking of this post, if anyone has any similar resources for best practices in modern C I'd be interested. There don't seem to be any moocs that go beyond introductory material and K&amp;amp;R obviously doesn't cover modern tools and methods.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536251&quot; readability=&quot;12.281519861831&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;6.1407599309154&quot;&gt;&lt;tr readability=&quot;12.281519861831&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.1960276338515&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.9090909090909&quot;&gt;&lt;span class=&quot;c00&quot;&gt;“C Interfaces and Implementations” by David R. Hanson is what I used when I had a similar concern a few years ago. It’s from 1997, so no, it doesn’t cover the newest C standards, which I understand is your main concern. Though C11 didn’t add too much semantically, for what it’s worth. That said, the book provides great design patterns for writing C in an object-oriented sort of manner, more idiomatic to OOP.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Peter Hintjens was writing “Scalable C” a couple years ago, but recently died, and never got very far unfortunately. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16539294&quot; readability=&quot;4.543795620438&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.271897810219&quot;&gt;&lt;tr readability=&quot;4.543795620438&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;My biggest question would be what modern means to you? Does it mean the style of the newest popular C project? The newest standard (C11)? And what devices are you using C for? I'd assume a standard POSIX environment, but you can't be sure with C.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536269&quot; readability=&quot;4.1463414634146&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538045&quot; readability=&quot;4.6694214876033&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3347107438017&quot;&gt;&lt;tr readability=&quot;4.6694214876033&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.6694214876033&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8684210526316&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I have a question on this topic which is - is it possible or practical to only learn &quot;modern&quot; C++?&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Isn't it necessary to be able to understand pre-modern C++ in legacy code bases or to work alongside a co-worker who might code using an older style? Or even to be able to understand documentation and texts about C++ from an earlier era? &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538287&quot; readability=&quot;9.5821325648415&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.7910662824207&quot;&gt;&lt;tr readability=&quot;9.5821325648415&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;9.5821325648415&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;18.857784431138&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I share your concern. Even if one isn't (knowingly) dealing with older C++ code, &lt;em&gt;all&lt;/em&gt; of the language rules apply to every line of C++ being compiled.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Just one typo, or misguided use of syntax, and a person might be using some &quot;older&quot; revision of the language without knowing it. And I'm not aware of any tool that will warn the programmer that he/she has done that.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;So I'm concerned that programmers schooled only in &quot;modern&quot; C++ will fail to understand that this has occurred, and will either (a) get error messages that don't understand, or (b) get program behavior that they don't anticipate.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;I'm curious if people have found this to be a problem in practice. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16539199&quot; readability=&quot;4.7669902912621&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3834951456311&quot;&gt;&lt;tr readability=&quot;4.7669902912621&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.1504854368932&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;13.858299595142&quot;&gt;&lt;span class=&quot;c00&quot;&gt;&amp;gt;&quot;I'm curious if people have found this to be a problem in practice.&quot;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Same. And I think you articulated the specific concerns I have about just learning the &quot;modern&quot; version.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;It would certainly lower the barrier to entry in learning C++ if this was an unfounded concern.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;C++ has some 35 year of history and changes at this point. This point alone adds(for me anyway) to the perceived cognitive load of learning it. C also has a similar length of history but it is a much smaller language. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536530&quot; readability=&quot;3.551867219917&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7759336099585&quot;&gt;&lt;tr readability=&quot;3.551867219917&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Build simple command line programs with it and use first a simple editor like Code::Blocks. Best thing to stop you learning C++ is using one of this beasts like VisualStudio and start with Windows programming ;)&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537327&quot; readability=&quot;7.3953488372093&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.6976744186047&quot;&gt;&lt;tr readability=&quot;7.3953488372093&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.0087209302326&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.81308411215&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Writing a piece of software in C++.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Sizing the softare to fit your schedule: i.e., if you want to be at the level of BJS, write a C++ compiler; if you want to be as good as Google employee, uses the common Google c++ libraries Protobuf ABSL etc. to write a simple webserver with a few APIs. The list goes on and on. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536870&quot; readability=&quot;2.9955947136564&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537580&quot; readability=&quot;0.73109243697479&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536856&quot; readability=&quot;6.5448916408669&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2724458204334&quot;&gt;&lt;tr readability=&quot;6.5448916408669&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.2074303405573&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.8688524590164&quot;&gt;&lt;span class=&quot;c00&quot;&gt;If you haven't already I'd suggest learning a functional language first, then coming back to modern C++, because much of the new features are borrowed from other languages.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Personally I started doing this then never went back. Seems most of the jobs out there for C++ really aren't that interesting. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538144&quot; readability=&quot;15.389913899139&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;7.6949569495695&quot;&gt;&lt;tr readability=&quot;15.389913899139&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;10.09963099631&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;19.872611464968&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Absolutely unnecessary. Modern C++ borrowed some paradigms of functional programming, but learning a functional language isn’t remotely close to being a prerequisite to learning those features.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;In terms of jobs, C++ is used heavily, if not the majority of the time in: AAA game development, high performance computing, high frequency trading and quantitative finance, embedded software, image processing and computer vision... honestly, I focused on C++ out of school years ago BECAUSE of how interesting many of the jobs are. They’re also generally more stable and thus competitive over time compared to e.g. web dev, enterprise software, and so on, because the domain knowledge required means you’re a lot more valuable than knowing X and Y design pattern or framework Z. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536891&quot; readability=&quot;2.6&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.3&quot;&gt;&lt;tr readability=&quot;2.6&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Similarly to how one should learn Italian or Latin if they want to learn French. It will be impossible for them to communicate.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536796&quot; readability=&quot;10.746359223301&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.3731796116505&quot;&gt;&lt;tr readability=&quot;10.746359223301&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.3270631067961&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;13.913366336634&quot;&gt;&lt;span class=&quot;c00&quot;&gt;As others noted best way to learn is to use it. Pick any open source you like, compile and test it, learn it's code, try to fix some bugs or implement features, ask questions from other developers, get feedback on your code. That way you'll learn all caveats of practical C++ development and tools.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Additionally while traditional and more detailed books already posted here I'll just add one I personally liked: Discovering Modern C++ by Peter Gottschling. It's had exactly information I would expect be needed for person who already have reasonable experience in programming, but want short introduction into C++.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Disclaimer: I'm certainly not someone you can call experienced C++ programmer since I just developing and manage open source project for 3+ years. So take my opinion with a grain of salt. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536610&quot; readability=&quot;5.4947368421053&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7473684210526&quot;&gt;&lt;tr readability=&quot;5.4947368421053&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Best way to learn anything new, is just pick a pet project you've been thinking about, and implement it in that language/database/system/whatever. That's how I've always done it over the years. You end up constantly building upon the last projects knowledge.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538920&quot; readability=&quot;3.8495575221239&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16539268&quot; readability=&quot;5.2718446601942&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6359223300971&quot;&gt;&lt;tr readability=&quot;5.2718446601942&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;For this, I can't point to any one source, but I highly suggest looking at the implementations of the C++11 type_traits header. Building off of that would be a great second step.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537158&quot; readability=&quot;0.94818652849741&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536207&quot; readability=&quot;3.6527777777778&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.8263888888889&quot;&gt;&lt;tr readability=&quot;3.6527777777778&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.0225694444444&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.812030075188&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Read Stroustrup's blue book (The C++ Programming Language 4th edition); chapter 1 will teach you a LOT.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Then read Meyer's Effective modern C++.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;And then have a local copy of cppreference.com (they provide a zip you can download) and set yourself some projects. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536666&quot; readability=&quot;8.5764705882353&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.2882352941176&quot;&gt;&lt;tr readability=&quot;8.5764705882353&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.1470588235294&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;13.828431372549&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Do you mind asking 'Why C++'?&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;I know that doesn't answer your question and to be honest, I am curious about the resources which come up here too, but C++ can be so painful to learn that I wanted to know what drives you into that direction. I mean, there are alternatives like Rust. Do you have a specific project in mind, need it to fulfill some résumé requirements or something completely different? &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537036&quot; readability=&quot;7.6589698046181&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.8294849023091&quot;&gt;&lt;tr readability=&quot;7.6589698046181&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.1376554174067&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;15.852398523985&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Depending on the direction you want to go in your career, it's still a &lt;em&gt;major&lt;/em&gt; need.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Any complex or high-performance computing relies on C/C++ pretty heavily still.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;It's also a good tool to have in your box for building well-performing cross-platform native apps with Qt.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;I say this as one who's probably at the same stage as OP. Know some C, and reasonably comfortable with the basics. Application of C++ is a little more widespread outside of strict embedded environments, however. (Another space I personally want to immerse myself in) &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538344&quot; readability=&quot;2.580310880829&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2901554404145&quot;&gt;&lt;tr readability=&quot;2.580310880829&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.440414507772&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.792899408284&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Qt is about the last library I'd call modern in terms of C++ dialect it employs or requires...&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;(There are worse but deprecated like MFC. Or on par like wxWidgets.) &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538600&quot; readability=&quot;3.4177215189873&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7088607594937&quot;&gt;&lt;tr readability=&quot;3.4177215189873&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I suspect your intel on Qt's C++ use is a bit out of date. Qt nowadays uses (and requires) C++11, as well as more modern constructs.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16539417&quot; readability=&quot;3.4&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7&quot;&gt;&lt;tr readability=&quot;3.4&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Qt may be inspired by modern C++, but you don't get hands on experience using the STL since Qt re-implements almost the entire thing.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536700&quot; readability=&quot;10.696361355082&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.3481806775408&quot;&gt;&lt;tr readability=&quot;10.696361355082&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;11.182559598494&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;21.858611825193&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Not OP, but good question.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;I find Rust is a much better language, but there are very few mature libraries right now if you do something outside the scope of what Mozilla is doing. Also very few companies that are working in Rust (AFAIK, if you know some let me know) looking for devs.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;If you want to work in a company that is doing any kind of low level code you will either need C or C++ as a foundation. At least to understand existing code. Most companies won't just rewrite everything in Rust, no matter how good the language is.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;I really hope Rust replaces C++ for new projects, but it's just too new to tell whether that will happen. I find there's a bit more momentum (and good ideas) than in D, but nobody can predict the future from 2-3 years of language history. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536857&quot; readability=&quot;7.4826789838337&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.7413394919169&quot;&gt;&lt;tr readability=&quot;7.4826789838337&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.4826789838337&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;14.816176470588&quot;&gt;&lt;span class=&quot;c00&quot;&gt;&amp;gt; if you know some let me know&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;“This Week in Rust” lists explicit job postings. One of the latest companies looking for Rust programmers is a little company you may have heard of: Facebook.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;That said, many places are hiring &lt;em&gt;good programmers&lt;/em&gt; and putting them on Rust projects, rather than hiring Rust programmers explicitly. There aren’t many pure Rust shops yet, so they need a broader skill set. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538457&quot; readability=&quot;2.5352112676056&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2676056338028&quot;&gt;&lt;tr readability=&quot;2.5352112676056&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I'm pretty good in C as well (less C++). I just would like to know beforehand if I could grow into a Rust role there.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538853&quot; readability=&quot;3.8617886178862&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536906&quot; readability=&quot;8.576017130621&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.2880085653105&quot;&gt;&lt;tr readability=&quot;8.576017130621&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.0995717344754&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;15.821428571429&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Indeed.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;I still haven't grasped Rust as much as I'd like, but I have to admit that at least it feels like every part of the language fits nicely together with the others, as opposed to the &quot;messy spaghetti&quot; feel I get from C++ (though this is of course my subjective impression).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;There are things I'd like they do, like removing the Python 2 dependency for building from source, or &lt;em&gt;actually&lt;/em&gt; writing a spec. But I guess that'll come with time. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538481&quot; readability=&quot;4.5719844357977&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2859922178988&quot;&gt;&lt;tr readability=&quot;4.5719844357977&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I never built from source, so Python 2 dependency for that didn't bother me. I kind of like the documentation as spec as long as the language is still evolving so quickly. Maintaining separate documents would be more difficult here.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536773&quot; readability=&quot;5.5862068965517&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7931034482759&quot;&gt;&lt;tr readability=&quot;5.5862068965517&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I find this comment a bit odd... Not everyone works at a startup and 90% of development work is improving existing codebases, not starting new projects. There's just SO MANY existing C++ codebases out there that people are paid to work on. I had to (re)learn C++ for a project at work recently.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536985&quot; readability=&quot;5.2885375494071&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6442687747036&quot;&gt;&lt;tr readability=&quot;5.2885375494071&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Why C++ over Rust? Rust is still in very early stages. The compiler, tools, ide and library support is world's away from where rust is at the moment. Language design is one part of many that helps with software creation.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538496&quot; readability=&quot;1.4794520547945&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537276&quot; readability=&quot;3.8018433179724&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536362&quot; readability=&quot;8.3470031545741&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.1735015772871&quot;&gt;&lt;tr readability=&quot;8.3470031545741&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Before diving into smart pointers, move semantics and other (mostly) recent additions, I would recommend getting well acquainted with the basics: RAII and common patterns such as passing by constant reference. Effective C++ by Scott Meyers, as others have noted, is an excellent entry point.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537250&quot; readability=&quot;3.6286919831224&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.8143459915612&quot;&gt;&lt;tr readability=&quot;3.6286919831224&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I usually get bogged down by the syntax of very many complex things that gets me lose the focus on the motive of the code. I wish we had an efficient way to learn what a declaration means. (On the lines of cdecl)&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536987&quot; readability=&quot;5.3106382978723&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6553191489362&quot;&gt;&lt;tr readability=&quot;5.3106382978723&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Take a look at how the standard library does things, and particularly anything for which it is not clear to you how one might implement it, or the use of anything whose purpose you don't really understand.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537016&quot; readability=&quot;3.3191489361702&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6595744680851&quot;&gt;&lt;tr readability=&quot;3.3191489361702&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Large parts of the standard library are designed badly. E.g. io streams are horrible, allocators are questionable.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538352&quot; readability=&quot;5.25&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.625&quot;&gt;&lt;tr readability=&quot;5.25&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.8125&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.7572815533981&quot;&gt;&lt;span class=&quot;c00&quot;&gt;&amp;gt; Large parts of the standard library are designed badly.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;That's true, but IMO it's useful to study the standard library to understand &lt;em&gt;what it offers&lt;/em&gt;, as opposed to examples of well-designed C++ code. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538582&quot; readability=&quot;6.7547445255474&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.3773722627737&quot;&gt;&lt;tr readability=&quot;6.7547445255474&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.2372262773723&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;13.894578313253&quot;&gt;&lt;span class=&quot;c00&quot;&gt;People who spent many years developing C++ already understand what the standard library offers, regardless on whether they studied that deliberately.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;People coming to the language lack the expertise to tell well-designed code from bad-designed. It’s tempting to treat the whole standard library as an example of the former.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Maybe that’s a personal thing but I remember doing that when I just started my career back in 2000. STL wasn’t quite there but MFC was already in wide use. Because I lacked the experience I considered whatever’s there is good, and ended up using not so good parts such as C++ exceptions and macro-driven dynamic serialization. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538433&quot; readability=&quot;5.1202346041056&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.5601173020528&quot;&gt;&lt;tr readability=&quot;5.1202346041056&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.6935483870968&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.0595611285266&quot;&gt;&lt;span class=&quot;c5a&quot;&gt;I don't see openFrameworks mentioned here: &lt;a href=&quot;http://openframeworks.cc/&quot; rel=&quot;nofollow&quot;&gt;http://openframeworks.cc/&lt;/a&gt;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c5a&quot;&gt;Probably the most comprehensive open-source creative coding framework. Maybe most helpful for familiarity with graphics programming / OpenGL, but it really extends to all types of possible interactions. Maintained by an awesome group of people. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538473&quot; readability=&quot;7.2103004291845&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.6051502145923&quot;&gt;&lt;tr readability=&quot;7.2103004291845&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;OpenFrameworks has nothing to do with _modern_ C++. It’s a framework for laymen artists that happens to be written in C++. It won’t teach you about move semantics, lambdas, unique_ptr, for-in loops, etc.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536726&quot; readability=&quot;3.3377483443709&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6688741721854&quot;&gt;&lt;tr readability=&quot;3.3377483443709&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Related: Any good websites to practice C++ with challenges? I've heard some things about CodeWars, but are there any other?&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537011&quot; readability=&quot;3.4557823129252&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7278911564626&quot;&gt;&lt;tr readability=&quot;3.4557823129252&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I think you can use C++ in code challenges in all major coding riddles practice sites eg. Hackerrank, Leetcode and TopCoder.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537375&quot; readability=&quot;1.4634146341463&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536399&quot; readability=&quot;4.3434343434343&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536927&quot; readability=&quot;1.016393442623&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536358&quot; readability=&quot;1.2692307692308&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536196&quot; readability=&quot;7.1969111969112&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.5984555984556&quot;&gt;&lt;tr readability=&quot;7.1969111969112&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.8474903474903&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.745762711864&quot;&gt;&lt;span class=&quot;c88&quot;&gt;May I ask why do you want to learn modern C++?&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c88&quot;&gt;You should check out Rust, it aims to replace C++ and do a better job in memory management, and developer experience in general (cross-platform compatibility, package management, etc) &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536219&quot; readability=&quot;2.4893617021277&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2446808510638&quot;&gt;&lt;tr readability=&quot;2.4893617021277&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;One motivation to learn C÷÷ could be to find a job. Rust looks interesting but C++ is still vastly more popular.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536258&quot; readability=&quot;10.419161676647&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.2095808383234&quot;&gt;&lt;tr readability=&quot;10.419161676647&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.3802395209581&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;15.459459459459&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Rust still needs to catch up with C++ in a few domains.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;SIMD, GPGPU, GUI, embedded platforms, iOS, Android, UWP, COM, certified compilers, ... &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536580&quot; readability=&quot;3.2432432432432&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6216216216216&quot;&gt;&lt;tr readability=&quot;3.2432432432432&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Incidentally, SIMD is just waiting on stabilization now; it’s RFC was accepted and the implementation landed. Soon!&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537962&quot; readability=&quot;3.3411764705882&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6705882352941&quot;&gt;&lt;tr readability=&quot;3.3411764705882&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Will Rust have idioms for really doing SIMD &lt;em&gt;in Rust&lt;/em&gt;? If I understand correctly, C++ has to drop into assembly to do SIMD (at least so far).&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538178&quot; readability=&quot;10.169491525424&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538078&quot; readability=&quot;5.37&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.685&quot;&gt;&lt;tr readability=&quot;5.37&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.8175&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.67032967033&quot;&gt;&lt;span class=&quot;c00&quot;&gt;C++ doesn't need Assembly for SIMD.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Most compilers do a reasonable job with auto-vectorization, and if more is needed, there are instrisics.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;No need to write straight Assembly. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538164&quot; readability=&quot;7.4523227383863&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.7261613691932&quot;&gt;&lt;tr readability=&quot;7.4523227383863&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.6577017114914&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8828125&quot;&gt;&lt;span class=&quot;c00&quot;&gt;OK. (The one time I encountered SIMD in C++ was a decade ago; we had to use assembly then. And even then, we weren't playing with an up-to-the-minute compiler. (In my experience, your comments elsewhere on this article about embedded toolchains were accurate.)&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Are the intrinsics standard? If so, what version of the standard were they in? How good is compiler support for them? &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538501&quot; readability=&quot;8.4489795918367&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.2244897959184&quot;&gt;&lt;tr readability=&quot;8.4489795918367&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;240&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.9795918367347&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;15.808153477218&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Not standard, unless you count &quot;supported with the same semantics in multiple compilers&quot; as good enough.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;They are not portable between CPU architectures either way&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;For reference, C got real alignment support in C11 and C++ in C++17. Without this, even starting on SIMD is risky.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;That said, you can go really far with a good C++ math library like Eigen which has singe vectorization in the operations themselves. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536376&quot; readability=&quot;1.4202898550725&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536404&quot; readability=&quot;4.9512195121951&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536744&quot; readability=&quot;3.3093525179856&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6546762589928&quot;&gt;&lt;tr readability=&quot;3.3093525179856&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;As a programmer using the compiler, how does the IAR compiler quality feel in practice compared to GCC or clang?&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536881&quot; readability=&quot;9.5906432748538&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.7953216374269&quot;&gt;&lt;tr readability=&quot;9.5906432748538&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.1520467836257&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;15.838383838384&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I never used IAR, given my focus on writing safe software I try to be up to date to these areas, and ways to somehow write secure software in C and C++. like MISRA and Frama-C.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Maybe someone else can jump in.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;However, I can tell you that in general proprietary compilers for embedded devices make Visual C++ feel state of the art, let alone when compared with gcc or clang.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Many of them are stuck in partial support for C99 or C++98 (e.g. TI), with no clear roadmap of future improvements. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536253&quot; readability=&quot;2.1724137931034&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536370&quot; readability=&quot;1.4432989690722&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536578&quot; readability=&quot;8.3202416918429&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.1601208459215&quot;&gt;&lt;tr readability=&quot;8.3202416918429&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.0090634441088&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.805825242718&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Yup. D had a shot, but they screwed it up with (effectively) mandatory garbage collection.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Ada also had a shot, I think, but they screwed it up with no C compatibility and expensive SDKs - or something. For some reason, Ada is just not perceived as &quot;cool&quot;. It actually seems like a pretty good language! &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536717&quot; readability=&quot;11.695652173913&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.8478260869565&quot;&gt;&lt;tr readability=&quot;11.695652173913&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;12.670289855072&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;24.845679012346&quot;&gt;&lt;span class=&quot;c00&quot;&gt;The issue with D is not mandatory garbage collection, rather its quality and anti-GC religion.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Joe Duffy mentioned on his Rustconf talk that Windows devs even with Midori running in front of them, it was still a very hard sell for them to psychology accept it as doable.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;The problem with Ada was basically expensive SDK, Pascal-like syntax and not being part of OS SDKs.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Only systems programming languages that are bundled with OS SDKs survive on the market, others either get a niche (Ada - high integrity systems) or fade into oblivion/maintenance (Modula-2, Delphi, ...).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;The main reason being, companies already payed for OS SDK or gotten it for free with the OS.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Any other language must add a very worthwhile set of benefits for them to look beyond the SDK and possible toolchain integration issues. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538667&quot; readability=&quot;10.656679151061&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.3283395755306&quot;&gt;&lt;tr readability=&quot;10.656679151061&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;11.141073657928&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;21.858793324775&quot;&gt;&lt;span class=&quot;c00&quot;&gt;&amp;gt; Windows devs even with Midori running in front of them,&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;There were GC'ed operating systems in the 80s. The point is not this. It's writing applications where you can maximize your CPU usage.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;If it's a game, it means that you want to write your code so that the highest number of objects are visible on screen and are being updated on each tick. If its's a multimedia software, you want to be able to run most sounds / videos in parallel at the same time. If it's an interpreter, you want to have the highest instructions-per-second count.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;etc etc... the point is not to have &quot;good enough&quot; performance, it never has been as soon as you use non-trivial apps. It's always &quot;how fast can it be&quot; / &quot;how far can I push it&quot;, and an implicit language-level GC puts limits to this. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16539017&quot; readability=&quot;7.7047451669596&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.8523725834798&quot;&gt;&lt;tr readability=&quot;7.7047451669596&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;240&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.1862917398946&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;15.854809437387&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Having a GC enabled OS doesn't mean the GC runs all the time or it is the only way of allocating memory.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;The last generations of Oberon OS had support for video editing applications as an example.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;There are real time GC applications in production being used to control weapons systems, including live targeting and soft real time factory automation systems.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Regarding D, using &lt;em&gt;@nogc&lt;/em&gt; or &lt;em&gt;-vgc&lt;/em&gt; allows the developer to control when the GC works, it at all. What the language lacks is a GC that can match real-time GCs used in soft real time systems. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538073&quot; readability=&quot;5.2727272727273&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6363636363636&quot;&gt;&lt;tr readability=&quot;5.2727272727273&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.2727272727273&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.733009708738&quot;&gt;&lt;span class=&quot;c00&quot;&gt;&amp;gt; Only systems programming languages that are bundled with OS SDKs survive on the market...&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Hmm. To Rust, this would seem to say &quot;get bundled or die&quot;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;In your view, is it enough to be a free download? &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538626&quot; readability=&quot;16.698224852071&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;8.3491124260355&quot;&gt;&lt;tr readability=&quot;16.698224852071&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;240&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;20.627218934911&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;40.824034334764&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I don't see a free download as being enough.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;At very least, there needs to exist painless interoperability with the SDK toolchain, debugging tools, IDE, platform libraries.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Every piece of the puzzle that doesn't quite work like the SDK tools, means additional development/debugging effort.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Naturally the big question is always if the added benefit of using language X outside the expected workflow outweighs the extra development costs.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Just look at C++, it was on the path of being widely adopted by desktop OSes, every C compiler vendor was adding support for it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Then BSD and Linux large scale adoption happened with GNU manifesto favouring C as the language to write portable software, Java and .NET came into the scene.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Microsoft was probably the only major OS vendor still caring about it, until LLVM happened and the wind started blowing again with C++11.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;The embedded space is still an area where C++ is hardly seen, with a few conference talks last year discussing on how to advocate for it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Now all major C compilers are written in C++, but had Microsoft focused only on .NET or LLVM never happened, and history would probably followed another path. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536722&quot; readability=&quot;3.2542372881356&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6271186440678&quot;&gt;&lt;tr readability=&quot;3.2542372881356&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;ADA is really good, but too much word vomit and the compilers (used to?) cost a lot of money.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536564&quot; readability=&quot;1.5483870967742&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536628&quot; readability=&quot;6.4336569579288&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2168284789644&quot;&gt;&lt;tr readability=&quot;6.4336569579288&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Only in a very strict interpretation that everything that is still used somewhere didn't get replaced. Perl was more or less replaced, for example, and I like that. The only kind of originality that is good in programming is &quot;surprisingly simple&quot;. &quot;Surprisingly weird&quot; is terrible.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536798&quot; readability=&quot;6.6674208144796&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.3337104072398&quot;&gt;&lt;tr readability=&quot;6.6674208144796&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.7149321266968&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.870283018868&quot;&gt;&lt;span class=&quot;c00&quot;&gt;You're going to get at least 1 angry Perl programmer explaining that Perl is actually thriving and it's never been better to be a Perl programmer :p&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Which is actually partially true... the long tail of programming languages today is very, very big. There's probably 10-50x more programmers now than there were back in 1995. The programming world can probably sustain 10-20 mainstream languages these days, if not more. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537190&quot; readability=&quot;5.7179487179487&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8589743589744&quot;&gt;&lt;tr readability=&quot;5.7179487179487&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;240&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.1474358974359&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;13.844097995546&quot;&gt;&lt;span class=&quot;c00&quot;&gt;&amp;gt;&amp;gt;Perl is actually thriving and it's never been better to be a Perl programmer :p&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Don't know about that. But only yesterday afternoon I spent like 2 hours writing a Perl script to heavy lift some Unix file work, Which I factored would take a week at-least to do in any other language.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Perl is still largely a very useful language without any replacements. So are awk and sed.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Web development world seems to have moved on to something else now. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537359&quot; readability=&quot;6.6181818181818&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.3090909090909&quot;&gt;&lt;tr readability=&quot;6.6181818181818&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;280&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.7272727272727&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8773841961853&quot;&gt;&lt;span class=&quot;c00&quot;&gt;&amp;gt; But only yesterday afternoon I spent like 2 hours writing a Perl script to heavy lift some Unix file work, which I factored would take a week at-least to do in any other language.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;I'm guessing you're more familiar with Perl, because I personally find it hard to believe that Perl by itself is an order of magnitude more efficient to write than Python or Ruby. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537498&quot; readability=&quot;0.35714285714286&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538149&quot; readability=&quot;0.53333333333333&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536395&quot; readability=&quot;6.3152173913043&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.1576086956522&quot;&gt;&lt;tr readability=&quot;6.3152173913043&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I'm not the OP, but I'm tempted to learn more C++ so that I can directly use Qt without relying on language bindings for it. I like the idea of Rust, and maybe some day I'll tinker with it, but it looks like it has quite the steep learning curve.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536574&quot; readability=&quot;13.495495495495&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;6.7477477477477&quot;&gt;&lt;tr readability=&quot;13.495495495495&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;11.567567567568&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;22.847074468085&quot;&gt;&lt;span class=&quot;c00&quot;&gt;First of all, I should say that I feel like bringing up Rust in this thread is inappropriate, and I’m glad the OP was downvoted.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;To comment briefly on the learning curve, the trade off is basically, C++ is easier to get started, but harder on the high end. Rust is a bit harder for C people to get started, but then the high end is much easier. Rust’s curve is flatter, in a sense.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Oh and also: learning one will certainly help you learn the other in many cases. I advocate learning many languages :)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;This week I’m visiting a ~700 person company in London that’s moving away from C and towards Rust. They’re not doing a Big Rewrite, obviously, so they still have quite a bit of C too. They chose Rust over C++ though. It always depends! &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536747&quot; readability=&quot;5.6413043478261&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.820652173913&quot;&gt;&lt;tr readability=&quot;5.6413043478261&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.1711956521739&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.8567335243553&quot;&gt;&lt;span class=&quot;c00&quot;&gt;&amp;gt;Oh and also: learning one will certainly help you learn the other in many cases. I advocate learning many languages :)&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Especially the Rust borrow checker will make you mad in the first place, and then teach you something about memory management you will be able to use in C++. It really improves your mental model in places you didn't expect. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538123&quot; readability=&quot;1.4588235294118&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538214&quot; readability=&quot;7.1181102362205&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.5590551181102&quot;&gt;&lt;tr readability=&quot;7.1181102362205&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.3385826771654&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.759825327511&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Yes and no. The idea is the same, the implementation is very different.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Rust is “move by default, move always means memcpy (and they often can be elided), no move constructors,” to (possibly too) succinctly describe it. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16536221&quot; readability=&quot;3.2293577981651&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6146788990826&quot;&gt;&lt;tr readability=&quot;3.2293577981651&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Mostly because of adoption. Rust is great, but I'm not really into it (subjectively).&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537740&quot; readability=&quot;5.3513513513514&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6756756756757&quot;&gt;&lt;tr readability=&quot;5.3513513513514&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.2432432432432&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.835309617918&quot;&gt;&lt;span class=&quot;c9c&quot;&gt;C++ is just C with extra notation for easy modeling of Classes and Objects. While C still remains valuable, C++ is in my opinion questionable and there are many excellent alternatives like Java or C# for doing similar things and much more. I have programmed in C++ for many years and honestly would not suggest it to any one but anyway here are some excellent resources.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c9c&quot;&gt;ftp://bitsavers.informatik.uni-stuttgart.de/pdf/borland/borland_C++/Borland_C++_Version_2.0_Getting_Started_1991.pdf (Read chapter 4 C++Primer. The hole folder is a rare jewel)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c9c&quot;&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/cpp/cpp/cpp-language-reference&quot; rel=&quot;nofollow&quot;&gt;https://docs.microsoft.com/en-us/cpp/cpp/cpp-language-refere...&lt;/a&gt; Probably the best documentation of C++ by far.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c9c&quot;&gt;P.S. If you are desperate on learning C++ I could give short course saving you time and money. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16537852&quot; readability=&quot;4.5614035087719&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.280701754386&quot;&gt;&lt;tr readability=&quot;4.5614035087719&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.5614035087719&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.7867298578199&quot;&gt;&lt;span class=&quot;c00&quot;&gt;&amp;gt; C++ is just C with extra notation for easy modeling of Classes and Objects.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;That's far from true today, and I'd even argue it hasn't been true since very early on. Simple example to prove my point: RAII. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538087&quot; readability=&quot;3.6545801526718&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538568&quot; readability=&quot;3.5348837209302&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7674418604651&quot;&gt;&lt;tr readability=&quot;3.5348837209302&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;That's quite irrelevant to the conversation though, we weren't talking about whether OOP is good or not. C++ is very far from &quot;C with classes&quot; today.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16538642&quot; readability=&quot;2.6272189349112&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.3136094674556&quot;&gt;&lt;tr readability=&quot;2.6272189349112&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c73&quot;&gt;Ok but still OOP is the central idea and also there is this trend the most annoying one to always try modeling everything as classes and objects.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Wed, 07 Mar 2018 12:19:54 +0000</pubDate>
<dc:creator>jxub</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=16535886</dc:identifier>
</item>
<item>
<title>Fund ideas, not pedigree, to find fresh insight</title>
<link>https://www.nature.com/articles/d41586-018-02743-2</link>
<guid isPermaLink="true" >https://www.nature.com/articles/d41586-018-02743-2</guid>
<description>&lt;div class=&quot;content position-relative cleared clear mq1200-padded&quot; data-component=&quot;article-container&quot; role=&quot;main&quot;&gt;
&lt;header class=&quot;article-item__header clear cleared pull--both&quot;&gt;&lt;div class=&quot;article__type&quot;&gt;WORLD VIEW
&lt;div class=&quot;ml10 article__date&quot;&gt;&lt;time itemprop=&quot;datePublished&quot;&gt;06 March 2018&lt;/time&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;article-item__author-image&quot;&gt;&lt;img src=&quot;https://media.nature.com/w300/magazine-assets/d41586-018-02743-2/d41586-018-02743-2_15506788.jpg&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;article-item__teaser-text serif&quot;&gt;Anonymous applications free scientists to make bold proposals, and ‘golden tickets’ free reviewers to bet on them, says Thomas Sinkjær.&lt;/div&gt;
&lt;/header&gt;
&lt;div class=&quot;bordered-container clear cleared pull--both&quot;&gt;
&lt;div id=&quot;author-affiliations&quot; class=&quot;tab-group text14&quot; role=&quot;tablist&quot; data-test=&quot;author-affiliations&quot; data-tab-group=&quot;&quot;&gt;
&lt;div class=&quot;cleared&quot;&gt;
&lt;div id=&quot;author-affiliation-news-0&quot; class=&quot;tab-box js-box-wrapper&quot; role=&quot;presentation&quot;&gt;
&lt;h3 id=&quot;author-affiliation-news-0-head&quot; data-track=&quot;click&quot; data-track-label=&quot;view author info&quot; class=&quot;sans-serif strong tab tab-skin&quot; role=&quot;tab&quot; aria-controls=&quot;author-affiliation-news-0-content&quot; data-tooltip=&quot;Show author information&quot;&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;icon icon-right-top icon-mail-12x9-blue pr15 js-no-scroll&quot;&gt;Thomas Sinkjær&lt;/a&gt;&lt;/h3&gt;
&lt;div id=&quot;author-affiliation-news-0-content&quot; class=&quot;tab-content pin-right grid grid-12 last&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;pa10&quot; aria-labelledby=&quot;author-affiliation-news-0-head&quot;&gt;
&lt;div class=&quot;clear cleared&quot;&gt;
&lt;div class=&quot;align-left&quot;&gt;
&lt;div&gt;Thomas Sinkjær is a professor at Aalborg University and senior vice-president for grants and prizes at the Lundbeck Foundation in Copenhagen.&lt;/div&gt;
&lt;a href=&quot;https://www.nature.com/articles/d41586-018-02743-2/email/correspondent/c1/new&quot; data-track=&quot;click&quot; data-track-label=&quot;contact author&quot; class=&quot;icon icon-left icon-mail-12x9-blue pl15 js-no-scroll&quot;&gt;Contact&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;align-right&quot;&gt;
&lt;h4 class=&quot;sans-serif&quot;&gt;Search for this author in:&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;align-left&quot;&gt;
&lt;div class=&quot;article__body serif cleared&quot;&gt;
&lt;p&gt;About five years ago, when I was director of the Danish National Research Foundation in Copenhagen, I held focus groups to ask postdocs and early-career researchers how funders might further their work. Members of the board and I spoke with more than 400 young scientists and kept hearing the same depressing refrain: many were writing grants not for work they really wanted to do, but for projects they thought could get funded. Often, they were not even bringing their best ideas to the table.&lt;/p&gt;
&lt;p&gt;And why would they? Grant review tends to be biased against innovation; researchers’ best shot at funding is proposing the same sort of work that they have already proved they can do. Although there is some evidence to suggest that peer review can distinguish solid research from poor research, it is not clear that it can identify the very best — especially as falling funding rates demand that reviewers make finer and finer distinctions when selecting which projects to support.&lt;/p&gt;
&lt;p&gt;One way to improve the situation is for funders to try different schemes and share their experiences. The Villum Fonden is the largest philanthropic foundation in Denmark for the support of technical and natural-science research. Such foundations have more leeway than organizations funded by taxpayers to experiment with different ways of selecting which research to finance.&lt;/p&gt;
&lt;p&gt;Two years ago, when I was director of science at the foundation, we set up a project that we hoped would support innovative ideas by evaluating applications in an unusual way. Assessment of research proposals would be blinded and based on a three-page description. Evaluators would have no information on the applicant’s background or publishing record. By coincidence, I learned that the Volkswagen Foundation in Hanover, Germany, was running a similar scheme; we both hoped to gather evidence on how grant review worked. Each foundation had, independently, dubbed its new scheme ‘Experiment’.&lt;/p&gt;
&lt;p&gt;In January 2017, the Villum Experiment called for “science so risky that applicants would not normally consider putting forward the project for funding”. We committed about 15% of our annual funds to this sort of research. We recruited evaluators whom we thought (by reputation) would be particularly able to judge risky ideas — for example, people we knew to have discussed new ways of funding research. They ranked each application they read. Each reviewer was also given one ‘golden ticket’ — a right to fund an application, no matter what their fellow reviewers said.&lt;/p&gt;
&lt;p&gt;Funding rates at both foundations were just over 10% of the applications submitted for this call. Recipients included both postdocs and department heads, and about one-third of successful applicants were under the age of 40. So far, the Villum Foundation has awarded 39 grants of up to two years each, and the Volkswagen scheme 96 of up to 18 months; overall, each grant is worth from about €120,000 (US$148,000) to €250,000. In the Villum model, 31% were funded on the basis of golden tickets. Although all golden-ticket grants scored better than most others in this call, about half would not have been funded if based on cumulative scores from all reviewers. In the Volkswagen scheme, 11% were golden tickets, none of which would have been funded otherwise.&lt;/p&gt;
&lt;p&gt;In a survey, about half of the recipients said that had the call for unorthodox ideas not been anonymous, they would not have proposed their winning idea — they didn’t think they had a shot if judged on their publishing track records. Reviewers said that they liked evaluating ideas without knowing the applicant’s past performance.&lt;/p&gt;
&lt;p&gt;There are wrinkles to iron out. Some reviewers are concerned that if junior researchers’ risky ideas don’t work out, promising scholars will have missed a chance to pursue more-conservative projects. Others warn that recipients might not be qualified to carry out their plans. It is too soon to know, and we want to learn more. The second round of applications closes on 21 March.&lt;/p&gt;
&lt;p&gt;Meanwhile, we want to work out how to bring in more ideas. We asked applicants what might have kept colleagues from applying. Answers included discomfort with risky projects; concerns that funding decisions would be haphazard; short-duration and limited funds; the inability to simply reuse another application; and a perception that ideas were either not good or risky enough. The numbers are too small to be certain, but there are signs that men are more likely to get funded. Both foundations plan to tweak how applicants and reviewers are recruited — for example, using ungendered text in the call for proposals — and will continue to monitor diversity.&lt;/p&gt;
&lt;p&gt;What interests me most about the experiment is the prospect of better understanding peer review to improve the process. The Bill &amp;amp; Melinda Gates Foundation uses blind review for awards in its Grand Challenges Explorations programme, and New Zealand’s Health Research Council uses a random-number generator to prioritize ‘Explorer’ grant proposals that have fulfilled certain criteria. The global RAND Corporation and an international panel convened by the Canadian Institutes of Health Research have &lt;a href=&quot;https://www.rand.org/blog/2017/04/why-we-need-to-experiment-with-grant-peer-review&quot; data-track=&quot;click&quot; data-label=&quot;https://www.rand.org/blog/2017/04/why-we-need-to-experiment-with-grant-peer-review&quot; data-track-category=&quot;body text link&quot;&gt;compiled an overview of review approaches&lt;/a&gt; and the — limited — empirical evidence for them.&lt;/p&gt;
&lt;p&gt;To paraphrase Winston Churchill, grant peer review might be the worst system, except all the others. Given the massive resources dedicated to it, we need a better evidence base to guide its evolution.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;Nature&lt;/span&gt; &lt;span&gt;&lt;strong&gt;555&lt;/strong&gt;, 143 (2018)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;emphasis&quot;&gt;doi: 10.1038/d41586-018-02743-2&lt;/div&gt;
&lt;div class=&quot;nature-briefing nature-briefing--article cleared&quot; data-track-component=&quot;nature-briefing&quot;&gt;
&lt;header class=&quot;nature-briefing__header&quot;&gt;&lt;span class=&quot;visually-hidden&quot;&gt;Nature Briefing&lt;/span&gt;&lt;/header&gt;&lt;div class=&quot;pa10 pt20&quot;&gt;
&lt;p class=&quot;serif nature-briefing__slogan mr30&quot;&gt;&lt;strong&gt;Sign up for the daily &lt;span class=&quot;emphasis&quot;&gt;Nature Briefing&lt;/span&gt; email newsletter&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;sans-serif nature-briefing__standfirst mr30&quot;&gt;Stay up to date with what matters in science and why, handpicked from &lt;span class=&quot;emphasis&quot;&gt;Nature&lt;/span&gt; and other publications worldwide.&lt;/p&gt;
&lt;p class=&quot;cleared&quot;&gt;&lt;a class=&quot;nature-briefing__link&quot; data-track=&quot;click&quot; data-track-label=&quot;nature briefing article link&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; href=&quot;https://www.nature.com/briefing/signup/&quot;&gt;Sign Up&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;aside class=&quot;article__aside align-right&quot;&gt;&lt;div class=&quot;related-content shrink--aside&quot;&gt;
&lt;h3 class=&quot;aside__title sans-serif&quot;&gt;Related Articles&lt;/h3&gt;
&lt;/div&gt;

&lt;div id=&quot;div-gpt-ad-right-2&quot; class=&quot;div-gpt-ad advert medium-rectangle js-ad text-center hide-print grade-c-hide hide-overflow&quot; data-gpt-unitpath=&quot;/285/nature.com/article&quot; data-gpt-sizes=&quot;300x250&quot; data-gpt-targeting=&quot;template=mosaic;pos=right;abr=!webtv;tile=2;artid=/articles/d41586-018-02743-2&quot;&gt;&lt;noscript&gt;
&lt;p&gt;&lt;a href=&quot;https://pubads.g.doubleclick.net/gampad/jump?iu=/285/nature.com/article&amp;amp;sz=300x250&amp;amp;tile=2&amp;amp;c=1237563514&amp;amp;t=template%3Dmosaic%26pos%3Dright%26abr%3D%21webtv%26tile%3D2%26artid%3D/articles/d41586-018-02743-2&quot;&gt;&lt;img data-test=&quot;gpt-advert-fallback-img&quot; src=&quot;https://pubads.g.doubleclick.net/gampad/ad?iu=/285/nature.com/article&amp;amp;sz=300x250&amp;amp;tile=2&amp;amp;c=1237563514&amp;amp;t=template%3Dmosaic%26pos%3Dright%26abr%3D%21webtv%26tile%3D2%26artid%3D/articles/d41586-018-02743-2&quot; alt=&quot;Advertisement&quot; width=&quot;300&quot; height=&quot;250&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/noscript&gt;&lt;/div&gt;
&lt;/aside&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 07 Mar 2018 11:00:54 +0000</pubDate>
<dc:creator>seagullz</dc:creator>
<og:url>http://www.nature.com/articles/d41586-018-02743-2</og:url>
<og:type>article</og:type>
<og:title>Fund ideas, not pedigree, to find fresh insight</og:title>
<og:description>Anonymous applications free scientists to make bold proposals; ‘golden tickets’ free reviewers to bet on them, says Thomas Sinkjær.</og:description>
<og:image>https://media.nature.com/lw1024/magazine-assets/d41586-018-02743-2/d41586-018-02743-2_15510438.jpg</og:image>
<dc:language>EN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nature.com/articles/d41586-018-02743-2</dc:identifier>
</item>
<item>
<title>Show HN: Convert screenshots of equations to LaTeX</title>
<link>https://mathpix.com/</link>
<guid isPermaLink="true" >https://mathpix.com/</guid>
<description>&lt;p&gt;
            The Mathpix desktop app allows users to take screenshots of math equations and paste the extracted Latex, all with a single keyboard shortcut.
          &lt;/p&gt;
          &lt;p&gt;
            It's an indispensable utility for anyone who works with Latex or wishes to do so.
          &lt;/p&gt;
          
        </description>
<pubDate>Wed, 07 Mar 2018 09:59:46 +0000</pubDate>
<dc:creator>slbenfica</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://mathpix.com/</dc:identifier>
</item>
<item>
<title>Continuing frequency deviation in the Continental European Power System</title>
<link>https://www.entsoe.eu/news-events/announcements/announcements-archive/Pages/News/2018-03-06-press-release-continuing-frequency-deviation-in-the-continental-european-power-system.aspx</link>
<guid isPermaLink="true" >https://www.entsoe.eu/news-events/announcements/announcements-archive/Pages/News/2018-03-06-press-release-continuing-frequency-deviation-in-the-continental-european-power-system.aspx</guid>
<description>&lt;p&gt;​​The Continental European (CE) Power System -a large synchronized area stretching from Spain to Turkey and from Poland to Netherlands; encompassing 25 countries- is experiencing a continuous system frequency deviation from the mean value of 50 Hz, and this since mid of January 2018.&lt;/p&gt;
&lt;p&gt;The power deviations are originating from the control area called Serbia, Macedonia, Montenegro (SMM block) and specifically Kosovo and Serbia. &lt;/p&gt;
&lt;p&gt;The power deviations have led to a slight decrease in the electric frequency average.&lt;/p&gt;
&lt;p&gt;This average frequency deviation, that has never happened in any similar way in the CE Power system, must cease. The missing energy amounts currently to 113 GWh. The question of who will compensate for this loss has to be answered.&lt;/p&gt;
&lt;p&gt;The decrease in frequency average is affecting also those electric clocks that are steered by the frequency of the power system and not by a quartz crystal: they show currently a delay of close to six minutes.  &lt;/p&gt;
&lt;p&gt;ENTSO-E, the association of the European TSOs, is exploring all technical options to address the deviation issue with the concerned TSOs.&lt;/p&gt;
&lt;p&gt;As there is also a political dimension with impact on the functioning of the electricity system, ENTSO-E is urging European and national governments and policy makers to take swift action. These actions need to address the political side of this issue, supporting ENTSO-E’s and the TSOs’ actions to deliver a technical solution.&lt;/p&gt;
&lt;h2 id=&quot;frequently-asked-questions&quot;&gt;&lt;strong&gt;Frequently asked questions&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;What is a synchronous area?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A synchronous electricity grid is a wide area grid covering different countries or region which operates at a synchronized frequency and is electrically tied together during normal system conditions. In Continental Europe, the synchronized frequency is of 50 Hz.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Which countries are part of the Continental Europe synchronous area?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The area is made of 25 countries and covers most of Europe’s continent. Here is a link to the map of the interconnected European Power system: &lt;a href=&quot;https://www.entsoe.eu/Documents/Publications/maps/2017/Map_Continental-Europe-2.500.000_400dpi.pdf&quot;&gt;​Download the map​&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;By how much has the frequency decreased?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can find updated information on the decrease in the average frequency and the time deviation it causes on the website of the Swiss TSO, Swissgrid, that is in charge of monitoring the frequency for the Continental Europe. &lt;a href=&quot;https://www.swissgrid.ch/swissgrid/en/home/experts/topics/frequency.html&quot;&gt;https://www.swissgrid.ch/swissgrid/en/home/experts/topics/frequency.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When does security of supply get affected?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For the system to properly function the frequency cannot go below 47.6 and above 52.4 Hz. At the extreme values of 47.5 (under frequency) and 52.5 (over frequency) all connected generation and devices would automatically disconnect. The average frequency of the period since mid-January 2018 until today was around 49.996 Hz.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where can I see the current frequency?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The transmission system operator in charge of monitoring the frequency in the Continental Europe area is the Swiss TSO, Swissgrid. You can see on its website the current state of the frequency: &lt;a href=&quot;https://www.swissgrid.ch/swissgrid/en/home/experts/topics/frequency.html&quot;&gt;https://www.swissgrid.ch/swissgrid/en/home/experts/topics/frequency.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How are devices like clocks impacted by the frequency average decrease and when would the impact stop?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some clocks are based on the frequency of the power system, and thus run late when the frequency decreases, or run too fast, when the system is in over-frequency. Such clocks are typically radio-, oven clocks or clocks for programming the heating system. These types of electric clocks show now a delay around six minutes. The clocks can be taken back to normal manually, with a second reset needed once the Continental European power system recovers its normal frequency. Alternatively, the clocks will get all back to normal when the deviation has ceased and the frequency is restored to normal.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How and when can the situation be put back to normal?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The first step is to cease the deviation. The second step is to compensate for the missing amount of energy. It is foreseen to solve step 1 this week, while the timeline for step 2 has yet to be decided. Taking the system back to normal could take a few weeks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why do you mention in your press release a political issue and solution?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The political disagreements opposing the Serbian and Kosovar authorities have led to the observed electricity impact. If no solution can be found at political level, a deviation risk could remain.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For media enquiries: please contact the ENTSO-E Communication Team&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Susanne Nies, &lt;a href=&quot;mailto:susanne.nies@entsoe.eu&quot;&gt;susanne.nies@entsoe.eu&lt;/a&gt;, ++32475697895 / Claire Camus, &lt;a href=&quot;mailto:Claire.camus@entsoe.eu&quot;&gt;Claire.camus@entsoe.eu&lt;/a&gt; ++ 32476975093&lt;/p&gt;
​</description>
<pubDate>Wed, 07 Mar 2018 08:31:04 +0000</pubDate>
<dc:creator>Aissen</dc:creator>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.entsoe.eu/news-events/announcements/announcements-archive/Pages/News/2018-03-06-press-release-continuing-frequency-deviation-in-the-continental-european-power-system.aspx</dc:identifier>
</item>
</channel>
</rss>