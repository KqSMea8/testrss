<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Show HN: A simple, fast and user-friendly alternative to find (written in Rust)</title>
<link>https://github.com/sharkdp/fd</link>
<guid isPermaLink="true" >https://github.com/sharkdp/fd</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/sharkdp/fd&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/bdc43a34688aca2a7a722307c63ba5fbe5564862/68747470733a2f2f7472617669732d63692e6f72672f736861726b64702f66642e7376673f6272616e63683d6d6173746572&quot; alt=&quot;Build Status&quot; data-canonical-src=&quot;https://travis-ci.org/sharkdp/fd.svg?branch=master&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://ci.appveyor.com/project/sharkdp/fd&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/f72b18672ae7f4aeffb5e1259468459b9210802d/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f3231633470356677676763356779336a3f7376673d74727565&quot; alt=&quot;Build status&quot; data-canonical-src=&quot;https://ci.appveyor.com/api/projects/status/21c4p5fwggc5gy3j?svg=true&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://crates.io/crates/fd-find&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/67aa90f091b4dabbe9a05f94e0aa0cd5bbf18336/68747470733a2f2f696d672e736869656c64732e696f2f6372617465732f762f66642d66696e642e737667&quot; alt=&quot;Version info&quot; data-canonical-src=&quot;https://img.shields.io/crates/v/fd-find.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;fd&lt;/em&gt; is a simple, fast and user-friendly alternative to &lt;a href=&quot;https://www.gnu.org/software/findutils/&quot;&gt;&lt;em&gt;find&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While it does not seek to mirror all of &lt;em&gt;find&lt;/em&gt;'s powerful functionality, it provides sensible (opinionated) defaults for &lt;a href=&quot;https://en.wikipedia.org/wiki/Pareto_principle&quot;&gt;80%&lt;/a&gt; of the use cases.&lt;/p&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Convenient syntax: &lt;code&gt;fd PATTERN&lt;/code&gt; instead of &lt;code&gt;find -iname '*PATTERN*'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Colorized terminal output (similar to &lt;em&gt;ls&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;It's &lt;em&gt;fast&lt;/em&gt; (see &lt;a href=&quot;https://github.com/sharkdp/fd#benchmark&quot;&gt;benchmarks&lt;/a&gt; below).&lt;/li&gt;
&lt;li&gt;Smart case: the search is case-insensitive by default. It switches to case-sensitive if the pattern contains an uppercase character&lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/options.html#'smartcase'&quot;&gt;*&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Ignores hidden directories and files, by default.&lt;/li&gt;
&lt;li&gt;Ignores patterns from your &lt;code&gt;.gitignore&lt;/code&gt;, by default.&lt;/li&gt;
&lt;li&gt;Regular expressions.&lt;/li&gt;
&lt;li&gt;Unicode-awareness.&lt;/li&gt;
&lt;li&gt;The command name is &lt;em&gt;50%&lt;/em&gt; shorter&lt;a href=&quot;https://github.com/ggreer/the_silver_searcher&quot;&gt;*&lt;/a&gt; than &lt;code&gt;find&lt;/code&gt; :-).&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Demo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/7f1a80fe54ca14295869160b6e81994ba7947c69/687474703a2f2f692e696d6775722e636f6d2f6b544d465356552e676966&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/7f1a80fe54ca14295869160b6e81994ba7947c69/687474703a2f2f692e696d6775722e636f6d2f6b544d465356552e676966&quot; alt=&quot;Demo&quot; data-canonical-src=&quot;http://i.imgur.com/kTMFSVU.gif&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Benchmark&lt;/h2&gt;
&lt;p&gt;Let's search my home folder for files that end in &lt;code&gt;[0-9].jpg&lt;/code&gt;. It contains ~150.000 subdirectories and about a million files. For averaging and statistical analysis, I'm using &lt;a href=&quot;https://github.com/Gabriel439/bench&quot;&gt;bench&lt;/a&gt;. All benchmarks are performed for a &quot;warm cache&quot;. Results for a cold cache are similar.&lt;/p&gt;
&lt;p&gt;Let's start with &lt;code&gt;find&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;find ~ -iregex '.*[0-9]\.jpg$'

time                 6.265 s    (6.127 s .. NaN s)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.162 s    (6.140 s .. 6.181 s)
std dev              31.73 ms   (0.0 s .. 33.48 ms)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;find&lt;/code&gt; is much faster if it does not need to perform a regular-expression search:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;find ~ -iname '*[0-9].jpg'

time                 2.866 s    (2.754 s .. 2.964 s)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 2.860 s    (2.834 s .. 2.875 s)
std dev              23.11 ms   (0.0 s .. 25.09 ms)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now let's try the same for &lt;code&gt;fd&lt;/code&gt;. Note that &lt;code&gt;fd&lt;/code&gt; &lt;em&gt;always&lt;/em&gt; performs a regular expression search. The options &lt;code&gt;--hidden&lt;/code&gt; and &lt;code&gt;--no-ignore&lt;/code&gt; are needed for a fair comparison, otherwise &lt;code&gt;fd&lt;/code&gt; does not have to traverse hidden folders and ignored paths (see below):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;fd --hidden --no-ignore '.*[0-9]\.jpg$' ~

time                 892.6 ms   (839.0 ms .. 915.4 ms)
                     0.999 R²   (0.997 R² .. 1.000 R²)
mean                 871.2 ms   (857.9 ms .. 881.3 ms)
std dev              15.50 ms   (0.0 s .. 17.49 ms)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For this particular example, &lt;code&gt;fd&lt;/code&gt; is approximately seven times faster than &lt;code&gt;find -iregex&lt;/code&gt; and about three times faster than &lt;code&gt;find -iname&lt;/code&gt;. By the way, both tools found the exact same 14030 files 😄.&lt;/p&gt;
&lt;p&gt;Finally, let's run &lt;code&gt;fd&lt;/code&gt; without &lt;code&gt;--hidden&lt;/code&gt; and &lt;code&gt;--no-ignore&lt;/code&gt; (this can lead to different search results, of course):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;fd '[0-9]\.jpg$' ~

time                 159.5 ms   (155.8 ms .. 165.3 ms)
                     0.999 R²   (0.996 R² .. 1.000 R²)
mean                 158.7 ms   (156.5 ms .. 161.6 ms)
std dev              3.263 ms   (2.401 ms .. 4.298 ms)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is &lt;em&gt;one particular&lt;/em&gt; benchmark on &lt;em&gt;one particular&lt;/em&gt; machine. While I have performed quite a lot of different tests (and found consistent results), things might be different for you! I encourage everyone to try it out on their own.&lt;/p&gt;
&lt;p&gt;Concerning &lt;em&gt;fd&lt;/em&gt;'s speed, the main credit goes to the &lt;code&gt;regex&lt;/code&gt; and &lt;code&gt;ignore&lt;/code&gt; crates that are also used in &lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt; (check it out!).&lt;/p&gt;
&lt;h2&gt;Colorized output&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;fd&lt;/code&gt; can colorize files by extension, just like &lt;code&gt;ls&lt;/code&gt;. In order for this to work, the environment variable &lt;a href=&quot;https://linux.die.net/man/5/dir_colors&quot;&gt;&lt;code&gt;LS_COLORS&lt;/code&gt;&lt;/a&gt; has to be set. Typically, the value of this variable is set by the &lt;code&gt;dircolors&lt;/code&gt; command which provides a convenient configuration format to define colors for different file formats. On most distributions, &lt;code&gt;LS_COLORS&lt;/code&gt; should be set already. If you are looking for alternative, more complete (and more colorful) variants, see &lt;a href=&quot;https://github.com/seebi/dircolors-solarized&quot;&gt;here&lt;/a&gt; or &lt;a href=&quot;https://github.com/trapd00r/LS_COLORS&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;With Rust's package manager &lt;a href=&quot;https://github.com/rust-lang/cargo&quot;&gt;cargo&lt;/a&gt;, you can install &lt;em&gt;fd&lt;/em&gt; via:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cargo install fd-find
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Note that rust version &lt;em&gt;1.16.0&lt;/em&gt; or later is required. The release page of this repository also includes precompiled binaries for Linux.&lt;/p&gt;
&lt;p&gt;On &lt;strong&gt;macOS&lt;/strong&gt;, you can use &lt;a href=&quot;http://braumeister.org/formula/fd&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;brew install fd
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;On &lt;strong&gt;Arch Linux&lt;/strong&gt;, you can install the AUR package &lt;a href=&quot;https://aur.archlinux.org/packages/fd-rs/&quot;&gt;fd-rs&lt;/a&gt; via yaourt, or manually:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git clone https://aur.archlinux.org/fd-rs.git
cd fd-rs
makepkg -si
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;On &lt;strong&gt;Windows&lt;/strong&gt;, you can download the pre-built binaries from the &lt;a href=&quot;https://github.com/sharkdp/fd/releases&quot;&gt;Release page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Development&lt;/h2&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
git clone https://github.com/sharkdp/fd

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Build&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;cd&lt;/span&gt; fd
cargo build

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Run unit tests and integration tests&lt;/span&gt;
cargo &lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Install&lt;/span&gt;
cargo install
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Command-line options&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;USAGE:
    fd [FLAGS/OPTIONS] [&amp;lt;pattern&amp;gt;] [&amp;lt;path&amp;gt;]

FLAGS:
    -H, --hidden            Search hidden files and directories
    -I, --no-ignore         Do not respect .(git)ignore files
    -s, --case-sensitive    Case-sensitive search (default: smart case)
    -a, --absolute-path     Show absolute instead of relative paths
    -L, --follow            Follow symbolic links
    -p, --full-path         Search full path (default: file-/dirname only)
    -0, --print0            Separate results by the null character
    -h, --help              Prints help information
    -V, --version           Prints version information

OPTIONS:
    -d, --max-depth &amp;lt;depth&amp;gt;    Set maximum search depth (default: none)
    -t, --type &amp;lt;filetype&amp;gt;      Filter by type: f(ile), d(irectory), s(ymlink)
    -e, --extension &amp;lt;ext&amp;gt;      Filter by file extension
    -c, --color &amp;lt;when&amp;gt;         When to use color in the output:
                               never, auto, always (default: auto)
    -j, --threads &amp;lt;num&amp;gt;        Set number of threads to use for searching:
                               (default: number of available CPU cores)

ARGS:
    &amp;lt;pattern&amp;gt;    the search pattern, a regular expression (optional)
    &amp;lt;path&amp;gt;       the root directory for the filesystem search (optional)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Tutorial&lt;/h2&gt;
&lt;p&gt;First, to see all command line options, you can get &lt;code&gt;fd&lt;/code&gt;'s help text by running:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;fd --help
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For the sake of this tutorial, let's assume we have a directory with the following file structure:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;fd_examples
├── .gitignore
├── desub_dir
│   └── old_test.txt
├── not_file
├── sub_dir
│   ├── .here_be_tests
│   ├── more_dir
│   │   ├── .not_here
│   │   ├── even_further_down
│   │   │   ├── not_me.sh
│   │   │   ├── test_seven
│   │   │   └── testing_eight
│   │   ├── not_file -&amp;gt; /Users/fd_user/Desktop/fd_examples/not_file
│   │   └── test_file_six
│   ├── new_test.txt
│   ├── test_file_five
│   ├── test_file_four
│   └── test_file_three
├── test_file_one
├── test_file_two
├── test_one
└── this_is_a_test
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;fd&lt;/code&gt; is called with a single argument (the search pattern), it will perform a recursive search through the current directory. To search for all files that include the string &quot;test&quot;, we can simply run:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; fd test
sub_dir/more_dir/even_further_down/test_seven
sub_dir/more_dir/even_further_down/testing_eight
sub_dir/more_dir/test_file_six
sub_dir/test_file_five
sub_dir/test_file_three
sub_dir/test_four
test_file_one
test_file_two
test_one
this_is_a_test
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The search pattern is treated as a regular expression. To show only entries that start with &quot;test&quot;, we can call:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; fd '^test'
sub_dir/more_dir/even_further_down/test_seven
sub_dir/more_dir/even_further_down/testing_eight
sub_dir/more_dir/test_file_six
sub_dir/test_file_five
sub_dir/test_file_three
sub_dir/test_four
test_file_one
test_file_two
test_one
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Note that &lt;code&gt;fd&lt;/code&gt; does not show hidden files (&lt;code&gt;.here_be_tests&lt;/code&gt;) by default. To change this, we can use the &lt;code&gt;-H&lt;/code&gt; (or &lt;code&gt;--hidden&lt;/code&gt;) option:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; fd -H test
sub_dir/.here_be_tests
sub_dir/more_dir/even_further_down/test_seven
sub_dir/more_dir/even_further_down/testing_eight
sub_dir/more_dir/test_file_six
sub_dir/test_file_five
sub_dir/test_file_four
sub_dir/test_file_three
test_file_one
test_file_two
test_one
this_is_a_test
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If we are interested in showing the results from a particular directory, we can specify the root of the search as a second argument:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; fd test sub_dir
sub_dir/more_dir/even_further_down/test_seven
sub_dir/more_dir/even_further_down/testing_eight
sub_dir/more_dir/test_file_six
sub_dir/test_file_five
sub_dir/test_file_three
sub_dir/test_four
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If we don't give &lt;em&gt;any&lt;/em&gt; arguments to &lt;code&gt;fd&lt;/code&gt;, it simply shows all entries in the current directory, recursively (like &lt;code&gt;ls -R&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; fd
not_file
sub_dir
sub_dir/more_dir
sub_dir/more_dir/even_further_down
sub_dir/more_dir/even_further_down/test_seven
sub_dir/more_dir/even_further_down/testing_eight
sub_dir/more_dir/not_file
sub_dir/more_dir/test_file_six
sub_dir/test_file_five
sub_dir/test_file_three
sub_dir/test_four
test_file_one
test_file_two
test_one
this_is_a_test
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If we work in a directory that is a Git repository (or includes several Git repositories), &lt;code&gt;fd&lt;/code&gt; does not search folders (and does not show files) that match the &lt;code&gt;.gitignore&lt;/code&gt; pattern. For example, imagine we had a &lt;code&gt;.gitignore&lt;/code&gt; file with the following content:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;*.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In this case, &lt;code&gt;fd&lt;/code&gt; would not show any files that end in &lt;code&gt;.sh&lt;/code&gt;. To disable this behavior, we can use the &lt;code&gt;-I&lt;/code&gt; (or &lt;code&gt;--ignore&lt;/code&gt;) option:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; fd -I me
sub_dir/more_dir/even_further_down/not_me.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;To really search &lt;em&gt;all&lt;/em&gt; files and directories, we can combine the hidden and ignore features to show everything (&lt;code&gt;-HI&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;fd -HI 'not|here'
not_file
sub_dir/.here_be_tests
sub_dir/more_dir/.not_here
sub_dir/more_dir/even_further_down/not_me.sh
sub_dir/more_dir/not_file
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Searching for a file extension is easy too, using the &lt;code&gt;-e&lt;/code&gt; (or &lt;code&gt;--extension&lt;/code&gt;) switch for file extensions:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; fd -e sh
sub_dir/more_dir/even_further_down/not_me.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Next, we can even use a pattern in combination with &lt;code&gt;-e&lt;/code&gt; to search for a regex pattern over the files that end in the specified extension.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; fd -e txt test
fd_examples/desub_dir/old_test.txt
fd_examples/sub_dir/new_test.txt
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If we want to run a command for each of the search results, we can use the &lt;code&gt;-0&lt;/code&gt; option to pipe the output to &lt;code&gt;xargs&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; fd -0 'test' | xargs -0 wc -l
&lt;/code&gt;
&lt;/pre&gt;&lt;/article&gt;</description>
<pubDate>Sun, 08 Oct 2017 18:49:10 +0000</pubDate>
<dc:creator>sharkdp</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/4209276?v=4&amp;s=400</og:image>
<og:type>object</og:type>
<og:title>sharkdp/fd</og:title>
<og:url>https://github.com/sharkdp/fd</og:url>
<og:description>fd - A simple, fast and user-friendly alternative to find.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/sharkdp/fd</dc:identifier>
</item>
<item>
<title>Designing Data-Intensive Applications</title>
<link>https://dataintensive.net/</link>
<guid isPermaLink="true" >https://dataintensive.net/</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;/&gt;&lt;meta name=&quot;description&quot; content=&quot;&quot;/&gt;&lt;meta name=&quot;author&quot; content=&quot;&quot;/&gt;&lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot;/&gt;&lt;title&gt;Designing Data-Intensive Applications (DDIA) — an O’Reilly book by Martin Kleppmann (The Wild Boar Book)&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css&quot; type=&quot;text/css&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css&quot; type=&quot;text/css&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; type=&quot;text/css&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;23.908187411264&quot;&gt;
&lt;nav class=&quot;navbar navbar-default navbar-static-top&quot; role=&quot;navigation&quot;&gt;
&lt;/nav&gt;&lt;div class=&quot;container&quot; readability=&quot;6.4587024180034&quot;&gt;
&lt;div class=&quot;row intro&quot; readability=&quot;13.60396039604&quot;&gt;
&lt;div class=&quot;col-sm-5&quot;&gt;&lt;img src=&quot;https://dataintensive.net/images/book-cover.png&quot; class=&quot;img-responsive&quot; alt=&quot;Book cover of Designing Data-Intensive Applications&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm-7&quot; readability=&quot;22.349363507779&quot;&gt;

&lt;p class=&quot;lead&quot;&gt;NoSQL… Big Data… Scalability… CAP Theorem… Eventual Consistency… Sharding…&lt;/p&gt;
&lt;p class=&quot;lead&quot;&gt;Nice buzzwords, but how does the stuff actually &lt;em&gt;work&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;As software engineers, we need to build applications that are reliable, scalable and maintainable in the long run. We need to understand the range of available tools and their trade-offs. For that, we have to &lt;mark&gt;dig deeper than buzzwords&lt;/mark&gt;.&lt;/p&gt;
&lt;p&gt;This book will help you navigate the diverse and fast-changing landscape of technologies for storing and processing data. We &lt;mark&gt;compare a broad variety of tools and approaches&lt;/mark&gt;, so that you can see the strengths and weaknesses of each, and decide what’s best for your application.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;btn btn-primary match-twitter-button&quot; href=&quot;https://dataintensive.net/buy.html&quot; role=&quot;button&quot;&gt;Get the book »&lt;/a&gt; &lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-via=&quot;intensivedata&quot; data-size=&quot;large&quot; data-related=&quot;intensivedata&quot; data-count=&quot;none&quot;&gt;Tweet&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h2&gt;How this book is different&lt;/h2&gt;
&lt;/p&gt;
&lt;div class=&quot;row principles&quot; readability=&quot;13.5&quot;&gt;
&lt;div class=&quot;col-sm-4&quot; readability=&quot;10&quot;&gt;
&lt;p class=&quot;center-icon&quot;&gt;&lt;img src=&quot;https://dataintensive.net/images/directions.png&quot; class=&quot;img-responsive&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;Compare several designs&lt;/h3&gt;
&lt;p&gt;This book compares the &lt;mark&gt;fundamental ideas&lt;/mark&gt; behind a broad variety of systems. It doesn’t go into the details of how to configure and use one particular tool. But it does explain the trade-offs and fundamental limitations that systems face, so that you can &lt;mark&gt;make informed decisions&lt;/mark&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;col-sm-4&quot; readability=&quot;11&quot;&gt;
&lt;p class=&quot;center-icon&quot;&gt;&lt;img src=&quot;https://dataintensive.net/images/books.png&quot; class=&quot;img-responsive&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;Both theory and practice&lt;/h3&gt;
&lt;p&gt;We discuss many good ideas from academic research, but we always tie them back to reality. Just because it looks good on a whiteboard doesn’t mean it actually works in practice. We care about ideas that have been &lt;mark&gt;proven under intensive workloads&lt;/mark&gt;, at big companies and at startups.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;col-sm-4&quot; readability=&quot;11&quot;&gt;
&lt;p class=&quot;center-icon&quot;&gt;&lt;img src=&quot;https://dataintensive.net/images/gears.png&quot; class=&quot;img-responsive&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;Deeper understanding&lt;/h3&gt;
&lt;p&gt;We go under the hood of the systems you already use, teasing apart how they work internally. The aim is to help you &lt;mark&gt;think about data systems&lt;/mark&gt; in new ways — not just how they work, but &lt;mark&gt;why they were designed that way&lt;/mark&gt;. Your own software will be better as a result.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;testimonials&quot;&gt;
&lt;h2&gt;What people are saying&lt;/h2&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-xs-2&quot;&gt;&lt;img src=&quot;https://dataintensive.net/images/jaykreps.jpg&quot; class=&quot;img-responsive img-rounded&quot; alt=&quot;Jay Kreps&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;col-xs-10&quot; readability=&quot;6.4748201438849&quot;&gt;
&lt;blockquote readability=&quot;6.9064748201439&quot;&gt;
&lt;p&gt;This book is awesome. It bridges the huge gap between distributed systems theory and practical engineering. I wish it had existed a decade ago, so I could have read it then and saved myself all the mistakes along the way.&lt;/p&gt;
&lt;footer&gt;&lt;a href=&quot;https://twitter.com/jaykreps&quot;&gt;Jay Kreps&lt;/a&gt;, creator of &lt;a href=&quot;http://kafka.apache.org/&quot;&gt;Apache Kafka&lt;/a&gt; and &lt;a href=&quot;http://www.project-voldemort.com/&quot;&gt;Project Voldemort&lt;/a&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-xs-2&quot;&gt;&lt;img src=&quot;https://dataintensive.net/images/kevinscott.jpg&quot; class=&quot;img-responsive img-rounded&quot; alt=&quot;Kevin Scott&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;col-xs-10&quot; readability=&quot;7.1495327102804&quot;&gt;
&lt;blockquote readability=&quot;7.6261682242991&quot;&gt;
&lt;p&gt;This book should be required reading for software engineers. The explosion of data and its increased importance to the applications we build has created a new set of complex challenges. Designing Data-Intensive Applications is a rare resource that bridges theory and practice to help developers make smart decisions as they design and implement data infrastructure and systems.&lt;/p&gt;
&lt;footer&gt;&lt;a href=&quot;https://www.linkedin.com/in/jkevinscott&quot;&gt;Kevin Scott&lt;/a&gt;, Chief Technology Officer at &lt;a href=&quot;https://www.microsoft.com/&quot;&gt;Microsoft&lt;/a&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-xs-2&quot;&gt;&lt;img src=&quot;https://dataintensive.net/images/veenabasavaraj.jpg&quot; class=&quot;img-responsive img-rounded&quot; alt=&quot;Veena Basavaraj&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;col-xs-10&quot; readability=&quot;7.14463840399&quot;&gt;
&lt;blockquote readability=&quot;7.6209476309227&quot;&gt;
&lt;p&gt;The essence of building reliable and scalable distributed data systems and efficiently using them to solve real world problems is in mastering the tradeoffs associated with the design choices. Designing Data Intensive applications explores them like none other and provides a unbiased view of how distributed systems have made these choices over time.&lt;/p&gt;
&lt;footer&gt;&lt;a href=&quot;https://www.linkedin.com/in/veenabasavaraj&quot;&gt;Veena Basavaraj&lt;/a&gt;, Senior Software Engineer at &lt;a href=&quot;https://www.uber.com/&quot;&gt;Uber&lt;/a&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-xs-2&quot;&gt;&lt;img src=&quot;https://dataintensive.net/images/davidbeyer.jpg&quot; class=&quot;img-responsive img-rounded&quot; alt=&quot;Kevin Scott&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;col-xs-10&quot; readability=&quot;6.5264423076923&quot;&gt;
&lt;blockquote readability=&quot;6.9615384615385&quot;&gt;
&lt;p&gt;A joy to read! This is one of the best technical books I've read. It offers very helpful context, historical and current, to understanding the key issues in the text.&lt;/p&gt;
&lt;footer&gt;&lt;a href=&quot;https://www.linkedin.com/in/davidabeyer&quot;&gt;David Beyer&lt;/a&gt;, Investor at &lt;a href=&quot;http://www.amplifypartners.com/&quot;&gt;Amplify Partners&lt;/a&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot; readability=&quot;15.01996672213&quot;&gt;
&lt;div class=&quot;col-sm-4&quot; readability=&quot;12.818858560794&quot;&gt;
&lt;h3&gt;Now available&lt;/h3&gt;
&lt;p&gt;The final version of &lt;em&gt;Designing Data-Intensive Applications&lt;/em&gt; (DDIA) was published in March 2017, after 2½ years in Early Release (beta). It is now available in print and ebook formats from your favorite bookstore.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;btn btn-primary match-twitter-button&quot; href=&quot;https://dataintensive.net/buy.html&quot; role=&quot;button&quot;&gt;Get the book »&lt;/a&gt; &lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-via=&quot;intensivedata&quot; data-size=&quot;large&quot; data-related=&quot;intensivedata&quot; data-count=&quot;none&quot;&gt;Tweet&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Stay in touch&lt;/h3&gt;
&lt;p&gt;Follow &lt;a href=&quot;https://twitter.com/intensivedata&quot;&gt;@intensivedata&lt;/a&gt; on Twitter, or join our mailing list to receive very occasional news related to the book:&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;col-sm-4&quot; readability=&quot;19.285509325681&quot;&gt;
&lt;p class=&quot;center-icon&quot;&gt;&lt;img src=&quot;https://dataintensive.net/images/martinkleppmann.jpg&quot; class=&quot;img-responsive img-rounded&quot; alt=&quot;Martin Kleppmann&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;About the author&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://martin.kleppmann.com/&quot;&gt;Martin Kleppmann&lt;/a&gt; is a researcher in distributed systems at the &lt;a href=&quot;http://www.cl.cam.ac.uk/&quot;&gt;University of Cambridge&lt;/a&gt;. Previously he was a software engineer and entrepreneur at Internet companies including &lt;a href=&quot;https://www.linkedin.com/&quot;&gt;LinkedIn&lt;/a&gt; and &lt;a href=&quot;http://rapportive.com/&quot;&gt;Rapportive&lt;/a&gt;, where he worked on large-scale data infrastructure. In the process he learned a few things the hard way, and he hopes this book will save you from repeating the same mistakes.&lt;/p&gt;
&lt;p&gt;Martin is a regular conference speaker, blogger, and open source contributor. He believes that profound technical ideas should be accessible to everyone, and that deeper understanding will help us develop better software.&lt;/p&gt;
&lt;p&gt;You can find him as &lt;a href=&quot;https://twitter.com/martinkl&quot;&gt;@martinkl&lt;/a&gt; on Twitter, and his blog is at &lt;a href=&quot;http://martin.kleppmann.com/&quot;&gt;martin.kleppmann.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;footer readability=&quot;1&quot;&gt;&lt;div class=&quot;container&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;© 2014-2017 Martin Kleppmann&lt;/p&gt;
&lt;/div&gt;
&lt;/footer&gt;&lt;/body&gt;</description>
<pubDate>Sun, 08 Oct 2017 15:22:00 +0000</pubDate>
<dc:creator>wooola</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://dataintensive.net/</dc:identifier>
</item>
<item>
<title>No Bitcoin-based protocol can handle more than 20M users per month</title>
<link>https://runeksvendsen.github.io/blog/posts/2017-10-08-no-bitcoin-based-protocol-can-handle-more-than-20m-users-per-month.html</link>
<guid isPermaLink="true" >https://runeksvendsen.github.io/blog/posts/2017-10-08-no-bitcoin-based-protocol-can-handle-more-than-20m-users-per-month.html</guid>
<description>&lt;p&gt;Posted on October 8, 2017 by Rune K. Svendsen&lt;/p&gt;
&lt;p&gt;To solve Bitcoin’s scalability challenge, many so-called &lt;em&gt;layer 2&lt;/em&gt; protocols have been proposed. All of these protocols operate on the same, relatively simple, principle:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;User deposits bitcoins (via the Bitcoin blockchain) into the layer 2 system&lt;/li&gt;
&lt;li&gt;Stuff happens within the layer 2 system – without touching the Bitcoin blockchain – which assigns arbitrarily small parts of the deposited bitcoins to other users (recipients) in the system&lt;/li&gt;
&lt;li&gt;Recipients withdraw received bitcoins (into the Bitcoin blockchain)&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This increases the scalability of transferring bitcoins from user to user, since at &lt;em&gt;Step 2&lt;/em&gt; nothing touches the blockchain. In fact, since nothing touches the blockchain, the transaction speed (as measured in transactions per second) is theoretically unlimited, and in practice only limited by latency and bandwidth between nodes.&lt;/p&gt;
&lt;p&gt;The problem, however, is &lt;em&gt;Step 1&lt;/em&gt;. When a user receives money – which humans usually receive monthly as wages/salaries – they need to deposit it into the layer 2 system, in order for it to be available within it. At the current block size limit of 1 MB, the maximum number of deposit transactions per month – assuming the simplest Bitcoin transaction (single-signature) with a size of 224 bytes is used – is 20 million&lt;sup&gt;1&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;This is a maximum, since a single-signature Bitcoin transaction isn’t very interesting in the context of layer 2 protocols (it essentially constitutes sending your bitcoins to a trusted third party). Thus, with more complex (e.g. multi-signature) deposit transactions, the number of monthly users will be less than 20 million. Furthermore, this figure does not include the withdrawal transactions (where recipients withdraw funds from the layer 2 system to their private Bitcoin address), which will decrease the maximum number of supported users even further.&lt;/p&gt;
&lt;p&gt;In conclusion, if Bitcoin is to scale to more than ~0.2% of the world’s population, layer 2 protocols – operating on the principle described above – will not be sufficient. The Bitcoin blockchain will need to increase its capacity in conjunction with layer 2 protocols, or it will not have sufficient capacity to support more than – at most – 20 million users per month.&lt;/p&gt;
&lt;p&gt;      &lt;sup&gt;1&lt;/sup&gt; 1,000,000 bytes per block/224 bytes per transactions = 4464 tx/block&lt;br/&gt;         4464 tx/block*6 blocks per hour*24 hours per day = ~643000 tx/day&lt;br/&gt;         643000 tx/day*30 days per month = ~20 million tx/month&lt;/p&gt;
</description>
<pubDate>Sun, 08 Oct 2017 10:13:44 +0000</pubDate>
<dc:creator>runeks</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://runeksvendsen.github.io/blog/posts/2017-10-08-no-bitcoin-based-protocol-can-handle-more-than-20m-users-per-month.html</dc:identifier>
</item>
<item>
<title>Thoughts on Microsoft&amp;#039;s Time-Travel Debugger</title>
<link>http://robert.ocallahan.org/2017/10/thoughts-on-microsofts-time-travel.html</link>
<guid isPermaLink="true" >http://robert.ocallahan.org/2017/10/thoughts-on-microsofts-time-travel.html</guid>
<description>&lt;p&gt;I'm excited that Microsoft's &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/time-travel-debugging-overview&quot;&gt;TTD&lt;/a&gt; is finally available to the public. Congratulations to the team! &lt;a href=&quot;https://www.youtube.com/watch?v=l1YJTg_A914&quot;&gt;The video&lt;/a&gt; is well worth watching. I haven't used TTD myself yet since I don't have a Windows system at hand, but I've talked to Mozilla developers who've tried it on Firefox.&lt;/p&gt;
&lt;p&gt;The most important and obvious difference between TTD and rr is that TTD is for Windows and rr is for Linux (though a few crazy people have had success debugging Windows applications in Wine under rr).&lt;/p&gt;
&lt;p&gt;TTD supports recording of multiple threads in parallel, while rr is limited to a single core. On the other hand, per-thread recording overhead seems to be much higher in TTD than in rr. It's hard to make a direct comparison, but a simple &quot;start Firefox, display &lt;a href=&quot;https://mozilla.org&quot;&gt;mozilla.org&lt;/a&gt;, shut down&quot; test run on similar hardware takes about 250 seconds under TTD and 26 seconds under rr. This is not surprising given TTD relies on &lt;a href=&quot;https://www.usenix.org/legacy/events/vee06/full_papers/p154-bhansali.pdf&quot;&gt;pervasive binary instrumentation&lt;/a&gt; and rr was designed not to. This means recording extremely parallel workloads might be faster under TTD, but for many workloads rr recording will be faster. Starting up a large application really stresses binary translation frameworks, so it's a bit of a worst-case scenario for TTD — though a common one for developers. TTD's multicore recording might be better at reproducing certain kinds of concurrency bugs, though rr's &lt;a href=&quot;http://robert.ocallahan.org/2016/02/introducing-rr-chaos-mode.html&quot;&gt;chaos mode&lt;/a&gt; helps mitigate that problem — and lower recording overhead means you can churn through test iterations faster.&lt;/p&gt;
&lt;p&gt;Therefore for Firefox-like workloads, on Linux, I still think rr's recording approach is superior. Note that when the technology behind TTD was first developed the &lt;a href=&quot;https://arxiv.org/pdf/1705.05937.pdf&quot;&gt;hardware and OS features&lt;/a&gt; needed to support an rr-like approach did not exist.&lt;/p&gt;
&lt;p&gt;TTD's ability to attach to arbitrary processes and start recording sounds great and would mitigate some of the slow-recording problem. This would be nice to have with rr, but hard to implement. (Currently we require reserving a couple of pages at specific addresses that might not be available when attaching to an arbitrary process.)&lt;/p&gt;
&lt;p&gt;Some of the performance overhead of TTD comes from it copying all loaded libraries into the trace file, to ensure traces are portable across machines. rr doesn't do that by default; instead you have to run &lt;tt&gt;rr pack&lt;/tt&gt; to make traces self-contained. I still like our approach, especially in scenarios where you repeatedly re-record a testcase until it fails.&lt;/p&gt;
&lt;p&gt;The video mentions that TTD supports shared memory and async I/O and suggests rr doesn't. It can be confusing, but to clarify: rr supports shared memory as long as you record all the processes that are using the shared memory; for example Firefox and Chromium communicate with subprocesses using shared memory and work fine under rr. Async I/O is pretty rare in Linux; where it has come up so far (V4L2) we have been able to handle it.&lt;/p&gt;
&lt;p&gt;Supporting unlimited data breakpoints is a nice touch. I assume that's done using their binary instrumentation.&lt;/p&gt;
&lt;p&gt;TTD's replay looks fast in the demo videos but they mention that it can be slower than live debugging. They have an offline index build step, though it's not clear to me yet what exactly those indexes contain. It would be interesting to compare TTD and rr replay speed, especially for reverse execution.&lt;/p&gt;
&lt;p&gt;The TTD trace querying tools look cool. A lot more can be done in this area.&lt;/p&gt;
&lt;p&gt;rr+gdb supports running application functions at debug time (e.g. to dump data structures), while TTD does not. This feature is very important to some rr users, so it might be worthwhile for the TTD people to look at.&lt;/p&gt;

</description>
<pubDate>Sun, 08 Oct 2017 04:32:19 +0000</pubDate>
<dc:creator>JoshTriplett</dc:creator>
<og:url>http://robert.ocallahan.org/2017/10/thoughts-on-microsofts-time-travel.html</og:url>
<og:title>Thoughts On Microsoft's Time-Travel Debugger</og:title>
<og:description>I'm excited that Microsoft's TTD is finally available to the public. Congratulations to the team! The video is well worth watching. I have...</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>http://robert.ocallahan.org/2017/10/thoughts-on-microsofts-time-travel.html</dc:identifier>
</item>
<item>
<title>Show HN: A platform for sharing DIY solar projects</title>
<link>http://sunboxlabs.com</link>
<guid isPermaLink="true" >http://sunboxlabs.com</guid>
<description>&lt;div id=&quot;&quot;&gt;

&lt;p class=&quot;sub-title&quot;&gt;Share your DIY solar + storage experiments, discuss &amp;amp; learn.&lt;/p&gt;
&lt;br/&gt;&lt;/div&gt;&lt;div id=&quot;&quot;&gt;&lt;div readability=&quot;10.418228279387&quot;&gt;






&lt;div class=&quot;&quot; readability=&quot;6.9333333333333&quot;&gt;&lt;span readability=&quot;1.44&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://docs.google.com/forms/d/e/1FAIpQLSfztLQA9UaDv0PBmEQcNTMOV8e6Qwnt1Tdvmf2fnf-jYdVzig/viewform?usp=sf_link&quot; onclick=&quot;ga('send', 'event', 'Submit', 'clicked', 'Guide');&quot;&gt;Submit project&lt;/a&gt;&lt;p&gt;wanted: diy hurricane backup project&lt;/p&gt;&lt;/span&gt;
&lt;hr/&gt;&lt;span/&gt;
&lt;p&gt;&lt;span&gt;Ask a question /&lt;br/&gt;Request a project&lt;/span&gt;&lt;/p&gt;
starts a new thread&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;sunboxlabs.com is a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for sites to earn advertising fees by advertising and linking to amazon.com&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Sat, 07 Oct 2017 19:40:35 +0000</pubDate>
<dc:creator>nikodunk</dc:creator>
<og:url>http://www.sunboxlabs.com</og:url>
<og:type>article</og:type>
<og:title>How to build a Personal Power Plant</og:title>
<og:description>A platform for sharing DIY solar experiments, discussion &amp; learning. For off-grid apartments, for Burning Man, for camping, for RV.</og:description>
<og:image>http://sunboxlabs.com/img/money3.jpg</og:image>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://sunboxlabs.com/</dc:identifier>
</item>
<item>
<title>London Cutaways</title>
<link>http://londonist.com/london/transport/london-cutaways</link>
<guid isPermaLink="true" >http://londonist.com/london/transport/london-cutaways</guid>
<description>&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/piccadilly_circus_tube_station_by_renzo_picasso__1929_-_as_the_new_concourse_opened_that_yr-_pedants_may_note_that_the_traffic_flow_has_been_reversed__as_it_would_be_in_italy-_copyright_archivio_renzo_picasso__genoa.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt; Piccadilly Circus tube station by Renzo Picasso, 1929. Pedants may note that the traffic flow has been reversed, as it would be in Italy. Copyright, &lt;a href=&quot;http://www.renzopicasso.com&quot;&gt;Archivio Renzo Picasso&lt;/a&gt;, Genoa.
&lt;p&gt;&lt;em&gt;The layout of London can only be fully understood if we examine it in three dimensions. &lt;a href=&quot;https://twitter.com/MrTimDunn&quot;&gt;Tim Dunn&lt;/a&gt; takes a look at some of the capital's greatest cutaway diagrams.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Our city is a fascinating, infuriating, terrifying, beautiful place. As curious Londonists we attempt to make sense of it and the way it works so that we can better assert our own place within it. It is often said that London is an infrastructural palimpsest: layer upon layer of networks and systems. But that really isn't the case. London, like any urban form is a complex, woven fabric of infrastructure — each system maddeningly intertwined with others.&lt;/p&gt;
&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/1930__d_macpherson-s_cluttered_cutaway_of_piccadilly_circus_underground_station_to_explain_the_complexity_of_works_to_the_excited_public.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt; 1930, D MacPherson's cluttered cutaway of Piccadilly Circus underground station to explain the complexity of works to the excited public. (c) London Transport Museum Collection.
&lt;p&gt;Ancient, hidden rivers don't just flow under our modern railways — today they flow above them on aqueducts and in pipes. Crossrail ducks beneath some Underground lines and rises up above others. The remarkable London Hydraulic Power Company's pipes squeeze in and out and through and down between systems that came before them. Above ground road, rail and power infrastructure networks criss-cross each other, often obscuring what could be seen before. A two-dimensional map, while often brilliant and beautiful in its own right, is never quite enough to explain what is going on in this city. We need more.&lt;/p&gt;
&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/1989_-_london_transport_museum_commissioned_gavin_dunn_to_draw_this_updated_modern_3d_cutaway_of_piccadilly_circus_station.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt; 1989, London Transport Museum commissioned Gavin Dunn to draw this updated modern 3D cutaway of Piccadilly Circus station. (c) London Transport Museum Collection.
&lt;p&gt;To make sense of this jam-packed, twisting, stacked-up city, or indeed the objects that exist within, we have to look at the spaces, places and things in three dimensions. And that is where the remarkable world of the cutaway comes into its own.&lt;/p&gt;

&lt;a class=&quot;&quot; href=&quot;http://assets.londonist.com/uploads/2016/12/cutaway_of_london-s_charing_cross_railway__underground_and_trams_-_popular_science_magazine_1921.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/cutaway_of_london-s_charing_cross_railway__underground_and_trams_-_popular_science_magazine_1921_copy.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt;&lt;/a&gt; Cutaway of London's Charing Cross railway, underground and trams. Popular Science Magazine 1921. Click or tap for higher resolution.
&lt;p&gt;The cutaway diagram has its roots in the Renaissance, where illustrators sought to explain subterranean mining through printed works. Those simple drawings became ever more complex as our technology and our places became harder to explain. It was in the 20th century that cutaways became most popular, as demand for education and explanation of transport networks and technology rose.&lt;/p&gt;
&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/bond_street_station__1970s-_showing_reconstruction_for_the_jubilee_line_it_also_references_the_fleet_line_as_the_jubilee_was_known_during_the_planning_phase.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt; Bond Street Station, 1970s. Showing reconstruction for the Jubilee Line. It also references the Fleet Line as the Jubilee was known during the planning phase. (c) London Transport Museum Collection.
&lt;p&gt;London, having such an incredible array of transport infrastructure — much of it below ground — has therefore yielded a remarkable quantity of cutaway diagrams. They have been produced for children, for professionals, for the public, for government — each with a different objective in mind.&lt;/p&gt;
&lt;p&gt;Some of these are exquisite: the Renzo Picasso diagram of Piccadilly Circus (top of page) has been widely circulated before, but in helping research this article his archive team has given permission for an additional drawing  — of Camden Town — published here for the first time ever:&lt;/p&gt;
&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/renzo_picasso_camden_town_1929.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt; Copyright, &lt;a href=&quot;http://www.renzopicasso.com/&quot;&gt;Archivio Renzo Picasso&lt;/a&gt;, Genoa.
&lt;p&gt;Many readers will be familiar too with the work of Lesley Ashwell Wood, who published a vast repertoire in mid-century Eagle comics. A lovely review of his work can be &lt;a href=&quot;https://bearalley.blogspot.co.uk/2011/02/l-ashwell-wood-behind-scenes-part-4.html&quot;&gt;found online&lt;/a&gt;.&lt;/p&gt;
&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/camden_town_by_l_ashwell_wood_for_the_eagle_comic.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt; Camden Town by L Ashwell Wood for the Eagle comic. (c) Eagle, Dan Dare Corporation. &lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/1950_-_a_cutaway_of_1938_stock_on_london_underground-_eagle_comic_-_from_ianvisits-co-uk.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt; 1950, a cutaway of 1938 stock on London Underground in the Eagle comic - courtesy of &lt;a href=&quot;https://www.ianvisits.co.uk/&quot;&gt;Ian Visits&lt;/a&gt;. (c) Eagle, Dan Dare Corporation.
&lt;p&gt;The Post Office Mail Rail diagrams are a delight, and the 1926 version bears comparison with the 'Overground Piccadilly line' diagrams, of which various versions have been printed and mounted in Piccadilly line trains over the years near the doorways.&lt;/p&gt;
&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/mail_rail_1926_cutaway_of_entire_route_-_copyright_royal_mail_group_ltd__courtesy_of_the_postal_museum.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt; Mail Rail 1926 cutaway of the entire route. Copyright Royal Mail Group Ltd, courtesy of the Postal Museum.
&lt;p&gt;And here's another from 60 years later, showing the Paddington Mail Rail station.&lt;/p&gt;
&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/1980s_mail_rail_-_paddington_station_transfer_from_british_rail_to_mail_rail-_copyright_royal_mail_group_ltd__courtesy_of_the_postal_museum.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt; 1980s, Mail Rail's Paddington station transfer from British Rail to Mail Rail. Copyright Royal Mail Group Ltd, courtesy of The Postal Museum.
&lt;p&gt;As a final bonus, we've included a cross-section of something at the centre of a global network: Television Centre at Shepherd’s Bush. The plan is from July 1958 and you can find &lt;a href=&quot;http://www.tvstudiohistory.co.uk/tv%20centre%20history.htm&quot;&gt;more out about it here&lt;/a&gt;.&lt;/p&gt;
&lt;a class=&quot;&quot; href=&quot;http://assets.londonist.com/uploads/2016/12/tv_centre_cutaway_drawing_from_tvstudiohistory-co-uk.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;&quot; src=&quot;https://assets.londonist.com/uploads/2016/12/i875/tv_centre_cutaway_drawing_from_tvstudiohistory-co-uk_copy.jpg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt;&lt;/a&gt; TV Centre cutaway drawing. (c) The Architect &amp;amp; Building News, 1958. Click or tap for higher resolution.
&lt;p&gt;Of course, a cutaway, like any illustration or interpretation, is never going to be entirely accurate. It is going to have elements removed — not just because it's a cutaway and we need to see past stuff but because the illustrator or commissioner of the drawing doesn't think they are relevant, or shouldn't be included. Others add in extra bits too – because they're making a best guess.&lt;/p&gt;
&lt;p&gt;After all, who really knows the extent of what is under London’s streets?&lt;/p&gt;
&lt;p&gt;Please do post links to more cutaways of London below.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;With thanks to &lt;a href=&quot;http://www.ltmuseum.co.uk&quot;&gt;London Transport Museum&lt;/a&gt;, the &lt;a href=&quot;http://www.PostalMuseum.org&quot;&gt;Postal Museum&lt;/a&gt;, &lt;a href=&quot;https://londonist.com/lima/pages/44979/Ianvists.co.uk&quot;&gt;Ian Visits&lt;/a&gt;, &lt;a href=&quot;https://londonist.com/lima/pages/44979/renzopicasso.com&quot;&gt;Renzo Picasso Archive&lt;/a&gt; and&lt;a href=&quot;https://londonist.com/lima/pages/44979/bearalley.blogspot.co.uk&quot;&gt;Bear Alley&lt;/a&gt;.  &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also&lt;/strong&gt;: &lt;a href=&quot;http://londonist.com/2015/10/how-deep-does-london-go&quot;&gt;How deep does London go?&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 07 Oct 2017 19:06:37 +0000</pubDate>
<dc:creator>brudgers</dc:creator>
<og:url>https://londonist.com/london/transport/london-cutaways</og:url>
<og:title>London's Hidden Tunnels Revealed In Amazing Cutaways</og:title>
<og:description>What lies beneath.</og:description>
<og:type>article</og:type>
<og:image>https://assets.londonist.com/uploads/2016/12/i875/piccadilly_circus_tube_station_by_renzo_picasso__1929_-_as_the_new_concourse_opened_that_yr-_pedants_may_note_that_the_traffic_flow_has_been_reversed__as_it_would_be_in_italy-_copyright_archivio_renzo_picasso__genoa.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://londonist.com/london/transport/london-cutaways</dc:identifier>
</item>
<item>
<title>Five minute guide to better typography</title>
<link>http://pierrickcalvez.com/journal/a-five-minutes-guide-to-better-typography</link>
<guid isPermaLink="true" >http://pierrickcalvez.com/journal/a-five-minutes-guide-to-better-typography</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;http://pierrickcalvez.com/journal/a-five-minutes-guide-to-better-typography&quot;&gt;http://pierrickcalvez.com/journal/a-five-minutes-guide-to-better-typography&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=15424478&quot;&gt;https://news.ycombinator.com/item?id=15424478&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 780&lt;/p&gt;&lt;p&gt;# Comments: 118&lt;/p&gt;</description>
<pubDate>Sat, 07 Oct 2017 16:44:17 +0000</pubDate>
<dc:creator>reacharavindh</dc:creator>
<og:title>A Five Minutes Guide to Better Typography — Pierrick Calvez</og:title>
<og:description>A Five Minutes Guide to Better Typography</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://pierrickcalvez.com/journal/a-five-minutes-guide-to-better-typography</dc:identifier>
</item>
<item>
<title>A Simple Approach to Building a Real-Time Collaborative Text Editor</title>
<link>http://digitalfreepen.com/2017/10/06/simple-real-time-collaborative-text-editor.html</link>
<guid isPermaLink="true" >http://digitalfreepen.com/2017/10/06/simple-real-time-collaborative-text-editor.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;http://alchemy.digitalfreepen.com&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://digitalfreepen.com/images/2017/alchemybook.gif&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post is my attempt to write an easy to understand introduction to the main ideas behind building a &lt;a href=&quot;http://alchemy.digitalfreepen.com&quot;&gt;real-time collaborative text editor&lt;/a&gt;, which can be tricky as you want all clients to synchronize and see a sensible result even in the face of concurrent edits.&lt;/p&gt;
&lt;p&gt;In some ways, this is already a solved problem by Operational Transform (OT) and open-source implementations like &lt;a href=&quot;https://github.com/firebase/firepad&quot;&gt;Firepad&lt;/a&gt; and &lt;a href=&quot;https://github.com/josephg/ShareJS&quot;&gt;ShareJS&lt;/a&gt;. So if you want a plug-in-play solution, use one of those and move along. I decided to use a &lt;strong&gt;CRDT (Conflict-Free Replicated Data Type)&lt;/strong&gt;, a newer technique (more specifically, I adapted &lt;a href=&quot;https://hal.archives-ouvertes.fr/inria-00432368/document&quot;&gt;Logoot&lt;/a&gt;). There are technical pros and cons versus OTs that I’m not gonna bore you with, but for me the major advantage of the CRDT approach is that it’s &lt;strong&gt;simpler to understand and to convince yourself that it works&lt;/strong&gt; (and thus, to maintain it).&lt;/p&gt;
&lt;p&gt;I hope to demonstrate that in this post by splitting the problem of implementing a CRDT into multiple conceptual layers. Those layers should be fairly easy to understand one at a time. In contrast, OTs work by requiring you to handle every combination of operations arriving in different orders (i.e. all the weird shit users do) and proving that you’ve handled all of the edge cases. While the code itself may not be that complicated, if you make a mistake, you’re screwed.&lt;/p&gt;
&lt;blockquote readability=&quot;12.495844875346&quot;&gt;
&lt;p&gt;This was a fun side project to build while at &lt;a href=&quot;https://www.recurse.com/&quot;&gt;Recurse Center&lt;/a&gt;, and also quite relevant now that applications are increasingly moving to the web and becoming collaborative. Good ol’ Google Docs showed that it’s quite useful for multiple people to be able to edit at the same time. Now, Dropbox Paper, Overleaf, Coderpad, etc all support collaborative writing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, I’ll briefly introduce what makes collaborative text editor hard. Let’s say you have two students, Ping and Pong working together on the same essay, and they’re working on different parts of the document. Ping makes a change: insert the string “, sadface” at the end of the line. The naive way in which Ping’s editor could transmit the change to Pong’s editor is just to send a message &lt;code class=&quot;highlighter-rouge&quot;&gt;insert(&quot;, sadface&quot;, col=44)&lt;/code&gt;.&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://digitalfreepen.com/images/2017/alchemy_problem1.jpg&quot; width=&quot;500&quot;/&gt;&lt;/center&gt;
&lt;p&gt;And this would work if changes could be transmitted and applied instantaneously (&lt;small&gt;possibly breaking &lt;a href=&quot;https://en.wikibooks.org/wiki/Special_Relativity/Faster_than_light_signals,_causality_and_Special_Relativity&quot;&gt;causality&lt;/a&gt; along the way&lt;/small&gt;).&lt;/p&gt;
&lt;p&gt;In practice, Ping’s neighbor is torrenting The Emoji Movie &lt;em&gt;(don’t ask me why)&lt;/em&gt; and causing Ping’s messages to arrive really slowly to Pong. While Ping’s message was stuck in emoji traffic, Pong added the string “, not” at column 23.&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://digitalfreepen.com/images/2017/alchemy_problem2.jpg&quot; width=&quot;500&quot;/&gt;&lt;/center&gt;
&lt;p&gt;Wops. By the time &lt;code class=&quot;highlighter-rouge&quot;&gt;insert(&quot;, sadface&quot;, col=44)&lt;/code&gt; arrives, the end of the line is no longer column 44. We still insert though, and get this:&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://digitalfreepen.com/images/2017/alchemy_problem3.jpg&quot; width=&quot;500&quot;/&gt;&lt;/center&gt;
&lt;p&gt;Now, we’re in an inconsistent state and The Matrix falls apart around Ping and Pong.&lt;/p&gt;

&lt;p&gt;Let’s look at the first insight that’ll allow us to make a collaborative text editor.&lt;/p&gt;
&lt;p&gt;In the previous example, two operations were generated concurrently on different clients. When we send them over to the other client, they end up applied in different orders and the clients end up in different states. They &lt;strong&gt;don’t commute&lt;/strong&gt;.&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://digitalfreepen.com/images/2017/alchemy_commute1.jpg&quot; width=&quot;500&quot;/&gt;&lt;/center&gt;
&lt;p&gt;On the other hand, if every operation &lt;em&gt;could&lt;/em&gt; commute with every other operation, the clients would &lt;strong&gt;converge&lt;/strong&gt; to the same state regardless of which messages arrived where first. You still need to require that operations commute in a way that makes sense to the user of course. Lest you get a lazy programmer that makes every operation delete the whole file. &lt;em&gt;“Hey, the states were the same in the end!”&lt;/em&gt; 🙄. But otherwise, if operations commute, synchronization is trivially easy. A basic example is an add-only set. It doesn’t matter the order in which you add things to the set, the set is the same in the end.&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://digitalfreepen.com/images/2017/alchemy_commute2.jpg&quot; width=&quot;500&quot;/&gt;&lt;/center&gt;
&lt;p&gt;While commutativity captures 90% of the idea, in practice we need another condition for synchronization, which is that operations need to be &lt;strong&gt;idempotent&lt;/strong&gt;. That is, you can apply the operation twice and it’ll give you the same result as applying it once. This is useful not only if your messages get duplicated somehow (maybe you’re using UDP instead of TCP? I dunno) but also if two clients decide to do the same operation at the same time. Then, receiving the other client’s (now duplicate) operation should be a no-op (do nothing).&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;I’m using the term “commute” loosely here. In practice you don’t need your operations to commute in the sense that EVERY operation commutes with EVERY other operation. It’s great if they do since commutativity is a sufficient condition for convergence, but it’s not a necessary condition. For instance, it doesn’t make sense to reorder operations generated by one client because you might end up putting DELETE(X) before CREATE(X). What we really want is some sort of “interleave-ability” defined by the causal order between operations and have the merging obey some partial order. But the goal of this post is to provide an intuition, even if at the expense of correct technicality. I’ll refer you to the CRDT papers for the big words.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At a very abstract level, a CRDT is just a data structure and a set of operations on the data structure that commute with each other. There’s lots of &lt;a href=&quot;https://github.com/pfrazee/crdt_notes&quot;&gt;different examples of CRDTs&lt;/a&gt;. Some quite simple that you can read about while having breakfast. Others, well, less so.&lt;/p&gt;
&lt;p&gt;Before we get into text editing, which is one of the less simple CRDTs, let’s create a simple CRDT to help us gain some intuition. We’re going to build a &lt;a href=&quot;https://en.wikipedia.org/wiki/Multiset&quot;&gt;&lt;strong&gt;bag&lt;/strong&gt;, also known a multiset&lt;/a&gt;. Like the name implies, it’s a collection in which you can put and retrieve objects. It’s like a Set, but it can contain multiple copies of the same element.&lt;/p&gt;
&lt;p&gt;The two main operations on a Bag that we’re concerned with are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Add(x)&lt;/li&gt;
&lt;li&gt;Remove(x)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;You probably also want to iterate over the Bag, count elements, etc, but those do not modify the Bag therefore don’t need synchronization.&lt;/p&gt;
&lt;p&gt;Add and remove are not commutative. Imagine that Ping, Pong and Pang all have an instance of a bag that contains a kiwi (i.e. 🥝).&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://digitalfreepen.com/images/2017/alchemy_kiwi1.jpg&quot; width=&quot;500&quot;/&gt;&lt;/center&gt;
&lt;p&gt;Simultaneously, Ping puts in another kiwi, Pong removes the kiwi and Pang removes a kiwi. What happens?&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://digitalfreepen.com/images/2017/alchemy_kiwi2.jpg&quot; width=&quot;500&quot;/&gt;&lt;/center&gt;
&lt;p&gt;The fact that both Pong and Pang both decided to remove a Kiwi from the bag at once is not a problem (although &lt;em&gt;jeez, Pong, Pang, why did you have to do that?&lt;/em&gt;). Remember, operations are idempotent and the end result should just be that the kiwi got removed from the bag. The problem is that Ping has two kiwis in his bag (🥝🥝) when receiving the two DELETE(🥝) messages from Pong and Page so Ping deletes both kiwis 🥝🥝. In the meantime, Pong and Pang will end up with either one kiwi 🥝 or no kiwi 🥝 depending on whether ADD(🥝) or DELETE(🥝) arrived first.&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://digitalfreepen.com/images/2017/alchemy_kiwi3.jpg&quot; width=&quot;500&quot;/&gt;&lt;/center&gt;
&lt;p&gt;It’s The Kiwipocalypse 💥🥝🔥.&lt;/p&gt;
&lt;p&gt;We can fix this by changing the semantics of the operation a little. Now, not only are kiwis 🥝 a unique fruit different from other fruits 🍓🍌🍏, but we’ll make every kiwi unique. I’m calling this The Kiwi Manifesto 🥝. More specifically, we’ll &lt;strong&gt;assign each individual fruit a unique ID when created&lt;/strong&gt;.&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://digitalfreepen.com/images/2017/alchemy_kiwi4.jpg&quot; width=&quot;500&quot;/&gt;&lt;/center&gt;
&lt;p&gt;The programmer will modify the Bag in the same way with &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD(🥝)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;REMOVE(🥝)&lt;/code&gt;. But the operation that will get sent to other clients will be &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD(🥝, &amp;lt;unique id&amp;gt;)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;REMOVE(&amp;lt;unique id&amp;gt;)&lt;/code&gt;. When adding a fruit to the bag, a &lt;strong&gt;globally unique id that has never been used before&lt;/strong&gt; (in any client, &lt;em&gt;ever&lt;/em&gt;) gets created and assigned to the fruit. When removing a fruit from the bag, the remove operation will remove the fruit from the local bag, get the removed fruit’s unique id, and send a message to other clients to remove an item in the bag with that unique id. Not exposing the unique id to the user also makes sure that they can’t ask to delete a kiwi that doesn’t exist yet.&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://digitalfreepen.com/images/2017/alchemy_kiwi5.jpg&quot; width=&quot;500&quot;/&gt;&lt;/center&gt;
&lt;p&gt;This should make intuitive sense. Now, the delete message isn’t just about deleting a kiwi, it’s about deleting &lt;em&gt;that&lt;/em&gt; kiwi. And you no longer run into ordering problems.&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://digitalfreepen.com/images/2017/alchemy_kiwi6.jpg&quot; width=&quot;500&quot;/&gt;&lt;/center&gt;
&lt;p&gt;Finally, how do you generate new, globally unique ids? &lt;del&gt;You need consensus between clients, so implement Paxos.&lt;/del&gt; Just kidding. Assuming that all clients have a unique identifier, make it part of the new object’s unique id. This makes sure that objects created in different clients are distinguishable without needing them to communicate with each other. To make sure that objects created by the same client are distinguishable, create a counter on each client that increments the bag is modified and add it to the unique id. In summary each object is tagged with (client id, counter).&lt;/p&gt;

&lt;p&gt;Alright, but you say, &lt;em&gt;“that’s cool, but I didn’t come here to build fruit baskets, I want to make a text editor”&lt;/em&gt;. Fine, fine.&lt;/p&gt;
&lt;p&gt;A text document is not that different from a Bag (a bag of Alpha-Bit cereals anybody?). There’s a bunch of characters that you can add and delete. It’s just that the problem is a bit harder because each character has a position. That’s one way to look at it. Another way that’ll be more helpful to us is to say that a &lt;strong&gt;text document is an ordered bag of characters&lt;/strong&gt;. The position of the characters then simply follow from that order (even if there’s newlines, those are just a “\n” character).&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://digitalfreepen.com/images/2017/alchemy_alphabit.jpg&quot; width=&quot;400&quot;/&gt;&lt;/center&gt;
&lt;p&gt;So what is the order going to be? What we’re going to try to do in this section and the next section is to design a way of &lt;strong&gt;generating unique ID for characters&lt;/strong&gt; such that the &lt;strong&gt;sort order of those ID will tell us the order of those character in the document&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To do this, let’s first think about how we would insert characters in a line where all the existing characters have already been assigned unique IDs. Suppose our IDs were just integers, and we sorted characters by increasing ID. We might have something like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;o c c u r e n  c  e
1 4 6 7 8 9 10 11 12
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wait that’s not how &lt;del&gt;occurence&lt;/del&gt; occurrence is spelled. Spelling &lt;a href=&quot;https://cs.uwaterloo.ca/~plragde/teachstory.html&quot;&gt;occurrence is hard ok&lt;/a&gt;? Anyway let’s fix that by adding an “r” between (“r”, 8) and (“e”, 9). But there’s no room! I guess we’re stuck with this spelling now.&lt;/p&gt;
&lt;p&gt;Or not. A natural thing to do would just to create a &lt;strong&gt;fractional index&lt;/strong&gt; between 8 and 9. If we insert the character (“r”, 8.5), then we get the expected result:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;o c c u r r   e n  c  e
1 4 6 7 8 8.5 9 10 11 12
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Therefore, we could use floats instead of integers to store our character IDs. In practice, we would want to store a list of integer representing the digits after the fraction so we don’t ever run out of precision. There’s also no need to have indices &amp;gt; 1 if we’re going to have fractional indices anyway, so we’ll just store the fractional digits.&lt;/p&gt;
&lt;p&gt;Fractional indices by themselves of course are not &lt;em&gt;globally&lt;/em&gt; unique IDs. Our IDs will need to be a bit more clever than that to be unique like snowflakes ❄️.&lt;/p&gt;

&lt;p&gt;To generate globally unique IDs which I will now call &lt;strong&gt;position identifiers&lt;/strong&gt; (since they identify stuff and position stuff), there’s two situations that we need to handle:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Two clients generating the same ID at the same time (e.g. insert a character at the same position concurrently)&lt;/li&gt;
&lt;li&gt;One client generating an ID that was already generated (e.g. delete a character and reinsert it)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Here’s the high level idea on how we’re going to solve this. Assume all clients have a &lt;strong&gt;unique site ID&lt;/strong&gt;. We’re still going to use fractional indices, but every time we insert a character and add or change a digit in a fraction, we’ll &lt;strong&gt;tag the digit with the site ID at which it was inserted&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This is how it looks like. Say that whale 🐋 starts a document with “my hero” and water buffalo 🐃 enters that same document.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;highlight code&quot;&gt;
m  [&lt;span class=&quot;whl&quot;&gt;(1, 🐋)&lt;/span&gt;]
y  [&lt;span class=&quot;whl&quot;&gt;(2, 🐋)&lt;/span&gt;]
_  [&lt;span class=&quot;whl&quot;&gt;(3, 🐋)&lt;/span&gt;]
h  [&lt;span class=&quot;whl&quot;&gt;(4, 🐋)&lt;/span&gt;]
e  [&lt;span class=&quot;whl&quot;&gt;(5, 🐋)&lt;/span&gt;]
r  [&lt;span class=&quot;whl&quot;&gt;(6, 🐋)&lt;/span&gt;]
o  [&lt;span class=&quot;whl&quot;&gt;(7, 🐋)&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If water buffalo adds “super”, then the document might look like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;31&quot;&gt;
&lt;pre class=&quot;highlight code&quot;&gt;
m  [&lt;span class=&quot;whl&quot;&gt;(1, 🐋)&lt;/span&gt;]
y  [&lt;span class=&quot;whl&quot;&gt;(2, 🐋)&lt;/span&gt;]
_  [&lt;span class=&quot;whl&quot;&gt;(3, 🐋)&lt;/span&gt;]
s  [&lt;span class=&quot;whl&quot;&gt;(3, 🐋)&lt;/span&gt;, &lt;span class=&quot;buf&quot;&gt;(1, 🐃)&lt;/span&gt;]
u  [&lt;span class=&quot;whl&quot;&gt;(3, 🐋)&lt;/span&gt;, &lt;span class=&quot;buf&quot;&gt;(2, 🐃)&lt;/span&gt;]
p  [&lt;span class=&quot;whl&quot;&gt;(3, 🐋)&lt;/span&gt;, &lt;span class=&quot;buf&quot;&gt;(3, 🐃)&lt;/span&gt;]
e  [&lt;span class=&quot;whl&quot;&gt;(3, 🐋)&lt;/span&gt;, &lt;span class=&quot;buf&quot;&gt;(4, 🐃)&lt;/span&gt;]
r  [&lt;span class=&quot;whl&quot;&gt;(3, 🐋)&lt;/span&gt;, &lt;span class=&quot;buf&quot;&gt;(5, 🐃)&lt;/span&gt;]
h  [&lt;span class=&quot;whl&quot;&gt;(4, 🐋)&lt;/span&gt;]
e  [&lt;span class=&quot;whl&quot;&gt;(5, 🐋)&lt;/span&gt;]
r  [&lt;span class=&quot;whl&quot;&gt;(6, 🐋)&lt;/span&gt;]
o  [&lt;span class=&quot;whl&quot;&gt;(7, 🐋)&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If whale accidentally hits the keyboard and adds a bunch of “u”s (whales have fat fingers, I read it on Wikipedia), then it could look like this.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;highlight code&quot;&gt;
m  [&lt;span class=&quot;whl&quot;&gt;(1, 🐋)&lt;/span&gt;]
y  [&lt;span class=&quot;whl&quot;&gt;(2, 🐋)&lt;/span&gt;]
_  [&lt;span class=&quot;whl&quot;&gt;(3, 🐋)&lt;/span&gt;]
s  [&lt;span class=&quot;whl&quot;&gt;(3, 🐋)&lt;/span&gt;, &lt;span class=&quot;buf&quot;&gt;(1, 🐃)&lt;/span&gt;]
u  [&lt;span class=&quot;whl&quot;&gt;(3, 🐋)&lt;/span&gt;, &lt;span class=&quot;buf&quot;&gt;(2, 🐃)&lt;/span&gt;]
u  [&lt;span class=&quot;whl&quot;&gt;(3, 🐋)&lt;/span&gt;, &lt;span class=&quot;buf&quot;&gt;(2, 🐃)&lt;/span&gt;, &lt;span class=&quot;whl&quot;&gt;(1, 🐋)&lt;/span&gt;]
u  [&lt;span class=&quot;whl&quot;&gt;(3, 🐋)&lt;/span&gt;, &lt;span class=&quot;buf&quot;&gt;(2, 🐃)&lt;/span&gt;, &lt;span class=&quot;whl&quot;&gt;(2, 🐋)&lt;/span&gt;]
p  [&lt;span class=&quot;whl&quot;&gt;(3, 🐋)&lt;/span&gt;, &lt;span class=&quot;buf&quot;&gt;(3, 🐃)&lt;/span&gt;]
e  [&lt;span class=&quot;whl&quot;&gt;(3, 🐋)&lt;/span&gt;, &lt;span class=&quot;buf&quot;&gt;(4, 🐃)&lt;/span&gt;]
r  [&lt;span class=&quot;whl&quot;&gt;(3, 🐋)&lt;/span&gt;, &lt;span class=&quot;buf&quot;&gt;(5, 🐃)&lt;/span&gt;]
h  [&lt;span class=&quot;whl&quot;&gt;(4, 🐋)&lt;/span&gt;]
e  [&lt;span class=&quot;whl&quot;&gt;(5, 🐋)&lt;/span&gt;]
r  [&lt;span class=&quot;whl&quot;&gt;(6, 🐋)&lt;/span&gt;]
o  [&lt;span class=&quot;whl&quot;&gt;(7, 🐋)&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And so it went on, and a friendship between whales and water buffalos was formed!🐋!🐃! By making sure that the last digit of any newly added character’s position identifier is always tagged with the site ID, two clients can never conflict just by adding new characters.&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;You might think every position identifier could just contain a single site ID instead of a site ID for every digit, but you do need to tag every digit with a site ID. As we’ll see later, the sort order depends on the site ID so some site IDs need to be preserved to make sure that we’re inserting at the right place.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Finally, to handle the case of a client deleting and reinserting the same character (I know it’s you, silly monkey 🙈), every client gets a counter that always increments anytime an action happens. A simple integer counter suffices if you have a central server though the Logoot paper suggests using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Lamport_timestamps&quot;&gt;Lamport Timestamp&lt;/a&gt; which is only two lines of arithmetic anyway.&lt;/p&gt;
&lt;p&gt;Deleting characters is simply a DELETE(position identifier) operation, just like in the fruit bag example.&lt;/p&gt;
&lt;p&gt;Now that we got:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Globally unique IDs with the CREATE operation&lt;/li&gt;
&lt;li&gt;CREATE and DELETE commute&lt;/li&gt;
&lt;li&gt;The sort order of the ID defines what the order of the character is to represent text&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We got a collaborative, synchronized text editor! Well, mostly that’s true. I guess I should talk about some implementations details.&lt;/p&gt;

&lt;p&gt;Up to this point, I’ve been handwaving over all the details to give you an intuition of how this CRDT works. But those details are kind of important to make sure we’ve covered all edge cases. I recommend also reading the Logoot paper for completeness. It’s a pretty readable paper. Note that I’ll be using similar, but slightly different terminology at places for ease of presentation. Let’s start with a proper definition of a position identifier.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;A &lt;strong&gt;position identifier&lt;/strong&gt; generated at site \( s \) is a tuple (position, \( clock_s \)) where the \( clock(s) \) is the Lamport clock value at site&lt;/em&gt; \( s \)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A &lt;strong&gt;position&lt;/strong&gt; is a list of identifiers&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;An &lt;strong&gt;identifier&lt;/strong&gt; is a tuple (digit, site id) where digit and site id are integers&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The digits can be in any base you want. I personally use 256 and convert the number to a string for ease of debugging, but other reasonable choices include MAX_INT, Base64, Base85, etc. Note also that for simplicity, each position is between 0 and 1 insofar as the digits are concerned, so we can think of a position as \( p = 0.p_1p_2p_3… \) where \( p_i \) are identifiers and we don’t need to store anything left of the decimal.&lt;/p&gt;
&lt;p&gt;In code, the data structures look like this:&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;lamport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we need to define the sort order between the position identifiers. Note that the clock value \( clock_s \) is not used for sorting since a client will never insert a character with the same position as another unless that character has already been deleted. So we’re really just defining the sort order between positions, which I implemented as such:&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;comparePosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;comp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compareIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This sort order is more or less what you’d expect, sorting by the digits and using sites as tiebreakers. You may refer to the paper for the formal definition and to make sure I didn’t make any mistakes. It’s worth making sure you really understand the sort order, because it affects how we insert characters. In particular, having sites as tiebreakers means you can have a sorted list of positions that looks like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;highlight code&quot;&gt;
[(&lt;strong&gt;1&lt;/strong&gt;, &lt;em&gt;0&lt;/em&gt;)]                      0.&lt;strong&gt;1&lt;/strong&gt;
[(&lt;strong&gt;1&lt;/strong&gt;, &lt;em&gt;0&lt;/em&gt;), (&lt;strong&gt;4&lt;/strong&gt;, &lt;em&gt;0&lt;/em&gt;)]              0.&lt;strong&gt;14&lt;/strong&gt;
[(&lt;strong&gt;1&lt;/strong&gt;, &lt;em&gt;0&lt;/em&gt;), (&lt;strong&gt;6&lt;/strong&gt;, &lt;em&gt;0&lt;/em&gt;), (&lt;strong&gt;3&lt;/strong&gt;, &lt;em&gt;1&lt;/em&gt;)]      0.&lt;strong&gt;163&lt;/strong&gt;
[(&lt;strong&gt;1&lt;/strong&gt;, &lt;em&gt;0&lt;/em&gt;), (&lt;strong&gt;7&lt;/strong&gt;, &lt;em&gt;0&lt;/em&gt;)]              0.&lt;strong&gt;17&lt;/strong&gt;
[(&lt;strong&gt;1&lt;/strong&gt;, &lt;em&gt;1&lt;/em&gt;)]                      0.&lt;strong&gt;1&lt;/strong&gt;
[(&lt;strong&gt;1&lt;/strong&gt;, &lt;em&gt;1&lt;/em&gt;), (&lt;strong&gt;1&lt;/strong&gt;, &lt;em&gt;1&lt;/em&gt;)]              0.&lt;strong&gt;11&lt;/strong&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Generating new position identifiers on insertion is more complex. I’ll describe what I came up with but be warned, while I made sure to write tests, this has not been tested in large production systems.&lt;/p&gt;
&lt;blockquote readability=&quot;17&quot;&gt;
&lt;p&gt;The algorithm described in Logoot is not suitable for our use case. In addition to missing what I think are key details on how to handle certain edge cases, the original paper was written for synchronizing individual lines, whereas a real-time collaborative editor needs to synchronize individual characters. Furthermore, when writing text documents, 99% of character insertions are going to happen on the right side of the last inserted character, with only occasional cursor jumps. We need to take this into account when creating position identifiers. Technically position identifiers are unbounded in size, but we can try to not make them grow too fast. If we were to naively, say, generate a position identifier halfway between two characters, the size of the position identifiers would grow very fast.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can’t just do arithmetic on positions as arbitrary precision numbers because when two digits are the same, the sites could still be different. In the example above, we saw how this can lead to positions not being sorted in the same way numbers would be sorted.&lt;/p&gt;
&lt;p&gt;Furthermore, as the “gap” in position between two characters gets smaller, we need to create smaller increments in position.&lt;/p&gt;
&lt;p&gt;Because this algorithm is intricate, I’ll start with the code and explain how to think about it:&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot; readability=&quot;27&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generatePositionBetween&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
                                 &lt;span class=&quot;nx&quot;&gt;position2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
                                 &lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Get either the head of the position, or fallback to default value&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;head1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;head2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;head2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Case 1: Head digits are different&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromIdentifierList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromIdentifierList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subtractGreaterThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Increment n1 by some amount less than delta&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toIdentifierList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;head2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Case 2: Head digits are the same, sites are different&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;generatePositionBetween&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;head2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Case 3: Head digits and sites are the same&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;generatePositionBetween&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;invalid site ordering&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;generatePositionBetween&lt;/code&gt; is a function that recursively examines the most significant digits of an identifier by handling three different cases.&lt;/p&gt;
&lt;h2 id=&quot;case-1-head-digits-are-different&quot;&gt;Case 1: Head digits are different&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight code&quot;&gt;
beforePosition = [(&lt;strong&gt;1&lt;/strong&gt;, &lt;em&gt;x&lt;/em&gt;), ...]
afterPosition  = [(&lt;strong&gt;2&lt;/strong&gt;, &lt;em&gt;y&lt;/em&gt;), ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the base case. If the most significant digits of the before and after positions differ, than it is possible to generate a new position such that beforePosition &amp;lt; newPosition &amp;lt; afterPosition regardless of the values of the sites &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;, simply by incrementing the digits of beforePosition by a small amount less than (afterPosition - beforePosition). Therefore, in this case, we first convert the positions to a decimal representation by dropping the sites.&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// In module 'decimal'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fromIdentifierList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;identifiers&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;identifiers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ident&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ident&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The arithmetic operations &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;subtractGreaterThan&lt;/code&gt; simply implement textbook addition and subtraction and you may refer to the source code for an implementation. The &lt;code class=&quot;highlighter-rouge&quot;&gt;increment&lt;/code&gt; operation, on the other hand, is a bit more tricky.&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstNonzeroDigit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstNonzeroDigit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All this does it increment a digit of &lt;code class=&quot;highlighter-rouge&quot;&gt;n1&lt;/code&gt; by 1 such that the increment is less than delta. Another tricky bit of &lt;code class=&quot;highlighter-rouge&quot;&gt;increment&lt;/code&gt; is that we want to make sure that the result of increment does not have a 0 as the last digit. Why? Because then we would have to later make sure that we’re able to generate positions between two ambiguous representations of the same decimal (e.g. 0.201 and 0.2010). The simple trick used here is to increment again if that happens.&lt;/p&gt;
&lt;p&gt;When we’re done generating a new decimal position, we convert it back into a position by assigning sites to it in such a way to maintain the sort order using &lt;code class=&quot;highlighter-rouge&quot;&gt;toIdentifierList&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// In module 'decimal'&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toIdentifierList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
                          &lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
                          &lt;span class=&quot;nx&quot;&gt;creationSite&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Implements the constructPosition rules from the Logoot paper&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;creationSite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;digit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;digit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;creationSite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;case-2-head-digits-are-the-same-sites-are-different&quot;&gt;Case 2: Head digits are the same, sites are different&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight code&quot;&gt;
beforePosition = [(&lt;strong&gt;1&lt;/strong&gt;, &lt;em&gt;1&lt;/em&gt;), ...]
afterPosition  = [(&lt;strong&gt;1&lt;/strong&gt;, &lt;em&gt;3&lt;/em&gt;), ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, observe that &lt;code class=&quot;highlighter-rouge&quot;&gt;newPosition = [(1,1), ...anything]&lt;/code&gt; will always satisfy newPosition &amp;lt; afterPosition.&lt;/p&gt;
&lt;p&gt;More generally, if the site is used as a tiebreaker, notice that the new position could be anything that starts with the same identifier as beforePosition and will still be sorted before afterPosition. Which is why in the recursion&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;return cons(head1, generatePositionBetween(rest(position1), [], site));
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We just pass an empty list as the second parameter.&lt;/p&gt;
&lt;h2 id=&quot;case-3-head-digits-and-sites-are-the-same&quot;&gt;Case 3: Head digits and sites are the same&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight code&quot;&gt;
beforePosition = [(&lt;strong&gt;1&lt;/strong&gt;, &lt;em&gt;1&lt;/em&gt;), ...]
afterPosition  = [(&lt;strong&gt;1&lt;/strong&gt;, &lt;em&gt;1&lt;/em&gt;), ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the two digits are the same, then we need to look at the subsequent digits to find an in-between position, so we just recurse on the rest.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;return cons(head1, generatePositionBetween(rest(position1), rest(position2), site));
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With these three cases covered, we’re able to generate new positions for inserted characters.&lt;/p&gt;
&lt;h2 id=&quot;staying-all-in-sync&quot;&gt;Staying all in sync&lt;/h2&gt;
&lt;p&gt;To synchronize between clients, “add” and “remove” events are sent as such.&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RemoteChange&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;add&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;remove&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;add&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;remove&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;Char.t&lt;/code&gt; is just an object containing a position identifier and a character. As in the case of fruit baskets, deleting a character just needs to delete by ID.&lt;/p&gt;
&lt;p&gt;For simplicity, we always send remote changes as single character insertions or deletions. For efficiency, it would be better to batch them though that’s a simple optimization.&lt;/p&gt;

&lt;p&gt;Let’s recap what we’ve created so far: a way of maintaining an ordered list of characters with unique identifiers and generate new identifiers in-between characters.&lt;/p&gt;
&lt;p&gt;Using what we’ve seen previously, this is sufficient to represent a text document and synchronize it between clients. On the server-side, it’s actually sufficient to just store all the characters in an unordered hashtable, since the server only reads and relays ADD and DELETE operations.&lt;/p&gt;
&lt;p&gt;Of course, on the client-side, users want more than a representation of a text document. Users want to be able to modify it with a simple interface. In my case, I am using CodeMirror as the underlying text editor, a popular open-source Javascript library.&lt;/p&gt;
&lt;p&gt;CodeMirror has obviously no idea about CRDTs, and just stores the text content as lines of characters. This means I have to store two copies of the text: one in the text editor for client use, and one in the CRDT for synchronization use.&lt;/p&gt;
&lt;p&gt;To interact with CodeMirror using the programming API, I can receive change events or send it patches using a EditorChange object that looks something like this:&lt;/p&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EditorChange&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;added&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;removed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(The actual object is a bit different but I changed it for ease of presentation)&lt;/p&gt;
&lt;p&gt;That means we need to keep the CodeMirror editor and the CRDT in sync when any of the following four events happen:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Remote change: insertion
&lt;ol&gt;&lt;li&gt;Get index of the preceding character in the CRDT&lt;/li&gt;
&lt;li&gt;Insert character in the CRDT&lt;/li&gt;
&lt;li&gt;Create a local change inserting a character at that index&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Remote change: deletion
&lt;ol&gt;&lt;li&gt;Get the index of a character with the same position identifier in the CRDT&lt;/li&gt;
&lt;li&gt;Delete that character in the CRDT&lt;/li&gt;
&lt;li&gt;Create a local change deleting a character at that index&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Local change: insertion at position n
&lt;ol&gt;&lt;li&gt;Find the nth and (n+1)th character in the CRDT&lt;/li&gt;
&lt;li&gt;Create a position identifier between character n and n + 1 and insert character in the CRDT&lt;/li&gt;
&lt;li&gt;Send out a remote insert change for that character&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Local change: deletion at position n
&lt;ol&gt;&lt;li&gt;Find the nth character in the CRDT&lt;/li&gt;
&lt;li&gt;Delete that character in the CRDT&lt;/li&gt;
&lt;li&gt;Send out a remote delete change for that character&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;I won’t go into the details of how each of these events are handled. It’s non-trivial and a lot of lines of code, but ultimately rather mechanical and I don’t think there’s a whole lot of insights to be had.&lt;/p&gt;
&lt;p&gt;That being said, there’s 3 ways in which you could implement this, from easiest (and least performant) to hardest (and most performant).&lt;/p&gt;
&lt;h2 id=&quot;array-of-position-identifier-character&quot;&gt;Array of &amp;lt;position identifier, character&amp;gt;&lt;/h2&gt;
&lt;p&gt;The simplest thing you can do is to store all your characters as a linear array. When you need to search for a position identifier, use binary search. Searching for newline characters may require linear search. This is only going to scale up to a few hundred characters, since you have worst-case quadratic complexity when making large changes. However, it is perfectly reasonable to start with this as a prototype.&lt;/p&gt;
&lt;h2 id=&quot;array-of-array-of-position-identifier-character&quot;&gt;Array of array of &amp;lt;position identifier, character&amp;gt;&lt;/h2&gt;
&lt;p&gt;You can also split the array of characters for the whole document and have one array for each line. This should allow you to support text documents up to a few hundred lines, assuming most text documents have at most a few hundred characters per line. If you only want to build a collaborative text editor as a side project, this approach is probably fine.&lt;/p&gt;
&lt;h2 id=&quot;binary-search-tree-of-position-identifier-character&quot;&gt;Binary search tree of &amp;lt;position identifier, character&amp;gt;&lt;/h2&gt;
&lt;p&gt;The most efficient approach is to store the characters in a binary search tree. You’ll probably have to supply a custom comparator. Finding, inserting and deleting characters are all O(log(n)) operations as long as you choose an implementation that’s balanced.&lt;/p&gt;
&lt;p&gt;You will, however, also need to augment the binary tree with &lt;a href=&quot;https://en.wikipedia.org/wiki/Order_statistic_tree&quot;&gt;order statistics&lt;/a&gt;. That is, you also want to be able to query for the nth character in the tree, by storing the size of the tree at each node. You might also want to be able to query for the nth newline character.&lt;/p&gt;
&lt;p&gt;The downside, in addition to requiring a custom data structure, is that the binary tree will require additional storage per character (at the very least a left and right pointer, integer for node size) which is big given how memory hungry this approach is already.&lt;/p&gt;
&lt;h2 id=&quot;trie-of-positions&quot;&gt;Trie of positions&lt;/h2&gt;
&lt;p&gt;You can reuse individual positions (“digits”) in a position identifier by storing the whole thing as a trie. Of course, this is a bit more challenging than a regular trie, since you will have to deal with the site tiebreakers and removal of characters. See also &lt;a href=&quot;https://hal.inria.fr/inria-00445975/document&quot;&gt;TreeDoc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(Note that in any case, can’t use a hashtable on the client since hashtables don’t provide an ordering to the keys).&lt;/p&gt;

&lt;p&gt;I’m not going to pretend writing a real-time collaborative text editor is an easy project. It took me 3-4 days just to write the core of it, and an order magnitude more to write tests, make the UI nice, and add other features on top of it (e.g. seeing the other people’s cursors). It would take even more to make it resilient to failures, implement access control, etc. However, as I hope this article convinced you, there are approaches that can be fairly intuitive and the solution can be understood as a series of layers, and broken down into approachable tasks.&lt;/p&gt;
&lt;p&gt;Thanks for reading, and let me know if you have any feedback!&lt;/p&gt;
</description>
<pubDate>Sat, 07 Oct 2017 16:35:36 +0000</pubDate>
<dc:creator>gsempe</dc:creator>
<og:url>http://digitalfreepen.com/2017/10/06/simple-real-time-collaborative-text-editor.html</og:url>
<og:description>This post is my attempt to write an easy to understand introduction to the main ideas behind building a real-time col...</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>http://digitalfreepen.com/2017/10/06/simple-real-time-collaborative-text-editor.html</dc:identifier>
</item>
<item>
<title>A Branchless UTF-8 Decoder</title>
<link>http://nullprogram.com/blog/2017/10/06/</link>
<guid isPermaLink="true" >http://nullprogram.com/blog/2017/10/06/</guid>
<description>&lt;time datetime=&quot;2017-10-06&quot;&gt;October 06, 2017&lt;/time&gt;&lt;p&gt;nullprogram.com/blog/2017/10/06/&lt;/p&gt;
&lt;p&gt;This week I took a crack at writing a branchless UTF-8 decoder: a function that decodes a single UTF-8 code point from a byte stream without any &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statements, loops, short-circuit operators, or other sorts of conditional jumps. You can find the source code here along with a test suite and benchmark:&lt;/p&gt;
&lt;p&gt;In addition to decoding the next code point, it detects any errors and returns a pointer to the next code point. It’s the complete package.&lt;/p&gt;
&lt;p&gt;Why branchless? Because high performance CPUs are pipelined. That is, a single instruction is executed over a series of stages, and many instructions are executed in overlapping time intervals, each at a different stage.&lt;/p&gt;
&lt;p&gt;The usual analogy is laundry. You can have more than one load of laundry in process at a time because laundry is typically a pipelined process. There’s a washing machine stage, dryer stage, and folding stage. One load can be in the washer, a second in the drier, and a third being folded, all at once. This greatly increases throughput because, under ideal circumstances with a full pipeline, an instruction is completed each clock cycle despite any individual instruction taking many clock cycles to complete.&lt;/p&gt;
&lt;p&gt;Branches are the enemy of pipelines. The CPU can’t begin work on the next instruction if it doesn’t know which instruction will be executed next. It must finish computing the branch condition before it can know. To deal with this, pipelined CPUs are also equipped with &lt;em&gt;branch predictors&lt;/em&gt;. It makes a guess at which branch will be taken and begins executing instructions on that branch. The prediction is initially made using static heuristics, and later those predictions are improved &lt;a href=&quot;http://www.agner.org/optimize/microarchitecture.pdf&quot;&gt;by learning from previous behavior&lt;/a&gt;. This even includes predicting the number of iterations of a loop so that the final iteration isn’t mispredicted.&lt;/p&gt;
&lt;p&gt;A mispredicted branch has two dire consequences. First, all the progress on the incorrect branch will need to be discarded. Second, the pipeline will be flushed, and the CPU will be inefficient until the pipeline fills back up with instructions on the correct branch. With a sufficiently deep pipeline, it can easily be &lt;strong&gt;more efficient to compute and discard an unneeded result than to avoid computing it in the first place&lt;/strong&gt;. Eliminating branches means eliminating the hazards of misprediction.&lt;/p&gt;
&lt;p&gt;Another hazard for pipelines is &lt;em&gt;dependencies&lt;/em&gt;. If an instruction depends on the result of a previous instruction, it may have to wait for the previous instruction to make sufficient progress before it can complete one of its stages. This is known as a &lt;em&gt;pipeline stall&lt;/em&gt;, and it is an important consideration in instruction set architecture (ISA) design.&lt;/p&gt;
&lt;p&gt;For example, on the x86-64 architecture, storing a 32-bit result in a 64-bit register will automatically clear the upper 32 bits of that register. Any further use of that destination register cannot depend on prior instructions since all bits have been set. This particular optimization was missed in the design of the i386: Writing a 16-bit result to 32-bit register leaves the upper 16 bits intact, creating false dependencies.&lt;/p&gt;
&lt;p&gt;Dependency hazards are mitigated using &lt;em&gt;out-of-order execution&lt;/em&gt;. Rather than execute two dependent instructions back to back, which would result in a stall, the CPU may instead executing an independent instruction further away in between. A good compiler will also try to spread out dependent instructions in its own instruction scheduling.&lt;/p&gt;
&lt;p&gt;The effects of out-of-order execution are typically not visible to a single thread, where everything will appear to have executed in order. However, when multiple processes or threads can access the same memory &lt;a href=&quot;http://preshing.com/20120515/memory-reordering-caught-in-the-act/&quot;&gt;out-of-order execution can be observed&lt;/a&gt;. It’s one of the many &lt;a href=&quot;http://nullprogram.com/blog/2014/09/02/&quot;&gt;challenges of writing multi-threaded software&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The focus of my UTF-8 decoder was to be branchless, but there was one interesting dependency hazard that neither GCC nor Clang were able to resolve themselves. More on that later.&lt;/p&gt;
&lt;h3 id=&quot;what-is-utf-8&quot;&gt;What is UTF-8?&lt;/h3&gt;
&lt;p&gt;Without getting into the history of it, you can generally think of &lt;a href=&quot;https://en.wikipedia.org/wiki/UTF-8&quot;&gt;UTF-8&lt;/a&gt; as a method for encoding a series of 21-bit integers (&lt;em&gt;code points&lt;/em&gt;) into a stream of bytes.&lt;/p&gt;
&lt;ul readability=&quot;2.3965517241379&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Shorter integers encode to fewer bytes than larger integers. The shortest available encoding must be chosen, meaning there is one canonical encoding for a given sequence of code points.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3.756345177665&quot;&gt;
&lt;p&gt;Certain code points are off limits: &lt;em&gt;surrogate halves&lt;/em&gt;. These are code points &lt;code class=&quot;highlighter-rouge&quot;&gt;U+D800&lt;/code&gt; through &lt;code class=&quot;highlighter-rouge&quot;&gt;U+DFFF&lt;/code&gt;. Surrogates are used in UTF-16 to represent code points above U+FFFF and serve no purpose in UTF-8. This has &lt;a href=&quot;https://simonsapin.github.io/wtf-8/&quot;&gt;interesting consequences&lt;/a&gt; for pseudo-Unicode strings, such “wide” strings in the Win32 API, where surrogates may appear unpaired. Such sequences cannot legally be represented in UTF-8.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Keeping in mind these two rules, the entire format is summarized by this table:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;length byte[0]  byte[1]  byte[2]  byte[3]
1      0xxxxxxx
2      110xxxxx 10xxxxxx
3      1110xxxx 10xxxxxx 10xxxxxx
4      11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; placeholders are the bits of the encoded code point.&lt;/p&gt;
&lt;p&gt;UTF-8 has some really useful properties:&lt;/p&gt;
&lt;ul readability=&quot;5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;It’s backwards compatible with ASCII, which never used the highest bit.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Sort order is preserved. Sorting a set of code point sequences has the same result as sorting their UTF-8 encoding.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;No additional zero bytes are introduced. In C we can continue using null terminated &lt;code class=&quot;highlighter-rouge&quot;&gt;char&lt;/code&gt; buffers, often without even realizing they hold UTF-8 data.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;It’s self-synchronizing. A leading byte will never be mistaken for a continuation byte. This allows for byte-wise substring searches, meaning UTF-8 unaware functions like &lt;code class=&quot;highlighter-rouge&quot;&gt;strstr(3)&lt;/code&gt; continue to work without modification (except for normalization issues). It also allows for unambiguous recovery of a damaged stream.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;A straightforward approach to decoding might look something like this:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;utf8_simple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xe0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xc0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xe0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x07&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// invalid
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// skip this byte
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xd800&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xdfff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// surrogate half
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It branches off on the highest bits of the leading byte, extracts all of those &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; bits from each byte, concatenates those bits, checks if it’s a surrogate half, and returns a pointer to the next character. (This implementation does &lt;em&gt;not&lt;/em&gt; check that the highest two bits of each continuation byte are correct.)&lt;/p&gt;
&lt;p&gt;The CPU must correctly predict the length of the code point or else it will suffer a hazard. An incorrect guess will stall the pipeline and slow down decoding.&lt;/p&gt;
&lt;p&gt;In real world text this is probably not a serious issue. For the English language, the encoded length is nearly always a single byte. However, even for non-English languages, text is &lt;a href=&quot;http://utf8everywhere.org/&quot;&gt;usually accompanied by markup from the ASCII range of characters&lt;/a&gt;, and, overall, the encoded lengths will still have consistency. As I said, the CPU predicts branches based on the program’s previous behavior, so this means it will temporarily learn some of the statistical properties of the language being actively decoded. Pretty cool, eh?&lt;/p&gt;
&lt;p&gt;Eliminating branches from the decoder side-steps any issues with mispredicting encoded lengths. Only errors in the stream will cause stalls. Since that’s probably the unusual case, the branch predictor will be very successful by continually predicting success. That’s one optimistic CPU.&lt;/p&gt;
&lt;h3 id=&quot;the-branchless-decoder&quot;&gt;The branchless decoder&lt;/h3&gt;
&lt;p&gt;Here’s the interface to my branchless decoder:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8_decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I chose &lt;code class=&quot;highlighter-rouge&quot;&gt;void *&lt;/code&gt; for the buffer so that it doesn’t care what type was actually chosen to represent the buffer. It could be a &lt;code class=&quot;highlighter-rouge&quot;&gt;uint8_t&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;char&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned char&lt;/code&gt;, etc. Doesn’t matter. The encoder accesses it only as bytes.&lt;/p&gt;
&lt;p&gt;On the other hand, with this interface you’re forced to use &lt;code class=&quot;highlighter-rouge&quot;&gt;uint32_t&lt;/code&gt; to represent code points. You could always change the function to suit your own needs, though.&lt;/p&gt;
&lt;p&gt;Errors are returned in &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;. It’s zero for success and non-zero when an error was detected, without any particular meaning for different values. Error conditions are mixed into this integer, so a zero simply means the absence of error.&lt;/p&gt;
&lt;p&gt;This is where you could accuse me of “cheating” a little bit. The caller probably wants to check for errors, and so &lt;em&gt;they&lt;/em&gt; will have to branch on &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;. It seems I’ve just smuggled the branches outside of the decoder.&lt;/p&gt;
&lt;p&gt;However, as I pointed out, unless you’re expecting lots of errors, the real cost is branching on encoded lengths. Furthermore, the caller could instead accumulate the errors: count them, or make the error “sticky” by ORing all &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; values together. Neither of these require a branch. The caller could decode a huge stream and only check for errors at the very end. The only branch would be the main loop (“are we done yet?”), which is trivial to predict with high accuracy.&lt;/p&gt;
&lt;p&gt;The first thing the function does is extract the encoded length of the next code point:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lengths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lengths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking back to the UTF-8 table above, only the highest 5 bits determine the length. That’s 32 possible values. The zeros are for invalid prefixes. This will later cause a bit to be set in &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the length in hand, it can compute the position of the next code point in the buffer.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Originally this expression was the return value, computed at the very end of the function. However, after inspecting the compiler’s assembly output, I decided to move it up, and the result was a solid performance boost. That’s because it spreads out dependent instructions. With the address of the next code point known so early, the instructions that decode the next code point can get started early.&lt;/p&gt;
&lt;p&gt;The reason for the &lt;code class=&quot;highlighter-rouge&quot;&gt;!len&lt;/code&gt; is so that the pointer is advanced one byte even in the face of an error (length of zero). Adding that &lt;code class=&quot;highlighter-rouge&quot;&gt;!len&lt;/code&gt; is actually somewhat costly, though I couldn’t figure out why.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shiftc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;masks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shiftc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This reads four bytes regardless of the actual length. Avoiding doing something is branching, so this can’t be helped. The unneeded bits are shifted out based on the length. That’s all it takes to decode UTF-8 without branching.&lt;/p&gt;
&lt;p&gt;One important consequence of always reading four bytes is that &lt;strong&gt;the caller &lt;em&gt;must&lt;/em&gt; zero-pad the buffer to at least four bytes&lt;/strong&gt;. In practice, this means padding the entire buffer with three bytes in case the last character is a single byte.&lt;/p&gt;
&lt;p&gt;The padding must be zero in order to detect errors. Otherwise the padding might look like legal continuation bytes.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4194304&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65536&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shifte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// surrogate half?
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xc0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xc0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shifte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first line checks if the shortest encoding was used, setting a bit in &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; if it wasn’t. For a length of 0, this always fails.&lt;/p&gt;
&lt;p&gt;The second line checks for a surrogate half by checking for a certain prefix.&lt;/p&gt;
&lt;p&gt;The next three lines accumulate the highest two bits of each continuation byte into &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;. Each should be the bits &lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt;. These bits are “compared” to &lt;code class=&quot;highlighter-rouge&quot;&gt;101010&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;0x2a&lt;/code&gt;) using XOR. The XOR clears these bits as long as they exactly match.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://nullprogram.com/img/diagram/utf8-bits.svg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Finally the continuation prefix bits that don’t matter are shifted out.&lt;/p&gt;
&lt;h3 id=&quot;the-goal&quot;&gt;The goal&lt;/h3&gt;
&lt;p&gt;My primary — and totally arbitrary — goal was to beat the performance of &lt;a href=&quot;http://bjoern.hoehrmann.de/utf-8/decoder/dfa/&quot;&gt;Björn Höhrmann’s DFA-based decoder&lt;/a&gt;. Under favorable (and artificial) benchmark conditions I had moderate success. You can try it out on your own system by cloning the repository and running &lt;code class=&quot;highlighter-rouge&quot;&gt;make bench&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With GCC 6.3.0 on an i7-6700, my decoder is about 20% faster than the DFA decoder in the benchmark. With Clang 3.8.1 it’s just 1% faster.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: &lt;a href=&quot;https://github.com/skeeto/branchless-utf8/issues/1&quot;&gt;Björn pointed out&lt;/a&gt; that his site includes a faster variant of his DFA decoder. It is only 10% slower than the branchless decoder with GCC, and it’s 20% faster than the branchless decoder with Clang. So, in a sense, it’s still faster on average, even on a benchmark that favors a branchless decoder.&lt;/p&gt;
&lt;p&gt;The benchmark operates very similarly to &lt;a href=&quot;http://nullprogram.com/blog/2017/09/21/&quot;&gt;my PRNG shootout&lt;/a&gt; (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;alarm(2)&lt;/code&gt;). First a buffer is filled with random UTF-8 data, then the decoder decodes it again and again until the alarm fires. The measurement is the number of bytes decoded.&lt;/p&gt;
&lt;p&gt;The number of errors is printed at the end (always 0) in order to force errors to actually get checked for each code point. Otherwise the sneaky compiler omits the error checking from the branchless decoder, making it appear much faster than it really is — a serious letdown once I noticed my error. Since the other decoder is a DFA and error checking is built into its graph, the compiler can’t really omit its error checking.&lt;/p&gt;
&lt;p&gt;I called this “favorable” because the buffer being decoded isn’t anything natural. Each time a code point is generated, first a length is chosen uniformly: 1, 2, 3, or 4. Then a code point that encodes to that length is generated. The &lt;strong&gt;even distribution of lengths greatly favors a branchless decoder&lt;/strong&gt;. The random distribution inhibits branch prediction. Real text has a far more favorable distribution.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;randchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;65536&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65536&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;131072&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65536&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Given the odd input zero-padding requirement and the artificial parameters of the benchmark, despite the supposed 20% speed boost under GCC, my branchless decoder is not really any better than the DFA decoder in practice. It’s just a different approach. In practice I’d prefer Björn’s DFA decoder.&lt;/p&gt;
&lt;ol class=&quot;references print-only&quot;/&gt;&lt;nav class=&quot;no-print&quot;&gt;
&lt;/nav&gt;
</description>
<pubDate>Sat, 07 Oct 2017 13:24:02 +0000</pubDate>
<dc:creator>zdw</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://nullprogram.com/blog/2017/10/06/</dc:identifier>
</item>
<item>
<title>Sorting Visualizations</title>
<link>https://imgur.com/gallery/RM3wl</link>
<guid isPermaLink="true" >https://imgur.com/gallery/RM3wl</guid>
<description>&lt;div id=&quot;lqbv0fw&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;34.5&quot;&gt;

&lt;div class=&quot;post-image-meta&quot; readability=&quot;14&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;First up: Bubble Sort&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;Generally one of the very first algorithms learned when you're introduced to this stuff in programming classes. Bubble sort finds the largest value in a set and &quot;bubbles&quot; it to the top. For this visualization, that's the far right side. Everything further along the line than that value gets shifted down one spot, and then the algorithm goes back to the start and finds the next largest value to put at the end of what's left. You can see the unsorted portion slowly being shifted down to the left, one iteration at a time, while the completely sorted portion grows from the right.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;RNEkzuj&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;36&quot;&gt;

&lt;div class=&quot;post-image-meta&quot; readability=&quot;17&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;#2: Cocktail Sort&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;This one is basically bubble sort but it goes back and forth across the data. When it bubbles the first value to the top, it then says &quot;well, I'm all the way on the right, I might as well start looking for the smallest value and &quot;bubble&quot; that to the left while I go back down that way. The middle, unsorted portion seems to jiggle because in general, the values are smaller than the largest one being bubbled up, but then it turns right around and they're larger than the one being bubbled down, so they keep getting shifted left and right repeatedly. Might be part of why it's called a cocktail sort - like a cocktail shaker.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;VVnRU6V&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;34.5&quot;&gt;

&lt;div class=&quot;post-image-meta&quot; readability=&quot;14&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;#3: Selection Sort&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;Selection sort is another one of the early sorting algorithms taught to students. It divides the set of data into two sections: a sorted part, and an unsorted part. The algorithm runs through the unsorted part and keeps track of where the lowest value is, and plops that into the sorted part. Then it goes back to the unsorted part and finds the next lowest, then plops that at the end of the sorted part. It keeps doing it, slowly building up the sorted part until the entire thing is just the sorted part.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;zR7gxjT&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;36&quot;&gt;

&lt;div class=&quot;post-image-meta&quot; readability=&quot;17&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;Number Four: Insertion Sort&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;This is pretty similar to Selection, since it has a sorted and unsorted portion of the data, but this one works a little differently. This algorithm looks at the first value, and says &quot;okay this is my sorted part&quot;, then it takes the next value, and inserts it into the sorted part where it belongs within the sorted part, then it checks the next piece and puts it where it belongs in that sorted portion, and it keeps going until it's placed all of the pieces.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;52E47sL&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;41&quot;&gt;

&lt;div class=&quot;post-image-meta&quot; readability=&quot;27&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;Fifth on the list: Odd-Even Sort&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;This is a peculiar one, and probably one you've seen before (a very similar visualization, the inspiration for this album, was on the front page of r/oddlysatisfying less than a week ago.) It appears to have two overlapping sections that slowly pull apart from each other into a sorted rainbow, but what's actually happening is just as magical. This algorithm works basically the same way as Bubble Sort, but it only checks half the values in one passthrough, first it looks at every odd value (the first, third, fifth, and so-on), still comparing them with the thing just above them, and then it goes back and looks at the even values (the second, fourth, sixth...) and compares those as well. As it turns out, doing the sorting this way kind of pulls the data apart from the middle. Values that are more out of position move faster than values closer to where they belong. And so you see the stuff in the middle (having less distance to travel on average than the stuff on the sides) getting to a sorted state well before stuff near the edges. Because this is still a variation of Bubble Sort, though, it does give a slight preference to moving values up, so the top portion will generally finish a little before the bottom portion.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;5rV2CF2&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;38.5&quot;&gt;

&lt;div class=&quot;post-image-meta&quot; readability=&quot;22&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;Six! Merge Sort!&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;This one's just kinda bizarre, but it makes sense if you think about it (or even if you don't). Merge sort says &quot;Okay, I'll sort these two, then I'll move on to the next two and sort those&quot; and it keeps sorting just 2 values until it reaches the end. Then it's like &quot;okay, now I'll sort those two sorted groups of 2 into a group of 4!&quot; and then it does! It runs through all of the data and groups the groups of two into groups of four, then it goes back and makes groups of 8, then 16, then 32! every time, doubling the size of each individual sorted group, until there are only 2 groups left to sort, and then it makes them into a single sorted group containing everything. It was hard finding a way to capture what was happening when it started grouping larger sections together without it taking 9 hours. Merge Sort generally does go faster the closer to the end it is, but it's not this drastic. This only shows the result of each &quot;merge&quot;, though it is still neat to see the small sorted gradients getting bigger and more precise as it goes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;anBHYYj&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;37&quot;&gt;

&lt;div class=&quot;post-image-meta&quot; readability=&quot;19&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;7: Shell Sort&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;Kind of the opposite of merge sort, this algorithm says &quot;okay, lets make big groups of kinda sorted stuff, then lets split those each into smaller groups that are slightly more sorted.&quot; It starts off kinda just lumping the low numbers on the left, the high numbers on the right, and everything else in the middle. Then it lumps everything into 5 groups, then 10, then 20, then 50, then 100! until it's a bajillion sorted groups that each only contain 1 value. This is what I imagine happening when computer experts on tv say &quot;enhance&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;AUNXZjU&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;46.5&quot;&gt;

&lt;div class=&quot;post-image-meta&quot; readability=&quot;38&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;Radix Sort - the weird one&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;Okay, not THE weird one, because heap sort's pretty bizarre too, but this one is very weird. Radix sort goes about sorting data using DIGITS! It looks at the lowest digit (since I used integers, that would be the one's digit) and sorts all of the 0's in one pile, then all the 1's then all the 2's, all the way up through the numbers that have a 9 at the end. Importantly, though, these all stay in order relative to the rest of their group, so if 82 was before 32 in the unsorted mess at the beginning, it's still before 32 after this first pass. This is important because the next step is to sort by the next digit (the ten's) and group them together, so &quot;01, 603, 07&quot; will all be together in the 0 pile, and because they stay in the same position relative to other members of the same group, 01, 02, 03, 04, ... up to 09 will all be in order, but maybe with some stuff between, like a 105, and a 302. And then it goes and sorts by the hundreds digit, which pulls everything into it's correct place. Just as a side note, a number like 8 can be compared to a number with more digits (300) just by adding leading zeroes, so it's read as 008, that way it's grouped correctly. This example only used values up to 360 to be an easy map to hues in the HSV color scale, but you can certainly use this with larger sets of data, and the algorithm would just keep going up the digits until there were none left to check.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;zxdc7NQ&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;45.5&quot;&gt;

&lt;div class=&quot;post-image-meta&quot; readability=&quot;36&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;9: Heap Sort - the other DEFINITE weird one.&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;I was having fun making these and I wanted to try a bunch of different sorting algorithms (there are a TON our there), and this one seemed neat: an algorithm that constructs what is essentially a binary tree inside the set of data, then cascades down that tree to find the proper values. I know, that doesn't really make any sense, but let me try to explain. The first step is to make this tree, by saying &quot;the very left side is the root of the tree, and it branches off into two sections, which we'll place in the next two spots. They each have 2 branches which go in the next four spots, and those each have two branches that go in the next 8 spots. It keeps constructing the tree, with the only rule that the numbers that are in the branch spots (the &quot;children&quot; of the &quot;parent&quot; number that they branched off from) have to be smaller than the parent. This places the largest value at the root of the tree, and it can be placed at the very end, starting off the sorted section of the data set. Next is to remake the tree, because now there's some random value where the root is, because it switched places with it. But we know that the next &quot;root&quot; is one of the two children of the original root (since they're bigger than all of their children, and one of them is bigger than the other) so we just take that child and swap it with the low value at the root, then we compare the children of that and pick the bigger one to swap with the low value again, sifting that low value down until it lands in the correct spot near the end again, and we have a shiny new tree that's very similar to the old one. It keeps doing that over and over until the whole thing is sorted. It sounds like it takes a lot of work, and brain-wise, yeah, it's hard to keep track of, but the algorithm only has to make like 20 comparisons to sift the low value down to the bottom of a tree with 1,000,000 numbers in it, and it always knows that the next sorted piece is at the root, so once the tree is constructed, it can sort the data freakishly fast.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;bCVppf4&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/VideoObject&quot; readability=&quot;48&quot;&gt;

&lt;div class=&quot;post-image-meta post-image-meta--last&quot; readability=&quot;41&quot;&gt;
&lt;h2 class=&quot;post-image-title&quot; itemprop=&quot;name&quot;&gt;10: Quick Sort ... What?&lt;/h2&gt;
&lt;p class=&quot;post-image-description&quot; itemprop=&quot;description&quot;&gt;Okay, I don't even know... Quick sort is a pretty famous sorting algorithm, especially because of how good it is at combining a lot of ideas that new programming students need to learn into one magical unicorn of science. This algorithm is a recursive algorithm, which means it's a bit of code that runs itself over and over. Each time it breaks down what it's doing into smaller pieces and saying &quot;okay, now lets do the exact same thing to those smaller pieces, and we can totally break those down too into even smaller pieces!!&quot;. That's really the whole idea behind quick sort. It takes a value (for this example, I just told it to choose the value on the far left of where it's looking&quot;, and go &quot;okay, everything smaller than this on the left, everything larger than this on the right.&quot;, then you have that single value sorted exactly where it goes, and two halves of mostly unsorted values that definitely go somewhere in their section. Then it'll look at the left half and do the same thing, picking a value and dividing the unsorted mess into two groups. And it'll go deeper down that rabbit hole until it hits a point where the left and right sides are either 1 single value or just completely empty. Then it starts working its way back up the chain of self-calls and does the right half next. This is one of the absolute fastest algorithms out there, and it's relatively easy to implement, so usually if you have the resources available for it, it's a good bet (though that's a whole different topic). There is one issue with Quicksort, though, and that's how to pick the &quot;pivot&quot; - that value that you move everything to the left or right based on. Obviously, if it's a value that should be near the middle, then you'll have very good sorts, dividing the pile of unsorted nonsense very quickly and effectively, but what if you pick the value 1? well, everything goes on the right of that, so you didn't really sort much there, did you? If it happens over and over, this algorithm is basically as slow as selection sort (which is pretty slow, but still faster than me, so I still don't mind.) That's why you see these small stops and starts in the image. The agorithm is making bad choices because I didn't make it smart enough to choose a good pivot every time, it just randomly went with whatever was closest. Still, it's pretty fast. ... And I think that's it. I hope you enjoyed these visualizations as much as I enjoyed making them! Thanks for reading these massive walls of text. Let me know which gif was your favorite (mine is shell sort, there's just something extra satisfying about watching it work I think...) and if you know a cool algorithm you want to seen made into a rainbow, let me know and I'll probably do it. These are really fun to make.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
<pubDate>Sat, 07 Oct 2017 10:27:24 +0000</pubDate>
<dc:creator>infodroid</dc:creator>
<og:url>https://imgur.com/gallery/RM3wl</og:url>
<og:title>Sorting Visualizations</og:title>
<og:type>article</og:type>
<og:image>https://i.imgur.com/lqbv0fw.jpg?fb</og:image>
<og:description>Imgur: The most awesome images on the Internet.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://imgur.com/gallery/RM3wl</dc:identifier>
</item>
</channel>
</rss>