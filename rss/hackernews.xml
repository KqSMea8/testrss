<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>My Favorite PostgreSQL Queries and Why They Matter</title>
<link>https://severalnines.com/blog/my-favorite-postgresql-queries-and-why-they-matter</link>
<guid isPermaLink="true" >https://severalnines.com/blog/my-favorite-postgresql-queries-and-why-they-matter</guid>
<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;
&lt;div class=&quot;field-items&quot;&gt;
&lt;div class=&quot;field-item even&quot;&gt;
&lt;div class=&quot;image image_right w_border&quot;&gt;
&lt;div class=&quot;image_inner&quot;&gt;&lt;img src=&quot;https://severalnines.com/sites/default/files/postgresql_dba_19.jpg&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Databases, tables, normalization, and a solid backup plan allow us to store and maintain data.&lt;/p&gt;
&lt;p&gt;Those combined best practices, in turn, afford us interaction with that data. In today's data-driven world, data is valuable. Not only valuable, data is oftentimes critical to end-user solutions provided by products and services. Extracting insight, answering questions, and meaningful metrics from data by way of querying and data manipulation is an integral component of SQL in general.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://severalnines.com/product/clustercontrol/for_postgresql&quot;&gt;PostgreSQL&lt;/a&gt; is no different.&lt;/p&gt;
&lt;p&gt;This foundational crux is critical for success in any data-driven aspect.&lt;/p&gt;
&lt;p&gt;Below, I present a combination of 8 differing queries or types of queries I have found interesting and engaging to explore, study, learn, or otherwise manipulate data sets.&lt;/p&gt;
&lt;p&gt;They are not listed in any order of importance.&lt;/p&gt;
&lt;p&gt;Most will probably be familiar old friends. Perhaps some will become new acquaintances.&lt;/p&gt;
&lt;p&gt;Sample tables and data used are not as important as the actual construction of the queries themselves and what each query returns, offers, or provides. Many of them are mock and derived for demonstration purposes and should not be taken literally in their values.&lt;/p&gt;
&lt;h2&gt;1. Left join, mind any nulls on the right...&lt;/h2&gt;
&lt;p&gt;Suppose in this example, we have a running sale of two months and are getting a total of both combined.&lt;/p&gt;
&lt;p&gt;Yet, for some reason, the second month did not pull its weight and we want to target what days month one picked up the slack.&lt;/p&gt;
&lt;p&gt;These sales are represented as tables payment and fake_month for this demonstration.&lt;/p&gt;
&lt;p&gt;To note:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;We will only check for totals greater than 2000.&lt;/li&gt;
&lt;li&gt;We will limit the output to just 10 rows.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To start, we have this Common Table Expression (CTE) '&lt;em&gt;generating&lt;/em&gt;' the fake_month table for us, and query that follows.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;dvdrental=&amp;gt; WITH fake_month AS(
SELECT setup::date
FROM generate_series('2007-02-01', '2007-02-28', INTERVAL '1 day') AS setup
)
SELECT date_part('day', p.payment_date)::INT AS legit,
SUM(p.amount),
date_part('day', fk.setup)::INT AS fake
FROM payment AS p
LEFT JOIN fake_month AS fk
ON date_part('day', fk.setup)::INT = date_part('day', p.payment_date)::INT
GROUP BY legit, fake
HAVING SUM(p.amount) &amp;gt; 2000
LIMIT 10;
legit | sum | fake
-------+---------+------
1 | 2808.24 | 1
2 | 2550.05 | 2
6 | 2077.14 | 6
8 | 2227.84 | 8
9 | 2067.86 | 9
17 | 3630.33 | 17
18 | 3977.74 | 18
19 | 3908.59 | 19
20 | 3888.98 | 20
21 | 3786.14 | 21
(10 rows)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Looks as if both months contributed there. So is this solved?&lt;/p&gt;
&lt;p&gt;Before we consider this solved, let's visit the &lt;span&gt;ORDER BY&lt;/span&gt; clause.&lt;/p&gt;
&lt;p&gt;Of course, you can &lt;span&gt;ORDER BY ASC&lt;/span&gt; or &lt;span&gt;DESC&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;However, you can also &lt;span&gt;ORDER BY NULLS&lt;/span&gt; first or last and that changes things up a bit.&lt;/p&gt;
&lt;p&gt;Let's rewrite this query and use &lt;span&gt;ORDER BY NULLS&lt;/span&gt; first on the legit column.&lt;/p&gt;
&lt;p&gt;For brevity, I'll remove the CTE from the output, just know it is still there and being used.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;SELECT date_part('day', p.payment_date)::INT AS legit,
SUM(p.amount),
date_part('day', fk.setup)::INT AS fake
FROM payment AS p
LEFT JOIN fake_month AS fk
ON date_part('day', fk.setup)::INT = date_part('day', p.payment_date)::INT
GROUP BY legit, fake
HAVING SUM(p.amount) &amp;gt; 2000
ORDER BY legit NULLS first
LIMIT 10;
legit | sum | fake
-------+---------+------
1 | 2808.24 | 1
2 | 2550.05 | 2
6 | 2077.14 | 6
8 | 2227.84 | 8
9 | 2067.86 | 9
17 | 3630.33 | 17
18 | 3977.74 | 18
19 | 3908.59 | 19
20 | 3888.98 | 20
21 | 3786.14 | 21
(10 rows)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;No difference there at all.&lt;/p&gt;
&lt;p&gt;What if we &lt;span&gt;ORDER BY NULLS&lt;/span&gt; first on the fake column? The one on the &lt;em&gt;right&lt;/em&gt; side of the JOIN?&lt;/p&gt;
&lt;p&gt;Let's see.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;SELECT date_part('day', p.payment_date)::INT AS legit,
SUM(p.amount),
date_part('day', fk.setup)::INT AS fake
FROM payment AS p
LEFT JOIN fake_month AS fk
ON date_part('day', fk.setup)::INT = date_part('day', p.payment_date)::INT
GROUP BY legit, fake
HAVING SUM(p.amount) &amp;gt; 2000
ORDER BY fake NULLS first
LIMIT 10;
legit | sum | fake
-------+---------+------
29 | 2717.60 |
30 | 5723.89 |
1 | 2808.24 | 1
2 | 2550.05 | 2
6 | 2077.14 | 6
8 | 2227.84 | 8
9 | 2067.86 | 9
17 | 3630.33 | 17
18 | 3977.74 | 18
19 | 3908.59 | 19
(10 rows)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now we are getting somewhere. We can see for days 29 &amp;amp; 30, the &lt;span&gt;fake&lt;/span&gt; column has been ordered from the top of the results set.&lt;/p&gt;
&lt;p&gt;Due to &lt;span&gt;ORDER BY fake NULLS first&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;This solves our question, to what days 'sale 2' slacked off.&lt;/p&gt;
&lt;p&gt;Are you wondering...&lt;/p&gt;
&lt;p&gt;&quot;&lt;em&gt;Can we just filter with WHERE fake IS NULL?&lt;/em&gt;&quot;&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;SELECT date_part('day', p.payment_date)::INT AS legit,
SUM(p.amount),
date_part('day', fk.setup)::INT AS fake
FROM payment AS p
LEFT JOIN fake_month AS fk
ON date_part('day', fk.setup)::INT = date_part('day', p.payment_date)::INT
WHERE date_part('day', fk.setup) IS NULL
GROUP BY legit, fake
HAVING SUM(p.amount) &amp;gt; 2000
LIMIT 10;
legit | sum | fake
-------+---------+------
29 | 2717.60 |
30 | 5723.89 |
(2 rows)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Yes that works. So why not just use that query instead? Why it matters?&lt;/p&gt;
&lt;p&gt;I feel using &lt;span&gt;LEFT JOIN&lt;/span&gt; and &lt;span&gt;ORDER BY NULLS first&lt;/span&gt; for the table on the right side of the &lt;span&gt;JOIN&lt;/span&gt;, is a great way to explore unfamiliar tables and data sets.&lt;/p&gt;
&lt;p&gt;By confirming what, if any, data is ‘&lt;em&gt;missing&lt;/em&gt;’ on that side of the join condition first; enhances clarity and awareness, allowing you to then filter out the results set with the &lt;span&gt;WHERE &amp;lt;column_name&amp;gt; IS NULL&lt;/span&gt; clause, finalizing things up.&lt;/p&gt;
&lt;p&gt;Of course, familiarity with the tables and datasets could potentially eliminate the need for the &lt;span&gt;LEFT JOIN&lt;/span&gt; presented here.&lt;/p&gt;
&lt;p&gt;It's a worthy query for anyone utilizing PostgreSQL to at least try, during exploration.&lt;/p&gt;
&lt;h2&gt;2. String Concatenation&lt;/h2&gt;
&lt;p&gt;Concatenation, the joining or appending of two strings, provides a presentation option for results sets. Many '&lt;em&gt;things&lt;/em&gt;' can be concatenated.&lt;/p&gt;
&lt;p&gt;However, as noted in the documentation, the string concatenation operator ('&lt;span&gt;||&lt;/span&gt;') accepts non-string input, as long as one is a string.&lt;/p&gt;
&lt;p&gt;Let' see some examples with the below queries:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;postgres=&amp;gt; SELECT 2||' times'||' 2 equals: '|| 2*2;
?column?
---------------------
2 times 2 equals: 4
(1 row)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We can see, numbers and strings all can be concatenated together as mentioned above.&lt;/p&gt;
&lt;p&gt;The '&lt;span&gt;||&lt;/span&gt;' operator is but one of those available in PostgreSQL.&lt;/p&gt;
&lt;p&gt;The &lt;span&gt;concat()&lt;/span&gt; function accepts multiple arguments, concatenating them all on return.&lt;/p&gt;
&lt;p&gt;Here's an example of that function in action:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;postgres=&amp;gt; SELECT concat('Josh ','Otwell') AS first_name;
first_name
-------------
Josh Otwell
(1 row)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We can pass in more than two arguments if desired:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;postgres=&amp;gt; SELECT concat('Josh',' ','Otwell') AS first_name;
first_name
-------------
Josh Otwell
(1 row)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Let's note something real quick with these next examples:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;postgres=&amp;gt; SELECT CONCAT('Josh',NULL,'Otwell') AS first_name;
first_name
------------
JoshOtwell
(1 row)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;postgres=&amp;gt; SELECT 'Josh '||NULL||'Otwell' AS first_name;
first_name
------------
(1 row)
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;postgres=&amp;gt; SELECT NULL||'Josh '||'Otwell' AS first_name;
first_name
------------
(1 row)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;postgres=&amp;gt; SELECT CONCAT(NULL,'Josh','Otwell') AS first_name;
first_name
------------
JoshOtwell
(1 row)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Observe that the &lt;span&gt;concat()&lt;/span&gt; function ignores &lt;span&gt;NULL&lt;/span&gt; no matter where placed in the list of parameters, while the string concatenation operator does not.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;NULL&lt;/span&gt; is returned if present anywhere in the string to concatenate.&lt;/p&gt;
&lt;p&gt;Just be aware of that.&lt;/p&gt;
&lt;p&gt;Instead of manually including within the string to be concatenated, PostgreSQL also includes a &lt;span&gt;concat_ws()&lt;/span&gt; function that accepts a string separator as the first parameter.&lt;/p&gt;
&lt;p&gt;We will visit it with these queries:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;postgres=&amp;gt; SELECT concat_ws('-',333,454,1919) AS cell_num;
cell_num
--------------
333-454-1919
(1 row)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;postgres=&amp;gt; SELECT concat_ws(' ','Josh','Otwell') AS first_name;
first_name
-------------
Josh Otwell
(1 row)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;concat_ws()&lt;/span&gt; accepts either numbers or strings as arguments and as stated above, uses the first argument as the separator.&lt;/p&gt;
&lt;p&gt;How does &lt;span&gt;concat_ws()&lt;/span&gt; treat &lt;span&gt;NULL&lt;/span&gt;?&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;postgres=&amp;gt; SELECT concat_ws('-',333,NULL,1919) AS cell_num;
cell_num
----------
333-1919
(1 row)&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;postgres=&amp;gt; SELECT concat_ws(NULL,333,454,1919) AS cell_num;
cell_num
----------
(1 row)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;NULL&lt;/span&gt; is ignored unless it is the separator argument given to &lt;span&gt;concat_ws()&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Then, all arguments are ignored and &lt;span&gt;NULL&lt;/span&gt; is returned instead.&lt;/p&gt;
&lt;p&gt;Concatenation is cool...&lt;/p&gt;
&lt;p&gt;Now that we have an idea of how concatenation works, let's look at a couple of examples of it.&lt;/p&gt;
&lt;p&gt;Back to the mock DVD rental database&lt;/p&gt;
&lt;p&gt;Suppose we need to compile a list of customers first and last names, along with their email address to send out a memo for updating their account.&lt;/p&gt;
&lt;p&gt;I will limit the output to just 10 rows for brevity's sake, but still demonstrating the &lt;span&gt;||&lt;/span&gt; operator.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;dvdrental=&amp;gt; SELECT first_name||' '||last_name||'''s email address is: '||email AS name_and_email
FROM customer
LIMIT 10;
name_and_email
--------------------------------------------------------------------------
Jared Ely's email address is: jared.ely@sakilacustomer.org
Mary Smith's email address is: mary.smith@sakilacustomer.org
Patricia Johnson's email address is: patricia.johnson@sakilacustomer.org
Linda Williams's email address is: linda.williams@sakilacustomer.org
Barbara Jones's email address is: barbara.jones@sakilacustomer.org
Elizabeth Brown's email address is: elizabeth.brown@sakilacustomer.org
Jennifer Davis's email address is: jennifer.davis@sakilacustomer.org
Maria Miller's email address is: maria.miller@sakilacustomer.org
Susan Wilson's email address is: susan.wilson@sakilacustomer.org
Margaret Moore's email address is: margaret.moore@sakilacustomer.org
(10 rows)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Notice we had to escape the single quote used with apostrophe s, using an additional single quote to show possession of the email address for each customer.&lt;/p&gt;
&lt;p&gt;Why you should know?&lt;/p&gt;
&lt;p&gt;There may be times when concatenating data presents you with better insight and understanding into the data set you are working with. Along with reporting options, concatenating shared datasets with others' could potentially make them (the data) more readable and digestible.&lt;/p&gt;
&lt;h2&gt;3. Supplying &lt;span&gt;IN&lt;/span&gt; values list with Subquery's&lt;/h2&gt;
&lt;p&gt;A Subquery has numerous powerful uses. Of those, providing an &lt;span&gt;IN&lt;/span&gt; list of values to check for membership is a common one.&lt;/p&gt;
&lt;p&gt;Here's a quick use.&lt;/p&gt;
&lt;p&gt;Suppose we have customer and payments tables in a mock DVD rental store and want to reward our top five highest spending customers who rented movies during the days of April 10 - 13.&lt;/p&gt;
&lt;p&gt;Imagine that's a special target period. So if the customer spent more than $30, we want to acknowledge them.&lt;/p&gt;
&lt;p&gt;Bear in mind, there are other available options for solving this type of question (i.e., joins, capturing results from multiple selects, etc...), yet, sub-queries can handle it as well.&lt;/p&gt;
&lt;p&gt;We will start out with the whole shebang here. This complete query returns everything we want for this particular question.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;dvdrental=&amp;gt; SELECT first_name, last_name, email
FROM customer
WHERE customer_id IN (
SELECT customer_id FROM (
SELECT DISTINCT customer_id, SUM(amount)
FROM payment
WHERE extract(month from payment_date) = 4
AND extract(day from payment_date) BETWEEN 10 AND 13
GROUP BY customer_id
HAVING SUM(amount) &amp;gt; 30
ORDER BY SUM(amount) DESC
LIMIT 5) AS top_five);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This example actually contains nested subquery's, one of which is a Derived Table.&lt;/p&gt;
&lt;p&gt;Let's start by drilling into the innermost subquery, that Derived Table.&lt;/p&gt;
&lt;p&gt;This subquery is a standalone &lt;span&gt;SELECT&lt;/span&gt; statement all its own, returning a &lt;span&gt;customer_id&lt;/span&gt; and a &lt;span&gt;SUM()&lt;/span&gt; on the &lt;span&gt;amount&lt;/span&gt; column.&lt;/p&gt;
&lt;p&gt;Only those customers meeting the criteria checked by the &lt;span&gt;WHERE&lt;/span&gt; and &lt;span&gt;HAVING&lt;/span&gt; clauses make the cut, being further thinned out with &lt;span&gt;LIMIT 5&lt;/span&gt;;&lt;/p&gt;
&lt;p&gt;Why the next subquery you ask?&lt;/p&gt;
&lt;p&gt;Can we not just use the &lt;span&gt;WHERE customer_id IN&lt;/span&gt; portion of the outermost &lt;span&gt;SELECT&lt;/span&gt; here?&lt;/p&gt;
&lt;p&gt;Let's see with a hands-on approach.&lt;/p&gt;
&lt;p&gt;I will remove the &lt;span&gt;AS top_five&lt;/span&gt; from the subquery and try the outermost query with it now:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;dvdrental=&amp;gt; SELECT first_name, last_name, email
FROM customer
WHERE customer_id IN
(SELECT DISTINCT customer_id, SUM(amount)
FROM payment
WHERE extract(month from payment_date) = 4
AND extract(day from payment_date) BETWEEN 10 AND 13
GROUP BY customer_id
HAVING SUM(amount) &amp;gt; 30
ORDER BY SUM(amount) DESC
LIMIT 5);
ERROR: subquery has too many columns
LINE 3: WHERE customer_id IN (&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here, &lt;span&gt;IN&lt;/span&gt; membership is being tested with only the &lt;span&gt;customer_id&lt;/span&gt; column, yet the Derived Table returns two columns and PostgreSQL lets us know.&lt;/p&gt;
&lt;p&gt;One remedy is to use another subquery. Selecting only the &lt;span&gt;customer_id&lt;/span&gt; from the Derived Table results set, creates the next inner nested subquery.&lt;/p&gt;
&lt;p&gt;Now the &lt;span&gt;IN&lt;/span&gt; predicate contains multiple rows of one column's values to check membership against the &lt;span&gt;WHERE&lt;/span&gt; clause for &lt;span&gt;customer_id&lt;/span&gt; to make the final results set.&lt;/p&gt;
&lt;p&gt;Why it matters?&lt;/p&gt;
&lt;p&gt;Utilizing subquery's in this manner is powerful due to the fact of the number of values that could potentially be tested with the &lt;span&gt;IN()&lt;/span&gt; predicate.&lt;/p&gt;
&lt;p&gt;Imagine if there were a 100? Or more?&lt;/p&gt;
&lt;p&gt;'&lt;em&gt;Hard-coding&lt;/em&gt;' all of them in the &lt;span&gt;IN()&lt;/span&gt; list could become problematic and error-prone as the volume of values increases.&lt;/p&gt;
&lt;h2&gt;4. &lt;span&gt;generate_series()&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;This set returning function, is handy and super fun to use and explore. I have used &lt;span&gt;generate_series()&lt;/span&gt; in above examples, but it deserves a talk of its own. Focusing more on the function and capabilities.&lt;/p&gt;
&lt;p&gt;I find &lt;span&gt;generate_series()&lt;/span&gt; useful for comparative queries where some, or all data is missing.&lt;/p&gt;
&lt;p&gt;Or only partial data is available at the time I am exploring. One handy use is populating tables with '&lt;em&gt;dummy data&lt;/em&gt;'.&lt;/p&gt;
&lt;p&gt;To start, we will create a simple table:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;trial=&amp;gt; CREATE TABLE tbl_1(
trial(&amp;gt; tb_id SERIAL PRIMARY KEY,
trial(&amp;gt; some_day DATE,
trial(&amp;gt; an_amt NUMERIC(4,2));
CREATE TABLE&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then use &lt;span&gt;generate_series()&lt;/span&gt; as the &lt;span&gt;VALUES&lt;/span&gt; for our &lt;span&gt;INSERT&lt;/span&gt; statement:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;trial=&amp;gt; INSERT INTO tbl_1(some_day, an_amt)
VALUES(
generate_series('2018-04-01','2018-04-15',INTERVAL '1 day'),
generate_series(2.43, 34.20, 1.03));
INSERT 0 31&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then create a second table&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;trial=&amp;gt; CREATE TABLE tbl_2(
tb2_id SERIAL PRIMARY KEY,
some_day2 DATE,
an_amt2 NUMERIC(4,2));
CREATE TABLE&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Also, populate it using &lt;span&gt;generate_series()&lt;/span&gt; in the &lt;span&gt;INSERT&lt;/span&gt; statement:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;trial=&amp;gt; INSERT INTO tbl_2(some_day2, an_amt2)
VALUES(
generate_series('2018-05-16','2018-05-31',INTERVAL '1 day'),
generate_series(15.43, 31., 1.03));
INSERT 0 16&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Why it matters?&lt;/p&gt;
&lt;p&gt;To reiterate, &lt;span&gt;generate_series()&lt;/span&gt; is so useful for creating mock or practice data.&lt;/p&gt;
&lt;p&gt;I have found mimicking month or day ranges for comparison is exceptional with &lt;span&gt;generate_series()&lt;/span&gt;. Refer to section 1 and the CTE there, demonstrates this use.&lt;/p&gt;
&lt;p&gt;Creating a set of complete data with &lt;span&gt;generate_series()&lt;/span&gt; and using to compare against stored data to determine if any data is missing holds great value as well.&lt;/p&gt;
&lt;h2&gt;5. Query's with the &lt;span&gt;COUNT()&lt;/span&gt; aggregate function.&lt;/h2&gt;
&lt;p&gt;This simple, yet effective aggregate function should be in anyone's arsenal. Especially when exploring tables or data sets for the first time.&lt;/p&gt;
&lt;p&gt;I mean, do you really want to '&lt;em&gt;SELECT everything&lt;/em&gt;' from a table with 1M rows?&lt;/p&gt;
&lt;p&gt;Determine with &lt;span&gt;COUNT(*)&lt;/span&gt; how many records are present before you load up.&lt;/p&gt;
&lt;p&gt;Let's find out how many rows the film table has in this mock DVD rental table:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;dvdrental=&amp;gt; SELECT COUNT(*)
dvdrental-&amp;gt; FROM film;
count
-------
1000
(1 row)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;While not quite as extensive as 1M+ rows, I'm sure you see the usefulness.&lt;/p&gt;
&lt;p&gt;To return the number of specific rows, &lt;span&gt;COUNT(*)&lt;/span&gt; can be filtered with a &lt;span&gt;WHERE&lt;/span&gt; clause.&lt;/p&gt;
&lt;p&gt;Let's see how many films have a 'G' rating:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;dvdrental=&amp;gt; SELECT COUNT(*)
dvdrental-&amp;gt; FROM film
dvdrental-&amp;gt; WHERE rating = 'G';
count
-------
178
(1 row)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;There is another form of &lt;span&gt;COUNT()&lt;/span&gt; to be aware of. &lt;em&gt;COUNT(some_expression)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The differences between them are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;COUNT(*)&lt;/span&gt; returns the total of all input rows (including &lt;span&gt;NULLS&lt;/span&gt; and duplicates).&lt;/li&gt;
&lt;li&gt;&lt;span&gt;COUNT(&lt;em&gt;some_expression&lt;/em&gt;)&lt;/span&gt; counts the number of non-NULL input rows.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;When used in conjunction with the &lt;span&gt;DISTINCT&lt;/span&gt; keyword, &lt;span&gt;COUNT()&lt;/span&gt; will eliminate duplicate entries and return only unique values.&lt;/p&gt;
&lt;p&gt;Let's see that in action using &lt;span&gt;COUNT()&lt;/span&gt; with &lt;span&gt;DISTINCT&lt;/span&gt; to determine how many unique types of ratings are present:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;dvdrental=&amp;gt; SELECT COUNT(DISTINCT rating) FROM film;
count
-------
5
(1 row)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;With this query, we know there are 5 types of ratings.&lt;/p&gt;
&lt;p&gt;Why it matters?&lt;/p&gt;
&lt;p&gt;Depending on what is being tracked or targeted, knowing how many of something exists can be important. Therefore, utilizing &lt;span&gt;COUNT(*)&lt;/span&gt; or &lt;span&gt;COUNT(&lt;em&gt;some_expression&lt;/em&gt;)&lt;/span&gt; assists with these types of challenges.&lt;/p&gt;
&lt;p&gt;Just remember &lt;span&gt;COUNT(*)&lt;/span&gt; does not ignore &lt;span&gt;NULL&lt;/span&gt;. All rows, duplicate and &lt;span&gt;NULL&lt;/span&gt; values included, are returned as part of the final number.&lt;/p&gt;
&lt;h2&gt;6. &lt;span&gt;UPDATE&lt;/span&gt; multiple rows with a &lt;span&gt;CASE&lt;/span&gt; expression.&lt;/h2&gt;
&lt;p&gt;Suppose we have this table:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;trial=&amp;gt; SELECT * FROM reward_members;
rm_id | expense_amt | member_status
-------+-------------+---------------
1 | 1245.33 | gold
2 | 1300.49 | gold
3 | 900.20 | bronze
4 | 2534.44 | platinum
5 | 600.19 | bronze
6 | 1001.55 | silver
7 | 1097.99 | silver
8 | 3033.33 | platinum
(8 rows)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We need to rename the &lt;span&gt;member_status&lt;/span&gt; column and add '&lt;em&gt;group&lt;/em&gt;' to the end of the current name present for each record.&lt;/p&gt;
&lt;p&gt;For starters, multiple individual &lt;span&gt;UPDATE&lt;/span&gt; statements will accomplish this no problem.&lt;/p&gt;
&lt;p&gt;But, so can a single &lt;span&gt;CASE&lt;/span&gt; expression.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;trial=&amp;gt; UPDATE reward_members
SET member_status = (
CASE member_status
WHEN 'gold' THEN 'gold_group'
WHEN 'bronze' THEN 'bronze_group'
WHEN 'platinum' THEN 'platinum_group'
WHEN 'silver' THEN 'silver_group'
END
)
WHERE member_status IN ('gold', 'bronze','platinum', 'silver');
UPDATE 8&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Let's query the table again to see the changes:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;trial=&amp;gt; SELECT * FROM reward_members;
rm_id | expense_amt | member_status
-------+-------------+----------------
1 | 1245.33 | gold_group
2 | 1300.49 | gold_group
3 | 900.20 | bronze_group
4 | 2534.44 | platinum_group
5 | 600.19 | bronze_group
6 | 1001.55 | silver_group
7 | 1097.99 | silver_group
8 | 3033.33 | platinum_group
(8 rows)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;All update were successful.&lt;/p&gt;
&lt;p&gt;Why it matters?&lt;/p&gt;
&lt;p&gt;You can imagine how many round trips this would take to the server if multiple individual &lt;span&gt;UPDATE&lt;/span&gt; statements had been run. In truth, only 4 for this example. But still, the potential for many is always there.&lt;/p&gt;
&lt;p&gt;Yet, using an &lt;span&gt;UPDATE&lt;/span&gt; with &lt;span&gt;CASE&lt;/span&gt; expression, we are sending only one query instead.&lt;/p&gt;
&lt;h2&gt;7. &lt;span&gt;COPY&lt;/span&gt; and &lt;span&gt;\copy&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;PostgreSQL provides &lt;span&gt;&lt;a href=&quot;https://www.postgresql.org/docs/current/static/sql-copy.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;COPY&lt;/a&gt;&lt;/span&gt;, a command for exporting data between files and tables.&lt;/p&gt;
&lt;p&gt;Be sure and visit the provided link to see the abundant number of options available with COPY.&lt;/p&gt;
&lt;p&gt;An important note concerning &lt;span&gt;COPY&lt;/span&gt;. &lt;span&gt;SUPERUSER&lt;/span&gt; role privilege is required to execute this command.&lt;/p&gt;
&lt;p&gt;The psql meta-command &lt;span&gt;\copy&lt;/span&gt; is an alternative for those users not deemed this role attribute. We will visit that command in turn shortly.&lt;/p&gt;
&lt;p&gt;First, let's run a &lt;span&gt;COPY&lt;/span&gt; command to export certain columns to a CSV file on the local machine.&lt;/p&gt;
&lt;p&gt;Assume we have this query result to for export:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;trial=# SELECT expense_amt, member_status
trial-# FROM reward_members
trial-# WHERE member_status = 'gold_group';
expense_amt | member_status
-------------+---------------
1245.33 | gold_group
1300.49 | gold_group
(2 rows)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;With &lt;span&gt;COPY&lt;/span&gt;, we can use that &lt;span&gt;SELECT&lt;/span&gt; statement to complete this export.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;trial=# COPY (SELECT expense_amt, member_status
FROM reward_members
WHERE member_status = 'gold_group')
TO '/home/linux_user_here/awards_to_honor.csv'
DELIMITER ','
CSV HEADER;
COPY 2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;*Note: Per the documentation, the query must be within parenthesis.&lt;/p&gt;
&lt;p&gt;Let's now check the contents of that file:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;$ cat awards_to_honor.csv
expense_amt,member_status
1245.33,gold_group
1300.49,gold_group&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We can see the first line contains the &lt;span&gt;HEADER&lt;/span&gt; (which are the column names) and both lines have the &lt;span&gt;expense_amt&lt;/span&gt; and &lt;span&gt;member_status&lt;/span&gt; data for both columns returned from the &lt;span&gt;WHERE&lt;/span&gt; clause filter.&lt;/p&gt;
&lt;p&gt;Another important caveat I discovered from executing the above &lt;span&gt;COPY&lt;/span&gt; command.&lt;/p&gt;
&lt;p&gt;The user must have privileges to write to the file at the OS level.&lt;/p&gt;
&lt;p&gt;In my case, fixed with:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;$ sudo chown postgres awards_to_honor.csv&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can avoid this issue by instead writing to a system file the current user has access to such as &lt;span&gt;/tmp&lt;/span&gt; (shown below.)&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;trial=# COPY (SELECT expense_amt, member_status
FROM reward_members
WHERE member_status = 'gold_group')
TO '/tmp/awards_to_honor.csv'
DELIMITER ','
CSV HEADER;
COPY 2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, one of my test roles without the &lt;span&gt;SUPERUSER&lt;/span&gt; attribute, ran into problems writing to the &lt;span&gt;/tmp&lt;/span&gt; file.&lt;/p&gt;
&lt;p&gt;See below for confirmation:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;trial=# SET role log_user; -- changing from postgres user to log_user
SET&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now attempting the same &lt;span&gt;COPY&lt;/span&gt; command, writing to the &lt;span&gt;/tmp&lt;/span&gt; folder&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;trial=&amp;gt; COPY (SELECT expense_amt, member_status
FROM reward_members
WHERE member_status = 'gold_group')
TO '/tmp/awards_to_honor2.csv'
DELIMITER ','
CSV HEADER;
ERROR: must be superuser to COPY to or from a file
HINT: Anyone can COPY to stdout or from stdin. psql's \copy command also works for anyone.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Perhaps a better measure, as suggested in the HINT:, for roles without the &lt;span&gt;SUPERUSER&lt;/span&gt; attribute, is the psql &lt;span&gt;\copy&lt;/span&gt; meta-command.&lt;/p&gt;
&lt;p&gt;Let's carry-out a similar type of command with &lt;span&gt;\copy&lt;/span&gt; instead using the same role, without the need for that &lt;span&gt;SUPERUSER&lt;/span&gt; attribute.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;trial=&amp;gt; \copy (SELECT expense_amt, member_status
FROM reward_members
WHERE member_status = 'silver_group')
TO '/home/linux_user_here/more_awards.csv'
DELIMITER ','
CSV HEADER;
COPY 2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;No problems there.&lt;/p&gt;
&lt;p&gt;And the files' contents,&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;$ cat more_awards.csv
expense_amt,member_status
1001.55,silver_group
1097.99,silver_group&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Also works for the &lt;span&gt;/tmp&lt;/span&gt; folder:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;trial=&amp;gt; \copy (SELECT expense_amt, member_status
FROM reward_members
WHERE member_status = 'silver_group')
TO '/tmp/more_awards.csv'
DELIMITER ','
CSV HEADER;
COPY 2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Same contents present in the written file as well:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;trial=&amp;gt; \! cat /tmp/more_awards.csv
expense_amt,member_status
1001.55,silver_group
1097.99,silver_group&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Why it matters?&lt;/p&gt;
&lt;p&gt;Importing data into PostgreSQL via files is a surefire bulk upload method. Although all are not covered in this blog post, &lt;span&gt;COPY&lt;/span&gt; and &lt;span&gt;\copy&lt;/span&gt; both, offer several options for working with different file formats and extensions.&lt;/p&gt;
&lt;p&gt;On the same token, exporting data from tables, or specific columns is easily handled with both of these commands as well.&lt;/p&gt;
&lt;h2&gt;8. psql &lt;span&gt;\help&lt;/span&gt; meta-command&lt;/h2&gt;
&lt;p&gt;You're in a psql command-line session. Curious about the &lt;span&gt;CREATE INDEX&lt;/span&gt; command syntax?&lt;/p&gt;
&lt;p&gt;No need and going to a browser or another document.&lt;/p&gt;
&lt;p&gt;Try this instead:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;trial=&amp;gt; \help CREATE INDEX
Command: CREATE INDEX
Description: define a new index
Syntax:
CREATE [ UNIQUE ] INDEX [ CONCURRENTLY ] [ [ IF NOT EXISTS ] name ] ON table_name [ USING method ]
( { column_name | ( expression ) } [ COLLATE collation ] [ opclass ] [ ASC | DESC ] [ NULLS { FIRST | LAST } ] [, ...] )
[ WITH ( storage_parameter = value [, ... ] ) ]
[ TABLESPACE tablespace_name ]
[ WHERE predicate ]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;To know what help text is available, you can run &lt;span&gt;\help&lt;/span&gt; by itself and get a list of available options.&lt;/p&gt;
&lt;p&gt;I won't list them all out here, just know that option is available.&lt;/p&gt;
&lt;p&gt;Why it matters?&lt;/p&gt;

&lt;p&gt;The fact this meta-command is super easy to use, powerful, and convenient are enough pros to mention it here. It's saved me tons of time spent searching throughout other documentation. And of course, being a newbie, I use it quite often!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is not an exhaustive list. Nor the '&lt;em&gt;be all end all&lt;/em&gt;' of queries and data manipulation.&lt;/p&gt;
&lt;p&gt;Only my take on those that pique my interest and speak to me as I continue to learn and grow into a SQL Developer role. I hope through this blog post, you will find use cases for the above queries and commands, implementing those where you see fit.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 14 Apr 2018 23:41:20 +0000</pubDate>
<dc:creator>grzm</dc:creator>
<og:type>article</og:type>
<og:url>https://severalnines.com/blog/my-favorite-postgresql-queries-and-why-they-matter</og:url>
<og:title>My Favorite PostgreSQL Queries and Why They Matter</og:title>
<og:description>In today's data-driven world, data is valuable. Extracting insight, answering questions, and meaningful metrics from data by way of querying and data manipulation is an integral component of SQL in general. This blog presents a combination of 8 interesting, differing PostgreSQL queries or types of queries to explore, study, learn, or otherwise manipulate data sets.</og:description>
<og:image>https://severalnines.com/sites/default/files/postgresql_dba_19.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://severalnines.com/blog/my-favorite-postgresql-queries-and-why-they-matter</dc:identifier>
</item>
<item>
<title>Ask HN: What is your favourite tech talk?</title>
<link>https://news.ycombinator.com/item?id=16838460</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=16838460</guid>
<description>&lt;tr class=&quot;athing comtr&quot; id=&quot;16839366&quot; readability=&quot;2.3867595818815&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16841683&quot; readability=&quot;0.75510204081633&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840132&quot; readability=&quot;0.84210526315789&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840718&quot; readability=&quot;3.5944055944056&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7972027972028&quot;&gt;&lt;tr readability=&quot;3.5944055944056&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.5944055944056&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.8653846153846&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Rich Hickey is great. I remember his Simplicity Matters keynote at Rails Conf 2012. So clear and insightful.&lt;/span&gt;
&lt;pre&gt;
&lt;span class=&quot;c00&quot;&gt;&lt;code&gt;  https://www.youtube.com/watch?v=rI8tNMsozo0
&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;span class=&quot;c00&quot;&gt;Being able to explain a complex topic to diverse audiences is not easy to do. Rich does it very well.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16841568&quot; readability=&quot;0.26086956521739&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840430&quot; readability=&quot;0.46153846153846&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840424&quot; readability=&quot;7.1743772241993&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.5871886120996&quot;&gt;&lt;tr readability=&quot;7.1743772241993&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;The first time I watched Simple Made Easy, I didn't like it, even though I'd written quite a few situated programs in my day. A year later, I'd learned Clojure and re-watched it, and it all made so much sense. It's now one of my favorite tech talks.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840645&quot; readability=&quot;4.6464646464646&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3232323232323&quot;&gt;&lt;tr readability=&quot;4.6464646464646&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c5a&quot;&gt;Gerry Sussman talk is awesome and reflects very well the currently state of computer programming. It's a shame. The worse part: there is people around us with a lot of pride ABOUT DON'T KNOWING TO COMPUTE BUT STILL DOING [INNEFICIENT] THINGS. (sorry for the caps, good bye)&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839539&quot; readability=&quot;1.6105263157895&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839971&quot; readability=&quot;1.9137931034483&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840182&quot; readability=&quot;2.04&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839937&quot; readability=&quot;3.901185770751&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839463&quot; readability=&quot;9.8148951554591&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.9074475777296&quot;&gt;&lt;tr readability=&quot;9.8148951554591&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;15.61460592914&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;30.664714494876&quot;&gt;&lt;span class=&quot;c00&quot;&gt;These three had a big impact on me:&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Geoff Hinton, The Next Generation of Neural Networks (2007): &lt;a href=&quot;https://www.youtube.com/watch?v=AyzOUbkUf3M&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=AyzOUbkUf3M&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;While the exact approach described there didn't end up being necessary (restricted Boltzmann machines), all the summaries of the competition results made me realize machine image and voice recognition was going to accelerate massively and rival humans in many areas in the very near term.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;----&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Cracking the neural code: Speaking the language of the brain with optics (2009): &lt;a href=&quot;https://www.youtube.com/watch?v=5SLdSbp6VjM&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=5SLdSbp6VjM&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;This one made me realize how gene manipulation would be a near term thing and how big of an impact it would have. They used mostly old techniques but all the in situ modifications of cells in mammals were something I hadn't been aware were possible to that degree. One of the guys from his lab, Feng Zhang, went on to be one of the major forces behind CRISPR.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;----&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Breakthrough in Nuclear Fusion? - Prof. Dennis Whyte (2016): &lt;a href=&quot;https://www.youtube.com/watch?v=KkpqA8yG9T4&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=KkpqA8yG9T4&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;New design for a tokamak fusion reactor, made much cheaper by new super conductors that use liquid nitrogen instead of helium/etc. and which have more structural strength by being bound into a metallic ribbon. This one made me really optimistic (it hasn't been borne out like the others yet, but they recently raised $50 million). &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839989&quot; readability=&quot;5.6538461538462&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8269230769231&quot;&gt;&lt;tr readability=&quot;5.6538461538462&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.25&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.305882352941&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I wasn't going to bother commenting on this topic, but when I read the title I instantly thought of&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Geoff Hinton, The Next Generation of Neural Networks (2007): &lt;a href=&quot;https://www.youtube.com/watch?v=AyzOUbkUf3M&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=AyzOUbkUf3M&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;I watched that talk probably 10 times after it first came out and wrote some visual basic stuff to try and replicate his results. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839129&quot; readability=&quot;1.447619047619&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840403&quot; readability=&quot;1.1785714285714&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840291&quot; readability=&quot;3.5823095823096&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840727&quot; readability=&quot;22.625547902317&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;11.312773951158&quot;&gt;&lt;tr readability=&quot;22.625547902317&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;19.674389480276&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;38.876111817027&quot;&gt;&lt;span class=&quot;c00&quot;&gt;That transaction talk is really good, thank you. I can now finally name the effect that I had noticed but had trouble explaining and referring to, write skews.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;It's interesting that he doesn't mention phantom reads as the difference between repeatable read/snapshot isolation, and serializable, which is what other sources tend to do.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Snapshot isolation always seemed to me like cheating the intended meaning of repeatable read, insofar as some databases refer to their snapshot isolation level as repeatable read.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;That is, in the strictest sense, if you read a row twice, you get the same value with snapshot isolation, but you don't actually know that the value will be the same when you commit, which as I understand is a case of a write skew.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;In fact, if one thinks of the definition of these levels in terms of locking semantics, one would expect a repeatable read to have the same meaning as obtaining a read lock on the row you read, which I understand would prevent at least some types of write skew, since no modification would be possible on that row, because it would need a write lock. There could still be hazards related to phantom reads (and possibly other effects), such as making a decision based on a computed aggregate that can change if new rows are inserted. Still, this meaning of repeatable reads would already provide a useful isolation level for various cases, except that it doesn't work with snapshot isolation.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;I have a suspicion that applications out there made incorrect assumptions as to the actual isolation provided by the DB they use. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839803&quot; readability=&quot;3.2213438735178&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839364&quot; readability=&quot;1.9701492537313&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839984&quot; readability=&quot;1.44&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840714&quot; readability=&quot;2.4130434782609&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2065217391304&quot;&gt;&lt;tr readability=&quot;2.4130434782609&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;This talk is obscenely underrated. There is not nearly as much tech-focused performance art in our industry.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840789&quot; readability=&quot;3.1272727272727&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839245&quot; readability=&quot;4.7114093959732&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839608&quot; readability=&quot;7.4655532359081&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.7327766179541&quot;&gt;&lt;tr readability=&quot;7.4655532359081&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.3987473903967&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;16.16631130064&quot;&gt;&lt;span class=&quot;c00&quot;&gt;The most inspiring talk a I have ever seen:&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Clasp: Common Lisp using LLVM and C++ for Molecular Metaprogramming.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;ABSTRACT&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;This talk describes our unique approach to constructing large, atomically precise molecules (called &quot;Molecular Lego&quot; or &quot;spiroligomers&quot;) that could act as new therapeutics, new catalysts (molecules that make new chemical reactions happen faster) and ultimately to construct atomically precise molecular devices. Then I describe Clasp and CANDO, a new implementation of the powerful language Common Lisp. Clasp is a Common Lisp compiler that uses LLVM to generate fast machine code and it interoperates with C++. CANDO is a molecular design tool that uses Clasp as its programming language. Together I believe that these are the hardware (molecules) and the software (the CANDO/Clasp compiler) that will enable the development of sophisticated molecular nanotechnology.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;&lt;a href=&quot;https://m.youtube.com/watch?v=8X69_42Mj-g&quot; rel=&quot;nofollow&quot;&gt;https://m.youtube.com/watch?v=8X69_42Mj-g&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839551&quot; readability=&quot;11.819160387513&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.9095801937567&quot;&gt;&lt;tr readability=&quot;11.819160387513&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;10.637244348762&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;20.926130099228&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Prof. Harold Thrimbleby, “Designing IT to Make Healthcare Safer” (2014): &lt;a href=&quot;https://www.youtube.com/watch?v=_XJbwN6EZ4I&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=_XJbwN6EZ4I&lt;/a&gt;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;It might not sound like much from the title, but it's really worth a watch. Thrimbleby talks about UX (captivatingly, even though I'm not usually particularly interested in it) and the many, many bad examples within healthcare tech that leads, directly, to people dying—such as his mother. He also has some really interesting points about tires at one point. I'm not sure if I'm selling it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;These two are also really good: Steve Rambam, “You've Lost Privacy, Now They're Taking Anonymity” (2014): &lt;a href=&quot;https://www.youtube.com/watch?v=dNZrq2iK87k&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=dNZrq2iK87k&lt;/a&gt; Lepht Anonym, “Cybernetics for the Masses” (2010): &lt;a href=&quot;https://www.youtube.com/watch?v=APOAmxFEMkQ&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=APOAmxFEMkQ&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;And this one always makes me chuckle: Bryan Lunduke, “Linux is Freaking Weird” (2016): &lt;a href=&quot;https://www.youtube.com/watch?v=xPbAXKMCDkY&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=xPbAXKMCDkY&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839103&quot; readability=&quot;0.66666666666667&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16841467&quot; readability=&quot;4.8589420654912&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.4294710327456&quot;&gt;&lt;tr readability=&quot;4.8589420654912&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.0982367758186&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;15.714838709677&quot;&gt;&lt;span class=&quot;c00&quot;&gt;John Carmack is an absolutely brilliant speaker. Conversational, captivating and effortlessly natural. I could listen to him talk all day about the most arcane bits of graphics development which i'll never understand but am fascinated by regardless.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;His QuakeCon talks are particularly good.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;QuakeCon 2011 - &lt;a href=&quot;https://www.youtube.com/watch?v=4zgYG-_ha28&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=4zgYG-_ha28&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;QuakeCon 2012 - &lt;a href=&quot;https://www.youtube.com/watch?v=wt-iVFxgFWk&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=wt-iVFxgFWk&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;I like his talks because he's always interested by what he's doing and it tends to make me interested again in code.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Linus Torvalds is another surprisingly good speaker. His talk on git - one of the dryest possible topics - was very interesting. There's not many other people I'd sit and listen to talk about SCM.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=4XpnKHJAok8&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=4XpnKHJAok8&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839529&quot; readability=&quot;5.6575342465753&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8287671232877&quot;&gt;&lt;tr readability=&quot;5.6575342465753&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.6575342465753&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.17008797654&quot;&gt;&lt;span class=&quot;c00&quot;&gt;&quot;Fork Yeah! The Rise and Development of illumos&quot; by Bryan Cantrill&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=-zRN7XLCRhc&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=-zRN7XLCRhc&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;He starts with a nice history of SunOS and Solaris, goes into open source, then midway through (33:00) he goes into a brutally honest rant against Oracle. Even better is that Oracle was one of the sponsors of the conference. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16841426&quot; readability=&quot;7.2246696035242&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.6123348017621&quot;&gt;&lt;tr readability=&quot;7.2246696035242&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.9669603524229&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.7596153846154&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I cut my unix teeth in the early '90s, on SunOS, and Cantrill really keeps the history relevant.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;But truly, his Oracle rant was one for the ages. And this from me where our system RDBMS is Oracle, sigh. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16841469&quot; readability=&quot;1.3421052631579&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840437&quot; readability=&quot;1.4831460674157&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839182&quot; readability=&quot;1.0373831775701&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839832&quot; readability=&quot;3.1544715447154&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16841190&quot; readability=&quot;5.6185383244207&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839666&quot; readability=&quot;0.84210526315789&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840657&quot; readability=&quot;3.1627296587927&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840708&quot; readability=&quot;2.325&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839199&quot; readability=&quot;2.7065868263473&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839349&quot; readability=&quot;4.786703601108&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16841623&quot; readability=&quot;2.2077922077922&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16841371&quot; readability=&quot;4.6466165413534&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16841621&quot; readability=&quot;1.5294117647059&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840184&quot; readability=&quot;1.625&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840642&quot; readability=&quot;1.04&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839152&quot; readability=&quot;2.3255813953488&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839840&quot; readability=&quot;2.7303754266212&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840747&quot; readability=&quot;12.528781793842&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;6.264390896921&quot;&gt;&lt;tr readability=&quot;12.528781793842&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;20.135542168675&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;39.98638529612&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Finally made an account to post in this thread.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;I'm rather early in my career doing mostly Ruby, Python and JavaScript things. As you might expect, I consume mainly Ruby, Python and JavaScript related talks.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;The first two talks that really blew my mind are:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;- K Lars Lohn's PyCon Keynote from 2016: &lt;a href=&quot;https://www.youtube.com/watch?v=bSfe5M_zG2s&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=bSfe5M_zG2s&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;- Jim Weirich's (RIP) &quot;Y Not&quot; talk from RubyConf 2012: &lt;a href=&quot;https://www.youtube.com/watch?v=FITJMJjASUs&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=FITJMJjASUs&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;There are many other presenters who I have a good opinion of:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;- Raymond Hettinger: his presentation/teaching style is something I'd like to model my own after, also he gave the first talk on writing proper threaded/concurrent python that I was able to understand and make use of.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;- Brandon Rhoades: another speaker with a presentation style that I've found easy to follow, also he takes a little shot at the dd utility about 18 minutes into &lt;a href=&quot;https://www.youtube.com/watch?v=z9Hmys8ojno&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=z9Hmys8ojno&lt;/a&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;- Sandi Metz: I started out in Python land and moved to Ruby land, where I was introduced to Sandi's talks. She doesn't talk about incredibly complex topics, but she's got insight into some really basic things that's helpful to new people who can't see the forest through the trees.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;- Robert Martin: I gather that his OO principles are not universally revered, but I find his talks useful.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;- Gary Bernhardt: his talks are interesting and entertaining in ways that most are not&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;The list goes on, but I can't think of them all right now. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839619&quot; readability=&quot;2.0061349693252&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839389&quot; readability=&quot;6.6153846153846&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.3076923076923&quot;&gt;&lt;tr readability=&quot;6.6153846153846&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.375&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.523076923077&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Bryan Cantrill's USENIX talk - Fork Yeah! The Rise and Development of illumos: &lt;a href=&quot;https://www.youtube.com/watch?v=-zRN7XLCRhc&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=-zRN7XLCRhc&lt;/a&gt;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;He gives a history of SunOS, Solaris, and OpenSolaris up to the Oracle acquisition, and then onto post acquisition and the creation of illumos. It's a brilliant talk and a must-watch for any Unix enthusiast or historian. Bryan is an incredibly engaging speaker. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840621&quot; readability=&quot;1.580487804878&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839091&quot; readability=&quot;1.4285714285714&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839457&quot; readability=&quot;0.99082568807339&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840629&quot; readability=&quot;1.0857142857143&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840965&quot; readability=&quot;2.6170212765957&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.3085106382979&quot;&gt;&lt;tr readability=&quot;2.6170212765957&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;i rewatch this one now and then just to hear Joe Armstrong speak of another author's complex compiler code and the singular comment &quot; and now for the tricky bit&quot;&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839599&quot; readability=&quot;2.6138613861386&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16838888&quot; readability=&quot;3.3628318584071&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839667&quot; readability=&quot;1.7435897435897&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840892&quot; readability=&quot;5.1789473684211&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.5894736842105&quot;&gt;&lt;tr readability=&quot;5.1789473684211&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.8842105263158&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.2694877505568&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Watching this now. It's great. Thanks! Not only are there some nice restatements of powerful high-level insights in to network effects in general (which I am considering with respect to physical logistics requirements in our current business), but some great historical tidbits too.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;The resounding rejection of packet switching by period communications experts at &lt;a href=&quot;https://youtu.be/8Z685OF-PS8?t=21m0s&quot; rel=&quot;nofollow&quot;&gt;https://youtu.be/8Z685OF-PS8?t=21m0s&lt;/a&gt; is awesome. Oh how the mighty have fallen! &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840247&quot; readability=&quot;2.4310344827586&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2155172413793&quot;&gt;&lt;tr readability=&quot;2.4310344827586&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;I watched this talk ages ago and throughly enjoyed it. Thank you for reminding me about it.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839166&quot; readability=&quot;3.8104089219331&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16838610&quot; readability=&quot;3.7546012269939&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840671&quot; readability=&quot;1.3424657534247&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839563&quot; readability=&quot;2.1702127659574&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840628&quot; readability=&quot;1.1081081081081&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16841317&quot; readability=&quot;1.7467248908297&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16841048&quot; readability=&quot;5.7857142857143&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840609&quot; readability=&quot;1.6693548387097&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16841389&quot; readability=&quot;0.80851063829787&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840321&quot; readability=&quot;3.75&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839253&quot; readability=&quot;1.72&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839184&quot; readability=&quot;1.6216216216216&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16841410&quot; readability=&quot;2.0979020979021&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839792&quot; readability=&quot;3.7699316628702&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839697&quot; readability=&quot;1.3561643835616&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839279&quot; readability=&quot;4.6480446927374&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16838949&quot; readability=&quot;3.3333333333333&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839176&quot; readability=&quot;1.8923076923077&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16841397&quot; readability=&quot;2.4&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16841350&quot; readability=&quot;2.0683229813665&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16841186&quot; readability=&quot;2.954356846473&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840966&quot; readability=&quot;2.336&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840969&quot; readability=&quot;3.2861635220126&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839352&quot; readability=&quot;2.9084967320261&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840197&quot; readability=&quot;1.8604651162791&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840195&quot; readability=&quot;5.7318116975749&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8659058487874&quot;&gt;&lt;tr readability=&quot;5.7318116975749&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.3694721825963&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;14.237188872621&quot;&gt;&lt;span class=&quot;c00&quot;&gt;The White Hat’s Dilemma, by Alex Stamos: &lt;a href=&quot;https://www.youtube.com/watch?v=eEeHTQHTSgE&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=eEeHTQHTSgE&lt;/a&gt;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Stamos has been in the news recently for quitting as CSO at Facebook. Before that he quit as CSO at Yahoo after the government scanning scandal (&lt;a href=&quot;https://www.reuters.com/article/us-yahoo-nsa-exclusive/exclusive-yahoo-secretly-scanned-customer-emails-for-u-s-intelligence-sources-idUSKCN1241YT&quot; rel=&quot;nofollow&quot;&gt;https://www.reuters.com/article/us-yahoo-nsa-exclusive/exclu...&lt;/a&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;This talk took place before he started at Yahoo. In the latter half he goes over a number of potential moral quandaries and how ethically to respond to them. One matches the later Yahoo incident almost exactly.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;The overall point is that it’s important to consider these scenarios beforehand, because it’s easier to do the wrong thing if you have to make decisions on the fly. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839575&quot; readability=&quot;1.0693069306931&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840795&quot; readability=&quot;3.2992700729927&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6496350364964&quot;&gt;&lt;tr readability=&quot;3.2992700729927&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Garrett has had a huge impact on how I write code, even when I can’t use Erlang. His insights are so useful.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840929&quot; readability=&quot;4.8421052631579&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.4210526315789&quot;&gt;&lt;tr readability=&quot;4.8421052631579&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.2456140350877&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.211180124224&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Uniting Church and State: OO and FP Together by Noel Welsh&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;If you are interested in functional programing this little gem has some great insights into how to translate between data and behavior correctly. Not quite the level of Rich Hickey or Philip Wadler, but very good.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=IO5MD62dQbI&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=IO5MD62dQbI&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839531&quot; readability=&quot;2.8435114503817&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839710&quot; readability=&quot;4.5551839464883&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840901&quot; readability=&quot;4.6818181818182&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839957&quot; readability=&quot;1.1748251748252&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839379&quot; readability=&quot;3.6326530612245&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840970&quot; readability=&quot;0.912&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840079&quot; readability=&quot;1.810650887574&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840636&quot; readability=&quot;4.6153846153846&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840933&quot; readability=&quot;1.8685714285714&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839354&quot; readability=&quot;3.8938053097345&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840865&quot; readability=&quot;1.1694915254237&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839673&quot; readability=&quot;1.0934579439252&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840290&quot; readability=&quot;2.2222222222222&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839614&quot; readability=&quot;1&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839799&quot; readability=&quot;6.0392156862745&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.0196078431373&quot;&gt;&lt;tr readability=&quot;6.0392156862745&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.0392156862745&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.734513274336&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Worse is better!! — &lt;a href=&quot;https://youtu.be/X45YY97FmL4&quot; rel=&quot;nofollow&quot;&gt;https://youtu.be/X45YY97FmL4&lt;/a&gt;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Genius.com CEO gives talk about how the worst possible thing you can think of, is in fact the best thing.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;I like this video because I tend to get stuck in my own head, or get carried away on useless features/ideas that don't really contribute to the overall progress of the product. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839392&quot; readability=&quot;7.8287671232877&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.9143835616438&quot;&gt;&lt;tr readability=&quot;7.8287671232877&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.5239726027397&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;12.941463414634&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Not a proper tech talk, but hearing Ben Chestnut talk about the early days and growth of MailChimp stuck with me.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;&lt;a href=&quot;https://vimeo.com/34081566&quot; rel=&quot;nofollow&quot;&gt;https://vimeo.com/34081566&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Bootstrapped to over half a billion dollars in revenue. Worth many multiples of that. Built it Atlanta, not a startup city. B2B, but with a more creative ethos than most VC-backed startups in SF. Just an extraordinary story, well worth the hour it takes to watch. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840798&quot; readability=&quot;0.98969072164948&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840656&quot; readability=&quot;1.7716535433071&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839558&quot; readability=&quot;5.7476038338658&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8738019169329&quot;&gt;&lt;tr readability=&quot;5.7476038338658&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.1054313099042&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.96875&quot;&gt;&lt;span class=&quot;c00&quot;&gt;It may not be so &quot;wow&quot; now, but at the time it happened the Photosynth TED talk with Notre Dame blew my mind and has stuck with me &lt;a href=&quot;https://youtu.be/M-8k8GEGZPM&quot; rel=&quot;nofollow&quot;&gt;https://youtu.be/M-8k8GEGZPM&lt;/a&gt;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Remember at the time of this talk things like Google Maps were still very new, and nowhere near this level of performance. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839951&quot; readability=&quot;3.2075471698113&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16840041&quot; readability=&quot;5.7638376383764&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839745&quot; readability=&quot;1.1489361702128&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839378&quot; readability=&quot;4.0294117647059&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839321&quot; readability=&quot;3.5434782608696&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839473&quot; readability=&quot;1.5251798561151&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839777&quot; readability=&quot;1.4016393442623&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839882&quot; readability=&quot;1.2105263157895&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839596&quot; readability=&quot;1.2564102564103&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839862&quot; readability=&quot;7.6138996138996&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.8069498069498&quot;&gt;&lt;tr readability=&quot;7.6138996138996&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;9.0415057915058&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;17.818548387097&quot;&gt;&lt;span class=&quot;c00&quot;&gt;beside the nostaligia alan kay talks about sketchpad, sutherland and all that;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;one of my top talks is dan friedman + will byrd doing evalo in minikanren.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;similarly there's an old talk by sean parent about reversible computing while he was at Adobe R&amp;amp;D (kinda like relational programming of friedman and byrd, except, in cpp)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;I also greatly enjoy anything chuck moore on forth / ga144&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;And recently the talk about the values of APL&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Oh and Gary Bernhardt. Wat and the unix chainsaw. beautiful. &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;16839660&quot; readability=&quot;5.7057291666667&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8528645833333&quot;&gt;&lt;tr readability=&quot;5.7057291666667&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.9283854166667&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;13.783933518006&quot;&gt;&lt;span class=&quot;c00&quot;&gt;Same question from October 2016:&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=12637239&quot; rel=&quot;nofollow&quot;&gt;https://news.ycombinator.com/item?id=12637239&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Ask HN: What's your favorite tech talk?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;848 points by mngutterman on Oct 4, 2016 | hide | past | web | un-favorite | 255 comments&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c00&quot;&gt;Simply put, what are your favorite talks or trainings? It could by a one-off lecture about a specific concept or a series of talks about a languag &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Sat, 14 Apr 2018 17:51:26 +0000</pubDate>
<dc:creator>ratpik</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=16838460</dc:identifier>
</item>
<item>
<title>Was there a civilization on Earth before humans?</title>
<link>https://www.theatlantic.com/science/archive/2018/04/are-we-earths-only-civilization/557180/?single_page=true</link>
<guid isPermaLink="true" >https://www.theatlantic.com/science/archive/2018/04/are-we-earths-only-civilization/557180/?single_page=true</guid>
<description>&lt;section id=&quot;article-section-1&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;It only took five minutes for Gavin Schmidt to out-speculate me.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Schmidt is the director of &lt;span class=&quot;smallcaps&quot;&gt;NASA&lt;/span&gt;’s Goddard Institute for Space Studies (a.k.a. GISS) a world-class climate-science facility. One day last year, I came to GISS with a far-out proposal. In my work as an astrophysicist, I’d begun researching global warming from an “astrobiological perspective.” That meant asking whether any industrial civilization that rises on any planet will, through their own activity, trigger their own version of a climate shift. I was visiting GISS that day hoping to gain some climate science insights and, perhaps, collaborators. That’s how I ended up in Gavin’s office.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Just as I was revving up my pitch, Gavin stopped me in my tracks.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;“Wait a second,” he said. “How do you know we’re the only time there’s been a civilization on our own planet?”&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;It took me a few seconds to pick my jaw off the floor. I had certainly come into Gavin’s office prepared for eye rolls at the mention of “exo-civilizations.” But the civilizations he was asking about would have existed many millions of years ago. Sitting there, seeing Earth’s vast evolutionary past telescope before my mind’s eye, I felt a kind of temporal vertigo. “Yeah,” I stammered, “Could we tell if there’d been an industrial civilization that deep in time?”&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;article-section-2&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;We never got back to aliens. Instead, that first conversation launched a new study we’ve recently &lt;a href=&quot;https://arxiv.org/abs/1804.03748&quot; data-omni-click=&quot;r'article',r'',d,r'intext',r'0',r'557180'&quot;&gt;published&lt;/a&gt; in the &lt;em&gt;International Journal of Astrobiology&lt;/em&gt;. Though neither of us could see it at that moment, Gavin’s penetrating question opened a window not just onto Earth’s past, but also onto our own future.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;We’re used to imagining extinct civilizations in terms of the sunken statues and subterranean ruins. These kinds of artifacts of previous societies are fine if you’re only interested in timescales of a few thousands of years. But once you roll the clock back to tens of millions or hundreds of millions of years, things get more complicated.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;When it comes to direct evidence of an industrial civilization—things like cities, factories, and roads—the geologic record doesn’t go back past what’s called the Quaternary period 2.6 million years ago. For example, the oldest large-scale stretch of ancient surface lies in the Negev Desert. It’s “just” 1.8 million years old—older surfaces are mostly visible in cross section via something like a cliff face or rock cuts. Go back much farther than the Quaternary and everything has been turned over and crushed to dust.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;And, if we’re going back this far, we’re not talking about human civilizations anymore. &lt;em&gt;Homo sapiens&lt;/em&gt; didn’t make their appearance on the planet until just 300,000 years or so ago. That means the question shifts to other species, which is why Gavin called the idea the Silurian hypothesis, after an old &lt;em&gt;Dr. Who&lt;/em&gt; episode with intelligent reptiles.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;article-section-3&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;So, could researchers find clear evidence that an ancient species built a relatively short-lived industrial civilization long before our own? Perhaps, for example, some early mammal rose briefly to civilization building during the Paleocene epoch about 60 million years ago. There are fossils, of course. But the fraction of life that gets fossilized is always minuscule and varies a lot depending on time and habitat. It would be easy, therefore, to miss an industrial civilization that only lasted 100,000 years—which would be 500 times longer than our industrial civilization has made it so far.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Given that all direct evidence would be long gone after many millions of years, what kinds of evidence might then still exist? The best way to answer this question is to figure out what evidence we’d leave behind if human civilization collapsed at its current stage of development.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Now that our industrial civilization has truly gone global, humanity’s collective activity is laying down a variety of traces that will be detectable by scientists 100 million years in the future. The extensive use of fertilizer, for example, keeps 7 billion people fed, but it also means we’re redirecting the planet’s flows of nitrogen into food production. Future researchers should see this in characteristics of nitrogen showing up in sediments from our era. Likewise our relentless hunger for the rare-Earth elements used in electronic gizmos. Far more of these atoms are now wandering around the planet’s surface because of us than would otherwise be the case. They might also show up in future sediments, too. Even our creation, and use, of synthetic steroids has now become so pervasive that it too may be detectable in geologic strata 10 million years from now.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;article-section-4&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;And then there’s all that plastic. Studies have shown increasing amounts of plastic “marine litter” are being deposited on the seafloor everywhere from coastal areas to deep basins and even in the Arctic. Wind, sun, and waves grind down large-scale plastic artifacts, leaving the seas full of microscopic plastic particles that will eventually rain down on the ocean floor, creating a layer that could persist for geological timescales.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;The big question is how long any of these traces of our civilization will last. In our study, we found each had the possibility of making it into future sediments. Ironically, however, the most promising marker of humanity’s presence as an advanced civilization is a by-product of one activity that may threaten it most.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;When we burn fossil fuels, we’re releasing carbon back into the atmosphere that was once part of living tissues. This ancient carbon is depleted in one of that element’s three naturally occurring varieties, or isotopes. The more fossil fuels we burn, the more the balance of these carbon isotopes shifts. Atmospheric scientists call this shift the Suess effect, and the change in isotopic ratios of carbon due to fossil-fuel use is easy to see over the last century. Increases in temperature also leave isotopic signals. These shifts should be apparent to any future scientist who chemically analyzes exposed layers of rock from our era. Along with these spikes, this Anthropocene layer might also hold brief peaks in nitrogen, plastic nanoparticles, and even synthetic steroids. So if these are traces our civilization is bound to leave to the future, might the same “signals” exist right now in rocks just waiting to tell us of civilizations long gone?&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;article-section-5&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;Fifty-six million years ago, Earth passed through the Paleocene-Eocene Thermal Maximum (PETM). During the PETM, the planet’s average temperature climbed as high as 15 degrees Fahrenheit above what we experience today. It was a world almost without ice, as typical summer temperatures at the poles reached close to a balmy 70 degrees Fahrenheit. Looking at the isotopic record from the PETM, scientists see both carbon and oxygen isotope ratios spiking in exactly the way we expect to see in the Anthropocene record. There are also other events like the PETM in the Earth’s history that show traces like our hypothetical Anthropocene signal. These include an event a few million years after the PETM dubbed the Eocene Layers of Mysterious Origin, and massive events in the Cretaceous that left the ocean &lt;a href=&quot;https://www.theatlantic.com/science/archive/2018/01/suffocating-oceans/550415/&quot; data-omni-click=&quot;r'article',r'',d,r'intext',r'1',r'557180'&quot;&gt;without oxygen&lt;/a&gt; for many millennia (or even longer).&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Are these events indications of previous nonhuman industrial civilizations? Almost certainly not. While there is evidence that the PETM may have been driven by a massive release of buried fossil carbon into the air, it’s the timescale of these changes that matter. The PETM’s isotope spikes rise and fall over a few hundred thousand years. But what makes the Anthropocene so remarkable in terms of Earth’s history is the speed at which we’re dumping fossil carbon into the atmosphere. There have been geological periods where Earth’s CO&lt;sub&gt;2&lt;/sub&gt; has been as high or higher than today, but never before in the planet’s multibillion-year history has so much buried carbon been dumped back into the atmosphere so quickly. So the isotopic spikes we do see in the geologic record may not be spiky enough to fit the Silurian hypothesis’s bill.&lt;/p&gt;
&lt;/section&gt;
&lt;section id=&quot;article-section-6&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;But there is a conundrum here. If an earlier species’s industrial activity is short-lived, we might not be able to easily see it. The PETM’s spikes mostly show us the Earth’s timescales for responding to whatever caused it, not necessarily the timescale of the cause. So it might take both dedicated and novel detection methods to find evidence of a truly short-lived event in ancient sediments. In other words, if you’re not explicitly looking for it, you might not see it. That recognition was, perhaps, the most concrete conclusion of our study.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;It’s not often that you write a paper proposing a hypothesis that you don’t support. Gavin and I don’t believe the Earth once hosted a 50-million-year-old Paleocene civilization. But by asking if we could “see” truly ancient industrial civilizations, we were forced to ask about the generic kinds of impacts any civilization might have on a planet. That’s exactly what the astrobiological perspective on climate change is all about. Civilization building means harvesting energy from the planet to do work (i.e., the work of civilization building). Once the civilization reaches truly planetary scales, there has to be some feedback on the coupled planetary systems that gave it birth (air, water, rock). This will be particularly true for young civilizations like ours still climbing up the ladder of technological capacity. There is, in other words, no free lunch. While some energy sources will have lower impact—say solar vs. fossil fuels—you can’t power a global civilization without some degree of impact on the planet.&lt;/p&gt;
&lt;aside class=&quot;callout&quot; data-omni-click=&quot;r'article',r' ',d,r'related',#data-omni-index,@data-article-id&quot;&gt;&lt;hr/&gt;&lt;h4&gt;Related Stories&lt;/h4&gt;
&lt;div&gt;&lt;a href=&quot;https://www.theatlantic.com/science/archive/2018/03/human-existence-will-look-more-miraculous-the-longer-we-survive/554513/&quot; data-omni-index=&quot;0&quot; data-article-id=&quot;932696&quot; data-omni-click=&quot;inherit&quot;&gt;&lt;img width=&quot;242&quot; src=&quot;https://cdn.theatlantic.com/assets/media/img/mt/2018/03/final72dpi/thumb_wide_medium.jpg?1522767821&quot; alt=&quot;A person holds a globe against a background of Earths hit by meteors, crumbling, and colliding with rockets.&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;/aside&gt;&lt;p dir=&quot;ltr&quot;&gt;Once you realize, through climate change, the need to find lower-impact energy sources, the less impact you will leave. So the more sustainable your civilization becomes, the smaller the signal you’ll leave for future generations.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;In addition, our work also opened up the speculative possibility that some planets might have fossil-fuel-driven cycles of civilization building and collapse. If a civilization uses fossil fuels, the climate change they trigger can lead to a large decrease in ocean oxygen levels. These low oxygen levels (called ocean anoxia) help trigger the conditions needed for making fossil fuels like oil and coal in the first place. In this way, a civilization and its demise might sow the seed for new civilizations in the future.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;By asking about civilizations lost in deep time, we’re also asking about the possibility for universal rules guiding the evolution of all biospheres in all their creative potential, including the emergence of civilizations. Even without pickup-driving Paleocenians, we’re only now learning to see how rich that potential might be.&lt;/p&gt;
&lt;/section&gt;</description>
<pubDate>Sat, 14 Apr 2018 12:58:23 +0000</pubDate>
<dc:creator>limbicsystem</dc:creator>
<og:title>Was There a Civilization On Earth Before Humans?</og:title>
<og:type>article</og:type>
<og:url>https://www.theatlantic.com/science/archive/2018/04/are-we-earths-only-civilization/557180/</og:url>
<og:image>https://cdn.theatlantic.com/assets/media/img/mt/2018/04/RTSUXON/facebook.jpg?1522792787</og:image>
<og:description>A look at the available evidence</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theatlantic.com/science/archive/2018/04/are-we-earths-only-civilization/557180/?single_page=true</dc:identifier>
</item>
<item>
<title>China Is Nationalizing Its Tech Sector</title>
<link>https://www.bloomberg.com/view/articles/2018-04-12/china-is-nationalizing-its-tech-sector</link>
<guid isPermaLink="true" >https://www.bloomberg.com/view/articles/2018-04-12/china-is-nationalizing-its-tech-sector</guid>
<description>&lt;p&gt;&lt;span class=&quot;lede-media-image__caption caption&quot;&gt;Meet the new boss.&lt;/span&gt;&lt;/p&gt;&lt;div readability=&quot;114.35544708232&quot;&gt;
&lt;p&gt;As &lt;a href=&quot;https://twitter.com/QiZHAI/status/983620160371154944&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-web-url=&quot;https://twitter.com/QiZHAI/status/983620160371154944&quot;&gt;Bloomberg News&lt;/a&gt; reported this week, a key stumbling block in trade negotiations between China and the U.S. has been Beijing's extensive support for its technology firms. But if President Donald Trump's administration thinks that will change any time soon, it hasn't been paying attention: Far from reducing support for the tech sector, China is on the verge of nationalizing it.&lt;/p&gt;


&lt;p&gt;By many measures, China's tech companies seem unstoppable. Private equity and venture capital investment grew from $14 billion in 2012 to $120 billion in 2017. Last year, 34 Chinese companies &lt;a href=&quot;https://technode.com/2018/01/04/itjuzi-chinese-unicorns/&quot; data-web-url=&quot;https://technode.com/2018/01/04/itjuzi-chinese-unicorns/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;joined&lt;/a&gt; the elite ranks of startups valued at more than $1 billion, second only to the U.S. From health care to bike-sharing, Chinese companies are improving on ideas from overseas and innovating in their own right.&lt;/p&gt;


&lt;p&gt;And it's not just startups. China's established tech firms -- notably Baidu, Alibaba and Tencent, or the BATs -- are experiencing enormous growth as well. Tencent Holdings Ltd., with nearly 1 billion users, &lt;a href=&quot;https://www.bloomberg.com/news/articles/2018-03-21/tencent-profit-beats-estimates-as-wechat-games-drive-growth&quot; target=&quot;_blank&quot;&gt;reported&lt;/a&gt; that its net income almost doubled in the last quarter, to $3.3 billion. Alibaba Group Holding Ltd., which dominates online retail, is expecting growth of 55 percent this year. Investors may worry about Chinese debt, but they're giddy about Chinese tech.&lt;/p&gt;




&lt;p&gt;At first glance, this rapid growth would seem to dovetail with the government's efforts to prove its market bona fides. China regularly pushes for recognition as a market economy at the World Trade Organization, while touting the benefits of &quot;supply-side reform&quot; at home. In a speech at the most recent Communist Party Congress, President Xi Jinping pledged to &quot;support the growth of private businesses.&quot;&lt;/p&gt;


&lt;p&gt;Look beyond such rhetoric, though, and a very different picture emerges.&lt;/p&gt;
&lt;p&gt;Communist Party committees have been installed at &lt;a href=&quot;https://www.ft.com/content/6bc839c0-ace6-11e7-aab9-abaa44b1e130&quot; data-web-url=&quot;https://www.ft.com/content/6bc839c0-ace6-11e7-aab9-abaa44b1e130&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;many tech firms&lt;/a&gt;, reviewing everything from operations to compliance with &lt;a href=&quot;https://www.bloomberg.com/news/articles/2018-03-11/it-s-all-xi-all-the-time-in-china-as-party-influence-expands&quot; target=&quot;_blank&quot;&gt;national goals&lt;/a&gt;. Regulators have been discussing &lt;a href=&quot;https://www.wsj.com/articles/beijing-pushes-for-a-direct-hand-in-chinas-big-tech-firms-1507758314&quot; data-web-url=&quot;https://www.wsj.com/articles/beijing-pushes-for-a-direct-hand-in-chinas-big-tech-firms-1507758314&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;taking a 1 percent stake&lt;/a&gt; in some giants, including Alibaba and Tencent, along with a board seat. Tech companies have been widely encouraged to invest in state-owned firms, in the hopes of making them more productive. The common denominator of all these efforts is that the government wants more control.&lt;/p&gt;
&lt;p&gt;An executive at a Chinese search engine recently &lt;a href=&quot;https://twitter.com/S_Rabinovitch/status/973794048896065538&quot; data-web-url=&quot;https://twitter.com/S_Rabinovitch/status/973794048896065538&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;summed up&lt;/a&gt; the new dynamic:&lt;/p&gt;
&lt;blockquote readability=&quot;15&quot;&gt;
&lt;p&gt;We're entering an era in which we'll be fused together. It might be that there will be a request to establish a Party committee within your company, or that you should let state investors take a stake, you know, as a form of mixed ownership. If you think clearly about this, you really can resonate together with the state. You can receive massive support. But if it's your nature to want to go your own way, to think that your interests differ from what the state is advocating, then you'll probably find that things are painful, more painful than in the past.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This quasi-nationalization applies to China's startup scene, too. One recent report found that &lt;a href=&quot;https://technode.com/2018/01/04/itjuzi-chinese-unicorns/&quot; data-web-url=&quot;https://technode.com/2018/01/04/itjuzi-chinese-unicorns/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;60 percent of Chinese unicorns&lt;/a&gt; have either direct or indirect investment from the BATs. China's venture-capital sector is dominated not by traditional tech dealmakers but by the state: There are more than &lt;a href=&quot;https://www.chinamoneynetwork.com/2017/10/31/chinas-798b-government-funds-redraw-investment-landscape-largest-funds-must-know&quot; data-web-url=&quot;https://www.chinamoneynetwork.com/2017/10/31/chinas-798b-government-funds-redraw-investment-landscape-largest-funds-must-know&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;1,000 government-owned&lt;/a&gt; VC firms in China, controlling more than $750 billion.&lt;/p&gt;

&lt;p&gt;All this has direct consequences for the trade dispute with the U.S. A recent research note from Natixis SA found that 70 percent of the products targeted by the Trump administration in its initial tariff list fall under the &lt;a href=&quot;https://www.bloomberg.com/news/articles/2018-04-10/how-made-in-china-2025-frames-trump-s-trade-threats-quicktake&quot; target=&quot;_blank&quot;&gt;China Manufacturing 2025&lt;/a&gt; initiative, which aims to support Chinese companies in 10 high-tech sectors, including robotics and biotechnology. If Beijing insists on protecting those industries -- as it gives every indication of doing -- significant progress on trade talks seems unlikely. &lt;/p&gt;
&lt;aside class=&quot;inline-newsletter&quot; data-state=&quot;ready&quot;/&gt;&lt;p&gt;Perhaps a bigger worry for China, though, is that this creeping nationalization could harm its most dynamic companies. Lavishing the new national champions with handouts -- such as cheap loans and employment subsidies -- could turn them into rent-seekers. More bureaucracy could mean less efficiency and growth. Firms may start currying government favor rather than taking risks and innovating. Tech could become the new coal.&lt;/p&gt;
&lt;p&gt;And that wouldn't be in anyone's interest.&lt;/p&gt;
&lt;p&gt;This column does not necessarily reflect the opinion of the editorial board or Bloomberg LP and its owners.&lt;/p&gt;
&lt;p class=&quot;news-rsf-contact-author&quot;&gt;To contact the author of this story:&lt;br/&gt;&lt;span itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Person&quot;&gt; &lt;span itemprop=&quot;name&quot;&gt;Christopher Balding&lt;/span&gt;&lt;/span&gt; at &lt;a href=&quot;mailto:cbalding@phbs.pku.edu.cn&quot;&gt;cbalding@phbs.pku.edu.cn&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;news-rsf-contact-editor&quot;&gt;To contact the editor responsible for this story:&lt;br/&gt;&lt;span itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Person&quot;&gt; &lt;span itemprop=&quot;name&quot;&gt;Timothy Lavin&lt;/span&gt;&lt;/span&gt; at &lt;a href=&quot;mailto:tlavin1@bloomberg.net&quot;&gt;tlavin1@bloomberg.net&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Sat, 14 Apr 2018 11:45:17 +0000</pubDate>
<dc:creator>adventured</dc:creator>
<og:description>The government wants control of a booming new industry.</og:description>
<og:image>https://assets.bwbx.io/images/users/iqjWHBFdfxIU/ibWHOYes2hyg/v0/1200x800.jpg</og:image>
<og:title>China Is Nationalizing Its Tech Sector</og:title>
<og:type>article</og:type>
<og:url>https://www.bloomberg.com/view/articles/2018-04-12/china-is-nationalizing-its-tech-sector</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/view/articles/2018-04-12/china-is-nationalizing-its-tech-sector</dc:identifier>
</item>
<item>
<title>Front-End Developer Handbook</title>
<link>https://frontendmasters.com/books/front-end-handbook/2018/</link>
<guid isPermaLink="true" >https://frontendmasters.com/books/front-end-handbook/2018/</guid>
<description>&lt;h3 id=&quot;written-by-cody-lindley&quot;&gt;Written by &lt;a href=&quot;http://codylindley.com/&quot; target=&quot;_blank&quot;&gt;Cody Lindley&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Sponsored by &lt;a href=&quot;https://frontendmasters.com/&quot; target=&quot;_blank&quot;&gt;Frontend Masters&lt;/a&gt;, advancing your skills with in-depth, modern front-end engineering courses&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://frontendmasters.com/books/front-end-handbook/2018/cover.jpg&quot; alt=&quot;Front End Handbook 2018 Cover&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This is a guide that anyone could use to learn about the practice of front-end development. It broadly outlines and discusses the practice of front-end engineering: how to learn it and what tools are used when practicing it in 2018.&lt;/p&gt;
&lt;p&gt;It is specifically written with the intention of being a professional resource for potential and currently practicing front-end developers to equip themselves with learning materials and development tools. Secondarily, it can be used by managers, CTOs, instructors, and head hunters to gain insights into the practice of front-end development.&lt;/p&gt;
&lt;p&gt;The content of the handbook favors web technologies (HTML, CSS, DOM, and JavaScript) and those solutions that are directly built on top of these open technologies. The materials referenced and discussed in the book are either best in class or the current offering to a problem.&lt;/p&gt;
&lt;p&gt;The book should not be considered a comprehensive outline of all resources available to a front-end developer. The value of the book is tied up in a terse, focused, and timely curation of just enough categorical information so as not to overwhelm anyone on any one particular subject matter.&lt;/p&gt;
&lt;p&gt;The intention is to release an update to the content yearly.&lt;/p&gt;
&lt;p&gt;The handbook is divided into the following three parts:&lt;/p&gt;
&lt;h2 id=&quot;part-i-the-front-end-practice&quot;&gt;Part I. The Front-End Practice&lt;/h2&gt;
&lt;p&gt;Part one broadly describes the practice of front-end engineering.&lt;/p&gt;
&lt;h2 id=&quot;part-ii-learning-front-end-development&quot;&gt;Part II: Learning Front-End Development&lt;/h2&gt;
&lt;p&gt;Part two identifies self-directed and direct resources for learning to become a front-end developer.&lt;/p&gt;

&lt;p&gt;Part three briefly explains and identifies tools of the trade.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;Download a .pdf, .epub, or .mobi file from&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Contribute content, suggestions, and fixes on github&lt;/strong&gt;:&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;Creative Commons License&quot; src=&quot;https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;This work is licensed under a &lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/&quot; target=&quot;_blank&quot;&gt;Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sat, 14 Apr 2018 10:17:01 +0000</pubDate>
<dc:creator>wyclif</dc:creator>
<og:type>website</og:type>
<og:title>Front-End Developer Handbook 2018 - Learn the entire JavaScript, CSS and HTML development practice!</og:title>
<og:description>A guide for front-end developers to equip themselves with latest learning resources and development tools in front-end engineering.</og:description>
<og:url>https://frontendmasters.com/books/front-end-handbook/2018/</og:url>
<og:image>https://frontendmasters.com/books/front-end-handbook/2018/images/open-graph-image.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://frontendmasters.com/books/front-end-handbook/2018/</dc:identifier>
</item>
<item>
<title>How to Be a Systems Thinker</title>
<link>https://www.edge.org/conversation/mary_catherine_bateson-how-to-be-a-systems-thinker</link>
<guid isPermaLink="true" >https://www.edge.org/conversation/mary_catherine_bateson-how-to-be-a-systems-thinker</guid>
<description>&lt;p class=&quot;rtecenter&quot;&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;360&quot; mozallowfullscreen=&quot;&quot; src=&quot;https://player.vimeo.com/video/257049449?color=e8e8e8&amp;amp;byline=0&amp;amp;portrait=0&quot; webkitallowfullscreen=&quot;&quot; width=&quot;640&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HOW TO BE A SYSTEMS THINKER&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At the moment, I’m asking myself how people think about complex wholes like the ecology of the planet, or the climate, or large populations of human beings that have evolved for many years in separate locations and are now re-integrating. To think about these things, I find that you need something like systems theory. So, I went back to thinking about systems theory two or three years ago, which I hadn’t for quite a long time.&lt;/p&gt;
&lt;p&gt;What prompted it was concern about the state of the world. One of the things that we’re all seeing is that a lot of work that has been done to enable international cooperation in dealing with various problems since World War II is being pulled apart. We’re seeing the progress we thought had been made in this country in race relations being reversed. We’re seeing the partial breakup—we don’t know how far that will go—of a united Europe. We’re moving ourselves back several centuries in terms of thinking about what it is to be human, what it is to share the same planet, how we’re going to interact and communicate with each other. We’re going to be starting from scratch pretty soon.&lt;/p&gt;
&lt;p&gt;Two or three years ago, I started getting invited to do things with the American Society for Cybernetics. I kept saying that I hadn't done anything or thought about that for years, but they persisted. I was invited to write a chapter for a huge handbook called &lt;em&gt;The Handbook of Human Computation&lt;/em&gt;. Basically, what they meant by human computation is human-computer collaboration of various sorts. I told them I didn't know anything about that, and they said, &quot;Since you don’t have time to write a chapter, please write the preface.&quot; I asked how I would do that if I couldn't write a chapter, and they said, &quot;We'll send you all the abstracts.&quot; I became quite cranky and told them to get someone else to do it, but they kept sending me things to read. First, I searched Google for what human computation was, and I found that I did know about some corners of the field. So, I wrote everything I knew about human computation, sent it in, and said to them, &quot;See, I don’t know anything about it.&quot; They published it.&lt;/p&gt;
&lt;p&gt;Then I went to the conference and I started to get back in the conversation with people working on AI. I had realized that I’d learned an awful lot as quite a young person, even as a child, from my parents, who were involved in the Cybernetic Macy Conferences right through the ‘50s. They and other figures that were involved, like Warren McCulloch or many other people, were drifting through the house and having conversations all the time, and I was listening.&lt;/p&gt;
&lt;p&gt;I didn’t go straight to AI; I was nibbling at edges of it. I had realized that our capacity to think about complex interactive systems seemed to be falling apart, that a great many efforts towards international cooperation were falling apart; states that involved multiple ethnic systems or dialects were breaking up; and, indeed, societies like the United States, with many ethnic groups and racial groups, were having a progressively harder time trying to cooperate.&lt;/p&gt;
&lt;p&gt;We all think with metaphors of various sorts, and we use metaphors to deal with complexity, but the way human beings use computers and AI depends on their basic epistemologies—whether they’re accustomed to thinking in systemic terms, whether they’re mainly interested in quantitative issues, whether they’re used to using games of various sorts. A great deal of what people use AI for is to simulate some pattern outside in the world. On the other hand, people use one pattern in the world as a metaphor for another one all the time.&lt;/p&gt;
&lt;p&gt;Americans are inclined to talk about the &quot;war against drugs,&quot; or the &quot;war against poverty,&quot; or the &quot;war against cancer,&quot; without questioning whether &quot;war&quot; is an appropriate metaphor. It’s a way of talking about complexity, but if it doesn’t fit, it will cause you to make errors in how you deal with your problems. The war on poverty failed partly because poverty is not something you can defeat, and that makes warfare an inappropriate metaphor. The same is true with the war on drugs, which has gotten us into some ugly situations.&lt;/p&gt;
&lt;p&gt;One of the problems when you bring technology into a new area is that it forces you to oversimplify. That is, the possibilities of AI have been there from the very beginning of thinking about computers, but there's always this feeling of disappointment that there are limitations to what you can do. We keep attempting to do more complex things.&lt;/p&gt;
&lt;p&gt;Until fairly recently, computers could not be said to learn. To create a machine that learns to think more efficiently was a big challenge. In the same sense, one of the things that I wonder about is how we'll be able to teach a machine to know what it doesn’t know but that it might need to know in order to address a particular issue productively and insightfully. This is a huge problem for human beings. It takes a while for us to learn to solve problems. And then it takes even longer for us to realize what we don’t know all that we would need to know to solve a particular problem, which obviously involves a lot of complexity.&lt;/p&gt;
&lt;p&gt;How do you deal with ignorance? I don’t mean how do you shut ignorance out. Rather, how do you deal with an awareness of what you don’t know, and you don’t know how to know, in dealing with a particular problem? When Gregory Bateson was arguing about human purposes, that was where he got involved in environmentalism. We were doing all sorts of things to the planet we live on without recognizing what the side effects would be and the interactions. Although, at that point we were thinking more about side effects than about interactions between multiple processes. Once you begin to understand the nature of side effects, you ask a different set of questions before you make decisions and projections and analyze what’s going to happen.&lt;/p&gt;
&lt;p&gt;The same thing is true, for instance, with drug testing. The first question people ask is, &quot;Does the drug work?&quot; But the next question should be, &quot;What else does the drug do besides dealing with the pathology?&quot; A certain number of drugs get pulled off the market every year when people realize that the long-side effects may be more serious than what they’re trying to correct.&lt;/p&gt;
&lt;p&gt;What the analog to that in the computer world is, I don’t know. What we do is try to set up processes for problem solving and supply the data for analysis, but we don’t give the machine a way of saying, &quot;What else should I know before I look at this question?&quot; There has been so much excitement and sense of discovery around the digital revolution that we’re at a moment where we overestimate what can be done with AI, certainly as it stands at the moment.&lt;/p&gt;
&lt;p&gt;One of the most essential elements of human wisdom at its best is humility, knowing that you don’t know everything. There’s a sense in which we haven’t learned how to build humility into our interactions with our devices. The computer doesn’t know what it doesn’t know, and it's willing to make projections when it hasn’t been provided with everything that would be relevant to those projections. How do we get there? I don’t know. It’s important to be aware of it, to realize that there are limits to what we can do with AI. It’s great for computation and arithmetic, and it saves huge amounts of labor. It seems to me that it lacks humility, lacks imagination, and lacks humor. It doesn’t mean you can’t bring those things into your interactions with your devices, particularly, in communicating with other human beings. But it does mean that elements of intelligence and wisdom—I like the word wisdom, because it's more multi-dimensional—are going to be lacking.&lt;/p&gt;
&lt;p&gt;As a child, I had the early conversations of the cybernetic revolution going on around me. I can look at examples and realize that when one of my parents was trying to teach me something, it was directly connected with what they were doing and thinking about in the context of cybernetics.  &lt;/p&gt;
&lt;p&gt;One of my favorite memories of my childhood was my father helping me set up an aquarium. In retrospect, I understand that he was teaching me to think about a community of organisms and their interactions, interdependence, and the issue of keeping them in balance so that it would be a healthy community. That was just at the beginning of our looking at the natural world in terms of ecology and balance. Rather than itemizing what was there, I was learning to look at the relationships and not just separate things.&lt;/p&gt;
&lt;p&gt;Bless his heart, he didn’t tell me he was teaching me about cybernetics. I think I would have walked out on him. Another way to say it is that he was teaching me to think about systems. Gregory coined the term &quot;schismogenesis&quot; in 1936, from observing the culture of a New Guinea tribe, the Iatmul, in which there was a lot of what he called schismogenesis. Schismogenesis is now called &quot;positive feedback&quot;; it’s what happens in an arms race. You have a point of friction, where you feel threatened by, say, another nation. So, you get a few more tanks. They look at that and say, &quot;They’re arming against us,&quot; and they get a lot more tanks. Then you get more tanks. And they get more tanks or airplanes or bombs, or whatever it is. That’s positive feedback.&lt;/p&gt;
&lt;p&gt;The alternative would be if you saw them getting tanks to say, &quot;I’d better get rid of my tanks. Let’s cool the arms race, instead of mutually escalating.&quot; Gregory was talking about that and didn’t really have a term for it, so he invented the term schismogenesis. Genesis to mean bringing into being greater and greater schisms, conflicts. That was before the concept of positive feedback had been coined. That’s what he was talking about, the kind of feedback that accelerates a process rather than controls it, which is a very important concept.                         &lt;/p&gt;
&lt;p&gt;I would say that the great majority of Americans still believe that &quot;positive feedback&quot; is when someone pats you on the back and says you did a good job. What positive feedback is saying is, do more of the same. So, if what you’re doing is taking heroin or quarreling with your neighbor, this is just going to lead to trouble. Negative feedback corrects what you’re doing. It’s not somebody saying, &quot;That was a lousy speech.&quot; It’s somebody saying, &quot;Reverse course. Stop building more bombs. Stop taking in more alcohol faster. Slow down.&quot; Negative feedback is corrective feedback.&lt;/p&gt;
&lt;p&gt;Gregory then wrote a paper about an arms race and made the move from thinking about the New Guinea tribe to the nature of arms races in the modern world, which we still have plenty of.&lt;/p&gt;
&lt;p&gt;At the beginning of the war, my parents, Margaret Mead and Gregory Bateson, had very recently met and married. They met Lawrence K. Frank, who was an executive of the Macy Foundation. As a result of that, both of them were involved in the Macy Conferences on Cybernetics, which continued then for twenty years. They still quote my mother constantly in talking about second-order cybernetics: the cybernetics of cybernetics. They refer to Gregory as well, though he was more interested in cybernetics as abstract analytical techniques. My mother was more interested in how we could apply this to human relations.&lt;/p&gt;
&lt;p&gt;My parents looked at the cybernetics conferences rather differently. My mother, who initially posed the concept of the cybernetics of cybernetics, second-order cybernetics, came out of the anthropological approach to participant observation: How can you do something and observe yourself doing it? She was saying, &quot;Okay, you’re inventing a science of cybernetics, but are you looking at your process of inventing it, your process of publishing, and explaining, and interpreting?&quot; One of the problems in the United States has been that pieces of cybernetics have exploded into tremendous economic activity in all of computer science, but much of the systems theory side of cybernetics has been sort of a stepchild. I firmly believe that it is the systems thinking that is critical.&lt;/p&gt;
&lt;p&gt;At the point where she said, &quot;You guys need to look at what you’re doing. What is the cybernetics of cybernetics?&quot; what she was saying was, &quot;Stop and look at your own process and understand it.&quot; Eventually, I suppose you do run into the infinite recursion problem, but I guess you get used to that.&lt;/p&gt;
&lt;p&gt;How do you know that you know what you know? When I think about the excitement of those early years of the cybernetic conferences, there have been several losses. One is that the explosion of devices and manufacturing and the huge economic effect of computer technology has overshadowed the epistemological curiosity on which it was built, of how we know what we know, and how that affects decision making.&lt;/p&gt;
&lt;p&gt;If you use the word &quot;cyber&quot; in our society now, people think that it means a device. It does not evoke the whole mystery of what maintains balance, or how a system is kept from going off kilter, which was the kind of thing that motivated the question in the first place. It’s probably not the first time that’s happened, that a technology with a very wide spectrum of uses has been so effective for certain problems that it’s obscured the other possible uses.&lt;/p&gt;
&lt;p&gt;People are not using cybernetic models as much as they should be. In thinking about medicine, for instance, we are thinking more than we used to about what happens when fifty years ago you had chicken pox and now you have shingles. What happened? How did the virus survive? It went into hiding. It took a different form. We’re finding examples of problems that we thought we’d solved but may have made worse.&lt;/p&gt;
&lt;p&gt;We have taller smoke stacks on factories now, trying to prevent smog and acid rain. What we’re getting is that the fumes are traveling further, higher up, and still coming down in the form of acid rain. Let’s look at that. Someone has tried to solve a problem, which they did—they reduced smog. But we still put smoke up the chimney and think it disappears. It isn't gone. It’s gone &lt;em&gt;somewhere&lt;/em&gt;. We need to look at the entire system. What happens to the smoke? What happens to the wash-off of fertilizer into brooks and streams? In that sense, we’re using the technology to correct a problem without understanding the epistemology of the problem. The problem is connected to a larger system, and it’s not solved by the quick fix.&lt;/p&gt;
&lt;p&gt;If you look back at the cybernetics conferences, you’d find a lot of examples that could be applied to social and human problems that have not been. Most people don’t learn about cybernetics. They buy devices. Cybernetics, because it developed a whole branch of communication theory, is a way of thinking, not an industry. In our relations with other nations, for instance, we get caught in schismogenesis—arms races, competitions, escalations of various sorts—without people being aware that that’s what’s happening, without them thinking through what needs to be attended to in order to solve a problem.&lt;/p&gt;
&lt;p&gt;We think that we can solve drug addiction by punitive police enforcement. Doesn’t work. In fact, it makes more jobs for policemen and prison guards. We are not using systems theory to think about social problems most of the time. Business problems, yes. There are specialists. Business schools even teach systems theory. But we’re not raising our children to be systems thinkers. That’s what we need to do.&lt;/p&gt;
&lt;p&gt;You don’t have to know a lot of technical terminology to be a systems thinker. One of the things that I’ve been realizing lately, and that I find fascinating as an anthropologist, is that if you look at belief systems and religions going way back in history, around the world, very often what you realize is that people have intuitively understood systems and used metaphors to think about them. The example that grabbed me was thinking about the pantheon of Greek gods—Zeus and Hera, Apollo and Demeter, and all of them. I suddenly realized that in the mythology they’re married, they have children, the sun and the moon are brother and sister. There are quarrels among the gods, and marriages, divorces, and so on. So you can use the Greek pantheon, because it is based on kinship, to take advantage of what people have learned from their observation of their friends and relatives.&lt;/p&gt;
&lt;p&gt;It turns out that the Greek religious system is a way of translating what you know about your sisters, and your cousins, and your aunts into knowledge about what’s happening to the weather, the climate, the crops, and international relations, all sorts of things. A metaphor is always a framework for thinking, using knowledge of this to think about that. Religion is an adaptive tool, among other things. It is a form of analogic thinking.&lt;/p&gt;
&lt;p&gt;The other thing that I like to talk about is that we carry an analog machine around with us all the time called our body. It’s got all these different organs that interact; they’re interdependent. If one of them goes out of kilter, the others go out of kilter, eventually. This is true in society. This is how dis-ease spreads through a community, because everything is connected.&lt;/p&gt;
&lt;p&gt;There are a couple of other things that are very striking. If you look at the Old Testament, the Hebrew Scriptures, what you see—which you can also see in young children—is that they start from the differences between things. Mommy’s not the same as Daddy. Daddy’s not the same as brother. I can remember my daughter learning the word &quot;Goggy,&quot; which obviously was &quot;Doggy.&quot; But then she said that the cow is a &quot;Goggy,&quot; because it had four legs, I guess. But then you have to learn to distinguish the cow from the dog. When we think about a child developing, you have to learn to distinguish between things—this is this and that is that. Starting with the Book of Genesis, each thing is created separately. They don’t evolve by differentiation. God separates the day from the night, the light from the dark, the dry land from the water. And then you end up with a large number of rules of things that have to be kept separate. You can’t weave two different kinds of fibers into the same fabric. You can’t plow with an ox and an ass, but must use two oxen.&lt;/p&gt;
&lt;p&gt;What you have is this process of differentiation, which is intellectually profound but only a beginning. Taxonomy is an essential basis for all we know about the natural world. We have learned to classify. A bee is not a butterfly. You can see that stage in many forms of religion and mythology. And then in some later forms, the switch is from making distinctions to recognizing relationships.&lt;/p&gt;
&lt;p&gt;What comes along if you look at the New Testament is Jesus keeps violating all the rules about keeping things separate, which makes people angry&lt;ins cite=&quot;mailto:Mary%20Catherine%20Bateson&quot; datetime=&quot;2018-03-29T12:32&quot;&gt;,&lt;/ins&gt; because that’s what they’ve been taught. He’s constantly posing the question, &quot;What’s the connection?&quot; And not, &quot;What’s the difference?&quot; You can see that this constant necessity of recognizing that things are separate and different and can be used in different ways, and then seeing that everything is connected, and how it’s connected and interdependent, that this is a sort of permanent balance in human intellect. If you look at the history of mythology, you can see people moving slowly forward. You can look at the history of science—things that were once equated we now see as separate. We can only go so far in breaking down more and more elementary particles, but we're still finding particles. We’re still interested in the separation of things, but we’re also still discovering relationships.&lt;/p&gt;
&lt;p&gt;I’ve become very much involved in issues around climate change. Climate change comes from proceeding on one path without recognizing how that will affect other aspects of our reality. Take it another step, one of the things that’s hard to get across to people is that when human beings are uncomfortable, they fight, or move. At this point we have a refugee crisis, migrations, people leaving areas where their ways of making a living don’t work any longer because of climate change. We also have conflict happening as one country wants to control more arable land—Lebensraum. So, people are fighting about land, or about fishing rights.&lt;/p&gt;
&lt;p&gt;Most people don’t realize it, but a myth has been put together about the so-called Arab Spring of a few years ago, where many Americans said, &quot;Oh, good, they’re rebelling against their authoritarian governments and they’re going to become democratic.&quot; Well, they didn’t. The cause of the Arab Spring was a five-year drought, with a lot of people having difficulty feeding their families, so they migrated from the villages to the cities, looking for jobs where they would be paid money and could buy food for their families. But there were no jobs in the cities, so they had revolutions.&lt;/p&gt;
&lt;p&gt;The tragedy of the cybernetic revolution, which had two phases, the computer science side and the systems theory side, has been the neglect of the systems theory side of it. We chose marketable gadgets in preference to a deeper understanding of the world we live in.&lt;/p&gt;
</description>
<pubDate>Sat, 14 Apr 2018 03:44:23 +0000</pubDate>
<dc:creator>raleighm</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.edge.org/conversation/mary_catherine_bateson-how-to-be-a-systems-thinker</dc:identifier>
</item>
<item>
<title>What did Alan Kay and Steve Jobs talk about at the 2007 iPhone keynote?</title>
<link>https://www.quora.com/What-did-Alan-Kay-and-Steve-Jobs-talk-about-at-the-2007-iPhone-keynote/answer/Alan-Kay-11?share=1</link>
<guid isPermaLink="true" >https://www.quora.com/What-did-Alan-Kay-and-Steve-Jobs-talk-about-at-the-2007-iPhone-keynote/answer/Alan-Kay-11?share=1</guid>
<description>&lt;p class=&quot;ui_qtext_para&quot;&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;Steve and I first met during his visit to Xerox Parc in 1979 at the urging of some of his computer people to see what we’d been doing for the previous 8 years. You can get an idea of this by taking a look at a revived Smalltalk system from the year before (1978) that several of us brought back to life a few years ago after its 40 year slumber on a rescued disk pack that Xerox had thrown away.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;I used this to make &lt;span class=&quot;qlink_container&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?t=135s&amp;amp;v=AnrlSqtpOkw&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; onclick=&quot;return Q.openUrl(this, 79339370);&quot; class=&quot;external_link&quot; data-qt-tooltip=&quot;youtube.com&quot;&gt;a tribute for a Ted Nelson celebration&lt;/a&gt;&lt;/span&gt;. The main difference today is “more pictures” (we didn’t have enough memory back then to use more than a few). We showed Steve many of the demos that are on the Ted Nelson tribute video, plus a few others not on the video.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;This subsequently formed the basis of the Lisa and the Mac a few years later (the Mac was done in 1984, 11 years after the more powerful and capable Parc Alto, which started working in 1973).&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;Later, I was chief scientist of Atari for a few years (81–84), and Steve and I would periodically have lunch. The last year of Atari was a collapse and I eventually accepted Steve’s invitation to come to Apple.&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;In 1984, Time or Newsweek asked me my opinion of the Macintosh, and I said “The Mac is the first personal computer good enough to be criticized”. Internally at Apple, my first memo had the title “Have I got a deal for you: a Honda with a one-quart gas tank!”. Steve did not like this memo, but what could he do given the history, and that it was quite true?&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;Steve and I remained friends (I was the go-between that brought him together with the people who were to become Pixar).&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;I think he invited me to the 2007 iPhone unveiling partly because it was kind of a tiny “Dynabook” — and he had always wanted to do one — and partly because &lt;span class=&quot;qlink_container&quot;&gt;&lt;a href=&quot;https://www.google.co.uk/url?cad=rja&amp;amp;cd=3&amp;amp;esrc=s&amp;amp;q=&amp;amp;rct=j&amp;amp;sa=t&amp;amp;source=web&amp;amp;uact=8&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DXAfTXYa36f4&amp;amp;usg=AOvVaw0h2cAseYPAPWGyAow50kEi&amp;amp;ved=0ahUKEwj80r2F-LHaAhXCIVAKHXKNAikQtwIINzAC&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; onclick=&quot;return Q.openUrl(this, 79339370);&quot; class=&quot;external_link&quot; data-qt-tooltip=&quot;google.co.uk&quot;&gt;he was going to use a quote of mine&lt;/a&gt;&lt;/span&gt; that he had always taken to heart &lt;em&gt;“People who are really serious about software should make their own hardware”&lt;/em&gt;.&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;The photo of us chatting:&lt;/p&gt;
&lt;div class=&quot;ui_qtext_image_outer&quot;&gt;
&lt;div class=&quot;ui_qtext_image_wrapper&quot;&gt;&lt;img class=&quot;landscape ui_qtext_image zoomable_in_feed lazy_loaded lazy_loading&quot; src=&quot;https://www.quora.com/What-did-Alan-Kay-and-Steve-Jobs-talk-about-at-the-2007-iPhone-keynote/answer/Alan-Kay-11?share=1&quot; data-src=&quot;https://qph.fs.quoracdn.net/main-qimg-9566661e9ae5ecca7919382e614d3866&quot; master_src=&quot;https://qph.fs.quoracdn.net/main-qimg-9566661e9ae5ecca7919382e614d3866&quot; master_w=&quot;344&quot; master_h=&quot;260&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;was taken right after the event. He brought the iPhone to me, put it in my hands, and asked: “Alan, is this good enough to be criticized?”. My reply was to make a shape with my hands the size of an iPad: “Steve, make it this size and you’ll rule the world”.&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;When the iPhone had been revealed a few minutes earlier I realized that they must already have done an iPad/Dynabook-like machine (easier) and that the “iPhone first” must have been a marketing/timing decision.&lt;/p&gt;
</description>
<pubDate>Sat, 14 Apr 2018 00:48:09 +0000</pubDate>
<dc:creator>tambourine_man</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.quora.com/What-did-Alan-Kay-and-Steve-Jobs-talk-about-at-the-2007-iPhone-keynote/answer/Alan-Kay-11?share=1</dc:identifier>
</item>
<item>
<title>European Copyright Law Could Soon Get Worse</title>
<link>https://www.eff.org/deeplinks/2018/04/european-copyright-law-isnt-great-it-could-soon-get-lot-worse</link>
<guid isPermaLink="true" >https://www.eff.org/deeplinks/2018/04/european-copyright-law-isnt-great-it-could-soon-get-lot-worse</guid>
<description>&lt;p&gt;EFF has been writing about the upcoming European Digital Single Market directive on copyright &lt;a href=&quot;https://www.eff.org/deeplinks/2016/08/european-copyright-leak-exposes-plans-force-internet-subsidize-publishers&quot;&gt;for a long time now&lt;/a&gt;. But it's time to put away the keyboard, and pick up the phone, because the proposal just got worse—and it's headed for a crucial vote on June 20-21. &lt;/p&gt;
&lt;p&gt;For those who need no further introduction to the directive, which would impose an &lt;a href=&quot;https://www.eff.org/deeplinks/2017/10/end-game-european-upload-filtering-approaches&quot;&gt;upload filtering mandate&lt;/a&gt; on Internet platforms (Article 13) and a &lt;a href=&quot;https://www.eff.org/deeplinks/2016/08/european-copyright-leak-exposes-plans-force-internet-subsidize-publishers&quot;&gt;link tax in favor of news publishers&lt;/a&gt; (Article 11), you can skip to the &lt;a href=&quot;https://www.eff.org/deeplinks/2018/04/european-copyright-law-isnt-great-it-could-soon-get-lot-worse#action&quot;&gt;bottom of this post&lt;/a&gt;, where we link to an action that European readers can take to make their voice heard. But if you're new to this, here's a short version of how we got here and why we're worried.&lt;/p&gt;
&lt;h3&gt;A Brief History&lt;/h3&gt;
&lt;p&gt; The European Copyright Directive was enacted in 2001 and is now woefully out of date. Thanks in large part to the work of Pirate Party MEP Julia Reda, many good ideas for updating European copyright law were put forward in a &lt;a href=&quot;https://www.eff.org/deeplinks/2015/06/european-parliamentarians-vote-tomorrow-fix-our-broken-copyright-law&quot;&gt;report of the European Parliament&lt;/a&gt; in July 2015. The European Commission threw out most of these ideas, and instead released a legislative proposal in October 2016 that focused on &lt;a href=&quot;https://www.eff.org/deeplinks/2016/10/upload-filtering-mandate-would-shred-european-copyright-safe-harbor&quot;&gt;giving new powers to publishers&lt;/a&gt;. That proposal was referred to several of the committees of the European Parliament, with the Parliament's Legal Affairs (JURI) Committee taking the lead.&lt;/p&gt;
&lt;p&gt;As the final text must also be accepted by the Council of the European Union (which can be considered as the second part of the EU's bicameral legislature), the Council Presidency has recently been &lt;a href=&quot;https://www.eff.org/deeplinks/2018/02/how-have-europes-upload-filtering-and-link-tax-plans-changed&quot;&gt;weighing in with its own &quot;compromise&quot; proposals&lt;/a&gt; (although this is something of a misnomer, as they do little to improve the Commission's original text, and in some respects make it worse). Not to be outdone, German MEP (Member of the European Parliament) Axel Voss last month &lt;a href=&quot;https://juliareda.eu/wp-content/uploads/2018/03/voss11.pdf&quot;&gt;introduced a new set of his own proposals&lt;/a&gt; [PDF] for &quot;compromise,&quot; which are somehow worse still. Since Voss leads the JURI committee, this is a big problem.&lt;/p&gt;
&lt;h3&gt;Link Tax Proposal: A Turn for the (Even) Worse&lt;/h3&gt;
&lt;p&gt;The biggest and most worrisome changes are to the &quot;link tax&quot; proposal, which would establish a special copyright-like fee to be paid by websites to news publishers, in exchange for the privilege of using short snippets of quoted text as part of a link to the original news article. Voss's latest amendments would make the link tax an &lt;em&gt;inalienable&lt;/em&gt; right, that news publishers cannot waive even if they choose to.&lt;/p&gt;
&lt;p&gt;The practical effect of this could be to make it impossible for a news publisher to publish their stories for free use, for example by using a &lt;a href=&quot;https://creativecommons.org/2018/03/29/head-copyright-committee-wants-deny-eu-creators-right-share/&quot;&gt;Creative Commons&lt;/a&gt; license. When a similar inalienable link tax was passed into law in Spain, the country's biggest news aggregation website, which had been Google News, simply &lt;a href=&quot;https://www.eff.org/deeplinks/2014/12/google-news-shuts-shop-spain-thanks-ancillary-copyright-law&quot;&gt;closed its Spanish operation.&lt;/a&gt; We can well imagine similar results if the link tax went Europe-wide.&lt;/p&gt;
&lt;p&gt;That's not all. Voss proposes that the beneficiaries of the link tax should include press agencies (who often provide the raw information based upon which other journalists write stories), and that libraries should also be responsible for paying extra fees to publishers in &quot;compensation&quot; for their rental and lending activities.&lt;/p&gt;
&lt;p&gt;Although Voss hasn't managed to make the upload filtering proposal any worse than it was before, it was &lt;a href=&quot;https://www.eff.org/deeplinks/2017/10/digital-rights-groups-demand-deletion-unlawful-filtering-mandate-proposed-eu&quot;&gt;plenty bad enough already&lt;/a&gt;. Although targeted mainly at sites that host video and music uploaded by users, it's broad enough to extend to extend to &lt;em&gt;any&lt;/em&gt; sort of user-uploaded content, including &lt;a href=&quot;https://savecodeshare.eu/&quot;&gt;code contributed to platforms like Github&lt;/a&gt;, and even text contributed to a user-edited encyclopedia (although Voss would support an amendment excluding non-profit encyclopedias from the law, which may or may not save Wikipedia).&lt;/p&gt;
&lt;h3 id=&quot;action&quot;&gt;How You Can Take Action&lt;/h3&gt;
&lt;p&gt;These proposals benefit large publishers, but punish those who use the Internet as an open platform for sharing and innovation. Europeans are running out of time to convince their representatives to reject them. Our friends at Mozilla have developed an &lt;a href=&quot;https://act.eff.org/action/stop-europe-s-copyright-censorship-and-link-tax-plans&quot;&gt;excellent tool that Europeans can use to directly contact their representatives&lt;/a&gt; to deliver a simple message—delete Article 11, delete Article 13, and instead give us copyright laws that promote competition and innovation online.&lt;/p&gt;
&lt;p class=&quot;take-action&quot;&gt;&lt;a href=&quot;https://act.eff.org/action/stop-europe-s-copyright-censorship-and-link-tax-plans&quot;&gt;Take Action&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;take-explainer&quot;&gt;&lt;a href=&quot;https://act.eff.org/action/stop-europe-s-copyright-censorship-and-link-tax-plans&quot;&gt;Demand fair copyright policies&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 13 Apr 2018 22:38:03 +0000</pubDate>
<dc:creator>DiabloD3</dc:creator>
<og:type>article</og:type>
<og:title>European Copyright Law Isn't Great. It Could Soon Get a Lot Worse.</og:title>
<og:url>https://www.eff.org/deeplinks/2018/04/european-copyright-law-isnt-great-it-could-soon-get-lot-worse</og:url>
<og:description>EFF has been writing about the upcoming European Digital Single Market directive on copyright for a long time now. But it's time to put away the keyboard, and pick up the phone, because the proposal just got worse—and it's headed for a crucial vote on June 20-21. For those who need...</og:description>
<og:image>https://www.eff.org/files/eu-copyright.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.eff.org/deeplinks/2018/04/european-copyright-law-isnt-great-it-could-soon-get-lot-worse</dc:identifier>
</item>
<item>
<title>Go gets preliminary WebAssembly support</title>
<link>https://go-review.googlesource.com/c/go/+/102835</link>
<guid isPermaLink="true" >https://go-review.googlesource.com/c/go/+/102835</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://go-review.googlesource.com/c/go/+/102835&quot;&gt;https://go-review.googlesource.com/c/go/+/102835&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=16834181&quot;&gt;https://news.ycombinator.com/item?id=16834181&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 214&lt;/p&gt;&lt;p&gt;# Comments: 95&lt;/p&gt;</description>
<pubDate>Fri, 13 Apr 2018 21:49:48 +0000</pubDate>
<dc:creator>ricksnyke</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://go-review.googlesource.com/c/go/+/102835</dc:identifier>
</item>
<item>
<title>For mathematicians, = does not mean equality</title>
<link>https://jeremykun.com/2018/04/13/for-mathematicians-does-not-mean-equality/</link>
<guid isPermaLink="true" >https://jeremykun.com/2018/04/13/for-mathematicians-does-not-mean-equality/</guid>
<description>&lt;p&gt;Every now and then I hear some ridiculous things about the equals symbol. Some large subset of programmers—perhaps related to functional programmers, perhaps not—seem to think that = should only and ever mean “equality in the mathematical sense.” The argument usually goes,&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Functional programming gives us back that inalienable right to analyze things by using mathematics. Never again need we bear the burden of that foul mutant x = x+1! No novice programmer—nay, not even a mathematician!—could comprehend such flabbergastery. Tis a pinnacle of confusion!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It’s ironic that so much of the merits or detriment of the use of = is based on a veiled appeal to the purity of mathematics. Just as often software engineers turn the tables, and any similarity to mathematics is decried as elitist jibber jabber (&lt;em&gt;Such an archaic and abstruse use of symbols! Oh no, big-O!&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;In fact, equality is more rigorously defined in a programming language than it will ever be in mathematics. Even in the hottest pits of software hell, where there’s = and == and ===, throwing in ==== just to rub salt in the wound, each operator gets its own coherent definition and documentation. Learn it once and you’ll never go astray.&lt;/p&gt;
&lt;p&gt;Not so in mathematics—oh yes, hide your children from the terrors that lurk. In mathematics equality is little more than a stand-in for the word “is,” oftentimes entirely dependent on context. Now gather round and listen to the tale of the true identities of the masquerader known as =.&lt;/p&gt;
&lt;p&gt;Let’s start with some low-hanging fruit, the superficial concerns.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Csum_%7Bi%3D1%7D%5En+i%5E2+%2B+3&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;\displaystyle \sum_{i=1}^n i^2 + 3&quot; title=&quot;\displaystyle \sum_{i=1}^n i^2 + 3&quot; class=&quot;latex&quot;/&gt;&lt;/p&gt;
&lt;p&gt;If = were interpreted literally, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;i&quot; title=&quot;i&quot; class=&quot;latex&quot;/&gt; would be “equal” to 1, and “equal” to 2, and I’d facetiously demand &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1+%3D+2&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;1 = 2&quot; title=&quot;1 = 2&quot; class=&quot;latex&quot;/&gt;. Aha! Where is your Gauss now?! But seriously, this bit of notation shows that mathematics has both expressions with scope and variables that change their value over time. And the &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Csum&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;\sum&quot; title=&quot;\sum&quot; class=&quot;latex&quot;/&gt; use for notation was established by &lt;em&gt;Euler&lt;/em&gt;, long before algorithms jumped from logic to computers to billionaire Senate testimonies.&lt;/p&gt;
&lt;p&gt;Likewise, set-builder notation often uses the same kind of equals-as-iterate.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+A+%3D+%5C%7B+n%5E2+%3A+n+%3D+1%2C+2%2C+%5Cdots%2C+100+%5C%7D&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;\displaystyle A = \{ n^2 : n = 1, 2, \dots, 100 \}&quot; title=&quot;\displaystyle A = \{ n^2 : n = 1, 2, \dots, 100 \}&quot; class=&quot;latex&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In Python, or interpreting the expression literally, the value of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;n&quot; title=&quot;n&quot; class=&quot;latex&quot;/&gt; would be a tuple, producing a type error. (&lt;a href=&quot;https://jsconsole.com/?console.log%28%5B1%2C2%2C3%2C4%2C5%2C6%2C7%5D%20%5E%202%29%3B&quot;&gt;In Javascript, it produces 2&lt;/a&gt;. How could it be Javascript if it didn’t?)&lt;/p&gt;
&lt;p&gt;Next up we have the sloppiness of functions. Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%28x%29+%3D+2x+%2B+3&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;f(x) = 2x + 3&quot; title=&quot;f(x) = 2x + 3&quot; class=&quot;latex&quot;/&gt;. This is a function, and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;x&quot; title=&quot;x&quot; class=&quot;latex&quot;/&gt; is a variable. Rather than precisely say, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%282%29+%3D+7&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;f(2) = 7&quot; title=&quot;f(2) = 7&quot; class=&quot;latex&quot;/&gt;, we say that for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%3D2%2C+f%28x%29+%3D+7&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;x=2, f(x) = 7&quot; title=&quot;x=2, f(x) = 7&quot; class=&quot;latex&quot;/&gt;. So &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;x&quot; title=&quot;x&quot; class=&quot;latex&quot;/&gt; is simultaneously an indeterminate input and a concrete value. The same scoping for programming functions bypass the naive expectation that equality means “now and forever.” Couple that with the question-as-equation &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%28x%29+%3D+7&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;f(x) = 7&quot; title=&quot;f(x) = 7&quot; class=&quot;latex&quot;/&gt;, in which one asks what values of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;x&quot; title=&quot;x&quot; class=&quot;latex&quot;/&gt; produce this result, if any, and you begin to see how deep the rabbit hole goes. To understand what someone means when they say &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%28x%29+%3D+7&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;f(x) = 7&quot; title=&quot;f(x) = 7&quot; class=&quot;latex&quot;/&gt;, you need to know the context.&lt;/p&gt;
&lt;p&gt;But this is just the tip of the iceberg, and we’re drilling deep. The point is that = carries with it all &lt;em&gt;kinds&lt;/em&gt; of baggage, not just the scope of a particular binding of a variable.&lt;/p&gt;
&lt;p&gt;Continuing with functions, we have rational expressions like &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%28x%29+%3D+%5Cfrac%7B%28x%2B1%29x%7D%7Bx%7D&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;f(x) = \frac{(x+1)x}{x}&quot; title=&quot;f(x) = \frac{(x+1)x}{x}&quot; class=&quot;latex&quot;/&gt;. One often starts by saying “let’s let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;f&quot; title=&quot;f&quot; class=&quot;latex&quot;/&gt; be this function.” Then we want to analyze it, and in-so-doing we simplify to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%28x%29+%3D+x%2B1&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;f(x) = x+1&quot; title=&quot;f(x) = x+1&quot; class=&quot;latex&quot;/&gt;. To keep ourselves safe, we modify the domain of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;f&quot; title=&quot;f&quot; class=&quot;latex&quot;/&gt; to exclude &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%3D0&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;x=0&quot; title=&quot;x=0&quot; class=&quot;latex&quot;/&gt; post-hoc. But the flow of the argument is the same: we defer the exclusion of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%3D0&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;x=0&quot; title=&quot;x=0&quot; class=&quot;latex&quot;/&gt; until we need it, meaning the equality at the beginning is a different equality than at the end. In effect, we have an infinitude of different kinds of equality for functions, one for each choice of what to exclude from the domain. And a mathematical proof might switch between them as needed.&lt;/p&gt;
&lt;p&gt;“Why not just define a new function &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;g&quot; title=&quot;g&quot; class=&quot;latex&quot;/&gt; with a different domain,” you ask? You can, but mathematicians don’t. And if you’re arguing in favor or against a particular notation, and using “mathematics” as your impenetrable shield, you’ve got to remember the famous definition of Reuben Hersh, that “mathematics is what mathematicians do.” For us, that means you can’t claim superiority based on an idea of mathematics that disagrees with mathematical practice. And mathematics, dear reader, is messier than programmers and philosophers would have one believe.&lt;/p&gt;
&lt;p&gt;And now we turn to the Great Equality Contextualizer, the &lt;strong&gt;isomorphism. &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You see, all over mathematics there are objects which are not equal, but we want them to be. When you study symmetry, say, you learn that there is an algebraic structure to symmetry called a &lt;a href=&quot;https://jeremykun.com/2012/12/08/groups-a-primer/&quot;&gt;group&lt;/a&gt;. And the same structure—that is, the same true underlying relationships between the symmetries of a thing—can show up in many different guises. As a set, as a picture, as a class of functions, in polynomials and compass constructions and wallpapers, oh my! In each of these things we want to say that two symmetry structures are the same even if they look different. We want to overload equality when four-fold rotational symmetry applies to my table as well as a four-pointed star.&lt;/p&gt;
&lt;p&gt;The tool we use for that is called an isomorphism. In brief terms, it’s a function between two objects, with an inverse, that preserves the structure you care about both ways. In fact, there &lt;em&gt;is&lt;/em&gt; a special symbol for when two things are isomorphic, and it’s often &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ccong&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;\cong&quot; title=&quot;\cong&quot; class=&quot;latex&quot;/&gt;. But &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ccong&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;\cong&quot; title=&quot;\cong&quot; class=&quot;latex&quot;/&gt; is annoying to write, and it really just means “is the same as” the same way equality does. So mathematicians often drop the squiggle and use =.&lt;/p&gt;
&lt;p&gt;Plus, there are a million kinds of isomorphism. Groups, graphs, vector spaces, rings, fields, modules, algebras, rational functions, varieties, Lie groups, *breathe* topological spaces, manifolds of all stripes, sheaves, schemes, lattices, knots, the list just keeps going on and on and on! No way are we making up a symbol for each one of these and the hundreds of variations we might come up with. And moreover, when you say two things are isomorphic, that gives you absolutely no indication of &lt;em&gt;how&lt;/em&gt; they are isomorphic. It fact, it can be extremely tedious to compute isomorphisms between things, and it’s even known to be &lt;a href=&quot;https://en.wikipedia.org/wiki/Group_isomorphism_problem&quot;&gt;uncomputable&lt;/a&gt; in extreme cases! What good is equality if you can’t even check it?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But wait!&lt;/em&gt; You might ask, having read this blog for a while and knowing better than to not question a claim. &lt;em&gt;All of these uses of equality are still equivalence relations, and x = x + 1 is not an equivalence relation!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Well, you got me there. Mathematicians love to keep equality as an equivalence relation. When mathematicians need to define an algorithm where the value of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;x&quot; title=&quot;x&quot; class=&quot;latex&quot;/&gt; changes in a nontrivial way, it’s usually done by setting &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x_0&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;x_0&quot; title=&quot;x_0&quot; class=&quot;latex&quot;/&gt; equal to some starting value and letting &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x_%7Bn%7D&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;x_{n}&quot; title=&quot;x_{n}&quot; class=&quot;latex&quot;/&gt; be defined as some function of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x_%7Bn-1%7D&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;x_{n-1}&quot; title=&quot;x_{n-1}&quot; class=&quot;latex&quot;/&gt; and smaller terms, like the good ol’ Fibonacci sequence &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x_0+%3D+x_1+%3D+1&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;x_0 = x_1 = 1&quot; title=&quot;x_0 = x_1 = 1&quot; class=&quot;latex&quot;/&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x_n+%3D+x_%7Bn-1%7D+%2B+x_%7Bn-2%7D&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;x_n = x_{n-1} + x_{n-2}&quot; title=&quot;x_n = x_{n-1} + x_{n-2}&quot; class=&quot;latex&quot;/&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If mutation is so great, why do mathematicians use recursion so much? Huh? Huh?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Well, I’ve got two counterpoints. The first is that the goal here is to &lt;em&gt;reason&lt;/em&gt; about the sequence, not to describe it in a way that can be efficiently carried out by a computer. When you say x = x + 1, you’re telling the computer that the old value of x need not linger, and you can do away with the space occupied by the previous value of x. To achieve the same result with recursion requires a whole other can of worms: memoization and tail recursive style and compiler optimizations to shed stack frames. It’s a lot more work to understand all that (to get to an equivalent solution) than it is to understand mutation! Simply stated, the goals of mathematics and programming are quite differently aligned. The former is about understanding a thing, and the latter is more often about describing a concrete process under threat of limited resources.&lt;/p&gt;
&lt;p&gt;My second point is that mathematical notation is so flexible and adaptable that it doesn’t &lt;em&gt;need&lt;/em&gt; mutation the same way programming languages need it. In mathematics we have no stack overflows, no register limits or page swaps, no limitations on variable names or memory allocation, our brains do the continuation passing for us, and we can rewrite history ad hoc and pile on abstractions as needed to achieve a particular goal. Even when you’re describing an algorithm in mathematics, you get the benefits of mathematical abstractions. A mathematician could easily introduce = as mutation in their work. Nothing stops them from doing so! It’s just that they rarely have a genuine need for it.&lt;/p&gt;
&lt;p&gt;But of course, none of this changes that languages could use := or “let” instead of = for assignment. If a strict adherence to asymmetry for asymmetric operations helps you sleep at night, so be it. My point is that the case when = means assignment is an extremely simple bit of context. Much simpler than the albatrossian mental burden required to understand what mathematicians really mean when they write &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A+%3D+B&amp;amp;bg=ffffff&amp;amp;fg=36312d&amp;amp;s=0&quot; alt=&quot;A = B&quot; title=&quot;A = B&quot; class=&quot;latex&quot;/&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Postscript: I hope everyone reading this realizes I’m embellishing a bit for the sake of entertainment. If you want to fight me, tell me the best tree isn’t aspen. I dare you.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Postpostscript: embarrassingly, I completely forgot about Big-O notation and friends (despite mentioning it in the article!) as a case where = does not mean equality! f(n) = O(log n) is a statement about upper bounds, not equality! Thanks to &lt;a href=&quot;https://twitter.com/lreyzin&quot;&gt;@lreyzin&lt;/a&gt; for keeping me honest.&lt;/em&gt;&lt;/p&gt;
&lt;div id=&quot;jp-post-flair&quot; class=&quot;sharedaddy sd-like-enabled sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded&quot; id=&quot;like-post-wrapper-23934684-35861-5ad306e864d7c&quot; data-src=&quot;//widgets.wp.com/likes/index.html?ver=20180319#blog_id=23934684&amp;amp;post_id=35861&amp;amp;origin=jeremykun.wordpress.com&amp;amp;obj_id=23934684-35861-5ad306e864d7c&quot; data-name=&quot;like-post-frame-23934684-35861-5ad306e864d7c&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Like this:&lt;/h3&gt;
&lt;div class=&quot;likes-widget-placeholder post-likes-widget-placeholder&quot;&gt;&lt;span class=&quot;button&quot;&gt;&lt;span&gt;Like&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;loading&quot;&gt;Loading...&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Fri, 13 Apr 2018 19:55:55 +0000</pubDate>
<dc:creator>hds</dc:creator>
<og:type>article</og:type>
<og:title>For mathematicians, = does not mean equality</og:title>
<og:url>https://jeremykun.com/2018/04/13/for-mathematicians-does-not-mean-equality/</og:url>
<og:description>Every now and then I hear some ridiculous things about the equals symbol. Some large subset of programmers—perhaps related to functional programmers, perhaps not—seem to think that = should only an…</og:description>
<og:image>https://secure.gravatar.com/blavatar/ffc08531463d8605aef9e0b51a9ac71f?s=200&amp;ts=1523779304</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://jeremykun.com/2018/04/13/for-mathematicians-does-not-mean-equality/</dc:identifier>
</item>
</channel>
</rss>