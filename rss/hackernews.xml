<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Sandboxed Mac apps can record screen any time without you knowing</title>
<link>https://krausefx.com/blog/mac-privacy-sandboxed-mac-apps-can-take-screenshots</link>
<guid isPermaLink="true" >https://krausefx.com/blog/mac-privacy-sandboxed-mac-apps-can-take-screenshots</guid>
<description>&lt;h2 id=&quot;facts&quot;&gt;Facts&lt;/h2&gt;
&lt;p&gt;Any Mac app, sandboxed or not sandboxed can:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Take screenshots of your Mac silently without you knowning&lt;/li&gt;
&lt;li&gt;Access every pixel, even if the Mac app is in the background&lt;/li&gt;
&lt;li&gt;Use basic &lt;a href=&quot;https://en.wikipedia.org/wiki/Optical_character_recognition&quot;&gt;OCR software&lt;/a&gt; to read the text on the screen&lt;/li&gt;
&lt;li&gt;Access all connected monitors&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;whats-the-worst-that-could-happen&quot;&gt;What’s the worst that could happen?&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Read password and keys from password managers&lt;/li&gt;
&lt;li&gt;Detect what web services you use (e.g. email provider)&lt;/li&gt;
&lt;li&gt;Read all emails and messages you open on your Mac&lt;/li&gt;
&lt;li&gt;When a developer is targeted, this allows the attacker to potentially access sensitive source code, API keys or similar data&lt;/li&gt;
&lt;li&gt;Learn personal information about the user, like their bank details, salary, address, etc.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://krausefx.com/assets/posts/mac-take-screenshots.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://krausefx.com/assets/posts/mac-take-screenshots.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;This project is a proof of concept and should not be used in production. The goal is to highlight a privacy loophole that can be abused by Mac apps.&lt;/p&gt;
&lt;h2 id=&quot;how-can-i-protect-myself-as-a-user&quot;&gt;How can I protect myself as a user?&lt;/h2&gt;
&lt;p&gt;To my knowledge there is no way to protect yourself as of now.&lt;/p&gt;
&lt;h2 id=&quot;proposal&quot;&gt;Proposal&lt;/h2&gt;
&lt;p&gt;There are lots of valid use-cases for Mac apps to record the screen, e.g. &lt;a href=&quot;https://support.1password.com/one-time-passwords/&quot;&gt;1Password 2fA support&lt;/a&gt; or screen recording software, however there must be some kind of control.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The App Store review process could verify the Sandbox entitlements for accessing the screen&lt;/li&gt;
&lt;li&gt;Put the user in charge with a permission dialog&lt;/li&gt;
&lt;li&gt;Additionally the user should be notified whenever an app accesses the screen.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Of course, I also &lt;a href=&quot;https://openradar.appspot.com/radar?id=5610698700750848&quot;&gt;filed a radar&lt;/a&gt; (rdar://37423927) to notify Apple about this issue.&lt;/p&gt;
&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;A developer just needs to use &lt;code class=&quot;highlighter-rouge&quot;&gt;CGWindowListCreateImage&lt;/code&gt; to generate a capture of the complete screen within an instant:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;no&quot;&gt;CGImageRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenshot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CGWindowListCreateImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;CGRectInfinite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;kCGWindowListOptionOnScreenOnly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;kCGNullWindowID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;kCGWindowImageDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;NSBitmapImageRep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmapRep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NSBitmapImageRep&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initWithCGImage&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:screenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In my experiments, I piped the generated image over to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Optical_character_recognition&quot;&gt;OCR library&lt;/a&gt; and was able to get all text that was rendered on the user’s machine.&lt;/p&gt;
&lt;p class=&quot;side-projects-note&quot;&gt;&lt;small&gt;Unless otherwise mentioned in the post, those projects are side projects which I work on on weekends and evenings, and are not affiliated with my work or employer.&lt;/small&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 10 Feb 2018 23:39:16 +0000</pubDate>
<dc:creator>Sujan</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://krausefx.com/blog/mac-privacy-sandboxed-mac-apps-can-take-screenshots</dc:identifier>
</item>
<item>
<title>How did Google Talk change from a dream to a nightmare?</title>
<link>https://www.tnhh.net/posts/google-talk.html</link>
<guid isPermaLink="true" >https://www.tnhh.net/posts/google-talk.html</guid>
<description>&lt;p&gt;Years ago, I used Google Talk with almost everyone I talked to. Nowadays, I talk with almost no one on Hangouts. Google Talk has changed from “so good I can recommend to everyone” to a nightmare called Hangouts. So how did we get to this point?&lt;/p&gt;
&lt;p&gt;After Gmail, Google came up with Google Talk which is a hack on top of the popular free mail service. To “talk” to someone, you already had their Gmail (or jabber) address, so you thought you’d send a buddy request to said address thinking they might just happen to use Google Talk. Indeed they do, and they approve your request: they appear on your buddy list. Now you know for sure when they’re “online” (2000s’ vocabulary, I know), and you know when you send them the message, they’ll see your message. If they are offline, it will deliver the message whenever they get online. They can tell you that they’re busy at any moment, and so the client tells you exactly so and encourages you not to disturb. They have a web version or &lt;a href=&quot;https://google-talk.en.softonic.com/#app-softonic-review&quot;&gt;a lightweight Windows client&lt;/a&gt; that is probably the cleanest Windows chat client ever written. If you use Linux/Mac, fine, just use GAIM/Purple/iChat/whatever. If you use Android, you have Google Talk, which is also a nice, lightweight, unintrusive client. If you wish to use any other client on any other platform, it still works, too. Regardless of what client you use, it just works the same way. You get the messages regardless of what client you use or how many computers you signed on. You know exactly who is on your buddy list and who will see your messages and who will be able to message you. If someone has a nickname, and you don’t like it, you can rename the person so you recognize them. Or if the person used their real name, and you only know them by their nickname, you can rename them too. If someone annoys you, you can revoke the authorization, and they bother you no more. If you both happen to use Google’s clients, you can send/receive files, have voice and video chats, which is nice. But for general messaging, Google Talk works with literally everything. If a client doesn’t support enhanced functions, the voice/video call buttons won’t get lit up. But when it works, I have had talks for 5 hours on a spotty connection. It barely consumed any bandwidth. Life was great. Nothing fucked with you.&lt;/p&gt;
&lt;p&gt;Then, Google decided they need to rebrand Google Talk to Hangouts. So then they tell you that you need a Google Plus account, which they would nudge and trick you to create one. After a year, you finally get tricked to the Google+ meme and hope your friends did, too. So you have to use the Google Hangouts on a separate tab in the browser, or it gets juxtaposed to your Gmail, which will slow your lastest i5 laptop down and makes your fan whirr like crazy just to have one conversation. It doesn’t provide a native desktop app, the desktop version no longer works, and the phone version works like shit. You can’t use a Jabber client on it, or maybe you can, but there is no official documentation. At least they don’t want you to use any client anymore.&lt;/p&gt;
&lt;p&gt;Anyway, the best feature of Hangouts is initiating a conversation with someone you haven’t talked to before. Sometimes searching for their email address will work, but in general, you’ll have to be already talking to them on the phone or Skype or whatever. Then you click on “New Conversation” on the Hangouts window, and then they will have to tell you how to “search” for their name. For which 50 names will likely show up on the search result, then they’ll have to describe to you what their profile picture looks like over the phone so you pick the right one. If they have a foreign name with weird characters then you are fucked because you don’t know how to type it. If they have a common name you’re fucked because you will have 5000 names show up. Or for some reason their name doesn’t come up in the search result you’re fucked, too. If any of those happens, you resort to asking them to initiate the conversation with you. Anyhow, given you managed to get past that and now have a messaging window with them, you have to type something like “hi.” You hope they will see it, and ask if they did. If they didn’t see it, then you say this shit doesn’t work and you two consider this attempt a dark, sad event in your relationship.&lt;/p&gt;
&lt;p&gt;If you’re lucky and all of that works, they will have to click “accept” and now you can send text messages to each other (hurray!). With Hangouts, you can’t go off the record by default, there is no such option to not log your message (unless you use Gsuite and you’re the admin like me). If you go off the record, it will tell you that it might not deliver your offline messages – don’t trust Hangouts to deliver messages properly. If you want to talk, there is no button to have just a voice call on the web, but there is a button on the phone version. On the phone, you don’t know that button will call their phone or will call their Hangouts client, so you’re afraid to tap on it. Anyway, you give up on the idea of just having a voice call and decide you’d just have a video call. In which 50% of your attempts will fail and 50% will work. Regardless of the chance that it works on your computer, it has a 50% chance of working on the other side. If you use Firefox, there is a 100% chance it won’t work. Given you and your friends, luckily, have all the right software installed after 10 minutes, there is another 50% chance it will actually notify your friend audibly when you call. Or it might have decided not to disturb them for some reason, and then you have to call them on the phone to let them know that you’re calling them on Hangouts.&lt;/p&gt;
&lt;p&gt;On the new Hangouts, you also can’t tell someone that you don’t want to be disturbed now. There is no longer an online/offline/busy state, everyone is assumed to be online all the times, and everyone is always free all the times. You receive your messages at 1 PM, and sometimes at 4 AM. You never answer enough messages, so you just get tired of messages and forget about them, although there are times you really just are busy and forgot to reply to that important message.&lt;/p&gt;
&lt;p&gt;You no longer have a buddy list, instead, you have some sort of list - some shit you don’t understand. You can’t control what gets shown on it. You can’t delete or revoke anyone’s permission to contact you if they annoy you (although you can block them forever). Sometimes a person shows up twice in your list: Sometimes it is because they actually have two different email addresses (one of which they don’t use anymore, but you can’t tell what is the inactive one, and you can’t remove it anyway), sometimes it is because they have Google+, sometimes you have no fucking clue why. Ok, maybe buddy list is too hard, you give up, you click on the recent conversations list, which is mixed up with voice calls and messages. But your recent conversations aren’t there because you have them off the record. You don’t know how the fuck to reliably have a conversation with someone. On the new Hangouts, you really have no idea when, where, and whom it delivers your messages to. If it does, you have no idea how.&lt;/p&gt;
&lt;p&gt;Lately, you meet a couple of lost Linux buddies and they complain to you that you didn’t return their messages. You say you never received the messages, and shrug. You never have an idea why didn’t a message go through, maybe because they used the client that is not officially supported? But your buddies silently think that you’re a lying son of a bitch. What they don’t know is that you just want to be a Google fanboy.&lt;/p&gt;
&lt;hr/&gt;&lt;footer role=&quot;contentinfo&quot; readability=&quot;3&quot;&gt;
&lt;p class=&quot;byline&quot;&gt;&lt;strong&gt;How did Google Talk change from a dream to a nightmare?&lt;/strong&gt; was published on &lt;time datetime=&quot;2017-10-28T00:00:00+00:00&quot;&gt;October 28, 2017&lt;/time&gt;.&lt;/p&gt;
&lt;/footer&gt;</description>
<pubDate>Sat, 10 Feb 2018 22:05:46 +0000</pubDate>
<dc:creator>calcifer</dc:creator>
<og:type>article</og:type>
<og:title>How did Google Talk change from a dream to a nightmare?</og:title>
<og:description>Years ago, I used Google Talk with almost everyone I talked to. Nowadays, I talk with almost no one on Hangouts. Google Talk has changed from “so good I can recommend to everyone” to a nightmare called Hangouts. So how did we get to this point?</og:description>
<og:url>https://www.tnhh.net/posts/google-talk.html</og:url>
<og:image>https://www.tnhh.net/images/default-thumb.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.tnhh.net/posts/google-talk.html</dc:identifier>
</item>
<item>
<title>An opinionated guide to Haskell</title>
<link>https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/</link>
<guid isPermaLink="true" >https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/</guid>
<description>&lt;header&gt;

&lt;/header&gt;&lt;p&gt;For me, this month marks the end of an era in my life: as of February 2018, I am no longer employed writing Haskell. It’s been a fascinating two years, and while I am excitedly looking forward to what I’ll be doing next, it’s likely I will continue to write Haskell in my spare time. I’ll probably even write it again professionally in the future.&lt;/p&gt;&lt;p&gt;In the meantime, in the interest of both sharing with others the small amount of wisdom I’ve gained and preserving it for my future self, I’ve decided to write a long, rather dry overview of a few select parts of the Haskell workflow I developed and the ecosystem I settled into. This guide is, as the title notes, &lt;em&gt;opinionated&lt;/em&gt;—it is what I used in my day-to-day work, nothing more—and I don’t claim that anything here is the only way to write Haskell, nor even the best way. It is merely what I found helpful and productive. Take from it as much or as little as you’d like.&lt;/p&gt;

&lt;p&gt;When it comes to building Haskell, you have options. And frankly, most of them are pretty good. There was a time when &lt;code&gt;cabal-install&lt;/code&gt; had a (warranted) reputation for being nearly impossible to use and regularly creating dependency hell, but I don’t think that’s the case anymore (though you &lt;em&gt;do&lt;/em&gt; need to be a little careful about how you use it). Sandboxed builds work alright, and &lt;code&gt;cabal new-build&lt;/code&gt; and the other &lt;code&gt;cabal new-*&lt;/code&gt; commands are even better. That said, the UX of &lt;code&gt;cabal-install&lt;/code&gt; is still less-than-stellar, and it has sharp edges, especially for someone coming from an ecosystem without a heavyweight compilation process like JavaScript, Ruby, or Python.&lt;/p&gt;
&lt;p&gt;Nix is an alternative way to manage Haskell dependencies, and it seems pretty cool. It has a reputation for being large and complicated, and that reputation does not seem especially unfair, but you get lots of benefits if you’re willing to pay the cost. Unfortunately, I have never used it (though I’ve read a lot about it), so I can’t comment much on it here. Perhaps I’ll try to go all-in with Nix when I purchase my next computer, but for now, my workflow works well enough that I don’t feel compelled to switch.&lt;/p&gt;
&lt;p&gt;Personally, I use &lt;code&gt;stack&lt;/code&gt; as my Haskell build tool. It’s easy to use, it works out of the box, and while it doesn’t enjoy the same amount of caching as &lt;code&gt;cabal new-build&lt;/code&gt; or Nix, it caches most packages, and it also makes things like git-hosted sources incredibly easy, which (as far as I can tell) can’t be done with &lt;code&gt;cabal-install&lt;/code&gt; alone.&lt;/p&gt;
&lt;p&gt;This section is going to be a guide on how &lt;em&gt;I&lt;/em&gt; use &lt;code&gt;stack&lt;/code&gt;. If you use &lt;code&gt;cabal-install&lt;/code&gt; with or without Nix, great! Those tools seem good, too. This is not an endorsement of &lt;code&gt;stack&lt;/code&gt; over the other build tools, just a description of how I use it, the issues I ran into, and my solutions to them.&lt;/p&gt;
&lt;h2 id=&quot;understanding-stacks-model-and-avoiding-its-biggest-gotcha&quot;&gt;Understanding &lt;code&gt;stack&lt;/code&gt;’s model and avoiding its biggest gotcha&lt;/h2&gt;
&lt;p&gt;Before using &lt;code&gt;stack&lt;/code&gt;, there are a few things every programmer should know:&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; is not a package manager, it is a build tool. It does not manage a set of “installed” packages; it simply builds targets and their dependencies.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;The command to build a target is &lt;code&gt;stack build &amp;lt;target&amp;gt;&lt;/code&gt;. Just using &lt;code&gt;stack build&lt;/code&gt; on its own will build the current project’s targets.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;You almost certainly do not want to use &lt;code&gt;stack install&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This is the biggest point of confusion I see among new users of &lt;code&gt;stack&lt;/code&gt;. After all, when you want to install a package with &lt;code&gt;npm&lt;/code&gt;, you type &lt;code&gt;npm install &amp;lt;package&amp;gt;&lt;/code&gt;. So a new Haskeller decides to install &lt;code&gt;lens&lt;/code&gt;, types &lt;code&gt;stack install lens&lt;/code&gt;, and then later tries &lt;code&gt;stack uninstall lens&lt;/code&gt;, only to discover that no such command exists. What happened?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stack install&lt;/code&gt; is not like &lt;code&gt;npm install&lt;/code&gt;. &lt;code&gt;stack install&lt;/code&gt; is like &lt;code&gt;make install&lt;/code&gt;. It is nothing more than an alias for &lt;code&gt;stack build --copy-bins&lt;/code&gt;, and &lt;em&gt;all&lt;/em&gt; it does is build the target and copy all of its executables into some relatively global location like &lt;code&gt;~/.local/bin&lt;/code&gt;. This is usually not what you want.&lt;/p&gt;
&lt;p&gt;This design decision is not unique to &lt;code&gt;stack&lt;/code&gt;; &lt;code&gt;cabal-install&lt;/code&gt; suffers from it as well. One can argue that it isn’t unintuitive because it really is just following what &lt;code&gt;make install&lt;/code&gt; conventionally does, and the fact that it happens to conflict with things like &lt;code&gt;npm install&lt;/code&gt; or even &lt;code&gt;apt-get install&lt;/code&gt; is just a naming clash. I think that argument is a poor one, however, and I think the decision to even include a &lt;code&gt;stack install&lt;/code&gt; command was a bad idea.&lt;/p&gt;
&lt;p&gt;So, remember: don’t use &lt;code&gt;stack install&lt;/code&gt;! &lt;code&gt;stack&lt;/code&gt; works best when everything lives inside the current project’s &lt;em&gt;local&lt;/em&gt; sandbox, and &lt;code&gt;stack install&lt;/code&gt; copies executables into a &lt;em&gt;global&lt;/em&gt; location by design. While it might sometimes appear to work, it’s almost always wrong. The &lt;em&gt;only&lt;/em&gt; situation in which &lt;code&gt;stack install&lt;/code&gt; is the right answer is when you want to install an executable for a use unrelated to Haskell development (that is, something like &lt;code&gt;pandoc&lt;/code&gt;) that just so happens to be provided by a Haskell package. &lt;strong&gt;This means no running &lt;code&gt;stack install ghc-mod&lt;/code&gt; or &lt;code&gt;stack install intero&lt;/code&gt; either, no matter what READMEs might tell you!&lt;/strong&gt; Don’t worry: I’ll cover the proper way to install those things later.&lt;/p&gt;
&lt;h2 id=&quot;actually-building-your-project-with-stack&quot;&gt;Actually building your project with &lt;code&gt;stack&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Okay, so now that you know to never use &lt;code&gt;stack install&lt;/code&gt;, what &lt;em&gt;do&lt;/em&gt; you use? Well, &lt;code&gt;stack build&lt;/code&gt; is probably all you need. Let’s cover some variations of &lt;code&gt;stack build&lt;/code&gt; that I use most frequently.&lt;/p&gt;
&lt;p&gt;Once you have a &lt;code&gt;stack&lt;/code&gt; project, you can build it by simply running &lt;code&gt;stack build&lt;/code&gt; within the project directory. However, for local development, this is usually unnecessarily slow because it runs the GHC optimizer. For faster development build times, pass the &lt;code&gt;--fast&lt;/code&gt; flag to disable optimizations:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ stack build --fast&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;By default, &lt;code&gt;stack&lt;/code&gt; builds dependencies with coarse-grained, package-level parallelism, but you can enable more fine-grained, module-level parallel builds by adding &lt;code&gt;--ghc-options=-j&lt;/code&gt;. Unfortunately, there are conflicting accounts on whether or not this actually makes things faster or slower in practice, and I haven’t extensively tested to see whether or not this is the case, so I mostly leave it off.&lt;/p&gt;
&lt;p&gt;Usually, you also want to build and run the tests along with your code, which you can enable with the &lt;code&gt;--test&lt;/code&gt; flag. Additionally, &lt;code&gt;stack test&lt;/code&gt; is an alias for &lt;code&gt;stack build --test&lt;/code&gt;, so these two commands are equivalent:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ stack build --fast --test
$ stack test --fast&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Also, it is useful to build documentation as well as code! You can do this by passing the &lt;code&gt;--haddock&lt;/code&gt; flag, but unfortunately, I find Haddock sometimes takes an unreasonably long time to run. Therefore, since I usually only care about running Haddock on my dependencies, I usually pass the &lt;code&gt;--haddock-deps&lt;/code&gt; flag instead, which prevents having to re-run Haddock every time you build:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ stack test --fast --haddock-deps&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Finally, I usually want to build and test my project in the background whenever my code changes. Fortunately, this can be done easily by using the &lt;code&gt;--file-watch&lt;/code&gt; flag, making it easy to incrementally change project code and immediately see results:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ stack test --fast --haddock-deps --file-watch&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is the command I usually use to develop my Haskell projects.&lt;/p&gt;
&lt;h2 id=&quot;accessing-local-documentation&quot;&gt;Accessing local documentation&lt;/h2&gt;
&lt;p&gt;While Haskell does not always excel on the documentation front, a small amount of documentation is almost always better than no documentation at all, and I find my dependencies’ documentation to be an invaluable resource while developing. I find many people just look at docs on Hackage or use the hosted instance of Hoogle, but this sometimes leads people astray: they might end up looking at the wrong version of the documentation! Fortunately, there’s an easy solution to this problem, which is to browse the documentation &lt;code&gt;stack&lt;/code&gt; installs locally, which is guaranteed to match the version you are using in your current project.&lt;/p&gt;
&lt;p&gt;The easiest way to open local documentation for a particular package is to use the &lt;code&gt;stack haddock --open&lt;/code&gt; command. For example, to open the documentation for &lt;code&gt;lens&lt;/code&gt;, you could use the following command:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ stack haddock --open lens&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This will open the local documentation in your web browser, and you can browse it at your leisure. If you have already built the documentation using the &lt;code&gt;--haddock-deps&lt;/code&gt; option I recommended in the previous section, this command should complete almost instantly, but if you haven’t built the documentation yet, you’ll have to wait as &lt;code&gt;stack&lt;/code&gt; builds it for you on-demand.&lt;/p&gt;
&lt;p&gt;While this is a good start, it isn’t perfect. Ideally, I want to have &lt;em&gt;searchable&lt;/em&gt; documentation, and fortunately, this is possible to do by running Hoogle locally. This is easy enough with modern versions of &lt;code&gt;stack&lt;/code&gt;, which have built-in Hoogle integration, but it still requires a little bit of per-project setup, since you need to build the Hoogle search index with the following command:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ stack hoogle -- generate --local&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This will install Hoogle into the current project if it isn’t already installed, and it will index your dependencies’ documentation and generate a new Hoogle database. Once you’ve done that, you can start a web server that serves a local Hoogle search page with the following command:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ stack hoogle -- server --local --port=8080&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Navigate to &lt;code&gt;http://localhost:8080&lt;/code&gt; in your web browser, and you’ll have a fully-searchable index of all your Haskell packages’ documentation. Isn’t that neat?&lt;/p&gt;
&lt;p&gt;Unfortunately, you &lt;em&gt;will&lt;/em&gt; have to manually regenerate the Hoogle database when you install new packages and their documentation, which you can do by re-running &lt;code&gt;stack hoogle -- generate --local&lt;/code&gt;. Fortunately, regenerating the database doesn’t take very long, as long as you’ve been properly rebuilding the documentation with &lt;code&gt;--haddock-deps&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;configuring-your-project&quot;&gt;Configuring your project&lt;/h2&gt;
&lt;p&gt;Every project built with &lt;code&gt;stack&lt;/code&gt; is configured with two separate files:&lt;/p&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;The &lt;code&gt;stack.yaml&lt;/code&gt; file, which controls which packages are built and what versions to pin your dependencies to.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;project&amp;gt;.cabal&lt;/code&gt; file &lt;em&gt;or&lt;/em&gt; &lt;code&gt;package.yaml&lt;/code&gt; file, which specifies build targets, their dependencies, and which GHC options to apply, among other things.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The &lt;code&gt;.cabal&lt;/code&gt; file is, ultimately, what is used to build your project, but modern versions of &lt;code&gt;stack&lt;/code&gt; generate projects that use hpack, which uses an alternate configuration file, the &lt;code&gt;package.yaml&lt;/code&gt; file, to generate the &lt;code&gt;.cabal&lt;/code&gt; file. This can get a little bit confusing, since it means you have &lt;em&gt;three&lt;/em&gt; configuration files in your project, one of which is generated from the other one.&lt;/p&gt;
&lt;p&gt;I happen to use and like hpack, so I use a &lt;code&gt;package.yaml&lt;/code&gt; file and allow hpack to generate the &lt;code&gt;.cabal&lt;/code&gt; file. I have no real love for YAML, and in fact I think custom configuration formats are completely fine, but the primary advantage of hpack is the ability to specify things like GHC options and default language extensions for all targets at once, instead of needing to duplicate them per-target.&lt;/p&gt;
&lt;p&gt;You can think of the &lt;code&gt;.cabal&lt;/code&gt; or &lt;code&gt;package.yaml&lt;/code&gt; file as a specification for &lt;em&gt;how&lt;/em&gt; your project is built and &lt;em&gt;what packages&lt;/em&gt; it depends on, but the &lt;code&gt;stack.yaml&lt;/code&gt; file is a specification of precisely &lt;em&gt;which version&lt;/em&gt; of each package should be used and where it should be fetched from. Also, each &lt;code&gt;.cabal&lt;/code&gt; file corresponds to precisely &lt;em&gt;one&lt;/em&gt; Haskell package (though it may have any number of executable targets), but a &lt;code&gt;stack.yaml&lt;/code&gt; file can specify multiple different packages to build, useful for multi-project builds that share a common library. The details here can be a little confusing, more than I am likely going to be able to explain in this blog post, but for the most part, you can get away with the defaults unless you’re doing something fancy.&lt;/p&gt;
&lt;h2 id=&quot;setting-up-editor-integration&quot;&gt;Setting up editor integration&lt;/h2&gt;
&lt;p&gt;Currently, I use Atom to write Haskell. Atom is not a perfect editor by any means, and it leaves a lot to be desired, but it’s easy to set up, and the Haskell editor integration is decent.&lt;/p&gt;
&lt;p&gt;Atom’s editor integration is powered by &lt;code&gt;ghc-mod&lt;/code&gt;, a program that uses the GHC API to provide tools to inspect Haskell programs. Installing &lt;code&gt;ghc-mod&lt;/code&gt; must be done manually so that Atom’s &lt;code&gt;haskell-ghc-mod&lt;/code&gt; package can find it, and this is where a lot of people get tripped up. They run &lt;code&gt;stack install ghc-mod&lt;/code&gt;, it installs &lt;code&gt;ghc-mod&lt;/code&gt; into &lt;code&gt;~/.local/bin&lt;/code&gt;, they put that in their &lt;code&gt;PATH&lt;/code&gt;, and things work! …except when a new version of GHC is released a few months later, everything stops working.&lt;/p&gt;
&lt;p&gt;As mentioned above, &lt;strong&gt;&lt;code&gt;stack install&lt;/code&gt; is not what you want&lt;/strong&gt;. Tools like &lt;code&gt;ghc-mod&lt;/code&gt;, &lt;code&gt;hlint&lt;/code&gt;, &lt;code&gt;hoogle&lt;/code&gt;, &lt;code&gt;weeder&lt;/code&gt;, and &lt;code&gt;intero&lt;/code&gt; work best when installed as part of the sandbox, &lt;em&gt;not&lt;/em&gt; globally, since that ensures they will match the current GHC version your project is using. This can be done per-project using the ordinary &lt;code&gt;stack build&lt;/code&gt; command, so the easiest way to properly install &lt;code&gt;ghc-mod&lt;/code&gt; into a &lt;code&gt;stack&lt;/code&gt; project is with the following command:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ stack build ghc-mod&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Unfortunately, this means you will need to run that command inside every single &lt;code&gt;stack&lt;/code&gt; project individually in order to properly set it up so that &lt;code&gt;stack exec -- ghc-mod&lt;/code&gt; will find the correct executable. One way to circumvent this is by using a recently-added &lt;code&gt;stack&lt;/code&gt; flag designed for this explicit purpose, &lt;code&gt;--copy-compiler-tool&lt;/code&gt;. This is like &lt;code&gt;--copy-bins&lt;/code&gt;, but it copies the executables into a &lt;em&gt;compiler-specific location&lt;/em&gt;, so a tool built for GHC 8.0.2 will be stored separately from the same tool built for GHC 8.2.2. &lt;code&gt;stack exec&lt;/code&gt; arranges for the executables for the current compiler version to end up in the &lt;code&gt;PATH&lt;/code&gt;, so you only need to build and install your tools once per compiler version.&lt;/p&gt;
&lt;p&gt;Does this kind of suck? Yes, a little bit, but it sucks a whole lot less than all your editor integration breaking every time you switch to a project that uses a different version of GHC. I use the following command in a fresh sandbox when a Stackage LTS comes out for a new version of GHC:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ stack build --copy-compiler-tool ghc-mod hoogle weeder&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This way, I only have to build those tools once, and I don’t worry about rebuilding them again until a the next release of GHC. To verify that things are working properly, you should be able to create a fresh &lt;code&gt;stack&lt;/code&gt; project, run a command like this one, and get a similar result:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ stack exec -- which ghc-mod
/Users/alexis/.stack/compiler-tools/x86_64-osx/ghc-8.2.2/bin/ghc-mod&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Note that this path is scoped to my operating system and my compiler version, but nothing else—no LTS or anything like that.&lt;/p&gt;

&lt;p&gt;Haskell is a relatively strict language as programming languages go, but in my experience, it isn’t quite strict enough. Many things are not errors that probably ought to be, like orphan instances and inexhaustive pattern matches. Fortunately, GHC provides &lt;em&gt;warnings&lt;/em&gt; that catch these problems statically, which fill in the gaps. I recommend using the following flags on all projects to ensure everything is caught:&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html#ghc-flag--Wall&quot;&gt;&lt;code&gt;-Wall&lt;/code&gt;&lt;/a&gt; option turns on &lt;em&gt;most&lt;/em&gt; warnings, but (ironically) not all of them. The &lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html#ghc-flag--Weverything&quot;&gt;&lt;code&gt;-Weverything&lt;/code&gt;&lt;/a&gt; flag truly turns on &lt;em&gt;all&lt;/em&gt; warnings, but some of the warnings left disabled by &lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html#ghc-flag--Wall&quot;&gt;&lt;code&gt;-Wall&lt;/code&gt;&lt;/a&gt; really are quite silly, like warning when type signatures on polymorphic local bindings are omitted. Some of them, however, are legitimately useful, so I recommend turning them on explicitly.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html#ghc-flag--Wcompat&quot;&gt;&lt;code&gt;-Wcompat&lt;/code&gt;&lt;/a&gt; enables warnings that make your code more robust in the face of future backwards-incompatible changes. These warnings are trivial to fix and serve as free future-proofing, so I see no reason not to turn these warnings on.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html#ghc-flag--Wincomplete-record-updates&quot;&gt;&lt;code&gt;-Wincomplete-record-updates&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html#ghc-flag--Wincomplete-uni-patterns&quot;&gt;&lt;code&gt;-Wincomplete-uni-patterns&lt;/code&gt;&lt;/a&gt; are things I think ought to be enabled by &lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html#ghc-flag--Wall&quot;&gt;&lt;code&gt;-Wall&lt;/code&gt;&lt;/a&gt; because they both catch what are essentially partial pattern-matches (and therefore runtime errors waiting to happen). The fact that &lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html#ghc-flag--Wincomplete-uni-patterns&quot;&gt;&lt;code&gt;-Wincomplete-uni-patterns&lt;/code&gt;&lt;/a&gt; &lt;em&gt;isn’t&lt;/em&gt; enabled by &lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html#ghc-flag--Wall&quot;&gt;&lt;code&gt;-Wall&lt;/code&gt;&lt;/a&gt; is so surprising that it can lead to bugs being overlooked, since the extremely similar &lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html#ghc-flag--Wincomplete-patterns&quot;&gt;&lt;code&gt;-Wincomplete-patterns&lt;/code&gt;&lt;/a&gt; &lt;em&gt;is&lt;/em&gt; enabled by &lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html#ghc-flag--Wall&quot;&gt;&lt;code&gt;-Wall&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html#ghc-flag--Wredundant-constraints&quot;&gt;&lt;code&gt;-Wredundant-constraints&lt;/code&gt;&lt;/a&gt; is a useful warning that helps to eliminate unnecessary typeclass constraints on functions, which can sometimes occur if a constraint was previously necessary but ends up becoming redundant due to a change in the function’s behavior.&lt;/p&gt;
&lt;p&gt;I put all five of these flags in the &lt;code&gt;.cabal&lt;/code&gt; file (or &lt;code&gt;package.yaml&lt;/code&gt;), which enables them everywhere, but this alone is unlikely to enforce a warning-free codebase, since the build will still succeed even in the presence of warnings. Therefore, when building projects in CI, I pass the &lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html#ghc-flag--Werror&quot;&gt;&lt;code&gt;-Werror&lt;/code&gt;&lt;/a&gt; flag (using &lt;code&gt;--ghc-options=-Werror&lt;/code&gt; for &lt;code&gt;stack&lt;/code&gt;), which treats warnings as errors and halts the build if any warnings are found. This is useful, since it means warnings don’t halt the whole build while developing, making it possible to write some code that has warnings and still run the test suite, but it still enforces that pushed code be warning-free.&lt;/p&gt;

&lt;p&gt;Haskell is both a language and a spectrum of languages. It is both a standard and a specific implementation. Haskell 98 and Haskell 2010 are good, small languages, and there are a few different implementations, but when people talk about “Haskell”, unqualified, they’re almost always talking about GHC.&lt;/p&gt;
&lt;p&gt;GHC Haskell, in stark contrast to standard Haskell, is neither small nor particularly specific, since GHC ships with &lt;em&gt;dozens&lt;/em&gt; of knobs and switches that can be used to configure the language. In theory, this is a little terrifying. How could anyone ever hope to talk about Haskell and agree upon how to write it if there are so many &lt;em&gt;different&lt;/em&gt; Haskells, each a little bit distinct? Having a cohesive ecosystem would be completely hopeless.&lt;/p&gt;
&lt;p&gt;Fortunately, in practice, this is not nearly as bad as it seems. The majority of GHC extensions are simple switches: a feature is either on or it is off. Turning a feature on rarely affects code that does not use it, so most extensions can be turned on by default, and programmers may simply avoid the features they do not wish to use, just as any programmer in any programming language likely picks a subset of their language’s features to use on a daily basis. Writing Haskell is not different in this regard, only in the sense that it does not allow all features to be used by default; everything from minor syntactic tweaks to entirely new facets of the type system are opt-in.&lt;/p&gt;
&lt;p&gt;Frankly, I think the UX around this is terrible. I recognize the desire to implement a standard Haskell, and the old &lt;code&gt;-fglasgow-exts&lt;/code&gt; was not an especially elegant solution for people wishing to use nonstandard Haskell, but having to insert &lt;code&gt;LANGUAGE&lt;/code&gt; pragmas at the top of every module just to take advantage of the best features GHC has to offer is a burden, and it is unnecessarily intimidating. I think much of the Haskell community finds the use of &lt;code&gt;LANGUAGE&lt;/code&gt; pragmas preferable to enabling extensions globally using the &lt;code&gt;default-extensions&lt;/code&gt; list in the &lt;code&gt;.cabal&lt;/code&gt; file, but I cut across the grain on that issue &lt;em&gt;hard&lt;/em&gt;. The vast majority of language extensions I use are extensions I want enabled all the time; a list of them at the top of a module is just distracting noise, and it only serves to bury the extensions I really do want to enable on a module-by-module basis. It also makes it tricky to communicate with a team which extensions are acceptable (or even preferable) and which are discouraged.&lt;/p&gt;
&lt;p&gt;My &lt;strong&gt;&lt;em&gt;strong&lt;/em&gt;&lt;/strong&gt; recommendation if you decide to write GHC Haskell on a team is to agree as a group to a list of extensions the team is happy with enabling everywhere and putting those extensions in the &lt;code&gt;default-extensions&lt;/code&gt; list in the &lt;code&gt;.cabal&lt;/code&gt; file. This eliminates clutter, busywork, and the conceptual overhead of remembering which extensions are in favor, and which are discouraged. This is a net win, and it isn’t at all difficult to look in the &lt;code&gt;.cabal&lt;/code&gt; file when you want to know which extensions are in use.&lt;/p&gt;
&lt;p&gt;Now, with that small digression out of the way, the question becomes precisely which extensions should go into that &lt;code&gt;default-extensions&lt;/code&gt; list. I happen to like using most of the features GHC makes available, so I enable a whopping &lt;strong&gt;34&lt;/strong&gt; language extensions &lt;em&gt;by default&lt;/em&gt;. As of GHC 8.2, here is my list:&lt;/p&gt;
&lt;p&gt;This is a lot, and a few of them are likely to be more controversial than others. Since I do not imagine everyone will agree with everything in this list, I’ve broken it down into smaller chunks, arranged from what I think ought to be least controversial to most controversial, along with a little bit of justification why each extension is in each category. If you’re interested in coming up with your own list of extensions, the rest of this section is for you.&lt;/p&gt;
&lt;h2 id=&quot;trivial-lifting-of-standards-imposed-limitations&quot;&gt;Trivial lifting of standards-imposed limitations&lt;/h2&gt;
&lt;p&gt;A few extensions are tiny changes that lift limitations that really have no reason to exist, other than that they are mandated by the standard. I am not sure why these restrictions are in the standard to being with, other than perhaps a misguided attempt at making the language simpler. These extensions include the following:&lt;/p&gt;
&lt;p&gt;These extensions have no business &lt;em&gt;not&lt;/em&gt; being turned on everywhere. &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XFlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XFlexibleInstances&quot;&gt;&lt;code&gt;FlexibleInstances&lt;/code&gt;&lt;/a&gt; end up being turned on in almost any nontrivial Haskell module, since without them, the typeclass system is pointlessly and artificially limited.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XInstanceSigs&quot;&gt;&lt;code&gt;InstanceSigs&lt;/code&gt;&lt;/a&gt; is extremely useful, completely safe, and has zero downsides.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XMultiParamTypeClasses&quot;&gt;&lt;code&gt;MultiParamTypeClasses&lt;/code&gt;&lt;/a&gt; are almost impossible to avoid, given how many libraries use them, and they are a completely obvious generalization of single-parameter typeclasses. Much like &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XFlexibleContexts&quot;&gt;&lt;code&gt;FlexibleContexts&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XFlexibleInstances&quot;&gt;&lt;code&gt;FlexibleInstances&lt;/code&gt;&lt;/a&gt;, I see no real reason to ever leave these disabled.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XEmptyCase&quot;&gt;&lt;code&gt;EmptyCase&lt;/code&gt;&lt;/a&gt; is even stranger to me, since &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XEmptyDataDecls&quot;&gt;&lt;code&gt;EmptyDataDecls&lt;/code&gt;&lt;/a&gt; is in Haskell 2010, so it’s possible to define empty datatypes in standard Haskell but not exhaustively pattern-match on them! This is silly, and &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XEmptyCase&quot;&gt;&lt;code&gt;EmptyCase&lt;/code&gt;&lt;/a&gt; should be standard Haskell.&lt;/p&gt;
&lt;h2 id=&quot;syntactic-conveniences&quot;&gt;Syntactic conveniences&lt;/h2&gt;
&lt;p&gt;A few GHC extensions are little more than trivial, syntactic abbreviations. These things would be tiny macros in a Lisp, but they need to be extensions to the compiler in Haskell:&lt;/p&gt;
&lt;p&gt;All of these extensions are only triggered by explicit use of new syntax, so existing programs will never change behavior when these extensions are introduced.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XLambdaCase&quot;&gt;&lt;code&gt;LambdaCase&lt;/code&gt;&lt;/a&gt; only saves a few characters, but it eliminates the need to come up with a fresh, unique variable name that will only be used once, which is sometimes hard to do and leads to worse names overall. Sometimes, it really is better to leave something unnamed.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XMultiWayIf&quot;&gt;&lt;code&gt;MultiWayIf&lt;/code&gt;&lt;/a&gt; isn’t something I find I commonly need, but when I do, it’s nice to have. It’s far easier to read than nested &lt;code&gt;if...then...else&lt;/code&gt; chains, and it uses the existing guard syntax already used with function declarations and &lt;code&gt;case...of&lt;/code&gt;, so it’s easy to understand, even to those unfamiliar with the extension.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XNamedFieldPuns&quot;&gt;&lt;code&gt;NamedFieldPuns&lt;/code&gt;&lt;/a&gt; avoids headaches and clutter when using Haskell records without the &lt;a href=&quot;https://www.reddit.com/r/haskell/comments/6jaa5f/recordwildcards_and_binary_parsing/djd5ugj/&quot;&gt;accidental identifier capture issues&lt;/a&gt; of &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XRecordWildCards&quot;&gt;&lt;code&gt;RecordWildCards&lt;/code&gt;&lt;/a&gt;. It’s a nice, safe compromise that brings some of the benefits of &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XRecordWildCards&quot;&gt;&lt;code&gt;RecordWildCards&lt;/code&gt;&lt;/a&gt; without any downsides.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XTupleSections&quot;&gt;&lt;code&gt;TupleSections&lt;/code&gt;&lt;/a&gt; is a logical generalization of tuple syntax in the same vein as standard operator sections, and it’s quite useful when using applicative notation. I don’t see any reason to not enable it.&lt;/p&gt;
&lt;h2 id=&quot;extensions-to-the-deriving-mechanism&quot;&gt;Extensions to the deriving mechanism&lt;/h2&gt;
&lt;p&gt;GHC’s typeclass deriving mechanism is one of the things that makes Haskell so pleasant to write, and in fact I think Haskell would be nearly unpalatable to write without it. Boilerplate generation is a good thing, since it defines operations in terms of a single source of truth, and generated code is code you do not need to maintain. There is rarely any reason to write a typeclass instance by hand when the deriving mechanism will write it automatically.&lt;/p&gt;
&lt;p&gt;These extensions give GHC’s typeclass deriving mechanism more power without any cost. Therefore, I see no reason &lt;em&gt;not&lt;/em&gt; to enable them:&lt;/p&gt;
&lt;p&gt;The first five of these simply extend the list of typeclasses GHC knows how to derive, something that will only ever be triggered if the user explicitly requests GHC derive one of those classes. &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XGeneralizedNewtypeDeriving&quot;&gt;&lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt;&lt;/a&gt; is quite possibly one of the most important extensions in all of Haskell, since it dramatically improves &lt;code&gt;newtype&lt;/code&gt;s’ utility. Wrapper types can inherit instances they need without any boilerplate, and making increased type safety easier and more accessible is always a good thing in my book.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XDerivingStrategies&quot;&gt;&lt;code&gt;DerivingStrategies&lt;/code&gt;&lt;/a&gt; is new to GHC 8.2, but it finally presents the functionality of GHC’s &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XDeriveAnyClass&quot;&gt;&lt;code&gt;DeriveAnyClass&lt;/code&gt;&lt;/a&gt; extension in a useful way. &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XDeriveAnyClass&quot;&gt;&lt;code&gt;DeriveAnyClass&lt;/code&gt;&lt;/a&gt; is useful when used with certain libraries that use &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XDefaultSignatures&quot;&gt;&lt;code&gt;DefaultSignatures&lt;/code&gt;&lt;/a&gt; (discussed later) with &lt;code&gt;GHC.Generics&lt;/code&gt; to derive instances of classes without the deriving being baked into GHC. Unfortunately, enabling &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XDeriveAnyClass&quot;&gt;&lt;code&gt;DeriveAnyClass&lt;/code&gt;&lt;/a&gt; essentially disables the far more useful &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XGeneralizedNewtypeDeriving&quot;&gt;&lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt;&lt;/a&gt;, so I do &lt;em&gt;not&lt;/em&gt; recommend enabling &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XDeriveAnyClass&quot;&gt;&lt;code&gt;DeriveAnyClass&lt;/code&gt;&lt;/a&gt;. Fortunately, with &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XDerivingStrategies&quot;&gt;&lt;code&gt;DerivingStrategies&lt;/code&gt;&lt;/a&gt;, it’s possible to opt into the &lt;code&gt;anyclass&lt;/code&gt; deriving strategy on a case-by-case basis, getting some nice boilerplate reduction in the process.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XStandaloneDeriving&quot;&gt;&lt;code&gt;StandaloneDeriving&lt;/code&gt;&lt;/a&gt; is useful when GHC’s deriving algorithms aren’t &lt;em&gt;quite&lt;/em&gt; clever enough to deduce the instance context automatically, so it allows specifying it manually. This is only useful in a few small situations, but it’s nice to have, and there are no downsides to enabling it, so it ought to be turned on.&lt;/p&gt;
&lt;h2 id=&quot;lightweight-syntactic-adjustments&quot;&gt;Lightweight syntactic adjustments&lt;/h2&gt;
&lt;p&gt;A couple extensions tweak Haskell’s syntax in more substantial ways than things like &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XLambdaCase&quot;&gt;&lt;code&gt;LambdaCase&lt;/code&gt;&lt;/a&gt;, but not in a significant enough way for them to really be at all surprising:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XBangPatterns&quot;&gt;&lt;code&gt;BangPatterns&lt;/code&gt;&lt;/a&gt; mirror strictness annotations on datatypes, so they are unlikely to be confusing, and they provide a much more pleasant notation for annotating the strictness of bindings than explicit uses of &lt;code&gt;seq&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XKindSignatures&quot;&gt;&lt;code&gt;KindSignatures&lt;/code&gt;&lt;/a&gt; are also fairly self-explanatory: they’re just like type annotations, but for types instead of values. Writing kind signatures explicitly is usually unnecessary, but they can be helpful for clarity or for annotating phantom types when &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XPolyKinds&quot;&gt;&lt;code&gt;PolyKinds&lt;/code&gt;&lt;/a&gt; is not enabled. Enabling &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XKindSignatures&quot;&gt;&lt;code&gt;KindSignatures&lt;/code&gt;&lt;/a&gt; doesn’t have any adverse effects, so I see no reason not to enable it everywhere.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XTypeOperators&quot;&gt;&lt;code&gt;TypeOperators&lt;/code&gt;&lt;/a&gt; adjusts the syntax of types slightly, allowing operators to be used as type constructors and written infix, which is technically backwards-incompatible, but I’m a little suspicious of anyone using &lt;code&gt;(!@#$)&lt;/code&gt; as a type variable (especially since standard Haskell does not allow them to be written infix). This extension is useful with some libraries like &lt;code&gt;natural-transformations&lt;/code&gt; that provide infix type constructors, and it makes the type language more consistent with the value language.&lt;/p&gt;
&lt;h2 id=&quot;polymorphic-string-literals&quot;&gt;Polymorphic string literals&lt;/h2&gt;
&lt;p&gt;I’m putting this extension in a category all of its own, mostly because I don’t think any other Haskell extensions have quite the same set of tradeoffs:&lt;/p&gt;
&lt;p&gt;For me, &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XOverloadedStrings&quot;&gt;&lt;code&gt;OverloadedStrings&lt;/code&gt;&lt;/a&gt; is not optional. Haskell’s infamous “string problem” (discussed in more detail at the end of this blog post) means that &lt;code&gt;String&lt;/code&gt; is a linked list of characters, and all code that cares about performance actually uses &lt;code&gt;Text&lt;/code&gt;. Manually invoking &lt;code&gt;pack&lt;/code&gt; on every single string literal in a program is just noise, and &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XOverloadedStrings&quot;&gt;&lt;code&gt;OverloadedStrings&lt;/code&gt;&lt;/a&gt; solves that noise.&lt;/p&gt;
&lt;p&gt;That said, I actually find I don’t use the polymorphism of string literals very often, and I’d be alright with monomorphic literals if I could make them &lt;em&gt;all&lt;/em&gt; have type &lt;code&gt;Text&lt;/code&gt;. Unfortunately, there isn’t a way to do this, so &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XOverloadedStrings&quot;&gt;&lt;code&gt;OverloadedStrings&lt;/code&gt;&lt;/a&gt; is the next best thing, even if it sometimes causes some unnecessary ambiguities that require type annotations to resolve.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XOverloadedStrings&quot;&gt;&lt;code&gt;OverloadedStrings&lt;/code&gt;&lt;/a&gt; is an extension that I use so frequently, in so many modules (especially in my test suites) that I would rather keep it on everywhere so I don’t have to care about whether or not it’s enabled in the module I’m currently writing. On the other hand, it certainly isn’t my favorite language extension, either. I wouldn’t go as far as to call it a necessary evil, since I don’t think it’s truly “evil”, but it does seem to be necessary.&lt;/p&gt;
&lt;h2 id=&quot;simple-extensions-to-aid-type-annotation&quot;&gt;Simple extensions to aid type annotation&lt;/h2&gt;
&lt;p&gt;The following two extensions significantly round out Haskell’s language for referring to types, making it much easier to insert type annotations where necessary (for removing ambiguity or for debugging type errors):&lt;/p&gt;
&lt;p&gt;That the behavior of &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XScopedTypeVariables&quot;&gt;&lt;code&gt;ScopedTypeVariables&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;not&lt;/em&gt; the default is actually one of the most common gotchas for new Haskellers. Sadly, it can theoretically adjust the behavior of existing Haskell programs, so I cannot include it in the list of trivial changes, but I would argue such programs were probably confusing to begin with, and I have never seen a program in practice that was impacted by that problem. I think leaving &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XScopedTypeVariables&quot;&gt;&lt;code&gt;ScopedTypeVariables&lt;/code&gt;&lt;/a&gt; off is much, much more likely to be confusing than turning it on.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XTypeApplications&quot;&gt;&lt;code&gt;TypeApplications&lt;/code&gt;&lt;/a&gt; is largely unrelated, but I include it in this category because it’s quite useful and cooperates well with &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XScopedTypeVariables&quot;&gt;&lt;code&gt;ScopedTypeVariables&lt;/code&gt;&lt;/a&gt;. Use of &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XTypeApplications&quot;&gt;&lt;code&gt;TypeApplications&lt;/code&gt;&lt;/a&gt; makes instantiation much more lightweight than full-blown type annotations, and once again, it has no downsides if it is enabled and unused (since it is a syntactic addition). I recommend enabling it.&lt;/p&gt;
&lt;h2 id=&quot;simple-extensions-to-the-haskell-type-system&quot;&gt;Simple extensions to the Haskell type system&lt;/h2&gt;
&lt;p&gt;A few extensions tweak the Haskell type system in ways that I think are simple enough to be self-explanatory, even to people who might not have known they existed. These are as follows:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XConstraintKinds&quot;&gt;&lt;code&gt;ConstraintKinds&lt;/code&gt;&lt;/a&gt; is largely just used to define typeclass aliases, which is both useful and self-explanatory. Unifying the type and constraint language also has the effect of allowing type-level programming with constraints, which is sometimes useful, but far rarer in practice than the aforementioned use case.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XRankNTypes&quot;&gt;&lt;code&gt;RankNTypes&lt;/code&gt;&lt;/a&gt; are uncommon, looking at the average type in a Haskell program, but they’re certainly nice to have when you need them. The idea of pushing &lt;code&gt;forall&lt;/code&gt;s further into a type to adjust how variables are quantified is something that I find people find fairly intuitive, especially after seeing them used once or twice, and higher-rank types do crop up regularly, if infrequently.&lt;/p&gt;

&lt;p&gt;Three syntactic extensions to Haskell are a little bit more advanced than the ones I’ve already covered, and none of them are especially related:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XApplicativeDo&quot;&gt;&lt;code&gt;ApplicativeDo&lt;/code&gt;&lt;/a&gt; is, on the surface, simple. It changes &lt;code&gt;do&lt;/code&gt; notation to use &lt;code&gt;Applicative&lt;/code&gt; operations where possible, which allows using &lt;code&gt;do&lt;/code&gt; notation with applicative functors that are not monads, and it also makes operations potentially more performant when &lt;code&gt;(&amp;lt;*&amp;gt;)&lt;/code&gt; can be implemented more efficiently than &lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt;. In theory, it sounds like there are no downsides to enabling this everywhere. However, there are are a few drawbacks that lead me to put it so low on this list:&lt;/p&gt;
&lt;ol readability=&quot;23.958333333333&quot;&gt;&lt;li readability=&quot;10&quot;&gt;
&lt;p&gt;It considerably complicates the desugaring of &lt;code&gt;do&lt;/code&gt; blocks, to the point where the algorithm cannot even be easily syntactically documented. In fact, an additional compiler flag, &lt;code&gt;-foptimal-applicative-do&lt;/code&gt;, is a way to &lt;em&gt;opt into&lt;/em&gt; optimal solutions for &lt;code&gt;do&lt;/code&gt; block expansions, tweaking the desugaring algorithm to have an &lt;em&gt;O&lt;/em&gt;( &lt;em&gt;n&lt;/em&gt;&lt;sup&gt;3&lt;/sup&gt;) time complexity! This means that the default behavior is guided by a heuristic, and desugaring isn’t even especially predictable. This isn’t necessarily so bad, since it’s really only intended as an optimization when some &lt;code&gt;Monad&lt;/code&gt; operations are still necessary, but it does dramatically increase the complexity of one of Haskell’s core forms.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;22.667037861915&quot;&gt;
&lt;p&gt;The desugaring, despite being &lt;em&gt;O&lt;/em&gt;( &lt;em&gt;n&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt;) by default, isn’t even especially clever. It relies on a rather disgusting hack that recognizes &lt;code&gt;return e&lt;/code&gt;, &lt;code&gt;return $ e&lt;/code&gt;, &lt;code&gt;pure e&lt;/code&gt;, or &lt;code&gt;pure $ e&lt;/code&gt; expressions &lt;em&gt;syntactically&lt;/em&gt;, and it completely gives up if an expression with precisely that shape is not the final statement in a &lt;code&gt;do&lt;/code&gt; block. This is a bit awkward, since it effectively turns &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;pure&lt;/code&gt; into syntax when before they were merely functions, but that isn’t all. It also means that the following &lt;code&gt;do&lt;/code&gt; block is &lt;em&gt;not&lt;/em&gt; desugared using &lt;code&gt;Applicative&lt;/code&gt; operations:&lt;/p&gt;
&lt;pre class=&quot;brush: haskell&quot;&gt;
&lt;code&gt;do foo a b
   bar s t
   baz y z&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This will use the normal, monadic desugaring, despite the fact that it is trivially desugared into &lt;code&gt;Applicative&lt;/code&gt; operations as &lt;code&gt;foo a b *&amp;gt; bar s t *&amp;gt; baz y z&lt;/code&gt;. In order to get &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XApplicativeDo&quot;&gt;&lt;code&gt;ApplicativeDo&lt;/code&gt;&lt;/a&gt; to trigger here, the &lt;code&gt;do&lt;/code&gt; block must be contorted into the following:&lt;/p&gt;
&lt;pre class=&quot;brush: haskell&quot;&gt;
&lt;code&gt;do foo a b
   bar s t
   r &amp;lt;- baz y z
   pure r&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This seems like an odd oversight.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2.3218390804598&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XTemplateHaskell&quot;&gt;&lt;code&gt;TemplateHaskell&lt;/code&gt;&lt;/a&gt; doesn’t seem able to cope with &lt;code&gt;do&lt;/code&gt; blocks when &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XApplicativeDo&quot;&gt;&lt;code&gt;ApplicativeDo&lt;/code&gt;&lt;/a&gt; is enabled. I reported this as &lt;a href=&quot;https://ghc.haskell.org/trac/ghc/ticket/14471&quot;&gt;an issue on the GHC bug tracker&lt;/a&gt;, but it hasn’t received any attention, so it’s not likely to get fixed unless someone takes the initiative to do so.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;7.6030534351145&quot;&gt;
&lt;p&gt;Enabling &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XApplicativeDo&quot;&gt;&lt;code&gt;ApplicativeDo&lt;/code&gt;&lt;/a&gt; can cause problems with code that may have assumed &lt;code&gt;do&lt;/code&gt; would always be monadic, and sometimes, that can cause code that typechecks to lead to an infinite loop at runtime. Specifically, if &lt;code&gt;do&lt;/code&gt; notation is used to define &lt;code&gt;(&amp;lt;*&amp;gt;)&lt;/code&gt; in terms of &lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt;, enabling &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XApplicativeDo&quot;&gt;&lt;code&gt;ApplicativeDo&lt;/code&gt;&lt;/a&gt; will cause the definition of &lt;code&gt;(&amp;lt;*&amp;gt;)&lt;/code&gt; to become self-referential and therefore divergent. Fortunately, this issue can be easily mitigated by simply writing &lt;code&gt;(&amp;lt;*&amp;gt;) = ap&lt;/code&gt; instead, which is clearer and shorter than the equivalent code using &lt;code&gt;do&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Given all these things, it seems &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XApplicativeDo&quot;&gt;&lt;code&gt;ApplicativeDo&lt;/code&gt;&lt;/a&gt; is a little too new in a few places, and it isn’t quite baked. Still, I keep it enabled by default. Why? Well, &lt;em&gt;usually&lt;/em&gt; it works fine without any problems, and when I run into issues, I can disable it on a per-module basis by writing &lt;code&gt;{-# LANGUAGE NoApplicativeDo #-}&lt;/code&gt;. I still find that keeping it enabled by default is fine the vast majority of the time, I just sometimes need to work around the bugs.&lt;/p&gt;
&lt;p&gt;In contrast, &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XDefaultSignatures&quot;&gt;&lt;code&gt;DefaultSignatures&lt;/code&gt;&lt;/a&gt; isn’t buggy at all, as far as I can tell, it’s just not usually useful without fairly advanced features like &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XGADTs&quot;&gt;&lt;code&gt;GADTs&lt;/code&gt;&lt;/a&gt; (for type equalities) or &lt;code&gt;GHC.Generics&lt;/code&gt;. I mostly use it for &lt;a href=&quot;https://lexi-lambda.github.io/blog/2017/04/28/lifts-for-free-making-mtl-typeclasses-derivable/&quot;&gt;making lifting instances for &lt;code&gt;mtl&lt;/code&gt;-style typeclasses easier to write&lt;/a&gt;, which I’ve found to be a tiny bit tricky to explain (mostly due to the use of type equalities in the context), but it works well. I don’t see any real reason to leave this disabled, but if you don’t think you’re going to use it anyway, it doesn’t really matter one way or the other.&lt;/p&gt;
&lt;p&gt;Finally, &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XPatternSynonyms&quot;&gt;&lt;code&gt;PatternSynonyms&lt;/code&gt;&lt;/a&gt; allow users to extend the pattern language just as they are allowed to extend the value language. Bidirectional pattern synonyms are isomorphisms, and it’s quite useful to allow those isomorphisms to be used with Haskell’s usual pattern-matching syntax. I think this extension is actually quite benign, but I put it so low on this list because it seems infrequently used, and I get the sense most people consider it fairly advanced. I would argue, however, that it’s a very pleasant, useful extension, and it’s no more complicated than a number of the features in Haskell 98.&lt;/p&gt;

&lt;p&gt;Now we’re getting into the meat of things. Everything up to this point has been, in my opinion, completely self-evident in its usefulness and simplicity. As far as I’m concerned, the extensions in the previous six sections have no business ever being left disabled. Starting in this section, however, I could imagine a valid argument being made either way.&lt;/p&gt;
&lt;p&gt;The following three extensions add some complexity to the Haskell type system in return for some added expressive power:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XExistentialQuantification&quot;&gt;&lt;code&gt;ExistentialQuantification&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XGADTs&quot;&gt;&lt;code&gt;GADTs&lt;/code&gt;&lt;/a&gt; are related, given that the former is subsumed by the latter, but &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XGADTs&quot;&gt;&lt;code&gt;GADTs&lt;/code&gt;&lt;/a&gt; also enables an alternative syntax. Both syntaxes allow packing away a typeclass dictionary or equality constraint that is brought into scope upon a successful pattern-match against a data constructor, something that is sometimes quite useful but certainly a departure from Haskell’s simple ADTs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XFunctionalDependencies&quot;&gt;&lt;code&gt;FunctionalDependencies&lt;/code&gt;&lt;/a&gt; extend multi-parameter typeclasses, and they are almost unavoidable, given their use in the venerable &lt;code&gt;mtl&lt;/code&gt; library. Like &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XGADTs&quot;&gt;&lt;code&gt;GADTs&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XFunctionalDependencies&quot;&gt;&lt;code&gt;FunctionalDependencies&lt;/code&gt;&lt;/a&gt; add an additional layer of complexity to the typeclass system in order to express certain things that would otherwise be difficult or impossible.&lt;/p&gt;
&lt;p&gt;All of these extensions involve a tradeoff. Enabling &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XGADTs&quot;&gt;&lt;code&gt;GADTs&lt;/code&gt;&lt;/a&gt; also implies &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XMonoLocalBinds&quot;&gt;&lt;code&gt;MonoLocalBinds&lt;/code&gt;&lt;/a&gt;, which disables let generalization, one of the most likely ways a program that used to typecheck might subsequently fail to do so. Some might argue that this is a good reason to turn &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XGADTs&quot;&gt;&lt;code&gt;GADTs&lt;/code&gt;&lt;/a&gt; on in a per-module basis, but I disagree: I actually want my language to be fairly consistent, and given that I know I am likely going to want to use &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XGADTs&quot;&gt;&lt;code&gt;GADTs&lt;/code&gt;&lt;/a&gt; &lt;em&gt;somewhere&lt;/em&gt;, I want &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XMonoLocalBinds&quot;&gt;&lt;code&gt;MonoLocalBinds&lt;/code&gt;&lt;/a&gt; enabled &lt;em&gt;everywhere&lt;/em&gt;, not inconsistently and sporadically.&lt;/p&gt;
&lt;p&gt;That aside, all these extensions are relatively safe. They are well-understood, and they are fairly self-contained extensions to the Haskell type system. I think these extensions have a very good power to cost ratio, and I find myself using them regularly (especially &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XFunctionalDependencies&quot;&gt;&lt;code&gt;FunctionalDependencies&lt;/code&gt;&lt;/a&gt;), so I keep them enabled globally.&lt;/p&gt;
&lt;h2 id=&quot;advanced-extensions-to-the-haskell-type-system&quot;&gt;Advanced extensions to the Haskell type system&lt;/h2&gt;
&lt;p&gt;Finally, we arrive at the last set of extensions in this list. These are the most advanced features Haskell’s type system currently has to offer, and they are likely to be the most controversial to enable globally:&lt;/p&gt;
&lt;p&gt;All of these extensions exist exclusively for the purpose of type-level programming. &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XDataKinds&quot;&gt;&lt;code&gt;DataKinds&lt;/code&gt;&lt;/a&gt; allows datatype promotion, creating types that are always uninhabited and therefore can only be used phantom. &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XTypeFamilies&quot;&gt;&lt;code&gt;TypeFamilies&lt;/code&gt;&lt;/a&gt; allows the definition of type-level functions that map types to other types. Both of these are minor extensions to Haskell’s surface area, but they have rather significant ramifications on the sort of programming that can be done and the way GHC’s typechecker must operate.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XTypeFamilies&quot;&gt;&lt;code&gt;TypeFamilies&lt;/code&gt;&lt;/a&gt; is an interesting extension because it comes in so many flavors: associated type synonyms, associated datatypes, open and closed type synonym families, and open and closed datatype families. Associated types tend to be easier to grok and easier to use, though they can also be replaced by functional dependencies. Open type families are also quite similar to classes and instances, so they aren’t &lt;em&gt;too&lt;/em&gt; tricky to understand. Closed type families, on the other hand, are a rather different beast, and they can be used to do fairly advanced things, &lt;em&gt;especially&lt;/em&gt; in combination with &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XDataKinds&quot;&gt;&lt;code&gt;DataKinds&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I happen to appreciate GHC’s support for these features, and while I’m hopeful that an eventual &lt;code&gt;DependentHaskell&lt;/code&gt; will alleviate many of the existing infelicities with dependently typed programming in GHC, in the meantime, it’s often useful to enjoy what exists where practically applicable. Therefore, I have little problem keeping them enabled, since, like the vast majority of extensions on this list, these extensions merely lift restrictions, not adjust semantics of the language without the extensions enabled. When I am going to write a type family, I am going to turn on &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XTypeFamilies&quot;&gt;&lt;code&gt;TypeFamilies&lt;/code&gt;&lt;/a&gt;; I see no reason to annotate the modules in which I decide to do so. I do not write an annotation at the top of each module in which I define a typeclass or a datatype, so why should I do so with type families?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XTypeFamilyDependencies&quot;&gt;&lt;code&gt;TypeFamilyDependencies&lt;/code&gt;&lt;/a&gt; is a little bit different, since it’s a very new extension, and it doesn’t seem to always work as well as I would hope. Still, when it doesn’t work, it fails with a very straightforward error message, and when it works, it is legitimately useful, so I don’t see any real reason to leave it off if &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XTypeFamilies&quot;&gt;&lt;code&gt;TypeFamilies&lt;/code&gt;&lt;/a&gt; is enabled.&lt;/p&gt;
&lt;h2 id=&quot;extensions-intentionally-left-off-this-list&quot;&gt;Extensions intentionally left off this list&lt;/h2&gt;
&lt;p&gt;Given what I’ve said so far, it may seem like I would advocate flipping on absolutely every lever GHC has to offer, but that isn’t actually true. There are a few extensions I quite intentionally do &lt;em&gt;not&lt;/em&gt; enable.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XUndecidableInstances&quot;&gt;&lt;code&gt;UndecidableInstances&lt;/code&gt;&lt;/a&gt; is something I turn on semi-frequently, since GHC’s termination heuristic is not terribly advanced, but I turn it on per-module, since it’s useful to know when it’s necessary (and in application code, it rarely is). &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XOverlappingInstances&quot;&gt;&lt;code&gt;OverlappingInstances&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XIncoherentInstances&quot;&gt;&lt;code&gt;IncoherentInstances&lt;/code&gt;&lt;/a&gt;, in contrast, are completely banned—not only are they almost always a bad idea, GHC has a better, more fine-grained way to opt into overlapping instances, using the &lt;code&gt;{-# OVERLAPPING #-}&lt;/code&gt;, &lt;code&gt;{-# OVERLAPPABLE #-}&lt;/code&gt;, and &lt;code&gt;{-# INCOHERENT #-}&lt;/code&gt; pragmas.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XTemplateHaskell&quot;&gt;&lt;code&gt;TemplateHaskell&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XQuasiQuotes&quot;&gt;&lt;code&gt;QuasiQuotes&lt;/code&gt;&lt;/a&gt; are tricky ones. Anecdotes seem to suggest that enabling &lt;a href=&quot;https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XTemplateHaskell&quot;&gt;&lt;code&gt;TemplateHaskell&lt;/code&gt;&lt;/a&gt; everywhere leads to worse compile times, but after trying this on a few projects and measuring, I wasn’t able to detect any meaningful difference. Unless I manage to come up with some evidence that these extensions actually slow down compile times just by being &lt;em&gt;enabled&lt;/em&gt;, even if they aren’t used, then I may add them to my list of globally-enabled extensions, since I use them regularly.&lt;/p&gt;
&lt;p&gt;Other extensions I haven’t mentioned are probably things I just don’t use very often and therefore haven’t felt the need to include on this list. It certainly isn’t exhaustive, and I add to it all the time, so I expect I will continue to do so in the future. This is just what I have for now, and if your favorite extension isn’t included, it probably isn’t a negative judgement against that extension. I just didn’t think to mention it.&lt;/p&gt;

&lt;p&gt;Now that you’re able to build a Haskell project and have chosen which handpicked flavor of Haskell you are going to write, it’s time to decide which libraries to use. Haskell is an expressive programming language, and the degree to which different libraries can shape the way you structure your code is significant. Picking the right libraries can lead to clean code that’s easy to understand and maintain, but picking the wrong ones can lead to disaster.&lt;/p&gt;
&lt;p&gt;Of course, there are &lt;em&gt;thousands&lt;/em&gt; of Haskell libraries on Hackage alone, so I cannot hope to cover all of the ones I have ever found useful, and I certainly cannot cover ones that would be useful but I did not have the opportunity to try (of which there are certainly many). This blog post is long enough already, so I’ll just cover a few categories of libraries that I think I can offer interesting commentary on; most libraries can generally speak for themselves.&lt;/p&gt;
&lt;h2 id=&quot;having-an-effect&quot;&gt;Having an effect&lt;/h2&gt;
&lt;p&gt;One of the first questions Haskell programmers bump into when they begin working on a large application is how they’re going to model effects. Few practical programming languages are pure, but Haskell is one of them, so there’s no getting away from coming up with a way to manage side-effects.&lt;/p&gt;
&lt;p&gt;For some applications, Haskell’s built-in solution might be enough: &lt;code&gt;IO&lt;/code&gt;. This can work decently for data processing programs that do very minimal amounts of I/O, and the types of side-effects they perform are minimal. For these applications, most of the logic is likely to be pure, which means it’s already easy to reason about and easy to test. For other things, like web applications, it’s more likely that a majority of the program logic is going to be side-effectful by its nature—it may involve making HTTP requests to other services, interacting with a database, and writing to logfiles.&lt;/p&gt;
&lt;p&gt;Figuring out how to structure these effects in a type-safe, decoupled, composable way can be tricky, especially since Haskell has so many different solutions. I could not bring myself to choose just one, but I did choose two: the so-called “&lt;code&gt;mtl&lt;/code&gt; style” and freer monads.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mtl&lt;/code&gt; style is so named because it is inspired by the technique of interlocking monadic typeclasses and lifting instances used to model effects using constraints that is used in the &lt;a href=&quot;https://hackage.haskell.org/package/mtl&quot;&gt;&lt;code&gt;mtl&lt;/code&gt;&lt;/a&gt; library. Here is a small code example of what &lt;code&gt;mtl&lt;/code&gt; style typeclasses and handlers look like:&lt;/p&gt;
&lt;div class=&quot;brush: haskell&quot; readability=&quot;13.5&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;22&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadFileSystem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;readFile&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FilePath&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;writeFile&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FilePath&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readFile&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MonadTrans&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadFileSystem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FilePath&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;readFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writeFile&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MonadTrans&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadFileSystem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FilePath&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;writeFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writeFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadFileSystem&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;readFile&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prelude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readFile&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;writeFile&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prelude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeFile&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadFileSystem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadFileSystem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ExceptT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadFileSystem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadFileSystem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MaybeT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadFileSystem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadFileSystem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ReaderT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadFileSystem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadFileSystem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadFileSystem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadFileSystem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;WriterT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InMemoryFileSystemT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InMemoryFileSystemT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FilePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Applicative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadFileSystem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;InMemoryFileSystemT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;readFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InMemoryFileSystemT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vfs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vfs&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;readFile: no such file &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;writeFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InMemoryFileSystemT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vfs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vfs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is the most prevalent way to abstract over effects in Haskell, and it’s been around for a long time. Due to the way it uses the typeclass system, it’s also very fast, since GHC can often specialize and inline the typeclass dictionaries to avoid runtime dictionary passing. The main drawbacks are the amount of boilerplate required and the conceptual difficulty of understanding exactly how monad transformers, monadic typeclasses, and lifting instances all work together to discharge &lt;code&gt;mtl&lt;/code&gt; style constraints.&lt;/p&gt;
&lt;p&gt;There are various alternatives to &lt;code&gt;mtl&lt;/code&gt;’s direct approach to effect composition, most of which are built around the idea of reifying a computation as a data structure and subsequently interpreting it. The most popular of these is the &lt;code&gt;Free&lt;/code&gt; monad, a clever technique for deriving a monad from a functor that happens to be useful for modeling programs. Personally, I think &lt;code&gt;Free&lt;/code&gt; is overhyped. It’s a cute, mathematically elegant technique, but it involves a lot of boilerplate, and composing effect algebras is still a laborious process. The additional expressive power of &lt;code&gt;Free&lt;/code&gt;, namely its ability to choose an interpreter dynamically, at runtime, is rarely necessary or useful, and it adds complexity and reduces performance for few benefits. (And in fact, this is still possible to do with &lt;code&gt;mtl&lt;/code&gt; style, it’s just uncommon because there is rarely any need to do so.)&lt;/p&gt;
&lt;p&gt;A 2017 blog post entitled &lt;a href=&quot;https://markkarpov.com/post/free-monad-considered-harmful.html&quot;&gt;Free monad considered harmful&lt;/a&gt; discussed &lt;code&gt;Free&lt;/code&gt; in comparison with &lt;code&gt;mtl&lt;/code&gt; style, and unsurprisingly cast &lt;code&gt;Free&lt;/code&gt; in a rather unflattering light. I largely agree with everything outlined in that blog post, so I will not retread its arguments here. I do, however, think that there is another abstraction that &lt;em&gt;is&lt;/em&gt; quite useful: the so-called “freer monad” used to implement extensible effects.&lt;/p&gt;
&lt;p&gt;Freer moves even further away from worrying about functors and monads, since its effect algebras do not even need to be functors. Instead, freer’s effect algebras are ordinary GADTs, and reusable, composable effect handlers are easily written to consume elements of these datatypes. Unfortunately, the way this works means that GHC is still not clever enough to optimize freer monads as efficiently as &lt;code&gt;mtl&lt;/code&gt; style, since it can’t easily detect when the interpreter is chosen statically and use that information to specialize and inline effect implementations, but the cost difference is significantly reduced, and I’ve found that in real application code, the vast majority of the cost does not come from the extra overhead introduced by a more expensive &lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are a few different implementations of freer monads, but I, sadly, was not satisfied with any of them, so I decided to contribute to the problem by creating yet another one. My implementation is called &lt;a href=&quot;https://hackage.haskell.org/package/freer-simple&quot;&gt;&lt;code&gt;freer-simple&lt;/code&gt;&lt;/a&gt;, and it includes a streamlined API with &lt;a href=&quot;https://hackage.haskell.org/package/freer-simple-1.0.1.1/docs/Control-Monad-Freer.html&quot;&gt;more documentation than any other freer implementation&lt;/a&gt;. Writing the above &lt;code&gt;mtl&lt;/code&gt; style example using &lt;code&gt;freer-simple&lt;/code&gt; is more straightforward:&lt;/p&gt;
&lt;div class=&quot;brush: haskell&quot; readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;14&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FileSystem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;ReadFile&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FilePath&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FileSystem&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;WriteFile&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FilePath&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FileSystem&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;readFile&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FileSystem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FilePath&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;readFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ReadFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;writeFile&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FileSystem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FilePath&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;writeFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WriteFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;runFileSystemIO&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LastMember&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FileSystem&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;: r) ~&amp;gt; Eff r&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runFileSystemIO&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interpretM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;ReadFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prelude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;WriteFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prelude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;runFileSystemInMemory&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FilePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FileSystem&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;: effs) ~&amp;gt; Eff effs&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runFileSystemInMemory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initVfs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initVfs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsToState&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fsToState&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FileSystem&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;: effs) ~&amp;gt; Eff (State [(FilePath, String)]&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt; '&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fsToState&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reinterpret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;ReadFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vfs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vfs&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;readFile: no such file &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;WriteFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vfs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vfs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;(It could be simplified further with a little bit of Template Haskell to generate the &lt;code&gt;readFile&lt;/code&gt; and &lt;code&gt;writeFile&lt;/code&gt; function definitions, but I haven’t gotten around to writing that.)&lt;/p&gt;
&lt;p&gt;So which effect system do I recommend? I used to recommend &lt;code&gt;mtl&lt;/code&gt; style, but as of only two months ago, I now recommend &lt;code&gt;freer-simple&lt;/code&gt;. It’s easier to understand, involves less boilerplate, achieves “good enough” performance, and generally gets out of the way wherever possible. Its API is designed to make it easy to do the sorts of the things you most commonly need to do, and it provides a core set of effects that can be used to build a real-world application.&lt;/p&gt;
&lt;p&gt;That said, freer is indisputably relatively new and relatively untested. It has success stories, but &lt;code&gt;mtl&lt;/code&gt; style is still the approach used by the majority of the ecosystem. &lt;code&gt;mtl&lt;/code&gt; style has more library support, its performance characteristics are better understood, and it is a tried and true way to structure effects in a Haskell application. If you understand it well enough to use it, and you are happy with it in your application, my recommendation is to stick with it. If you find it confusing, however, or you end up running up against its limits, give &lt;code&gt;freer-simple&lt;/code&gt; a try.&lt;/p&gt;
&lt;h2 id=&quot;through-the-looking-glass-to-lens-or-not-to-lens&quot;&gt;Through the looking glass: to lens or not to lens&lt;/h2&gt;
&lt;p&gt;There’s no getting around it: &lt;a href=&quot;https://hackage.haskell.org/package/lens&quot;&gt;&lt;code&gt;lens&lt;/code&gt;&lt;/a&gt; is a behemoth of a library. For a long time, I wrote Haskell without it, and honestly, it worked out alright. I just wasn’t doing a whole lot of work that involved complicated, deeply-nested data structures, and I didn’t feel the need to bring in a library with such a reputation for having impenetrable operators and an almost equally impenetrable learning curve.&lt;/p&gt;
&lt;p&gt;But, after some time, I decided I wanted to take the plunge. So I braced myself for the worst, pulled out my notebook, and started writing some code. To my surprise… it wasn’t that hard. It made sense. Sure, I still don’t know how it works on the inside, and I never did learn the majority of the exports in &lt;code&gt;Control.Lens.Operators&lt;/code&gt;, but I had no need to. Lenses were useful in the way I had expected them to be, and so were prisms. One thing led to another, and before long, I understood the relationship between the various optics, the most notable additions to my toolkit being folds and traversals. Sure, the type errors were completely opaque much of the time, but I was able to piece things together with ample type annotations and time spent staring at ill-typed expressions. Before long, I had developed an intuition for &lt;code&gt;lens&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After using it for a while, I retrospected on whether or not I liked it, and honestly, I still can’t decide. Some lensy expressions were straightforward to read and were a pleasant simplification, like this one:&lt;/p&gt;
&lt;div class=&quot;brush: haskell&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;nf&quot;&gt;paramSpecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_Required&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Others were less obviously improvements, such as this beauty:&lt;/p&gt;
&lt;div class=&quot;brush: haskell&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kt&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramSpecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filtered&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_UsePreviousValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But operator soup aside, there was something deeper about &lt;code&gt;lens&lt;/code&gt; that bothered me, and I just wasn’t sure what. I didn’t know how to articulate my vague feelings until I read a 2014 blog post entitled &lt;a href=&quot;https://ro-che.info/articles/2014-04-24-lens-unidiomatic&quot;&gt;Lens is unidiomatic Haskell&lt;/a&gt;, which includes a point that I think is spot-on:&lt;/p&gt;
&lt;blockquote readability=&quot;23&quot;&gt;
&lt;p&gt;Usually, types in Haskell are rigid. This leads to a distinctive style of composing programs: look at the types and see what fits where. This is impossible with &lt;code&gt;lens&lt;/code&gt;, which takes overloading to the level mainstream Haskell probably hasn’t seen before.&lt;/p&gt;
&lt;p&gt;We have to learn the new language of the &lt;code&gt;lens&lt;/code&gt; combinators and how to compose them, instead of enjoying our knowledge of how to compose Haskell functions. Formally, &lt;code&gt;lens&lt;/code&gt; types are Haskell function types, but while with ordinary Haskell functions you immediately see from types whether they can be composed, with &lt;code&gt;lens&lt;/code&gt; functions this is very hard in practice.&lt;/p&gt;
&lt;p&gt;[…]&lt;/p&gt;
&lt;p&gt;Now let me clarify that this doesn’t necessarily mean that &lt;code&gt;lens&lt;/code&gt; is a bad library. It’s an &lt;em&gt;unusual&lt;/em&gt; library. It’s almost a separate language, with its own idioms, embedded in Haskell.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The way &lt;code&gt;lens&lt;/code&gt; structures its types deliberately introduces a sort of subtyping relationship—for example, all lenses are traversals and all traversals are folds, but not vice versa—and indeed, knowing this subtyping relationship is essential to working with the library and understanding how to use it. It is helpfully documented with a large diagram on &lt;a href=&quot;https://hackage.haskell.org/package/lens&quot;&gt;the &lt;code&gt;lens&lt;/code&gt; package overview page&lt;/a&gt;, and that diagram was most definitely an invaluable resource for me when I was learning how to use the library.&lt;/p&gt;
&lt;p&gt;On the surface, this isn’t unreasonable. Subtyping is an enormously useful concept! The only reason Haskell dispenses with it entirely is because it makes type inference notoriously difficult. The subtyping relation between optics is one of the things that makes them so useful, since it allows you to easily compose a lens with a prism and get a traversal out. Unfortunately, the downside of all this is that Haskell does not truly have subtyping, so all of &lt;code&gt;lens&lt;/code&gt;’s “types” really must be type aliases for types of roughly the same shape, namely functions. This makes type errors completely &lt;em&gt;baffling&lt;/em&gt;, since the errors do not mention the aliases, only the fully-expanded types (which are often rather complicated, and their meaning is not especially clear without knowing how &lt;code&gt;lens&lt;/code&gt; works under the hood).&lt;/p&gt;
&lt;p&gt;So the above quote is correct: working with &lt;code&gt;lens&lt;/code&gt; really &lt;em&gt;is&lt;/em&gt; like working in a separate embedded language, but I’m usually okay with that. Embedded, domain-specific languages are good! Unfortunately, in this case, the host language is not very courteous to its guest. Haskell does not appear to be a powerful enough language for &lt;code&gt;lens&lt;/code&gt; to be a language in its own right, so it must piggyback on top of Haskell’s error reporting mechanisms, which are insufficient for &lt;code&gt;lens&lt;/code&gt; to be a cohesive linguistic abstraction. Just as debugging code by stepping through the assembly it produces (or, perhaps more relevant in 2018, debugging a compile-to-JS language by looking at the emitted JavaScript instead of the source code) makes for an unacceptably leaky language. We would never stand for such a thing in our general-purpose language tooling, and we should demand better even in our embedded languages.&lt;/p&gt;
&lt;p&gt;That said, &lt;code&gt;lens&lt;/code&gt; is just too useful to ignore. It is a hopelessly leaky abstraction, but it’s still an abstraction, and a powerful one at that. Given my selection of default extensions as evidence, I think it’s clear I have zero qualms with “advanced” Haskell; I will happily use even &lt;code&gt;singletons&lt;/code&gt; where it makes sense. Haskell’s various language extensions are sometimes confusing in their own right, but their complexity is usually fundamental to the expressive power they bring. &lt;code&gt;lens&lt;/code&gt; has some fundamental complexity, too, but it is mostly difficult for the wrong reasons. Still, while it is not the first library I reach for on every new Haskell project, manipulating nested data without &lt;code&gt;lens&lt;/code&gt; is just too unpleasant after tasting the nectar, so I can’t advise against it in good faith.&lt;/p&gt;
&lt;p&gt;Sadly, this means I’m a bit wishy-washy when it comes to using &lt;code&gt;lens&lt;/code&gt;, but I do have at least one recommendation: if you decide to use &lt;code&gt;lens&lt;/code&gt;, it’s better to go all-in. Don’t generate lenses for just a handful of datatypes, do it for &lt;em&gt;all&lt;/em&gt; of them. You can definitely stick to a subset of the &lt;code&gt;lens&lt;/code&gt; library’s features, but don’t apply it in some functions but not others. Having too many different, equally valid ways of doing things leads to confusion and inconsistency, and inconsistency minimizes code reuse and leads to duplication and spaghetti. Commit to using &lt;code&gt;lens&lt;/code&gt;, or don’t use it at all.&lt;/p&gt;
&lt;h2 id=&quot;mitigating-the-string-problem&quot;&gt;Mitigating the string problem&lt;/h2&gt;
&lt;p&gt;Finally, Haskell has a problem with strings. Namely, &lt;code&gt;String&lt;/code&gt; is a type alias for &lt;code&gt;[Char]&lt;/code&gt;, a lazy, singly linked list of characters, which is an awful representation of text. Fortunately, the answer to this problem is simple: ban &lt;code&gt;String&lt;/code&gt; in your programs.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;Text&lt;/code&gt; everywhere. I don’t really care if you pick strict &lt;code&gt;Text&lt;/code&gt; or lazy &lt;code&gt;Text&lt;/code&gt;, but pick one and stick to it. Don’t ever use &lt;code&gt;String&lt;/code&gt;, and &lt;em&gt;especially&lt;/em&gt; don’t ever, &lt;em&gt;ever&lt;/em&gt;, &lt;strong&gt;&lt;em&gt;ever&lt;/em&gt;&lt;/strong&gt; use &lt;code&gt;ByteString&lt;/code&gt; to represent text! There are enormously few legitimate cases for using &lt;code&gt;ByteString&lt;/code&gt; in a program that is not explicitly about reading or writing raw data, and even at that level, &lt;code&gt;ByteString&lt;/code&gt; should only be used at program boundaries. In that sense, I treat &lt;code&gt;ByteString&lt;/code&gt; much the same way I treat &lt;code&gt;IO&lt;/code&gt;: push it to the boundaries of your program.&lt;/p&gt;
&lt;p&gt;One of Haskell’s core tenets is making illegal states unrepresentable. Strings are not especially useful datatypes for this, since they are sequences of arbitrary length made up of atoms that can be an enormously large number of different things. Still, string types enforce a very useful invariant, a notion of a sequence of human-readable characters. In the presence of Unicode, this is a more valuable abstraction than it might seem, and the days of treating strings as little different from sequences of bytes are over. While strings make a poor replacement for enums, they are quite effective at representing the incredible amount of text humans produce in a staggeringly large number of languages, and they are the right type for that job.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ByteString&lt;/code&gt;, on the other hand, is essentially never the right type for any job. If a type classifies a set of values, &lt;code&gt;ByteString&lt;/code&gt; is no different from &lt;code&gt;Any&lt;/code&gt;. It is the structureless type, the all-encompassing blob of bits. A &lt;code&gt;ByteString&lt;/code&gt; could hold anything at all—some text, an image, an executable program—and the type system certainly isn’t going to help to answer that question. The only use case I can possibly imagine for passing around a &lt;code&gt;ByteString&lt;/code&gt; in your program rather than decoding it into a more precise type is if it truly holds opaque data, e.g. some sort of token or key provided by a third party with no structure guaranteed whatsoever. Still, even this should be wrapped in a &lt;code&gt;newtype&lt;/code&gt; so that the type system enforces this opaqueness.&lt;/p&gt;
&lt;p&gt;Troublingly, &lt;code&gt;ByteString&lt;/code&gt; shows up in many libraries’ APIs where it has no business being. In many cases, this seems to be things where ASCII text is expected, but this is hardly a good reason to willingly accept absolutely anything and everything! Make an &lt;code&gt;ASCII&lt;/code&gt; type that forbids non-ASCII characters, and provide a &lt;code&gt;ByteString -&amp;gt; Maybe ASCII&lt;/code&gt; function. Alternatively, think harder about your problem in question to properly support Unicode as you almost certainly ought to.&lt;/p&gt;
&lt;p&gt;Other places &lt;code&gt;ByteString&lt;/code&gt; appears are similarly unfortunate. Base–64 encoding, for example, could be given the wonderfully illustrative type &lt;code&gt;ByteString -&amp;gt; Text&lt;/code&gt;, or even &lt;code&gt;ByteString -&amp;gt; ASCII&lt;/code&gt;! Such a type makes it immediately clear why base–64 is useful: it allows transforming arbitrary binary data into a reliable textual encoding. If we consider that &lt;code&gt;ByteString&lt;/code&gt; is essentially &lt;code&gt;Any&lt;/code&gt;, this function has the type &lt;code&gt;Any -&amp;gt; ASCII&lt;/code&gt;, which is amazingly powerful! We can convert &lt;em&gt;anything&lt;/em&gt; to ASCII text!&lt;/p&gt;
&lt;p&gt;Existing libraries, however, just provide the boring, disappointingly inaccurate type &lt;code&gt;ByteString -&amp;gt; ByteString&lt;/code&gt;, which is one of the most useless types there is. It is essentially &lt;code&gt;Any -&amp;gt; Any&lt;/code&gt;, the meaningless function type. It conveys nothing about what it does, other than that it is pure. Giving a function this type is scarcely better than dynamic typing. Its mere existence is a failure of Haskell library design.&lt;/p&gt;
&lt;p&gt;But wait, it gets worse! &lt;code&gt;Data.Text.Encoding&lt;/code&gt; exports a function called &lt;code&gt;decodeUtf8&lt;/code&gt;, which has type &lt;code&gt;ByteString -&amp;gt; Text&lt;/code&gt;. What an incredible function with a captivating type! Whatever could it possibly do? Again, this function’s type is basically &lt;code&gt;Any -&amp;gt; Text&lt;/code&gt;, which is remarkable in the power it gives us. Let’s try it out, shall we?&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ghci&amp;gt; decodeUtf8 &quot;\xc3\x28&quot;
&quot;*** Exception: Cannot decode byte '\x28': Data.Text.Internal.Encoding.decodeUtf8: Invalid UTF-8 stream&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Oh. Well, that’s a disappointment.&lt;/p&gt;
&lt;p&gt;Haskell’s string problem goes deeper than &lt;code&gt;String&lt;/code&gt; versus &lt;code&gt;Text&lt;/code&gt;; it seems to have wound its way around the collective consciousness of the Haskell community and made it temporarily forget that it cares about types and totality. This isn’t that hard, I swear! I can only express complete befuddlement at how many of these APIs are just completely worthless.&lt;/p&gt;
&lt;p&gt;Fortunately, there is a way out, and that way out is &lt;a href=&quot;https://hackage.haskell.org/package/text-conversions&quot;&gt;&lt;code&gt;text-conversions&lt;/code&gt;&lt;/a&gt;. It is the first Haskell library I ever wrote. It provides &lt;em&gt;type safe&lt;/em&gt;, &lt;em&gt;total&lt;/em&gt; conversions between &lt;code&gt;Text&lt;/code&gt; and various other types, and it is encoding aware. It provides appropriately-typed base–16 and base–64 conversion functions, and is guaranteed to never raise any exceptions. Use it, and apply the Haskell philosophy to your strings, just as you already do for everything else in your program.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Phew.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When I started writing this blog post, it used the phrase “short overview” in the introduction. It is now over ten thousand words long. I think that’s all I have it in me to say for now.&lt;/p&gt;
&lt;p&gt;Haskell is a wonderful language built by a remarkable group of people. Its community is often fraught with needlessly inflammatory debates about things like the value of codes of conduct, the evils of Hackage revisions, and precisely how much or how little people ought to care about the monad laws. These flame wars frustrate me to no end, and they sometimes go so far as to make me ashamed to call myself a part of the Haskell community. Many on the “outside” seem to view Haskellers as an elitist, mean-spirited cult, more interested in creating problems for itself than solving them.&lt;/p&gt;
&lt;p&gt;That perception is categorically wrong.&lt;/p&gt;
&lt;p&gt;I have never been in a community of programmers so dedicated and passionate about applying thought and rigor to building software, then going out and &lt;em&gt;actually doing it&lt;/em&gt;. I don’t know anywhere else where a cutting-edge paper on effect systems is discussed by the very same people who are figuring out how to reliably deploy distributed services to AWS. Some people view the Haskell community as masturbatory, and to some extent, they are probably right. One of my primary motivators for writing Haskell is that it is fun and it challenges me intellectually in ways that other languages don’t. But that challenge is not a sign of uselessness, it is a sign that Haskell is &lt;em&gt;so close&lt;/em&gt; to letting me do the right thing, to solving the problem the right way, to letting me work without compromises. When I write in most programming languages, I must constantly accept that my program will never be robust in all the ways I want it to be, and I might as well give up before I even start. Haskell’s greatest weakness is that it tempts me to try.&lt;/p&gt;
&lt;p&gt;Haskell is imperfect, as it will always be. I doubt I will ever be satisfied by any language or any ecosystem. There will always be more to learn, more to discover, better tools and abstractions to develop. Many of them will not look anything like Haskell; they may not involve formal verification or static types or effect systems at all. Perhaps live programming, structural editors, and runtime hotswapping will finally take over the world, and we will find that the problems we thought we were solving were irrelevant to begin with. I can’t predict the future, and while I’ve found great value in the Haskell school of program construction, I dearly hope that we do not develop such tunnel vision that we cannot see that there may be other ways to solve these problems. Many of the solutions are things we likely have not even begun to think about. Still, whether that happens or not, it is clear to me that Haskell is a point in the design space unlike any other, and we learn almost as much from the things it gets wrong as we do from the things it gets right.&lt;/p&gt;
&lt;p&gt;It’s been a wonderful two years, Haskell. I won’t be a stranger.&lt;/p&gt;
&lt;footer&gt;
&lt;/footer&gt;</description>
<pubDate>Sat, 10 Feb 2018 17:42:01 +0000</pubDate>
<dc:creator>kryptiskt</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/</dc:identifier>
</item>
<item>
<title>Nuklear: A single-header ANSI C GUI library</title>
<link>https://github.com/vurtun/nuklear</link>
<guid isPermaLink="true" >https://github.com/vurtun/nuklear</guid>
<description>&lt;h3&gt;Readme.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/vurtun/nuklear&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/e371dd25dfe791d50cb104097ad159b685d4c56c/68747470733a2f2f7472617669732d63692e6f72672f76757274756e2f6e756b6c6561722e737667&quot; alt=&quot;Build Status&quot; data-canonical-src=&quot;https://travis-ci.org/vurtun/nuklear.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a minimal state immediate mode graphical user interface toolkit written in ANSI C and licensed under public domain. It was designed as a simple embeddable user interface for application and does not have any dependencies, a default render backend or OS window and input handling but instead provides a very modular library approach by using simple input state for input and draw commands describing primitive shapes as output. So instead of providing a layered library that tries to abstract over a number of platform and render backends it only focuses on the actual UI.&lt;/p&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Immediate mode graphical user interface toolkit&lt;/li&gt;
&lt;li&gt;Single header library&lt;/li&gt;
&lt;li&gt;Written in C89 (ANSI C)&lt;/li&gt;
&lt;li&gt;Small codebase (~18kLOC)&lt;/li&gt;
&lt;li&gt;Focus on portability, efficiency and simplicity&lt;/li&gt;
&lt;li&gt;No dependencies (not even the standard library if not wanted)&lt;/li&gt;
&lt;li&gt;Fully skinnable and customizable&lt;/li&gt;
&lt;li&gt;Low memory footprint with total memory control if needed or wanted&lt;/li&gt;
&lt;li&gt;UTF-8 support&lt;/li&gt;
&lt;li&gt;No global or hidden state&lt;/li&gt;
&lt;li&gt;Customizable library modules (you can compile and use only what you need)&lt;/li&gt;
&lt;li&gt;Optional font baker and vertex buffer output&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rawgit.com/vurtun/nuklear/master/doc/nuklear.html&quot; rel=&quot;nofollow&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Building&lt;/h2&gt;
&lt;p&gt;This library is self contained in one single header file and can be used either in header only mode or in implementation mode. The header only mode is used by default when included and allows including this header in other headers and does not contain the actual implementation.&lt;/p&gt;
&lt;p&gt;The implementation mode requires to define the preprocessor macro &lt;code&gt;NK_IMPLEMENTATION&lt;/code&gt; in &lt;em&gt;one&lt;/em&gt; .c/.cpp file before &lt;code&gt;#include&lt;/code&gt;ing this file, e.g.:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
#&lt;span class=&quot;pl-k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;NK_IMPLEMENTATION&lt;/span&gt;
#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;nuklear.h&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;IMPORTANT: Every time you include &quot;nuklear.h&quot; you have to define the same optional flags. This is very important not doing it either leads to compiler errors or even worse stack corruptions.&lt;/p&gt;
&lt;h2&gt;Gallery&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.githubusercontent.com/assets/8057201/11761525/ae06f0ca-a0c6-11e5-819d-5610b25f6ef4.gif&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/11761525/ae06f0ca-a0c6-11e5-819d-5610b25f6ef4.gif&quot; alt=&quot;screenshot&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://cloud.githubusercontent.com/assets/8057201/13538240/acd96876-e249-11e5-9547-5ac0b19667a0.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/13538240/acd96876-e249-11e5-9547-5ac0b19667a0.png&quot; alt=&quot;screen&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://cloud.githubusercontent.com/assets/8057201/13538243/b04acd4c-e249-11e5-8fd2-ad7744a5b446.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/13538243/b04acd4c-e249-11e5-8fd2-ad7744a5b446.png&quot; alt=&quot;screen2&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://cloud.githubusercontent.com/assets/8057201/9976995/e81ac04a-5ef7-11e5-872b-acd54fbeee03.gif&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/9976995/e81ac04a-5ef7-11e5-872b-acd54fbeee03.gif&quot; alt=&quot;node&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://cloud.githubusercontent.com/assets/8057201/15991632/76494854-30b8-11e6-9555-a69840d0d50b.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/15991632/76494854-30b8-11e6-9555-a69840d0d50b.png&quot; alt=&quot;skinning&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://cloud.githubusercontent.com/assets/8057201/14902576/339926a8-0d9c-11e6-9fee-a8b73af04473.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/14902576/339926a8-0d9c-11e6-9fee-a8b73af04473.png&quot; alt=&quot;gamepad&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt; init gui state &lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; nk_context ctx;
&lt;span class=&quot;pl-en&quot;&gt;nk_init_fixed&lt;/span&gt;(&amp;amp;ctx, calloc(&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, MAX_MEMORY), MAX_MEMORY, &amp;amp;font);

&lt;span class=&quot;pl-k&quot;&gt;enum&lt;/span&gt; {EASY, HARD};
&lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; op = EASY;
&lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; value = &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;6f&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; i =  &lt;span class=&quot;pl-c1&quot;&gt;20&lt;/span&gt;;

&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (nk_begin(&amp;amp;ctx, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Show&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, nk_rect(&lt;span class=&quot;pl-c1&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;220&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;220&lt;/span&gt;),
    NK_WINDOW_BORDER|NK_WINDOW_MOVABLE|NK_WINDOW_CLOSABLE)) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt; fixed widget pixel width &lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;nk_layout_row_static&lt;/span&gt;(&amp;amp;ctx, &lt;span class=&quot;pl-c1&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;);
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;nk_button_label&lt;/span&gt;(&amp;amp;ctx, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;button&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)) {
        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt; event handling &lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
    }

    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt; fixed widget window ratio width &lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;nk_layout_row_dynamic&lt;/span&gt;(&amp;amp;ctx, &lt;span class=&quot;pl-c1&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;);
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;nk_option_label&lt;/span&gt;(&amp;amp;ctx, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;easy&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, op == EASY)) op = EASY;
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;nk_option_label&lt;/span&gt;(&amp;amp;ctx, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;hard&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, op == HARD)) op = HARD;

    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt; custom widget pixel width &lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;nk_layout_row_begin&lt;/span&gt;(&amp;amp;ctx, NK_STATIC, &lt;span class=&quot;pl-c1&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;);
    {
        &lt;span class=&quot;pl-c1&quot;&gt;nk_layout_row_push&lt;/span&gt;(&amp;amp;ctx, &lt;span class=&quot;pl-c1&quot;&gt;50&lt;/span&gt;);
        &lt;span class=&quot;pl-c1&quot;&gt;nk_label&lt;/span&gt;(&amp;amp;ctx, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Volume:&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, NK_TEXT_LEFT);
        &lt;span class=&quot;pl-c1&quot;&gt;nk_layout_row_push&lt;/span&gt;(&amp;amp;ctx, &lt;span class=&quot;pl-c1&quot;&gt;110&lt;/span&gt;);
        &lt;span class=&quot;pl-c1&quot;&gt;nk_slider_float&lt;/span&gt;(&amp;amp;ctx, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &amp;amp;value, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;0f&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;1f&lt;/span&gt;);
    }
    &lt;span class=&quot;pl-c1&quot;&gt;nk_layout_row_end&lt;/span&gt;(&amp;amp;ctx);
}
&lt;span class=&quot;pl-en&quot;&gt;nk_end&lt;/span&gt;(&amp;amp;ctx);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.githubusercontent.com/assets/8057201/10187981/584ecd68-675c-11e5-897c-822ef534a876.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/8057201/10187981/584ecd68-675c-11e5-897c-822ef534a876.png&quot; alt=&quot;example&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Bindings&lt;/h2&gt;
&lt;p&gt;There are a number of nuklear bindings for different languges created by other authors. I cannot atest for their quality since I am not necessarily proficient in either of these languages. Furthermore there are no guarantee that all bindings will always be kept up to date:&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;p&gt;Developed by Micha Mettke and every direct or indirect contributor to the GitHub.&lt;/p&gt;
&lt;p&gt;Embeds &lt;code&gt;stb_texedit&lt;/code&gt;, &lt;code&gt;stb_truetype&lt;/code&gt; and &lt;code&gt;stb_rectpack&lt;/code&gt; by Sean Barret (public domain) Embeds &lt;code&gt;ProggyClean.ttf&lt;/code&gt; font by Tristan Grimmer (MIT license).&lt;/p&gt;
&lt;p&gt;Big thank you to Omar Cornut (ocornut@github) for his &lt;a href=&quot;https://github.com/ocornut/imgui&quot;&gt;imgui&lt;/a&gt; library and giving me the inspiration for this library, Casey Muratori for handmade hero and his original immediate mode graphical user interface idea and Sean Barret for his amazing single header &lt;a href=&quot;https://github.com/nothings/stb&quot;&gt;libraries&lt;/a&gt; which restored my faith in libraries and brought me to create some of my own.&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;------------------------------------------------------------------------------
This software is available under 2 licenses -- choose whichever you prefer.
------------------------------------------------------------------------------
ALTERNATIVE A - MIT License
Copyright (c) 2017 Micha Mettke
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the &quot;Software&quot;), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
------------------------------------------------------------------------------
ALTERNATIVE B - Public Domain (www.unlicense.org)
This is free and unencumbered software released into the public domain.
Anyone is free to copy, modify, publish, use, compile, sell, or distribute this
software, either in source code form or as a compiled binary, for any purpose,
commercial or non-commercial, and by any means.
In jurisdictions that recognize copyright laws, the author or authors of this
software dedicate any and all copyright interest in the software to the public
domain. We make this dedication for the benefit of the public at large and to
the detriment of our heirs and successors. We intend this dedication to be an
overt act of relinquishment in perpetuity of all present and future rights to
this software under copyright law.
THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-----------------------------------------------------------------------------
&lt;/code&gt;
&lt;/pre&gt;&lt;/article&gt;</description>
<pubDate>Sat, 10 Feb 2018 13:31:33 +0000</pubDate>
<dc:creator>mpweiher</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/8057201?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>vurtun/nuklear</og:title>
<og:url>https://github.com/vurtun/nuklear</og:url>
<og:description>nuklear - A single-header ANSI C gui library</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/vurtun/nuklear</dc:identifier>
</item>
<item>
<title>The insane amount of backward compatibility in Google Maps</title>
<link>https://www.tnhh.net/posts/google-maps-insane-backward-compatibility.html</link>
<guid isPermaLink="true" >https://www.tnhh.net/posts/google-maps-insane-backward-compatibility.html</guid>
<description>&lt;p&gt;I still keep a couple of my favorite old smartphones. Sometimes I use one of them as my primary device for fun. Phones are among the fastest evolving markets, even a year makes a whole lot of differences. One of the biggest challenges with using old phones is the software: they don’t run modern software. And old software isn’t compatible with new websites, frameworks, encryption standards, APIs. Use an old device, and you will find yourself unable to get anything done. Every app crashes or complains that it can’t connect to the server. Even with Apple who is doing a fantastic job of keeping their phones updated, you may notice that many sites and apps have started dropping support for the iPhone 5, which is still a totally capable device.&lt;/p&gt;
&lt;p&gt;But there is always an unlikely app that consistently works on all of my devices, regardless of their OS and how old they are: &lt;em&gt;Google Maps&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Google Maps still works today on Android 1.0, the earliest version available (Maps actually still works with some of the beta versions before that). I believe Maps was only a prototype app in Android 1.0. If I recall correctly, Google didn’t have any official real device to run Android 1.0. That was back all the way in 2007.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/android10.png&quot; alt=&quot;Google Maps Android 1.0&quot;/&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/android11.png&quot; alt=&quot;Google Maps Android 1.0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;But then, you say, Android is Google’s OS for Pete’s sake. How about iOS? Google Maps for iOS 1.0, released late 2012, still works just fine. That was the first version of Google Maps ever released as a standalone app after Apple ditched Google’s map solution on iOS:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/ios70.png&quot; alt=&quot;Google Maps iOS 7&quot;/&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/ios71.png&quot; alt=&quot;Google Maps iOS 7&quot;/&gt;&lt;/p&gt;
&lt;p&gt;But wait… There is more. This is native iOS Maps on iOS 6, which was released in early 2012, and it still works. I just noticed that the Normal and Hybrid map modes stopped working recently, but that’s alright, I can still navigate (plus, I can always download and use Google’s official app on iOS 6):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/ios60.png&quot; alt=&quot;Google Maps iOS 6&quot;/&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/ios61.png&quot; alt=&quot;Google Maps iOS 6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;But that’s only 6 years ago. Let’s go hardcore. How about Google Maps on Java phones (the dumb bricks that run Java “midlets” or whatever the ancient Greeks call it)? It works too. Note that, other than Google Maps and Opera Mini, I do not note many Internet “midlets” that still work, &lt;a href=&quot;http://blog.textit.in/your-path-to-a-$16b-exit-build-a-j2me-app&quot;&gt;including Whatsapp that is praised for their willingness to deal with ancient phones&lt;/a&gt;. Whatsapp actually has a time-bomb programmed in the app of some sort and it will kick you out if it realizes that it hasn’t been updated recently. What a dumb idea.&lt;/p&gt;
&lt;p&gt;Back to Google Maps. The app (? - applet? midlet?) was last updated in 2008, but even street view works today:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/j2me0.png&quot; alt=&quot;Google Maps J2ME&quot;/&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/j2me1.png&quot; alt=&quot;Google Maps J2ME&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Now if that hasn’t impressed you yet, let me introduce you to my Palm Treo 755p, released in 2007.&lt;/p&gt;
&lt;p&gt;The phone runs Palm OS 5. It doesn’t understand Unicode. Of course, it has no idea what an “emoji” is. When you send it a text message that has one character outside of the printable ASCII range, it freaks out and corrupts the whole message. It doesn’t have Wifi of any kind. It doesn’t even connect to the Sprint’s 2G EV-DO/1xRTT network (because the data provision server is long dead). I tried to even &lt;a href=&quot;http://www.rimweb.in/forums/topic/34656-diag-modedrivers-for-mobiles/&quot;&gt;program the wireless chip manually&lt;/a&gt; with my handmade cables and obscure codes - it worked, once, and then stopped working. In short, it has no easy way to connect to the Internet at all. In order to get the thing to connect to the Internet, I had to fucking emulate a Dial-up Modem over Bluetooth using a Raspberry Pi. Since then, I have repurposed my Raspberry Pi, and it was painful to set up so I don’t have a picture of Google Maps working now.&lt;/p&gt;
&lt;p&gt;This was last year: Seemed like there was only one person left in this world who was still using that “app” in 2017, and that was me. The Palm OS didn’t even have screenshot functionality. But lo and behold, Google Maps worked (There are some missing loading tiles in the picture because I wanted to test wheter it worked offline with cached tiles, and it did):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/palmos0.jpg&quot; alt=&quot;Google Maps PalmOS&quot;/&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/palmos1.jpg&quot; alt=&quot;Google Maps PalmOS&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The only exception to me on Google Maps, so far, was the WebOS map app (released in 2009). It doesn’t work anymore – but forget about that, there is an unofficial app that runs on WebOS that still works today:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/webos0.png&quot; alt=&quot;Google Maps WebOS 2&quot;/&gt;&lt;img src=&quot;https://www.tnhh.net/assets/posts-images/gmaps/webos1.png&quot; alt=&quot;Google Maps WebOS 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;And they all work with the &lt;a href=&quot;https://www.justinobeirne.com/google-maps-moat/&quot;&gt;newest maps data&lt;/a&gt;. The Steve Jobs auditorium is in a new building.&lt;/p&gt;
&lt;p&gt;Even in old versions, Google Maps had different layers and turn-by-turn navigation, and sometimes Street view - it is and has always been functional and useful. It is a relatively complex application, having that level of backward compatibility and functionality maintained is a great thing. Regardless whether all this compatibility is intentional or not, I think it is a very respectable achievement. Google Maps took something that is already good and make it even better over the years without compromising. That can’t be said with everything Google did, especially compared to Talk/Hangouts, which I mentioned in &lt;a href=&quot;https://www.tnhh.net/posts/google-talk.html&quot;&gt;my previous rant&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I noticed that the only other product I see running well on old devices is Google search, which works with many kinds of old browsers. Gmail in general is bad about legacy support, although in many cases you can still access a limited version of Gmail on a web browser. The lack of legacy support of Gmail is partly due to its encryption protocol requirements. I do understand that, though: Emails are incredibly sensitive, giving up legacy compatibility for security is a worthy tradeoff.&lt;/p&gt;
&lt;p&gt;I hope regardless of what feature or architectural change happens to Maps to the future, the team keep testing and maintaining this legendary compatibility in Google Maps. We’ll never know how valuable it is until we’re lost in the middle of nowhere. In that moment, we’d be so thankful to find out that Google Maps still works on our ancient phone that is left in the glovebox. If that has the potential to save a life so &lt;a href=&quot;https://en.wikipedia.org/wiki/James_Kim#Snowbound&quot;&gt;a tragedy wouldn’t happen again&lt;/a&gt;, I’d think it can make a case.&lt;/p&gt;
&lt;p&gt;Disclaimer: Except for the Android 1.0 app and the midlet were run emulated on software, everything else ran on real hardware. I do not expect that to make any difference on real hardware.&lt;/p&gt;
&lt;hr/&gt;&lt;footer role=&quot;contentinfo&quot; readability=&quot;3&quot;&gt;
&lt;p class=&quot;byline&quot;&gt;&lt;strong&gt;The insane amount of backward compatibility in Google Maps&lt;/strong&gt; was published on &lt;time datetime=&quot;2018-02-09T00:00:00+00:00&quot;&gt;February 09, 2018&lt;/time&gt;.&lt;/p&gt;
&lt;/footer&gt;</description>
<pubDate>Sat, 10 Feb 2018 12:47:15 +0000</pubDate>
<dc:creator>jimmies</dc:creator>
<og:type>article</og:type>
<og:title>The insane amount of backward compatibility in Google Maps</og:title>
<og:description>I still keep a couple of my favorite old smartphones. Sometimes I use one of them as my primary device for fun. Phones are among the fastest evolving markets, even a year makes a whole lot of differences. One of the biggest challenges with using old phones is the software: they don’t run modern software. And old software isn’t compatible with new websites, frameworks, encryption standards, APIs. Use an old device, and you will find yourself unable to get anything done. Every app crashes or complains that it can’t connect to the server. Even with Apple who is doing a fantastic job of keeping their phones updated, you may notice that many sites and apps have started dropping support for the iPhone 5, which is still a totally capable device.</og:description>
<og:url>https://www.tnhh.net/posts/google-maps-insane-backward-compatibility.html</og:url>
<og:image>https://www.tnhh.net/images/default-thumb.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.tnhh.net/posts/google-maps-insane-backward-compatibility.html</dc:identifier>
</item>
<item>
<title>Quiet for Android – TCP over sound</title>
<link>https://github.com/quiet/org.quietmodem.Quiet</link>
<guid isPermaLink="true" >https://github.com/quiet/org.quietmodem.Quiet</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://discordapp.com/invite/eRw5UjF&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/c49e84a4d16e6e7d7103edba859dcb74d92912c4/68747470733a2f2f646973636f72646170702e636f6d2f6170692f6775696c64732f3239303938353634383035343230363436342f656d6265642e706e673f7374796c653d736869656c64&quot; alt=&quot;Quiet Modem Chat&quot; data-canonical-src=&quot;https://discordapp.com/api/guilds/290985648054206464/embed.png?style=shield&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;org.quietmodem.Quiet allows you to pass data through the speakers on your Android device. This library can operate either as a raw frame layer or as a UDP/TCP stack.&lt;/p&gt;
&lt;p&gt;This package contains prebuilt library files for &lt;a href=&quot;https://github.com/quiet/quiet&quot;&gt;libquiet&lt;/a&gt; and &lt;a href=&quot;https://github.com/quiet/quiet-lwip&quot;&gt;quiet-lwip&lt;/a&gt; as well as their dependencies. On top of that, it adds Java bindings which closely mimic the familiar interfaces from the java.net.* package.&lt;/p&gt;
&lt;p&gt;This package is provided under the 3-clause BSD license. The licenses of its dependencies are also included and are licensed under a mix of BSD and MIT.&lt;/p&gt;
&lt;p&gt;Quiet comes with support for armeabi-v7a, arm64-v8a, x86, and x86_64. It requires Android API 14 for 32-bit mode and API 21 for 64-bit mode. It requires only the &lt;code&gt;RECORD_AUDIO&lt;/code&gt; permission.&lt;/p&gt;
&lt;p&gt;For testing purposes, Genymotion is highly recommended over the default emulator. Genymotion provides access to the microphone while the default Android Studio one does not and will throw an exception when Quiet attempts to use the microphone.&lt;/p&gt;
&lt;h2&gt;Why sound? Isn't that outdated?&lt;/h2&gt;
&lt;p&gt;If you are old enough, you may remember using dial-up modems to connect to the internet. In a sense, this package brings that back. While it's true that this is somewhat of a retro approach, consider the advantages of using sound.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;Highly cross-platform. Any device with speakers and a microphone and sufficient computational power can use this medium to communicate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No pairing. Unlike Bluetooth, sound can be used instantly without the need to pair devices. This reduces the friction and improves the user experience.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Embeddable content. Similar to a QR code, short packets of data can be encoded into streaming or recorded audio and can then be later decoded by this package.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;What does it sound like?&lt;/h2&gt;
&lt;p&gt;The answer to this depends on which operating mode you choose. Quiet provides audible and near-ultrasonic modes. Audible modes sound something like a puff of air. The near-ultrasonic modes run at 17+kHz and are virtually inaudible to adults. Either mode can operate at relatively low volumes as long as there isn't too much background noise.&lt;/p&gt;
&lt;h2&gt;How fast does it go?&lt;/h2&gt;
&lt;p&gt;Quiet's provided audible mode transfers at approximately 7kbps. In cases where two devices are connected over a cable (via 3.5mm jack) it can run in cable mode, which transfers at approximately 64kbps.&lt;/p&gt;
&lt;h2&gt;Other Platforms&lt;/h2&gt;
&lt;p&gt;Desktop/Laptop: &lt;a href=&quot;https://github.com/quiet/quiet&quot;&gt;libquiet&lt;/a&gt; and &lt;a href=&quot;https://github.com/quiet/quiet-lwip&quot;&gt;quiet-lwip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Javascript: &lt;a href=&quot;https://github.com/quiet/quiet-js&quot;&gt;quiet-js&lt;/a&gt; (&lt;em&gt;UDP/TCP coming soon&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;iOS: &lt;a href=&quot;https://github.com/quiet/QuietModemKit&quot;&gt;QuietModemKit&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Apps that use org.quietmodem.Quiet&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alexbirkett/QuietShare&quot;&gt;Quiet Share&lt;/a&gt; - A proof of concept app that allows text and links to be shared from one device to another.&lt;/p&gt;

&lt;p&gt;Quiet can be used either as a raw frame layer or in UDP/TCP mode. For the latter, it provides the &lt;a href=&quot;https://savannah.nongnu.org/projects/lwip/&quot; rel=&quot;nofollow&quot;&gt;lwIP TCP stack&lt;/a&gt; which operates entirely independently from the stack provided by Android.&lt;/p&gt;
&lt;p&gt;Make sure to have the &lt;a href=&quot;https://developer.android.com/ndk/index.html&quot; rel=&quot;nofollow&quot;&gt;Android NDK&lt;/a&gt; installed and set the location of it at &lt;code&gt;ndk.dir&lt;/code&gt; in &lt;code&gt;local.properties&lt;/code&gt;. This is necessary to build the JNI wrapper included in this project.&lt;/p&gt;
&lt;h2&gt;Frame Mode&lt;/h2&gt;
&lt;p&gt;Assuming we're working from MainActivity.java, we start with&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;java.io.IOException&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;org.quietmodem.Quiet.*&lt;/span&gt;;

&lt;span class=&quot;pl-smi&quot;&gt;FrameReceiverConfig&lt;/span&gt; receiverConfig &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;
&lt;span class=&quot;pl-smi&quot;&gt;FrameTransmitterConfig&lt;/span&gt; transmitterConfig &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;

&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
    transmitterConfig &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;FrameTransmitterConfig&lt;/span&gt;(
            &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;,
            &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;audible-7k-channel-0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
    receiverConfig &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;FrameReceiverConfig&lt;/span&gt;(
            &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;,
            &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;audible-7k-channel-0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
} &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;IOException&lt;/span&gt; e) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; could not build configs&lt;/span&gt;
}

&lt;span class=&quot;pl-smi&quot;&gt;FrameReceiver&lt;/span&gt; receiver &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;
&lt;span class=&quot;pl-smi&quot;&gt;FrameTransmitter&lt;/span&gt; transmitter &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;

&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
    receiver &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;FrameReceiver&lt;/span&gt;(receiverConfig);
    transmitter &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;FrameTransmitter&lt;/span&gt;(transmitterConfig);
} &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;ModemException&lt;/span&gt; e) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; could not set up receiver/transmitter&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This sets up our transmitter and receiver using the packaged configuration. We choose the audible mode here. Now we can transmit.&lt;/p&gt;
&lt;p&gt;On one side we might run&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; set receiver to block until a frame is received&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; by default receivers are nonblocking&lt;/span&gt;
receiver&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;setBlocking(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;);

&lt;span class=&quot;pl-k&quot;&gt;byte&lt;/span&gt;[] buf &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;pl-c1&quot;&gt;1024&lt;/span&gt;];
&lt;span class=&quot;pl-k&quot;&gt;long&lt;/span&gt; recvLen &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
    recvLen &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; receiver&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;receive(buf);
} &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;IOException&lt;/span&gt; e) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; read timed out&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And on the other side&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt; payload &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello, World!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
    transmitter&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;send(payload&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getBytes());
} &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;IOException&lt;/span&gt; e) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; our message might be too long or the transmit queue full&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's enough to send our frame across. Frame mode is useful when we want to send small bits of data that can easily fit in one frame and do not need a concept of a sender or receiver, that is, frames are a broadcast medium.&lt;/p&gt;
&lt;h2&gt;UDP/TCP Mode&lt;/h2&gt;
&lt;p&gt;If we want to do interactions between two devices, or if we'd like retransmits and automatic data segmentation, then TCP is the way to go.&lt;/p&gt;
&lt;p&gt;First we build a new NetworkInterface.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;java.io.IOException&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;java.net.SocketException&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;org.quietmodem.Quiet.*&lt;/span&gt;;

&lt;span class=&quot;pl-smi&quot;&gt;FrameReceiverConfig&lt;/span&gt; receiverConfig &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;
&lt;span class=&quot;pl-smi&quot;&gt;FrameTransmitterConfig&lt;/span&gt; transmitterConfig &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;

&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
    transmitterConfig &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;FrameTransmitterConfig&lt;/span&gt;(
            &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;,
            &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;audible-7k-channel-0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
    receiverConfig &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;FrameReceiverConfig&lt;/span&gt;(
            &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;,
            &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;audible-7k-channel-0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
} &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;IOException&lt;/span&gt; e) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; could not build configs&lt;/span&gt;
}

&lt;span class=&quot;pl-smi&quot;&gt;NetworkInterfaceConfig&lt;/span&gt; conf &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;NetworkInterfaceConfig&lt;/span&gt;(
            receiverConfig,
            transmitterConfig);

&lt;span class=&quot;pl-smi&quot;&gt;NetworkInterface&lt;/span&gt; intf &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
    intf &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;NetworkInterface&lt;/span&gt;(conf);
} &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;ModemException&lt;/span&gt; e) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; network interface failure&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This example omits an IP address and netmask from &lt;code&gt;NetworkInterfaceConfig()&lt;/code&gt; which tells Quiet to create an Auto IP. This will automatically assign our interface an address, although it does take several seconds to probe and settle on an address once we instantiate the interface.&lt;/p&gt;
&lt;p&gt;If we're using Quiet in an ad-hoc manner, we'll need to discover any peers nearby. We can do this by using a broadcast UDP packet.&lt;/p&gt;
&lt;p&gt;On each side we might run something like this.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; org.quietmodem.Quiet.DatagramSocket&lt;/span&gt;
&lt;span class=&quot;pl-smi&quot;&gt;DatagramSocket&lt;/span&gt; s &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; bind to wildcard:3333 -- note that this is&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; using org.quietmodem.Quiet.InetSocketAddress&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; not java.net.InetSocketAddress&lt;/span&gt;
    sSend &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;DatagramSocket&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;InetSocketAddress&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;0.0.0.0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3333&lt;/span&gt;));
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; listen on 3334&lt;/span&gt;
    sRecv &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;DatagramSocket&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;InetSocketAddress&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;0.0.0.0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3334&lt;/span&gt;));

    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; don't block for more than 10 seconds&lt;/span&gt;
    sRecv&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;setSoTimeout(&lt;span class=&quot;pl-c1&quot;&gt;10000&lt;/span&gt;);

    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; get broadcast permission&lt;/span&gt;
    sSend&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;setBroadcast(&lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;);
} &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;SocketException&lt;/span&gt; e) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; exception creating DatagramSocket&lt;/span&gt;
}

&lt;span class=&quot;pl-k&quot;&gt;byte&lt;/span&gt;[] send &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;MARCO&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getBytes();
&lt;span class=&quot;pl-k&quot;&gt;byte&lt;/span&gt;[] recv &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;pl-c1&quot;&gt;1024&lt;/span&gt;];
&lt;span class=&quot;pl-smi&quot;&gt;InetSocketAddress&lt;/span&gt; peer &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; get ready to do a broadcast to port 3334&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; again, this is org.quietmodem.Quiet.DatagramPacket&lt;/span&gt;
    &lt;span class=&quot;pl-smi&quot;&gt;DatagramPacket&lt;/span&gt; p &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;DatagramPacket&lt;/span&gt;(send, send&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;length,
                    &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;InetSocketAddress&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;169.254.255.255&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3334&lt;/span&gt;));
    &lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
        sSend&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;send(p);
    } &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;IOException&lt;/span&gt; e) {
        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; exception sending on DatagramSocket&lt;/span&gt;
    }

    &lt;span class=&quot;pl-smi&quot;&gt;DatagramPacket&lt;/span&gt; pRecv &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;DatagramPacket&lt;/span&gt;(recv, recv&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;length);
    &lt;span class=&quot;pl-k&quot;&gt;boolean&lt;/span&gt; received &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;false&lt;/span&gt;;
    &lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt; {
        sRecv&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;receive(pRecv);

        received &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;;
        peer &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; pRecv&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getSocketAddress();

        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; respond so that the other peer knows we're here&lt;/span&gt;
        p&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;setData(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;POLO&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getBytes());
        p&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;setSocketAddress(peer);
        sSend&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;send(p);
    } &lt;span class=&quot;pl-k&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;IOException&lt;/span&gt; e) {
        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; exception receiving on DatagramSocket&lt;/span&gt;
    }

    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (received) {
        &lt;span class=&quot;pl-k&quot;&gt;break&lt;/span&gt;;
    }

    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; our 10-second read timeout acts as a sleep&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; continue broadcasting until we get a bite&lt;/span&gt;
}

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; now use the peer's address somehow....&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; continue sending UDP or establish a TCP connection&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; on another port&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; when finished, close sSend, sRecv and intf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/article&gt;</description>
<pubDate>Sat, 10 Feb 2018 06:07:11 +0000</pubDate>
<dc:creator>adulau</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/17815378?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>quiet/org.quietmodem.Quiet</og:title>
<og:url>https://github.com/quiet/org.quietmodem.Quiet</og:url>
<og:description>org.quietmodem.Quiet - Quiet for Android - TCP over sound</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/quiet/org.quietmodem.Quiet</dc:identifier>
</item>
<item>
<title>In web design, everything easy is hard again</title>
<link>https://frankchimero.com/writing/everything-easy-is-hard-again/</link>
<guid isPermaLink="true" >https://frankchimero.com/writing/everything-easy-is-hard-again/</guid>
<description>&lt;div class=&quot;section title&quot;&gt;

&lt;img src=&quot;https://frankchimero.com/writing/everything-easy-is-hard-again/images/everythingeasy.svg&quot;/&gt;&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;23&quot;&gt;&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/speaking.png&quot; class=&quot;tinycentered&quot;/&gt;&lt;p&gt;This past summer, I gave a lecture at a web conference and afterward got into a fascinating conversation with a young digital design student. It was fun to compare where we were in our careers. I had fifteen years of experience designing for web clients, she had one year, and yet some how, we were in the same situation: we enjoyed the work, but were utterly confused and overwhelmed by the rapidly increasing complexity of it all. What the hell happened? (That’s a rhetorical question, of course.)&lt;/p&gt;
&lt;p&gt;It was a relief for both of us to mutually confess our frustration and confusion, and I began to wonder if this situation was something to laugh off or take seriously. Neither of us had an answer, but a bit of time and distance has shown me that we must do both. I’d like to extend that conversation today and attempt to capture my perspective on that confusion and what it costs us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section fade&quot; readability=&quot;34.757785467128&quot;&gt;
&lt;p&gt;Absence was the primary source of my confusion. Three years ago, I stopped making websites for clients to focus on &lt;a href=&quot;http://goabstract.com&quot;&gt;Abstract&lt;/a&gt;, a software company I co-founded. My work there finished at the beginning of last year, and after a little time off, I decided to reopen the design studio I was running beforehand.&lt;/p&gt;
&lt;p&gt;And wouldn’t you know it? The first few jobs through the door were websites. A lot can change in three years, so I decided to brush up on the latest developments in how to best make websites… and oh my…&lt;/p&gt;
&lt;p&gt;Things have gotten messy, haven’t they?&lt;/p&gt;
&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/whoa.png&quot; class=&quot;tinycentered&quot;/&gt;&lt;hr/&gt;&lt;p&gt;The complexity was off-putting at first. I was unsure if I even wanted tackle a website after seeing the current working methods. Eventually, I agreed to the projects. My gut told me that a lot of the new complexities in workflows, toolchains, and development methods are completely optional for many projects. That belief is the second thread of this talk: I’d like to make a modest defense of simple design and implementation as a better option for the web and the people who work there.&lt;/p&gt;
&lt;p&gt;But, I am getting ahead of myself. First, I should tell you a bit more about who I am and where I come from.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section black&quot; readability=&quot;58&quot;&gt;&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/cake.png&quot; class=&quot;tinycentered&quot;/&gt;&lt;p&gt;I run a boutique design studio, which is a pretentious way of saying that it’s tiny with a capital-T. The studio does all kinds of work: books, magazines, branding, and yes, of course, websites. This year is an anniversary. The studio is celebrating 15 years in business, and I’m personally celebrating 20 years of making websites. As with any big anniversary, you get sentimental about how things started.&lt;/p&gt;
&lt;p&gt;The studio began in 2002 as a man (that’s me) with a laptop and a stack of paper at a desk in the corner of his apartment.&lt;/p&gt;
&lt;p&gt;Fifteen years later, the studio is still a man with a laptop and a stack of paper at a desk in the corner of his apartment.&lt;/p&gt;
&lt;p&gt;It’s difficult to fathom how much has changed around the studio in the last 15 years. Back then, there were no social media as we know of them today—no Facebook, no Instagram, no snaps; most of the sites you visit today did not exist back then, and most of the sites we visited then do not exist now. There were no iPhones. You would go online to fetch directions and print out the map like a neanderthal. We were hitting rocks together trying to make graphic design.&lt;/p&gt;
&lt;p&gt;Everything is different now, but I am still at my desk.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;At first I was bummed about my studio’s lack of visible progress, but then it hit me: what if I nailed it? Why change if it’s working? I’ve been able to approach a lot of different projects from many different angles, and I’m happy to report that I’ve gotten pretty good at a lot of it! Time and practice really do help.&lt;/p&gt;
&lt;p&gt;Except with the websites. They separate themselves from the others, because I don’t feel much better at making them after 20 years. My knowledge and skills develop a bit, then things change, and half of what I know becomes dead weight. This hardly happens with any of the other work I do.&lt;/p&gt;
&lt;p&gt;I wonder if I have twenty years of experience making websites, or if it is really five years of experience, repeated four times. If you’ve been working in the technology industry a while, please tell me this sounds familiar to you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; readability=&quot;56&quot;&gt;
&lt;p&gt;Let me give you an example of these five year cycles.&lt;/p&gt;
&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/okcomputer.jpg&quot; class=&quot;tinycentered&quot;/&gt;&lt;p&gt;As I said, I made my first website 20 years ago. I know this because I was a teenager doing the Lord’s work: transcribing the lyrics to Radiohead’s &lt;em&gt;OK Computer&lt;/em&gt;. It was 1997, I was learning HTML, and there was one problem with the design that was confusing me:&lt;/p&gt;

&lt;p&gt;Twenty years later, we’re still working out the answer to that very basic question.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
&amp;lt;table&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;Hi&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;Mom&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Back in 1997, we used tables and spacer gifs. It was like designing a website in a spreadsheet from hell. I found this process fun for some reason. Perhaps I was fascinated by the potential of bashing together something in my room, hitting a button, then having it be “out there.”&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
{ float: left; }
&lt;/pre&gt;
&lt;p&gt;About five years later, websites moved to using floats in CSS because tables were not semantic. Fair enough! Since then, I’ve spent about 200 hours reading about how to get floats to clear. I’m still not sure I understand it; I type &lt;code&gt;clear: both&lt;/code&gt; and say a prayer to the box model.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
{ display: flex; }
&lt;/pre&gt;
&lt;p&gt;I was saved by Flexbox after five years of guess work. It is my baby. I was trained as a print designer, and with flexbox, I can type 3 or 4 lines of CSS, and have two blocks of text line up at the baseline. Hallelujah. I only needed to wait a decade to get this.&lt;/p&gt;
&lt;pre class=&quot;code&quot;&gt;
{ display: grid; }
&lt;/pre&gt;
&lt;p&gt;And now, after flexing with flexbox, along comes CSS Grid: a powerful new feature that promises to make responsive web design even more confusing. Of course, I am joking about this, because Grid is a big improvement in controlling layout on the web. But it is a bit spooky to sit down and learn more about it, because every time I see a diagram explaining how CSS Grid works...&lt;/p&gt;
&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/tables.gif&quot;/&gt;&lt;p&gt;I’m reminded of the table layouts I was doing in 1997. There’s a voice in the back of my head saying we’re stuck in a loop and it’s repeating. We’ve completed a lap on a cycle which will go around forever. Another approach for layout will come along five years from now, it will probably resemble floats, and not knowing how to clear a float will bite me in the ass for the second time in my career.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section realblack&quot; readability=&quot;45&quot;&gt;&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/understanding.gif&quot;/&gt;&lt;p&gt;There are similar examples of the cycle in other parts of how websites get designed and made. Nothing stays settled, so of course a person with one year of experience and one with fifteen years of experience can both be confused. Things are so often only understood by those who are well-positioned in the middle of the current wave of thought. If you’re before the sweet spot in the wave, your inexperience means you know nothing. If you are after, you will know lots of things that aren’t applicable to that particular way of doing things. I don’t bring this up to imply that the young are dumb or that the inexperienced are inept—of course they’re not. But remember: if you stick around in the industry long enough, you’ll get to feel all three situations.&lt;/p&gt;
&lt;p&gt;One argument says that continual change in methodology is rigorous and healthy. I agree. Keeping things in play helps us to more easily fix what’s wrong. It’d be terrible if nothing could ever change. But I also agree with the other argument: people only have so much patience. How many laps around the cycle can a person run? I’m on lap five now, and I can tell you that it is exhausting to engage with rehashed ideas from the past without feeling a tiny amount of prejudice against them.&lt;/p&gt;
&lt;p&gt;Methods that were once taboo are back on the table. For instance, last week I was reading a post about the benefits of not using stylesheets and instead having inline styles for everything. The post made a few compelling points, but this approach would have been crazy talk a few years ago.&lt;/p&gt;
&lt;p&gt;So much of how we build websites and software comes down to how we think. The churn of tools, methods, and abstractions also signify the replacement of ideology. A person must usually think in a way similar to the people who created the tools to successfully use them. It’s not as simple as putting down a screwdriver and picking up a wrench. A person needs to revise their whole frame of thinking; they must change their mind.&lt;/p&gt;
&lt;p&gt;In one way, it is easier to be inexperienced: you don’t have to learn what is no longer relevant. Experience, on the other hand, creates two distinct struggles: the first is to identify and unlearn what is no longer necessary (that’s work, too). The second is to remain open-minded, patient, and willing to engage with what’s new, even if it resembles a new take on something you decided against a long time ago.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; readability=&quot;49.604352126607&quot;&gt;&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/seuss.gif&quot;/&gt;&lt;p&gt;That spirit of willingness was in me when I was investigating everything that had changed in the last 3 years. I started with the best of intentions, but the more I learned, the grumpier I got. It seemed that most of the new methods involved setting up elaborate systems to automate parts of the work. This is fine for particularly complicated and large projects, but setting up the system and maintaining it seemed to be more effort for an experienced person on a small project than doing the work without it.&lt;/p&gt;
&lt;p&gt;The new methods were invented to manage a level of complexity that is completely foreign to me and my work. It was easy to back away from most of this new stuff when I realized I have alternate ways of managing complexity. Instead of changing my tools or workflow, I change my design. It’s like designing a house so it’s easy to build, instead of setting up cranes typically used for skyscrapers.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Directness is best in my experience, so a great photo, memorable illustration, or pitch-perfect sentence does most of the work. Beyond that, fancy implementation has never moved the needle much for my clients.&lt;/p&gt;
&lt;p&gt;My web design philosophy is no razzle-dazzle. My job is to help my clients identify and express the one or two uniquely true things about their project or company, then enhance it through a memorable design with a light touch. If complexity comes along, we focus in on it, look for patterns, and change the blueprint for what we’re building. We don’t necessarily go looking for better tools or fancier processes. In the past, I’ve called this following the &lt;a href=&quot;https://frankchimero.com/writing/the-webs-grain/&quot;&gt;grain of the web&lt;/a&gt;, which is to use design choices that swing with what HTML, CSS, and screens make easy, flexible, and resilient.&lt;/p&gt;
&lt;p&gt;It seems there are fewer and fewer notable websites built with this approach each year. So, I thought it would be useful remind everyone that the easiest and cheapest strategy for dealing with complexity is not to invent something to manage it, but to avoid the complexity altogether with a more clever plan.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section fade&quot; readability=&quot;52.390524379025&quot;&gt;
&lt;p&gt;To test how much complexity comes along with my limited needs, I wrote down the technical requirements of my web design practice. It’s not a long list:&lt;/p&gt;
&lt;h2&gt;simple, responsive layout&lt;br/&gt;web fonts and nicely set text&lt;br/&gt;performant, scalable images&lt;/h2&gt;
&lt;p&gt;All of these have been more than met for at least five years, but the complexity of even these very fundamental needs has ballooned in the last few years.&lt;/p&gt;
&lt;p&gt;For instance, I just showed you four different methods to put two things next to each other. Each new method mostly replaces the last, so hopefully we’re reaching a stabilization point with flexbox and CSS Grid. But who knows what will come out five years from now?&lt;/p&gt;
&lt;a href=&quot;https://abookapart.com/products/webfont-handbook&quot;&gt;&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/webfonts.jpg&quot; class=&quot;full&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Webfonts? I thought we could jot down a few lines with &lt;code&gt;@font-face&lt;/code&gt;, but &lt;a href=&quot;https://abookapart.com/products/webfont-handbook&quot;&gt;A Book Apart&lt;/a&gt; just published a 90 page e-book on how to load those fonts. This is totally surprising to me: I thought implementing webfonts was a relatively easy procedure, but I guess not!&lt;/p&gt;
&lt;a href=&quot;https://imgix.com&quot;&gt;&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/imgix.jpg&quot; class=&quot;full&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Even images are now complicated. Vector images get served as SVGs, but digging deep into this can make you go cross-eyed, because an SVG is essentially another web page to embed in your webpage. And with raster, the need to send along the best-sized image for the right device is complicated enough that &lt;a href=&quot;https://imgix.com&quot;&gt;paid services&lt;/a&gt; have come along to manage this for you. Serving an image is now as complicated as serving a video.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;My point is that the foundations are now sufficiently complicated enough on their own that it seems foolish to go add more optional complexity on top of it. I’ve kept my examples to the most basic of web implementations, and I haven’t touched on Javascript, animation, libraries, frameworks, pre-processors, package managers, automation, testing, or deployment. Whew.&lt;/p&gt;

&lt;p&gt;All of that bundled together is the popular way to work in 2018. But other people’s toolchains are absolutely inscrutable from the outside. Even getting started is touchy. Last month, I had to install a package manager to install a package manager. That’s when I closed my laptop and slowly backed away from it. We’re a long way from the CSS Zen Garden where I started.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; readability=&quot;49&quot;&gt;
&lt;p&gt;If you go talk to a senior software developer, you’ll probably hear them complain about spaghetti code. This is when code is overwrought, unorganized, opaque, and snarled with dependencies. I perked up when I heard the term used for the first time, because, while I can’t identify spaghetti code as a designer, I sure as hell know about spaghetti workflows and spaghetti toolchains. It feels like we’re there now on the web.&lt;/p&gt;
&lt;img src=&quot;https://frankchimero.com/images/trans.gif&quot; data-src=&quot;images/notepad.gif&quot; class=&quot;full&quot;/&gt;&lt;p&gt;That breaks my heart, because so much of my start on the web came from being able to see and easily make sense of any site I’d visit. I had view source, but each year that goes by, it becomes less and less helpful as a way to investigate other people’s work. Markup balloons in size and becomes illegible because computers are generating it without an eye for context. Styles become overly verbose and redundant to the point of confusion. Functionality gets obfuscated behind compressed Javascript.&lt;/p&gt;
&lt;p&gt;This situation is annoying to me, because my thoughts turn to that young designer I mentioned at the start of my talk. How many opportunities did I have to reproduce what I saw by having legible examples in front of me? And how detrimental is it to have that kind of information obfuscated for her? Before, the websites could explain themselves; now, someone needs to walk you through it.&lt;/p&gt;
&lt;p&gt;Illegibility comes from complexity without clarity. I believe that the legibility of the source is one of the most important properties of the web. It’s the main thing that keeps the door open to independent, unmediated contributions to the network. If you can write markup, you don’t need Medium or Twitter or Instagram (though they’re nice to have). And the best way to help someone &lt;em&gt;write&lt;/em&gt; markup is to make sure they can &lt;em&gt;read&lt;/em&gt; markup.&lt;/p&gt;
&lt;p&gt;I wonder what young designers think of this situation and how they are educating themselves in a complicated field. How do they learn if the code is illegible? Does it seem like more experienced people are pulling up the ladder of opportunity by doing this? Twenty years ago, I decided to make my own website, because I saw an example of HTML and I could read it. Many of my design peers are the same. We possess skills to make websites, but we stopped there. We stuck with markup and never progressed into full-on programming, because we were only willing to go as far as things were legible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section black&quot; readability=&quot;51&quot;&gt;
&lt;p&gt;If knowledge about the web deteriorates quickly, it’s worthwhile to develop a solid personal philosophy toward change and learning.&lt;/p&gt;
&lt;p&gt;Silicon Valley has tried to provide a few of these. All are about speed. The most famous comes from Facebook, with their “Move fast and break things” mantra. This phrase has been thrown under the bus enough times by now, but it is interesting that so few are willing to commit to its opposite: “Go slow and fix things.”&lt;/p&gt;
&lt;p&gt;Let me show you a video about speed.&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/u5QpfAUUxGc?rel=0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;This has been my favorite internet discovery of the last few months. I’ve watched it enough times to overthink it. See, the rabbit doesn’t lose because he gets tired. He loses because he gets confused about which direction to go. Did you notice how it stops in the middle and stares blankly as everyone around it yells loudly about things it doesn’t understand? That’s me on Twitter.&lt;/p&gt;
&lt;p&gt;As someone who has decades of experience on the web, I hate to compare myself to the tortoise, but hey, if it fits, it fits. Let’s be more like that tortoise: diligent, direct, and purposeful. The web needs pockets of slowness and thoughtfulness as its reach and power continues to increase. What we depend upon must be properly built and intelligently formed. We need to create space for complexity’s important sibling: nuance. Spaces without nuance tend to gravitate towards stupidity. And as an American, I can tell you, there are no limits to the amount of damage that can be inflicted by that dangerous cocktail of fast-moving-stupid.&lt;/p&gt;
&lt;p&gt;The web also needs diligent people so that the idea of what the web is and what it does remains legible to everyone. This applies to being able to read the systems and social environments the web creates so we know what’s real and what’s not, but the call for legibility should also humbly apply to writing legible code and designs systems that are easy for nearly anyone to interpret thanks to their elegance. That important work has a place, too.&lt;/p&gt;
&lt;p&gt;It’s by keeping our work legible that we keep the door open to the next generation of our co-workers. What works for them also works for us, because whether you are just out of school or have twenty years of experience, you’ll eventually end up in the same spot: your first year of making websites.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 10 Feb 2018 05:30:45 +0000</pubDate>
<dc:creator>josephscott</dc:creator>
<og:type>article</og:type>
<og:title>Everything Easy is Hard Again</og:title>
<og:description>Design and writing by Frank Chimero</og:description>
<og:url>https://www.frankchimero.com/writing/everything-easy-is-hard-again/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://frankchimero.com/writing/everything-easy-is-hard-again/</dc:identifier>
</item>
<item>
<title>PopcornNotify – Send simple emails and text messages from one API</title>
<link>https://popcornnotify.com/</link>
<guid isPermaLink="true" >https://popcornnotify.com/</guid>
<description>&lt;p class=&quot;indigo-text text-lighten-1&quot;&gt;The client libraries will look for an environment variable called &lt;code&gt;POPCORNNOTIFY_API_KEY&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;pre_block&quot;&gt;
&lt;code class=&quot;code_block language-bash grey lighten-5&quot;&gt;export POPCORNNOTIFY_API_KEY=&quot;abc123456&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p class=&quot;indigo-text text-lighten-1&quot;&gt;Or, you can pass your API key to notify as an argument.&lt;/p&gt;
&lt;pre class=&quot;pre_block&quot;&gt;
&lt;code class=&quot;code_block language-python grey lighten-5&quot;&gt;# python
notify('5555555555', 'Bork bork', api_key='*******')&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;pre_block&quot;&gt;
&lt;code class=&quot;code_block language-javascript grey lighten-5&quot;&gt;// javascript
notify('5555555555', 'Bork bork', {api_key:'*******'})&lt;/code&gt;
&lt;/pre&gt;
&lt;p class=&quot;hide indigo-text text-lighten-1&quot;&gt;API keys cost $45 for 12 months and 10,000 messages. &lt;a class=&quot;hide&quot; href=&quot;https://popcornnotify.com/account/create&quot;&gt;Buy an API key here.&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;indigo-text text-lighten-1&quot;&gt;Pricing: API keys cost $10 for each 1,000 messages and last one year.&lt;a class=&quot;hide&quot; href=&quot;https://popcornnotify.com/account/create&quot;&gt;Buy an API key here.&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 10 Feb 2018 02:17:16 +0000</pubDate>
<dc:creator>FriedPickles</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://popcornnotify.com/</dc:identifier>
</item>
<item>
<title>GitHub shouldn&amp;#039;t allow username reuse</title>
<link>https://donatstudios.com/GithubsTotalSecurityFacepalm</link>
<guid isPermaLink="true" >https://donatstudios.com/GithubsTotalSecurityFacepalm</guid>
<description>&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; In discussing this with people online, I’ve come to the conclusion that the bigger, more important issue is lack of &lt;strong&gt;permalinks&lt;/strong&gt; to repository instances. Path reuse, rather than username reuse.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;There is a very popular tool for embedding data files into your Go binaries called &lt;code&gt;go-bindata&lt;/code&gt;. Several days ago however the user who ran it, &quot;Jim Teeuwen&quot; (&lt;a href=&quot;https://web.archive.org/web/20150609210529/https://github.com/jteeuwen&quot;&gt;wayback machine&lt;/a&gt;), completely disappeared from the internet – deleting his Github account and personal domain in the process.&lt;/p&gt;
&lt;p&gt;While this is within his rights to do, this broke a dependency many people had within their projects.&lt;/p&gt;
&lt;p&gt;To fix this, some users of the project recreated the &lt;strong&gt;account&lt;/strong&gt; and the repository based on a fork of the project.&lt;/p&gt;
&lt;p&gt;They have an official announcement/disclosure here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jteeuwen/go-bindata/issues/5&quot;&gt;https://github.com/jteeuwen/go-bindata/issues/5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At the very least they are being honest about it.&lt;/p&gt;
&lt;p&gt;The fact that they were &lt;strong&gt;allowed&lt;/strong&gt; to do this however represents a fundamental flaw in Github's security model.&lt;/p&gt;
&lt;p&gt;Usernames, once deleted, should &lt;strong&gt;never&lt;/strong&gt; be allowed to be valid again. Many sites including Google do it this way.&lt;/p&gt;
&lt;p&gt;Allowing username reuse completely breaks any trust that what I pull is what it claims to be.&lt;/p&gt;
&lt;p&gt;What if this user had been malicious? It may have taken a while before someone actually noticed this wasn't the original user and the code was doing something more than it claimed to.&lt;/p&gt;
&lt;p&gt;While Go's &lt;code&gt;go get&lt;/code&gt; functionality is no doubt naive and just pulls the head of a repository, this is not exclusively Go's problem as this affects any &lt;strong&gt;package manager&lt;/strong&gt; that runs on tags. Simply tag malicious changes beyond the current release and it would be deployed to many users likely with little actual review.&lt;/p&gt;
&lt;p&gt;This should not be possible. This is scary and should be fixed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Many people are arguing that this is the developers fault or the package managers fault. I do not agree, but as far as I see it that doesn't matter anyway. The simple fact of the matter is that it &lt;em&gt;is&lt;/em&gt; being used like that, like it or not, and the simplest and I argue most correct fix is for Github to prevent the issue.&lt;/p&gt;
&lt;p&gt;I think another good option would be Github offering permalinks to repos, such that if they were deleted and recreated the pathing would change.&lt;/p&gt;
&lt;p&gt;It affects &lt;strong&gt;not only package managers&lt;/strong&gt; and programs and software, but humans. Humans navigating Github. I have no way to tell while navigating the site if a project is the original or a charade. That is a problem.&lt;/p&gt;
&lt;p&gt;As for the title change, I agreed with Hacker News that the original was a bit hyperbolic. I have a tendency to resort to hyperbole to get my emotional point across - and it doesn't always read correctly on the internet.&lt;/p&gt;
&lt;hr/&gt;
</description>
<pubDate>Fri, 09 Feb 2018 21:21:59 +0000</pubDate>
<dc:creator>donatj</dc:creator>
<og:title>GitHub Shouldn't Allow Username Reuse</og:title>
<og:image>https://donatstudios.com/images/site/JesseDonat.jpg</og:image>
<og:url>https://donatstudios.com/GithubsTotalSecurityFacepalm</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://donatstudios.com/GithubsTotalSecurityFacepalm</dc:identifier>
</item>
<item>
<title>Greedy, Brittle, Opaque, and Shallow: The Downsides to Deep Learning</title>
<link>https://www.wired.com/story/greedy-brittle-opaque-and-shallow-the-downsides-to-deep-learning/</link>
<guid isPermaLink="true" >https://www.wired.com/story/greedy-brittle-opaque-and-shallow-the-downsides-to-deep-learning/</guid>
<description>&lt;p&gt;&lt;span class=&quot;lede&quot;&gt;Sundar Pichai, the&lt;/span&gt; chief executive of Google, &lt;a href=&quot;https://www.recode.net/2018/1/19/16911180/sundar-pichai-google-fire-electricity-ai&quot; target=&quot;_blank&quot;&gt;has said that&lt;/a&gt; AI “is more profound than … electricity or fire.” Andrew Ng, who founded Google Brain and now invests in AI startups, &lt;a href=&quot;https://hbr.org/2016/11/what-artificial-intelligence-can-and-cant-do-right-now&quot; target=&quot;_blank&quot;&gt;wrote that&lt;/a&gt; “If a typical person can do a mental task with less than one second of thought, we can probably automate it using AI either now or in the near future.”&lt;/p&gt;
&lt;p&gt;Their enthusiasm is pardonable. There have been remarkable advances in &lt;a href=&quot;https://www.wired.com/story/guide-artificial-intelligence/&quot;&gt;AI&lt;/a&gt;, after decades of frustration. Today we can tell a voice-activated personal assistant like &lt;a href=&quot;https://www.wired.com/tag/alexa&quot;&gt;Alexa&lt;/a&gt; to “Play the band &lt;a href=&quot;https://www.youtube.com/watch?v=jlbunmCbTBA&quot; target=&quot;_blank&quot;&gt;Television&lt;/a&gt;,” or count on Facebook to tag our photographs; Google Translate is often almost as accurate as a human translator. Over the last half decade, billions of dollars in research funding and venture capital have flowed towards AI; it is the hottest course in computer science programs at MIT and Stanford. In Silicon Valley, newly minted AI specialists &lt;a href=&quot;https://www.nytimes.com/2017/10/22/technology/artificial-intelligence-experts-salaries.html&quot; target=&quot;_blank&quot;&gt;command&lt;/a&gt; half a million dollars in salary and stock.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;But there are many things that people can do quickly that smart machines cannot. Natural language is beyond deep learning; new situations baffle artificial intelligences, like cows brought up short at a cattle grid. None of these shortcomings is likely to be solved soon. Once you’ve seen you’ve seen it, you can’t un-see it: deep learning, now the dominant technique in artificial intelligence, will not lead to an AI that abstractly reasons and generalizes about the world. By itself, it is unlikely to automate ordinary human activities.&lt;/p&gt;
&lt;div class=&quot;inset-left-component paywall&quot; readability=&quot;15.514018691589&quot;&gt;

&lt;p name=&quot;inset-left&quot; class=&quot;inset-left-component__el&quot;&gt;Jason Pontin (&lt;a href=&quot;https://twitter.com/jason_pontin&quot; target=&quot;_blank&quot;&gt;@jason_pontin&lt;/a&gt;) is an Ideas contributor for WIRED. He is a senior partner at Flagship Pioneering, a firm in Boston that creates, builds, and funds companies that solve problems in health, food, and sustainability. From 2004 to 2017 he was the editor in chief and publisher of &lt;em&gt;MIT Technology Review&lt;/em&gt;. Before that he was the editor of &lt;em&gt;Red Herring&lt;/em&gt; magazine, a business magazine that was popular during the dot-com boom.&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;paywall&quot;&gt;To see why modern AI is good at a few things but bad at everything else, it helps to understand how deep learning works. Deep learning is math: a statistical method where computers learn to classify patterns using neural networks. Such networks possess inputs and outputs, a little like the neurons in our own brains; they are said to be “deep” when they possess multiple hidden layers that contain many nodes, with a blooming multitude of connections. Deep learning employs an algorithm called backpropagation, or backprop, that adjusts the mathematical weights between nodes, so that an input leads to the right output. In speech recognition, the phonemes c-a-t should spell the word “cat;” in image recognition, a photograph of a cat must not be labeled “a dog;” in translation, &lt;em&gt;qui canem et faelem ut deos colunt&lt;/em&gt; should spit out “who worship dogs and cats as gods.” Deep learning is “supervised” when neural nets are trained to recognize phonemes, photographs, or the relation of Latin to English using millions or billions of prior, laboriously labeled examples.&lt;/p&gt;

&lt;p class=&quot;paywall&quot;&gt;Deep learning’s advances are the product of pattern recognition: neural networks memorize classes of things and more-or-less reliably know when they encounter them again. But almost all the interesting problems in cognition aren’t classification problems at all. “People naively believe that if you take deep learning and scale it 100 times more layers, and add 1000 times more data, a neural net will be able to do anything a human being can do,” says François Chollet, a researcher at Google. “But that’s just not true.”&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;Gary Marcus, a professor of cognitive psychology at NYU and briefly director of Uber’s AI lab, recently published a remarkable trilogy of essays, offering a &lt;a href=&quot;https://arxiv.org/pdf/1801.00631.pdf&quot; target=&quot;_blank&quot;&gt;critical appraisal&lt;/a&gt; of deep learning. Marcus believes that deep learning is not “a universal solvent, but one tool among many.” And without new approaches, Marcus worries that AI is rushing toward a wall, beyond which lie all the problems that pattern recognition cannot solve. His views are quietly shared with varying degrees of intensity by most leaders in the field, with the exceptions of Yann LeCun, the director of AI research at Facebook, who curtly dismissed the argument as “all wrong,” and Geoffrey Hinton, a professor emeritus at the University of Toronto and the &lt;a href=&quot;http://www.cs.toronto.edu/~hinton/absps/pdp8.pdf&quot; target=&quot;_blank&quot;&gt;grandfather of backpropagation&lt;/a&gt;, who sees “no evidence” of a looming obstacle.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;According to skeptics like Marcus, deep learning is greedy, brittle, opaque, and shallow. The systems are greedy because they demand huge sets of training data. Brittle because when a neural net is given a “transfer test”—confronted with scenarios that differ from the examples used in training—it cannot contextualize the situation and frequently breaks. They are opaque because, unlike traditional programs with their formal, debuggable code, the parameters of neural networks can only be interpreted in terms of their weights within a mathematical geography. Consequently, they are black boxes, whose outputs cannot be explained, raising doubts about their reliability and biases. Finally, they are shallow because they are programmed with little innate knowledge and possess no common sense about the world or human psychology.&lt;/p&gt;

&lt;p class=&quot;paywall&quot;&gt;These limitations mean that a lot of automation will prove more elusive than AI hyperbolists imagine. “A self-driving car can drive millions of miles, but it will eventually encounter something new for which it has no experience,” explains Pedro Domingos, the author of &lt;em&gt;The Master Algorithm&lt;/em&gt; and a professor of computer science at the University of Washington. “Or consider robot control: A robot can learn to pick up a bottle, but if it has to pick up a cup, it starts from scratch.” In January, &lt;a href=&quot;https://www.wired.com/story/facebooks-virtual-assistant-m-is-dead-so-are-chatbots/&quot;&gt;Facebook abandoned M&lt;/a&gt;, a text-based virtual assistant that used humans to supplement and train a deep learning system, but never offered useful suggestions or employed language naturally.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;What’s wrong? “It must be that we have a better learning algorithm in our heads than anything we’ve come up with for machines,” Domingos says. We need to invent better methods of machine learning, skeptics aver. The remedy for artificial intelligence, according to Marcus, is syncretism: combining deep learning with unsupervised learning techniques that don’t depend so much on labeled training data, as well as the old-fashioned description of the world with logical rules that dominated AI before the rise of deep learning. Marcus claims that our best model for intelligence is ourselves, and humans think in many different ways. His young children could learn general rules about language, and without many examples, but they were also born with innate capacities. “We are born knowing there are causal relationships in the world, that wholes can be made of parts, and that the world consists of places and objects that persist in space and time,” he says. “No machine ever learned &lt;em&gt;any&lt;/em&gt; of that stuff using backprop.”&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;Other researchers have different ideas. “We’ve used the same basic paradigms [for machine learning] since the 1950s,” says Pedro Domingos, “and at the end of the day, we’re going to need some new ideas.” Chollet looks for inspiration in &lt;a href=&quot;https://blog.keras.io/the-future-of-deep-learning.html&quot; target=&quot;_blank&quot;&gt;program synthesis&lt;/a&gt;, programs that automatically create other programs. Hinton’s current research explores an idea he calls “&lt;a href=&quot;https://openreview.net/pdf?id=HJWLfGWRb&quot; target=&quot;_blank&quot;&gt;capsules&lt;/a&gt;,” which preserves backpropagation, the algorithm for deep learning, but addresses some of its limitations.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;“There are a lot of core questions in AI that are completely unsolved,” says Chollet, “and even largely unasked.” We must answer these questions because there are tasks that a lot of humans don’t want to do, such as cleaning toilets and classifying pornography, or which intelligent machines would do better, such as discovering drugs to treat diseases. More: there are things that we can’t do at all, most of which we cannot yet imagine.&lt;/p&gt;
&lt;hr class=&quot;paywall&quot;/&gt;&lt;h3 class=&quot;paywall&quot;&gt;AI Anxieties&lt;/h3&gt;
&lt;ul class=&quot;paywall&quot; readability=&quot;1.2229299363057&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;You can stop panicking about a superhuman AI. As Kevin Kelly writes, &lt;a href=&quot;https://www.wired.com/2017/04/the-myth-of-a-superhuman-ai/&quot;&gt;that’s a myth&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Another worry you can cross off your list? The fear that robots will take all of our jobs. It’s &lt;a href=&quot;https://www.wired.com/2017/08/robots-will-not-take-your-job/&quot;&gt;not nearly that simple&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;But AI is becoming an ever-more integral factor in the future of work. Say hello to &lt;a href=&quot;https://www.wired.com/story/welcome-to-the-era-of-the-ai-coworker/&quot;&gt;your new AI coworkers&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;paywall&quot;&gt;&lt;em&gt;Photograph by WIRED/Getty Images&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 09 Feb 2018 21:15:51 +0000</pubDate>
<dc:creator>monsieurpng</dc:creator>
<og:type>article</og:type>
<og:title>AI Won't Be Quite the Revolution You Expect</og:title>
<og:description>We've been promised a revolution in how and why nearly everything happens. But the limits of modern artificial intelligence are closer than we think.</og:description>
<og:image>https://media.wired.com/photos/5a73cb708407557df12ab978/191:100/pass/ideas_ai_challenges-01.jpg</og:image>
<og:url>https://www.wired.com/story/greedy-brittle-opaque-and-shallow-the-downsides-to-deep-learning/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wired.com/story/greedy-brittle-opaque-and-shallow-the-downsides-to-deep-learning/</dc:identifier>
</item>
</channel>
</rss>