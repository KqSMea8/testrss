<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Google tracks your movements, like it or not</title>
<link>https://apnews.com/f60bc112665b458cb6473d7ee9492932</link>
<guid isPermaLink="true" >https://apnews.com/f60bc112665b458cb6473d7ee9492932</guid>
<description>&lt;p&gt;SAN FRANCISCO (AP) — Google wants to know where you go so badly that it records your movements even when you explicitly tell it not to.&lt;/p&gt;
&lt;p&gt;An Associated Press investigation found that many Google services on Android devices and iPhones store your location data even if you've used privacy settings that say they will prevent it from doing so.&lt;/p&gt;
&lt;p&gt;Computer-science researchers at Princeton confirmed these findings at the AP's request.&lt;/p&gt;

&lt;p&gt;For the most part, Google is upfront about asking permission to use your location information. An app like Google Maps will remind you to allow access to location if you use it for navigating. If you agree to let it record your location over time, Google Maps will display that history for you in a &quot;timeline&quot; that maps out your daily movements.&lt;/p&gt;
&lt;p&gt;Storing your minute-by-minute travels carries privacy risks and has been used by police to determine the location of suspects — such as a warrant that police in Raleigh, North Carolina, &lt;a href=&quot;https://www.wral.com/Raleigh-police-search-google-location-history/17377435/&quot;&gt;served on Google last year&lt;/a&gt; to find devices near a murder scene. So the company will let you &quot;pause&quot; a setting called Location History.&lt;/p&gt;
&lt;p&gt;Google says that will prevent the company from remembering where you've been. Google's &lt;a href=&quot;https://support.google.com/accounts/answer/3118687?hl=en&quot;&gt;support page on the subject&lt;/a&gt; states: &quot;You can turn off Location History at any time. With Location History off, the places you go are no longer stored.&quot;&lt;/p&gt;
&lt;p&gt;That isn't true. Even with Location History paused, some Google apps automatically store time-stamped location data without asking.&lt;/p&gt;
&lt;p&gt;For example, Google stores a snapshot of where you are when you merely open its Maps app. Automatic daily weather updates on Android phones pinpoint roughly where you are. And some searches that have nothing to do with location, like &quot;chocolate chip cookies,&quot; or &quot;kids science kits,&quot; pinpoint your precise latitude and longitude — accurate to the square foot — and save it to your Google account.&lt;/p&gt;
&lt;p&gt;The privacy issue affects some two billion users of devices that run Google's Android operating software and hundreds of millions of worldwide iPhone users who rely on Google for maps or search.&lt;/p&gt;
&lt;p&gt;Storing location data in violation of a user's preferences is wrong, said Jonathan Mayer, a Princeton computer scientist and former chief technologist for the Federal Communications Commission's enforcement bureau. A researcher from Mayer's lab confirmed the AP's findings on multiple Android devices; the AP conducted its own tests on several iPhones that found the same behavior.&lt;/p&gt;

&lt;p&gt;&quot;If you're going to allow users to turn off something called 'Location History,' then all the places where you maintain location history should be turned off,&quot; Mayer said. &quot;That seems like a pretty straightforward position to have.&quot;&lt;/p&gt;
&lt;p&gt;Google says it is being perfectly clear.&lt;/p&gt;
&lt;p&gt;&quot;There are a number of different ways that Google may use location to improve people's experience, including: Location History, Web and App Activity, and through device-level Location Services,&quot; a Google spokesperson said in a statement to the AP. &quot;We provide clear descriptions of these tools, and robust controls so people can turn them on or off, and delete their histories at any time.&quot;&lt;/p&gt;
&lt;p&gt;To stop Google from saving these location markers, the company says, users can turn off another setting, one that does not specifically reference location information. Called &quot;Web and App Activity&quot; and enabled by default, that setting stores a variety of information from Google apps and websites to your Google account.&lt;/p&gt;
&lt;p&gt;When paused, it will prevent activity on any device from being saved to your account. But leaving &quot;Web &amp;amp; App Activity&quot; on and turning &quot;Location History&quot; off only prevents Google from adding your movements to the &quot;timeline,&quot; its visualization of your daily travels. It does not stop Google's collection of other location markers.&lt;/p&gt;
&lt;p&gt;You can delete these location markers by hand, but it's a painstaking process since you have to select them individually, unless you want to delete all of your stored activity.&lt;/p&gt;
&lt;p&gt;You can see the stored location markers on a page in your Google account at myactivity.google.com, although they're typically scattered under several different headers, many of which are unrelated to location.&lt;/p&gt;
&lt;p&gt;To demonstrate how powerful these other markers can be, the AP created &lt;a href=&quot;https://interactives.ap.org/google-location-tracking/&quot;&gt;a visual map&lt;/a&gt; of the movements of Princeton postdoctoral researcher Gunes Acar, who carried an Android phone with Location history off, and shared a record of his Google account.&lt;/p&gt;
&lt;p&gt;The map includes Acar's train commute on two trips to New York and visits to The High Line park, Chelsea Market, Hell's Kitchen, Central Park and Harlem. To protect his privacy, The AP didn't plot the most telling and frequent marker — his home address.&lt;/p&gt;
&lt;p&gt;Huge tech companies are under increasing scrutiny over their data practices, following a series of privacy scandals at Facebook and new data-privacy rules recently adopted by the European Union. Last year, the business news site Quartz found that Google was &lt;a href=&quot;https://qz.com/1131515/google-collects-android-users-locations-even-when-location-services-are-disabled/&quot;&gt;tracking Android users&lt;/a&gt; by collecting the addresses of nearby cellphone towers even if all location services were off. Google changed the practice and insisted it never recorded the data anyway.&lt;/p&gt;
&lt;p&gt;Critics say Google's insistence on tracking its users' locations stems from its drive to boost advertising revenue.&lt;/p&gt;
&lt;p&gt;&quot;They build advertising information out of data,&quot; said Peter Lenz, the senior geospatial analyst at Dstillery, a rival advertising technology company. &quot;More data for them presumably means more profit.&quot;&lt;/p&gt;
&lt;p&gt;The AP learned of the issue from K. Shankari, a graduate researcher at UC Berkeley who studies the commuting patterns of volunteers in order to help urban planners. She noticed that her Android phone prompted her to rate a shopping trip to Kohl's, even though she had turned Location History off.&lt;/p&gt;
&lt;p&gt;&quot;So how did Google Maps know where I was?&quot; she asked in a &lt;a href=&quot;https://rise.cs.berkeley.edu/blog/the-right-to-not-be-tracked-a-spotlight-on-google-maps-and-android-location-tracking/&quot;&gt;blog post&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;The AP wasn't able to recreate Shankari's experience exactly. But its attempts to do so revealed Google's tracking. The findings disturbed her.&lt;/p&gt;
&lt;p&gt;&quot;I am not opposed to background location tracking in principle,&quot; she said. &quot;It just really bothers me that it is not explicitly stated.&quot;&lt;/p&gt;
&lt;p&gt;Google offers a more accurate description of how Location History actually works in a place you'd only see if you turn it off — a popup that appears when you &quot;pause&quot; Location History on your &lt;a href=&quot;https://myaccount.google.com/activitycontrols&quot;&gt;Google account webpage&lt;/a&gt; . There the company notes that &quot;some location data may be saved as part of your activity on other Google services, like Search and Maps.&quot;&lt;/p&gt;
&lt;p&gt;Google offers additional information in a popup that appears if you re-activate the &quot;Web &amp;amp; App Activity&quot; setting — an uncommon action for many users, since this setting is on by default. That popup states that, when active, the setting &quot;saves the things you do on Google sites, apps, and services ... and associated information, like location.&quot;&lt;/p&gt;
&lt;p&gt;Warnings when you're about to turn Location History off via Android and iPhone device settings are more difficult to interpret. On Android, the popup explains that &quot;places you go with your devices will stop being added to your Location History map.&quot; On the iPhone, it simply reads, &quot;None of your Google apps will be able to store location data in Location History.&quot;&lt;/p&gt;
&lt;p&gt;The iPhone text is technically true if potentially misleading. With Location History off, Google Maps and other apps store your whereabouts in a section of your account called &quot;My Activity,&quot; not &quot;Location History.&quot;&lt;/p&gt;
&lt;p&gt;Since 2014, Google has let advertisers track the effectiveness of online ads at &lt;a href=&quot;https://youtu.be/qqAz09YcN3E&quot;&gt;driving foot traffic&lt;/a&gt; , a feature that Google has said relies on user location histories.&lt;/p&gt;
&lt;p&gt;The company is pushing further into such location-aware tracking to drive ad revenue, which rose 20 percent last year to $95.4 billion. At a Google Marketing Live summit in July, Google executives &lt;a href=&quot;https://youtu.be/MmfaZV96x7A?t=51m1s&quot;&gt;unveiled a new tool&lt;/a&gt; called &quot;local campaigns&quot; that dynamically uses ads to boost in-person store visits. It says it can measure how well a campaign drove foot traffic with data pulled from Google users' location histories.&lt;/p&gt;
&lt;p&gt;Google also says location records stored in My Activity are used to target ads. Ad buyers can target ads to specific locations — say, a mile radius around a particular landmark — and typically have to pay more to reach this narrower audience.&lt;/p&gt;
&lt;p&gt;While disabling &quot;Web &amp;amp; App Activity&quot; will stop Google from storing location markers, it also prevents Google from storing information generated by searches and other activity. That can limit the effectiveness of the Google Assistant, the company's digital concierge.&lt;/p&gt;
&lt;p&gt;Sean O'Brien, a Yale Privacy Lab researcher with whom the AP shared its findings, said it is &quot;disingenuous&quot; for Google to continuously record these locations even when users disable Location History. &quot;To me, it's something people should know,&quot; he said.&lt;/p&gt;
&lt;p&gt;___&lt;/p&gt;
&lt;p&gt;AP Interactive: https://interactives.ap.org/google-location-tracking/&lt;/p&gt;
</description>
<pubDate>Mon, 13 Aug 2018 11:34:54 +0000</pubDate>
<dc:creator>tombrossman</dc:creator>
<og:url>https://apnews.com/f60bc112665b458cb6473d7ee9492932</og:url>
<og:image>https://apnews.com/dist/assets/images/Twitterlogo.png</og:image>
<og:type>article</og:type>
<og:title>AP Exclusive: Google tracks your movements, like it or not</og:title>
<og:description> SAN FRANCISCO (AP) — Google wants to know where you go so badly that it records your movements even when you explicitly tell it not to. An Associated Press investiga</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://apnews.com/f60bc112665b458cb6473d7ee9492932</dc:identifier>
</item>
<item>
<title>Exapunks</title>
<link>http://www.zachtronics.com/exapunks/</link>
<guid isPermaLink="true" >http://www.zachtronics.com/exapunks/</guid>
<description>&lt;div class=&quot;col-sm-7&quot; readability=&quot;9.1605351170569&quot;&gt;
&lt;h4&gt;&lt;a href=&quot;http://www.zachtronics.com/virtualnetwork/&quot;&gt;Axiom VirtualNetwork+ Scripting Reference&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;July 16, 2018&lt;/p&gt;
&lt;p&gt;Axiom VirtualNetwork+ is the EXAPUNKS custom puzzle creation tool. Custom puzzles (or &quot;virtual networks&quot;) are written in JavaScript and use these API functions to create hosts, files, and registers and specify goals and puzzle logic.&lt;/p&gt;
&lt;p class=&quot;read-more&quot;&gt;&lt;a href=&quot;http://www.zachtronics.com/virtualnetwork/&quot; class=&quot;btn btn-primary&quot;&gt;READ MORE&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;col-sm-5&quot;&gt;&lt;a href=&quot;http://www.zachtronics.com/virtualnetwork/&quot;&gt;&lt;img src=&quot;http://www.zachtronics.com/exapunks/link1.jpg&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 12 Aug 2018 22:45:32 +0000</pubDate>
<dc:creator>yumaikas</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.zachtronics.com/exapunks/</dc:identifier>
</item>
<item>
<title>Dijkstra&amp;#039;s in Disguise</title>
<link>https://blog.evjang.com/2018/08/dijkstras.html</link>
<guid isPermaLink="true" >https://blog.evjang.com/2018/08/dijkstras.html</guid>
<description>&lt;div&gt;You can find a PDF version of this blog post &lt;a href=&quot;https://drive.google.com/open?id=1QrS7iY3rZ7glCCG1n-vv6367-fyr3wha&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;

A weighted graph is a data structure consisting of some vertices and edges, and each edge has an associated cost of traversal. Let's suppose we want to compute the shortest distance from vertex $u$ to every other vertex $v$ in the graph, and we express this cost function as $\mathcal{L}_u(v)$.&lt;br/&gt;
&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-e8hRuEJte-g/W2qJ98TIFrI/AAAAAAAAKR4/oIluXwEqZtUAir5O0KcTdHWWGAomVYjqACLcBGAs/s1600/graph.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;484&quot; data-original-width=&quot;600&quot; height=&quot;258&quot; src=&quot;https://4.bp.blogspot.com/-e8hRuEJte-g/W2qJ98TIFrI/AAAAAAAAKR4/oIluXwEqZtUAir5O0KcTdHWWGAomVYjqACLcBGAs/s320/graph.png&quot; width=&quot;320&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;For example, if each edge in this graph has cost $1$, $\mathcal{L}_u(v) = 3$.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br/&gt;&lt;div&gt;Dijkstra's, Bellman-Ford, Johnson's, Floyd-Warshall are good algorithms for solving the shortest paths problem. They all share the principle of &lt;strong&gt;relaxation&lt;/strong&gt;, whereby costs are initially &lt;em&gt;overestimated&lt;/em&gt; for all vertices and gradually corrected for using a &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Consistent_heuristic&quot;&gt;consistent heuristic&lt;/a&gt;&lt;/strong&gt; on edges (the term &quot;relaxation&quot; in the context of graph traversal is not be confused with &quot;relaxation&quot; as used in an optimization context, e.g. integer linear programs). The heuristic can be expressed in plain language as follows:&lt;br/&gt;

&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-nG9KXkowI60/W2qKqE8HbSI/AAAAAAAAKSA/wsh6A2MTV-wyMTR66jvJ5kSi1jRYoo7uQCLcBGAs/s1600/bellmanford.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1045&quot; data-original-width=&quot;1432&quot; height=&quot;466&quot; src=&quot;https://4.bp.blogspot.com/-nG9KXkowI60/W2qKqE8HbSI/AAAAAAAAKSA/wsh6A2MTV-wyMTR66jvJ5kSi1jRYoo7uQCLcBGAs/s640/bellmanford.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;It turns out that many algorithms I've encountered in my &lt;strong&gt;computer graphics&lt;/strong&gt;, &lt;strong&gt;finance&lt;/strong&gt;, and &lt;strong&gt;reinforcement learning&lt;/strong&gt; studies are all variations of this relaxation principle in disguise. It's quite remarkable (embarrassing?) that so much of my time has been spent on such a humble technique taught in introductory computer science courses!&lt;/div&gt;

&lt;div&gt;This blog post is a gentle tutorial on how all these varied CS topics are connected. No prior knowledge of finance, reinforcement learning, or computer graphics is needed. The reader should be familiar with undergraduate probability theory, introductory calculus, and be willing to look at some math equations. I've also sprinkled in some insights and questions that might be interesting to the AI research audience, so hopefully there's something for everybody here.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;Bellman-Ford&lt;/h2&gt;

&lt;div&gt;
&lt;div&gt;Here's a quick introduction to Bellman-Ford, which is actually easier to understand than the famous Dijkstra's Algorithm.&lt;/div&gt;

&lt;div&gt;Given a graph with $N$ vertices and costs $\mathcal{E}(s, v)$ associated with each directed edge $s \to v$, we want to find the cost of the shortest path from a source vertex $u$ to each other vertex $v$. The algorithm proceeds as follows: The cost to reach $u$ from itself is initialized to $0$, and all the other vertices have distances initialized to infinity. &lt;/div&gt;

&lt;div&gt;The relaxation step (described in the previous section) is performed across all edges in any order for each iteration. The correct distances from $u$ are guaranteed to have propagated completely to all vertices after $N-1$ iterations, since the longest of the shortest paths contain at most $N$ unique vertices. If the relaxation condition indicates there are &lt;em&gt;still yet&lt;/em&gt; shorter paths after $N$ iterations, it implies the presence of a cycle whose total cost is negative. You can find a nice animation of the Bellman-Ford algorithm &lt;a href=&quot;https://visualgo.net/en/sssp&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;

&lt;div&gt;Below is the pseudocode:&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-jgmHtJTrJSg/W2qLKxak0QI/AAAAAAAAKSI/OOW07l9Cy5cZkUh5b3YQculdblDtFPiSgCLcBGAs/s1600/bellmanford_pseudocode.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;570&quot; data-original-width=&quot;834&quot; height=&quot;272&quot; src=&quot;https://2.bp.blogspot.com/-jgmHtJTrJSg/W2qLKxak0QI/AAAAAAAAKSI/OOW07l9Cy5cZkUh5b3YQculdblDtFPiSgCLcBGAs/s400/bellmanford_pseudocode.png&quot; width=&quot;400&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;&lt;br/&gt;Currency Arbitrage&lt;/h2&gt;

&lt;div&gt;Admittedly, all this graph theory seems sort of abstract and boring at first. But would it still be boring if I told you that &lt;em&gt;efficiently detecting negative cycles in graphs is a multi-billion dollar business&lt;/em&gt;? &lt;/div&gt;

&lt;div&gt;The foreign exchange (FX) market, where one currency is traded for another, is the largest market in the world, with about 5 trillion USD being traded every day. This market determines the exchange rate for local currencies when you travel abroad. Let's model a currency exchange's order book (the ledger of pending transactions) as a graph:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;Each vertex represents a currency (e.g. JPY, USD, BTC).&lt;/li&gt;
&lt;li&gt;Each directed edge represents the conversion of currency $A$ to currency $B$.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;div&gt;An &lt;strong&gt;arbitrage opportunity&lt;/strong&gt; exists if the product of exchange rates in a cycle exceeds $1$, which means that you can start with 1 unit of currency $A$, trade your way around the graph back to currency $A$, and then end up with more than 1 unit of $A$!&lt;/div&gt;

&lt;div&gt;To see how this is related to the Bellman-Ford algorithm, let each currency pair $(A, B)$ with conversion rate $\frac{B}{A}$ be represented as a directed edge from $A$ to $B$ with edge weight $\mathcal{E}(A,B) = \log \frac{A}{B}$. Rearranging the terms,&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-S71IFf8KEOo/W3EP5WEIy7I/AAAAAAAAKXE/WcH8vVfXJSkk8_LBvqjTapz6d8nEg0P9ACLcBGAs/s1600/arb.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;599&quot; data-original-width=&quot;1432&quot; height=&quot;266&quot; src=&quot;https://1.bp.blogspot.com/-S71IFf8KEOo/W3EP5WEIy7I/AAAAAAAAKXE/WcH8vVfXJSkk8_LBvqjTapz6d8nEg0P9ACLcBGAs/s640/arb.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br/&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;div&gt;The above algebra shows that if the sum of edge weights in a cycle is negative, it is equivalent to the product of exchange rates exceeding $1$. The Bellman-Ford algorithm can be directly applied to detect currency arbitrage opportunities! This also applies to all fungible assets in general, but currencies tend to be the most strongly-connected vertices in the graph representing the financial markets.&lt;/div&gt;

&lt;div&gt;In my sophomore year of college, I caught the cryptocurrency bug and set out to build an automated arbitrage bot for scraping these opportunities in exchanges. Cryptocurrencies - being unregulated speculative digital assets - are ripe for cross-exchange arbitrage opportunities:&lt;/div&gt;

&lt;div&gt;
&lt;ul&gt;&lt;li&gt;Inter-exchange transaction costs are low (assets are ironically centralized into hot and cold wallets).&lt;/li&gt;
&lt;li&gt;Lots of speculative activity, whose bias generates lots of mispricing.&lt;/li&gt;
&lt;li&gt;Exchange APIs expose much more order book depth and require no license to trade cryptos. With a spoonful of Python and a little bit of initial capital, you can trade nearly any crypto you want across dozens of exchanges..&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;Now we have a way to automatically detect mispricings in markets and end up with more money than we started with. Do we have a money printing machine yet? &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-EVlma4GrbwA/W2qMTxrHCEI/AAAAAAAAKSY/v9fNzEwSovs_HKvNezy6OIjXM7afx0AEQCLcBGAs/s1600/scrooge.jpg&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;562&quot; data-original-width=&quot;1000&quot; height=&quot;358&quot; src=&quot;https://1.bp.blogspot.com/-EVlma4GrbwA/W2qMTxrHCEI/AAAAAAAAKSY/v9fNzEwSovs_HKvNezy6OIjXM7afx0AEQCLcBGAs/s640/scrooge.jpg&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;div&gt;

&lt;div&gt;Not so fast! A lot of things can still go wrong. Exchange rates fluctuate over time and other people are competing for the same trade, so the chances of executing all legs of the arbitrage are by no means certain. &lt;/div&gt;

&lt;div&gt;Execution of trading strategies is an entire research area on its own, and can be likened to crossing a frozen lake as quickly as possible. Each intermediate currency position, or &quot;leg'', in an arbitrage strategy is like taking a cautious step forward. One must be able to forecast the stability of each step and know what steps proceed after, or else one can get &quot;stuck'' holding a lot of a currency that gives out like thin ice and becomes worthless. Often the profit opportunity is not big enough to justify the risk of crossing that lake.&lt;/div&gt;

&lt;div&gt;Simply taking the greedy minimum among all edge costs does not take into account the probability of various outcomes happening in the market. The &lt;em&gt;right&lt;/em&gt; way to structure this problem is to think about edge weights being random variables that change over time. In order to compute the expected cost, we need to integrate over all possible path costs that can manifest. Hold this thought, as we will need to introduce some more terminology in the next few sections.&lt;/div&gt;

&lt;div&gt;While the arbitrage system I implemented was capable of detecting arb opportunities, I never got around to fully automating the execution and order confirmation subsystems. Unfortunately, I got some coins stolen and lost interest in cryptos shortly after. To execute arb opportunities quickly and cheaply I had to keep small BTC/LTC/DOGE positions in each exchange, but sometimes exchanges would just vanish into thin air. Be careful of what you wish for, or you just might find your money &quot;decentralized'' from your wallet! &lt;/div&gt;

&lt;/div&gt;
&lt;h2&gt;Directional Shortest-Path&lt;/h2&gt;

&lt;div&gt;
&lt;div&gt;Let's introduce another cost function, the &lt;strong&gt;directional shortest path&lt;/strong&gt; $\mathcal{L}_u(v, s \to v)$, that computes the shortest path from $u$ to $v$, where the last traversed edge is from $s \to v$. Just like making a final stop at the bathroom $s$ before boarding an airplane $v$.&lt;/div&gt;

&lt;div&gt;Note that the original &lt;em&gt;shortest path cost&lt;/em&gt; $\mathcal{L}_u(v)$ is equivalent to the smallest directional &lt;em&gt;shortest path cost&lt;/em&gt; among all of $v$'s neighboring vertices, i.e. $\mathcal{L}_u(v) = \min_{s} \mathcal{L}_u(v, s \to v)$ &lt;/div&gt;

&lt;div&gt;Shortest-path algorithms typically associate edges with &lt;em&gt;costs&lt;/em&gt;, and the objective is to &lt;em&gt;minimize&lt;/em&gt; the total cost. This is also equivalent to trying to maximize the &lt;em&gt;negative cost&lt;/em&gt; of the path, which we call $\mathcal{Q}_u = -\mathcal{L}_u(v)$. Additionally, we can re-write this max-reduction as a sum-reduction, where each $\mathcal{Q}_u$ term is multiplied by an indicator function that is $1$ when its $\mathcal{Q}_u$ term is the largest and $0$ otherwise.&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-2c89Gzlb9gE/W2qM9lwjJrI/AAAAAAAAKSg/nY_qpsqUPukfPvm5j3NMAON7IJCfSwTfwCLcBGAs/s1600/bellmanford_rewrite.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1228&quot; data-original-width=&quot;1432&quot; height=&quot;548&quot; src=&quot;https://4.bp.blogspot.com/-2c89Gzlb9gE/W2qM9lwjJrI/AAAAAAAAKSg/nY_qpsqUPukfPvm5j3NMAON7IJCfSwTfwCLcBGAs/s640/bellmanford_rewrite.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;Does this remind you of any well-known algorithm? &lt;/div&gt;

&lt;div&gt;If you guessed &quot;Q-Learning&quot;, you are absolutely right! &lt;/div&gt;

&lt;h2&gt;Q-Learning&lt;/h2&gt;

&lt;div&gt;Reinforcement learning (RL) problems entail an agent interacting with its environment such that the total expected reward $R$ it receives is maximized over a multi-step (maybe infinite) decision process. In this setup, the agent will be unable to take further actions or receive additional rewards after transitioning to a terminal (absorbing) state.&lt;/div&gt;
&lt;div&gt;

&lt;div&gt;There are many ways to go about solving RL problems, and we'll discuss just one kind today: &lt;strong&gt;value-based&lt;/strong&gt; &lt;strong&gt;algorithms&lt;/strong&gt;, attempt to recover a value function $Q(s,a)$ that computes the maximum total reward an agent can possibly obtain if it takes an action $a$ at state $s$.&lt;/div&gt;

&lt;div&gt;Wow, what a mouthful! Here's a diagram of what's going on along with an annotated mathematical expression.&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-_dB_81RiPG0/W2qN4ONFZmI/AAAAAAAAKS0/uSi0I0dh4Bk8GrduWMMU2AHxjTejFNXhACLcBGAs/s1600/q.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;977&quot; data-original-width=&quot;1432&quot; height=&quot;436&quot; src=&quot;https://1.bp.blogspot.com/-_dB_81RiPG0/W2qN4ONFZmI/AAAAAAAAKS0/uSi0I0dh4Bk8GrduWMMU2AHxjTejFNXhACLcBGAs/s640/q.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;Re-writing the shortest path relaxation procedure in terms of a directional path cost recovers the Bellman Equality, which underpins the Q-Learning algorithm. It's no coincidence that Richard Bellman of Bellman-Ford is also the same Richard Bellman of the Bellman Equality! Q-learning is a classic example of dynamic programming. &lt;/div&gt;

&lt;div&gt;For those new to Reinforcement Learning, it's easiest to understand Q-Learning in the context of an environment that yields a reward only at the terminal transition:&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;The value of state-action pairs $(s_T, a_T)$ that transition to a terminal state are easy to learn - it is just the sparse reward received as the episode ends, since the agent can't do anything afterwards. &lt;/li&gt;
&lt;li&gt;Once we have all those final values, the value for $(s_{T-1}, a_{T-1})$ leading to &lt;em&gt;those states&lt;/em&gt; are &quot;backed up'' (backwards through time) to the states that transition to them. &lt;/li&gt;
&lt;li&gt;This continues all the way to the state-action pairs $(s_1, a_1)$ encountered at the beginning of episodes. &lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Handling Randomness in Shortest-Path Algorithms&lt;/h2&gt;

&lt;div&gt;
&lt;div&gt;Remember the &quot;thin ice'' analogy from currency arbitrage? Let's take a look at how modern RL algorithms are able to handle random path costs. &lt;/div&gt;

&lt;div&gt;In RL, the agent's &lt;strong&gt;policy distribution&lt;/strong&gt; $\pi(a|s)$ is a conditional probability distribution over actions, specifying how the agent behaves randomly in response to observing some state $s$. In practice, policies are made to be random in order to facilitate exploration of environments whose dynamics and set of states are unknown (e.g. imagine the RL agent opens its eyes for the first time and must learn about the world before it can solve a task). Since the agent's sampling of action $a \sim \pi(a|s)$ from the policy distribution are immediately followed by computation of environment dynamics $s^\prime = f(s, a)$, it's equivalent to view randomness as coming from a stochastic policy distribution or stochastic transition dynamics. We redefine a notion of Bellman consistency for &lt;em&gt;expected&lt;/em&gt; future returns:&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-tb3JnBvjSoA/W2qOlFFDNbI/AAAAAAAAKS8/nsXla_bWj-8AQ3KOwNLdAuqMesNLo4pFwCLcBGAs/s1600/q_expected.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;146&quot; data-original-width=&quot;1428&quot; height=&quot;64&quot; src=&quot;https://1.bp.blogspot.com/-tb3JnBvjSoA/W2qOlFFDNbI/AAAAAAAAKS8/nsXla_bWj-8AQ3KOwNLdAuqMesNLo4pFwCLcBGAs/s640/q_expected.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;By propagating expected values, Q-learning allows for shortest-path algorithms to essentially be aware of the expected path length, and take transition probabilities of dynamics/policies into account.&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;Modern Q-Learning&lt;/h2&gt;

&lt;div&gt;This section discusses some recent breakthroughs in RL research, such as &lt;strong&gt;Q-value overestimation&lt;/strong&gt;, &lt;strong&gt;Softmax Temporal Consistency&lt;/strong&gt;, &lt;strong&gt;Maximum Entropy Reinforcement Learning&lt;/strong&gt;, and &lt;strong&gt;Distributional Reinforcement Learning&lt;/strong&gt;. These cutting-edge concepts are put into the context of shortest-path algorithms as discussed previously. If any of these sound interesting and you're willing to endure a bit more math jargon, read on -- otherwise, feel free to skip to the next section on computer graphics.&lt;/div&gt;
&lt;div&gt;

&lt;div&gt;Single-step Bellman backups during Q-learning turn out to be rather sensitive to random noise, which can make training unstable. Randomness can come from imperfect optimization over actions during the Bellman Update, poor function approximation in the model, random label noise (e.g. human error in assigning labels to a robotic dataset), stochastic dynamics, or uncertain observations (partial observability). All of these can violate the Bellman Equality, which may cause learning to diverge or get stuck in a poor local minima.&lt;/div&gt;
&lt;/div&gt;

&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-AXiY9DXQDG8/W2qPGBF1tpI/AAAAAAAAKTE/kz5dYfqlVacOyUNjHXI1Lq7IRpKcuxWtQCLcBGAs/s1600/noise_q.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;300&quot; data-original-width=&quot;866&quot; height=&quot;220&quot; src=&quot;https://2.bp.blogspot.com/-AXiY9DXQDG8/W2qPGBF1tpI/AAAAAAAAKTE/kz5dYfqlVacOyUNjHXI1Lq7IRpKcuxWtQCLcBGAs/s640/noise_q.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;Sources of noise that arise in Q-learning which violate the hard Bellman Equality.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;
&lt;div&gt;A well-known problem among RL practitioners is that Q-learning suffers from over-estimation; during off-policy training, predicted Q-values climb higher and higher but the agent doesn't get better at solving the task. Why does this happen?&lt;/div&gt;

&lt;div&gt;Even if $Q_\theta$ is an unbiased estimator of the true value function, any variance in the estimate is converted into upward bias during the Bellman update. A sketch of the proof: assuming Q values are uniformly or normally distributed about the true value function, the Fisher–Tippett–Gnedenko theorem tells us that applying the max operator over multiple normally-distributed variables is mean-centered around a Gumbel distribution with a positive mean. Therefore the updated Q function, after the Bellman update is performed, will obtain some positively skewed bias! One way to deal with this is double Q-learning, which re-evaluates the optimal next-state action value using an i.i.d $Q$ function. Assuming Q-value noise is independent of the max action, the use of a i.i.d Q function for scoring the best actions makes max-Q estimation unbiased again.&lt;/div&gt;

&lt;div&gt;Dampening Q values can also be accomplished crudely by decreasing the discount factor (0.95 is common for environments like Atari), but $\gamma$ is kind of a hack as it is not a physically meaningful quantity in most environments.&lt;/div&gt;

&lt;div&gt;Yet another way to decrease overestimation of Q values is to &quot;smooth'' the greediness of the max-operator during the Bellman backup, by taking some kind of weighted average over Q values, rather than a hard max that only considers the best expected value. In discrete action spaces with $K$ possible actions, the weighted average is also known as a &quot;softmax'' with a temperature parameter:&lt;/div&gt;

&lt;div&gt;$$\verb|softmax|(x, \tau) = \mathbf{w}^T \mathbf{x}$$&lt;/div&gt;

where&lt;div&gt;$$\mathbf{w}_i = \frac{e^{\mathbf{x}_i/\tau}}{\sum_{j=1}^{K}{e^{\mathbf{x}_j/\tau}}}$$&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;div&gt;Intuitively, the &quot;softmax'' can be thought of as a confidence penalty on how likely we believe $\max Q(s^\prime, a^\prime)$ to be the actual expected return at the next time step.  Larger temperatures in the softmax drag the mean away from the max value, resulting in more pessimistic (lower) Q values. Because of this temeprature-controlled softmax, our reward objective is no longer simply to &quot;maximize expected total reward''; rather, it is more similar to &quot;maximizing the top-k expected rewards''. In the infinite-temperature limit, all Q-values are averaged equally and the softmax becomes a mean, corresponding to the return of a &lt;em&gt;completely random policy&lt;/em&gt;. Hold that thought, as this detail will be visited again when we discuss computer graphics!&lt;/div&gt;

&lt;div&gt;This modification to the standard Hard-Max Bellman Equality is known as &lt;strong&gt;Softmax Temporal Consistency&lt;/strong&gt;. In continuous action spaces, the backup through an entire episode can be thought of as repeatedly backing up expectations over integrals.&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-aD0l7dbTJo4/W2r4y3FwidI/AAAAAAAAKWQ/_Yv-zbxvECI2ZMAJxHIIa4GHQ7VhpQmWACLcBGAs/s1600/softq.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;178&quot; data-original-width=&quot;1428&quot; height=&quot;78&quot; src=&quot;https://3.bp.blogspot.com/-aD0l7dbTJo4/W2r4y3FwidI/AAAAAAAAKWQ/_Yv-zbxvECI2ZMAJxHIIa4GHQ7VhpQmWACLcBGAs/s640/softq.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br/&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;div&gt;By introducing a confidence penalty as an implicit regularization term, our optimization objective is no longer optimizing for the cumulative expected reward from the environment. In fact, if the policy distribution has the form of a Boltzmann Distribution:&lt;/div&gt;

&lt;div&gt;$$\pi(a|s) \sim \exp Q(s, a)$$&lt;/div&gt;

&lt;div&gt;This softmax regularization has a very explicit, information-theoretic interpretation: it is the optimal solution for the &lt;strong&gt;Maximum-Entropy RL objective&lt;/strong&gt;:&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;

&lt;div&gt;$$\pi_{\mathrm{MaxEnt}}^* = \arg\!\max_{\pi} \mathbb{E}_{\pi}\left[ \sum_{t=0}^T r_t + \mathcal{H}(\pi(\cdot | \mathbf{s}_t)) \right]$$&lt;/div&gt;


&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;
&lt;p&gt;When given only partial information about a probability distribution, $\tilde{P}$, typically many different distributions, $P$, are capable of matching that information. For example, many distributions have the same mean value. The principle of maximum entropy resolves the ambiguity of an under-constrained distribution by selecting the single distribution that has the least &lt;em&gt;commitment&lt;/em&gt; to any particular outcome while matching the observational constraints imposed on the distribution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div&gt;This is nothing more than &quot;Occam's Razor'' in the parlance of statistics. The Maximum Entropy Principle is a framework for limiting overfitting in RL models, as it limits the amount of information (in nats) contained by the policy. The more entropy a distribution has, the less information it contains, and therefore the less &quot;assumptions'' about the world it makes. The combination of Softmax Temporal Consistency with Boltzmann Policies is known as &lt;strong&gt;Soft Q-Learning&lt;/strong&gt;.&lt;/div&gt;

&lt;div&gt;To draw a connection back to currency arbitrage and the world of finance, limiting the number of assumptions in a model is of paramount importance to quantiatiative researchers at hedge funds, since hundreds of millions of USD could be at stake. Quants have developed a rather explicit form of Occam's Razor by tending to rely on models with as few statistical priors as possible, such as Linear models and Gaussian Process Regression with simple kernels.&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;div&gt;Although Soft Q-Learning can regularize against model complexity, updates are still backed up over single timesteps. It is often more effective to integrate rewards with respect to a &quot;path'' of samples actually sampled at data collection time, than backing up expected Q values one edge at a time and hoping that softmax temporal consistency remains consistent well when accumulating multiple backups. &lt;/div&gt;

&lt;div&gt;Work from &lt;a href=&quot;https://arxiv.org/pdf/1702.08892.pdf&quot;&gt;Nachum et al. 2017&lt;/a&gt;, &lt;a href=&quot;https://arxiv.org/abs/1611.01626&quot;&gt;O’Donoghue et al. 2016&lt;/a&gt;, &lt;a href=&quot;https://arxiv.org/pdf/1704.06440.pdf&quot;&gt;Schulman et al. 2017&lt;/a&gt; explore the theoretical connections between multi-step return optimization objectives (policy-based) and temporal consistency (value-based) objectives. The use of a multi-step return can be thought of as a path-integral solution to marginalizing out random variables occuring during a multi-step decision process (such as random non-Markovian dynamics). In fact, long before Deep RL research became popular, control theorists have been using path integrals for optimal control to tackle the problem of integrating multi-step stochastic dynamics [&lt;a href=&quot;https://arxiv.org/pdf/physics/0505066.pdf&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;http://www.jmlr.org/papers/volume11/theodorou10a/theodorou10a.pdf&quot;&gt;2&lt;/a&gt;]. A classic example is the use of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Viterbi_algorithm&quot;&gt;Viterbi Algorithm&lt;/a&gt; in stochastic planning.&lt;/div&gt;

&lt;div&gt;Once trained, the value function $Q(s,a)$ implies a sequence of actions an agent must do in order to maximize expected reward (this sequence does not have to be unique). In order for the $Q$ function to be correct, it must also implicitly capture knowledge about the expected dynamics that occur along the sequence of actions. It's quite remarkable that all this &quot;knowledge of the world and one's own behavior'' can be captured into a single scalar.&lt;/div&gt;

&lt;div&gt;However, this representational compactness can also be a curse!&lt;/div&gt;

&lt;div&gt;Soft Q-learning and PGQ/PCL successfully back up &lt;em&gt;expected&lt;/em&gt; values over some return distribution, but it's still a lot to ask of a neural network to capture all the knowledge about expected future dynamics, marginalize all the randomness into a single statistic. &lt;/div&gt;

&lt;div&gt;We may be interested in propagating other statistics like variance, skew, and kurtosis of the value distribution. What if we did Bellman backups over entire distributions, without having to throw away the higher-order moments? &lt;/div&gt;

&lt;div&gt;This actually recovers the motivation of &lt;strong&gt;Distributional Reinforcement Learning&lt;/strong&gt;, in which &quot;edges'' in the shortest path algorithm propagate distributions over values rather than collapsing everything into a scalar. The main contribution of the seminal &lt;a href=&quot;https://arxiv.org/abs/1707.06887&quot;&gt;Bellemare et al. 2017 paper&lt;/a&gt; is defining an algebra that generalizes the Bellman Equality to operate on distributions rather than scalar statistics of them. Unlike the path-integral approach to Q-value estimation, this framework avoids marginalization error by passing richer messages in the single-step Bellman backups. &lt;/div&gt;

&lt;div&gt;Soft-Q learning, PGQ/PCL, and Distributional Reinforcement Learning are &quot;probabilistically aware'' reinforcement learning algorithms. They appear to be &lt;a href=&quot;https://www.blogger.com/&quot;&gt;tremendously beneficial&lt;/a&gt; in &lt;a href=&quot;http://bair.berkeley.edu/blog/2017/10/06/soft-q-learning/&quot;&gt;practice&lt;/a&gt;, and I would not be surprised if by next year it becomes widely accepted that these techniques are the &quot;physically correct'' thing to do, and hard-max Q-learning (as done in standard RL evaluations) is discarded. Given that multi-step Soft-Q learning (PCL) and Distributional RL take complementary approaches to propagating value distributions, I'm also excited to see whether the approaches can be combined (e.g. policy gradients over distributional messages).&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;Physically-Based Rendering&lt;/h2&gt;

&lt;blockquote class=&quot;tr_bq&quot;&gt;
&lt;p&gt;Ray tracing is not slow, computers are. -- James Kajiya&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div&gt;

&lt;div&gt;A couple of the aforementioned RL works make heavy use of the terminology &quot;path integrals''. Do you know where else path integrals and the need for &quot;physical correctness'' arise? Computer graphics!&lt;/div&gt;

&lt;div&gt;Whether it is done by an illustrator's hand or a computer, the problem of rendering asks &quot;Given a scene and some light sources, what is the image that arrives at a camera lens?''. Every rendering procedure -- from the first abstract cave painting to Disney's modern Hyperion renderer, is a depiction of light transported from the world to the eye of the observer.&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-qVCf13zaDtw/W2qREwXq6TI/AAAAAAAAKTc/5hzryOfgUeAnekRB1dxT3DQ4ksrVgJx0wCLcBGAs/s1600/cgi_2.jpg&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;433&quot; data-original-width=&quot;1600&quot; height=&quot;172&quot; src=&quot;https://4.bp.blogspot.com/-qVCf13zaDtw/W2qREwXq6TI/AAAAAAAAKTc/5hzryOfgUeAnekRB1dxT3DQ4ksrVgJx0wCLcBGAs/s640/cgi_2.jpg&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;div&gt;Here are some examples of the enormous strides rendering technology has made in the last 20 years:&lt;/div&gt;

&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-9Wn6_0IkjC0/W2qRZhgWkiI/AAAAAAAAKTo/L6_AKOJxAIQMKu9PqY0M0aqi8F0R-ZNYgCLcBGAs/s1600/cgi_reel.jpg&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;780&quot; data-original-width=&quot;1600&quot; height=&quot;312&quot; src=&quot;https://3.bp.blogspot.com/-9Wn6_0IkjC0/W2qRZhgWkiI/AAAAAAAAKTo/L6_AKOJxAIQMKu9PqY0M0aqi8F0R-ZNYgCLcBGAs/s640/cgi_reel.jpg&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;From top left, clockwise: &lt;a href=&quot;https://www.artstation.com/artwork/big-city-sensory-overstimulation&quot;&gt;Big City Overstimulation&lt;/a&gt; by Gleb Alexandrov. Pacific Rim, Uprising. The late Peter Cushing resurrected for a Star Wars movie. Remove Henry's Cavill's mustache to re-shoot some scenes because he needs the mustache for another movie.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;div&gt;
&lt;div&gt;Photorealistic rendering algorithms are made possible thanks to accurate physical models of how light behaves and interacts with the natural world, combined with the computational resources to actually represent the natural world in a computer. For instance, a seemingly simple object like a butterfly wing has an insane amount of geometric detail, and light interacts with this geometry to produce some macroscopic effect like iridescence.&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-klIiPIdHRn8/W2qRjMMHKWI/AAAAAAAAKTs/Xr6oCMHoBkwY1uzNrP0CgUk4Ee6M7ujVACLcBGAs/s1600/butterfly_wing.jpg&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;481&quot; data-original-width=&quot;700&quot; height=&quot;219&quot; src=&quot;https://3.bp.blogspot.com/-klIiPIdHRn8/W2qRjMMHKWI/AAAAAAAAKTs/Xr6oCMHoBkwY1uzNrP0CgUk4Ee6M7ujVACLcBGAs/s320/butterfly_wing.jpg&quot; width=&quot;320&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;div&gt;

&lt;div&gt;Light transport involves far too many calculations for a human to do by hand, so the old master painters and illustrators came up with a lot of rules about how light behaves and interacts with everyday scenes and objects. Here are some examples of these rules:&lt;/div&gt;

&lt;div&gt;
&lt;ul&gt;&lt;li&gt;Cold light has a warm shadow, warm light has a cool shadow.&lt;/li&gt;
&lt;li&gt;Light travels through tree leaves, resulting in umbras that are less &quot;hard&quot; than a platonic sphere or a rock.&lt;/li&gt;
&lt;li&gt;Clear water and bright daylight result in caustics.&lt;/li&gt;
&lt;li&gt;Light bounces off flat water like a billiard ball with a perfectly reflected incident angle, but choppy water turns white and no longer behaves like a mirror.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;div&gt;You can get quite far on a big bag of heuristics like these. Here are some majestic paintings from the Hudson River School (19th century).&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;div&gt;However, a lot of this painterly understanding -- though breathtaking -- was non-rigorous and physically inaccurate. Scaling this up to animated sequences was also very laborious. It wasn't until 1986, with the independent discovery of the rendering equation by David Immel et al. and James Kajiya, that we obtained physically-based rendering algorithms.&lt;/div&gt;

&lt;div&gt;Of course, the scene must obey the conservation of energy transport: the electromagnetic energy being fed into the scene (via radiating objects) must equal the total amount of electromagnetic energy being absorbed, reflected, or refracted in the scene. Here is the &lt;strong&gt;rendering equation&lt;/strong&gt; explained in an annotated equation:&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-JeeNOWnTKsA/W2qSU-638tI/AAAAAAAAKUM/UCzWatSEEI82JNdmJje9SmmJ1WMiGokegCLcBGAs/s1600/pt.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1070&quot; data-original-width=&quot;1432&quot; height=&quot;478&quot; src=&quot;https://2.bp.blogspot.com/-JeeNOWnTKsA/W2qSU-638tI/AAAAAAAAKUM/UCzWatSEEI82JNdmJje9SmmJ1WMiGokegCLcBGAs/s640/pt.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;div&gt;
&lt;div&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_method&quot;&gt;Monte Carlo estimator&lt;/a&gt; is a method for estimating high-dimensional integrals, by simply taking the expectation over many independent samples of an unbiased estimator. Path-tracing is the simplest Monte-Carlo approximation possible to the rendering equation. I've borrowed some screenshots from Disney's very excellent &lt;a href=&quot;https://www.youtube.com/watch?v=frLwRLS_ZR0&quot;&gt;tutorial on production path tracing&lt;/a&gt; to explain how &quot;physically-based rendering'' works. &lt;/div&gt;
&lt;/div&gt;

&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-NIDpf5Q_DyU/W2qSi8ei-jI/AAAAAAAAKUQ/7ReFGY-2WeES9TnVtH-H-bVF_g3jqNoagCLcBGAs/s1600/disney1.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;731&quot; data-original-width=&quot;1600&quot; height=&quot;292&quot; src=&quot;https://3.bp.blogspot.com/-NIDpf5Q_DyU/W2qSi8ei-jI/AAAAAAAAKUQ/7ReFGY-2WeES9TnVtH-H-bVF_g3jqNoagCLcBGAs/s640/disney1.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;Initially, the only thing visible to the camera is the light source. Let there be light!&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-sie0aZCGiXg/W2qSi_oQJQI/AAAAAAAAKUU/Cc_yyAfLSh88ozpA21bwIryAu7com2QdwCEwYBhgL/s1600/disney2.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;715&quot; data-original-width=&quot;1600&quot; height=&quot;284&quot; src=&quot;https://3.bp.blogspot.com/-sie0aZCGiXg/W2qSi_oQJQI/AAAAAAAAKUU/Cc_yyAfLSh88ozpA21bwIryAu7com2QdwCEwYBhgL/s640/disney2.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;A stream of photons is emitted from the light and strikes a surface (in this case, a rock). It can be absorbed into non-visible energy, reflected off the object, or refracted into the object.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-tHQ8Zb0bs3o/W2qSjOEwiwI/AAAAAAAAKUY/VMIm0dbkL5E07rBPsOi6DFw6VWliaLfqACEwYBhgL/s1600/disney3.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;699&quot; data-original-width=&quot;1600&quot; height=&quot;278&quot; src=&quot;https://1.bp.blogspot.com/-tHQ8Zb0bs3o/W2qSjOEwiwI/AAAAAAAAKUY/VMIm0dbkL5E07rBPsOi6DFw6VWliaLfqACEwYBhgL/s640/disney3.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;Any reflected or refracted light is emitted from the surface and continues in another random direction, and the process repeats until there are no photons left or it is absorbed by the camera lens.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://4.bp.blogspot.com/--r8egNOGahI/W2qSj-CfgEI/AAAAAAAAKUc/8fFhFj_P3FM4wnwFPpZAHaS7JCuslNg2wCEwYBhgL/s1600/disney4.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;677&quot; data-original-width=&quot;1600&quot; height=&quot;270&quot; src=&quot;https://4.bp.blogspot.com/--r8egNOGahI/W2qSj-CfgEI/AAAAAAAAKUc/8fFhFj_P3FM4wnwFPpZAHaS7JCuslNg2wCEwYBhgL/s640/disney4.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;This process is repeated ad infinum for many rays until the inflow vs. outflow of photons reaches equilibrium or the artist decides that the computer has been rendering for long enough. &lt;span&gt;The total light contribution to a surface is a path integral over all these light bounce paths.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;
&lt;div&gt;This equation has applications beyond entertainment: the inverse problem is studied in astrophysics simulations (given observed radiance of a supernovae, what are the properties of its nuclear reactions?), and &lt;a href=&quot;https://www.amazon.com/Principles-Neutron-Transport-Problems-Mathematics/dp/0486462935&quot;&gt;the neutron transport problem&lt;/a&gt;. In fact, Monte Carlo methods for solving integral equations were developed for studying fissile reactions for the Manhattan Project! The rendering integral is also an &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fredholm_theory&quot;&gt;Inhomogeneous Fredholm equations&lt;/a&gt; of the second kind&lt;/strong&gt;, which have the general form:&lt;/div&gt;

&lt;div&gt;$${\displaystyle \varphi (t)=f(t)+\lambda \int _{a}^{b}K(t,s)\varphi (s)\,\mathrm {d} s.}$$&lt;/div&gt;

&lt;div&gt;Take another look at the rendering equation. Déjà vu, anyone?&lt;/div&gt;

&lt;div&gt;Once again, path tracing is nothing more than the Bellman-Ford heuristic encountered in shortest-path algorithms! The rendering integral is taken over the $4\pi$ steradian's of surface area on a unit sphere, which cover all directions an incoming light ray can come from. If we interpret this area integration probabilistically, this is nothing more than the expectation (mean) over directions sampled uniformly from a sphere.&lt;/div&gt;

&lt;div&gt;This equation takes the same form as the high-temperature softmax limit for Soft Q-learning! Recall that as $\tau \to \infty$, softmax converges to an expectation over a uniform distribution, i.e. a policy distribution with maximum entropy and no information. Light rays have no agency, they merely bounce around the scene like RL agents taking completely random actions! &lt;/div&gt;

&lt;div&gt;The astute reader may wonder whether there is also a corresponding &quot;hard-max'' version of rendering, just as hard-max Bellman Equality is to the Soft Bellman Equality in Q-learning. &lt;/div&gt;

&lt;div&gt;The answer is yes! The &lt;strong&gt;recursive raytracing&lt;/strong&gt; algorithm (invented before path-tracing, actually) was a non-physical approximation of light transport that assumes the largest of lighting contributions reflected off a surface comes from one of the following light sources:&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;div&gt;
&lt;ol&gt;&lt;li&gt;Emitting material&lt;/li&gt;
&lt;li&gt;Direct exposure to light sources&lt;/li&gt;
&lt;li&gt;Strongly reflected light (i.e. surface is a mirror)&lt;/li&gt;
&lt;li&gt;Strongly refracted light (i.e. surface is made of glass or water).&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;

&lt;div&gt;In the case of reflected and refracted light, recursive trace rays are branched out to perform further ray intersection, usually terminating at some fixed depth.&lt;/div&gt;
&lt;/div&gt;

&lt;br/&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-a05PyO7HNcw/W2qTcer5rPI/AAAAAAAAKVA/25BRAIxX238wLZbFLaE9YHEBXImC3r6NgCLcBGAs/s1600/raytrace.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;688&quot; data-original-width=&quot;1432&quot; height=&quot;306&quot; src=&quot;https://1.bp.blogspot.com/-a05PyO7HNcw/W2qTcer5rPI/AAAAAAAAKVA/25BRAIxX238wLZbFLaE9YHEBXImC3r6NgCLcBGAs/s640/raytrace.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;Raytracing approximation to the rendering equation.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;div&gt;
&lt;div&gt;Because ray tracing only considers the maximum contribution directions, it is not able to model indirect light, such as light bouncing off a bright wall and bleeding into an adjacent wall. Although these contributions are minor in today setups like Cornell Boxes, they play a dominant role in rendering pictures of snow, flesh, and food. &lt;/div&gt;

&lt;div&gt;Below is a comparison of a ray-traced image and a path-traced image. The difference is like night and day:&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-DjkW-udCwNs/W2qUDzzVFfI/AAAAAAAAKVc/cw7CXaKX8eUWF5bzBmymvk55dXHkZpsNgCLcBGAs/s1600/cbox.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;126&quot; data-original-width=&quot;256&quot; height=&quot;315&quot; src=&quot;https://2.bp.blogspot.com/-DjkW-udCwNs/W2qUDzzVFfI/AAAAAAAAKVc/cw7CXaKX8eUWF5bzBmymvk55dXHkZpsNgCLcBGAs/s640/cbox.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;div&gt;
&lt;div&gt;Prior work has drawn connections between light transport and value-based reinforcement learning, and in fact &lt;a href=&quot;https://arxiv.org/pdf/1701.07403v1.pdf&quot;&gt;Dahm and Keller 2017&lt;/a&gt; leverage Q-learning to learn optimal selection of &quot;ray bounce actions'' to accelerate importance sampling in path tracing. Much of the physically-based rendering literature considers the problem of optimal importance sampling to minimize variance of the path integral estimators, resulting in less &quot;noisy'' images. &lt;/div&gt;



&lt;h2&gt;&lt;strong&gt;Summary and Questions&lt;/strong&gt;&lt;/h2&gt;

&lt;div&gt;We have 3 very well-known algorithms (currency arbitrage, Q-learning, path tracing) that independently discovered the principle of relaxation used in shortest-path algorithms such as Dijkstra's and Bellman-Ford. Remarkably, each of these disparate fields of study discovered notions of hard and soft optimality, which is relevant in the presence of noise or high-dimensional path integrals. Here is a table summarizing the equations we explored:&lt;/div&gt;

&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-y3OeUCBO03A/W2qdRo_CL-I/AAAAAAAAKVo/01VZURpQPEU6oaY7w1_KnFlTUOD0xK8FACLcBGAs/s1600/eq_table_standalone.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;190&quot; data-original-width=&quot;1600&quot; height=&quot;76&quot; src=&quot;https://2.bp.blogspot.com/-y3OeUCBO03A/W2qdRo_CL-I/AAAAAAAAKVo/01VZURpQPEU6oaY7w1_KnFlTUOD0xK8FACLcBGAs/s640/eq_table_standalone.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/div&gt;


&lt;div&gt;These different fields have quite a lot of ideas that could be cross-fertilized. Just to toss some ideas out there (a request for research, if you will):&lt;/div&gt;

&lt;div&gt;
&lt;ul&gt;&lt;li&gt;There has been some preliminary work on using optimal control to reduce sample complexity of path tracing algorithms. Can sampling algorithms used in rendering be leveraged for reinforcement learning?&lt;/li&gt;
&lt;li&gt;Path tracing integrals are fairly expensive because states and actions are continuous and each bounce requires ray-intersecting a geometric data structure. What if we do light transport simulations on a point cloud with a precomputed visibility matrix between all points, and use that as an approximation for irradiance caching / final-gather?&lt;/li&gt;
&lt;li&gt;Path tracing is to Soft Q-Learning as Photon Mapping is to ...?&lt;/li&gt;
&lt;li&gt;Has anyone ever tried using the Maximum Entropy principle as a regularization framework for financial trading strategies?&lt;/li&gt;
&lt;li&gt;The selection of a proposal distribution for importance-sampled Monte Carlo rendering could utilize Boltzmann Distributions with soft Q-learning. This is nice because the proposal distribution over recursive ray directions has infinite support by construction, and Soft Q-learning can be used to tune random exploration of light rays.&lt;/li&gt;
&lt;li&gt; Is there a distributional RL interpretation of path tracing, such as polarized path tracing?&lt;/li&gt;
&lt;li&gt;Given the equivalence between Q Learning and shortest path algorithms, it's interesting to note that in Deep RL research, we carefully initialize weights but leave the Q-function values fairly arbitrary. However, all shortest-path algorithms rely on initializing costs to negative infinity, so that costs being propagated during relaxation correspond to actually realizable paths. Why aren't we initializing all function values to negative-valued numbers?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;

&lt;div&gt;
&lt;div&gt;I'm very grateful to Austin Chen, Deniz Oktay, Ofir Nachum, and Vincent Vanhoucke for proofreading and providing feedback to this post. All typos/factual errors are my own; please write to me if you spot additional errors. And finally, thank you for reading!&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


</description>
<pubDate>Sun, 12 Aug 2018 18:45:45 +0000</pubDate>
<dc:creator>ColinWright</dc:creator>
<og:url>https://blog.evjang.com/2018/08/dijkstras.html</og:url>
<og:title>Dijkstra's in Disguise</og:title>
<og:description>You can find a PDF version of this blog post here . A weighted graph is a data structure consisting of some vertices and edges, and each...</og:description>
<og:image>https://4.bp.blogspot.com/-e8hRuEJte-g/W2qJ98TIFrI/AAAAAAAAKR4/oIluXwEqZtUAir5O0KcTdHWWGAomVYjqACLcBGAs/w1200-h630-p-k-no-nu/graph.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.evjang.com/2018/08/dijkstras.html</dc:identifier>
</item>
<item>
<title>Frink</title>
<link>https://frinklang.org/</link>
<guid isPermaLink="true" >https://frinklang.org/</guid>
<description>&lt;title&gt;Frink&lt;/title&gt;&lt;meta name=&quot;keywords&quot; content=&quot;Frink, unit conversion, unit converter, units of measure, convert, conversion, converter, converting, units, currency conversion, calculator, historical, currency, conversion, programming language, interval arithmetic, interval computations&quot; /&gt;&lt;meta name=&quot;description&quot; content=&quot;A practical calculating tool, unit conversion utility, and programming language designed to make physical calculations simple. It tracks units of measure (feet, meters, kilograms, watts, etc.) through all calculations, and helps ensure that answers are correct.&quot; /&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;meta http-equiv=&quot;Default-Style&quot; content=&quot;APE Airy&quot; /&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&lt;link rel=&quot;StyleSheet&quot; href=&quot;apeairy.css&quot; type=&quot;text/css&quot; title=&quot;APE Airy&quot; /&gt;&lt;link rel=&quot;icon&quot; href=&quot;images/futureboyicon.png&quot; type=&quot;image/png&quot; /&gt;&lt;link rel=&quot;canonical&quot; href=&quot;https://frinklang.org/&quot; /&gt;&lt;p class=&quot;CENTER&quot;&gt;&lt;a href=&quot;https://frinklang.org/whatsnew.html&quot;&gt;What's New&lt;/a&gt; * &lt;a href=&quot;https://frinklang.org/faq.html&quot;&gt;FAQ&lt;/a&gt; * &lt;a href=&quot;https://frinklang.org/#JavaWebStart&quot;&gt;Download&lt;/a&gt; * &lt;a href=&quot;https://frinklang.org/FrinkApplet.html&quot;&gt;Frink Applet&lt;/a&gt; * &lt;a href=&quot;https://frinklang.org/fsp/frink.fsp&quot;&gt;Web Interface&lt;/a&gt; * &lt;a href=&quot;https://frinklang.org/fsp/samples.fsp&quot;&gt;Sample Programs&lt;/a&gt; * &lt;a href=&quot;https://frinklang.org/fspdocs.html&quot;&gt;Frink Server Pages&lt;/a&gt; * &lt;a href=&quot;https://frinklang.org/android.html&quot;&gt;Frink on Android&lt;/a&gt; * &lt;a href=&quot;https://frinklang.org/donate.html&quot;&gt;Donate&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Frink is a practical calculating tool and programming language designed to make physical calculations simple, to help ensure that answers come out right, and to make a tool that's really useful in the real world. It tracks units of measure (feet, meters, kilograms, watts, etc.) through all calculations, allowing you to mix units of measure transparently, and helps you easily verify that your answers make sense. It also contains a large &lt;a href=&quot;https://frinklang.org/frinkdata/units.txt&quot;&gt;data file&lt;/a&gt; of physical quantities, freeing you from having to look them up, and freeing you to make effortless calculations without getting bogged down in the mechanics.&lt;/p&gt;
&lt;p&gt;Perhaps you'll get the best idea of what Frink can do if you skip down to the &lt;a href=&quot;https://frinklang.org/#SampleCalculations&quot;&gt;Sample Calculations&lt;/a&gt; further on this document. Come back up to the top when you're done.&lt;/p&gt;
&lt;p&gt;Frink was named after one of my personal heroes, and great scientists of our time, the brilliant Professor John Frink. Professor Frink noted, decades ago:&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;em&gt;&quot;I predict that within 100 years, computers will be twice as powerful, ten &lt;strong&gt;thousand&lt;/strong&gt; times larger, and so expensive that only the five richest kings of Europe will own them.&quot;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For those with a short attention span like me, here are some of the features of Frink.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://frinklang.org/#HowFrinkIsDifferent&quot;&gt;Tracks units of measure&lt;/a&gt; (feet, meters, tons, dollars, watts, etc.) through all calculations and allows you to add, subtract, multiply, and divide them effortlessly, and makes sure the answer comes out correct, even if you mix units like gallons and liters.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://frinklang.org/#NumericTypes&quot;&gt;Arbitrary-precision math&lt;/a&gt;, including huge integers and floating-point numbers, rational numbers (that is, fractions like 1/3 are kept without loss of precision,) complex numbers, and intervals.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://frinklang.org/#CommonFunctions&quot;&gt;Advanced mathematical functions&lt;/a&gt; including trigonometric functions (even for complex numbers,) &lt;a href=&quot;https://frinklang.org/#NumberTheory&quot;&gt;factoring and primality testing&lt;/a&gt;, and &lt;a href=&quot;https://frinklang.org/#AllYourBaseConversions&quot;&gt;base conversions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://frinklang.org/#Conversions&quot;&gt;Unit Conversion&lt;/a&gt; between thousands of unit types with a &lt;em&gt;huge&lt;/em&gt; built-in &lt;a href=&quot;https://frinklang.org/frinkdata/units.txt&quot;&gt;data file&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://frinklang.org/#DateTimeHandling&quot;&gt;Date/time math&lt;/a&gt; (add offsets to dates, find out intervals between times,) timezone conversions, and user-modifiable date formats.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://frinklang.org/#TextTranslation&quot;&gt;Translates&lt;/a&gt; between several human languages, including English, French, German, Spanish, Portuguese, Dutch, Korean, Japanese, Russian, Chinese, Swedish, and Arabic.&lt;/li&gt;
&lt;li&gt;Calculates historical buying power of the &lt;a href=&quot;https://frinklang.org/#HistoricalUSPriceData&quot;&gt;U.S. dollar&lt;/a&gt; and &lt;a href=&quot;https://frinklang.org/#HistoricalBritishPriceData&quot;&gt;British pound&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Calculates &lt;a href=&quot;https://frinklang.org/#InternationalExchangeRates&quot;&gt;exchange rates&lt;/a&gt; between most of the world's currencies.&lt;/li&gt;
&lt;li&gt;Powerful &lt;a href=&quot;https://frinklang.org/#RegularExpressions&quot;&gt;regular expression&lt;/a&gt; capabilities and text processing.&lt;/li&gt;
&lt;li&gt;Supports &lt;a href=&quot;https://frinklang.org/#UnicodeInFrink&quot;&gt;Unicode&lt;/a&gt; throughout, allowing processing of almost all of the world's languages.&lt;/li&gt;
&lt;li&gt;Supports &lt;a href=&quot;https://frinklang.org/#IntervalArithmetic&quot;&gt;Interval Arithmetic&lt;/a&gt; (also known as &lt;em&gt;Interval Computations&lt;/em&gt;) in calculations, allowing you to automagically calculate error bounds and uncertainties in all of your calculations.&lt;/li&gt;
&lt;li&gt;Reads &lt;a href=&quot;https://frinklang.org/#InputAndOutput&quot;&gt;HTTP and FTP-based URLs&lt;/a&gt; as easily as reading local files, allowing fetching of live web-based data.&lt;/li&gt;
&lt;li&gt;Runs on most major operating systems (anything with Java 1.1 or later,) as an &lt;a href=&quot;https://frinklang.org/FrinkApplet.html&quot;&gt;applet&lt;/a&gt;, through a &lt;a href=&quot;https://frinklang.org/fsp/frink.fsp&quot;&gt;web-based interface&lt;/a&gt;, on &lt;a href=&quot;https://frinklang.org/android.html&quot;&gt;Android&lt;/a&gt;, and on &lt;a href=&quot;https://frinklang.org/#SmallDevices&quot;&gt;many mobile phones and hand-held devices&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Installs itself on your system in seconds using &lt;a href=&quot;https://frinklang.org/#JavaWebStart&quot;&gt;Java Web Start&lt;/a&gt; and automatically keeps itself updated when new versions of Frink are released.&lt;/li&gt;
&lt;li&gt;Runs with a &lt;a href=&quot;https://frinklang.org/#UserInterfaceOptions&quot;&gt;Graphical User Interface&lt;/a&gt; (Swing, AWT, and &lt;a href=&quot;https://frinklang.org/android.html&quot;&gt;Android&lt;/a&gt;) or a command-line interface.&lt;/li&gt;
&lt;li&gt;User interface has a &lt;a href=&quot;https://frinklang.org/#ProgrammingMode&quot;&gt;Programming Mode&lt;/a&gt; which allows you to write, edit, save, and run extremely powerful programs even on a handheld device.&lt;/li&gt;
&lt;li&gt;Frink has a simple but powerful system for drawing &lt;a href=&quot;https://frinklang.org/#Graphics&quot;&gt;graphics&lt;/a&gt; which are resizable, support transparency and anti-aliasing, and can be printed or written to image files. Graphics can also have exact lengths, so that a 3-centimeter line is three centimeters long when printed.&lt;/li&gt;
&lt;li&gt;Powers &lt;a href=&quot;https://frinklang.org/fspdocs.html&quot;&gt;Frink Server Pages&lt;/a&gt;, a system for providing dynamic web pages powered by Frink.&lt;/li&gt;
&lt;li&gt;Frink is a full-fledged programming language with &lt;a href=&quot;https://frinklang.org/#Arrays&quot;&gt;arrays&lt;/a&gt;, &lt;a href=&quot;https://frinklang.org/#Dictionaries&quot;&gt;dictionaries&lt;/a&gt;, &lt;a href=&quot;https://frinklang.org/#Sets&quot;&gt;sets&lt;/a&gt;, &lt;a href=&quot;https://frinklang.org/#Functions&quot;&gt;functions&lt;/a&gt;, &lt;a href=&quot;https://frinklang.org/#Loops&quot;&gt;loops&lt;/a&gt;, even object-oriented programming and &lt;a href=&quot;https://frinklang.org/#SelfEvaluation&quot;&gt;self-evaluation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Frink allows &lt;a href=&quot;https://frinklang.org/#ObjectOrientedProgramming&quot;&gt;Object-Oriented Programming&lt;/a&gt;, which allows you to create complex data structures that are still easy to use.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://frinklang.org/#JavaIntrospection&quot;&gt;Java Introspection&lt;/a&gt; layer allows you to call any Java code from within Frink.&lt;/li&gt;
&lt;li&gt;Frink can also be &lt;a href=&quot;https://frinklang.org/#EmbeddingFrink&quot;&gt;embedded in a Java program&lt;/a&gt;, giving your Java programs all the power of Frink.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Frink changes almost every day. If your version of Frink is more than a few days old, you're probably out of date! The latest versions are always available here. Keep an eye on the &lt;a href=&quot;https://frinklang.org/whatsnew.html&quot;&gt;What's New&lt;/a&gt; page to see new features and keep abreast of its rapid developments.&lt;/p&gt;
&lt;p&gt;While that page is the most detailed and constantly-updated source of information about changes in Frink, I also announce new features on Twitter at &lt;a href=&quot;https://twitter.com/frinklang&quot;&gt;@frinklang&lt;/a&gt;. And if you want to follow Alan's personal ramblings for some reason, those are at &lt;a href=&quot;https://twitter.com/aeliasen&quot;&gt;@aeliasen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you find Frink useful, there are lots of ways you can &lt;a href=&quot;https://frinklang.org/donate.html&quot;&gt;donate to its further development.&lt;/a&gt; I'd really appreciate it!&lt;/p&gt;

&lt;h3&gt;General Frink list (low-traffic):&lt;/h3&gt;
&lt;p&gt;To receive periodic notifications of general interest about the Frink language, please join the &lt;a href=&quot;https://groups.yahoo.com/group/frink/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Frink&lt;/strong&gt; mailing list&lt;/a&gt;. (Hosted by Yahoo! Groups. Link opens in new window.) This is a lower-traffic list, mostly for announcements.&lt;/p&gt;

&lt;h3&gt;Detailed Frink list (higher-traffic):&lt;/h3&gt;
&lt;p&gt;For detailed discussions about particular programs, programming help, algorithms, and details of the Frink language, please join the &lt;a href=&quot;https://groups.yahoo.com/group/frink-discuss/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Frink-discuss&lt;/strong&gt; mailing list&lt;/a&gt;. (Hosted by Yahoo! Groups. Link opens in new window.) This is the appropriate place for posting programming questions and will probably be a higher-traffic list.&lt;/p&gt;

&lt;h3&gt;&lt;a name=&quot;FrinkScience&quot; id=&quot;FrinkScience&quot;&gt;OoooOoo Frink Science:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This list is intended to discuss problems in math, science, and physics and explore solutions using the Frink language.&lt;br /&gt;&lt;a href=&quot;https://groups.yahoo.com/group/FrinkScience/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Frink Science&lt;/strong&gt; mailing list&lt;/a&gt;. (Hosted by Yahoo! Groups. Link opens in new window.)&lt;/p&gt;


&lt;p&gt;You can read (and watch using RealPlayer) my presentation &lt;a href=&quot;https://frinklang.org/LL4.html&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Frink -- A Language for Understanding the Physical World&lt;/em&gt;&lt;/a&gt; that I gave on Frink at the Lightweight Languages 4 conference at MIT. This discusses some of the design decisions of Frink, how it has evolved, implementation details, and future directions for the language.&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;h2&gt;Using Frink&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&quot;TryAsYouRead&quot; id=&quot;TryAsYouRead&quot;&gt;Try as you read&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you want to try the calculations as you're reading, &lt;a href=&quot;https://frinklang.org/fsp/frink.fsp&quot; target=&quot;_blank&quot;&gt;click here to open the web-based interface in a new window.&lt;/a&gt; The web-based interface gives hints for new users, which may make it the easiest way to learn how to use Frink.&lt;/p&gt;
&lt;p&gt;If you have a frames-enabled browser, and you don't see a Frink sidebar to the left, you can also &lt;a href=&quot;https://frinklang.org/frinkframe.html&quot;&gt;click here to try Frink in a sidebar&lt;/a&gt; as you read this. (The sidebar mode doesn't give as many hints, though.)&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;JavaWebStart&quot; id=&quot;JavaWebStart&quot;&gt;Download using Java Web Start&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Quick Start:&lt;/strong&gt; On many platforms, if you already have Java installed, you can start Frink in the GUI mode by simply downloading and double-clicking the &lt;a href=&quot;https://frinklang.org/frinkjar/frink.jar&quot;&gt;&lt;code&gt;frink.jar&lt;/code&gt;&lt;/a&gt; file. For more startup options, see the &lt;a href=&quot;https://frinklang.org/#DownloadingFrink&quot;&gt;Downloading Frink&lt;/a&gt; section.&lt;/p&gt;
&lt;p&gt;Another method of installation requires Java Web Start, which is installed with most versions of Java. Using Java Web Start &lt;del&gt;is&lt;/del&gt; used to be a great way to run Frink if you don't need to run programs from the command-line. (But you &lt;em&gt;can&lt;/em&gt; still write and run programs from the GUI using Java Web Start!) If you do want to run programs from the command-line, see the &lt;a href=&quot;https://frinklang.org/#DownloadingFrink&quot;&gt;Downloading Frink&lt;/a&gt; section below. Java Web Start will allow you to automatically get the latest version of Frink and will update Frink automatically when new versions are available.&lt;/p&gt;
&lt;h4&gt;Installation Steps&lt;/h4&gt;
&lt;ol readability=&quot;4.273156899811&quot;&gt;&lt;li&gt;If you &lt;em&gt;don't&lt;/em&gt; have a recent version of Java, you can &lt;a target=&quot;_blank&quot; href=&quot;https://java.com/&quot;&gt;get it from Sun.&lt;/a&gt; (Link opens in new window.)&lt;/li&gt;
&lt;li&gt;(&lt;em&gt;Optional&lt;/em&gt;) If you've never installed anything with Java Web Start, please read and understand the &lt;a target=&quot;_blank&quot; href=&quot;https://frinklang.org/faq.html#AboutSecurityWarnings&quot;&gt;FAQ entry about the security warnings you'll see&lt;/a&gt; (link opens in new window) and your alternate download options.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Most major browsers have now disallowed Java plugins to run in the browser. However, if you have a Java Virtual Machine installed, you probably still have Java Web Start installed, which you need to invoke from the command-line with the command &lt;code&gt;javaws&lt;/code&gt;. In Fedora, you can make sure this is installed by installing the &lt;code&gt;icedtea-web&lt;/code&gt; package from your package manager, &lt;em&gt;e.g.&lt;/em&gt; as root, typing &lt;code&gt;dnf install icedtea-web&lt;/code&gt; and then one of the commands below.&lt;/li&gt;
&lt;li readability=&quot;11.905781584582&quot;&gt;&lt;strong&gt;Warning:&lt;/strong&gt; If you're using Java version 7u51 or later, they silently and incompatibly decided to change default security settings so you'll need to open the Java Control Panel to allow Frink to run. Otherwise you will see a dialog that says something like &quot;Application blocked by security settings&quot; or &quot;Your security settings have blocked a self-signed application from running.&quot; (This silent change was made after 12+ years of the aforementioned method working fine.)
&lt;p&gt;The best way to allow Frink to run is to follow the instructions &lt;a href=&quot;https://blogs.oracle.com/java-platform-group/entry/upcoming_exception_site_list_in&quot; target=&quot;_blank&quot;&gt;listed here&lt;/a&gt; and add &lt;code&gt;http://futureboy.us&lt;/code&gt; to the exceptions list in step 7.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As always, Java's instructions and installer are terrible, and the Java Control panel on Windows may actually be under your Start menu as &lt;code&gt;Java&lt;/code&gt; | &lt;code&gt;Configure Java&lt;/code&gt;, or under your Windows Control Panel, or if you start your Control Panel and don't see it, Java's control panel will be hidden under &quot;32-bit Control Panel.&quot; And sometimes you'll have multiple versions of Java installed and the one that gets started isn't the latest version. I had &lt;em&gt;lots&lt;/em&gt; of problems until I manually uninstalled &lt;em&gt;all&lt;/em&gt; the versions of Java on the Windows machine, reinstalled the latest version, and uninstalled Frink and reinstalled it. Sorry about that. Windows and Java integration is terrible. (The &lt;code&gt;icedtea-web&lt;/code&gt; package for Fedora and other installations contains a vastly better implementation of Java Web Start.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Click one of the options below to install Frink: (see the screenshots below):
&lt;ul readability=&quot;5.4522019334049&quot;&gt;&lt;li readability=&quot;2.8026315789474&quot;&gt;&lt;a href=&quot;https://frinklang.org/frinkjar/frink.jnlp&quot;&gt;Swing Interface&lt;/a&gt; Prettier. Requires Java 1.5.0 or later.
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If your browser no longer supports Java in the browser, you can probably install this from the command-line by typing:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;javaws https://futureboy.us/frinkjar/frink.jnlp&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2.619153674833&quot;&gt;&lt;a href=&quot;https://frinklang.org/frinkjar/frinkwithlibs.jnlp&quot;&gt;Swing Interface with standard libraries&lt;/a&gt;. This is a version of Frink that contains a variety of &lt;a href=&quot;https://frinklang.org/fsp/frinklibs.fsp&quot;&gt;standard libraries&lt;/a&gt; and useful programs. It's a larger download, but the standard libraries change somewhat infrequently and should only get downloaded when changes are made.
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If your browser no longer supports Java in the browser, you can probably install this from the command-line by typing:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;javaws https://futureboy.us/frinkjar/frinkwithlibs.jnlp&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2.8452380952381&quot;&gt;&lt;a href=&quot;https://frinklang.org/frinkjar/frinkawt.jnlp&quot;&gt;AWT Interface&lt;/a&gt; - Not as pretty as the Swing mode, but will run on older JVMs.
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If your browser no longer supports Java in the browser, you can probably install this from the command-line by typing:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;javaws https://futureboy.us/frinkjar/frinkawt.jnlp&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;If you've read those &lt;a target=&quot;_blank&quot; href=&quot;https://frinklang.org/faq.html#AboutSecurityWarnings&quot;&gt;security notes&lt;/a&gt;, and understood what the security messages are telling you, and the warnings are still too scary, (and you don't want to send me the $400 per year it would cost me to remove at least one of them,) and you'd rather download a limited version of Frink that runs in the most restrictive security sandbox (breaking some features), then &lt;a href=&quot;https://frinklang.org/frinkjar/frinklimited.jnlp&quot;&gt;click here to install a limited version of Frink.&lt;/a&gt; Again, please read those &lt;a target=&quot;_blank&quot; href=&quot;https://frinklang.org/faq.html#AboutSecurityWarnings&quot;&gt;security notes&lt;/a&gt; to see what features will be unavailable if you choose this option. You can always get the full version of Frink later if you need those features.&lt;/p&gt;
&lt;p&gt;If someone wants to send me the $400 necessary to get a VeriSign &quot;Code Signing Cerificate&quot;, I'll sign it just for you. It won't work any differently.)&lt;/p&gt;
&lt;p&gt;If you have an old version of Java Web Start, Frink will probably show up in the &quot;Downloaded Applications&quot; section of the Java Web Start panel which isn't immediately visible. Use the &lt;code&gt;View&lt;/code&gt; menu option to select the Downloaded Applications tab. It will also let you create a Frink shortcut on your desktop or in your start menu. The defaults in Java Web Start before version 1.4.2 are set oddly so that the &lt;em&gt;second&lt;/em&gt; time you run Frink, it will ask you if you want to make a shortcut.&lt;/p&gt;
&lt;p&gt;If you're using Linux, and Sun's Java release, only Java version 1.5 beta and later will install shortcuts onto your desktop and start menu. Highly recommended.&lt;/p&gt;

&lt;h3&gt;&lt;a name=&quot;SwingUserInterface&quot; id=&quot;SwingUserInterface&quot;&gt;Swing User Interface&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Swing version allows mixed fonts and colors. Due to some performance bugs in Sun's Swing implementation (like large paragraphs taking several minutes to paint every time you resize or scroll,) it can be problematic. As of 2008-08-25, the capabilities of the Swing and AWT interfaces are about the same.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://frinklang.org/images/swing.png&quot; width=&quot;500&quot; height=&quot;400&quot; alt=&quot;Swing GUI Screenshot&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;AWTUserInterface&quot; id=&quot;AWTUserInterface&quot;&gt;AWT User Interface&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The AWT user interface has several modes. The two-line conversion mode and &lt;a href=&quot;https://frinklang.org/#ProgrammingMode&quot;&gt;programming mode&lt;/a&gt; are shown below. Small devices usually can't run Swing, but all Java platforms should be able to run AWT.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://frinklang.org/images/awtconvert.png&quot; width=&quot;500&quot; height=&quot;400&quot; alt=&quot;AWT Two-line conversion screenshot&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://frinklang.org/images/awtprogram.png&quot; width=&quot;500&quot; height=&quot;400&quot; alt=&quot;AWT Programming Mode screenshot&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;FrinkAsAnApplet&quot; id=&quot;FrinkAsAnApplet&quot;&gt;Frink As An Applet&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If your web browser supports Java 1.3.1 or later, try the &lt;a href=&quot;https://frinklang.org/FrinkApplet.html&quot;&gt;Java Applet-based interface&lt;/a&gt;. It looks and works just like the GUI above, but it requires you to be connected to the internet and must download for each session. Your browser must support Java 1.3.1 or later, or you will need to get &lt;a target=&quot;_blank&quot; href=&quot;https://java.com/&quot;&gt;download a newer version of Java from Sun.&lt;/a&gt; It is extremely highly recommended that you have Java 1.5.0 update 2 or later. This has been tested with Internet Explorer, Netscape 4.x, Netscape 6+, Mozilla (Windows and Linux), and Opera.&lt;/p&gt;
&lt;p&gt;If you don't have a recent version of Java, you can &lt;a target=&quot;_blank&quot; href=&quot;https://java.com/&quot;&gt;get it from Sun.&lt;/a&gt; (Link opens in new window.)&lt;/p&gt;
&lt;p&gt;(The certificate is just signed by me, so you'll get a warning. Network access is necessary to use the network portions of Frink... like currency calculations, translations, etc. If you deny network access, the non-network parts of Frink will work just fine. If someone wants to send me the $400 necessary to get a VeriSign &quot;Code Signing Cerificate&quot;, I'll sign it just for you. It won't work any differently.)&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;WebInterface&quot; id=&quot;WebInterface&quot;&gt;Web Interface&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If the applet doesn't work for you, try the &lt;a href=&quot;https://frinklang.org/fsp/frink.fsp&quot;&gt;web interface.&lt;/a&gt; It should allow you to use the latest version of the Frink engine. It is now powered by &lt;a href=&quot;https://frinklang.org/fspdocs.html&quot;&gt;Frink Server Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this web interface, you can enter any Frink expression in the &quot;From:&quot; box. If you also enter a value in the &quot;To:&quot; box, it is treated as the right-hand side of a conversion expression (that is, to the right of the conversion operator &lt;code&gt;-&amp;gt;&lt;/code&gt; )&lt;/p&gt;
&lt;p&gt;Thus, to convert 10 meters to feet, you can enter &lt;code class=&quot;input&quot;&gt;10 meters&lt;/code&gt; in the &quot;From&quot; box and &lt;code class=&quot;input&quot;&gt;feet&lt;/code&gt; in the &quot;To&quot; box, or, equivalently, type &lt;code class=&quot;input&quot;&gt;10 meters -&amp;gt; feet&lt;/code&gt; in the &quot;From&quot; box and leave the &quot;To&quot; box empty. It does exactly the same thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick Start:&lt;/strong&gt; On many platforms, if you already have Java installed, you can start Frink in the GUI mode by simply downloading and double-clicking the &lt;a href=&quot;https://frinklang.org/frinkjar/frink.jar&quot;&gt;&lt;code&gt;frink.jar&lt;/code&gt;&lt;/a&gt; file.&lt;/p&gt;
&lt;p&gt;If you're just using Frink for interactive calculations, or are happy using the built-in programming mode and you're not writing running programs from the command-line, see the &lt;a href=&quot;https://frinklang.org/#JavaWebStart&quot;&gt;Java Web Start&lt;/a&gt; section above.&lt;/p&gt;
&lt;p&gt;(If you're looking for an installer for handheld devices, like Android, see the &lt;a href=&quot;https://frinklang.org/#SmallDevices&quot;&gt;Small Devices&lt;/a&gt; section below.)&lt;/p&gt;
&lt;p&gt;If you want to write full Frink programs &lt;em&gt;and&lt;/em&gt; run them from the commmand-line, you will need to get your own copy of Frink, and have a Java 1.1 or later runtime environment on your machine, 1.4.2+ is recommended as it's less buggy. The date calculations in anything before Java 1.3 are rather bad,) you may download the latest executable &lt;code&gt;jar&lt;/code&gt; file. (Note that this changes almost daily as I do more work, so download often.)&lt;/p&gt;
&lt;p&gt;Otherwise, here are the steps to downloading Frink:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;If you don't have a recent version of Java, you can &lt;a target=&quot;_blank&quot; href=&quot;https://java.com/&quot;&gt;get it from Sun.&lt;/a&gt; (Link opens in new window.)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://frinklang.org/frinkjar/frink.jar&quot;&gt;Download frink.jar&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;(Double-clicking the file you just downloaded might start Frink in GUI mode, depending on your operating system. If that's not enough, read on.)&lt;/li&gt;
&lt;li&gt;See the &lt;a href=&quot;https://frinklang.org/#RunningFrink&quot;&gt;Running Frink&lt;/a&gt; section below for directions for starting full Frink programs, running from the command-line, etc.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Quick Start:&lt;/strong&gt; On many platforms, if you already have Java installed, you can start Frink in the GUI mode by simply downloading and double-clicking the &lt;a href=&quot;https://frinklang.org/frinkjar/frink.jar&quot;&gt;&lt;code&gt;frink.jar&lt;/code&gt;&lt;/a&gt; file.&lt;/p&gt;
&lt;p&gt;If you want to run Frink in command-line mode, here are a couple of sample scripts you can use to start Frink. &lt;em&gt;You will need to edit them to match the paths on your system!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the samples below, you may need to replace &lt;code&gt;java&lt;/code&gt; or &lt;code&gt;javaw&lt;/code&gt; with the full path to your Java Virtual Machine, whatever that may be. Note that &lt;code&gt;javaw&lt;/code&gt; is a Windows-only command that simply starts Java without opening a console window. You'll probably replace this with &lt;code&gt;java&lt;/code&gt; on other platforms.&lt;/p&gt;
&lt;p&gt;The most general way to start Frink is to launch the &lt;code&gt;frink.gui.FrinkStarter&lt;/code&gt; class:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;input&quot;&gt;java -cp frink.jar frink.gui.FrinkStarter &lt;em&gt;[options]&lt;/em&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(The above starter scripts use this class. Look at them first.) By default, this starts in text mode but allows many command-line options to start in different modes:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;5&quot; summary=&quot;FrinkStarter options&quot; readability=&quot;2.5&quot;&gt;&lt;tr&gt;&lt;th&gt;Switch&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;--swing&lt;/td&gt;
&lt;td&gt;Starts in Swing GUI mode&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;--gui&lt;/td&gt;
&lt;td&gt;Starts in Swing GUI mode&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;--awt&lt;/td&gt;
&lt;td&gt;Starts in AWT GUI mode&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;--fullscreen&lt;/td&gt;
&lt;td&gt;Starts fullscreen&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;--prog&lt;/td&gt;
&lt;td&gt;Starts in programming mode with a blank program&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;-open &lt;em&gt;filename&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Starts the specified filename in programming mode (this option is passed by double-clicking a file in Windows if you have file associations set up.)&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Other start options are listed below, if you want to use them. I'd suggest using one of the scripts above and modifying it.&lt;/p&gt;
&lt;p&gt;To run the jar file in text mode (only), use:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;java -cp frink.jar frink.parser.Frink &lt;em&gt;[options]&lt;/em&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To run the jar file with the Swing GUI, (shown above under &lt;a href=&quot;https://frinklang.org/#JavaWebStart&quot;&gt;Java Web Start&lt;/a&gt;,) use:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;javaw -cp frink.jar frink.gui.SwingInteractivePanel &lt;em&gt;[options]&lt;/em&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The Swing GUI is the default action for the jar file, so this is the same as saying:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;javaw -jar frink.jar &lt;em&gt;[options]&lt;/em&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To run the jar file with the AWT GUI, which gives access to several modes, including programming mode, use:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;javaw -cp frink.jar frink.gui.InteractivePanel &lt;em&gt;[options]&lt;/em&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To run the jar file and start the AWT GUI in programming mode, use:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;javaw -cp frink.jar frink.gui.ProgrammingPanel &lt;em&gt;[filename]&lt;/em&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To run the jar file and start the Swing GUI in programming mode, use:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;javaw -cp frink.jar frink.gui.SwingProgrammingPanel &lt;em&gt;[filename]&lt;/em&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If a single filename is specified in programming mode, this file will be loaded into the interface.&lt;/p&gt;
&lt;p&gt;To run the AWT GUI in full-screen size (this is primarily for small devices,) use:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;javaw -cp frink.jar frink.gui.FullScreenAWTStarter &lt;em&gt;[options]&lt;/em&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Depending on your operating system, I recommend that you write a shell script, batch file, or create a shortcut to let you run this even more easily (see below for samples.) To exit, use Ctrl-C, or send your platform's end-of-file character (usually Ctrl-Z or Ctrl-D), possibly followed by carriage return. Or just close the window.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&quot;https://frinklang.org/#ProxyConfiguration&quot;&gt;Proxy Configuration&lt;/a&gt; below for additional options if you're running behind a HTTP or FTP proxy server.&lt;/p&gt;
&lt;p&gt;Also see the &lt;a href=&quot;https://frinklang.org/#PerformanceTips&quot;&gt;Performance Tips&lt;/a&gt; section below to see how to improve speed.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;CommandLineOptions&quot; id=&quot;CommandLineOptions&quot;&gt;Command-Line Options&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Arguments passed in on the command-line are treated as names of Frink programs to be executed. Other command-line options are listed below.&lt;/p&gt;
&lt;p&gt;If you just want to have Frink calculate something and exit, you can pass arguments on the command line using the &lt;code&gt;-e &lt;em&gt;[string]&lt;/em&gt;&lt;/code&gt; switch. Each command-line argument following the -e will be interpreted as a Frink expression, making it easy to run Frink from other applications:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;java -cp frink.jar frink.parser.Frink -e &quot;78 yards -&amp;gt; feet&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;234.0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Other command-line options:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;5&quot; summary=&quot;Command-line options&quot; readability=&quot;28.407311456534&quot;&gt;&lt;tr&gt;&lt;th&gt;Switch&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12.5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;-f &lt;em&gt;filename&lt;/em&gt;&lt;/td&gt;
&lt;td readability=&quot;10&quot;&gt;Allows you to specify multiple Frink source files to load and run. Multiple &lt;code&gt;-f &lt;em&gt;filename&lt;/em&gt;&lt;/code&gt; options may be specified. If this option is specified, the specified file will &lt;em&gt;not&lt;/em&gt; receive any following command-line arguments. &lt;em&gt;The &lt;code&gt;-f&lt;/code&gt; switch is no longer required or recommended unless you are loading multiple files.&lt;/em&gt; Normally, you will just specify the filename to load as the last command-line argument.
&lt;p&gt;For example, to load your own definitions from &lt;code&gt;mydefs.frink&lt;/code&gt; before loading the main program &lt;code&gt;main.frink&lt;/code&gt;, you may do something like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;frink -f mydefs.frink main.frink &lt;em&gt;args&lt;/em&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;-k&lt;/td&gt;
&lt;td&gt;Remain in interactive mode after loading files or parsing command-line arguments. This is very useful if you want to load definitions from one or more files and then go into an interactive session.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.7297297297297&quot;&gt;&lt;td class=&quot;lit&quot;&gt;-u &lt;em&gt;filename&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Specify a different units file than the default. This allows you to change the fundamental dimensions that you like to use, or change my definitions that you don't agree with. You can download my &lt;a href=&quot;https://frinklang.org/frinkdata/units.txt&quot;&gt;latest data file&lt;/a&gt; (normally included in the &lt;code&gt;.jar&lt;/code&gt; file) and modify it to suit your needs.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;--nounits&lt;br /&gt;-nu&lt;/td&gt;
&lt;td&gt;Don't load a units file at all on startup. This will improve startup time, but will break all programs that use any of the standard units. No units of measure will be defined at all.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;-I &lt;em&gt;path&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Appends the specified path to the paths that will be searched when a &lt;code&gt;use&lt;/code&gt; statement is encountered in a program. This may be either an absolute or relative file path. You may specify multiple &lt;code&gt;-I&lt;/code&gt; arguments on the command-line, and the paths will be searched in the order they are specified.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;22.827708703375&quot;&gt;&lt;td class=&quot;lit&quot;&gt;--encoding &lt;em&gt;str&lt;/em&gt;&lt;/td&gt;
&lt;td readability=&quot;21.86036036036&quot;&gt;Specify the character encoding of all following Frink program files. &lt;em&gt;This option must precede the filename that it modifies.&lt;/em&gt; Frink programs can now be more directly written in any language and encoding system. This switch is only necessary if your system's default encoding (as detected by Java) is different than that of the program file you're loading.
&lt;p&gt;The encoding is a string representing any encoding that your version of Java supports, &lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;&quot;UTF-8&quot;&lt;/code&gt;, &lt;code&gt;&quot;US-ASCII&quot;&lt;/code&gt;, &lt;code&gt;&quot;ISO-8859-1&quot;&lt;/code&gt;, &lt;code&gt;&quot;UTF-16&quot;&lt;/code&gt;, &lt;code&gt;&quot;UTF-16BE&quot;&lt;/code&gt;, &lt;code&gt;&quot;UTF-16LE&quot;&lt;/code&gt;. Your release of Java may support more charsets, but all implementations of Java are required to support the above. The sample program &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=encodings.frink&quot;&gt;encodings.frink&lt;/a&gt; also demonstrates how to list all of the encodings available on your system (and their aliases.)&lt;/p&gt;
&lt;p&gt;If you specify multiple files having different encodings using multiple &lt;code&gt;-f&lt;/code&gt; directives, you can use something like &lt;code&gt;--encoding &quot;&quot;&lt;/code&gt; to set the encoding back to your system's default.&lt;/p&gt;
&lt;p&gt;This flag does &lt;em&gt;not&lt;/em&gt; alter the behavior of files opened using commands like &lt;code&gt;read[]&lt;/code&gt; or &lt;code&gt;lines[]&lt;/code&gt;. To change their behavior, use the &lt;a href=&quot;https://frinklang.org/#SpecifyingAlternateEncodings&quot;&gt;two-argument versions of these commands.&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;&lt;code&gt;-v&lt;/code&gt;&lt;br /&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Print out the Frink version and exit. (From inside a program, you can call the function &lt;code&gt;FrinkVersion[]&lt;/code&gt; to return the current version.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td class=&quot;lit&quot;&gt;--sandbox&lt;/td&gt;
&lt;td&gt;Enables Frink's internal &quot;sandbox&quot; mode so you can run untrusted code. This is different from Java's sandbox, in that it enables only Frink's notions of what should and shouldn't be allowed. It disallows programs to define functions and many other things, so it's rarely useful to the end-user, and hardly any programs will run this way. It's really more for my testing.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;--ignore-errors&lt;/td&gt;
&lt;td&gt;Ignores syntax errors when parsing a program and attempts to ignore those lines and recover and run the program. Generally a very bad idea, but this flag was added to preserve old, excessively-permissive behavior.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;&lt;a name=&quot;HandlingCommandLineArguments&quot; id=&quot;HandlingCommandLineArguments&quot;&gt;Handling Command-Line Arguments&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Any command-line arguments after the name of the program to be executed are passed to the program as an &lt;a href=&quot;https://frinklang.org/#Arrays&quot;&gt;array&lt;/a&gt; called &lt;code&gt;ARGS&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;ExperimentalVersions&quot; id=&quot;ExperimentalVersions&quot;&gt;Experimental Versions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For those who want a standalone, all-in-one Frink download, there is an &lt;em&gt;experimental, unsupported&lt;/em&gt; version of Frink compiled for Windows only using an experimental, unreleased version of the GNU compiler for Java (GCJ). This only works in command-line mode, but requires no other downloads and may start up more quickly. It is appropriate for quick calculations and command-line scripts. Not all functions may work. Let me know about parts that do or don't work for you. It is compressed with UPX to reduce the file size (possibly at the cost of some startup time.) This version starts up more quickly than the Sun JVM, but runs programs about 5-6 times slower.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Experimental, Unsupported&lt;/strong&gt; executable for Windows: &lt;a href=&quot;https://frinklang.org/frinkjar/frinkx.exe&quot;&gt;frinkx.exe&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;(Unfortunately, it's compiled without optimization, because that pegs the CPU for over 72 minutes, and then blows out my system after trying to use over a gigabyte of virtual memory. Anyone want to donate me a new computer with tons of memory? Or try compiling it with -O3?) For Windows, you can use this experimental &lt;a href=&quot;http://www.thisiscool.com/gcc_mingw.htm#gcj43ecj&quot;&gt;gcj 4.3 eclipse-merge-branch&lt;/a&gt; version.&lt;/p&gt;
&lt;p&gt;Hint: If you install the gcj package linked above, or have a working GCJ (4.3 or later is required) for other platforms, the command line to compile with full optimization will be something like:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;gcj -O3 -fomit-frame-pointer --main=frink.parser.Frink -o frinkx.exe &lt;a href=&quot;https://frinklang.org/frinkjar/frink.jar&quot;&gt;frink.jar&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;SmallDevices&quot; id=&quot;SmallDevices&quot;&gt;Small Devices&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Frink can run entirely on handheld devices like the any phone running the Android platform, Sony Ericcson P800, P802, or P900 smartphone, the Nokia 92x0 Communicator (Nokia 9210, 9210i, and 9290), and the Sharp Zaurus.&lt;/p&gt;
&lt;p&gt;The installer is built as part of the Frink release process, so these versions will be up-to-date with the latest Frink. (The version numbers in the installers may not change, though.)&lt;/p&gt;
&lt;p&gt;Download the installer for the following platforms:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://futureboy.us/temp/frink.apk&quot;&gt;Android&lt;/a&gt;&lt;/strong&gt; - All of Frink's functionality, including graphics, is available on the Android mobile phone platform. See the &lt;a href=&quot;https://frinklang.org/android.html&quot;&gt;Frink on Android&lt;/a&gt; page for more information on using Frink on Android. As Android is a stable, complete, widely-available, well-designed, multi-platform and multi-vendor environment, it will probably be the primary platform for Frink on handheld devices in the future. Other proprietary platforms that require extensive porting and packaging for every phone model may go away.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://frinklang.org/frinkjar/frink.sis&quot;&gt;Sony Ericsson P800, P802 or P900, and Motorola A920 or A925&lt;/a&gt;&lt;/strong&gt; (and perhaps other Symbian 7.0 devices with the UIQ2 user interface.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://frinklang.org/frinkjar/frinkcrystal.sis&quot;&gt;Nokia Communicator 92xx (Nokia 9210, 9210i, and 9290)&lt;/a&gt;&lt;/strong&gt; (and perhaps other Symbian 6.0 devices with the &quot;Crystal&quot; (wide-screen) user interface). You need 3 to 4 megabytes of free memory to run Frink.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://frinklang.org/frinkjar/frink_arm.ipk&quot;&gt;Sharp Zaurus&lt;/a&gt;&lt;/strong&gt; (despite the filename, this isn't ARM-processor specific--it's pure Java, and might work on other platforms that use the &lt;code&gt;.ipk&lt;/code&gt; package format.) Note: I need help testing and improving this installation package. Please contact &lt;a href=&quot;mailto:eliasen@mindspring.com&quot;&gt;Alan Eliasen&lt;/a&gt; if you have experience with Zaurus installer packages. &lt;em&gt;Hint for helpers:&lt;/em&gt; an &lt;code&gt;.ipk&lt;/code&gt; file is just a &lt;code&gt;.tar.gz&lt;/code&gt; file, so you can open it up and poke around, but I don't have a Zaurus to test on.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Experimental:&lt;/strong&gt; &lt;strong&gt;&lt;a href=&quot;https://frinklang.org/frinkjar/frink80.jar&quot;&gt;Nokia 9300, Nokia 9500 Communicator&lt;/a&gt;&lt;/strong&gt; (and perhaps other Symbian Series 80 devices.) I need help testing this one. The Series 80 devices evidently crash when you try to add menubars, so some functions are impossible to access. This is a jar file customized for Series 80, and not an &lt;code&gt;.sis&lt;/code&gt; installer.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Notes about running Frink on other devices, including notes about why I probably &lt;em&gt;won't&lt;/em&gt; provide releases for newer Symbian devices that require their &quot;Symbian Signed&quot; abomination, please see &lt;a href=&quot;https://frinklang.org/faq.html#WillFrinkRun&quot;&gt;this FAQ entry&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have problems running any of these, please contact &lt;a href=&quot;mailto:eliasen@mindspring.com&quot;&gt;Alan Eliasen&lt;/a&gt;. Since I don't own any of these devices, I rely on others for testing and detailed bug reports. (The emulators don't always work like the real devices!) It's possible for bugs to slip in that work under normal testing, but cause problems on the limited/different JVMs on these devices.&lt;/p&gt;
&lt;p&gt;If anyone knows of a Symbian 6.0 device with the &quot;Quartz&quot; user interface that supports PersonalJava, please let me know and I can give you an installer to test.&lt;/p&gt;
&lt;p&gt;If you know of a device that supports PersonalJava 1.1 or better, including the &lt;code&gt;java.math&lt;/code&gt; package and floating-point math, and you think Frink would run on this device and you would like to help test it, please &lt;a href=&quot;mailto:eliasen@mindspring.com&quot;&gt;suggest it to me.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want a unified environment to write, run, save, and load Frink programs, try the programming mode. You can either start this mode explicitly (see the &lt;a href=&quot;https://frinklang.org/#RunningFrink&quot;&gt;Running Frink&lt;/a&gt; section below) or, from the AWT GUI, choose the menu option &lt;code&gt;Mode | Programming&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This mode is primarily designed to allow programming on small devices, but can run on any platform.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Data&lt;/code&gt; menu option allows you to choose between the &lt;a href=&quot;https://frinklang.org/frinkdata/units.txt&quot;&gt;standard data file&lt;/a&gt; and an alternate data file. You'll usually want to use the standard data file, but on small devices, it can take a long time to start your program, and may use a fair amount of memory. The standard data file is big. In that case, you may want to make a pared-down (or even empty) units file and use that when running your programs.&lt;/p&gt;
&lt;p&gt;For now, selecting a different data file is not a persistent setting. This setting will only remain in place until you exit Frink.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;GUIOptions&quot; id=&quot;GUIOptions&quot;&gt;GUI Options&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can specify the width or the height of the window for &lt;code&gt;frink.gui.InteractivePanel&lt;/code&gt; or &lt;code&gt;frink.gui.SwingInteractivePanel&lt;/code&gt; or &lt;code&gt;frink.gui.FullScreenAWTStarter&lt;/code&gt;. You may specify width or height or both. For example:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;java -cp frink.jar frink.gui.SwingInteractivePanel --width &lt;em&gt;500&lt;/em&gt; --height &lt;em&gt;400&lt;/em&gt;&lt;/code&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellpadding=&quot;3&quot; summary=&quot;GUI Options&quot; readability=&quot;3&quot;&gt;&lt;tr&gt;&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;--width &lt;em&gt;int&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Sets the width of the window in pixels.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;--height &lt;em&gt;int&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Sets the height of the window in pixels.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;--fontsize &lt;em&gt;int&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Sets the font size in points.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;&lt;a name=&quot;PerformanceTips&quot; id=&quot;PerformanceTips&quot;&gt;Performance Tips&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are several things you can do to make your Java Virtual Machine (JVM) run Frink more quickly:&lt;/p&gt;
&lt;ul readability=&quot;0.49808429118774&quot;&gt;&lt;li&gt;Java 8 contains my algorithmic improvements to make large integers work &lt;em&gt;much&lt;/em&gt; more quickly for multiplication, base conversion, etc. (It only took the Java people 11+ years to import my patches.)&lt;/li&gt;
&lt;li&gt;For long-running programs, if you're using Sun's Java Virtual Machine (JVM), use the &lt;code&gt;-server&lt;/code&gt; command-line switch to the &lt;code&gt;java&lt;/code&gt; executable. This starts the Server VM which optimizes more aggressively and often improves performance of long-running programs by a factor of 2, but at the expense of increased start-up time. Note that the server VM may not be available if you just downloaded the Java Runtime Environment (JRE), and not the full Java Software Development Kit (SDK).&lt;/li&gt;
&lt;li&gt;If you're &lt;em&gt;not&lt;/em&gt; starting long-running programs, and want the fastest start-up time, &lt;em&gt;don't&lt;/em&gt; use the Server VM.&lt;/li&gt;
&lt;li&gt;Like all Java programs, Frink can often run much faster if you allow the JVM to use more memory at startup, leading to less-frequent garbage collection. In Sun's implementation, this is achieved by passing the options &lt;code&gt;-Xmx&lt;em&gt;&amp;lt;size&amp;gt;&lt;/em&gt;&lt;/code&gt; (for maximum Java heap size) and &lt;code&gt;-Xms&lt;em&gt;&amp;lt;size&amp;gt;&lt;/em&gt;&lt;/code&gt; (for initial Java heap size) to the &lt;code&gt;java&lt;/code&gt; executable. The &lt;em&gt;size&lt;/em&gt; arguments are something like &lt;code&gt;256M&lt;/code&gt; for 256 megabytes. Note that this is at the expense of other processes running on your system, and should be used sparingly because allocating too much memory may cause your system to swap excessively or run out of memory if set too high.&lt;/li&gt;
&lt;li readability=&quot;3.954415954416&quot;&gt;(&lt;em&gt;Probably obsolete&lt;/em&gt;) If you're doing mostly large integer work (factoring, primality testing, other number theory,) where most of the runtime is spent in mathematical operations on very large integers, the &lt;a href=&quot;http://www.kaffe.org/&quot;&gt;Kaffe&lt;/a&gt; Virtual Machine compiled with the incredibly fast &lt;a href=&quot;https://gmplib.org/&quot;&gt;GMP&lt;/a&gt; numerical libraries works literally thousands of times faster than Sun's VM and its horribly naïve algorithms.
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Make sure that GMP is compiled with the configure option &lt;code&gt;--enable-alloca=malloc-reentrant&lt;/code&gt; or you'll blow out the stack and crash with very large integers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; As of the 2004-07-18 release of Kaffe, you must now explicitly pass the &lt;code&gt;-Xnative-big-math&lt;/code&gt; argument when running Kaffe in order to use the GMP libraries.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a name=&quot;ProxyConfiguration&quot; id=&quot;ProxyConfiguration&quot;&gt;Proxy Configuration&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you use a HTTP or FTP proxy server, you need to add some options to your command lines (say, right after the word &lt;code&gt;java&lt;/code&gt;) to use the proxy if you want certain functions to work. HTTP and FTP are used for the following:&lt;/p&gt;
&lt;p&gt;The following are settings for Sun's distribution of Java 1.4.1. You may need different options depending on your Java distribution. See &lt;a href=&quot;http://download.oracle.com/javase/1.4.2/docs/guide/net/properties.html&quot;&gt;Sun's Networking Properties documentation&lt;/a&gt; for more properties you may need if you're on a network that requires more proxy settings.&lt;/p&gt;
&lt;p&gt;HTTP proxy:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;-Dhttp.proxyHost=&lt;em&gt;proxyname&lt;/em&gt; -Dhttp.proxyPort=&lt;em&gt;portnum&lt;/em&gt;&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;FTP proxy:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;-Dftp.proxyHost=&lt;em&gt;proxyname&lt;/em&gt; -Dftp.proxyPort=&lt;em&gt;portnum&lt;/em&gt;&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;These settings should &lt;em&gt;not&lt;/em&gt; be necessary when using the applet version or the Java Web Start version, as these inherit the proxy settings from your browser or the Java Web Start Application Manager respectively.&lt;/p&gt;

&lt;p&gt;Frink is, first and foremost, designed to make it easy to figure out things. If there's a unifying principle in Frink, it could be considered to be the &lt;em&gt;normalization of information&lt;/em&gt;. I'm trying to simplify and unify the representation of data so that you can perform all sorts of interesting operations on them. Whatever that means.&lt;/p&gt;
&lt;p&gt;Frink is optimized for doing quick, off-the-cuff calculations with a minimum of typing, primarily so it can be used with handheld devices which can make text entry difficult (especially symbols). This doesn't mean that Frink is unsuitable for doing large, very high accuracy calculations. It does those well, too, and the complicated calculations look just like the simple ones.&lt;/p&gt;
&lt;p&gt;To give an example, Frink represents &lt;em&gt;all&lt;/em&gt; numerical quantities as not simply a number, but a number and the units of measurement that quantity represents. So you can enter things such as &quot;3 feet&quot; or &quot;40 acres&quot; or &quot;4 tons&quot;, and add, subtract, multiply, etc. these things together. Frink will track the resulting quantities through all calculations, eliminating a large category of errors. You can add feet, meters, or rods all in the same calculation and the details are handled transparently and correctly.&lt;/p&gt;
&lt;p&gt;It also knows the ways that these units are interrelated-- a length times a length is an area; length&lt;sup&gt;3&lt;/sup&gt; is a volume (if you believe in the hypothetical Z axis); mass times distance times acceleration is energy. If you know something in one system of measurement you can convert it to any other system of measurement.&lt;/p&gt;
&lt;p&gt;All units are standardized and normalized into combinations a small number of several &quot;Fundamental Dimensions&quot; that cannot be reduced any further. These are completely arbitrary and configurable but are currently:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellpadding=&quot;3&quot; summary=&quot;Fundamental Units&quot;&gt;&lt;tr&gt;&lt;th&gt;Quantity&lt;/th&gt;
&lt;th&gt;Fundamental Unit&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;length&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;m&lt;/td&gt;
&lt;td&gt;meter&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;mass&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;kg&lt;/td&gt;
&lt;td&gt;kilogram&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;time&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;s&lt;/td&gt;
&lt;td&gt;second&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;current&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;A&lt;/td&gt;
&lt;td&gt;ampere&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;luminous_intensity&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;cd&lt;/td&gt;
&lt;td&gt;candela&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;substance&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;mol&lt;/td&gt;
&lt;td&gt;mole&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;temperature&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;K&lt;/td&gt;
&lt;td&gt;Kelvin&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;information&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;bit&lt;/td&gt;
&lt;td&gt;bit&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;currency&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;USD&lt;/td&gt;
&lt;td&gt;U.S. dollar&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Look at the &lt;a href=&quot;https://frinklang.org/frinkdata/units.txt&quot;&gt;data file&lt;/a&gt; for these definitions (and my editorializing on the boneheadedness of many these choices.) The data file recursively defines all measurements in terms of the fundamental units.&lt;/p&gt;
&lt;p&gt;An exponent can be attached to each dimension. For example, an area is length * length which might be represented as &lt;code&gt;meters^2&lt;/code&gt;. Of course, a negative exponent indicates &lt;em&gt;division&lt;/em&gt; by that quantity, so meters/second will be displayed as &lt;code&gt;m s^-1&lt;/code&gt;, or acceleration (which can be represented as meters per second per second) is represented as &lt;code&gt;m s^-2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Numeric values in Frink are represented in one of three ways:&lt;/p&gt;
&lt;dl&gt;&lt;dt&gt;Integer&lt;/dt&gt;
&lt;dd&gt;An arbitrarily large number with no decimal part. Represented as a number with no decimal point, (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;1000000000&lt;/code&gt;) or the special &quot;exact exponent&quot; form &lt;code&gt;1ee9&lt;/code&gt;. An integer can also contain underscores for better readability, &lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;1_000_000_000&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;Rational&lt;/dt&gt;
&lt;dd&gt;An arbitrarily large number which can be written as integer/integer ( such as &lt;code&gt;1/3&lt;/code&gt; or &lt;code&gt;22/7&lt;/code&gt; ). Rational numbers are first reduced to smallest terms; that is, &lt;code&gt;2/10&lt;/code&gt; is stored as &lt;code&gt;1/5&lt;/code&gt; and &lt;code&gt;5/5&lt;/code&gt; is stored as the integer &lt;code&gt;1&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;Floating Point&lt;/dt&gt;
&lt;dd&gt;An arbitrary-precision floating-point number. Currently, the number of decimal places calculated or displayed is limited to 20 for efficiency reasons. Any number containing a decimal point is a floating-point number, such as &lt;code&gt;1.&lt;/code&gt; or &lt;code&gt;1.01132&lt;/code&gt;, as well as any approximate exponential such as &lt;code&gt;2e10&lt;/code&gt; or &lt;code&gt;6.02e23&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;Complex Numbers&lt;/dt&gt;
&lt;dd&gt;Complex numbers are any number with an imaginary part. The imaginary unit is specified by the symbol &lt;code&gt;i&lt;/code&gt;. For example, &lt;code&gt;40 + 3 i&lt;/code&gt;. The real and imaginary parts of a complex number can be any of the numerical types listed above.&lt;/dd&gt;
&lt;dt&gt;Intervals&lt;/dt&gt;
&lt;dd&gt;An interval represents a range of values, such as [2.1, 3] where, depending on your interpretation, the actual number is unknown, but contained within this range, or the number simultaneously takes on all values within the range. See the &lt;a href=&quot;https://frinklang.org/#IntervalArithmetic&quot;&gt;Interval Arithmetic&lt;/a&gt; section of the documentation for more information.&lt;/dd&gt;
&lt;/dl&gt;&lt;p&gt;Frink knows about a wide variety of measurements. You can usually type a unit of measurement in a variety of ways. Plurals are usually understood. Case is important (and somewhat arbitrary until I do some normalization and cleanup of the units file, but usually lowercase is your best choice.) The following are all examples of valid units:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1000000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1_000_000&lt;/code&gt; (also one million, just maybe more readable.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1E6&lt;/code&gt; (1.0x10&lt;sup&gt;6&lt;/sup&gt;, or approximately a million (floating-point))&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1EE6&lt;/code&gt; (1x10&lt;sup&gt;6&lt;/sup&gt;, or exactly a million (integer))&lt;/li&gt;
&lt;li&gt;&lt;code&gt;million&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 million&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;24.5E-10&lt;/code&gt; (24.5 x 10&lt;sup&gt;-10&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eighty&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;four score + seven&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt; (a dimensionless exact integer)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1.0&lt;/code&gt; (a floating-point number)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1.&lt;/code&gt; (also a floating-point number)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1/3&lt;/code&gt; (a rational number, preserved as a fraction)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 quadrillion&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gallon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 gallon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;56 gallon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;56 gallons&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;54.2 feet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;furlong&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hogshead&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 USD&lt;/code&gt; (&quot;USD&quot; is the ISO-4217 currency code for the U.S. Dollar)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 dollars&lt;/code&gt; (for now, shorthand for the U.S. dollar)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;16 tons&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;6 ounces&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 gram&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;8 milligrams&lt;/code&gt; (most common prefixes are allowed.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;8 mg&lt;/code&gt; (abbreviations of most prefixes and units are also allowed)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;7 kilowatts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;7 kW&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1.21 gigawatts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1.21 GW&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;9 seconds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;9 sec&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;9 s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1/24 day&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;100001000101111111101101\\2&lt;/code&gt; (a number in base 2)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1000_0100_0101_1111_1110_1101\\2&lt;/code&gt; (a number in base 2 with underscores for readability)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;845FED\\16&lt;/code&gt; (a number in base 16... bases from 2 to 36 are allowed)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;845fed\\16&lt;/code&gt; (a number in base 16)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;845_fed\\16&lt;/code&gt; (a number in base 16 with underscores for readability)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0x845fed&lt;/code&gt; (Common hexadecimal notation)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0x845FED&lt;/code&gt; (Common hexadecimal notation)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0xFEED_FACE&lt;/code&gt; (Hexadecimal with underscores for readability)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0b100001000101111111101101&lt;/code&gt; (Common binary notation)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0b1000_0100_0101_1111_1110_1101&lt;/code&gt; (Binary with underscores for readability)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you're looking for a specific unit, and don't know how it's spelled or capitalized, see the &lt;a href=&quot;https://frinklang.org/#IntegratedHelp&quot;&gt;Integrated Help&lt;/a&gt; section below.&lt;/p&gt;
&lt;p&gt;Or, if you're using the &lt;a href=&quot;https://frinklang.org/fsp/frink.fsp&quot;&gt;web interface&lt;/a&gt;, type part or all of the name in the &quot;Lookup:&quot; field and click &quot;lookup&quot;. Selecting the &quot;exact&quot; checkbox will only return exact matches, otherwise you will get all lines containing that substring. Try it for something like &quot;&lt;a href=&quot;https://frinklang.org/fsp/frink.fsp?lookup=cubit&quot;&gt;cubit&lt;/a&gt;&quot; and you'll see that there are often lots of variations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; You'll learn the most if you look at the voluminous and fascinating &lt;a href=&quot;https://frinklang.org/frinkdata/units.txt&quot;&gt;data file&lt;/a&gt; for more examples of things you can do, and measurements that Frink knows about.&lt;/p&gt;

&lt;p&gt;If you don't know the name of a unit or function, but can guess at it, you can either read the &lt;a href=&quot;https://frinklang.org/frinkdata/units.txt&quot;&gt;data file&lt;/a&gt; for more information, or use the integrated help. Keep in mind that Frink is case-sensitive, so you'll need to use the right capitalization of the names.&lt;/p&gt;
&lt;p&gt;Unit or function names can be looked up by preceding part or all of the name with a question mark. This will return a list of all units and function names &lt;em&gt;containing&lt;/em&gt; that string, in upper- or lower-case. For example, to find the different types of cubits:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;?cubit&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[homericcubit, assyriancubit, egyptianshortcubit, greekcubit, shortgreekcubit, romancubit, persianroyalcubit, hebrewcubit, northerncubit, blackcubit, olympiccubit, egyptianroyalcubit, sumeriancubit, irishcubit, biblicalcubit, hashimicubit]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or, if you want to know the name of the currency used in Iran,&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;?iran&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[Iran_Rial, Iran_currency, Iran]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Simply enter the name of the unit you're interested in to see its value:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;biblicalcubit&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;0.55372 m (length)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you want to see the results in specific units of measurement, you can use the arrow operator &lt;code&gt;-&amp;gt;&lt;/code&gt; as described in the &lt;a href=&quot;https://frinklang.org/#Conversions&quot;&gt;Conversions&lt;/a&gt; section below:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;biblicalcubit -&amp;gt; inches&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;21.8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or, if you want to see the sizes of all the units as a single unit type, and they're all the same, you can use the arrow operator on the list. The following sample shows all the different types of cubits the world has defined and converts them to inches:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;?cubit -&amp;gt; inches&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[homericcubit = 15.5625,&lt;br /&gt; assyriancubit = 21.6,&lt;br /&gt; egyptianshortcubit = 17.682857142857142857,&lt;br /&gt; greekcubit = 18.675,&lt;br /&gt; shortgreekcubit = 14.00625,&lt;br /&gt; romancubit = 2220/127 (approx. 17.480314960629922),&lt;br /&gt; persianroyalcubit = 25.2,&lt;br /&gt; hebrewcubit = 17.58,&lt;br /&gt; northerncubit = 26.6,&lt;br /&gt; blackcubit = 21.28,&lt;br /&gt; olympiccubit = 18.225,&lt;br /&gt; egyptianroyalcubit = 20.63,&lt;br /&gt; sumeriancubit = 2475/127 (approx. 19.488188976377952),&lt;br /&gt; irishcubit = 500000000/27777821 (approx. 17.99997199204358),&lt;br /&gt; biblicalcubit = 21.8,&lt;br /&gt; hashimicubit = 25.56]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you don't want to see exact fractions, you can (as always) multiply the right-hand-side by &lt;code&gt;1.0&lt;/code&gt; or &lt;code&gt;1.&lt;/code&gt; (without a zero after the decimal point) to get approximate numbers:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;?cubit -&amp;gt; 1.0 inches&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;If you use two question marks, the units that match that pattern will be displayed &lt;em&gt;and their values in the &lt;a href=&quot;https://frinklang.org/#SettingDisplayUnits&quot;&gt;current display units&lt;/a&gt;:&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;??moon&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;moonlum = 2500 m^-2 cd (illuminance),&lt;br /&gt;moondist = 0.002569555301823481845 au,&lt;br /&gt;moonmass = 73.483E+21 kg (mass),&lt;br /&gt;moonradius = 0.000011617812472864754024 au,&lt;br /&gt;moongravity = 1.62 m s^-2 (acceleration)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you use the form with two question marks, you &lt;em&gt;cannot&lt;/em&gt; convert them to a specified unit with the &lt;code&gt;-&amp;gt;&lt;/code&gt; operator, as they have already been converted to a single string.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As of the 2016-07-06 release, the double-question-mark operator now returns &lt;em&gt;a single string&lt;/em&gt; with newlines separating each entry, instead of a list of strings.&lt;/p&gt;
&lt;p&gt;Note that functions are displayed at the end of the list, and can be distinguished from units by the square brackets following them:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;input&quot;&gt;??call&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;callistodist = 1.883000000e+9 m (length),&lt;br /&gt;callistoradius = 2.400000e+6 m (length),&lt;br /&gt;callistomass = 1.08e+23 kg (mass),&lt;br /&gt;callJava[arg1,arg2,arg3]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In addition, the &lt;code&gt;functions[]&lt;/code&gt; function will produce a list of all functions.&lt;/p&gt;

&lt;p&gt;If you're writing Frink programs, you can edit Frink files in your favorite text editor. If that happens to be Emacs or XEmacs, you can download the rudimentary &lt;a href=&quot;https://frinklang.org/frinktools/emacs/frink-mode.el&quot;&gt;Frink mode for Emacs&lt;/a&gt;. It's somewhat rough at this moment, but it has syntax highlighting, automatic indenting, ability to run interactive Frink sessions or programs. Screenshot is below.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://frinklang.org/images/emacs.png&quot;&gt;&lt;img src=&quot;https://frinklang.org/images/emacs_th.png&quot; width=&quot;336&quot; height=&quot;363&quot; alt=&quot;Screenshot of Frink emacs mode&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default, the output is in terms of the &quot;fundamental units&quot;. To convert to whatever units you want, simply use the &quot;arrow&quot; operator &lt;code&gt;-&amp;gt;&lt;/code&gt; (that's a minus sign followed by a greater-than sign,) with the target units on the right-hand side:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;38 feet -&amp;gt; meters&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;11.5824&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Formatting Shortcut:&lt;/strong&gt; If the right-hand-side of the conversion is in double quotes, the conversion operator will both evaluate the value in quotes as a unit and append the quoted value to the result. So, the above example could be performed as:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;38 feet -&amp;gt; &quot;meters&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;7239/625 (exactly 11.5824) meters&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In this case, because the ratio between feet and meters is an exactly-defined quantity, so the answer comes out as an exact rational number. This is also displayed as a decimal number for your convenience. If you just want the decimal value, you can multiply by an approximate decimal number (any number containing a decimal point) such as &lt;code&gt;1.0&lt;/code&gt; or &lt;code&gt;1.&lt;/code&gt; without anything after the decimal point:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;38. feet -&amp;gt; &quot;meters&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;11.5824 meters&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are using the web-based interface, simply enter everything left of the arrow in the &quot;From:&quot; box and everything to the right of the arrow in the &quot;To:&quot; box. Or you can enter the whole expression &lt;em&gt;including&lt;/em&gt; the arrow in the &quot;From:&quot; box and leave the &quot;To:&quot; box empty. It does the exact same thing.&lt;/p&gt;
&lt;p&gt;If the units on either side of a conversion are not of the same type, Frink may try to help you by suggesting conversion factors:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;55 mph -&amp;gt; yards&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt; Conformance error -&lt;br /&gt;   Left side is: 15367/625 (exactly 24.5872) m s^-1 (velocity)&lt;br /&gt;  Right side is: 1143/1250 (exactly 0.9144) m (length)&lt;br /&gt;    Suggestion: multiply left side by time&lt;br /&gt;               or divide left side by frequency&lt;/code&gt;&lt;/p&gt;&lt;p&gt; For help, type:&lt;br /&gt;    units[time]&lt;br /&gt;      or&lt;br /&gt;    units[frequency]&lt;br /&gt;    to list known units with these dimensions.&lt;/p&gt;
&lt;p&gt;If you get an error like this, you can list all the units that have the specified dimensions by typing &lt;code&gt;units[time]&lt;/code&gt; or &lt;code&gt;units[frequency]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Yes, sometimes it gives digits which aren't significant in results. As I improve the symbolic reduction of expressions, this will get better, although I still need to work out ways of specifying and tracking precision (and uncertainty?) throughout all calculations.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;MultipleConversions&quot; id=&quot;MultipleConversions&quot;&gt;Multiple Conversions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If the right-hand-side of the conversion is a comma-separated list in square brackets, the value will be broken down into the constituent units. For example, to find out how long it takes the earth to rotate on its axis:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;siderealday -&amp;gt; [hours, minutes, seconds]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;23, 56, 4.0899984&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or, to maintain symmetry with the quoted-right-hand-side behavior noted above, arguments on the right-hand-side can be quoted:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;siderealday -&amp;gt; [&quot;hours&quot;, &quot;minutes&quot;, &quot;seconds&quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;23 hours, 56 minutes, 4.0899984 seconds&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This behavior can also be used to break fractions into constituent parts:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;13/4 -&amp;gt; [1,1]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;3, 1/4 (exactly 0.25)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the first term is the integer &lt;code&gt;0&lt;/code&gt; (zero), any leading terms with zero magnitude will be suppressed:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;siderealday -&amp;gt; [0, &quot;weeks&quot;, &quot;days&quot;, &quot;hours&quot;, &quot;minutes&quot;, &quot;seconds&quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;23 hours, 56 minutes, 4.0899984 seconds&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the last term is the integer &lt;code&gt;0&lt;/code&gt; (zero), any remaining fractional part will be suppressed:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;siderealday -&amp;gt; [&quot;hours&quot;, &quot;minutes&quot;, &quot;seconds&quot;, 0]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;23 hours, 56 minutes, 4 seconds&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Math is very straightforward: the current parser accepts the normal mathematical operators, with normal operator precedence. (Exponentiation first (see notes below,) then multiplication and division, then addition and subtraction. And more tightly parenthesized expressions are performed before anything else.) All expressions can be arbitrarily complex. Parentheses can be used to group expressions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; Whitespace between any two units implies multiplication! This has the same precedence as multiplication or division. If there's one thing you need to keep in mind, it's this. You &lt;em&gt;must&lt;/em&gt; parenthesize units on the right-hand-side of a division operation, if you expect them to be multiplied before the division takes place.&lt;/p&gt;
&lt;p&gt;The following are all valid expressions. (Note that if you are using the web-based interface you can enter the right-hand side of the arrow operator in the &quot;To:&quot; box.)&lt;/p&gt;
&lt;table border=&quot;1&quot; cellpadding=&quot;3&quot; cellspacing=&quot;3&quot; summary=&quot;Mathematical operators&quot; readability=&quot;45.268966547192&quot;&gt;&lt;tr&gt;&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;1+1&lt;/td&gt;
&lt;td&gt;addition&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;1-1&lt;/td&gt;
&lt;td&gt;subtraction&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;3*4&lt;/td&gt;
&lt;td&gt;multiplication&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;3 4&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Important:&lt;/strong&gt; whitespace implies multiplication&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;3 days&lt;/td&gt;
&lt;td&gt;multiplication also.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;foot meter&lt;/td&gt;
&lt;td&gt;multiplication also (result is an area)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;1/3&lt;/td&gt;
&lt;td&gt;division (note this maintains an exact rational number)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;week/day&lt;/td&gt;
&lt;td&gt;division (result is 7)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;3^4&lt;/td&gt;
&lt;td&gt;exponentiation. Note that chained exponentiations such as &lt;code&gt;2^3^4&lt;/code&gt; are, following normal mathematical rules of precedence, performed right-to-left, that is, &lt;code&gt;2^(3^4)&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;3^200&lt;/td&gt;
&lt;td&gt;exponentiation... note that arbitrary precision is supported.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2.66&quot;&gt;&lt;td class=&quot;lit&quot;&gt;10⁻²³&lt;/td&gt;
&lt;td&gt;exponentiation using Unicode superscript characters. This is equivalent to &lt;code&gt;10^-23&lt;/code&gt;. See the &lt;a href=&quot;https://frinklang.org/#UnicodeOperators&quot;&gt;Unicode Operators&lt;/a&gt; section below for more details.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;365 % 7&lt;/td&gt;
&lt;td&gt;modulus (remainder) defined by &lt;code&gt;x - y * floor[x/y]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;365 mod 7&lt;/td&gt;
&lt;td&gt;Also modulus&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;year mod day&lt;/td&gt;
&lt;td&gt;Also modulus; both sides need to be units having same dimensions (&lt;em&gt;e.g.&lt;/em&gt; both length.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;365 div 7&lt;/td&gt;
&lt;td&gt;Truncating divide, defined by &lt;code&gt;floor[x/y]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;year div day&lt;/td&gt;
&lt;td&gt;Also truncating divide; both sides need to be units of same type.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;6!&lt;/td&gt;
&lt;td&gt;Factorial: 6 * 5 * 4 * 3 * 2 * 1. Note that factorials have a higher precedence than exponentiation.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;foot -&amp;gt; m&lt;/td&gt;
&lt;td&gt;Conversion operator (for unit conversions, works just like a very low-precedence divide operator but returns a string.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;4^(1/2)&lt;/td&gt;
&lt;td&gt;square root (note parentheses needed because precedence of exponentiation is higher than that of division. The function &lt;code&gt;sqrt[&lt;em&gt;x&lt;/em&gt;]&lt;/code&gt; does the same thing.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;1/2 + 1/3&lt;/td&gt;
&lt;td&gt;Result is &lt;code&gt;5/6&lt;/code&gt;. Note that Frink maintains rational numbers if it can.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;1/2 + 1/3.&lt;/td&gt;
&lt;td&gt;Result is &lt;code&gt;.083333333&lt;/code&gt; The decimal point indicates an uncertain number.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;gallon^(1/3) -&amp;gt; inches&lt;/td&gt;
&lt;td&gt;Cube root: how big of a cube (or Frinkahedron) is a gallon?&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;(20 thousand gallons)^(1/3) -&amp;gt; feet&lt;/td&gt;
&lt;td&gt;How big of a cube is 20000 gallons? Note necessary parentheses because exponentiation is usually done before multiplication or division.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;20 thousand gallons water -&amp;gt; pounds&lt;/td&gt;
&lt;td&gt;How much does that much water weigh? (&quot;water&quot; is a measure of density for now.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;250 grams / sugar -&amp;gt; cups&lt;/td&gt;
&lt;td&gt;Sample recipe conversion (&quot;sugar&quot; is a density for now.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;1/4 mile / (4.23 seconds) -&amp;gt; miles/hour&lt;/td&gt;
&lt;td&gt;Dragster average speed. Note the parentheses required because space is multiplication which has same precedence as division.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;329 mph / (4.23 seconds) -&amp;gt; gravity&lt;/td&gt;
&lt;td&gt;Dragster average acceleration in g's.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;foot &lt;strong&gt;conforms&lt;/strong&gt; meters&lt;/td&gt;
&lt;td&gt;Conformance operator; returns &lt;code&gt;true&lt;/code&gt; if the left-hand-side is a unit that has the same dimensions as the named DimensionList (e.g. &lt;code&gt;length&lt;/code&gt; or &lt;code&gt;velocity&lt;/code&gt;) on the right-hand-side (the right-hand-side can also be a string.) If the right-hand-side is a unit, this returns true if both sides are units with same dimensions, &lt;code&gt;false&lt;/code&gt; otherwise. Hint: use the &lt;code&gt;dimensions[]&lt;/code&gt; function to list all known dimension types.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;3 &lt;strong&gt;square&lt;/strong&gt; feet&lt;/td&gt;
&lt;td&gt;Equals &lt;code&gt;3 (feet^2)&lt;/code&gt; or, more simply, &lt;code&gt;3 feet^2&lt;/code&gt;. Square squares the unit on its immediate right-hand side.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;3 &lt;strong&gt;sq&lt;/strong&gt; feet&lt;/td&gt;
&lt;td&gt;Same as &lt;code&gt;square&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;3 &lt;strong&gt;cubic&lt;/strong&gt; feet&lt;/td&gt;
&lt;td&gt;Equals &lt;code&gt;3 (feet^3)&lt;/code&gt; or, more simply, &lt;code&gt;3 feet^3&lt;/code&gt;. Cubic cubes the unit on its immediate right-hand side.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;3 &lt;strong&gt;cu&lt;/strong&gt; feet&lt;/td&gt;
&lt;td&gt;Same as &lt;code&gt;cubic&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;3 feet &lt;strong&gt;squared&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Equals &lt;code&gt;(3 feet)^2&lt;/code&gt;, indicating a square 3 feet on a side, or 9 square feet. This squares the multiplicative terms on its left-hand-side. Squared has a precedence between multiplication and addition.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;3 feet &lt;strong&gt;cubed&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Equals &lt;code&gt;(3 feet)^3&lt;/code&gt;, indicating a cube 3 feet on a side, or 27 cubic feet. This cubes the multiplicative terms on its left-hand-side. Cubed has a precedence between multiplication and addition.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If a number comes out as a fraction, like &lt;code&gt;20/193209&lt;/code&gt;, you can get a decimal result by repeating the calculation with a non-integer number (that is, one with a decimal point in it like &lt;code&gt;20./193209&lt;/code&gt;) or by multiplying by &lt;code&gt;1.0&lt;/code&gt;, or simply &lt;code&gt;1.&lt;/code&gt; (without anything after the decimal point.)&lt;/p&gt;
&lt;p&gt;Both sides of a conversion can be arbitrarily complex.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;Factorials&quot; id=&quot;Factorials&quot;&gt;Factorials&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The implementation of factorials is subtle and important enough to warrant a few notes. The factorial operator &lt;code&gt;!&lt;/code&gt; follows after an expression and has a precedence &lt;em&gt;above&lt;/em&gt; exponentiation, following normal mathematical precedence rules. Yeah, when I say &lt;code&gt;6!&lt;/code&gt; or &lt;code&gt;n!&lt;/code&gt; or &lt;code&gt;(n-m)!&lt;/code&gt;, I'm not just being super-enthusiastic about that number. It's a common mathematical operator.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Reminder:&lt;/em&gt; the factorial of a non-negative integer &lt;code&gt;n!&lt;/code&gt; is the product of all the numbers from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;n&lt;/code&gt;. For example, the factorial &lt;code&gt;6!&lt;/code&gt; is equal to &lt;code&gt;1*2*3*4*5*6=720&lt;/code&gt;. These grow rapidly and become hard to calculate, but Frink calculates them exactly.&lt;/p&gt;
&lt;p&gt;Here are some notes about the implementation of factorials:&lt;/p&gt;
&lt;ul readability=&quot;3.3234552332913&quot;&gt;&lt;li&gt;Factorials are calculated once and cached in memory so further recalculation is fast.&lt;/li&gt;
&lt;li&gt;There is a limit to the size of factorials that gets cached in memory. Currently this limit is &lt;code&gt;10000!&lt;/code&gt;. Numbers larger than this will not be cached, but re-calculated on demand.&lt;/li&gt;
&lt;li&gt;When calculating a factorial within the caching limit, say, &lt;code&gt;5000!&lt;/code&gt;, all of the factorials smaller than this will get calculated and cached in memory.&lt;/li&gt;
&lt;li&gt;As of the 2017-04-04 release, calculations of huge factorials larger than the cache limit &lt;code&gt;10000!&lt;/code&gt; are now calculated by a &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=BinarySplittingFactorial.frink&quot;&gt;binary splitting algorithm&lt;/a&gt; which makes them significantly faster on Java 1.8 and later. (Did you know that Java 1.8's BigInteger calculations got drastically faster because Frink's internal algorithms were contributed to it?)&lt;/li&gt;
&lt;li readability=&quot;9.593023255814&quot;&gt;As of the 2017-04-04 release, functions that calculate binomial coefficients like &lt;code&gt;binomial[&lt;em&gt;m,n&lt;/em&gt;]&lt;/code&gt; are more efficient because of the use of &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=BinarySplittingFactorial.frink&quot;&gt;binary splitting algorithms,&lt;/a&gt; especially for large numbers.
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;binomial[&lt;em&gt;m,n&lt;/em&gt;]&lt;/code&gt; is of the number of ways &lt;code&gt;m&lt;/code&gt; things can be chosen &lt;code&gt;n&lt;/code&gt; at a time, with order being unimportant. This is sometimes called &quot;m choose n&quot; or &quot;m C n&quot;. This is equivalent to &lt;code&gt;m!/(n! (m-n)!)&lt;/code&gt; although calculating that way often leads to way-too-big numbers. For example, &lt;code&gt;binomial[10000, 9998]&lt;/code&gt; is equal to 49995000, but if you calculated it naively, you'd have to calculate 10000! which is a 35660-digit number, and divide it by another huge number, which could be inefficient and slow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;The function &lt;code&gt;factorialRatio[&lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;]&lt;/code&gt; allows &lt;em&gt;efficient&lt;/em&gt; calculation of the ratio of two factorials &lt;code&gt;a! / b!&lt;/code&gt;, using a &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=BinarySplittingFactorial.frink&quot;&gt;binary splitting algorithm&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;By default, all variables in Frink can contain any type. Variable names begin with any (Unicode) letter followed by 0 or more letters, digits, or the underscore (&lt;code&gt;_&lt;/code&gt;) character.&lt;/p&gt;
&lt;p&gt;You do not need to declare variables before using them. The variable will be defined in the smallest containing scope.&lt;/p&gt;
&lt;p&gt;To assign a value to a variable, use the &lt;code&gt;=&lt;/code&gt; operator:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = 10 feet&lt;/code&gt; (assigns a single value)&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;b = [30 yards, 3 inches]&lt;/code&gt; (assigns an array)&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;DeclaringVariables&quot; id=&quot;DeclaringVariables&quot;&gt;Declaring Variables&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Variables &lt;em&gt;may&lt;/em&gt; be declared before they are used using the &lt;code&gt;var&lt;/code&gt; keyword. For example, to declare a variable called &lt;code&gt;t&lt;/code&gt;:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;var t&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This defines the variable t in the smallest containing scope and sets its initial value to the special value &lt;code&gt;undef&lt;/code&gt;. You may also specify an initial value:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;var t = 10 seconds&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;ConstraintsOnVariables&quot; id=&quot;ConstraintsOnVariables&quot;&gt;Constraints on Variables&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When a variable is declared, you can constrain the type of values that it can contain. The constraints are checked at runtime. If you try to set a value that does not meet the constraints, a runtime error occurs. For example, to make sure that the variable &lt;code&gt;t&lt;/code&gt; only contains values with dimensions of time, you can declare it using the &lt;code&gt;is&lt;/code&gt; keyword which defines constraints.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;var t is time = 10 seconds&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In this case, the initial value is necessary to ensure that &lt;code&gt;t&lt;/code&gt; contains a value with dimensions of time &lt;em&gt;at all times&lt;/em&gt;. (The special value &lt;code&gt;undef&lt;/code&gt; is applied if no initial value is supplied.) If a valid initial value is not supplied, this will produce an error at runtime.&lt;/p&gt;
&lt;p&gt;Multiple constraints can be specified by placing them in square brackets. &lt;em&gt;All&lt;/em&gt; constraints must be met. (If you want to do an &quot;OR&quot; of constraints, see the &lt;a href=&quot;https://frinklang.org/#ConstraintFunctions&quot;&gt;Constraint Functions&lt;/a&gt; section below.)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;var t is [time, positive] = 10 seconds&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;ConstrainingByDimensions&quot; id=&quot;ConstrainingByDimensions&quot;&gt;Constraining by Dimensions&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Built-in constraint types include all of the dimension types defined in your program. For example, you can list all of the defined dimension types (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;length, mass, power, energy&lt;/code&gt;) with the &lt;code&gt;dimensions[]&lt;/code&gt; function. All of these defined types can be used as constraints.&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;ConstrainingToBuiltInTypes&quot; id=&quot;ConstrainingToBuiltInTypes&quot;&gt;Constraining to Built-In Types&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The following built-in constraints can be used to verify that the value is of one of the built-in types. For example,&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;var name is string = &quot;Frink&quot;&lt;/code&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Built-in Constraint Types&quot; readability=&quot;5.8645484949833&quot;&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;array&lt;/td&gt;
&lt;td&gt;Value must be an &lt;a href=&quot;https://frinklang.org/#Arrays&quot;&gt;array&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2.8828125&quot;&gt;&lt;td class=&quot;lit&quot;&gt;boolean&lt;/td&gt;
&lt;td&gt;Value must be a boolean value &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; (and not just a type that can be coerced to boolean; see the &lt;a href=&quot;https://frinklang.org/#Truth&quot;&gt;Truth&lt;/a&gt; section.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.4193548387097&quot;&gt;&lt;td class=&quot;lit&quot;&gt;date&lt;/td&gt;
&lt;td&gt;Value must be a &lt;a href=&quot;https://frinklang.org/#DateTimeHandling&quot;&gt;date/time&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.375&quot;&gt;&lt;td class=&quot;lit&quot;&gt;dict&lt;/td&gt;
&lt;td&gt;Value must be a &lt;a href=&quot;https://frinklang.org/#Dictionaries&quot;&gt;dictionary&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;set&lt;/td&gt;
&lt;td&gt;Value must be a &lt;a href=&quot;https://frinklang.org/#Sets&quot;&gt;set&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.1428571428571&quot;&gt;&lt;td class=&quot;lit&quot;&gt;regexp&lt;/td&gt;
&lt;td&gt;Value must be a &lt;a href=&quot;https://frinklang.org/#RegularExpressions&quot;&gt;regular expression&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.6417910447761&quot;&gt;&lt;td class=&quot;lit&quot;&gt;subst&lt;/td&gt;
&lt;td&gt;Value must be a &lt;a href=&quot;https://frinklang.org/#SearchAndReplace&quot;&gt;substitution&lt;/a&gt; (search-and-replace) expression.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;string&lt;/td&gt;
&lt;td&gt;Value must be a &lt;a href=&quot;https://frinklang.org/#Strings&quot;&gt;string&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2.5421052631579&quot;&gt;&lt;td class=&quot;lit&quot;&gt;unit&lt;/td&gt;
&lt;td&gt;Value must be a &lt;a href=&quot;https://frinklang.org/#DataLibraries&quot;&gt;unit of measure&lt;/a&gt; of any type (including dimensionless numbers). You will probably use this rarely; it's more likely that you'll want to constrain based on &lt;a href=&quot;https://frinklang.org/#ConstrainingByDimensions&quot;&gt;dimension type&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt;&lt;a name=&quot;ConstrainingByObjectType&quot; id=&quot;ConstrainingByObjectType&quot;&gt;Constraining by Object Type&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A class name can also be a constraint name. If, for example, you've defined a class called &lt;code&gt;Sphere&lt;/code&gt;, the following will work.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a is Sphere = new Sphere[]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This constraint check also works with interface names. If the name of the constraint is the name of an interface, this check will ensure that any object assigned to the variable implements that interface. See the &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=interfacetest.frink&quot;&gt;interfacetest.frink&lt;/a&gt; file for an example.&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;ConstraintFunctions&quot; id=&quot;ConstraintFunctions&quot;&gt;Constraint Functions&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;You may define your own functions that will be used as constraints. The function must take one argument and return a &lt;code&gt;true&lt;/code&gt; value if the constraint is met. Returning &lt;code&gt;false&lt;/code&gt; or another value will cause the constraint to fail. The following defines a function called &lt;code&gt;positive&lt;/code&gt; that returns &lt;code&gt;true&lt;/code&gt; if a value is a positive dimensionless value.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;positive[x] := x &amp;gt; 0&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;var x is positive = 1&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;TestingVariables&quot; id=&quot;TestingVariables&quot;&gt;Testing Variables&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can test to see if a variable is defined using the following functions:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Variable Testing Functions&quot; readability=&quot;3.5&quot;&gt;&lt;tr&gt;&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Definition&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isDefined[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns true if the symbol is defined either as a local variable in the current scope (i.e. with the &lt;code&gt;=&lt;/code&gt; operator), or as a unit (i.e. with the &lt;code&gt;:=&lt;/code&gt; operator.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isVariableDefined[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns true if the symbol is defined as a local variable in the current scope (i.e. with the &lt;code&gt;=&lt;/code&gt; operator).&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Both functions can be called either with a raw variable name or with a string. For example:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;isVariableDefined[a]&lt;br /&gt;isVariableDefined[&quot;a&quot;]&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;GlobalVariables&quot; id=&quot;GlobalVariables&quot;&gt;Global Variables&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ha ha...just kidding. There are no global variables in Frink. However, if you need to access some sort of &quot;global&quot; values from anywhere in your program, without passing them explicitly to each function, you can simulate it with class-level variables in a class that you define. These are defined using the &lt;code&gt;class var&lt;/code&gt; keywords, and are similar to &lt;code&gt;static&lt;/code&gt; class-level variables in languages like C++ and Java.&lt;/p&gt;
&lt;p&gt;If you want to use a &quot;global&quot; variable in only a few functions, you can encapsulate those functions into a &lt;code&gt;class&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For samples of class-level variables and how to access them, see &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=classtest.frink&quot;&gt;classtest.frink&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;UnicodeInFrink&quot; id=&quot;UnicodeInFrink&quot;&gt;Unicode in Frink&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For internationalization, Frink allows &lt;a href=&quot;http://www.unicode.org/&quot;&gt;Unicode&lt;/a&gt; characters anywhere. For maximum portability, and maximum editability with non-Unicode-aware editors, you can use Unicode escapes to embed these characters in program files.&lt;/p&gt;
&lt;p&gt;Variable names can contain Unicode characters, indicated by &lt;code&gt;\u&lt;/code&gt; followed by exactly 4 hexadecimal digits [0-9a-fA-F] indicating the Unicode code-point, for example: &lt;code&gt;\u210e&lt;/code&gt; . In addition, a Unicode character can be specified with anywhere from one to six hexadecimal digits by placing the digits in brackets, for example: &lt;code&gt;\u{FF}&lt;/code&gt; or &lt;code&gt;\u{1f638}&lt;/code&gt; (this is the Unicode character &quot;GRINNING CAT FACE WITH SMILING EYES&quot;. So, yes, you can have kitty faces as variable names!) This allows Unicode characters to be placed into any ASCII text file, and edited by programs that don't understand Unicode. It also allows &lt;em&gt;any&lt;/em&gt; Unicode character to be used in an identifier.&lt;/p&gt;
&lt;p&gt;If you &lt;em&gt;do&lt;/em&gt; have a nifty editor that handles Unicode, or other character encodings, you can write your Frink program in full Unicode, and load it using the &lt;a href=&quot;https://frinklang.org/#CommandLineOptions&quot;&gt;&lt;code&gt;--encoding &lt;em&gt;str&lt;/em&gt;&lt;/code&gt;&lt;/a&gt; command-line switch. Keep in mind that in this case, identifiers can only consist of Unicode letters, digits, &quot;other symbols&quot; and the underscore. You still have to use the &lt;code&gt;\u00a5&lt;/code&gt; Unicode escape trick if your identifier contains other classes of characters.&lt;/p&gt;
&lt;p&gt;For example, Unicode defines the character &lt;code&gt;\u201e&lt;/code&gt; for Planck's constant. In the data file, we define Planck's constant as the normal character &lt;code&gt;h&lt;/code&gt; (which is easier to type) and also as the Unicode character. These definitions look like:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;h := 6.62606876e-34 J s&lt;/code&gt; &lt;br /&gt;&lt;code class=&quot;input&quot;&gt;\u210e := h&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; The &lt;code&gt;:=&lt;/code&gt; notation simply defines a &lt;em&gt;global&lt;/em&gt; unit, that is available from all functions.&lt;/p&gt;

&lt;p&gt;By default, units are displayed with their dimensions given as multiples of the &lt;a href=&quot;http://physics.nist.gov/cuu/Units/units.html&quot;&gt;International System of Units (SI)&lt;/a&gt; base units. These are often not very intuitive. For example, volts are displayed as:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;1 volt&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;1 m^2 s^-3 kg A^-1 (electric_potential)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Of course, you could convert to volts explicitly using the &lt;code&gt;-&amp;gt;&lt;/code&gt; operator, but if you have to do that repeatedly, it's a hassle. Instead, you can define the default output format for a unit type by using the &lt;code&gt;:-&amp;gt;&lt;/code&gt; operator:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;electric_potential :-&amp;gt; &quot;volts&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;10 volt&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;10 volts&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The left-hand side is the dimension list identifier like &lt;code&gt;electric_potential&lt;/code&gt; or &lt;code&gt;time&lt;/code&gt; or &lt;code&gt;power&lt;/code&gt; (you can see what this is named for any given unit by entering an expression of that type--see the first &quot;volt&quot; sample above.)&lt;/p&gt;
&lt;p&gt;The right-hand side is any expression that can go on the right-hand-side of a conversion operator &lt;code&gt;-&amp;gt;&lt;/code&gt; , including multiple conversions:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;time :-&amp;gt; [0, &quot;days&quot;, &quot;hours&quot;, &quot;minutes&quot;, &quot;seconds&quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;siderealyear&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;365 days, 6 hours, 9 minutes, 9.5400288 seconds&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;siderealday&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;23 hours, 56 minutes, 4.0899984 seconds&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The right-hand-side can even be a function that takes a single argument:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;HMS[x] := x -&amp;gt; [0, &quot;hours&quot;, &quot;minutes&quot;, &quot;seconds&quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;time :-&amp;gt; HMS&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;If you want, you can define a function that displays distances in millimeters if it's small, kilometers if it's bigger, and light-years if it's huge.&lt;/p&gt;

&lt;p&gt;Floating-point calculations are performed to a limited number of digits. You can change the number of digits of working precision by the &lt;code&gt;setPrecision[&lt;em&gt;digits&lt;/em&gt;]&lt;/code&gt; function:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;setPrecision[50]&lt;br /&gt;1 / 3.0&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;0.33333333333333333333333333333333333333333333333333&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that this will only affect calculations performed &lt;em&gt;after&lt;/em&gt; this flag is set, of course. Currently, not all operations (notably trigonometric functions) can be performed to arbitrary precision.&lt;/p&gt;
&lt;p&gt;You can also see the current working precision by calling the &lt;code&gt;getPrecision[]&lt;/code&gt; function:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;getPrecision[]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;50&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;By default, floating-point numbers are displayed in scientific notation with one digit before the decimal point. This can be changed to &quot;engineering&quot; format where 1 to 3 digits are placed before the decimal point and the exponent is a multiple of 3. This allows you to more easily see it as &quot;milli-&quot;, &quot;micro-&quot;, &quot;million&quot;, etc. The call to enable this is:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;setEngineering[true]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Example without engineering mode:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;d = 140.5 million meters&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;1.405000000e+8 m (length)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now notice the change if you set &quot;engineering mode&quot; to true. The result comes out so you can more easily read it as &quot;140.5 million meters&quot;:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;setEngineering[true]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;d&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;140.5000000e+6 m (length)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In addition, rational numbers are, by default, displayed with a floating-point approximation to their values:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;1/10&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;1/10 (exactly 0.1)&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;1/3&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;1/3 (approx. 0.3333333333333333)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This behavior can be suppressed by calling &lt;code&gt;showApproximations[&lt;em&gt;false&lt;/em&gt;]&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;showApproximations[&lt;em&gt;false&lt;/em&gt;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;1/10&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;1/10&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can tell Frink to always &lt;em&gt;display&lt;/em&gt; rational numbers as floating-point approximations by calling &lt;code&gt;rationalAsFloat[true]&lt;/code&gt;. The numbers will still continue to be represented internally as rational numbers.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;rationalAsFloat[&lt;em&gt;true&lt;/em&gt;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;1/3&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;0.33333333333333&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Frink tries to produce a human-readable description of units of measure, such as &quot;power&quot; or &quot;energy&quot; or &quot;temperature&quot;:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;1 K&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;1 K (temperature)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This suggestion can be suppressed by calling &lt;code&gt;showDimensionName[false]&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;showDimensionName[false]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;1 K&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;1 K&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;Frink allows C/C++/Java-style comments:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;&lt;br /&gt;c = 1&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = 1 &lt;br /&gt;b = 2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you repeat a calculation, you may want to define it as a function. Functions in Frink are denoted by the function name followed by arguments in square brackets, separated by commas. A function can be defined like the following:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;circlearea[radius] := pi radius^2&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Then, to call the function, say, to find the area of my telescope mirror, which has a radius of 2 inches:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;circlearea[2 inches]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;0.008107319665559965 m^2 (area)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;But that comes out in standard units... let's try again, converting to square inches.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;circlearea[2 inches] -&amp;gt; in^2&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;12.566370&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;MultiLineFunctions&quot; id=&quot;MultiLineFunctions&quot;&gt;Multi-line Functions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Multi-line functions can be built; just put the body in curly braces. It may be more legible to use the &lt;code&gt;return&lt;/code&gt; statement in your function. For example, the factorial function could be written as:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;factorial[x] :=&lt;br /&gt;{&lt;br /&gt;   if x&amp;gt;1&lt;br /&gt;      return x * factorial[x-1]&lt;br /&gt;   else&lt;br /&gt;      return 1&lt;br /&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If a function does not explicitly return a value, the value returned is the value of the last expression evaluated. A &lt;code&gt;return&lt;/code&gt; statement with no value on the right-hand-side returns a special void type.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;DefaultValues&quot; id=&quot;DefaultValues&quot;&gt;Default Values&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Function declarations can have default values. Default values are specified by putting &quot;&lt;code&gt;= &lt;em&gt;value&lt;/em&gt;&lt;/code&gt;&quot; after a parameter name in the function declaration. For example, if your Willard pocket organizer goes out, you can use Frink to calculate the tip on your dinner check, and, to make it easy, you can default the tip rate to 15 percent of the bill. The function declaration with default parameters is:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;tip[amount, rate=15 percent] := amount * rate&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Now, when you get to the restaurant, you can easily calculate the tip using the default rate:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;tip[80.75 dollars]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;12.1125 dollar (currency)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or, if service is outstanding and you want to tip at 20%, you can specify the second argument instead of leaving it at the default:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;tip[80.75 dollars, 20 percent]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;16.15 dollar (currency)&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;MultipleReturnValues&quot; id=&quot;MultipleReturnValues&quot;&gt;Multiple Return Values&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The previous tip example probably has you thinking, &quot;Well, it would be nice if it calculated the total too!&quot; I'm bad at math, also... that's why I'm developing Frink.&lt;/p&gt;
&lt;p&gt;In Frink, values surrounded by square brackets and separated by commas form a list of values. These lists can be returned from a function, assigned to a variable, or whatever. A better version of the above function would be defined to return a list containing the tip &lt;em&gt;and&lt;/em&gt; the total as a list:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;tipandtotal[amount, rate=15 percent] := [amount * rate, amount * (1+rate)]&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Note the square brackets on the right-hand-side of the definition. Then, to calculate the tip, it's as easy as before:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;tipandtotal[80.75 dollars]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[12.1125 dollar (currency), 92.8625 dollar (currency)]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I'll let you do the rounding in your head, or you can use the &lt;a href=&quot;https://frinklang.org/#RoundingFunctions&quot;&gt;rounding functions&lt;/a&gt; below.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;RecursiveFunctions&quot; id=&quot;RecursiveFunctions&quot;&gt;Recursive Functions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes indeedy-o, functions can be recursive. The classic example is the factorial:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;factorial[x] := x&amp;gt;1 ? x factorial[x-1] : 1&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;This uses the conditional expression &lt;code&gt;condition ? trueClause : falseClause&lt;/code&gt;. The condition is first evaluated (it should evaluate to a boolean value,) and if it's true, the true clause is evaluated and returned, the false clause otherwise. Let's try a big number, just big enough that it would overflow my old solar calculator:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;factorial[70]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;119785716699698917960727837216890987364589381425464258 57555362864628009582789845319680000000000000000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can still blow out the stack if you go too deep, or forget to put in a condition such that the function terminates. Don't come crying to me.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;ConstrainingFunctionArguments&quot; id=&quot;ConstrainingFunctionArguments&quot;&gt;Constraining Function Arguments&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Like other variables, formal arguments to functions can have constraints. The syntax for constraining is just the same as setting &lt;a href=&quot;https://frinklang.org/#ConstraintsOnVariables&quot;&gt;Constraints on variables.&lt;/a&gt; For example, if you want to make sure that a function that calculates the volume of a sphere is passed a radius, the declaration looks like:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;sphereVolume[radius is length] := 4/3 pi radius^3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The constraint(s) are checked at runtime, and if all constraints are not met, the function call produces an error.&lt;/p&gt;
&lt;p&gt;At some point in the future, I'd like to have this choose an appropriate function based on the constraints, if more than one is possible. My underlying function dispatching is designed to allow this, but functions with constraints may be slower to resolve.&lt;/p&gt;

&lt;p&gt;You can control program flow with the if/then/else construct. If the condition is true, it will execute the first clause, otherwise, if there is an (optional) &lt;code&gt;else&lt;/code&gt; clause, it will execute the &lt;code&gt;else&lt;/code&gt; clause.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;if a&amp;lt;10&lt;br /&gt;{&lt;br /&gt;   println[&quot;Less than ten&quot;]&lt;br /&gt;} else&lt;br /&gt;{&lt;br /&gt;   println[&quot;Greater than ten.&quot;]&lt;br /&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Note that putting the brackets and statements on separate lines is currently important. Also, please note that the &lt;code&gt;else&lt;/code&gt; keyword goes on the same line as the closing bracket of the &lt;code&gt;then&lt;/code&gt; clause.&lt;/p&gt;
&lt;p&gt;If either the &lt;code&gt;then&lt;/code&gt; or &lt;code&gt;else&lt;/code&gt; clause is a single line, the curly braces for that clause can be eliminated. The following is the same as the code above:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;if a&amp;lt;10&lt;br /&gt;   println[&quot;Less than ten&quot;]&lt;br /&gt;else&lt;br /&gt;   println[&quot;Greater than ten.&quot;]&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The condition must be able to be turned into a boolean value. When testing for equality, be sure to use the double equals sign, (a single equals indicates assignment) &lt;em&gt;e.g.&lt;/em&gt;:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;if a==b&lt;br /&gt;   println[&quot;Equal.&quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If, for some reason, you need to jam everything into one line, you need to add the &lt;code&gt;then&lt;/code&gt; keyword:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;if a==b then println[&quot;Equal.&quot;] else println[&quot;Not equal.&quot;]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The condition in an if/then/else statement or a loop needs to be a boolean (true/false) value. This can either be represented by the special values &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;, or the following types can be used in places where a boolean value is required:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Boolean-Equivalent Expressions&quot; readability=&quot;2&quot;&gt;&lt;tr&gt;&lt;th&gt;True&lt;/th&gt;
&lt;th&gt;False&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;true&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;false&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Any non-empty string&lt;/td&gt;
&lt;td&gt;The empty string &lt;code&gt;&quot;&quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Any list (even a zero-element list)&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;The special undefined value &lt;code&gt;undef&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Any other value will cause a runtime error. See the &lt;a href=&quot;https://frinklang.org/#BooleanOperators&quot;&gt;Boolean Operators&lt;/a&gt; section below for operators that return boolean values.&lt;/p&gt;

&lt;h3&gt;&lt;a name=&quot;WhileLoop&quot; id=&quot;WhileLoop&quot;&gt;While Loop&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;while&lt;/code&gt; loop is a loop with a condition and a body. The body is executed repeatedly while the condition is true.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;i=0&lt;br /&gt;while i&amp;lt;1000000&lt;br /&gt;{&lt;br /&gt;   i = i+1&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the body is a single line, the braces can be omitted:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;i=0&lt;br /&gt;while i&amp;lt;1000000&lt;br /&gt;   i = i+1&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can use the &lt;code&gt;next&lt;/code&gt; statement to prematurely jump to the next iteration of a &lt;code&gt;while&lt;/code&gt; loop. You can use a labeled &lt;code&gt;next&lt;/code&gt; statement to jump to the next iteration of a higher loop. See the &lt;a href=&quot;https://frinklang.org/#ForLoop&quot;&gt;for loop&lt;/a&gt; section for an example.&lt;/p&gt;
&lt;p&gt;You can use the &lt;code&gt;break&lt;/code&gt; statement to exit the smallest containing loop. You can also use labeled break statements to break out to a higher loop:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;i=0&lt;/code&gt;&lt;/p&gt;&lt;p&gt;OUTERLOOP:&lt;br /&gt;while i&amp;lt;1000000&lt;br /&gt;{&lt;br /&gt;   i = i+1&lt;br /&gt;   j = i&lt;br /&gt;   while j&amp;lt;1000000&lt;br /&gt;   {&lt;br /&gt;      j = j+1&lt;br /&gt;      if i+j &amp;gt; 1000000&lt;br /&gt;         break OUTERLOOP // Breaks out of both loops&lt;br /&gt;   }&lt;br /&gt;}&lt;/p&gt;
&lt;p&gt;The label must precede the loop &lt;em&gt;on a separate line&lt;/em&gt; and be followed by a colon.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;DoWhileLoop&quot; id=&quot;DoWhileLoop&quot;&gt;Do...While Loop&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;do...while&lt;/code&gt; loop is much like the &lt;code&gt;while&lt;/code&gt; loop, the only difference being that with the &lt;code&gt;do&lt;/code&gt; loop, the body of the loop is always executed at least once, and then the condition is checked. The body of the loop then repeats as long as the condition is true.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;i=0&lt;br /&gt;do&lt;br /&gt;{&lt;br /&gt;   i = i+1&lt;br /&gt;} while i&amp;lt;1000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the body is a single line, the braces can be omitted, but each part of the loop has to be on a different line:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;i=0&lt;br /&gt;do&lt;br /&gt;   i = i+1&lt;br /&gt;while i&amp;lt;1000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can use the &lt;code&gt;next&lt;/code&gt; statement to prematurely jump to the next iteration of a &lt;code&gt;do&lt;/code&gt; loop. You can use a labeled &lt;code&gt;next&lt;/code&gt; statement to jump to the next iteration of a higher loop. See the &lt;a href=&quot;https://frinklang.org/#ForLoop&quot;&gt;for loop&lt;/a&gt; section for an example.&lt;/p&gt;
&lt;p&gt;You can use the &lt;code&gt;break&lt;/code&gt; statement to exit the smallest containing loop. You can also use labeled break statements to break out to a higher loop. See the &lt;a href=&quot;https://frinklang.org/#WhileLoop&quot;&gt;while loop&lt;/a&gt; section of the documentation for an example.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;ForLoop&quot; id=&quot;ForLoop&quot;&gt;For Loop&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The above &lt;code&gt;while&lt;/code&gt; loop can also be written as:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for i = 1 to 1000000&lt;br /&gt;{&lt;br /&gt;   &lt;em&gt;body&lt;/em&gt;&lt;br /&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the body is a single line, the curly braces can be omitted. The above sample can be written as:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for i = 1 to 1000000&lt;br /&gt;   &lt;em&gt;body&lt;/em&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The range and step size can be specified using the &lt;code&gt;step&lt;/code&gt; keyword:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for i = 1 to 1000 step 3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The step is &lt;em&gt;required&lt;/em&gt; to be specified for any range in which the limits are not dimensionless integers. For example:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for i = 0 miles to 1 mile step 1 foot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This also works with a date range, but the step &lt;em&gt;must&lt;/em&gt; be specified and it must have dimensions of time:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for time = #2001-01-01# to #2002-01-01# step 1 day&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The boundaries of a loop may also be boolean values:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for x = false to true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Other orderings are allowed such as &lt;code&gt;true to false&lt;/code&gt; or &lt;code&gt;true to true&lt;/code&gt; (the latter only goes through the loop once.)&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; loop is also used to iterate over the contents of an enumerating expression or array. (You can think of it as a &quot;for each&quot; loop, which is really what it is.)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = [&quot;zero&quot;, &quot;one&quot;, &quot;two&quot;]&lt;br /&gt;for x = a&lt;br /&gt;   println[x]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;zero&lt;br /&gt;one&lt;br /&gt;two&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;rangeOf[&lt;em&gt;array&lt;/em&gt;]&lt;/code&gt; function returns an enumeration of all the indices in an array.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = [&quot;zero&quot;, &quot;one&quot;, &quot;two&quot;]&lt;br /&gt;for i = rangeOf[a]&lt;br /&gt;   println[&quot;index $i contains &quot; + a@i]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;index 0 contains zero&lt;br /&gt;index 1 contains one&lt;br /&gt;index 2 contains two&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can also use the &lt;code&gt;for&lt;/code&gt; loop to iterate over the contents of Java objects. See the &lt;a href=&quot;https://frinklang.org/#IteratingOverJavaCollections&quot;&gt;Iterating over Java Collections&lt;/a&gt; section of the documentation for more.&lt;/p&gt;
&lt;p&gt;If the enumerating expression produces a list, and you want to break apart that list into named variables in the &lt;code&gt;for&lt;/code&gt; loop, write it as:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for [&lt;em&gt;var1&lt;/em&gt;, &lt;em&gt;var2, ...&lt;/em&gt;] = &lt;em&gt;enumerating_expression&lt;/em&gt;&lt;br /&gt;{&lt;br /&gt;   &lt;em&gt;body&lt;/em&gt;&lt;br /&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Again, if the body is a single line, the curly braces may be omitted:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for [var1, var2] = &lt;em&gt;enum&lt;/em&gt;&lt;br /&gt;   &lt;em&gt;body&lt;/em&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&quot;https://frinklang.org/#InputAndOutput&quot;&gt;Input and Output&lt;/a&gt; section below for a sample of its use.&lt;/p&gt;
&lt;p&gt;You can use the &lt;code&gt;next&lt;/code&gt; statement to prematurely jump to the next iteration of a &lt;code&gt;for&lt;/code&gt; loop. You can use a labeled &lt;code&gt;next&lt;/code&gt; statement to jump to the next iteration of a higher loop:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;OUTERLOOP:&lt;br /&gt;for i = 1 to 1000&lt;br /&gt;{&lt;br /&gt;   for j = i to 1001&lt;br /&gt;   {&lt;br /&gt;      if i+j &amp;gt; 1000&lt;br /&gt;         next OUTERLOOP &lt;br /&gt;   }&lt;br /&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The label must precede the loop &lt;em&gt;on a separate line&lt;/em&gt; and be followed by a colon.&lt;/p&gt;
&lt;p&gt;You can use the &lt;code&gt;break&lt;/code&gt; statement to exit the smallest containing loop. You can also use labeled break statements to break out to a higher loop. See the &lt;a href=&quot;https://frinklang.org/#WhileLoop&quot;&gt;while loop&lt;/a&gt; section of the documentation for an example.&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;Note to programmers:&lt;/em&gt; The special keyword &lt;code&gt;to&lt;/code&gt; creates an enumerating expression that successively takes on all values from the beginning to the end, inclusive, with the default step being 1. (The step size can be changed as shown below.) You can use this &lt;code&gt;to&lt;/code&gt; notation anywhere to create an enumerating expression that takes on successive values. You can even make it into an array using the &lt;code&gt;array&lt;/code&gt; function:)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = array[1 to 10]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can create an more flexible enumerating expression that does the same as the above by using the format: &lt;code&gt;new range[1, 10]&lt;/code&gt; or &lt;code&gt;new range[1, 10, 2]&lt;/code&gt; formats. Use this if you're going to assign to variables or use the range symbolically.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;MultiforLoop&quot; id=&quot;MultiforLoop&quot;&gt;Multifor Loop&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For programs that require nested &lt;code&gt;for&lt;/code&gt; loops for which it's not known in advance how many nested loops will be needed, the &lt;code&gt;multifor&lt;/code&gt; construct allows multiple loops to be created simply:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;multifor [a, b, c] = [1 to 2, 1 to 3, 1 to 5]&lt;br /&gt;   println[&quot;$a $b $c&quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;An similar (and technically better in almost all ways) way of writing the loop above would be to create new &lt;code&gt;range&lt;/code&gt; objects:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;bounds = [new range[1,2], new range[1,3], new range[1,5]]&lt;br /&gt;multifor [a, b, c] = &lt;em&gt;bounds&lt;/em&gt;&lt;br /&gt;   &lt;em&gt;println[&quot;$a $b $c&quot;]&lt;/em&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A typical idiom for creating a multi-loop is to use the &lt;code&gt;makeArray&lt;/code&gt; function to create array bounds. For example, the following creates in effect 8 nested loops, each running from 1 to 2. The results are assigned as an array to the variable &lt;code&gt;d&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;upper = 2&lt;br /&gt;bounds = makeArray[[8], new range[1,upper]]&lt;br /&gt;multifor d = bounds&lt;br /&gt;   println[d]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As of the 2012-09-04 release, the bounds of one loop can now depend on the bounds of the loops to its left, for example:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;multifor [f,g] = [new range[1,3], new range[f+1,3]]&lt;br /&gt;   println[&quot;$f $g&quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can use the &lt;code&gt;next&lt;/code&gt; statement to prematurely jump to the next iteration of a &lt;code&gt;multifor&lt;/code&gt; loop. You can use a labeled &lt;code&gt;next&lt;/code&gt; statement to jump to the next iteration of a higher loop. See the &lt;a href=&quot;https://frinklang.org/#ForLoop&quot;&gt;for loop&lt;/a&gt; section for an example.&lt;/p&gt;
&lt;p&gt;There's a version of the &lt;code&gt;next&lt;/code&gt; statement that jumps to a specified level of a &lt;code&gt;multifor&lt;/code&gt; loop. The leftmost/highest level is level 0, and the next levels increment to the right. The loop must be labeled and the index to jump to follows the label in the &lt;code&gt;next&lt;/code&gt; statement. For example &lt;code&gt;next LOOP i&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The program &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=multinexttest.frink&quot;&gt;multinexttest.frink&lt;/a&gt; demonstrates the use of this construct.&lt;/p&gt;

&lt;p&gt;Frink can evaluate a string as a Frink expression. If that means something to you, good. It's cool. You can make programs that write and run their own programs. Frink became self-aware on December 7, 2001 at 9:26 PM MST. This is 1561.926 days after Skynet became self-aware. History will be the judge if &lt;em&gt;this&lt;/em&gt; December 7th is another date that will live in infamy.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;eval[&quot;2 + 2&quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This behavior can also be used to convert a string into a number. It allows users to enter information as any Frink expression such as &lt;code&gt;&quot;6 billion tons&quot;&lt;/code&gt; or &lt;code&gt;2+2&lt;/code&gt; and have it handled correctly. See the &lt;a href=&quot;https://frinklang.org/#Input&quot;&gt;Input&lt;/a&gt; section below for examples of its use.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eval[]&lt;/code&gt; can also be used to perform another layer of evaluation on a value that is not a string.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;eval[]&lt;/code&gt; is passed an array, all elements of the array will be individually evaluated and the result will be returned in an array.&lt;/p&gt;
&lt;p&gt;There is also a two-argument version, &lt;code&gt;eval[&lt;em&gt;expression&lt;/em&gt;, &lt;em&gt;rethrows&lt;/em&gt;]&lt;/code&gt; where the &lt;code&gt;rethrows&lt;/code&gt; argument is a boolean flag indicating if we want evaluation errors to be thrown or just suppressed and &lt;code&gt;undef&lt;/code&gt; returned. If it is true, errors will be rethrown as Java exceptions, otherwise an error returns &lt;code&gt;undef&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There is also a three-argument version, &lt;code&gt;eval[&lt;em&gt;expression&lt;/em&gt;, &lt;em&gt;rethrows&lt;/em&gt;, &lt;em&gt;hidesLocals&lt;/em&gt;]&lt;/code&gt; where the &lt;code&gt;hidesLocal&lt;/code&gt; argument is a boolean flag indicating if we want to hide local variables before evaluation.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;SecurityRestrictionsOnEval&quot; id=&quot;SecurityRestrictionsOnEval&quot;&gt;Security Restrictions on eval[]&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;eval[]&lt;/code&gt; function restricts some insecure operations from being performed (&lt;em&gt;e.g.&lt;/em&gt; you can't read files from the local filesystem.) If you need all functions to be available from your evaluation, use the intentionally frighteningly-named &lt;code&gt;unsafeEval[&lt;em&gt;str&lt;/em&gt;]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Arbitrarily-dimensional, non-rectangular, heterogeneous arrays are possible. (If you're playing &quot;buzzword bingo,&quot; you just won.) Array indices are zero-based. Arrays are indicated by square brackets.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;c = [1, 2, 3]&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;You can break arrays into multiple lines by inserting newlines after the commas:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;b = [1, 2, 3,&lt;br /&gt;     4, 5, 6,&lt;br /&gt;     7, 8, 9]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Think of multidimensional arrays as being a list of lists. For example, to create a 2-dimensional array:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = [[1, 2, 3],&lt;br /&gt;     [4, 5, 6],&lt;br /&gt;     [7, 8, 9]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To get elements out, use the lovely @ operator (yes, I'm running out of bracket types... square brackets would be indistinguishable from function calls):&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a@0&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[1, 2, 3]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;a@0@2&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;3&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Arrays can be modified in place and automatically extended:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a@3= &quot;Monkey&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[[1, 2, 3], [4, 5, 6], [7, 8, 9], Monkey]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;a@0@2 = 42&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[[1, 2, 42], [4, 5, 6], [7, 8, 9], Monkey]&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;To get the length of an array, use the &lt;code&gt;length&lt;/code&gt; function:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;length[a]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;4&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;With the advent of array manipulation, I've proven to myself that Frink is capable of simulating a Turing machine, and thus, as of December 12, 2001, at 10:16 PM MST, Frink is theoretically capable of calculating anything calculable by any other programming language.&lt;/p&gt;
&lt;p&gt;To create a new empty array, use the notation:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = new array&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or use one of the &lt;code&gt;makeArray&lt;/code&gt; functions described in the next section to create arrays and initialize them.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;InitializingArrays&quot; id=&quot;InitializingArrays&quot;&gt;Initializing Arrays&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One-dimensional or multi-dimensional &quot;rectangular&quot; arrays can be constructed with the &lt;code&gt;makeArray[&lt;em&gt;dims&lt;/em&gt;, &lt;em&gt;initialValue&lt;/em&gt;]&lt;/code&gt; function where &lt;code&gt;dims&lt;/code&gt; is an &lt;em&gt;array&lt;/em&gt; of integers indicating the dimensions of the array, and &lt;code&gt;initialValue&lt;/code&gt; is the initial value to set in each cell. Multi-dimensional arrays are implemented as arrays of arrays.&lt;/p&gt;
&lt;p&gt;Create a 1-dimensional array with 10 elements, with each element initialized to 0:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = makeArray[[10], 0]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[0,0,0,0,0,0,0,0,0,0]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Create a 2-dimensional array with size 3x4, initialized to 0:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = makeArray[[3,4], 0]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If called without an initial value, the array is initialized as sparse and compact to conserve memory, but you may get errors if reading elements you haven't initialized.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = makeArray[[3,4]]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[[], [], []]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Array elements can still be assigned to, and the appropriate rows will get extended to fit them:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a@2@2 = 0&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[[], [], [undef, undef, 0]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;em&gt;All&lt;/em&gt; arrays can still be automatically extended by assigning to a value outside their currently-defined range. Creating an array with the &lt;code&gt;makeArray&lt;/code&gt; methods does &lt;em&gt;not&lt;/em&gt; prevent arrays from being extended nor prevent them from becoming non-rectangular. It is &lt;em&gt;never&lt;/em&gt; necessary to pre-allocate a one-dimensional array of a specific size, as all arrays will automatically resize on assignment.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;ArrayMethods&quot; id=&quot;ArrayMethods&quot;&gt;Array Methods&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;a name=&quot;Copying&quot; id=&quot;Copying&quot;&gt;Copying&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;It is very important to note that arrays are normally passed by reference. This means that if you assign an array to another variable, and modify the second variable, then you are modifying the original!&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = [3,2,1]&lt;br /&gt;b = a&lt;br /&gt;sort[b]&lt;br /&gt;println[a] // a is also sorted!&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[1,2,3]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To avoid this behavior, use the method &lt;code&gt;&lt;em&gt;array&lt;/em&gt;.shallowCopy[]&lt;/code&gt;. This makes a shallow copy of the object.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = [3,2,1]&lt;br /&gt;b = a.shallowCopy[]&lt;br /&gt;sort[b]&lt;br /&gt;println[a] // a is now not sorted.&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[3,2,1]&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;PushingAndPopping&quot; id=&quot;PushingAndPopping&quot;&gt;Pushing and Popping&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Arrays can be automatically extended by using the methods &lt;code&gt;&lt;em&gt;array&lt;/em&gt;.push[&lt;em&gt;x&lt;/em&gt;]&lt;/code&gt; and &lt;code&gt;&lt;em&gt;a&lt;/em&gt;.pop[]&lt;/code&gt; to append an item to the end of an array, or remove an item from the end of the array:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [1, 2]&lt;br /&gt;array.push[3]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[1, 2, 3]&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [1, 2, 3]&lt;br /&gt;c = array.pop[]&lt;br /&gt;array&lt;/code&gt; now contains &lt;code class=&quot;output&quot;&gt;[1, 2]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;c&lt;/code&gt; now contains &lt;code class=&quot;output&quot;&gt;3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Items can also be inserted or popped from the &lt;em&gt;front&lt;/em&gt; of an array by using the methods &lt;code&gt;&lt;em&gt;array&lt;/em&gt;.pushFirst[&lt;em&gt;x&lt;/em&gt;]&lt;/code&gt; and &lt;code&gt;a.popFirst[]&lt;/code&gt; methods.&lt;/p&gt;
&lt;p&gt;The contents of one array can be appended to another array using the &lt;code&gt;&lt;em&gt;array&lt;/em&gt;.pushAll[&lt;em&gt;array1&lt;/em&gt;]&lt;/code&gt; method, which modifies the original array in place:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = [1, 2, 3]&lt;br /&gt;b = [4, 5, 6]&lt;br /&gt;a.pushAll[b]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[1, 2, 3, 4, 5, 6]&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;InsertingAndRemoving&quot; id=&quot;InsertingAndRemoving&quot;&gt;Inserting And Removing&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Items can be inserted into an array using the method &lt;code&gt;&lt;em&gt;array&lt;/em&gt;.insert[&lt;em&gt;index&lt;/em&gt;, &lt;em&gt;value&lt;/em&gt;]&lt;/code&gt;. This inserts the specified value &lt;em&gt;before&lt;/em&gt; the item at the specified index. If the index is greater than or equal to the size of the array, the array is extended to fit the new elements, setting any unspecified values to the undefined value &lt;code&gt;undef&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [0, 1, 2]&lt;br /&gt;array.insert[0, &quot;first&quot;]&lt;br /&gt;array&lt;/code&gt; now contains &lt;code class=&quot;output&quot;&gt;[first, 0, 1, 2]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Items can be removed from an array using the method &lt;code&gt;&lt;em&gt;array&lt;/em&gt;.remove[&lt;em&gt;index&lt;/em&gt;]&lt;/code&gt;. This removes the item with the specified index and returns it, so you can do something with the value if desired. If the specified index does not exist, this generates an error.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]&lt;br /&gt;n = array.remove[1]&lt;br /&gt;array&lt;/code&gt; now contains &lt;code class=&quot;output&quot;&gt;[&quot;a&quot;, &quot;c&quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A range of values can be removed with the &lt;code&gt;&lt;em&gt;array&lt;/em&gt;.remove[&lt;em&gt;start&lt;/em&gt;, &lt;em&gt;end&lt;/em&gt;]&lt;/code&gt; method which removes elements starting with index &lt;code&gt;start&lt;/code&gt; (inclusive) and ending &lt;em&gt;before&lt;/em&gt; index &lt;code&gt;end&lt;/code&gt; (exclusive.) The number of items that will be removed is &lt;code&gt;start-end&lt;/code&gt;. The return value is the number of items that were actually removed. (The end index is allowed to run off the end of the array.)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [0, 1, 2, 3, 4, 5]&lt;br /&gt;array.remove[2,4]&lt;br /&gt;array&lt;/code&gt; now contains &lt;code class=&quot;output&quot;&gt;[0, 1, 4, 5]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Similarly, a range of values can be removed with the &lt;code&gt;&lt;em&gt;array&lt;/em&gt;.removeLen[&lt;em&gt;start&lt;/em&gt;, &lt;em&gt;length&lt;/em&gt;]&lt;/code&gt; method which removes elements starting with index &lt;code&gt;start&lt;/code&gt; (inclusive) and removes &lt;code&gt;length&lt;/code&gt; number of items. The return value is the number of items that were actually removed (the length may run off the end of the array.)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [0, 1, 2, 3, 4, 5]&lt;br /&gt;array.removeLen[2,2]&lt;br /&gt;array&lt;/code&gt; now contains &lt;code class=&quot;output&quot;&gt;[0, 1, 4, 5]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Items with a specified &lt;em&gt;value&lt;/em&gt; can be removed from an array using the method &lt;code&gt;&lt;em&gt;array&lt;/em&gt;.removeValue[&lt;em&gt;value&lt;/em&gt;]&lt;/code&gt;. This removes the first item having the specified &lt;em&gt;value&lt;/em&gt; from the array. If a matching item is found, this returns &lt;code&gt;true&lt;/code&gt;, otherwise returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]&lt;br /&gt;array.removeValue[&quot;two&quot;]&lt;br /&gt;array&lt;/code&gt; now contains &lt;code class=&quot;output&quot;&gt;[&quot;one&quot;, &quot;three&quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&lt;em&gt;array&lt;/em&gt;.removeAll[&lt;em&gt;value&lt;/em&gt;]&lt;/code&gt; method removes &lt;em&gt;all&lt;/em&gt; elements in the array which have the specified value.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [1,2,3,1]&lt;br /&gt;n = array.removeAll[1]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[2, 3]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A random item can be removed from an array using the method &lt;code&gt;&lt;em&gt;array&lt;/em&gt;.removeRandom[]&lt;/code&gt;. This removes a random item and returns its value.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]&lt;br /&gt;n = array.removeRandom[]&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;SearchingArrays&quot; id=&quot;SearchingArrays&quot;&gt;Searching Arrays&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;You can test if an item is contained in an array with the &lt;code&gt;&lt;em&gt;array&lt;/em&gt;.contains[&lt;em&gt;value&lt;/em&gt;]&lt;/code&gt; method:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [1,2,3,1]&lt;br /&gt;n = array.contains[3]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can find the first indexes of items in an array with the methods:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;&lt;em&gt;array&lt;/em&gt;.indexOf[&lt;em&gt;value&lt;/em&gt;]&lt;br /&gt;&lt;em&gt;array&lt;/em&gt;.indexOf[&lt;em&gt;value&lt;/em&gt;, &lt;em&gt;startIndex&lt;/em&gt;]&lt;br /&gt;&lt;em&gt;array&lt;/em&gt;.lastIndexOf[&lt;em&gt;value&lt;/em&gt;]&lt;br /&gt;&lt;em&gt;array&lt;/em&gt;.lastIndexOf[&lt;em&gt;value&lt;/em&gt;, &lt;em&gt;startIndex&lt;/em&gt;]&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the item does not exist, these return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;Permutations&quot; id=&quot;Permutations&quot;&gt;Permutations&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;You can obtain all of the permutations of the array by using the &lt;code&gt;permute&lt;/code&gt; method. This returns an enumerating expression that lazily generates the permutations. Note that the permutations are currently in reflected Gray code order, but this may change.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [1, 2, 3]&lt;br /&gt;array.permute[]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[[1, 2, 3], [1, 3, 2], [3, 1, 2], [3, 2, 1], [2, 3, 1], [2, 1, 3]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you need the results in lexicographical order, with duplicates removed, you can obtain all of the permutations of the array by using the &lt;code&gt;lexicographicPermute&lt;/code&gt; method. This returns an enumerating expression that lazily generates the permutations. Note that all of the elements of the array &lt;em&gt;must be comparable to each other&lt;/em&gt;, a constraint which is not necessary in the &lt;code&gt;permute&lt;/code&gt; method.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [1, 2, 3]&lt;br /&gt;array.lexicographicPermute[]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can also specify an ordering function to be used by the &lt;code&gt;lexicographicPermute&lt;/code&gt; method. The function should take two arguments and return -1, 0, or 1 to indicate if item &lt;code&gt;a&lt;/code&gt; is less than, equal to, or greater than item &lt;code&gt;b&lt;/code&gt; respectively. The following example sorts by length.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [&quot;aa&quot;, &quot;bbb&quot;, &quot;c&quot;]&lt;br /&gt;f = {|a,b| length[a] &amp;lt;=&amp;gt; length[b]}&lt;br /&gt;array.lexicographicPermute[f]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[[c, aa, bbb], [c, bbb, aa], [aa, c, bbb], [aa, bbb, c], [bbb, c, aa], [bbb, aa, c]]&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;Combinations&quot; id=&quot;Combinations&quot;&gt;Combinations&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;You can obtain all of the combinations of the array by using the &lt;code&gt;combinations[&lt;em&gt;take&lt;/em&gt;]&lt;/code&gt; method. This returns an enumerating expression that lazily generates combinations. Note that the combinations are currently in lexicographical order, (without duplicates removed,) but this may change. For example, to take 3 items at a time from a list:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [1, 2, 3, 4]&lt;br /&gt;array.combinations[3]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The sample program &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=pokerhands.frink&quot;&gt;pokerhands.frink&lt;/a&gt; demonstrates using this method to enumerate all possible 5-card poker hands.&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;SlicingArrays&quot; id=&quot;SlicingArrays&quot;&gt;Slicing Arrays&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;You can get a &quot;slice&quot; out of an array using the &lt;code&gt;slice&lt;/code&gt; and &lt;code&gt;sliceLength&lt;/code&gt; functions. (Note that these are functions, not methods.)&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;slice[&lt;em&gt;array&lt;/em&gt;, &lt;em&gt;start&lt;/em&gt;, &lt;em&gt;end&lt;/em&gt;]&lt;/code&gt; function returns a slice of an array starting with index &lt;code&gt;start&lt;/code&gt; and ending &lt;em&gt;before&lt;/em&gt; index &lt;code&gt;end&lt;/code&gt;. If the indices are beyond the ends of the array, only existing items will be returned.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [0, 1, 2, 3, 4]&lt;br /&gt;slice[array, 1, 3]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[1,2]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt; are the special value &lt;code&gt;undef&lt;/code&gt;, then the slice will contain the start of the array or the end of the array respectively.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;sliceLength[&lt;em&gt;array&lt;/em&gt;, &lt;em&gt;start&lt;/em&gt;, &lt;em&gt;length&lt;/em&gt;]&lt;/code&gt; function returns a slice of an array starting with index &lt;code&gt;start&lt;/code&gt; and containing &lt;code&gt;length&lt;/code&gt; items. If the indices are beyond the end of the array, only existing items will be returned.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [0, 1, 2, 3, 4]&lt;br /&gt;sliceLength[array, 1, 3]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[1,2,3]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The inverse of &lt;code&gt;slice&lt;/code&gt; and &lt;code&gt;sliceLength&lt;/code&gt; are the functions &lt;code&gt;removeSlice&lt;/code&gt; and &lt;code&gt;removeSliceLength&lt;/code&gt; which &lt;em&gt;remove&lt;/em&gt; the parts specified by the &lt;code&gt;slice&lt;/code&gt; commands and return the rest.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;removeSlice[&lt;em&gt;array&lt;/em&gt;, &lt;em&gt;start&lt;/em&gt;, &lt;em&gt;end&lt;/em&gt;]&lt;/code&gt; function removes array elements starting with index &lt;code&gt;start&lt;/code&gt; and ending &lt;em&gt;before&lt;/em&gt; index &lt;code&gt;end&lt;/code&gt;. If the indices are beyond the ends of the array, only existing items will be removed. (Note that this is the inverse of what is returned by &lt;code&gt;slice&lt;/code&gt; with the same arguments.)&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt; are the special value &lt;code&gt;undef&lt;/code&gt;, then the function will remove from the beginning of the array or to the end of the array respectively.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [0, 1, 2, 3, 4]&lt;br /&gt;removeSlice[array, 1, 3]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[0, 3, 4]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;removeSliceLength[&lt;em&gt;array&lt;/em&gt;, &lt;em&gt;start&lt;/em&gt;, &lt;em&gt;length&lt;/em&gt;]&lt;/code&gt; function removes a slice of an array starting with index &lt;code&gt;start&lt;/code&gt; and containing &lt;code&gt;length&lt;/code&gt; items. If the indices are beyond the end of the array, only existing items will be removed. (Note that this is the inverse of what is returned by &lt;code&gt;sliceLength&lt;/code&gt; with the same arguments.)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [0, 1, 2, 3, 4]&lt;br /&gt;removeSliceLength[array, 1, 3]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[0,4]&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;Flattening&quot; id=&quot;Flattening&quot;&gt;Flattening&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A list of lists can be flattened with the &lt;code&gt;flatten[&lt;em&gt;list&lt;/em&gt;]&lt;/code&gt; function:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = [ [1,2], 3, [4, [5,6]] ]&lt;br /&gt;println[flatten[a]]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[1, 2, 3, 4, 5, 6]&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;Subsets&quot; id=&quot;Subsets&quot;&gt;Subsets&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;To obtain all of the possible subsets of the elements in the array, you can use the &lt;code&gt;&lt;em&gt;array&lt;/em&gt;.subsets[]&lt;/code&gt; method. This returns an enumerating expression which iterates through all the subsets of items in the array, including the empty set and the original set itself. Each return value is itself an array of elements, with the elements preserving the same order as in the original array:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = [1,2,3]&lt;br /&gt;println[a.subsets[]]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can also request the subsets of the array and exclude either the empty set or the original set by using the &lt;code&gt;&lt;em&gt;array&lt;/em&gt;.subsets[&lt;em&gt;allowEmptySet&lt;/em&gt;, &lt;em&gt;allowOriginalSet&lt;/em&gt;]&lt;/code&gt; method. If &lt;code&gt;allowEmptySet&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the empty set will be returned as one of the elements. If &lt;code&gt;false&lt;/code&gt;, the empty set will be excluded. If &lt;code&gt;allowOriginalSet&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the full original set will be returned as one of the elements. If &lt;code&gt;false&lt;/code&gt;, the full original set will be excluded, and only &quot;proper&quot; subsets will be returned.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = [1,2,3]&lt;br /&gt;println[a.subsets[false, false]]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[[1], [2], [1, 2], [3], [1, 3], [2, 3]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that output of the empty set and the original set are suppressed in the example above.&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;Shuffling&quot; id=&quot;Shuffling&quot;&gt;Shuffling&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The contents of an array can be shuffled randomly with the &lt;code&gt;&lt;em&gt;array&lt;/em&gt;.shuffle[]&lt;/code&gt; method (using the Fisher-Yates-Knuth algorithm):&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = [1,2,3]&lt;br /&gt;a.shuffle[]&lt;br /&gt;a&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[3, 1, 2]&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;Clearing&quot; id=&quot;Clearing&quot;&gt;Clearing&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The contents of an array can be cleared with the &lt;code&gt;&lt;em&gt;array&lt;/em&gt;.clear[]&lt;/code&gt; method:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = [1,2,3]&lt;br /&gt;a.clear[]&lt;br /&gt;a&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[]&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;Transpose&quot; id=&quot;Transpose&quot;&gt;Transpose&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;While Frink does not have a complete implementation of matrix operations, (for an external class with some matrix operations, see &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=Matrix.frink&quot;&gt;Matrix.frink&lt;/a&gt;, and please contribute algorithms to that file,) it has some built-in methods that support matrix calculations.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&lt;em&gt;array&lt;/em&gt;.transpose[]&lt;/code&gt; method transposes the elements of a 2-dimensional array, like in matrix calculations. This means that rows and columns are switched. In other words, the element at &lt;code&gt;&lt;em&gt;array&lt;/em&gt;@i@j&lt;/code&gt; becomes the element at &lt;code&gt;&lt;em&gt;array&lt;/em&gt;@j@i&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [[1,2], [3, 4], [5,6]]&lt;br /&gt;array.transpose[]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[[1, 3, 5], [2, 4, 6]]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;An &lt;code&gt;OrderedList&lt;/code&gt; is an array that is always kept in order. Of course, this implies that all items in an &lt;code&gt;OrderedList&lt;/code&gt; must be comparable with each other. It extends the &lt;code&gt;array&lt;/code&gt; class and almost all methods and functions that operate on &lt;code&gt;array&lt;/code&gt; will work with &lt;code&gt;OrderedList&lt;/code&gt;, unless those methods would violate the ordering (e.g. &lt;code&gt;pushFirst&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;By default, the ordering is the default ordering produced by the &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; comparison operator. If another user-defined ordering is desired, it can be specified by one of the constructors explained in the next section.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;InitializingOrderedList&quot; id=&quot;InitializingOrderedList&quot;&gt;Initializing OrderedList&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An &lt;code&gt;OrderedList&lt;/code&gt; with the default ordering (that is, identical to the &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; comparison operator) can be created by calling &lt;code&gt;new OrderedList&lt;/code&gt;:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = new OrderedList&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you want to specify a user-defined ordering, you can pass a (possibly &lt;a href=&quot;https://frinklang.org/#AnonymousFunctions&quot;&gt;anonymous&lt;/a&gt;) function as the first argument to the constructor. This function must take two arguments (we'll call them) &lt;code&gt;[a,b]&lt;/code&gt;, and return -1 if &lt;code&gt;a&amp;lt;b&lt;/code&gt;, 0 if &lt;code&gt;a==b&lt;/code&gt;, and 1 if &lt;code&gt;a&amp;gt;b&lt;/code&gt;. (These are the values returned by the &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; operator, so you may be able to use it in your comparison function.)&lt;/p&gt;
&lt;p&gt;For example, if you want to use an ordering that simply sorts shorter strings before longer strings, (say that six times speedily,) you can do the following:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;&lt;br /&gt;f = { |a,b|  length[a] &amp;lt;=&amp;gt; length[b] }&lt;/code&gt;&lt;/p&gt;&lt;p&gt;x = new OrderedList[f] &lt;br /&gt;x.insert[&quot;aa&quot;]&lt;br /&gt;x.insert[&quot;bbb&quot;]&lt;br /&gt;x.insert[&quot;z&quot;]&lt;br /&gt;x&lt;/p&gt;&lt;p&gt; &lt;code class=&quot;output&quot;&gt;[z, aa, bbb] &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;An OrderedList can also take a piece of arbitrary data that is passed to the comparison function. This data is passed as the second argument to the constructor. If the first argument to the constructor is &lt;code&gt;undef&lt;/code&gt;, the default orderer will be used. The data will be passed as a third argument to the comparison function.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;&lt;br /&gt;f = { |a,b,data|  (abs[a-data] &amp;lt;=&amp;gt; abs[b-data]}&lt;/code&gt;&lt;/p&gt;&lt;p&gt;x = new OrderedList[f, 3] &lt;br /&gt;x.insert[1]&lt;br /&gt;x.insert[4]&lt;br /&gt;x.insert[3]&lt;br /&gt;x.insert[-2]&lt;br /&gt;x&lt;/p&gt;&lt;p&gt; &lt;code class=&quot;output&quot;&gt;[3, 4, 1, -2] &lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;OrderedListMethods&quot; id=&quot;OrderedListMethods&quot;&gt;OrderedList Methods&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Since &lt;code&gt;OrderedList&lt;/code&gt; extends &lt;code&gt;array&lt;/code&gt;, &lt;a href=&quot;https://frinklang.org/#ArrayMethods&quot;&gt;array methods&lt;/a&gt; are available on OrderedList unless they would interfere with preserving ordering. New methods and methods with altered effects are listed below.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;OrderedList Methods&quot; readability=&quot;24&quot;&gt;&lt;tr&gt;&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Definition&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;binarySearch[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the index of the item to insert &lt;em&gt;before&lt;/em&gt; to put the item in the right order. If the item is found anywhere in the list, this returns the index of the matching item in the list. If the item is not found in the list, this still returns the index before which it should be inserted.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;contains[&lt;em&gt;value&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns true if the list contains 1 or more instances of the specified value, false if it does not.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;indexOf[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the index of one of the occurrences of the specified value in the list, &lt;code&gt;undef&lt;/code&gt; if it does not occur. If multiple instances of the same value occur in the list, this may return the index of any of the instances.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;insert[&lt;em&gt;value&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Inserts the specified value into the appropriate place in the list. If it's already there, this inserts a duplicate before the existing element. (See the &lt;code&gt;insertUnique&lt;/code&gt; method if you don't want duplicates.) Returns the index where the item was inserted, but this behavior may change.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;insertUnique[&lt;em&gt;value&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Inserts the specified value into the appropriate place in the list. If it's already there, a new value is not added. Returns the index where the item was inserted, but this behavior may change.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;insert[&lt;em&gt;pos&lt;/em&gt;, &lt;em&gt;value&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Disallowed&lt;/strong&gt; in OrderedList as it could violate proper ordering.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;insertAll[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Inserts all of the elements of the specified expression (which can be an array or EnumeratingExpression) into this OrderedList, with the correct ordering. If duplicates exist, duplicates will be inserted.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;insertAllUnique[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Inserts all of the elements of the specified expression (which can be an array or EnumeratingExpression) into this OrderedList, with the correct ordering. No duplicates will be allowed.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;push[&lt;em&gt;value&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Disallowed&lt;/strong&gt; in OrderedList as it could violate proper ordering.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;pushAll[&lt;em&gt;array&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Disallowed&lt;/strong&gt; in OrderedList as it could violate proper ordering.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;pushFirst[&lt;em&gt;value&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Disallowed&lt;/strong&gt; in OrderedList as it could violate proper ordering.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;shuffle[]&lt;/td&gt;
&lt;td&gt;This differs from the behavior of &lt;code&gt;&lt;em&gt;array&lt;/em&gt;.shuffle[]&lt;/code&gt; in that it does not modify the structure in place, but rather returns a new (unordered) &lt;code&gt;array&lt;/code&gt; which is shuffled randomly.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;A &lt;code&gt;RingBuffer&lt;/code&gt; is a type of array, but with a fixed maximum size. It is efficient to append items to the end of the list using the &lt;code&gt;push[&lt;em&gt;item&lt;/em&gt;]&lt;/code&gt; method, and to remove them from the beginning using the &lt;code&gt;popFirst[&lt;em&gt;item&lt;/em&gt;]&lt;/code&gt;, which is how it will usually be used. If more items are pushed than the fixed capacity allows, the item at the front of the buffer is discarded.&lt;/p&gt;
&lt;p&gt;Items can also be accessed randomly using the array index &lt;code&gt;@&lt;/code&gt; operator. The first item is always element 0. When an item is popped from the beginning of the list using the &lt;code&gt;popFirst[]&lt;/code&gt; method, the item that was previously at index 1 becomes index 0, and so on. If you attempt to access an item that does not exist, this raises an error, but this behavior may change.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;RingBuffer&lt;/code&gt; is constructed by specifying its size as a positive integer:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;rb = new RingBuffer[10]&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Like other Frink collections, you can find out how many items are contained with the &lt;code&gt;length[&lt;em&gt;expr&lt;/em&gt;]&lt;/code&gt; function. You can also turn it into a traditional array with the &lt;code&gt;toArray[&lt;em&gt;ringBuffer&lt;/em&gt;]&lt;/code&gt; function. Its elements can be enumerated with a &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;p&gt;The following demonstrates using a RingBuffer to capture the last &lt;code&gt;n&lt;/code&gt; elements of an enumerating expression (this could be a list, or the lines of a file from the &lt;code&gt;lines&lt;/code&gt; function, etc.)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;last[expr, n]:=&lt;br /&gt;{&lt;br /&gt;   b = new RingBuffer[n]&lt;br /&gt;   b.pushAll[expr]&lt;br /&gt;   return b&lt;br /&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;RingBufferMethods&quot; id=&quot;RingBufferMethods&quot;&gt;RingBuffer Methods&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The following methods operate on &lt;code&gt;RingBuffer&lt;/code&gt;. They are mostly the same as the corresponding &lt;a href=&quot;https://frinklang.org/#ArrayMethods&quot;&gt;array methods&lt;/a&gt;, with differences as noted below:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;RingBuffer Methods&quot; readability=&quot;27&quot;&gt;&lt;tr&gt;&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;push[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Pushes the specified expression onto the end of the list. If the &lt;code&gt;RingBuffer&lt;/code&gt; is at capacity, this will throw away the item at the beginning and change the indices of the array. The first element is always element 0 of the list.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;pushFirst[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Pushes the specified expression to the beginning of the list. If the &lt;code&gt;RingBuffer&lt;/code&gt; is at capacity, this will throw away the item at the end. The new element becomes element 0 of the list.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;pop[]&lt;/td&gt;
&lt;td&gt;Removes the last element from the list and returns its value. If the list is empty, this currently throws an error but this behavior may change.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;popFirst[]&lt;/td&gt;
&lt;td&gt;Removes the first element from the list and returns its value. This will change the indices for the remaining items. If the list is empty, this currently throws an error but this behavior may change.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;pushAll[&lt;em&gt;collection&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Pushes all the elements in the specified collection (which can be an enumerating expression,) individually, onto the end of the list. If the collection is an array with known length, this is done efficiently.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isEmpty[]&lt;/td&gt;
&lt;td&gt;Returns true if the &lt;code&gt;RingBuffer&lt;/code&gt; is empty, false otherwise.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isFull[]&lt;/td&gt;
&lt;td&gt;Returns true if the &lt;code&gt;RingBuffer&lt;/code&gt; is full, false otherwise.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;contains[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns true if the given expression is contained in the list. This is a linear search.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;indexOf[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the index of the first occurrence of the specified expression in the list, &lt;code&gt;-1&lt;/code&gt; if it does not exist in the list.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;indexOf[&lt;em&gt;expr&lt;/em&gt;, &lt;em&gt;startIndex&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the index of the first occurrence of the specified expression in the list, beginning the search at index &lt;code&gt;startIndex&lt;/code&gt;. This returns &lt;code&gt;-1&lt;/code&gt; if it does not exist at that point or later in the list.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;lastIndexOf[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the index of the last occurrence of the specified expression in the list, &lt;code&gt;-1&lt;/code&gt; if it does not exist in the list.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;lastIndexOf[&lt;em&gt;expr&lt;/em&gt;, &lt;em&gt;startIndex&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the index of the last occurrence of the specified expression in the list, beginning the search at index &lt;code&gt;startIndex&lt;/code&gt;. This returns &lt;code&gt;-1&lt;/code&gt; if it does not exist at that point or earlier in the list.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;You can request input from the user with the &lt;code&gt;input[&lt;em&gt;prompt&lt;/em&gt;]&lt;/code&gt; or &lt;code&gt;input[&lt;em&gt;prompt&lt;/em&gt;, &lt;em&gt;defaultValue&lt;/em&gt;]&lt;/code&gt; function. The result always comes back as a string, but you can parse it into a unit, a date, or whatever, using the &lt;code&gt;eval[str]&lt;/code&gt; function:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;radius = input[&quot;Enter the radius of a sphere: &quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;volume = 4/3 pi eval[radius]^3&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;This allows your users to enter things like &quot;3 inches&quot; or &quot;1 mile&quot; or any units that Frink knows about (like &quot;earthradius&quot;,) and everything will Just Work. (That &quot;Self-Evaluation&quot; section above seemed irrelevant at the time, but it turns out it's quite useful.)&lt;/p&gt;
&lt;p&gt;If the user cancels the input dialog, or, for text input, if end-of-file is reached, this returns the special value &lt;code&gt;undef&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In command-line mode, these &lt;code&gt;input&lt;/code&gt; functions also allow you to read from standard input (stdin). (User input is actually taken from stdin in command-line mode, as you may expect.) Lines can be read one at a time, &lt;em&gt;and have trailing carriage returns/linefeeds removed.&lt;/em&gt; On end-of-file (EOF), the input function returns the special value &lt;code&gt;undef&lt;/code&gt;. A short-program to read from standard in and echo its output may look like:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;while (line = input[&quot;&quot;]) != undef&lt;br /&gt;   println[line]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If, for some reason, you're in a GUI mode and you still want to read from standard input, you can call &lt;code&gt;readStdin[]&lt;/code&gt; to read one line from standard input. This is just like calling &lt;code&gt;input[&quot;&quot;]&lt;/code&gt; from command-line mode, which is what you really want to be calling if you're trying to make programs that work both interactively and non-interactively, and in GUI mode and non-GUI mode. But if you're sure you only ever want to read from standard input, and don't want to trigger a GUI input window, use &lt;code&gt;readStdin[]&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;while (line = readStdin[]) != undef&lt;br /&gt;   println[line]&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;MultiInput&quot; id=&quot;MultiInput&quot;&gt;Multi-Input&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you want to request multiple input items from the user, you can use the &quot;multi-input&quot; version of the input function, where the second argument is an array of items you're going to prompt for:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;[first, last] = input[&quot;What is your name&quot;, [&quot;First Name&quot;, &quot;Last Name&quot;]]&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;This will produce a graphical user interface which prompts the user for their input. This works on AWT, Swing, Android, and in text mode if you're running in a pure text environment.&lt;/p&gt;
&lt;p&gt;The results will be returned as an array of strings, in the same order as they were specified. As in the &lt;a href=&quot;https://frinklang.org/#Input&quot;&gt;Input&lt;/a&gt; section above, you can use the &lt;code&gt;eval[&lt;em&gt;str&lt;/em&gt;]&lt;/code&gt; function to parse them into numeric or other values.&lt;/p&gt;
&lt;p&gt;If the user cancels the input dialog, or, for text input, if end-of-file is reached, this returns the special value &lt;code&gt;undef&lt;/code&gt; instead of an array. When in text mode, if end-of-file is reached before filling the second or later item, then partial results will be returned (with the special value &lt;code&gt;undef&lt;/code&gt; being returned for each incomplete value.)&lt;/p&gt;
&lt;p&gt;If any of the items in the array is a two-element array, the second argument will be used as the default value:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;[first, last] = input[&quot;What is your name&quot;,[[&quot;First Name&quot;, &quot;Jeff&quot;], [&quot;Last Name&quot;, &quot;Albertson&quot;]]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://frinklang.org/images/multiinput.png&quot; width=&quot;316&quot; height=&quot;140&quot; alt=&quot;Multi-Input screenshot&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;MakingInteractiveInterfaces&quot; id=&quot;MakingInteractiveInterfaces&quot;&gt;Making Interactive Interfaces&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The following program demonstrates an idiom for creating a simple interactive GUI that finds roots of numbers until you cancel. The &lt;code&gt;while&lt;/code&gt; loop exits when the user cancels calculations. Previous results are displayed to the user at the top of the input dialog, and the user's previous input is maintained (verbatim) in the input fields.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;n = &quot;10000&quot;&lt;br /&gt;r = &quot;2&quot;&lt;br /&gt;message = &quot;Find roots of a number&quot;&lt;br /&gt;while [n, r] = results = input[message, [[&quot;Number&quot;, n], [&quot;Root&quot;, r]]]&lt;br /&gt;{&lt;br /&gt;   [num, root] = eval[results]  &lt;br /&gt;   val = num^(1/root)&lt;br /&gt;   message = &quot;$n^(1/$r) = $val&quot;&lt;br /&gt;   println[message]&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This code works whether the user is running with a Swing or AWT or Android GUI, or in text mode. The user cancels input by closing the input dialog (in Swing or AWT), hitting the &quot;back&quot; button on Android, or with end-of-file (EOF) in text mode (EOF can be simulated by Control-D on Unixlike systems, Control-Z on Windows.)&lt;/p&gt;
&lt;p&gt;Note that the idiomatic use of the &quot;eval&quot; function to turn the string inputs into Frink expressions. This means that the user can enter any expression that Frink understands, such as &quot;&lt;code&gt;2+2&lt;/code&gt;&quot;, &quot;&lt;code&gt;1 trillion&lt;/code&gt;&quot;, &quot;&lt;code&gt;sin[30 degrees]&lt;/code&gt;&quot; or &quot;&lt;code&gt;32 m^2&lt;/code&gt;&quot;. It's like a generalized calculator inside of a specialized calculator!&lt;/p&gt;

&lt;p&gt;To print, use the &lt;code&gt;print&lt;/code&gt; or &lt;code&gt;println&lt;/code&gt; functions, each of which take one argument. The only difference is that &lt;code&gt;println&lt;/code&gt; sends a linefeed afterwards.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;println[&quot;The volume of the sphere is &quot; + (volume -&amp;gt; ft^3) + &quot; cubic feet.&quot;]&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I'm just going to list a forest of cryptic boolean expressions here without explanation. You pick out the ones you like. They all work, and there are usually multiple equivalents for the same thing, taken from different languages. I've tried to keep precedence the same as Java. There is no difference between the different versions of, say, &lt;code class=&quot;input&quot;&gt;and&lt;/code&gt;, &lt;code class=&quot;input&quot;&gt;AND&lt;/code&gt;, and &lt;code class=&quot;input&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; .&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;true TRUE false FALSE == != &amp;lt;&amp;gt; &amp;lt; &amp;lt;= &amp;gt; &amp;gt;= &amp;amp;&amp;amp; and AND || or OR ! NOT not nand NAND nor NOR xor XOR implies IMPLIES&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A dictionary is an associative data structure that lets you map arbitrary keys to values (currently, keys can be strings, units, (that is, numbers), sets, other dictionaries, arrays, date/time values, or objects created from a &lt;code&gt;class&lt;/code&gt;.) Please note that it makes very little sense to hash on a floating-point value or date! Don't do it!&lt;/p&gt;
&lt;p&gt;The syntax is identical to the syntax for array element manipulation. (This means that you can switch back and forth between an array and (sparse) dictionary representation for integer-indexed data structures!)&lt;/p&gt;
&lt;p&gt;Create an empty dictionary using &lt;code&gt;new dict&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = new dict&lt;/code&gt; &lt;br /&gt;&lt;code class=&quot;input&quot;&gt;a@&quot;one&quot; = 1&lt;br /&gt;a@&quot;two&quot; = 2&lt;br /&gt;a@&quot;three&quot; = 3&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;input&quot;&gt;a@&quot;one&quot;&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;1&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;b = new dict&lt;/code&gt; &lt;br /&gt;&lt;code class=&quot;input&quot;&gt;b@1 = &quot;one&quot;&lt;br /&gt;b@2 = &quot;two&quot;&lt;br /&gt;b@3 = &quot;three&quot;&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;input&quot;&gt;b@1&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;one&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can also enumerate over &lt;code&gt;[key, value]&lt;/code&gt; pairs directly in a dictionary. They are not returned in any guaranteed order.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for [key, value] = a&lt;br /&gt;   println[&quot;$key = $value&quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;two = 2&lt;br /&gt;one = 1&lt;br /&gt;three = 3&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;DictionaryConstructors&quot; id=&quot;DictionaryConstructors&quot;&gt;Dictionary Constructors&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Create an empty dictionary:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = new dict&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Create a dictionary from an array (or enumerating expression) where each element in the array is a two-item list which are treated as a key and a value:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [[&quot;one&quot;, 1], [&quot;two&quot;, 2]] &lt;br /&gt;d = new dict[array] &lt;br /&gt;d@&quot;one&quot; &lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can also turn an array (or other types) into a dictionary by calling the &lt;code&gt;toDict[&lt;em&gt;array&lt;/em&gt;]&lt;/code&gt; function on it, which behaves exactly like calling the single-argument constructor above.&lt;/p&gt;
&lt;p&gt;Create a dictionary from two arrays (or enumerating expressions) where the first array contains keys and the second array contains values. The first element in the keys array will be matched with the first element in the values array.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;keys = [&quot;one&quot;, &quot;two&quot;]&lt;br /&gt;values = [1,2]&lt;br /&gt;d = new dict[keys, values]&lt;br /&gt;d@&quot;one&quot;&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;1&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;d &lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[[one, 1], [two, 2]]&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;DictionaryMethods&quot; id=&quot;DictionaryMethods&quot;&gt;Dictionary Methods&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can get an enumeration of the keys in a dictionary by using the &lt;code&gt;keys&lt;/code&gt; function. This function does not return the keys in any defined order, but you can sort them with the &lt;a href=&quot;https://frinklang.org/#Sorting&quot;&gt;sorting functions&lt;/a&gt; below.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for key = keys[a]&lt;br /&gt;   println[ &quot;$key = &quot; + a@key]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;two = 2&lt;br /&gt;one = 1&lt;br /&gt;three = 3&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A dictionary can be queried to see if it contains a specific key using the &lt;code&gt;containsKey[&lt;em&gt;key&lt;/em&gt;]&lt;/code&gt; method:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;b.containsKey[1]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;true&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;b.containsKey[4]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Entries in a dictionary can be removed with the &lt;code&gt;remove[&lt;em&gt;key&lt;/em&gt;]&lt;/code&gt; method. This returns the value corresponding to the key, or the special value &lt;code&gt;undef&lt;/code&gt; if that key is not in the dictionary.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;b.remove[1]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;one&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;b.remove[4]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;undef&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can invert the contents of a dictionary by using the &lt;code&gt;invert&lt;/code&gt; method which returns a new dictionary with key-value pairs reversed. If the values are not hashable, this will print a warning. If the same value appears multiple times, this will print a warning.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;c = b.invert[]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[[one, 1], [two, 2], [three, 3]]&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;A dictionary can be cleared by using the &lt;code&gt;clear&lt;/code&gt; method:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a.clear[]&lt;br /&gt;a&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A set is a data structure that contains items with no duplicates. A set can currently contain strings, units, (that is, numbers), other sets, dictionaries, or objects created from a &lt;code&gt;class&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;You simply create an empty set using &lt;code&gt;new set&lt;/code&gt;, a literal set by calling something like &lt;code&gt;new set[1,2,3]&lt;/code&gt;, or turn an array or enumerating expression into a set by calling &lt;code&gt;toSet[&lt;em&gt;expr&lt;/em&gt;]&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = new set&lt;/code&gt; &lt;br /&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;b = new set[1,2,3]&lt;/code&gt; &lt;br /&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;c = [3,6,9] &lt;br /&gt;d = toSet[c] &lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that sets do not preserve any order of the items contained in them. There are a variety of methods for modifying sets:&lt;/p&gt;
&lt;p&gt;Items are inserted into a set using the &lt;code&gt;put&lt;/code&gt; method:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a.put[1]&lt;br /&gt;a.put[2]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[1,2]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Multiple items from an array, set, or other enumerating expression can be inserted into a set as separate items using the &lt;code&gt;putAll&lt;/code&gt; method:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;b = new set&lt;br /&gt;c = [1,2,3]&lt;br /&gt;b.putAll[c]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[2,3,1]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Items are removed from a set using the &lt;code&gt;remove&lt;/code&gt; method:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a.remove[2]&lt;br /&gt;a&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[1]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A set can be tested to see if it contains a value by using the &lt;code&gt;contains&lt;/code&gt; method:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a.contains[1]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can get a shallow copy of a set by calling its &lt;code&gt;.shallowCopy[]&lt;/code&gt; method.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;b = a.shallowCopy[]&lt;br /&gt;b.put[2]&lt;br /&gt;b&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[1,2]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A set can be cleared by using the &lt;code&gt;clear&lt;/code&gt; method:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a.clear[]&lt;br /&gt;a&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can also enumerate over values contained in a set:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for value = a&lt;br /&gt;   println[value]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The following demonstrates turning an enumerating expression into a set (the &lt;code&gt;lines[&lt;em&gt;url&lt;/em&gt;]&lt;/code&gt; function returns an enumerating expression of all of the lines in a file,) turning that into an set (to remove duplicates) and sorting it (implicitly turning it into an array in the process.) The result is a sorted array containing all of the unique lines in a file, discarding duplicates.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;sort[toSet[lines[&quot;file:myfile.txt&quot;]]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To obtain all of the possible subsets of the elements in the set, you can use the &lt;code&gt;&lt;em&gt;set&lt;/em&gt;.subsets[]&lt;/code&gt; method. This returns an enumerating expression which iterates through allt he subsets of items in the set, including the empty set and the original set itself. Each return value is itself an set of elements.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = new set[1,2,3]&lt;br /&gt;println[a.subsets[]]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can also request the subsets of the set and exclude either the empty set or the original set by using the &lt;code&gt;&lt;em&gt;set&lt;/em&gt;.subsets[&lt;em&gt;allowEmptySet&lt;/em&gt;, &lt;em&gt;allowOriginalSet&lt;/em&gt;]&lt;/code&gt; method. If &lt;code&gt;allowEmptySet&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the empty set will be returned as one of the elements. If &lt;code&gt;false&lt;/code&gt;, the empty set will be excluded. If &lt;code&gt;allowOriginalSet&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the full original set will be returned as one of the elements. If &lt;code&gt;false&lt;/code&gt;, the full original set will be excluded, and only &quot;proper&quot; subsets will be returned.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = [1,2,3]&lt;br /&gt;println[a.subsets[false, false]]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[[1], [2], [1, 2], [3], [1, 3], [2, 3]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that output of the empty set and the original set are suppressed in the example above.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;SetFunctions&quot; id=&quot;SetFunctions&quot;&gt;Set Functions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The following functions operate on sets:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Set Functions&quot; readability=&quot;20.5&quot;&gt;&lt;tr&gt;&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;union[&lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns a new set whose value is the union of sets &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. (Sometimes written &lt;code&gt;a ∪ b&lt;/code&gt;.) In other words, the new set contains all of the elements that exist in &lt;em&gt;either&lt;/em&gt; set &lt;code&gt;a&lt;/code&gt; &lt;em&gt;or&lt;/em&gt; set &lt;code&gt;b&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;intersection[&lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns a new set whose value is the intersection of sets &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. (Sometimes written &lt;code&gt;a ∩ b&lt;/code&gt;.) In other words, the new set contains only the elements that exist in &lt;em&gt;both&lt;/em&gt; set &lt;code&gt;a&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; set &lt;code&gt;b&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;setsIntersect[&lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns true if the two sets have a non-empty intersection. That is, both sets contain at least one element in common.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td class=&quot;lit&quot;&gt;setDifference[&lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns a new set whose value is the difference of sets &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. (Sometimes written &lt;code&gt;a - b&lt;/code&gt;.) In other words, the new set contains only the elements that exist in set &lt;code&gt;a&lt;/code&gt; &lt;em&gt;but not&lt;/em&gt; in set &lt;code&gt;b&lt;/code&gt;. If the arguments are not sets, this tries to coerce the arguments into sets, so it can be used to get the differences of arrays as sets, for instance. Note that ordering will be lost when differencing arrays.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isSubset[&lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns true if sets &lt;code&gt;a&lt;/code&gt; is a subset of set &lt;code&gt;b&lt;/code&gt;. (Sometimes written &lt;code&gt;a ⊆ b&lt;/code&gt;.) In other words, this returns true if all of the elements in set &lt;code&gt;a&lt;/code&gt; are also contained in set &lt;code&gt;b&lt;/code&gt;. &lt;em&gt;Note that this does not test that this is a &quot;proper&quot; subset.&lt;/em&gt; See below.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isProperSubset[&lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns true if sets &lt;code&gt;a&lt;/code&gt; is a &lt;em&gt;proper&lt;/em&gt; subset of set &lt;code&gt;b&lt;/code&gt;. (Sometimes written &lt;code&gt;a ⊂ b&lt;/code&gt;.) In other words, this returns true if all of the elements in set &lt;code&gt;a&lt;/code&gt; are also contained in set &lt;code&gt;b&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; set &lt;code&gt;a&lt;/code&gt; also has fewer members than b.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;toSet[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Turns the specified expression into a set, if possible. This works with enumerating expressions, arrays, or simple expressions (making a single-item set out of the latter.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;length[&lt;em&gt;a&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the cardinality of the set, that is, the number of items it contains.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The most common trigonometric functions are built in. They, as everything else in Frink, are best used when you explicitly specify the units. For the following functions, input should be an angle, and output will come out dimensionless. (If no unit is specified for input, it should act like radians, because radians &lt;em&gt;are&lt;/em&gt; dimensionless units and really indistinguishable from pure numbers.)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;sin[90 degrees]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;cos[2 pi radians]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;tan[30 arcsec]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;sec[45 degrees]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;csc[pi/2 radians]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;cot[30 arcsec]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;sinh[90 degrees]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;cosh[2 pi radians]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;sech[2 pi radians]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;tanh[30 arcsec]&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;For inverse operations, the input must be dimensionless, and the output will come out in angular units. (Radians, by default.) This is easily converted to whatever angular units you want, as above. You don't see that the output is in radians because radians are essentially dimensionless numbers. You just gotta be a bit careful with angles.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;arcsin[.1] -&amp;gt; degrees&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;arccos[1/2] -&amp;gt; radians&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;arcsin[.1] -&amp;gt; degrees&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;arccsc[3/2] -&amp;gt; radians&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;arcsec[3/2] -&amp;gt; radians&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;arccot[1/2] -&amp;gt; radians&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;arctan[3 inches/(1 foot)] -&amp;gt; arcminutes&lt;/code&gt;&lt;br /&gt;(Returns a value in the range [-π/2, π/2])&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;arctan[3 inches, 1 foot] -&amp;gt; degrees&lt;/code&gt;&lt;br /&gt;(Calculates &lt;code&gt;arctan[x/y]&lt;/code&gt; corrected for the proper quadrant. Returns a value in the range [-π, π])&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;FormattingFunctions&quot; id=&quot;FormattingFunctions&quot;&gt;Formatting Functions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The following functions can be used to format numeric and unit expressions to a variety of formats.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; the &lt;code&gt;-&amp;gt;&lt;/code&gt; operator is a formatting operator that &lt;em&gt;always returns a string&lt;/em&gt;, so you can't format it any further.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;em&gt;This is wrong:&lt;/em&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;a = 10 USD -&amp;gt; Euro   &lt;br /&gt;format[a, &quot;Euro&quot;, 2] &lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;This is right, and only converts and formats on output, which is usually what you want to do:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;a = 10 USD&lt;br /&gt;format[a, &quot;Euro&quot;, 2]&lt;/code&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Formatting Functions&quot; readability=&quot;42&quot;&gt;&lt;tr&gt;&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Definition&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;38.5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;format[num, divideBy, decPlaces]&lt;br /&gt;formatFix[num, divideBy, decPlaces]&lt;br /&gt;formatFixed[num, divideBy, decPlaces]&lt;/td&gt;
&lt;td readability=&quot;26&quot;&gt;&lt;strong&gt;Fixed-decimal-places format:&lt;/strong&gt; Divides &lt;code&gt;num&lt;/code&gt; by &lt;code&gt;divideBy&lt;/code&gt; and returns a string with a fixed number (&lt;code&gt;decPlaces&lt;/code&gt;) of digits &lt;em&gt;after&lt;/em&gt; the decimal point. (If the number is dimensionless without size, &lt;code&gt;divideBy&lt;/code&gt; should be &lt;code&gt;1&lt;/code&gt;). For example:
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;format[3 meters, feet, 2]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;9.84&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;divideBy&lt;/code&gt; is a string, this evaluates the string, expecting a unit to be returned, and both divides by this unit and concatenates the string after the result:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;format[3 meters, &quot;feet&quot;, 2]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;9.84 feet&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This function is somewhat deprecated for several reasons:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;It requires additional work behind the scenes which makes it slower. (That is, it needs to predict how many digits will be in the result after division, and then has to increase its working precision to calculate the full number of digits after the decimal point.)&lt;/li&gt;
&lt;li&gt;It is not a very readable representation for very large or very small numbers.&lt;/li&gt;
&lt;li&gt;It loses information for small numbers (less-significant digits may be lost or rounded or the number may be lost entirely.)&lt;/li&gt;
&lt;li&gt;It is rarely a good choice for large numbers, as many of the decimal places will be meaningless or displayed as zero.&lt;/li&gt;
&lt;li&gt;It's not quite as flexible as the other functions. It will not work if its arguments are not real numbers (&lt;em&gt;e.g.&lt;/em&gt; complex numbers or intervals. The other formatting functions &lt;em&gt;will&lt;/em&gt; work in this case.)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The previous behavior of the &lt;code&gt;format&lt;/code&gt; function was preserved to keep old programs working, but the default behavior of &lt;code&gt;format&lt;/code&gt; &lt;em&gt;may&lt;/em&gt; change in the future to another one of the formatting functions below. The &lt;code&gt;formatFix&lt;/code&gt; and &lt;code&gt;formatFixed&lt;/code&gt; functions (which are identical to each other) will keep their current behavior, so it's probably better to use &lt;code&gt;formatFix&lt;/code&gt; instead of &lt;code&gt;format&lt;/code&gt; to future-proof your programs if this is the behavior your want to keep.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;24&quot;&gt;&lt;td class=&quot;lit&quot;&gt;formatSci[num, divideBy, decPlaces]&lt;/td&gt;
&lt;td readability=&quot;17&quot;&gt;&lt;strong&gt;Scientific Notation:&lt;/strong&gt; Divides &lt;code&gt;num&lt;/code&gt; by &lt;code&gt;divideBy&lt;/code&gt; and returns a string in scientific notation with &lt;code&gt;decPlaces&lt;/code&gt; decimal digits. (If the number is dimensionless without size, &lt;code&gt;divideBy&lt;/code&gt; should be &lt;code&gt;1&lt;/code&gt;). For example:
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;formatSci[1 mm, feet, 2]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;3.33e-3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;divideBy&lt;/code&gt; is a string, this evaluates the string, expecting a unit to be returned, and both divides by this unit and concatenates the string after the result:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;formatSci[1 mm, &quot;feet&quot;, 4]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;3.281e-3 feet&lt;/code&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;25&quot;&gt;&lt;td class=&quot;lit&quot;&gt;formatSig[num, divideBy, decPlaces]&lt;/td&gt;
&lt;td readability=&quot;17&quot;&gt;&lt;strong&gt;Significant Figures format:&lt;/strong&gt; Divides &lt;code&gt;num&lt;/code&gt; by &lt;code&gt;divideBy&lt;/code&gt; and returns a string with &lt;code&gt;decPlaces&lt;/code&gt; significant digits. This may be a normal number or a number in scientific format, depending on the size of the number. (If the number is dimensionless without size, &lt;code&gt;divideBy&lt;/code&gt; should be &lt;code&gt;1&lt;/code&gt;). For example:
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;formatSig[100 mm, feet, 2]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;0.34&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;divideBy&lt;/code&gt; is a string, this evaluates the string, expecting a unit to be returned, and both divides by this unit and concatenates the string after the result:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;formatSig[100 mm, &quot;feet&quot;, 3]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;0.328 feet&lt;/code&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;29&quot;&gt;&lt;td class=&quot;lit&quot;&gt;formatEng[num, divideBy, decPlaces]&lt;/td&gt;
&lt;td readability=&quot;17&quot;&gt;&lt;strong&gt;Engineering format:&lt;/strong&gt; Divides &lt;code&gt;num&lt;/code&gt; by &lt;code&gt;divideBy&lt;/code&gt; and returns a string in &quot;engineering&quot; format (that is, in scientific mode or normal mode where exponents are a multiple of 3,) so that they can be easily read as milli-, kilo-, mega-, etc. with &lt;code&gt;decPlaces&lt;/code&gt; significant digits. (If the number is dimensionless without size, &lt;code&gt;divideBy&lt;/code&gt; should be &lt;code&gt;1&lt;/code&gt;). For example:
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;formatEng[1000 miles, m, 4]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;16.09 e+6&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;divideBy&lt;/code&gt; is a string, this evaluates the string, expecting a unit to be returned, and both divides by this unit and concatenates the string after the result:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;formatEng[29000 feet, &quot;meters&quot;, 3]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;8.84e+3 meters&lt;/code&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The following compares the output of the various formatting functions by displaying &lt;code&gt;-2/3 * 10^n&lt;/code&gt; for various integer values of &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Formatting Examples&quot;&gt;&lt;tr&gt;&lt;th&gt;&lt;code&gt;formatSig&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;formatSci&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;formatEng&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;format&lt;/code&gt;, &lt;code&gt;formatFix&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6.66667e-12&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e-12&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e-12&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;0.000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6.66667e-11&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e-11&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-66.6667e-12&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;0.000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6.66667e-10&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e-10&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-666.667e-12&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;0.000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6.66667e-9&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e-9&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e-9&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;0.000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6.66667e-8&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e-8&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-66.6667e-9&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;0.000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6.66667e-7&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e-7&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-666.667e-9&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-0.000001&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6.66667e-6&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e-6&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e-6&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-0.000007&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6.66667e-5&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e-5&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-66.6667e-6&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-0.000067&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6.66667e-4&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e-4&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-666.667e-6&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-0.000667&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6.66667e-3&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e-3&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e-3&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-0.006667&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6.66667e-2&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e-2&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-66.6667e-3&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-0.066667&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-0.666667&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e-1&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-666.667e-3&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-0.666667&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6.66667&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.666667&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-66.6667&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e+1&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-66.6667&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-66.666667&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-666.667&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e+2&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-666.667&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-666.666667&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6666.67&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e+3&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e+3&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6666.666667&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-66666.7&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e+4&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-66.6667e+3&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-66666.666667&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-666667&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e+5&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-666.667e+3&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-666666.666667&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6.66667e+6&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e+6&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e+6&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6666666.666667&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6.66667e+7&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e+7&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-66.6667e+6&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-66666666.666667&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6.66667e+8&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e+8&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-666.667e+6&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-666666666.666667&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6.66667e+9&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e+9&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e+9&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6666666666.666667&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6.66667e+10&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e+10&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-66.6667e+9&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-66666666666.666667&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6.66667e+11&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e+11&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-666.667e+9&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-666666666666.666667&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;-6.66667e+12&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e+12&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6.66667e+12&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;-6666666666666.666667&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;&lt;a name=&quot;RoundingFunctions&quot; id=&quot;RoundingFunctions&quot;&gt;Rounding Functions&lt;/a&gt;&lt;/h3&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Rounding Functions&quot; readability=&quot;14.5&quot;&gt;&lt;tr&gt;&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Definition&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;floor[x]&lt;/td&gt;
&lt;td&gt;Returns largest integer &amp;lt;= x&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;floor[x,y]&lt;/td&gt;
&lt;td&gt;Rounds x down to the nearest multiple of y. For example, &lt;code&gt;floor[3.14159, 0.001]&lt;/code&gt; returns &lt;code&gt;3.141&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;ceil[x]&lt;/td&gt;
&lt;td&gt;Returns smallest integer &amp;gt;= x&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;ceil[x,y]&lt;/td&gt;
&lt;td&gt;Rounds x up to the nearest multiple of y. For example, &lt;code&gt;ceil[3.14159, 0.01]&lt;/code&gt; returns &lt;code&gt;3.15&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;round[x]&lt;/td&gt;
&lt;td&gt;Rounds to nearest integer&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;round[x, y]&lt;/td&gt;
&lt;td&gt;Rounds &lt;code&gt;x&lt;/code&gt; to nearest multiple of &lt;code&gt;y&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;int[x]&lt;/td&gt;
&lt;td&gt;Truncates decimal places to produce integer&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;trunc[x]&lt;/td&gt;
&lt;td&gt;Truncates decimal places to produce integer&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;numerator[x]&lt;/td&gt;
&lt;td&gt;Returns the numerator of a rational, dimensionless number. If the number is not rational and dimensionless, simply returns the number.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;denominator[x]&lt;/td&gt;
&lt;td&gt;Returns the denominator of a rational number. If the number is not rational and dimensionless, simply returns 1.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;&lt;a name=&quot;NumberTheory&quot; id=&quot;NumberTheory&quot;&gt;Number Theory&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some functions for number theory and factorization are available.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you're doing number-theoretical work with very large integers, please see the &lt;a href=&quot;https://frinklang.org/#PerformanceTips&quot;&gt;Performance Tips&lt;/a&gt; section of the documentation for ways to greatly improve integer performance.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Other Functions&quot; readability=&quot;111.92583624787&quot;&gt;&lt;tr&gt;&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;bitLength[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the number of bits in the minimal two's-complement representation of an integer, &lt;em&gt;excluding&lt;/em&gt; a sign bit. In other words, this returns the index of the highest bit that differs from the sign bit.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td class=&quot;lit&quot;&gt;getBit[&lt;em&gt;num&lt;/em&gt;, &lt;em&gt;bit&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns an integer, either 0 or 1, indicating the value of the specified bit in an integer. Bit 0 is the least-significant bit. The number is treated as a two's-complement representation with infinite length. That is, the high bits on a negative number will always be 1, and the high bits on a positive number or zero will always be 0.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;getLowestSetBit[&lt;em&gt;num&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the index of the rightmost (lowest-order) one bit in an integer (the number of zero bits to the right of the rightmost one bit). Returns -1 if the integer contains no one bits.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;shiftLeft[&lt;em&gt;num&lt;/em&gt;, &lt;em&gt;bits&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Shifts the bits of an integer left by the specified number of bits. New bits will contain zero. This is equivalent to multiplying by 2&lt;sup&gt;bits&lt;/sup&gt; but is usually more efficient.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;shiftRight[&lt;em&gt;num&lt;/em&gt;, &lt;em&gt;bits&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Shifts the bits of an integer right by the specified number of bits, losing the bits pushed off the right side. This is equivalent to performing a &lt;code&gt;div&lt;/code&gt; by 2&lt;sup&gt;bits&lt;/sup&gt; but is usually more efficient.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;bitAnd[&lt;em&gt;n&lt;/em&gt;, &lt;em&gt;m&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the bitwise &lt;code&gt;AND&lt;/code&gt; of two integers, treated as two's complement numbers with infinite sign bits.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;bitOr[&lt;em&gt;n&lt;/em&gt;, &lt;em&gt;m&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the bitwise &lt;code&gt;OR&lt;/code&gt; of two integers, treated as two's complement numbers with infinite sign bits.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;bitXor[&lt;em&gt;n&lt;/em&gt;, &lt;em&gt;m&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the bitwise &lt;code&gt;XOR&lt;/code&gt; (exclusive-or) of two integers, treated as two's complement numbers with infinite sign bits.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;10&quot;&gt;&lt;td class=&quot;lit&quot;&gt;bitNot[&lt;em&gt;n&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the bitwise &lt;code&gt;NOT&lt;/code&gt; of an integer, treated as a two's complement number with infinite sign bits. This means that performing a &lt;code&gt;bitNot&lt;/code&gt; on a positive number will return a negative number, and vice-versa. This may be unexpected if you're unfamiliar with two's complement notation, but functions like &lt;code&gt;getBit[&lt;em&gt;num&lt;/em&gt;, &lt;em&gt;bit&lt;/em&gt;]&lt;/code&gt; and &lt;code&gt;bitLength[&lt;em&gt;num&lt;/em&gt;]&lt;/code&gt; will do the right thing, and will handle all leading sign bits correctly without you needing to specify the length of your numbers. Please look up two's complement number representation if you're unfamiliar with this.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;bitNand[&lt;em&gt;n&lt;/em&gt;, &lt;em&gt;m&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the bitwise &lt;code&gt;NAND&lt;/code&gt; (an AND followed by a NOT) of two integers, treated as two's complement numbers with infinite sign bits. See notes about &lt;code&gt;bitNot[&lt;em&gt;num&lt;/em&gt;]&lt;/code&gt; above.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;bitNor[&lt;em&gt;n&lt;/em&gt;, &lt;em&gt;m&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the bitwise &lt;code&gt;NOR&lt;/code&gt; (an OR followed by a NOT) of two integers, treated as two's complement numbers with infinite sign bits. See notes about &lt;code&gt;bitNot[&lt;em&gt;num&lt;/em&gt;]&lt;/code&gt; above.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;gcd[&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the greatest common divisor of the integers &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;lcm[&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the least common multiple of the integers &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;37.63870246085&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isPrime[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;29.325539568345&quot;&gt;Returns false if the integer &lt;code&gt;x&lt;/code&gt; is composite, true if the number is prime (or probably prime.) This test uses trial division and then Rabin-Miller strong pseudoprime tests to determine primality. The bases used in the Rabin-Miller test are known to &lt;em&gt;prove&lt;/em&gt; primality for numbers smaller than 3,317,044,064,679,887,385,961,981, (see &lt;a target=&quot;_blank&quot; href=&quot;https://arxiv.org/abs/1509.00864&quot;&gt;Sorenson and Webster&lt;/a&gt;) but for larger numbers this function can erroneously declare a composite number to be prime. (If it returns false, the number is definitely composite.)
&lt;p&gt;If the number is larger than this, the test is performed against all 78 prime bases less than or equal to 400. This gives a &lt;em&gt;very&lt;/em&gt; small probability of about 1 in 10&lt;sup&gt;47&lt;/sup&gt; that the function may return &lt;code&gt;true&lt;/code&gt; for a composite number. (And that's a worst-case; for randomly-chosen large numbers, the probability of error is actually far, far lower for most numbers, especially big ones. The above assumes the ridiculously low estimate that the pseudoprime test fails 1/4 of the time. The reality is orders of magnitude lower. For better estimates, see &lt;a href=&quot;http://primes.utm.edu/notes/prp_prob.html&quot; target=&quot;_blank&quot;&gt;Probable primes: How Probable?&lt;/a&gt; and remember to raise each number given in that table &lt;em&gt;to the 78th power!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It is more likely that any of the following will happen:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Your hardware will fail and return the wrong answer (perhaps due to a cosmic ray hitting it.)&lt;/li&gt;
&lt;li&gt;You'll flip a coin 156 times in a row and it will land on &quot;heads&quot; every time.&lt;/li&gt;
&lt;li&gt;You'll play roulette and your number will get picked 29 times in a row.&lt;/li&gt;
&lt;li&gt;You'll test a trillion numbers every second for the known lifetime of the universe and you'll still only have a miniscule 1 in 10&lt;sup&gt;17&lt;/sup&gt; chance of getting a single wrong answer.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;And these are ridiculously generous estimates. The actual probability of failure is usually astronomically lower than this.&lt;/p&gt;
&lt;p&gt;As of the 2005-11-13 release, &lt;code&gt;isPrime[&lt;em&gt;x&lt;/em&gt;]&lt;/code&gt; was extended to automatically use a faster Lucas-Lehmer test if &lt;em&gt;x&lt;/em&gt; is of the form 2&lt;sup&gt;n&lt;/sup&gt;-1 (&lt;em&gt;i.e.&lt;/em&gt; Mersenne numbers). Note that the Lucas-Lehmer test is sufficient to &lt;em&gt;prove&lt;/em&gt; primality for numbers of this form, regardless of their size.&lt;/p&gt;
&lt;p&gt;Also note that &lt;code&gt;isPrime[1]&lt;/code&gt; will return &lt;code&gt;true&lt;/code&gt;. This simplifies recursive factor-finding algorithms, but I know it may not match the modern definition of primes. This behavior may change, so try not to rely on it.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;13.5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;factor[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;10&quot;&gt;Returns the prime factors of an integer &lt;code&gt;x&lt;/code&gt; as a two-dimensional list. This uses trial division, then the Pollard &lt;em&gt;p-1&lt;/em&gt; method, and then the Pollard Rho method to find factors. The factor list consists of a list of pairs of prime factors and the exponent of each factor:
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;factor[1000]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[[2, 3], [5, 3]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This indicates that the prime factors of 1000 are 2&lt;sup&gt;3&lt;/sup&gt; * 5&lt;sup&gt;3&lt;/sup&gt;.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;16.5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;factorFlat[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;10&quot;&gt;Returns the prime factors of an integer &lt;code&gt;x&lt;/code&gt; as a one-dimensional list. This uses trial division, then the Pollard &lt;em&gt;p-1&lt;/em&gt; method, and then the Pollard Rho method to find factors. The factor list consists of a list of prime factors, each possibly repeated. This performs identically to the &lt;code&gt;factor[&lt;em&gt;x&lt;/em&gt;]&lt;/code&gt; function above; the output format is just different.
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;factorFlat[1000]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[2, 2, 2, 5, 5, 5]&lt;/code&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;15&quot;&gt;&lt;td class=&quot;lit&quot;&gt;allFactors[&lt;em&gt;n&lt;/em&gt;, &lt;em&gt;include1=true&lt;/em&gt;, &lt;em&gt;includeN=true&lt;/em&gt;, &lt;em&gt;sort=true&lt;/em&gt;, &lt;em&gt;onlyToSqrt=false&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns &lt;em&gt;all&lt;/em&gt; factors of the integer &lt;code&gt;n&lt;/code&gt;, &lt;em&gt;not just prime factors&lt;/em&gt;. The optional arguments &lt;code&gt;include1&lt;/code&gt; and &lt;code&gt;includeN&lt;/code&gt; indicate if the numbers 1 and n are to be included in the results. If the optional argument &lt;code&gt;sort&lt;/code&gt; is true, the results will be sorted. If the optional argument &lt;code&gt;onlyToSqrt&lt;/code&gt;=true, then only the factors less than or equal to the square root of the number will be produced. It currently returns an array, but that may change to an enumerating expression someday to be more memory-efficient for numbers with huge amounts of factors.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;JacobiSymbol[&lt;em&gt;a,n&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the Jacobi symbol (often written as (a/n) ) of the integers &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt;. &lt;code&gt;n&lt;/code&gt; must be a positive, odd integer. This function is used in factorization and primality testing. The Jacobi symbol is a generalization of the Legendre symbol, so it can be used to calculate the Legendre symbol of two numbers. (The Legendre symbol is only defined if &lt;code&gt;n&lt;/code&gt; is prime.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14.322289156627&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isStrongPseudoprime[&lt;em&gt;num&lt;/em&gt;, &lt;em&gt;base&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;8.5734597156398&quot;&gt;Returns true if &lt;code&gt;num&lt;/code&gt; is a strong pseudoprime to base &lt;code&gt;base&lt;/code&gt;. If this returns false, the number is definitely composite. If it returns true, the number &lt;em&gt;may&lt;/em&gt; be prime. This does &lt;em&gt;not&lt;/em&gt; prove that a number is actually prime, as numbers can fail this test for up to 1/4 of bases. This can be used as a component of a prime sieving algorithm.
&lt;p&gt;While the above paragraph correctly states that this test can fail for &lt;em&gt;up to&lt;/em&gt; 1/4 of bases, the actual failure rate for larger numbers is many orders of magnitude smaller than that! See &lt;a href=&quot;http://primes.utm.edu/notes/prp_prob.html&quot; target=&quot;_blank&quot;&gt;Probable primes: How Probable?&lt;/a&gt; (link opens in new window) for an estimate of how much lower the failure rate becomes.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;&lt;code&gt;nextPrime[&lt;em&gt;n&lt;/em&gt;]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns the next prime number &lt;em&gt;greater than&lt;/em&gt; &lt;code&gt;n&lt;/code&gt;. The value of &lt;code&gt;n&lt;/code&gt; may be any real number. This method uses a wheel factoring method to completely avoid testing composite numbers with small factors.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;&lt;code&gt;previousPrime[&lt;em&gt;n&lt;/em&gt;]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns the previous prime number &lt;em&gt;smaller than&lt;/em&gt; &lt;code&gt;n&lt;/code&gt;. The value of &lt;code&gt;n&lt;/code&gt; may be any real number. If &lt;code&gt;n&lt;/code&gt; n is smaller than 2, this returns &lt;code&gt;undef&lt;/code&gt;. This method uses a wheel factoring method to completely avoid testing composite numbers with small factors.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;&lt;code&gt;partitionCount[&lt;em&gt;n&lt;/em&gt;]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns the number of ways that the integer n can be partitioned. This uses Euler's pentagonal number algorithm to find the partition count somewhat efficiently, and caches the results so subsequent calls to this function will be efficient.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14.5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;&lt;code&gt;partitions[&lt;em&gt;n&lt;/em&gt;]&lt;/code&gt;&lt;/td&gt;
&lt;td readability=&quot;12&quot;&gt;Returns an enumeration of the partitions of the integer n. For example:
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for a = partitions[4]&lt;br /&gt;   println[a]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[4]&lt;br /&gt;[3, 1]&lt;br /&gt;[2, 2]&lt;br /&gt;[2, 1, 1]&lt;br /&gt;[1, 1, 1, 1]&lt;/code&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;29&quot;&gt;&lt;td class=&quot;lit&quot;&gt;&lt;code&gt;partitionsCompact[&lt;em&gt;n&lt;/em&gt;, &lt;em&gt;countPermutations=false&lt;/em&gt;]&lt;/code&gt;&lt;/td&gt;
&lt;td readability=&quot;19&quot;&gt;Like the &lt;code&gt;partitions&lt;/code&gt; function above, but returns a more compact enumeration of the partitions of the integer n. Each list contains [num, count] pairs indicating the number and its count in a partition. For example, compare the following representation with the one from the &lt;code&gt;partitions&lt;/code&gt; function above.
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for a = partitionsCompact[4]&lt;br /&gt;   println[a]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[[4, 1]]&lt;br /&gt;[[3, 1], [1, 1]]&lt;br /&gt;[[2, 2]]&lt;br /&gt;[[2, 1], [1, 2]]&lt;br /&gt;[[1, 4]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the optional argument &lt;code&gt;countPermutation&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, then each element also contains the number of possible permutations of the list.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td class=&quot;lit&quot;&gt;&lt;code&gt;binomial[&lt;em&gt;m,n&lt;/em&gt;]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns the binomial coefficient. This is of the number of ways &lt;code&gt;m&lt;/code&gt; things can be chosen &lt;code&gt;n&lt;/code&gt; at a time, with order being unimportant. This is sometimes called &quot;m choose n&quot; or &quot;m C n&quot;. This is equivalent to m!/(n!*(m-n)!) although calculating that way often leads to way-too-big numbers. For example, &lt;code&gt;binomial[10000, 9998]&lt;/code&gt; is equal to 49995000, but if you calculated it naively, you'd have to calculate 10000! which is a 35660-digit number, and divide it by another huge number, which could be inefficient and slow.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;&lt;code&gt;eulerPhi[&lt;em&gt;n&lt;/em&gt;]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns Euler's Totient (also known as the phi function or Euler's Phi) of the given integer. This is the number of positive integers less than n that share no factors with n.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8.5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;&lt;code&gt;factorial[&lt;em&gt;n&lt;/em&gt;]&lt;/code&gt;&lt;/td&gt;
&lt;td readability=&quot;8&quot;&gt;Returns the factorial of the specified non-negative integer. This is the same as the factorial operator &lt;code&gt;!&lt;/code&gt;.
&lt;p&gt;&lt;em&gt;Reminder:&lt;/em&gt; the factorial of a non-negative integer &lt;code&gt;n&lt;/code&gt; is the product of all the numbers from 1 to &lt;code&gt;n&lt;/code&gt;. For example, the factorial &lt;code&gt;6!&lt;/code&gt; is equal to &lt;code&gt;1 * 2 * 3 * 4 * 5 * 6&lt;/code&gt; , or &lt;code&gt;720&lt;/code&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5.3684210526316&quot;&gt;&lt;td class=&quot;lit&quot;&gt;&lt;code&gt;factorialRatio[&lt;em&gt;m&lt;/em&gt;, &lt;em&gt;n&lt;/em&gt;]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Efficiently calculates the ratio of two factorials &lt;code&gt;m! / n!&lt;/code&gt;, using a &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=BinarySplittingFactorial.frink&quot;&gt;binary splitting algorithm&lt;/a&gt;. This is used internally in functions like &lt;code&gt;binomial[&lt;em&gt;m&lt;/em&gt;, &lt;em&gt;n&lt;/em&gt;]&lt;/code&gt;. Using this function is &lt;em&gt;much&lt;/em&gt; faster than calculating the result naïvely.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;24.5&quot;&gt;&lt;td class=&quot;lit&quot; readability=&quot;7&quot;&gt;&lt;code&gt;DFT[&lt;em&gt;array, divFactor=-1, direction = 1&lt;/em&gt;]&lt;/code&gt;
&lt;p&gt;&lt;code&gt;InverseDFT[&lt;em&gt;array, divFactor=-1, direction = 1&lt;/em&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;20&quot;&gt;Performs a Discrete Fourier Transform of the given array. The array may be 1- or 2-dimensional.
&lt;p&gt;Since different fields of mathematics and engineering use different conventions for the Fourier transform, these functions allow you to (optionally) specify the scaling factor and sign convention.&lt;/p&gt;
&lt;p&gt;The (optional) second argument &lt;code&gt;divFactor&lt;/code&gt; sets the scaling factor for the results:&lt;/p&gt;
&lt;table border=&quot;1&quot; summary=&quot;DFT divFactor Options&quot;&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;
&lt;th&gt;FFT&lt;/th&gt;
&lt;th&gt;InverseDFT&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;divFactor = -1 &lt;em&gt;(default)&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;1/n&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;divFactor = 0&lt;/td&gt;
&lt;td&gt;1/sqrt[n]&lt;/td&gt;
&lt;td&gt;1/sqrt[n]&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;divFactor = 1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1/n&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The (optional) third argument &lt;code&gt;direction&lt;/code&gt; sets the sign used in the exponent.&lt;/p&gt;
&lt;table border=&quot;1&quot; summary=&quot;DFT direction Options&quot;&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;
&lt;th&gt;FFT&lt;/th&gt;
&lt;th&gt;InverseDFT&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;direction = 1 &lt;em&gt;(default)&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;e&lt;sup&gt;2 pi i j k / n&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;e&lt;sup&gt;-2 pi i j k / n&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;direction = -1&lt;/td&gt;
&lt;td&gt;e&lt;sup&gt;-2 pi i j k / n&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;e&lt;sup&gt;2 pi i j k / n&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The &lt;code&gt;InverseDFT&lt;/code&gt; function produces the inverse of the DFT given by the DFT function. In fact, it just calls the DFT function with appropriately-reversed parameters.&lt;/p&gt;
&lt;p&gt;If you specified the optional second or third arguments for the DFT function, you will need to pass in the &lt;em&gt;same&lt;/em&gt; arguments to the InverseDFT function to get the inverse operation. This function takes care of reversing them appropriately.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Other number-theoretical functions, such as those for calculating the values of the &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=RiemannZeta.frink&quot;&gt;Riemann Zeta&lt;/a&gt; function may be available in the &lt;a href=&quot;https://frinklang.org/fsp/samples.fsp&quot;&gt;Sample Programs&lt;/a&gt; library.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;OtherFunctions&quot; id=&quot;OtherFunctions&quot;&gt;Other Functions&lt;/a&gt;&lt;/h3&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Other Functions&quot; readability=&quot;142.77773391236&quot;&gt;&lt;tr&gt;&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Definition&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td class=&quot;lit&quot;&gt;array[x]&lt;br /&gt;toArray[x]&lt;/td&gt;
&lt;td&gt;Turns the specified expression into an array. This works with enumerating expressions, sets, dictionaries, objects created from a &lt;code&gt;class&lt;/code&gt;, or simple expressions (making a single-item array out of the latter.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td class=&quot;lit&quot;&gt;flatten[array]&lt;/td&gt;
&lt;td&gt;Flattens a possibly multi-dimensional array into a 1-dimensional array. For example, flattening the array &lt;code&gt;[1,[2,[3,4]],5]&lt;/code&gt; results in &lt;code&gt;[1,2,3,4,5]&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2.489010989011&quot;&gt;&lt;td class=&quot;lit&quot;&gt;toString[x]&lt;/td&gt;
&lt;td&gt;Turns the specified expression into a string. The string representation is exactly the same as it would be from printing the expression or &lt;a href=&quot;https://frinklang.org/#StringInterpolation&quot;&gt;interpolating it into a string.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14&quot;&gt;&lt;td class=&quot;lit&quot;&gt;deepCopy[x]&lt;/td&gt;
&lt;td&gt;Perform a recursive deep copy of all the parts of a container class. The function can be called with any expression type. The function currently deep copies everything contained in arrays, dictionaries, sets, OrderedLists, RingBufffers, and objects created from a &lt;code&gt;class&lt;/code&gt; specification, and everything contained within them. It is thus useful for copying nested data structures, multi-dimensional arrays (which are arrays of arrays, etc.) and prevents modification of the original or the copy from changing the other. It does &lt;em&gt;not&lt;/em&gt; currently deep copy Java objects, nor Java arrays.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;inv[x]&lt;/td&gt;
&lt;td&gt;Reciprocal 1/x&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;recip[x]&lt;/td&gt;
&lt;td&gt;Reciprocal 1/x&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;sqrt[x]&lt;/td&gt;
&lt;td&gt;Square root&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;log[x]&lt;/td&gt;
&lt;td&gt;Common logarithm, base 10&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;ln[x]&lt;/td&gt;
&lt;td&gt;Natural logarithm, base &lt;em&gt;e&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;exp[x]&lt;/td&gt;
&lt;td&gt;&lt;em&gt;e&lt;sup&gt;x&lt;/sup&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;Re[x]&lt;/td&gt;
&lt;td&gt;The real part of x. Note that the result will have the same dimensions as the argument.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;Im[x]&lt;/td&gt;
&lt;td&gt;The imaginary part of x as a real number. Note that the result will have the same dimensions as the argument.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;sinh[x]&lt;/td&gt;
&lt;td&gt;Hyperbolic sine of x, or (e&lt;sup&gt;x&lt;/sup&gt; - e&lt;sup&gt;-x&lt;/sup&gt;)/2&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;csch[x]&lt;/td&gt;
&lt;td&gt;Hyperbolic cosecant of x, or 1/sinh[x], or 2/(e&lt;sup&gt;x&lt;/sup&gt; - e&lt;sup&gt;-x&lt;/sup&gt;)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;cosh[x]&lt;/td&gt;
&lt;td&gt;Hyperbolic cosine of x, or 1/sech[x], or (e&lt;sup&gt;x&lt;/sup&gt; + e&lt;sup&gt;-x&lt;/sup&gt;)/2&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;sech[x]&lt;/td&gt;
&lt;td&gt;Hyperbolic secant of x, or 1/cosh[x], or 2/(e&lt;sup&gt;x&lt;/sup&gt; + e&lt;sup&gt;-x&lt;/sup&gt;)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;tanh[x]&lt;/td&gt;
&lt;td&gt;Hyperbolic tangent of x, or &lt;code&gt;sinh[x]/cosh[x]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;coth[x]&lt;/td&gt;
&lt;td&gt;Hyperbolic cotangent of x, or (e&lt;sup&gt;2z&lt;/sup&gt; + 1) / (e&lt;sup&gt;2z&lt;/sup&gt; - 1)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;arcsinh[x], asinh[x]&lt;/td&gt;
&lt;td&gt;Inverse hyperbolic sine of x, or ln[x + sqrt[1 + x^2]]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;arccosh[x], acosh[x]&lt;/td&gt;
&lt;td&gt;Inverse hyperbolic cosine of x, or ln[x + sqrt[x-1] sqrt[x+1]]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;arcsech[x], asech[x]&lt;/td&gt;
&lt;td&gt;Inverse hyperbolic secant of x, or ln[sqrt[1/x - 1]*sqrt[1 + 1/x] + 1/x]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;arccsch[x], acsch[x]&lt;/td&gt;
&lt;td&gt;Inverse hyperbolic cosecant of x, or ln[sqrt[1 + 1/x^2] + 1/x]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;arctanh[x], atanh[x]&lt;/td&gt;
&lt;td&gt;Inverse hyperbolic tangent of x, or 1/2 (ln[1+x] - ln[1-x])&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;arccoth[x], acoth[x]&lt;/td&gt;
&lt;td&gt;Inverse hyperbolic cotangent of x, or 1/2 ( ln[1 + 1/x] - ln[1 - 1/x] )&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;abs[x]&lt;/td&gt;
&lt;td&gt;Absolute value. For complex arguments, returns complex number &lt;code&gt;abs[x + iy] = sqrt[x^2 + y^2]&lt;/code&gt;. For interval arguments, returns an interval (which may contain zero if the interval contains zero.) Note that the result will also have the same dimensions as the argument!&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;10&quot;&gt;&lt;td class=&quot;lit&quot;&gt;signum[x]&lt;/td&gt;
&lt;td&gt;Returns the sign of the argument. For real-valued arguments, this returns (-1 if x&amp;lt;0), (0 if x==0), (1 if x&amp;gt;0). For complex arguments, returns &lt;code&gt;x/abs[x]&lt;/code&gt;. For intervals, returns an interval containing the signum of each endpoint (which may be collapsed to a single value if both endpoints have the same sign.) Note that the result will also have the same dimensions as the argument!&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td class=&quot;lit&quot;&gt;realSignum[x]&lt;/td&gt;
&lt;td&gt;This is a more limited function that returns the sign of a real number, ignoring units of measure if they are present. For real-valued arguments, this returns (-1 if x&amp;lt;0), (0 if x==0), (1 if x&amp;gt;0). For all other arguments, this returns &lt;code&gt;undef&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;random[x]&lt;/td&gt;
&lt;td&gt;Pick a random integer between 0 (inclusive) and &lt;code&gt;x&lt;/code&gt; (exclusive.) If &lt;code&gt;x&lt;/code&gt; is an array, this returns a random item from the array.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5.2040816326531&quot;&gt;&lt;td class=&quot;lit&quot;&gt;random[min, max]&lt;/td&gt;
&lt;td readability=&quot;5.9832402234637&quot;&gt;Pick a random integer between min (inclusive) and max (inclusive.)
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To pick items from a discrete probability distribution, see the &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=DiscreteDistribution.frink&quot;&gt;DiscreteDistribution.frink&lt;/a&gt; sample program.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;randomFloat[&lt;em&gt;lower&lt;/em&gt;, &lt;em&gt;upper&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Pick a uniformly-distributed random floating-point value in the specifed range.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;randomGaussian[&lt;em&gt;mean&lt;/em&gt;, &lt;em&gt;sd&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Pick a normally-distributed (i.e. &quot;bell curve&quot;) random floating-point value with the specified mean and standard deviation.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;randomBits[&lt;em&gt;numBits&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Generate a random positive integer containing &lt;em&gt;numBits&lt;/em&gt; evenly-distributed binary bits.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;randomBytes[&lt;em&gt;numBytes&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Generate an array of random bytes containing &lt;em&gt;numBytes&lt;/em&gt; elements as a Java array of byte.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;randomSeed[&lt;em&gt;seed&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;To obtain repeatable results with a program that generates random numbers, sometimes it is desirable to use the same random sequence. This function seeds the random number generator with a known value. The seed must a number from -2&lt;sup&gt;63&lt;/sup&gt; to 2&lt;sup&gt;63&lt;/sup&gt;-1 (both inclusive.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;bitLength[&lt;em&gt;int&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the number of bits in the minimal two's-complement representation of an integer, &lt;em&gt;excluding&lt;/em&gt; a sign bit.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;modPow[&lt;em&gt;base&lt;/em&gt;,&lt;em&gt;exponent&lt;/em&gt;, &lt;em&gt;modulus&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Perform the integer modular exponentiation (&lt;em&gt;base&lt;sup&gt;exponent&lt;/sup&gt; &lt;/em&gt;mod &lt;em&gt;modulus&lt;/em&gt;) in an efficient manner.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;modDiv[&lt;em&gt;n&lt;/em&gt;,&lt;em&gt;m&lt;/em&gt;,&lt;em&gt;modulus&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Performs the integer modular division &lt;em&gt;n/m &lt;/em&gt;mod &lt;em&gt;modulus&lt;/em&gt; and returns the integer result if one exists, otherwise returns &lt;code&gt;undef&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;modInverse[&lt;em&gt;n&lt;/em&gt;,&lt;em&gt;modulus&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Finds the integer modular inverse of &lt;em&gt;n&lt;/em&gt; to the base &lt;em&gt;modulus&lt;/em&gt; and returns the integer result if it is invertible, otherwise returns &lt;code&gt;undef&lt;/code&gt;. In other words, &lt;code&gt;modInverse[&lt;em&gt;n&lt;/em&gt;,&lt;em&gt;m&lt;/em&gt;]&lt;/code&gt; returns an integer &lt;code&gt;x&lt;/code&gt; such that &lt;code&gt;(x * n) mod m == 1&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;min[&lt;em&gt;arg1&lt;/em&gt;, &lt;em&gt;arg2&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the smaller of the two arguments, or the first argument if they're equal.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;min[&lt;em&gt;array&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the smallest item in the array.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;max[&lt;em&gt;arg1&lt;/em&gt;, &lt;em&gt;arg2&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the larger of the two arguments, or the first argument if they're equal.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;max[&lt;em&gt;array&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the largest item in the array.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;11&quot;&gt;&lt;td class=&quot;lit&quot;&gt;intersection[&lt;em&gt;arg1&lt;/em&gt;, &lt;em&gt;arg2&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the intersection of two intervals, or an interval and a real number. (Or two real numbers, but that rarely makes sense.) The return type in this case will be an interval or an ordinary real number. If there is no intersection between the arguments, the function will currently return &lt;code&gt;undef&lt;/code&gt; although this behavior may change to return an empty interval in the future. This function also works with dates and date intervals.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;union[&lt;em&gt;arg1&lt;/em&gt;, &lt;em&gt;arg2&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the union of two intervals, or an interval and a real number. (Or two real numbers, in which case an interval containing both real numbers is returned.) The return type will be an interval or an ordinary real number if the two numbers are the same real number. This function also works with dates and date intervals.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isInteger[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns true if the argument is a dimensionless integer, false otherwise.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isRational[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns true if the argument is a dimensionless rational number (and &lt;em&gt;not&lt;/em&gt; an integer,) false otherwise.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isComplex[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns true if the argument is a complex number (with or without dimensions,) false otherwise.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isInterval[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns true if the argument is an interval (with or without dimensions,) false otherwise.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isNegative[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns true if the argument is a dimensionless negative number, false otherwise.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isPositive[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns true if the argument is a dimensionless positive number, false otherwise.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isUnit[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns true if the number is a unit of any type, including dimensionless numbers.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isArray[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns true if the expression is an array, false otherwise.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isDict[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns true if the expression is a dictionary, false otherwise.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isSet[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns true if the expression is a set, false otherwise.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isDate[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns true if the expression is a date/time, false otherwise.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;isString[&lt;em&gt;expr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns true if the expression is a string, false otherwise.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;&lt;code&gt;sum[&lt;em&gt;x&lt;/em&gt;]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns the sum of the elements of &lt;code&gt;x&lt;/code&gt;, which can currently be an array or an enumerating expression. If &lt;code&gt;x&lt;/code&gt; is of any other type, this simply returns &lt;code&gt;x&lt;/code&gt;. If the list is empty, this returns &lt;code&gt;undef&lt;/code&gt;. (There is no universal identity element for addition when units of measure may be present.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;&lt;code&gt;sum[&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;emptyValue&lt;/em&gt;]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns the sum of the elements of &lt;code&gt;x&lt;/code&gt;, which can currently be an array or an enumerating expression. If &lt;code&gt;x&lt;/code&gt; is of any other type, this simply returns &lt;code&gt;x&lt;/code&gt;. If the list is empty, this returns &lt;code&gt;emptyValue&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;&lt;code&gt;product[&lt;em&gt;x&lt;/em&gt;]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns the product of the elements of &lt;code&gt;x&lt;/code&gt;, which can currently be an array or an enumerating expression. If &lt;code&gt;x&lt;/code&gt; is of any other type, this simply returns &lt;code&gt;x&lt;/code&gt;. If the list is empty, returns 1.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;&lt;code&gt;product[&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;emptyValue&lt;/em&gt;]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns the product of the elements of &lt;code&gt;x&lt;/code&gt;, which can currently be an array or an enumerating expression. If &lt;code&gt;x&lt;/code&gt; is of any other type, this simply returns &lt;code&gt;x&lt;/code&gt;. If the list is empty, returns &lt;code&gt;emptyValue&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;sleep[&lt;em&gt;time&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Sleeps for the specified amount of time. The argument &lt;code&gt;&lt;em&gt;time&lt;/em&gt;&lt;/code&gt; must have units of time, such as &lt;code&gt;1 s&lt;/code&gt; or &lt;code&gt;4.9 minutes&lt;/code&gt; or &lt;code&gt;1/30 s&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;binaryToGray[&lt;em&gt;num&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Converts the specified number into its corresponding value in binary reflected Gray code. Example usage: &lt;code&gt;binaryToGray[0b1111] -&amp;gt; binary&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;grayToBinary[&lt;em&gt;num&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Converts a number from its value in binary reflected Gray code to its equivalent numeric value.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;browse[&lt;em&gt;url&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Launches the specified URL in the browser (or however your computer is set up to launch URLs.) This requires that your Java Virtual Machine and your operating system are configured correctly.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;integerDigits[&lt;em&gt;num&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns an array of the digits of the non-negative integer &lt;code&gt;num&lt;/code&gt; in base 10.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;integerDigits[&lt;em&gt;num&lt;/em&gt;, &lt;em&gt;base&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns an array of the digits of the non-negative integer &lt;code&gt;num&lt;/code&gt; in the specified base.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;36.56652360515&quot;&gt;&lt;td class=&quot;lit&quot;&gt;getExponent[&lt;em&gt;unit&lt;/em&gt;, &lt;em&gt;baseUnit&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;29.234828496042&quot;&gt;Returns the exponent for the specified base unit. The base unit can be specified as a string indicating the name of a base unit (e.g. &lt;code&gt;&quot;m&quot;&lt;/code&gt; for meters), a unit of measure, e.g. (&lt;code&gt;m&lt;/code&gt;), or a string indicating the name of a base dimension (e.g. &lt;code&gt;&quot;length&quot;&lt;/code&gt; or &lt;code&gt;&quot;mass&quot;&lt;/code&gt; or &lt;code&gt;&quot;time&quot;&lt;/code&gt;. See the &lt;a href=&quot;https://frinklang.org/#HowFrinkIsDifferent&quot;&gt;default base dimension names.&lt;/a&gt;)
&lt;p&gt;For example, to get the exponent corresponding to length (default unit is meters) all of the following are equivalent:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;getExponent[3 m/s^2, &quot;length&quot;]&lt;br /&gt;getExponent[3 m/s^2, &quot;m&quot;]&lt;br /&gt;getExponent[3 m/s^2, &quot;meters&quot;]&lt;br /&gt;getExponent[3 m/s^2, &quot;feet&quot;]&lt;br /&gt;getExponent[3 m/s^2, m]&lt;br /&gt;getExponent[3 m/s^2, 123.4 m]&lt;br /&gt;getExponent[3 m/s^2, 3 feet]&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;All of the above return the integer &lt;code&gt;1&lt;/code&gt;, which is the exponent for length in the provided expression. Asking for &lt;code&gt;&quot;time&quot;&lt;/code&gt; or &lt;code&gt;&quot;s&quot;&lt;/code&gt; or &lt;code&gt;s&lt;/code&gt; would return &lt;code&gt;-2&lt;/code&gt;, the exponent for the time dimension. Also note that exponents may be rational numbers or zero.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; You will very likely never need this function. If you're using it, you may be doing something sketchy and unwise and physically unrealistic, or attempting to subvert unit-checking, or missing better input/output routines. Stop and reconsider your life choices.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Frink can perform Fourier transforms on 1- or 2- dimensional arrays, or on images (by calling their &lt;code&gt;toComplexArray[]&lt;/code&gt; method.) The functions are:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Fourier Transform Functions&quot; readability=&quot;7&quot;&gt;&lt;tr&gt;&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;24.5&quot;&gt;&lt;td class=&quot;lit&quot; readability=&quot;7&quot;&gt;&lt;code&gt;DFT[&lt;em&gt;array, divFactor=-1, direction = 1&lt;/em&gt;]&lt;/code&gt;
&lt;p&gt;&lt;code&gt;InverseDFT[&lt;em&gt;array, divFactor=-1, direction = 1&lt;/em&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;20&quot;&gt;Performs a Discrete Fourier Transform of the given array. The array may be 1- or 2-dimensional.
&lt;p&gt;Since different fields of mathematics and engineering use different conventions for the Fourier transform, these functions allow you to (optionally) specify the scaling factor and sign convention.&lt;/p&gt;
&lt;p&gt;The (optional) second argument divFactor sets the scaling factor for the results:&lt;/p&gt;
&lt;table border=&quot;1&quot; summary=&quot;DFT divFactor Options&quot;&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;
&lt;th&gt;FFT&lt;/th&gt;
&lt;th&gt;InverseDFT&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;divFactor = -1 &lt;em&gt;(default)&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;1/n&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;divFactor = 0&lt;/td&gt;
&lt;td&gt;1/sqrt[n]&lt;/td&gt;
&lt;td&gt;1/sqrt[n]&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;divFactor = 1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1/n&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The (optional) third argument direction sets the sign used in the exponent.&lt;/p&gt;
&lt;table border=&quot;1&quot; summary=&quot;DFT direction Options&quot;&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;
&lt;th&gt;FFT&lt;/th&gt;
&lt;th&gt;InverseDFT&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;direction = 1 &lt;em&gt;(default)&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;e&lt;sup&gt;2 pi i j k / n&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;e&lt;sup&gt;-2 pi i j k / n&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;direction = -1&lt;/td&gt;
&lt;td&gt;e&lt;sup&gt;-2 pi i j k / n&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;e&lt;sup&gt;2 pi i j k / n&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The &lt;code&gt;InverseDFT&lt;/code&gt; function produces the inverse of the DFT given by the DFT function. In fact, it just calls the DFT function with appropriately-reversed parameters.&lt;/p&gt;
&lt;p&gt;If you specified the optional second or third arguments for the DFT function, you will need to pass in the &lt;em&gt;same&lt;/em&gt; arguments to the InverseDFT function to get the inverse operation. This function takes care of reversing them appropriately.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The &lt;code&gt;messageDigest[...]&lt;/code&gt; functions can calculate a variety of cryptographic hashes of various strings. The parameters for all are of the form:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;messageDigest[&lt;em&gt;input&lt;/em&gt;,&lt;em&gt;algorithm&lt;/em&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Each function can take as input either a string or an array of Java bytes. The &lt;code&gt;algorithm&lt;/code&gt; parameter is a string containing one of any hashing algorithms your Java platform supports, which probably includes: &lt;code&gt;&quot;MD2&quot;, &quot;MD5&quot;, &quot;SHA&quot;, &quot;SHA-256&quot;, &quot;SHA-384&quot;, &quot;SHA-512&quot;&lt;/code&gt;. You can see the &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=cryptoProviders.frink&quot;&gt;cryptoProviders.frink&lt;/a&gt; sample program to see how to dump all message digest types available on your virtual machine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As of the 2016-09-29 release, the behavior of the &lt;code&gt;messageDigest&lt;/code&gt; functions may have changed. Previously, to turn the characters of a Unicode string into bytes, the function used your platform's default character encoding. Now the functions always convert the bytes to UTF-8 before creating the digest. (Your default was likely to have been UTF-8 already.) Using the default encoding made programs non-repeatable from one machine to another. If you want to force a certain encoding of Unicode strings into bytes, use the &lt;a href=&quot;https://frinklang.org/#OtherStringFunctions&quot;&gt;&lt;code&gt;stringToBytes[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;encoding&lt;/em&gt;]&lt;/code&gt;&lt;/a&gt; function before calling these functions.&lt;/p&gt;
&lt;p&gt;The following calculates the MD5 hash of the string &lt;code&gt;&quot;abc&quot;&lt;/code&gt; and returns it as a hexadecimal string:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;messageDigest[&quot;abc&quot;, &quot;MD5&quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;900150983cd24fb0d6963f7d28e17f72&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;messageDigestInt&lt;/code&gt; function returns the value as an integer, which can then be displayed in various bases, have its individual bits tested, etc.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;messageDigestInt[&quot;abc&quot;,&quot;MD5&quot;] -&amp;gt; octal&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;2200025023017151117541532261767645070277562&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;messageDigestBytes&lt;/code&gt; function returns the value as an array of Java bytes. &lt;strong&gt;Note:&lt;/strong&gt; Most of the underlying cryptography routines in Java work with arrays of bytes, as these are safer than Strings which are immutable after construction and are eventually garbage-collected. Using arrays of bytes means that you can zero-out input buffers as soon as you're done with them.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;messageDigestBytes[&quot;abc&quot;, &quot;SHA-1&quot;]&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Integer values can be converted to and from other bases (from 2 to 36 inclusive) in several ways. The following functions can be used to convert to or from other arbitrary bases.&lt;/p&gt;
&lt;table border=&quot;1&quot; summary=&quot;General Base Conversion Functions&quot; readability=&quot;10.5&quot;&gt;&lt;tr&gt;&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;base[x, b]&lt;/td&gt;
&lt;td&gt;Returns a string representing the integer &lt;code&gt;x&lt;/code&gt; in base &lt;code&gt;b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;base2[x] ... base36[x]&lt;/td&gt;
&lt;td&gt;Returns a string representing the integer &lt;code&gt;x&lt;/code&gt; in the specified base.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;base64[x]&lt;/td&gt;
&lt;td&gt;Converts between integer and base-64 encoded strings. If passed an integer, returns a string representing the integer as a base 64-encoded value. This uses standard base-64 indices in the order A-Za-z0-9+/. If passed a base-64 encoded string, this returns an integer with the corresponding value.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;parseInt[&lt;em&gt;str&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Parses a string, containing digits 0-9 only, to an integer in base 10. This should contain no spaces or other text.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;parseInt[&lt;em&gt;str&lt;/em&gt;, &lt;em&gt;base&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Parses a string, treating it as if it's a number in the specified base. The string should contain no spaces or other text. The base can from 2-36 (inclusive) or 64, in which case it will use standard base64 encoding.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The following named base conversion functions can also be used. In the cases where several names are commonly used, all options are listed. All functions return strings.&lt;/p&gt;
&lt;table border=&quot;1&quot; summary=&quot;Named Base Conversion Functions&quot; readability=&quot;2&quot;&gt;&lt;tr&gt;&lt;th&gt;Base&lt;/th&gt;
&lt;th&gt;Function Name(s)&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;2&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;binary&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;3&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;ternary, trinary&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;4&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;quaternary&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;5&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;quinary&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;6&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;senary, sexenary&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;7&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;septenary&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;8&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;octal, oct, octonary&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;9&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;nonary&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;10&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;decimal, denary&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;11&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;undenary&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;12&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;duodecimal, duodenary&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;13&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;tridecimal&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;14&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;quattuordecimal&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;15&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;quindecimal&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;16&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;hexadecimal, sexadecimal, hex&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;17&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;septendecimal&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;18&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;octodecimal&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;19&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;nonadecimal&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;20&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;vigesimal&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The conversions can be performed by calling the named function, or by using the conversion operator ( &lt;code&gt;-&amp;gt;&lt;/code&gt; ). The following are all equivalent, and all convert the number specified by the variable &lt;code class=&quot;input&quot;&gt;number&lt;/code&gt; to a string in base 8.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;base[number, 8]&lt;br /&gt;base8[number]&lt;br /&gt;number -&amp;gt; base8&lt;br /&gt;octal[number]&lt;br /&gt;number -&amp;gt; octal&lt;br /&gt;oct[number]&lt;br /&gt;number -&amp;gt; oct&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Use whichever is most convenient for you. (Note: the function version will be slighly faster.)&lt;/p&gt;
&lt;p&gt;As noted above in the &lt;a href=&quot;https://frinklang.org/#DataLibraries&quot;&gt;Data Libraries&lt;/a&gt; section, you may &lt;em&gt;input&lt;/em&gt; numbers in a specified base by following the number with two backslashes and the specified base:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code class=&quot;input&quot;&gt;100001000101111111101101\\2&lt;/code&gt; (a number in base 2)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;input&quot;&gt;1000_0100_0101_1111_1110_1101\\2&lt;/code&gt; (a number in base 2 with underscores for readability)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;input&quot;&gt;845FED\\16&lt;/code&gt; (a number in base 16... bases from 2 to 36 are allowed)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;input&quot;&gt;845fed\\16&lt;/code&gt; (The same number in base 16... upper or lowercase are allowed.)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;input&quot;&gt;845_fed\\16&lt;/code&gt; (a number in base 16 with underscores for readability)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;input&quot;&gt;0x845fed&lt;/code&gt; (Common hexadecimal notation)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;input&quot;&gt;0x845FED&lt;/code&gt; (Common hexadecimal notation)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;input&quot;&gt;0xFEED_FACE&lt;/code&gt; (Hexadecimal with underscores for readability)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;input&quot;&gt;0b100001000101111111101101&lt;/code&gt; (Common binary notation)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;input&quot;&gt;0b1000_0100_0101_1111_1110_1101&lt;/code&gt; (Binary with underscores for readability)&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a name=&quot;CustomBaseConversions&quot; id=&quot;CustomBaseConversions&quot;&gt;Custom Base Conversions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The above base conversions assume that the characters are taken from an alphabet like the one for base 36: &lt;code&gt;&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;&lt;/code&gt;, which is common and reasonable. For example, hexadecimal uses the first 16 characters of this, &lt;code&gt;&quot;0123456789abcdef&quot;&lt;/code&gt;. However, it's not as clear when you go beyond base 36 what characters should be used. You can declare a custom &quot;alphabet&quot; of any size to be used in base conversions.&lt;/p&gt;
&lt;p&gt;For example, Bitcoin addresses use a base-58 alphabet consisting of the characters:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that this alphabet does not include &lt;code&gt;0&lt;/code&gt; (zero), &lt;code&gt;O&lt;/code&gt; (uppercase o), &lt;code&gt;I&lt;/code&gt; (uppercase i), &lt;code&gt;l&lt;/code&gt; (lowercase L), as those are indistinguishable in some fonts.&lt;/p&gt;
&lt;p&gt;To convert a number to a string using this alphabet, you can use the &lt;code&gt;base[&lt;em&gt;num&lt;/em&gt;, &lt;em&gt;alphabet&lt;/em&gt;]&lt;/code&gt; function where &lt;code&gt;alphabet&lt;/code&gt; is a string which contains the character for the &quot;zero&quot; position first. The radix will be equal to the number of characters in the alphabet string. (In the below example, base 58.) The following turns a numeric value into a Bitcoin address string:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;alphabet = &quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;&lt;br /&gt;number = 0x00010966776006953D5567439E5E39F86A0D273BEED61967F6&lt;br /&gt;base[number, alphabet]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;6UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(Note that this alphabet does not have a zero as the first character (it has a 1,) so if you need to pad it to a certain length, you need to pad with the first character in the alphabet.)&lt;/p&gt;
&lt;p&gt;Conversely, you can parse an integer with a custom alphabet by using the &lt;code&gt;parseInt[&lt;em&gt;str&lt;/em&gt;, &lt;em&gt;alphabet&lt;/em&gt;]&lt;/code&gt; function, which takes the same format for its alphabet string. The example below parses a Bitcoin address.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;alphabet = &quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;&lt;br /&gt;str = &quot;6UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM&quot;&lt;br /&gt;parseInt[str, alphabet]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;25420294593250030202636073700053352635053786165627414518&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(Note that the number obtained above is the decimal equivalent of the Bitcoin address encoded above; it could instead be formatted in hexadecimal or other formats.)&lt;/p&gt;
&lt;p&gt;The strings are allowed to contain any Unicode characters. If you attempt to parse a string that contains characters outside your alphabet, the special value &lt;code&gt;undef&lt;/code&gt; will be returned.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;CustomBaseConversionExamples&quot; id=&quot;CustomBaseConversionExamples&quot;&gt;Custom Base Conversion Examples&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This section demonstrates some custom base conversions.&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;Devanagari&quot; id=&quot;Devanagari&quot;&gt;Devanagari&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Devanagari digits are used in Hindi and Sanskrit, and occur in the Unicode standard from &lt;code&gt;\u0966&lt;/code&gt; (zero) through &lt;code&gt;\u096f&lt;/code&gt; (nine). To output a Devanagari integer:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;alphabet = char[0x0966 to 0x096f]&lt;br /&gt;base[1234567890, alphabet]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;१२३४५६७८९०&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Conversely, a Devanagari integer can be parsed with:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;alphabet = char[0x0966 to 0x096f]&lt;br /&gt;parseInt[&quot;१२३४५६७८९०&quot;, alphabet]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;1234567890&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;UnicodeSuperscripts&quot; id=&quot;UnicodeSuperscripts&quot;&gt;Unicode Superscripts&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The Unicode standard has a non-contiguous hodgepodge collection of numerals that represent superscript numerals, like 10¹². If you want to typeset a string of numbers as superscripts on a Unicode-aware system, you can do something like this:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;supAlphabet = &quot;\u2070\u00b9\u00b2\u00b3&quot; + char[0x2074 to 0x2079]&lt;br /&gt;&quot;10&quot; + base[23, supAlphabet]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;10²³&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or, conversely, to parse a stream of these superscript numerals as a single number:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;supAlphabet = &quot;\u2070\u00b9\u00b2\u00b3&quot; + char[0x2074 to 0x2079]&lt;br /&gt;parseInt[&quot;²³&quot;, supAlphabet]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;23&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Complaint:&lt;/strong&gt;: Note that almost all fonts make Unicode superscript numbers look different and not line up. Does your font look uniform here? Mine decidedly does not.&lt;/p&gt;
&lt;p&gt;10¹²³⁴⁵⁶⁷⁸⁹⁰&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;UnicodeSubscripts&quot; id=&quot;UnicodeSubscripts&quot;&gt;Unicode Subscripts&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Unicode numerical subscripts are more uniform and contiguous than superscripts, thankfully. They occupy a contiguous range from &lt;code&gt;\u2080&lt;/code&gt; to &lt;code&gt;\u2089&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you want to typeset a string of numbers as subscripts on a Unicode-aware system, you can do something like this:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;subAlphabet = char[0x2080 to 0x2089]&lt;br /&gt;&quot;1000&quot; + base[24, subAlphabet]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;1000₂₄&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you want to parse a string of these subscripts as a single number, you can do something like this:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;subAlphabet = char[0x2080 to 0x2089]&lt;br /&gt;parseInt[&quot;₄₂&quot;, subAlphabet]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;42&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Frink can parse Unicode characters that are commonly used as mathematical operators. This allows you to cut-and-paste some mathematical expressions without modification and handle them correctly.&lt;/p&gt;
&lt;p&gt;Unicode superscript numerals can be used to perform exponentiation, such as &lt;code&gt;10⁻²³&lt;/code&gt;, which is equivalent to &lt;code&gt;10^-23&lt;/code&gt;, or &lt;code&gt;x³&lt;/code&gt;, which is equivalent to &lt;code&gt;x^3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Web pages usually &lt;em&gt;won't&lt;/em&gt; use Unicode superscript numerals, but rather &lt;code&gt;&amp;lt;SUP&amp;gt;&lt;/code&gt; tags for superscripts which means that you probably won't be able to paste equations in directly.&lt;/p&gt;
&lt;p&gt;The Unicode standard has a non-contiguous hodgepodge collection of numerals that represent superscript numerals. The only superscript characters currently recognized are the following:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellpadding=&quot;3&quot; cellspacing=&quot;3&quot; summary=&quot;Unicode numeric superscripts&quot; readability=&quot;2&quot;&gt;&lt;tr&gt;&lt;th&gt;Character&lt;/th&gt;
&lt;th&gt;Unicode Codepoint&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;⁰&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;\u2070&lt;/td&gt;
&lt;td&gt;Superscript 0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;¹&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;\u00b9&lt;/td&gt;
&lt;td&gt;Superscript 1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;²&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;\u00b2&lt;/td&gt;
&lt;td&gt;Superscript 2&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;³&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;\u00b3&lt;/td&gt;
&lt;td&gt;Superscript 3&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;⁴&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;\u2074&lt;/td&gt;
&lt;td&gt;Superscript 4&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;⁵&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;\u2075&lt;/td&gt;
&lt;td&gt;Superscript 5&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;⁶&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;\u2076&lt;/td&gt;
&lt;td&gt;Superscript 6&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;⁷&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;\u2077&lt;/td&gt;
&lt;td&gt;Superscript 7&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;⁸&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;\u2078&lt;/td&gt;
&lt;td&gt;Superscript 8&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;⁹&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;\u2079&lt;/td&gt;
&lt;td&gt;Superscript 9&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;⁺&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;\u207a&lt;/td&gt;
&lt;td&gt;Superscript plus (must precede digits)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;⁻&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;\u207b&lt;/td&gt;
&lt;td&gt;Superscript minus (must precede digits)&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;You can use the &lt;code&gt;toUnicodeSuperscript[&lt;em&gt;int&lt;/em&gt;]&lt;/code&gt; function to turn an integer into a string composed of Unicode superscript digits in base 10.&lt;/p&gt;
&lt;p&gt;In addition, some Unicode characters can be used as synonyms for other mathematical operators.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellpadding=&quot;3&quot; cellspacing=&quot;3&quot; summary=&quot;Unicode mathematical operators&quot; readability=&quot;6.5&quot;&gt;&lt;tr&gt;&lt;th&gt;Character&lt;/th&gt;
&lt;th&gt;Unicode Codepoint&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;×&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;\u00d7&lt;/td&gt;
&lt;td&gt;Unicode MULTIPLICATION SIGN, synonym for multiplication &lt;code&gt;*&lt;/code&gt; operator&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;⋅&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;\u22c5&lt;/td&gt;
&lt;td&gt;Unicode DOT OPERATOR, synonym for multiplication &lt;code&gt;*&lt;/code&gt; operator. Unicode says &quot;preferred to \u00b7 for denotation of multiplication&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;·&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;\u00b7&lt;/td&gt;
&lt;td&gt;Unicode MIDDLE DOT, synonym for multiplication &lt;code&gt;*&lt;/code&gt; operator &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;÷&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;\u00f7&lt;/td&gt;
&lt;td&gt;Unicode DIVISION SIGN, synonym for division &lt;code&gt;/&lt;/code&gt; operator&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;As an example, the following is parsed correctly by Frink, as it uses Unicode (and not HTML) markup:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;&amp;amp;#x03c1 = 6.02×10²³ amu ⋅ (6 m³)⁻¹&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that Frink does not currently output Unicode, nor give you simplified ways to key in Unicode characters.&lt;/p&gt;

&lt;p&gt;Text surrounded by double quotes is a string.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;&quot;My hovercraft is full of eels.&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;My hovercraft is full of eels.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you need to put a literal double-quote inside a string, precede it with a backslash:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;&quot;If you believe in the hypothetical \&quot;Z-Axis\&quot;&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;If you believe in the hypothetical &quot;Z-Axis&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Backslashes have a special meaning within double-quoted and triple-quoted strings. They may precede a special character, as follows:&lt;/p&gt;
&lt;table border=&quot;1&quot; summary=&quot;Special Backslash Codes&quot; readability=&quot;12.498392282958&quot;&gt;&lt;tr&gt;&lt;th&gt;String&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;\\&lt;/td&gt;
&lt;td&gt;Places a &lt;em&gt;single&lt;/em&gt; backslash into the string.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;\t&lt;/td&gt;
&lt;td&gt;Places a tab character into the string.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;\n&lt;/td&gt;
&lt;td&gt;Places a newline character(s) into the string. The exact characters inserted follow your platforms's Java-defined settings for the newline character, which may be one character or two.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;\r&lt;/td&gt;
&lt;td&gt;Places a return character into the string.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;\&quot;&lt;/td&gt;
&lt;td&gt;Places a double-quote character into the string.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5263157894737&quot;&gt;&lt;td class=&quot;lit&quot;&gt;\u&lt;em&gt;XXXX&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Places a Unicode character into the string, where &lt;em&gt;XXXX&lt;/em&gt; is a 4-digit hex value for the Unicode codepoint. For more information, see the &lt;a href=&quot;https://frinklang.org/#UnicodeInStrings&quot;&gt;Unicode in Strings&lt;/a&gt; section of the documentation.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8.5344827586207&quot;&gt;&lt;td class=&quot;lit&quot;&gt;\u{&lt;em&gt;XXXXXX&lt;/em&gt;}&lt;/td&gt;
&lt;td&gt;Places a Unicode character into the string, where &lt;em&gt;XXXXXX&lt;/em&gt; is a 1- to 6-digit hex value for the Unicode codepoint. For example, to create a string with a cat face, you would use &lt;code&gt;&quot;\u{1f638}&quot;&lt;/code&gt; (this is the Unicode character &quot;GRINNING CAT FACE WITH SMILING EYES&quot;.) For more information, see the &lt;a href=&quot;https://frinklang.org/#UnicodeInStrings&quot;&gt;Unicode in Strings&lt;/a&gt; section of the documentation.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;A single backslash preceding any other character simply inserts the following character into the string (and removes the backslash.)&lt;/p&gt;
&lt;p&gt;Strings can be concatenated using the &lt;code&gt;+&lt;/code&gt; operator. If either side of a &lt;code&gt;+&lt;/code&gt; operator is a string, the values will be converted to strings before concatenation.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;UnicodeInStrings&quot; id=&quot;UnicodeInStrings&quot;&gt;Unicode in Strings&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For internationalization, Frink allows &lt;a href=&quot;http://www.unicode.org/&quot;&gt;Unicode&lt;/a&gt; characters anywhere. Strings can contain Unicode characters, indicated in one of a few ways:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Directly entered with a Unicode-aware editor. If you &lt;em&gt;do&lt;/em&gt; have a nifty editor that handles Unicode, or other character encodings, you can write your Frink program in full Unicode, and load it using the &lt;a href=&quot;https://frinklang.org/#CommandLineOptions&quot;&gt;&lt;code&gt;--encoding &lt;em&gt;str&lt;/em&gt;&lt;/code&gt;&lt;/a&gt; command-line switch.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\u&lt;/code&gt; followed by exactly 4 hexadecimal digits [0-9a-fA-F] indicating the Unicode code-point. For example, &lt;code&gt;&quot;\u2764&quot;&lt;/code&gt; indicates the Unicode character &quot;HEAVY BLACK HEART&quot;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\u{&lt;em&gt;XXXXXX&lt;/em&gt;}&lt;/code&gt; where &lt;code&gt;XXXXXX&lt;/code&gt; is anywhere from 1 to 6 hexadecimal digits. For example, &lt;code&gt;&quot;\u{1f435}&quot;&lt;/code&gt; is the Unicode character &quot;MONKEY FACE&quot;. Note that using this format is required because the hexadecimal value has more than 4 digits.&lt;/li&gt;
&lt;li&gt;High Unicode characters (those with value higher than &lt;code&gt;\uFFFF&lt;/code&gt;) can also be represented as a Unicode &quot;surrogate pair.&quot; For example, the Unicode character &quot;MONKEY FACE&quot; can also be represented as two 4-hex-digit characters: &lt;code&gt;&quot;\ud83d\udc35&quot;&lt;/code&gt;. This is for compatibility with environments (such as Java) that represent a character as 16 bits. (The &lt;a href=&quot;https://frinklang.org/#InputForm&quot;&gt;&lt;code&gt;inputForm[&lt;em&gt;expr&lt;/em&gt;]&lt;/code&gt;&lt;/a&gt; function will produce this format for cross-platform and cross-Java-version compatibility.)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The latter two allow Unicode characters to be placed into any ASCII text file, and edited by programs that don't understand Unicode.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;&quot;The symbol for micro is \u00b5&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;The symbol for micro is µ&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;UnicodeCharacterCodes&quot; id=&quot;UnicodeCharacterCodes&quot;&gt;Unicode Character Codes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can convert a character to its Unicode character code by using the &lt;code&gt;char[&lt;em&gt;x&lt;/em&gt;]&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;If passed an integer, it returns the character with that Unicode character code:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;char[00b5\\16]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;µ&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If passed a single-character string, it returns the Unicode character code:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;char[&quot;A&quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;65&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If passed a multiple-character string, it returns the Unicode character code for each character in an array:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;char[&quot;Frink&quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[70, 114, 105, 110, 107]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you always need an array of character codes, use the &lt;code&gt;chars[&lt;em&gt;x&lt;/em&gt;]&lt;/code&gt; function which turns a string into an array of character codes, even when passed a string containing only one character.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;chars[&quot;F&quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[70]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can also obtain the results in a different base:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;hex[chars[&quot;Frink&quot;]]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[46, 72, 69, 6e, 6b]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If passed an array of integers, the &lt;code&gt;char[&lt;em&gt;x&lt;/em&gt;]&lt;/code&gt; function returns a string:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;char[ [70, 114, 105, 110, 107] ]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;Frink&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;charList[&lt;em&gt;str&lt;/em&gt;]&lt;/code&gt; returns a list of the characters in a string:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;charList[&quot;Frink&quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[F, r, i, n, k]&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;CorrectStringParsing&quot; id=&quot;CorrectStringParsing&quot;&gt;Correct String Parsing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Frink provides several functions to process strings correctly using Unicode rules. When working with Unicode, almost all algorithms should work on entire &lt;em&gt;strings&lt;/em&gt; to be correct, not individual characters. (This is why Frink doesn't even have a character type.)&lt;/p&gt;
&lt;p&gt;The following functions operate on strings and allow you to enumerate through their parts. Each of the following returns an enumerating expression that allows you to loop through the contents of a string in different, Unicode-correct ways:&lt;/p&gt;
&lt;table border=&quot;1&quot; summary=&quot;Correct string parsing functions&quot; readability=&quot;51.078733644157&quot;&gt;&lt;tr&gt;&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;24.5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;graphemeList[&lt;em&gt;string&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;25&quot;&gt;This returns an enumerating list of the &lt;em&gt;graphemes&lt;/em&gt; in a string, each as a string of 1 or more Unicode codepoints.
&lt;p&gt;To quote the Unicode standard:&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;&quot;It is important to recognize that what the user thinks of as a 'character'--a basic unit of a writing system for a language--may not be just a single Unicode code point. Instead, that basic unit may be made up of multiple Unicode code points. To avoid ambiguity with the computer use of the term character, this is called a user-perceived character. For example, 'G' + acute-accent is a user-perceived character: users think of it as a single character, yet is actually represented by two Unicode code points. These user-perceived characters are approximated by what is called a grapheme cluster, which can be determined programmatically.&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example, the string &lt;code&gt;&quot;g\u0308o&quot;&lt;/code&gt; represents a &lt;code&gt;g&lt;/code&gt; with combining diaeresis followed by the letter &lt;code&gt;o&lt;/code&gt;. Or, in other words, &lt;code&gt;&quot;g̈o&quot;&lt;/code&gt;. Note that while there are three Unicode codepoints, only two &quot;graphemes&quot; are displayed.&lt;/p&gt;
&lt;p&gt;As another example, the Devanagari string &lt;code&gt;&quot;\u0915\u094D\u0937\u093F&quot;&lt;/code&gt; (shown as क्षि ) is recognized as a single grapheme and should generally be kept intact and counted as a single display glyph in functions like &lt;code&gt;graphemeLength[&lt;em&gt;str&lt;/em&gt;]&lt;/code&gt; below.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;reverse[&lt;em&gt;string&lt;/em&gt;]&lt;/code&gt; function now uses a grapheme-based reverse algorithm. See below.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;graphemeLength[&lt;em&gt;str&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the length of a string in &lt;em&gt;graphemes&lt;/em&gt;, counting multiple Unicode codepoints that should be combined together as a single display glyph as a single character.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;35&quot;&gt;&lt;td class=&quot;lit&quot;&gt;reverse[&lt;em&gt;str&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;39&quot;&gt;Reverses the characters in a string.
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;As of the 2016-05-27 release, this is a smarter reversal that follows Unicode rules to keep combining characters together and properly ordered.&lt;/p&gt;
&lt;p&gt;For example, the string &lt;code&gt;&quot;g\u0308o&quot;&lt;/code&gt; represents a &lt;code&gt;g&lt;/code&gt; with combining diaeresis followed by the letter &lt;code&gt;o&lt;/code&gt;. Or, in other words, &lt;code&gt;&quot;g̈o&quot;&lt;/code&gt;. Reversing this naïvely would cause the diaeresis to incorrectly show over the &lt;code&gt;o&lt;/code&gt; instead of the &lt;code&gt;g&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As another example, the Devanagari string &lt;code&gt;&quot;\u0915\u094D\u0937\u093F&quot;&lt;/code&gt; (shown as क्षि ) is recognized as a single grapheme and the 4 Unicode codepoints that make it up are kept intact and not reversed.&lt;/p&gt;
&lt;p&gt;Yes, this stuff is tricky. It may not always reverse strings to the exact rules used in your language, but it will attempt to reverse the string according to the rules encoded in the Unicode standard.&lt;/p&gt;
&lt;p&gt;If you, for some reason, need a naïve and broken string reversal, you can do something like:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;reverse[charList[&lt;em&gt;string&lt;/em&gt;]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;but keep in mind that this will &lt;em&gt;still&lt;/em&gt; do the right thing like keeping surrogate pairs ordered correctly. You'll have to try hard to make Frink do the wrong thing. Don't do this. It's never right for Unicode strings. Frink tries to always work on Unicode &lt;em&gt;strings&lt;/em&gt;, and not individual characters, as working on individual characters or codepoints is almost always the wrong thing to do when processing Unicode.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;15&quot;&gt;&lt;td class=&quot;lit&quot;&gt;wordList[&lt;em&gt;string&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;13&quot;&gt;Returns an enumeration of the words in a string. This function provides correct interpretaion of punctuation marks within and following words. It also correctly handles hyphenated words. Note that this returns words, spacing, and punctuation marks.
&lt;p&gt;The following example solves a typical programming interview task: reversing the words in a string. It throws away any words that don't contain an alphanumeric value, and collapses multiple spaces into one.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = &quot;This does a Unicode-correct word reversal (wasn't that easy?)&quot;&lt;br /&gt;join[&quot; &quot;, reverse[select[wordList[a], %r/[[:alnum:]]/ ]]]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;easy that wasn't reversal word Unicode-correct a does This&lt;/code&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;sentenceList[&lt;em&gt;string&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;This returns an enumeration of the sentences in a string. Sentences are parsed with correct interpretation of periods within numbers and abbreviations, and trailing punctuation marks such as quotation marks and parentheses.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;lineBreakList[&lt;em&gt;string&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns an enumeration of the places that a line can be broken. It correctly handles punctuation, numbers, and hyphenated words.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14.521276595745&quot;&gt;&lt;td class=&quot;lit&quot;&gt;lexicalCompare[&lt;em&gt;string1&lt;/em&gt;, &lt;em&gt;string2&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;10.622425629291&quot;&gt;Compares 2 strings using a comparison method that understands human languages. This version uses the default locale and language settings defined on &lt;em&gt;your&lt;/em&gt; Java Virtual Machine to perform the comparison.
&lt;p&gt;The function is similar to, but much smarter than the &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; three-way comparison operator in that it returns &lt;code&gt;-1&lt;/code&gt; if &lt;code&gt;a &amp;lt; b&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; if &lt;code&gt;a == b&lt;/code&gt; , and &lt;code&gt;1&lt;/code&gt; if &lt;code&gt;a &amp;gt; b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&quot;https://frinklang.org/#LexicalSorting&quot;&gt;Lexical Sorting&lt;/a&gt; section of the documentation for more on lexical comparisons.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;10.509635974304&quot;&gt;&lt;td class=&quot;lit&quot;&gt;lexicalCompare[&lt;em&gt;string1&lt;/em&gt;, &lt;em&gt;string2&lt;/em&gt;, &lt;em&gt;languageCode&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;4.3095238095238&quot;&gt;Like the previous function, this compares 2 strings using a comparison method that understands human languages. This version uses a specified language. The argument &lt;code&gt;languageCode&lt;/code&gt; can be one of three types:
&lt;p&gt;See the &lt;a href=&quot;https://frinklang.org/#LexicalSorting&quot;&gt;Lexical Sorting&lt;/a&gt; section of the documentation for more on lexical comparisons.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;43.156556903524&quot;&gt;&lt;td class=&quot;lit&quot;&gt;normalizeUnicode[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;method=&quot;NFC&quot;&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;40.28073286052&quot;&gt;Normalizes the characters in a Unicode string using one of the methods described in the Unicode standard, specifically &lt;a href=&quot;http://unicode.org/reports/tr15/&quot;&gt;Unicode Standard Annex #15, &lt;em&gt;Unicode Normalization Forms&lt;/em&gt;&lt;/a&gt;.
&lt;p&gt;A Unicode string can use various methods to encode what is essentially the same character/glyph. For example, the character &lt;code&gt;ô&lt;/code&gt; can be represented as either &lt;code&gt;&quot;\u00F4&quot;&lt;/code&gt; or &lt;code&gt;&quot;\u006F\u0302&quot;&lt;/code&gt;. The former is a &quot;precomposed&quot; character, &quot;LATIN SMALL LETTER O WITH CIRCUMFLEX&quot;, and the latter is two Unicode codepoints, an &lt;code&gt;o&lt;/code&gt; followed by &quot;COMBINING CIRCUMFLEX ACCENT&quot;. (This is usually referred to as a &quot;decomposed&quot; representation.) Unicode normalization rules can convert these &quot;equivalent&quot; encodings into a canonical representation.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://unicode.org/reports/tr15/&quot;&gt;Unicode Standard Annex #15&lt;/a&gt; currently defines four different methods of converting between these representations. (You might get the best idea of the differences between these by looking at figure 6 in the document.)&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;method&lt;/code&gt; parameter is a string containing the names of one of these conversion methods, which can consist of &lt;code&gt;&quot;NFC&quot;&lt;/code&gt; (the default), &lt;code&gt;&quot;NFD&quot;&lt;/code&gt;, &lt;code&gt;&quot;NFKD&quot;&lt;/code&gt;, and &lt;code&gt;&quot;NFKC&quot;&lt;/code&gt;. Please read &lt;a href=&quot;http://unicode.org/reports/tr15/&quot;&gt;Unicode Standard Annex #15&lt;/a&gt; for a description of the differences in these algorithms, as the procedures involved are quite detailed and beyond the scope of this document.&lt;/p&gt;
&lt;p&gt;In short, for many purposes, &lt;code&gt;&quot;NFC&quot;&lt;/code&gt; is recommended for interchange, and for its compactness and simplicity, and is thus the default.&lt;/p&gt;
&lt;p&gt;If the string is already normalized to the requested form, the original string is returned unmodified.&lt;/p&gt;
&lt;p&gt;This normalization process is useful when, say, using Unicode strings as dictionary keys. Two different keys that might be considered identical may not have the same representation without normalization.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;&lt;a name=&quot;UpperLowerCase&quot; id=&quot;UpperLowerCase&quot;&gt;Upper/Lower Case&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The functions &lt;code&gt;uppercase[&lt;em&gt;str&lt;/em&gt;]&lt;/code&gt; or &lt;code&gt;uc[&lt;em&gt;str&lt;/em&gt;]&lt;/code&gt; and &lt;code&gt;lowercase[&lt;em&gt;str&lt;/em&gt;]&lt;/code&gt; or &lt;code&gt;lc[&lt;em&gt;str&lt;/em&gt;]&lt;/code&gt; convert a string to upper- or lowercase. These functions use Unicode single- and multiple-character mapping tables and thus try to do the right thing with Unicode, possibly making the string longer in some cases:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;uc[&quot;Imbiß&quot;]&lt;/code&gt; &lt;br /&gt;&lt;code class=&quot;output&quot;&gt;IMBISS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As the &lt;a href=&quot;http://www.unicode.org/charts/case/&quot;&gt;Unicode standard for casing&lt;/a&gt; states, &quot;it is important to note that no casing operations on strings are reversible:&quot;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;lc[ uc[&quot;Imbiß&quot;] ]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;imbiss&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;Substrings&quot; id=&quot;Substrings&quot;&gt;Substrings&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The following functions return substrings of a string.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; as of the 2014-07-01 release, all Frink functions handle high Unicode codepoints (that is, above &lt;code&gt;\uFFFF&lt;/code&gt;,) correctly as a single character (unlike Java.) These are easier to use in almost all situations. If you need the more cumbersome Java-style behavior, such as to communicate with Java methods, use the functions in the &lt;a href=&quot;https://frinklang.org/#RawStringFunctions&quot;&gt;Raw String Functions&lt;/a&gt; section.&lt;/p&gt;
&lt;table border=&quot;1&quot; summary=&quot;Substring functions&quot; readability=&quot;26&quot;&gt;&lt;tr&gt;&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td class=&quot;lit&quot;&gt;substr[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;startPos&lt;/em&gt;, &lt;em&gt;endBefore&lt;/em&gt;]&lt;br /&gt;substring[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;startPos&lt;/em&gt;, &lt;em&gt;endBefore&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Takes the substring of string &lt;code&gt;str&lt;/code&gt; beginning with &lt;code&gt;startPos&lt;/code&gt; and ending &lt;em&gt;before&lt;/em&gt; the character position &lt;code&gt;endBefore&lt;/code&gt;. The length of the substring will be &lt;code&gt;endBefore-startPos&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td class=&quot;lit&quot;&gt;substrLen[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;startPos&lt;/em&gt;, &lt;em&gt;len&lt;/em&gt;]&lt;br /&gt;substringLen[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;startPos&lt;/em&gt;, &lt;em&gt;len&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Takes the substring of string &lt;code&gt;str&lt;/code&gt; beginning with &lt;code&gt;startPos&lt;/code&gt; and containing &lt;code&gt;len&lt;/code&gt; characters.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td class=&quot;lit&quot;&gt;substrLen[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;startPos&lt;/em&gt;, &lt;em&gt;len&lt;/em&gt;]&lt;br /&gt;substringLen[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;startPos&lt;/em&gt;, &lt;em&gt;len&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Takes the substring of string &lt;code&gt;str&lt;/code&gt; beginning with &lt;code&gt;startPos&lt;/code&gt; and containing &lt;code&gt;len&lt;/code&gt; characters.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;17&quot;&gt;&lt;td class=&quot;lit&quot;&gt;left[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;len&lt;/em&gt;]&lt;br /&gt;right[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;len&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns a string containing the leftmost or rightmost characters of the given string with the specified length. If &lt;code&gt;len&lt;/code&gt; is negative, it returns a string with &lt;code&gt;-len&lt;/code&gt; characters removed, that is, if the original string is 5 characters long, and &lt;code&gt;len&lt;/code&gt; is &lt;code&gt;-1&lt;/code&gt;, 4 characters are returned. In any case, if the original string is shorter than the number of characters requested, the string returned will contain only the number of characters available, but will not return an error.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;indexOf[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;substr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the index (zero-based) of the first occurrence of a substring in a string. This returns -1 if the substring is not found in the string.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;indexOf[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;substr&lt;/em&gt;, &lt;em&gt;startPos&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the index (zero-based) of the first occurrence of a substring in a string. This returns -1 if the substring is not found in the string.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;&lt;a name=&quot;RawStringFunctions&quot; id=&quot;RawStringFunctions&quot;&gt;Raw String Functions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; as of the 2014-07-01 release, all Frink functions handle high Unicode codepoints (that is, above &lt;code&gt;\uFFFF&lt;/code&gt;,) correctly as a single character (unlike Java.) If you need the more cumbersome Java-style behavior, such as to communicate with Java, these functions behave more like the Java versions, possibly treating high Unicode characters as two separate characters.&lt;/p&gt;
&lt;table border=&quot;1&quot; summary=&quot;Raw string functions&quot; readability=&quot;19&quot;&gt;&lt;tr&gt;&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;lengthRaw[&lt;em&gt;string&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the Java-style raw UTF-16-style length of a String, as reported by Java.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;charsRaw[&lt;em&gt;string&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns an array of the raw Java-style UTF-16 encoded characters in a string.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;11&quot;&gt;&lt;td class=&quot;lit&quot;&gt;substrRaw[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;startPos&lt;/em&gt;, &lt;em&gt;endBefore&lt;/em&gt;]&lt;br /&gt;substringRaw[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;startPos&lt;/em&gt;, &lt;em&gt;endBefore&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Takes the substring of string &lt;code&gt;str&lt;/code&gt; beginning with the raw position &lt;code&gt;startPos&lt;/code&gt; and ending &lt;em&gt;before&lt;/em&gt; the raw character position &lt;code&gt;endBefore&lt;/code&gt;, using the raw Java offset indices. The length of the substring will be &lt;code&gt;endBefore-startPos&lt;/code&gt; raw Java characters long.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td class=&quot;lit&quot;&gt;substrLenRaw[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;startPos&lt;/em&gt;, &lt;em&gt;len&lt;/em&gt;]&lt;br /&gt;substringLenRaw[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;startPos&lt;/em&gt;, &lt;em&gt;len&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Takes the substring of string &lt;code&gt;str&lt;/code&gt; beginning with the raw character position &lt;code&gt;startPos&lt;/code&gt; and containing &lt;code&gt;len&lt;/code&gt; raw Java-style characters.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;indexOfRaw[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;substr&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the index (zero-based) of the first occurrence of a substring in a string. This returns -1 if the substring is not found in the string.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;indexOfRaw[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;substr&lt;/em&gt;, &lt;em&gt;startPos&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the index (zero-based) of the first occurrence of a substring after position &lt;code&gt;startPos&lt;/code&gt; in a string. This returns -1 if the substring is not found in the string.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;&lt;a name=&quot;OtherStringFunctions&quot; id=&quot;OtherStringFunctions&quot;&gt;Other String Functions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Additional functions for manipulating strings are listed below.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Other String Functions&quot; readability=&quot;82.224801466097&quot;&gt;&lt;tr&gt;&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;trim[&lt;em&gt;str&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns a string with whitespace trimmed from the left and right ends.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14.428571428571&quot;&gt;&lt;td class=&quot;lit&quot;&gt;length[&lt;em&gt;str&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;12.493177387914&quot;&gt;Returns the length of a string in Unicode codepoints. This correctly counts characters above Unicode &lt;code&gt;\uFFFF&lt;/code&gt; as a single character, which is different than the somewhat messy Java behavior.
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; However, this may not be the length of characters that a user sees. For that, see the following &lt;code&gt;graphemeLength[&lt;em&gt;str&lt;/em&gt;]&lt;/code&gt; function which handles Unicode more correctly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you need the more cumbersome Java-style behavior, such as to communicate with Java methods, use the functions in the &lt;a href=&quot;https://frinklang.org/#RawStringFunctions&quot;&gt;Raw String Functions&lt;/a&gt; section.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;13.196319018405&quot;&gt;&lt;td class=&quot;lit&quot;&gt;graphemeLength[&lt;em&gt;str&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;12.701461377871&quot;&gt;Returns the length of a string in &lt;em&gt;graphemes&lt;/em&gt;, counting multiple Unicode codepoints that should be combined together as a single display glyph as a single character.
&lt;p&gt;To quote the Unicode standard:&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;&quot;It is important to recognize that what the user thinks of as a 'character'--a basic unit of a writing system for a language--may not be just a single Unicode code point. Instead, that basic unit may be made up of multiple Unicode code points. To avoid ambiguity with the computer use of the term character, this is called a user-perceived character. For example, 'G' + acute-accent is a user-perceived character: users think of it as a single character, yet is actually represented by two Unicode code points. These user-perceived characters are approximated by what is called a grapheme cluster, which can be determined programmatically.&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also see the &lt;a href=&quot;https://frinklang.org/#CorrectStringParsing&quot;&gt;Correct String Parsing&lt;/a&gt; section of the documentation for more functions for parsing Unicode strings correctly.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5.6707317073171&quot;&gt;&lt;td class=&quot;lit&quot;&gt;parseInt[&lt;em&gt;str&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Parses a string, containing digits 0-9 only, to an integer in base 10. This is much less powerful and less forgiving than using &lt;code&gt;&lt;a href=&quot;https://frinklang.org/#SelfEvaluation&quot;&gt;eval[&lt;em&gt;str&lt;/em&gt;]&lt;/a&gt;&lt;/code&gt;, but faster.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;parseInt[&lt;em&gt;str&lt;/em&gt;, &lt;em&gt;base&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Parses a string, treating it as if it's a number in the specified base.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;repeat[&lt;em&gt;str&lt;/em&gt;, &lt;em&gt;times&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Repeats the string the specified number of times and returns it as a string.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td class=&quot;lit&quot;&gt;padLeft[&lt;em&gt;str&lt;/em&gt;, &lt;em&gt;width&lt;/em&gt;, &lt;em&gt;padChar&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Pads the left side of the string to the specified width, using the one-character string &lt;em&gt;padChar&lt;/em&gt; as the character to pad with. If the string is already longer than the specified width, it returns the original string unchanged. If the first argument is not already a string, it is converted to a string.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td class=&quot;lit&quot;&gt;padRight[&lt;em&gt;str&lt;/em&gt;, &lt;em&gt;width&lt;/em&gt;, &lt;em&gt;padChar&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Pads the right side of the string to the specified width, using the one-character string &lt;em&gt;padChar&lt;/em&gt; as the character to pad with. If the string is already longer than the specified width, it returns the original string unchanged. If the first argument is not already a string, it is converted to a string.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;15&quot;&gt;&lt;td class=&quot;lit&quot;&gt;editDistance[&lt;em&gt;str1&lt;/em&gt;, &lt;em&gt;str2&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the &lt;em&gt;edit distance&lt;/em&gt; or &lt;em&gt;Levenshtein distance&lt;/em&gt; between two strings. This is the minimum number of operations needed to transform one string into the other, where an operation is an insertion, deletion, or replacement. It can be used to aid in spell checking, fuzzy spelling, plagiarism detection, and determining similarity of two strings. The algorithm used runs in O(n*m) time, where n and m are the lengths of each string. It uses O(m) space when processing. The comparison &lt;em&gt;is&lt;/em&gt; case-sensitive. The following are examples of edit distances between strings:
&lt;table border=&quot;1&quot; summary=&quot;Description of editDistance edits&quot; readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;th&gt;String 1&lt;/th&gt;
&lt;th&gt;String 2&lt;/th&gt;
&lt;th&gt;Edit Distance&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;Fr&lt;strong&gt;i&lt;/strong&gt;nk&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;Fr&lt;strong&gt;a&lt;/strong&gt;nk&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Replacement&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;Frink&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;Frink&lt;strong&gt;y&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Insertion&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;F&lt;strong&gt;r&lt;/strong&gt;ink&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;Fink&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Deletion&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;Frink&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;Fr&lt;strong&gt;a&lt;/strong&gt;nk&lt;strong&gt;s&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1 Replacement + 1 Insertion&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td class=&quot;lit&quot;&gt;editDistanceDamerau[&lt;em&gt;str1&lt;/em&gt;, &lt;em&gt;str2&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the Levenshtein-Damerau edit distance between two strings. This is similar to the &lt;code&gt;editDistance&lt;/code&gt; function above, but also allows &lt;em&gt;swaps&lt;/em&gt; between two adjoining characters, which count as an edit distance of 1. This may make distances between some strings shorter, by say, treating transposition errors in a word as a less expensive operation than in the pure Levenshtein algorithm.
&lt;table border=&quot;1&quot; summary=&quot;Description of editDistance edits&quot; readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;th&gt;String 1&lt;/th&gt;
&lt;th&gt;String 2&lt;/th&gt;
&lt;th&gt;Edit Distance&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;F&lt;strong&gt;ri&lt;/strong&gt;nk&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;F&lt;strong&gt;ir&lt;/strong&gt;nk&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Swap of adjoining characters&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;33&quot;&gt;&lt;td class=&quot;lit&quot;&gt;editDistanceDamerau[&lt;em&gt;str1&lt;/em&gt;, &lt;em&gt;str2&lt;/em&gt;, &lt;em&gt;deleteCost&lt;/em&gt;, &lt;em&gt;insertCost&lt;/em&gt;, &lt;em&gt;replaceCost&lt;/em&gt;, &lt;em&gt;swapCost&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;19&quot;&gt;Returns the Levenshtein-Damerau edit distance between two strings as above, but allows you to specify the &lt;em&gt;cost&lt;/em&gt; of the delete, insert, replace, and swap operations as integers. (Default is 1 for each in the above algorithm.)
&lt;p&gt;For stability, &lt;code&gt;swapCost*2&lt;/code&gt; must be &amp;gt;= &lt;code&gt;insertCost + deleteCost&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you want to, say, disallow replacements, you can set the cost for the replacement parameter to be higher than the length of either string. For example:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;editDistanceDamerau[&quot;ABCD&quot;, &quot;CBAD&quot;, 1, 1, 1000, 1]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;3&lt;/code&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;11&quot;&gt;&lt;td class=&quot;lit&quot;&gt;base64Encode[&lt;em&gt;expression&lt;/em&gt;, &lt;em&gt;encoding&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Encodes the specified expression (which is probably a string, but can also be a Java array of bytes) to base-64 encoding, first converting Unicode characters to raw bytes using the specified encoding. (Hint: &quot;UTF-8&quot; is probably good for the encoding. The receiver will have to use the same encoding to make Unicode work correctly. If the input is a Java array of bytes, the encoding should be &lt;code&gt;undef&lt;/code&gt;.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;base64Encode[&lt;em&gt;expression&lt;/em&gt;, &lt;em&gt;encoding&lt;/em&gt;,&lt;em&gt;lineLength&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Encodes to base-64 as above, wrapping lines at the specified line length.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;base64Decode[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;encoding&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Decodes the specified base-64 text into a string. Raw bytes are converted to Unicode characters using the specified encoding. (Hint: This encoding will have to match the encoding used in the &lt;code&gt;base64Encode&lt;/code&gt; function above to make non-ASCII characters work correctly. &quot;UTF-8&quot; might be a good choice.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;base64DecodeToBytes[&lt;em&gt;string&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Decodes the string (which should contain base-64 encoded text) into an array of raw bytes.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5.547619047619&quot;&gt;&lt;td class=&quot;lit&quot;&gt;toASCII[&lt;em&gt;string&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Encodes a string into an ASCII-safe equivalent, with characters outside the ASCII range turned into Unicode escapes. Also see the &lt;a href=&quot;https://frinklang.org/#Formatters&quot;&gt;Formatters&lt;/a&gt; section of the documentation, especially &lt;a href=&quot;https://frinklang.org/#InputForm&quot;&gt;inputForm&lt;/a&gt; for a safer way to quote and encode strings.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;toUnicodeSuperscript[&lt;em&gt;int&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Turns an integer into a string containing the equivalent Unicode superscript digits in base 10.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;10.08&quot;&gt;&lt;td class=&quot;lit&quot;&gt;stringToBytes[&lt;em&gt;str&lt;/em&gt;, &lt;em&gt;encoding=&quot;UTF-8&quot;&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;5.7337278106509&quot;&gt;Turns a string into an array of Java bytes using the specified encoding to turn a Unicode string into bytes. The encoding defaults to UTF-8, but can be a string indicating any encoding supported on your system.
&lt;p&gt;See the &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=encodings.frink&quot;&gt;encodings.frink&lt;/a&gt; sample program to see how to list all character encodings (and their aliases) available on your system.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;10.036764705882&quot;&gt;&lt;td class=&quot;lit&quot;&gt;bytesToString[&lt;em&gt;bytes&lt;/em&gt;, &lt;em&gt;encoding=&quot;UTF-8&quot;&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;5.7009966777409&quot;&gt;Turns a Java array of bytes into a string using the specified encoding. The encoding defaults to UTF-8, but can be a string indicating any encoding supported on your system.
&lt;p&gt;See the &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=encodings.frink&quot;&gt;encodings.frink&lt;/a&gt; sample program to see how to list all character encodings (and their aliases) available on your system.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;&lt;a name=&quot;MultiLineStrings&quot; id=&quot;MultiLineStrings&quot;&gt;Multi-Line Strings&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Text surrounded by three sets of double-quotes is a multi-line string (like in Python.) Newlines are allowed and retained in the string. Hopefully, this is less burdensome and error-prone than Perl's &quot;here-document&quot; syntax. For example:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;lyrics = &quot;&quot;&quot;Oh, Danny Boy,&lt;br /&gt;The pipes, the pipes are calling&lt;br /&gt;From glen to glen and down the mountainside&quot;&quot;&quot;&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is also useful when you have strings that contain double quotes, as it eliminates the need for escaping those quotes:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;quote = &quot;&quot;&quot;We will say &quot;ni&quot; to you again if you do not appease us.&quot;&quot;&quot;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;StringInterpolation&quot; id=&quot;StringInterpolation&quot;&gt;String Interpolation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If a double-quoted string or multi-line string contains a dollar sign (&lt;code&gt;$&lt;/code&gt;) followed by a variable name (which must begin with a letter), the value of that variable is replaced in the string at evaluation time. This is (probably) faster than string concatenation which could be used to get the same effect. There are certain optimizations to make sure that this isn't significantly more inefficient if the string doesn't need replacement. (The string is checked for dollar signs at compile time.)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;first = &quot;Inigo&quot;&lt;br /&gt;last = &quot;Montoya&quot;&lt;br /&gt;&quot;My name is $first $last.&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;My name is Inigo Montoya.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you need to explicitly mark where the variable name begins and ends, you can put it in curly braces as below:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;last=&quot;Frink&quot;&lt;br /&gt;&quot;You can call me the ${last}meister.&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;You can call me the Frinkmeister.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Since a variable name must begin with a letter, it's fine to put a quantity like &lt;code&gt;$2.00&lt;/code&gt; into the string, and no substitution will be attempted, and there will be no runtime performance penalty. To put a literal dollar sign into the string immediately preceding an letter character, use two dollar signs:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;&quot;I want my $$USD 2.00. Plus tip.&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;I want my $USD 2.00. Plus tip.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For best performance, &lt;em&gt;don't&lt;/em&gt; use double dollar signs like this unless they directly precede an letter character.&lt;/p&gt;
&lt;p&gt;You can always use this technique to coerce a numeric value, or a unit, or a date, etc., to a string representation by enclosing it in quotes:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;n = 2^13367-1&lt;br /&gt;stringRep = &quot;$n&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After the above code, the variable &lt;code&gt;stringRep&lt;/code&gt; contains the result of the calculation &lt;em&gt;as a string&lt;/em&gt; which you can use to grab certain characters, truncate, etc. Note that the &lt;code&gt;toString[&lt;em&gt;expr&lt;/em&gt;]&lt;/code&gt; function does the same thing, and can often be used on the same line.&lt;/p&gt;

&lt;p class=&quot;warning&quot;&gt;&lt;strong&gt;Obligatory Disclaimer:&lt;/strong&gt; This feature requires connection to the internet. If you are using Frink on a handheld device, you may incur connection charges. Also, since I cannot guarantee the availability of any internet sites, this feature is intended only as a bonus that may not work reliably if at all. You may also require some &lt;a href=&quot;https://frinklang.org/#ProxyConfiguration&quot;&gt;proxy configuration&lt;/a&gt; if you use an HTTP proxy server to access the web.&lt;/p&gt;
&lt;p&gt;Text can be translated into other languages:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;&quot;My hovercraft is full of eels.&quot; -&amp;gt; German&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;&lt;span lang=&quot;de&quot; xml:lang=&quot;de&quot; xml:lang=&quot;de&quot;&gt;Mein Luftkissenfahrzeug ist von den Aalen voll.&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;&quot;I will not buy this record; it is scratched.&quot; -&amp;gt; Spanish&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;&lt;span lang=&quot;es&quot; xml:lang=&quot;es&quot; xml:lang=&quot;es&quot;&gt;No compraré este expediente; se rasguña.&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Nice translation. All of these are equivalent to calling the same-named function:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;German[&quot;My hovercraft is full of eels.&quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;&lt;span lang=&quot;de&quot; xml:lang=&quot;de&quot; xml:lang=&quot;de&quot;&gt;Mein Luftkissenfahrzeug ist von den Aalen voll.&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or, to translate &lt;em&gt;from&lt;/em&gt; another language, use the &lt;code&gt;From&lt;em&gt;Language&lt;/em&gt;&lt;/code&gt; conversion, or the appropriate keyword:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;&lt;span lang=&quot;es&quot; xml:lang=&quot;es&quot; xml:lang=&quot;es&quot;&gt;&quot;Yo quiero un burrito.&quot;&lt;/span&gt; -&amp;gt; FromSpanish&lt;/code&gt;&lt;br /&gt;or&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;&lt;span lang=&quot;es&quot; xml:lang=&quot;es&quot; xml:lang=&quot;es&quot;&gt;&quot;Yo quiero un burrito.&quot; -&amp;gt; Ingles&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;I love a young donkey.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(Thanks to Brian C. White discovering the above gem of translation, which is literally correct.) So it's not perfect, and it sure helps if your operating system is set up to display Unicode characters correctly. Or, you can do round-trips:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;&quot;The spirit is willing but the flesh is weak.&quot; -&amp;gt; Spanish -&amp;gt; &lt;span lang=&quot;es&quot; xml:lang=&quot;es&quot; xml:lang=&quot;es&quot;&gt;Ingles&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;The alcohol is arranged but the meat is weak.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can also define a function to do the same as the above:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;corrupt[x] := x -&amp;gt; Spanish -&amp;gt; &lt;span lang=&quot;es&quot; xml:lang=&quot;es&quot; xml:lang=&quot;es&quot;&gt;Ingles&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;or&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;corrupt[x] := Ingles[Spanish[x]]&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;You can also build up more complex strings:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;&quot;The German word for \&quot;dog\&quot; is \&quot;&quot; + German[&quot;dog&quot;] + &quot;.\&quot;&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;The German word for &quot;dog&quot; is &quot;&lt;span lang=&quot;de&quot; xml:lang=&quot;de&quot; xml:lang=&quot;de&quot;&gt;Hund&lt;/span&gt;.&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And you can use Frink to not just translate the words, but the words and the units:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;&quot;My farm is &quot; + (220000 acres -&amp;gt; &quot;hectares&quot;) + &quot;, but it's not arable land.&quot; -&amp;gt; German&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;&lt;span lang=&quot;de&quot; xml:lang=&quot;de&quot; xml:lang=&quot;de&quot;&gt;Mein Bauernhof ist 89031,19741723355 Hektars, aber es ist nicht urbares Land.&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;&quot;Gasoline costs &quot; + (round[1.37 USD/gallon / (EUR/liter), 0.01]) + &quot; Euro/liter in the United States.&quot; -&amp;gt; German&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;&lt;span lang=&quot;de&quot; xml:lang=&quot;de&quot; xml:lang=&quot;de&quot;&gt;Benzin kostet 0,33 Euro/liter in den Vereinigten Staaten.&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ooh, that's cool. If I had this when I lived in Germany, I might have seemed semi-literate.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;TranslationPairs&quot; id=&quot;TranslationPairs&quot;&gt;Translation Pairs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The following table summarizes the language pairs that can be translated and their keywords. The &lt;em&gt;default&lt;/em&gt; translations use your operating system's language setting, which &lt;em&gt;should&lt;/em&gt; detect your default language and Do The Right Thing most of the time. When you're translating &lt;em&gt;from&lt;/em&gt; another language, you need to indicate what the foreign language is. Keywords like &lt;code&gt;Inglese&lt;/code&gt; (the Italian word for English) imply that you're translating from Italian to English.&lt;/p&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;6&quot; summary=&quot;Language Translation Pairs&quot; readability=&quot;56&quot;&gt;&lt;tr&gt;&lt;th&gt;From&lt;/th&gt;
&lt;th&gt;To&lt;/th&gt;
&lt;th&gt;Keywords&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;English&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;English, en&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;German&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;German, &lt;span lang=&quot;de&quot; xml:lang=&quot;de&quot; xml:lang=&quot;de&quot;&gt;Deutsch&lt;/span&gt;, de&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Spanish&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;Spanish, &lt;span lang=&quot;es&quot; xml:lang=&quot;es&quot; xml:lang=&quot;es&quot;&gt;Espanol, Español,&lt;/span&gt; es&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;French&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;French, &lt;span lang=&quot;fr&quot; xml:lang=&quot;fr&quot; xml:lang=&quot;fr&quot;&gt;Francais, Français&lt;/span&gt;, fr&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Italian&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;Italian, &lt;span lang=&quot;it&quot; xml:lang=&quot;it&quot; xml:lang=&quot;it&quot;&gt;Italiano&lt;/span&gt;, it&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Portuguese&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;Portuguese, pt&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Korean&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;Korean, ko&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Simplified Chinese&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;SimplifiedChinese, Chinese, zh&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Traditional Chinese&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;TraditionalChinese, zt&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Russian&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;Russian, ru&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Japanese&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;Japanese, jp&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Dutch&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;Dutch, Nederlands, nl&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Swedish&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;Swedish, Svenska, sv&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Arabic&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;Arabic, ar&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Polish&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;Polish, pl&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Greek&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;Greek, el&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;English&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FromEnglish, from_en&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;German&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FromGerman, from_de&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Spanish&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FromSpanish, from_es&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;French&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FromFrench, from_fr&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Italian&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FromItalian, from_it&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Portuguese&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FromPortuguese, from_pt&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Japanese&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FromJapanese, from_ja&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Korean&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FromKorean, from_ko&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Russian&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FromRussian, from_ru&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;Simplified Chinese&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FromSimplifiedChinese, FromChinese, from_zh&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Traditional Chinese&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FromTraditionalChinese, from_zt&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Dutch&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FromDutch, from_nl&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Swedish&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FromSwedish, from_sv&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Arabic&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FromArabic, from_ar&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Polish&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FromPolish, from_pl&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Greek&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Default&lt;/em&gt;&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FromGreek, from_el&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;English&lt;/td&gt;
&lt;td&gt;German&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;EnglishToGerman, en_de&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;English&lt;/td&gt;
&lt;td&gt;Spanish&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;EnglishToSpanish, en_es&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;English&lt;/td&gt;
&lt;td&gt;French&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;EnglishToFrench, en_fr&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;English&lt;/td&gt;
&lt;td&gt;Italian&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;EnglishToItalian, en_it&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;English&lt;/td&gt;
&lt;td&gt;Portuguese&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;EnglishToPortuguese, en_pt&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;English&lt;/td&gt;
&lt;td&gt;Korean&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;EnglishToKorean, en_ko&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;English&lt;/td&gt;
&lt;td&gt;Japanese&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;EnglishToJapanese, en_ja&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;English&lt;/td&gt;
&lt;td&gt;Russian&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;EnglishToRussian, en_ru&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;English&lt;/td&gt;
&lt;td&gt;Simplified Chinese&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;EnglishToSimplifiedChinese, EnglishtToChinese, en_zh&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;English&lt;/td&gt;
&lt;td&gt;Traditional Chinese&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;EnglishToTraditionalChinese, en_zt&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;English&lt;/td&gt;
&lt;td&gt;Dutch&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;EnglishToDutch, en_nl&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;English&lt;/td&gt;
&lt;td&gt;Swedish&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;EnglishToSwedish, en_sv&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;English&lt;/td&gt;
&lt;td&gt;Arabic&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;EnglishToArabic, en_ar&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;English&lt;/td&gt;
&lt;td&gt;Polish&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;EnglishToPolish, en_pl&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;English&lt;/td&gt;
&lt;td&gt;Greek&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;EnglishToGreek, en_el&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;German&lt;/td&gt;
&lt;td&gt;English&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;GermanToEnglish, &lt;span lang=&quot;de&quot; xml:lang=&quot;de&quot; xml:lang=&quot;de&quot;&gt;Englisch&lt;/span&gt;, de_en&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td&gt;German&lt;/td&gt;
&lt;td&gt;French&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;GermanToFrench, &lt;span lang=&quot;de&quot; xml:lang=&quot;de&quot; xml:lang=&quot;de&quot;&gt;franzoesisch, Franzoesisch, französisch, Französisch,&lt;/span&gt; de_fr&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;Spanish&lt;/td&gt;
&lt;td&gt;English&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;SpanishToEnglish, &lt;span lang=&quot;es&quot; xml:lang=&quot;es&quot; xml:lang=&quot;es&quot;&gt;Inglés, Ingles,&lt;/span&gt; es_en&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td&gt;Spanish&lt;/td&gt;
&lt;td&gt;French&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;SpanishToFrench, &lt;span lang=&quot;es&quot; xml:lang=&quot;es&quot; xml:lang=&quot;es&quot;&gt;frances, Frances, francés, Francés,&lt;/span&gt; es_fr&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;French&lt;/td&gt;
&lt;td&gt;English&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FrenchToEnglish, &lt;span lang=&quot;fr&quot; xml:lang=&quot;fr&quot; xml:lang=&quot;fr&quot;&gt;Anglais,&lt;/span&gt; fr_en&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;French&lt;/td&gt;
&lt;td&gt;German&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FrenchToGerman, &lt;span lang=&quot;fr&quot; xml:lang=&quot;fr&quot; xml:lang=&quot;fr&quot;&gt;Allemand, allemand,&lt;/span&gt; fr_de&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;French&lt;/td&gt;
&lt;td&gt;Spanish&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FrenchToSpanish, &lt;span lang=&quot;fr&quot; xml:lang=&quot;fr&quot; xml:lang=&quot;fr&quot;&gt;Espagnol, espagnol,&lt;/span&gt; fr_es&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;French&lt;/td&gt;
&lt;td&gt;Portuguese&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FrenchToPortuguese, &lt;span lang=&quot;fr&quot; xml:lang=&quot;fr&quot; xml:lang=&quot;fr&quot;&gt;Portugais, portugais,&lt;/span&gt; fr_pt&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;French&lt;/td&gt;
&lt;td&gt;Italian&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;FrenchToItalian, &lt;span lang=&quot;fr&quot; xml:lang=&quot;fr&quot; xml:lang=&quot;fr&quot;&gt;Italien, italien,&lt;/span&gt; fr_it&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;Italian&lt;/td&gt;
&lt;td&gt;English&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;ItalianToEnglish, &lt;span lang=&quot;it&quot; xml:lang=&quot;it&quot; xml:lang=&quot;it&quot;&gt;Inglese,&lt;/span&gt; it_en&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;Italian&lt;/td&gt;
&lt;td&gt;French&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;ItalianToFrench, &lt;span lang=&quot;it&quot; xml:lang=&quot;it&quot; xml:lang=&quot;it&quot;&gt;Francese, francese,&lt;/span&gt; it_fr&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;Portuguese&lt;/td&gt;
&lt;td&gt;English&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;PortugueseToEnglish, &lt;span lang=&quot;pt&quot; xml:lang=&quot;pt&quot; xml:lang=&quot;pt&quot;&gt;Inglês,&lt;/span&gt; pt_en&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;Portuguese&lt;/td&gt;
&lt;td&gt;French&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;PortugueseToFrench, &lt;span lang=&quot;pt&quot; xml:lang=&quot;pt&quot; xml:lang=&quot;pt&quot;&gt;francês, Francês,&lt;/span&gt; pt_fr&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Japanese&lt;/td&gt;
&lt;td&gt;English&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;JapaneseToEnglish, ja_en&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Korean&lt;/td&gt;
&lt;td&gt;English&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;KoreanToEnglish, ko_en&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Russian&lt;/td&gt;
&lt;td&gt;English&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;RussianToEnglish, ru_en&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;Simplified Chinese&lt;/td&gt;
&lt;td&gt;English&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;SimplifiedChineseToEnglish, ChineseToEnglish, zh_en&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Traditional Chinese&lt;/td&gt;
&lt;td&gt;English&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;TraditionalChineseToEnglish, zt_en&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;Dutch&lt;/td&gt;
&lt;td&gt;English&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;DutchToEnglish, &lt;span lang=&quot;nl&quot; xml:lang=&quot;nl&quot; xml:lang=&quot;nl&quot;&gt;Engels&lt;/span&gt;, nl_en&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;Swedish&lt;/td&gt;
&lt;td&gt;English&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;SwedishToEnglish, &lt;span lang=&quot;sv&quot; xml:lang=&quot;sv&quot; xml:lang=&quot;sv&quot;&gt;Engelska, engelska&lt;/span&gt;, sv_en&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Arabic&lt;/td&gt;
&lt;td&gt;English&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;ArabicToEnglish, ar_en&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Polish&lt;/td&gt;
&lt;td&gt;English&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;PolishToEnglish, pl_en&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Greek&lt;/td&gt;
&lt;td&gt;English&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;GreekToEnglish, el_en&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;&lt;a name=&quot;GoogleTranslations&quot; id=&quot;GoogleTranslations&quot;&gt;Google Translations&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As of 2011-12-01, Google has eliminated free access to their translation APIs, so they are no longer available through Frink.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;TranslatorProgram&quot; id=&quot;TranslatorProgram&quot;&gt;Translator Program&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here's a small program that can be used to make a mini-translator for a specific language. It allows you to enter phrases to be translated without entering the quotes and other bits. It will continue to translate phrases until you click the &quot;OK&quot; button without entering a phrase, or until you cancel the dialog using your windowing system's methods. (See &lt;a href=&quot;https://frinklang.org/#MakingInteractiveInterfaces&quot;&gt;Making Interactive Interfaces&lt;/a&gt; for more details.)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;while phrase=input[&quot;Enter phrase in Portuguese: &quot;]&lt;br /&gt;   println[phrase -&amp;gt; FromPortuguese]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Even though &lt;a href=&quot;http://www.json.org/&quot; target=&quot;_blank&quot;&gt;JSON&lt;/a&gt; (JavaScript Object Notation) is a terrible standard based on an even more terrible language, (JavaScript doesn't even have &lt;em&gt;integers&lt;/em&gt;, if you can believe that,) you can still parse it easily in Frink.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;parseJSON[&lt;em&gt;string&lt;/em&gt;]&lt;/code&gt; will parse a JSON document and return it as a Frink datatype, with the top level being either a &lt;code&gt;dict&lt;/code&gt; or an &lt;code&gt;array&lt;/code&gt;, depending on the types included in the document. (The top-level of a JSON document can either be an object or an array.) Objects are converted to a Frink &lt;code&gt;dict&lt;/code&gt; with the keys stored as strings. The &lt;code&gt;null&lt;/code&gt; type is converted to &lt;code&gt;undef&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;Bitcoin&quot; id=&quot;Bitcoin&quot;&gt;Bitcoin&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As a demonstration of JSON parsing, the following example reads from a remote URL which returns a JSON document, making the current value of Bitcoin into a globally-accessible Frink unit according to the CoinDesk Bitcoin Index (Powered by &lt;a href=&quot;http://www.coindesk.com/price/&quot; target=&quot;_blank&quot;&gt;CoinDesk&lt;/a&gt;). See the &lt;a href=&quot;http://www.coindesk.com/api/&quot; target=&quot;_blank&quot;&gt;CoinDesk API&lt;/a&gt; for information about the various data sources available.&lt;/p&gt;
&lt;p&gt;Note that the following program is essentially a one-line program that parses a JSON document and extracts its data with correct units of measure in the result.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;bitcoin := parseJSON[read[&quot;http://api.coindesk.com/v1/bpi/currentprice/USD.json&quot;]]@&quot;bpi&quot;@&quot;USD&quot;@&quot;rate_float&quot; USD&lt;/code&gt;&lt;/p&gt;&lt;p&gt;BTC := bitcoin &lt;/p&gt;&lt;p&gt;XBT := bitcoin &lt;/p&gt;&lt;p&gt;satoshi := 1e-8 bitcoin&lt;/p&gt;
&lt;p&gt;The value of a certain number of Bitcoins can be then converted like any other currency.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;0.1 bitcoin&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;63.29625 dollar (currency)&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Or, you can convert in the reverse direction, for example, if you want to pay someone 10 Euro:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;10 Euro -&amp;gt; bitcoin&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;0.02189559&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;This code is available, with more comments, in the &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=bitcoin.frink&quot;&gt;bitcoin.frink&lt;/a&gt; sample program.&lt;/p&gt;
&lt;p&gt;Also, if this is useful to you, you can pay me in Bitcoin at the address: &lt;code&gt;1dersa3eR2tXQATLCqTrqQ84aecpQBVmm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Frink has the ability to define specific points in time and add time intervals to them, to convert between timezones, or to subtract dates from each other. Date literals are surrounded by pound signs (&lt;code&gt;#&lt;/code&gt;) and can be entered in a wide variety of formats, but I prefer a format like:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;# yyyy-MM-dd HH:mm:ss #&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that I've chosen to have most-significant digits first, as is only logical (the world will realize this someday.) You can have whitespace preceding or following the # signs for readability. All of the predefined formats are defined in &lt;a href=&quot;https://frinklang.org/frinkdata/dateformats.txt&quot;&gt;&lt;code&gt;/data/dateformats.txt&lt;/code&gt;&lt;/a&gt;. Check that file first to see the formats that are already defined. If the format you want is not there, see below for ways to define your own formats.&lt;/p&gt;
&lt;p&gt;You can also parse a string into a date using the &lt;code&gt;parseDate[&lt;em&gt;string&lt;/em&gt;]&lt;/code&gt; function. This returns the string parsed into a date/time datatype, or returns &lt;code&gt;undef&lt;/code&gt; if the string cannot be parsed as a date using any of the defined date formats.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;SpecifyingTimezones&quot; id=&quot;SpecifyingTimezones&quot;&gt;Specifying Timezones&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All date/time formats also allow a timezone specifier at the end. This timezone specifier can be a 3-letter code like &quot;UTC&quot; or &quot;MST&quot;, but you can also use the name of a country or U.S. state (if the country or state has a single time zone) or a selected city (of course, not all cities are available.) This means that you don't have to know when daylight savings time starts and ends. The names are chosen from the globally-used Olson timezone database, and Frink allows shortening of the Olson timezones, say, from &quot;Europe/Paris&quot; to simply &quot;Paris&quot;. The following are all valid inputs:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;# 2002-01-03 10:00 AM New York #&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;# 2002-01-03 10:00 AM Colorado #&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;# 2002-01-03 10:00 AM US/Mountain #&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;# 2002-01-03 10:00 AM Eastern #&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;# 2002-01-03 10:00 AM Hawaii #&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;# 2002-01-03 10:00 AM America/New_York #&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;# 2002-01-03 10:00 AM France #&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;# 2002-01-03 10:00 AM Paris #&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;# 2002-01-03 10:00 AM Europe/Paris #&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you do &lt;em&gt;not&lt;/em&gt; specify a timezone, the timezone used will be the timezone obtained from your Java Virtual Machine (which is probably the timezone set on &lt;em&gt;your&lt;/em&gt; computer.)&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;CustomTimezones&quot; id=&quot;CustomTimezones&quot;&gt;Custom Timezones&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;While the Olson timezone database is very complete, and has named rules for basically all official timezones in the world, sometimes your data source only tells you the offset from UTC or GMT, or may even have custom offsets in minutes. If this is the case, the timezone offset from UTC can be specified in one of the following formats:&lt;/p&gt;
&lt;ul&gt;&lt;li class=&quot;code&quot;&gt;+0700&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;-0700&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;+07:00&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;-07:00&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;GMT+0700&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;GMT-0700&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;GMT+07:00&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;GMT-07:00&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;So, for example, if your data source is in the ISO-8601 format that doesn't allow you to use named timezones (it only allows only numbered timezones or the letter &lt;code&gt;Z&lt;/code&gt;) and looks like:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;2014-06-02T02:24:10-06:00&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then Frink will parse the trailing &lt;code&gt;-06:00&lt;/code&gt; as a timezone specification. (Again, see all the date formats that Frink parses by default in the &lt;a href=&quot;https://frinklang.org/frinkdata/dateformats.txt&quot;&gt;&lt;code&gt;/dateformats.txt&lt;/code&gt;&lt;/a&gt; file.)&lt;/p&gt;
&lt;p&gt;The trailing &lt;code&gt;Z&lt;/code&gt; (for &quot;Zulu time&quot;, an alias for UTC,) in the following ISO-8601 format indicates that the time is in UTC.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;2014-06-02T02:24:10Z&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;TimezoneWarning&quot; id=&quot;TimezoneWarning&quot;&gt;Timezone Warning&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; The Olson timezone database and the POSIX standard (and the Java Virtual Machine) define timezones called something like &lt;code&gt;Etc/GMT+7&lt;/code&gt; (or, using Frink's shorter notation, &lt;code&gt;GMT+7&lt;/code&gt;), but you must be &lt;em&gt;most strongly warned&lt;/em&gt; that the sign convention of these zones is &lt;em&gt;opposite&lt;/em&gt; of what any rational person would choose, and &lt;em&gt;opposite&lt;/em&gt; of the other sign conventions in Frink! In the Olson/POSIX/Java world, &lt;code&gt;GMT-7&lt;/code&gt; is actually 7 hours &lt;em&gt;ahead/east&lt;/em&gt; of GMT. Yes, in that weird world, &lt;code&gt;GMT-7&lt;/code&gt; means GMT &lt;em&gt;plus&lt;/em&gt; seven hours. Augh. (And you wonder why all of my documentation is full of diatribes against the stupidity of almost every major standard.)&lt;/p&gt;
&lt;p&gt;This is a horrible, insane convention and it &lt;em&gt;will&lt;/em&gt; bite you or the people you try to communicate with (unless you both accidentally share the same random form of insanity and wrongness.) They will think you are crazy if you follow this convention. Yet it's the convention used by a large fraction of the world's software, so Frink keeps these timezones around (for now) in case you have to communicate with other software that uses the insane Olson/POSIX conventions. But &lt;em&gt;do not&lt;/em&gt; use these conventions otherwise.&lt;/p&gt;
&lt;p&gt;The 4-digit timezone formats listed in the &lt;a href=&quot;https://frinklang.org/#CustomTimezones&quot;&gt;Custom Timezones&lt;/a&gt; section above use correct and rational definitions of these sign conventions. If you are using custom timezones, you are most strongly warned to use the 4-digit versions like &lt;code&gt;GMT+0200&lt;/code&gt; or &lt;code&gt;GMT+12:00&lt;/code&gt;. These will be correct. &lt;code&gt;GMT+0200&lt;/code&gt; will mean GMT &lt;em&gt;plus&lt;/em&gt; 2 hours. But don't confuse these 4-digit versions with the shorter 1- or 2-digit Olson/POSIX/Java versions like &lt;code&gt;GMT+2&lt;/code&gt; or &lt;code&gt;GMT+12&lt;/code&gt; or &lt;code&gt;Etc/GMT+2&lt;/code&gt; which should be considered weird and wrong (unless you're communicating with a source that produces these timezone names according to the weird and wrong Olson/POSIX/Java rules. For now, Frink will let you use those weird conventions, but it will scowl and furrow its brow at you and someday in the future it may not allow them at all. I might completely disallow the shorter versions of these timezone names (&lt;em&gt;i.e.&lt;/em&gt; reject &lt;code&gt;GMT+7&lt;/code&gt; while still allowing the more foolhardy &lt;code&gt;Etc/GMT+7&lt;/code&gt;)&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;ListingTimezones&quot; id=&quot;ListingTimezones&quot;&gt;Listing Timezones&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The function &lt;code&gt;timezones[]&lt;/code&gt; will return an enumeration of all known time zone names.&lt;/p&gt;
&lt;p&gt;Please note that your Java implementation may not have all of the timezones named in these examples. Notably, Java 1.1 distributions tended to use only a small number of three-letter timezones, like &lt;code&gt;JST&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;timezones[&lt;em&gt;pattern&lt;/em&gt;]&lt;/code&gt; with one argument will return all timezone names that match the specified pattern. The pattern can be anything matched by the &lt;a href=&quot;https://frinklang.org/#select&quot;&gt;select&lt;/a&gt; function: that is, a function (that returns &lt;code&gt;true&lt;/code&gt; for matches,) a regular expression, or an exact substring. The following returns all the names of all timezones that contain the exact string &lt;code&gt;&quot;Central&quot;&lt;/code&gt;:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;timezones[&quot;Central&quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[Canada/Central, Central, Central_African_Republic, Central African Republic, US/Central]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The following example will return the timezones that contain the specified string &quot;Den&quot; with a case-insensitive match, using the &lt;a href=&quot;https://frinklang.org/#select&quot;&gt;&lt;code&gt;select&lt;/code&gt;&lt;/a&gt; function and a &lt;a href=&quot;https://frinklang.org/#RegularExpressions&quot;&gt;regular expression&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;select[timezones[], %r/Den/i]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[Aden, Sweden, Denver, America/Denver, Asia/Aden, Brazil/DeNoronha, Denmark, DeNoronha]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;timezone[]&lt;/code&gt; with no arguments will return the name of the default timezone.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;SloppyTimeSpecifications&quot; id=&quot;SloppyTimeSpecifications&quot;&gt;Sloppy Time Specifications&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you don't specify an exact date, the date will be treated roughly as &quot;today.&quot; This is useful for getting a quick-and-dirty timezone conversion, but if you want to get the day right, you should specify the date as above.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;Conversion to local timezone, assuming today:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;# 6:00 PM Bosnia #&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;AD 2002-01-06 10:00:00.000 AM (Sun) Mountain Standard Time&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;Conversion of local time to another timezone:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;# 6:00 PM # -&amp;gt; Japan&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;AD 2002-01-07 10:00:00.000 AM (Mon) Japan Standard Time&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;Conversion between arbitrary timezones:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;# 6:00 PM Bosnia # -&amp;gt; &quot;New York&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;AD 2002-01-06 12:00:00.000 PM (Sun) Eastern Standard Time&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that running the above simplified conversions at different times of the year will give you different results because of differences in the Daylight Savings Time rules for each country.&lt;/p&gt;
&lt;p&gt;Also, please note that your Java implementation may not have all of the timezones named in these examples. Notably, Java 1.1 distributions tended to use only a small number of three-letter timezones, like &lt;code&gt;JST&lt;/code&gt;. Use the &lt;a href=&quot;https://frinklang.org/#ListingTimezones&quot;&gt;&lt;code&gt;timezones[]&lt;/code&gt;&lt;/a&gt; function to list the timezones defined on your system.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;CurrentTime&quot; id=&quot;CurrentTime&quot;&gt;Current Time&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The function &lt;code class=&quot;input&quot;&gt;now[]&lt;/code&gt; will return the current date/time.&lt;/p&gt;
&lt;p&gt;In an interactive session, you can use the string &lt;code class=&quot;input&quot;&gt;##&lt;/code&gt; as shorthand for &quot;now.&quot; This should evaluate to the time at which the value was &lt;em&gt;parsed&lt;/em&gt;, which is why it won't usually do what you intend in a program... the value would be the time the program was originally run and parsed.&lt;/p&gt;
&lt;p&gt;Time is only as accurate as your computer's clock setting. (I use &lt;a href=&quot;http://www.atomtime.com/&quot;&gt;AtomTime&lt;/a&gt; on Windows machines to keep the clock synchronized to the atomic clock.)&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;TimezoneConversions&quot; id=&quot;TimezoneConversions&quot;&gt;Timezone Conversions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;By default, times are displayed in the local timezone and using your locale information (but are internally stored correctly in Julian Day relative to Universal Time.) You can also convert to another time format by specifying it after the arrow operator. &quot;JD&quot; for Julian Day, &quot;JDE&quot; for Julian Day (Ephemeris) referenced to Dynamical Time, &quot;MJD&quot; for Modified Julian Day are supported, as well as finding the times in selected timezones, cities and countries:&lt;/p&gt;
&lt;p&gt;Example: &lt;em&gt;Sky &amp;amp; Telescope&lt;/em&gt; predicted that the peak of this year's Perseid meteor shower might be around August 12, 2001 at 0400 UTC:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;Converting to local time (the default behavior:)&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;# 2001-08-12 04:00 UTC #&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;AD 2001-08-11 10:00:00.000 PM (Sat) Mountain Daylight Time&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;Converting to another time zone:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;# 2001-08-12 04:00 UTC # -&amp;gt; Japan&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;AD 2001-08-12 01:00:00.000 PM (Sun) Japan Standard Time&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;Current time in Germany:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;now[] -&amp;gt; Germany&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;AD 2001-12-28 07:20:01.508 AM (Fri) Central European Time&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;Current time in another state that just has a single timezone:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;now[] -&amp;gt; Hawaii&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;AD 2010-12-28 07:20:01.508 AM (Fri) Hawaii Standard Time&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;Current Julian Day:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;now[] -&amp;gt; JD&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;JD 2452824.5679731136&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;Current Julian Day Ephemeris:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;now[] -&amp;gt; JDE&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;JD 2452824.578919213&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;Convert Julian Day Ephemeris to a date:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;JDE[2451545.0]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;AD 2000-01-01 04:58:56.170 AM (Sat) Mountain Standard Time&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Actually, since 2003-06-12, Frink uses full precision (usually rational numbers) when storing dates, so the Julian day may come out as a rational number like:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;output&quot;&gt;JD 211924042672877/86400000 (approx. 2452824.5679731136)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you don't desire this much precision, you can use the &lt;code&gt;JD[&lt;em&gt;date&lt;/em&gt;]&lt;/code&gt; or &lt;code&gt;MJD[&lt;em&gt;date&lt;/em&gt;]&lt;/code&gt; function and divide by &lt;code&gt;1.0 days&lt;/code&gt; to get the Julian date as a floating-point number, not a string or a rational number:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;JD[now[]] / (1.0 days)&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;2452824.5679731136&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;DateTimeArithmetic&quot; id=&quot;DateTimeArithmetic&quot;&gt;Date/Time Arithmetic&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can subtract one date from another, or add/subtract a time interval to a date. So, if I wanted to find out when I was 1 billion seconds old, I add it to my birthdate:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;#1969-08-19 16:54 Mountain# + 1 billion seconds&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;AD 2001-04-27 06:40:40.000 PM (Fri) Mountain Daylight Time&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That was pretty recently. You not only forgot my birthday but you forgot my 1-billion-second-anniversary. Bastard. I have a &lt;a href=&quot;http://www.amazon.com/exec/obidos/wishlist/1HBWTNB5L6H3J/ref=wl_em_to?add-fav=1&quot;&gt;wish list&lt;/a&gt; at Amazon.com if you still want to buy me something.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You may notice that adding units of months or years (or commonyear, etc.) may not give you the results you expect--that is because months and years are &lt;em&gt;not&lt;/em&gt; fixed-size units, and even having a unit called &quot;month&quot; or &quot;year&quot; is inherently ill-advised. Perhaps later there will be &quot;increment/decrement&quot; of these individual fields on Date objects, but it's better to make sure that you understand these are &lt;em&gt;also&lt;/em&gt; inherently troublesome and often meaningless operations. (&lt;em&gt;e.g.&lt;/em&gt; what does it mean to increment the month on a date representing Jan. 31?) Use fixed-size units if you can.&lt;/p&gt;
&lt;p&gt;You can subtract one date from another, and receive an answer as a Unit with dimensions of time (that you can convert to any scale you want... you're used to this by now.) For example, if you want to know how many days until Christmas:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;#2002-12-25# - now[] -&amp;gt; days&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;105.70975056709&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(Try inverting the above calculation to see exactly when I wrote this!)&lt;/p&gt;
&lt;p&gt;Note that these calculations do not take leap seconds into account by default. If you want these calculations to take leap seconds into account, see the &lt;a href=&quot;https://frinklang.org/#LeapSeconds&quot;&gt;Leap Seconds&lt;/a&gt; section of the documentation.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;NotesOnDates&quot; id=&quot;NotesOnDates&quot;&gt;Notes on Dates&lt;/a&gt;&lt;/h3&gt;
&lt;p class=&quot;warning&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; The following notes apply to Frink release 2008-08-02 and later. Previous releases may have handled the transition between Julian and Gregorian dates and large BC years inconsistently.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Frink models the switch between the Julian and Gregorian calendars. This switch occurs between October 4, 1582 (Julian) which was followed immediately by October 15, 1582 (Gregorian). However, you should be warned that many countries observed the switch from the Julian to the Gregorian calendar in later years. (As late as 1918 in Russia, or 1923 for Greece.) When reviewing historical dates, you need to verify and double-check your author's assumptions about dates and calendar systems.&lt;/li&gt;
&lt;li&gt;Dates prior to this switch date are parsed and displayed as their dates in the Julian calendar.&lt;/li&gt;
&lt;li&gt;Frink follows Julian leap year rules before the switch date (all years divisible by 4 are leap years) and Gregorian leap year rules after the switch (if a year is divisible by 100, it is only a leap year if it is also divisible by 400. Otherwise, all other years divisible by 4 are leap years.)&lt;/li&gt;
&lt;li&gt;Parsing a date between the switch dates will result in undefined behavior.&lt;/li&gt;
&lt;li&gt;Julian date &lt;code&gt;# AD 0001-01-01 #&lt;/code&gt; (Julian) was preceded immediately by &lt;code&gt;# BC 0001-12-31 #&lt;/code&gt; (Julian). There is no year 0, and negative years are intentionally disallowed when parsing, as they are often treated inconsistently by authors and scholars. Again, if you encounter a negative year in a publication, you need to examine your author's assumptions about years before AD 0001.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you want to enter date/time values in a specific format, you can enter new date formats on the fly. Date formats are enclosed between sets of 3 pound signs: &lt;code&gt;###&lt;em&gt;pattern&lt;/em&gt;###&lt;/code&gt;. After defining a new pattern, dates between pound signs should be recognized. For readability, you may have leading or trailing space in your formats or dates. For example:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;### yyyy-MM-dd ###&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;#2001-09-10#&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;Sep 10, 2001 12:00:00 AM&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can also define the default &lt;em&gt;output&lt;/em&gt; format with 4 pound signs. Without a definition in the &lt;a href=&quot;https://frinklang.org/frinkdata/dateformats.txt&quot;&gt;dateformats.txt&lt;/a&gt; file, you get the Java default (which should theoretically get it from your system's settings, or mine if you're using the web interface,) but for lots of info, try something like:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;#### G yyyy-MM-dd hh:mm:ss.SSS a (E) zzzz ####&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Date format expressions can be assigned to variables and/or used on the right-hand side of a conversion operator ( &lt;code&gt;-&amp;gt;&lt;/code&gt; ). To output a date in a specified format, use something like:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;fmt = ### HH:mm ###&lt;br /&gt;now[] -&amp;gt; fmt&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;23:55&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you want to format a date with both a specific format and a timezone, make the right-hand-side of the conversion operator into a 2-argument bracketed list with the first argument indicating the date format and the second a &lt;em&gt;string&lt;/em&gt; indicating the timezone name:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;fmt = ### yyyy-MM-dd hh:mm a (E) zzzz ###&lt;br /&gt;# 2003-06-12 02:25 PM Mountain # -&amp;gt; [fmt, &quot;Japan&quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;2003-06-13 05:25 AM (Fri) Japan Standard Time&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In these patterns, all ASCII letters are reserved as pattern letters, which are defined as the following:&lt;/p&gt;
&lt;table border=&quot;1&quot; summary=&quot;Date format patterns&quot; readability=&quot;9.5&quot;&gt;&lt;tr&gt;&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;th&gt;Presentation&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;G&lt;/td&gt;
&lt;td&gt;era designator&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;AD&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;y&lt;/td&gt;
&lt;td&gt;year&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;1996 &lt;em&gt;(Please don't use 2-digit years. It's just wrong. Fix your data source if you can.)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;M&lt;/td&gt;
&lt;td&gt;month in year&lt;/td&gt;
&lt;td&gt;Text &amp;amp; Number&lt;/td&gt;
&lt;td&gt;July &amp;amp; 07 &lt;em&gt;(See below. 3 or more: use text, otherwise use number.)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;d&lt;/td&gt;
&lt;td&gt;day in month&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;h&lt;/td&gt;
&lt;td&gt;hour in am/pm (1-12)&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;H&lt;/td&gt;
&lt;td&gt;hour in day (0-23)&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;m&lt;/td&gt;
&lt;td&gt;minute in hour&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;s&lt;/td&gt;
&lt;td&gt;second in minute&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;55&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;13.5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;S&lt;/td&gt;
&lt;td&gt;millisecond&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td readability=&quot;12&quot;&gt;978
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Due to bugs/features in Java's java.date.SimpleDateParser class, you should only use a single &lt;code&gt;S&lt;/code&gt; in patterns, (which will match up to 3 digits) because if you have an &lt;code&gt;&quot;.SSS&quot;&lt;/code&gt; specifier but just pass, say, &lt;code&gt;&quot;.3&quot;&lt;/code&gt; for the milliseconds, Java will parse that as &lt;code&gt;&quot;.003&quot;&lt;/code&gt; for some insane reason!&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;E&lt;/td&gt;
&lt;td&gt;day in week&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Tuesday&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;D&lt;/td&gt;
&lt;td&gt;day in year&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;189&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;F&lt;/td&gt;
&lt;td&gt;day of week in month&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;2 (2nd Wed in July)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;w&lt;/td&gt;
&lt;td&gt;week in year&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;W&lt;/td&gt;
&lt;td&gt;week in month&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;a&lt;/td&gt;
&lt;td&gt;am/pm marker&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;PM&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;k&lt;/td&gt;
&lt;td&gt;hour in day (1-24)&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;K&lt;/td&gt;
&lt;td&gt;hour in am/pm (0-11)&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;'&lt;/td&gt;
&lt;td&gt;escape for text&lt;/td&gt;
&lt;td&gt;Delimiter&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;''&lt;/td&gt;
&lt;td&gt;single quote&lt;/td&gt;
&lt;td&gt;Literal&lt;/td&gt;
&lt;td&gt;'&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th colspan=&quot;4&quot;&gt;For use in output specifications only:&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;z&lt;/td&gt;
&lt;td&gt;General timezone&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Pacific Standard Time, PST, GMT-08:00 (&lt;code&gt;z&lt;/code&gt; through &lt;code&gt;zzz&lt;/code&gt; will usually give you the short form like &lt;code&gt;PST&lt;/code&gt; while &lt;code&gt;zzzz&lt;/code&gt; or longer will give you the full name like &lt;code&gt;Mountain Daylight Time&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;Z&lt;/td&gt;
&lt;td&gt;RFC 822 timezone&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;-0800&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The count of pattern letters determine the format:&lt;/p&gt;
&lt;table border=&quot;1&quot; summary=&quot;Time format character count description&quot; readability=&quot;11.5&quot;&gt;&lt;tr&gt;&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;4 or more pattern letters: use full form, less than 4: use short or abbreviated form if one exists.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14&quot;&gt;&lt;td&gt;Number&lt;/td&gt;
&lt;td readability=&quot;11&quot;&gt;The minimum number of digits. Shorter numbers are zero-padded to this amount. Year is handled specially; that is, if the count of &lt;code&gt;y&lt;/code&gt; is 2, the year will be truncated to 2 digits.
&lt;p&gt;&lt;strong&gt;Diatribe:&lt;/strong&gt; However, don't ever use truncated 2-digit years in input or output. It's simply wrong and ambiguous and causes parsing problems. Fix your data source if you can. Did we learn nothing from Y2K? When using 2-digit years, it's often impossible for a &lt;em&gt;human&lt;/em&gt; to reliably guess which format is intended, so obviously Frink can't guess right either.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Text &amp;amp; Number&lt;/td&gt;
&lt;td&gt;3 or more: use text, otherwise use number.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8.5&quot;&gt;&lt;td&gt;Timezone&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;&lt;strong&gt;For output:&lt;/strong&gt; If there are 3 or more &quot;z&quot; characters in a row, use the full name of the timezone, otherwise use the (usually 3-character) abbreviation.
&lt;p&gt;&lt;strong&gt;For input:&lt;/strong&gt; Timezone specifiers are not necessary in a date format and should not be used when specifying an input format string. Timezones will always be allowed at the end of any date literal.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;See the documentation for &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/index.html?java/text/SimpleDateFormat.html&quot;&gt;java.text.SimpleDateFormat&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;OtherDateFormats&quot; id=&quot;OtherDateFormats&quot;&gt;Other Date Formats&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Internally, all dates are represented as the Julian Day (which is essentially just a numeric value indicating the number of days and fractions of days since Julian Day 0, which began at noon UTC on January 1, 4713 B.C. as reckoned on the Julian Calendar. Yes, &lt;em&gt;noon&lt;/em&gt; is the beginning of the day in the Julian Day system.) So noon UTC on September 10, 2001 is JD 2452163.0.&lt;/p&gt;
&lt;p&gt;Julian Day (JD) and Modified Julian Day (MJD) can also be parsed. MJD is defined as Julian Day - 2400000.5. Note that &lt;em&gt;midnight&lt;/em&gt; is the start of a &lt;em&gt;Modified&lt;/em&gt; Julian Day.&lt;/p&gt;
&lt;p&gt;Many astronomical calculations use Julian Day (Ephemeris), usually abbreviated JDE, which is Julian Day with reference to &lt;a href=&quot;https://frinklang.org/#DynamicalTime&quot;&gt;Dynamical Time&lt;/a&gt;, not Universal Coordinated Time (UTC). This can be parsed using the prefix &lt;code&gt;JDE&lt;/code&gt;:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;# JD 2452163.0 #&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;# JDE 2452163.0 #&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;# MJD 52162.5 #&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;# JD 24521631/10 #&lt;/code&gt;   &lt;br /&gt;&lt;code class=&quot;input&quot;&gt;# JD [212263942933679/86400000, 70754647644893/28800000] #&lt;/code&gt;   &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;You can also use the JDE function to convert a number to the corresponding Julian Day Ephemeris value:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;JDE[2451545.0]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;AD 2000-01-01 04:58:56.170 AM (Sat) Mountain Standard Time&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Do not confuse the Julian Day, (which is a single continuous numbering system often used by astronomers, who like the day number to change at noon when they're not working,) with a date in the Julian Calendar, which is almost identical to the Gregorian Calendar we use today, except without the centuries-divisible-by-400 leap-year rules. (The differences are deeper, but that's the big one.)&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;DynamicalTime&quot; id=&quot;DynamicalTime&quot;&gt;Dynamical Time&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dynamical Time is a time system that adjusts for the varying rotation rate of the earth! This is one of the most accurate time systems and is necessary for calculating astronomical events to high accuracy in the past, present, and future.&lt;/p&gt;
&lt;p&gt;The offset ΔT between UTC and Dynamical Time (that is, the time that must be &lt;em&gt;added&lt;/em&gt; to UTC to get Dynamical Time) can be obtained by the function:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;deltaT[&lt;em&gt;date&lt;/em&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You usually won't use this directly, but instead parse dates in Dynamical Time by appending the &lt;code&gt;TD&lt;/code&gt; or &lt;code&gt;Dynamical Time&lt;/code&gt; timezone specifiers when parsing a date. The &lt;code&gt;&lt;a href=&quot;https://frinklang.org/#OtherDateFormats&quot;&gt;JDE&lt;/a&gt;&lt;/code&gt; (Julian Date Ephemeris) format is also referenced to Dynamical Time. For example, the time represented by the Dynamical Time at the year 2000 epoch is:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;epoch = # 2000-01-01 00:00 TD #&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Internally, all times are represented as the Julian Day referenced to UTC, but can be displayed in Dynamical Time if you specify Dynamical Time as the timezone on the right-hand-side of the conversion operator:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;# 2003-10-10 11:26 PM Mountain # -&amp;gt; TD&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;AD 2003-10-11 05:27:04.184 AM (Sat) GMT+00:01&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;InternationalAtomicTime&quot; id=&quot;InternationalAtomicTime&quot;&gt;International Atomic Time (TAI)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;International Atomic Time (TAI) is a system of time based on the &quot;proper time&quot; on earth's geoid. While dates and times in Frink are internally represented as a Julian day referenced to UTC, you can convert between UTC and TAI for any given date using the function &lt;code&gt;TAIMinusUTC[&lt;em&gt;date&lt;/em&gt;]&lt;/code&gt; which returns the value TAI-UTC. This is the cumulative number of leap seconds that have been introduced into the calendar.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;TAIMinusUTC[# 2008-12-01 00:00 UTC#]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;33 s (time)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This facility allows you to adjust for leap seconds, as TAI does not use leap seconds, but UTC does. For more information on handling leap seconds, read on.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;LeapSeconds&quot; id=&quot;LeapSeconds&quot;&gt;Leap Seconds&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;By default, Frink's date/time math (using the &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; operators) does &lt;em&gt;not&lt;/em&gt; correct for leap seconds, but it can track leap seconds when requested. The following functions add and subtract dates, taking leap seconds into account:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Leap Second Functions&quot; readability=&quot;5.5&quot;&gt;&lt;tr&gt;&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;addLeap[&lt;em&gt;date&lt;/em&gt;, &lt;em&gt;offset&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;Adds the specified offset (given as a time) to the specified date, taking leap seconds into account. This is equivalent to:
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;date + offset + TAIMinusUTC[date] - TAIMinusUTC[date+offset]&lt;/code&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td class=&quot;lit&quot;&gt;subtractLeap[&lt;em&gt;date2&lt;/em&gt;, &lt;em&gt;date1&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;Returns date2-date1 with leap seconds taken into account. (d2 is normally the later date.) This returns a time interval between the dates. This is equivalent to:
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;date2 - date1 + TAIMinusUTC[date2] - TAIMinusUTC[date1]&lt;/code&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;For example, to find the exact time between two dates nominally a year apart:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;d1 = # 2008-12-01 00:00 UTC #&lt;br /&gt;d2 = # 2009-12-01 00:00 UTC #&lt;br /&gt;diff = subtractLeap[d2,d1]&lt;br /&gt;diff -&amp;gt; [&quot;days&quot;, &quot;s&quot;]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;365 days, 1 s&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that the duration is slightly longer due to the leap second being introduced at the end of 2008.&lt;/p&gt;
&lt;p&gt;Or, to add a specified duration to a date:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;addLeap[d1, 365 days] -&amp;gt; UTC&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;AD 2009-11-30 PM 11:59:59.000 (Mon) Coordinated Universal Time&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that the resulting time is one second earlier than without leap seconds, due to the leap second introduced at the end of 2008. Note that the exact second of the resultant date/time value is undefined on the leap second boundary (which this calculation includes.) Frink does &lt;em&gt;not&lt;/em&gt; represent the leap second as something like &lt;code&gt;23:59:60.1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Modern leap seconds were first introduced on 1972 January 1, where the value of TAI-UTC became exactly 10 seconds, and leap seconds have been introduced at irregular intervals since then. Leap seconds may be added just before January 1 or July 1 of each year.&lt;/p&gt;
&lt;p&gt;It should be noted that from 1961 January 1 to 1972 January 1, instead of introducing discrete leap seconds, you had to do linear interpolation to convert between TAI and UTC. &lt;em&gt;Be warned that Frink follows this interpolation process between these dates, and the value of UTC-TAI will not be an integer during this period!&lt;/em&gt; Before 1961 Jan 1, this function returns 0 seconds. For dates after the last known leap second is introduced, this function will return the value of TAI-UTC for the last-published leap second (&lt;em&gt;e.g.&lt;/em&gt; 37 seconds after 2017-01-01.)&lt;/p&gt;
&lt;p&gt;For more information on the interpolation, see &lt;a href=&quot;http://maia.usno.navy.mil/ser7/tai-utc.dat&quot;&gt;the US Naval Observatory's tabulation of leap seconds.&lt;/a&gt; This is the file that Frink uses to perform these conversions.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://frinklang.org/#DynamicalTime&quot;&gt;&lt;code&gt;deltaT[&lt;em&gt;date&lt;/em&gt;]&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://frinklang.org/#InternationalAtomicTime&quot;&gt;&lt;code&gt;TAIMinusUTC[&lt;em&gt;date&lt;/em&gt;]&lt;/code&gt;&lt;/a&gt; functions &lt;em&gt;do&lt;/em&gt; take leap seconds into account, though.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;TAI&lt;/code&gt; timezone specifier can be used to convert to/from International Atomic Time:&lt;/p&gt;
&lt;p&gt;Converting a UTC time to TAI:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;d1 = # 2017-11-01 00:00 UTC #&lt;br /&gt;d1 -&amp;gt; TAI&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;AD 2017-11-01 AM 12:00:37.000 (Wed) International Atomic Time&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Converting a TAI time to UTC:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;d2 = # 2017-11-01 00:00 TAI #&lt;br /&gt;d2 -&amp;gt; UTC&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;AD 2017-10-31 PM 11:59:23.000 (Tue) Coordinated Universal Time&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;OtherTimeSystems&quot; id=&quot;OtherTimeSystems&quot;&gt;Other Time Systems&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Additional conversions between time systems can be performed using the following relations:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Terrestrial Time/Dynamical Time:&lt;/strong&gt; TT = TAI + 32.184 seconds &lt;em&gt;(Terrestrial Time is a more modern name for Dynamical Time. See &lt;a href=&quot;https://frinklang.org/#DynamicalTime&quot;&gt;Dynamical Time&lt;/a&gt; section above.)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DeltaT:&lt;/strong&gt; DeltaT = 32.184 s + (TAI-UTC) - (UT1-UTC) &lt;em&gt;(See &lt;a href=&quot;https://frinklang.org/#DynamicalTime&quot;&gt;Dynamical Time&lt;/a&gt; section above. Also note you can find the value of (TAI-UTC) using the &lt;code&gt;TAIMinusUTC[date]&lt;/code&gt; function discussed in the &lt;a href=&quot;https://frinklang.org/#InternationalAtomicTime&quot;&gt;International Atomic Time&lt;/a&gt; section above.)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GPS Time:&lt;/strong&gt; GPS = TAI - 19 s&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Regular expressions allow you to match complex patterns in strings. Frink matches most all of the regular expressions matched by Perl, and most regular expressions are portable between languages like Perl, Ruby, Python, Frink, etc. Frink internally uses the OROMatcher regular expression library, which attempts to match as much of Perl 5's syntax as possible.&lt;/p&gt;
&lt;p&gt;There is a quick &lt;a href=&quot;https://frinklang.org/#RegularExpressionReference&quot;&gt;Regular Expression Reference&lt;/a&gt; below which describes most of the features available.&lt;/p&gt;
&lt;p&gt;If a pattern matches, it returns an array (possibly empty) of all of the &quot;saved&quot; matches inside parentheses. If a pattern does &lt;em&gt;not&lt;/em&gt; match, it returns the value &lt;code&gt;undef&lt;/code&gt;. Since any array (even an empty named one) is treated as a &lt;code&gt;true&lt;/code&gt; value, and &lt;code&gt;undef&lt;/code&gt; is treated as &lt;code&gt;false&lt;/code&gt; (see the &lt;a href=&quot;https://frinklang.org/#Truth&quot;&gt;Truth&lt;/a&gt; section of the documentation,) this makes it easy to test within an &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for line = lines[&quot;http://futureboy.us/&quot;]&lt;br /&gt;   if [email] = line =~ %r/(\w+@\w+\.\w+)/&lt;br /&gt;      println[&quot;Matched email $email&quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(Since a matched pattern always returns an array of values, putting &lt;code&gt;[email]&lt;/code&gt; in square brackets assigns the result, as a single string, to the variable named &lt;code&gt;email&lt;/code&gt;. Without the brackets, it would assign &lt;em&gt;the whole array&lt;/em&gt; to the variable &lt;code&gt;email&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;The matching syntax is similar to Perl or Ruby, with the exception that the pattern is denoted by &lt;code&gt;%r/&lt;em&gt;pattern&lt;/em&gt;/&lt;em&gt;options&lt;/em&gt;&lt;/code&gt; as below:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;line = &quot;New Zealand&quot;&lt;br /&gt;if line =~ %r/Alan/i   &lt;br /&gt;   println[&quot;Matched&quot;]&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the form listed above, no variable interpolation is done in the string. If you need to build up a variable regular expression from a string, use the &lt;code&gt;regex[&lt;em&gt;string&lt;/em&gt;]&lt;/code&gt; or &lt;code&gt;regex[&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;options&lt;/em&gt;]&lt;/code&gt; functions. The sample below is identical to the sample above:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;line = &quot;New Zealand&quot;&lt;br /&gt;re = regex[&quot;Alan&quot;, &quot;i&quot;]&lt;br /&gt;if line =~ re&lt;br /&gt;   println[&quot;Matched&quot;]&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Any part of the pattern surrounded by parentheses are saved off and returned as an &lt;em&gt;array&lt;/em&gt; (even if only one item is returned.) There aren't shortcut &lt;code&gt;$1&lt;/code&gt;... variables like in Perl, and probably never will be, as it's too easy to break code without knowing it.&lt;/p&gt;
&lt;p&gt;The usual idiom is to get return values by breaking apart the array that is returned:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;line = &quot;My name is Inigo Montoya.&quot;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;if [first, last] = line =~ %r/my name is (\w+) (\w+)/i&lt;br /&gt;{&lt;br /&gt;   println[&quot;First name is: $first&quot;]&lt;br /&gt;   println[&quot;Last name is: $last&quot;]&lt;br /&gt;}&lt;/p&gt;
&lt;p&gt;If you don't assign the results to an array in square brackets (even a single-element array,) all matching results are assigned as an array to a single variable:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;line = &quot;My name is Inigo Montoya.&quot;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;results = line =~ %r/my name is (\w+) (\w+)/i&lt;br /&gt;if results&lt;br /&gt;{&lt;br /&gt;   println[&quot;First name is: &quot; + results@0]&lt;br /&gt;   println[&quot;Last name is: &quot; + results@1]&lt;br /&gt;}&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;/g&lt;/code&gt; modifier is used at the end of the pattern, (indicating return &lt;em&gt;all&lt;/em&gt; times matched, not just the first,) this will return an enumerating expression of the items matched, and you should change the &lt;code&gt;if&lt;/code&gt; statement to a &lt;code&gt;for&lt;/code&gt; statement:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;line = &quot;My name is Inigo Montoya.&quot;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;for [first, last] = line =~ %r/my name is (\w+) (\w+)/ig&lt;br /&gt;{&lt;br /&gt;   println[&quot;First name is: $first&quot;]&lt;br /&gt;   println[&quot;Last name is: $last&quot;]&lt;br /&gt;}&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&quot;https://frinklang.org/#IteratingMatches&quot;&gt;Iterating Matches&lt;/a&gt; section of the documentation below for more ways to handle this case.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;RegularExpressionReference&quot; id=&quot;RegularExpressionReference&quot;&gt;Regular Expression Reference&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This section is a quick tutorial on the parts that create a regular expression.&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;BasicPatternsAndMetacharacters&quot; id=&quot;BasicPatternsAndMetacharacters&quot;&gt;Basic Patterns and Metacharacters&lt;/a&gt;&lt;/h4&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Basic Regular Expression patterns&quot; readability=&quot;28.268292682927&quot;&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;abc&lt;/td&gt;
&lt;td&gt;Matches the literal string &lt;code&gt;abc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;dog|cat&lt;/td&gt;
&lt;td&gt;Matches the literal string &lt;code&gt;dog&lt;/code&gt; &lt;em&gt;or&lt;/em&gt; the literal string &lt;code&gt;cat&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;[abz]&lt;/td&gt;
&lt;td&gt;Character class, matches any of the characters &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; or &lt;code&gt;z&lt;/code&gt; (once only.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;[A-Z]&lt;/td&gt;
&lt;td&gt;Character class (with range), matches any uppercase character from A to Z inclusive. (Once only)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;[A-Fa-f0-9_]&lt;/td&gt;
&lt;td&gt;Character class (with multiple ranges), matches any character from A to F &lt;em&gt;or&lt;/em&gt; any character from a to f, or any digit from 0 to 9 or the underscore character.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;[^A-Z]&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Inverting&lt;/em&gt; character class: matches any character &lt;em&gt;except&lt;/em&gt; those from A to Z.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td class=&quot;lit&quot;&gt;\&lt;/td&gt;
&lt;td&gt;Quote the next metacharacter. Necessary if you want to, say, match a literal character in this table (such as periods, parentheses, question marks, etc.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.7701149425287&quot;&gt;&lt;td class=&quot;lit&quot;&gt;.&lt;/td&gt;
&lt;td&gt;Match any character (except newline). To match a literal period, you must write &lt;code&gt;\.&lt;/code&gt; If the &lt;code&gt;/s&lt;/code&gt; (single-line) &lt;a href=&quot;https://frinklang.org/#PatternMatchModifiers&quot;&gt;modifier&lt;/a&gt; is used in the search, this will also match the newline.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;^&lt;/td&gt;
&lt;td&gt;Match the beginning of the string&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;$&lt;/td&gt;
&lt;td&gt;Match the end of the string&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;()&lt;/td&gt;
&lt;td&gt;Save the matched text contained in the parentheses and return it.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;(?:&lt;em&gt;pattern&lt;/em&gt;)&lt;/td&gt;
&lt;td&gt;Grouping only: allows grouping but does not save the result.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;(?=&lt;em&gt;pattern&lt;/em&gt;)&lt;/td&gt;
&lt;td&gt;A zero-width positive look-ahead match. For example, &lt;code&gt;(\w+(?=!))&lt;/code&gt; matches a word followed by an exclamation point, &lt;em&gt;without&lt;/em&gt; including the exclamation point in the results, and without consuming the exclamation point.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8.8474576271186&quot;&gt;&lt;td class=&quot;lit&quot;&gt;(?!&lt;em&gt;pattern&lt;/em&gt;)&lt;/td&gt;
&lt;td&gt;Matches patterns that &lt;em&gt;do not match&lt;/em&gt; the pattern. This is a zero-width look-ahead match, so it never has any width by itself. For example, &lt;code&gt;a(?!b)c&lt;/code&gt; will match &lt;code&gt;ac&lt;/code&gt; because &lt;code&gt;a&lt;/code&gt; is followed by a character that is not &lt;code&gt;b&lt;/code&gt;, (&lt;code&gt;c&lt;/code&gt;), and the zero-width look-ahead match is followed by a &lt;code&gt;c&lt;/code&gt;. See the documentation for the &lt;a href=&quot;https://frinklang.org/#remove&quot;&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt; function for a sample of its use.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;(?#&lt;em&gt;Text&lt;/em&gt;)&lt;/td&gt;
&lt;td&gt;An embedded comment, which is ignored.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt;&lt;a name=&quot;SpecialCharacterClasses&quot; id=&quot;SpecialCharacterClasses&quot;&gt;Special Character Classes&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The following characters classes are available. They are all Unicode-aware: for example, the &lt;code&gt;\d&lt;/code&gt; will match a Sanskrit or Devanagari digit as well.&lt;/p&gt;
&lt;p&gt;Note that a capitalized letter usually matches the inverse of a lowercase letter. For example, &lt;code&gt;\d&lt;/code&gt; matches a digit, while &lt;code&gt;\D&lt;/code&gt; matches a non-digit.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Special Character Classes&quot; readability=&quot;7&quot;&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;\w&lt;/td&gt;
&lt;td&gt;Match a &quot;word&quot; character (alphanumeric plus &quot;_&quot;)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;\W&lt;/td&gt;
&lt;td&gt;Match a non-&quot;word&quot; character (see above)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;\s&lt;/td&gt;
&lt;td&gt;Match a whitespace character&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;\S&lt;/td&gt;
&lt;td&gt;Match a non-whitespace character&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;\d&lt;/td&gt;
&lt;td&gt;Match a digit&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;\D&lt;/td&gt;
&lt;td&gt;Match a non-digit&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;\1, \2, etc&lt;/td&gt;
&lt;td&gt;Backreference to an already-matched pattern (contained in parentheses.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;\b&lt;/td&gt;
&lt;td&gt;Match a word boundary&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;\B&lt;/td&gt;
&lt;td&gt;Match except at a word boundary&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;\A&lt;/td&gt;
&lt;td&gt;Match at beginning of string&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;\Z&lt;/td&gt;
&lt;td&gt;Match at end of string&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt;&lt;a name=&quot;UnicodeCharacterClasses&quot; id=&quot;UnicodeCharacterClasses&quot;&gt;Unicode Character Classes&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The following Unicode/POSIX character classes are available. They are written as &lt;code&gt;[:alpha:]&lt;/code&gt; or its negation &lt;code&gt;[:^alpha:]&lt;/code&gt;. &lt;em&gt;They must always be used inside a character class expression&lt;/em&gt; surrounded by square brackets &lt;code&gt;[]&lt;/code&gt;, which means that you'll usually see the brackets doubled:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;%r/[[:digit:]]/&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;%r/[:digit:]/&lt;/code&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Unicode Character Classes&quot; readability=&quot;11&quot;&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;[[:alpha:]]&lt;/td&gt;
&lt;td&gt;Any alphabetical character.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;[[:alnum:]]&lt;/td&gt;
&lt;td&gt;Any alphanumerical character.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;[[:ascii:]]&lt;/td&gt;
&lt;td&gt;Any character in the ASCII character set.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;[[:blank:]]&lt;/td&gt;
&lt;td&gt;A GNU extension, equal to a space or a horizontal tab&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;[[:cntrl:]]&lt;/td&gt;
&lt;td&gt;Any control character.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;[[:digit:]]&lt;/td&gt;
&lt;td&gt;Any decimal digit, equivalent to &quot;\d&quot;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;[[:graph:]]&lt;/td&gt;
&lt;td&gt;Any printable character, excluding a space.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;[[:lower:]]&lt;/td&gt;
&lt;td&gt;Any lowercase character.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;[[:print:]]&lt;/td&gt;
&lt;td&gt;Any printable character, including a space.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;[[:punct:]]&lt;/td&gt;
&lt;td&gt;Any graphical character excluding &quot;word&quot; characters.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;[[:space:]]&lt;/td&gt;
&lt;td&gt;Any whitespace character. &quot;\s&quot; plus vertical tab (&quot;\cK&quot;).&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;[[:upper:]]&lt;/td&gt;
&lt;td&gt;Any uppercase character.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;[[:word:]]&lt;/td&gt;
&lt;td&gt;Equivalent to &quot;\w&quot;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;[[:xdigit:]]&lt;/td&gt;
&lt;td&gt;Any hexadecimal digit&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt;&lt;a name=&quot;Quantifiers&quot; id=&quot;Quantifiers&quot;&gt;Quantifiers&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The following symbols modify the pattern immediately previous to it, and allow you to specify that a pattern is matched multiple times:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Quantifiers&quot; readability=&quot;10&quot;&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;*&lt;/td&gt;
&lt;td&gt;Match 0 or more times&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;+&lt;/td&gt;
&lt;td&gt;Match 1 or more times&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;?&lt;/td&gt;
&lt;td&gt;Match 0 or 1 times&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;{n}&lt;/td&gt;
&lt;td&gt;Match exactly n times&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;{n,}&lt;/td&gt;
&lt;td&gt;Match at least n times&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;{n,m}&lt;/td&gt;
&lt;td&gt;Match at least n but not more than m times&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;*?&lt;/td&gt;
&lt;td&gt;Match 0 or more times, not greedily&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;+?&lt;/td&gt;
&lt;td&gt;Match 1 or more times, not greedily&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;??&lt;/td&gt;
&lt;td&gt;Match 0 or 1 times, not greedily&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;{n}?&lt;/td&gt;
&lt;td&gt;Match exactly n times, not greedily&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;{n,}?&lt;/td&gt;
&lt;td&gt;Match at least n times, not greedily&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;{n,m}?&lt;/td&gt;
&lt;td&gt;Match at least n but not more than m times, not greedily&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt;&lt;a name=&quot;PatternMatchModifiers&quot; id=&quot;PatternMatchModifiers&quot;&gt;Pattern Match Modifiers&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Zero or more of these modifiers may follow the trailing &lt;code&gt;/&lt;/code&gt; of a pattern match, and affect the behavior of the match, for example:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;%r/&lt;em&gt;pattern&lt;/em&gt;/igmsx&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;%s/&lt;em&gt;from&lt;/em&gt;/&lt;em&gt;to&lt;/em&gt;/igmsxe&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Pattern Match Modifiers&quot; readability=&quot;11.516213847502&quot;&gt;&lt;tr&gt;&lt;th&gt;Modifier&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;i&lt;/td&gt;
&lt;td&gt;Case-&lt;em&gt;in&lt;/em&gt;sensitive pattern-matching. Normally patterns are case-sensitive.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5.5714285714286&quot;&gt;&lt;td class=&quot;lit&quot;&gt;g&lt;/td&gt;
&lt;td&gt;Global matching. Normally, a pattern only matches the first time it is encountered in a string. This forces the pattern to match as many times as it occurs, requiring a loop. See the &lt;a href=&quot;https://frinklang.org/#IteratingMatches&quot;&gt;Iterating Matches&lt;/a&gt; section below for more information.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;m&lt;/td&gt;
&lt;td&gt;Treat string as multiple lines. This means that &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; change from matching the start of the string to matching the start or end of any line anywhere in the string.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;s&lt;/td&gt;
&lt;td&gt;Treat string as a single line. This means that the period character &quot;&lt;code&gt;.&lt;/code&gt;&quot; will match any possible character, &lt;em&gt;including&lt;/em&gt; the newline (which it doesn't match otherwise.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td class=&quot;lit&quot;&gt;x&lt;/td&gt;
&lt;td readability=&quot;7&quot;&gt;Extended pattern: Allows pattern to include whitespace, newlines and comments. Comments must begin with the &lt;code&gt;#&lt;/code&gt;character!
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;%r/my name is\s+    # Phrase followed by 1 or more space characters&lt;br /&gt;   (\w+)    # First name is all word characters&lt;br /&gt;   \s+      # One or more spaces&lt;br /&gt;   (\w+)    # Last name is all word characters&lt;br /&gt;/ix&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2.3095238095238&quot;&gt;&lt;td class=&quot;lit&quot;&gt;e&lt;/td&gt;
&lt;td&gt;Treat the right-hand-side of a search-and-replace as an expression to be evaluated. See &lt;a href=&quot;https://frinklang.org/#SubstitutionWithExpressions&quot;&gt;Substitution with Expressions&lt;/a&gt; below.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;&lt;a name=&quot;IteratingMatches&quot; id=&quot;IteratingMatches&quot;&gt;Iterating Matches&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Repeating regular expression matches (those with the &lt;code&gt;/g&lt;/code&gt; modifier) can be used in an enumerating context (&lt;em&gt;e.g.&lt;/em&gt; in a &lt;code&gt;for&lt;/code&gt; loop,) in which case each pass through the loop will return a match. The following returns:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for [email] = read[&quot;http://futureboy.us/&quot;] =~ %r/(\w+@(?:\w|\.)+\.\w+)/g&lt;br /&gt;   println[email]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;eliasen@mindspring.com&lt;br /&gt;eliasen@mindspring.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(The above URL contains the e-mail address twice.) Note that pattern matches always return a &lt;em&gt;list&lt;/em&gt; of values, (even if only one item is returned,) so to get only the first match, the variable &lt;code&gt;email&lt;/code&gt; must be placed in square brackets.&lt;/p&gt;
&lt;p&gt;If used in a non-enumerating context (such as simple assignment,) the match will return a list-of-lists:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;list = read[&quot;http://futureboy.us/&quot;] =~ %r/(\w+@(?:\w|\.)+\.\w+)/g&lt;br /&gt;println[list]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[[eliasen@mindspring.com], [eliasen@mindspring.com]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This list can be flattened with the &lt;code&gt;flatten[&lt;em&gt;list&lt;/em&gt;]&lt;/code&gt; function:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;println[flatten[list]]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[eliasen@mindspring.com, eliasen@mindspring.com]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A Perl-like search-and-replace operator also exists. The syntax is:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;line =~ %s/&lt;em&gt;pattern&lt;/em&gt;/&lt;em&gt;replacement&lt;/em&gt;/&lt;em&gt;opts&lt;/em&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the expression on the left-hand-side of &lt;code&gt;=~&lt;/code&gt; is assignable, it will be modified in-place. The following fixes a spelling mistake:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;line =~ %s/Frank/Frink/g&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the form listed above, no variable interpolation is done in the &lt;em&gt;from&lt;/em&gt; string. If you need to build up a variable replacement expression from a string, use the &lt;code&gt;subst[&lt;em&gt;fromStr&lt;/em&gt;, &lt;em&gt;toStr&lt;/em&gt;]&lt;/code&gt; or &lt;code&gt;subst[&lt;em&gt;fromStr&lt;/em&gt;, &lt;em&gt;toStr&lt;/em&gt;, &lt;em&gt;options&lt;/em&gt;]&lt;/code&gt; functions. Note that these &lt;em&gt;do not&lt;/em&gt; actually perform the substitution, but create an object that can be used later to perform the substitution. The sample below is identical to the sample above:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;fromStr = &quot;Frank&quot;&lt;br /&gt;rep = subst[fromStr, &quot;Frink&quot;, &quot;g&quot;]&lt;br /&gt;line =~ rep&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can even use the Perl 5 behavior of replacing parenthesized parts of an expression. The first parenthesized pattern on the left-hand side can be denoted by &lt;code&gt;$1&lt;/code&gt; in the replacement, the second by &lt;code&gt;$2&lt;/code&gt; and so on. For example, to change a file with names like &quot;Frink, John&quot; to &quot;John Frink&quot;:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;line =~ %s/(\w+), (\w+)/$2 $1/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can't use &lt;code&gt;$1&lt;/code&gt; and &lt;code&gt;$2&lt;/code&gt; outside of the pattern match, like you can in Perl, though. Another difference from Perl is that the return value of a search-and-replace is the replaced string, and not the number of times replaced. This may change.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;SubstitutionWithExpressions&quot; id=&quot;SubstitutionWithExpressions&quot;&gt;Substitution with Expressions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If the &lt;code&gt;/e&lt;/code&gt; modifier exists on a search-and-replace operation, the right-hand-side of the substitution is treated as an expression. The values saved on the left-hand side in parentheses are put into the variables &lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; , etc. (&lt;em&gt;Note that these variables are only available in the right-hand side of the substitution!&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;The following sample increments every integer it finds in the line.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;&quot;There are 3 lights. My ship is the NCC-1701-D.&quot; =~ %s/(\d+)/eval[$1]+1/eg&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;There are 4 lights. My ship is the NCC-1702-D.&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;&lt;a name=&quot;ReadingLines&quot; id=&quot;ReadingLines&quot;&gt;Reading Lines&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Frink has a useful file/URL input function called &lt;code&gt;lines[&lt;em&gt;URL&lt;/em&gt;]&lt;/code&gt; which reads lines one at a time from the specified URL or &lt;code&gt;java.io.InputStream&lt;/code&gt;. The URL can be an HTTP, file, or FTP URL. It is best used with the &lt;a href=&quot;https://frinklang.org/#ForLoop&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; loop. For example, to fetch and display the contents of a web page:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for line = lines[&quot;http://futureboy.us/&quot;]&lt;br /&gt;   println[line]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;By default, the &lt;code&gt;lines[&lt;em&gt;URL&lt;/em&gt;]&lt;/code&gt; function returns an enumerating expression which returns each line as requested, and forgets about previous lines. If you want to store each line in an array for later use, use the &lt;code&gt;array[]&lt;/code&gt; function:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = array[ lines[&quot;file:data/units.txt&quot;] ]&lt;br /&gt;println[&quot;The data file contains &quot; + length[a] + &quot; lines.&quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Hint: You can use the &lt;a href=&quot;https://frinklang.org/#URLManipulation&quot;&gt;&lt;code&gt;filenameToURL[&lt;em&gt;filename&lt;/em&gt;]&lt;/code&gt;&lt;/a&gt; function to turn a filename into a correctly-escaped URL, even if it has spaces or weird punctuation in it.&lt;/p&gt;
&lt;p&gt;If the first argument is the special string &lt;code&gt;&quot;-&quot;&lt;/code&gt;, then the function will return an enumeration which reads lines from standard input (stdin) one at a time. The following implements a simple &quot;echo&quot; program:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for line = lines[&quot;-&quot;]&lt;br /&gt;   println[line]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or, a simple program to read in and sort the lines from standard input, and print them back out:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;println[join[&quot;\n&quot;,sort[lines[&quot;-&quot;]]]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The argument to the function may also be a &lt;code&gt;java.io.InputStream&lt;/code&gt; which simplifies reading from other input streams (for example, reading from a &lt;code&gt;URLConnection&lt;/code&gt; or an external process, or a pipe.) See the &lt;a href=&quot;https://frinklang.org/#CompressingDecompressingFiles&quot;&gt;Compressing/Decompressing Files&lt;/a&gt; section of the documentation on how to use functions like &lt;code&gt;gunzip&lt;/code&gt; to decompress files while reading them.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&quot;https://frinklang.org/#SpecifyingAlternateEncodings&quot;&gt;Specifying Alternate Encodings&lt;/a&gt; section of the documentation to see how to specify the encoding of the file.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;ReadingEntireFiles&quot; id=&quot;ReadingEntireFiles&quot;&gt;Reading Entire Files&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you're carefree and have lots of memory, you can load the entire contents of a URL (again, file, HTTP, or FTP URL) into a single big honkin' string using the &lt;code&gt;read[&lt;em&gt;URL&lt;/em&gt;]&lt;/code&gt; function:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;bigstring = read[&quot;http://futureboy.us/&quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that this function expects a URL, so to open a file, you must provide an absolute or relative file URL beginning with &lt;code&gt;file:&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;bigstring = read[&quot;file:///absolute/path/to/file&quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;bigstring = read[&quot;file:relative.html&quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Hint: You can use the &lt;a href=&quot;https://frinklang.org/#URLManipulation&quot;&gt;&lt;code&gt;filenameToURL[&lt;em&gt;filename&lt;/em&gt;]&lt;/code&gt;&lt;/a&gt; function to turn a filename into a correctly-escaped URL, even if it has spaces or weird punctuation in it.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;readLines[&lt;em&gt;URL&lt;/em&gt;]&lt;/code&gt; functions will read the contents of an entire URL into an array with one line per entry.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = readLines[&quot;http://futureboy.us/&quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that the same result could be achieved by calling&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array[lines[&quot;http://futureboy.us/&quot;]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Needless to say, this may use up large amounts of memory, so only use it if you need to. Or want to. Do what you like. Run with scissors.&lt;/p&gt;
&lt;p&gt;If the url is the special value &lt;code&gt;&quot;-&quot;&lt;/code&gt; these functions will read all the data passed to standard input (stdin) in one fell swoop. For example, the following implements a simple &quot;echo&quot; program:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;println[read[&quot;-&quot;]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The argument to the function may also be a &lt;code&gt;java.io.InputStream&lt;/code&gt; which simplifies the manipulation of other input streams (for example, reading from a &lt;code&gt;URLConnection&lt;/code&gt; or an external process, or a pipe. See the &lt;a href=&quot;https://frinklang.org/#CompressingDecompressingFiles&quot;&gt;Compressing/Decompressing Files&lt;/a&gt; section of the documentation on how to use functions like &lt;code&gt;gunzip&lt;/code&gt; to decompress files while reading them.&lt;/p&gt;
&lt;p&gt;See the next section for information about specifying the encoding of the file.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;SpecifyingAlternateEncodings&quot; id=&quot;SpecifyingAlternateEncodings&quot;&gt;Specifying Alternate Encodings&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;input&quot;&gt;lines[&lt;em&gt;URL&lt;/em&gt;] and read[&lt;em&gt;URL&lt;/em&gt;]&lt;/code&gt; functions will attempt to set the character encoding correctly based on the &lt;code&gt;Content-Type&lt;/code&gt; HTTP header. If you are not requesting an HTTP URL, or the encoding is not properly specified, or not set in the HTTP headers, these functions will use your system's default character encoding. If the default charset is not appropriate for a file or URL, you can explicitly specify the character encoding of the file using the two-argument versions of the above functions:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;lines[&lt;em&gt;URL&lt;/em&gt;, &lt;em&gt;encoding&lt;/em&gt;]&lt;br /&gt;read[&lt;em&gt;URL&lt;/em&gt;, &lt;em&gt;encoding&lt;/em&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The encoding is a string representing any character encoding that your version of Java supports, &lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;&quot;UTF-8&quot;&lt;/code&gt;, &lt;code&gt;&quot;US-ASCII&quot;&lt;/code&gt;, &lt;code&gt;&quot;ISO-8859-1&quot;&lt;/code&gt;, &lt;code&gt;&quot;UTF-16&quot;&lt;/code&gt;, &lt;code&gt;&quot;UTF-16BE&quot;&lt;/code&gt;, &lt;code&gt;&quot;UTF-16LE&quot;&lt;/code&gt;. Your release of Java may support more charsets, but all implementations of Java are required to support the above. Check the release notes for your Java implementation to see if other charsets are supported.&lt;/p&gt;
&lt;p&gt;In addition, see the sample program &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=encodings.frink&quot;&gt;encodings.frink&lt;/a&gt; which demonstrates how to list all of the encodings available on your system (and their aliases.)&lt;/p&gt;

&lt;p&gt;Text files can be written with the &lt;code&gt;Writer&lt;/code&gt; class. For example:&lt;/p&gt;
&lt;p class=&quot;CODE&quot;&gt;&lt;code&gt;w = new Writer[&quot;filename.txt&quot;]&lt;br /&gt;w.print[2]&lt;br /&gt;w.println[&quot; monkeys.&quot;]&lt;br /&gt;w.close[]&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Writer&lt;/code&gt; class can write out any Unicode text properly in the encoding that you specify (or your system's default encoding, if you don't specify an encoding.) You can also read in files in one encoding and translate them to another encoding.&lt;/p&gt;
&lt;p&gt;For example, the following simple program reads in a file in the UTF-8 encoding and writes it out in the UTF-16 encoding (or you can use it to convert between any encodings that your Java Virtual Machine supports):&lt;/p&gt;
&lt;p class=&quot;CODE&quot;&gt;&lt;code&gt;w = new Writer[&quot;outfile.txt&quot;, &quot;UTF-16&quot;]&lt;br /&gt;w.print[read[&quot;file:infile.txt&quot;, &quot;UTF-8&quot;]]&lt;br /&gt;w.close[]&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://frinklang.org/#SpecifyingAlternateEncodings&quot;&gt;Specifying Alternate Encodings&lt;/a&gt; for information about supported encodings.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;WriterConstructors&quot; id=&quot;WriterConstructors&quot;&gt;Writer Constructors&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Note that calling any of the constructors below immediately checks permissions and opens the file if allowed. Your operating system may only allow one process to open a file for writing at a time.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Writer constructors&quot; readability=&quot;25.18570798412&quot;&gt;&lt;tr&gt;&lt;th&gt;Signature&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;new Writer[&lt;em&gt;filename&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Constructs a &lt;code&gt;Writer&lt;/code&gt; that opens and will write to the specified filename using the operating system's default encoding.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6.0829694323144&quot;&gt;&lt;td class=&quot;lit&quot;&gt;new Writer[&lt;em&gt;filename&lt;/em&gt;,&lt;em&gt;encoding&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Constructs a &lt;code&gt;Writer&lt;/code&gt; that opens and will write to the specified filename using the specified encoding, for example &lt;code&gt;&quot;UTF-8&quot;&lt;/code&gt; See &lt;a href=&quot;https://frinklang.org/#SpecifyingAlternateEncodings&quot;&gt;Specifying Alternate Encodings&lt;/a&gt; for information about supported encodings.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td class=&quot;lit&quot;&gt;new Writer[&lt;em&gt;filename&lt;/em&gt;,&lt;em&gt;encoding&lt;/em&gt;,&lt;em&gt;append&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Constructs a &lt;code&gt;Writer&lt;/code&gt; that opens and will write to the specified filename using the specified encoding. If the encoding is &lt;code&gt;undef&lt;/code&gt; this will use the operating system's default encoding. &lt;code&gt;append&lt;/code&gt; is a boolean value which is &lt;code&gt;true&lt;/code&gt; if you want to append to the file, &lt;code&gt;false&lt;/code&gt; to overwrite it if it exists.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;26.219171483622&quot;&gt;&lt;td class=&quot;lit&quot;&gt;new Writer[&lt;em&gt;filename&lt;/em&gt;,&lt;em&gt;encoding&lt;/em&gt;,&lt;em&gt;append&lt;/em&gt;,&lt;em&gt;bufferSize&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;21.755555555556&quot;&gt;
&lt;p&gt;Constructs a &lt;code&gt;Writer&lt;/code&gt; that opens and will write to the specified filename using the specified encoding. If the encoding is &lt;code&gt;undef&lt;/code&gt; this will use the operating system's default encoding. &lt;code&gt;append&lt;/code&gt; is a boolean value which is &lt;code&gt;true&lt;/code&gt; if you want to append to the file, &lt;code&gt;false&lt;/code&gt; to overwrite it if it exists. &lt;code&gt;bufferSize&lt;/code&gt; is the size of the internal buffer to use in bytes, and must be greater than 0.&lt;/p&gt;
&lt;p&gt;If you specify a buffer size, the file will not be automatically flushed after each &lt;code&gt;println&lt;/code&gt; (which is the default behavior,) so you must remember to close or flush the file before it will all be written. (This is to let you squeeze out a bit more performance.) Note that if the program is interrupted or exits before you call the &lt;code&gt;close[]&lt;/code&gt; method, your changes will not be guaranteed to be written! If you use this constructor, it is recommended to wrap the code in a &lt;a href=&quot;https://frinklang.org/#TryFinally&quot;&gt;&lt;code&gt;try/finally&lt;/code&gt;&lt;/a&gt; block and call &lt;code&gt;close[]&lt;/code&gt; in the &lt;code&gt;finally&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;If no buffer is specified, the file will be flushed after every &lt;code&gt;println&lt;/code&gt; or &lt;code&gt;writeln&lt;/code&gt;.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;new Writer[&lt;em&gt;java.io.Writer&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Constructs a &lt;code&gt;Writer&lt;/code&gt; that wraps the already-opened &lt;code&gt;java.io.Writer&lt;/code&gt; using its already-set encoding.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;new Writer[&lt;em&gt;java.io.OutputStream&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Constructs a &lt;code&gt;Writer&lt;/code&gt; wraps the already-opened &lt;code&gt;java.io.OutputStream&lt;/code&gt; using the operating system's default encoding.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6.1101694915254&quot;&gt;&lt;td class=&quot;lit&quot;&gt;new Writer[&lt;em&gt;java.io.OutputStream&lt;/em&gt;,&lt;em&gt;encoding&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Constructs a &lt;code&gt;Writer&lt;/code&gt; wraps the already-opened &lt;code&gt;java.io.OutputStream&lt;/code&gt; using the specified encoding, for example &lt;code&gt;&quot;UTF-8&quot;&lt;/code&gt;. See &lt;a href=&quot;https://frinklang.org/#SpecifyingAlternateEncodings&quot;&gt;Specifying Alternate Encodings&lt;/a&gt; for information about supported encodings.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;Writer Methods&lt;/h3&gt;
&lt;p&gt;After successful construction of a &lt;code&gt;Writer&lt;/code&gt;, you may call the following methods.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Writer methods&quot; readability=&quot;10.5&quot;&gt;&lt;tr&gt;&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;write[&lt;em&gt;expression&lt;/em&gt;]&lt;br /&gt;print[&lt;em&gt;expression&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Writes the specified expression to the file. Both methods are identical.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;writeln[&lt;em&gt;expression&lt;/em&gt;]&lt;br /&gt;println[&lt;em&gt;expression&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Writes the specified expression to the file and adds a trailing newline. If no buffer has been specified in the constructor, this also flushes the output.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;writeln[]&lt;br /&gt;println[]&lt;/td&gt;
&lt;td&gt;Simply appends a newline to the file. If no buffer has been specified in the constructor, this also flushes the output.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;flush[]&lt;/td&gt;
&lt;td&gt;Flushes any buffered output to the underlying device.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;close[]&lt;/td&gt;
&lt;td&gt;Closes the file, flushing any buffered output first. No more writing is possible after calling this method. &lt;em&gt;Don't forget to close your files, or your output is not guaranteed to be written!&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;If you need to use some more complicated file I/O classes, such as for random I/O or writing raw bytes, you can use Frink's &lt;a href=&quot;https://frinklang.org/#JavaIntrospection&quot;&gt;Java Introspection&lt;/a&gt; facilities to access Java's wide variety of I/O classes, even ones that I haven't conceived of yet. See &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=Writer.frink&quot;&gt;Writer.frink&lt;/a&gt; for a simple example. More classes for lower-level I/O may be forthcoming. Suggestions are welcome.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;CompressingDecompressingFiles&quot; id=&quot;CompressingDecompressingFiles&quot;&gt;Compressing/Decompressing Files&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can read and write to GZIP-compressed files without first compressing or decompressing them on the disk. Files can be compressed or decompressed in memory while reading or writing to/from the disk.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Compressing/uncompressing functions&quot; readability=&quot;8.7535070140281&quot;&gt;&lt;tr&gt;&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3.4912280701754&quot;&gt;&lt;td class=&quot;lit&quot;&gt;gunzip[&lt;em&gt;URL&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Opens the URL (specified as a string) and returns a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/index.html?java/util/zip/GZIPInputStream.html&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;java.util.zip.GZIPInputStream&lt;/code&gt;&lt;/a&gt; that decompresses the contents of the URL. This can be passed to functions that take a &lt;code&gt;java.io.InputStream&lt;/code&gt; such as &lt;code&gt;read[]&lt;/code&gt; and &lt;code&gt;lines[]&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.2892156862745&quot;&gt;&lt;td class=&quot;lit&quot;&gt;gunzip[&lt;em&gt;java.io.InputStream&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/index.html?java/util/zip/GZIPInputStream.html&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;java.util.zip.GZIPInputStream&lt;/code&gt;&lt;/a&gt; that decompresses the specified &lt;code&gt;InputStream&lt;/code&gt;. This can be passed to functions that take a &lt;code&gt;java.io.InputStream&lt;/code&gt; such as &lt;code&gt;read[]&lt;/code&gt; and &lt;code&gt;lines[]&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.7441860465116&quot;&gt;&lt;td class=&quot;lit&quot;&gt;gzip[&lt;em&gt;filename&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Opens the specified filename for writing, compressing any data to it with a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/index.html?java/util/zip/GZIPOutputStream.html&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;java.util.zip.GZIPOutputStream&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;GZIPOutputStream&lt;/code&gt; is returned, and can be passed to any function that takes a &lt;code&gt;java.io.OutputStream&lt;/code&gt; such as &lt;a href=&quot;https://frinklang.org/#WriterConstructors&quot;&gt;&lt;code&gt;new Writer[&lt;em&gt;OutputStream&lt;/em&gt;]&lt;/code&gt;&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.8671328671329&quot;&gt;&lt;td class=&quot;lit&quot;&gt;gzip[&lt;em&gt;java.io.OutputStream&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/index.html?java/util/zip/GZIPOutputStream.html&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;java.util.zip.GZIPOutputStream&lt;/code&gt;&lt;/a&gt; that wraps the specified (already-opened) &lt;code&gt;OutputStream&lt;/code&gt; and compresses any data sent to it. The returned &lt;code&gt;GZIPOutputStream&lt;/code&gt; can be passed to any function that takes a &lt;code&gt;java.io.OutputStream&lt;/code&gt; such as &lt;a href=&quot;https://frinklang.org/#WriterConstructors&quot;&gt;&lt;code&gt;new Writer[&lt;em&gt;OutputStream&lt;/em&gt;]&lt;/code&gt;&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;For example, to write to a compressed file:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;file = &quot;compressed.txt.gz&quot;&lt;br /&gt;out = new Writer[gzip[file]]&lt;br /&gt;out.println[&quot;Knitting and knitting and knitting and knitting and knitting&quot;]&lt;br /&gt;out.println[&quot;and knitting and knitting and knitting...&quot;]&lt;br /&gt;out.close[]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And to read back the contents of the above compressed file:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;file = &quot;compressed.txt.gz&quot;&lt;br /&gt;url = filenameToURL[file]&lt;br /&gt;println[read[gunzip[url]]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or, similarly,&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for line = lines[gunzip[&quot;file:compressed.txt.gz&quot;]]&lt;br /&gt;   println[line]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;These files can be read/written using standard &lt;code&gt;gzip&lt;/code&gt; and &lt;code&gt;gunzip&lt;/code&gt; tools on your operating system.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;EmailHarvesting&quot; id=&quot;EmailHarvesting&quot;&gt;E-mail Harvesting&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The following sample uses &lt;a href=&quot;https://frinklang.org/#RegularExpressions&quot;&gt;regular expression&lt;/a&gt; matching to harvest things that look like e-mail addresses from any URL. The combination of the &lt;code&gt;for&lt;/code&gt; loop and the &lt;code&gt;/g&lt;/code&gt; modifier allows multiple matches to be found in a single line.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;url = input[&quot;Enter a URL: &quot;]&lt;/code&gt;&lt;/p&gt;&lt;p&gt;for line = lines[url]&lt;br /&gt;   for [result] line =~ %r/(\w+@(?:\w|\.)+\.\w+)/g&lt;br /&gt;      println[result]&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Pretty easy, eh? Now you see why you get so much spam e-mail. It's easy to grab e-mail addresses from files or Web pages. Using this capability, Frink can be made to grab any kind of data from other web pages easily.&lt;/p&gt;
&lt;p&gt;Note that pattern matches always return a &lt;em&gt;list&lt;/em&gt; of values, (even if only one item is returned,) so to get only the first match, the variable &lt;code&gt;result&lt;/code&gt; must be placed in square brackets.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;StrippingHTML&quot; id=&quot;StrippingHTML&quot;&gt;Stripping HTML&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The following (ridiculously simple) function fetches the contents of any URL and (somewhat naïvely) strips out the HTML markup.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;stripHTML[url] := read[url] =~ %s/&amp;lt;[^&amp;gt;]*&amp;gt;//gs&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;URLManipulation&quot; id=&quot;URLManipulation&quot;&gt;URL Manipulation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Frink provides a few functions which are useful for manipulating URLs and producing web-spiders:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;input&quot;&gt;url[base, relative]&lt;/code&gt; returns a new string URL made up of the given base and relative parts of a URL. This is useful in resolving relative URLs in an HTML document:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;url[&quot;http://futureboy.us/frinkdocs/index.html&quot;, &quot;whatsnew.html&quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;http://futureboy.us/frinkdocs/whatsnew.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;input&quot;&gt;urlHost[url]&lt;/code&gt; returns a string indicating the hostname of a specifed URL string (e.g. &lt;code&gt;&quot;futureboy.us&quot;&lt;/code&gt;, or an empty string if no host is specified.)&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;input&quot;&gt;urlPath[url]&lt;/code&gt; returns a string indicating the entire path of a specifed URL string, (e.g. &lt;code&gt;&quot;http://futureboy.us/frinkdocs/whatsnew.html&quot;&lt;/code&gt; will return &lt;code&gt;&quot;/frinkdocs/whatsnew.html&quot;&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;input&quot;&gt;urlFile[url]&lt;/code&gt; returns a string indicating the filename of a specifed URL string, that is the last path part of a URL (e.g. &lt;code&gt;&quot;http://futureboy.us/frinkdocs/whatsnew.html&quot;&lt;/code&gt; will return &lt;code&gt;&quot;whatsnew.html&quot;&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;input&quot;&gt;URLEncode[&lt;em&gt;string, encoding&lt;/em&gt;]&lt;/code&gt; encodes a string for use as part of a URL. The encoding should probably be the string &lt;code&gt;&quot;UTF8&quot;&lt;/code&gt; for most applications.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;input&quot;&gt;urlProtocol[url]&lt;/code&gt; returns a string indicating the protocol (e.g., &lt;code&gt;&quot;http&quot;&lt;/code&gt; of a given URL string.)&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;input&quot;&gt;filenameToURL[string]&lt;/code&gt; turns a string containing a filename into a URL string.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;input&quot;&gt;fileURLs[string]&lt;/code&gt; takes a string representing a file or directory and returns an enumeration of files in that directory. Each string is the URL of a file in that directory.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;input&quot;&gt;fileURLsRecursive[string]&lt;/code&gt; takes a string representing a file or directory and returns an enumeration of files in that directory &lt;em&gt;and all its subdirectories.&lt;/em&gt; Each string is the URL of a file in that directory.&lt;/p&gt;
&lt;p&gt;The following program resolves all of the relative URLs in an HTML document and prints their values.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;url = input[&quot;Enter a URL: &quot;]&lt;br /&gt;println[join[&quot;\n&quot;, findURLs[url]]]&lt;/code&gt;&lt;/p&gt;&lt;p&gt;findURLs[u] :=&lt;br /&gt;{&lt;br /&gt;   results = new array&lt;br /&gt;   for [rel] read[u] =~ %r/&amp;lt;\s*A\s+[^&amp;gt;]*HREF\s*=\s*&quot;([^ &quot;]+)&quot;/gsi&lt;br /&gt;      results.push[url[u, rel]]&lt;/p&gt;&lt;p&gt;   return results&lt;br /&gt;}&lt;/p&gt;

&lt;p&gt;In Frink, you can define blocks of executable code which can be assigned to variables, passed to and from functions, and executed as functions. These work just like functions with no name. In fact, that's exactly what they are. The syntax is:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;{ |&lt;em&gt;arglist&lt;/em&gt;| &lt;em&gt;body&lt;/em&gt; }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;These can be multi-line functions, too:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;{ |&lt;em&gt;x, y&lt;/em&gt;|&lt;br /&gt;   println[x+y]&lt;br /&gt;   println[x*y]&lt;br /&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The arguments in &lt;code&gt;arglist&lt;/code&gt; are a (possibly empty) comma-separated list of variable names which are treated just like the formal parameters to a function. The body is one or more statements or expressions to be executed.&lt;/p&gt;
&lt;p&gt;How is this useful? Well, for example the &lt;a href=&quot;https://frinklang.org/#select&quot;&gt;&lt;code&gt;select&lt;/code&gt;&lt;/a&gt; function can take an anonymous function as an argument to help it select items from a list. See its documentation for more information.&lt;/p&gt;
&lt;p&gt;An anonymous function can be called as a function. The current syntax looks just like a function call:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;isEven = { |x| x mod 2 == 0 }&lt;br /&gt;isEven[4]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sort[&lt;em&gt;list&lt;/em&gt;]&lt;/code&gt;will sort lists in which the elements have the same type. When sorting units, the units should be conformal (that is, all should have the same dimensions.) It is important to note that the list will be sorted in-place, that is, the original list will be modified! To get around this, the array should first be copied with the &lt;a href=&quot;https://frinklang.org/#ArrayMethods&quot;&gt;&lt;code&gt;&lt;em&gt;array&lt;/em&gt;.shallowCopy[]&lt;/code&gt; method.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you want to do language-correct sorting of strings, especially for languages with accents, use the &lt;a href=&quot;https://frinklang.org/#LexicalSorting&quot;&gt;Lexical Sorting&lt;/a&gt; methods instead. The default &lt;code&gt;sort[]&lt;/code&gt; is designed to be simple and fast, but does not sort human languages according to their rules.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = [5,2,3,1,4]&lt;br /&gt;sort[a]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[1,2,3,4,5]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The two-argument version &lt;code&gt;sort[&lt;em&gt;list&lt;/em&gt;, &lt;em&gt;func&lt;/em&gt;]&lt;/code&gt; allows you to specify a user-defined comparison routine. The second argument is a anonymous function which contains a user-defined comparison routine. The comparison routine must take 2 arguments (say &lt;code&gt;|a,b|&lt;/code&gt;) and return -1 if a is less than b, 0 if a==b, and 1 if a is greater than b. The following samples are equivalent:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = [5,2,3,1,4]&lt;br /&gt;cmp = { |a,b| a &amp;lt;=&amp;gt; b }&lt;br /&gt;sort[a, cmp]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[1,2,3,4,5]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The default sort is much faster than if you define a user-defined comparison function (about 30 times faster in my tests!) Now I see why Perl has so many anomalous and special-cased optimizations around user-defined sorting.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;sort&lt;/code&gt; function needs additional data to perform its work, you can use the three-argument &lt;code&gt;sort[&lt;em&gt;list&lt;/em&gt;, &lt;em&gt;func&lt;/em&gt;, &lt;em&gt;data&lt;/em&gt;]&lt;/code&gt; function which requires a three-argument comparison function to be passed to it, with the first two arguments being items to compare and the third argument being the arbitrary data. For example, to sort a list by a specified column number:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;list = [[1, &quot;c&quot;], [2, &quot;b&quot;], [3, &quot;a&quot;]]&lt;/code&gt;&lt;/p&gt;&lt;p&gt; cmpfunc = {|a, b, column| a@column &amp;lt;=&amp;gt; b@column}&lt;/p&gt;&lt;p&gt;&lt;br /&gt;sort[list, cmpfunc, 1]&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[[3, a], [2, b], [1, c]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you want the elements in reverse order, you can reverse the sorted list by calling the &lt;code&gt;reverse[&lt;em&gt;list&lt;/em&gt;]&lt;/code&gt; function on the sorted list.&lt;/p&gt;
&lt;p&gt;To sort all of the units with dimensions of time (or by extension, any dimension list) by their magnitude, you can use the following. (Keep in mind that the &lt;code&gt;units&lt;/code&gt; function returns the &lt;em&gt;names&lt;/em&gt; of the units as strings. The function &lt;code&gt;unit[&lt;em&gt;string&lt;/em&gt;]&lt;/code&gt; returns the unit with the specified name.:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;sort[units[time], { |a,b| unit[a] &amp;lt;=&amp;gt; unit[b] }]&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;LexicalSorting&quot; id=&quot;LexicalSorting&quot;&gt;Lexical Sorting&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The default &lt;code&gt;sort[]&lt;/code&gt; functions sort strings in a simple and fast way (according to the order of characters in Unicode,) but in a way that is likely not correct according to the sorting methods for most human languages. To sort strings correctly, &lt;code&gt;lexicalSort[&lt;em&gt;list&lt;/em&gt;]&lt;/code&gt; functions should be used.&lt;/p&gt;
&lt;p&gt;These functions understand alphabetization rules, Unicode normalization rules for characters with accents, alternate ways of specifying the same character, as well as the rules for most human languages and the way that their alphabetization rules differ. They are very clever, and will make you look smart for using them correctly.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;lexicalSort[&lt;em&gt;array&lt;/em&gt;]&lt;/code&gt; sorts an array of strings using the default language and locale settings defined in your Java Virtual Machine:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = [&quot;ökonomisch&quot;, &quot;offenbar&quot;, &quot;olfaktorisch&quot;, &quot;Arg&quot;, &quot;Ärgerlich&quot;, &quot;Arm&quot;, &quot;Assistent&quot;, &quot;Aßlar&quot;, &quot;Assoziation&quot;, &quot;eñe&quot;, &quot;ene&quot;, &quot;enne&quot;]&lt;/code&gt;&lt;/p&gt;&lt;p&gt;lexicalSort[a]&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[Arg, Ärgerlich, Arm, Assistent, Aßlar, Assoziation, ene, eñe, enne, offenbar, ökonomisch, olfaktorisch]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(Note that this was using an English locale, which also has good default rules that work correctly for other languages.) Compare this to the order produced by the basic sort, which doesn't know anything about special characters:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;sort[a]   &lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[Arg, Arm, Assistent, Assoziation, Aßlar, ene, enne, eñe, offenbar, olfaktorisch, Ärgerlich, ökonomisch]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Which bears no resemblance to any alphabetical ordering that most human languages would expect. The price is that lexical sorting is slower and more expensive. But it's a small price for being right, and internationalization-capable.&lt;/p&gt;
&lt;p&gt;Note that the sorting order depends on &lt;em&gt;your&lt;/em&gt; Java Virtual Machine's locale and language settings. If you want to force sorting for a particular language, you can use the &lt;code&gt;lexicalSort[&lt;em&gt;array&lt;/em&gt;, &lt;em&gt;languageCode&lt;/em&gt;]&lt;/code&gt; function to specify its language code using the &lt;a href=&quot;https://www.loc.gov/standards/iso639-2/php/code_list.php&quot;&gt;ISO 639-1&lt;/a&gt; two-letter code for the language. For example, repeating the above example for Turkish, whose language code is &lt;code&gt;&quot;tr&quot;&lt;/code&gt;:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;lexicalSort[a, &quot;tr&quot;]   &lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[Arg, Arm, Assistent, Assoziation, Aßlar, Ärgerlich, ene, eñe, enne, offenbar, olfaktorisch, ökonomisch]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(Note that, according to the rules of Turkish, the letter &lt;code&gt;ä&lt;/code&gt; is treated as a seperate character alphabetized after &lt;code&gt;a&lt;/code&gt;. The same is true for &lt;code&gt;ö&lt;/code&gt; and &lt;code&gt;o&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;If you need extreme control over the sorting order, the second argument of &lt;code&gt;lexicalSort[&lt;em&gt;list&lt;/em&gt;, &lt;em&gt;languageCode&lt;/em&gt;]&lt;/code&gt; can be either a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/text/Collator.html&quot;&gt;&lt;code&gt;java.text.Collator&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html&quot;&gt;&lt;code&gt;java.util.Locale&lt;/code&gt;&lt;/a&gt; object which allows you very detailed control over creating custom sorting rules or locales. Please see the documentation for those classes for details on controlling sorting.&lt;/p&gt;
&lt;p&gt;You can also normalize strings containing Unicode characters into a &quot;canonical&quot; form. See the &lt;a href=&quot;https://frinklang.org/#CorrectStringParsing&quot;&gt;&lt;code&gt;normalizeUnicode[&lt;em&gt;str&lt;/em&gt;]&lt;/code&gt;&lt;/a&gt; function for more information about this.&lt;/p&gt;
&lt;p&gt;If the values to be sorted by the &lt;code&gt;lexicalSort&lt;/code&gt; functions are not strings, they can still be sorted as long as they are comparable to each other. The default sort order will be used when values are not strings.&lt;/p&gt;
&lt;p&gt;If you need a lexical-aware comparison operator that compares two items, see the &lt;a href=&quot;https://frinklang.org/#CorrectStringParsing&quot;&gt;&lt;code&gt;lexicalCompare[&lt;em&gt;str1&lt;/em&gt;, &lt;em&gt;str2&lt;/em&gt;]&lt;/code&gt;&lt;/a&gt; functions.&lt;/p&gt;
&lt;p&gt;This is all pretty cool and powerful, right? Your programs can now demonstrate knowledge about many, many human languages and do the right thing with them!&lt;/p&gt;

&lt;p&gt;The following functions operate on all the elements of an array:&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;select&quot; id=&quot;select&quot;&gt;select&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;select[&lt;em&gt;list&lt;/em&gt;, &lt;em&gt;proc&lt;/em&gt;]&lt;/code&gt; function allows you to select the items from a list for which &lt;code&gt;proc&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. For example, to select the even items from a list:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [0,1,2,3,4,5]&lt;br /&gt;select[ array, { |x| x mod 2 == 0 } ]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[0,2,4]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This successively assigns each element of &lt;code&gt;array&lt;/code&gt; to a new local variable &lt;code&gt;x&lt;/code&gt;, and returns the list of values for which &lt;code&gt;x mod 2&lt;/code&gt; equals zero.&lt;/p&gt;
&lt;p&gt;If the function takes more than one argument, and is passed an array of values, the elements of the array are passed individually as function arguments.&lt;/p&gt;
&lt;p&gt;The following sample selects pairs of numbers which are coprime, that is, do &lt;em&gt;not&lt;/em&gt; contain common factors (this is tested by checking if the greatest common factor is 1.):&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [[2,3], [5,10], [20, 3], [7, 25]]&lt;br /&gt;coprime = {|x,y| gcd[x,y] == 1}&lt;br /&gt;select[array, coprime]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[[2, 3], [20, 3], [7, 25]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The second argument to &lt;code&gt;select[&lt;em&gt;list&lt;/em&gt;, &lt;em&gt;regex&lt;/em&gt;]&lt;/code&gt; can also be a regular expression. This expects the list to contain all strings and returns all of the strings that match the regular expression.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The second argument to &lt;code&gt;select[&lt;em&gt;list&lt;/em&gt;, &lt;em&gt;substr&lt;/em&gt;]&lt;/code&gt; can also be a substring. This expects the list to contain all strings and returns items which contain the specified substring (with an exact match.) If you need a case-insensitive match, the second argument should be a regular expression.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;select&lt;/code&gt; function needs additional data to perform its work, you can use the three-argument &lt;code&gt;select[&lt;em&gt;list&lt;/em&gt;, &lt;em&gt;func&lt;/em&gt;, &lt;em&gt;data&lt;/em&gt;]&lt;/code&gt; function which requires a two-argument function to be passed to it, with the first argument being the item and the second argument the arbitrary data. For example, to select all the elements of a list that are greater a certain number (in the following case, 2):&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [0,1,2,3,4,5]&lt;br /&gt;select[ array, { |x, data| x &amp;gt; data }, 2]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[3,4,5]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Similarly, the three-argument &lt;code&gt;select&lt;/code&gt; function that passes in additional data will pass the data argument as the last argument to your selector function.&lt;/p&gt;
&lt;p&gt;The following example selects pairs whose product is larger than a specific number (in this case, 50).&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [[2,3], [5,10], [20, 3], [7, 25]]&lt;br /&gt;product = {|x,y,data| x*y &amp;gt; data}&lt;br /&gt;select[array, product, 50]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[[20, 3], [7, 25]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Behavior change:&lt;/strong&gt; As of the 2014-05-09 release, the &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;remove&lt;/code&gt; functions now try harder to keep their return values as arrays if passed an array, and an enumerating expression if passed an enumerating expression. In addition, they now keep dictionaries as dictionaries, OrderedLists as OrderedLists, and sets as sets. To obtain other types, &lt;code&gt;toArray[&lt;em&gt;expr&lt;/em&gt;]&lt;/code&gt;, &lt;code&gt;toDict[&lt;em&gt;expr&lt;/em&gt;]&lt;/code&gt;, and &lt;code&gt;toSet[&lt;em&gt;expr&lt;/em&gt;]&lt;/code&gt; functions. If in doubt, use these functions directly to change the return types.) However,closing the results in a &lt;a href=&quot;https://frinklang.org/#ForLoop&quot;&gt;&lt;code&gt;for&lt;/code&gt; loop&lt;/a&gt; will still work to enumerate through all contained objects, no matter what the return type is.)&lt;/p&gt;
&lt;p&gt;This makes these functions now work properly with infinite series, and work more responsively with long-running operations that return information periodically. (&lt;em&gt;e.g.&lt;/em&gt; searches.) This change may also allow significantly-reduced memory consumption, as you can process each element and then forget about it, rather than holding on to a large array of values.&lt;/p&gt;
&lt;p&gt;The inverse of &lt;code&gt;select&lt;/code&gt; is &lt;code&gt;remove&lt;/code&gt;. Read below.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;remove&quot; id=&quot;remove&quot;&gt;remove&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The inverse of the &lt;code&gt;select&lt;/code&gt; function is &lt;code&gt;remove&lt;/code&gt; which works similarly to &lt;code&gt;select&lt;/code&gt;, but &lt;em&gt;removes&lt;/em&gt; all items from a list that match the condition.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;remove[&lt;em&gt;list&lt;/em&gt;, &lt;em&gt;proc&lt;/em&gt;]&lt;/code&gt; function allows you to remove the items from a list for which &lt;code&gt;proc&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. For example, to remove the even items from a list:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [0,1,2,3,4,5]&lt;br /&gt;remove[ array, { |x| x mod 2 == 0 } ]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[1, 3, 5]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This successively assigns each element of &lt;code&gt;array&lt;/code&gt; to a new local variable &lt;code&gt;x&lt;/code&gt;, and removes all values for which &lt;code&gt;x mod 2&lt;/code&gt; equals zero.&lt;/p&gt;
&lt;p&gt;If the function takes more than one argument, and is passed an array of values, the elements of the array are passed individually as function arguments.&lt;/p&gt;
&lt;p&gt;The following sample removes pairs of numbers which are coprime, that is, do &lt;em&gt;not&lt;/em&gt; contain common factors (this is tested by checking if the greatest common factor is 1.):&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [[2,3], [5,10], [20, 3], [7, 25]]&lt;br /&gt;coprime = {|x,y| gcd[x,y] == 1}&lt;br /&gt;remove[array, coprime]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[[5, 10]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The second argument to &lt;code&gt;remove[&lt;em&gt;list&lt;/em&gt;, &lt;em&gt;regex&lt;/em&gt;]&lt;/code&gt; can also be a regular expression. This expects the list to contain all strings and removes all of the strings that match the regular expression, returning the items that did &lt;em&gt;not&lt;/em&gt; match.&lt;/p&gt;
&lt;p&gt;For example, if you wanted to remove all filenames that contained the substring &lt;code&gt;CVS&lt;/code&gt; from a list, you might have to write a somewhat complicated, non-obvious regular expression that does not match that pattern using select:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;select[files, %r/^(.(?!(CVS)))*$/]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or, more simply, use &lt;code&gt;remove&lt;/code&gt; and a simpler pattern that matches the strings we want to remove:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;remove[files, %r/CVS/]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;remove&lt;/code&gt; function needs additional data to perform its work, you can use the three-argument &lt;code&gt;remove[&lt;em&gt;list&lt;/em&gt;, &lt;em&gt;func&lt;/em&gt;, &lt;em&gt;data&lt;/em&gt;]&lt;/code&gt; function which requires a two-argument function to be passed to it, with the first argument being the item and the second argument the arbitrary data. For example, to remove all the elements of a list that match a certain number (in the following case, 2):&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [0,1,2,3,4,5]&lt;br /&gt;remove[ array, { |x, data| x == data }, 2]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[0,1,3,4,5]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Similarly, the three-argument &lt;code&gt;remove&lt;/code&gt; function that passes in additional data will pass the data argument as the last argument to your selector function.&lt;/p&gt;
&lt;p&gt;The following example removes pairs whose product is larger than a specific number (in this case, 50).&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [[2,3], [5,10], [20, 3], [7, 25]]&lt;br /&gt;product = {|x,y,data| x*y &amp;gt; data}&lt;br /&gt;remove[array, product, 50]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[[2, 3], [5, 10]]&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;map&quot; id=&quot;map&quot;&gt;map&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;map[&lt;em&gt;function&lt;/em&gt;, &lt;em&gt;list&lt;/em&gt;]&lt;/code&gt; applies the specified function to all the members of a list, and returns a new list containing the results.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&lt;em&gt;function&lt;/em&gt;&lt;/code&gt; parameter may be either a string containing the name of the function or a function, possibly an &lt;a href=&quot;https://frinklang.org/#AnonymousFunctions&quot;&gt;anonymous function&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If your list of arguments all have the same number of items, you can pass in the function name as a string:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [0,1,4,9]&lt;br /&gt;map[&quot;sqrt&quot;, array]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[0,1,2,3]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You may need to pass in a reference to the function itself as the first parameter. You can do this by calling the &lt;code&gt;getFunction[&lt;em&gt;name&lt;/em&gt;, &lt;em&gt;numArgs&lt;/em&gt;]&lt;/code&gt; function. For example, to return the greatest common denominator of successive pairs of numbers, you might do the following:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [[3,5], [2,10], [24, 36]]&lt;br /&gt;g = getFunction[&quot;gcd&quot;, 2]&lt;br /&gt;map[g, array]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[1,2,12]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or, defining and using an &lt;a href=&quot;https://frinklang.org/#AnonymousFunctions&quot;&gt;anonymous function&lt;/a&gt;:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = [1,2,3]&lt;br /&gt;double = {|a| a*2 }&lt;br /&gt;map[double, array]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[2,4,6]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Anonymous arrays with any number of arguments are allowed, as long as each element of your list is a list containing the right number of items.&lt;/p&gt;
&lt;p&gt;Currently, all elements of the list must have the same number of elements and will resolve to the same function call.&lt;/p&gt;
&lt;p&gt;If the number of items that will be passed to the function is greater than the number of formal arguments defined by the function, all of the extra arguments will be passed as an array to the last argument of the function. For example, if we define a function that only takes one argument, but pass it three items in each list, all three items will be passed as an array:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;concat = {|i| join[&quot;&quot;, i]}&lt;br /&gt;a = [[1,2,3],[4,5,6],[7,8,9]]&lt;br /&gt;map[concat, a]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[123, 456, 789]&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;split&quot; id=&quot;split&quot;&gt;split&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A string can be split into an array using the &lt;code&gt;split[&lt;em&gt;regex&lt;/em&gt;, &lt;em&gt;str&lt;/em&gt;]&lt;/code&gt; function which splits the string into parts. The first argument to the &lt;code&gt;split[&lt;em&gt;pat&lt;/em&gt;, &lt;em&gt;str&lt;/em&gt;]&lt;/code&gt; function can be either a regular expression or a string containing the delimiter. Conversely, the elements of an array can be joined into a string with a fixed delimiter, using &lt;code&gt;join[&lt;em&gt;separator&lt;/em&gt;, &lt;em&gt;array&lt;/em&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Splitting a string into an array, splitting on whitespace (the pattern &lt;code&gt;\s+&lt;/code&gt; matches 1 or more whitespace characters:)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = split[ %r/\s+/, &quot;1 2 3 4 5&quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[1, 2, 3, 4, 5]&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Or, to split a tab-delimited line into elements:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;array = split[&quot;\t&quot;, line]&lt;/code&gt;&lt;br /&gt;which is the same as&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;array = split[%r/\t/, line]&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;join&quot; id=&quot;join&quot;&gt;join&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The reverse of &lt;code&gt;split&lt;/code&gt; is &lt;code&gt;join&lt;/code&gt; which joins multiple array elements into one string, with elements separated by the specified string.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;join[&quot;:&quot;, array]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;1:2:3:4:5&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;zip&quot; id=&quot;zip&quot;&gt;zip&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The function &lt;code&gt;zip[&lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;]&lt;/code&gt; &quot;zips&quot; together corresponding elements of lists &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; and returns each pair as a two-element array. (This is what this function is usually called in functional programming, and has nothing to do with the zip compression format.) For example:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;zip[1 to 3, 6 to 8]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[ [1,6], [2,7], [3,8] ]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If one list is longer than the other, the shorter list will be padded with &lt;code&gt;undef&lt;/code&gt; values. If &lt;em&gt;both&lt;/em&gt; arguments are enumerating expressions, the result will be an efficient enumerating expression. Otherwise, the arguments will be converted to arrays and the result will be an array (which is potentially large.) Also note that an array &lt;em&gt;is&lt;/em&gt; an enumerating expression too!&lt;/p&gt;
&lt;p&gt;The results can be processed individually with the &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for a = zip[1 to million, 3 to million + 3]&lt;br /&gt;   println[a]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you wish to pad with values other than &lt;code&gt;undef&lt;/code&gt;, there is a 4-argument version of the function &lt;code&gt;zip[&lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;, &lt;em&gt;defaultA&lt;/em&gt;, &lt;em&gt;defaultB&lt;/em&gt;]&lt;/code&gt; that specifies what values to pad each list with.&lt;/p&gt;

&lt;p&gt;For ease of maintenance, you can separate your program code into multiple files and include them in other files. This is accomplished by the &lt;code&gt;use&lt;/code&gt; statement. This includes the contents of the named file at compile-time, at the point where the &lt;code&gt;use&lt;/code&gt; statement is encountered. For example, to include a file called &lt;code&gt;sun.frink&lt;/code&gt; in the current directory:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;use sun.frink&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;use&lt;/code&gt; statement searches for the named files in the following places:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Relative to the root of the current classpath or jar file.&lt;/li&gt;
&lt;li&gt;If the statement specifies a fully-qualified URL, the URL is loaded. This includes &lt;code&gt;file:&lt;/code&gt;, &lt;code&gt;ftp:&lt;/code&gt;, and &lt;code&gt;http:&lt;/code&gt; URLs.&lt;/li&gt;
&lt;li&gt;Relative to the current file or URL being parsed.&lt;/li&gt;
&lt;li&gt;Relative to the current working directory.&lt;/li&gt;
&lt;li&gt;Relative to all paths specified using the &lt;a href=&quot;https://frinklang.org/#CommandLineOptions&quot;&gt;&lt;code&gt;-I &lt;em&gt;path&lt;/em&gt;&lt;/code&gt; command-line option.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;From the internal &quot;standard library&quot; shipped within the jar file's &lt;code&gt;/stdlib&lt;/code&gt; directory. This location may change.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The &lt;code&gt;use&lt;/code&gt; statement has protection against including a file multiple times.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; If you're including a file that's &lt;em&gt;not&lt;/em&gt; relative to any of the above, you'll need to specify it using an &lt;em&gt;absolute&lt;/em&gt; &lt;code&gt;file:&lt;/code&gt; URL, such as:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;use file:///c:/prog/frink/samples/sun.frink&lt;/code&gt;&lt;br /&gt;or&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;use file:///prog/frink/samples/sun.frink&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is necessary because a file or relative URL can legitimately contain colons on some operating systems. For example, on a UNIX-like system, you could have a subdirectory called &lt;code&gt;c:&lt;/code&gt; and that would be just fine. Frink doesn't try to duplicate all the quirks of all operating systems and their wacky filename rules.&lt;/p&gt;

&lt;p&gt;Frink allows you to write your programs in object-oriented fashion, allowing complex data structures that are still easy to use. Inheritance is not implemented, (and many people may argue that it shouldn't be implemented) but works fine for programs that don't require inheritance.&lt;/p&gt;
&lt;p&gt;Classes are defined using the &lt;code&gt;class&lt;/code&gt; keyword and a syntax that won't particularly surprise anyone who has worked with Java, C++, Ruby, Python, or other object-oriented languages.&lt;/p&gt;
&lt;p&gt;The format of a class and how to use it is demonstrated in the &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=classtest.frink&quot;&gt;classtest.frink&lt;/a&gt; file.&lt;/p&gt;
&lt;p&gt;Interfaces are defined using the &lt;code&gt;interface&lt;/code&gt; keyword, and is similar to Java's implementation.&lt;/p&gt;
&lt;p&gt;The format of an interface and how to use it is demonstrated in the &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=interfacetest.frink&quot;&gt;interfacetest.frink&lt;/a&gt; file.&lt;/p&gt;
&lt;p&gt;Methods on an object can be listed using the &lt;code&gt;methods[&lt;em&gt;obj&lt;/em&gt;]&lt;/code&gt; function. If &lt;code&gt;obj&lt;/code&gt; is an instance of an object, this lists the instance-level &lt;em&gt;and&lt;/em&gt; class-level methods of that object. If called with a classname (that gives you the &quot;Metaclass Object&quot; for that class,) it displays just the class-level methods.&lt;/p&gt;

&lt;p&gt;Frink has a &lt;code&gt;try/finally&lt;/code&gt; block which allows the programmer to ensure that code is called no matter what happens in a block of code. The code within the &lt;code&gt;finally&lt;/code&gt; block is executed whether the block is exited from a &lt;code&gt;return&lt;/code&gt; statement, or if an error occurs in the code, or whatever.&lt;/p&gt;
&lt;p&gt;If the body of the &lt;code&gt;try&lt;/code&gt; or &lt;code&gt;finally&lt;/code&gt; block is a single line, it can be written without curly braces.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;try&lt;br /&gt;{&lt;br /&gt;   &lt;br /&gt;}&lt;br /&gt;finally&lt;br /&gt;{&lt;br /&gt;   &lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Frink expressions can be formatted in a variety of formats. There are currently different formatters for human-readable and machine-readable forms:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;outputForm&lt;/code&gt;: The default, human-friendly output format.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inputForm&lt;/code&gt;: A machine-readable format, suitable for passing to Frink as input, and parsing with the &lt;a href=&quot;https://frinklang.org/#SelfEvaluation&quot;&gt;&lt;code&gt;eval[&lt;em&gt;str&lt;/em&gt;]&lt;/code&gt;&lt;/a&gt; function. This lets you easily save and load most Frink data structures (and programs,) send them over a network, etc., in a simple, safe and reversible way.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;More formatters will follow, possibly for formatting into other languages (e.g. JavaScript/JSON).&lt;/p&gt;
&lt;p&gt;Several new functions have been added to support formatting in different formats:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;format[&lt;em&gt;expression&lt;/em&gt;, &lt;em&gt;format&lt;/em&gt;]&lt;/code&gt; formats the expression to a string using the specified formatter. Current formatters include the strings &lt;code&gt;&quot;Input&quot;&lt;/code&gt; and &lt;code&gt;&quot;Output&quot;&lt;/code&gt;. &lt;code&gt;&quot;Input&quot;&lt;/code&gt; is a formatter that provides Frink's input form that can be easily parsed by a call to &lt;code&gt;eval[&lt;em&gt;str&lt;/em&gt;]&lt;/code&gt;. &lt;code&gt;&quot;Output&quot;&lt;/code&gt; is the human-friendly formatter, which has been greatly improved for the introduction of multiple formatters.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;formatters[]&lt;/code&gt; lists the currently-available expression formatters.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inputForm[&lt;em&gt;expression&lt;/em&gt;]&lt;/code&gt; and &lt;code&gt;outputForm[&lt;em&gt;expression&lt;/em&gt;]&lt;/code&gt; are aliases for &lt;code&gt;format[&lt;em&gt;expression&lt;/em&gt;,&quot;Input&quot;]&lt;/code&gt; and &lt;code&gt;format[&lt;em&gt;expression&lt;/em&gt;,&quot;Output&quot;]&lt;/code&gt; respectively.&lt;/li&gt;
&lt;li&gt;Formatting options such as &lt;code&gt;showApproximations[]&lt;/code&gt;, &lt;code&gt;rationalAsFloat[]&lt;/code&gt;, &lt;code&gt;setEngineering[]&lt;/code&gt;, and &lt;code&gt;showDimensionName[]&lt;/code&gt; and the &lt;code&gt;:-&amp;gt;&lt;/code&gt; operator are now local to the &lt;em&gt;interpreter&lt;/em&gt;, (and only effect the &lt;code&gt;&quot;Output&quot;&lt;/code&gt; formatter,) not global to the entire Java Virtual Machine. This makes it safer to embed multiple Frink parsers in a single virtual machine, each with their own preferences, and makes Java Server Pages more robust against poorly-behaved scripts. (Programs still need to pass a security check to set these flags on an interpreter basis.)&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a name=&quot;InputForm&quot; id=&quot;InputForm&quot;&gt;InputForm&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;inputForm[&lt;em&gt;expr&lt;/em&gt;]&lt;/code&gt; or &lt;code&gt;format[&lt;em&gt;expr&lt;/em&gt;, &quot;Input&quot;]&lt;/code&gt; function returns the expression in a machine-readable format, suitable for passing to Frink as input, and parsing with the &lt;a href=&quot;https://frinklang.org/#SelfEvaluation&quot;&gt;&lt;code&gt;eval[&lt;em&gt;str&lt;/em&gt;]&lt;/code&gt;&lt;/a&gt; function. This lets you easily save and load most Frink data structures (and programs,) send them over a network, etc., in a simple, safe and reversible way.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = new dict&lt;/code&gt; &lt;br /&gt;&lt;code class=&quot;input&quot;&gt;a@&quot;one&quot; = 1&lt;br /&gt;a@&quot;two&quot; = 2&lt;br /&gt;a@&quot;three&quot; = 3&lt;/code&gt;&lt;/p&gt;&lt;p&gt;println[a]&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[[one, 1], [three, 3], [two, 2]] &lt;/code&gt;&lt;/p&gt;&lt;p&gt; &lt;code class=&quot;input&quot;&gt;println[inputForm[a]]&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;new dict[[[&quot;one&quot;, 1], [&quot;three&quot;, 3], [&quot;two&quot;, 2]]]&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Notes on &lt;code&gt;inputForm&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Currently, objects created from a &lt;code&gt;class&lt;/code&gt; specification will be output as a &lt;code&gt;dict&lt;/code&gt; with name-value pairs for all instance variables. This may change. This is currently done because there's no way to guarantee that the Frink interpreter on the other end has loaded the same &lt;code&gt;class&lt;/code&gt; or a compatible version. There are potential security and correctness issues if the classes are incompatible. A malicious user could also modify the data to get around security or logic checks and create invalid or dangerous objects. It's currently left up to the programmer to take these objects, validate their fields, and turn them back into the objects they want on the other end. This may change.&lt;/li&gt;
&lt;li&gt;The Julian day parser can now parse rational numbers or date intervals, for example:
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Rational:&lt;/strong&gt; &lt;code&gt;# JD 212263942857555001/86400000000 #&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interval:&lt;/strong&gt; &lt;code&gt;# JD [212263942933679/86400000, 70754647644893/28800000] #&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Java objects are not currently formatted usefully. This may change, or not.&lt;/li&gt;
&lt;li&gt;When outputting dates in &quot;input form&quot;, the date will be formatted as an exact Julian day (possibly an interval or an exact rational number as above) if necessary, or in a human-readable format in UTC, if sub-millisecond precision is not required, which allows exact round-trips of dates.&lt;/li&gt;
&lt;li&gt;Strings and identifiers (e.g. variable names, function names) will be encoded into an ASCII-safe form. Characters outside the ASCII range will be escaped into ASCII-safe Unicode escapes.&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;toASCII[&lt;em&gt;str&lt;/em&gt;]&lt;/code&gt; function to turn a string into a network and file-encoding safe ASCII-encoded equivalent. This is useful if you don't want the full quoting of &lt;code&gt;inputForm&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Formatting options such as &lt;code&gt;showApproximations[]&lt;/code&gt;, &lt;code&gt;rationalAsFloat[]&lt;/code&gt;, &lt;code&gt;setEngineering[]&lt;/code&gt;, and &lt;code&gt;showDimensionName[]&lt;/code&gt; and the &lt;code&gt;:-&amp;gt;&lt;/code&gt; operator do not apply in &lt;code&gt;inputForm&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Frink has a powerful system for drawing graphics in a simple way. Here are some of the features:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Flexible coordinate system:&lt;/strong&gt; You can draw your graphics to any coordinates you wish, and Frink will, by default, automatically scale and center them in your display device, eliminating the tedium and error of manual coordinate conversions, adjustment for different window or printer sizes, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dimensioned drawings:&lt;/strong&gt; Graphics can be specified with explicit lengths (such as &quot;3 cm&quot;,) so exactly-sized drawings can be printed. (Well, as accurately as your printer's driver allows them to be!)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Infinitely scalable:&lt;/strong&gt; Frink's graphics are primarily designed to work with shapes, not individual pixels, so they can be re-scaled perfectly to display with full resolution on printers, in resizable graphics windows, in image files, or in rescalable vector formats.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;High-quality shapes:&lt;/strong&gt; Polygons and polylines are drawn with properly-joined, angled corners.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Anti-Aliasing:&lt;/strong&gt; Lines and shapes are anti-aliased, eliminating jagged edges. (When running under Java 1.2 or later. Frink's graphics will also run on Java 1.1, but without antialiased edges.) Aliasing can now be controlled through the &lt;a href=&quot;https://frinklang.org/#Antialiasing&quot;&gt;Antialiasing&lt;/a&gt; methods.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transparency (alpha channel):&lt;/strong&gt; Allows transparent shapes and lines, and see-through shapes to be drawn on top of other shapes. Anti-aliased edges are drawn with proper transparency so they can be overlaid on any background color or image. (Requires Java 1.2 or later for transparency.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;High-quality text:&lt;/strong&gt; Text can be written into any graphics object, with properly transparent anti-aliased edges. Text may be scaled along with the image, or rendered at a constant size.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easy transformations:&lt;/strong&gt; All graphics can be translated, scaled, and rotated, making it very easy to draw objects to the coordinate system that is easiest to use, and translating it into larger drawings. When graphics are scaled and rotated, Frink is smart enough to keep what you've drawn centered and scaled to fit on the screen or printed page!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easy writing to files:&lt;/strong&gt; Graphics can be easily written to various file formats, including JPEG, PNG, HTML5 canvas, and Scalable Vector Graphics (SVG and SVGZ) formats. PNG supports transparency (alpha channel) and allows antialiased, semi-transparent lines and shapes to be overlaid over other backgrounds or layers. SVG format allows infinite rescaling and perfect rendering to high-resolution devices such as printers, and perfect import into other vector graphics programs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easy display on different devices:&lt;/strong&gt; The same graphics object can be created and then displayed on screen, printed to a printer, or written to a file, using a single command.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a name=&quot;IntroductionToGraphics&quot; id=&quot;IntroductionToGraphics&quot;&gt;Introduction to Graphics&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Graphics are drawn and displayed in three steps:&lt;/p&gt;
&lt;ol readability=&quot;1&quot;&gt;&lt;li&gt;Create an object of type &lt;code&gt;graphics&lt;/code&gt;:
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;g = new graphics&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;Draw your shapes into the &lt;code&gt;graphics&lt;/code&gt; object:
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;g.line[1,100,100,1]&lt;br /&gt;g.line[1,1,100,100]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Show (or print, or write your image to a file):
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;g.show[]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://frinklang.org/images/graphicsintro.png&quot; width=&quot;400&quot; height=&quot;300&quot; alt=&quot;Graphics Introduction&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;That's it. Frink takes care of the scaling and centering by default. The coordinates that you choose can be whatever is most convenient and natural for you. You can also create as many &lt;code&gt;graphics&lt;/code&gt; objects as you want. By default, when you call &lt;code&gt;&lt;em&gt;graphics&lt;/em&gt;.show[]&lt;/code&gt;, each graphics object is displayed in its own resizable window.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;Coordinates&quot; id=&quot;Coordinates&quot;&gt;Coordinates&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Coordinates in Frink's graphics are very flexible. There are a few things to note:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Coordinates are specified as (x, y) with &lt;code&gt;x&lt;/code&gt; being the horizontal coordinate and &lt;code&gt;y&lt;/code&gt; the vertical coordinate.&lt;/li&gt;
&lt;li&gt;Horizontal coordinates increase as you move right.&lt;/li&gt;
&lt;li&gt;Vertical coordinates increase as you move down. (Note that this is the common convention for almost all computer graphics, but is different than the usual mathematical conventions. You can change this using a &lt;a href=&quot;https://frinklang.org/#TransformingGraphics&quot;&gt;Graphics Transformation&lt;/a&gt;, but be warned that will vertically flip text as well.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Arbitrary-sized coordinates:&lt;/strong&gt; Coordinates can be as big or small as you want. Any real number that Frink can represent is fine.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automatic centering and scaling:&lt;/strong&gt; You don't need to worry about the size or location of your rendering window. By default, all graphics are resized and centered to fit into your graphics device (whether it's a resizable window, a printed page, or a graphic file.) This saves lots of time and effort when drawing most graphics. Even if your graphics have been scaled, translated, and rotated, Frink will still ensure that what you've drawn is scaled and centered.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aspect ratio:&lt;/strong&gt; Aspect ratio is preserved by default. That is, if a rectangle is 2 units wide and 1 unit high, it will retain that shape on resizing. (You can change that by multiplying all coordinates on one axis by a &quot;dummy&quot; dimension that isn't dimensionless and isn't a length.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accurately-scaled drawings&lt;/strong&gt;: Coordinates may have dimensions of length (e.g. &quot;1 inch&quot;), in which case they are treated specially. In this case, the graphics are still translated to fit into your view window, but Frink will also attempt to render them at the specified size. This is highly dependent on how your operating system reports its resolution. It works very well for printers, but not as well for monitors (especially in Windows, which almost always reports its screen resolution as 96 dpi, no matter what it really is.) This allows you to print exact-sized drawings to the accuracy allowed by your operating system and printer drivers. See the notes below about dimensions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dimensions with units:&lt;/strong&gt; Including the special case for length, all coordinates can have any units of measure, &lt;em&gt;as long as all coordinates along the same axis have the same dimensions&lt;/em&gt;. However, both axes do &lt;em&gt;not&lt;/em&gt; have to have the same dimensions as each other, and will be scaled to fit in the window (because preserving aspect ratio is meaningless if they don't have the same units.)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For example, the following short program prints graph paper with a 1 mm grating:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;g= new graphics&lt;br /&gt;g.color[.7,.9,.7] &lt;/code&gt;&lt;/p&gt;&lt;p&gt;for x=0 mm to 8.5 in step 1 mm&lt;br /&gt;   g.line[x, 0 in, x, 11 in]&lt;/p&gt;&lt;p&gt;for y=0mm to 11 in step 1 mm&lt;br /&gt;   g.line[0 in, y, 8.5 in, y]&lt;/p&gt;&lt;p&gt;g.print[]&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;ShapesAndColors&quot; id=&quot;ShapesAndColors&quot;&gt;Shapes and Colors&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All of Frink's graphics are built out of a small number of basic shapes. These are drawn into a &lt;code&gt;graphics&lt;/code&gt; object using the methods outlined below. For example, you use them like the following:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;g = new graphics&lt;br /&gt;g.color[0,0,0] &lt;br /&gt;g.fillEllipseCenter[0,0,10,10]&lt;br /&gt;g.color[1,1,0] &lt;br /&gt;g.fillEllipseCenter[0,0,9,9]&lt;br /&gt;g.show[]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://frinklang.org/images/circle.png&quot; width=&quot;300&quot; height=&quot;200&quot; alt=&quot;Sample Circle&quot; /&gt;&lt;/p&gt;
&lt;p&gt;A new &lt;code&gt;color&lt;/code&gt; object can also be obtained by calling &lt;code&gt;new color[&lt;em&gt;r, g, b, alpha&lt;/em&gt;]&lt;/code&gt; or &lt;code&gt;new color[&lt;em&gt;r, g, b&lt;/em&gt;]&lt;/code&gt;. Note that &lt;em&gt;creating the color this way does not set the color in any graphics object.&lt;/em&gt; That must be done separately with a call to &lt;code&gt;&lt;em&gt;graphics&lt;/em&gt;.color[&lt;em&gt;c&lt;/em&gt;]&lt;/code&gt;.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Graphics Shape and Color Methods&quot; readability=&quot;80&quot;&gt;&lt;tr&gt;&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;10&quot;&gt;&lt;td class=&quot;lit&quot;&gt;color[&lt;em&gt;r, g, b&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Sets the current drawing color. All following drawings will be made using this color. The color is specified with its red, green, and blue components which are floating-point values which must range from 0.0 to 1.0, with 0.0 being completely dark for that component, and 1.0 being the brightest value for that component. In a new graphics object, the default drawing color is black. This also returns the color object so you can later re-use it in a &lt;code&gt;color[&lt;em&gt;c&lt;/em&gt;]&lt;/code&gt; method call.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td class=&quot;lit&quot;&gt;color[&lt;em&gt;r, g, b, alpha&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Also specifies a color, but with transparency. The &lt;code&gt;alpha&lt;/code&gt; component specifies the opacity of the color, and takes values from 0.0 to 1.0, with 1.0 being fully opaque and 0.0 being fully transparent. (Note: transparency requires Java 1.2 or later.) This also returns the color object so you can later re-use it in a &lt;code&gt;color[&lt;em&gt;c&lt;/em&gt;]&lt;/code&gt; method call.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;16&quot;&gt;&lt;td class=&quot;lit&quot;&gt;color[&lt;em&gt;colorObject&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Sets the current color to a color object that has been previously obtained from a call to &lt;code&gt;color[&lt;em&gt;r, g, b, alpha&lt;/em&gt;]&lt;/code&gt;, &lt;code&gt;color[&lt;em&gt;r, g, b&lt;/em&gt;]&lt;/code&gt;, or a call to the constructor &lt;code&gt;new color[&lt;em&gt;r, g, b, alpha&lt;/em&gt;]&lt;/code&gt; or &lt;code&gt;new color[&lt;em&gt;r, g, b&lt;/em&gt;]&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td class=&quot;lit&quot;&gt;backgroundColor[&lt;em&gt;r, g, b&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Sets the background color of the graphics window or image file. The color components are specified as above. There should be only one &lt;code&gt;backgroundColor&lt;/code&gt; method call in a &lt;code&gt;graphics&lt;/code&gt; object, and it should be the first method called when drawing. If more than one call to &lt;code&gt;backgroundColor&lt;/code&gt; is made, this will raise a warning. (It will also replace any existing background color, but that behavior should not be relied on.) By default, the background color is opaque white (or transparent when writing formats like SVG.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;19&quot;&gt;&lt;td class=&quot;lit&quot;&gt;backgroundColor[&lt;em&gt;colorObject&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Sets the background color of the graphics window or image file to a color object that has been previously obtained from a call to &lt;code&gt;color[&lt;em&gt;r, g, b, alpha&lt;/em&gt;]&lt;/code&gt;, &lt;code&gt;color[&lt;em&gt;r, g, b&lt;/em&gt;]&lt;/code&gt;, or a call to the constructor &lt;code&gt;new color[&lt;em&gt;r, g, b, alpha&lt;/em&gt;]&lt;/code&gt; or &lt;code&gt;new color[&lt;em&gt;r, g, b&lt;/em&gt;]&lt;/code&gt;. The warnings in the above &lt;code&gt;backgroundColor&lt;/code&gt; method also applies to this method.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;10&quot;&gt;&lt;td class=&quot;lit&quot;&gt;stroke[&lt;em&gt;width&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Sets the stroke width used to draw lines, polygon outlines, ellipses, and polylines. If the width is a dimensionless number, (e.g. &lt;code class=&quot;input&quot;&gt;10&lt;/code&gt;) the stroke will be scaled along with the drawing. If the stroke has units of length, (e.g. &lt;code class=&quot;input&quot;&gt;2 mm&lt;/code&gt;) the lines will be rendered at that constant width regardless of how the image is scaled. (Note that the stroke width can not be changed in Java 1.1.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;alpha[&lt;em&gt;opacity&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Sets the transparency (often called &quot;alpha channel&quot;) of all subsequent drawing operations. The opacity is a dimensionless number from 0 (fully transparent) to 1 (fully opaque.) This primarily allows you to draw transparent images, as transparency can already be specified when setting colors. If a color already has a transparency, that transparency value will be multiplied by this global transparency. (Note that the transparency can not be changed in Java 1.1.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;line[&lt;em&gt;x1, y1, x2, y2&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Draws a straight line segment between the points (x1, y1) and (x2, y2) using the current color.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;17.5&quot;&gt;&lt;td class=&quot;lit&quot; readability=&quot;8&quot;&gt;fillRectSize[&lt;em&gt;x, y, width, height&lt;/em&gt;]
&lt;p&gt;drawRectSize[&lt;em&gt;x, y, width, height&lt;/em&gt;]&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;Draws a rectangle (filled or outlined, depending on the method called) with top left coordinate (x,y) and the specified width and height. If the width or height are negative, this draws the rectangle to the left or to the top of that point.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14.5&quot;&gt;&lt;td class=&quot;lit&quot; readability=&quot;8&quot;&gt;fillRectSides[&lt;em&gt;x1, y1, x2, y2&lt;/em&gt;]
&lt;p&gt;drawRectSides[&lt;em&gt;x1, y1, x2, y2&lt;/em&gt;]&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;Draws a rectangle (filled or outlined, depending on the method called) defined by its four sides. The sides do not have to be in any particular order.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;15.5&quot;&gt;&lt;td class=&quot;lit&quot; readability=&quot;8&quot;&gt;fillRectCenter[&lt;em&gt;cx, cy, width, height&lt;/em&gt;]
&lt;p&gt;drawRectCenter[&lt;em&gt;cx, cy, width, height&lt;/em&gt;]&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;Draws a rectangle (filled or outlined, depending on the method called) defined by its centerpoint (cx, cy) and its width and height.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;16.5&quot;&gt;&lt;td class=&quot;lit&quot; readability=&quot;8&quot;&gt;fillEllipseSize[&lt;em&gt;x, y, width, height&lt;/em&gt;]
&lt;p&gt;drawEllipseSize[&lt;em&gt;x, y, width, height&lt;/em&gt;]&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;Draws a filled or unfilled ellipse (or circle if width==height) with top left coordinate (x,y) and the specified width and height. If the width or height are negative, this draws the ellipse to the left or to the top of that point.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;13.5&quot;&gt;&lt;td class=&quot;lit&quot; readability=&quot;8&quot;&gt;fillEllipseSides[&lt;em&gt;x1, y1, x2, y2&lt;/em&gt;]
&lt;p&gt;drawEllipseSides[&lt;em&gt;x1, y1, x2, y2&lt;/em&gt;]&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;Draws a filled or unfilled ellipse (or circle if width==height) defined by its four sides. The sides do not have to be in any particular order.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14.5&quot;&gt;&lt;td class=&quot;lit&quot; readability=&quot;8&quot;&gt;fillEllipseCenter[&lt;em&gt;cx, cy, width, height&lt;/em&gt;]
&lt;p&gt;drawEllipseCenter[&lt;em&gt;cx, cy, width, height&lt;/em&gt;]&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;Draws a filled or unfilled ellipse or circle defined by its centerpoint (cx, cy) and its width and height.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;&lt;a name=&quot;AdvancedShapes&quot; id=&quot;AdvancedShapes&quot;&gt;Advanced Shapes&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;a name=&quot;PolygonsAndPolylines&quot; id=&quot;PolygonsAndPolylines&quot;&gt;Polygons and Polylines&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Drawing a curve or a polygon out of &lt;code&gt;line&lt;/code&gt; primitives might not give good results, as the lines don't know that they're supposed to be connected to each other. To solve this problem, Frink has &lt;code&gt;polyline&lt;/code&gt;, &lt;code&gt;polygon&lt;/code&gt; and &lt;code&gt;filledPolygon&lt;/code&gt; objects which produce high-quality, connected lines with properly-joined corners. Drawing a polygon or polyline to a graphics object consists of a few steps:&lt;/p&gt;
&lt;ol readability=&quot;13.5&quot;&gt;&lt;li&gt;Create the graphics object (if you haven't done so already.)
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;g = new graphics&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;21&quot;&gt;Create a polygon, filled polygon, &lt;em&gt;or&lt;/em&gt; polyline. (The sample below shows all three. Pick one.)
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;p = new polygon&lt;/code&gt;&lt;br /&gt;&lt;em&gt;or&lt;/em&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;p = new filledPolygon&lt;/code&gt;&lt;br /&gt;&lt;em&gt;or&lt;/em&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;p = new polyline&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Alternately, you can pass in a list of points to any of the above constructors, in which case you can skip the next &quot;adding points&quot; step.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = [ [1,3], [7,4], [6,2] ]&lt;br /&gt;p = new polygon[a]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Alternately, you can copy a polygon type to another polygon using the copy constructors:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = [ [1,3], [7,4], [6,2] ]&lt;br /&gt;p = new polygon[a]&lt;br /&gt;fp = new filledPolygon[p]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;Add an arbitrary number of points to the line or polygon using its &lt;code&gt;addPoint&lt;/code&gt; method. Each point represents a vertex in the polyline or polygon.
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;p.addPoint[&lt;em&gt;x,y&lt;/em&gt;]&lt;br /&gt;p.addPoint[&lt;em&gt;x,y&lt;/em&gt;]&lt;br /&gt;p.addPoint[&lt;em&gt;x,y&lt;/em&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that a &lt;code&gt;polygon&lt;/code&gt; or &lt;code&gt;filledPolygon&lt;/code&gt; is &lt;em&gt;automatically closed&lt;/em&gt;. You should &lt;em&gt;not&lt;/em&gt; manually connect the last point back to the first by repeating it at the end of the list. You should only have as many &lt;code&gt;addPoint&lt;/code&gt; calls as there are vertices in your polygon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Add the polygon to the graphics object. A polygon can be added to multiple graphics objects. The drawing color and stroke width used in rendering the polygon are the ones which are active at the time of the &lt;code&gt;.add&lt;/code&gt; call. &lt;em&gt;Note that no points should be added to the polygon after it is added to the graphics object!&lt;/em&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;g.add[p]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Show the graphics object (or print, or save it to a file, or keep drawing into it and show it later...)
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;g.show[]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h4&gt;&lt;a name=&quot;PolygonMethods&quot; id=&quot;PolygonMethods&quot;&gt;Polygon Methods&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;You can call the following methods on a &lt;code&gt;polygon&lt;/code&gt;, &lt;code&gt;filledPolygon&lt;/code&gt;, or &lt;code&gt;polyline&lt;/code&gt;.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;GeneralPath methods&quot; readability=&quot;6.5&quot;&gt;&lt;tr&gt;&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;addPoint[&lt;em&gt;x,y&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Adds a point to the polygon.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;getArea[]&lt;/td&gt;
&lt;td&gt;Returns the area of the polygon, with appropriate dimensions.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;getCentroid[]&lt;/td&gt;
&lt;td&gt;Returns the centroid of the polygon as an array [&lt;code&gt;cx&lt;/code&gt;, &lt;code&gt;cy&lt;/code&gt;].&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;getPoints[]&lt;/td&gt;
&lt;td&gt;Returns the points in the polygon as an array of [x, y] points.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;show[]&lt;/td&gt;
&lt;td&gt;Displays the polygon using the default display method.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt;&lt;a name=&quot;GeneralPath&quot; id=&quot;GeneralPath&quot;&gt;GeneralPath&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;GeneralPath&lt;/code&gt; allows you to create complex shapes consisting of straight lines, quadratic and cubic Bézier curves, arcs, and ellipses. These paths can be filled or outlines, and can have multiple sub-paths that represent the &quot;inside&quot; and &quot;outside&quot; of an object. For example, rendering a filled letter &lt;code&gt;P&lt;/code&gt; in which one can see through the &quot;hole&quot; in the P can be obtained with a GeneralPath, and is not possible with a &lt;code&gt;polygon&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; The GeneralPath functionality is only available under Java 1.2 and later. Attempting to draw with a GeneralPath in earlier releases will produce a warning and the GeneralPath will not be drawn.&lt;/p&gt;
&lt;p&gt;Using a &lt;code&gt;GeneralPath&lt;/code&gt; object consists of a few steps:&lt;/p&gt;
&lt;ol readability=&quot;-2&quot;&gt;&lt;li&gt;Create the graphics object (if you haven't done so already.)
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;g = new graphics&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;Create a GeneralPath or a filledGeneralPath. (The sample below shows both. Pick one.)
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;p = new GeneralPath&lt;/code&gt;&lt;br /&gt;&lt;em&gt;or&lt;/em&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;p = new filledGeneralPath&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Add an arbitrary number of segments using the following methods on the &lt;code&gt;GeneralPath&lt;/code&gt; class:
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;GeneralPath methods&quot; readability=&quot;50.5&quot;&gt;&lt;tr&gt;&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;moveTo[&lt;em&gt;x,y&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Moves to the specified point without drawing. This creates a new subpath. This (or &lt;code&gt;addPoint[&lt;em&gt;x,y&lt;/em&gt;]&lt;/code&gt;) should be the first call, otherwise the initial point is unspecified.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;lineTo[&lt;em&gt;x, y&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Draws a straight line segment from the current point to the specified point.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;addPoint[&lt;em&gt;x,y&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;If this is the first point, does a &lt;code&gt;moveTo&lt;/code&gt; the specified point. If there are previous points, this does a &lt;code&gt;lineTo&lt;/code&gt; the specified point. The &lt;code&gt;addPoint&lt;/code&gt; syntax is retained to make it easy to change code from a &lt;code&gt;polygon&lt;/code&gt; or &lt;code&gt;polyline&lt;/code&gt; representation to use &lt;code&gt;GeneralPath.&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;11&quot;&gt;&lt;td class=&quot;lit&quot;&gt;quadratic[&lt;em&gt;cx, cy, px, py&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Draws a quadratic Bézier curve from the current point to the point specified by &lt;code&gt;px,py&lt;/code&gt; using the coordinates specified by &lt;code&gt;cx,cy&lt;/code&gt; as the &quot;control point&quot;. The curves at each endpoint will be tangent to a line connecting that point and the control point. &lt;img src=&quot;https://frinklang.org/images/quadratic.png&quot; width=&quot;300&quot; height=&quot;150&quot; alt=&quot;Quadratic Curve&quot; /&gt;&lt;br /&gt;(Control points drawn for clarity.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;15&quot;&gt;&lt;td class=&quot;lit&quot;&gt;cubicCurve[&lt;em&gt;c1x, c1y, c2x, c2y, px, py&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Draws a cubic Bézier curve from the current point to the point specified by &lt;code&gt;px,py&lt;/code&gt; using the coordinates specified by (&lt;code&gt;c1x,c1y&lt;/code&gt;) and (&lt;code&gt;c2x,c2y&lt;/code&gt;) as the &quot;control points&quot;. The curves at each endpoint will be tangent to a line connecting that point and its corresponding control point. &lt;img src=&quot;https://frinklang.org/images/cubic.png&quot; width=&quot;300&quot; height=&quot;200&quot; alt=&quot;Cubic Curve&quot; /&gt;&lt;br /&gt;(Control points drawn for clarity.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;13&quot;&gt;&lt;td class=&quot;lit&quot;&gt;ellipseSides[x1, y1, x2, y2]&lt;/td&gt;
&lt;td&gt;Creates an ellipse with the specified coordinates indicating its sides, that is, a rectangle that will contain it. Note that an ellipse is considered to be &lt;em&gt;disconnected&lt;/em&gt; from previous line segments, so you should use a &lt;code&gt;moveTo[x,y]&lt;/code&gt; after this call to create a new path.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14&quot;&gt;&lt;td class=&quot;lit&quot;&gt;ellipseSize[x1, y1, width, height]&lt;/td&gt;
&lt;td&gt;Creates an ellipse with the (x1,y1) coordinates indicating the top left corner of its bounding box, and the specified width and height relative to that point. Note that an ellipse is considered to be &lt;em&gt;disconnected&lt;/em&gt; from previous line segments, so you should use a &lt;code&gt;moveTo[x,y]&lt;/code&gt; after this call to create a new path.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;13&quot;&gt;&lt;td class=&quot;lit&quot;&gt;ellipseCenter[cx, cy, width, height]&lt;/td&gt;
&lt;td&gt;Creates an ellipse with the (cx, cy) coordinates indicating the center of the ellipse, and the specified width and height. Note that an ellipse is considered to be &lt;em&gt;disconnected&lt;/em&gt; from previous line segments, so you should use a &lt;code&gt;moveTo[x,y]&lt;/code&gt; after this call to create a new path.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td class=&quot;lit&quot;&gt;circularArc[cx, cy, angle]&lt;/td&gt;
&lt;td&gt;Creates a circular arc from the current point. The (cx, cy) coordinates indicate the center of the circle, and &lt;code&gt;angle&lt;/code&gt; specifies the angle to go around the circle in the counterclockwise direction. Note that the &lt;code&gt;angle&lt;/code&gt; parameter should have units of an angle, e.g. &lt;code&gt;90 degrees&lt;/code&gt; or &lt;code&gt;1.2 radians&lt;/code&gt; or even &lt;code&gt;1.2&lt;/code&gt; (implying radians) if the standard data file is used which treats radians as a dimensionless number.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;10&quot;&gt;&lt;td class=&quot;lit&quot;&gt;close[]&lt;/td&gt;
&lt;td&gt;Closes the current subpath by drawing a straight line to the initial point of the subpath. It is strongly recommended to use this method to close curves, as it properly joins corners, and informs the curve that it is logically closed. This creates a new subpath, so you should use a &lt;code&gt;moveTo[x,y]&lt;/code&gt; or &lt;code&gt;addPoint[x,y]&lt;/code&gt; after this call to create a new path.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/li&gt;
&lt;li&gt;Add the GeneralPath to the graphics object. A GeneralPath can be added to multiple graphics objects. The drawing color and stroke width used in rendering the GeneralPath are the ones which are active at the time of the &lt;code&gt;.add&lt;/code&gt; call. &lt;em&gt;Note that no points should be added to the GeneralPath after it is added to the graphics object!&lt;/em&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;g.add[p]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Show the graphics object (or print, or save it to a file, or keep drawing into it and show it later...)
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;g.show[]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;For a sample of using the GeneralPath class, see &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=GeneralPathTest.frink&quot;&gt;GeneralPathTest.frink&lt;/a&gt; which demonstrates drawing a filled letter &quot;P&quot; with a properly-transparent hole.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;GraphicsWithText&quot; id=&quot;GraphicsWithText&quot;&gt;Graphics with Text&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;High-quality text with transparent anti-aliased edges can be added to any &lt;code&gt;graphics&lt;/code&gt; object using the following methods:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Graphics Text Methods&quot; readability=&quot;37&quot;&gt;&lt;tr&gt;&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;28&quot;&gt;&lt;td class=&quot;lit&quot; readability=&quot;7&quot;&gt;font[&lt;em&gt;fontName, height&lt;/em&gt;]
&lt;p&gt;font[&lt;em&gt;fontName, style, height&lt;/em&gt;]&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;9&quot;&gt;Sets the current font that will be used to render text. The arguments are:
&lt;ul readability=&quot;1&quot;&gt;&lt;li&gt;&lt;code&gt;&lt;strong&gt;fontName&lt;/strong&gt;&lt;/code&gt;: A string indicating the name of the font family. For portability to all platforms and image types (including SVG files,) this should be one of &lt;code class=&quot;input&quot;&gt;&quot;Serif&quot;, &quot;SansSerif&quot;, &quot;Monospaced&quot;&lt;/code&gt;. However, any font name available on your system may be used if you don't care about portability.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;strong&gt;style&lt;/strong&gt;&lt;/code&gt;: An string containing information about the font style. This should contain one of &lt;code class=&quot;input&quot;&gt;&quot;plain&quot;, &quot;bold&quot;, &quot;italic&quot;, &quot;bold+italic&quot;&lt;/code&gt;. (It's actually a case-insensitive substring search that just looks for &quot;bold&quot; and &quot;italic&quot; so this can be written in a lot of ways.)&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;&lt;code&gt;&lt;strong&gt;height&lt;/strong&gt;&lt;/code&gt;: The height of the font in the current coordinate system. Height is taken as the distance from standard baseline to the next standard baseline, not necessarily as the height of the tallest characters. This fits the usual definition of font size used in most systems.
&lt;p&gt;If the height is a dimensionless number, (e.g. &lt;code class=&quot;input&quot;&gt;10&lt;/code&gt;) the font will be scaled along with the drawing. If the height has units of length, (e.g. &lt;code class=&quot;input&quot;&gt;10 points&lt;/code&gt; or &lt;code class=&quot;input&quot;&gt;1 cm&lt;/code&gt;) the font will be rendered at that constant height, regardless of how the image is scaled. Note that using a height with dimensions of length might force the text out of the viewable area if the drawing is scaled too small to accommodate it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you don't specify a font before drawing text, your system will use its default font, which may give different results when the same program is run on different systems or rendered to different devices. This behavior may change to specify a fixed default font in the future.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;text[&lt;em&gt;text, x, y&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Draws the specified text &lt;em&gt;centered&lt;/em&gt; (vertically and horizontally) at the coordinates (x,y). Since it's hard to predict how wide (or tall) text will be until it's rendered, centering is often the most useful option.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;text[&lt;em&gt;text, x, y, angle&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Draws text as above, but also rotated by the specified angle (counterclockwise.) The angle must have angular units, (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;90 degrees&lt;/code&gt; or &lt;code&gt;1 radian&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;41&quot;&gt;&lt;td class=&quot;lit&quot;&gt;text[&lt;em&gt;text, x, y, horizontalAlign, verticalAlign&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;29&quot;&gt;Draws the specified text with one point specified by the (x,y) coordinates and the rest of the text aligned relative to that as specified by the &lt;code&gt;horizontalAlign&lt;/code&gt; and &lt;code&gt;verticalAlign&lt;/code&gt; parameters.
&lt;p&gt;The parameter &lt;code class=&quot;input&quot;&gt;horizontalAlign&lt;/code&gt; is a string containing one of: &lt;code class=&quot;input&quot;&gt;&quot;left&quot;, &quot;right&quot;, &quot;center&quot;&lt;/code&gt; indicating if the &lt;code&gt;x&lt;/code&gt; coordinate indicates the left, right, or center horizontal position of the text. For example, if the horizontal alignment is given as &lt;code&gt;&quot;right&quot;&lt;/code&gt;, the specified &lt;code&gt;x&lt;/code&gt; coordinate will be the right side of the text.&lt;/p&gt;
&lt;p&gt;The parameter &lt;code class=&quot;input&quot;&gt;verticalAlign&lt;/code&gt; is a string containing one of: &lt;code class=&quot;input&quot;&gt;&quot;top&quot;, &quot;bottom&quot;, &quot;center&quot;, &quot;baseline&quot;&lt;/code&gt; indicating if the &lt;code&gt;y&lt;/code&gt; coordinate indicates the top, bottom, center, or baseline vertical position of the text. For example, if the vertical alignment is given as &lt;code&gt;&quot;top&quot;&lt;/code&gt;, the specified &lt;code&gt;y&lt;/code&gt; coordinate will be the top of the text. The &lt;code&gt;&quot;baseline&quot;&lt;/code&gt; parameter indicates the bottom of most characters, but characters with descenders like &quot;j&quot;, &quot;p&quot; and &quot;q&quot; may hang below the baseline.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td class=&quot;lit&quot;&gt;text[&lt;em&gt;text, x, y, horizontalAlign, verticalAlign, angle&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Draws text as above, but also rotated by the specified angle (counterclockwise.) The angle must have angular units, (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;90 degrees&lt;/code&gt; or &lt;code&gt;1 radian&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; The following program draws a 5x5 grid of random characters.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;g=new graphics&lt;br /&gt;g.font[&quot;SansSerif&quot;, &quot;bold&quot;, 10]   &lt;/code&gt;&lt;/p&gt;&lt;p&gt;for x=1 to 5&lt;br /&gt;   for y=1 to 5&lt;br /&gt;      g.text[char[random[char[&quot;A&quot;], char[&quot;Z&quot;]]], x*10, y*10]&lt;/p&gt;&lt;p&gt;g.show[]&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://frinklang.org/images/lettergrid.png&quot; width=&quot;200&quot; height=&quot;200&quot; alt=&quot;Letter grid example&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;ComposingGraphics&quot; id=&quot;ComposingGraphics&quot;&gt;Composing Graphics&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A &lt;code&gt;graphics&lt;/code&gt; object can be built up from multiple &lt;code&gt;graphics&lt;/code&gt; objects that are added to it. These graphics can be added at their original size, or placed at a certain location and size. This makes it easy to create complex graphics from many different graphics objects that were rendered at their &quot;natural&quot; sizes and then automatically resized to fit where you want them, &lt;em&gt;no matter what coordinates they were originally drawn to!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When adding one &lt;code&gt;graphics&lt;/code&gt; obect into another, the new graphics object added will be transformed according to the current state of the &lt;a href=&quot;https://frinklang.org/#TransformingGraphics&quot;&gt;Graphics Transformation&lt;/a&gt; and global transparency (set by the &lt;code&gt;alpha[&lt;em&gt;opacity&lt;/em&gt;]&lt;/code&gt; method listed above in the &lt;a href=&quot;https://frinklang.org/#ShapesAndColors&quot;&gt;Shapes and Colors&lt;/a&gt; section.)&lt;/p&gt;
&lt;p&gt;Note that the object is fit according to its estimated bounding box; if the bounding box is estimated too large, then the graphic may not fill the entire region requested, and you may have to manually adjust the scaling.&lt;/p&gt;
&lt;p&gt;The following methods on a &lt;code&gt;graphics&lt;/code&gt; object allow you to add other &lt;code&gt;graphics&lt;/code&gt; objects to them.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Methods for composing graphics&quot; readability=&quot;44.063040062844&quot;&gt;&lt;tr&gt;&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5.5161290322581&quot;&gt;&lt;td class=&quot;lit&quot;&gt;add[&lt;em&gt;graphics&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;4.5777027027027&quot;&gt;Adds another graphic expression of any type to this graphics object. By default, the other graphic is added at its original coordinates and size unless a &lt;a href=&quot;https://frinklang.org/#TransformingGraphics&quot;&gt;coordinate transformation&lt;/a&gt; has been set first.
&lt;p&gt;See the other &lt;code&gt;add...&lt;/code&gt; methods below to see how to add a graphic at a specified location and size.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;16.5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;addCenter[&lt;em&gt;graphics&lt;/em&gt;, &lt;em&gt;cx&lt;/em&gt;, &lt;em&gt;cy&lt;/em&gt;, &lt;em&gt;width&lt;/em&gt;, &lt;em&gt;height&lt;/em&gt;, &lt;em&gt;maintainAspectRatio=true&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;Adds another graphic expression to this graphics object, attempting to place its center at the coordinates &lt;code&gt;(cx, cy)&lt;/code&gt; and making it fit within the specified &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;. This allows you to easily compose a &lt;code&gt;graphics&lt;/code&gt; object out of other &lt;code&gt;graphics&lt;/code&gt; objects, no matter what coordinates they were drawn to.
&lt;p&gt;The aspect ratio of the graphic is maintained unless the optional argument &lt;code&gt;maintainAspectRatio&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; (default is &lt;code&gt;true&lt;/code&gt;).&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;13&quot;&gt;&lt;td class=&quot;lit&quot;&gt;addCenterRotate[&lt;em&gt;graphics&lt;/em&gt;, &lt;em&gt;cx&lt;/em&gt;, &lt;em&gt;cy&lt;/em&gt;, &lt;em&gt;width&lt;/em&gt;, &lt;em&gt;height&lt;/em&gt;, &lt;em&gt;angle&lt;/em&gt;, &lt;em&gt;maintainAspectRatio=true&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Identical to &lt;code&gt;addCenter&lt;/code&gt; above, but the graphic is rotated around (&lt;code&gt;cx,cy&lt;/code&gt;) by the specified angle (e.g. &lt;code&gt;10 degrees&lt;/code&gt; or &lt;code&gt;1.3 radians&lt;/code&gt;). Positive angles are clockwise.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14.5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;addSides[&lt;em&gt;graphics&lt;/em&gt;, &lt;em&gt;x1&lt;/em&gt;, &lt;em&gt;y1&lt;/em&gt;, &lt;em&gt;x2&lt;/em&gt;, &lt;em&gt;y2&lt;/em&gt;, &lt;em&gt;maintainAspectRatio=true&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;Adds another graphic expression to this graphics object, shrinking it or stretching it to fit into a rectangle with the specified sides. The sides do not have to be in any particular order.
&lt;p&gt;The aspect ratio of the graphic is maintained unless the optional argument &lt;code&gt;maintainAspectRatio&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; (default is &lt;code&gt;true&lt;/code&gt;).&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td class=&quot;lit&quot;&gt;addSidesRotate[&lt;em&gt;graphics&lt;/em&gt;, &lt;em&gt;x1&lt;/em&gt;, &lt;em&gt;y1&lt;/em&gt;, &lt;em&gt;x2&lt;/em&gt;, &lt;em&gt;y2&lt;/em&gt;, &lt;em&gt;angle&lt;/em&gt;, &lt;em&gt;maintainAspectRatio=true&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Identical to &lt;code&gt;addSides&lt;/code&gt; above, but the graphic is rotated around the center of its bounding box by the specified angle (e.g. &lt;code&gt;10 degrees&lt;/code&gt; or &lt;code&gt;1.3 radians&lt;/code&gt;). Positive angles are clockwise.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;20.5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;addSize[&lt;em&gt;graphics&lt;/em&gt;, &lt;em&gt;left&lt;/em&gt;, &lt;em&gt;top&lt;/em&gt;, &lt;em&gt;width&lt;/em&gt;, &lt;em&gt;height&lt;/em&gt;, &lt;em&gt;maintainAspectRatio=true&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;Adds another graphic expression to this graphics object, shrinking it or stretching it to fit into a rectangle with top left coordinate (left, top) and the specified width and height. If the width or height are negative, this draws the graphic to the left or to the top of that point, allowing you to align a graphic to the left, right, top, or bottom of a point or line.
&lt;p&gt;The aspect ratio of the graphic is maintained unless the optional argument &lt;code&gt;maintainAspectRatio&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; (default is &lt;code&gt;true&lt;/code&gt;).&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td class=&quot;lit&quot;&gt;addSizeRotate[&lt;em&gt;graphics&lt;/em&gt;, &lt;em&gt;left&lt;/em&gt;, &lt;em&gt;top&lt;/em&gt;, &lt;em&gt;width&lt;/em&gt;, &lt;em&gt;height&lt;/em&gt;, &lt;em&gt;angle&lt;/em&gt;, &lt;em&gt;maintainAspectRatio=true&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Identical to &lt;code&gt;addSize&lt;/code&gt; above, but the graphic is rotated around the center of its bounding box by the specified angle (e.g. &lt;code&gt;10 degrees&lt;/code&gt; or &lt;code&gt;1.3 radians&lt;/code&gt;). Positive angles are clockwise.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;&lt;a name=&quot;TransformingGraphics&quot; id=&quot;TransformingGraphics&quot;&gt;Transforming Graphics&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Frink allows you to rotate, translate, and scale graphics objects, allowing you to write simple code using the coordinate system that is most logical, and translate or scale it wherever you want. Like all of Frink's other graphics, Frink ensures that whatever you draw is automatically scaled and centered into the display, and can be exported to various file formats.&lt;/p&gt;
&lt;p&gt;The current graphics transformation can be saved with a call to &lt;code&gt;&lt;em&gt;graphics&lt;/em&gt;.saveTransform[]&lt;/code&gt; and should be restored with a corresponding call to &lt;code&gt;&lt;em&gt;graphics&lt;/em&gt;.restoreTransform[]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following methods are available on a &lt;code&gt;graphics&lt;/code&gt; object to transform the coordinates. Each transform is appended to the previous transforms. After making a transformation, all subsequent drawing or &lt;code&gt;add[]&lt;/code&gt; commands will use the current transform.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Graphics Transformation Methods&quot; readability=&quot;27&quot;&gt;&lt;tr&gt;&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;translate[&lt;em&gt;dx&lt;/em&gt;, &lt;em&gt;dy&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;Moves all subsequent drawing commands by the specified distance on the horizontal and vertical axes. (Positive &lt;code&gt;dx&lt;/code&gt; moves to the right, positive &lt;code&gt;dy&lt;/code&gt; moves down.)
&lt;div class=&quot;note&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;strong&gt;Technical Note:&lt;/strong&gt; This corresponds to the matrix multiplication:&lt;/p&gt;
&lt;table border=&quot;0&quot; cellpadding=&quot;5&quot; summary=&quot;rotate around matrix&quot; rules=&quot;groups&quot; frame=&quot;vsides&quot;&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;3&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;tr&gt;&lt;td class=&quot;litc&quot;&gt;x'&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;dx&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;x&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;litc&quot;&gt;y'&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;=&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;dy&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;*&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;y&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;which gives the equations:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;x' = x + dx&lt;br /&gt;y' = y + dy&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;scale[&lt;em&gt;sx&lt;/em&gt;, &lt;em&gt;sy&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;8&quot;&gt;Scales all subsequent drawing commands around the point (0,0) by the specified scale on the x and y axes. A coefficient of 1 corresponds to no scaling on that axis. A negative coefficient indicates a flip on that axis. (Note that this will also flip text!)
&lt;p&gt;Note that this function is not usually what you need; you usually want to scale around another point. See the four-argument version of this function below.&lt;/p&gt;
&lt;div class=&quot;note&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;strong&gt;Technical Note:&lt;/strong&gt; This corresponds to the matrix multiplication:&lt;/p&gt;
&lt;table border=&quot;0&quot; cellpadding=&quot;5&quot; summary=&quot;Scale matrix&quot; rules=&quot;groups&quot; frame=&quot;vsides&quot;&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;3&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;tr&gt;&lt;td class=&quot;litc&quot;&gt;x'&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;sx&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;x&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;litc&quot;&gt;y'&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;=&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;sy&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;*&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;y&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;which gives the equations:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;x' = sx x&lt;br /&gt;y' = sy y&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14.5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;scale[&lt;em&gt;sx&lt;/em&gt;, &lt;em&gt;sy&lt;/em&gt;, &lt;em&gt;cx&lt;/em&gt;, &lt;em&gt;cy&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;14&quot;&gt;Scales all subsequent drawing commands around the point &lt;code&gt;(cx,cy)&lt;/code&gt; by the specified scales &lt;code&gt;sx,sy&lt;/code&gt; on the x and y axes. A coefficient of 1 corresponds to no scaling on that axis. A negative coefficient indicates a flip on that axis. (Note that this will also flip text!)
&lt;p&gt;This is equivalent to the less-efficient:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;translate[cx, cy]&lt;br /&gt;scale[sx, sy]&lt;br /&gt;translate[-cx, -cy]&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;note&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;strong&gt;Technical Note:&lt;/strong&gt; This corresponds to the matrix multiplication:&lt;/p&gt;
&lt;table border=&quot;0&quot; cellpadding=&quot;5&quot; summary=&quot;scale around matrix&quot; rules=&quot;groups&quot; frame=&quot;vsides&quot;&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;3&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;tr&gt;&lt;td class=&quot;litc&quot;&gt;x'&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;sx&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;cx(1-sx)&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;x&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;litc&quot;&gt;y'&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;=&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;sy&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;cy(1-sy)&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;*&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;y&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;which gives the equations:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;x' = sx x + cx (1 - sx)&lt;br /&gt;y' = sy y + cy (1 - sy)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or, equivalently:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;x' = sx (x-cx) + cx&lt;br /&gt;y' = sy (y-cy) + cy&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;rotate[&lt;em&gt;angle&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;9&quot;&gt;Rotates all subsequent drawing commands around the point (0,0) by the specified angle. Positive angles are clockwise.
&lt;p&gt;Note that this function is rarely what you need; you usually want to rotate around another point. See the three-argument version of this function below.&lt;/p&gt;
&lt;div class=&quot;note&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;strong&gt;Technical Note:&lt;/strong&gt; This corresponds to the matrix multiplication:&lt;/p&gt;
&lt;table border=&quot;0&quot; cellpadding=&quot;5&quot; summary=&quot;rotate matrix&quot; rules=&quot;groups&quot; frame=&quot;vsides&quot;&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;3&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;tr&gt;&lt;td class=&quot;litc&quot;&gt;x'&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;cos[angle]&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;-sin[angle]&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;x&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;litc&quot;&gt;y'&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;=&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;sin[angle]&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;cos[angle]&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;*&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;y&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;which gives the equations:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;x' = x cos[angle] - y sin[angle]&lt;br /&gt;y' = x sin[angle] + y cos[angle]&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td class=&quot;lit&quot;&gt;rotate[&lt;em&gt;angle&lt;/em&gt;, &lt;em&gt;cx&lt;/em&gt;, &lt;em&gt;cy&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;14&quot;&gt;Rotates all subsequent drawing commands around the point (&lt;code&gt;cx, cy&lt;/code&gt;) by the specified angle. Positive angles are clockwise.
&lt;p&gt;This is equivalent to the less-efficient:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;translate[cx, cy]&lt;br /&gt;rotate[angle]&lt;br /&gt;translate[-cx, -cy]&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;note&quot; readability=&quot;15&quot;&gt;
&lt;p&gt;&lt;strong&gt;Technical Note:&lt;/strong&gt; This corresponds to the matrix multiplication:&lt;/p&gt;
&lt;table border=&quot;0&quot; cellpadding=&quot;5&quot; summary=&quot;rotate around matrix&quot; rules=&quot;groups&quot; frame=&quot;vsides&quot; readability=&quot;2&quot;&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;3&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;litc&quot;&gt;x'&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;cos[angle]&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;-sin[angle]&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;cx (1-cos[angle]) + cy sin[angle]&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;x&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;litc&quot;&gt;y'&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;=&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;sin[angle]&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;cos[angle]&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;cy (1-cos[angle]) - cx sin[angle]&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;*&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;y&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;which gives the equations:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;x' = x cos[angle] - y sin[angle] + cx (1-cos[angle]) + cy sin[angle]&lt;br /&gt;y' = x sin[angle] + y cos[angle] + cy (1-cos[angle]) - cx sin[angle]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or, equivalently:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;x' = (x - cx) cos[angle] - (y - cy) sin[angle] + cx&lt;br /&gt;y' = (x - cx) sin[angle] + (y - cy) cos[angle] + cy&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;15&quot;&gt;&lt;td class=&quot;lit&quot;&gt;transform[&lt;em&gt;a,b,c,d,e,f&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;16.5&quot;&gt;Performs an arbitrary affine transform on subsequent drawing commands, by specifying all relevant coefficients of an affine transformation matrix. This corresponds to the matrix multiplication:
&lt;table border=&quot;0&quot; cellpadding=&quot;5&quot; summary=&quot;General transformation matrix&quot; rules=&quot;groups&quot; frame=&quot;vsides&quot;&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;3&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;colgroup span=&quot;1&quot;&gt;&lt;/colgroup&gt;&lt;tr&gt;&lt;td class=&quot;litc&quot;&gt;x'&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;a&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;c&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;e&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;x&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;litc&quot;&gt;y'&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;=&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;b&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;d&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;f&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;*&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;y&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;litc&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;which gives the equations:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;x' = a x + c y + e&lt;br /&gt;y' = b x + d y + f&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;See the technical notes for the above functions to see how various transformations are achieved by specifying the coefficients of this matrix. Note also that this function can be used to create skews as well as rotations, translations, and scales.&lt;/p&gt;
&lt;div class=&quot;note&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;strong&gt;Technical Note:&lt;/strong&gt; If you want to reverse this transformation, or any of the above transformations, the inverse equations are:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;x =  (c (f - y') - d (e - x')) / (a d - b c)&lt;br /&gt;y = -(a (f - y') - b (e - x')) / (a d - b c)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;saveTransform[]&lt;/td&gt;
&lt;td&gt;Saves the current state of the graphics transform so it can later be restored with a call to &lt;code&gt;restoreTransform[]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;restoreTransform[]&lt;/td&gt;
&lt;td&gt;Restores the state of the graphics transform to the point where the last &lt;code&gt;saveTransform[]&lt;/code&gt; was called.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;&lt;a name=&quot;ClippingGraphics&quot; id=&quot;ClippingGraphics&quot;&gt;Clipping Graphics&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To constrain the area in which graphics can be drawn, you can specify a clipping region on a &lt;code&gt;graphics&lt;/code&gt; object. &lt;em&gt;After&lt;/em&gt; you set a clipping region, subsequent drawing commands will only be drawn within that region.&lt;/p&gt;
&lt;p&gt;A cool thing about the clipping implementation is that, like all of Frink's graphics, you can draw to any coordinate system that makes sense to you, even if it's rotated, scaled, skewed, and clipped, and Frink will automatically center and scale that into your graphics window by default, greatly simplifying many graphics programming tasks. In other words, clipping can be used to &quot;zoom in&quot; on a section of a larger graphic--just set a clipping region before drawing the graphic and only the section within the clipping region will be displayed.&lt;/p&gt;
&lt;p&gt;Each time you add a clipping boundary, it &lt;em&gt;narrows&lt;/em&gt; the existing clipping boundary, and the clipping boundary will become the intersection of the previous clipping boundary and the new clipping boundary.&lt;/p&gt;
&lt;p&gt;Clipping boundaries can be saved and restored with the &lt;code&gt;&lt;em&gt;graphics&lt;/em&gt;.saveClip[]&lt;/code&gt; and &lt;code&gt;&lt;em&gt;graphics&lt;/em&gt;.restoreClip[]&lt;/code&gt; methods. Currently, these must be properly nested with &lt;code&gt;&lt;em&gt;graphics&lt;/em&gt;.saveTransform[]&lt;/code&gt; and &lt;code&gt;&lt;em&gt;graphics&lt;/em&gt;.restoreTransform[]&lt;/code&gt; calls.&lt;/p&gt;
&lt;p&gt;The following methods are on a &lt;code&gt;graphics&lt;/code&gt; object.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Clipping Methods&quot; readability=&quot;34&quot;&gt;&lt;tr&gt;&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;11&quot;&gt;&lt;td class=&quot;lit&quot;&gt;clipRectSize[left, top, width, height]&lt;/td&gt;
&lt;td&gt;Adds a new clipping rectangle with top left coordinate x,y and the specified width and height. If the width or height are negative, the clipping rectangle is drawn to the left or to the top of that point.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;clipRectSides[x1, y1, x2, y2]&lt;/td&gt;
&lt;td&gt;Adds a new clipping rectangle with the specified sides.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td class=&quot;lit&quot;&gt;clipRectCenter[cx, cy, width, height]&lt;/td&gt;
&lt;td&gt;Adds a new clipping rectangle with the specified centerpoint, width, and height.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;10&quot;&gt;&lt;td class=&quot;lit&quot;&gt;clipEllipseSize[left, top, width, height]&lt;/td&gt;
&lt;td&gt;Adds a new clipping ellipse with top left coordinate x,y and the specified width and height. If the width or height are negative, the clipping elipse is drawn to the left or to the top of that point.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;clipEllipseSides[x1, y1, x2, y2]&lt;/td&gt;
&lt;td&gt;Adds a new clipping ellipse with the specified sides.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td class=&quot;lit&quot;&gt;clipEllipseCenter[cx, cy, width, height]&lt;/td&gt;
&lt;td&gt;Adds a new clipping ellipse with the specified centerpoint, width, and height.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td class=&quot;lit&quot;&gt;clip[&lt;em&gt;shape&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Adds the specified shape to the current clipping boundary. The shape may be either a rectangle, ellipse, &lt;code&gt;polygon&lt;/code&gt;, or &lt;code&gt;GeneralPath&lt;/code&gt;. (The new clipping boundary is the &lt;em&gt;intersection&lt;/em&gt; of the old boundary and the new boundary, always making the clipping boundary smaller.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;saveClip[]&lt;/td&gt;
&lt;td&gt;Saves the current clipping region so it can later be restored with a call to &lt;code&gt;restoreClip[]&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;restoreClip[]&lt;/td&gt;
&lt;td&gt;Restores the current clipping region to the state it had at the last call to &lt;code&gt;saveClip[]&lt;/code&gt;. Currently, these calls must be properly nested with &lt;code&gt;&lt;em&gt;graphics&lt;/em&gt;.saveTransform[]&lt;/code&gt; and &lt;code&gt;&lt;em&gt;graphics&lt;/em&gt;.restoreTransform[]&lt;/code&gt; calls.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;&lt;a name=&quot;Antialiasing&quot; id=&quot;Antialiasing&quot;&gt;Antialiasing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;By default, graphics and text are antialiased on most platforms. That is, edges of lines and text are smoothed and slightly blurred to reduce jagged edges. This may be unwelcome in some situations, such as when drawing many adjacent rectangles. Antialiasing of graphics and text can be controlled by the following methods on a &lt;code&gt;graphics&lt;/code&gt; object.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Antialiasing Methods&quot; readability=&quot;10.073529411765&quot;&gt;&lt;tr&gt;&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;10.601552393273&quot;&gt;&lt;td class=&quot;lit&quot;&gt;antialiased[&lt;em&gt;boolean&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;If set to &lt;code&gt;false&lt;/code&gt;, all subsequent shape drawing operations to that &lt;code&gt;graphics&lt;/code&gt; object will no longer be anti-aliased. (Note that this does not affect anti-aliasing of text, which is controlled separately by the &lt;code&gt;antialasedText&lt;/code&gt; function below.) This may be turned on and off over the course of drawing a single &lt;code&gt;graphics&lt;/code&gt; object. Not all graphics environments support control of anti-aliasing, as noted below:
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;SVG&lt;/strong&gt;: The SVG specification does not directly allow control of antialiasing, but Frink sets the &lt;a href=&quot;https://www.w3.org/1999/07/06/WD-SVG-19990706/render.html#RenderingProperties&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;shape-rendering=&quot;crispEdges&quot;&lt;/code&gt;&lt;/a&gt; rendering property (link opens in new window), which seems to turn off antialiasing in many rendering environments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTML5&lt;/strong&gt;: The HTML5 canvas specification does not seem to allow any control of antialiasing, so this does nothing.&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9.5275590551181&quot;&gt;&lt;td class=&quot;lit&quot;&gt;antialiasedText[&lt;em&gt;boolean&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;If set to &lt;code&gt;false&lt;/code&gt;, all subsequent text drawn to that &lt;code&gt;graphics&lt;/code&gt; object will no longer be anti-aliased. This may be turned on and off over the course of drawing a single &lt;code&gt;graphics&lt;/code&gt; object. Not all environments support control of anti-aliased text, as noted below:
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;SVG&lt;/strong&gt;: The SVG specification does not directly allow control of antialiasing, but this sets the &lt;a href=&quot;https://www.w3.org/1999/07/06/WD-SVG-19990706/render.html#RenderingProperties&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;text-rendering=&quot;optimizeSpeed&quot;&lt;/code&gt;&lt;/a&gt; rendering property (link opens in new window), which seems to turn off text antialiasing in many rendering environments.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTML5&lt;/strong&gt;: The HTML5 canvas specification does not seem to allow control of antialiasing, so this does nothing.&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;&lt;a name=&quot;ShowingGraphics&quot; id=&quot;ShowingGraphics&quot;&gt;Showing Graphics&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once a &lt;code&gt;graphics&lt;/code&gt; object has been constructed, it can be shown on-screen, printed, or written to a file using the following methods:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Graphics Show Methods&quot; readability=&quot;88.275108046923&quot;&gt;&lt;tr&gt;&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.8221343873518&quot;&gt;&lt;td class=&quot;lit&quot;&gt;show[]&lt;/td&gt;
&lt;td&gt;Displays the graphic object using the default method. On most platforms, this opens a new resizable window. Note that this method returns an object that can be used to repaint the graphics. See the &lt;a href=&quot;https://frinklang.org/#Animation&quot;&gt;Animation&lt;/a&gt; section of the documentation for more.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.8548387096774&quot;&gt;&lt;td class=&quot;lit&quot;&gt;show[&lt;em&gt;insets&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Displays the graphic object using the default method, specifying the insets as a value between 0 and 1 where 1 means to use 100% of the window with the graphic (no borders.) An insets value of 0.95 causes 95% of the window's width and/or height to be used by the graphic, and 5% as borders. On most platforms, this opens a new resizable window. Note that this method returns an object that can be used to repaint the graphics. See the &lt;a href=&quot;https://frinklang.org/#Animation&quot;&gt;Animation&lt;/a&gt; section of the documentation for more.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.8339483394834&quot;&gt;&lt;td class=&quot;lit&quot;&gt;show[&lt;em&gt;width, height&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Displays the graphic object using the default method, specifying the width and height of the window as integers. Note that this method returns an object that can be used to repaint the graphics. See the &lt;a href=&quot;https://frinklang.org/#Animation&quot;&gt;Animation&lt;/a&gt; section of the documentation for more.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;13&quot;&gt;&lt;td class=&quot;lit&quot;&gt;show[&lt;em&gt;width, height, insets&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Displays the graphic object using the default method, specifying the width and height of the window as integers, and the insets as a floating-point value between 0 and 1, where 1 means to use 100% of the window with the graphic (no borders.) An insets value of 0.95 causes 95% of the window's width and/or height to be used by the graphic, and 5% of the window's width and/or height to be borders.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;lit&quot;&gt;print[]&lt;/td&gt;
&lt;td&gt;Prints the graphics object to a single page on a printer. This will produce a print dialog that allows you to select the printer, and the orientation and margins for the page.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td class=&quot;lit&quot;&gt;print[&lt;em&gt;insets&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Prints the graphics object to a single page on a printer. This will produce a print dialog that allows you to select the printer, and the orientation and margins for the page. &lt;code&gt;insets&lt;/code&gt; is a floating-point value between 0 and 1, where 1 means to use 100% of the window with the graphic (no borders.) An insets value of 0.95 causes 95% of the window's width and/or height to be graphics, and 5% as borders. These insets are &lt;em&gt;in addition&lt;/em&gt; to any margins you set in the print dialog. (Specifying insets is usually only necessary when rendering a background color that you want to have extend a certain distance around the graphic.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;printTiled[&lt;em&gt;pagesWide, pagesHigh&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Prints the graphics object tiled across multiple pages on a printer. This allows very large graphics to be printed. The arguments indicate how many printer pages wide and high the graphic should be drawn.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;10&quot;&gt;&lt;td class=&quot;lit&quot;&gt;printTiled[&lt;em&gt;pagesWide, pagesHigh, insets&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Prints the graphics object tiled across multiple pages on a printer. This allows very large graphics to be printed. The arguments indicate how many printer pages wide and high the graphic should be drawn. &lt;code&gt;insets&lt;/code&gt; is a floating-point value between 0 and 1, where 1 means to use 100% of the window with the graphic (no borders.) An insets value of 0.95 causes 5% of the window's width and/or height to be borders. These insets are &lt;em&gt;in addition&lt;/em&gt; to any margins you set in the print dialog. (Specifying insets is usually only necessary when rendering a background color that you want to have extend a certain distance around the graphic.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;invertGrays[]&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;Takes a &lt;code&gt;graphics&lt;/code&gt; and returns a new &lt;code&gt;graphics&lt;/code&gt; object in which the black colors are turned to white and the whites are turned to black, with all the colors near to gray inverted the same way. This does not affect other colors; red remains red. This is useful for making graphics that look like Wargames on-screen (black background with white lines) but don't destroy your printer ink budget. A typical usage would be:
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;&lt;br /&gt;g.invertGrays[].show[] &lt;br /&gt;g.print[] &lt;/code&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;11&quot;&gt;&lt;td class=&quot;lit&quot;&gt;toBase64[&lt;em&gt;format, width, height&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Encodes the graphic as a string which represents a base-64 encoded bitmap in the specified format (&lt;em&gt;e.g.&lt;/em&gt; formats include &quot;jpg&quot;, &quot;png&quot;) at the specified width and height. This may be included in an HTML document as a &lt;code&gt;data&lt;/code&gt; URI, included in an email, etc.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;89.699554483015&quot;&gt;&lt;td class=&quot;lit&quot; readability=&quot;17&quot;&gt;write[&lt;em&gt;filename, width, height&lt;/em&gt;]
&lt;p&gt;writeTransparent[&lt;em&gt;filename, width, height&lt;/em&gt;]&lt;/p&gt;
&lt;p&gt;write[&lt;em&gt;filename, width, height, insets&lt;/em&gt;]&lt;/p&gt;
&lt;p&gt;writeTransparent[&lt;em&gt;filename, width, height, insets&lt;/em&gt;]&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;19.594258373206&quot;&gt;Writes the image to a file with the specified width and height (usually in pixels). The format of the file is guessed from the filename's extension. If the &lt;code&gt;writeTransparent&lt;/code&gt; method is called, and if the image format supports it, the image will be rendered with a transparent background, allowing you to stack and create composite images with full anti-aliasing and background support.
&lt;p&gt;If exactly one of &lt;code&gt;width&lt;/code&gt; or &lt;code&gt;height&lt;/code&gt; are specified as &lt;code&gt;undef&lt;/code&gt;, the size of the undefined axis will be calculated from the defined width or height and the aspect ratio of the &lt;code&gt;graphics&lt;/code&gt; that is being drawn.&lt;/p&gt;
&lt;p&gt;In the versions of these functions where &lt;code&gt;insets&lt;/code&gt; is specified, the value of that argument indicates how wide a border should be left when drawing. When specifying &lt;code&gt;1&lt;/code&gt; (indicating 100%) to the &lt;code&gt;insets&lt;/code&gt; argument, the drawn image occupies 100% of the width and height, with no border. By default, only 95% (0.95) of the width or height is used, leaving a small 5% border around the drawn graphics. Specifying the insets is important when rendering image files out at their original size. See the &lt;a href=&quot;https://frinklang.org/#Images&quot;&gt;Images&lt;/a&gt; section of the documentation for more.&lt;/p&gt;
&lt;p&gt;The file formats supported by your version of Java may vary, but the following should be supported:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;JPEG&lt;/strong&gt;: Does not support transparency. Requires Java 1.4 or later.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PNG&lt;/strong&gt;: (Portable Network Graphics) Supports transparency and full anti-aliasing of transparent graphics. Requires Java 1.4 or later.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SVG&lt;/strong&gt;: (Scalable Vector Graphics) A vector format that is infinitely resizable. Supports transparency. By default, all backgrounds in SVG graphics are transparent. Works in all versions of Java. &lt;em&gt;Warning:&lt;/em&gt; Due to a deficiency in the SVG standard, drawings with dimensions of length (e.g. &quot;1 inch&quot;) may not work properly for some shapes, notably polygons, polylines, and GeneralPath.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SVGZ&lt;/strong&gt;: (Scalable Vector Graphics, compressed with GZIP) This is the same as the SVG format, but is compressed with the GZIP compression algorithm. Since SVG files usually contain a lot of repetition, using this format will significantly reduce file size and should be parseable by most/all programs that can handle SVG files.&lt;/li&gt;
&lt;li&gt;&lt;a name=&quot;html5&quot; id=&quot;html5&quot;&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/a&gt;: (HTML5 canvas support required) While HTML5 will not be a finalized specification until at least 2014, major modern browsers for desktop and mobile devices (Firefox, Chrome, Opera, Safari, IE) support the HTML5 features that Frink requires.
&lt;ul&gt;&lt;li&gt;Transmission of vector graphics in vector formats, allowing efficient, antialiased rendering of vector graphics.&lt;/li&gt;
&lt;li&gt;Bitmapped images are transmitted within the HTML document as embedded &lt;code&gt;data&lt;/code&gt; URIs encoded in base-64, allowing you to send the entire graphic as a single HTML file. Bitmapped images are transmitted at the end of the file, and displayed as they are loaded, allowing progressive display of documents containing multiple bitmaps.&lt;/li&gt;
&lt;li&gt;All of Frink's graphics primitives are supported, including bitmaps, &lt;code&gt;GeneralPath&lt;/code&gt;, partially-transparent graphics, rotations, translations, and scaling.&lt;/li&gt;
&lt;li&gt;HTML5 is rendered to relatively simple, user-modifiable code.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What doesn't work in HTML5 (future wish list):&lt;/em&gt;
&lt;ul readability=&quot;2.8667900092507&quot;&gt;&lt;li&gt;Drawings with dimensions (&lt;em&gt;e.g.&lt;/em&gt; a rectangle with width &lt;code&gt;1 inch&lt;/code&gt;) does not get rendered properly to HTML5. I'm still doing research to see if we can get a reasonable resolution figure from the rendering environment.&lt;/li&gt;
&lt;li readability=&quot;8.1379703534778&quot;&gt;HTML5, for some ungodly reason, for a long time did not not support the &lt;a href=&quot;https://en.wikipedia.org/wiki/Even-odd_rule&quot;&gt;even-odd winding rule&lt;/a&gt; for filling graphics, which becomes important when drawing an arbitrary &lt;code&gt;GeneralPath&lt;/code&gt; and self-intersecting or concentric filled polygons. HTML5 only supported the rather stupid and useless &lt;a href=&quot;https://en.wikipedia.org/wiki/Nonzero-rule&quot; target=&quot;_blank&quot;&gt;nonzero winding rule&lt;/a&gt; which will make some objects with &quot;hollow&quot; centers not render the same in HTML5 as they do in all other sane environments (e.g. Swing, AWT, Android, SVG, PostScript, PDF).
&lt;p&gt;However, this problem is being gradually addressed in current browsers, (but not yet in the &lt;a target=&quot;_blank&quot; href=&quot;http://www.w3.org/TR/2dcontext/#fill-and-stroke-styles&quot;&gt;official HTML5 Canvas spec&lt;/a&gt;!) but your browser needs to support the HTML Canvas's &lt;code&gt;context.fill(&quot;evenodd&quot;)&lt;/code&gt; method for Frink's graphics to work properly now. This appears to be supported in current versions of Firefox (21+), Firefox on Android, Chrome (27+), Opera (15+), Safari 8.0, and IE11 (&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ie/ff975415%28v=vs.85%29.aspx&quot;&gt;according to this&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Animation is not yet possible in HTML5. It's not clear if this will be easy without porting all of Frink to JavaScript.&lt;/li&gt;
&lt;li&gt;All bitmapped graphics are embedded in PNG format. These may be larger than the corresponding JPEG graphics, but they are lossless and allow alpha channels, which JPEG does not allow. It's possible that there may be a switch in the future to embed bitmaps in JPEG format and to control the quality, or the renderer may get &quot;smarter&quot; and determine if alpha channels are present, and switch rendering formats for efficiency.&lt;/li&gt;
&lt;li&gt;When rendering just a portion of a bitmapped image to HTML5, the entire original bitmap file is transmitted in the HTML5 document.&lt;/li&gt;
&lt;li&gt;If the browser doesn't support the HTML5 &lt;code&gt;canvas&lt;/code&gt; element, Frink could theoretically render a small thumbnail image (or full-resolution image, but that would be wasteful) showing the user what they're missing. If the browser doesn't support &lt;code&gt;canvas&lt;/code&gt;, the user is warned about possibly needing to open the document in a newer browser.&lt;/li&gt;
&lt;li&gt;There appears to be no way to control &lt;a href=&quot;https://frinklang.org/#Antialiasing&quot;&gt;antialiasing&lt;/a&gt; in the HTML5 spec&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;28.5&quot;&gt;&lt;td class=&quot;lit&quot; readability=&quot;8&quot;&gt;writeFormat[&lt;em&gt;filename, format, width, height&lt;/em&gt;]
&lt;p&gt;writeFormatTransparent[&lt;em&gt;filename, format, width, height&lt;/em&gt;]&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;Writes to a file, explicitly specifying the format. The format should be a string containing one of &lt;code&gt;&quot;svg&quot;, &quot;SVG&quot;, &quot;svgz&quot;, &quot;SVGZ&quot;, &quot;jpeg&quot;, &quot;JPEG&quot;, &quot;jpg&quot;, &quot;JPG&quot;, &quot;png&quot;, &quot;PNG&quot;, &quot;html&quot;, &quot;HTML&quot;&lt;/code&gt;, or possibly another format that your platform understands (like &quot;&lt;code&gt;webp&lt;/code&gt;&quot; / &quot;&lt;code&gt;WEBP&lt;/code&gt;&quot; on Android.)&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The following draws a partially-transparent circle, and then successively displays it on-screen, prints it, and renders it to various image files:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;g = new graphics&lt;br /&gt;g.color[0, 0, 1, 0.5]   &lt;br /&gt;g.fillEllipseCenter[0,0,10,10]&lt;/code&gt;&lt;/p&gt;&lt;p&gt;g.show[]&lt;br /&gt;g.print[]&lt;br /&gt;g.write[&quot;circle.jpg&quot;, 200, 200]&lt;br /&gt;g.write[&quot;circle.png&quot;, 200, 200]&lt;br /&gt;g.writeTransparent[&quot;circleTrans.png&quot;, 200, 200]&lt;br /&gt;g.write[&quot;circle.svg&quot;, 200, 200]&lt;br /&gt;g.write[&quot;circle.html&quot;, 200, 200]&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;GraphicsFunctions&quot; id=&quot;GraphicsFunctions&quot;&gt;Graphics Functions&lt;/a&gt;&lt;/h3&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Graphics Functionx&quot; readability=&quot;5.5&quot;&gt;&lt;tr&gt;&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;11&quot;&gt;&lt;td class=&quot;lit&quot;&gt;getBoundingBox[&lt;em&gt;graphicsExpression&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns the coordinates of the bounding box for the graphics object in the form &lt;code&gt;[left, top, right, bottom]&lt;/code&gt;. If the bounding box is empty (that is, there are no drawable elements in &lt;code&gt;graphicsExpression&lt;/code&gt;, this returns &lt;code&gt;undef&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;&lt;a name=&quot;Images&quot; id=&quot;Images&quot;&gt;Images&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Bitmap images can be loaded and drawn to a graphics object, displayed in their own window, resized, printed (including tiled across several pages,) drawn over, saved out to files, etc. You can also load an image or create it in memory, and read or write the values of individual pixels, allowing image processing or analysis.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note that Java 1.1 and earlier did not have a portable, public way to read and write individial pixels of images, so many of these methods require Java 1.2 or later.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To load an image, call &lt;code&gt;new image[&lt;em&gt;URL&lt;/em&gt;]&lt;/code&gt;, passing it a URL. The URL can be of any type your Java platform understands, including a &lt;code&gt;file:&lt;/code&gt; URL indicating a file on your local system:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;img1 = new image[&quot;http://futureboy.us/images/futureboydomethumb4.gif&quot;]&lt;br /&gt;img2 = new image[&quot;file:yourfile.gif&quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;An image can also be loaded from a Java object that contains an already-opened &lt;code&gt;java.io.InputStream&lt;/code&gt;: &lt;code&gt;new image[&lt;em&gt;java.io.InputStream&lt;/em&gt;]&lt;/code&gt;. This allows you to create images from open files, URLs, network sources, servlet containers, in-memory sources, etc., without writing their data to temporary files.&lt;/p&gt;
&lt;p&gt;To create a new (blank) image, specify the width and height in pixels:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;img3 = new image[640, 480]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To copy an image, use the copy constructor:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;img4 = new image[img3]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will make a copy of all of the pixels in the image, so the copy can be modified without modifying the original.&lt;/p&gt;
&lt;p&gt;You can turn a &lt;code&gt;graphics&lt;/code&gt; object into a bitmapped image in memory by using the constructor:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;new image[&lt;em&gt;graphics&lt;/em&gt;, &lt;em&gt;width&lt;/em&gt;, &lt;em&gt;height&lt;/em&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Where &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; are dimensionless integers. This gives you a readable/writable bitmap which allows you to read and write the individual pixels of the graphic. For example, to create a graphic and then render it to a bitmapped image in memory, you may do something like:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;g = new graphics&lt;br /&gt;g.line[0,0,1,1]&lt;br /&gt;img4 = new image[g, 300, 300]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that there are already methods to write graphics to a bitmapped file format. Using this constructor is only necessary if you want to read or write specific pixels of the rendered graphic &lt;em&gt;directly in memory&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The image can be then shown in its own window by calling the &lt;code&gt;.show[]&lt;/code&gt; method:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;img1.show[]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The following table summarizes the methods available on an &lt;code&gt;image&lt;/code&gt; object:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Image Methods&quot; readability=&quot;86.033518483049&quot;&gt;&lt;tr&gt;&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;getHeight[]&lt;/td&gt;
&lt;td&gt;Returns the height of the image in pixels.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;getWidth[]&lt;/td&gt;
&lt;td&gt;Returns the width of the image in pixels.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;lit&quot;&gt;getSize[]&lt;/td&gt;
&lt;td&gt;Returns the dimensions of the image in pixels as a two-dimensional array &lt;code&gt;[&lt;em&gt;width&lt;/em&gt;, &lt;em&gt;height&lt;/em&gt;]&lt;/code&gt;. You can thus call it like:&lt;br /&gt;&lt;code&gt;[width,height]=&lt;em&gt;image&lt;/em&gt;.getSize[]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;getPixel[x,y]&lt;/td&gt;
&lt;td&gt;Returns the pixel's color as an array of [red, green, blue, alpha] components between, each between 0 and 1 inclusive.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;lit&quot;&gt;getPixelInt[x,y]&lt;/td&gt;
&lt;td&gt;Returns the pixel's color as an array of [red, green, blue, alpha] components between, each between 0 and 255 inclusive.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;getPixelAsColor[x,y]&lt;/td&gt;
&lt;td&gt;Returns the pixel's color as a &lt;code&gt;color&lt;/code&gt; object that can be passed to other methods that take color objects.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14&quot;&gt;&lt;td class=&quot;lit&quot;&gt;setPixel[x, y, red, green, blue, alpha]&lt;/td&gt;
&lt;td&gt;Sets the specified pixel's color to the color specified by the red, green, blue, alpha components, each between 0 and 1 (inclusive).&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;13&quot;&gt;&lt;td class=&quot;lit&quot;&gt;setPixel[x, y, red, green, blue]&lt;/td&gt;
&lt;td&gt;Sets the specified pixel's color to the color specified by the red, green, blue, components, each between 0 and 1 (inclusive). The pixel will be fully opaque.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14&quot;&gt;&lt;td class=&quot;lit&quot;&gt;setPixelInt[x, y, red, green, blue, alpha]&lt;/td&gt;
&lt;td&gt;Sets the specified pixel's color to the color specified by the red, green, blue, alpha components, each between 0 and 255 (inclusive).&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;13&quot;&gt;&lt;td class=&quot;lit&quot;&gt;setPixelInt[x, y, red, green, blue]&lt;/td&gt;
&lt;td&gt;Sets the specified pixel's color to the color specified by the red, green, blue, components, each between 0 and 255 (inclusive). The pixel will be fully opaque.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;setPixel[x, y, color]&lt;/td&gt;
&lt;td&gt;Sets the specified pixel's color to a color designated by the &lt;code&gt;color&lt;/code&gt; object.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;25&quot;&gt;&lt;td class=&quot;lit&quot;&gt;averagePixels[left, top, right, bottom]&lt;/td&gt;
&lt;td&gt;Returns the average color of the pixels within the region specified by the given coordinates. Each coordinate may be a floating-point value, and if an incomplete pixel is sampled, it is weighted accordingly. The return value is an array of [red, green, blue, alpha] components, each between 0 and 1 inclusive. The values for the coordinates can range from 0 to (&lt;code&gt;im.getWidth[]&lt;/code&gt; or &lt;code&gt;im.getHeight[]&lt;/code&gt;,) inclusive, indicating, for example, the left and right side of the pixel (or subpixel) to be sampled. For example, in a 2x2 pixel image, you'd want to sample [0,0,2,2] to average the whole image.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td class=&quot;lit&quot;&gt;makeARGB[]&lt;/td&gt;
&lt;td&gt;Forces a loaded image to have an ARGB color model, that is, to have an 24-bit true color model with an 8-bit alpha channel that supports transparency. By default, when loading an image, the color model is preserved and may not support true color nor transparency.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9.0425925925926&quot;&gt;&lt;td class=&quot;lit&quot;&gt;makeMono[]&lt;/td&gt;
&lt;td readability=&quot;7.5984555984556&quot;&gt;Forces a loaded image to have a one-bit monochrome color model, if your platform supports it. This may perform dithering on the image.
&lt;p&gt;&lt;em&gt;For Android&lt;/em&gt;: Currently, the Android &lt;a href=&quot;https://developer.android.com/reference/android/graphics/Bitmap.Config.html&quot;&gt;Bitmap.Config&lt;/a&gt; class does not support monochrome images, so this does nothing on Android.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;write[&lt;em&gt;filename&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;- Write the image to the specified filename. The format of the file is guessed from the filename's extension. The file formats supported by your version of Java may vary, but the following should be supported:
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;JPEG&lt;/strong&gt;: Does not support transparency. Requires Java 1.4 or later.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PNG&lt;/strong&gt;: (Portable Network Graphics) Supports transparency and full anti-aliasing of transparent graphics. Requires Java 1.4 or later.&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;toBase64[&lt;em&gt;format&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Returns a base-64 encoded string which represents the bitmap in the specified image format (&lt;em&gt;e.g.&lt;/em&gt; &quot;jpg&quot;, &quot;png&quot;). This may be included in an HTML document as a &lt;code&gt;data&lt;/code&gt; URI, included in an email, etc.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3.6650246305419&quot;&gt;&lt;td class=&quot;lit&quot;&gt;toComplexArray[]&lt;/td&gt;
&lt;td&gt;Turns the bits of the image into a 2-dimensional array of complex values, which can be transformed with the &lt;a href=&quot;https://frinklang.org/#FourierTransforms&quot;&gt;Fourier transform&lt;/a&gt; functions. The behavior of this method will probably change.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;show[]&lt;/td&gt;
&lt;td&gt;Displays the image (by default, in its own window.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;print[]&lt;/td&gt;
&lt;td&gt;Prints the image to a printer.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;print[&lt;em&gt;insets&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Prints the image to a printer. &lt;code&gt;insets&lt;/code&gt; is a floating-point value between 0 and 1, where 1 means to use 100% of the window with the graphic (no borders.) An insets value of 0.95 causes 5% of the window's width and/or height to be borders. These insets are &lt;em&gt;in addition&lt;/em&gt; to any margins you set in the print dialog.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;lit&quot;&gt;printTiled[&lt;em&gt;pagesWide, pagesHigh&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Prints the image to a printer, tiled across several pages to make a very large image.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;11&quot;&gt;&lt;td class=&quot;lit&quot;&gt;printTiled[&lt;em&gt;pagesWide, pagesHigh, insets&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Prints the image to a printer, tiled across several pages to make a very large image. &lt;code&gt;insets&lt;/code&gt; is a floating-point value between 0 and 1, where 1 means to use 100% of the window with the graphic (no borders.) An insets value of 0.95 causes 5% of the window's width and/or height to be borders. These insets are &lt;em&gt;in addition&lt;/em&gt; to any margins you set in the print dialog.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;11.064276048714&quot;&gt;&lt;td class=&quot;lit&quot;&gt;resize[&lt;em&gt;width, height&lt;/em&gt;]&lt;/td&gt;
&lt;td readability=&quot;9.6094839609484&quot;&gt;Resizes an image to the new specified width and height and returns a new image. It does not modify the original image. If either &lt;code&gt;width&lt;/code&gt; or &lt;code&gt;height&lt;/code&gt; are the special value &lt;code&gt;undef&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt;, then one dimension is constrained and the other dimension is calculated to preserve the aspect ratio of the original image.
&lt;p&gt;This is generally &lt;em&gt;not&lt;/em&gt; what you want to do when drawing an image into a &lt;code&gt;graphics&lt;/code&gt; object. You usually only want to do this if you're going to write the image to a file at a different size, or work with individual rescaled pixels. To draw an &lt;code&gt;image&lt;/code&gt; into a &lt;code&gt;graphics&lt;/code&gt; object at any given size, use one of the methods in the &lt;a href=&quot;https://frinklang.org/#DrawingImagesIntoGraphics&quot;&gt;Drawing images into graphics&lt;/a&gt; section below. This will preserve maximum resolution across devices.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt;&lt;a name=&quot;DrawingImagesIntoGraphics&quot; id=&quot;DrawingImagesIntoGraphics&quot;&gt;Drawing images into graphics&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Images can be drawn onto a &lt;code&gt;graphics&lt;/code&gt; object with the following methods on the &lt;code&gt;graphics&lt;/code&gt; object:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Graphics Image Methods&quot; readability=&quot;40&quot;&gt;&lt;tr&gt;&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td class=&quot;lit&quot;&gt;draw[&lt;em&gt;image, left, top, width, height&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Draws the specified image onto the &lt;code&gt;graphics&lt;/code&gt; object with the specified top left coordinates and the specified width and height. Note that this method does &lt;em&gt;not&lt;/em&gt; specifically preserve the image's aspect ratio and thus may distort the image if the width and the height are not in the same ratio as in the original image. To preserve the aspect ratio automatically, use one of the methods below.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;16&quot;&gt;&lt;td class=&quot;lit&quot;&gt;draw[&lt;em&gt;image, left, top, width, height, leftSrc, topSrc, rightSrc, bottomSrc&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Like &lt;code&gt;draw&lt;/code&gt; above, but draws &lt;em&gt;part&lt;/em&gt; of the specified image. The parameters ending in &lt;code&gt;Src&lt;/code&gt; contain the pixel values of the image to include. To preserve the aspect ratio automatically, use one of the methods below.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td class=&quot;lit&quot;&gt;fitCenter[&lt;em&gt;image, cx, cy, width, height&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Draws an image onto the &lt;code&gt;graphics&lt;/code&gt; object with the specified center coordinates (cx,cy), making it fill the specified width and height &lt;em&gt;as much as possible without modifying the aspect ratio.&lt;/em&gt; This will thus preserve the proportions of the image.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14&quot;&gt;&lt;td class=&quot;lit&quot;&gt;fitCenter[&lt;em&gt;image, cx, cy, width, height, leftSrc, topSrc, rightSrc, bottomSrc&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Like &lt;code&gt;fitCenter&lt;/code&gt; above, but draws &lt;em&gt;part&lt;/em&gt; of an image. The parameters ending in &lt;code&gt;Src&lt;/code&gt; contain the pixel values of the image to include.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td class=&quot;lit&quot;&gt;fillCenter[&lt;em&gt;image, cx, cy, width, height&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Draws an image onto the &lt;code&gt;graphics&lt;/code&gt; object with the specified center coordinates (cx,cy), making it &lt;em&gt;completely fill the specified width and height without modifying the aspect ratio. Note that this may cut off part of the image!&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14&quot;&gt;&lt;td class=&quot;lit&quot;&gt;fillCenter[&lt;em&gt;image, cx, c,y width, height, leftSrc, topSrc, rightSrc, bottomSrc&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Like &lt;code&gt;fillCenter&lt;/code&gt; above, but draws &lt;em&gt;part&lt;/em&gt; of an image. The parameters ending in &lt;code&gt;Src&lt;/code&gt; contain the pixel values of the image to include. &lt;em&gt;Note that this may cut off part of the image!&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;See the &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=rewriteImage.frink&quot;&gt;rewriteImage.frink&lt;/a&gt; sample program for an example of loading an image, writing a semi-transparent watermark over it, and then saving the image out to another file at its original size.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;Animation&quot; id=&quot;Animation&quot;&gt;Animation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Animation is performed by calling the &lt;code&gt;replaceGraphics[&lt;em&gt;g&lt;/em&gt;]&lt;/code&gt; method on a graphics window (obtained by &lt;code&gt;&lt;em&gt;graphics&lt;/em&gt;.show[]&lt;/code&gt;) which replaces the graphics object with a new graphics object and repaints the window.&lt;/p&gt;
&lt;p&gt;A short sample of animation is available in the &lt;a href=&quot;http://futureboy.us/fsp/colorize.fsp?f=animate.frink&quot;&gt;animate.frink&lt;/a&gt; sample program.&lt;/p&gt;
&lt;p&gt;An on-screen graphics window can be repainted as items are added to its &lt;code&gt;graphics&lt;/code&gt; object. Repainting is not done automatically, but is under the programmer's control. This allows the screen to be repainted only when desired.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&lt;em&gt;graphics&lt;/em&gt;.show[]&lt;/code&gt; method returns an object with a &lt;code&gt;repaint[]&lt;/code&gt; or &lt;code&gt;replaceGraphics[&lt;em&gt;g&lt;/em&gt;]&lt;/code&gt; method that instructs the graphics window to be painted. &lt;em&gt;Tip:&lt;/em&gt; don't save this object if you're not planning on doing incremental animation, or set the variable to some value such as &lt;code&gt;undef&lt;/code&gt; when animation is complete. This will allow the window's resources to be garbage-collected as soon as possible.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;g = new graphics&lt;br /&gt;window = g.show[]&lt;/code&gt;&lt;/p&gt;&lt;p&gt;for x = 1 to 10&lt;br /&gt;{&lt;br /&gt;   g.fillRectCenter[x,0,1,1]&lt;br /&gt;   window.repaint[]&lt;br /&gt;}&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;AnimatedImages&quot; id=&quot;AnimatedImages&quot;&gt;Animated Images&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Frink can combine a series of &lt;code&gt;graphics&lt;/code&gt; objects into a single animated GIF image very simply. The series of steps is:&lt;/p&gt;
&lt;ol readability=&quot;0&quot;&gt;&lt;li&gt;Create an object of type &lt;code&gt;Animation&lt;/code&gt;, optionally setting the frame rate. The frame rate can be specified as either a time or a frequency, for example, &lt;code&gt;1/30 s&lt;/code&gt; or &lt;code&gt;33 ms&lt;/code&gt; or &lt;code&gt;30/s&lt;/code&gt;.
&lt;p class=&quot;CODE&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = new Animation&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p class=&quot;CODE&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = new Animation[30/s]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;Create a &lt;code&gt;graphics&lt;/code&gt; object for each frame and draw into it using the methods described above.
&lt;p class=&quot;CODE&quot;&gt;&lt;code class=&quot;input&quot;&gt;g = new graphics&lt;br /&gt;...&lt;em&gt;drawing code goes here&lt;/em&gt;...&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;graphics&lt;/code&gt; object to the &lt;code&gt;Animation&lt;/code&gt; object using its &lt;code&gt;add&lt;/code&gt; method:
&lt;p class=&quot;CODE&quot;&gt;&lt;code class=&quot;input&quot;&gt;a.add[g]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Repeat steps 2 and 3 for each frame of your animation.&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;Write the animated image to a file at any resolution using the &lt;code&gt;&lt;em&gt;Animation&lt;/em&gt;.write[&lt;em&gt;filename, width, height&lt;/em&gt;]&lt;/code&gt; method:
&lt;p class=&quot;CODE&quot;&gt;&lt;code class=&quot;input&quot;&gt;a.write[&quot;animation.gif&quot;, 400, 400]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h4&gt;Animated Image Methods&lt;/h4&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Animated Image Methods&quot; readability=&quot;10.5&quot;&gt;&lt;tr&gt;&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;lit&quot;&gt;add[&lt;em&gt;graphics&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Adds a new frame to the animation, represented by the &lt;code&gt;graphics&lt;/code&gt; object. This may also be an &lt;code&gt;image&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;16&quot;&gt;&lt;td class=&quot;lit&quot;&gt;write[&lt;em&gt;filename, width, height&lt;/em&gt;]&lt;br /&gt;write[&lt;em&gt;filename, width, height, insets&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Writes the animation to the specified filename. Currently, no matter what filename is specified, the format will be an animated GIF. &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; are integers. If the insets are specified, they must be a number between 0 and 1 indicating how much of the image is filled by the graphics. If &lt;code&gt;insets&lt;/code&gt; is 1, the graphics will fill the entire image with no border.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;toBase64[&lt;em&gt;width, height&lt;/em&gt;]&lt;/td&gt;
&lt;td&gt;Turns the animation into a base-64 encoded string in animated GIF format.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;&lt;a name=&quot;SampleGraphicsPrograms&quot; id=&quot;SampleGraphicsPrograms&quot;&gt;Sample Graphics Programs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Below is a small list of simple but interesting and powerful programs that demonstrate Frink's graphics.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Graphics Sample Programs&quot; readability=&quot;11.0203685742&quot;&gt;&lt;tr&gt;&lt;th&gt;Filename&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.4090909090909&quot;&gt;&lt;td&gt;&lt;a href=&quot;http://futureboy.us/fsp/colorize.fsp?f=animate.frink&quot;&gt;animate.frink&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Demonstrates simple animation.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.6734693877551&quot;&gt;&lt;td&gt;&lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=graphpaper.frink&quot;&gt;graphpaper.frink&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Prints graph paper with 1 cm and 1 mm grids. Demonstrates exactly-sized printing.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5.5068493150685&quot;&gt;&lt;td&gt;&lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=rewriteImage.frink&quot;&gt;rewriteImage.frink&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Loads a bitmap image and writes a semi-transparent watermark on it and then saves it back out to a file. Demonstrates image loading, drawing over images, and saving image files at their original size.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2.6823529411765&quot;&gt;&lt;td&gt;&lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=SolarCooker2.frink&quot;&gt;SolarCooker2.frink&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Draws a parabola and focal point for a small solar cooker that you can cut out and use to make a precisely-shaped mirror for cooking hot dogs and such.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3.954802259887&quot;&gt;&lt;td&gt;&lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=simplegraph3.frink&quot;&gt;simplegraph3.frink&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A &lt;em&gt;very&lt;/em&gt; powerful but simple program to graph just about any equation, no matter how complicated or ill-behaved, using Frink's &lt;a href=&quot;https://frinklang.org/#IntervalArithmetic&quot;&gt;Interval Arithmetic&lt;/a&gt; capabilities.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3.5596330275229&quot;&gt;&lt;td&gt;&lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=spiral.frink&quot;&gt;spiral.frink&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Draws simple, colorful spirals. Fiddle with the numbers to make different, interesting patterns.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3.0802139037433&quot;&gt;&lt;td&gt;&lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=drawSolarSystem.frink&quot;&gt;drawSolarSystem.frink&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Draws the current position of planets in the solar system. (With exaggerated scale, otherwise they're invisible.) Requires the &lt;a href=&quot;https://frinklang.org/frinksamp/planets.frink&quot;&gt;planets.frink&lt;/a&gt; and &lt;a href=&quot;https://frinklang.org/frinksamp/sun.frink&quot;&gt;sun.frink&lt;/a&gt; libraries.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Temperature scales that have their zero point (kelvin, Rankine) at absolute zero can be multiplied and converted normally.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;45 Rankine -&amp;gt; K&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;25&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Temperature scales like Fahrenheit, Celsius, and Reaumur cannot be represented as normal multiplicative unit definitions because their zero point is not at absolute zero. Thus, to avoid ambiguous &quot;do what I mean&quot; interpretation, you must use the functions &lt;code&gt;Fahrenheit[x]&lt;/code&gt; or the shorter &lt;code&gt;F[x]&lt;/code&gt;, &lt;code&gt;Celsius[x]&lt;/code&gt; or the shorter &lt;code&gt;C[x]&lt;/code&gt;, and &lt;code&gt;Reaumur[x]&lt;/code&gt; to convert to/from these temperature scales:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;To represent a Fahrenheit temperature:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;Fahrenheit[451]&lt;/code&gt;&lt;br /&gt;or&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;F[451]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;505.9277777777778 K (temperature)&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;To convert another temperature scale to Fahrenheit:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;Fahrenheit[30 K]&lt;/code&gt;&lt;br /&gt;or&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;F[30 K]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;-405.67&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;To represent a Celsius temperature:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;Celsius[0]&lt;/code&gt;&lt;br /&gt;or&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;C[0]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;273.15 K (temperature)&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;To convert another temperature scale to Celsius:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;Celsius[30 K]&lt;/code&gt;&lt;br /&gt;or&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;C[30 K]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;-243.15&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;To convert between scales (short version):&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;Fahrenheit[98.6] -&amp;gt; Celsius&lt;/code&gt;&lt;br /&gt;or&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;F[98.6] -&amp;gt; C&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;37.0&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;This is equivalent to saying:&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;Celsius[ Fahrenheit[98.6] ]&lt;/code&gt;&lt;br /&gt;or&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;C[ F[98.6] ]&lt;/code&gt;&lt;br /&gt;Except this way &lt;em&gt;doesn't&lt;/em&gt; turn the result into a string like the &lt;code&gt;-&amp;gt;&lt;/code&gt; operator does.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The units &lt;code&gt;degC&lt;/code&gt; and &lt;code&gt;degF&lt;/code&gt; only indicate the difference in the &lt;em&gt;size&lt;/em&gt; of a degree in these various scales. They should only be used when you're indicating the &lt;em&gt;difference&lt;/em&gt; between two temperatures, (say, how much energy to raise the temperature of a gram of water by 5 degrees Celsius,) &lt;em&gt;not&lt;/em&gt; for absolute temperatures. Conversely, the conversion functions above should &lt;em&gt;not&lt;/em&gt; be used when the &lt;em&gt;difference&lt;/em&gt; between temperatures in two scales should be compared.&lt;/p&gt;
&lt;p&gt;The International System of Units (SI) considers the thermodynamic temperature in kelvin and the size of a degree in the kelvin system to have the same units. See &lt;a href=&quot;http://www.bipm.org/en/CGPM/db/13/3/&quot;&gt;Resolution 3 of the 13th CGPM (1967/68)&lt;/a&gt;. This means that you can use &lt;code&gt;K&lt;/code&gt; as either an absolute thermodynamic temperature, or a temperature difference. However, this implies that Frink can't automatically guarantee that &quot;do what I mean&quot; calculations with temperature are correct, as it would have to magically guess what you mean.&lt;/p&gt;

&lt;p&gt;One of the main design goals of Frink was to allow new sources of data to be added in very easily. These special sources are not necessarily defined in the &lt;a href=&quot;https://frinklang.org/frinkdata/units.txt&quot;&gt;data file&lt;/a&gt;. The three data sources listed below retrieve data on demand from up-to-the-minute data on the Internet (and thus require connection to the Internet.)&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;HistoricalUSPriceData&quot; id=&quot;HistoricalUSPriceData&quot;&gt;Historical U.S. Price Data&lt;/a&gt;&lt;/h3&gt;
&lt;p class=&quot;warning&quot;&gt;&lt;strong&gt;Obligatory Disclaimer:&lt;/strong&gt; This feature requires connection to the internet. If you are using Frink on a handheld device, you may incur connection charges. Also, since I cannot guarantee the availability of any internet sites, this feature is intended only as a bonus that may not work reliably if at all. You may also require some &lt;a href=&quot;https://frinklang.org/#ProxyConfiguration&quot;&gt;proxy configuration&lt;/a&gt; if you use an FTP proxy server to access the web.&lt;/p&gt;
&lt;p&gt;The units &quot;dollar&quot; or &quot;USD&quot; indicate the value of a &lt;em&gt;current&lt;/em&gt; U.S. dollar (which is arbitrarily chosen as the standard unit of currency.) Historical price data is available to allow comparisons between the historical &quot;buying power&quot; of U.S. currency. This allows you to adjust historical prices for inflation. These are represented by specially-named units containing both the currency and the year, separated by an underscore, for example:&lt;/p&gt;
&lt;ul&gt;&lt;li class=&quot;code&quot;&gt;1.25 dollar_1960&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;dollar_1902&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;dollars_1902&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;10 dollars_1902&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;10 USD_1902&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;cent_1910&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;5 cents_1926&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;cent_1914&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strike&gt;Data after 1913 is fetched live from the U.S. Department of Labor &lt;a href=&quot;http://www.bls.gov/&quot;&gt;Bureau of Labor Statistics&lt;/a&gt; Consumer Price Index data, specifially by retrieving and parsing &lt;a href=&quot;http://stats.bls.gov/cpi/cpifiles/cpiai.txt&quot;&gt;this file&lt;/a&gt;. If that file is unavailable, the data will be fetched from a static file distributed with Frink, which is only as recent as your version of Frink.&lt;/strike&gt;&lt;/p&gt;
&lt;p&gt;Since the U.S. Department of Labor &lt;a href=&quot;http://www.bls.gov/&quot;&gt;Bureau of Labor Statistics&lt;/a&gt; no longer maintains a machine-readable Consumer Price Index file, the file is fetched from the St. Louis Federal Reserve, specifically by parsing &lt;a href=&quot;https://fred.stlouisfed.org/data/CPIAUCNS.txt&quot;&gt;this file.&lt;/a&gt; The new data is also cached in each Frink jar file in case you don't have network connectivity.&lt;/p&gt;
&lt;p&gt;Data from 1700 to 1912 is based on some general economists' guesses and should be taken with a grain of salt. U.S. data before 1700 is not available, and probably wouldn't be meaningful unless you could convert between the value of pelts, tinder, and tallow.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; The BLS web and FTP servers seem to have frequent outages, and historical data will not be available if the servers are down, or if you are not connected to the Internet. Frink contains an internal cache of the CPI data in this case.&lt;/p&gt;
&lt;p&gt;From 1913-present, you can even use monthly resolution by indicating the month after the year. Months are 2 digits and padded with zeros:&lt;/p&gt;
&lt;ul&gt;&lt;li class=&quot;code&quot;&gt;dollar_1969_08&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;dollars_1969_08&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;14.75 dollar_1941_12&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;14.75 USD_1941_12&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;dollars_1941_12&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;dollar_1941_12&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;15 cents_1965_10&lt;/li&gt;
&lt;li class=&quot;code&quot;&gt;4 cent_1929_01&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Historical currency values can be converted to the current value. For example to find today's cost of Mark Twain's passage to Europe and the Holy Land on the steamship &lt;em&gt;Quaker City&lt;/em&gt; at a cost of $1250 in 1867 (detailed in &lt;a href=&quot;https://frinklang.org/twain/innocents/&quot;&gt;&lt;em&gt;The Innocents Abroad&lt;/em&gt;&lt;/a&gt;, the conversion of which was one of my first web projects):&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;1250 dollar_1867 -&amp;gt; dollar&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;14982.240769251547535000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And, you can add the 5 dollars/day in gold that they were encouraged to bring along to cover expenses for the 6-month trip:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;1250 dollar_1867 + 5 dollars_1867/day 6 months -&amp;gt; dollar&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;26043.38587544437&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can translate from one year and month to another, if you have a DeLorean, and want to watch a Reagan movie:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;50 cents_1955_11 -&amp;gt; dollars_1985_10&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;2.020446096654275&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;HistoricalBritishPriceData&quot; id=&quot;HistoricalBritishPriceData&quot;&gt;Historical British Price Data&lt;/a&gt;&lt;/h3&gt;
&lt;p class=&quot;warning&quot;&gt;&lt;strong&gt;Obligatory Disclaimer:&lt;/strong&gt; This feature requires connection to the internet. If you are using Frink on a handheld device, you may incur connection charges. Also, since I cannot guarantee the availability of any internet sites, this feature is intended only as a bonus that may not work reliably if at all. You may also require some &lt;a href=&quot;https://frinklang.org/#ProxyConfiguration&quot;&gt;proxy configuration&lt;/a&gt; if you use an HTTP proxy server to access the web.&lt;/p&gt;
&lt;p&gt;The units &lt;code&gt;Britain&lt;/code&gt; or &lt;code&gt;Britain_Pound&lt;/code&gt; or &lt;code&gt;Britain_currency&lt;/code&gt; or &lt;code&gt;Great_Britain&lt;/code&gt; or &lt;code&gt;Great_Britain_Pound&lt;/code&gt; or &lt;code&gt;United_Kingdom_Pound&lt;/code&gt;, or &lt;code&gt;England&lt;/code&gt; or &lt;code&gt;England_currency&lt;/code&gt; or &lt;code&gt;GBP&lt;/code&gt; (the &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO-4217&lt;/a&gt; code for the U.K. Pound) indicate the &lt;em&gt;current&lt;/em&gt; pound (but don't use &lt;code&gt;pound&lt;/code&gt; by itself--that's a measure of mass.) The exchange rate between the pound and all other world currencies, see below, is fetched live from the Internet.&lt;/p&gt;
&lt;p&gt;Historical price data is available to allow comparisons between the historical &quot;buying power&quot; of British currency, both pre- and post-decimalization. Data goes back to the year 1245. I don't know if data before this would be very meaningful.&lt;/p&gt;
&lt;p&gt;Historical currency values are represented by specially-named units containing both the currency and the year, separated by an underscore. All can be used in the plural, (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;pound_1960&lt;/code&gt; or &lt;code&gt;pounds_1960&lt;/code&gt; or &lt;code&gt;GBP_1960&lt;/code&gt; are all valid). The following are examples of the plethora of values up to and including 1970 (from 1971 on, it just became pounds and pence):&lt;/p&gt;
&lt;table summary=&quot;British Currency Unit Examples&quot; readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;guinea_1865&lt;/td&gt;
&lt;td&gt;A pound plus a shilling (21/20 pounds)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;pound_1865&lt;/td&gt;
&lt;td&gt;Fundamental unit&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;GBP_1865&lt;/td&gt;
&lt;td&gt;Fundamental unit&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;sovereign_1865&lt;/td&gt;
&lt;td&gt;A pound coin&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;merk_1865&lt;/td&gt;
&lt;td&gt;13/6d (that is 13 shillings and 6 pence) or 27/40 of a pound&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;mark_1865&lt;/td&gt;
&lt;td&gt;2/3 pound&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;noble_1865&lt;/td&gt;
&lt;td&gt;80 pence or 1/3 pound&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;crown_1865&lt;/td&gt;
&lt;td&gt;1/4 pound or 5 shillings&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;florin_1865&lt;/td&gt;
&lt;td&gt;2 shillings or 1/10 pound&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;shilling_1865&lt;/td&gt;
&lt;td&gt;1/20 pound or 12 pence&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;groat_1865&lt;/td&gt;
&lt;td&gt;4 pence or 1/60 pound&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;penny_1865 or pence_1865&lt;/td&gt;
&lt;td&gt;1/12 shilling or 1/240 pound&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;farthing_1865&lt;/td&gt;
&lt;td&gt;1/4 penny or 1/960 pound&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;No wonder they went to decimalization. It was either that or go to base-960 math.&lt;/p&gt;
&lt;p&gt;To form combinations you can add them (using parentheses when necessary). For example, to convert a historical rate per day to current dollars/year:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;(4 pounds_1860 + 3 shilling_1860 + 5 pence_1860) / day -&amp;gt; dollars/year&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;101853.3826649&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I acknowledge that's a bit cumbersome.&lt;/p&gt;
&lt;p&gt;So, you can find out what a great amount of money was involved when the British Parliament announced a 20,000 pound prize in 1714 for solving the &lt;a href=&quot;http://www.rmg.co.uk/explore/astronomy-and-time/time-facts/harrison&quot;&gt;Longitude Problem&lt;/a&gt;:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;20000 pound_1714 -&amp;gt; dollars&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;2807866.8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That's a lot of lettuce. For more about the fascinating history of this problem, I highly recommend Dava Sobel's &lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0140258795/ref=pd_ecc_rvi_1/104-0183884-9196715&quot;&gt;&lt;em&gt;Longitude: The True Story of a Lone Genius Who Solved the Greatest Scientific Problem of His Time&lt;/em&gt;&lt;/a&gt;. By God, Harrison, I will see you righted.&lt;/p&gt;
&lt;p&gt;Thanks to Dan Weiler who loaned me the above book which I never returned (and passed along to my Grandpa.) Sorry, Dan, I'll buy you a book of your choice.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;InternationalExchangeRates&quot; id=&quot;InternationalExchangeRates&quot;&gt;International Exchange Rates&lt;/a&gt;&lt;/h3&gt;
&lt;p class=&quot;warning&quot;&gt;&lt;strong&gt;Obligatory Disclaimer:&lt;/strong&gt; This feature requires connection to the internet. If you are using Frink on a handheld device, you may incur connection charges. Also, since I cannot guarantee the availability of any internet sites, this feature is intended only as a bonus that may not work reliably if at all. You may also require some &lt;a href=&quot;https://frinklang.org/#ProxyConfiguration&quot;&gt;proxy configuration&lt;/a&gt; if you use an HTTP proxy server to access the web.&lt;/p&gt;
&lt;p&gt;Current exchange rate between almost all of the world's currencies is available. Exchange rates are fetched live from an allegedly zero-delay source on the Internet. The currency can either be specified by the name of the country, by the 3-letter &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO-4217&lt;/a&gt; code for the currency, or by one of the combinations shown below. The following examples all work:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Ireland&lt;/li&gt;
&lt;li&gt;Ireland_currency&lt;/li&gt;
&lt;li&gt;Ireland_Punt&lt;/li&gt;
&lt;li&gt;IEP&lt;/li&gt;
&lt;li&gt;Japan&lt;/li&gt;
&lt;li&gt;Japan_currency&lt;/li&gt;
&lt;li&gt;Japan_Yen&lt;/li&gt;
&lt;li&gt;JPY&lt;/li&gt;
&lt;li&gt;yen (this works because only Japan has a currency called &quot;yen&quot;)&lt;/li&gt;
&lt;li&gt;Yen&lt;/li&gt;
&lt;li&gt;United_Arab_Emirates&lt;/li&gt;
&lt;li&gt;United_Arab_Emirates_currency&lt;/li&gt;
&lt;li&gt;United_Arab_Emirates_Dirham&lt;/li&gt;
&lt;li&gt;AED&lt;/li&gt;
&lt;li&gt;Euro&lt;/li&gt;
&lt;li&gt;EUR&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To list all of the currencies, you can use:&lt;br /&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;units[currency]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So, I'm watching &quot;The Amazing Race&quot; and seeing a team pay 600 Baht in Thailand for a hotel room. How much is that in a currency I'm familiar with?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;600 baht -&amp;gt; USD&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;13.73724&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I could have also used &lt;code&gt;Thailand_Baht&lt;/code&gt; or &lt;code&gt;Thailand&lt;/code&gt; in the above example.&lt;/p&gt;
&lt;p&gt;You can also get the current trade rates of various precious metals (normalized from the obscure troy weights that these values are measured in.) These are referenced using the &lt;em&gt;capitalized&lt;/em&gt; name (lower case brings up element properties for now... this will all be addressed when I add object-oriented behavior to Frink) or the 3-letter ISO code (which is an X followed by the chemical symbol):&lt;/p&gt;
&lt;table summary=&quot;Precious metals and their symbols&quot;&gt;&lt;tr&gt;&lt;th&gt;Element&lt;/th&gt;
&lt;th&gt;ISO Code&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;Gold&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;XAU&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;Platinum&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;XPT&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;Silver&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;XAG&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;Palladium&lt;/td&gt;
&lt;td class=&quot;lit&quot;&gt;XPD&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;Gold&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;8765.9010519364188896 kg^-1 USD (price_per_mass)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that this is in units of currency/mass (the international exchange rates for these are specified in dollars/troyounce, (but try to find that written somewhere)), but you can use any units of mass you want:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;1 ton Gold&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;7952291.666666666667 USD (currency)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or find out how much it would be worth to melt down that necklace:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;3 gram 18 karat Gold&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;19.723277366856942501600 USD (currency)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you want to set a different base currency in your units file, and if you want currency conversions to still work, you should now) define the base currency as its 3-letter ISO-4217 currency code (say, &quot;EUR&quot; or &quot;JPY&quot;). This will allow the currency converter to unambiguously figure out which currency you mean. The following special cases work as well:&lt;/p&gt;
&lt;table border=&quot;1&quot; summary=&quot;Currency Symbols&quot; readability=&quot;3&quot;&gt;&lt;tr&gt;&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;dollar&lt;/td&gt;
&lt;td&gt;U.S. dollar&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;Euro&lt;/td&gt;
&lt;td&gt;Euro&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;euro&lt;/td&gt;
&lt;td&gt;euro&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;€&lt;/td&gt;
&lt;td&gt;Euro symbol (Unicode &lt;code&gt;\u20ac&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;¥&lt;/td&gt;
&lt;td&gt;Japanese Yen symbol (Unicode &lt;code&gt;\u00a5&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;£&lt;/td&gt;
&lt;td&gt;U.K. Pound symbol (Unicode &lt;code&gt;\u0163&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Frink has the magical ability to perform rigorous interval arithmetic throughout calculations. So what is interval arithmetic? Well, you can think of it as a &quot;new kind of number&quot; that represents a fuzzy range of values. For example, you may know that a value lies between 1 and 2, but you're not quite sure where the value lies in that interval. Depending on your philosophy, you can think of an interval as specifying a fuzzy error bound, or you can think of an interval as simultaneously taking on all values within its bounds.&lt;/p&gt;
&lt;p&gt;Frink can take this uncertain interval and propagate the uncertainty through its calculations, giving you the ability to see how the initial uncertainties in your values affect your final calculations.&lt;/p&gt;
&lt;p&gt;Currently, the way to indicate that something is an interval is to use the &lt;code&gt;new interval&lt;/code&gt; syntax (although something more concise will likely be added later, and the output format may change.)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = new interval[2,3]&lt;br /&gt;b = new interval[5,7]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The intervals can then be manipulated in mathematical expressions, either with ordinary scalar variables or other intervals:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a * 3&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[6, 9]&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a + b&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[7, 10]&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a * b&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[10, 21]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Intervals may also have a &quot;middle&quot; or &quot;main&quot; value which indicates the best-known value. Note that values should be specified in increasing order.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;d = new interval[2, 2.5, 3]&lt;br /&gt;e = new interval[7, 8.2, 9.4]&lt;br /&gt;d * e&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;[14, 20.5, 28.2]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Of course, all intervals used in a calculation must have &quot;main&quot; values or the main value will be dropped, creating an interval with only upper and lower bounds.&lt;/p&gt;
&lt;p&gt;Note: The boundaries and &quot;main&quot; values for intervals must be real numbers. (These numbers can also have dimensions like feet, meters, etc.) Although there is a theory of complex intervals, it's much harder and may not get implemented any time soon, (although a very generous Frink user sent a copy of a rare $200 textbook on complex interval arithmetic which will help that situation! Thanks, Joshua!)&lt;/p&gt;
&lt;p&gt;Lest you think that intervals are simpler than they are, I find that people better understand them when they consider the following case:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;x = new interval[-2,2]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now, let's square x. Note that the values at each endpoint are equal to 4. However, over the range [-2,2], the value of x&lt;sup&gt;2&lt;/sup&gt; ranges from 4, down to 0 (at x=0), and back up to 4. Frink does the right thing for the values over this whole range:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;x^2&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[0, 4]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Yeah, that &lt;em&gt;is&lt;/em&gt; cool. Frink tracks appropriate boundaries for intervals throughout all of your calculations.&lt;/p&gt;
&lt;p&gt;Frink's interval arithmetic is also rigorous in its treatment of error bounds. It painstakingly controls the rounding direction of arithmetic operations so that the boundaries are guaranteed to include the next-largest or next-smallest representable floating-point number that contains the interval. (See notes below on &lt;a href=&quot;https://frinklang.org/#IntervalArithmeticStatus&quot;&gt;implementation status&lt;/a&gt;.) This is subtle, but I have spent a lot of work ensuring that the boundaries came out trustable, and no bigger than need be. For example:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;m = new interval[3,6]&lt;br /&gt;1.0/m&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;[0.16666666666666666666, 0.33333333333333333334]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that the bottom bound is rounded down, and the top bound is rounded up.&lt;/p&gt;
&lt;p&gt;Currently, almost all functions have been made interval-aware. Implementing all functions &lt;em&gt;to arbitrary precision&lt;/em&gt; will take quite a bit of effort. Of course, that would be much slower, too. Error bounds are unfortunately not &quot;sharp&quot; for all operations (meaning as tight as they could possibly be with limited precision.) I've noted them as such in the &lt;a href=&quot;https://frinklang.org/#IntervalArithmeticStatus&quot;&gt;Interval Arithmetic Status&lt;/a&gt; section below.&lt;/p&gt;
&lt;p&gt;Not all operators such as &lt;code&gt;&amp;lt; &amp;gt; =&lt;/code&gt; make unambiguous sense when applied to intervals, so Frink has introduced new operators to disambiguate these cases, and will implement other operators to work with intervals. See the &lt;a href=&quot;https://frinklang.org/#IntervalComparisonOperators&quot;&gt;Interval Comparison Operators&lt;/a&gt; section below for more details.&lt;/p&gt;
&lt;p&gt;By default, degenerate intervals which have the same upper and lower bounds are &quot;collapsed&quot; into a single real number. If you want to maintain them as intervals, call the function &lt;code&gt;collapseIntervals[false]&lt;/code&gt; before constructing or performing mathematics on those intervals.&lt;/p&gt;
&lt;p&gt;As everyone uses Interval Arithmetic for the first time, they come upon two characteristic problems in the field: the dependence problem and the overestimation problem. These are common to all interval analysis, and not just to Frink, and are covered in extensive detail in the &lt;a href=&quot;https://frinklang.org/faq.html#IntervalArithmetic&quot;&gt;Interval Arithmetic section of the Frink FAQ.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For more information about the field of Interval Arithmetic, please visit the &lt;a target=&quot;_blank&quot; href=&quot;http://www.cs.utep.edu/interval-comp/&quot;&gt;Interval Computations&lt;/a&gt; website. (Link opens in new window.)&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;IntervalArithmeticExample&quot; id=&quot;IntervalArithmeticExample&quot;&gt;Interval Arithmetic Example&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Interval arithmetic is an incredibly powerful feature that allows programs that weren't necessarily written with intervals in mind to track error bounds throughout your calculations, and can be magically applied to programs that are already written. For example, let's take some calculations to find the volume and density of a sphere:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;circumference = eval[input[&quot;Enter circumference of a sphere: &quot;]]&lt;br /&gt;mass = eval[input[&quot;Enter the mass of the sphere: &quot;]]&lt;br /&gt;diameter = circumference / pi&lt;br /&gt;radius = diameter / 2&lt;br /&gt;volume = 4/3 pi radius^3&lt;br /&gt;density = mass / volume&lt;br /&gt;println[&quot;The density is: &quot; + (density -&amp;gt; &quot;g/cm^3&quot;)]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now, you can run the program and enter something like &quot;9.1 inches&quot; for the circumference and &quot;5.1 ounces&quot; for the mass and find out the density of your baseball. No surprises there. But when you read the rules of Major League Baseball, you'll find that section 1.09 states:&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;&quot;The ball shall be a sphere formed by yarn wound around a small core of cork, rubber or similar material, covered with two stripes of white horsehide or cowhide, tightly stitched together. It shall weigh not less than five nor more than 5 1/4 ounces avoirdupois and measure not less than nine nor more than 9 1/4 inches in circumference.&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, using your exact same program above, and a little interval input, Frink can calculate the effects of these allowed variations and show you the allowed range of densities of &lt;em&gt;any&lt;/em&gt; legal baseball:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;output&quot;&gt;Enter circumference of a sphere:&lt;/code&gt; &lt;code class=&quot;input&quot;&gt;new interval[9, 9+1/4] inches&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;Enter the mass of the sphere:&lt;/code&gt; &lt;code class=&quot;input&quot;&gt;new interval[5, 5+1/4] ounces&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;The density is: [0.64720283343427980773, 0.73778085086685322066] g/cm^3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The output indicates the range of uncertainties. Note that two different intervals were used to perform this calculation, and the effects of their uncertainties was automatically tracked throughout all calculations. All this in a program that wasn't even written with intervals in mind. Unscrupulous teams may also not that the official definition allows for a &lt;em&gt;large&lt;/em&gt; variation in allowable densities of baseballs, which could be manipulated to your advantage.&lt;/p&gt;
&lt;p&gt;Also note that I put the units of measure (e.g. inches, ounces) outside the brackets. You could put them inside the brackets, but you'd just have to write them twice in this case. Intervals can, of course, contain units of measure.&lt;/p&gt;
&lt;p&gt;By the way, I'm working on a more concise notation for specifying intervals.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;IntervalComparisonOperators&quot; id=&quot;IntervalComparisonOperators&quot;&gt;Interval Comparison Operators&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The relational operators (e.g. &lt;code&gt;&amp;lt; == &amp;gt;&lt;/code&gt;, etc) work with intervals, but there are many ambiguous cases. These operators try to Do The Right Thing when applied to intervals. If you compare intervals that do not overlap, they return the appropriate result. If, however, the intervals &lt;em&gt;do&lt;/em&gt; overlap, they terminate the program with an error similar to the following:&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;Comparison expression: Using operator &amp;gt; to compare intervals [1, 3] and [2, 4]&lt;br /&gt;This operator is only defined if there is no overlap between intervals.&lt;br /&gt;Please modify your program to use interval-aware comparison operators.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To handle the overlapping cases, Frink defines operators like &quot;certainly less than&quot; (&lt;code&gt;CLT&lt;/code&gt;) and &quot;possibly less than&quot; (&lt;code&gt;PLT&lt;/code&gt;). These operators can directly replace the normal relational operators. These new operators also work with normal real numbers, so you can still write programs that run using either intervals or real numbers as input.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Interval Comparison Operators&quot; readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;CEQ&lt;/td&gt;
&lt;td&gt;Certainly equals&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;CNE&lt;/td&gt;
&lt;td&gt;Certainly not equals&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;CLT&lt;/td&gt;
&lt;td&gt;Certainly less than&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;CLE&lt;/td&gt;
&lt;td&gt;Certainly less-than-or-equal-to&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;CGT&lt;/td&gt;
&lt;td&gt;Certainly greater than&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;CGE&lt;/td&gt;
&lt;td&gt;Certainly greater-than-or-equal-to&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;PEQ&lt;/td&gt;
&lt;td&gt;Possibly equals&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;PNE&lt;/td&gt;
&lt;td&gt;Possibly not equals&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;PLT&lt;/td&gt;
&lt;td&gt;Possibly less than&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;PLE&lt;/td&gt;
&lt;td&gt;Possibly less-than-or-equal-to&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;lit&quot;&gt;PGT&lt;/td&gt;
&lt;td&gt;Possibly greater than&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;lit&quot;&gt;PGE&lt;/td&gt;
&lt;td&gt;Possibly greater-than-or-equal-to&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Example:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = new interval[1,3]&lt;br /&gt;b = new interval[2,4]&lt;br /&gt;a PLT b&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;true&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;input&quot;&gt;a CLT b&lt;br /&gt;&lt;/code&gt; &lt;code class=&quot;output&quot;&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;IntervalArithmeticStatus&quot; id=&quot;IntervalArithmeticStatus&quot;&gt;Interval Arithmetic Status&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As noted above, not all functions are implemented for intervals. The following table notes the status of the implementation of various operators and functions. If a function does not appear on this list, it may still return values for interval arguments, but you shouldn't trust it because I haven't evaluated it for discontinuities or non-monotonicity yet.&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;3&quot; summary=&quot;Interval Arithmetic Status&quot; readability=&quot;30&quot;&gt;&lt;tr&gt;&lt;th&gt;Function / Operator&lt;/th&gt;
&lt;th&gt;Arbitrary Precision?&lt;/th&gt;
&lt;th&gt;Rigorous Error Bounds?&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;centerlit&quot;&gt;+&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;centerlit&quot;&gt;-&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;centerlit&quot;&gt;*&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;centerlit&quot;&gt;/&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;centerlit&quot;&gt;mod&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;^&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td&gt;Performed to hardware precision only.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;centerlit&quot;&gt;floor[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;ln[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td&gt;Performed to hardware precision only.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;log[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td&gt;Performed to hardware precision only.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;exp[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td&gt;Performed to hardware precision only.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;sin[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td&gt;Performed to hardware precision only.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;cos[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td&gt;Performed to hardware precision only.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;tan[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td&gt;Performed to hardware precision only.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;sec[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td&gt;Performed to hardware precision only.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;csc[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td&gt;Performed to hardware precision only.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;cot[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td&gt;Performed to hardware precision only.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;arccos[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td&gt;Performed to hardware precision only.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;arcsin[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td&gt;Performed to hardware precision only.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;arctan[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td&gt;Performed to hardware precision only.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;arctan[&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td&gt;Performed to hardware precision only. Returns arctan[x/y] corrected for quadrant. Arguments can be real or intervals. Has some corrections to range of function to eliminate branch discontinuity across x=0 when y&amp;lt;0.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;sqrt[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;N&lt;/td&gt;
&lt;td&gt;Performed to hardware precision for floating-point numbers, exact values for integers that produce exact integer values.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;infimum[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td&gt;Returns the infimum (lower bound) of an interval. If called with a number that is not an interval, just returns the number.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;supremum[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td&gt;Returns the supremum (upper bound) of an interval. If called with a number that is not an interval, just returns the number.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;magnitude[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td&gt;Returns the absolute value of the endpoint furthest from zero. If called with a real number, just returns the number. If called with a complex number, returns the absolute value (the magnitude) of the complex number.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;mignitude[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td&gt;Returns the absolute value of the endpoint &lt;em&gt;closest to&lt;/em&gt; zero. If called with a real number, just returns the number. If called with a complex number, since &quot;mignitude&quot; of a complex number is generally not defined, this also returns the absolute value (the magnitude) of the complex number.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;centerlit&quot;&gt;mainValue[&lt;em&gt;x&lt;/em&gt;]&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;Y&lt;/td&gt;
&lt;td&gt;Returns the main (middle) value of an interval. If the interval does not have a middle value, returns &lt;code&gt;undef&lt;/code&gt;. If called with a number that is not an interval, just returns the number.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;&lt;a name=&quot;DateTimeIntervals&quot; id=&quot;DateTimeIntervals&quot;&gt;Date/Time Intervals&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An interval can also be composed of date/times. The syntax is very similar:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;a = new interval[now[], now[] + 3 days]&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;b = new interval[#1969-08-19#, #2005-06-11#]&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can then perform &lt;a href=&quot;https://frinklang.org/#DateTimeArithmetic&quot;&gt;Date/Time arithmetic&lt;/a&gt; on the values.&lt;/p&gt;

&lt;p&gt;Missing a function that you need? Frink can directly call Java code to let you take advantage of any Java library that's in your classpath. Thus, you can use your favorite graphing package, connect to a database, perform lower-level networking, and more, directly from within Frink.&lt;/p&gt;
&lt;p&gt;Java objects can be manipulated just like Frink objects, by calling their methods or accessing their fields:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Method call:&lt;/strong&gt; Note that method calls on Java objects use square brackets, as they do in all Frink function and method calls:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;&lt;em&gt;obj.method[args]&lt;/em&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Member variable access:&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;&lt;em&gt;obj.field&lt;/em&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Java objects that implement the interfaces &lt;code&gt;java.util.Enumeration&lt;/code&gt;, &lt;code&gt;java.util.Iterator&lt;/code&gt;, or &lt;code&gt;java.lang.Iterable&lt;/code&gt; can be used as a Frink enumerating expression, allowing them to be used in &lt;code&gt;for&lt;/code&gt; loops or other places that allow enumerating expressions.&lt;/p&gt;
&lt;p&gt;The Java &lt;code&gt;null&lt;/code&gt; will be converted to/from the Frink type &lt;code&gt;undef&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;CreatingJavaObjects&quot; id=&quot;CreatingJavaObjects&quot;&gt;Creating Java Objects&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;New Java objects can be created with the &lt;code&gt;newJava[classname]&lt;/code&gt; and &lt;code&gt;newJava[classname, argList]&lt;/code&gt; functions. These call Java constructors with the specified arguments. If the constructor takes a single argument, &lt;code&gt;argList&lt;/code&gt; can be a single value, otherwise it should be an array of values. If the constructor takes no arguments, then the last argument can be eliminated entirely. The following creates a new Frame and calls some methods on the Frame to display it. Note that the method calls require square brackets.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;f = newJava[&quot;javax.swing.JFrame&quot;, &quot;Frink Rules!&quot;]&lt;br /&gt;f.setSize[200,200]&lt;br /&gt;f.show[]&lt;br /&gt;f.toFront[]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Arrays of Java objects, including primitives, can be constructed with the &lt;code&gt;newJavaArray[classname, length]&lt;/code&gt; method.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;d = newJavaArray[&quot;byte&quot;, 1024]&lt;br /&gt;d@0 = 0x65&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The classname should be a string containing either be a fully-qualified classname (e.g. &lt;code&gt;&quot;java.util.Hashtable&quot;&lt;/code&gt;) or a primitive type name, (e.g. &lt;code&gt;&quot;int&quot;&lt;/code&gt; or &lt;code&gt;&quot;double&quot;&lt;/code&gt;). Elements of Java arrays are addressed the same way as other &lt;a href=&quot;https://frinklang.org/#Arrays&quot;&gt;arrays&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Multi-dimensional arrays of Java objects can be created by the same function, but with an array of integers specifying the size of each dimension. For example, the following creates a two-dimensional array of &lt;code&gt;double&lt;/code&gt; with dimensions 3 by 4:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;d = newJavaArray[&quot;double&quot;, [3,4]]&lt;br /&gt;d@0@0 = 3.14&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The methods on a Java object can be listed using the &lt;code&gt;methods[&lt;em&gt;obj&lt;/em&gt;]&lt;/code&gt; function:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;f = newJava[&quot;javax.swing.JFrame&quot;, [] ]&lt;br /&gt;sort[methods[f]]&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;CallingStaticJavaMethods&quot; id=&quot;CallingStaticJavaMethods&quot;&gt;Calling Static Java Methods&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you don't have an instance of the class, you can call static methods in Java classes using the &lt;code&gt;callJava[classname, methodname, argList]&lt;/code&gt; function. The following uses the &lt;code&gt;java.lang.Math&lt;/code&gt; class to generate a random number.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;n = callJava[&quot;java.lang.Math&quot;, &quot;random&quot;, [] ]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;0.38102192379837&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the method requires no arguments, as in the above example, the last argument can be eliminated:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;n = callJava[&quot;java.lang.Math&quot;, &quot;random&quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;0.314291983004521&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Lame example, huh? Especially when Frink can already generate random numbers. The same syntax can be used to get a database driver, or something more interesting.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;AccessingStaticJavaFields&quot; id=&quot;AccessingStaticJavaFields&quot;&gt;Accessing Static Java Fields&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can access static variables in a class without having an instance of the class by calling the &lt;code&gt;staticJava[classname, fieldname]&lt;/code&gt; function.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;green = staticJava[&quot;java.awt.Color&quot;, &quot;GREEN&quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;JavaObject:java.awt.Color&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can then call methods on that object:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;green.getRed[]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you've constructed a Frame as in the &lt;a href=&quot;https://frinklang.org/#CreatingJavaObjects&quot;&gt;Creating Java Objects&lt;/a&gt; section above, you can set its background color by:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;f.setBackground[green]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As of the 2014-04-21 release, Frink turns values returned from &lt;code&gt;staticJava&lt;/code&gt; into their corresponding Frink types. If you need the original, raw Java object (say, for code that checks object identity,) then you can call the three-argument version of the function, passing &lt;code&gt;false&lt;/code&gt; as the third argument (this indicates that the value should &lt;em&gt;not&lt;/em&gt; be mapped to a Frink type):&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;staticJava[&quot;javax.swing.SwingConstants&quot;, &quot;LEFT&quot;]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;2&lt;/code&gt; &lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;staticJava[&quot;javax.swing.SwingConstants&quot;, &quot;LEFT&quot;, false]&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;JavaObject:java.lang.Integer&lt;/code&gt; &lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;CallingFunctionsAndMethodsByName&quot; id=&quot;CallingFunctionsAndMethodsByName&quot;&gt;Calling Functions and Methods by Name&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sometimes you may have to call functions or methods by name. For example, calling a method called &lt;code&gt;&lt;em&gt;object&lt;/em&gt;.next[]&lt;/code&gt; on a Java object is impossible in Frink because &lt;code&gt;next&lt;/code&gt; is a reserved word and produces a syntax error! To get around this, use the &lt;code&gt;callByName[&lt;em&gt;object&lt;/em&gt;, &lt;em&gt;methodName&lt;/em&gt;, &lt;em&gt;argList&lt;/em&gt;]&lt;/code&gt; function.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;callByName[iterator, &quot;next&quot;, [] ]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the first argument (normally an object) is &lt;code&gt;undef&lt;/code&gt;, then the function with the specified name will be called.&lt;/p&gt;
&lt;p&gt;If the argument list is empty, as above, you can eliminate it entirely:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;callByName[iterator, &quot;next&quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the argument list is a single element, you don't have to pass it as a list:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;callByName[undef, &quot;println&quot;, &quot;yo&quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Similarly, you can get a reference to a function by calling &lt;code&gt;getFunction[&lt;em&gt;name&lt;/em&gt;, &lt;em&gt;numArgs&lt;/em&gt;]&lt;/code&gt; which returns a reference to the function with the specified name (specified as a string) and number of arguments. This can then be assigned to variables, or called as noted in the &lt;a href=&quot;https://frinklang.org/#AnonymousFunctions&quot;&gt;Anonymous Functions&lt;/a&gt; section of the documentation.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;IteratingOverJavaCollections&quot; id=&quot;IteratingOverJavaCollections&quot;&gt;Iterating Over Java Collections&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; loop can be used to iterate over the contents of most Java collections, including &lt;code&gt;array&lt;/code&gt;, &lt;code&gt;Vector&lt;/code&gt;, &lt;code&gt;Enumeration&lt;/code&gt;, &lt;code&gt;Iterator&lt;/code&gt;, &lt;code&gt;Collection&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;, (which includes &lt;code&gt;Hashtable&lt;/code&gt;, &lt;code&gt;HashMap&lt;/code&gt;, &lt;code&gt;Properties&lt;/code&gt; etc.), &lt;code&gt;Iterable&lt;/code&gt; (which includes almost &lt;em&gt;all&lt;/em&gt; &lt;code&gt;Collection&lt;/code&gt; types in Java, and anything that can be used in Java's &lt;code&gt;foreach&lt;/code&gt; statement) &lt;em&gt;etc.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For most Java collections, you can iterate through the contents using a &lt;code&gt;for&lt;/code&gt; loop (which is really just a &quot;for each&quot; loop.)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for a = &lt;em&gt;javaObject&lt;/em&gt;&lt;br /&gt;   println[a]&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the Java class implements the &lt;code&gt;java.util.Map&lt;/code&gt; interface (this includes classes like &lt;code&gt;HashMap&lt;/code&gt;, &lt;code&gt;Hashtable&lt;/code&gt;, &lt;code&gt;Properties&lt;/code&gt;, etc), it can be treated like a Frink &lt;a href=&quot;https://frinklang.org/#Dictionaries&quot;&gt;dictionary&lt;/a&gt;. This includes enumerating over &lt;code&gt;[key, value]&lt;/code&gt; pairs:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;for [key,value] = &lt;em&gt;javaObject&lt;/em&gt;&lt;br /&gt;   println[&quot;$key maps to $value&quot;]&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;All of these Java collections can be treated as enumerating expressions in Frink, so all of the functions and methods that can operate on enumerating expressions can operate on Java collections. For example, Java collections can be converted to other types using functions like &lt;code&gt;toArray&lt;/code&gt;, &lt;code&gt;toSet&lt;/code&gt;, &lt;code&gt;toDict&lt;/code&gt;, or manipulated with functions like &lt;code&gt;join&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;Not only can you call Java from Frink, but you can call Frink from Java. It's quite easy to embed a Frink parser into any Java program and give those programs all of the power of Frink. It can take just a few lines of Java:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;//At the top of your file...&lt;br /&gt;import frink.parser.Frink;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;String results;&lt;br /&gt;Frink interp = new Frink();&lt;br /&gt;// Enable security here? Currently commented-out.&lt;br /&gt;// interp.setRestrictiveSecurity(true);&lt;/p&gt;&lt;p&gt;try&lt;br /&gt;{&lt;br /&gt;   results = interp.parseString(&quot;2+2&quot;);&lt;br /&gt;}&lt;br /&gt;catch (frink.errors.FrinkEvaluationException fee)&lt;br /&gt;{&lt;br /&gt;   // Do whatever you want with the exception&lt;br /&gt;}&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Frink is a Turing-complete programming language, and &lt;code&gt;parseString()&lt;/code&gt; evaluates a string as a complete program. A Frink interpreter normally has the ability to read your filesystem, call arbitrary Java code, execute infinite loops, allocate infinite amounts of memory, write large amounts of output, and do other things which may compromise your security. Thus, if you're taking input from untrusted users, it's critical to call:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code&gt;&lt;em&gt;interp&lt;/em&gt;.setRestrictiveSecurity(true);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;before parsing any user input. This will enable the highest level of security, prohibiting all untrusted actions.&lt;/p&gt;
&lt;p&gt;There are more methods for calling Frink from within a Java program. One of the major problems is that converting from Frink types to Java types is almost always a narrowing operation.&lt;/p&gt;
&lt;p&gt;For example, if you try to put a Frink value into a Java integer:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;It could be too large.&lt;/li&gt;
&lt;li&gt;It could be a non-integer (rational number, floating point).&lt;/li&gt;
&lt;li&gt;It could be complex.&lt;/li&gt;
&lt;li&gt;It may have wrong unit types.&lt;/li&gt;
&lt;li&gt;It could be something else like a String or an Object.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;As a result, all of these interface methods throw a variety of exceptions.&lt;/p&gt;
&lt;p&gt;For more information, see the javadocs about &lt;a href=&quot;https://frinklang.org/integrate/&quot;&gt;Frink's integration methods,&lt;/a&gt; especially the &lt;code&gt;frink.parser.Frink&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;If you're interested in integrating Frink into your company's products, please contact &lt;a href=&quot;mailto:eliasen@mindspring.com&quot;&gt;Alan Eliasen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following sections demonstrates some of the real-world calculations I've made with Frink.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;MassAndVolume&quot; id=&quot;MassAndVolume&quot;&gt;Mass and Volume&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let's say you wanted to fill your bedroom up with water. How much water would it take? Let's say your room measures 10 feet by 12 feet wide by 8 feet high.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;10 feet 12 feet 8 feet -&amp;gt; gallons&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;552960/77 (approx. 7181.298701298701)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It would take approximately 7181 gallons to fill it. Note that you get both an exact fraction and an approximation. (If you don't want to see the fraction, put a decimal point in any of the numbers, like 10. or 10.0.) How much would that weigh, if you filled it with water? Frink has the unit &quot;water&quot; which stands for the density of water.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;10. feet 12 feet 8 feet water -&amp;gt; pounds&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;59930.84215309883&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So it would weigh almost 60,000 pounds. What if you knew that your floor could only support 2 tons? How deep could you fill the room with water?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;2. tons / (10 feet 12 feet water) -&amp;gt; feet&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;0.5339487791320047&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So you could only fill it about 0.53 feet deep. It'll be a pretty sad pool party.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;Liquor&quot; id=&quot;Liquor&quot;&gt;Liquor&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can set variables on the fly, by using the assignment &lt;code&gt;=&lt;/code&gt; operator. Let's say you want to define a new unit representing the amount of alcohol in a can of (quality) 3.2 beer. Keep in mind that 3.2 beer is measured by alcohol/weight, while almost all other liquors (and many beers) are usually measured in alcohol/volume. The density ratio between water and alcohol is given by:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;water/alcohol&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;1.267&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Water is thus 1.267 times denser than alcohol. 3.2 beer (measured by weight) is thus actually 4.0 percent alcohol as measured by volume. Now let's set that variable in terms of a beer's density of alcohol per volume so we can compare:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;beer = 12 floz 3.2 percent water/alcohol&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then, you wanted to find out how many beers a big bottle of champagne is equal to:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;magnum 13.5 percent -&amp;gt; beer&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;14.07&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You probably don't want to drink that whole bottle. Now let's say you're mixing Jungle Juice (using a 1.75 liter bottle of Everclear (190 proof!)) and Kool-Aid to fill a 5-gallon bucket (any resemblance to my college parties is completely intentional.) What percent alcohol is that stuff?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;junglejuice = 1.75 liter 190 proof / (5 gallon)&lt;br /&gt;junglejuice -&amp;gt; &quot;percent&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;8.78372074090843481138500000 percent&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It's really not &lt;em&gt;that&lt;/em&gt; strong. About 8.8%. But if you drink 5 cups of that, at 12 fluid ounces each, how many beers have you had?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;5 12 floz junglejuice -&amp;gt; &quot;beer&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;10.832 beer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Maybe that's why people were getting punched in the head. &lt;em&gt;QED.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;MoreLiquor&quot; id=&quot;MoreLiquor&quot;&gt;More Liquor&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some more useful calculations, most thanks to the lovely Steve Clymer:&lt;/p&gt;
&lt;p&gt;How many cases in a keg? (A keg is a normal-sized keg, what those in the beer industry would call a &quot;half barrel,&quot; or &lt;code&gt;1/2 beerbarrel&lt;/code&gt; in Frink notation. I don't think they sell full barrels. I've never seen one. It would weigh 258 pounds. A &quot;pony keg&quot; is a &quot;quarter barrel&quot; or, in Frink notation, &lt;code&gt;ponykeg&lt;/code&gt; or &lt;code&gt;1/4 beerbarrel&lt;/code&gt;)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;keg -&amp;gt; case&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;62/9 (approx. 6.888888888888889)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;How many 12 fluid ounce drinks (&lt;em&gt;i.e.&lt;/em&gt; cans o' beer) in a keg?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;keg -&amp;gt; 12 floz&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;496/3 (approx. 165.33333333333334)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;What is the price in dollars per fluid ounce of alcohol when buying a keg of 3.2 beer? (Remember that 3.2 beer is measured in alcohol/weight, so we correct by the density ratio of &lt;code&gt;water/alcohol&lt;/code&gt; to get alcohol by volume:)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;(60 dollars)/(keg 3.2 percent water/alcohol) -&amp;gt; &quot;dollars/floz&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;0.74593 dollars/floz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A bottle of cheap wine? (A &quot;winebottle&quot; is the standard 750 ml size.)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;(6.99 dollars)/(winebottle 13 percent) -&amp;gt; &quot;dollars/floz&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;2.12 dollars/floz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A big plastic bottle of really bad vodka?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;(13.99 dollars)/(1750 ml 80 proof) -&amp;gt; &quot;dollars/floz&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;0.59104811225625 dollars/floz&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;MovieMagic&quot; id=&quot;MovieMagic&quot;&gt;Movie Magic&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the movie &lt;em&gt;Independence Day&lt;/em&gt;, the alien mother ship is said to be 500 km in diameter and have a mass 1/4 that of earth's moon. If the mother ship were a sphere, what would its density be? (The volume of a sphere is 4/3 pi radius&lt;sup&gt;3&lt;/sup&gt;)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;1/4 moonmass / (4/3 pi (500/2 km)^3) -&amp;gt; water&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;280.68&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This makes the ship &lt;em&gt;280 times&lt;/em&gt; denser than water. This is 36 times denser than iron and more than 12 times denser than any known element! As the ship is actually more a thin disc than a sphere, it would actually be even denser. Since it contains lots of empty space, parts of it would have to be much, much denser.&lt;/p&gt;
&lt;p&gt;If the object is this dense and has such a large mass, what is its surface gravity? Surface gravity is given by G mass / radius&lt;sup&gt;2&lt;/sup&gt;, where G is the gravitational constant (which Frink knows about):&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;G 1/4 moonmass / (500/2 km)^2 -&amp;gt; gravity&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;2.000079&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The surface gravity of the spaceship is thus at least &lt;em&gt;twice&lt;/em&gt; earth's gravity--and that's on the rim where gravity is weakest. It would actually be much higher since it's much, much flatter than a sphere. I hope you're not the alien that has to go outside and paint it.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;FiscalCalculations&quot; id=&quot;FiscalCalculations&quot;&gt;Fiscal Calculations&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can calculate the day that your company will run out of cash, based on their financial statements. The following is an example for a real company, based on SEC filings, which read as the following:&lt;/p&gt;
&lt;table border=&quot;1&quot; summary=&quot;Sample Financial Data&quot;&gt;&lt;caption&gt;Cash and Cash Equivalents (in thousands)&lt;/caption&gt;
&lt;tr&gt;&lt;th&gt;December 31, 2000&lt;/th&gt;
&lt;th&gt;June 30, 2001&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;$86,481&lt;/td&gt;
&lt;td&gt;$41,601&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;To make this more readable, you can define variables to hold values:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;burnrate = (#2001-06-30# - #2000-12-31#) / ((86481 - 41601) thousand dollars)&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;burnrate -&amp;gt; dollars/day&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;248012.89431247435&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can calculate the number of days until the money runs out at this rate:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;41601 thousand dollars / burnrate -&amp;gt; &quot;days&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;167.7372 days&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Using date/time math, starting from the last report date (June 30, 2001) you can find out the exact date this corresponds to:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;#2001-06-30# + 41601 thousand dollars / burnrate&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;AD 2001-12-14 04:41:38.101 PM (Fri) Mountain Standard Time&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Just in time to see the cinema release of the first &lt;em&gt;Lord of the Rings&lt;/em&gt; movie with your last six bucks. Will they know it's Christmas Time at all?&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;Ouch&quot; id=&quot;Ouch&quot;&gt;Ouch!&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At the moment, I'm watching CNN which is discussing some land-mines used in Afghanistan. They showed a very small mine (about the size of a bran muffin) containing &quot;51 grams of TNT&quot; and they asked how much destructive force that carries. Frink's data file includes how much energy is in a mass of TNT, specified by the unit &quot;TNT&quot;. How many feet in the air could 51 grams of TNT throw me, assuming perfect efficiency, and knowing &lt;code&gt;energy = mass * gravity * height&lt;/code&gt;?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;51 grams TNT -&amp;gt; 185 pounds gravity feet&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;937.7628167428616&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Yikes. 937 feet. But the only difference between explosives and other combustible fuels is the rapidity of combustion, not in the quantity of energy. How much gasoline contains the same amount of energy?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;51 grams TNT -&amp;gt; &quot;teaspoons gasoline&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;1.2903255 teaspoons gasoline&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;1.29 teaspoons? That's not much at all. You're buying a huge amount of energy when you fill up your car.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;SnipingEBayAuctions&quot; id=&quot;SnipingEBayAuctions&quot;&gt;Sniping eBay Auctions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I need a monocle, but I don't want to pay a lot for it. The eBay monocle auction ends in 7 hours and 44 minutes... what time do I need to set the alarm clock for to remind me?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;now[] + 7 hours + 44 min&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;AD 2001-11-17 02:13:51.934 PM (Sat) Mountain Standard Time&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Epilogue 2001:&lt;/strong&gt; I didn't get the damned monocle.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;JunkyardWars&quot; id=&quot;JunkyardWars&quot;&gt;Junkyard Wars&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I can't watch &lt;em&gt;Junkyard Wars&lt;/em&gt; (or lots of other television shows) without having Frink at my side. This week the team has to float a submerged half-ton Cooper Mini... how many oil barrels will they need to use as floats?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;half ton -&amp;gt; barrels water&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;2.8530101742118243&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;They're trying to hand-pump air down to the barrels, submerged &quot;2 fathoms&quot; below the water. If the guy can sustain 40 watts of pumping power, how many minutes will it take to fill the barrel?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;2 fathoms water gravity barrel -&amp;gt; 40 watts minutes&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;2.376123072093987&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And how many food Calories (a food Calorie (with a capital 'C') equals 1000 calories with a small 'c') will he burn to fill a barrel?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;2 fathoms water gravity barrel -&amp;gt; Calories&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;1.3620653895637644&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Better eat a Tic-Tac first.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;BodyHeat&quot; id=&quot;BodyHeat&quot;&gt;Body Heat&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I've seen lots of figures about how much heat the human body produces. You can easily calculate the upper limit based on how much food you eat a day. Say, you eat 2000 Calories a day (again, food Calories with a capital &quot;C&quot; are equal to 1000 calories with a little &quot;c&quot;.)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;2000 Calories/day -&amp;gt; watts&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;96.91666666666667&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So, your average power and/or heat output is slightly less than a 100-watt bulb. (Note that your heat is radiated over a much larger area so the temperature is much lower.) Many days I could be replaced entirely with a 100-watt bulb and have no discernible effect on the universe.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;MicrowaveCookery&quot; id=&quot;MicrowaveCookery&quot;&gt;Microwave Cookery&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I'm heating up yummy mustard greens in my microwave, but I don't want to overheat them. I just want to warm them up. If I run my 1100 watt microwave for 30 seconds, how much will their temperature increase? I have a big 27 ounce (mass) can, and I'll assume that their specific heat is about the same as that of water (1 calorie/gram/degC):&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;1100 W 30 sec / (27 oz 1 calorie/gram/degC) -&amp;gt; degF&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;18.5350&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;30 seconds should raise the temperature by no more than 18 degrees Fahrenheit, assuming perfect transfer of microwave energy to heat.&lt;/p&gt;
&lt;p&gt;Knowing this, I could see how efficiently my microwave &lt;em&gt;actually&lt;/em&gt; heats food. I could heat a quantity of water and measure the temperature change in the water. I'll do that sometime if I can find my good thermometer.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;Superman&quot; id=&quot;Superman&quot;&gt;Why is Superman so Lazy?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Superman is always rescuing school buses that are falling off of cliffs, flying to the moon, lifting cars over his head, and generally showing off. So why does he still allow so many accidents to happen? Shouldn't he be able to rescue &lt;em&gt;everybody&lt;/em&gt; who has a Volkswagen parked on their chest?&lt;/p&gt;
&lt;p&gt;While searching for answers, I found out three interesting things about Superman:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;He's 6 feet 3 inches tall.&lt;/li&gt;
&lt;li&gt;He weighs 225 pounds.&lt;/li&gt;
&lt;li&gt;He gets his strength from being charged up with solar energy.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This is enough information to find some answers. Frink has units called &lt;code&gt;sunpower&lt;/code&gt; (the total power radiated by the sun) and &lt;code&gt;sundist&lt;/code&gt; (the distance between the earth and the sun.) Thus, we can find the sun's power that strikes an area at the distance of the earth (knowing the surface area of a sphere is 4 pi radius&lt;sup&gt;2&lt;/sup&gt;):&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;earthpower = sunpower / (4 pi sundist^2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is about 1372 watts per square meter. Superman is a pretty big guy--let's say the surface area he can present to the sun is 12 square feet. (This is probably a bit high--it makes him an average of 23 inches wide over his entire height.) This allows Superman to charge up at a power of:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;chargerate = earthpower 12 ft^2&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;input&quot;&gt;chargerate -&amp;gt; watts&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;1530.1602&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Superman thus charges up at the rate of 1530 joules/sec or 1530 watts. At this rate, how long does he have to charge up before he can lift a 2 ton truck over his head? (Knowing energy = mass * height * gravity)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;2 ton 7 feet gravity / chargerate -&amp;gt; sec&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;24.80975&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;So, charging up for 25 seconds allows him to save one dumb kid who is acting as a speed bump. So his power is huge but not infinite. He couldn't sustain a higher rate (unless he showed off less by lifting the car only a foot or two.) Lifting a truck every 30 seconds or so isn't bad, though. He could be saving a lot more people. So why doesn't he?&lt;/p&gt;
&lt;p&gt;Well, we've all seen the movie. He's using his super-powers to pick up chicks. Literally. Superman decides to take a break from saving lives and takes Lois Lane up in the sky for a joyride. So how long does he have to charge up with solar energy to fly himself and Lois Lane (let's say she weighs 135 pounds) up to 15,000 feet?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;(225 + 135) pounds 15000 feet gravity / chargerate -&amp;gt; minutes&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;59.809235&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;So, Superman has to charge up with solar energy for an &lt;em&gt;hour&lt;/em&gt; to cart Lois up there. With the same energy, he could have saved over 120 trapped kids. Keep in mind that Lois could do her part, too. If she left her camera or big clunky shoes behind, he'd have more energy left over to save people. If she would manage to leave behind just two pounds of cargo weight, Superman would have enough energy to save another kid's life.&lt;/p&gt;
&lt;p&gt;Sure, he's a great guy, and, sure, he's the Defender of Truth, Justice, and the American Way, but can't he find a better use for his super-powers than schlepping some shiksa into the stratosphere? Shovel my walk, he could, in 3 seconds--and me with the sciatica.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;FartJokes&quot; id=&quot;FartJokes&quot;&gt;Fart Jokes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I received one of those endlessly-forwarded e-mails of dubious but &quot;interesting facts&quot; which said &quot;if you fart continuously for 6 years and 9 months, you'll have enough gas to create the equivalent of an atomic bomb.&quot; Hee hee. Cute. (Thanks to Heather May Howard... being unable to easily calculate the veracity of this statement was one of the primary influences that showed how existing programs were too limited and inspired the creation of Frink.) But I didn't believe it and wanted to check it. The Hiroshima bomb had a yield of 12.5 kilotons of TNT, which is a very small bomb by today's standards. How many horsepower would that be?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;12.5 kilotons TNT / (6 years + 9 months) -&amp;gt; horsepower&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;329.26013859711395&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Can &lt;em&gt;you&lt;/em&gt; produce a 329-horsepower blowtorch of a fart? I doubt it. That's the power produced by a Corvette engine running just at its melting point. A one-second fart with that much power could blow me 1000 feet straight up. To produce that kind of energy, how much food would you have to eat a day?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;12.5 kilotons TNT / (6 years + 9 months) -&amp;gt; Calories/day&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;5066811.55086559&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ummm... can &lt;em&gt;you&lt;/em&gt; eat over 5 million Calories a day? (Again, note that these are &lt;em&gt;food&lt;/em&gt; Calories with a capital 'c' which are equal to 1000 calories with a small 'c'.) If you were a perfect fart factory, converting food energy into farts with 100% efficiency, and ate a normal 2000 Calories/day, how many years would it &lt;em&gt;really&lt;/em&gt; take?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;12.5 kilotons TNT / (2000 Calories/day) -&amp;gt; years&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;17100.488984171367&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;17,000 years is still a huge underestimate; I don't know how much of your energy actually goes into fart production. Oh well. To continue the calculations, let's guess your butthole has a diameter of 1 inch (no, &lt;em&gt;you&lt;/em&gt; go measure it.) Let's also guess that the gas you actually produce in a fart is only 1/10 as combustible as pure natural gas. What would be the velocity of the gas coming out?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;12.5 kilotons TNT / natural_gas / (6 years + 9 months) / (pi (.5 in)^2) 10 -&amp;gt; mph&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;280.1590446203110&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Nobody likes sitting next to a 280-mile-per-hour fart-machine. &lt;em&gt;Lesson:&lt;/em&gt; Even the smallest atomic bombs are &lt;em&gt;really unbelievably&lt;/em&gt; powerful and whoever originally calculated this isn't any fun to be around if they really fart that much.&lt;/p&gt;
&lt;p&gt;Fart jokes. Sheesh. If Frink isn't a huge success, it's not because I didn't pander to the Lowest Common Denominator.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;AdvancedFarting&quot; id=&quot;AdvancedFarting&quot;&gt;Advanced Farting&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The above order-of-magnitude estimate shows how far off the mark that the fart e-mail was. Not content with that, I found some medical studies that allowed me to do a more detailed analysis of the average person's available fart energy.&lt;/p&gt;
&lt;p&gt;What do you think are the most flammable gases in a fart? Most people think it's methane, but I found some medical studies that disprove this. Most people hardly have &lt;em&gt;any&lt;/em&gt; methane in their intestines. For example, one study stated that only 4 out of 11 people had any detectable methane in their intestines! So what's the rest of the gas?&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;5&quot; summary=&quot;Gases Present in Human Intestines by Volume&quot;&gt;&lt;tr&gt;&lt;th&gt;Gas&lt;/th&gt;
&lt;th&gt;Percent by Volume&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Nitrogen&lt;/td&gt;
&lt;td&gt;64%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Carbon Dioxide&lt;/td&gt;
&lt;td&gt;14%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Hydrogen&lt;/td&gt;
&lt;td&gt;19%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Methane&lt;/td&gt;
&lt;td&gt;3.2%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Oxygen&lt;/td&gt;
&lt;td&gt;0.7%&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;These studies also note that the average person has 100 milliliters of gas present in their intestinal tract at any given time. The average person expels 400-2000 ml of gas daily (and I'm not talking about through the mouth and nose.)&lt;/p&gt;
&lt;p&gt;Okay, that's almost enough information to figure out available fart energy. Now all we need to know is the energy of combustion of the flammable gases. Of the above, only hydrogen and methane are readily combustible. Looking up their energies of combustion:&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;5&quot; summary=&quot;Combustion energy of gases in human intestine&quot;&gt;&lt;tr&gt;&lt;th&gt;Gas&lt;/th&gt;
&lt;th&gt;Energy of Combustion in kJ/mol&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Hydrogen (H&lt;sub&gt;2&lt;/sub&gt;)&lt;/td&gt;
&lt;td&gt;285.8&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Methane (CH&lt;sub&gt;4&lt;/sub&gt;)&lt;/td&gt;
&lt;td&gt;890.8&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Okay, that's plenty enough information to find out how much energy is released in a day of farting! Say you're on the farty end of the scale, and you produce the 2000 ml of gas each day.&lt;/p&gt;
&lt;p&gt;Note that the energies above are given in kJ/mol, but we have volumes in milliliters. As you may have learned in chemistry class, a mole of any gas at standard temperature and pressure takes up the same volume. Frink knows this as &lt;code&gt;molarvolume&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The total energy in the hydrogen (keeping in mind that hydrogen makes up 19% of the 2000 ml volume) is given by:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;h2energy = 2000 ml / molarvolume mol * 19 percent * 285.8 kJ/mol&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;4845.3656205695224816 m^2 s^-2 kg (energy)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The combustible hydrogen thus produces 4800 joules (per day.) Now, for the methane, which makes a smaller percentage, but releases more energy per mole:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;methaneenergy = 2000 ml / molarvolume mol * 3.2 percent * 890.8 kJ/mol&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;2543.5537223989278488 m^2 s^-2 kg (energy)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The energy in the combustible methane is thus about 2500 joules (per day), about half the energy produced from the hydrogen. Thus, the grand total of energy produced by combustible farts by a farty person in a day, in food Calories (with a capital C, remember--these are what a physicist would call a kilocalorie) is:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;methaneenergy + h2energy -&amp;gt; Calories&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Which gives a result of about 1.76 Calories/day of energy available from burning your farts. (About 1.16 Calories from hydrogen, and about 0.60 Calories from methane.) This is out of the 2000 Calories that an average person eats a day. Or, one part in about 1133 of the energy in the food you eat is available in fart energy, (again, for a gassy person.)&lt;/p&gt;
&lt;p&gt;Thus, a good estimate to the problem stated above is that a real (gassy) human would need to save their farts for:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;12.5 kilotons TNT / ((methaneenergy + h2energy) / day) -&amp;gt; years&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;1.9379377133697419931e+7&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or about &lt;em&gt;19 million years&lt;/em&gt; to make the equivalent of the energy in a (small) atomic bomb! So the estimate given in that e-mail is off by a factor of at least 2.8 million!&lt;/p&gt;
&lt;p&gt;Now, you know the true facts about farts. Frink is now complete, and I couldn't be prouder. Umm... thanks, Heather May.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;MoreIncorrectFacts&quot; id=&quot;MoreIncorrectFacts&quot;&gt;More Incorrect Facts&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;That e-mail has a higher density of incorrect facts than just about anything I've seen. Below are several more examples.&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;QE2&quot; id=&quot;QE2&quot;&gt;QE2&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&quot;The cruise liner, Queen Elizabeth II, moves only six inches for each gallon of diesel that it burns.&quot;&lt;/p&gt;
&lt;p&gt;From &lt;a href=&quot;http://news.bbc.co.uk/2/hi/uk_news/319027.stm&quot;&gt;a page of facts about the QE2,&lt;/a&gt; we find that the ship consumes 18 tons of fuel per hour at a service speed of 28 knots. By legislation in many areas, diesel fuel must have a density no higher than 0.85 kg/liter (if it were watered down, it would be higher.)&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;18 tons/hour / (28 knot) / (.85 kg/liter) -&amp;gt; feet/gallon&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;Warning: reciprocal conversion&lt;br /&gt;33.52338503156235&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;They're very, very wrong. It actually travels about 33.5 feet per gallon, or 157 gallons/mile. They're only off by a factor of 67. Still not great gas mileage, though.&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;HamburgersAndCars&quot; id=&quot;HamburgersAndCars&quot;&gt;Hamburgers and Cars&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The same e-mail states &quot;pound for pound, hamburgers cost more than new cars.&quot;&lt;/p&gt;
&lt;p&gt;Let's see... let's try with a medium-expensive, light car. A 2001 Corvette Z06 weighs 3,115 pounds and costs $48,055.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;(48055 dollars) / (3115 lb) -&amp;gt; dollars/lb&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;1373/89 (approx. 15.426966292134832)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I know &lt;em&gt;I&lt;/em&gt; don't pay $15/lb for hamburger.&lt;/p&gt;
&lt;p&gt;Let's try with a light, very cheap car. A quick lookup showed that a 2001 Hyundai Accent costs $10,184 and weighs 2255 pounds. That's still $4.51 a pound. Do &lt;em&gt;you&lt;/em&gt; pay that much for hamburger? Maybe a finished hamburger in a good restaurant, certainly not for hamburger. This is deceptive if not outright wrong.&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;GetTheProvisions&quot; id=&quot;GetTheProvisions&quot;&gt;&quot;Get The Provisions...&quot;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;By the way, did you ever notice that in the movie &lt;em&gt;Stand By Me&lt;/em&gt; that Gordie &lt;em&gt;really&lt;/em&gt; gets ripped off for hamburger? Supposedly set in 1960, Gordie buys &quot;a buck and a half of hamburger&quot; which is slapped down in a tiny wrapper that couldn't contain more than 3/4 of a pound. Probably a half pound--it looks like all wrapper. (You estimate it.) Converting to modern prices:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;1.50 dollars_1960 / (.75 lb) -&amp;gt; dollars/lb&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;26.96&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Gordie paid a modern equivalent of $27/lb for that hamburger. Perhaps a smarter shopper &lt;em&gt;could&lt;/em&gt; have gotten more for Vern's 7 cents.&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;Typing&quot; id=&quot;Typing&quot;&gt;Typing&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The same e-mail says &quot;the longest word that can be typed using only the left hand is 'stewardesses'.&quot; Well, Frink is good for doing word stuff too. Using the single word list from the &lt;a href=&quot;http://icon.shef.ac.uk/Moby/&quot;&gt;Moby wordlist&lt;/a&gt;, the following program finds lots of 12-letter alternatives, and several longer:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;infile = &quot;&lt;em&gt;path to words file&lt;/em&gt;&quot;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;   &lt;code class=&quot;input&quot;&gt;leftPattern = %r/^[qwertasdfgzxcvb]+$/i&lt;/code&gt;&lt;/p&gt;&lt;p&gt;  &lt;code class=&quot;input&quot;&gt;matches = select[lines[infile], leftPattern]&lt;/code&gt;&lt;/p&gt;&lt;p&gt;  &lt;code class=&quot;input&quot;&gt;sort[matches, { |a,b| length[a] &amp;lt;=&amp;gt; length[b] } ]&lt;/code&gt;&lt;/p&gt;&lt;p&gt;for [line] = matches&lt;br /&gt;   println[length[line] + &quot;: $line&quot;]&lt;/p&gt;
&lt;p&gt;(Actually, my original program was only 2 lines, but this is easier to read. The program could be written lots of ways.) Some of the results are:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;output&quot;&gt;12: stewardesses&lt;br /&gt;12: desegregates&lt;br /&gt;12: terracewards&lt;br /&gt;12: watercresses&lt;br /&gt;12: extravasated&lt;br /&gt;12: decerebrated&lt;br /&gt;12: gazetteerage&lt;br /&gt;12: desegregated&lt;br /&gt;12: extravagated&lt;br /&gt;12: tessaradecad&lt;br /&gt;12: resegregated&lt;br /&gt;12: reaggregated&lt;br /&gt;12: reverberated&lt;br /&gt;12: reverberates&lt;br /&gt;12: reasseverate&lt;br /&gt;12: aftereffects&lt;br /&gt;13: tesseradecade&lt;br /&gt;13: aftercataract&lt;br /&gt;13: devertebrated&lt;br /&gt;17: redrawerredrawers&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I have no idea what that last word means.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;BiblicalReferences&quot; id=&quot;BiblicalReferences&quot;&gt;Biblical References&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So you want to build an ark, do you? And not an Ark of the Covenant, but the boat. How bad was that flood?&lt;/p&gt;
&lt;p&gt;The bible is also quite precise in its measurement of the flood. Genesis 7:19-20 states that &quot;And the waters prevailed exceedingly upon the earth; and all the mountains, that were under the whole heaven, were covered. Fifteen cubits upward did the waters prevail; and the mountains were covered.&quot;&lt;/p&gt;
&lt;p&gt;Okay, so the highest mountains of the earth were covered, plus an extra 15 cubits (approx 27 feet) for good measure. The current measurements for highest mountain is Mt. Everest at 29030.8 feet (according to the highly dubious and utterly non-trustable 2002 Guinness Book of World Records.) I know that Everest is growing slowly, (best estimates are 2.4 inches/year) so we'll discount for that.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;depth = 29030 feet + 15 biblicalcubits - (2.4 inches/year 4000 years)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;About 28257 feet of water. This was deposited over 40 days. The rainfall was thus:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;rainfall = depth / (40 days)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or about 353 inches/hour, or 29 feet/hour. A good rain around here is about an inch an hour. The very rainiest places on earth like &lt;a href=&quot;http://www.extremescience.com/wettest.htm&quot;&gt;Cherrapunji&lt;/a&gt; get about this much rain in a &lt;em&gt;year&lt;/em&gt;. (I'm campaigning Colorado farmers to sin a bit more...)&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;Emc2&quot; id=&quot;Emc2&quot;&gt;E=mc&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Everyone knows Einstein's E=mc&lt;sup&gt;2&lt;/sup&gt; equation, but to apply it is often very difficult because the units come out so strange. Let's see, I have mass in pounds, and the speed of light is 186,282 miles/second... ummm... what does that come out to? In Frink the calculation becomes transparently simple.&lt;/p&gt;
&lt;p&gt;If you took the matter in a teaspoon of water, and converted that to energy, how many gallons of gasoline would that equal?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;teaspoon water c^2 -&amp;gt; &quot;gallons gasoline&quot;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;3164209.862836101 gallons gasoline&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Unbelievable. The energy in a teaspoon of water, if we could extract it, is equal to burning more than 3 &lt;em&gt;million&lt;/em&gt; gallons of gasoline.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;DaysOld&quot; id=&quot;DaysOld&quot;&gt;Days Old&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The November 2001 edition of &lt;em&gt;Sky &amp;amp; Telescope&lt;/em&gt; magazine has a charming article called &quot;Stellar Guides for Your Birthday&quot; by Jeff A. Farinacci (p. 63), which provides a list of &quot;nearby&quot; stars and their distances in light-years or light-days. This allows you to look at the light coming from a star that was emitted the day you were born. It includes a &lt;a href=&quot;http://www.skyandtelescope.com/astronomy-resources/basic-programs-from-sky-telescope/&quot;&gt;28-line BASIC program, &lt;code&gt;daysold.bas&lt;/code&gt;&lt;/a&gt; to calculate how many days old you are on a certain date. As you know by now, the essential calculation can be done in one line of Frink. For example, the bright star Pollux is about 33.7 light-years away (12314 days, based on the Hipparcos satellite's parallax measurement of 96.74 milliarcseconds) and the light it emitted on the day I was born will finally reach earth on the date:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;#1969-08-19# + 12314 days&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;AD 2003-05-07 12:00:00.000 AM (Wed) Mountain Daylight Time&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or, to calculate the date directly from the parallax, we can use the following, where &lt;code&gt;au&lt;/code&gt; is an astronomical unit (the average distance between the earth and the sun,) and &lt;code&gt;c&lt;/code&gt; is the speed of light, the values of which are known to Frink:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;#1969-08-19# + au / (96.74 milliarcsec) / c&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;This gives the same date as the calculation above (May 7, 2003.) I was amazed to find that the universe has conspired to produce a beautiful conjunction on this date. Pollux will form a straight line with the moon and Jupiter in the western sky on that night:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://frinklang.org/images/conjunction.png&quot; width=&quot;412&quot; height=&quot;414&quot; alt=&quot;View of the sky on May 7, 2003&quot; /&gt;&lt;br /&gt;(Screenshot courtesy of the wonderful &lt;a href=&quot;http://www.skyviewcafe.com/&quot;&gt;Sky View Café&lt;/a&gt; applet)&lt;/p&gt;
&lt;p&gt;(Note: The three objects aren't as close together as it may look in this picture. The sky is big.) These screenshots show how it will look at 10 PM Mountain Daylight Time.&lt;/p&gt;
&lt;p&gt;Below is a 45-degree chunk of sky looking due west. This will give you a better idea of how the sky will look as you face west. You'll probably see Pollux and Castor quite clearly. Castor is the bright star directly to the right of Pollux. Castor and Pollux will appear to make a horizontal line at this time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://frinklang.org/images/conjunction2.png&quot; width=&quot;437&quot; height=&quot;397&quot; alt=&quot;45-degree view of the sky looking West during conjunction&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It shouldn't be hard to find. Look west. The moon will be the brightest object in the sky, and Jupiter will be the second-brightest. Follow the line from Jupiter to the moon. Pollux is by far the brightest star along that line (it has a dimmer twin Castor, which will be on the right.) The moon is in the center and Jupiter and Pollux are equal distances on either side of the moon. Follow the wise men. Bring gold. I already have lots of frankincense and myrrh.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alan's Editorializing&lt;/strong&gt;: This article also underlines one of the things I am growing to miss in most physical equations and all programs written in other languages... the loss of units. Everything is an unexplained number, and inscrutable conversion factors are strewn liberally throughout. This is exactly the type of thing that Frink was designed to address. For example, a line in the article indicates:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The parallax-to-distance formula is simple: d=1/p, where p is the parallax angle in arcseconds and d is the distance in parsecs (3.26 light-years).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This description is unfortunate. 1 divided by an angle (which is dimensionless) is still dimensionless, &lt;em&gt;not&lt;/em&gt; a distance. This is better specified by saying that the formula is distance=(orbital radius)/(parallax angle). Since the parallax angles are specified with respect to Earth's orbital radius, you can write the equation as &lt;code&gt;&lt;em&gt;d&lt;/em&gt; = au/&lt;em&gt;p&lt;/em&gt;&lt;/code&gt;. &quot;&lt;code&gt;au&lt;/code&gt;&quot; is an astronomical unit, the average distance between the Earth and the Sun, which is included in Frink's standard data file. Then, p can be specified in &lt;em&gt;any&lt;/em&gt; angular units and distance can be automatically converted to light-years or light-days instead of parsecs (or into feet, if you want). As always, &lt;em&gt;Frink makes the units of measurement transparent, and helps to ensure that your calculations make sense.&lt;/em&gt; So, using the &lt;a href=&quot;http://www.rssd.esa.int/index.php?project=HIPPARCOS&quot;&gt;Hipparcos&lt;/a&gt; satellite's measurements for the parallax of the closest star, Proxima Centauri (okay, second-closest, smartypants):&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;au / (.7723 arcsec) -&amp;gt; lightyears&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;4.223182420960891&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This way, we learn something about the &lt;em&gt;nature&lt;/em&gt; of the physical calculation which we can generalize, rather than having an equation that only works with one weird system of measurement. (Although professional astronomers like to use parsecs, I think it's a horrible, intentionally exclusive, geocentric measurement and they're just being difficult. There was even an article in &lt;em&gt;Sky &amp;amp; Telescope&lt;/em&gt; a while back which intimated that some astronomers would sneer and giggle at you if you used light-years in a professional publication or speech.) Using our deeper knowledge, we can see how much more accurate the Hipparcos satellite would be if it were put into Jupiter's orbit, or how accurate its instruments need to be to achieve a certain accuracy in distance measurements. We've learned something more general.&lt;/p&gt;
&lt;p&gt;Below is the same program as in Sky &amp;amp; Telescope, but more flexible. You can enter the exact second of your birth using &lt;a href=&quot;https://frinklang.org/frinkdata/dateformats.txt&quot;&gt;any of the date formats that Frink recognizes.&lt;/a&gt; You enter the desired age as &quot;12314 days&quot; or &quot;1 billion seconds&quot; or any other duration. The program uses the &lt;a href=&quot;https://frinklang.org/#LeapSeconds&quot;&gt;&lt;code&gt;addLeap&lt;/code&gt;&lt;/a&gt; function to calculate the target date &lt;em&gt;with leap seconds accounted for&lt;/em&gt;. So you don't celebrate on the wrong second within the minute.&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;birthdate = parseDate[input[&quot;Enter your birthdate: &quot;]]&lt;br /&gt;str = input[&quot;Enter desired age: &quot;]&lt;br /&gt;age = eval[str]&lt;br /&gt;println[&quot;You will be $str old on &quot; + addLeap[birthdate,age]]&lt;br /&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;output&quot;&gt;Enter your birthdate:&lt;/code&gt; &lt;code class=&quot;input&quot;&gt;1969-08-19 04:54 PM Mountain&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;Enter desired age:&lt;/code&gt; &lt;code class=&quot;input&quot;&gt;1 billion seconds&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;You will be 1 billion seconds old on AD 2001-04-27 06:40:15.653 PM (Fri) Mountain Daylight Time&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Finding Your Own Star&lt;/h4&gt;
&lt;p&gt;Now you want your own star, don't you? You might take a look at a list of &lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_brightest_stars&quot;&gt;the brightest stars in the sky&lt;/a&gt; and look the stars' distances in light-years. This will give you an idea of the bright stars, and give you their Hipparcos catalog numbers. Using the Hipparcos catalog number given in that table, you can look up that star from &lt;a href=&quot;http://www.rssd.esa.int/index.php?project=HIPPARCOS&amp;amp;page=multisearch2&quot;&gt;this Hipparcos search form,&lt;/a&gt; find its Geometrical Parallax (field H11, which is probably given in milliarcseconds) and plug that number into the equation shown above. At some point, I may make a Frink Server Page that automates this. But you might learn more just by doing the calculations yourself.&lt;/p&gt;
&lt;p&gt;Whether you have a kid who is 8.6 years old (for Sirius which is the brightest star in the sky and 3141 light-days away,) someone turning 11.4 (Procyon), turning 16.8 (Altair) or someone turning 65.1 (Aldebaran,) a star is a great gift and might just start a love of astronomy. I can't promise that the moon and the planets will line up for &lt;em&gt;them&lt;/em&gt;, though.&lt;/p&gt;
&lt;p&gt;Note that there is some uncertainty in measuring parallaxes, often several percent, and thus the dates are somewhat uncertain, so it's a gift you can give &lt;em&gt;any&lt;/em&gt; time around the date. For example, the standard error for the parallax of Pollux is 0.87 milliarcseconds (parallax error is field H16 in the Hipparcos catalog, specified in milliarcseconds) which leads to an actual date that can vary from around January 17, 2003 to August 27, 2003 -- a range of over 7 months. Just have fun and celebrate your stars when you want!&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;ModelSolarSystem&quot; id=&quot;ModelSolarSystem&quot;&gt;Model Solar System&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This one is fun. I didn't have a grasp of the size difference between the Earth and the Moon so I wanted to make a little scale model in my home. It would be best to use spheres of the appropriate sizes, but I don't have that many balls. Instead, I decided to cut circles out of paper. My deciding dimension was the size of the piece of paper I used to cut out the pieces. I could only get a 7-inch diameter circle for the Earth (3.5-inch radius), so this defined my scale, which I saved in a variable for use in later calculations:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;scale = earthradius / (3.5 inches)&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;7.166851856017998E7&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The standard data file contains information about the dimensions of the planets, &lt;code&gt;earthradius&lt;/code&gt; being one of those. Now how big should the Moon circle be?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;moonradius / scale -&amp;gt; inches&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;0.9547455176283174&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Okay, using my rolling ruler, I cut out a circle with radius 0.95 inches (diameter 1.9 inches). There's the Moon. It's interesting to see the difference in size between the Earth and Moon:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://frinklang.org/images/earthmoon.jpg&quot; width=&quot;280&quot; height=&quot;210&quot; alt=&quot;Earth-Moon Sizes&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Now, to place them properly... how far away should they be at that scale?&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;moondist / scale -&amp;gt; feet&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;17.59705489913335&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Okay, stick the Earth to one wall, and then measure a distance 17.5 feet away, and stick the Moon to that. &lt;em&gt;Installed!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;From each vantage point, you can see how big the other actually looks from that distance. Standing by the Earth, you can see how big the Moon looks (you've seen the Moon, but it's a smaller angle than you might guess... the Moon really doesn't take up much sky, only about half a degree in diameter.) You can verify this by holding a fingernail out at arm's length, comparing it to the size of your Moon model, and then going outside and doing the same to the Moon, if you can see it.&lt;/p&gt;
&lt;p&gt;Now walk over to the Moon and look at the Earth. It would be pretty big! Earth would appear about 3.66 times wider in diameter (in Frink notation, &lt;code&gt;earthradius/moonradius&lt;/code&gt;, or 13.4 times larger in area ( &lt;code&gt;pi earthradius^2 / (pi moonradius^2)&lt;/code&gt; ).&lt;/p&gt;
&lt;p&gt;Just to verify, I wanted to make sure that the visible angles in my model match real life. The visual angle of an object which does not subtend a large angle can be expressed as &lt;code&gt;angle = width / distance&lt;/code&gt;. The angle normally comes out in radians if width and distance are in the same units, but this is Frink. You can get the answer out in degrees, or arcminutes if that's where your heart lies:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;1.9 inches / (17.5 feet) -&amp;gt; arcminutes&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;output&quot;&gt;31.10342316424469&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Yep, that's just the right number of arcminutes. From Earth, the Sun and the Moon both appear just over half a degree in diameter, or about 32 arcminutes (an arcminute is 1/60 of a degree). It all works out. Note that in the standard data file, radians are dimensionless units (a radian is defined as &quot;1&quot;.) This is because radians are dimensionless units, but you can convert values in radians to other angular units.&lt;/p&gt;
&lt;p&gt;By the way, a more accurate angular formula that is valid for large &lt;em&gt;and&lt;/em&gt; small angles subtended by a sphere with a given radius at a specified distance is:&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;code class=&quot;input&quot;&gt;2 arcsin[&lt;em&gt;radius&lt;/em&gt;/(&lt;em&gt;radius&lt;/em&gt; + &lt;em&gt;distance&lt;/em&gt;)] -&amp;gt; degrees&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that inverse trigonometric functions (&lt;code&gt;arcsin&lt;/code&gt;, &lt;code&gt;arccos&lt;/code&gt;, &lt;code&gt;arctan&lt;/code&gt;) have their output in radians. This is easily converted to whatever angular units you want, as above. You don't see that the output is in radians (if you use the standard data file) because radians are dimensionless numbers. You just gotta be a bit careful here, or make the minor change in your units file to make radians a fundamental dimension. (Read the documentation in the units file... the units file is otherwise radians-correct.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nostalgic Digression:&lt;/strong&gt; I remember a cool black-and-white movie we saw in my Kindergarten class about making a scale model of the solar system. It involved a &lt;em&gt;huge&lt;/em&gt; vertical circular sign representing the Sun that somebody had built for the film and a car driving a measured distance away to look at it. (A bit confusing, though. I remember them saying &quot;here we are, 93 million miles away!&quot; and they were still in the same park.) Good stuff, and I'm glad I finally made my own model. It helps me understand how cool the Apollo missions were. But my enthusiasm is tempered by the fact that I'm just now figuring out stuff they tried to teach me in Kindergarten.&lt;/p&gt;
&lt;p&gt;Now go make your own model. Pick your own scale to fit your surroundings and materials. It's fun. In my model, Jupiter would have to be a sphere 6.59 feet in diameter, placed about 5.5 miles away right now. I'll have to get a bigger place.&lt;/p&gt;
&lt;p&gt;Now that you know how to calculate the size in Frink yourself, I've gone ahead and built a Frink Server Page that lets you &lt;a href=&quot;https://frinklang.org/fsp/solar.fsp&quot;&gt;&lt;strong&gt;design your own!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Homework:&lt;/strong&gt; In your model, figure and/or plot the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Orbit of the Space Shuttle (about 300 km above the surface of the Earth) Wow. That's barely up there.&lt;/li&gt;
&lt;li&gt;Orbit of a geosynchronous satellite (42164 km from the &lt;em&gt;center&lt;/em&gt; of the Earth, or about 22300 miles from the &lt;em&gt;surface&lt;/em&gt; of the Earth.) Stand this far away from the Earth circle... that's how big it would look.&lt;/li&gt;
&lt;li&gt;The sizes of the Sun, other planets, and their moons.&lt;/li&gt;
&lt;li&gt;The speed of light in your model.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a name=&quot;MCO&quot; id=&quot;MCO&quot;&gt;Saving Hundreds of Millions of Dollars&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote readability=&quot;10.415094339623&quot;&gt;
&lt;p&gt;&quot;The MCO [Mars Climate Orbiter] MIB [Mishap Investigation Board] has determined that the root cause for the loss of the MCO spacecraft was the failure to use metric units in the coding of a ground software file, &quot;Small Forces,&quot; used in trajectory models. Specifically, thruster performance data in English units instead of metric units was used in the software application code titled SM_FORCES (small forces).&quot;&lt;br /&gt;--&lt;a href=&quot;ftp://ftp.hq.nasa.gov/pub/pao/reports/1999/MCO_report.pdf&quot;&gt;Mars Climate Orbiter Mishap Investigation Board, Phase I Report&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is not to take away from the designers of a wonderfully complex spacecraft that can travel to Mars; that's an incredibly difficult problem, and I couldn't do it. However, this is just the type of error that Frink was designed to help avoid, and because &lt;em&gt;I&lt;/em&gt; make these type of errors a lot, I've designed this tool to help me. Frink tracks units through &lt;em&gt;all&lt;/em&gt; calculations and makes conversions between them transparent. This is why I'm working toward making Frink a feasible solution for calculations of this type.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I received the following from &lt;a href=&quot;http://www.norvig.com/&quot;&gt;Peter Norvig&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;16&quot;&gt;
&lt;p&gt;&quot;I ran across Frink, and as a member of the MCO review board, I appreciate your efforts. Note, however that more than just language support is necessary. First, you'd have to have conventions on data I/O -- the misinterpreted data was from a file, not from another function in the program. Also, there was an issue of software reuse -- the errant portion of the system had been used before on a previous mission, and in that case it was used in a non-critical, non-navigational way. It was not properly reviewed because the team did not realize that in MCO it became critical.&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The points above are well-taken. Proper parsing of units can be easily achieved in Frink with a simple, appropriate comment in the data file. &lt;a href=&quot;https://frinklang.org/fsp/colorize.fsp?f=unittable.frink&quot;&gt;unittable.frink&lt;/a&gt; shows how Frink can parse a file containing units of measure. All that is needed is to add a &lt;em&gt;single comment&lt;/em&gt; to the data file that contains the units of measure of each data column. Frink then reads each column with the appropriate units of measure and scale, using any units of measure that Frink knows about as input, and Frink parses them and works with them properly. See its &lt;a href=&quot;https://frinklang.org/unittable.txt&quot;&gt;sample data file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Frink and its &lt;code&gt;eval[x]&lt;/code&gt; function could always trivially handle the case where each number in a file has its units of measure specified with the number, e.g. &quot;&lt;code&gt;3.5 km/s&lt;/code&gt;&quot;. That's literally &lt;em&gt;zero&lt;/em&gt; effort to parse with Frink, and is slightly less compact, but that's a very small price to pay, compared to mission failure.&lt;/p&gt;
&lt;p&gt;Of course, there's no simple solution for someone completely not reading the specification documents, but the fact that a file completely omits any units of measure would be a good warning flag to double-check your sources, I'm growing to fear and avoid any system that treats every physical measurement as an unexplained dimensionless number, as most programming languages have for the past few decades. We can do better.&lt;/p&gt;

&lt;p&gt;Keep in mind that the syntax represented in this document &lt;em&gt;will&lt;/em&gt; change as Frink evolves. The current parser just makes it easier for me to test certain features, and I intentionally refuse to spend a lot of time on it at this point. The internals of the language should be the first concern, and the external representation is free to change. Frink should be equally usable whether you want to load and save your data in the current mathematical notation, in a (LISP-like) prefix notation, in a (HP calculator-like) Reverse-Polish postfix notation, from a visually-based GUI, in MathML, TeX, XML, or whatever other flavor-of-the-month format the kids are crazy about these days. The internals of the language are intentionally agnostic on this point, as they should be in a flexible design.&lt;/p&gt;
&lt;p&gt;On the other hand, I always want to keep Frink easy to use and transparent for the quick calculations as it is now. Turning it into a language that forces an encumbering programming paradigm is out of the question.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alan's Unsolicited Advice:&lt;/strong&gt; Anytime you're involved with a project where you hear people saying &quot;we want to use 'X' technology&quot; before they've even thought about representing the problem they're trying to solve, look up for the cloud of doom, which floats nigh. It's like hiring a carpenter, who, before he knows what you want to make, insists on using mortice-and-tenon joints.&lt;/p&gt;

&lt;h3&gt;OROMatcher&lt;/h3&gt;
&lt;p&gt;&quot;This product includes software developed by the Apache Software Foundation (&lt;a href=&quot;http://www.apache.org/&quot;&gt;http://www.apache.org/&lt;/a&gt;).&quot;&lt;/p&gt;
&lt;p&gt;They made me say that. The included part is the &lt;a href=&quot;http://jakarta.apache.org/oro/index.html&quot;&gt;Jakarta ORO&lt;/a&gt; regular expression library. I hacked it significantly so that it would compile and run on a Java 1.1 platform (so that Frink can be used on small devices running PersonalJava 1.1 and run in the JVM in just about any browser out there.)&lt;/p&gt;
&lt;p&gt;ORO is included under &lt;a href=&quot;http://svn.apache.org/repos/asf/jakarta/oro/trunk/LICENSE&quot;&gt;ORO licensing terms&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Someday, I'll probably get rid of ORO altogether and use the regular expression libraries available in Java 1.4 and later, but this will require abandoning platforms currently supported by Frink (which runs on Java 1.1 and later.) Some features would be lost, though.&lt;/p&gt;
&lt;h3&gt;JavaCUP&lt;/h3&gt;
&lt;p&gt;JavaCUP is included under the following licensing terms: &lt;a href=&quot;http://www.cs.princeton.edu/~appel/modern/java/CUP/#LICENSE&quot;&gt;JavaCUP license.&lt;/a&gt; Note that the JavaCUP package itself is not included in Frink, but is used to generate a parser class.&lt;/p&gt;
&lt;h3&gt;JFlex&lt;/h3&gt;
&lt;p&gt;Frink's lexical analyzer is generated by &lt;a href=&quot;http://www.jflex.de/&quot;&gt;JFlex&lt;/a&gt;. Since this was generated from Frink's own specification, Frink may use the generated code without restriction according to &lt;a href=&quot;http://jflex.de/copying.html&quot;&gt;JFlex's licensing terms.&lt;/a&gt; The JFlex package itself is not included in Frink--it is only used to generate a lexer class.&lt;/p&gt;

&lt;p&gt;If you've gotten this far, hopefully you've seen something you liked. If you find Frink useful, I'd appreciate if you took a look at some of the ways you can &lt;a href=&quot;https://frinklang.org/donate.html&quot;&gt;donate to Frink's development&lt;/a&gt;. Thanks!&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;Please send comments or questions to &lt;a href=&quot;mailto:eliasen@mindspring.com&quot;&gt;Alan Eliasen&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sun, 12 Aug 2018 18:37:28 +0000</pubDate>
<dc:creator>tosh</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://frinklang.org/</dc:identifier>
</item>
<item>
<title>Thank you HN</title>
<link>https://news.ycombinator.com/item?id=17745688</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=17745688</guid>
<description>About a couple of years ago, I submitted a thread here called &quot;Ask HN: I'm depressed, what should I do?&quot; [0].
&lt;p&gt;I was in a very dark place personally and professionally. I had turned to my family and friends without success, and posted here looking for a moral boost.&lt;/p&gt;&lt;p&gt;I would like to thank all the people that have responded with kindness.&lt;/p&gt;
&lt;p&gt;I just wanted to say that your words helped, that I think about this thread often, and that your effort did actually help someone from a tough spot.&lt;/p&gt;
&lt;p&gt;Update on my situation:&lt;/p&gt;
&lt;p&gt;By the time that I got an offer I could live with, I had sent over 250 applications and done around 20 interviews.&lt;/p&gt;
&lt;p&gt;I started with 33k€ a year (translates to a little less than 2000€ per month), now I'm at 38k€.&lt;/p&gt;
&lt;p&gt;I rented a place downtown, and started working out (lost 18kg and counting), I'm going to run a marathon in 3 months!!!&lt;/p&gt;
&lt;p&gt;Overall, I'm not exactly where I want to be, but -for once- I can see myself getting there.&lt;/p&gt;
&lt;p&gt;I'm hopeful for the future, and I would like to thank the many people that helped me to get here.&lt;/p&gt;
&lt;p&gt;Just to sum up, be kind when you can, it can change someone's life.&lt;/p&gt;
&lt;p&gt;[0]: &lt;a href=&quot;https://news.ycombinator.com/item?id=13134183&quot; rel=&quot;nofollow&quot;&gt;https://news.ycombinator.com/item?id=13134183&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 12 Aug 2018 18:32:55 +0000</pubDate>
<dc:creator>throwAwayXYZ69</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=17745688</dc:identifier>
</item>
<item>
<title>USA Temperature: can I sucker you?</title>
<link>https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/</link>
<guid isPermaLink="true" >https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/</guid>
<description>&lt;p&gt;Suppose I wanted to convince people that temperature in the USA wasn’t going up, it was going down. What would I show? Let’s try yearly average temperature in the conterminous U.S., also known as the “lower 48 states” (I’ll just call it “USA”):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tamino.files.wordpress.com/2018/08/usa1.jpg&quot;&gt;&lt;img data-attachment-id=&quot;9997&quot; data-permalink=&quot;https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/usa-2/&quot; data-orig-file=&quot;https://tamino.files.wordpress.com/2018/08/usa1.jpg?w=500&amp;amp;h=333&quot; data-orig-size=&quot;829,552&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;USA&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://tamino.files.wordpress.com/2018/08/usa1.jpg?w=500&amp;amp;h=333?w=300&quot; data-large-file=&quot;https://tamino.files.wordpress.com/2018/08/usa1.jpg?w=500&amp;amp;h=333?w=500&quot; src=&quot;https://tamino.files.wordpress.com/2018/08/usa1.jpg?w=500&amp;amp;h=333&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;333&quot; class=&quot;alignnone size-full wp-image-9997&quot; srcset=&quot;https://tamino.files.wordpress.com/2018/08/usa1.jpg?w=500&amp;amp;h=333 500w, https://tamino.files.wordpress.com/2018/08/usa1.jpg?w=150&amp;amp;h=100 150w, https://tamino.files.wordpress.com/2018/08/usa1.jpg?w=300&amp;amp;h=200 300w, https://tamino.files.wordpress.com/2018/08/usa1.jpg?w=768&amp;amp;h=511 768w, https://tamino.files.wordpress.com/2018/08/usa1.jpg 829w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-9984&quot;/&gt;&lt;br/&gt;Well that won’t do. It shows that temperature has been rising, not falling. By the way, I’ve included two trend estimates. The blue straight line is a &lt;em&gt;linear&lt;/em&gt; trend estimate and it’s going up. The red curvy line is a nonlinear trend estimate, it has gone up and down and up, and is now rising fast. Scary fast. That definitely won’t do.&lt;/p&gt;
&lt;p&gt;But wait! The temperature shown is the &lt;em&gt;mean&lt;/em&gt; temperature, which is the average of the high and low temperatures. What if I tried just low temperatures?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg&quot;&gt;&lt;img data-attachment-id=&quot;9999&quot; data-permalink=&quot;https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/usalowtemperature-2/&quot; data-orig-file=&quot;https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg?w=500&amp;amp;h=333&quot; data-orig-size=&quot;829,552&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;USALowTemperature&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg?w=500&amp;amp;h=333?w=300&quot; data-large-file=&quot;https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg?w=500&amp;amp;h=333?w=500&quot; src=&quot;https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg?w=500&amp;amp;h=333&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;333&quot; class=&quot;alignnone size-full wp-image-9999&quot; srcset=&quot;https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg?w=500&amp;amp;h=333 500w, https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg?w=150&amp;amp;h=100 150w, https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg?w=300&amp;amp;h=200 300w, https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg?w=768&amp;amp;h=511 768w, https://tamino.files.wordpress.com/2018/08/usalowtemperature1.jpg 829w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That won’t do either. Scary fast.&lt;/p&gt;
&lt;p&gt;How about high temperatures?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg&quot;&gt;&lt;img data-attachment-id=&quot;10000&quot; data-permalink=&quot;https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/usahightemperature-2/&quot; data-orig-file=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg?w=500&amp;amp;h=333&quot; data-orig-size=&quot;829,552&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;USAHighTemperature&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg?w=500&amp;amp;h=333?w=300&quot; data-large-file=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg?w=500&amp;amp;h=333?w=500&quot; src=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg?w=500&amp;amp;h=333&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;333&quot; class=&quot;alignnone size-full wp-image-10000&quot; srcset=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg?w=500&amp;amp;h=333 500w, https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg?w=150&amp;amp;h=100 150w, https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg?w=300&amp;amp;h=200 300w, https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg?w=768&amp;amp;h=511 768w, https://tamino.files.wordpress.com/2018/08/usahightemperature1.jpg 829w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That still won’t do, but it’s a &lt;em&gt;little&lt;/em&gt; better. There’s a more pronounced hump in the 1930s — that’s the dustbowl era. Could I maybe make the most of that?&lt;/p&gt;
&lt;p&gt;Let’s try this: look at high temperature during the different &lt;em&gt;seasons&lt;/em&gt; of the year. After all, we know winter has been warming faster than summer, maybe summertime only — or maybe at least &lt;em&gt;one&lt;/em&gt; of the seasons — will give a more useful “sucker people” picture. Here are the average high temperatures for all four seasons separately:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg&quot;&gt;&lt;img data-attachment-id=&quot;9988&quot; data-permalink=&quot;https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/hightemperature4seasons/&quot; data-orig-file=&quot;https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg?w=500&amp;amp;h=333&quot; data-orig-size=&quot;829,552&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;HighTemperature4Seasons&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg?w=500&amp;amp;h=333?w=300&quot; data-large-file=&quot;https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg?w=500&amp;amp;h=333?w=500&quot; src=&quot;https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg?w=500&amp;amp;h=333&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;333&quot; class=&quot;alignnone size-full wp-image-9988&quot; srcset=&quot;https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg?w=500&amp;amp;h=333 500w, https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg?w=150&amp;amp;h=100 150w, https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg?w=300&amp;amp;h=200 300w, https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg?w=768&amp;amp;h=511 768w, https://tamino.files.wordpress.com/2018/08/hightemperature4seasons.jpg 829w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now we’re getting somewhere! Summer high temperature has still been increasing overall, but that hump during the 1930s (the dust bowl era) is far more pronounced. Maybe I could make something of that?&lt;/p&gt;
&lt;p&gt;Perhaps I could just get rid of some of the data I don’t like. I can’t get rid of the most recent stuff — then people will figure out I’m trying to sucker them. How about I get rid of some of the early stuff? I’ll start with 1918, instead of starting when the data actually start (1895). That leaves this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg&quot;&gt;&lt;img data-attachment-id=&quot;9989&quot; data-permalink=&quot;https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/usahightemperaturesummersince1918/&quot; data-orig-file=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg?w=500&amp;amp;h=333&quot; data-orig-size=&quot;829,552&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;USAHighTemperatureSummerSince1918&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg?w=500&amp;amp;h=333?w=300&quot; data-large-file=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg?w=500&amp;amp;h=333?w=500&quot; src=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg?w=500&amp;amp;h=333&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;333&quot; class=&quot;alignnone size-full wp-image-9989&quot; srcset=&quot;https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg?w=500&amp;amp;h=333 500w, https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg?w=150&amp;amp;h=100 150w, https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg?w=300&amp;amp;h=200 300w, https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg?w=768&amp;amp;h=511 768w, https://tamino.files.wordpress.com/2018/08/usahightemperaturesummersince1918.jpg 829w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally! I’ve got a graph that &lt;em&gt;looks&lt;/em&gt; like there’s nothing to worry about, where the linear trend is so small you almost can’t tell it’s still (barely) rising, and I only had to pick one of 12 possible combinations (mean/high/low temperature over winter/spring/summer/autumn) and leave out the early data to get it. Clever.&lt;/p&gt;
&lt;p&gt;Even so, the trend is still going up even if just barely. And that’s the linear trend; the nonlinear trend looks like it might be rising noticeably lately, maybe even getting close to as hot as the summer of the dust bowl era. Could I fix that?&lt;/p&gt;
&lt;p&gt;Of course I can! Instead of using the USA temperature data from the “experts,” those people at NOAA (the National Oceanic and Atmospheric Administration) who think they’re so good at it just because they’ve spent decades studying all that “math” and learning how to do it “right,” I’ll just take the raw data and form a simple average. Those NOAA people will tell you that isn’t right, that over the years new stations have come online and old ones have retired so you have to take that into account. They’ll talk about fancy-schmancy math stuff like “area weighting.” That’s all just NOAA tricks, aren’t they just a bunch of frauds? We can completely ignore the fact that over the years the average location of all the contributing stations has moved slightly northward to colder territory:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tamino.files.wordpress.com/2018/08/latitude.jpg&quot;&gt;&lt;img data-attachment-id=&quot;9990&quot; data-permalink=&quot;https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/latitude-2/&quot; data-orig-file=&quot;https://tamino.files.wordpress.com/2018/08/latitude.jpg?w=500&amp;amp;h=333&quot; data-orig-size=&quot;829,552&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Latitude&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://tamino.files.wordpress.com/2018/08/latitude.jpg?w=500&amp;amp;h=333?w=300&quot; data-large-file=&quot;https://tamino.files.wordpress.com/2018/08/latitude.jpg?w=500&amp;amp;h=333?w=500&quot; src=&quot;https://tamino.files.wordpress.com/2018/08/latitude.jpg?w=500&amp;amp;h=333&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;333&quot; class=&quot;alignnone size-full wp-image-9990&quot; srcset=&quot;https://tamino.files.wordpress.com/2018/08/latitude.jpg?w=500&amp;amp;h=333 500w, https://tamino.files.wordpress.com/2018/08/latitude.jpg?w=150&amp;amp;h=100 150w, https://tamino.files.wordpress.com/2018/08/latitude.jpg?w=300&amp;amp;h=200 300w, https://tamino.files.wordpress.com/2018/08/latitude.jpg?w=768&amp;amp;h=511 768w, https://tamino.files.wordpress.com/2018/08/latitude.jpg 829w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Heck we can completely ignore &lt;em&gt;everything&lt;/em&gt; that they’ve learned about how to do it right … mainly because if we just take a simple, naive average we’ll get what we want.&lt;/p&gt;
&lt;p&gt;There’s a graph going around the internet from Steve Goddard a.k.a. Tony Heller, claiming to show that temperature in the U.S. has been declining, using only high temperatures, using only summertime temperatures, using only data since 1918, based on a simple average without taking into account new stations coming online or old stations retiring or area-weighting or any of that “expert” stuff:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg&quot;&gt;&lt;img data-attachment-id=&quot;9991&quot; data-permalink=&quot;https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/thsummer_tmax/&quot; data-orig-file=&quot;https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg?w=500&amp;amp;h=459&quot; data-orig-size=&quot;680,624&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;THSummer_tmax&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg?w=500&amp;amp;h=459?w=300&quot; data-large-file=&quot;https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg?w=500&amp;amp;h=459?w=500&quot; src=&quot;https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg?w=500&amp;amp;h=459&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;459&quot; class=&quot;alignnone size-full wp-image-9991&quot; srcset=&quot;https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg?w=500&amp;amp;h=459 500w, https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg?w=150&amp;amp;h=138 150w, https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg?w=300&amp;amp;h=275 300w, https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg 680w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Imagine that.&lt;/p&gt;
&lt;hr/&gt;
This blog is made possible by readers like you; join others by &lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=Y6U22NEABG9Q2&quot;&gt;donating at My Wee Dragon&lt;/a&gt;.
&lt;hr/&gt;
&lt;div class=&quot;wpcnt&quot;&gt;
&lt;div class=&quot;wpa wpmrec&quot;&gt;&lt;span class=&quot;wpa-about&quot;&gt;Advertisements&lt;/span&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;jp-post-flair&quot; class=&quot;sharedaddy sd-like-enabled sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded&quot; id=&quot;like-post-wrapper-530201-9984-5b71aa3d6b66c&quot; data-src=&quot;//widgets.wp.com/likes/index.html?ver=20180319#blog_id=530201&amp;amp;post_id=9984&amp;amp;origin=tamino.wordpress.com&amp;amp;obj_id=530201-9984-5b71aa3d6b66c&quot; data-name=&quot;like-post-frame-530201-9984-5b71aa3d6b66c&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Like this:&lt;/h3&gt;
&lt;div class=&quot;likes-widget-placeholder post-likes-widget-placeholder&quot;&gt;&lt;span class=&quot;button&quot;&gt;&lt;span&gt;Like&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;loading&quot;&gt;Loading...&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Sun, 12 Aug 2018 15:54:54 +0000</pubDate>
<dc:creator>xg15</dc:creator>
<og:type>article</og:type>
<og:title>USA Temperature: can I sucker you?</og:title>
<og:url>https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/</og:url>
<og:description>Suppose I wanted to convince people that temperature in the USA wasn’t going up, it was going down. What would I show? Let’s try yearly average temperature in the conterminous U.S., als…</og:description>
<og:image>https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/</dc:identifier>
</item>
<item>
<title>Academic Torrents – Making 27TB of research data available</title>
<link>http://academictorrents.com/</link>
<guid isPermaLink="true" >http://academictorrents.com/</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;http://academictorrents.com/&quot;&gt;http://academictorrents.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=17744150&quot;&gt;https://news.ycombinator.com/item?id=17744150&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 977&lt;/p&gt;&lt;p&gt;# Comments: 126&lt;/p&gt;</description>
<pubDate>Sun, 12 Aug 2018 12:56:52 +0000</pubDate>
<dc:creator>jacquesm</dc:creator>
<og:type>article</og:type>
<og:title>USA Temperature: can I sucker you?</og:title>
<og:url>https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/</og:url>
<og:description>Suppose I wanted to convince people that temperature in the USA wasn’t going up, it was going down. What would I show? Let’s try yearly average temperature in the conterminous U.S., als…</og:description>
<og:image>https://tamino.files.wordpress.com/2018/08/thsummer_tmax.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://tamino.wordpress.com/2018/08/08/usa-temperature-can-i-sucker-you/</dc:identifier>
</item>
<item>
<title>OpenStax – openly licensed textbooks</title>
<link>https://openstax.org/</link>
<guid isPermaLink="true" >https://openstax.org/</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://openstax.org/&quot;&gt;https://openstax.org/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=17744142&quot;&gt;https://news.ycombinator.com/item?id=17744142&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 255&lt;/p&gt;&lt;p&gt;# Comments: 36&lt;/p&gt;</description>
<pubDate>Sun, 12 Aug 2018 12:55:31 +0000</pubDate>
<dc:creator>pome</dc:creator>
<og:type>website</og:type>
<og:title>OpenStax</og:title>
<og:description>Access our free college textbooks and low-cost learning materials.</og:description>
<og:url>https://openstax.org</og:url>
<og:image>https://openstax.org/images/social/os-opengraph-1200x630.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://openstax.org/</dc:identifier>
</item>
<item>
<title>Show HN: Didyougogo – An Altavista slayer</title>
<link>http://didyougogo.com/blog/didyougogo.html</link>
<guid isPermaLink="true" >http://didyougogo.com/blog/didyougogo.html</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;http://didyougogo.com/blog/didyougogo.html&quot;&gt;http://didyougogo.com/blog/didyougogo.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=17744073&quot;&gt;https://news.ycombinator.com/item?id=17744073&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 256&lt;/p&gt;&lt;p&gt;# Comments: 121&lt;/p&gt;</description>
<pubDate>Sun, 12 Aug 2018 12:32:19 +0000</pubDate>
<dc:creator>misterman0</dc:creator>
<dc:identifier>http://didyougogo.com/blog/didyougogo.html</dc:identifier>
</item>
<item>
<title>One man designed and built the ultimate bush plane</title>
<link>https://arstechnica.com/cars/2018/08/one-man-designed-and-built-the-ultimate-bush-plane/</link>
<guid isPermaLink="true" >https://arstechnica.com/cars/2018/08/one-man-designed-and-built-the-ultimate-bush-plane/</guid>
<description>&lt;aside id=&quot;social-left&quot;&gt;&lt;a title=&quot;85 posters participating&quot; class=&quot;comment-count icon-comment-bubble-down&quot; href=&quot;https://arstechnica.com/cars/2018/08/one-man-designed-and-built-the-ultimate-bush-plane/?comments=1&quot;&gt;&lt;span class=&quot;comment-count-before&quot;&gt;reader comments&lt;/span&gt; &lt;span class=&quot;comment-count-number&quot;&gt;138&lt;/span&gt;&lt;/a&gt;
&lt;div class=&quot;share-links&quot;&gt;&lt;span&gt;Share this story&lt;/span&gt;    &lt;/div&gt;
&lt;/aside&gt;&lt;div class=&quot;gallery shortcode-gallery gallery-wide&quot;&gt;
&lt;ul&gt;&lt;li data-thumb=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/image4-150x150.jpeg&quot; data-src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/image4.jpeg&quot; data-responsive=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/image4-980x654.jpeg 1080, https://cdn.arstechnica.net/wp-content/uploads/2018/08/image4-1440x960.jpeg 2560&quot; data-sub-html=&quot;#caption-1357337&quot;&gt;

&lt;div class=&quot;caption&quot;&gt;The DRACO, a bush plane designed and built by Mike Patey in five months.&lt;/div&gt;
&lt;/li&gt;
&lt;li data-thumb=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/image3-150x150.jpeg&quot; data-src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/image3.jpeg&quot; data-responsive=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/image3-980x654.jpeg 1080, https://cdn.arstechnica.net/wp-content/uploads/2018/08/image3-1440x960.jpeg 2560&quot; data-sub-html=&quot;#caption-1357339&quot;&gt;

&lt;div class=&quot;caption&quot;&gt;It uses a turbine instead of a piston engine, and can take off in just 110 feet at sea level.&lt;/div&gt;
&lt;/li&gt;
&lt;li data-thumb=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/image2-150x150.jpeg&quot; data-src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/image2.jpeg&quot; data-responsive=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/image2-980x654.jpeg 1080, https://cdn.arstechnica.net/wp-content/uploads/2018/08/image2-1440x960.jpeg 2560&quot; data-sub-html=&quot;#caption-1357341&quot;&gt;

&lt;div class=&quot;caption&quot;&gt;The DRACO can climb at 4,000 feet per minute and cruise at 180mph.&lt;/div&gt;
&lt;/li&gt;
&lt;li data-thumb=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/image1-150x150.jpeg&quot; data-src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/image1.jpeg&quot; data-responsive=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/image1-980x654.jpeg 1080, https://cdn.arstechnica.net/wp-content/uploads/2018/08/image1-1440x960.jpeg 2560&quot; data-sub-html=&quot;#caption-1357343&quot;&gt;

&lt;div class=&quot;caption&quot;&gt;At this year's EAA AirVenture air show in Oshkosh, Wisconsin, many were calling the DRACO the ultimate bush plane.&lt;/div&gt;
&lt;/li&gt;
&lt;li data-thumb=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/20952869643_e91a754928_k-150x150.jpg&quot; data-src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/20952869643_e91a754928_k.jpg&quot; data-responsive=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/20952869643_e91a754928_k-980x653.jpg 1080, https://cdn.arstechnica.net/wp-content/uploads/2018/08/20952869643_e91a754928_k-1440x960.jpg 2560&quot; data-sub-html=&quot;#caption-1357347&quot;&gt;

&lt;div class=&quot;caption&quot;&gt;Patey was flying a Wilga 2000 like this when it suffered an engine failure that gave him the idea to build the DRACO.&lt;/div&gt;

&lt;/li&gt;
&lt;li data-thumb=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/9481210148_6f0a929e84_o-150x150.jpg&quot; data-src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/9481210148_6f0a929e84_o.jpg&quot; data-responsive=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/9481210148_6f0a929e84_o-980x653.jpg 1080, https://cdn.arstechnica.net/wp-content/uploads/2018/08/9481210148_6f0a929e84_o-1440x960.jpg 2560&quot; data-sub-html=&quot;#caption-1357349&quot;&gt;

&lt;div class=&quot;caption&quot;&gt;This is the PZL-104 Wilga, which was the basis for the Wilga 2000, and therefore the grandparent of the DRACO?&lt;/div&gt;

&lt;/li&gt;
&lt;li data-thumb=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/27236316870_c91545a07f_h-150x150.jpg&quot; data-src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/27236316870_c91545a07f_h.jpg&quot; data-responsive=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/27236316870_c91545a07f_h-980x653.jpg 1080, https://cdn.arstechnica.net/wp-content/uploads/2018/08/27236316870_c91545a07f_h-1440x959.jpg 2560&quot; data-sub-html=&quot;#caption-1357345&quot;&gt;

&lt;div class=&quot;caption&quot;&gt;This is Cub Crafters' Carbon Cub, a modern short takeoff and landing bush plane.&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;Bush airplanes are the SUVs of general aviation—small, piston-engined aircraft designed or adapted to carry a passenger or two, or to ferry light cargo in and out of remote areas with crude or non-existent runways. They're in use everywhere from the Alaskan Tundra to the Australian Outback to the African bush.&lt;/p&gt;
&lt;p&gt;Traditionally the tool of professional bush pilots, bush planes have recently become highly enjoyable toys for a cadre of enthusiasts. Fascinated by the low, slow off-airport, back-country flying which their STOL (short takeoff and landing) qualities make possible, private pilots have sought out bush planes for recreation.&lt;/p&gt;
&lt;p&gt;Vintage high-wing airplanes like the iconic Piper Super Cub (debuted in 1949), Cessna 180 (1952), or Maule M-7 (1984) join modern STOL airplanes like the Kitfox S7 Sti or Cub Crafters' Carbon Cub around camp fires atop mountain plateaus or at STOL competitions where pilots vie for honors with the shortest takeoff and landing distances and lowest stall speeds.&lt;/p&gt;
&lt;p&gt;There's endless debate among pilots about which plane is best for this task or that adventure. But at the huge 2018 EAA AirVenture annual airshow at Oshkosh, Wisconsin, a couple of weeks ago, Utah entrepreneur Mike Patey showed up with what many are now calling &quot;the ultimate bush plane.&quot;&lt;/p&gt;
&lt;h2&gt;Wilga Wary&lt;/h2&gt;
&lt;p&gt;Last year, Mike Patey was flying his Wilga 2000 low over Utah Lake for a photo shoot with a group of other bush planes. Suddenly, its piston engine blew, throwing two connecting rods. With no altitude for gliding, he had to land fast. In its death throes, the engine made a final burst of power, allowing Patey to just make it to a cornfield. Safely down, he decided he would rebuild the Wilga around an idea he'd been mulling for months.&lt;/p&gt;
&lt;p&gt;The airplane Patey set down in the field was based on the PZL-104 Wilga, a relatively large four-seat Polish bush plane designed in the 1960s for STOL aviation uses. Powered by a 260hp Russian-designed radial engine, the high-wing monoplane was sold from 1963 to 1996, followed by the improved Wilga 2000 (powered by a six-cylinder, 300 hp Lycoming O-540).&lt;/p&gt;
&lt;p&gt;Patey had been dissatisfied with the Wilga's Lycoming for some time. Like any piston engine, its power diminishes as altitude increases. At the elevations in his local Utah back country, Mike's Wilga 2000 lost 45 to 70 horsepower, significantly extending its takeoff distance. &quot;The engine was anemic for the sheer size of that aircraft. At higher elevations, instead of doubling its [takeoff] roll to 800 feet, it gets up to 2,000 feet when I'm up on an 8,000 foot mountain top.&quot;&lt;/p&gt;
&lt;p&gt;High altitudes degraded the performance of the Wilga's relatively small cantilever wing as well. Standing by his airplane in the corn rows, Patey said aloud, &quot;I'm going to fix this thing, get it out of here, and then it needs a turbine.&quot;&lt;/p&gt;
&lt;h2&gt;DRACO&lt;/h2&gt;
&lt;p&gt;The turbine Mike had in mind was a 680 shaft-hp Pratt &amp;amp; Whitney PT6A-28, a powerplant found in dozens of modern turboprop aircraft. At twice the power and about half the weight of the Lycoming, the PT6 would literally make the Wilga jump and perform even better at high altitudes.&lt;/p&gt;
&lt;p&gt;The engine swap was complemented by adding a 102-inch, four-blade MT propeller to harness the PT6's power. That was only the beginning of a long list of modifications, from redesigned longer, wider wings (plus-12 inches span, plus-11 inches chord), elevators, and rudder to bigger wing fuel tanks and special landing gear-leg tanks. Patey upgraded the brakes and added 35-inch main gear tires. He opted for a new digital cockpit with autopilot, infrared night vision, and a backup camera, totally new wiring, heating and electrical systems, and HID landing lights from a 737 airliner.&lt;/p&gt;
&lt;p&gt;The changes were so extensive that the FAA had to approve the conversion as an experimental exhibition aircraft. No longer considered a Wilga 2000, Mike has dubbed it &quot;DRACO,&quot; a Latin-derived word meaning dragon or serpent.&lt;/p&gt;
&lt;p&gt;Whatever you call it, the result is astounding. For comparison, take the popular Carbon Cub STOL airplane. A small two-seater weighing 1,023 pounds (464kg) empty, it can take off at sea level in just 110 feet, land in 140 feet, and stall at 36mph (58km/h). DRACO is twice its size—a 2,500 pound (1,360kg) four-seater that can take off in 97 feet, land in 110 feet, and stall at about 36mph.&lt;/p&gt;
&lt;p&gt;Before its conversion, the Wilga took off in 400 feet, landed in 280 feet, and stalled at 57mph (92km/h). Like most bush planes, it wasn't optimized for high-altitude flying. But DRACO can fly high. In fact, Patey designed and installed a four-passenger oxygen system that allows him to take advantage of PT6's performance at altitude. DRACO will climb at 4,000 feet-per-minute (FPM) and cruise at 180mph (290km/h) at 16,000 feet. A Carbon Cub climbs at 2,000 FPM and cruises at about 115mph (185km/h) around 5,000 feet.&lt;/p&gt;
&lt;p&gt;DRACO achieves performance and flexibility unheard of in other similarly designed bush planes. To really understand what went into it, watching Patey's &lt;a href=&quot;https://www.youtube.com/channel/UCSvdee86uThqIrloZjWwNVg&quot;&gt;series of build videos on YouTube&lt;/a&gt; is worthwhile—and not just for the technical detail.&lt;/p&gt;
&lt;h2&gt;The Joy of the Job&lt;/h2&gt;
&lt;p class=&quot;Standard&quot;&gt;For even the most sophisticated DIY-ers, the project Patey undertook should have taken years.&lt;/p&gt;
&lt;p&gt;He completed it in &lt;em&gt;five&lt;/em&gt; months. &lt;em&gt;By himself.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But for Mike—a serial entrepreneur who founded and ran a deck/gazebo-building company with 200 employees by the age of 18 and later built a successful rapid-prototyping firm (Prodigy Engineering)—the opportunity to work is a joy. &quot;Our parents taught us that if you started a project, no matter how much you disliked it, you finished it. It was the excitement of finishing a job. We grew up that way, and, despite being poor, we were unbelievably happy,&quot; he said.&lt;/p&gt;
&lt;p&gt;Ironically, DRACO has made the tens of thousands who have seen it fly online and in-person at Oshkosh happy. Patey says people are most delighted by how squat the bush plane looks on its articulated suspension when he throttles up for takeoff. DRACO looks like a big Praying Mantis. A few have questioned whether DRACO—which cost around $1 million to build not counting Patey's time and which runs on jet fuel rather than more common 100 octane gasoline—can even really be considered a bush plane?&lt;/p&gt;
&lt;p&gt;Patey points out that he can find jet fuel at most airports in the US and that, in other parts of the world, it is far easier to find than aviation gasoline. DRACO's PT6 will also run on diesel and other fuel mixes, which potentially makes it &lt;em&gt;more&lt;/em&gt; of a bush plane. He acknowledges that it's expensive, but it's what he dreamed of. &quot;I have a plane that can go to 28,000 feet and do 180mph cross-country with four people and gear. Yet I can take it where a Carbon Cub can go,&quot; he told Ars. &quot;To me, that makes it the ultimate bush plane.&quot;&lt;/p&gt;
</description>
<pubDate>Sun, 12 Aug 2018 11:48:18 +0000</pubDate>
<dc:creator>privong</dc:creator>
<og:url>https://arstechnica.com/cars/2018/08/one-man-designed-and-built-the-ultimate-bush-plane/</og:url>
<og:title>One man designed and built the ultimate bush plane</og:title>
<og:image>https://cdn.arstechnica.net/wp-content/uploads/2018/08/image2-760x380.jpeg</og:image>
<og:description>It all started when the engine in Mike Patey's Wilga 2000 failed.</og:description>
<og:type>article</og:type>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arstechnica.com/cars/2018/08/one-man-designed-and-built-the-ultimate-bush-plane/</dc:identifier>
</item>
</channel>
</rss>