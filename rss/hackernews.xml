<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Show HN: Um – Create your own man pages so you can remember how to do stuff</title>
<link>https://github.com/sinclairtarget/um</link>
<guid isPermaLink="true" >https://github.com/sinclairtarget/um</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;&lt;code&gt;um&lt;/code&gt; is a command-line utility for creating and maintaining your own set of &lt;code&gt;man&lt;/code&gt;-like help pages.&lt;/p&gt;
&lt;h3&gt;Why?&lt;/h3&gt;
&lt;p&gt;Have you seen how long &lt;code&gt;curl&lt;/code&gt;'s man page is? How many times have you gone through it trying to figure out how to make a POST request?&lt;/p&gt;
&lt;p&gt;Man pages are written to be comprehensive, but what humans really need are the bullet points. Use &lt;code&gt;um&lt;/code&gt; to write your own &lt;code&gt;man&lt;/code&gt;-like help pages that reflect what you've learned about a command so far. That way you have an easy reference for the things you already know are useful.&lt;/p&gt;
&lt;h3&gt;An Example&lt;/h3&gt;
&lt;p&gt;Say you've just reminded yourself how &lt;code&gt;grep&lt;/code&gt; works for the third time this month. You'd like to hold on to that precious knowledge so you don't have to go digging through the &lt;code&gt;grep&lt;/code&gt; man page again. You can do that with &lt;code&gt;um&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ um edit grep
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This will open your text editor, allowing you to record everything you want to remember about &lt;code&gt;grep&lt;/code&gt;. Once you've saved what you've written, you can pull it up again as easily as you would any man page:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ um grep
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This will open your pager with whatever you might have for &lt;code&gt;grep&lt;/code&gt;, say:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
GREP(shell)                        Um Pages                        GREP(shell)


NAME
       grep -- Print lines matching a pattern

SYNOPSIS
       grep [options ...] [file ...]

REGEX SYNTAX
       .      Matches any character.

       ^      Anchors pattern to beginning of line.

       $      Anchors pattern to end of line.

       []     Character set.  ^ for negation, - for range.

OPTIONS
       -r     Recursively search listed directories.

       -E     Force grep to behave as egrep, accepting extended REGEXes.



Um Pages                      September 26, 2017                   GREP(shell)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;um&lt;/code&gt; supports several additional sub-commands. Among them are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;um list&lt;/code&gt;, which lists all the um pages you already have.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;um rm&lt;/code&gt;, which removes an existing um page.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;um topic&lt;/code&gt;, which switches between topic namespaces for your pages, allowing you to keep a separate set of um pages for css properties, for example.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Um Page Format&lt;/h3&gt;
&lt;p&gt;Man pages were &lt;a href=&quot;http://twobithistory.org/2017/09/28/the-lineage-of-man.html&quot; rel=&quot;nofollow&quot;&gt;historically typeset using the &lt;code&gt;roff&lt;/code&gt; typesetting system&lt;/a&gt;. &lt;code&gt;roff&lt;/code&gt; was basically an early LaTeX. Writing man pages using &lt;code&gt;roff&lt;/code&gt; today is not very fun or intuitive.&lt;/p&gt;
&lt;p&gt;Happily, &lt;code&gt;pandoc&lt;/code&gt; can be used to convert Markdown documents to &lt;code&gt;roff&lt;/code&gt;-like man pages. By default, &lt;code&gt;um&lt;/code&gt; expects you to write your um pages in Markdown so that it can convert them and pass them to the &lt;code&gt;man&lt;/code&gt; program to view. You can, however, elect to just write your um pages as &lt;code&gt;.txt&lt;/code&gt; files and view them without going through the &lt;code&gt;man&lt;/code&gt; program.&lt;/p&gt;
&lt;p&gt;Below is the Markdown source that produced the &lt;code&gt;grep&lt;/code&gt; listing above. Except for the first three lines, it's all just Markdown:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-gfm&quot;&gt;
&lt;pre&gt;
% GREP(shell) Um Pages | Um Pages
%
% September 26, 2017
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;&amp;lt;!--&lt;/span&gt; ^ The Pandoc &quot;title block&quot; which provides metadata about the page. &lt;span class=&quot;pl-c&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-mh&quot;&gt;&lt;span class=&quot;pl-mh&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;pl-mh&quot;&gt; &lt;/span&gt;NAME &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;&amp;lt;!--&lt;/span&gt; Top-level Markdown headings become man section headings. &lt;span class=&quot;pl-c&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
grep -- Print lines matching a pattern

&lt;span class=&quot;pl-mh&quot;&gt;&lt;span class=&quot;pl-mh&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;pl-mh&quot;&gt; &lt;/span&gt;SYNOPSIS&lt;/span&gt;
&lt;span class=&quot;pl-mb&quot;&gt;**grep**&lt;/span&gt; [options ...] &amp;lt;pattern&amp;gt; [file ...]

&lt;span class=&quot;pl-mh&quot;&gt;&lt;span class=&quot;pl-mh&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;pl-mh&quot;&gt; &lt;/span&gt;REGEX SYNTAX&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;&amp;lt;!--&lt;/span&gt; Here we're using a &quot;definition list&quot; to get that man page look. &lt;span class=&quot;pl-c&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;
.
: Matches any character.

^
: Anchors pattern to beginning of line.

$
: Anchors pattern to end of line.

[]
: Character set. ^ for negation, - for range.

&lt;span class=&quot;pl-mh&quot;&gt;&lt;span class=&quot;pl-mh&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;pl-mh&quot;&gt; &lt;/span&gt;OPTIONS&lt;/span&gt;
-r
: Recursively search listed directories.

-E
: Force grep to behave as egrep, accepting extended REGEXes.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href=&quot;https://github.com/sinclairtarget/um#config&quot;&gt;Configuration&lt;/a&gt; below for more information on changing the default um page format. See the &lt;a href=&quot;https://pandoc.org/MANUAL.html#pandocs-markdown&quot; rel=&quot;nofollow&quot;&gt;Pandoc Manual&lt;/a&gt; for more information about Pandoc's flavor of Markdown and the formatting options available to you when you are writing a man page in Markdown.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;um&lt;/code&gt;'s own &lt;a href=&quot;https://github.com/sinclairtarget/um/blob/master/doc&quot;&gt;man pages&lt;/a&gt; are written in Markdown and converted using Pandoc, so they could also make a good reference.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;um&lt;/code&gt; is currently available only for MacOS.&lt;/p&gt;
&lt;p&gt;You can install &lt;code&gt;um&lt;/code&gt; via &lt;a href=&quot;http://brew.sh/&quot; rel=&quot;nofollow&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ brew install sinclairtarget/wst/um
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;A bash completion script for &lt;code&gt;um&lt;/code&gt; is installed to &lt;code&gt;/usr/local/etc/bash_completion.d&lt;/code&gt;, assuming you're using the default &lt;code&gt;brew&lt;/code&gt; prefix. You may need to add the following lines to your &lt;code&gt;~/.bash_profile&lt;/code&gt; to enable the completion:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if [ -f $(brew --prefix)/etc/bash_completion.d/um-completion.sh ]; then
  . $(brew --prefix)/etc/bash_completion.d/um-completion.sh
fi
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Help&lt;/h2&gt;
&lt;p&gt;Refer to &lt;code&gt;um help&lt;/code&gt; for comprehensive documentation of the sub-commands and options available for &lt;code&gt;um&lt;/code&gt;. Man pages are also available.&lt;/p&gt;

&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;You can configure &lt;code&gt;um&lt;/code&gt; using a file called &lt;code&gt;umconfig&lt;/code&gt; placed in a folder called &lt;code&gt;.um&lt;/code&gt; in your home directory. The syntax for setting an option is as follows:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;option&amp;gt; = &amp;lt;value&amp;gt;
e.g.
pager = less
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can set values for &lt;code&gt;pager&lt;/code&gt;, &lt;code&gt;editor&lt;/code&gt;, &lt;code&gt;default_topic&lt;/code&gt;, &lt;code&gt;pages_directory&lt;/code&gt;, and &lt;code&gt;pages_ext&lt;/code&gt;. The defaults for these options are &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;vi&lt;/code&gt;, &lt;code&gt;shell&lt;/code&gt;, &lt;code&gt;~/.um&lt;/code&gt;, and &lt;code&gt;.md&lt;/code&gt; respectively. Before falling back to the defaults, &lt;code&gt;um&lt;/code&gt; will attempt to read the values for &lt;code&gt;pager&lt;/code&gt; and &lt;code&gt;editor&lt;/code&gt; from the shell environment (i.e. the &lt;code&gt;PAGER&lt;/code&gt; and &lt;code&gt;EDITOR&lt;/code&gt; environment variables) if they are not specified in &lt;code&gt;umconfig&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;pager&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;less&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&quot;Use this pager to view um pages.&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;editor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&quot;Use this editor to edit um pages.&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;default_topic&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Current topic if none is set.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;pages_directory&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~/.um&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Where to store um pages.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;pages_ext&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.md&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Unless &lt;code&gt;.md&lt;/code&gt;, just the extension for your um pages.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;The &lt;code&gt;pager&lt;/code&gt; configuration option is only used when &lt;code&gt;pages_ext&lt;/code&gt; is not &lt;code&gt;.md&lt;/code&gt; (the default). When &lt;code&gt;pages_ext&lt;/code&gt; is &lt;code&gt;.md&lt;/code&gt;, then &lt;code&gt;um&lt;/code&gt; runs the pages through &lt;code&gt;pandoc&lt;/code&gt; before passing them to &lt;code&gt;man&lt;/code&gt;. The pager used by &lt;code&gt;man&lt;/code&gt; is determined by the &lt;code&gt;PAGER&lt;/code&gt; and &lt;code&gt;MANPAGER&lt;/code&gt; environment variables. See the man page for &lt;code&gt;man&lt;/code&gt; for more information.&lt;/p&gt;
&lt;p&gt;So, if you wanted to store your um pages in your Dropbox folder, and you prefer emacs to vim, your config file might look like the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;editor = emacs
pages_directory = /Users/myusername/Dropbox/um
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can print the current configuration using &lt;code&gt;um config&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Page Templating&lt;/h2&gt;
&lt;p&gt;If you place a file called &lt;code&gt;template.md&lt;/code&gt; in &lt;code&gt;~/.um&lt;/code&gt;, that file will serve as the basis for any new um pages you create (when &lt;code&gt;pages_ext&lt;/code&gt; is set to &lt;code&gt;.md&lt;/code&gt;). If you have &lt;code&gt;pages_ext&lt;/code&gt; set to something else, perhaps &lt;code&gt;.txt&lt;/code&gt;, then you should create a template file called &lt;code&gt;template.txt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The template file is preprocessed so that the following variables are replaced before the file is used to create a new um page:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Substitution&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;$name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The name of the page, which you specify when you call &lt;code&gt;um edit &amp;lt;page name&amp;gt;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;$NAME&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The same as above, but uppercase.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;$topic&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The name of the current topic.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;$time&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The current time in RFC2822 format.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;$date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The current date as &lt;em&gt;Month&lt;/em&gt; &lt;em&gt;Day&lt;/em&gt;, &lt;em&gt;Year&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;If you do not have an appropriate template in your &lt;code&gt;~/.um&lt;/code&gt; directory, &lt;code&gt;um&lt;/code&gt; falls back to using its default templates. &lt;code&gt;um&lt;/code&gt; ships with a default template for &lt;code&gt;.md&lt;/code&gt; um pages and &lt;code&gt;.txt&lt;/code&gt; um pages.&lt;/p&gt;
&lt;h2&gt;Tips&lt;/h2&gt;
&lt;p&gt;If you want to reset the topic to its default whenever you start a new shell, you can place the following line in your &lt;code&gt;.bash_profile&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;um topic -d
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Contributing&lt;/h2&gt;
&lt;p&gt;You must have &lt;code&gt;pandoc&lt;/code&gt; installed to convert the Markdown man pages (for &lt;code&gt;um&lt;/code&gt; itself, that is) to the &lt;code&gt;roff&lt;/code&gt; format readable by &lt;code&gt;man&lt;/code&gt;. See &lt;a href=&quot;https://github.com/sinclairtarget/um/blob/master/Rakefile&quot;&gt;Rakefile&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 20 Aug 2018 02:27:20 +0000</pubDate>
<dc:creator>quickthrower2</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/6401947?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>sinclairtarget/um</og:title>
<og:url>https://github.com/sinclairtarget/um</og:url>
<og:description>um - Create and maintain your own man pages so you can remember how to do stuff</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/sinclairtarget/um</dc:identifier>
</item>
<item>
<title>What Did Ada Lovelace’s Program Actually Do?</title>
<link>https://twobithistory.org/2018/08/18/ada-lovelace-note-g.html</link>
<guid isPermaLink="true" >https://twobithistory.org/2018/08/18/ada-lovelace-note-g.html</guid>
<description>&lt;p&gt;The story of Microsoft’s founding is one of the most famous episodes in computing history. In 1975, Paul Allen flew out to Albuquerque to demonstrate the BASIC interpreter that he and Bill Gates had written for the Altair microcomputer. Because neither of them had a working Altair, Allen and Gates tested their interpreter using an emulator that they wrote and ran on Harvard’s computer system. The emulator was based on nothing more than the published specifications for the Intel 8080 processor. When Allen finally ran their interpreter on a real Altair—in front of the person he and Gates hoped would buy their software—he had no idea if it would work. But it did. The next month, Allen and Gates officially founded their new company.&lt;/p&gt;&lt;p&gt;Over a century before Allen and Gates wrote their BASIC interpreter, Ada Lovelace wrote and published a computer program. She, too, wrote a program for a computer that had only been described to her. But her program, unlike the Microsoft BASIC interpreter, was never run, because the computer she was targeting was never built.&lt;/p&gt;
&lt;p&gt;Lovelace’s program is often called the world’s first computer program. Not everyone agrees that it should be called that. Lovelace’s legacy, it turns out, is one of computing history’s most hotly debated subjects. Walter Isaacson has written that the dispute about the extent and merit of her contributions constitutes a “minor academic specialty.”&lt;sup id=&quot;fnref:1&quot;/&gt; Inevitably, the fact that Lovelace was a woman has made this dispute a charged one. Historians have cited all kinds of primary evidence to argue that the credit given to Lovelace is either appropriate or undeserved. But they seem to spend less time explaining the technical details of her published writing, which is unfortunate, because the technical details are the most fascinating part of the story. Who wouldn’t want to know exactly how a program written in 1843 was supposed to work?&lt;/p&gt;
&lt;p&gt;In fairness, Lovelace’s program is not easy to explain to the layperson without some hand-waving. It’s the intricacies of her program, though, that make it so remarkable. Whether or not she ought to be known as “the first programmer,” her program was specified with a degree of rigor that far surpassed anything that came before. She thought carefully about how operations could be organized into groups that could be repeated, thereby inventing the loop. She realized how important it was to track the state of variables as they changed, introducing a notation to illustrate those changes. As a programmer myself, I’m startled to see how much of what Lovelace was doing resembles the experience of writing software today.&lt;/p&gt;
&lt;p&gt;So let’s take a closer look at Lovelace’s program. She designed it to calculate the Bernoulli numbers. To understand what those are, we have to go back a couple millennia to the genesis of one of mathematics’ oldest problems.&lt;/p&gt;
&lt;h2 id=&quot;sums-of-powers&quot;&gt;Sums of Powers&lt;/h2&gt;
&lt;p&gt;The Pythagoreans lived on the shores of the Mediterranean and worshiped numbers. One of their pastimes was making triangles out of pebbles.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://twobithistory.org/images/triangular_numbers1.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;One pebble followed by a row of two pebbles makes a triangle containing three pebbles. Add another row of three pebbles and you get a triangle containing six pebbles. You can continue like this, each time adding a row with one more pebble in it than the previous row. A triangle with six rows contains 21 pebbles. But how many pebbles does a triangle with 423 rows contain?&lt;/p&gt;
&lt;p&gt;What the Pythagoreans were looking for was a way to calculate the following without doing all the addition:&lt;/p&gt;
&lt;p&gt;They eventually realized that, if you place two triangles of the same size up against each other so that they form a rectangle, you can find the area of the rectangle and divide by two to get the number of pebbles in each of the triangles:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://twobithistory.org/images/triangular_numbers2.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Archimedes later explored a similar problem. He was interested in the following series:&lt;/p&gt;
&lt;p&gt;You might visualize this series by imagining a stack of progressively larger squares (made out of tiny cubes), one on top of the other, forming a pyramid. Archimedes wanted to know if there was an easy way to tell how many cubes would be needed to construct a pyramid with, say, 423 levels. He recorded a solution that also permits a geometrical interpretation.&lt;sup id=&quot;fnref:2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Three pyramids can be fit together to form a rectangular prism with a tiny, one-cube-high extrusion at one end. That little extrusion happens to be a triangle that obeys the same rules that the Pythagoreans used to make their pebble triangles. (&lt;a href=&quot;https://www.youtube.com/watch?v=aXbT37IlyZQ&quot;&gt;This video&lt;/a&gt; might be a more helpful explanation of what I mean.) So the volume of the whole shape is given by the following equation:&lt;/p&gt;
&lt;p&gt;By substituting the Pythagorean equation for the sum of the first &lt;em&gt;n&lt;/em&gt; integers and doing some algebra, you get this:&lt;/p&gt;
&lt;p&gt;In 499, the Indian mathematician and astronomer, Aryabhata, published a work known as the &lt;em&gt;Aryabhatiya&lt;/em&gt;, which included a formula for calculating the sum of cubes:&lt;/p&gt;
&lt;p&gt;A formula for the sum of the first &lt;em&gt;n&lt;/em&gt; positive integers raised to the fourth power wasn’t published for another 500 years.&lt;sup id=&quot;fnref:3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;You might be wondering at this point if there is a general method for finding the sum of the first &lt;em&gt;n&lt;/em&gt; integers raised to the &lt;em&gt;kth&lt;/em&gt; power. Mathematicians were wondering too. Johann Faulhaber, a German mathematician and slightly kooky numerologist, was able to calculate formulas for sums of integers up to the 17th power, which he published in 1631. But this may have taken him years and he did not state a general solution.&lt;sup id=&quot;fnref:4&quot;/&gt; Blaise Pascal finally outlined a general method in 1665, though it depended on first knowing how to calculate the sum of integers raised to every lesser power.&lt;sup id=&quot;fnref:5&quot;/&gt; To calculate the sum of the first &lt;em&gt;n&lt;/em&gt; positive integers raised to the sixth power, for example, you would first have to know how to calculate the sum of the first &lt;em&gt;n&lt;/em&gt; positive integers raised to the fifth power.&lt;/p&gt;
&lt;p&gt;A more practical general solution was stated in the posthumously published work of Swiss mathematician Jakob Bernoulli, who died in 1705. Bernoulli began by deriving the formulas for calculating the sums of the first &lt;em&gt;n&lt;/em&gt; positive integers to the first, second, and third powers.&lt;sup id=&quot;fnref:6&quot;/&gt; These he gave in polynomial form, so they looked like the below:&lt;/p&gt;
&lt;p&gt;Using Pascal’s Triangle, Bernoulli realized that these polynomials followed a predictable pattern. Essentially, Bernoulli broke the coefficients of each term down into two factors, one of which he could determine using Pascal’s Triangle and the other which he could derive from the interesting property that all the coefficients in the polynomial seemed to always add to one. Figuring out the exponent that should be attached to each term was no problem, because that also followed a predictable pattern. The factor of each coefficient that had to be calculated using the sums-to-one rule formed a sequence that became known as the Bernoulli numbers.&lt;/p&gt;
&lt;p&gt;Bernoulli’s discovery did not mean that it was now trivial to calculate the sum of the first positive &lt;em&gt;n&lt;/em&gt; integers to any given power. In order to calculate the sum of the first positive &lt;em&gt;n&lt;/em&gt; integers raised to the &lt;em&gt;kth&lt;/em&gt; power, you would need to know every Bernoulli number up to the &lt;em&gt;kth&lt;/em&gt; Bernoulli number. Each Bernoulli number could only be calculated if the previous Bernoulli numbers were known. But calculating a long series of Bernoulli numbers was significantly easier than deriving each sum of powers formula in turn, so Bernoulli’s discovery was a big advance for mathematics.&lt;/p&gt;
&lt;h2 id=&quot;babbage&quot;&gt;Babbage&lt;/h2&gt;
&lt;p&gt;Charles Babbage was born in 1791, nearly a century after Bernoulli died. I’ve always had some vague idea that Babbage designed but did not build a mechanical computer. But I’ve never entirely understood how that computer was supposed to work. The basic ideas, as it happens, are not that difficult to grasp, which is good news. Lovelace’s program was designed to run on one of Babbage’s machines, so we need to take another quick detour here to talk about how those machines worked.&lt;/p&gt;
&lt;p&gt;Babbage designed two separate mechanical computing machines. His first machine was called the Difference Engine. Before the invention of the pocket calculator, people relied on logarithmic tables to calculate the product of large numbers. (There is a good &lt;a href=&quot;https://youtu.be/VRzH4xB0GdM&quot;&gt;Numberphile video&lt;/a&gt; on how this was done.) Large logarithmic tables are not difficult to create, at least conceptually, but the sheer number of calculations that need to be done in order to create them meant that in Babbage’s time they often contained errors. Babbage, frustrated by this, sought to create a machine that could tabulate logarithms mechanically and therefore without error.&lt;sup id=&quot;fnref:7&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The Difference Engine was not a computer, because all it did was add and subtract. It took advantage of a method devised by the French mathematician Gaspard de Prony that broke the process of tabulating logarithms down into small steps.&lt;sup id=&quot;fnref:8&quot;/&gt; These small steps involved only addition and subtraction, meaning that a small army of people without any special mathematical aptitude or training could be employed to produce a table. De Prony’s method, known as the method of divided differences, could be used to tabulate any polynomial. Polynomials, in turn, could be used to approximate logarithmic and trigonometric functions.&lt;/p&gt;
&lt;p&gt;To get a sense of how this process worked, consider the following simple polynomial function:&lt;/p&gt;
&lt;p&gt;The method of divided differences involves finding the difference between each successive value of &lt;em&gt;y&lt;/em&gt; for different values of &lt;em&gt;x&lt;/em&gt;. The differences between these differences are then found, and possibly the differences between those next differences themselves, until a constant difference appears. These differences can then be used to get the next value of the polynomial simply by adding.&lt;/p&gt;
&lt;p&gt;Because the above polynomial is only a second-degree polynomial, we are able to find the constant difference after only two columns of differences:&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;x&lt;/th&gt;
&lt;th&gt;y&lt;/th&gt;
&lt;th&gt;Diff 1&lt;/th&gt;
&lt;th&gt;Diff 2&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Now, since we know that the constant difference is 2, we can find the value of &lt;em&gt;y&lt;/em&gt; when &lt;em&gt;x&lt;/em&gt; is 5 through addition only. If we add 2 to 7, the last entry in the “Diff 1” column, we get 9. If we add 9 to 17, the last entry in the &lt;em&gt;y&lt;/em&gt; column, we get 26, our answer.&lt;/p&gt;
&lt;p&gt;Babbage’s Difference Engine had, for each difference column in a table like the one above, a physical column of gears. Each gear was a decimal digit and one whole column was a decimal number. The Difference Engine had eight columns of gears, so it could tabulate a polynomial up to the seventh degree. The columns were initially set with values matching an early row in the difference table, worked out ahead of time. A human operator would then turn a crank shaft, causing the constant difference to propagate through the machine as the value stored on each column was added to the next.&lt;/p&gt;
&lt;p&gt;Babbage was able to build a small section of the Difference Engine and use it to demonstrate his ideas at parties.&lt;sup id=&quot;fnref:9&quot;/&gt; But even after spending an amount of public money equal to the cost of two large warships, he never built the entire machine.&lt;sup id=&quot;fnref:10&quot;/&gt; Babbage could not find anyone in the early 1800s that could make the number of gears he needed with sufficient accuracy. A working Difference Engine would not be built until the 1990s, after the advent of precision machining. There is &lt;a href=&quot;https://www.youtube.com/watch?v=BlbQsKpq3Ak&quot;&gt;a great video on YouTube&lt;/a&gt; demonstrating a working Difference Engine on loan to the Computer History Museum in Mountain View, which is worth watching even just to listen to the marvelous sounds the machine makes while it runs.&lt;/p&gt;
&lt;p&gt;Babbage eventually lost interest in the Difference Engine when he realized that a much more powerful and flexible machine could be built. His Analytical Engine was the machine that we know today as Babbage’s mechanical computer. The Analytical Engine was based on the same columns of gears used in the Difference Engine, but whereas the Difference Engine only had eight columns, the Analytical Engine was supposed to have many hundreds more. The Analytical Engine could be programmed using punched cards like a Jacquard Loom and could multiply and divide as well as add and subtract. In order to perform one of these operations, a section of the machine called the “mill” would rearrange itself into the appropriate configuration, read the operands off of other columns used for data storage, and then write the result back to another column.&lt;/p&gt;
&lt;p&gt;Babbage called his new machine the Analytical Engine because it was powerful enough to do something resembling mathematical analysis. The Difference Engine could tabulate a polynomial, but the Analytical Engine would be able to calculate, for example, the coefficients of the polynomial expansion of another expression. It was an amazing machine, but the British government wisely declined to fund its construction. So Babbage went abroad to Italy to try to drum up support for his idea.&lt;/p&gt;
&lt;h2 id=&quot;notes-by-the-translator&quot;&gt;Notes by The Translator&lt;/h2&gt;
&lt;p&gt;In Turin, Babbage met Italian engineer and future prime minister Luigi Menabrea. He persuaded Menabrea to write an outline of what the Analytical Engine could accomplish. In 1842, Menabrea published a paper on the topic in French. The following year, Lovelace published a translation of Menabrea’s paper into English.&lt;/p&gt;
&lt;p&gt;Lovelace, then known as Ada Byron, first met Babbage at a party in 1833, when she was 17 and he was 41.&lt;sup id=&quot;fnref:11&quot;/&gt; Lovelace was fascinated with Babbage’s Difference Engine. She could also understand how it worked, because she had been extensively tutored in mathematics throughout her childhood. Her mother, Annabella Milbanke, had decided that a solid grounding in mathematics would ward off the wild, romantic sensibility that possessed Lovelace’s father, Lord Byron, the famous poet. After meeting in 1833, Lovelace and Babbage remained a part of the same social circle and wrote to each other frequently.&lt;/p&gt;
&lt;p&gt;Ada Byron married William King in 1835. King later became the Earl of Lovelace, making Ada the Countess of Lovelace. Even after having three children, she continued her education in mathematics, employing Augustus de Morgan, who discovered De Morgan’s laws, as her tutor.&lt;sup id=&quot;fnref:12&quot;/&gt; Lovelace saw the potential of Babbage’s Analytical Machine immediately and was eager to work with him to promote the idea. A friend suggested that she translate Menabrea’s paper for an English audience.&lt;sup id=&quot;fnref:13&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Menabrea’s paper gave a brief overview of how the Difference Engine worked, then showed how the Analytical Engine would be a far superior machine. The Analytical Engine would be so powerful that it could “form the product of two numbers, each containing twenty figures, in &lt;em&gt;three minutes&lt;/em&gt;”&lt;sup id=&quot;fnref:14&quot;/&gt; (emphasis in the original). Menabrea gave further examples of the machine’s capabilities, demonstrating how it could solve a simple system of linear equations and expand the product of two binomial expressions. In both cases, Menabrea provided what Lovelace called “diagrams of development,” which listed the sequence of operations that would need to be performed to calculate the correct answer.&lt;sup id=&quot;fnref:15&quot;/&gt; These were programs in the same sense that Lovelace’s own program was a program and they were originally published the year before. But as we will see, Menabrea’s programs were only simple examples of what was possible. All of them were trivial in the sense that they did not require any kind of branching or looping.&lt;/p&gt;
&lt;p&gt;Lovelace appended a series of notes to her translation of Menabrea’s paper that together ran much longer than the original work. It was here that she made her major contributions to computing. In Note A, which Lovelace attached to Menabrea’s initial description of the Analytical Engine, Lovelace explained at some length and often in lyrical language the promise of a machine that could perform arbitrary mathematical operations. She foresaw that a machine like the Analytical Engine wasn’t just limited to numbers and could in fact act on any objects “whose mutual fundamental relations could be expressed by those of the abstract science of operations, and which should be also susceptible of adaptations to the action of the operating notation and mechanism of the engine.”&lt;sup id=&quot;fnref:16&quot;/&gt; She added that the machine might one day, for example, compose music. This insight was all the more remarkable given that Menabrea saw the Analytical Engine primarily as a tool for automating “long and arid computation,” which would free up the intellectual capacities of brilliant scientists for more advanced thinking.&lt;sup id=&quot;fnref:17&quot;/&gt; The miraculous foresight that Lovelace demonstrated in Note A is one major reason that she is celebrated today.&lt;/p&gt;
&lt;p&gt;The other famous note is Note G. Lovelace begins Note G by arguing that, despite its impressive powers, the Analytical Machine cannot really be said to “think.” This part of Note G is what Alan Turing would later refer to as “Lady Lovelace’s Objection.” Nevertheless, Lovelace continues, the machine can do extraordinary things. To illustrate its ability to handle even more complex problems, Lovelace provides her program calculating the Bernoulli numbers.&lt;/p&gt;
&lt;p&gt;The full program, in the expanded “diagram of development” format that Lovelace explains in Note D, can be seen &lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/c/cf/Diagram_for_the_computation_of_Bernoulli_numbers.jpg&quot;&gt;here&lt;/a&gt;. The program is essentially a list of operations, specified using the usual mathematical symbols. It doesn’t appear that Babbage or Lovelace got as far as developing anything like a set of op codes for the Analytical Engine.&lt;/p&gt;
&lt;p&gt;Though Lovelace was describing a method for computing the entire sequence of Bernoulli numbers up to some limit, the program she provided only illustrated one step of that process. Her program calculated a number that she called B7, which modern mathematicians know as the eighth Bernoulli number. Her program thus sought to solve the following equation:&lt;/p&gt;
&lt;p&gt;In the above, each term represents a coefficient in the polynomial formula for the sum of integers to a particular power. Here that power is eight, since the eighth Bernoulli number first appears in the formula for the sum of positive integers to the eighth power. The B and A numbers represent the two kinds of factors that Bernoulli discovered. B1 through B7 are all different Bernoulli numbers, indexed according to Lovelace’s indexing. A0 through A5 represent the factors of the coefficients that Bernoulli could calculate using Pascal’s Triangle. The values of A0, A1, A3, and A5 appear below. Here &lt;em&gt;n&lt;/em&gt; represents the index of the Bernoulli number in the sequence of odd-numbered Bernoulli numbers starting with the first. Lovelace’s program used &lt;em&gt;n&lt;/em&gt; = 4.&lt;/p&gt;
&lt;p&gt;I’ve created a &lt;a href=&quot;https://gist.github.com/sinclairtarget/ad18ac65d277e453da5f479d6ccfc20e&quot;&gt;translation&lt;/a&gt; of Lovelace’s program into C, which may be easier to follow. Lovelace’s program first calculates A0 and the product B1A1. It then enters a loop that repeats twice to calculate B3A3 and B5A5, since those are formed according to an identical pattern. After each product is calculated, it is added with all the previous products, so that by the end of the program the full sum has been obtained.&lt;/p&gt;
&lt;p&gt;Obviously the C translation is not an exact recreation of Lovelace’s program. It declares variables on the stack, for example, whereas Lovelace’s variables were more like registers. But it makes obvious the parts of Lovelace’s program that were so prescient. The C program contains two &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loops, one nested inside the other. Lovelace’s program did not have &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loops exactly, but she made groups of operations and in the text of her note specified when they should repeat. The variable &lt;code class=&quot;highlighter-rouge&quot;&gt;v10&lt;/code&gt;, in the original program and in the C translation, functions as a counter variable that decrements with each loop, a construct any programmer would be familiar with. In fact, aside from the profusion of variables with unhelpful names, the C translation of Lovelace’s program doesn’t look that alien at all.&lt;/p&gt;
&lt;p&gt;The other thing worth mentioning quickly is that translating Lovelace’s program into C was not that difficult, thanks to the detail present in her diagram. Unlike Menabrea’s tables, her table includes a column labeled “Indication of change in the value on any Variable,” which makes it much easier to follow the mutation of state throughout the program. She adds a superscript index here to each variable to indicate the successive values they hold. A superscript of two, for example, means that the value being used here is the second value that has been assigned to the variable since the beginning of the program.&lt;/p&gt;
&lt;h2 id=&quot;the-first-programmer&quot;&gt;The First Programmer?&lt;/h2&gt;
&lt;p&gt;After I had translated Lovelace’s program into C, I was able to run it on my own computer. To my frustration, I kept getting the wrong result. After some debugging, I finally realized that the problem wasn’t the code that I had written. The bug was in the original!&lt;/p&gt;
&lt;p&gt;In her “diagram of development,” Lovelace gives the fourth operation as &lt;code class=&quot;highlighter-rouge&quot;&gt;v5 / v4&lt;/code&gt;. But the correct ordering here is &lt;code class=&quot;highlighter-rouge&quot;&gt;v4 / v5&lt;/code&gt;. This may well have been a typesetting error and not an error in the program that Lovelace devised. All the same, this must be the oldest bug in computing. I marveled that, for ten minutes or so, unknowingly, I had wrestled with this first ever bug.&lt;/p&gt;
&lt;p&gt;Jim Randall, another blogger that has &lt;a href=&quot;https://enigmaticcode.wordpress.com/tag/bernoulli-numbers/&quot;&gt;translated Lovelace’s program into Python&lt;/a&gt;, has noted this division bug and two other issues. What does it say about Ada Lovelace that her published program contains minor bugs? Perhaps it shows that she was attempting to write not just a demonstration but a real program. After all, can you really be writing anything more than toy programs if you aren’t also writing lots of bugs?&lt;/p&gt;
&lt;p&gt;One Wikipedia article calls Lovelace the first to publish a “complex program.”&lt;sup id=&quot;fnref:18&quot;/&gt; Maybe that’s the right way to think about Lovelace’ accomplishment. Menabrea published “diagrams of development” in his paper a year before Lovelace published her translation. Babbage also wrote more than twenty programs that he never published.&lt;sup id=&quot;fnref:19&quot;/&gt; So it’s not quite accurate to say that Lovelace wrote or published the first program, though there’s always room to quibble about what exactly constitutes a “program.” Even so, Lovelace’s program was miles ahead of anything else that had been published before. The longest program that Menabrea presented was 11 operations long and contained no loops or branches; Lovelace’s program contains 25 operations and a nested loop (and thus branching). Menabrea wrote the following toward the end of his paper:&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;When once the engine shall have been constructed, the difficulty will be reduced to the making of the cards; but as these are merely the translation of algebraic formulae, it will, by means of some simple notation, be easy to consign the execution of them to a workman.&lt;sup id=&quot;fnref:20&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Neither Babbage nor Menabrea were especially interested in applying the Analytical Engine to problems beyond the immediate mathematical challenges that first drove Babbage to construct calculating machines. Lovelace saw that the Analytical Engine was capable of much more than Babbage or Menabrea could imagine. Lovelace also grasped that “the making of the cards” would not be a mere afterthought and that it could be done well or done poorly. This is hard to appreciate without understanding her program from Note G and seeing for oneself the care she put into designing it. But having done that, you might agree that Lovelace, even if she was not the very first programmer, was the first programmer to deserve the title.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you enjoyed this post, more like it come out every two weeks! Follow &lt;a href=&quot;https://twitter.com/TwoBitHistory&quot;&gt;@TwoBitHistory&lt;/a&gt; on Twitter or subscribe to the &lt;a href=&quot;https://twobithistory.org/feed.xml&quot;&gt;RSS feed&lt;/a&gt; to make sure you know when a new post is out.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Previously on TwoBitHistory…&lt;/em&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot; readability=&quot;3.531746031746&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;This week's post: Parsing Vim's prestigious pedigree!&lt;a href=&quot;https://t.co/1YUszI5dIC&quot;&gt;https://t.co/1YUszI5dIC&lt;/a&gt;&lt;/p&gt;
— TwoBitHistory (@TwoBitHistory) &lt;a href=&quot;https://twitter.com/TwoBitHistory/status/1026240555062386689?ref_src=twsrc%5Etfw&quot;&gt;August 5, 2018&lt;/a&gt;&lt;/blockquote&gt;

</description>
<pubDate>Mon, 20 Aug 2018 00:29:44 +0000</pubDate>
<dc:creator>weebst</dc:creator>
<og:image>https://twobithistory.org/images/logo.png</og:image>
<og:url>https://twobithistory.org/2018/08/18/ada-lovelace-note-g.html</og:url>
<og:title>What Did Ada Lovelace's Program Actually Do?</og:title>
<og:description>In 1843, Ada Lovelace published the first nontrivial program. How did it work?</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://twobithistory.org/2018/08/18/ada-lovelace-note-g.html</dc:identifier>
</item>
<item>
<title>New evidence challenges the story of the Stanford Prison Experiment</title>
<link>https://thepsychologist.bps.org.uk/time-change-story</link>
<guid isPermaLink="true" >https://thepsychologist.bps.org.uk/time-change-story</guid>
<description>&lt;p&gt;We all know the story of the Stanford Prison Experiment. It has been a staple of introductory psychology textbooks and lectures for nearly fifty years (see Griggs, 2014).&lt;/p&gt;&lt;p&gt;Ordinary young men were randomly divided into Prisoners and Guards; within a short time, the Guards become so brutal and the Prisoners so victimised that the study – originally scheduled for two weeks – had to be cut short after only five days.&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;These findings seem to demonstrate the terrifying power of the situation over individuals. Philip Zimbardo has always insisted that he had to do nothing to produce such toxicity. The participants simply slipped ‘naturally’ – and perhaps unconsciously – into their roles as vicious guards or broken prisoners.&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;But now, a half century later, dramatic new evidence has emerged that challenges Zimbardo’s account. Our textbooks and our lectures will have to be rewritten. The story of what happened in the SPE and why such brutality occurred will have to be retold.&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;Over the years, several scholars had expressed doubt over Zimbardo’s version. But the problem was that much of what actually happened in the SPE remained opaque and so the story in the textbooks went unchanged. We knew that the study had been recorded but the recordings were not in the public domain. And since evidence from the SPE was never actually published in a peer-reviewed psychology journal, methodological details of the study were also not in the scientific domain.&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;This all changed recently when both video and audio tapes were &lt;a href=&quot;https://searchworks.stanford.edu/catalog?f%5Bcollection%5D%5B%5D=6022627&quot;&gt;deposited in Zimbardo’s online archive at Stanford University&lt;/a&gt;. It includes 994 items of which 49 are videos and 54 are sound recordings. Together, the materials show that the textbook account is even more misleading than we imagined.&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;The startling new evidence tells a tale of the experimenters treating the Guards effectively as research assistants. It reveals how disturbed the Prisoners were when Zimbardo told them they could not leave the study. It raises profound intellectual, moral and even legal questions about what went on in that Stanford basement in the summer of 1971.&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;The most thorough analysis of the archive, by French author Thibault Le Texier is labelled &lt;em&gt;Histoire D’Un Mensonge&lt;/em&gt; – which translates to “History of a Lie”. However, even if Zimbardo’s account of what happened in the SPE is, at best, economical with the truth, that still leaves the question of why some of his Guards turned brutal.&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;We have had the same burning question since we tried to replicate aspects of the SPE in the &lt;a href=&quot;http://www.bbcprisonstudy.org&quot;&gt;BBC Prison Experiment&lt;/a&gt; some 20 years ago and found that participants were most reluctant to adopt their assigned roles.&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;There are clearly many reasons why a research finding might fail to replicate. But we had always suspected that Zimbardo’s unusual leadership role in the SPE was central to understanding the results of his study. And in this respect, one item in the archive – a recorded meeting between Zimbardo’s Warden, David Jaffe and a ‘reluctant’ Guard, John Mark – proved to be conclusive, offering hard evidence that our suscipions were right.&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;You can &lt;a href=&quot;https://purl.stanford.edu/wn708sg0050&quot;&gt;listen to this interview&lt;/a&gt; – start after 8.38 minutes. The tape shows the leadership of the experimenters was at the core of the SPE. More specifically, it provides evidence of &lt;em&gt;identity leadership.&lt;/em&gt; That is, Zimbardo and his colleagues sought to ensure conformity amongst the Guards by making brutality appear necessary for the achievement of worthy ingroup goals, namely science that would make the case for prison reform. &lt;em&gt;“What we want to do”, &lt;/em&gt;Zimbardo’s Warden told the Guard,&lt;em&gt; “is be able to go to the world with what we’ve done &lt;/em&gt;&lt;em&gt;and say “Now look, this is what happens when you have Guards who behave this way … But in order to say that we have to have Guards who behave that way.&lt;/em&gt;&lt;em&gt;”&lt;/em&gt;   &lt;/p&gt;&lt;p align=&quot;left&quot;&gt;But you don’t need to take our word for it – we strongly advise that you listen to the tape and decide for yourself whether this supports Zimbardo’s argument that Guards slipped naturally into role, or whether it supports our argument that leadership was necessary to turn the Guards into brutes.&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;We suspect that, after hearing the tape, you will never think about the SPE in the same way again. We suspect that you will also see how important it is for the experimenters to acknowledge their role as the leaders of a toxic social system. But just to make sure, we are currently &lt;a href=&quot;https://psyarxiv.com/b7crx&quot;&gt;writing up our analysis of the Jaffe-Mark meeting for publication in an academic journal&lt;/a&gt; to highlight the importance of an identity leadership analysis of the SPE.&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;The tape joins other evidence which indicates that the experimenters intervened to shape the study more than they acknowledged. For instance, there was video evidence of Zimbardo addressing his Guards before the study started. Then there were letters, magazine articles, interviews with past participants and Zimbardo’s associates (notably his ‘consultant’ Carlo Prescott) which made stronger claims about intervention. But they were little more than hearsay, rumour. Until now, these seemed of inadequate weight to overturn one of the ‘monuments’ of our discipline. Zimbardo could swat them away like gnats on the back of an elephant. But the new evidence from the archives will finally allow readers to listen to the evidence themselves, rather than rely on the experimenter’s story.&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;How has Zimbardo responded this time? &lt;a href=&quot;http://www.prisonexp.org/response&quot;&gt;By reasserting that&lt;/a&gt; 'none of these criticisms present any substantial evidence that alters the SPE’s conclusion'. &lt;span&gt;And at the same time that he berates his critics (without engaging with their arguments), he reworks his story to now say that, yes, Guards were told to be tough, but not &lt;/span&gt;&lt;em&gt;how&lt;/em&gt;&lt;span&gt; to be tough. For Zimbardo, then, this is all just fake news. Except that it plainly isn’t. &lt;/span&gt;&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;This might have worked in the past, but now the necessary evidence is available to anyone who wishes to spend a few minutes listening to it. There is no longer any excuse for repeating a story which is so deeply flawed. We need to get busy rewriting our texts and revising our lectures.&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;&lt;em&gt;Stephen Reicher (University of St Andrews)&lt;/em&gt;&lt;br/&gt;&lt;em&gt;S. Alexander Haslam (University of Queensland)&lt;/em&gt;&lt;br/&gt;&lt;em&gt;Jay Van Bavel (New York University) &lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further reading&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Griggs, R.A. (2014). Coverage of the Stanford Prison Experiment in introductory psychology textbooks. &lt;em&gt;Teaching of Psychology&lt;/em&gt;, &lt;em&gt;41&lt;/em&gt;, 195-203.&lt;/p&gt;</description>
<pubDate>Mon, 20 Aug 2018 00:15:15 +0000</pubDate>
<dc:creator>hecubus</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://thepsychologist.bps.org.uk/time-change-story</dc:identifier>
</item>
<item>
<title>The scientists who starved to death surrounded by food</title>
<link>https://www.amusingplanet.com/2018/08/the-scientists-who-starved-to-death.html</link>
<guid isPermaLink="true" >https://www.amusingplanet.com/2018/08/the-scientists-who-starved-to-death.html</guid>
<description>&lt;div id=&quot;LS-google-ad&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-format=&quot;fluid&quot; data-ad-layout=&quot;in-article&quot; data-ad-client=&quot;ca-pub-4049870445958322&quot; data-ad-slot=&quot;5807557740&quot;/&gt; &lt;/div&gt;
&lt;p&gt;The 900-day Siege of Leningrad during the Second World War was perhaps one of the most gruesome sieges in modern history. Hitler’s diabolic plan was to choke all food supply routes to the city of two million residents and let nature do the dirty work.&lt;/p&gt;
&lt;p&gt;“Leningrad must die of starvation”, Hitler declared in a speech at Munich on November 8, 1941.&lt;/p&gt;
&lt;p&gt;The following winter, hundreds of thousands starved to death. People tried in vain to stay alive by eating sawdust. Others froze to death in the streets while trying to walk a few kilometers to food distribution kiosks in −30 °C weather.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;vavilov-seed-bank-6&quot; border=&quot;0&quot; height=&quot;668&quot; src=&quot;https://lh3.googleusercontent.com/-AicGt8E4Ayw/W3RyDyAzu4I/AAAAAAABYDY/B1iFaOMUu-seXqtaZ5kzTnqWbRjeGObyACHMYCw/vavilov-seed-bank-62?imgmax=1600&quot; title=&quot;vavilov-seed-bank-6&quot; width=&quot;1000&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Inside the Vavilov Institute of Plant Industry, St. Petesburg. Photo credit: &lt;a href=&quot;https://www.shutterstock.com/image-photo/st-petersburg-russia-22-october-2014-515631583?src=ZZlo-9CwPLlxp23FsUDKzg-1-8&quot; rel=&quot;nofollow&quot;&gt;Akimov Igor / Shutterstock.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As the invading German army poured into the city looting and destroying anything of value, a group of Russian botanists holed up inside the vault of the Vavilov Institute of Plant Industry with a precious collection of seeds and edible plants. This collection, containing seeds from nearly 200,000 varieties of plants of which about a quarter was edible, constituted one of the world’s largest repositories of the genetic diversity of food crops. Among them were plenty of rice, wheat, corn, beans and potatoes, enough to sustain the botanists and see them through the worst days of the siege.&lt;/p&gt;
&lt;p&gt;But the scientists hadn’t barricaded themselves in the vault with food grains to save their lives, but rather to protect these seeds from the Nazis as well as from the starving people plundering through the streets in search for anything to eat.&lt;/p&gt;
&lt;p&gt;The collection filled 16 rooms, in which no one was allowed to remain alone. Workers guarded the storage in shifts all round the clock, numb with cold and emaciated from hunger. As the siege dragged out, one by one these heroic men started dying of hunger, but not a single grain was eaten. In January 1942, Alexander Stchukin, a peanut specialist, &lt;a href=&quot;http://articles.sun-sentinel.com/1992-05-13/news/9202080144_1_vavilov-institute-food-crops-leningrad&quot;&gt;died at his writing table&lt;/a&gt;. Botanist Dmitri Ivanov also died of starvation while surrounded by several thousand packs of rice that he was guarding. By the end of the siege in the Spring of 1944, nine of them had starved to death watching over all that food. Many of the crops that we eat today came from cross-breeding with varieties the scientists saved from destruction.&lt;/p&gt;
&lt;h3&gt;Nikolai Vavilov&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&quot;nikolai-vavilov&quot; border=&quot;0&quot; height=&quot;600&quot; src=&quot;https://lh3.googleusercontent.com/-_nh8bKXgrVI/W3RyFBF5ojI/AAAAAAABYDc/B4vmmsI4x2Yo3mSV4vFS0IgVicB41jv_QCHMYCw/nikolai-vavilov6?imgmax=1600&quot; title=&quot;nikolai-vavilov&quot; width=&quot;485&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Nikolai Vavilov in 1933&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The seed bank that the Soviet scientists died protecting was one of the first of its kind. It was established in 1926 by Russia’s most prominent botanist and geneticist and “&lt;a href=&quot;https://www.splendidtable.org/story/how-nikolay-vavilov-the-seed-collector-who-tried-to-end-famine-died-of-starvation&quot;&gt;the world's greatest plant explorer&lt;/a&gt;”, Nikolai Vavilov, who is said to have collected more seeds, tubers and fruits from around the world than any person in human history.&lt;/p&gt;
&lt;p&gt;Nikolai Vavilov was among the first scientists to foresee the disappearance of plant diversity, and recognize the potentially catastrophic impact that was to have on our food production. Having grown up in a poor rural village plagued by recurring crop failures and food rationing, Vavilov was obsessed from an early age with ending famine in both his native Russia and the world.&lt;/p&gt;
&lt;p&gt;In the early part of the 20th century, in between the two World Wars, Vavilov travelled far and wide across five continents, visiting 64 countries in total, collecting varieties of plants and food crop specimens. He taught himself 15 languages so that he could speak with native farmers. After nearly a decade of travels and hundreds of trips later, Vavilov founded the Pavlovsk Experimental Station as part of the Institute of Plant Industry situated in Pavlovsk in Leningrad in what is now St. Petersburg.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;vavilov-seed-bank-3&quot; border=&quot;0&quot; height=&quot;666&quot; src=&quot;https://lh3.googleusercontent.com/-LodEAZrp5ms/W3RyGlsqG0I/AAAAAAABYDg/ZbYSzrTtLuwNTVxnBa6JdSMcRX5NLfiTACHMYCw/vavilov-seed-bank-36?imgmax=1600&quot; title=&quot;vavilov-seed-bank-3&quot; width=&quot;1000&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Specimens collected by Nikolai Vavilov displayed at the Vavilov Institute of Plant Industry. Photo credit:&lt;/em&gt; &lt;a href=&quot;https://www.flickr.com/photos/clobrda/4668960846/&quot; rel=&quot;nofollow&quot;&gt;&lt;em&gt;Petr Kosina/Flickr&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While Vavilov was collecting seeds and building a seed bank to preserve food diversity for future generations, a young and previously unknown agronomist named Trofim Lysenko was being heralded by the Soviet propaganda machine as a genius who developed a new, revolutionary agricultural technique that would save the nation from hunger. In reality, Lysenko's technique which involves subjecting the crops to intense cold in order to force them to flower in the spring, has been known since the 1850s and is known as vernalization. It’s also known that vernalization yielded only marginally greater food production and not three or four times as claimed by Lysenko. Lysenko also claimed that the vernalized state could be inherited by the offspring.&lt;/p&gt;
&lt;p&gt;A political opportunist, Lysenko quickly gained the favor of Joseph Stalin. With the support of the Soviet media, which overstated his successes and suppressed his failures, Lysenko began fabricating experimental data to support his theories and denounced anyone who tried to oppose his methods. From 1934 to 1940, under Lysenko's admonitions and with Stalin's approval, over 3,000 biologists and geneticists were imprisoned, fired or executed for attempting to oppose Lysenko.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;ilysenk001p1&quot; border=&quot;0&quot; height=&quot;450&quot; src=&quot;https://lh3.googleusercontent.com/-Cf9jWZ55lYg/W3RyIXQ5JXI/AAAAAAABYDk/kmar3eAq2eMXRJT7sJMBJwdQQgBlyMe3wCHMYCw/trofim-lysenko6?imgmax=1600&quot; title=&quot;ilysenk001p1&quot; width=&quot;300&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Trofim Lysenko&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In August 1940, Vavilov was collecting seeds in the borderlands of Russia and Eastern Europe, when a car with KGB agents came up and took him away. He was sentenced to twenty years’ imprisonment in a Soviet gulag. After over a year-and-a-half of eating frozen cabbage and moldy flour, Nikolai Vavilov—the man who taught us about agricultural diversity and plant origins, and who spent fifty years of his life trying to end famine— died of starvation.&lt;/p&gt;
&lt;p&gt;“Until Vavilov’s map of the centers of plant diversity, no scientist had physically experienced and intellectually grasped the patterns of biological diversity across the face of the entire earth,” writes Gary Paul Nabhan, author of &lt;em&gt;Where Our Food Comes From: Retracing Nikolay Vavilov’s Quest to End Famine&lt;/em&gt;. “Because of his capacity to travel by train, boat, aeroplane, automobile, and mule, Vavilov not only witnessed natural and cultural landscapes which no other scientist had set foot in, but he also absorbed them into a theory of biogeography that remains with us today.”&lt;/p&gt;
&lt;p&gt;The Pavlovsk Experimental Station now has over 325,000 samples of seeds, including the world’s largest collection of fruits and berries. These include almost a thousand varieties of strawberries, about 600 types of apples, and more than a hundred varieties each of gooseberries, cherries, plums, red currants, and raspberries. Roughly 90 percent of this collection are found in no other scientific collections in the world. Today, it is just one of &lt;a href=&quot;https://www.nationalgeographic.com/magazine/2011/07/food-ark/&quot;&gt;1,400 seed banks&lt;/a&gt; around the world today, the most ambitious of which is the &lt;a href=&quot;http://www.amusingplanet.com/2013/10/preparing-for-apocalypse-svalbard.html&quot;&gt;Svalbard Global Seed Vault&lt;/a&gt; located on the Norwegian island of Spitsbergen just 700 miles from the North Pole.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;vavilov-mugshots&quot; border=&quot;0&quot; height=&quot;600&quot; src=&quot;https://lh3.googleusercontent.com/-o7vfbzDPow0/W3RyJ4-oVyI/AAAAAAABYDo/aNqFC_1o8KY1C0T-cXkEZj1zVCMgwsT4ACHMYCw/vavilov-mugshots6?imgmax=1600&quot; title=&quot;vavilov-mugshots&quot; width=&quot;848&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Nikolai Vavilov's mugshot as a prisoner. Several deep scars on his right cheek indicate the severe beatings sustained by the scientist in prison.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;vavilov-seed-bank-4&quot; border=&quot;0&quot; height=&quot;666&quot; src=&quot;https://lh3.googleusercontent.com/-BBTNCgZpSB8/W3RyLn2x3nI/AAAAAAABYDs/CsmvbbnaBtMaSSc9XTdp7RfYjtMUOPdoACHMYCw/vavilov-seed-bank-42?imgmax=1600&quot; title=&quot;vavilov-seed-bank-4&quot; width=&quot;1000&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Specimens collected by Nikolai Vavilov displayed at the Vavilov Institute of Plant Industry. Photo credit: &lt;a href=&quot;https://www.flickr.com/photos/clobrda/4668962336/&quot; rel=&quot;nofollow&quot;&gt;Petr Kosina/Flickr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;vavilov-seed-bank-5&quot; border=&quot;0&quot; height=&quot;750&quot; src=&quot;https://lh3.googleusercontent.com/-IW9uDzteoEk/W3RyNKHs7wI/AAAAAAABYDw/KlNVHimelAEIPuyVnviv249Y6Cry5wC4wCHMYCw/vavilov-seed-bank-52?imgmax=1600&quot; title=&quot;vavilov-seed-bank-5&quot; width=&quot;1000&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The seed collection at Vavilov Institute of Plant Industry in 2002. Photo credit: &lt;a href=&quot;https://www.flickr.com/photos/dag_endresen/4998618021/&quot; rel=&quot;nofollow&quot;&gt;Dag Terje Filip Endresen/Flickr&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;ad-below-post&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-client=&quot;ca-pub-4049870445958322&quot; data-ad-slot=&quot;9329664549&quot;/&gt; &lt;/div&gt;
</description>
<pubDate>Sun, 19 Aug 2018 21:33:01 +0000</pubDate>
<dc:creator>classichasclass</dc:creator>
<og:url>https://www.amusingplanet.com/2018/08/the-scientists-who-starved-to-death.html</og:url>
<og:title>The Scientists Who Starved to Death Surrounded By Food</og:title>
<og:description>The 900-day Siege of Leningrad during the Second World War was perhaps one of the most gruesome sieges in modern history. Hitler’s diabolic ...</og:description>
<og:image>https://lh3.googleusercontent.com/-AicGt8E4Ayw/W3RyDyAzu4I/AAAAAAABYDY/B1iFaOMUu-seXqtaZ5kzTnqWbRjeGObyACHMYCw/w1200-h630-p-k-no-nu/vavilov-seed-bank-62?imgmax=1600</og:image>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.amusingplanet.com/2018/08/the-scientists-who-starved-to-death.html</dc:identifier>
</item>
<item>
<title>Headless Chrome support in Cloud Functions and App Engine</title>
<link>https://cloud.google.com/blog/products/gcp/introducing-headless-chrome-support-in-cloud-functions-and-app-engine</link>
<guid isPermaLink="true" >https://cloud.google.com/blog/products/gcp/introducing-headless-chrome-support-in-cloud-functions-and-app-engine</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/blog/products/gcp/now-you-can-deploy-your-node-js-app-to-app-engine-standard-environment&quot;&gt;Earlier this year&lt;/a&gt;, Google Cloud announced support for the &lt;a href=&quot;https://cloud.google.com/appengine/docs/standard/nodejs/&quot;&gt;Node.js 8 runtime&lt;/a&gt; in the App Engine standard environment. Since then, we've been excited to see how web developers have been using the platform.&lt;/p&gt;
&lt;p&gt;One of the more interesting use cases that was unlocked with the new Node.js runtime for App Engine is the ability to run &lt;a href=&quot;https://developers.google.com/web/updates/2017/04/headless-chrome&quot;&gt;headless Chrome&lt;/a&gt; without having to do any setup or configuration. Previously, developers would need to run xvfb and X11, create a complicated Dockerfile, or configure OS dependencies themselves to get Chrome working on GCP—but not anymore.&lt;/p&gt;
&lt;p&gt;Now, we're pleased to announce that the &lt;a href=&quot;https://cloud.google.com/functions/&quot;&gt;Google Cloud Functions&lt;/a&gt; and &lt;a href=&quot;https://firebase.google.com/docs/functions/&quot;&gt;Cloud Functions for Firebase&lt;/a&gt; Node.js 8 runtimes have also been upgraded with the OS packages required to run headless Chrome. This means that you can now author Cloud Functions that use headless Chrome---and utilize all the features of a web browser in a fully serverless environment. Headless Chrome lets you take advantage of the modern web platform features from Chromium and the Blink rendering engine too.&lt;/p&gt;
&lt;p&gt;We have seen developers using headless Chrome for a variety of use cases:&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;taking screenshots of web pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;server-side rendering&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;generating PDFs&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;implementing web crawlers&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;end-to-end performance and UI testing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sun, 19 Aug 2018 18:50:50 +0000</pubDate>
<dc:creator>idoco</dc:creator>
<og:type>website</og:type>
<og:title>Introducing headless Chrome support in Cloud Functions and App Engine | Google Cloud Blog</og:title>
<og:description>We're pleased to announce that the Google Cloud Functions and Cloud Functions for Firebase Node.js 8 runtimes have also been upgraded with the OS packages required to run headless Chrome.</og:description>
<og:image>https://storage.googleapis.com/gweb-cloudblog-publish/images/592-GCP-Headless-chrome-Logos-r2.max-2000x2000.png</og:image>
<og:url>https://cloud.google.com/blog/products/gcp/introducing-headless-chrome-support-in-cloud-functions-and-app-engine/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://cloud.google.com/blog/products/gcp/introducing-headless-chrome-support-in-cloud-functions-and-app-engine</dc:identifier>
</item>
<item>
<title>Insurance copays are higher than the cost of the drug about 25% of the time</title>
<link>https://www.pbs.org/newshour/health/why-a-patient-paid-a-285-copay-for-a-40-drug</link>
<guid isPermaLink="true" >https://www.pbs.org/newshour/health/why-a-patient-paid-a-285-copay-for-a-40-drug</guid>
<description>
&lt;p&gt;Two years ago Gretchen Liu, 78, had a transient ischemic attack — which experts sometimes call a “mini stroke” — while on a trip to China. After she recovered and returned home to San Francisco, her doctor prescribed a generic medication called telmisartan to help manage her blood pressure.&lt;/p&gt;
&lt;p&gt;Liu and her husband Z. Ming Ma, a retired physicist, are insured through an Anthem Medicare plan. Ma ordered the telmisartan through Express Scripts, the company that manages pharmacy benefits for Anthem and also provides a mail-order service.&lt;/p&gt;
&lt;p&gt;The copay for a 90-day supply was $285, which seemed high to Ma.&lt;/p&gt;
&lt;p&gt;“I couldn’t understand it — it’s a generic,” said Ma. “But it was a serious situation, so I just got it.”&lt;/p&gt;
&lt;p&gt;A month later, Ma and his wife were about to leave on another trip, and Ma needed to stock up on her medication. Because 90 days hadn’t yet passed, Anthem wouldn’t cover it. So during a trip to his local Costco, Ma asked the pharmacist how much it would cost if he got the prescription there and paid out of pocket.&lt;/p&gt;
&lt;p&gt;The pharmacist told him it would cost about $40.&lt;/p&gt;
&lt;p&gt;“I was very shocked,” said Ma. “I had no idea if I asked to pay cash, they’d give me a different price.”&lt;/p&gt;
&lt;aside class=&quot;pullquote&quot;&gt;
&lt;div class=&quot;pullquote__quote&quot;&gt;Insurance copays are higher than the cost of the drug about 25 percent of the time, according to a study published in March by the University of Southern California’s Schaeffer Center for Health Policy and Economics.&lt;/div&gt;
&lt;/aside&gt;&lt;p&gt;Ma’s experience of finding a copay higher than the cost of the drug wasn’t that unusual. Insurance copays are higher than the cost of the drug about 25 percent of the time, according to a &lt;a href=&quot;https://healthpolicy.usc.edu/wp-content/uploads/2018/03/2018.03_Overpaying20for20Prescription20Drugs_White20Paper_v.1-2.pdf&quot;&gt;study&lt;/a&gt; published in March by the University of Southern California’s Schaeffer Center for Health Policy and Economics.&lt;/p&gt;
&lt;p&gt;USC researchers analyzed 9.5 million prescriptions filled during the first half of 2013. They compared the copay amount to what the pharmacy was reimbursed for the medication and found in the cases where the copay was higher, the overpayments averaged $7.69, totaling $135 million that year.&lt;/p&gt;
&lt;p&gt;USC economist Karen Van Nuys, a lead author of the study, had her own story of overpayment. She discovered she could buy a one-year supply of her generic heart medication for $35 out of pocket instead of $120 using her health insurance.&lt;/p&gt;
&lt;p&gt;Van Nuys said her experience, and media reports she had read about the practice, spurred her and her colleagues to conduct the study. She had also heard industry lobbyists refer to the practice as “outlier.”&lt;/p&gt;
&lt;p&gt;“I wouldn’t call one in four an ‘outlier practice,’” Van Nuys said.&lt;/p&gt;
&lt;p&gt;“You have insurance because your belief is, you’re paying premiums, so when you need care, a large fraction of that cost is going to be borne by your insurance company,” said Geoffrey Joyce, a USC economist who co-authored the study with Van Nuys. “The whole notion that you are paying more for the drug with insurance is just mind boggling, to think that they’re doing this and getting away with it.”&lt;/p&gt;
&lt;div id=&quot;attachment_271419&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img src=&quot;https://d3i6fh83elv35t.cloudfront.net/static/2018/08/pbm_copay-1024x574.png&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;574&quot; class=&quot;size-large wp-image-271419&quot; srcset=&quot;https://d3i6fh83elv35t.cloudfront.net/static/2018/08/pbm_copay-1024x574.png 1024w, https://d3i6fh83elv35t.cloudfront.net/static/2018/08/pbm_copay-300x168.png 300w, https://d3i6fh83elv35t.cloudfront.net/static/2018/08/pbm_copay-768x431.png 768w, https://d3i6fh83elv35t.cloudfront.net/static/2018/08/pbm_copay-425x238.png 425w, https://d3i6fh83elv35t.cloudfront.net/static/2018/08/pbm_copay-1200x673.png 1200w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Graphic by Lisa Overton&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Joyce told PBS NewsHour Weekend the inflated copays could be explained by the role in the pharmaceutical supply chain played by pharmacy benefit managers, or PBMs. He explained that insurers outsource the management of prescription drug benefits to pharmacy benefit managers, which determine what drugs will be covered by a health insurance plan, and what the copay will be. “PBMs run the show,” said Joyce.&lt;/p&gt;
&lt;p&gt;In the case of Express Scripts, the company manages pharmacy benefits for insurers and also provides a prescription mail-delivery service.&lt;/p&gt;
&lt;p&gt;Express Scripts spokesperson Brian Henry confirmed to PBS NewsHour Weekend the $285 copay that Ma paid in 2016 for his wife’s telmisartan was correct, but didn’t provide an explanation as to why it was so much higher than the $40 Costco price. Henry said that big retailers like Costco sometimes offer deep discounts on drugs through low-cost generics programs.&lt;/p&gt;
&lt;p&gt;USC’s Geoffrey Joyce said it is possible that Costco negotiated a better deal on telmisartan from the drug’s maker than Express Scripts did, and thus could sell it for cheaper. But, he said, the price difference, $285 versus $40, was too large for this to be the likely explanation.&lt;/p&gt;
&lt;p&gt;Joyce said it is possible another set of behind-the-scenes negotiations between the pharmacy benefit managers and drug makers played a role. He explained that drug manufacturers will make payments to pharmacy benefit managers called “rebates.”&lt;/p&gt;
&lt;p&gt;Rebates help determine where a drug will be placed on a health plan’s formulary. Formularies often have “tiers” that determine what the copay will be, with a “tier one” drug often being the cheapest, and the higher tiers more expensive.&lt;/p&gt;
&lt;p&gt;Pharmacy benefit managers usually take a cut of the rebate and then pass them on to the insurer. Insurers say they use use the money to lower costs for patients.&lt;/p&gt;
&lt;p&gt;Joy said a big rebate to a pharmacy benefit manager can mean placement on a low tier with a low copayment, which helps drives more patients to take that drug.&lt;/p&gt;
&lt;p&gt;In the case of Ma’s telmisartan, Express Scripts confirmed to PBS NewsHour Weekend that the generic drug was designated a “nonpreferred brand,” which put it on the plan’s highest tier with the highest copay.&lt;/p&gt;
&lt;p&gt;Joyce said sometimes pharmacy benefit managers try to push customers to take another medication for which it had negotiated a bigger rebate. “It’s financially in their benefit that you take the other drug,” said Joyce. “But that’s of little consolation to the person who just goes to the pharmacy with a prescription that their physician gave them.”&lt;/p&gt;
&lt;p&gt;But Joyce said the pharmacy benefit managers also profit when collecting copays that are higher than the cost of the drug.&lt;/p&gt;
&lt;p&gt;In recent years, the industry has taken a lot of heat from the media and elected officials over a controversial practice called “clawbacks.” This happens when a pharmacist collects a copay at the cash register that’s higher than the cost of the drug, and the pharmacy benefit manager takes most of the difference.&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;View Examples of clawbacks on Scribd&quot; href=&quot;https://www.scribd.com/document/386564791/Examples-of-clawbacks#from_embed&quot;&gt;Examples of clawbacks&lt;/a&gt; by &lt;a title=&quot;View PBS NewsHour's profile on Scribd&quot; href=&quot;https://www.scribd.com/user/68776001/PBS-NewsHour#from_embed&quot;&gt;PBS NewsHour&lt;/a&gt; on Scribd&lt;/p&gt;

&lt;p&gt;The three largest pharmacy benefit managers – Express Scripts, CVS Caremark, and OptumRx – all told PBS NewsHour Weekend they do not engage in clawbacks.&lt;/p&gt;
&lt;p&gt;But Howard Jacobson, a pharmacist at Rockville Centre Pharmacy in Long Island, NY, showed PBS NewsHour Weekend several recent examples of clawbacks. In one instance, Howardson acquired a dose of the generic diabetes Metformin for $1.61. He said if a patient paid out-of-pocket, he likely would sell if for $4. But in a recent transaction, the pharmacy benefit manager told Jacobson to collect a $10.84 copay from the patient, and it took back $8.91.&lt;/p&gt;
&lt;p&gt;In the case of Z. Ming Ma and his wife Gretchen Liu, there was no pharmacist involved, because they purchased the medication directly from Express Scripts.&lt;/p&gt;
&lt;p&gt;Express Scripts’ Brian Henry reiterated to PBS NewsHour Weekend that the company does not engage in clawbacks and opposes the practice. And he also blamed the health insurer, Anthem, for Ma’s high copay. “Anthem has its own Pharmacy and Therapeutics committee that evaluates placement of drugs on the formulary based on their own clinical and cost review – thus setting their own formulary and pricing,” Henry said in an email.&lt;/p&gt;
&lt;p&gt;But Lori McLaughlin, a spokesperson for Anthem, pointed the finger back at Express Scripts. “Anthem currently contracts with Express Scripts for pharmacy benefit manager services and under that agreement Express Scripts provides the drug pricing,” she said in a statement. “Anthem is committed to ensuring consumers have expanded access to high-quality, affordable health care which includes access to prescription drugs at a reasonable price.”&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.law360.com/articles/774085&quot;&gt;McLaughlin also pointed&lt;/a&gt; to a lawsuit filed in March 2016 by Anthem against Express Scripts, for, she said, “breach of its obligation to provide competitive pharmacy pricing.”&lt;/p&gt;
&lt;p&gt;As for Express Scripts’ contention that it doesn’t engage in clawbacks, USC’s Karen Van Nuys said it’s a matter of semantics. “Whenever the copay is higher than the cash price, and the difference isn’t reimbursed to the patient, someone else must be pocketing the difference,” Van Nuys said. “Maybe it isn’t technically called a clawback, but the principle is the same.”&lt;/p&gt;
&lt;p&gt;So what’s a patient to do? Websites like GoodRx and WellRx can help consumers find the best prices at local pharmacies. They provide coupons and savings cards for certain drugs as well as out-of-pocket price information, which could be less than a copay.&lt;/p&gt;
&lt;p&gt;It’s not always better to pay out-of-pocket, even if it’s cheaper. Patients need to look at the terms of their insurance plans and do the math.If a patient has a high deductible, it might make more sense in the long-run to pay the higher price and use up the deductible so insurance kicks in sooner.&lt;/p&gt;
&lt;p&gt;Z. Ming Ma said he does find the Express Scripts home delivery service convenient. But he wasn’t happy about the price of his wife’s medication, and is glad he found another way to buy it.&lt;/p&gt;
&lt;p&gt;“You have no choice, you can’t bargain,” he said. “I knew I wasn’t going to win.”&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This story has been updated to reflect that Gretchen Liu is 78 years old.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 19 Aug 2018 17:12:40 +0000</pubDate>
<dc:creator>jabo</dc:creator>
<og:type>website</og:type>
<og:title>Why a patient paid a $285 copay for a $40 drug</og:title>
<og:description>Insurance copays are higher than the cost of the drug about 25 percent of the time, according to a study published in March by the University of Southern California’s Schaeffer Center for Health Policy and Economics.</og:description>
<og:image>https://d3i6fh83elv35t.cloudfront.net/static/2017/10/GettyImages-683740159-1024x681.jpg</og:image>
<og:url>https://www.pbs.org/newshour/health/why-a-patient-paid-a-285-copay-for-a-40-drug</og:url>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.pbs.org/newshour/health/why-a-patient-paid-a-285-copay-for-a-40-drug</dc:identifier>
</item>
<item>
<title>Don’t Do This in Production</title>
<link>https://stephenmann.io/post/dont-do-this-in-production/</link>
<guid isPermaLink="true" >https://stephenmann.io/post/dont-do-this-in-production/</guid>
<description>&lt;p&gt;Around March of 2017, I received a call asking for a code review on a product about to be launched. This company had issues with memory leaks, spontaneous crashing, slow loading, CPU spiking, and had to release in a couple of weeks. You might have heard this story before, just not from me, and not about this company. It’s surprisingly common.&lt;/p&gt;&lt;p&gt;We got together on the weekend and started looking through the code together. It took about half a day to discover the source of the known problems, and another half day to write-up a document for their engineering team to fix them. The launch succeeded, but it made me wonder how the product ever got to that place.&lt;/p&gt;
&lt;p&gt;When I chatted with the developers, they seemed like intelligent people. The only clear issue was lack of experience, which they could really only solve by continuing to build and grow. I’ve run into that before. It’s common, and I think it’s healthy – well, most of the time.&lt;/p&gt;
&lt;p&gt;In this case, however, it had a nefarious twist: &lt;strong&gt;all of these developers lacked experience&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The department that built the product had recently come into existence, and they hired a team of developers without having a technical person on staff to vet them. It’s difficult enough for a technical person to vet a developer – I can’t even imagine vetting a candidate without having a technical background. They hired the first developer, and he vetted the second developer, and so on until they had a development team.&lt;/p&gt;
&lt;p&gt;If you’re lucky enough for your first developer to have significant experience and a desire to mentor, then you’re golden. If you’re unlucky, however – and it’s very easy to be unlucky at something like this – then you may end up with a very fast moving team that builds very fragile software.&lt;/p&gt;
&lt;p&gt;“Move fast and break things,” they said. It turns out that’s a pretty bad idea when your business relies on a small number of large customers. Broken products tend to scare them off, which in turn tanks your business. There’s a lot to be said for building things that work, but “move slowly and steadily towards a goal” just doesn’t have the same ring.&lt;/p&gt;
&lt;p&gt;In reality, there’s a balance between moving fast and and moving slow. It’s difficult to communicate that balance because every type of product demands a different balance. I suppose that intuition comes from experience, which is a terrible answer for someone trying to learn.&lt;/p&gt;
&lt;p&gt;What’s a new developer to do?&lt;/p&gt;
&lt;p&gt;The natural tendency seems to be asking the internet. It turns out that this is &lt;strong&gt;incredibly effective&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It’s also &lt;strong&gt;incredibly dangerous&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This company continued to work with me after that product launch. I reviewed a significant amount of code, helped mentor their developers, and built new projects for them. Everything went swimmingly.&lt;/p&gt;
&lt;p&gt;One day, I ran into a section of code that triggered my spidey sense. I could have sworn that I had seen it before. Sure enough, after pasting a line into a search engine, I found the exact section of code in a blog post. Naturally I read the whole thing, right up to the line that said, “&lt;strong&gt;Don’t do this in production.&lt;/strong&gt;“&lt;/p&gt;
&lt;p&gt;Yet here it was, tipping its hat at me from the front lines of a production codebase.&lt;/p&gt;
&lt;p&gt;It didn’t take long to find many sections of code from similar blog posts. Almost all of the blog posts either wrote a disclaimer or should have written one. They all solved one small piece of a problem, but took many liberties in their solution to make it simpler to read. It’s understandable. Most readers appreciate brevity when learning a concept.&lt;/p&gt;
&lt;p&gt;The code from these blog posts had spread through the codebase like a disease, scattering issues here and there without any rhyme or reason. And there wasn’t any obvious cure other than to read everything manually and fix issues as I went along. Without unit tests or automated deployments, this took &lt;em&gt;almost a year&lt;/em&gt;. I’m almost certain the cost of fixing the code exceeded the margin on revenue due to writing it in the first place.&lt;/p&gt;
&lt;p&gt;But what other option did these developers have? They had to deliver something, and they had never released a production application before. So they did what any sensible person would try to do, and they learned on the job.&lt;/p&gt;
&lt;p&gt;Production systems can fail in an incredible number of ways. Without having experienced or read about these failures, it’s difficult to have an intuition about how to prevent them or how to solve them. It’s a tall order to ask a new development team to do this, especially without any guidance.&lt;/p&gt;
&lt;p&gt;Before going any further, I want to mention that every person involved in this mess had good intentions. The developers who wrote the code wanted to build a good product and improve themselves. The managers who hired them wanted the same thing. The blog post writers wanted to share useful solutions. Everyone did their best to help one another out, and it’s important to remember that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This wasn’t a problem with people.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I have an overwhelming empathy for developers in this position. They have more information than they will ever need, but it’s completely disorganized. It’s like trying to build a ten piece puzzle, except you have to find the ten pieces within a pile of 10,000,000,000 pieces, all of which are square, and you don’t know what it’s supposed to look like at the end. Good luck.&lt;/p&gt;
&lt;p&gt;If you read this far hoping for an answer, then I’m sorry: I don’t have a simple one. This is a difficult problem to solve. The solution is too large for a single blog post, changes every day, and differs subtly for every project.&lt;/p&gt;
&lt;p&gt;This problem motivated me to start blogging. I’ve been blessed to have learned for almost two decades from incredibly talented mentors, writers, and coworkers. Without the advice from these people, I would still be writing &lt;code&gt;GOTO&lt;/code&gt; statements in QBasic (shudder). It’s time for me to take the ball and run with it.&lt;/p&gt;
&lt;p&gt;I’ll summarize with this:&lt;/p&gt;
&lt;p&gt;This blog is about building production ready applications. It will do this from every aspect: from infrastructure automation, to testing, to design, to debugging, to documentation, to development process, to security. Every post will stand on its own feet, ready to use in the real world – &lt;strong&gt;ready to use in production.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thanks for reading! Please leave a comment if you have one, or a request for a post topic, or any suggestions for how to improve.&lt;/p&gt;
</description>
<pubDate>Sun, 19 Aug 2018 14:53:24 +0000</pubDate>
<dc:creator>pattrn</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://stephenmann.io/post/dont-do-this-in-production/</dc:identifier>
</item>
<item>
<title>Bumper Sticker Computer Science (1985) [pdf]</title>
<link>http://www.bowdoin.edu/~ltoma/teaching/cs340/spring05/coursestuff/Bentley_BumperSticker.pdf</link>
<guid isPermaLink="true" >http://www.bowdoin.edu/~ltoma/teaching/cs340/spring05/coursestuff/Bentley_BumperSticker.pdf</guid>
<description>&lt;a href=&quot;http://www.bowdoin.edu/~ltoma/teaching/cs340/spring05/coursestuff/Bentley_BumperSticker.pdf&quot;&gt;Download PDF&lt;/a&gt;</description>
<pubDate>Sun, 19 Aug 2018 14:53:14 +0000</pubDate>
<dc:creator>kamaal</dc:creator>
<dc:language>en</dc:language>
<dc:format>application/pdf</dc:format>
<dc:identifier>http://www.bowdoin.edu/~ltoma/teaching/cs340/spring05/coursestuff/Bentley_BumperSticker.pdf</dc:identifier>
</item>
<item>
<title>The un-celebrity president: Jimmy Carter shuns riches, lives modestly</title>
<link>https://www.washingtonpost.com/news/national/wp/2018/08/17/feature/the-un-celebrity-president-jimmy-carter-shuns-riches-lives-modestly-in-his-georgia-hometown/</link>
<guid isPermaLink="true" >https://www.washingtonpost.com/news/national/wp/2018/08/17/feature/the-un-celebrity-president-jimmy-carter-shuns-riches-lives-modestly-in-his-georgia-hometown/</guid>
<description>&lt;p&gt;Jimmy Carter finishes his Saturday night dinner, salmon and broccoli casserole on a paper plate, flashes his famous toothy grin and calls playfully to his wife of 72 years, Rosalynn: “C’mon, kid.”&lt;/p&gt;&lt;p&gt;She laughs and takes his hand, and they walk carefully through a neighbor’s kitchen filled with 1976 campaign buttons, photos of world leaders and a couple of unopened cans of Billy Beer, then out the back door, where three Secret Service agents wait.&lt;/p&gt;
&lt;div class=&quot;ent-mobile-header-caption&quot;&gt;Jimmy and Rosalynn Carter walk home with Secret Service agents along West Church Street after having dinner at a friend’s house in Plains, Ga. The former first couple, who were born in Plains, returned to the town after leaving the White House.&lt;/div&gt;
&lt;p&gt;They do this just about every weekend in this tiny town where they were born — he almost 94 years ago, she almost 91. Dinner at their friend Jill Stuckey’s house, with plastic Solo cups of ice water and one glass each of bargain-brand chardonnay, then the half-mile walk home to the ranch house they built in 1961.&lt;/p&gt;

&lt;p&gt;On this south Georgia summer evening, still close to 90 degrees, they dab their faces with a little plastic bottle of No Natz to repel the swirling clouds of tiny bugs. Then they catch each other’s hands again and start walking, the former president in jeans and clunky black shoes, the former first lady using a walking stick for the first time.&lt;/p&gt;
&lt;p&gt;The 39th president of the United States lives modestly, a sharp contrast to his successors, who have left the White House to embrace power of another kind: wealth.&lt;/p&gt;
&lt;p&gt;Even those who didn’t start out rich, including Bill Clinton and Barack Obama, have made tens of millions of dollars on the private-sector opportunities that flow so easily to ex-presidents.&lt;/p&gt;
&lt;div class=&quot;ent-photo-grid ent-photo-grid-3-hero&quot;&gt;&lt;img class=&quot;unprocessed placeholder ent-photo-grid-hero&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter010.jpg&amp;amp;w=1484&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter010.jpg&amp;amp;w=480&quot; data-raw-src=&quot;http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter010.jpg&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter010.jpg&amp;amp;w=60&quot;/&gt;&lt;div class=&quot;ent-photo-grid-small-caption&quot;&gt;The Carters have dinner at their friend Jill Stuckey’s house, where they drank ice water out of plastic Solo cups and each had a glass of bargain-brand chardonnay.&lt;/div&gt;
&lt;img class=&quot;unprocessed placeholder&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter037.jpg&amp;amp;w=1484&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter037.jpg&amp;amp;w=480&quot; data-raw-src=&quot;http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter037.jpg&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter037.jpg&amp;amp;w=60&quot;/&gt;&lt;div class=&quot;ent-photo-grid-small-caption&quot;&gt;Carter enjoys his Saturday night dinner at Stuckey’s house on a paper plate.&lt;/div&gt;
&lt;img class=&quot;unprocessed placeholder&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter012.jpg&amp;amp;w=1484&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter012.jpg&amp;amp;w=480&quot; data-raw-src=&quot;http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter012.jpg&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter012.jpg&amp;amp;w=60&quot;/&gt;&lt;div class=&quot;ent-photo-grid-small-caption&quot;&gt;The Carters hold hands as they walk home. The couple — he, almost 94, and she, almost 91 — have been married 72 years.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ent-photo-grid-big-caption&quot;&gt;TOP: The Carters have dinner at their friend Jill Stuckey’s house, where they drank ice water out of plastic Solo cups and each had a glass of bargain-brand chardonnay. LEFT: Carter enjoys his Saturday night dinner at Stuckey’s house on a paper plate. RIGHT: The Carters hold hands as they walk home. The couple — he, almost 94, and she, almost 91 — have been married 72 years.&lt;/div&gt;
&lt;p&gt;When Carter left the White House after one tumultuous term, trounced by Ronald Reagan in the 1980 election, he returned to Plains, a speck of peanut and cotton farmland that to this day has a nearly 40 percent poverty rate.&lt;/p&gt;
&lt;p&gt;The Democratic former president decided not to join corporate boards or give speeches for big money because, he says, he didn’t want to “capitalize financially on being in the White House.”&lt;/p&gt;
&lt;p&gt;Presidential historian Michael Beschloss said that Gerald Ford, Carter’s predecessor and close friend, was the first to fully take advantage of those high-paid post-presidential opportunities, but that “Carter did the opposite.”&lt;/p&gt;
&lt;p&gt;Since Ford, other former presidents, and sometimes their spouses, routinely earn hundreds of thousands of dollars per speech.&lt;/p&gt;
&lt;p&gt;“I don’t see anything wrong with it; I don’t blame other people for doing it,” Carter says over dinner. “It just never had been my ambition to be rich.”&lt;/p&gt;
&lt;div class=&quot;ent-photo-grid ent-photo-grid-2&quot;&gt;&lt;img class=&quot;unprocessed placeholder&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter033.jpg&amp;amp;w=1484&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter033.jpg&amp;amp;w=480&quot; data-raw-src=&quot;http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter033.jpg&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter033.jpg&amp;amp;w=60&quot;/&gt;&lt;div class=&quot;ent-photo-grid-small-caption&quot;&gt;Carter’s handprints mark a sidewalk on the grounds of the Jimmy Carter Boyhood Farm in Plains.&lt;/div&gt;
&lt;img class=&quot;unprocessed placeholder&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter003.jpg&amp;amp;w=1484&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter003.jpg&amp;amp;w=480&quot; data-raw-src=&quot;http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter003.jpg&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter003.jpg&amp;amp;w=60&quot;/&gt;&lt;div class=&quot;ent-photo-grid-small-caption&quot;&gt;The former president arrives at Stuckey’s house for dinner wearing a casual shirt, jeans and a belt buckle with “JC” on it.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ent-photo-grid-big-caption&quot;&gt;LEFT: Carter’s handprints mark a sidewalk on the grounds of the Jimmy Carter Boyhood Farm in Plains. RIGHT: The former president arrives at Stuckey’s house for dinner wearing a casual shirt, jeans and a belt buckle with “JC” on it.&lt;/div&gt;
&lt;h4&gt;‘He doesn’t like big shots’&lt;/h4&gt;
&lt;p&gt;Carter was 56 when he returned to Plains from Washington. He says his peanut business, held in a blind trust during his presidency, was $1 million in debt, and he was forced to sell.&lt;/p&gt;
&lt;p&gt;“We thought we were going to lose everything,” says Rosalynn, sitting beside him.&lt;/p&gt;
&lt;p&gt;Carter decided that his income would come from writing, and he has written 33 books, about his life and career, his faith, Middle East peace, women’s rights, aging, fishing, woodworking, even a children’s book written with his daughter, Amy Carter, called “The Little Baby Snoogle-Fleejer.”&lt;/p&gt;
&lt;p&gt;With book income and the $210,700 annual pension all former presidents receive, the Carters live comfortably. But his books have never fetched the massive sums commanded by more recent presidents.&lt;/p&gt;
&lt;p&gt;Carter has been an ex-president for 37 years, longer than anyone else in history. His simple lifestyle is increasingly rare in this era of President Trump, a billionaire with gold-plated sinks in his private jet, Manhattan penthouse and Mar-a-Lago estate.&lt;/p&gt;
&lt;p&gt;Carter is the only president in the modern era to return full-time to the house he lived in before he entered politics — a two-bedroom rancher assessed at $167,000, less than the value of the armored Secret Service vehicles parked outside.&lt;/p&gt;
&lt;p&gt;Ex-presidents often fly on private jets, sometimes lent by wealthy friends, but the Carters fly commercial. Stuckey says that on a recent flight from Atlanta to Los Angeles, Carter walked up and down the aisle greeting other passengers and taking selfies.&lt;/p&gt;
&lt;div class=&quot;ent-photo ent-photo-fullwidth&quot;&gt;&lt;img class=&quot;unprocessed placeholder&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter036.jpg&amp;amp;w=988&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter036.jpg&amp;amp;w=800&quot; data-raw-src=&quot;http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter036.jpg&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter036.jpg&amp;amp;w=60&quot;/&gt;&lt;span class=&quot;ent-photo-caption&quot;&gt;Carter is pictured at his house after teaching his 800th Sunday school lesson at Maranatha Baptist Church since leaving the White House. Every other Sunday morning, he teaches at Maranatha, on the edge of town, and people line up the night before to get a seat. The painting at right was done by Carter.&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;“He doesn’t like big shots, and he doesn’t think he’s a big shot,” said Gerald Rafshoon, who was Carter’s White House communications director.&lt;/p&gt;
&lt;p&gt;Carter costs U.S. taxpayers less than any other ex-president, &lt;a href=&quot;https://www.gsa.gov/cdnstatic/GSA%20FY%202019%20CJ.pdf&quot; shape=&quot;rect&quot; title=&quot;www.gsa.gov&quot;&gt;according to the General Services Administration&lt;/a&gt;, with a total bill for him in the current fiscal year of $456,000, covering pensions, an office, staff and other expenses. That’s less than half the $952,000 budgeted for George H.W. Bush; the three other living ex-presidents — Clinton, George W. Bush and Obama — cost taxpayers more than $1 million each per year.&lt;/p&gt;
&lt;p&gt;Carter doesn’t even have federal retirement health benefits because he worked for the government for four years — less than the five years needed to qualify, according to the GSA. He says he receives health benefits through Emory University, where he has taught for 36 years.&lt;/p&gt;
&lt;div class=&quot;ent-photo&quot;&gt;&lt;img class=&quot;unprocessed placeholder&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter022.jpg&amp;amp;w=640&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter022.jpg&amp;amp;w=500&quot; data-raw-src=&quot;http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter022.jpg&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter022.jpg&amp;amp;w=60&quot;/&gt;&lt;span class=&quot;ent-photo-caption&quot;&gt;The Plains general store, once owned by Carter’s Uncle Buddy, sells Carter memorabilia and scoops of peanut butter ice cream in honor of Carter, who was a peanut farmer.&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;The federal government pays for an office for each ex-president. Carter’s, in the Carter Center in Atlanta, is the least expensive, at $115,000 this year. The Carters could have built a more elaborate office with living quarters, but for years they slept on a pullout couch for a week each month. Recently, they had a Murphy bed installed.&lt;/p&gt;
&lt;p&gt;Carter’s office costs a fraction of Obama’s, which is $536,000 a year. Clinton’s costs $518,000, George W. Bush’s is $497,000 and George H.W. Bush’s is $286,000, according to the GSA.&lt;/p&gt;
&lt;p&gt;“I am a great admirer of Harry Truman. He’s my favorite president, and I really try to emulate him,” says Carter, who writes his books in a converted garage in his house. “He set an example I thought was admirable.”&lt;/p&gt;
&lt;p&gt;But although Truman retired to his hometown of Independence, Mo., Beschloss said that even he took up residence in an elegant house previously owned by his prosperous in-laws.&lt;/p&gt;
&lt;p&gt;As Carter spreads a thick layer of butter on a slice of white bread, he is asked whether he thinks, especially with a man who boasts of being a billionaire in the White House, any future ex-president will ever live the way Carter does.&lt;/p&gt;
&lt;p&gt;“I hope so,” he says. “But I don’t know.”&lt;/p&gt;
&lt;div class=&quot;ent-photo ent-photo-fullwidth&quot;&gt;&lt;img class=&quot;unprocessed placeholder&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter035.jpg&amp;amp;w=988&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter035.jpg&amp;amp;w=800&quot; data-raw-src=&quot;http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter035.jpg&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter035.jpg&amp;amp;w=60&quot;/&gt;&lt;span class=&quot;ent-photo-caption&quot;&gt;A customer leaves the Plains Mtd convenience store in Plains. About 700 people live in the town, 150 miles south of Atlanta, in a place that is a living museum to Carter.&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;‘A good ’ol Southern gentleman’&lt;/h4&gt;
&lt;p&gt;Plains is a tiny circle of Georgia farmland, a mile in diameter, with its center at the train depot that served as Carter’s 1976 campaign headquarters. About 700 people live here, 150 miles due south of Atlanta, in a place that is a living museum to Carter.&lt;/p&gt;
&lt;p&gt;The general store, once owned by Carter’s Uncle Buddy, sells Carter memorabilia and scoops of peanut butter ice cream. Carter’s boyhood farm is preserved as it was in the 1930s, with no electricity or running water.&lt;/p&gt;
&lt;p&gt;The Jimmy Carter National Historic Site is essentially the entire town, drawing nearly 70,000 visitors a year and $4 million into the county’s economy.&lt;/p&gt;
&lt;p&gt;Carter has used his post-presidency to support human rights, global health programs and fair elections worldwide through his Carter Center, based in Atlanta. He has helped renovate 4,300 homes in 14 countries for Habitat for Humanity, and with his own hammer and tool belt, he will be working on homes for low-income people in Indiana later this month.&lt;/p&gt;
&lt;p&gt;But it is Plains that defines him.&lt;/p&gt;

&lt;p&gt;After dinner, the Carters step out of Stuckey’s driveway, with two Secret Service agents walking close behind.&lt;/p&gt;
&lt;p&gt;Carter’s gait is a little unsteady these days, three years after a diagnosis of melanoma on his liver and brain. At a 2015 news conference to announce his illness, he seemed to be bidding a stoic farewell, saying he was “perfectly at ease with whatever comes.”&lt;/p&gt;
&lt;p&gt;But now, after radiation and chemotherapy, Carter says he is cancer-free.&lt;/p&gt;
&lt;p&gt;In October, he will become the second president ever to reach 94; George H.W. Bush turned 94 in June. These days, Carter is sharp, funny and reflective.&lt;/p&gt;
&lt;p&gt;The Carters walk every day — often down Church Street, the main drag through Plains, where they have been walking since the 1920s.&lt;/p&gt;
&lt;div class=&quot;ent-photo-grid ent-photo-grid-2&quot;&gt;&lt;img class=&quot;unprocessed placeholder&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter023.jpg&amp;amp;w=1484&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter023.jpg&amp;amp;w=480&quot; data-raw-src=&quot;http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter023.jpg&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter023.jpg&amp;amp;w=60&quot;/&gt;&lt;div class=&quot;ent-photo-grid-small-caption&quot;&gt;Gene Mattson, who owns Plains Mtd, feeds cats outside the convenience store.&lt;/div&gt;
&lt;img class=&quot;unprocessed placeholder&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter027.jpg&amp;amp;w=1484&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter027.jpg&amp;amp;w=480&quot; data-raw-src=&quot;http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter027.jpg&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter027.jpg&amp;amp;w=60&quot;/&gt;&lt;div class=&quot;ent-photo-grid-small-caption&quot;&gt;Veterinarian Frank Pierce sits outside his clinic in Plains.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ent-photo-grid-big-caption&quot;&gt;LEFT: Gene Mattson, who owns Plains Mtd, feeds cats outside the convenience store. RIGHT: Veterinarian Frank Pierce sits outside his clinic in Plains.&lt;/div&gt;
&lt;p&gt;As they cross Walters Street, Carter sees a couple of teenagers on the sidewalk across the street.&lt;/p&gt;
&lt;p&gt;“Hello,” says the former president, with the same big smile that adorns peanut Christmas ornaments in the general store.&lt;/p&gt;
&lt;p&gt;“Hey,” says a girl in a jean skirt, greeting him with a cheerful wave.&lt;/p&gt;
&lt;p&gt;The two 15-year-olds say people in Plains think of the Carters as neighbors and friends, just like anybody else.&lt;/p&gt;
&lt;p&gt;“I grew up in church with him,” says Maya Wynn. “He’s a nice guy, just like a regular person.”&lt;/p&gt;
&lt;p&gt;“He’s a good ’ol Southern gentleman,” says David Lane.&lt;/p&gt;

&lt;p&gt;Carter says this place formed him, seeding his beliefs about racial equality. His farmhouse youth during the Great Depression made him unpretentious and frugal. His friends, maybe only half-joking, describe Carter as “tight as a tick.”&lt;/p&gt;
&lt;p&gt;That no-frills sensibility, endearing since he left Washington, didn’t work as well in the White House. Many people thought Carter scrubbed some of the luster off the presidency by carrying his own suitcases onto Air Force One and refusing to have “Hail to the Chief” played.&lt;/p&gt;
&lt;p&gt;Stuart E. Eizenstat, a Carter aide and biographer, said Carter’s edict eliminating drivers for top staff members backfired. It meant that top officials were driving instead of reading and working for an hour or two every day.&lt;/p&gt;
&lt;p&gt;“He didn’t feel suited to the grandeur,” Eizenstat said. “Plains is really part of his DNA. He carried it into the White House, and he carried it out of the White House.”&lt;/p&gt;
&lt;p&gt;Carter’s presidency — from 1977 to 1981 — is often remembered for long lines at gas stations and the Iran hostage crisis.&lt;/p&gt;
&lt;p&gt;“I may have overemphasized the plight of the hostages when I was in my final year,” he says. “But I was so obsessed with them personally, and with their families, that I wanted to do anything to get them home safely, which I did.”&lt;/p&gt;
&lt;div class=&quot;ent-photo ent-photo-fullwidth&quot;&gt;&lt;img class=&quot;unprocessed placeholder&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter029.jpg&amp;amp;w=988&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter029.jpg&amp;amp;w=800&quot; data-raw-src=&quot;http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter029.jpg&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter029.jpg&amp;amp;w=60&quot;/&gt;&lt;span class=&quot;ent-photo-caption&quot;&gt;Visitors watch a video about Carter’s life in the theater at Plains High School. Carter attended the school, which served first through 11th grades. Today, the school is home to the Jimmy Carter National Historic Site.&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;He said he regrets not doing more to unify the Democratic Party.&lt;/p&gt;
&lt;p&gt;When Carter looks back at his presidency, he says he is most proud of “keeping the peace and supporting human rights,” the Camp David accords that brokered peace between Israel and Egypt, and his work to normalize relations with China. In 2002, he was awarded the Nobel Peace Prize for his efforts.&lt;/p&gt;
&lt;p&gt;“I always told the truth,” he says.&lt;/p&gt;
&lt;p&gt;Carter has been notably quiet about President Trump. But on this night, two years into Trump’s term, he’s not holding back.&lt;/p&gt;
&lt;p&gt;“I think he’s a disaster,” Carter says. “In human rights and taking care of people and treating people equal.”&lt;/p&gt;
&lt;p&gt;“The worst is that he is not telling the truth, and that just hurts everything,” Rosalynn says.&lt;/p&gt;
&lt;p&gt;Carter says his father taught him that truthfulness matters. He said that was reinforced at the U.S. Naval Academy, where he said students are expelled for telling even the smallest lie.&lt;/p&gt;
&lt;p&gt;“I think there’s been an attitude of ignorance toward the truth by President Trump,” he says.&lt;/p&gt;
&lt;p&gt;Carter says he thinks the Supreme Court’s &lt;em&gt;Citizens United&lt;/em&gt; decision has “changed our political system from a democracy to an oligarchy. Money is now preeminent. I mean, it’s just gone to hell now.”&lt;/p&gt;
&lt;p&gt;He says he believes that the nation’s “ethical and moral values” are still intact and that Americans eventually will “return to what’s right and what’s wrong, and what’s decent and what’s indecent, and what’s truthful and what’s lies.”&lt;/p&gt;
&lt;p&gt;But, he says, “I doubt if it happens in my lifetime.”&lt;/p&gt;
&lt;div class=&quot;ent-photo&quot;&gt;&lt;img class=&quot;unprocessed placeholder&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter028.jpg&amp;amp;w=640&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter028.jpg&amp;amp;w=500&quot; data-raw-src=&quot;http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter028.jpg&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter028.jpg&amp;amp;w=60&quot;/&gt;&lt;span class=&quot;ent-photo-caption&quot;&gt;The Jimmy Carter National Historic Site draws nearly 70,000 visitors a year and $4 million into the county’s economy.&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;On Church Street, Carter points out the mayor’s house with his left hand while he holds Rosalynn’s with his right.&lt;/p&gt;
&lt;p&gt;“My mother and father lived in that brick one,” he says, gesturing toward a small house across the street. “We use it as an office now.”&lt;/p&gt;
&lt;p&gt;“That’s Dr. Logan’s over here.”&lt;/p&gt;
&lt;p&gt;Every house has a story. Generations of them. Cracked birdbaths and rocking chairs on somebody’s great-grandmother’s porch. Carter knows them all.&lt;/p&gt;
&lt;p&gt;“Mr. Oscar Williams lived here; his family was my competitor in the warehouse business.”&lt;/p&gt;

&lt;p&gt;He points out the Plains United Methodist Church, where he spotted young Eleanor Rosalynn Smith one evening when he was home from the Naval Academy.&lt;/p&gt;
&lt;p&gt;He asked her out. They went to a movie, and the next morning he told his mother he was going to marry Rosalynn.&lt;/p&gt;
&lt;p&gt;“I didn’t know that for years,” she says with a smile.&lt;/p&gt;
&lt;p&gt;They are asked if there is anything they want but don’t have.&lt;/p&gt;
&lt;p&gt;“I can’t think of anything,” Carter says, turning to Rosalynn. “And you?”&lt;/p&gt;
&lt;p&gt;“No, I’m happy,” she says.&lt;/p&gt;
&lt;p&gt;“We feel at home here,” Carter says. “And the folks in town, when we need it, they take care of us.”&lt;/p&gt;
&lt;div class=&quot;ent-photo ent-photo-fullwidth&quot;&gt;&lt;img class=&quot;unprocessed placeholder&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter016.jpg&amp;amp;w=988&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter016.jpg&amp;amp;w=800&quot; data-raw-src=&quot;http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter016.jpg&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter016.jpg&amp;amp;w=60&quot;/&gt;&lt;span class=&quot;ent-photo-caption&quot;&gt;Jimmy and Rosalynn Carter pose for photographs with anyone who wants one after a morning church service at Maranatha Baptist Church.&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;‘A heart of service’&lt;/h4&gt;
&lt;p&gt;Every other Sunday morning, Carter teaches Sunday school at the Maranatha Baptist Church on the edge of town, and people line up the night before to get a seat.&lt;/p&gt;
&lt;p&gt;This Sunday morning happens to be his 800th lesson since he left the White House.&lt;/p&gt;
&lt;p&gt;He walks in wearing a blazer too big through the shoulders, a striped shirt and a turquoise bolo tie. He asks where people have come from, and from the pews they call out at least 20 states, Canada, Kenya, China and Denmark.&lt;/p&gt;
&lt;p&gt;He tells the congregation that he’s planning a trip to Montana to go fishing with his friend Ted Turner, and that he’s going to ride in his son’s autogiro — a sort of mini-helicopter.&lt;/p&gt;
&lt;p&gt;“I’m still fairly active,” he says, and everyone laughs.&lt;/p&gt;
&lt;p&gt;He talks about living a purposeful life, but also about finding enough time for rest and reflection. Then he and Rosalynn pose for photos with every person who wants one, including Steven and Joanna Raley, who came from Annandale, Va., with their 3-month-old son, Jackson Carter Raley.&lt;/p&gt;
&lt;p&gt;“We want our children to grow up with a heart of service like President Carter,” says Steven, who works on Navy submarines, as Carter once did.&lt;/p&gt;
&lt;p&gt;“One of the reasons we named our son after President Carter is how humble he is,” Joanna says.&lt;/p&gt;
&lt;p&gt;Carter holds the baby and beams for the camera.&lt;/p&gt;
&lt;p&gt;“I like the name,” he says.&lt;/p&gt;
&lt;div class=&quot;ent-photo ent-photo-fullwidth&quot;&gt;&lt;img class=&quot;unprocessed placeholder&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter025.jpg&amp;amp;w=988&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter025.jpg&amp;amp;w=800&quot; data-raw-src=&quot;http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter025.jpg&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter025.jpg&amp;amp;w=60&quot;/&gt;&lt;span class=&quot;ent-photo-caption&quot;&gt;An oversized peanut with a toothy grin, made in Indiana as a tribute to Carter, a former peanut farmer, sits outside the Plains Mtd convenience store.&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;A modest life&lt;/h4&gt;
&lt;p&gt;When they reach their property, the Carters turn right off the sidewalk and cut across the wide lawn toward their house.&lt;/p&gt;
&lt;p&gt;Carter stops to point out a tall magnolia that was transplanted from a sprout taken from a tree that Andrew Jackson planted on the White House lawn.&lt;/p&gt;
&lt;p&gt;They walk past a pond, which Carter helped dig and where he now works on his fly-fishing technique. They point out a willow tree at the pond’s edge, on a gentle sloping lawn, where they will be buried in graves marked by simple stones.&lt;/p&gt;
&lt;p&gt;They know their graves will draw tourists and boost the Plains economy.&lt;/p&gt;
&lt;p&gt;Their one-story house sits behind a government-owned fence that once surrounded Richard Nixon’s house in Key Biscayne, Fla. The Carters already have deeded the property to the National Park Service, which will one day turn it into a museum.&lt;/p&gt;
&lt;p&gt;Their house is dated, but homey and comfortable, with a rustic living room and a small kitchen. A cooler bearing the presidential seal sits on the floor in the kitchen — Carter says they use it for leftovers.&lt;/p&gt;

&lt;p&gt;In a remodel not long ago, the couple knocked down a bedroom wall themselves. “By that time, we had worked with Habitat so much that it was just second-nature,” Rosalynn says.&lt;/p&gt;
&lt;p&gt;Rosalynn Carter practices tai chi and meditates in the mornings, while her husband writes in his study or swims in the pool. He also builds furniture and paints in the garage; the paint is still wet on a portrait of a cardinal that will be their Christmas card this year.&lt;/p&gt;
&lt;p&gt;They watch Atlanta Braves games or “Law and Order.” Carter just finished reading “The Innovators” by Walter Isaacson. They have no chef and they cook for themselves, often together. They make their own yogurt.&lt;/p&gt;
&lt;p&gt;On this summer morning, Rosalynn mixes pancake batter and sprinkles in blueberries grown on their land.&lt;/p&gt;
&lt;p&gt;Carter cooks them on the griddle.&lt;/p&gt;
&lt;p&gt;Then he does the dishes.&lt;/p&gt;
&lt;div class=&quot;ent-photo ent-photo-fullwidth&quot;&gt;&lt;img class=&quot;unprocessed placeholder&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter007.jpg&amp;amp;w=988&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter007.jpg&amp;amp;w=800&quot; data-raw-src=&quot;http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter007.jpg&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter007.jpg&amp;amp;w=60&quot;/&gt;&lt;span class=&quot;ent-photo-caption&quot;&gt;After dinner at their friend’s house, the Carters leave, with two Secret Service agents walking close behind. The former president’s gait is a bit unsteady these days, three years after a diagnosis of melanoma on his liver and brain. After radiation and chemotherapy, Carter says he is cancer-free.&lt;/span&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 19 Aug 2018 07:01:59 +0000</pubDate>
<dc:creator>siberianbear</dc:creator>
<og:type>article</og:type>
<og:url>https://www.washingtonpost.com/news/national/wp/2018/08/17/feature/the-un-celebrity-president-jimmy-carter-shuns-riches-lives-modestly-in-his-georgia-hometown/</og:url>
<og:image>https://www.washingtonpost.com/pbox.php?url=http://www.washingtonpost.com/news/national/wp-content/uploads/sites/9/2018/08/Carter010.jpg&amp;w=1484&amp;op=resize&amp;opt=1&amp;filter=antialias&amp;t=20170517</og:image>
<og:title>The un-celebrity president: Jimmy Carter shuns riches, lives modestly in his Georgia hometown</og:title>
<og:description>The un-celebrity president: Thirty-seven years after leaving office, Jimmy Carter shuns riches, lives modestly in his Georgia hometown</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.washingtonpost.com/news/national/wp/2018/08/17/feature/the-un-celebrity-president-jimmy-carter-shuns-riches-lives-modestly-in-his-georgia-hometown/?noredirect=on</dc:identifier>
</item>
<item>
<title>Introduction to Go Modules</title>
<link>https://roberto.selbach.ca/intro-to-go-modules/</link>
<guid isPermaLink="true" >https://roberto.selbach.ca/intro-to-go-modules/</guid>
<description>&lt;p&gt;The upcoming version 1.11 of the Go programming language will bring experimental support for &lt;em&gt;modules&lt;/em&gt;, a new dependency management system for Go.&lt;/p&gt;
&lt;p&gt;A few days ago, &lt;a href=&quot;https://roberto.selbach.ca/playing-with-go-modules/&quot;&gt;I wrote a quick post about it&lt;/a&gt;. Since that post went live, things changed a bit and as we’re now very close to the new release, I thought it would be a good time for another post with a more hands-on approach.&lt;/p&gt;
&lt;p&gt;So here’s what we’ll do: we’ll create a new package and then we’ll make a few releases to see how that would work.&lt;/p&gt;
&lt;h2&gt;Creating a Module&lt;/h2&gt;
&lt;p&gt;So first things first. Let’s create our package. We’ll call it “testmod”. An important detail here: &lt;strong&gt;this directory should be &lt;/strong&gt;&lt;strong&gt;&lt;em&gt;outside&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;your&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;$GOPATH&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;because by default, the modules support is disabled inside it&lt;/strong&gt;. Go modules is a first step in potentially eliminating &lt;code&gt;$GOPATH&lt;/code&gt; entirely at some point.&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;$ mkdir testmod
$ cd testmod
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Our package is very simple:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;package testmod

import &quot;fmt&quot; 

// Hi returns a friendly greeting
func Hi(name string) string {
   return fmt.Sprintf(&quot;Hi, %s&quot;, name)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The package is done but it is still not a &lt;em&gt;module&lt;/em&gt;. Let’s change that.&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;$ go mod init github.com/rselbach/testmod
go: creating new go.mod: module github.com/rselbach/testmod&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This creates a new file named &lt;code&gt;go.mod&lt;/code&gt; in the package directory with the following contents:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;module github.com/rselbach/testmod&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Not a lot here, but this effectively turns our package into a &lt;em&gt;module&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We can now push this code to a repository:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;$ git init 
$ git add * 
$ git commit -am &quot;First commit&quot; 
$ git push -u origin master&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Until now, anyone willing to use this package would &lt;code&gt;go get&lt;/code&gt; it:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;$ go get github.com/rselbach/testmod&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And this would fetch the latest code in &lt;code&gt;master&lt;/code&gt;. This still works, but we should probably stop doing that now that we have a Better Way™. Fetching &lt;code&gt;master&lt;/code&gt; is inherently dangerous as we can never know for sure that the package authors didn’t make change that will break our usage. That’s what modules aims at fixing.&lt;/p&gt;
&lt;h2&gt;Quick Intro to Module Versioning&lt;/h2&gt;
&lt;p&gt;Go modules are &lt;em&gt;versioned&lt;/em&gt;, and there are some particularities with regards to certain versions. You will need to familiarize yourself with the concepts behind &lt;a href=&quot;https://semver.org&quot;&gt;semantic versioning&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More importantly, Go will use repository tags when looking for versions, and some versions are different of others: e.g. versions 2 and greater should have a different import path than versions 0 and 1 (we’ll get to that.)&lt;/p&gt;
&lt;p&gt;As well, by default Go will fetch the latest &lt;em&gt;tagged version&lt;/em&gt; available in a repository. This is an important gotcha as you may be used to working with the master branch.&lt;/p&gt;
&lt;p&gt;What you need to keep in mind for now is that to make a release of our package, we need to tag our repository with the version. So let’s do that.&lt;/p&gt;
&lt;h2&gt;Making our first release&lt;/h2&gt;
&lt;p&gt;Now that our package is ready, we can release it to the world. We do this by using version tags. Let’s release our version 1.0.0:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;$ git tag v1.0.0
$ git push --tags&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This creates a tag on my Github repository marking the current commit as being the release 1.0.0.&lt;/p&gt;
&lt;p&gt;Go doesn’t enforce that in any way, but a good idea is to also create a new branch (“v1”) so that we can push bug fixes to.&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;$ git checkout -b v1
$ git push -u origin v1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now we can work on &lt;code&gt;master&lt;/code&gt; without having to worry about breaking our release.&lt;/p&gt;
&lt;h2&gt;Using our module&lt;/h2&gt;
&lt;p&gt;Now we’re ready to use the module. We’ll create a simple program that will use our new package:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;package main

import (
        &quot;fmt&quot;

        &quot;github.com/rselbach/testmod&quot;
)

func main() {
        fmt.Println(testmod.Hi(&quot;roberto&quot;))
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Until now, you would do a &lt;code&gt;go get github.com/rselbach/testmod&lt;/code&gt; to download the package, but with modules, this gets more interesting. First we need to enable modules in our new program.&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;$ go mod init mod&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As you’d expect from what we’ve seen above, this will have created a new &lt;code&gt;go.mod&lt;/code&gt; file with the module name in it:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;module mod&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Things get much more interesting when we try to build our new program:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;$ go build
go: finding github.com/rselbach/testmod v1.0.0
go: downloading github.com/rselbach/testmod v1.0.0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As we can see, the &lt;code&gt;go&lt;/code&gt; command automatically goes and fetches the packages imported by the program. If we check our &lt;code&gt;go.mod&lt;/code&gt; file, we see that things have changed:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;module mod
require github.com/rselbach/testmod v1.0.0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And we now have a new file too, named &lt;code&gt;go.sum&lt;/code&gt;, which contains hashes of the packages, to ensure that we have the correct version and files.&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;github.com/rselbach/testmod v1.0.0 h1:9EdH0EArQ/rkpss9Tj8gUnwx3w5p0jkzJrd5tRAhxnA=
github.com/rselbach/testmod v1.0.0/go.mod h1:UVhi5McON9ZLc5kl5iN2bTXlL6ylcxE9VInV71RrlO8=&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Making a bugfix release&lt;/h2&gt;
&lt;p&gt;Now let’s say we realized a problem with our package: the greeting is missing ponctuation! People are mad because our friendly greeting is not friendly enough. So we’ll fix it and release a new version:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;// Hi returns a friendly greeting
func Hi(name string) string {
-       return fmt.Sprintf(&quot;Hi, %s&quot;, name)
+       return fmt.Sprintf(&quot;Hi, %s!&quot;, name)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We made this change in the v1 branch because it’s not relevant for what we’ll do for v2 later, but in real life, maybe you’d do it in &lt;code&gt;master&lt;/code&gt; and then back-port it. Either way, we need to have the fix in our v1 branch and mark it as a new release.&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;$ git commit -m &quot;Emphasize our friendliness&quot; testmod.go
$ git tag v1.0.1
$ git push --tags origin v1&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Updating modules&lt;/h2&gt;
&lt;p&gt;By default, Go will not update modules without being asked. This is a Good Thing™ as we want predictability in our builds. If Go modules were automatically updated every time a new version came out, we’d be back in the uncivilized age pre-Go1.11. No, we need to &lt;em&gt;tell&lt;/em&gt; Go to update a modules for us.&lt;/p&gt;
&lt;p&gt;We do this by using our good old friend &lt;code&gt;go get&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;run &lt;code&gt;go get -u&lt;/code&gt; to use the latest &lt;em&gt;minor or patch&lt;/em&gt; releases (i.e. it would update from 1.0.0 to, say, 1.0.1 or, if available, 1.1.0)&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;go get -u=patch&lt;/code&gt; to use the latest &lt;em&gt;patch&lt;/em&gt; releases (i.e., would update to 1.0.1 but &lt;em&gt;not&lt;/em&gt; to 1.1.0)&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;go get &lt;a href=&quot;https://roberto.selbach.ca/cdn-cgi/l/email-protection&quot; class=&quot;__cf_email__&quot; data-cfemail=&quot;c8b8a9aba3a9afad88beadbabba1a7a6&quot;&gt;[email protected]&lt;/a&gt;&lt;/code&gt; to update to a specific version (say, &lt;code&gt;github.com/rselbach/&lt;a href=&quot;https://roberto.selbach.ca/cdn-cgi/l/email-protection&quot; class=&quot;__cf_email__&quot; data-cfemail=&quot;8efaebfdfae3e1eacef8bfa0bea0bf&quot;&gt;[email protected]&lt;/a&gt;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In the list above, there doesn’t seem to be a way to update to the latest &lt;em&gt;major&lt;/em&gt; version. There’s a good reason for that, as we’ll see in a bit.&lt;/p&gt;
&lt;p&gt;Since our program was using version 1.0.0 of our package and we just created version 1.0.1, &lt;em&gt;any&lt;/em&gt; of the following commands will update us to 1.0.1:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;$ go get -u
$ go get -u=patch
$ go get github.com/rselbach/&lt;a href=&quot;https://roberto.selbach.ca/cdn-cgi/l/email-protection&quot; class=&quot;__cf_email__&quot; data-cfemail=&quot;f1859482859c9e95b187c0dfc1dfc0&quot;&gt;[email protected]&lt;/a&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After running, say, &lt;code&gt;go get -u&lt;/code&gt; our &lt;code&gt;go.mod&lt;/code&gt; is changed to:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;module mod
require github.com/rselbach/testmod v1.0.1&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Major versions&lt;/h2&gt;
&lt;p&gt;According to semantic version semantics, a major version is &lt;em&gt;different&lt;/em&gt; than minors. Major versions can break backwards compatibility. From the point of view of Go modules, a major version is a &lt;em&gt;different package&lt;/em&gt; completely. This may sound bizarre at first, but it makes sense: two versions of a library that are not compatible with each other are two different libraries.&lt;/p&gt;
&lt;p&gt;Let’s make a major change in our package, shall we? Over time, we realized our API was too simple, too limited for the use cases of our users, so we need to change the &lt;code&gt;Hi()&lt;/code&gt; function to take a new parameter for the greeting language:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;package testmod

import (
        &quot;errors&quot;
        &quot;fmt&quot; 
) 

// Hi returns a friendly greeting in language lang
func Hi(name, lang string) (string, error) {
        switch lang {
        case &quot;en&quot;:
                return fmt.Sprintf(&quot;Hi, %s!&quot;, name), nil
        case &quot;pt&quot;:
                return fmt.Sprintf(&quot;Oi, %s!&quot;, name), nil
        case &quot;es&quot;:
                return fmt.Sprintf(&quot;¡Hola, %s!&quot;, name), nil
        case &quot;fr&quot;:
                return fmt.Sprintf(&quot;Bonjour, %s!&quot;, name), nil
        default:
                return &quot;&quot;, errors.New(&quot;unknown language&quot;)
        }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Existing software using our API will break because they (a) don’t pass a language parameter and (b) don’t expect an error return. Our new API is no longer compatible with version 1.x so it’s time to bump the version to 2.0.0.&lt;/p&gt;
&lt;p&gt;I mentioned before that some versions have some peculiarities, and this is the case now. &lt;strong&gt;Versions 2 &lt;/strong&gt;&lt;strong&gt;&lt;em&gt;and over&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;should change the import path.&lt;/strong&gt; They are different libraries now.&lt;/p&gt;
&lt;p&gt;We do this by appending a new &lt;em&gt;version path&lt;/em&gt; to the end of our module name.&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;module github.com/rselbach/testmod/v2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The rest is the same as before, we push it, tag it as v2.0.0 (and optionally create a v2 branch.)&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;$ git commit testmod.go -m &quot;Change Hi to allow multilang&quot;
$ git checkout -b v2 # optional but recommended
$ echo &quot;module github.com/rselbach/testmod/v2&quot; &amp;gt; go.mod
$ git commit go.mod -m &quot;Bump version to v2&quot;
$ git tag v2.0.0
$ git push --tags origin v2 # or master if we don't have a branch&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Updating to a major version&lt;/h2&gt;
&lt;p&gt;Even though we have released a new incompatible version of our library, existing software &lt;em&gt;will not break&lt;/em&gt;, because it will continue to use the existing version 1.0.1. &lt;code&gt;go get -u&lt;/code&gt; &lt;em&gt;will not&lt;/em&gt; get version 2.0.0.&lt;/p&gt;
&lt;p&gt;At some point, however, I, as the library user, may want to upgrade to version 2.0.0 because maybe I was one of those users who needed multi-language support.&lt;/p&gt;
&lt;p&gt;I do it but modifying my program accordingly:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;package main

import (
        &quot;fmt&quot;
        &quot;github.com/rselbach/testmod/v2&quot; 
)

func main() {
        g, err := testmod.Hi(&quot;Roberto&quot;, &quot;pt&quot;)
        if err != nil {
                panic(err)
        }
        fmt.Println(g)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And then when I run &lt;code&gt;go build&lt;/code&gt;, it will go and fetch version 2.0.0 for me. Notice how even though the import path ends with “v2”, Go will still refer to the module by its proper name (“testmod”).&lt;/p&gt;
&lt;p&gt;As I mentioned before, the major version is for all intents and purposes a completely different package. Go modules does not link the two at all. That means we can use two incompatible versions in the same binary:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;package main
import (
        &quot;fmt&quot;
        &quot;github.com/rselbach/testmod&quot;
        testmodML &quot;github.com/rselbach/testmod/v2&quot;
)

func main() {
        fmt.Println(testmod.Hi(&quot;Roberto&quot;))
        g, err := testmodML.Hi(&quot;Roberto&quot;, &quot;pt&quot;)
        if err != nil {
                panic(err)
        }
        fmt.Println(g)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This eliminates a common problem with dependency management: when dependencies depend on different versions of the same library.&lt;/p&gt;
&lt;h2&gt;Tidying it up&lt;/h2&gt;
&lt;p&gt;Going back to the previous version that uses only testmod 2.0.0, if we check the contents of &lt;code&gt;go.mod&lt;/code&gt; now, we’ll notice something:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;module mod
require github.com/rselbach/testmod v1.0.1
require github.com/rselbach/testmod/v2 v2.0.0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;By default, Go does not remove a dependency from &lt;code&gt;go.mod&lt;/code&gt; unless you ask it to. If you have dependencies that you no longer use and want to clean up, you can use the new &lt;code&gt;tidy&lt;/code&gt; command:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;$ go mod tidy&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now we’re left with only the dependencies that are really being used.&lt;/p&gt;
&lt;h2&gt;Vendoring&lt;/h2&gt;
&lt;p&gt;Go modules ignores the &lt;code&gt;vendor/&lt;/code&gt; directory by default. The idea is to do away with vendoring. But if we still want to add vendored dependencies to our version control, we can still do it:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;$ go mod vendor&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This will create a &lt;code&gt;vendor/&lt;/code&gt; directory under the root of your project containing the source code for all of your dependencies.&lt;/p&gt;
&lt;p&gt;Still, &lt;code&gt;go build&lt;/code&gt; will ignore the contents of this directory by default. If you want to build dependencies from the &lt;code&gt;vendor/&lt;/code&gt; directory, you’ll need to ask for it.&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;$ go build -mod vendor&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I expect many developers willing to use vendoring will run &lt;code&gt;go build&lt;/code&gt; normally on their development machines and use &lt;code&gt;-mod vendor&lt;/code&gt; in their CI.&lt;/p&gt;
&lt;p&gt;Again, Go modules is moving away from the idea of vendoring and towards using a Go module proxy for those who don’t want to depend on the upstream version control services directly.&lt;/p&gt;
&lt;p&gt;There are ways to guarantee that &lt;code&gt;go&lt;/code&gt; will not reach the network at all (e.g. &lt;code&gt;GOPROXY=off&lt;/code&gt;) but these are the subject for a future blog post.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This post may seem a bit daunting, but I tried to explain a lot of things together. The reality is that now Go modules is basically transparent. We import package like always in our code and the &lt;code&gt;go&lt;/code&gt; command will take care of the rest.&lt;/p&gt;
&lt;p&gt;When we build something, the dependencies will be fetched automatically. It also eliminates the need to use &lt;code&gt;$GOPATH&lt;/code&gt; which was a roadblock for new Go developers who had trouble understanding why things had to go into a specific directory.&lt;/p&gt;
&lt;p&gt;Vendoring is (unofficially) being deprecated in favour of using proxies. I may do a separate post about the Go module proxy.&lt;/p&gt;
</description>
<pubDate>Sun, 19 Aug 2018 02:46:37 +0000</pubDate>
<dc:creator>robteix</dc:creator>
<dc:language>en-CA</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://roberto.selbach.ca/intro-to-go-modules/</dc:identifier>
</item>
</channel>
</rss>