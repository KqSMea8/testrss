<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Repair is as important as innovation</title>
<link>https://www.economist.com/finance-and-economics/2018/10/20/repair-is-as-important-as-innovation</link>
<guid isPermaLink="true" >https://www.economist.com/finance-and-economics/2018/10/20/repair-is-as-important-as-innovation</guid>
<description>&lt;div readability=&quot;31&quot;&gt;
&lt;div class=&quot;blog-post__asideable-content blog-post__asideable-content--meta&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;blog-post__section&quot; itemprop=&quot;articleSection&quot;&gt;&lt;span&gt;Print edition | Finance and economics&lt;/span&gt;&lt;/h3&gt;
&lt;time class=&quot;blog-post__datetime&quot; itemprop=&quot;dateCreated&quot; datetime=&quot;2018-10-20T00:00:00Z&quot;&gt;Oct 20th 2018&lt;/time&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;&lt;div itemprop=&quot;description&quot; readability=&quot;99&quot;&gt;
&lt;p&gt;&lt;span data-caps=&quot;initial&quot;&gt;I&lt;/span&gt;&lt;small&gt;N 1533 A&lt;/small&gt; noblewoman in Calais presented a visiting grandee with a peculiar gift: her personal toothpick, which, she was eager to point out, she had used for seven years. Whether it pleased her guest is not known, according to Hazel Forsyth, a curator at the Museum of London. But the story amused Ms Forsyth’s audience at last month’s “Festival of Maintenance”, a conference dedicated to keeping things in good nick.&lt;/p&gt;
&lt;div class=&quot;newsletter-form newsletter-form--inline&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;newsletter-form__message&quot; readability=&quot;7&quot;&gt;&lt;strong&gt;Get our daily newsletter&lt;/strong&gt;
&lt;p&gt;Upgrade your inbox and get our Daily Dispatch and Editor's Picks.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;latest-updates-panel__container latest-updates-panel__container--blog-post&quot;&gt;

&lt;ul class=&quot;latest-updates-panel__body&quot;&gt;&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;Is economic war looming between Saudi Arabia and America?&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;The British Museum’s new Islamic world gallery is a triumph&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;Democrats are winning voters’ wallets—and perhaps their hearts as well&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;The Supreme Court takes a public-access TV case&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;Atlanta airport launches America’s first “biometric terminal”&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;The UN Human Rights Council’s lousy election&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Events about making new things are ten a penny. Less common are events about keeping things as good as new. Maintenance lacks the glamour of innovation. It is mostly noticed in its absence—the tear in a shirt, the mould on a ceiling, the spluttering of an engine. Not long ago David Edgerton of Imperial College London, who also spoke at the festival, drove across the bridge in Genoa that collapsed in August, killing 43 people (pictured). “We’re encouraged to pride ourselves on all being innovators and entrepreneurs,” he said. Maintenance is often dismissed as mere drudgery. But in fact, as he pointed out, repairing things is often trickier than making them.&lt;/p&gt;

&lt;p&gt;It is also more difficult for economists to measure. The discipline’s most prominent statistic, &lt;small&gt;GDP&lt;/small&gt;, is gross (as opposed to net) because it leaves out the cost of wear and tear. To calculate these costs, statisticians must estimate the lifespan of a country’s assets and make assumptions about the way they deteriorate. Some are like light bulbs, which work well until they stop altogether. Economists call this the “one-hoss shay” case, an allusion to a poem by Oliver Wendell Holmes. It imagines a horse-drawn cart built so well that it never broke down until it eventually fell apart, victim of “a general flavour of mild decay”.&lt;/p&gt;
&lt;p&gt;Other assets are less poetic. Many are assumed to wear out in a “straight line”, deteriorating by the same amount each year. Others lose a steady percentage of their diminishing worth. Japan assumes that houses lose 4% of their remaining value each year. That may be one reason why the costs of wear and tear (or “consumption of fixed capital”) are reckoned to be so much higher in Japan (22% of &lt;small&gt;GDP&lt;/small&gt;) than in many other countries, where houses are assumed to age more gracefully.&lt;/p&gt;
&lt;p&gt;And how much do economies spend fighting decay? No one knows, partly because most maintenance is performed in-house, not purchased on the market. The best numbers are collected by Canada, where firms spent 3.3% of &lt;small&gt;GDP&lt;/small&gt; on repairs in 2016, more than twice as much as the country spends on research and development.&lt;/p&gt;
&lt;div class=&quot;component-image blog-post__image&quot;&gt;&lt;img src=&quot;https://cdn.static-economist.com/sites/default/files/images/print-edition/20181020_FNC476.png&quot; alt=&quot;&quot; class=&quot;component-image__img blog-post-article-image blog-post-article-image__slim&quot; srcset=&quot;/sites/default/files/imagecache/200-width/images/print-edition/20181020_FNC476.png 200w, /sites/default/files/imagecache/300-width/images/print-edition/20181020_FNC476.png 300w, /sites/default/files/imagecache/400-width/images/print-edition/20181020_FNC476.png 400w, /sites/default/files/imagecache/640-width/images/print-edition/20181020_FNC476.png 640w, /sites/default/files/imagecache/800-width/images/print-edition/20181020_FNC476.png 800w, /sites/default/files/imagecache/1000-width/images/print-edition/20181020_FNC476.png 1000w, /sites/default/files/imagecache/1200-width/images/print-edition/20181020_FNC476.png 1200w, /sites/default/files/imagecache/1280-width/images/print-edition/20181020_FNC476.png 1280w, /sites/default/files/imagecache/1600-width/images/print-edition/20181020_FNC476.png 1600w&quot; sizes=&quot;(min-width: 600px) 640px, calc(100vw - 20px)&quot;/&gt;&lt;/div&gt;
&lt;p&gt;At the festival, Mr Edgerton cited the old idea of “hydraulic despotism”: the argument that the tyrannies of the ancient East arose to force people to maintain fragile irrigation systems. In those societies, to repair was to repress. But some today have the opposite concern. They see maintenance and repair as a right they are in danger of losing to companies that hoard spare parts and information too jealously.&lt;/p&gt;
&lt;p&gt;In March California became the 18th state in America to introduce a bill supporting the “right to repair”, by obliging manufacturers to make manuals more widely available to customers and independent repair shops. The European Commission has proposed something similar for dishwashers, washing machines and the like. Some think they have the right to repair public property, too. One speaker at the festival, who called himself the “guerrilla groundsman” and masked his identity with a helmet, described his surreptitious efforts to clean bridges and repaint signs in Cambridge without authorisation. In a disposable society, to repair is to rebel.&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Thu, 18 Oct 2018 18:02:38 +0000</pubDate>
<dc:creator>sinak</dc:creator>
<og:description>Maintenance lacks the glamour of innovation—and is harder to measure</og:description>
<og:image>https://cdn.static-economist.com/sites/default/files/images/2018/10/articles/main/20181020_fnp503.jpg</og:image>
<og:type>article</og:type>
<og:url>https://www.economist.com/finance-and-economics/2018/10/20/repair-is-as-important-as-innovation</og:url>
<og:title>Repair is as important as innovation</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.economist.com/finance-and-economics/2018/10/20/repair-is-as-important-as-innovation</dc:identifier>
</item>
<item>
<title>OOP Is Dead, Long Live OOP</title>
<link>https://www.gamedev.net/blogs/entry/2265481-oop-is-dead-long-live-oop/</link>
<guid isPermaLink="true" >https://www.gamedev.net/blogs/entry/2265481-oop-is-dead-long-live-oop/</guid>
<description>&lt;p&gt;Seeing this has been linked outside of game-development circles: &quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Entity%E2%80%93component%E2%80%93system&quot; rel=&quot;external nofollow&quot;&gt;ECS&lt;/a&gt;&quot; (&lt;em&gt;this wikipedia page is garbage, btw -- it conflates EC-frameworks and ECS-frameworks, which aren't the same...&lt;/em&gt;) is a faux-pattern circulated within game-dev communities, which is basically a version of the relational model, where &quot;entities&quot; are just ID's that represent a formless object, &quot;components&quot; are rows in specific tables that reference an ID, and &quot;systems&quot; are procedural code that can modify the components. This &quot;pattern&quot; is always posed as a solution to an over-use of inheritance, without mentioning that an over-use of inheritance is actually bad under OOP guidelines. Hence the rant. This isn't the &quot;one true way&quot; to write software. It's getting people to actually look at existing design guidelines.&lt;/p&gt;

&lt;p&gt;This blog post is inspired by &lt;a href=&quot;https://twitter.com/aras_p&quot; rel=&quot;external nofollow&quot;&gt;Aras Pranckevičius&lt;/a&gt;' recent publication of a talk aimed at junior programmers, designed to get them to come to terms with new &quot;ECS&quot; architectures. Aras follows the typical pattern (&lt;em&gt;explained below&lt;/em&gt;), where he shows some terrible OOP code and then shows that the relational model is a great alternative solution (&lt;em&gt;but calls it &quot;ECS&quot; instead of relational&lt;/em&gt;). This is not a swipe at Aras at all - I'm a fan of his work and commend him on the great presentation! The reason I'm picking on his presentation in particular instead of the hundred other ECS posts that have been made on the interwebs, is because he's gone through the effort of actually publishing a git repository to go along with his presentation, which contains a simple little &quot;game&quot; as a playground for demonstrating different architecture choices. This tiny project makes it easy for me to actually, concretely demonstrate my points, so, thanks Aras!&lt;/p&gt;
&lt;p&gt;You can find Aras'  slides at &lt;a href=&quot;http://aras-p.info/texts/files/2018Academy%20-%20ECS-DoD.pdf&quot; rel=&quot;external nofollow&quot;&gt;http://aras-p.info/texts/files/2018Academy - ECS-DoD.pdf&lt;/a&gt; and the code at &lt;a href=&quot;https://github.com/aras-p/dod-playground&quot; rel=&quot;external nofollow&quot;&gt;https://github.com/aras-p/dod-playground&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm not going to analyse the final ECS architecture from that talk (yet?), but I'm going to focus on the straw-man &quot;bad OOP&quot; code from the start. I'll show what it would look like if we actually fix all of the OOD rule violations.&lt;br/&gt;&lt;strong&gt;Spoiler: fixing the OOD violations actually results in a similar performance improvement to Aras' ECS conversion, plus it actually uses less RAM and requires less lines of code than the ECS version!&lt;/strong&gt;&lt;br/&gt;&lt;em&gt;TL;DR: Before you decide that OOP is shit and ECS is great, stop and learn OOD (to know how to use OOP properly) and learn relational (to know how to use ECS properly too).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I've been a long-time ranter in many &quot;ECS&quot; threads on the forum, partly because I don't think it deserves to exist as a term (&lt;em&gt;spoiler: it's just a an ad-hoc version of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Relational_model&quot; rel=&quot;external nofollow&quot;&gt;relational model&lt;/a&gt;&lt;/em&gt;), but because almost &lt;em&gt;every single&lt;/em&gt; blog, presentation, or article that promotes the &quot;ECS&quot; pattern follows the same structure:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Show some terrible OOP code, which has a terribly flawed design based on an over-use of inheritance (and incidentally, a design that breaks many OOD rules).&lt;/li&gt;
&lt;li&gt;Show that composition is a better solution than inheritance (and don't mention that OOD actually teaches this same lesson).&lt;/li&gt;
&lt;li&gt;Show that the relational model is a great fit for games (but call it &quot;ECS&quot;).&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This structure grinds my gears because:&lt;br/&gt;&lt;strong&gt;(A)&lt;/strong&gt; it's a straw-man argument.. it's apples to oranges (bad code vs good code)... which just feels dishonest, even if it's unintentional and not actually required to show that your new architecture is good,&lt;br/&gt;but more importantly:&lt;br/&gt;&lt;strong&gt;(B)&lt;/strong&gt; it has the side effect of suppressing knowledge and unintentionally discouraging readers from interacting with half a century of existing research. The relational model was first written about in the 1960's. Through the 70's and 80's this model was refined extensively. There's common beginners questions like &quot;&lt;em&gt;which class should I put this data in?&lt;/em&gt;&quot;, which is often answered in vague terms like &quot;&lt;em&gt;you just need to gain experience and you'll know by feel&lt;/em&gt;&quot;... but in the 70's this question was extensively pondered and solved in the general case in formal terms; it's called &lt;a href=&quot;https://en.wikipedia.org/wiki/Database_normalization#Normal_forms&quot; rel=&quot;external nofollow&quot;&gt;database normalization&lt;/a&gt;. By ignoring existing research and presenting ECS as a completely new and novel solution, you're hiding this knowledge from new programmers.&lt;/p&gt;
&lt;p&gt;Object oriented programming dates back just as far, if not further (&lt;em&gt;work in the 1950's began to explore the style&lt;/em&gt;)! However, it was in the 1990's that OO became a fad - hyped, viral and very quickly, &lt;em&gt;the&lt;/em&gt; dominant programming paradigm. A slew of new OO languages exploded in popularity including Java and (&lt;em&gt;the standardized version of&lt;/em&gt;) C++. However, because it was a hype-train, everyone &lt;em&gt;needed&lt;/em&gt; to know this new buzzword to put on their resume, yet no one really groked it. These new languages had added a lot of OO features as keywords -- &lt;em&gt;class&lt;/em&gt;, &lt;em&gt;virtual&lt;/em&gt;, &lt;em&gt;extends&lt;/em&gt;, &lt;em&gt;implements&lt;/em&gt; -- and I would argue that it's at this point that OO split into two distinct entities with a life of their own.&lt;br/&gt;I will refer to the use of these OO-inspired language features as &quot;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot; rel=&quot;external nofollow&quot;&gt;OOP&lt;/a&gt;&lt;/strong&gt;&quot;, and the use of OO-inspired design/architecture techniques as &quot;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_design&quot; rel=&quot;external nofollow&quot;&gt;OOD&lt;/a&gt;&lt;/strong&gt;&quot;. Everyone picked up OOP very quickly. Schools taught OO classes that were efficient at churning out new OOP programmers.... yet knowledge of OOD lagged behind.&lt;/p&gt;
&lt;p&gt;I argue that code that uses OOP language features, but does not follow OOD design rules &lt;strong&gt;is not OO code&lt;/strong&gt;. Most anti-OOP rants are eviscerating code that is not actually OO code.&lt;br/&gt;OOP code has a very bad reputation, I assert in part due to the fact that, most OOP code does not follow OOD rules, thus isn't actually &quot;true&quot; OO code.&lt;/p&gt;

&lt;p&gt;As mentioned above, the 1990's was the peak of the &quot;OO fad&quot;, and it's during this time that &quot;bad OOP&quot; was probably at its worst. If you studied OOP during this time, you probably learned &quot;The 4 pillars of OOP&quot;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Abstraction&lt;/li&gt;
&lt;li&gt;Encapsulation&lt;/li&gt;
&lt;li&gt;Polymorphism&lt;/li&gt;
&lt;li&gt;Inheritance&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I'd prefer to call these &quot;4 tools of OOP&quot; rather than 4 pillars. These are tools that you &lt;em&gt;&lt;strong&gt;can&lt;/strong&gt;&lt;/em&gt; use to solve problems. Simply learning how a tool works is not enough though, you need to know when you &lt;strong&gt;&lt;em&gt;should&lt;/em&gt;&lt;/strong&gt;&lt;em&gt; &lt;/em&gt;be using them... It's irresponsible for educators to teach people a new tool without also teaching them when it's appropriate to use each of them.  In the early 2000's, there was a push-back against the rampant misuse of these tools, a kind of second-wave of OOD thought. Out of this came the &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID&quot; rel=&quot;external nofollow&quot;&gt;SOLID&lt;/a&gt; mnemonic to use as a quick way to evaluate a design's strength. Note that most of these bits of advice were well actually widely circulated in the 90's, but didn't yet have the cool acronym to cement them as the five core rules...&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot; rel=&quot;external nofollow&quot;&gt;Si&lt;/a&gt;&lt;a href=&quot;http://go.gamedev.net/?id=13722X707581&amp;amp;xs=1&amp;amp;isjs=1&amp;amp;url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSingle_responsibility_principle&amp;amp;xguid=bec081ca5481b60ce2a074abf8de0dd2&amp;amp;xuuid=5180b656273dda91d97c44dcd5034ff2&amp;amp;xsessid=f6b94a3c87ce1e392161ce21c5adfe14&amp;amp;xcreo=0&amp;amp;xed=0&amp;amp;sref=https%3A%2F%2Fwww.gamedev.net%2Fblogs%2Fentry%2F2265481-oop-is-dead-long-live-oop%2F%3FcsrfKey%3Dd4c2447e52a68c8aeafbe41954c76c1e%26do%3Dedit&amp;amp;pref=https%3A%2F%2Fwww.gamedev.net%2Fblogs%2Fentry%2F2265481-oop-is-dead-long-live-oop%2F&amp;amp;xtz=-600&amp;amp;abp=1&amp;amp;jv=13.10.3-2&amp;amp;bv=2.5.1&quot; rel=&quot;external nofollow&quot;&gt;ngle responsibility principle&lt;/a&gt;&lt;/strong&gt;. Every class should have one reason to change. If class &quot;A&quot; has two responsibilities, create a new class &quot;B&quot; and &quot;C&quot; to handle each of them in isolation, and then compose &quot;A&quot; out of &quot;B&quot; and &quot;C&quot;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Open/closed_principle&quot; rel=&quot;external nofollow&quot;&gt;Open/closed principle&lt;/a&gt;&lt;/strong&gt;. Software changes over time (&lt;em&gt;i.e. maintenance is important&lt;/em&gt;). Try to put the parts that are likely to change into &lt;em&gt;implementations&lt;/em&gt; (&lt;em&gt;i.e. concrete classes&lt;/em&gt;) and build &lt;em&gt;interfaces&lt;/em&gt; around the parts that are unlikely to change (&lt;em&gt;e.g. abstract base classes&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Liskov_substitution_principle&quot; rel=&quot;external nofollow&quot;&gt;Liskov substitution principle&lt;/a&gt;&lt;/strong&gt;. Every implementation of an interface needs to 100% comply the requirements of that interface. i.e. any algorithm that works on the interface, should continue to work for every implementation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Interface_segregation_principle&quot; rel=&quot;external nofollow&quot;&gt;Interface segregation principle&lt;/a&gt;&lt;/strong&gt;. Keep interfaces as small as possible, in order to ensure that each part of the code &quot;knows about&quot; the least amount of the code-base as possible. i.e. avoid unnecessary dependencies. This is also just good advice in C++ where compile times suck if you don't follow this advice &lt;span&gt;&lt;img alt=&quot;:D&quot; data-emoticon=&quot;&quot; height=&quot;20&quot; data-pagespeed-lazy-src=&quot;https://www.gamedev.net/uploads/emoticons/biggrin.png&quot; data-pagespeed-lazy-srcset=&quot;https://www.gamedev.net/uploads/emoticons/biggrin@2x.png 2x&quot; title=&quot;:D&quot; width=&quot;20&quot; src=&quot;https://www.gamedev.net/pagespeed_static/1.JiBnMqyl6S.gif&quot; onload=&quot;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot; onerror=&quot;this.onerror=null;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot;/&gt; &lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_inversion_principle&quot; rel=&quot;external nofollow&quot;&gt;Dependency inversion principle&lt;/a&gt;&lt;/strong&gt;. Instead of having two concrete implementations communicate directly (and depend on each other), they can usually be decoupled by formalizing their communication interface as a third class that acts as an interface between them. This could be an abstract base class that defines the method calls used between them, or even just a &lt;a href=&quot;https://en.wikipedia.org/wiki/Plain_old_data&quot; rel=&quot;external nofollow&quot;&gt;POD&lt;/a&gt; struct that defines the data passed between them.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Not included in the SOLID acronym, but I would argue is just as important is the:&lt;br/&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Composition_over_inheritance&quot; rel=&quot;external nofollow&quot;&gt;Composite reuse principle&lt;/a&gt;&lt;/strong&gt;. Composition is &lt;em&gt;the right default™&lt;/em&gt;. Inheritance should be reserved for use when it's absolutely required.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This gives us SOLID-C(++) &lt;span&gt;&lt;img alt=&quot;:)&quot; data-emoticon=&quot;&quot; height=&quot;20&quot; data-pagespeed-lazy-src=&quot;https://www.gamedev.net/uploads/emoticons/smile.png&quot; data-pagespeed-lazy-srcset=&quot;https://www.gamedev.net/uploads/emoticons/smile@2x.png 2x&quot; title=&quot;:)&quot; width=&quot;20&quot; src=&quot;https://www.gamedev.net/pagespeed_static/1.JiBnMqyl6S.gif&quot; onload=&quot;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot; onerror=&quot;this.onerror=null;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot;/&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;From now on, I'll refer to these by their three letter acronyms -- SRP, OCP, LSP, ISP, DIP, CRP...&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A few other notes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;In OOD, &lt;em&gt;interfaces&lt;/em&gt; and &lt;em&gt;implementations&lt;/em&gt; are ideas that don't map to any specific OOP keywords. In C++, we often create interfaces with &lt;em&gt;abstract base classes&lt;/em&gt; and &lt;em&gt;virtual functions&lt;/em&gt;, and then &lt;em&gt;implementations &lt;/em&gt;inherit from those base classes... but that is just one specific way to achieve the idea of an interface. In C++, we can also use &lt;a href=&quot;https://en.cppreference.com/w/cpp/language/pimpl&quot; rel=&quot;external nofollow&quot;&gt;PIMPL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Opaque_pointer&quot; rel=&quot;external nofollow&quot;&gt;opaque pointers&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Duck_typing&quot; rel=&quot;external nofollow&quot;&gt;duck typing&lt;/a&gt;, typedefs, etc... You can create an OOD design and then implement it in C, where there aren't any OOP language keywords! So when I'm talking about &lt;em&gt;interfaces&lt;/em&gt; here, I'm not necessarily talking about &lt;em&gt;virtual &lt;/em&gt;functions -- I'm talking about the idea of &lt;a href=&quot;https://en.wikipedia.org/wiki/Information_hiding&quot; rel=&quot;external nofollow&quot;&gt;implementation hiding&lt;/a&gt;. Interfaces &lt;em&gt;can&lt;/em&gt; be &lt;a href=&quot;https://en.wikipedia.org/wiki/Polymorphism_(computer_science)&quot; rel=&quot;external nofollow&quot;&gt;polymorphic&lt;/a&gt;, but most often they are not! A good use for polymorphism is rare, but interfaces are fundamental to all software.
&lt;ul&gt;&lt;li&gt;As hinted above, if you create a POD structure that simply stores some data to be passed from one class to another, then that struct is acting as an &lt;em&gt;interface &lt;/em&gt;- it is a formal &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_definition_language&quot; rel=&quot;external nofollow&quot;&gt;data definition&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Even if you just make a single class in isolation with a &lt;em&gt;public&lt;/em&gt; and a &lt;em&gt;private&lt;/em&gt; section, everything in the public section is the &lt;em&gt;interface&lt;/em&gt; and everything in the private section is the &lt;em&gt;implementation.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Inheritance actually has (at least) two types -- interface inheritance, and implementation inheritance.
&lt;ul&gt;&lt;li&gt;In C++, interface inheritance includes abstract-base-classes with pure-virtual functions, PIMPL, conditional typedefs. In Java, interface inheritance is expressed with the &lt;em&gt;implements&lt;/em&gt; keyword.&lt;/li&gt;
&lt;li&gt;In C++, implementation inheritance occurs any time a base classes contains anything besides pure-virtual functions. In Java, implementation inheritance is expressed with the &lt;em&gt;extends&lt;/em&gt; keyword.&lt;/li&gt;
&lt;li&gt;OOD has a lot to say about interface-inheritance, but implementation-inheritance should usually be treated as a bit of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_smell&quot; rel=&quot;external nofollow&quot;&gt;code smell&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;And lastly I should probably give a few examples of terrible OOP education and how it results in bad code in the wild (and OOP's bad reputation).&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;When you were learning about hierarchies / inheritance, you probably had a task something like:&lt;br/&gt;&lt;strong&gt;&lt;em&gt;Let's say you have a university app that contains a directory of Students and Staff. We can make a Person base class, and then a Student class and a Staff class that inherit from Person!&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;Nope, nope nope. Let me stop you there. The unspoken sub-text beneath the LSP is that &lt;em&gt;class-hierarchies&lt;/em&gt; and &lt;em&gt;the algorithms that operate on them &lt;/em&gt;are symbiotic. They're two halves of a whole program. OOP is an extension of procedural programming, and it's still mainly about those procedures. If we don't know what kinds of algorithms are going to be operating on &lt;em&gt;Students &lt;/em&gt;and &lt;em&gt;Staff&lt;/em&gt; (&lt;em&gt;and which algorithms would be simplified by polymorphism&lt;/em&gt;) then it's downright irresponsible to dive in and start designing class hierarchies. You have to know the algorithms &lt;em&gt;and&lt;/em&gt; the data first.&lt;/li&gt;
&lt;li&gt;When you were learning about hierarchies / inheritance, you probably had a task something like:&lt;br/&gt;&lt;strong&gt;&lt;em&gt;Let's say you have a shape class. We could also have squares and rectangles as sub-classes. Should we have square &lt;/em&gt;is-a&lt;em&gt; rectangle, or &lt;/em&gt;&lt;em&gt;rectangle &lt;/em&gt;is-a&lt;em&gt; square?&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;This is actually a good one to demonstrate the difference between implementation-inheritance and interface-inheritance.
&lt;ul&gt;&lt;li&gt;If you're using the implementation-inheritance mindset, then the LSP isn't on your mind at all and you're only thinking practically about trying to reuse code using inheritance as a tool.&lt;br/&gt;From this perspective, the following makes perfect sense:&lt;br/&gt;struct Square { int width; }; struct Rectangle : Square { int height; };&lt;br/&gt;A square just has width, while rectangle has a width + height, so extending the square with a height member gives us a rectangle!
&lt;ul&gt;&lt;li&gt;As you might have guessed, OOD says that doing this is (&lt;em&gt;probably&lt;/em&gt;) wrong. I say &lt;em&gt;probably&lt;/em&gt; because you can argue over the implied specifications of the interface here... but whatever.&lt;br/&gt;A square always has the same height as its width, so from the square's interface, it's completely valid to assume that its area is &quot;width * width&quot;.&lt;br/&gt;By inheriting from square, the rectangle class (according to the LSP) &lt;strong&gt;must &lt;/strong&gt;obey the rules of square's interface. Any algorithm that works correctly with a square, must also work correctly with a rectangle.&lt;/li&gt;
&lt;li&gt;Take the following algorithm: std::vector&amp;lt;Square*&amp;gt; shapes; int area = 0; for(auto s : shapes) area += s-&amp;gt;width * s-&amp;gt;width;&lt;br/&gt;This will work correctly for squares (producing the sum of their areas), but will not work for rectangles.&lt;br/&gt;Therefore, Rectangle violates the LSP rule.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If you're using the interface-inheritance mindset, then neither Square or Rectangle will inherit from each other. The interface for a square and rectangle are actually different, and one is not a super-set of the other.&lt;/li&gt;
&lt;li&gt;So OOD actually discourages the use of implementation-inheritance. As mentioned before, if you want to re-use code, OOD says that composition is the right way to go!
&lt;ul&gt;&lt;li&gt;For what it's worth though, the &lt;em&gt;correct&lt;/em&gt; version of the above (bad) implementation-inheritance hierarchy code in C++ is:&lt;br/&gt;struct Shape { virtual int area() const = 0; };&lt;br/&gt;struct Square : public virtual Shape { virtual int area() const { return width * width; }; int width; };&lt;br/&gt;struct Rectangle : private Square, public virtual Shape { virtual int area() const { return width * height; }; int height; };
&lt;ul&gt;&lt;li&gt;&quot;public virtual&quot; means &quot;implements&quot; in Java. For use when implementing an interface.&lt;/li&gt;
&lt;li&gt;&quot;private&quot; allows you to extend a base class without also inheriting its interface -- in this case, Rectangle is-&lt;strong&gt;not&lt;/strong&gt;-a Square, even though it's inherited from it.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I don't recommend writing this kind of code, but if you do like to use implementation-inheritance, this is the way that you're supposed to be doing it!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;TL;DR - your OOP class told you what inheritance was. Your missing OOD class should have told you not to use it 99% of the time!&lt;/p&gt;

&lt;p&gt;With all that background out of the way, let's jump into Aras' starting point -- the so called &quot;typical OOP&quot; starting point.&lt;br/&gt;Actually, one last gripe -- Aras calls this code &quot;traditional OOP&quot;, which I object to. This code may be typical of OOP in the wild, but as above, it breaks all sorts of core OO rules, so it should not all all be considered traditional.&lt;/p&gt;
&lt;p&gt;I'm going to start from the earliest commit before he starts fixing the design towards &quot;ECS&quot;: &lt;a href=&quot;https://github.com/aras-p/dod-playground/blob/3529f232510c95f53112bbfff87df6bbc6aa1fae/source/game.cpp&quot; rel=&quot;external nofollow&quot;&gt;&quot;Make it work on Windows again&quot; 3529f232510c95f53112bbfff87df6bbc6aa1fae&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;ipsCode prettyprint lang-c prettyprinted&quot;&gt;
&lt;span class=&quot;com&quot;&gt;// -------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// super simple &quot;component system&quot;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;typedef&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; std&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span&gt;vector&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;ComponentVector&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;typedef&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; std&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span&gt;vector&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GameObjectVector&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Component base class. Knows about the parent game object, and has some virtual methods.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;virtual&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;~&lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;virtual&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;Start&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;virtual&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;Update&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; time&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GetGameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;m_GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GetGameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;m_GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;SetGameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_GameObject &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;HasGameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_GameObject &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Game object class. Has an array of components.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; std&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; name&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_Name&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;~&lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// game object owns the components; destroy them when deleting the game object&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_Components&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// get a component of type T, or null if it does not exist on this game object&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; i &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_Components&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
            T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;dynamic_cast&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&amp;gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// add a new component to this game object&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        assert&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;HasGameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;());&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;SetGameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(*&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        m_Components&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;Start&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_Components&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;Start&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;Update&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; time&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_Components&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;Update&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    std&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;string m_Name&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span&gt;ComponentVector&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_Components&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// The &quot;scene&quot;: array of game objects.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GameObjectVector&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_Objects&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Finds all components of given type in the whole scene&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;ComponentVector&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;FindAllComponentsOfType&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span&gt;ComponentVector&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; res&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_Objects&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
            res&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; res&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Find one component of given type in the scene (returns first found one)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;FindOfType&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_Objects&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ok, 100 lines of code is a lot to dump at once, so let's work through what this is... Another bit of background is required -- it was popular for games in the 90's to use inheritance to solve all their code re-use problems. You'd have an Entity, extended by Character, extended by Player and Monster, etc... This is implementation-inheritance, as described earlier (&lt;em&gt;a code smell&lt;/em&gt;), and it seems like a good idea to begin with, but eventually results in a very inflexible code-base. Hence that OOD has the &quot;composition over inheritance&quot; rule, above. So, in the 2000's the &quot;composition over inheritance&quot; rule became popular, and gamedevs started writing this kind of code instead.&lt;/p&gt;
&lt;p&gt;What does this code do? Well, nothing good &lt;span&gt;&lt;img alt=&quot;:D&quot; data-emoticon=&quot;&quot; height=&quot;20&quot; data-pagespeed-lazy-src=&quot;https://www.gamedev.net/uploads/emoticons/biggrin.png&quot; data-pagespeed-lazy-srcset=&quot;https://www.gamedev.net/uploads/emoticons/biggrin@2x.png 2x&quot; title=&quot;:D&quot; width=&quot;20&quot; src=&quot;https://www.gamedev.net/pagespeed_static/1.JiBnMqyl6S.gif&quot; onload=&quot;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot; onerror=&quot;this.onerror=null;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot;/&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;To put it in simple terms, &lt;strong&gt;this code is re-implementing the existing language feature of composition&lt;/strong&gt; as a runtime library instead of a language feature. You can think of it as if this code is actually constructing a new meta-language on top of C++, and a VM to run that meta-language on. In Aras' demo game, this code is not required (&lt;em&gt;we'll soon delete all of it!&lt;/em&gt;) and only serves to reduce the game's performance by about 10x.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;What does it actually do though? This is an &quot;&lt;strong&gt;E&lt;/strong&gt;ntity/&lt;strong&gt;C&lt;/strong&gt;omponent&quot; framework (&lt;em&gt;sometimes confusingly called an &quot;&lt;strong&gt;E&lt;/strong&gt;ntity/&lt;strong&gt;C&lt;/strong&gt;omponent system&quot;&lt;/em&gt;) -- but completely different to an &quot;&lt;strong&gt;E&lt;/strong&gt;ntity &lt;strong&gt;C&lt;/strong&gt;omponent &lt;strong&gt;S&lt;/strong&gt;ystem&quot; framework (&lt;em&gt;which are never called &quot;&lt;strong&gt;E&lt;/strong&gt;ntity &lt;strong&gt;C&lt;/strong&gt;omponent &lt;strong&gt;S&lt;/strong&gt;ystem systems&quot; for obvious reasons&lt;/em&gt;). It formalizes several &quot;EC&quot; rules:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;the game will be built out of featureless &quot;Entities&quot; (&lt;em&gt;called&lt;/em&gt; GameObjects &lt;em&gt;in this example&lt;/em&gt;), which themselves are composed out of &quot;Components&quot;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;GameObjects fulfill the &lt;a href=&quot;https://en.wikipedia.org/wiki/Service_locator_pattern&quot; rel=&quot;external nofollow&quot;&gt;service locator pattern&lt;/a&gt; -  they can be queried for a child component by type. &lt;/li&gt;
&lt;li&gt;Components know which GameObject they belong to - they can locate sibling componets by querying their parent GameObject.&lt;/li&gt;
&lt;li&gt;Composition may only be one level deep (&lt;em&gt;Components may not own child components, GameObjects may not own child GameObjects&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;A GameObject may only have one component of each type (&lt;em&gt;some frameworks enforced this, others did not&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Every component (probably) changes over time in some unspecified way - so the interface includes &quot;virtual void Update&quot;.&lt;/li&gt;
&lt;li&gt;GameObjects belong to a scene, which can perform queries over all GameObjects (and thus also over all Components).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This kind of framework was very popular in the 2000's, and though restrictive, proved flexible enough to power countless numbers of games from that time and still today.&lt;/p&gt;
&lt;p&gt;However, it's not required. Your programming language already contains support for composition as a language feature - you don't need a bloated framework to access it... Why do these frameworks exist then? Well to be fair, they enable &lt;em&gt;dynamic, runtime&lt;/em&gt; composition. Instead of GameObject types being hard-coded, they can be loaded from data files. This is great to allow game/level designers to create their own kinds of objects... However, in most game projects, you have a very small number of designers on a project and a literal army of programmers, so I would argue it's not a key feature. Worse than that though, it's not even the only way that you could implement runtime composition! For example, Unity is based on C# as a &quot;scripting language&quot;, and many other games use alternatives such as Lua -- your designer-friendly tool can generate C#/Lua code to define new game-objects, without the need for this kind of bloated framework! We'll re-add this &quot;feature&quot; in a later follow-up post, in a way that doesn't cost us a 10x performance overhead...&lt;/p&gt;
&lt;p&gt;Let's evaluate this code according to OOD:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;GameObject::GetComponent uses dynamic_cast. Most people will tell you that dynamic_cast is a code smell - a strong hint that something is wrong. I would say that it indicates that you have an &lt;a href=&quot;https://en.wikipedia.org/wiki/Liskov_substitution_principle&quot; rel=&quot;external nofollow&quot;&gt;LSP&lt;/a&gt; violation on your hands -- you have some algorithm that's operating on the base interface, but it demands to know about different implementation details. That's the specific reason that it smells.&lt;/li&gt;
&lt;li&gt;GameObject is kind of ok if you imagine that it's fulfilling the service locator pattern.... but going beyond OOD critique for a moment, this pattern creates implicit links between parts of the project, and I feel (&lt;em&gt;without a wikipedia link to back me up with comp-sci knowledge&lt;/em&gt;) that implicit communication channels are an &lt;a href=&quot;https://en.wikipedia.org/wiki/Anti-pattern&quot; rel=&quot;external nofollow&quot;&gt;anti-pattern&lt;/a&gt; and explicit communication channels should be preferred. This same argument applies to bloated &quot;event frameworks&quot; that sometimes appear in games...&lt;/li&gt;
&lt;li&gt;I would argue that Component is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot; rel=&quot;external nofollow&quot;&gt;SRP&lt;/a&gt; violation because its interface (&lt;em&gt;virtual void Update(time)&lt;/em&gt;) is too broad. The use of &quot;virtual void Update&quot; is pervasive within game development, but I'd also say that it is an anti-pattern. Good software should allow you to easily reason about the flow of control, and the flow of data. Putting &lt;em&gt;every single bit of gameplay code&lt;/em&gt; behind a &quot;virtual void Update&quot; call completely and utterly obfuscates both the flow of control and the flow of data. IMHO, invisible &lt;a href=&quot;https://en.wikipedia.org/wiki/Side_effect_(computer_science)&quot; rel=&quot;external nofollow&quot;&gt;side effects&lt;/a&gt;, a.k.a. &lt;a href=&quot;https://en.wikipedia.org/wiki/Action_at_a_distance_(computer_programming)&quot; rel=&quot;external nofollow&quot;&gt;action at a distance&lt;/a&gt;, is the most common source of bugs, and &quot;virtual void Update&quot; ensures that almost everything is an invisible side-effect.&lt;/li&gt;
&lt;li&gt;Even though the goal of the Component class is to enable composition, it's doing so via inheritance, which is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Composition_over_inheritance&quot; rel=&quot;external nofollow&quot;&gt;CRP&lt;/a&gt; violation.&lt;/li&gt;
&lt;li&gt;The one good part is that the example game code is bending over backwards to fulfill the SRP and ISP rules -- it's split into a large number of simple components with very small responsibilities, which is great for code re-use.&lt;br/&gt;However, it's not great as DIP -- many of the components do have direct knowledge of each other.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;So, all of the code that I've posted above, can actually just be deleted. That whole framework. Delete GameObject (aka Entity in other frameworks), delete Component, delete FindOfType. It's all part of a useless VM that's breaking OOD rules and making our game terribly slow.&lt;/p&gt;

&lt;p&gt;If we delete our composition framework, and don't have a Component base class, how will our GameObjects manage to use composition and be built out of Components. As hinted in the heading, instead of writing that bloated VM and then writing our GameObjects on top of it in our weird meta-language, let's just write them in C++ because we're #*@!ing game programmers and that's literally our job.&lt;/p&gt;
&lt;p&gt;Here's the commit where the Entity/Component framework is deleted: &lt;a href=&quot;https://github.com/hodgman/dod-playground/commit/f42290d0217d700dea2ed002f2f3b1dc45e8c27c&quot; rel=&quot;external nofollow&quot;&gt;https://github.com/hodgman/dod-playground/commit/f42290d0217d700dea2ed002f2f3b1dc45e8c27c&lt;/a&gt;&lt;br/&gt;Here's the original version of the source code: &lt;a href=&quot;https://github.com/hodgman/dod-playground/blob/3529f232510c95f53112bbfff87df6bbc6aa1fae/source/game.cpp&quot; rel=&quot;external nofollow&quot;&gt;https://github.com/hodgman/dod-playground/blob/3529f232510c95f53112bbfff87df6bbc6aa1fae/source/game.cpp&lt;/a&gt;&lt;br/&gt;Here's the modified version of the source code: &lt;a href=&quot;https://github.com/hodgman/dod-playground/blob/f42290d0217d700dea2ed002f2f3b1dc45e8c27c/source/game.cpp&quot; rel=&quot;external nofollow&quot;&gt;https://github.com/hodgman/dod-playground/blob/f42290d0217d700dea2ed002f2f3b1dc45e8c27c/source/game.cpp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The gist of the changes is:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Removing &quot;: public Component&quot; from each component type.&lt;/li&gt;
&lt;li&gt;I add a constructor to each component type.
&lt;ul&gt;&lt;li&gt;OOD is about encapsulating the state of a class, but since these classes are so small/simple, there's not much to hide -- the interface is a data description. However, one of the main reasons that encapsulation is a core pillar is that it allows us to ensure that &lt;a href=&quot;https://en.wikipedia.org/wiki/Class_invariant&quot; rel=&quot;external nofollow&quot;&gt;class invariants&lt;/a&gt; are always true... or in the event that an invariant is violated, you hopefully only need to inspect the encapsulated implementation code in order to find your bug. In this example code, it's worth us adding the constructors to enforce a simple invariant -- all values must be initialized.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I rename the overly generic &quot;Update&quot; methods to reflect what they actually do -- UpdatePosition for MoveComponent and ResolveCollisions for AvoidComponent.&lt;/li&gt;
&lt;li&gt;I remove the three hard-coded blocks of code that resemble a template/prefab -- code that creates a GameObject containing specific Component types, and replace it with three C++ classes.&lt;/li&gt;
&lt;li&gt;Fix the &quot;virtual void Update&quot; anti-pattern.&lt;/li&gt;
&lt;li&gt;Instead of components finding each other via the service locator pattern, the game objects explicitly link them together during construction.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;The objects&lt;/h2&gt;
&lt;p&gt;So, instead of this &quot;VM&quot; code:&lt;/p&gt;
&lt;pre class=&quot;ipsCode prettyprint lang-c prettyprinted&quot;&gt;
&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// create regular objects that move&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; i &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; i &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; kObjectCount&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&quot;object&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// position it within world bounds&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;PositionComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; pos &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;PositionComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;RandomFloat&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xMin&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xMax&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;y &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;RandomFloat&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;yMin&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;yMax&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// setup a sprite for it (random sprite index from first 5), and initial white color&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;SpriteComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; sprite &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;SpriteComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;colorR &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;colorG &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;colorB &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;spriteIndex &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; rand&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;scale &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// make it move&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;MoveComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; move &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;MoveComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0.5f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0.7f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// make it avoid the bubble things&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;AvoidComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; avoid &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;AvoidComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;avoid&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

        s_Objects&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We now have this normal C++ code:&lt;/p&gt;
&lt;pre class=&quot;ipsCode prettyprint lang-c prettyprinted&quot;&gt;
&lt;span class=&quot;kwd&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;RegularObject&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;PositionComponent&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;SpriteComponent&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;MoveComponent&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; move&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;AvoidComponent&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; avoid&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        
    &lt;/span&gt;&lt;span&gt;RegularObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;WorldBoundsComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; move&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0.5f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0.7f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// position it within world bounds&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span&gt;RandomFloat&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xMin&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xMax&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                      &lt;/span&gt;&lt;span&gt;RandomFloat&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;yMin&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;yMax&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// setup a sprite for it (random sprite index from first 5), and initial white color&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                         &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                         &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                         rand&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                         &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
  
&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// create regular objects that move&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
regularObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;kObjectCount&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; i &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; i &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; kObjectCount&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        regularObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;The algorithms&lt;/h2&gt;
&lt;p&gt;Now the other big change is in the algorithms. Remember at the start when I said that interfaces and algorithms were symbiotic, and both should impact the design of the other? Well, the &quot;&lt;em&gt;virtual void Update&lt;/em&gt;&quot; anti-pattern is also an enemy here. The original code has a main loop algorithm that consists of just:&lt;/p&gt;
&lt;pre class=&quot;ipsCode prettyprint lang-c prettyprinted&quot;&gt;
&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// go through all objects&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_Objects&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Update all their components&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;Update&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You might argue that this is nice and simple, but IMHO it's so, so bad. It's completely obfuscating both the &lt;em&gt;flow of control&lt;/em&gt; and the &lt;em&gt;flow of data&lt;/em&gt; within the game. If we want to be able to understand our software, if we want to be able to maintain it, if we want to be able to bring on new staff, if we want to be able to optimise it, or if we want to be able to make it run efficiently on multiple CPU cores, we need to be able to understand both the flow of control and the flow of data. So &quot;virtual void Update&quot; can die in a fire.&lt;/p&gt;
&lt;p&gt;Instead, we end up with a more explicit main loop that makes the flow of control much more easy to reason about (&lt;em&gt;the flow of data is still obfuscated here, we'll get around to fixing that in later commits&lt;/em&gt;)&lt;/p&gt;
&lt;pre class=&quot;ipsCode prettyprint lang-c prettyprinted&quot;&gt;
&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Update all positions&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_game&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;regularObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span&gt;UpdatePosition&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_game&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_game&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;avoidThis&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span&gt;UpdatePosition&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_game&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        
        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Resolve all collisions&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_game&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;regularObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span&gt;ResolveCollisions&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_game&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;avoidThis&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The downside of this style is that for &lt;em&gt;every single new object&lt;/em&gt; &lt;em&gt;type&lt;/em&gt; that we add to the game, we have to add a few lines to our main loop. I'll address / solve this in a future blog in this series.&lt;/p&gt;

&lt;p&gt;There's still a lot of outstanding OOD violations, some bad design choices, and lots of optimization opportunities remaining, but I'll get to them with the next blog in this series. As it stands at this point though, the &quot;fixed OOD&quot; version either almost matches or beats the final &quot;ECS&quot; code from the end of the presentation... And all we did was take the bad faux-OOP code and make it actually obey the rules of OOP (and delete 100 lines of code)!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;dod-chart1.png.0c63b0194df0f816028ace719b898cd3.png&quot; class=&quot;ipsImage ipsImage_thumbnailed&quot; data-fileid=&quot;48145&quot; data-pagespeed-lazy-src=&quot;https://www.gamedev.net/uploads/monthly_2018_10/dod-chart1.png.0c63b0194df0f816028ace719b898cd3.png&quot; src=&quot;https://www.gamedev.net/pagespeed_static/1.JiBnMqyl6S.gif&quot; onload=&quot;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot; onerror=&quot;this.onerror=null;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot;/&gt;&lt;/p&gt;

&lt;p&gt;There's much more ground that I'd like to cover here, including solving the remaining OOD issues, immutable objects (&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot; rel=&quot;external nofollow&quot;&gt;functional style programming&lt;/a&gt;) and the benefits it can bring to reasoning about data flows, message passing, applying some DOD reasoning to our OOD code, applying some relational wisdom to our OOD code, deleting those &quot;entity&quot; classes that we ended up with and having purely components-only, different styles of linking components together (pointers vs handles), real world component containers, catching up to the ECS version with more optimization, and then further optimization that wasn't also present in Aras' talk (&lt;em&gt;such as threading / SIMD&lt;/em&gt;). No promises on the order that I'll get to these, or if, or when...&lt;/p&gt;

</description>
<pubDate>Thu, 18 Oct 2018 17:26:06 +0000</pubDate>
<dc:creator>starbugs</dc:creator>
<og:image>https://www.gamedev.net/uploads/monthly_2018_06/1057075231_banner_22_racing_series_video_game_real_time_strategy_racing-21.jpg.778e08f6121d36719d78a99f52ad080e.jpg</og:image>
<og:title>OOP is dead, long live OOP</og:title>
<og:type>object</og:type>
<og:url>https://www.gamedev.net/blogs/entry/2265481-oop-is-dead-long-live-oop/</og:url>
<og:description>edit: Seeing this has been linked outside of game-development circles: ECS (this wikipedia page is garbage, btw -- it conflates EC-frameworks and ECS-frameworks, which arent the same...) is a faux-pattern circulated within game-dev communities, which is basically a version of the relational model...</og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.gamedev.net/blogs/entry/2265481-oop-is-dead-long-live-oop/</dc:identifier>
</item>
<item>
<title>Encrypted SNI Comes to Firefox Nightly</title>
<link>https://blog.mozilla.org/security/2018/10/18/encrypted-sni-comes-to-firefox-nightly/</link>
<guid isPermaLink="true" >https://blog.mozilla.org/security/2018/10/18/encrypted-sni-comes-to-firefox-nightly/</guid>
<description>&lt;p&gt;TL;DR: Firefox Nightly now supports encrypting the &lt;a href=&quot;https://tools.ietf.org/rfcmarkup?doc=6066#section-3&quot;&gt;TLS Server Name Indication (SNI)&lt;/a&gt; extension, which helps prevent attackers on your network from learning your browsing history. You can enable encrypted SNI today and it will automatically work with any site that supports it. Currently, that means any site hosted by &lt;a href=&quot;https://blog.cloudflare.com/encrypt-that-sni-firefox-edition/&quot;&gt;Cloudflare&lt;/a&gt;, but we’re hoping other providers will add ESNI support soon.&lt;/p&gt;
&lt;h3&gt;Concealing Your Browsing History&lt;/h3&gt;
&lt;p&gt;Although an increasing fraction of Web traffic is &lt;a href=&quot;https://letsencrypt.org/stats/#percent-pageloads&quot;&gt;encrypted with HTTPS&lt;/a&gt;, that encryption isn’t enough to prevent network attackers from learning which sites you are going to. It’s true that HTTPS conceals the exact page you’re going to, but there are a number of ways in which the site’s identity leaks. This can itself be sensitive information: do you want the person at the coffee shop next to you to know you’re visiting cancer.org?&lt;/p&gt;
&lt;p&gt;There are four main ways in which browsing history information leaks to the network: the TLS certificate message,  DNS name resolution, the IP address of the server, and the TLS Server Name Indication extension. Fortunately, we’ve made good progress shutting down the first two of these: The new TLS 1.3 standard encrypts the server certificate by default and over the past several months, we’ve been &lt;a href=&quot;https://blog.mozilla.org/futurereleases/2018/09/13/dns-over-https-doh-testing-on-beta/&quot;&gt;exploring&lt;/a&gt; the use of DNS over HTTPS to protect DNS traffic. This is looking good and we are hoping to roll it out to all Firefox users over the coming months. The IP address remains a problem, but in many cases, multiple sites share the same IP address, so that leaves SNI.&lt;/p&gt;
&lt;h3&gt;Why do we need SNI anyway and why didn’t this get fixed before?&lt;/h3&gt;
&lt;p&gt;Ironically, the reason you need an SNI field is &lt;em&gt;because&lt;/em&gt; multiple servers share the same IP address. When you connect to the server, it needs to give you the right certificate to prove that you’re connecting to a legitimate server and not an attacker. However, if there is more than one server on the same IP address, then which certificate should it choose? The SNI field tells the server which host name you are trying to connect to, allowing it to choose the right certificate. In other words, SNI helps make large-scale TLS hosting work.&lt;/p&gt;
&lt;p&gt;We’ve known that SNI was a privacy problem from the beginning of TLS 1.3. The basic idea is easy: encrypt the SNI field (hence “encrypted SNI” or ESNI). Unfortunately every design we tried had drawbacks. The technical details are kind of complicated, but the basic story isn’t: every design we had for ESNI involved some sort of performance tradeoff and so it looked like only sites which were “sensitive” (i.e., you might want to conceal you went there) would be willing to enable ESNI. As you can imagine, that defeats the point, because if only sensitive sites use ESNI, then just using ESNI is itself a signal that your traffic demands a closer look. So, despite a lot of enthusiasm, we eventually decided to publish TLS 1.3 without ESNI.&lt;/p&gt;
&lt;p&gt;However, at the beginning of this year, we realized that there was actually a pretty good 80-20 solution: big Content Distribution Networks (CDNs) host a lot of sites all on the same machines. If they’re willing to convert all their customers to ESNI at once, then suddenly ESNI no longer reveals  a useful signal because the attacker can see what CDN you are going to anyway. This realization broke things open and enabled a &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-tls-esni-01&quot;&gt;design&lt;/a&gt; for how to make ESNI work in TLS 1.3 (see Alessandro Ghedini’s &lt;a href=&quot;https://blog.cloudflare.com/encrypted-sni/&quot;&gt;writeup&lt;/a&gt; of the technical details.) Of course, this only works if you can mass-configure all the sites on a given set of servers, but that’s a pretty common configuration.&lt;/p&gt;
&lt;h3&gt;How do I get it?&lt;/h3&gt;
&lt;p&gt;This is brand-new technology and Firefox is the first browser to get it. At the moment we’re not ready to turn it on for all Firefox users. However, Nightly users can try out this enhancing feature now by performing the following steps: First, you need to make sure you have DNS over HTTPS enabled (see: &lt;a href=&quot;https://blog.nightly.mozilla.org/2018/06/01/improving-dns-privacy-in-firefox/&quot;&gt;https://blog.nightly.mozilla.org/2018/06/01/improving-dns-privacy-in-firefox/&lt;/a&gt;). Once you’ve done that, you also need to set the “network.security.esni.enabled” preference in about:config to “true”). This should automatically enable ESNI for any site that supports it. Right now, that’s just Cloudflare, which has enabled ESNI for all its customers, but we’re hoping that other providers will follow them. You can go to: &lt;a href=&quot;https://www.cloudflare.com/ssl/encrypted-sni/&quot;&gt;https://www.cloudflare.com/ssl/encrypted-sni/&lt;/a&gt; to check for yourself that it’s working.&lt;/p&gt;
&lt;h3&gt;What’s Next?&lt;/h3&gt;
&lt;p&gt;During the development of TLS 1.3 we found a number of problems where network devices (typically firewalls and the like) would break when you tried to use TLS 1.3. We’ve been pretty careful about the design, but it’s possible that we’ll see similar problems with ESNI. In order to test this, we’ll be running a set of experiments over the next few months and measuring for breakage. We’d also love to hear from you: if you enable ESNI and it works or causes any problems, &lt;a href=&quot;https://bugzilla.mozilla.org/enter_bug.cgi?format=guided#h=bugForm%7CCore%7CNetworking&quot;&gt;please let us know.&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 18 Oct 2018 17:14:51 +0000</pubDate>
<dc:creator>okket</dc:creator>
<og:title>Encrypted SNI Comes to Firefox Nightly</og:title>
<og:url>https://blog.mozilla.org/security/2018/10/18/encrypted-sni-comes-to-firefox-nightly/</og:url>
<og:description>TL;DR: Firefox Nightly now supports encrypting the TLS Server Name Indication (SNI) extension, which helps prevent attackers on your network from learning your browsing history. ...</og:description>
<og:image>https://blog.mozilla.org/security/wp-content/themes/OneMozilla/img/mozilla-wordmark.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.mozilla.org/security/2018/10/18/encrypted-sni-comes-to-firefox-nightly/</dc:identifier>
</item>
<item>
<title>Calculus Made Easy (1910)</title>
<link>http://calculusmadeeasy.org/</link>
<guid isPermaLink="true" >http://calculusmadeeasy.org/</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;title&gt;Calculus Made Easy&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;screen.css&quot; type=&quot;text/css&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; media=&quot;only screen and (max-device-width: 480px)&quot; href=&quot;mobile.css&quot; type=&quot;text/css&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;25.501064584812&quot;&gt;
&lt;hgroup&gt;
&lt;h2&gt;by&lt;br/&gt;Silvanus P. Thompson&lt;/h2&gt;
&lt;/hgroup&gt;&lt;center&gt;
&lt;h4&gt;What one fool can do, another can.&lt;/h4&gt;
&lt;/center&gt;
&lt;center&gt;
&lt;h5&gt;(Ancient Simian Proverb.)&lt;/h5&gt;
&lt;/center&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;div class=&quot;pf clear&quot; readability=&quot;11.561822125813&quot;&gt;
&lt;h4&gt;About this book&lt;/h4&gt;
&lt;blockquote class=&quot;note&quot; readability=&quot;6.6315789473684&quot;&gt;
&lt;p&gt;Calculus Made Easy is a book on calculus originally published in 1910 by Silvanus P. Thompson, considered a classic and elegant introduction to the subject.&lt;/p&gt;

&lt;/blockquote&gt;
&lt;blockquote class=&quot;note&quot; readability=&quot;7.0545454545455&quot;&gt;
&lt;p&gt;I read &quot;Calculus Made Easy&quot; by Silvanus P. Thompson and it's still to this day my inspiration for explaining complex technical topics to lay people. It's a fantastic book, and even if you know math you &lt;em&gt;must&lt;/em&gt; read it if you want to understand how to teach complexity to others. &lt;small&gt;&lt;em&gt;&lt;a href=&quot;http://news.ycombinator.com/item?id=1299805&quot;&gt;(source)&lt;/a&gt;&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;/blockquote&gt;
&lt;blockquote class=&quot;note&quot; readability=&quot;6.1967213114754&quot;&gt;
&lt;p&gt;Thompson creates a warm, inviting environment where students will learn and grasp the true essence of calculus without any added fluff or overt technicality. &lt;small&gt;&lt;em&gt;&lt;a href=&quot;http://math-blog.com/mathematics-books/&quot;&gt;(source)&lt;/a&gt;&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;/blockquote&gt;
&lt;blockquote class=&quot;note&quot; readability=&quot;6.3698630136986&quot;&gt;
&lt;p&gt;Most college calculus texts weigh a ton; this one does not — it just gets to the point. This is how I learned calculus: my uncle gave me a copy. &lt;small&gt;&lt;em&gt;&lt;a href=&quot;http://math.ucr.edu/home//baez/books.html&quot;&gt;(source)&lt;/a&gt;&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;/blockquote&gt;
&lt;/div&gt;
&lt;h3&gt;Buy paper version&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/gp/product/0312185480/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0312185480&amp;amp;linkCode=as2&amp;amp;tag=calculusma00d-20&amp;amp;linkId=349b72d6c16a7a454af34fe78ba419c4&quot;&gt;&lt;img class=&quot;cover&quot; src=&quot;http://calculusmadeeasy.org/cover.jpg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/gp/product/0312185480/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0312185480&amp;amp;linkCode=as2&amp;amp;tag=calculusma00d-20&amp;amp;linkId=349b72d6c16a7a454af34fe78ba419c4&quot;&gt;On Amazon.com&lt;/a&gt;*&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.shareasale.com/r.cfm?u=740877&amp;amp;b=385748&amp;amp;m=40674&amp;amp;afftrack=&amp;amp;urllink=www%2Ebiblio%2Ecom%2Fsearch%2Ephp%3Ftitle%3Dcalculus%2Bmade%2Beasy&quot;&gt;Second hand from Biblio.com&lt;/a&gt;*&lt;/p&gt;
&lt;h3&gt;What next?&lt;/h3&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Visual-Complex-Analysis-Tristan-Needham/dp/0198534469/ref=as_li_ss_tl?ie=UTF8&amp;amp;linkCode=ll1&amp;amp;tag=calculusmad0b-20&amp;amp;linkId=36f5fedef340e5c0c152cf95aa4f00c6&amp;amp;language=en_US&quot;&gt;&lt;img class=&quot;cover&quot; src=&quot;http://calculusmadeeasy.org/needham.jpg&quot; width=&quot;186&quot;/&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Visual-Complex-Analysis-Tristan-Needham/dp/0198534469/ref=as_li_ss_tl?ie=UTF8&amp;amp;linkCode=ll1&amp;amp;tag=calculusmad0b-20&amp;amp;linkId=36f5fedef340e5c0c152cf95aa4f00c6&amp;amp;language=en_US&quot;&gt;Visual Complex Analysis&lt;/a&gt;* is legendary. Just as Calculus Made Easy it uses geometrical approach instead of usual symbolic one.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;small&gt;&lt;small&gt;* Affiliate link&lt;/small&gt;&lt;/small&gt;&lt;/p&gt;
&lt;h3&gt;About this edition &amp;amp; thanks&lt;/h3&gt;
&lt;p&gt;The text is based on &lt;a href=&quot;http://www.gutenberg.org/ebooks/33283&quot;&gt;the PDF version&lt;/a&gt; from Project Gutenberg converted to html by hand.&lt;/p&gt;
&lt;p&gt;Thanks to Paula Appling, Don Bindner, Chris Curnow, Andrew D. Hwang and Project Gutenberg Online Distributed Proofreading Team for preparing the original PDF.&lt;/p&gt;
&lt;p&gt;The theme is borrowed from &lt;a href=&quot;http://diveinto.html5doctor.com/&quot;&gt;Dive Into HTML5&lt;/a&gt; by &lt;a href=&quot;http://diveintohtml5.info/about.html&quot;&gt;Mark Pilgrim&lt;/a&gt; released under the &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;CC-BY-3.0&lt;/a&gt; license.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://diveintohtml5.info/legal.html&quot;&gt;Full legal notices&lt;/a&gt;. &lt;a href=&quot;https://github.com/nadvornix/calculus-made-easy&quot;&gt;Github page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please send corrections, suggestions and comments on nadvornik.jiri@gmail.com &lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Thu, 18 Oct 2018 17:03:04 +0000</pubDate>
<dc:creator>luisb</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://calculusmadeeasy.org/</dc:identifier>
</item>
<item>
<title>Paper Airplane Designs</title>
<link>https://www.foldnfly.com/</link>
<guid isPermaLink="true" >https://www.foldnfly.com/</guid>
<description>&lt;p&gt;A database of paper airplanes with easy to follow folding instructions.&lt;/p&gt;













&lt;div class=&quot;plane tag_duration tag_acrobatic diff1 cut0&quot; readability=&quot;6.4444444444444&quot;&gt;&lt;a href=&quot;https://www.foldnfly.com/13.html#The-UFO&quot; title=&quot;This plane is shaped like a flying saucer.&quot;&gt;&lt;strong&gt;The UFO&lt;/strong&gt;&lt;/a&gt;
&lt;p&gt;&lt;span class=&quot;diff&quot;&gt;Medium&lt;/span&gt; time aloft, acrobatic&lt;/p&gt;
&lt;/div&gt;








&lt;div class=&quot;plane tag_distance tag_duration tag_acrobatic diff3 cut1&quot; readability=&quot;7.3125&quot;&gt;&lt;a href=&quot;https://www.foldnfly.com/21.html#Fast-Hawk&quot; title=&quot;Here is another bird like plane.&quot;&gt;&lt;strong&gt;Fast Hawk&lt;/strong&gt;&lt;/a&gt;
&lt;p&gt;&lt;span class=&quot;diff&quot;&gt;Expert&lt;/span&gt; distance, time aloft, acrobatic&lt;/p&gt;
&lt;/div&gt;


















&lt;div class=&quot;plane tag_distance tag_duration diff1 cut0&quot; readability=&quot;6.5882352941176&quot;&gt;&lt;a href=&quot;https://www.foldnfly.com/39.html#V-Wing&quot; title=&quot;Like a spy plane, this paper plane flies quietly and smoothly.&quot;&gt;&lt;strong&gt;V-Wing&lt;/strong&gt;&lt;/a&gt;
&lt;p&gt;&lt;span class=&quot;diff&quot;&gt;Medium&lt;/span&gt; distance, time aloft&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Nothing matched your selection. Please change your filters to find a paper airplane.&lt;/p&gt;
</description>
<pubDate>Thu, 18 Oct 2018 16:34:52 +0000</pubDate>
<dc:creator>wilsonfiifi</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.foldnfly.com/</dc:identifier>
</item>
<item>
<title>An Introduction to GPU Programming in Julia</title>
<link>https://nextjournal.com/sdanisch/julia-gpu-programming</link>
<guid isPermaLink="true" >https://nextjournal.com/sdanisch/julia-gpu-programming</guid>
<description>&lt;head&gt;&lt;title/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;1967.5140174729&quot;&gt;
&lt;p&gt;[&quot;^ &quot;,&quot;~:view-data&quot;,[&quot;^ &quot;,&quot;~:article-access?&quot;,false,&quot;~:article&quot;,[&quot;^ &quot;,&quot;~:db/id&quot;,17592186649289,&quot;~:nextjournal/id&quot;,&quot;~u0287c2e0-a8ac-4929-b5ab-9efe94bac3c4&quot;,&quot;~:article/name&quot;,&quot;julia-gpu-programming&quot;,&quot;~:article/published-at&quot;,&quot;~m1539888386536&quot;,&quot;~:article/profile&quot;,[&quot;^ &quot;,&quot;^3&quot;,17592186045492,&quot;~:profile/handle&quot;,&quot;sdanisch&quot;,&quot;~:profile/name&quot;,&quot;Simon Danisch&quot;],&quot;~:article/change&quot;,[&quot;^ &quot;,&quot;^3&quot;,17592187039877,&quot;^4&quot;,&quot;~u5bc8d4e7-dd64-44c1-bb80-8271c2baa849&quot;,&quot;~:change/inserted-at&quot;,&quot;~m1539888359297&quot;],&quot;~:article/published-change&quot;,[&quot;^ &quot;,&quot;^3&quot;,17592187039877,&quot;^4&quot;,&quot;~u5bc8d4e7-dd64-44c1-bb80-8271c2baa849&quot;,&quot;^;&quot;,&quot;~m1539888359297&quot;],&quot;~:article/title&quot;,&quot;An Introduction to GPU Programming in Julia &quot;,&quot;~:article/preview&quot;,&quot;QmQtLzEYY97Rme9aS5Wsacg6PGwdPLdvmV1e6k2d8bj8y8&quot;],&quot;~:article-contents&quot;,[&quot;^ &quot;,&quot;^2&quot;,[&quot;^ &quot;,&quot;~:root&quot;,&quot;3950cb96-1122-4d9f-8b74-7168fb77849a&quot;,&quot;~:nodes&quot;,[&quot;^ &quot;,&quot;403a6184-13b5-4d48-8e5c-3612ce2ea5d1&quot;,[&quot;^ &quot;,&quot;~:id&quot;,&quot;403a6184-13b5-4d48-8e5c-3612ce2ea5d1&quot;,&quot;~:kind&quot;,&quot;text&quot;,&quot;~:content&quot;,&quot;&quot;],&quot;d0caaf8f-5c0b-4c0e-8b9e-1bd2e2e99aed&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;d0caaf8f-5c0b-4c0e-8b9e-1bd2e2e99aed&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;This article aims to give a quick introduction about how GPUs work and specifically give an overlook of the current Julia GPU ecosystem and how easy it is to get simple GPU programs running. To make things easier, you can run all the code samples directly in the article if you have an &lt;a href=&quot;/&amp;quot;https://nextjournal.com/signup?code=juliacon/&amp;quot;&quot;&gt;account&lt;/a&gt; and click on &lt;strong&gt;edit&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;e01448e0-7630-4c6a-b415-050bd4b37efa&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;e01448e0-7630-4c6a-b415-050bd4b37efa&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;The function that makes this possible is named &lt;code&gt;&lt;em&gt;gpu_call&lt;/em&gt;&lt;/code&gt;. It can be called as &lt;code&gt;gpu_call(kernel, A::GPUArray, args)&lt;/code&gt; and will call &lt;code&gt;kernel&lt;/code&gt; with the arguments &lt;code&gt;(state, args...)&lt;/code&gt; on the GPU. State is a backend specific object to implement functionality like getting the thread index. A GPUArray needs to get passed as the second argument to dispatch to the correct backend and supply the defaults for the launch parameters.&lt;/p&gt;
&lt;p&gt;Lets use &lt;code&gt;gpu_call&lt;/code&gt; to implement a simple map kernel:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;5b06a745-4830-4b8e-a5b2-df8449cef3b3&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;struct Test # an immutable struct\n# that only contains other immutable, which makes \n# isbitstype(Test) == true\n\tx::Float32 \nend\n\n# the isbits property is important, since those types can be used\n# without constraints on the GPU!\n@assert isbitstype(Test) == true\nx = (2, 2)\nisa(x, Tuple{Int, Int}) # tuples are also immutable\nmutable struct Test2 #-&amp;gt; mutable, isbits(Test2) == false\n\tx::Float32\nend\nstruct Test3\n\t# contains a heap allocation/ reference, not isbits\n\tx::Vector{Float32}\n\ty::Test2 # Test2 is mutable and also heap allocated / a reference\nend\nVector{Test} # &amp;lt;- Array with isbits elements is contigious in memory\nVector{Test2} # &amp;lt;- Array with mutable elements is basically a linked list, since it just contains the pointer to its elements and won't work with the GPU.&quot;,&quot;~:refs&quot;,[&quot;~#list&quot;,[]],&quot;~:name&quot;,&quot;Structs&quot;,&quot;~:output-log-lines&quot;,[&quot;^ &quot;],&quot;~:language&quot;,&quot;julia&quot;,&quot;^C&quot;,&quot;5b06a745-4830-4b8e-a5b2-df8449cef3b3&quot;,&quot;~:compute-ref&quot;,&quot;~u550ca310-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;~:runtime&quot;,[&quot;^O&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^D&quot;,&quot;code&quot;,&quot;~:outputs&quot;,[&quot;^ &quot;,&quot;~_&quot;,[&quot;^ &quot;,&quot;^D&quot;,&quot;data&quot;,&quot;^K&quot;,null,&quot;~:coder&quot;,&quot;json&quot;,&quot;~:blob&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;Qmf95KPCz5ETEtBLXzBqZ3rh6zFk3eQNWQog7nBVwJotNS&quot;,&quot;~:size&quot;,16,&quot;~:content-type&quot;,&quot;application/json&quot;]]],&quot;~:error&quot;,null,&quot;~:exec-duration&quot;,843,&quot;~:bucket&quot;,null],&quot;4e09f815-feab-4f09-8d9f-e63eba843aa2&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;4e09f815-feab-4f09-8d9f-e63eba843aa2&quot;,&quot;^D&quot;,&quot;section&quot;,&quot;~:title&quot;,&quot; The GPUArray Constructors&quot;,&quot;^E&quot;,[&quot;^J&quot;,[&quot;07d732ed-7e58-4970-af4a-16701813f0ee&quot;]],&quot;~:sections&quot;,[&quot;^J&quot;,[]]],&quot;90e93106-c175-437c-a107-fb911bf59788&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;90e93106-c175-437c-a107-fb911bf59788&quot;,&quot;^D&quot;,&quot;section&quot;,&quot;^Y&quot;,&quot;Garbage Collection&quot;,&quot;^E&quot;,[&quot;^J&quot;,[&quot;fe642bca-b571-4183-a38a-1e937833a4d8&quot;,&quot;24e4194b-b6fd-43c4-b876-cc6b6aea8403&quot;,&quot;f9c22c0d-fa74-4a04-a4a8-52ccfea9b2d7&quot;]],&quot;^Z&quot;,[&quot;^J&quot;,[]]],&quot;8d00da3d-dc4d-47b0-9f8b-eb26e505d889&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;8d00da3d-dc4d-47b0-9f8b-eb26e505d889&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;There are &lt;a href=&quot;/&amp;quot;https://juliagpu.github.io/GPUShowcases.jl/latest/index.html/&amp;quot;&quot;&gt;many more use cases&lt;/a&gt;, including solving differential equations, FEM simulations, and &lt;a href=&quot;/&amp;quot;http://www.stochasticlifestyle.com/solving-systems-stochastic-pdes-using-gpus-julia//&amp;quot;&quot;&gt;solving PDEs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;6b8c8d02-f072-4454-9687-1e0b795d9e47&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;6b8c8d02-f072-4454-9687-1e0b795d9e47&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A GPU is a separate piece of hardware with its own memory space and different architecture. As a result, there are long transfer times from RAM to the GPUs memory (VRAM). Even launching a kernel on the GPU (in other words scheduling a function call) introduces large latencies. Times are around ~10us for GPUs, compared to a few nano seconds on a CPU&lt;/li&gt;
&lt;li&gt;Setting up a kernel can quickly become complicated without a high level wrapper&lt;/li&gt;
&lt;li&gt;Lower precision is the default and higher precision computations can easily void all performance gains&lt;/li&gt;
&lt;li&gt;GPU functions (kernels) are inherently parallel, so writing GPU kernels is at least as difficult as writing parallel CPU code, but the difference in hardware adds quite a bit of complexity&lt;/li&gt;
&lt;li&gt;Related to the above, a lot of algorithms won't port nicely to the GPU. For more details on what to expect, have a look at this &lt;a href=&quot;/&amp;quot;https://streamhpc.com/blog/2013-06-03/the-application-areas-opencl-and-cuda-can-be-used//&amp;quot;&quot;&gt;blog post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kernels are usually written in a C/C++ dialect, which is not the nicest language to write down your algorithms&lt;/li&gt;
&lt;li&gt;There is a divide between CUDA and OpenCL, which are the dominant frameworks used to write low-level GPU code. While CUDA only supports Nvidia hardware, OpenCL supports all hardware but is a bit rough around the edges. One needs to decide what to use, and will get pretty much stuck with that decision&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&quot;],&quot;b15e66ec-cbe7-4b87-94fc-64a1bf79ff3b&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;b15e66ec-cbe7-4b87-94fc-64a1bf79ff3b&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;A GPU is a massively parallel processor, with a couple of thousand parallel processing units. For example the &lt;a href=&quot;/&amp;quot;https://www.nvidia.com/en-us/data-center/tesla-k80//&amp;quot;&quot;&gt;Tesla k80&lt;/a&gt;, which is used in this article, offers 4992 parallel CUDA cores. GPUs are quite different from CPUs in terms of frequencies, latencies and hardware capabilities, but this is somewhat similar to a slow CPU with 4992 cores!&lt;/p&gt;
&lt;p&gt;&quot;],&quot;e4267f2c-06e0-4ae1-b250-66a9565b765b&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;e4267f2c-06e0-4ae1-b250-66a9565b765b&quot;,&quot;^D&quot;,&quot;section&quot;,&quot;^Y&quot;,&quot;GPUArrays in the real world&quot;,&quot;^E&quot;,[&quot;^J&quot;,[&quot;bfa64579-c73b-48b7-b6c4-88fd69aaf9d1&quot;,&quot;e2ce55ae-a15c-49dc-ac05-239bd226b07a&quot;,&quot;7568cecf-0eaa-4fe3-bc80-9cf89360c8fb&quot;,&quot;8d00da3d-dc4d-47b0-9f8b-eb26e505d889&quot;,&quot;56322bde-814a-4056-8601-6ca5c8434825&quot;,&quot;4a7aa2b0-fb74-40b6-8b52-cbedeaf7597a&quot;,&quot;7bf252ce-e3a3-4312-b3c8-5c6d74dbd62e&quot;,&quot;dd74954e-f344-4533-8ff4-e8e072c669aa&quot;,&quot;b4e4c855-1f1c-4bbc-8b4c-704550497733&quot;,&quot;f6e7762e-b6c5-4960-840a-8c46fb255143&quot;]]],&quot;d612c50e-123b-46d2-bb0f-acb93ea1e9a5&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;d612c50e-123b-46d2-bb0f-acb93ea1e9a5&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Some more operations supported by GPUArrays:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;7bf252ce-e3a3-4312-b3c8-5c6d74dbd62e&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;# train\nfor i = 1:10\n Flux.train!(loss, train, opt, cb = evalcb)\nend&quot;,&quot;^I&quot;,[&quot;^J&quot;,[]],&quot;^L&quot;,[&quot;^ &quot;,&quot;~:stdout&quot;,3],&quot;^M&quot;,&quot;julia&quot;,&quot;^C&quot;,&quot;7bf252ce-e3a3-4312-b3c8-5c6d74dbd62e&quot;,&quot;^N&quot;,&quot;~ud7f89130-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^O&quot;,[&quot;^O&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^D&quot;,&quot;code&quot;,&quot;^P&quot;,[&quot;^ &quot;],&quot;^U&quot;,null,&quot;^V&quot;,29622,&quot;^W&quot;,null],&quot;63a71268-3337-4bf2-8d47-b7e641d16dbb&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;63a71268-3337-4bf2-8d47-b7e641d16dbb&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;As you can see, for large arrays one gets a solid 60-80x speed-up by moving the calculation to the GPU. Getting this speed-up was as simple as converting the Julia array to a GPUArray.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;bd97b005-9736-4628-a5db-26d82089d15a&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;bd97b005-9736-4628-a5db-26d82089d15a&quot;,&quot;^D&quot;,&quot;section&quot;,&quot;^Y&quot;,&quot; Array Operations&quot;,&quot;^E&quot;,[&quot;a8566d64-5ace-4acf-ad8e-2021d18c225d&quot;,&quot;298522f5-fb0c-43df-aa38-e8949ef6685e&quot;,&quot;e60c9e23-2f00-46ad-9973-a31470112212&quot;,&quot;8d37d54c-4774-45ab-a1bc-bad9f73a0231&quot;,&quot;8b302ae5-daef-427a-8cd2-b1dbbf1679f3&quot;,&quot;62a9ecf5-18af-4956-98e1-a95cd0c47859&quot;,&quot;d612c50e-123b-46d2-bb0f-acb93ea1e9a5&quot;,&quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot;],&quot;^Z&quot;,[&quot;^J&quot;,[]]],&quot;5a85c88c-f0a9-4064-bf8a-62c80bf270ae&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;5a85c88c-f0a9-4064-bf8a-62c80bf270ae&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;In the above example you can see the iteration order of a more complex launch configuration. Figuring out the right iteration + launch configuration is crucial to achieve state of the art GPU performance – but won't be part of this simple introduction. There are plenty of GPU tutorials for CUDA and OpenCL which explain this in great detail and those principles are identical when programming the GPU in Julia.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;fdf4733c-a4d3-4665-9137-2e15e54f5181&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;fdf4733c-a4d3-4665-9137-2e15e54f5181&quot;,&quot;^D&quot;,&quot;section&quot;,&quot;^Y&quot;,&quot;How does the GPU work&quot;,&quot;^E&quot;,[&quot;^J&quot;,[&quot;d0caaf8f-5c0b-4c0e-8b9e-1bd2e2e99aed&quot;,&quot;12260210-0c7d-4cbc-9262-30ac57e4110f&quot;,&quot;b15e66ec-cbe7-4b87-94fc-64a1bf79ff3b&quot;,&quot;6494cb51-4ad3-4327-9e27-c2c804df6c81&quot;,&quot;a034c062-a45b-467f-a953-cb7702a9bad4&quot;,&quot;6b8c8d02-f072-4454-9687-1e0b795d9e47&quot;,&quot;0f5d9919-e5ed-4259-8a25-9c835cd74ab1&quot;]],&quot;^Z&quot;,[&quot;^J&quot;,[&quot;095f7d06-d4fc-49e2-a68c-96cad2fb0a62&quot;,&quot;830cd8cc-8d91-412d-b90e-6f1d81a3a8a1&quot;,&quot;2eba3a00-d38e-45f7-b5c0-8a1bba7f5ce2&quot;,&quot;bd97b005-9736-4628-a5db-26d82089d15a&quot;]]],&quot;f9c22c0d-fa74-4a04-a4a8-52ccfea9b2d7&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;f9c22c0d-fa74-4a04-a4a8-52ccfea9b2d7&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Consequently, one can only use stack allocation on the device, and for the rest pre-allocated GPU buffers are used. As transfers are expensive, it is common to reuse and pre-allocate as much as possible when programming the GPU.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;80bd4385-cd68-4fad-ada0-981d4b98b100&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;using CuArrays\n\nthreads = (2, 2)\nblocks = (2, 2)\nT = fill(CuArray, (0, 0), (4, 4))\nB = fill(CuArray, (0, 0), (4, 4))\ngpu_call(T, (B, T), (blocks, threads)) do state, A, B\n # those names pretty much refer to the cuda names\n b = (blockidx_x(state), blockidx_y(state))\n bdim = (blockdim_x(state), blockdim_y(state))\n t = (threadidx_x(state), threadidx_y(state))\n idx = (bdim .* (b .- 1)) .+ t\n A[idx...] = b\n B[idx...] = t\n return\nend\nprintln(\&quot;Threads index: \\n\&quot;, T)\nprintln(\&quot;Block index: \\n\&quot;, B)&quot;,&quot;^I&quot;,[&quot;^J&quot;,[]],&quot;^L&quot;,[&quot;^ &quot;,&quot;^16&quot;,4],&quot;^M&quot;,&quot;julia&quot;,&quot;^C&quot;,&quot;80bd4385-cd68-4fad-ada0-981d4b98b100&quot;,&quot;^N&quot;,&quot;~ua8e7ec10-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^O&quot;,[&quot;^O&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^D&quot;,&quot;code&quot;,&quot;^P&quot;,[&quot;^ &quot;],&quot;^U&quot;,null,&quot;^V&quot;,1986,&quot;^W&quot;,null],&quot;298522f5-fb0c-43df-aa38-e8949ef6685e&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;x = zeros(4, 4) # 4x4 array of zeros\ny = zeros(4) # 4 element array\nz = 2 # a scalar\n# y's 1st dimension gets repeated for the 2nd dimension in x\n# and the scalar z get's repeated for all dimensions\n# the below is equal to `broadcast(+, broadcast(+, xx, y), z)`\nx .+ y .+ z&quot;,&quot;^I&quot;,[&quot;^J&quot;,[]],&quot;^L&quot;,[&quot;^ &quot;],&quot;^M&quot;,&quot;julia&quot;,&quot;^C&quot;,&quot;298522f5-fb0c-43df-aa38-e8949ef6685e&quot;,&quot;^N&quot;,&quot;~u582c0b80-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^O&quot;,[&quot;^O&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^D&quot;,&quot;code&quot;,&quot;^P&quot;,[&quot;^ &quot;,&quot;~_&quot;,[&quot;^ &quot;,&quot;^D&quot;,&quot;data&quot;,&quot;^K&quot;,null,&quot;^Q&quot;,&quot;json&quot;,&quot;^R&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;QmXbQ4AUGGFrYmA4yfUt8PKEiFumpg1QQJvxWstV9zhzEU&quot;,&quot;^S&quot;,73,&quot;^T&quot;,&quot;application/json&quot;]]],&quot;^U&quot;,null,&quot;^V&quot;,703,&quot;^W&quot;,null],&quot;8b302ae5-daef-427a-8cd2-b1dbbf1679f3&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;8b302ae5-daef-427a-8cd2-b1dbbf1679f3&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;This means any Julia function that runs without allocating heap memory (only creating isbits types), can be applied to each element of a GPUArray and multiple dot calls will get fused into one kernel call. As kernel call latency is high, this fusion is a very important optimization.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;3950cb96-1122-4d9f-8b74-7168fb77849a&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;3950cb96-1122-4d9f-8b74-7168fb77849a&quot;,&quot;^Y&quot;,&quot;An Introduction to GPU Programming in Julia &quot;,&quot;^D&quot;,&quot;section&quot;,&quot;~:version&quot;,2,&quot;^E&quot;,[&quot;^J&quot;,[]],&quot;^Z&quot;,[&quot;^J&quot;,[&quot;fdf4733c-a4d3-4665-9137-2e15e54f5181&quot;,&quot;e4267f2c-06e0-4ae1-b250-66a9565b765b&quot;,&quot;ea004e0d-2b7d-4d1d-87b0-58bac63971d8&quot;,&quot;33457f06-ffd8-4e64-a9e3-f336e875b947&quot;]],&quot;~:settings&quot;,[&quot;^ &quot;,&quot;~:numbered?&quot;,false,&quot;~:sidebar?&quot;,false,&quot;~:subtitle?&quot;,false,&quot;~:centered?&quot;,false,&quot;~:authors?&quot;,false]],&quot;24e4194b-b6fd-43c4-b876-cc6b6aea8403&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;24e4194b-b6fd-43c4-b876-cc6b6aea8403&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;As an alternative to heap allocated arrays inside the kernel, you can use GPUArrays. The GPUArray constructor will create GPU buffers and transfer the data to VRAM. If you call &lt;code&gt;Array(gpu_array)&lt;/code&gt; the array will get transferred back to RAM, represented as a normal Julia Array. The Julia handle to those gpu arrays is tracked by Julia's GC and if it's not used anymore, the GPU memory will be freed.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;b9afd6ac-9711-4b4b-9f88-89e40405af04&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;b9afd6ac-9711-4b4b-9f88-89e40405af04&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Location of creation describes if the object was created on the CPU and then transferred to the GPU kernel, or if it was created on the GPU inside the kernel. The table shows if it is possible to create an instance of a type, and for the transfer from CPU to GPU, the table also indicates if the object gets copied or passed by reference.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;778cc725-33cc-4cb1-a388-6a9da1daff5d&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;using CuArrays, FileIO, Colors, GPUArrays, BenchmarkTools\nusing CuArrays: CuArray\n\&quot;\&quot;\&quot;\nThe function calculating the Julia set\n\&quot;\&quot;\&quot;\nfunction juliaset(z0, maxiter)\n c = ComplexF32(-0.5, 0.75)\n z = z0\n for i in 1:maxiter\n abs2(z) &amp;gt; 4f0 &amp;amp;&amp;amp; return (i - 1) % UInt8\n z = z * z + c\n end\n return maxiter % UInt8 # % is used to convert without overflow check\nend\nrange = 100:50:2^12\ncutimes, jltimes = Float64[], Float64[]\nfunction run_bench(in, out)\n # use dot syntax to apply `juliaset` to each elemt of q_converted \n # and write the output to result\n out .= juliaset.(in, 16)\n # all calls to the GPU are scheduled asynchronous, \n # so we need to synchronize\n GPUArrays.synchronize(out)\nend\n# store a reference to the last results for plotting\nlast_jl, last_cu = nothing, nothing\nfor N in range\n w, h = N, N\n q = [ComplexF32(r, i) for i=1:-(2.0/w):-1, r=-1.5:(3.0/h):1.5]\n for (times, Typ) in ((cutimes, CuArray), (jltimes, Array))\n # convert to Array or CuArray - moving the calculation to CPU/GPU\n q_converted = Typ(q)\n result = Typ(zeros(UInt8, size(q)))\n for i in 1:10 # 5 samples per size\n # benchmarking macro, all variables need to be prefixed with $\n t = Base.@elapsed begin\n\t\t\t\trun_bench(q_converted, result)\n end\n global last_jl, last_cu # we're in local scope\n if result isa CuArray\n last_cu = result\n else\n \tlast_jl = result\n end\n push!(times, t)\n end\n end\nend\n\ncu_jl = hcat(Array(last_cu), last_jl)\ncmap = colormap(\&quot;Blues\&quot;, 16 + 1)\ncolor_lookup(val, cmap) = cmap[val + 1]\nsave(\&quot;results/juliaset.png\&quot;, color_lookup.(cu_jl, (cmap,)))&quot;,&quot;^I&quot;,[&quot;^J&quot;,[]],&quot;^L&quot;,[&quot;^ &quot;],&quot;^M&quot;,&quot;julia&quot;,&quot;^C&quot;,&quot;778cc725-33cc-4cb1-a388-6a9da1daff5d&quot;,&quot;^N&quot;,&quot;~ufbc54280-d2e6-11e8-b7e3-d5a7297efcb7&quot;,&quot;^O&quot;,[&quot;^O&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^D&quot;,&quot;code&quot;,&quot;^P&quot;,[&quot;^ &quot;,&quot;juliaset.png&quot;,[&quot;^ &quot;,&quot;^D&quot;,&quot;file&quot;,&quot;^K&quot;,&quot;juliaset.png&quot;,&quot;~:last-modified&quot;,1539875132000,&quot;~:idx&quot;,null,&quot;^R&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;QmQXdNWEJhYMUpoJueuHCg2eUgjonmoP8pBTTWZTtgj5X8&quot;,&quot;^S&quot;,481341,&quot;^W&quot;,null,&quot;^T&quot;,&quot;image/png&quot;]]],&quot;^U&quot;,null,&quot;^V&quot;,118649,&quot;^W&quot;,null],&quot;3428b837-5a8e-44d8-91e3-2e8361152cb0&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;using BenchmarkTools\nfunction threadded_map!(f::Function, A::Array, B::Array)\n Threads.@threads for i in 1:length(A)\n A[i] = f(B[i])\n end\n A\nend\nx, y = rand(10^7), rand(10^7)\nkernel(y) = (y / 33f0) * (732.f0/y)\n# on the cpu without threads:\nsingle_t = @belapsed map!($kernel, $x, $y)\n\n# \&quot;on the CPU with 4 threads (2 real cores):\nthread_t = @belapsed threadded_map!($kernel, $x, $y)\n\n# on the GPU:\nxgpu, ygpu = cu(x), cu(y)\ngpu_t = @belapsed begin\n map!($kernel, $xgpu, $ygpu)\n GPUArrays.synchronize($xgpu)\nend\ntimes = [single_t, thread_t, gpu_t]\nspeedup = maximum(times) ./ times\nprintln(\&quot;speedup: $speedup\&quot;)\nbar([\&quot;1 core\&quot;, \&quot;2 cores\&quot;, \&quot;gpu\&quot;], speedup, legend = false, fillcolor = :grey, ylabel = \&quot;speedup\&quot;)&quot;,&quot;^I&quot;,[&quot;^J&quot;,[]],&quot;^L&quot;,[&quot;^ &quot;,&quot;^16&quot;,1],&quot;^M&quot;,&quot;julia&quot;,&quot;^C&quot;,&quot;3428b837-5a8e-44d8-91e3-2e8361152cb0&quot;,&quot;^N&quot;,&quot;~u8ebeafe0-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^O&quot;,[&quot;^O&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^D&quot;,&quot;code&quot;,&quot;^P&quot;,[&quot;^ &quot;,&quot;~_&quot;,[&quot;^ &quot;,&quot;^D&quot;,&quot;plotly&quot;,&quot;^K&quot;,null,&quot;^Q&quot;,&quot;plotly&quot;,&quot;^R&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;QmNn8cip4FgfKL3myRkvVHE3uSdfKYHdHw3yUQtBqVzcYB&quot;,&quot;^S&quot;,2776,&quot;^T&quot;,&quot;application/json&quot;]]],&quot;^U&quot;,null,&quot;^V&quot;,43890,&quot;^W&quot;,null],&quot;62a9ecf5-18af-4956-98e1-a95cd0c47859&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;using CuArrays\nA = cu([1, 2, 3])\nB = cu([1, 2, 3])\nC = rand(CuArray, Float32, 3)\nresult = A .+ B .- C\ntest(a::T) where T = a * convert(T, 2) # convert to same type as `a`\n\n# inplace broadcast, writes directly into `result`\nresult .= test.(A) # custom function work\n\n# The cool thing is that this composes well with custom types and custom functions.\n# Let's go back to our Point type and define addition for it\nBase.:(+)(p1::Point, p2::Point) = Point(p1.x + p2.x, p1.y + p2.y)\n\n# now this works:\ncustom_types = cu(Point[(1, 2), (4, 3), (2, 2)])\n\n# This particular example also shows the power of broadcasting: \n# Non array types are broadcasted and repeated for the whole length\nresult = custom_types .+ Ref(Point(2, 2))\n\n# So the above is equal to (minus all the allocations):\n# this allocates a new array on the gpu, which we can avoid with the above broadcast\nbroadcasted = fill(CuArray, Point(2, 2), (3,))\n\nresult == custom_types .+ broadcasted&quot;,&quot;^I&quot;,[&quot;^J&quot;,[]],&quot;^L&quot;,[&quot;^ &quot;],&quot;^M&quot;,&quot;julia&quot;,&quot;^C&quot;,&quot;62a9ecf5-18af-4956-98e1-a95cd0c47859&quot;,&quot;^N&quot;,&quot;~u58977780-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^O&quot;,[&quot;^O&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^D&quot;,&quot;code&quot;,&quot;^P&quot;,[&quot;^ &quot;,&quot;~_&quot;,[&quot;^ &quot;,&quot;^D&quot;,&quot;data&quot;,&quot;^K&quot;,null,&quot;^Q&quot;,&quot;json&quot;,&quot;^R&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;Qmaa779KVD5z1LkzSccCMjJmYtd11DXA4gtTgsNFo8365G&quot;,&quot;^S&quot;,4,&quot;^T&quot;,&quot;application/json&quot;]]],&quot;^U&quot;,null,&quot;^V&quot;,3700,&quot;^W&quot;,null],&quot;a8566d64-5ace-4acf-ad8e-2021d18c225d&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;a8566d64-5ace-4acf-ad8e-2021d18c225d&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Lots of operations are already defined. Most importantly, GPUArrays support Julia's &lt;a href=&quot;/&amp;quot;https://julialang.org/blog/2018/05/extensible-broadcast-fusion/&amp;quot;&quot;&gt;fusing dot broadcasting notation&lt;/a&gt;. This notation allows you to apply a function to each element of an array, and create a new array out of the return values of &lt;code&gt;&lt;strong&gt;f&lt;/strong&gt;&lt;/code&gt;. This functionality is usually referred to as a map. The broadcast refers to the fact that arrays with different shapes get broadcasted to the same shape.&lt;/p&gt;
&lt;p&gt;This is how it works:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;2eba3a00-d38e-45f7-b5c0-8a1bba7f5ce2&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;2eba3a00-d38e-45f7-b5c0-8a1bba7f5ce2&quot;,&quot;^D&quot;,&quot;section&quot;,&quot;^Y&quot;,&quot;Memory&quot;,&quot;^E&quot;,[&quot;^J&quot;,[&quot;6c575ff1-1123-4a22-adbb-292a3fe99d73&quot;,&quot;5b06a745-4830-4b8e-a5b2-df8449cef3b3&quot;,&quot;d412f192-1c45-46ba-aa09-657fd3d22093&quot;,&quot;1da131e8-d5a9-4e7b-a605-14391ed24107&quot;,&quot;b9afd6ac-9711-4b4b-9f88-89e40405af04&quot;]],&quot;^Z&quot;,[&quot;^J&quot;,[&quot;90e93106-c175-437c-a107-fb911bf59788&quot;,&quot;4e09f815-feab-4f09-8d9f-e63eba843aa2&quot;]]],&quot;b41071e8-02ab-47f3-946b-0b802fff459b&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;b41071e8-02ab-47f3-946b-0b802fff459b&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Let's try to figure out what this is doing! In simple terms, this will call the julia function &lt;code&gt;kernel&lt;/code&gt; &lt;em&gt;&lt;strong&gt;length(&lt;/strong&gt;&lt;/em&gt;&lt;code&gt;&lt;em&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;/em&gt;&lt;/code&gt;&lt;em&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/em&gt; times in parallel on the GPU. Each parallel invocation of &lt;code&gt;kernel&lt;/code&gt; has a thread index, which we can use to safely index into the arrays &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;. If we calculated our own indices instead of using &lt;code&gt;linear_index&lt;/code&gt;, we'd need to make sure that we don't have multiple threads reading and writing to the same array locations. So, if we wrote this in pure Julia with threads, an equivalent version would look like this:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;f70ec7d4-93d1-4076-843e-3ecd79642556&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;f70ec7d4-93d1-4076-843e-3ecd79642556&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;GPUArrays.jl is that foundation in Julia. It offers an abstract array implementation tailored towards using the raw power of highly parallel hardware. It contains all the necessary functionality to set up the GPU, launch Julia GPU functions and offers some basic array algorithms.&lt;/p&gt;
&lt;p&gt;Being abstract means that it needs a concrete implementation coming in the form of &lt;a href=&quot;/&amp;quot;https://github.com/JuliaGPU/CuArrays.jl/&amp;quot;&quot;&gt;CuArrays&lt;/a&gt; and &lt;a href=&quot;/&amp;quot;https://github.com/JuliaGPU/CLArrays.jl/&amp;quot;&quot;&gt;CLArrays&lt;/a&gt;. They both offer exactly the same interface, thanks to inheriting all functionality from GPUArrays. The only difference shows up when allocating an array, which forces one to decide if the array lives on a CUDA or OpenCL device. More about this in the Memory section.&lt;/p&gt;
&lt;p&gt;GPUArrays helps to reduce code duplication, because it allows one to write hardware independent GPU kernels which can be compiled to native GPU code by either CuArrays or CLArrays. So, lots of generic kernels can be shared between all packages inheriting from GPUArrays.&lt;/p&gt;
&lt;p&gt;To help you choose: CuArrays only works with Nvidia GPUs, while CLArrays works with most available GPUs. CuArrays is more stable than CLArrays and works on Julia 0.7 already. The speed differences are mixed with no clear winner. I would suggest to try both and see what works best.&lt;/p&gt;
&lt;p&gt;For this article I'm going to choose CuArrays, since this article is written for Julia 0.7 / 1.0, which still isn't supported by CLArrays.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;3bf52ba8-8341-4248-a628-72df5304880c&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;3bf52ba8-8341-4248-a628-72df5304880c&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Julia has come a long way to bring composable high-level programming to the high performance world. Now it's time to do the same for the GPU.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;e60c9e23-2f00-46ad-9973-a31470112212&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;e60c9e23-2f00-46ad-9973-a31470112212&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;The fusion happens because the Julia compiler will rewrite this expression into one lazy broadcast call that gets the call tree passed, which then can fuse the whole call tree into one function before looping over the array.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;f6e7762e-b6c5-4960-840a-8c46fb255143&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;f6e7762e-b6c5-4960-840a-8c46fb255143&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Another nice property to look at is that GPUArrays never had to implement automatic differentiation explicitly to support the backward pass of the neuronal network efficiently. This is because Julia's automatic differentiation libraries work for arbitrary functions and emit code &lt;a href=&quot;/&amp;quot;https://mikeinnes.github.io/2017/08/24/cudanative.html/&amp;quot;&quot;&gt;that can run efficiently on the GPU&lt;/a&gt;. This helps a lot to get Flux working on the GPU with minimal developer effort - and makes Flux GPU support work efficiently even for user defined functions. That this works out of the box without coordination between GPUArrays + Flux is a pretty unique property of Julia, which is explained in great detail in: &lt;a href=&quot;/&amp;quot;http://www.stochasticlifestyle.com/why-numba-and-cython-are-not-substitutes-for-julia//&amp;quot;&quot;&gt;Why Numba and Cython are no substitute for Julia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&quot;],&quot;f58a7aba-f416-41a0-bd08-8fe07b0df022&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;f58a7aba-f416-41a0-bd08-8fe07b0df022&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Most highly parallel algorithms need to churn through quite a bit of data to overcome all the threading and latency overheads. So most algorithms will need arrays to manage all that data, which calls for a good GPU array library as a crucial foundation.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;4b7926e0-6502-4410-92eb-1b34d89f2d92&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;4b7926e0-6502-4410-92eb-1b34d89f2d92&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;One can get pretty far by just using the generic abstract array interface of GPUArrays without ever writing any GPU kernels. However, at some point one might need to implement an algorithm that needs to run on the GPU and can't be expressed by a combination of generic array algorithms!&lt;/p&gt;
&lt;p&gt;&quot;],&quot;a034c062-a45b-467f-a953-cb7702a9bad4&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;a034c062-a45b-467f-a953-cb7702a9bad4&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;The sheer number of parallel threads one can launch can yield massive speed-ups, but also makes it harder to utilize the GPU. Let's have a detailed look at the disadvantages one buys into when utilizing this raw power:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;830cd8cc-8d91-412d-b90e-6f1d81a3a8a1&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;830cd8cc-8d91-412d-b90e-6f1d81a3a8a1&quot;,&quot;^D&quot;,&quot;section&quot;,&quot;^Y&quot;,&quot;Performance&quot;,&quot;^E&quot;,[&quot;^J&quot;,[&quot;fc35d0a2-6efb-4971-9728-e5b6198ad57e&quot;,&quot;778cc725-33cc-4cb1-a388-6a9da1daff5d&quot;,&quot;f5616db3-d53e-4347-a8c4-8be45e7308f2&quot;,&quot;63a71268-3337-4bf2-8d47-b7e641d16dbb&quot;,&quot;1b96bbbf-1dba-4b5b-9187-ab5a76361a19&quot;,&quot;7390d157-1854-412e-bba7-0aea472566e0&quot;]]],&quot;1da131e8-d5a9-4e7b-a605-14391ed24107&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;1da131e8-d5a9-4e7b-a605-14391ed24107&quot;,&quot;^D&quot;,&quot;formula&quot;,&quot;^E&quot;,&quot;\\tiny\n\\left[\n\\begin{array}{ccccccc}\n\\text{} &amp;amp; \\text{ isbits type} &amp;amp; \\text{immutable type} &amp;amp; \\text{mutable type} &amp;amp; \\text{julia array} &amp;amp; \\text{gpu array} &amp;amp; \\text{(device) local memory} \\\\\n\\text{location of creation} &amp;amp; \\text{} &amp;amp; \\text{} &amp;amp; \\text{} &amp;amp; \\text{} &amp;amp; \\text{} &amp;amp; \\text{} \\\\\n\\text{on CPU} &amp;amp; \\text{yes, copy} &amp;amp; \\text{no ptrs, copy} &amp;amp; \\text{copy} &amp;amp; \\text{no} &amp;amp; \\text{by reference} &amp;amp; \\text{no} \\\\\n\\text{on GPU} &amp;amp; \\text{yes} &amp;amp; \\text{may contain device ptr} &amp;amp; \\text{no (on 0.7 if elimated)} &amp;amp; \\text{no} &amp;amp; \\text{no} &amp;amp; \\text{yes} \\\\\n\\end{array}\n\\right]&quot;],&quot;33457f06-ffd8-4e64-a9e3-f336e875b947&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;33457f06-ffd8-4e64-a9e3-f336e875b947&quot;,&quot;^D&quot;,&quot;section&quot;,&quot;^Y&quot;,&quot;Conclusion&quot;,&quot;^E&quot;,[&quot;3bf52ba8-8341-4248-a628-72df5304880c&quot;,&quot;0b7718a8-066d-4e2b-a020-e3530b4284ec&quot;,&quot;403a6184-13b5-4d48-8e5c-3612ce2ea5d1&quot;]],&quot;bfa64579-c73b-48b7-b6c4-88fd69aaf9d1&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;bfa64579-c73b-48b7-b6c4-88fd69aaf9d1&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Let's jump right into some cool use cases.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;4a7aa2b0-fb74-40b6-8b52-cbedeaf7597a&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;using Flux, Flux.Data.MNIST, Statistics\nusing Flux: onehotbatch, onecold, crossentropy, throttle\nusing Base.Iterators: repeated, partition\nusing CuArrays\n\n# Classify MNIST digits with a convolutional network\n\nimgs = MNIST.images()\n\nlabels = onehotbatch(MNIST.labels(), 0:9)\n\n# Partition into batches of size 1,000\ntrain = [(cat(float.(imgs[i])..., dims = 4), labels[:,i])\n for i in partition(1:60_000, 1000)]\n\nuse_gpu = true # helper to easily switch between gpu/cpu\n\ntodevice(x) = use_gpu ? gpu(x) : x\n\ntrain = todevice.(train)\n\n# Prepare test set (first 1,000 images)\ntX = cat(float.(MNIST.images(:test)[1:1000])..., dims = 4) |&amp;gt; todevice\ntY = onehotbatch(MNIST.labels(:test)[1:1000], 0:9) |&amp;gt; todevice\n\nm = Chain(\n Conv((2,2), 1=&amp;gt;16, relu),\n x -&amp;gt; maxpool(x, (2,2)),\n Conv((2,2), 16=&amp;gt;8, relu),\n x -&amp;gt; maxpool(x, (2,2)),\n x -&amp;gt; reshape(x, :, size(x, 4)),\n Dense(288, 10), softmax) |&amp;gt; todevice\n\nm(train[1][1])\n\nloss(x, y) = crossentropy(m(x), y)\n\naccuracy(x, y) = mean(onecold(m(x)) .== onecold(y))\n\nevalcb = throttle(() -&amp;gt; @show(accuracy(tX, tY)), 10)\nopt = ADAM(Flux.params(m));&quot;,&quot;^I&quot;,[&quot;^J&quot;,[]],&quot;^L&quot;,[&quot;^ &quot;],&quot;^M&quot;,&quot;julia&quot;,&quot;^C&quot;,&quot;4a7aa2b0-fb74-40b6-8b52-cbedeaf7597a&quot;,&quot;^N&quot;,&quot;~ud224b720-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^O&quot;,[&quot;^O&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^D&quot;,&quot;code&quot;,&quot;^P&quot;,[&quot;^ &quot;],&quot;^U&quot;,null,&quot;^V&quot;,6031,&quot;^W&quot;,null],&quot;0f5d9919-e5ed-4259-8a25-9c835cd74ab1&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;0f5d9919-e5ed-4259-8a25-9c835cd74ab1&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;The good news is Julia, a high level scripting language, allows you to write both kernel and surrounding code in Julia itself, while running on most GPU hardware!&lt;/p&gt;
&lt;p&gt;&quot;],&quot;b4e4c855-1f1c-4bbc-8b4c-704550497733&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;b4e4c855-1f1c-4bbc-8b4c-704550497733&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Just by converting the arrays to GPUArrays (with &lt;code&gt;gpu(array)&lt;/code&gt;) we were able to move the entire computation to the GPU and get a pretty nice speed improvement. This is thanks to Julia's sophisticated AbstractArray infrastructure, into which GPUArrays seamlessly integrates. Subsequently, if you leave out the conversion to a GPUArray, the code will also run with normal Julia arrays – but then of course on the CPU. You can try this out by changing &lt;code&gt;use_gpu = true&lt;/code&gt; to &lt;code&gt;use_gpu = false&lt;/code&gt; and rerun the initialization and training cells. Comparing GPU and CPU, I get 975 seconds for a CPU run and 29 seonds for the GPU - which is a nice speed-up of ~&lt;strong&gt;33x&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;fe642bca-b571-4183-a38a-1e937833a4d8&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;fe642bca-b571-4183-a38a-1e937833a4d8&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;A big difference when working with the GPU is that there is no garbage collector (GC) on the GPU. This is gladly not a big issue, since the kind of high performance kernel one writes for the GPU shouldn't create any GC-tracked memory to begin with.&lt;/p&gt;
&lt;p&gt;Implementing a GC for the GPU is possible, but remember that every kernel executed is massively parallel. Creating and tracking lots of heap memory in every one of the ~1000 gpu threads will quickly destroy any performance gains, so it's really just not worth the effort.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;ea004e0d-2b7d-4d1d-87b0-58bac63971d8&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;ea004e0d-2b7d-4d1d-87b0-58bac63971d8&quot;,&quot;^D&quot;,&quot;section&quot;,&quot;^Y&quot;,&quot;Writing GPU Kernels&quot;,&quot;^E&quot;,[&quot;^J&quot;,[&quot;4b7926e0-6502-4410-92eb-1b34d89f2d92&quot;,&quot;dc1691b3-b051-4078-8105-be5693dde633&quot;,&quot;e01448e0-7630-4c6a-b415-050bd4b37efa&quot;,&quot;e542cbee-022a-4da4-91bb-f683b86080f3&quot;,&quot;b41071e8-02ab-47f3-946b-0b802fff459b&quot;,&quot;3428b837-5a8e-44d8-91e3-2e8361152cb0&quot;,&quot;f21ef039-a847-43e7-97be-55b8936c1cba&quot;,&quot;d8fb28e2-49aa-4c56-83e4-1dfeb06c2af9&quot;,&quot;80bd4385-cd68-4fad-ada0-981d4b98b100&quot;,&quot;5a85c88c-f0a9-4064-bf8a-62c80bf270ae&quot;]],&quot;^Z&quot;,[&quot;^J&quot;,[]]],&quot;f21ef039-a847-43e7-97be-55b8936c1cba&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;f21ef039-a847-43e7-97be-55b8936c1cba&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Because the function isn't doing a lot of work, we don't see perfect scaling, but the threaded and GPU version still give us a nice speed-up.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;,[&quot;^ &quot;,&quot;~:runtime/inherited-environment-variables&quot;,[&quot;^J&quot;,[[&quot;^ &quot;,&quot;^K&quot;,&quot;SERVICE_9998_NAME&quot;,&quot;~:value&quot;,&quot;runtime-7f9b8ecb-113f-41ec-a965-450fd1c0faa7&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;SERVICE_9998_CHECK_TCP&quot;,&quot;^29&quot;,&quot;true&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;SERVICE_TAGS=urlprefix-/runner/17592186656385/runtime/7f9b8ecb-113f-41ec-a965-450fd1c0faa7 strip&quot;,&quot;^29&quot;,&quot;/runner/17592186656385/runtime/7f9b8ecb-113f-41ec-a965-450fd1c0faa7&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;NEXTJOURNAL_RUNTIME_SERVICE_URL&quot;,&quot;^29&quot;,&quot;https://nextjournal.com/runner/17592186656385/runtime/7f9b8ecb-113f-41ec-a965-450fd1c0faa7&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;NEXTJOURNAL_MOUNT_CUDA&quot;,&quot;^29&quot;,&quot;9.2-cudnn7-devel-ubuntu18.04&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;DISPLAY&quot;,&quot;^29&quot;,&quot;:0&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;NVIDIA_VISIBLE_DEVICES&quot;,&quot;^29&quot;,&quot;all&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;NVIDIA_DRIVER_CAPABILITIES&quot;,&quot;^29&quot;,&quot;all&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;PATH&quot;,&quot;^29&quot;,&quot;/usr/local/julia/bin:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;JULIA_PATH&quot;,&quot;^29&quot;,&quot;/usr/local/julia&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;JULIA_GPG&quot;,&quot;^29&quot;,&quot;3673DF529D9049477F76B37566E3C7DC03D6E495&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;JULIA_VERSION&quot;,&quot;^29&quot;,&quot;1.0.0&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;LC_ALL&quot;,&quot;^29&quot;,&quot;en_US.UTF-8&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;LANGUAGE&quot;,&quot;^29&quot;,&quot;en_US.en&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;LANG&quot;,&quot;^29&quot;,&quot;en_US.UTF-8&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;DEBIAN_FRONTEND&quot;,&quot;^29&quot;,&quot;noninteractive&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;BASH_ENV&quot;,&quot;^29&quot;,&quot;/.bash_profile&quot;]]],&quot;~:type&quot;,&quot;~:nextjournal&quot;,&quot;^M&quot;,&quot;julia&quot;,&quot;^C&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;,&quot;^D&quot;,&quot;runtime&quot;,&quot;^U&quot;,null,&quot;~:environment&quot;,[&quot;^2&amp;lt;&quot;,[&quot;^ &quot;,&quot;~:article/nextjournal.id&quot;,&quot;~u0287ca51-4717-45ef-9a18-70153befcf15&quot;,&quot;~:change/nextjournal.id&quot;,&quot;~u5bc4663e-a617-4cad-a5fd-bcf13a88c7c2&quot;,&quot;~:node/id&quot;,&quot;7f9b8ecb-113f-41ec-a965-450fd1c0faa7&quot;]],&quot;~:runtime/environment-variables&quot;,[[&quot;^ &quot;,&quot;^K&quot;,&quot;JULIA_NUM_THREADS&quot;,&quot;^29&quot;,&quot;8&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;GKS_WSTYPE&quot;,&quot;^29&quot;,&quot;png&quot;]],&quot;~:resources&quot;,&quot;~:gpu&quot;],&quot;fc35d0a2-6efb-4971-9728-e5b6198ad57e&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;fc35d0a2-6efb-4971-9728-e5b6198ad57e&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Let's quickly motivate why we would want to move our calculations to the GPU with a simple interactive code example calculating the julia set:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Conversions and copy! to CPU arrays&lt;/li&gt;
&lt;li&gt;multi dimensional indexing and slicing (xs[1:2, 5, :])&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/arrays/#Base.permutedims/&amp;quot;&quot;&gt;permutedims&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/arrays/#Base.vcat/&amp;quot;&quot;&gt;Concatenation (vcat(x, y), cat(3, xs, ys, zs))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/manual/arrays/#Broadcasting-1/&amp;quot;&quot;&gt;map, fused broadcast (zs .= xs.^2 .+ ys .* 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/arrays/#Base.fill/&amp;quot;&quot;&gt;fill(CuArray, 0f0, dims)&lt;/a&gt;, &lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/arrays/#Base.fill!/&amp;quot;&quot;&gt;fill!(gpu_array, 0)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Reduction over dimensions (reduce(+, xs, dims = 3), sum(x -&amp;gt; x^2, xs, dims = 1)&lt;/li&gt;
&lt;li&gt;Reduction to scalar (&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/collections/#Base.reduce-Tuple{Any,Any}/&amp;quot;&quot;&gt;reduce(*, xs)&lt;/a&gt;, sum(xs), &lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/collections/#Base.prod/&amp;quot;&quot;&gt;prod(xs)&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Various BLAS operations (matrix*matrix, matrix*vector)&lt;/li&gt;
&lt;li&gt;FFTs, &lt;a href=&quot;/&amp;quot;https://juliamath.github.io/AbstractFFTs.jl/stable/api.html/&amp;quot;&quot;&gt;using the same API as julia's FFT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&quot;],&quot;e542cbee-022a-4da4-91bb-f683b86080f3&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;using GPUArrays, CuArrays\n# Overloading the Julia Base map! function for GPUArrays\nfunction Base.map!(f::Function, A::GPUArray, B::GPUArray)\n # our function that will run on the gpu\n function kernel(state, f, A, B)\n # If launch parameters aren't specified, linear_index gets the index\n # into the Array passed as second argument to gpu_call (`A`)\n i = linear_index(state)\n \t\tif i &amp;lt;= length(A)\n @inbounds A[i] = f(B[i])\n end\n return\n end\n # call kernel on the gpu\n gpu_call(kernel, A, (f, A, B))\nend&quot;,&quot;^I&quot;,[&quot;^J&quot;,[]],&quot;^L&quot;,[&quot;^ &quot;],&quot;^M&quot;,&quot;julia&quot;,&quot;^C&quot;,&quot;e542cbee-022a-4da4-91bb-f683b86080f3&quot;,&quot;^N&quot;,&quot;~u8ebcdb20-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^O&quot;,[&quot;^O&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^D&quot;,&quot;code&quot;,&quot;^P&quot;,[&quot;^ &quot;],&quot;^U&quot;,null,&quot;^V&quot;,11,&quot;^W&quot;,null],&quot;dc1691b3-b051-4078-8105-be5693dde633&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;dc1691b3-b051-4078-8105-be5693dde633&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;The nice thing is that GPUArrays takes away quite a bit of work with a layered approach that lets you start off with high level code, but allows you to pretty much write low-level kernels similarly to what one would find in most OpenCL/CUDA examples. It also allows you to execute kernels both on OpenCL or CUDA devices, abstracting away any differences in those frameworks.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;dd74954e-f344-4533-8ff4-e8e072c669aa&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;using Colors, FileIO, ImageShow\nN = 22\nimg = tX[:, :, 1:1, N:N]\nprintln(\&quot;Predicted: \&quot;, Flux.onecold(m(img)) .- 1)\nGray.(collect(tX[:, :, 1, N]))&quot;,&quot;^I&quot;,[&quot;^J&quot;,[]],&quot;^L&quot;,[&quot;^ &quot;,&quot;^16&quot;,1],&quot;^M&quot;,&quot;julia&quot;,&quot;^C&quot;,&quot;dd74954e-f344-4533-8ff4-e8e072c669aa&quot;,&quot;^N&quot;,&quot;~u8ad25a80-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^O&quot;,[&quot;^O&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^D&quot;,&quot;code&quot;,&quot;^P&quot;,[&quot;^ &quot;,&quot;~_&quot;,[&quot;^ &quot;,&quot;^D&quot;,&quot;file&quot;,&quot;^K&quot;,null,&quot;^Q&quot;,&quot;display&quot;,&quot;^R&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;QmUmz4tfrmBaNWXa3iRFMrKHYKPrD5T4wNVMHYRyq6PMxX&quot;,&quot;^S&quot;,606,&quot;^T&quot;,&quot;image/png&quot;]]],&quot;^U&quot;,null,&quot;^V&quot;,6569,&quot;^W&quot;,null],&quot;0b7718a8-066d-4e2b-a020-e3530b4284ec&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;0b7718a8-066d-4e2b-a020-e3530b4284ec&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;The hope is that Julia lowers the bar for people to start programming on GPUs, and that we can grow an extendable platform for open source GPU computing. The first success story, of automatic differentiation working out of the box via Julia packages that haven't even been written for the GPU, gives a lot of reason to believe in the success of Julia's extendable and generic design in the domain of GPU computing.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;6494cb51-4ad3-4327-9e27-c2c804df6c81&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;using CUDAdrv; CUDAdrv.name(CuDevice(0))&quot;,&quot;^I&quot;,[&quot;^J&quot;,[]],&quot;^L&quot;,[&quot;^ &quot;],&quot;^M&quot;,&quot;julia&quot;,&quot;^C&quot;,&quot;6494cb51-4ad3-4327-9e27-c2c804df6c81&quot;,&quot;^N&quot;,&quot;~ufb4da180-d2e6-11e8-b7e3-d5a7297efcb7&quot;,&quot;^O&quot;,[&quot;^O&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^D&quot;,&quot;code&quot;,&quot;^P&quot;,[&quot;^ &quot;,&quot;~_&quot;,[&quot;^ &quot;,&quot;^D&quot;,&quot;data&quot;,&quot;^K&quot;,null,&quot;^Q&quot;,&quot;json&quot;,&quot;^R&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;QmYFmTkHeERryshLEYiyHmHukLBjwsjKHDPiNrzrZRt4M5&quot;,&quot;^S&quot;,11,&quot;^T&quot;,&quot;application/json&quot;]]],&quot;^U&quot;,null,&quot;^V&quot;,777,&quot;^W&quot;,null],&quot;095f7d06-d4fc-49e2-a68c-96cad2fb0a62&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;095f7d06-d4fc-49e2-a68c-96cad2fb0a62&quot;,&quot;^D&quot;,&quot;section&quot;,&quot;^Y&quot;,&quot;GPUArrays&quot;,&quot;^E&quot;,[&quot;^J&quot;,[&quot;f58a7aba-f416-41a0-bd08-8fe07b0df022&quot;,&quot;f70ec7d4-93d1-4076-843e-3ecd79642556&quot;]],&quot;^Z&quot;,[&quot;^J&quot;,[]]],&quot;e2ce55ae-a15c-49dc-ac05-239bd226b07a&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;e2ce55ae-a15c-49dc-ac05-239bd226b07a&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;This &lt;a href=&quot;/&amp;quot;https://github.com/SimonDanisch/SchroedingersSmoke.jl/blob/master/src/parallel.jl/&amp;quot;&quot;&gt;GPU accelerated smoke simulation&lt;/a&gt; was created with GPUArrays + CLArrays and runs on both GPU or CPU, with the GPU version being up to 15x faster:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;12260210-0c7d-4cbc-9262-30ac57e4110f&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;12260210-0c7d-4cbc-9262-30ac57e4110f&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;First of all, what is a GPU anyways?&lt;/p&gt;
&lt;p&gt;&quot;],&quot;07d732ed-7e58-4970-af4a-16701813f0ee&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;using CuArrays, LinearAlgebra\n\n# GPU Arrays can be constructed from all Julia arrays containing isbits types!\nA1D = cu([1, 2, 3]) # cl for CLArrays\nA1D = fill(CuArray{Int}, 0, (100,)) # CLArray for CLArrays\n# Float32 array - Float32 is usually preferred and can be up to 30x faster on most GPUs than Float64\ndiagonal_matrix = CuArray{Float32}(I, 100, 100)\nfilled = fill(CuArray, 77f0, (4, 4, 4)) # 3D array filled with Float32 77\nrandy = rand(CuArray, Float32, 42, 42) # random numbers generated on the GPU\n# The array constructor also accepts isbits iterators with a known size\n# Note, that since you can also pass isbits types to a gpu kernel directly, in most cases you won't need to materialize them as an gpu array\nfrom_iter = CuArray(1:10)\n# let's create a point type to further illustrate what can be done:\nstruct Point\n x::Float32\n y::Float32\nend\nBase.convert(::Type{Point}, x::NTuple{2, Any}) = Point(x[1], x[2])\n# because we defined the above convert from a tuple to a point\n# [Point(2, 2)] can be written as Point[(2,2)] since all array \n# elements will get converted to Point\ncustom_types = cu(Point[(1, 2), (4, 3), (2, 2)])\ntypeof(custom_types)&quot;,&quot;^I&quot;,[&quot;^J&quot;,[]],&quot;^L&quot;,[&quot;^ &quot;],&quot;^M&quot;,&quot;julia&quot;,&quot;^C&quot;,&quot;07d732ed-7e58-4970-af4a-16701813f0ee&quot;,&quot;^N&quot;,&quot;~u558d6bd0-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^O&quot;,[&quot;^O&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^D&quot;,&quot;code&quot;,&quot;^P&quot;,[&quot;^ &quot;,&quot;~_&quot;,[&quot;^ &quot;,&quot;^D&quot;,&quot;data&quot;,&quot;^K&quot;,null,&quot;^Q&quot;,&quot;json&quot;,&quot;^R&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;QmQxCHHamFSPxeHGaz6mwcQbRfh79LdFc7DBeLT6TXZ9iD&quot;,&quot;^S&quot;,18,&quot;^T&quot;,&quot;application/json&quot;]]],&quot;^U&quot;,null,&quot;^V&quot;,4394,&quot;^W&quot;,null],&quot;1b96bbbf-1dba-4b5b-9187-ab5a76361a19&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;1b96bbbf-1dba-4b5b-9187-ab5a76361a19&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;One might think that the GPU performance suffers from being written in a dynamic language like Julia, but Julia's GPU performance should be pretty much on par with the raw performance of CUDA or OpenCL. &lt;a href=&quot;/&amp;quot;https://github.com/maleadt/&amp;quot;&quot;&gt;Tim Besard&lt;/a&gt; did a great job at integrating the LLVM Nvidia compilation pipeline to achieve the same – or sometimes even better – performance as pure CUDA C code. Tim published a pretty detailed &lt;a href=&quot;/&amp;quot;https://devblogs.nvidia.com/gpu-computing-julia-programming-language//&amp;quot;&quot;&gt;blog post&lt;/a&gt; in which he explains this further. CLArrays approach is a bit different and generates OpenCL C code directly from Julia, which has the same performance as OpenCL C!&lt;/p&gt;
&lt;p&gt;&quot;],&quot;56322bde-814a-4056-8601-6ca5c8434825&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;56322bde-814a-4056-8601-6ca5c8434825&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Let's walk through a simple Machine Learning example, to see how GPUArrays can be used:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;d8fb28e2-49aa-4c56-83e4-1dfeb06c2af9&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;d8fb28e2-49aa-4c56-83e4-1dfeb06c2af9&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;The GPU is a bit more complex than what the thread example allows us to show, since the hardware threads are laid out in &lt;a href=&quot;/&amp;quot;https://devblogs.nvidia.com/even-easier-introduction-cuda//&amp;quot;&quot;&gt;blocks of threads&lt;/a&gt; – &lt;code&gt;gpu_call&lt;/code&gt; abstracts that away in the simple version, but it can also be used with more complex launch configurations:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;7568cecf-0eaa-4fe3-bc80-9cf89360c8fb&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;7568cecf-0eaa-4fe3-bc80-9cf89360c8fb&quot;,&quot;^D&quot;,&quot;embed&quot;,&quot;~:url&quot;,&quot;https://vimeo.com/235601956&quot;],&quot;f5616db3-d53e-4347-a8c4-8be45e7308f2&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;using Plots; plotly()\nx = repeat(range, inner = 10)\nspeedup = jltimes ./ cutimes\nPlots.scatter(\n log2.(x), [speedup, fill(1.0, length(speedup))], \n label = [\&quot;cuda\&quot; \&quot;cpu\&quot;], markersize = 2, markerstrokewidth = 0,\n legend = :right, xlabel = \&quot;2^N\&quot;, ylabel = \&quot;speedup\&quot;\n)&quot;,&quot;^I&quot;,[&quot;^J&quot;,[]],&quot;^L&quot;,[&quot;^ &quot;],&quot;^M&quot;,&quot;julia&quot;,&quot;^C&quot;,&quot;f5616db3-d53e-4347-a8c4-8be45e7308f2&quot;,&quot;^N&quot;,&quot;~u42b5a900-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^O&quot;,[&quot;^O&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^D&quot;,&quot;code&quot;,&quot;^P&quot;,[&quot;^ &quot;,&quot;~_&quot;,[&quot;^ &quot;,&quot;^D&quot;,&quot;plotly&quot;,&quot;^K&quot;,null,&quot;^Q&quot;,&quot;plotly&quot;,&quot;^R&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;QmYdUiaWGXPacP8DMfKY7pV4aewoW8S6RkatCtNCpqHrnQ&quot;,&quot;^S&quot;,57676,&quot;^T&quot;,&quot;application/json&quot;]]],&quot;^U&quot;,null,&quot;^V&quot;,30768,&quot;^W&quot;,null],&quot;7390d157-1854-412e-bba7-0aea472566e0&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;7390d157-1854-412e-bba7-0aea472566e0&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;To get a better idea of the performance and see some comparisons to multithreadded CPU code, I collected some more &lt;a href=&quot;/&amp;quot;https://github.com/JuliaGPU/GPUBenchmarks.jl/blob/master/results/results.md/&amp;quot;&quot;&gt;benchmarks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;d412f192-1c45-46ba-aa09-657fd3d22093&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;d412f192-1c45-46ba-aa09-657fd3d22093&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;All those Julia types behave differently when transferred to the GPU or when created on the GPU. You can use the following table to get an overview of what to expect:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;8d37d54c-4774-45ab-a1bc-bad9f73a0231&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;8d37d54c-4774-45ab-a1bc-bad9f73a0231&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;If you want a more throrough and interactive explanation of how broadcasting works, you can have a look at this great guide: &lt;a href=&quot;/&amp;quot;https://julia.guide/broadcasting/&amp;quot;&quot;&gt;julia.guide/broadcasting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&quot;],&quot;6c575ff1-1123-4a22-adbb-292a3fe99d73&quot;,[&quot;^ &quot;,&quot;^C&quot;,&quot;6c575ff1-1123-4a22-adbb-292a3fe99d73&quot;,&quot;^D&quot;,&quot;text&quot;,&quot;^E&quot;,&quot;&lt;/p&gt;
&lt;p&gt;GPUs have their own memory space with video memory (VRAM), different caches, and registers. Whatever you do, any Julia object must get transferred to the GPU before you can work with it. Not all types in Julia work on the GPU.&lt;/p&gt;
&lt;p&gt;To give you an overview first let's see what Julia types there are:&lt;/p&gt;
&lt;p&gt;&quot;]],&quot;~:transclusions&quot;,[&quot;~#cmap&quot;,[[&quot;^ &quot;,&quot;^2=&quot;,&quot;~u0287ca51-4717-45ef-9a18-70153befcf15&quot;,&quot;^2&amp;gt;&quot;,&quot;~u5bc4663e-a617-4cad-a5fd-bcf13a88c7c2&quot;,&quot;^2?&quot;,&quot;7f9b8ecb-113f-41ec-a965-450fd1c0faa7&quot;],[&quot;^ &quot;,&quot;^28&quot;,[&quot;^J&quot;,[[&quot;^ &quot;,&quot;^K&quot;,&quot;PATH&quot;,&quot;^29&quot;,&quot;/usr/local/julia/bin:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;JULIA_PATH&quot;,&quot;^29&quot;,&quot;/usr/local/julia&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;JULIA_GPG&quot;,&quot;^29&quot;,&quot;3673DF529D9049477F76B37566E3C7DC03D6E495&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;JULIA_VERSION&quot;,&quot;^29&quot;,&quot;1.0.0&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;LC_ALL&quot;,&quot;^29&quot;,&quot;en_US.UTF-8&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;LANGUAGE&quot;,&quot;^29&quot;,&quot;en_US.en&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;LANG&quot;,&quot;^29&quot;,&quot;en_US.UTF-8&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;DEBIAN_FRONTEND&quot;,&quot;^29&quot;,&quot;noninteractive&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;BASH_ENV&quot;,&quot;^29&quot;,&quot;/.bash_profile&quot;]]],&quot;^;&quot;,&quot;~m1539597886404&quot;,&quot;~:transclusion&quot;,[&quot;^ &quot;,&quot;^2=&quot;,&quot;~u0287ca51-4717-45ef-9a18-70153befcf15&quot;,&quot;^2&amp;gt;&quot;,&quot;~u5bc4663e-a617-4cad-a5fd-bcf13a88c7c2&quot;,&quot;^2?&quot;,&quot;7f9b8ecb-113f-41ec-a965-450fd1c0faa7&quot;],&quot;^I&quot;,[&quot;^J&quot;,[]],&quot;^K&quot;,&quot;Julia GPU+Flux&quot;,&quot;~:docker/environment-image&quot;,&quot;eu.gcr.io/nextjournal-com/environment@sha256:4dfe6b9d4a85cc91cdf94c349f8f3d8028a513a9c8b58cb0d71346ccdfdbda0c&quot;,&quot;^2:&quot;,&quot;^2;&quot;,&quot;~:environment?&quot;,true,&quot;^M&quot;,&quot;julia&quot;,&quot;^C&quot;,&quot;7f9b8ecb-113f-41ec-a965-450fd1c0faa7&quot;,&quot;^D&quot;,&quot;runtime&quot;,&quot;~:changed?&quot;,false,&quot;^U&quot;,null,&quot;^2&amp;lt;&quot;,[&quot;^2&amp;lt;&quot;,[&quot;^ &quot;,&quot;^2=&quot;,&quot;~u0289217e-a1bb-440d-9224-f32b960a271a&quot;,&quot;^2&amp;gt;&quot;,&quot;~u5b7430ce-e0bf-4c81-b2c1-aee21676992b&quot;,&quot;^2?&quot;,&quot;e8f2328c-62cf-4dca-849f-73746f78304c&quot;]],&quot;^2@&quot;,[[&quot;^ &quot;,&quot;^K&quot;,&quot;NEXTJOURNAL_MOUNT_CUDA&quot;,&quot;^29&quot;,&quot;9.2-cudnn7-devel-ubuntu18.04&quot;],[&quot;^ &quot;,&quot;^K&quot;,&quot;DISPLAY&quot;,&quot;^29&quot;,&quot;:0&quot;]],&quot;^2A&quot;,&quot;^2B&quot;,&quot;~:diff&quot;,&quot;&quot;]]]],&quot;^C&quot;,17592186649289,&quot;^4&quot;,&quot;~u0287c2e0-a8ac-4929-b5ab-9efe94bac3c4&quot;],&quot;~:article-settings&quot;,[&quot;^ &quot;,&quot;^1B&quot;,false,&quot;^1C&quot;,false,&quot;^1D&quot;,false,&quot;^1E&quot;,false,&quot;^1F&quot;,false],&quot;~:preview?&quot;,false,&quot;~:change-id&quot;,&quot;CLNNwCxCMobywDuw6EznMN&quot;,&quot;^1@&quot;,&quot;published&quot;,&quot;~:html&quot;,&quot;&lt;/p&gt;
&lt;div class=&quot;\&amp;quot;main\&amp;quot;&quot; data-reactroot=&quot;\&amp;quot;\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1\&amp;quot;&quot; data-react-checksum=&quot;\&amp;quot;2063632399\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;pb7\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2\&amp;quot;&quot;&gt;
&lt;article data-node-id=&quot;\&amp;quot;3950cb96-1122-4d9f-8b74-7168fb77849a\&amp;quot;&quot; id=&quot;\&amp;quot;main\&amp;quot;&quot; class=&quot;\&amp;quot;center&quot; mwarticle=&quot;&quot; data-reactid=&quot;\&amp;quot;3\&amp;quot;&quot;&gt;
&lt;section data-node-id=&quot;\&amp;quot;fdf4733c-a4d3-4665-9137-2e15e54f5181\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;21\&amp;quot;&quot;&gt;&lt;div class=&quot;\&amp;quot;relative&quot; heading-container=&quot;&quot; ph-gutter=&quot;&quot; heading-container-2=&quot;&quot; data-reactid=&quot;\&amp;quot;22\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;33\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;34\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;35\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;36\&amp;quot;&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;37\&amp;quot;&quot;&gt;
&lt;p&gt;
&lt;h2 class=&quot;\&amp;quot;heading&quot; relative=&quot;&quot; b=&quot;&quot; hd2=&quot;&quot; mw-read=&quot;&quot; data-reactid=&quot;\&amp;quot;32\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;45\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;39\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;45-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;40\&amp;quot;&quot;&gt;How does the GPU work&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;43\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;d0caaf8f-5c0b-4c0e-8b9e-1bd2e2e99aed\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;44\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;54\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;55\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;56\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;57\&amp;quot;&quot; readability=&quot;7.8205128205128&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;58\&amp;quot;&quot; readability=&quot;10.753205128205&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;59\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;48\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;60\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;48-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;61\&amp;quot;&quot;&gt;This article aims to give a quick introduction about how GPUs work and specifically give an overlook of the current Julia GPU ecosystem and how easy it is to get simple GPU programs running. To make things easier, you can run all the code samples directly in the article if you have an&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://nextjournal.com/signup?code=juliacon/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;d0caaf8f-5c0b-4c0e-8b9e-1bd2e2e99aed&quot; data-reactid=&quot;\&amp;quot;62\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;49\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;64\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;49-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;65\&amp;quot;&quot;&gt;account&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; &lt;span data-key=&quot;\&amp;quot;51\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;66\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;51-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;67\&amp;quot;&quot;&gt;and click on&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;51-1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;68\&amp;quot;&quot;&gt;&lt;strong data-reactid=&quot;\&amp;quot;69\&amp;quot;&quot;&gt;edit&lt;/strong&gt;&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;51-2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;70\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;73\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;12260210-0c7d-4cbc-9262-30ac57e4110f\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;74\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;84\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;85\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;86\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;87\&amp;quot;&quot; readability=&quot;6.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;88\&amp;quot;&quot; readability=&quot;8&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;89\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;56\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;90\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;56-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;91\&amp;quot;&quot;&gt;First of all, what is a GPU anyways?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;94\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;b15e66ec-cbe7-4b87-94fc-64a1bf79ff3b\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;95\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;105\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;106\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;107\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;108\&amp;quot;&quot; readability=&quot;9.7360703812317&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;109\&amp;quot;&quot; readability=&quot;14.604105571848&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;110\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;59\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;111\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;59-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;112\&amp;quot;&quot;&gt;A GPU is a massively parallel processor, with a couple of thousand parallel processing units. For example the&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://www.nvidia.com/en-us/data-center/tesla-k80//&amp;quot;&quot; data-link-path=&quot;\&amp;quot;b15e66ec-cbe7-4b87-94fc-64a1bf79ff3b&quot; data-reactid=&quot;\&amp;quot;113\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;60\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;115\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;60-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;116\&amp;quot;&quot;&gt;Tesla k80&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;62\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;117\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;62-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;118\&amp;quot;&quot;&gt;, which is used in this article, offers 4992 parallel CUDA cores. GPUs are quite different from CPUs in terms of frequencies, latencies and hardware capabilities, but this is somewhat similar to a slow CPU with 4992 cores!&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;121\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;6494cb51-4ad3-4327-9e27-c2c804df6c81\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;122\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;132\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;133\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;134\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;135\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;136\&amp;quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;137\&amp;quot;&quot; readability=&quot;7&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;138\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;139\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;141\&amp;quot;&quot;&gt;CUDAdrv&lt;/span&gt;; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;144\&amp;quot;&quot;&gt;CUDAdrv&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;145\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;146\&amp;quot;&quot;&gt;name&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;148\&amp;quot;&quot;&gt;CuDevice&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;150\&amp;quot;&quot;&gt;0&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;181\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;a034c062-a45b-467f-a953-cb7702a9bad4\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;182\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;192\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;193\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;194\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;195\&amp;quot;&quot; readability=&quot;7.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;196\&amp;quot;&quot; readability=&quot;10&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;197\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;65\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;198\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;65-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;199\&amp;quot;&quot;&gt;The sheer number of parallel threads one can launch can yield massive speed-ups, but also makes it harder to utilize the GPU. Let's have a detailed look at the disadvantages one buys into when utilizing this raw power:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;202\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;6b8c8d02-f072-4454-9687-1e0b795d9e47\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;203\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;213\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;214\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;215\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;216\&amp;quot;&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;217\&amp;quot;&quot;&gt;
&lt;ul data-reactid=&quot;\&amp;quot;218\&amp;quot;&quot;&gt;&lt;li data-reactid=&quot;\&amp;quot;219\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;68\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;220\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;68-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;221\&amp;quot;&quot;&gt;A GPU is a separate piece of hardware with its own memory space and different architecture. As a result, there are long transfer times from RAM to the GPUs memory (VRAM). Even launching a kernel on the GPU (in other words scheduling a function call) introduces large latencies. Times are around ~10us for GPUs, compared to a few nano seconds on a CPU&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;222\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;70\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;223\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;70-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;224\&amp;quot;&quot;&gt;Setting up a kernel can quickly become complicated without a high level wrapper&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;225\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;72\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;226\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;72-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;227\&amp;quot;&quot;&gt;Lower precision is the default and higher precision computations can easily void all performance gains&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;228\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;74\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;229\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;74-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;230\&amp;quot;&quot;&gt;GPU functions (kernels) are inherently parallel, so writing GPU kernels is at least as difficult as writing parallel CPU code, but the difference in hardware adds quite a bit of complexity&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;231\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;76\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;232\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;76-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;233\&amp;quot;&quot;&gt;Related to the above, a lot of algorithms won't port nicely to the GPU. For more details on what to expect, have a look at this&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://streamhpc.com/blog/2013-06-03/the-application-areas-opencl-and-cuda-can-be-used//&amp;quot;&quot; data-link-path=&quot;\&amp;quot;6b8c8d02-f072-4454-9687-1e0b795d9e47&quot; data-reactid=&quot;\&amp;quot;234\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;77\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;236\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;77-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;237\&amp;quot;&quot;&gt;blog post&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;88\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;238\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;88-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;239\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;240\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;241\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;80\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;242\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;80-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;243\&amp;quot;&quot;&gt;Kernels are usually written in a C/C++ dialect, which is not the nicest language to write down your algorithms&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;244\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;82\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;245\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;82-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;246\&amp;quot;&quot;&gt;There is a divide between CUDA and OpenCL, which are the dominant frameworks used to write low-level GPU code. While CUDA only supports Nvidia hardware, OpenCL supports all hardware but is a bit rough around the edges. One needs to decide what to use, and will get pretty much stuck with that decision&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;253\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;0f5d9919-e5ed-4259-8a25-9c835cd74ab1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;254\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;264\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;265\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;266\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;267\&amp;quot;&quot; readability=&quot;8&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;268\&amp;quot;&quot; readability=&quot;11&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;269\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;89\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;270\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;89-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;271\&amp;quot;&quot;&gt;The good news is Julia, a high level scripting language, allows you to write both kernel and surrounding code in Julia itself, while running on most GPU hardware!&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;section data-node-id=&quot;\&amp;quot;095f7d06-d4fc-49e2-a68c-96cad2fb0a62\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;274\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;296\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;f58a7aba-f416-41a0-bd08-8fe07b0df022\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;297\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;307\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;308\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;309\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;310\&amp;quot;&quot; readability=&quot;7.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;311\&amp;quot;&quot; readability=&quot;10&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;312\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;95\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;313\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;95-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;314\&amp;quot;&quot;&gt;Most highly parallel algorithms need to churn through quite a bit of data to overcome all the threading and latency overheads. So most algorithms will need arrays to manage all that data, which calls for a good GPU array library as a crucial foundation.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;317\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;f70ec7d4-93d1-4076-843e-3ecd79642556\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;318\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;328\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;329\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;330\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;331\&amp;quot;&quot; readability=&quot;18.773977695167&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;332\&amp;quot;&quot; readability=&quot;32.607434944238&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;333\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;98\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;334\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;98-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;335\&amp;quot;&quot;&gt;GPUArrays.jl is that foundation in Julia. It offers an abstract array implementation tailored towards using the raw power of highly parallel hardware. It contains all the necessary functionality to set up the GPU, launch Julia GPU functions and offers some basic array algorithms.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-reactid=&quot;\&amp;quot;336\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;100\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;337\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;100-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;338\&amp;quot;&quot;&gt;Being abstract means that it needs a concrete implementation coming in the form of&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://github.com/JuliaGPU/CuArrays.jl/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;f70ec7d4-93d1-4076-843e-3ecd79642556&quot; data-reactid=&quot;\&amp;quot;339\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;101\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;341\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;101-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;342\&amp;quot;&quot;&gt;CuArrays&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; &lt;span data-key=&quot;\&amp;quot;103\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;343\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;103-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;344\&amp;quot;&quot;&gt;and&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://github.com/JuliaGPU/CLArrays.jl/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;f70ec7d4-93d1-4076-843e-3ecd79642556&quot; data-reactid=&quot;\&amp;quot;345\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;104\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;347\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;104-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;348\&amp;quot;&quot;&gt;CLArrays&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;106\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;349\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;106-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;350\&amp;quot;&quot;&gt;. They both offer exactly the same interface, thanks to inheriting all functionality from GPUArrays. The only difference shows up when allocating an array, which forces one to decide if the array lives on a CUDA or OpenCL device. More about this in the Memory section.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-reactid=&quot;\&amp;quot;351\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;108\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;352\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;108-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;353\&amp;quot;&quot;&gt;GPUArrays helps to reduce code duplication, because it allows one to write hardware independent GPU kernels which can be compiled to native GPU code by either CuArrays or CLArrays. So, lots of generic kernels can be shared between all packages inheriting from GPUArrays.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-reactid=&quot;\&amp;quot;354\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;110\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;355\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;110-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;356\&amp;quot;&quot;&gt;To help you choose: CuArrays only works with Nvidia GPUs, while CLArrays works with most available GPUs. CuArrays is more stable than CLArrays and works on Julia 0.7 already. The speed differences are mixed with no clear winner. I would suggest to try both and see what works best.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-reactid=&quot;\&amp;quot;357\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;112\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;358\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;112-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;359\&amp;quot;&quot;&gt;For this article I'm going to choose CuArrays, since this article is written for Julia 0.7 / 1.0, which still isn't supported by CLArrays.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section data-node-id=&quot;\&amp;quot;830cd8cc-8d91-412d-b90e-6f1d81a3a8a1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;363\&amp;quot;&quot;&gt;&lt;div class=&quot;\&amp;quot;relative&quot; heading-container=&quot;&quot; ph-gutter=&quot;&quot; heading-container-3=&quot;&quot; data-reactid=&quot;\&amp;quot;364\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;375\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;376\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;377\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;378\&amp;quot;&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;379\&amp;quot;&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;\&amp;quot;heading&quot; relative=&quot;&quot; b=&quot;&quot; hd3=&quot;&quot; mw-read=&quot;&quot; data-reactid=&quot;\&amp;quot;374\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;115\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;381\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;115-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;382\&amp;quot;&quot;&gt;Performance&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;385\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;fc35d0a2-6efb-4971-9728-e5b6198ad57e\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;386\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;396\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;397\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;398\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;399\&amp;quot;&quot; readability=&quot;6.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;400\&amp;quot;&quot; readability=&quot;8&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;401\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;118\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;402\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;118-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;403\&amp;quot;&quot;&gt;Let's quickly motivate why we would want to move our calculations to the GPU with a simple interactive code example calculating the julia set:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;406\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;778cc725-33cc-4cb1-a388-6a9da1daff5d\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;407\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;417\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;418\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;419\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;442\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;443\&amp;quot;&quot; readability=&quot;22.5&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;444\&amp;quot;&quot; readability=&quot;40&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;445\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;446\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;448\&amp;quot;&quot;&gt;CuArrays&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;451\&amp;quot;&quot;&gt;FileIO&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;454\&amp;quot;&quot;&gt;Colors&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;457\&amp;quot;&quot;&gt;GPUArrays&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;460\&amp;quot;&quot;&gt;BenchmarkTools&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;462\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;464\&amp;quot;&quot;&gt;CuArrays&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;465\&amp;quot;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;467\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;469\&amp;quot;&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;471\&amp;quot;&quot;&gt;The function calculating the Julia set&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;473\&amp;quot;&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;475\&amp;quot;&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;477\&amp;quot;&quot;&gt;juliaset&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;479\&amp;quot;&quot;&gt;z0&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;482\&amp;quot;&quot;&gt;maxiter&lt;/span&gt;)\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;486\&amp;quot;&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;488\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;490\&amp;quot;&quot;&gt;ComplexF32&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;492\&amp;quot;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;493\&amp;quot;&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;496\&amp;quot;&quot;&gt;0.75&lt;/span&gt;)\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;500\&amp;quot;&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;502\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;504\&amp;quot;&quot;&gt;z0&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;507\&amp;quot;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;509\&amp;quot;&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;511\&amp;quot;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;513\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;514\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;515\&amp;quot;&quot;&gt;maxiter&lt;/span&gt;\n        &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;518\&amp;quot;&quot;&gt;abs2&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;520\&amp;quot;&quot;&gt;z&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;523\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;525\&amp;quot;&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;526\&amp;quot;&quot;&gt;f0&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;528\&amp;quot;&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;529\&amp;quot;&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;531\&amp;quot;&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;534\&amp;quot;&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;536\&amp;quot;&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;538\&amp;quot;&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;541\&amp;quot;&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;543\&amp;quot;&quot;&gt;UInt8&lt;/span&gt;\n        &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;546\&amp;quot;&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;548\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;550\&amp;quot;&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;552\&amp;quot;&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;554\&amp;quot;&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;556\&amp;quot;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;558\&amp;quot;&quot;&gt;c&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;561\&amp;quot;&quot;&gt;end&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;564\&amp;quot;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;566\&amp;quot;&quot;&gt;maxiter&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;568\&amp;quot;&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;570\&amp;quot;&quot;&gt;UInt8&lt;/span&gt; \n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;574\&amp;quot;&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;576\&amp;quot;&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;578\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;580\&amp;quot;&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;581\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;582\&amp;quot;&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;583\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;584\&amp;quot;&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;585\&amp;quot;&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;586\&amp;quot;&quot;&gt;12&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;588\&amp;quot;&quot;&gt;cutimes&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;591\&amp;quot;&quot;&gt;jltimes&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;593\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;595\&amp;quot;&quot;&gt;Float64&lt;/span&gt;[], &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;600\&amp;quot;&quot;&gt;Float64&lt;/span&gt;[]\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;604\&amp;quot;&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;606\&amp;quot;&quot;&gt;run_bench&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;608\&amp;quot;&quot;&gt;in&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;611\&amp;quot;&quot;&gt;out&lt;/span&gt;)\n  \n  \n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;621\&amp;quot;&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;623\&amp;quot;&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;625\&amp;quot;&quot;&gt;juliaset&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;626\&amp;quot;&quot;&gt;.&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;628\&amp;quot;&quot;&gt;in&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;631\&amp;quot;&quot;&gt;16&lt;/span&gt;)\n  \n  \n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;641\&amp;quot;&quot;&gt;GPUArrays&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;642\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;643\&amp;quot;&quot;&gt;synchronize&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;645\&amp;quot;&quot;&gt;out&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;648\&amp;quot;&quot;&gt;end&lt;/span&gt;\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;652\&amp;quot;&quot;&gt;last_jl&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;655\&amp;quot;&quot;&gt;last_cu&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;657\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;659\&amp;quot;&quot;&gt;nothing&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;662\&amp;quot;&quot;&gt;nothing&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;664\&amp;quot;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;666\&amp;quot;&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;668\&amp;quot;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;670\&amp;quot;&quot;&gt;range&lt;/span&gt;\n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;673\&amp;quot;&quot;&gt;w&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;676\&amp;quot;&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;678\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;680\&amp;quot;&quot;&gt;N&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;683\&amp;quot;&quot;&gt;N&lt;/span&gt;\n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;686\&amp;quot;&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;688\&amp;quot;&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;691\&amp;quot;&quot;&gt;ComplexF32&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;693\&amp;quot;&quot;&gt;r&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;696\&amp;quot;&quot;&gt;i&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;699\&amp;quot;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;701\&amp;quot;&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;702\&amp;quot;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;703\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;704\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;705\&amp;quot;&quot;&gt;-&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;707\&amp;quot;&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;708\&amp;quot;&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;709\&amp;quot;&quot;&gt;w&lt;/span&gt;)&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;711\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;712\&amp;quot;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;713\&amp;quot;&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;716\&amp;quot;&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;717\&amp;quot;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;718\&amp;quot;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;719\&amp;quot;&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;720\&amp;quot;&quot;&gt;:&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;722\&amp;quot;&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;723\&amp;quot;&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;724\&amp;quot;&quot;&gt;h&lt;/span&gt;)&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;726\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;727\&amp;quot;&quot;&gt;1.5&lt;/span&gt;]\n  &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;731\&amp;quot;&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;734\&amp;quot;&quot;&gt;times&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;737\&amp;quot;&quot;&gt;Typ&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;740\&amp;quot;&quot;&gt;in&lt;/span&gt; ((&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;744\&amp;quot;&quot;&gt;cutimes&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;747\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;), (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;752\&amp;quot;&quot;&gt;jltimes&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;755\&amp;quot;&quot;&gt;Array&lt;/span&gt;))\n    \n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;763\&amp;quot;&quot;&gt;q_converted&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;765\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;767\&amp;quot;&quot;&gt;Typ&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;769\&amp;quot;&quot;&gt;q&lt;/span&gt;)\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;773\&amp;quot;&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;775\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;777\&amp;quot;&quot;&gt;Typ&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;779\&amp;quot;&quot;&gt;zeros&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;781\&amp;quot;&quot;&gt;UInt8&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;784\&amp;quot;&quot;&gt;size&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;786\&amp;quot;&quot;&gt;q&lt;/span&gt;)))\n    &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;792\&amp;quot;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;794\&amp;quot;&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;796\&amp;quot;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;798\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;799\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;800\&amp;quot;&quot;&gt;10&lt;/span&gt; \n      \n      &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;808\&amp;quot;&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;810\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;812\&amp;quot;&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;813\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-meta\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;814\&amp;quot;&quot;&gt;@elapsed&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;816\&amp;quot;&quot;&gt;begin&lt;/span&gt;\n\t\t\t\t&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;819\&amp;quot;&quot;&gt;run_bench&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;821\&amp;quot;&quot;&gt;q_converted&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;824\&amp;quot;&quot;&gt;result&lt;/span&gt;)\n      &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;828\&amp;quot;&quot;&gt;end&lt;/span&gt;\n      &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;831\&amp;quot;&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;833\&amp;quot;&quot;&gt;last_jl&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;836\&amp;quot;&quot;&gt;last_cu&lt;/span&gt; \n      &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;841\&amp;quot;&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;843\&amp;quot;&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;845\&amp;quot;&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;847\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;\n        &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;850\&amp;quot;&quot;&gt;last_cu&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;852\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;854\&amp;quot;&quot;&gt;result&lt;/span&gt;\n      &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;857\&amp;quot;&quot;&gt;else&lt;/span&gt;\n      \t&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;860\&amp;quot;&quot;&gt;last_jl&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;862\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;864\&amp;quot;&quot;&gt;result&lt;/span&gt;\n      &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;867\&amp;quot;&quot;&gt;end&lt;/span&gt;\n      &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;870\&amp;quot;&quot;&gt;push!&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;872\&amp;quot;&quot;&gt;times&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;875\&amp;quot;&quot;&gt;t&lt;/span&gt;)\n    &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;879\&amp;quot;&quot;&gt;end&lt;/span&gt;\n  &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;882\&amp;quot;&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;884\&amp;quot;&quot;&gt;end&lt;/span&gt;\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;887\&amp;quot;&quot;&gt;cu_jl&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;889\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;891\&amp;quot;&quot;&gt;hcat&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;893\&amp;quot;&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;895\&amp;quot;&quot;&gt;last_cu&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;899\&amp;quot;&quot;&gt;last_jl&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;902\&amp;quot;&quot;&gt;cmap&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;904\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;906\&amp;quot;&quot;&gt;colormap&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;908\&amp;quot;&quot;&gt;&quot;Blues&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;909\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;912\&amp;quot;&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;914\&amp;quot;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;916\&amp;quot;&quot;&gt;1&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;919\&amp;quot;&quot;&gt;color_lookup&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;921\&amp;quot;&quot;&gt;val&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;924\&amp;quot;&quot;&gt;cmap&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;927\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;929\&amp;quot;&quot;&gt;cmap&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;931\&amp;quot;&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;933\&amp;quot;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;935\&amp;quot;&quot;&gt;1&lt;/span&gt;]\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;938\&amp;quot;&quot;&gt;save&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;940\&amp;quot;&quot;&gt;&quot;results/juliaset.png&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;941\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;944\&amp;quot;&quot;&gt;color_lookup&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;945\&amp;quot;&quot;&gt;.&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;947\&amp;quot;&quot;&gt;cu_jl&lt;/span&gt;, (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;951\&amp;quot;&quot;&gt;cmap&lt;/span&gt;,)))
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;result-view&quot; file-view=&quot;&quot; relative=&quot;&quot; data-reactid=&quot;\&amp;quot;978\&amp;quot;&quot;&gt;&lt;img src=&quot;https://nextjournal.com/%22/data/QmQXdNWEJhYMUpoJueuHCg2eUgjonmoP8pBTTWZTtgj5X8?content-type=image%2Fpng/%22&quot; data-reactid=&quot;\&amp;quot;984\&amp;quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;985\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;f5616db3-d53e-4347-a8c4-8be45e7308f2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;986\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;996\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;997\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;998\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;999\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1000\&amp;quot;&quot; readability=&quot;12&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1001\&amp;quot;&quot; readability=&quot;19&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;1002\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1003\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1005\&amp;quot;&quot;&gt;Plots&lt;/span&gt;; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1008\&amp;quot;&quot;&gt;plotly&lt;/span&gt;()\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1012\&amp;quot;&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1014\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1016\&amp;quot;&quot;&gt;repeat&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1018\&amp;quot;&quot;&gt;range&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1021\&amp;quot;&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1023\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1025\&amp;quot;&quot;&gt;10&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1028\&amp;quot;&quot;&gt;speedup&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1030\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1032\&amp;quot;&quot;&gt;jltimes&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1034\&amp;quot;&quot;&gt;./&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1036\&amp;quot;&quot;&gt;cutimes&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1038\&amp;quot;&quot;&gt;Plots&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1039\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1040\&amp;quot;&quot;&gt;scatter&lt;/span&gt;(\n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1044\&amp;quot;&quot;&gt;log2&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1045\&amp;quot;&quot;&gt;.&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1047\&amp;quot;&quot;&gt;x&lt;/span&gt;), [&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1052\&amp;quot;&quot;&gt;speedup&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1055\&amp;quot;&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1057\&amp;quot;&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1060\&amp;quot;&quot;&gt;length&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1062\&amp;quot;&quot;&gt;speedup&lt;/span&gt;))], \n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1070\&amp;quot;&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1072\&amp;quot;&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1075\&amp;quot;&quot;&gt;&quot;cuda&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1076\&amp;quot;&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1078\&amp;quot;&quot;&gt;&quot;cpu&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1079\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;], &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1083\&amp;quot;&quot;&gt;markersize&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1085\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1087\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1090\&amp;quot;&quot;&gt;markerstrokewidth&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1092\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1094\&amp;quot;&quot;&gt;0&lt;/span&gt;,\n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1098\&amp;quot;&quot;&gt;legend&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1100\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1102\&amp;quot;&quot;&gt;:right&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1105\&amp;quot;&quot;&gt;xlabel&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1107\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1109\&amp;quot;&quot;&gt;&quot;2^N&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1110\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1113\&amp;quot;&quot;&gt;ylabel&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1115\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1117\&amp;quot;&quot;&gt;&quot;speedup&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1118\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;\n)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1149\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;63a71268-3337-4bf2-8d47-b7e641d16dbb\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1150\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1160\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1161\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1162\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1163\&amp;quot;&quot; readability=&quot;7&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1164\&amp;quot;&quot; readability=&quot;9&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1165\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;121\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1166\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;121-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1167\&amp;quot;&quot;&gt;As you can see, for large arrays one gets a solid 60-80x speed-up by moving the calculation to the GPU. Getting this speed-up was as simple as converting the Julia array to a GPUArray.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1170\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;1b96bbbf-1dba-4b5b-9187-ab5a76361a19\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1171\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1181\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1182\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1183\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1184\&amp;quot;&quot; readability=&quot;8.2186411149826&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1185\&amp;quot;&quot; readability=&quot;11.602787456446&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1186\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;124\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1187\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;124-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1188\&amp;quot;&quot;&gt;One might think that the GPU performance suffers from being written in a dynamic language like Julia, but Julia's GPU performance should be pretty much on par with the raw performance of CUDA or OpenCL.&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://github.com/maleadt/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;1b96bbbf-1dba-4b5b-9187-ab5a76361a19&quot; data-reactid=&quot;\&amp;quot;1189\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;125\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1191\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;125-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1192\&amp;quot;&quot;&gt;Tim Besard&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; &lt;span data-key=&quot;\&amp;quot;127\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1193\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;127-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1194\&amp;quot;&quot;&gt;did a great job at integrating the LLVM Nvidia compilation pipeline to achieve the same – or sometimes even better – performance as pure CUDA C code. Tim published a pretty detailed&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://devblogs.nvidia.com/gpu-computing-julia-programming-language//&amp;quot;&quot; data-link-path=&quot;\&amp;quot;1b96bbbf-1dba-4b5b-9187-ab5a76361a19&quot; data-reactid=&quot;\&amp;quot;1195\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;128\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1197\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;128-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1198\&amp;quot;&quot;&gt;blog post&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; &lt;span data-key=&quot;\&amp;quot;130\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1199\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;130-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1200\&amp;quot;&quot;&gt;in which he explains this further. CLArrays approach is a bit different and generates OpenCL C code directly from Julia, which has the same performance as OpenCL C!&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1203\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;7390d157-1854-412e-bba7-0aea472566e0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1204\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1214\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1215\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1216\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1217\&amp;quot;&quot; readability=&quot;6.4444444444444&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1218\&amp;quot;&quot; readability=&quot;8.2857142857143&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1219\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;133\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1220\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;133-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1221\&amp;quot;&quot;&gt;To get a better idea of the performance and see some comparisons to multithreadded CPU code, I collected some more&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://github.com/JuliaGPU/GPUBenchmarks.jl/blob/master/results/results.md/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;7390d157-1854-412e-bba7-0aea472566e0&quot; data-reactid=&quot;\&amp;quot;1222\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;134\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1224\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;134-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1225\&amp;quot;&quot;&gt;benchmarks&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;136\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1226\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;136-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1227\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section data-node-id=&quot;\&amp;quot;2eba3a00-d38e-45f7-b5c0-8a1bba7f5ce2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1231\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1253\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;6c575ff1-1123-4a22-adbb-292a3fe99d73\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1254\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1264\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1265\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1266\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1267\&amp;quot;&quot; readability=&quot;9.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1268\&amp;quot;&quot; readability=&quot;14&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1269\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;142\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1270\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;142-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1271\&amp;quot;&quot;&gt;GPUs have their own memory space with video memory (VRAM), different caches, and registers. Whatever you do, any Julia object must get transferred to the GPU before you can work with it. Not all types in Julia work on the GPU.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-reactid=&quot;\&amp;quot;1272\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;144\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1273\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;144-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1274\&amp;quot;&quot;&gt;To give you an overview first let's see what Julia types there are:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1277\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;5b06a745-4830-4b8e-a5b2-df8449cef3b3\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1278\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;1288\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;1289\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1290\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1291\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1292\&amp;quot;&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1293\&amp;quot;&quot; readability=&quot;12&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;1294\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1295\&amp;quot;&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1297\&amp;quot;&quot;&gt;Test&lt;/span&gt; \n\n\n\t&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1306\&amp;quot;&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1307\&amp;quot;&quot;&gt;::Float32&lt;/span&gt; \n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1310\&amp;quot;&quot;&gt;end&lt;/span&gt;\n\n\n\n&lt;span class=&quot;\&amp;quot;cm-meta\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1317\&amp;quot;&quot;&gt;@assert&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1319\&amp;quot;&quot;&gt;isbitstype&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1321\&amp;quot;&quot;&gt;Test&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1324\&amp;quot;&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1326\&amp;quot;&quot;&gt;true&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1328\&amp;quot;&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1330\&amp;quot;&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1333\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1336\&amp;quot;&quot;&gt;2&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1339\&amp;quot;&quot;&gt;isa&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1341\&amp;quot;&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1344\&amp;quot;&quot;&gt;Tuple&lt;/span&gt;{&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1346\&amp;quot;&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1349\&amp;quot;&quot;&gt;Int&lt;/span&gt;}) \n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1355\&amp;quot;&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1357\&amp;quot;&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1359\&amp;quot;&quot;&gt;Test2&lt;/span&gt; \n\t&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1364\&amp;quot;&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1365\&amp;quot;&quot;&gt;::Float32&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1367\&amp;quot;&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1369\&amp;quot;&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1371\&amp;quot;&quot;&gt;Test3&lt;/span&gt;\n\t\n\t&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1377\&amp;quot;&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1378\&amp;quot;&quot;&gt;::Vector{Float32&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1379\&amp;quot;&quot;&gt;}&lt;/span&gt;\n\t&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1382\&amp;quot;&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1383\&amp;quot;&quot;&gt;::Test2&lt;/span&gt; \n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1387\&amp;quot;&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1389\&amp;quot;&quot;&gt;Vector&lt;/span&gt;{&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1391\&amp;quot;&quot;&gt;Test&lt;/span&gt;} \n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1396\&amp;quot;&quot;&gt;Vector&lt;/span&gt;{&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1398\&amp;quot;&quot;&gt;Test2&lt;/span&gt;} 
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1432\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;d412f192-1c45-46ba-aa09-657fd3d22093\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1433\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1443\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1444\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1445\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1446\&amp;quot;&quot; readability=&quot;6.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1447\&amp;quot;&quot; readability=&quot;8&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1448\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;147\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1449\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;147-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1450\&amp;quot;&quot;&gt;All those Julia types behave differently when transferred to the GPU or when created on the GPU. You can use the following table to get an overview of what to expect:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1453\&amp;quot;&quot; readability=&quot;10.5&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-formula=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;1da131e8-d5a9-4e7b-a605-14391ed24107\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1454\&amp;quot;&quot; readability=&quot;16&quot;&gt;

&lt;p&gt;&lt;span data-reactid=&quot;\&amp;quot;1466\&amp;quot;&quot;&gt;&lt;span data-reactid=&quot;\&amp;quot;1467\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;katex-display\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;katex\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;katex-mathml\&amp;quot;&quot;&gt;[ isbits typeimmutable typemutable typejulia arraygpu array(device) local memorylocation of creationon CPUyes, copyno ptrs, copycopynoby referencenoon GPUyesmay contain device ptrno (on 0.7 if elimated)nonoyes]\\tiny\n\\left[\n\\begin{array}{ccccccc}\n\\text{} &amp;amp; \\text{ isbits type} &amp;amp; \\text{immutable type} &amp;amp; \\text{mutable type} &amp;amp; \\text{julia array} &amp;amp; \\text{gpu array} &amp;amp; \\text{(device) local memory} \\\\\n\\text{location of creation} &amp;amp; \\text{} &amp;amp; \\text{} &amp;amp; \\text{} &amp;amp; \\text{} &amp;amp; \\text{} &amp;amp; \\text{} \\\\\n\\text{on CPU} &amp;amp; \\text{yes, copy} &amp;amp; \\text{no ptrs, copy} &amp;amp; \\text{copy} &amp;amp; \\text{no} &amp;amp; \\text{by reference} &amp;amp; \\text{no} \\\\\n\\text{on GPU} &amp;amp; \\text{yes} &amp;amp; \\text{may contain device ptr} &amp;amp; \\text{no (on 0.7 if elimated)} &amp;amp; \\text{no} &amp;amp; \\text{no} &amp;amp; \\text{yes} \\\\\n\\end{array}\n\\right]&lt;/span&gt;&lt;span class=&quot;\&amp;quot;katex-html\&amp;quot;&quot; aria-hidden=&quot;\&amp;quot;true\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;base&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;minner&quot; uncramped=&quot;&quot; sizing=&quot;&quot; reset-size5=&quot;&quot; size1=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mopen&quot; style-wrap=&quot;&quot; reset-textstyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;delimsizing&quot;&gt;&lt;span class=&quot;\&amp;quot;vlist\&amp;quot;&quot;&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎢&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎢&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎢&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎢&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎡&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;baseline-fix\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mtable\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;col-align-c\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;vlist\&amp;quot;&quot;&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;location of creation&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;on CPU&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;on GPU&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;baseline-fix\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;col-align-c\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;vlist\&amp;quot;&quot;&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt; isbits type&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;yes, copy&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;baseline-fix\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;col-align-c\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;vlist\&amp;quot;&quot;&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;immutable type&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;no ptrs, copy&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;may contain device ptr&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;baseline-fix\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;col-align-c\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;vlist\&amp;quot;&quot;&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;mutable type&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;copy&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;no (on 0.7 if elimated)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;baseline-fix\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;col-align-c\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;vlist\&amp;quot;&quot;&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;julia array&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;no&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;no&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;baseline-fix\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;col-align-c\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;vlist\&amp;quot;&quot;&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;gpu array&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;by reference&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;no&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;baseline-fix\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;col-align-c\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;vlist\&amp;quot;&quot;&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;(device) local memory&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;no&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;baseline-fix\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mclose&quot; style-wrap=&quot;&quot; reset-textstyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;delimsizing&quot;&gt;&lt;span class=&quot;\&amp;quot;vlist\&amp;quot;&quot;&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎦&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎤&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;baseline-fix\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1470\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;b9afd6ac-9711-4b4b-9f88-89e40405af04\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1471\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1481\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1482\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1483\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1484\&amp;quot;&quot; readability=&quot;9&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1485\&amp;quot;&quot; readability=&quot;13&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1486\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;150\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1487\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;150-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1488\&amp;quot;&quot;&gt;Location of creation describes if the object was created on the CPU and then transferred to the GPU kernel, or if it was created on the GPU inside the kernel. The table shows if it is possible to create an instance of a type, and for the transfer from CPU to GPU, the table also indicates if the object gets copied or passed by reference.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;section data-node-id=&quot;\&amp;quot;90e93106-c175-437c-a107-fb911bf59788\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1491\&amp;quot;&quot;&gt;&lt;div class=&quot;\&amp;quot;relative&quot; heading-container=&quot;&quot; ph-gutter=&quot;&quot; heading-container-4=&quot;&quot; data-reactid=&quot;\&amp;quot;1492\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1503\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1504\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1505\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1506\&amp;quot;&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1507\&amp;quot;&quot;&gt;
&lt;p&gt;
&lt;h4 class=&quot;\&amp;quot;heading&quot; relative=&quot;&quot; b=&quot;&quot; hd4=&quot;&quot; mw-read=&quot;&quot; data-reactid=&quot;\&amp;quot;1502\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;153\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1509\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;153-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1510\&amp;quot;&quot;&gt;Garbage Collection&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1513\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;fe642bca-b571-4183-a38a-1e937833a4d8\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1514\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1524\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1525\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1526\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1527\&amp;quot;&quot; readability=&quot;10.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1528\&amp;quot;&quot; readability=&quot;16&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1529\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;156\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1530\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;156-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1531\&amp;quot;&quot;&gt;A big difference when working with the GPU is that there is no garbage collector (GC) on the GPU. This is gladly not a big issue, since the kind of high performance kernel one writes for the GPU shouldn't create any GC-tracked memory to begin with.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-reactid=&quot;\&amp;quot;1532\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;158\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1533\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;158-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1534\&amp;quot;&quot;&gt;Implementing a GC for the GPU is possible, but remember that every kernel executed is massively parallel. Creating and tracking lots of heap memory in every one of the ~1000 gpu threads will quickly destroy any performance gains, so it's really just not worth the effort.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1537\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;24e4194b-b6fd-43c4-b876-cc6b6aea8403\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1538\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1548\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1549\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1550\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1551\&amp;quot;&quot; readability=&quot;9&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1552\&amp;quot;&quot; readability=&quot;13&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1553\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;161\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1554\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;161-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1555\&amp;quot;&quot;&gt;As an alternative to heap allocated arrays inside the kernel, you can use GPUArrays. The GPUArray constructor will create GPU buffers and transfer the data to VRAM. If you call&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;161-1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1556\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;1557\&amp;quot;&quot;&gt;Array(gpu_array)&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;161-2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1558\&amp;quot;&quot;&gt;the array will get transferred back to RAM, represented as a normal Julia Array. The Julia handle to those gpu arrays is tracked by Julia's GC and if it's not used anymore, the GPU memory will be freed.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1561\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;f9c22c0d-fa74-4a04-a4a8-52ccfea9b2d7\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1562\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1572\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1573\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1574\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1575\&amp;quot;&quot; readability=&quot;8.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1576\&amp;quot;&quot; readability=&quot;12&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1577\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;166\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1578\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;166-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1579\&amp;quot;&quot;&gt;Consequently, one can only use stack allocation on the device, and for the rest pre-allocated GPU buffers are used. As transfers are expensive, it is common to reuse and pre-allocate as much as possible when programming the GPU.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section data-node-id=&quot;\&amp;quot;4e09f815-feab-4f09-8d9f-e63eba843aa2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1583\&amp;quot;&quot;&gt;&lt;div class=&quot;\&amp;quot;relative&quot; heading-container=&quot;&quot; ph-gutter=&quot;&quot; heading-container-4=&quot;&quot; data-reactid=&quot;\&amp;quot;1584\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1595\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1596\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1597\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1598\&amp;quot;&quot; readability=&quot;6&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1599\&amp;quot;&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;
&lt;h4 class=&quot;\&amp;quot;heading&quot; relative=&quot;&quot; b=&quot;&quot; hd4=&quot;&quot; mw-read=&quot;&quot; data-reactid=&quot;\&amp;quot;1594\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;169\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1601\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;169-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1602\&amp;quot;&quot;&gt;The GPUArray Constructors&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1605\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;07d732ed-7e58-4970-af4a-16701813f0ee\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1606\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;1616\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;1617\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1618\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1619\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1620\&amp;quot;&quot; readability=&quot;19&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1621\&amp;quot;&quot; readability=&quot;33&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;1622\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1623\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1625\&amp;quot;&quot;&gt;CuArrays&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1628\&amp;quot;&quot;&gt;LinearAlgebra&lt;/span&gt;\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1633\&amp;quot;&quot;&gt;A1D&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1635\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1637\&amp;quot;&quot;&gt;cu&lt;/span&gt;([&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1640\&amp;quot;&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1643\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1646\&amp;quot;&quot;&gt;3&lt;/span&gt;]) \n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1652\&amp;quot;&quot;&gt;A1D&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1654\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1656\&amp;quot;&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1658\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;{&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1660\&amp;quot;&quot;&gt;Int&lt;/span&gt;}, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1664\&amp;quot;&quot;&gt;0&lt;/span&gt;, (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1668\&amp;quot;&quot;&gt;100&lt;/span&gt;,)) \n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1677\&amp;quot;&quot;&gt;diagonal_matrix&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1679\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1681\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1682\&amp;quot;&quot;&gt;{Float32}&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1684\&amp;quot;&quot;&gt;I&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1687\&amp;quot;&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1690\&amp;quot;&quot;&gt;100&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1693\&amp;quot;&quot;&gt;filled&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1695\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1697\&amp;quot;&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1699\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1702\&amp;quot;&quot;&gt;77&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1703\&amp;quot;&quot;&gt;f0&lt;/span&gt;, (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1707\&amp;quot;&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1710\&amp;quot;&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1713\&amp;quot;&quot;&gt;4&lt;/span&gt;)) \n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1719\&amp;quot;&quot;&gt;randy&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1721\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1723\&amp;quot;&quot;&gt;rand&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1725\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1728\&amp;quot;&quot;&gt;Float32&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1731\&amp;quot;&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1734\&amp;quot;&quot;&gt;42&lt;/span&gt;) \n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1743\&amp;quot;&quot;&gt;from_iter&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1745\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1747\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1749\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1750\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1751\&amp;quot;&quot;&gt;10&lt;/span&gt;)\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1756\&amp;quot;&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1758\&amp;quot;&quot;&gt;Point&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1761\&amp;quot;&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1762\&amp;quot;&quot;&gt;::Float32&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1765\&amp;quot;&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1766\&amp;quot;&quot;&gt;::Float32&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1768\&amp;quot;&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1770\&amp;quot;&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1771\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1772\&amp;quot;&quot;&gt;convert&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1774\&amp;quot;&quot;&gt;::Type{Point&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1775\&amp;quot;&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1778\&amp;quot;&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1779\&amp;quot;&quot;&gt;::NTuple{2, Any&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1780\&amp;quot;&quot;&gt;}&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1783\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1785\&amp;quot;&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1787\&amp;quot;&quot;&gt;x&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1789\&amp;quot;&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1793\&amp;quot;&quot;&gt;x&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1795\&amp;quot;&quot;&gt;2&lt;/span&gt;])\n\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1805\&amp;quot;&quot;&gt;custom_types&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1807\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1809\&amp;quot;&quot;&gt;cu&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1811\&amp;quot;&quot;&gt;Point&lt;/span&gt;[(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1814\&amp;quot;&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1817\&amp;quot;&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1822\&amp;quot;&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1825\&amp;quot;&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1830\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1833\&amp;quot;&quot;&gt;2&lt;/span&gt;)])\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1838\&amp;quot;&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1840\&amp;quot;&quot;&gt;custom_types&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section data-node-id=&quot;\&amp;quot;bd97b005-9736-4628-a5db-26d82089d15a\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1872\&amp;quot;&quot;&gt;&lt;div class=&quot;\&amp;quot;relative&quot; heading-container=&quot;&quot; ph-gutter=&quot;&quot; heading-container-3=&quot;&quot; data-reactid=&quot;\&amp;quot;1873\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1884\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1885\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1886\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1887\&amp;quot;&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1888\&amp;quot;&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;\&amp;quot;heading&quot; relative=&quot;&quot; b=&quot;&quot; hd3=&quot;&quot; mw-read=&quot;&quot; data-reactid=&quot;\&amp;quot;1883\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;172\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1890\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;172-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1891\&amp;quot;&quot;&gt;Array Operations&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1894\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;a8566d64-5ace-4acf-ad8e-2021d18c225d\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1895\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1905\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1906\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1907\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1908\&amp;quot;&quot; readability=&quot;7.853919239905&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1909\&amp;quot;&quot; readability=&quot;11.087885985748&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1910\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;175\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1911\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;175-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1912\&amp;quot;&quot;&gt;Lots of operations are already defined. Most importantly, GPUArrays support Julia's&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://julialang.org/blog/2018/05/extensible-broadcast-fusion/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;a8566d64-5ace-4acf-ad8e-2021d18c225d&quot; data-reactid=&quot;\&amp;quot;1913\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;176\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1915\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;176-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1916\&amp;quot;&quot;&gt;fusing dot broadcasting notation&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;178\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1917\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;178-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1918\&amp;quot;&quot;&gt;. This notation allows you to apply a function to each element of an array, and create a new array out of the return values of&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;178-1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1919\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;1920\&amp;quot;&quot;&gt;&lt;strong data-reactid=&quot;\&amp;quot;1921\&amp;quot;&quot;&gt;f&lt;/strong&gt;&lt;/code&gt;&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;178-2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1922\&amp;quot;&quot;&gt;. This functionality is usually referred to as a map. The broadcast refers to the fact that arrays with different shapes get broadcasted to the same shape.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-reactid=&quot;\&amp;quot;1923\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;182\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1924\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;182-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1925\&amp;quot;&quot;&gt;This is how it works:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1928\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;298522f5-fb0c-43df-aa38-e8949ef6685e\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1929\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;1939\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;1940\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1941\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1942\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1943\&amp;quot;&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1944\&amp;quot;&quot; readability=&quot;8&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;1945\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1946\&amp;quot;&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1948\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1950\&amp;quot;&quot;&gt;zeros&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1952\&amp;quot;&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1955\&amp;quot;&quot;&gt;4&lt;/span&gt;) \n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1960\&amp;quot;&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1962\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1964\&amp;quot;&quot;&gt;zeros&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1966\&amp;quot;&quot;&gt;4&lt;/span&gt;) \n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1971\&amp;quot;&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1973\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1975\&amp;quot;&quot;&gt;2&lt;/span&gt; \n\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1985\&amp;quot;&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1987\&amp;quot;&quot;&gt;.+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1989\&amp;quot;&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1991\&amp;quot;&quot;&gt;.+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1993\&amp;quot;&quot;&gt;z&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2022\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;e60c9e23-2f00-46ad-9973-a31470112212\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2023\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2033\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;2034\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;2035\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2036\&amp;quot;&quot; readability=&quot;7.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2037\&amp;quot;&quot; readability=&quot;10&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;2038\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;185\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2039\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;185-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2040\&amp;quot;&quot;&gt;The fusion happens because the Julia compiler will rewrite this expression into one lazy broadcast call that gets the call tree passed, which then can fuse the whole call tree into one function before looping over the array.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2043\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;8d37d54c-4774-45ab-a1bc-bad9f73a0231\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2044\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2054\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;2055\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;2056\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2057\&amp;quot;&quot; readability=&quot;5.8947368421053&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2058\&amp;quot;&quot; readability=&quot;7.5789473684211&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;2059\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;188\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2060\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;188-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2061\&amp;quot;&quot;&gt;If you want a more throrough and interactive explanation of how broadcasting works, you can have a look at this great guide:&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://julia.guide/broadcasting/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;8d37d54c-4774-45ab-a1bc-bad9f73a0231&quot; data-reactid=&quot;\&amp;quot;2062\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;189\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2064\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;189-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2065\&amp;quot;&quot;&gt;julia.guide/broadcasting&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;193\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2066\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;193-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2067\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2068\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2071\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;8b302ae5-daef-427a-8cd2-b1dbbf1679f3\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2072\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2082\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;2083\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;2084\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2085\&amp;quot;&quot; readability=&quot;8&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2086\&amp;quot;&quot; readability=&quot;11&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;2087\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;194\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2088\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;194-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2089\&amp;quot;&quot;&gt;This means any Julia function that runs without allocating heap memory (only creating isbits types), can be applied to each element of a GPUArray and multiple dot calls will get fused into one kernel call. As kernel call latency is high, this fusion is a very important optimization.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2092\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;62a9ecf5-18af-4956-98e1-a95cd0c47859\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2093\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;2103\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;2104\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2105\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2106\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2107\&amp;quot;&quot; readability=&quot;17&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2108\&amp;quot;&quot; readability=&quot;29&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;2109\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2110\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2112\&amp;quot;&quot;&gt;CuArrays&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2114\&amp;quot;&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2116\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2118\&amp;quot;&quot;&gt;cu&lt;/span&gt;([&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2121\&amp;quot;&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2124\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2127\&amp;quot;&quot;&gt;3&lt;/span&gt;])\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2131\&amp;quot;&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2133\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2135\&amp;quot;&quot;&gt;cu&lt;/span&gt;([&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2138\&amp;quot;&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2141\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2144\&amp;quot;&quot;&gt;3&lt;/span&gt;])\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2148\&amp;quot;&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2150\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2152\&amp;quot;&quot;&gt;rand&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2154\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2157\&amp;quot;&quot;&gt;Float32&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2160\&amp;quot;&quot;&gt;3&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2163\&amp;quot;&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2165\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2167\&amp;quot;&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2169\&amp;quot;&quot;&gt;.+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2171\&amp;quot;&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2173\&amp;quot;&quot;&gt;.-&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2175\&amp;quot;&quot;&gt;C&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2177\&amp;quot;&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2179\&amp;quot;&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2180\&amp;quot;&quot;&gt;::T&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2183\&amp;quot;&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2185\&amp;quot;&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2187\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2189\&amp;quot;&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2191\&amp;quot;&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2193\&amp;quot;&quot;&gt;convert&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2195\&amp;quot;&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2198\&amp;quot;&quot;&gt;2&lt;/span&gt;) \n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2206\&amp;quot;&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2208\&amp;quot;&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2210\&amp;quot;&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2211\&amp;quot;&quot;&gt;.&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2213\&amp;quot;&quot;&gt;A&lt;/span&gt;) \n\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2223\&amp;quot;&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-error\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2224\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2225\&amp;quot;&quot;&gt;:&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2227\&amp;quot;&quot;&gt;+&lt;/span&gt;)(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2230\&amp;quot;&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2231\&amp;quot;&quot;&gt;::Point&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2234\&amp;quot;&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2235\&amp;quot;&quot;&gt;::Point&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2238\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2240\&amp;quot;&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2242\&amp;quot;&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2243\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2244\&amp;quot;&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2246\&amp;quot;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2248\&amp;quot;&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2249\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2250\&amp;quot;&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2253\&amp;quot;&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2254\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2255\&amp;quot;&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2257\&amp;quot;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2259\&amp;quot;&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2260\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2261\&amp;quot;&quot;&gt;y&lt;/span&gt;)\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2267\&amp;quot;&quot;&gt;custom_types&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2269\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2271\&amp;quot;&quot;&gt;cu&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2273\&amp;quot;&quot;&gt;Point&lt;/span&gt;[(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2276\&amp;quot;&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2279\&amp;quot;&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2284\&amp;quot;&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2287\&amp;quot;&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2292\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2295\&amp;quot;&quot;&gt;2&lt;/span&gt;)])\n\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2305\&amp;quot;&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2307\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2309\&amp;quot;&quot;&gt;custom_types&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2311\&amp;quot;&quot;&gt;.+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2313\&amp;quot;&quot;&gt;Ref&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2315\&amp;quot;&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2317\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2320\&amp;quot;&quot;&gt;2&lt;/span&gt;))\n\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2329\&amp;quot;&quot;&gt;broadcasted&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2331\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2333\&amp;quot;&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2335\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2338\&amp;quot;&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2340\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2343\&amp;quot;&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2348\&amp;quot;&quot;&gt;3&lt;/span&gt;,))\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2354\&amp;quot;&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2356\&amp;quot;&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2358\&amp;quot;&quot;&gt;custom_types&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2360\&amp;quot;&quot;&gt;.+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2362\&amp;quot;&quot;&gt;broadcasted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2391\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;d612c50e-123b-46d2-bb0f-acb93ea1e9a5\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2392\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2402\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;2403\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;2404\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2405\&amp;quot;&quot; readability=&quot;6&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2406\&amp;quot;&quot; readability=&quot;7&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;2407\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;197\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2408\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;197-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2409\&amp;quot;&quot;&gt;Some more operations supported by GPUArrays:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2412\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2413\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2423\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;2424\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;2425\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2426\&amp;quot;&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2427\&amp;quot;&quot;&gt;
&lt;ul data-reactid=&quot;\&amp;quot;2428\&amp;quot;&quot;&gt;&lt;li data-reactid=&quot;\&amp;quot;2429\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;200\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2430\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;200-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2431\&amp;quot;&quot;&gt;Conversions and copy! to CPU arrays&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;2432\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;202\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2433\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;202-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2434\&amp;quot;&quot;&gt;multi dimensional indexing and slicing (xs[1:2, 5, :])&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;2435\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;238\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2436\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;238-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2437\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2438\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/arrays/#Base.permutedims/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot; data-reactid=&quot;\&amp;quot;2439\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;204\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2441\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;204-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2442\&amp;quot;&quot;&gt;permutedims&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;239\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2443\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;239-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2444\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2445\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;2446\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;240\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2447\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;240-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2448\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2449\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/arrays/#Base.vcat/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot; data-reactid=&quot;\&amp;quot;2450\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;207\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2452\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;207-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2453\&amp;quot;&quot;&gt;Concatenation (vcat(x, y), cat(3, xs, ys, zs))&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;241\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2454\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;241-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2455\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2456\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;2457\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;242\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2458\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;242-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2459\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2460\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/manual/arrays/#Broadcasting-1/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot; data-reactid=&quot;\&amp;quot;2461\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;210\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2463\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;210-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2464\&amp;quot;&quot;&gt;map, fused broadcast (zs .= xs.^2 .+ ys .* 2)&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;243\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2465\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;243-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2466\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2467\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;2468\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;244\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2469\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;244-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2470\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2471\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/arrays/#Base.fill/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot; data-reactid=&quot;\&amp;quot;2472\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;213\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2474\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;213-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2475\&amp;quot;&quot;&gt;fill(CuArray, 0f0, dims)&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;215\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2476\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;215-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2477\&amp;quot;&quot;&gt;,&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/arrays/#Base.fill!/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot; data-reactid=&quot;\&amp;quot;2478\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;216\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2480\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;216-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2481\&amp;quot;&quot;&gt;fill!(gpu_array, 0)&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;2484\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;220\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2485\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;220-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2486\&amp;quot;&quot;&gt;Reduction over dimensions (reduce(+, xs, dims = 3), sum(x -&amp;gt; x^2, xs, dims = 1)&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;2487\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;222\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2488\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;222-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2489\&amp;quot;&quot;&gt;Reduction to scalar (&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/collections/#Base.reduce-Tuple{Any,Any}/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot; data-reactid=&quot;\&amp;quot;2490\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;223\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2492\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;223-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2493\&amp;quot;&quot;&gt;reduce(*, xs)&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;225\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2494\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;225-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2495\&amp;quot;&quot;&gt;, sum(xs),&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/collections/#Base.prod/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot; data-reactid=&quot;\&amp;quot;2496\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;226\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2498\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;226-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2499\&amp;quot;&quot;&gt;prod(xs)&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;228\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2500\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;228-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2501\&amp;quot;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;2502\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;230\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2503\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;230-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2504\&amp;quot;&quot;&gt;Various BLAS operations (matrix*matrix, matrix*vector)&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;2505\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;232\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2506\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;232-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2507\&amp;quot;&quot;&gt;FFTs,&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://juliamath.github.io/AbstractFFTs.jl/stable/api.html/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot; data-reactid=&quot;\&amp;quot;2508\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;233\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2510\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;233-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2511\&amp;quot;&quot;&gt;using the same API as julia's FFT&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;245\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2512\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;245-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2513\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2514\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section data-node-id=&quot;\&amp;quot;e4267f2c-06e0-4ae1-b250-66a9565b765b\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2519\&amp;quot;&quot;&gt;&lt;div class=&quot;\&amp;quot;relative&quot; heading-container=&quot;&quot; ph-gutter=&quot;&quot; heading-container-2=&quot;&quot; data-reactid=&quot;\&amp;quot;2520\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2531\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2532\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;2533\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2534\&amp;quot;&quot; readability=&quot;6&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2535\&amp;quot;&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;
&lt;h2 class=&quot;\&amp;quot;heading&quot; relative=&quot;&quot; b=&quot;&quot; hd2=&quot;&quot; mw-read=&quot;&quot; data-reactid=&quot;\&amp;quot;2530\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;246\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2537\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;246-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2538\&amp;quot;&quot;&gt;GPUArrays in the real world&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2541\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;bfa64579-c73b-48b7-b6c4-88fd69aaf9d1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2542\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2552\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;2553\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;2554\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2555\&amp;quot;&quot; readability=&quot;6&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2556\&amp;quot;&quot; readability=&quot;7&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;2557\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;249\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2558\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;249-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2559\&amp;quot;&quot;&gt;Let's jump right into some cool use cases.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2589\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-embed=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;7568cecf-0eaa-4fe3-bc80-9cf89360c8fb\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2590\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2600\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;embed&quot; data-reactid=&quot;\&amp;quot;2601\&amp;quot;&quot;&gt;
&lt;p&gt;&lt;iframe class=&quot;\&amp;quot;absolute&quot; w-100=&quot;&quot; src=&quot;/&amp;quot;https://player.vimeo.com/video/235601956/&amp;quot;&quot; frameborder=&quot;\&amp;quot;0\&amp;quot;&quot; allowfullscreen=&quot;\&amp;quot;\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2603\&amp;quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2637\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;56322bde-814a-4056-8601-6ca5c8434825\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2638\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2648\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;2649\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;2650\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2651\&amp;quot;&quot; readability=&quot;6.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2652\&amp;quot;&quot; readability=&quot;8&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;2653\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;267\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2654\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;267-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2655\&amp;quot;&quot;&gt;Let's walk through a simple Machine Learning example, to see how GPUArrays can be used:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2658\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;4a7aa2b0-fb74-40b6-8b52-cbedeaf7597a\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2659\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;2669\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;2670\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2671\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2694\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2695\&amp;quot;&quot; readability=&quot;26.5&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2696\&amp;quot;&quot; readability=&quot;48&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;2697\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2698\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2700\&amp;quot;&quot;&gt;Flux&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2703\&amp;quot;&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2704\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2705\&amp;quot;&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2706\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2707\&amp;quot;&quot;&gt;MNIST&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2710\&amp;quot;&quot;&gt;Statistics&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2712\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2714\&amp;quot;&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2715\&amp;quot;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2717\&amp;quot;&quot;&gt;onehotbatch&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2720\&amp;quot;&quot;&gt;onecold&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2723\&amp;quot;&quot;&gt;crossentropy&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2726\&amp;quot;&quot;&gt;throttle&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2728\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2730\&amp;quot;&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2731\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2732\&amp;quot;&quot;&gt;Iterators&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2733\&amp;quot;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2735\&amp;quot;&quot;&gt;repeated&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2738\&amp;quot;&quot;&gt;partition&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2740\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2742\&amp;quot;&quot;&gt;CuArrays&lt;/span&gt;\n\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2748\&amp;quot;&quot;&gt;imgs&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2750\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2752\&amp;quot;&quot;&gt;MNIST&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2753\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2754\&amp;quot;&quot;&gt;images&lt;/span&gt;()\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2759\&amp;quot;&quot;&gt;labels&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2761\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2763\&amp;quot;&quot;&gt;onehotbatch&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2765\&amp;quot;&quot;&gt;MNIST&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2766\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2767\&amp;quot;&quot;&gt;labels&lt;/span&gt;(), &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2772\&amp;quot;&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2773\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2774\&amp;quot;&quot;&gt;9&lt;/span&gt;)\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2780\&amp;quot;&quot;&gt;train&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2782\&amp;quot;&quot;&gt;=&lt;/span&gt; [(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2786\&amp;quot;&quot;&gt;cat&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2788\&amp;quot;&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2789\&amp;quot;&quot;&gt;.&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2791\&amp;quot;&quot;&gt;imgs&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2793\&amp;quot;&quot;&gt;i&lt;/span&gt;])&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2796\&amp;quot;&quot;&gt;...&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2799\&amp;quot;&quot;&gt;dims&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2801\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2803\&amp;quot;&quot;&gt;4&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2807\&amp;quot;&quot;&gt;labels&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2809\&amp;quot;&quot;&gt;:&lt;/span&gt;,&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2811\&amp;quot;&quot;&gt;i&lt;/span&gt;])\n         &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2816\&amp;quot;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2818\&amp;quot;&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2820\&amp;quot;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2822\&amp;quot;&quot;&gt;partition&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2824\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2825\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2826\&amp;quot;&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2827\&amp;quot;&quot;&gt;_000&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2830\&amp;quot;&quot;&gt;1000&lt;/span&gt;)]\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2835\&amp;quot;&quot;&gt;use_gpu&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2837\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2839\&amp;quot;&quot;&gt;true&lt;/span&gt; \n\n&lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2844\&amp;quot;&quot;&gt;todevice&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2846\&amp;quot;&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2849\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2851\&amp;quot;&quot;&gt;use_gpu&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2853\&amp;quot;&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2855\&amp;quot;&quot;&gt;gpu&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2857\&amp;quot;&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2860\&amp;quot;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2862\&amp;quot;&quot;&gt;x&lt;/span&gt;\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2865\&amp;quot;&quot;&gt;train&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2867\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2869\&amp;quot;&quot;&gt;todevice&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2870\&amp;quot;&quot;&gt;.&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2872\&amp;quot;&quot;&gt;train&lt;/span&gt;)\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2878\&amp;quot;&quot;&gt;tX&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2880\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2882\&amp;quot;&quot;&gt;cat&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2884\&amp;quot;&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2885\&amp;quot;&quot;&gt;.&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2887\&amp;quot;&quot;&gt;MNIST&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2888\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2889\&amp;quot;&quot;&gt;images&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2891\&amp;quot;&quot;&gt;:test&lt;/span&gt;)[&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2894\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2895\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2896\&amp;quot;&quot;&gt;1000&lt;/span&gt;])&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2899\&amp;quot;&quot;&gt;...&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2902\&amp;quot;&quot;&gt;dims&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2904\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2906\&amp;quot;&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2909\&amp;quot;&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2910\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2912\&amp;quot;&quot;&gt;todevice&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2914\&amp;quot;&quot;&gt;tY&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2916\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2918\&amp;quot;&quot;&gt;onehotbatch&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2920\&amp;quot;&quot;&gt;MNIST&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2921\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2922\&amp;quot;&quot;&gt;labels&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2924\&amp;quot;&quot;&gt;:test&lt;/span&gt;)[&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2927\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2928\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2929\&amp;quot;&quot;&gt;1000&lt;/span&gt;], &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2933\&amp;quot;&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2934\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2935\&amp;quot;&quot;&gt;9&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2938\&amp;quot;&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2939\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2941\&amp;quot;&quot;&gt;todevice&lt;/span&gt;\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2944\&amp;quot;&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2946\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2948\&amp;quot;&quot;&gt;Chain&lt;/span&gt;(\n  &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2952\&amp;quot;&quot;&gt;Conv&lt;/span&gt;((&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2955\&amp;quot;&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2957\&amp;quot;&quot;&gt;2&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2961\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2962\&amp;quot;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2963\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2964\&amp;quot;&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2967\&amp;quot;&quot;&gt;relu&lt;/span&gt;),\n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2972\&amp;quot;&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2974\&amp;quot;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2975\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2977\&amp;quot;&quot;&gt;maxpool&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2979\&amp;quot;&quot;&gt;x&lt;/span&gt;, (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2983\&amp;quot;&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2985\&amp;quot;&quot;&gt;2&lt;/span&gt;)),\n  &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2991\&amp;quot;&quot;&gt;Conv&lt;/span&gt;((&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2994\&amp;quot;&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2996\&amp;quot;&quot;&gt;2&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3000\&amp;quot;&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3001\&amp;quot;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3002\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3003\&amp;quot;&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3006\&amp;quot;&quot;&gt;relu&lt;/span&gt;),\n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3011\&amp;quot;&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3013\&amp;quot;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3014\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3016\&amp;quot;&quot;&gt;maxpool&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3018\&amp;quot;&quot;&gt;x&lt;/span&gt;, (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3022\&amp;quot;&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3024\&amp;quot;&quot;&gt;2&lt;/span&gt;)),\n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3030\&amp;quot;&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3032\&amp;quot;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3033\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3035\&amp;quot;&quot;&gt;reshape&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3037\&amp;quot;&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3040\&amp;quot;&quot;&gt;:&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3043\&amp;quot;&quot;&gt;size&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3045\&amp;quot;&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3048\&amp;quot;&quot;&gt;4&lt;/span&gt;)),\n  &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3054\&amp;quot;&quot;&gt;Dense&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3056\&amp;quot;&quot;&gt;288&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3059\&amp;quot;&quot;&gt;10&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3063\&amp;quot;&quot;&gt;softmax&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3066\&amp;quot;&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3067\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3069\&amp;quot;&quot;&gt;todevice&lt;/span&gt;\n\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3072\&amp;quot;&quot;&gt;m&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3074\&amp;quot;&quot;&gt;train&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3076\&amp;quot;&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3079\&amp;quot;&quot;&gt;1&lt;/span&gt;])\n\n&lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3084\&amp;quot;&quot;&gt;loss&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3086\&amp;quot;&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3089\&amp;quot;&quot;&gt;y&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3092\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3094\&amp;quot;&quot;&gt;crossentropy&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3096\&amp;quot;&quot;&gt;m&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3098\&amp;quot;&quot;&gt;x&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3102\&amp;quot;&quot;&gt;y&lt;/span&gt;)\n\n&lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3106\&amp;quot;&quot;&gt;accuracy&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3108\&amp;quot;&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3111\&amp;quot;&quot;&gt;y&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3114\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3116\&amp;quot;&quot;&gt;mean&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3118\&amp;quot;&quot;&gt;onecold&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3120\&amp;quot;&quot;&gt;m&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3122\&amp;quot;&quot;&gt;x&lt;/span&gt;)) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3126\&amp;quot;&quot;&gt;.==&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3128\&amp;quot;&quot;&gt;onecold&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3130\&amp;quot;&quot;&gt;y&lt;/span&gt;))\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3135\&amp;quot;&quot;&gt;evalcb&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3137\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3139\&amp;quot;&quot;&gt;throttle&lt;/span&gt;(() &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3144\&amp;quot;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3145\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-meta\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3147\&amp;quot;&quot;&gt;@show&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3149\&amp;quot;&quot;&gt;accuracy&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3151\&amp;quot;&quot;&gt;tX&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3154\&amp;quot;&quot;&gt;tY&lt;/span&gt;)), &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3159\&amp;quot;&quot;&gt;10&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3162\&amp;quot;&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3164\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3166\&amp;quot;&quot;&gt;ADAM&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3168\&amp;quot;&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3169\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3170\&amp;quot;&quot;&gt;params&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3172\&amp;quot;&quot;&gt;m&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3198\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;7bf252ce-e3a3-4312-b3c8-5c6d74dbd62e\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3199\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;3209\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;3210\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3211\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3212\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3213\&amp;quot;&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3214\&amp;quot;&quot; readability=&quot;10&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;3215\&amp;quot;&quot;&gt;
\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3218\&amp;quot;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3220\&amp;quot;&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3222\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3224\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3225\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3226\&amp;quot;&quot;&gt;10&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3229\&amp;quot;&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3230\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3231\&amp;quot;&quot;&gt;train!&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3233\&amp;quot;&quot;&gt;loss&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3236\&amp;quot;&quot;&gt;train&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3239\&amp;quot;&quot;&gt;opt&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3242\&amp;quot;&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3244\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3246\&amp;quot;&quot;&gt;evalcb&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3249\&amp;quot;&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3281\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;dd74954e-f344-4533-8ff4-e8e072c669aa\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3282\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;3292\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;3293\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3294\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3295\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3296\&amp;quot;&quot; readability=&quot;11&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3297\&amp;quot;&quot; readability=&quot;17&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;3298\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3299\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3301\&amp;quot;&quot;&gt;Colors&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3304\&amp;quot;&quot;&gt;FileIO&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3307\&amp;quot;&quot;&gt;ImageShow&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3309\&amp;quot;&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3311\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3313\&amp;quot;&quot;&gt;22&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3315\&amp;quot;&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3317\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3319\&amp;quot;&quot;&gt;tX&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3321\&amp;quot;&quot;&gt;:&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3324\&amp;quot;&quot;&gt;:&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3327\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3328\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3329\&amp;quot;&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3332\&amp;quot;&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3333\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3334\&amp;quot;&quot;&gt;N&lt;/span&gt;]\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3337\&amp;quot;&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3339\&amp;quot;&quot;&gt;&quot;Predicted: &lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3340\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3343\&amp;quot;&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3344\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3345\&amp;quot;&quot;&gt;onecold&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3347\&amp;quot;&quot;&gt;m&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3349\&amp;quot;&quot;&gt;img&lt;/span&gt;)) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3353\&amp;quot;&quot;&gt;.-&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3355\&amp;quot;&quot;&gt;1&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3358\&amp;quot;&quot;&gt;Gray&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3359\&amp;quot;&quot;&gt;.&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3361\&amp;quot;&quot;&gt;collect&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3363\&amp;quot;&quot;&gt;tX&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3365\&amp;quot;&quot;&gt;:&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3368\&amp;quot;&quot;&gt;:&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3371\&amp;quot;&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3374\&amp;quot;&quot;&gt;N&lt;/span&gt;]))
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3415\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;b4e4c855-1f1c-4bbc-8b4c-704550497733\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3416\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3426\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;3427\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;3428\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3429\&amp;quot;&quot; readability=&quot;9.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3430\&amp;quot;&quot; readability=&quot;14&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;3431\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;270\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3432\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;270-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3433\&amp;quot;&quot;&gt;Just by converting the arrays to GPUArrays (with&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;270-1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3434\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3435\&amp;quot;&quot;&gt;gpu(array)&lt;/code&gt;&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;270-2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3436\&amp;quot;&quot;&gt;) we were able to move the entire computation to the GPU and get a pretty nice speed improvement. This is thanks to Julia's sophisticated AbstractArray infrastructure, into which GPUArrays seamlessly integrates. Subsequently, if you leave out the conversion to a GPUArray, the code will also run with normal Julia arrays – but then of course on the CPU. You can try this out by changing&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;270-3\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3437\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3438\&amp;quot;&quot;&gt;use_gpu = true&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;270-4\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3439\&amp;quot;&quot;&gt;to&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;270-5\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3440\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3441\&amp;quot;&quot;&gt;use_gpu = false&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;270-6\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3442\&amp;quot;&quot;&gt;and rerun the initialization and training cells. Comparing GPU and CPU, I get 975 seconds for a CPU run and 29 seonds for the GPU - which is a nice speed-up of ~&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;270-7\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3443\&amp;quot;&quot;&gt;&lt;strong data-reactid=&quot;\&amp;quot;3444\&amp;quot;&quot;&gt;33x&lt;/strong&gt;&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;270-8\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3445\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3448\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;f6e7762e-b6c5-4960-840a-8c46fb255143\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3449\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3459\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;3460\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;3461\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3462\&amp;quot;&quot; readability=&quot;7.0220913107511&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3463\&amp;quot;&quot; readability=&quot;9.6553755522828&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;3464\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;281\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3465\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;281-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3466\&amp;quot;&quot;&gt;Another nice property to look at is that GPUArrays never had to implement automatic differentiation explicitly to support the backward pass of the neuronal network efficiently. This is because Julia's automatic differentiation libraries work for arbitrary functions and emit code&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://mikeinnes.github.io/2017/08/24/cudanative.html/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;f6e7762e-b6c5-4960-840a-8c46fb255143&quot; data-reactid=&quot;\&amp;quot;3467\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;282\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3469\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;282-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3470\&amp;quot;&quot;&gt;that can run efficiently on the GPU&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;284\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3471\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;284-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3472\&amp;quot;&quot;&gt;. This helps a lot to get Flux working on the GPU with minimal developer effort - and makes Flux GPU support work efficiently even for user defined functions. That this works out of the box without coordination between GPUArrays + Flux is a pretty unique property of Julia, which is explained in great detail in:&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;http://www.stochasticlifestyle.com/why-numba-and-cython-are-not-substitutes-for-julia//&amp;quot;&quot; data-link-path=&quot;\&amp;quot;f6e7762e-b6c5-4960-840a-8c46fb255143&quot; data-reactid=&quot;\&amp;quot;3473\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;285\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3475\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;285-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3476\&amp;quot;&quot;&gt;Why Numba and Cython are no substitute for Julia&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;289\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3477\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;289-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3478\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3479\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section data-node-id=&quot;\&amp;quot;ea004e0d-2b7d-4d1d-87b0-58bac63971d8\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3483\&amp;quot;&quot;&gt;&lt;div class=&quot;\&amp;quot;relative&quot; heading-container=&quot;&quot; ph-gutter=&quot;&quot; heading-container-2=&quot;&quot; data-reactid=&quot;\&amp;quot;3484\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3495\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3496\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;3497\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3498\&amp;quot;&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3499\&amp;quot;&quot;&gt;
&lt;p&gt;
&lt;h2 class=&quot;\&amp;quot;heading&quot; relative=&quot;&quot; b=&quot;&quot; hd2=&quot;&quot; mw-read=&quot;&quot; data-reactid=&quot;\&amp;quot;3494\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;290\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3501\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;290-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3502\&amp;quot;&quot;&gt;Writing GPU Kernels&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3505\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;4b7926e0-6502-4410-92eb-1b34d89f2d92\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3506\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3516\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;3517\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;3518\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3519\&amp;quot;&quot; readability=&quot;7.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3520\&amp;quot;&quot; readability=&quot;10&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;3521\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;293\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3522\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;293-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3523\&amp;quot;&quot;&gt;One can get pretty far by just using the generic abstract array interface of GPUArrays without ever writing any GPU kernels. However, at some point one might need to implement an algorithm that needs to run on the GPU and can't be expressed by a combination of generic array algorithms!&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3526\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;dc1691b3-b051-4078-8105-be5693dde633\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3527\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3537\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;3538\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;3539\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3540\&amp;quot;&quot; readability=&quot;8.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3541\&amp;quot;&quot; readability=&quot;12&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;3542\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;296\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3543\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;296-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3544\&amp;quot;&quot;&gt;The nice thing is that GPUArrays takes away quite a bit of work with a layered approach that lets you start off with high level code, but allows you to pretty much write low-level kernels similarly to what one would find in most OpenCL/CUDA examples. It also allows you to execute kernels both on OpenCL or CUDA devices, abstracting away any differences in those frameworks.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3547\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;e01448e0-7630-4c6a-b415-050bd4b37efa\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3548\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3558\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;3559\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;3560\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3561\&amp;quot;&quot; readability=&quot;10&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3562\&amp;quot;&quot; readability=&quot;15&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;3563\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;299\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3564\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;299-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3565\&amp;quot;&quot;&gt;The function that makes this possible is named&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;299-1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3566\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3567\&amp;quot;&quot;&gt;&lt;em data-reactid=&quot;\&amp;quot;3568\&amp;quot;&quot;&gt;gpu_call&lt;/em&gt;&lt;/code&gt;&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;299-2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3569\&amp;quot;&quot;&gt;. It can be called as&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;299-3\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3570\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3571\&amp;quot;&quot;&gt;gpu_call(kernel, A::GPUArray, args)&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;299-4\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3572\&amp;quot;&quot;&gt;and will call&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;299-5\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3573\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3574\&amp;quot;&quot;&gt;kernel&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;299-6\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3575\&amp;quot;&quot;&gt;with the arguments&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;299-7\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3576\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3577\&amp;quot;&quot;&gt;(state, args...)&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;299-8\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3578\&amp;quot;&quot;&gt;on the GPU. State is a backend specific object to implement functionality like getting the thread index. A GPUArray needs to get passed as the second argument to dispatch to the correct backend and supply the defaults for the launch parameters.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-reactid=&quot;\&amp;quot;3579\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;309\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3580\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;309-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3581\&amp;quot;&quot;&gt;Lets use&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;309-1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3582\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3583\&amp;quot;&quot;&gt;gpu_call&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;309-2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3584\&amp;quot;&quot;&gt;to implement a simple map kernel:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3587\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;e542cbee-022a-4da4-91bb-f683b86080f3\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3588\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;3598\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;3599\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3600\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3601\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3602\&amp;quot;&quot; readability=&quot;12&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3603\&amp;quot;&quot; readability=&quot;19&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;3604\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3605\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3607\&amp;quot;&quot;&gt;GPUArrays&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3610\&amp;quot;&quot;&gt;CuArrays&lt;/span&gt;\n\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3614\&amp;quot;&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3616\&amp;quot;&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3617\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3618\&amp;quot;&quot;&gt;map!&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3620\&amp;quot;&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3621\&amp;quot;&quot;&gt;::Function&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3624\&amp;quot;&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3625\&amp;quot;&quot;&gt;::GPUArray&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3628\&amp;quot;&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3629\&amp;quot;&quot;&gt;::GPUArray&lt;/span&gt;)\n    \n    &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3636\&amp;quot;&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3638\&amp;quot;&quot;&gt;kernel&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3640\&amp;quot;&quot;&gt;state&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3643\&amp;quot;&quot;&gt;f&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3646\&amp;quot;&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3649\&amp;quot;&quot;&gt;B&lt;/span&gt;)\n        \n        \n        &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3659\&amp;quot;&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3661\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3663\&amp;quot;&quot;&gt;linear_index&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3665\&amp;quot;&quot;&gt;state&lt;/span&gt;)\n    \t\t&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3669\&amp;quot;&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3671\&amp;quot;&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3673\&amp;quot;&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3675\&amp;quot;&quot;&gt;length&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3677\&amp;quot;&quot;&gt;A&lt;/span&gt;)\n          &lt;span class=&quot;\&amp;quot;cm-meta\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3681\&amp;quot;&quot;&gt;@inbounds&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3683\&amp;quot;&quot;&gt;A&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3685\&amp;quot;&quot;&gt;i&lt;/span&gt;] &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3688\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3690\&amp;quot;&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3692\&amp;quot;&quot;&gt;B&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3694\&amp;quot;&quot;&gt;i&lt;/span&gt;])\n        &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3699\&amp;quot;&quot;&gt;end&lt;/span&gt;\n        &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3702\&amp;quot;&quot;&gt;return&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3705\&amp;quot;&quot;&gt;end&lt;/span&gt;\n    \n    &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3711\&amp;quot;&quot;&gt;gpu_call&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3713\&amp;quot;&quot;&gt;kernel&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3716\&amp;quot;&quot;&gt;A&lt;/span&gt;, (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3720\&amp;quot;&quot;&gt;f&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3723\&amp;quot;&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3726\&amp;quot;&quot;&gt;B&lt;/span&gt;))\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3730\&amp;quot;&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3753\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;b41071e8-02ab-47f3-946b-0b802fff459b\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3754\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3764\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;3765\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;3766\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3767\&amp;quot;&quot; readability=&quot;10&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3768\&amp;quot;&quot; readability=&quot;15&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;3769\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;314\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3770\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;314-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3771\&amp;quot;&quot;&gt;Let's try to figure out what this is doing! In simple terms, this will call the julia function&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;314-1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3772\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3773\&amp;quot;&quot;&gt;kernel&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;314-2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3774\&amp;quot;&quot;&gt;&lt;em data-reactid=&quot;\&amp;quot;3775\&amp;quot;&quot;&gt;&lt;strong data-reactid=&quot;\&amp;quot;3776\&amp;quot;&quot;&gt;length(&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;314-3\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3777\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3778\&amp;quot;&quot;&gt;&lt;em data-reactid=&quot;\&amp;quot;3779\&amp;quot;&quot;&gt;&lt;strong data-reactid=&quot;\&amp;quot;3780\&amp;quot;&quot;&gt;A&lt;/strong&gt;&lt;/em&gt;&lt;/code&gt;&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;314-4\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3781\&amp;quot;&quot;&gt;&lt;em data-reactid=&quot;\&amp;quot;3782\&amp;quot;&quot;&gt;&lt;strong data-reactid=&quot;\&amp;quot;3783\&amp;quot;&quot;&gt;)&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;314-5\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3784\&amp;quot;&quot;&gt;times in parallel on the GPU. Each parallel invocation of&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;314-6\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3785\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3786\&amp;quot;&quot;&gt;kernel&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;314-7\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3787\&amp;quot;&quot;&gt;has a thread index, which we can use to safely index into the arrays&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;314-8\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3788\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3789\&amp;quot;&quot;&gt;A&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;314-9\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3790\&amp;quot;&quot;&gt;and&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;314-10\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3791\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3792\&amp;quot;&quot;&gt;B&lt;/code&gt;&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;314-11\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3793\&amp;quot;&quot;&gt;. If we calculated our own indices instead of using&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;314-12\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3794\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3795\&amp;quot;&quot;&gt;linear_index&lt;/code&gt;&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;314-13\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3796\&amp;quot;&quot;&gt;, we'd need to make sure that we don't have multiple threads reading and writing to the same array locations. So, if we wrote this in pure Julia with threads, an equivalent version would look like this:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3799\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;3428b837-5a8e-44d8-91e3-2e8361152cb0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3800\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;3810\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;3811\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3812\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3813\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3814\&amp;quot;&quot; readability=&quot;17.5&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3815\&amp;quot;&quot; readability=&quot;30&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;3816\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3817\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3819\&amp;quot;&quot;&gt;BenchmarkTools&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3821\&amp;quot;&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3823\&amp;quot;&quot;&gt;threadded_map!&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3825\&amp;quot;&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3826\&amp;quot;&quot;&gt;::Function&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3829\&amp;quot;&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3830\&amp;quot;&quot;&gt;::Array&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3833\&amp;quot;&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3834\&amp;quot;&quot;&gt;::Array&lt;/span&gt;)\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3838\&amp;quot;&quot;&gt;Threads&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3839\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-meta\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3840\&amp;quot;&quot;&gt;@threads&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3842\&amp;quot;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3844\&amp;quot;&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3846\&amp;quot;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3848\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3849\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3850\&amp;quot;&quot;&gt;length&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3852\&amp;quot;&quot;&gt;A&lt;/span&gt;)\n        &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3856\&amp;quot;&quot;&gt;A&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3858\&amp;quot;&quot;&gt;i&lt;/span&gt;] &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3861\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3863\&amp;quot;&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3865\&amp;quot;&quot;&gt;B&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3867\&amp;quot;&quot;&gt;i&lt;/span&gt;])\n    &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3872\&amp;quot;&quot;&gt;end&lt;/span&gt;\n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3875\&amp;quot;&quot;&gt;A&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3877\&amp;quot;&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3879\&amp;quot;&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3882\&amp;quot;&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3884\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3886\&amp;quot;&quot;&gt;rand&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3888\&amp;quot;&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3889\&amp;quot;&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3890\&amp;quot;&quot;&gt;7&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3894\&amp;quot;&quot;&gt;rand&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3896\&amp;quot;&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3897\&amp;quot;&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3898\&amp;quot;&quot;&gt;7&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3901\&amp;quot;&quot;&gt;kernel&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3903\&amp;quot;&quot;&gt;y&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3906\&amp;quot;&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3909\&amp;quot;&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3911\&amp;quot;&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3913\&amp;quot;&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3914\&amp;quot;&quot;&gt;f0&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3917\&amp;quot;&quot;&gt;*&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3920\&amp;quot;&quot;&gt;732.f0&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3921\&amp;quot;&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3922\&amp;quot;&quot;&gt;y&lt;/span&gt;)\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3927\&amp;quot;&quot;&gt;single_t&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3929\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-meta\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3931\&amp;quot;&quot;&gt;@belapsed&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3933\&amp;quot;&quot;&gt;map!&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3935\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3936\&amp;quot;&quot;&gt;kernel&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3939\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3940\&amp;quot;&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3943\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3944\&amp;quot;&quot;&gt;y&lt;/span&gt;)\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3950\&amp;quot;&quot;&gt;thread_t&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3952\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-meta\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3954\&amp;quot;&quot;&gt;@belapsed&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3956\&amp;quot;&quot;&gt;threadded_map!&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3958\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3959\&amp;quot;&quot;&gt;kernel&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3962\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3963\&amp;quot;&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3966\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3967\&amp;quot;&quot;&gt;y&lt;/span&gt;)\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3973\&amp;quot;&quot;&gt;xgpu&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3976\&amp;quot;&quot;&gt;ygpu&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3978\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3980\&amp;quot;&quot;&gt;cu&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3982\&amp;quot;&quot;&gt;x&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3986\&amp;quot;&quot;&gt;cu&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3988\&amp;quot;&quot;&gt;y&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3991\&amp;quot;&quot;&gt;gpu_t&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3993\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-meta\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3995\&amp;quot;&quot;&gt;@belapsed&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3997\&amp;quot;&quot;&gt;begin&lt;/span&gt;\n  &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4000\&amp;quot;&quot;&gt;map!&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4002\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4003\&amp;quot;&quot;&gt;kernel&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4006\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4007\&amp;quot;&quot;&gt;xgpu&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4010\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4011\&amp;quot;&quot;&gt;ygpu&lt;/span&gt;)\n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4015\&amp;quot;&quot;&gt;GPUArrays&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4016\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4017\&amp;quot;&quot;&gt;synchronize&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4019\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4020\&amp;quot;&quot;&gt;xgpu&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4023\&amp;quot;&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4025\&amp;quot;&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4027\&amp;quot;&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4030\&amp;quot;&quot;&gt;single_t&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4033\&amp;quot;&quot;&gt;thread_t&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4036\&amp;quot;&quot;&gt;gpu_t&lt;/span&gt;]\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4039\&amp;quot;&quot;&gt;speedup&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4041\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4043\&amp;quot;&quot;&gt;maximum&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4045\&amp;quot;&quot;&gt;times&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4048\&amp;quot;&quot;&gt;./&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4050\&amp;quot;&quot;&gt;times&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4052\&amp;quot;&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4054\&amp;quot;&quot;&gt;&quot;speedup: $speedup&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4055\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4058\&amp;quot;&quot;&gt;bar&lt;/span&gt;([&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4061\&amp;quot;&quot;&gt;&quot;1 core&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4062\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4065\&amp;quot;&quot;&gt;&quot;2 cores&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4066\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4069\&amp;quot;&quot;&gt;&quot;gpu&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4070\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;], &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4074\&amp;quot;&quot;&gt;speedup&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4077\&amp;quot;&quot;&gt;legend&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4079\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4081\&amp;quot;&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4084\&amp;quot;&quot;&gt;fillcolor&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4086\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4088\&amp;quot;&quot;&gt;:grey&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4091\&amp;quot;&quot;&gt;ylabel&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4093\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4095\&amp;quot;&quot;&gt;&quot;speedup&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4096\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;4135\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;f21ef039-a847-43e7-97be-55b8936c1cba\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4136\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;4146\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;4147\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;4148\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4149\&amp;quot;&quot; readability=&quot;7.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4150\&amp;quot;&quot; readability=&quot;10&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;4151\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;330\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4152\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;330-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4153\&amp;quot;&quot;&gt;Because the function isn't doing a lot of work, we don't see perfect scaling, but the threaded and GPU version still give us a nice speed-up.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;4156\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;d8fb28e2-49aa-4c56-83e4-1dfeb06c2af9\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4157\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;4167\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;4168\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;4169\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4170\&amp;quot;&quot; readability=&quot;7.4749034749035&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4171\&amp;quot;&quot; readability=&quot;10.277992277992&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;4172\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;333\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4173\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;333-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4174\&amp;quot;&quot;&gt;The GPU is a bit more complex than what the thread example allows us to show, since the hardware threads are laid out in&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://devblogs.nvidia.com/even-easier-introduction-cuda//&amp;quot;&quot; data-link-path=&quot;\&amp;quot;d8fb28e2-49aa-4c56-83e4-1dfeb06c2af9&quot; data-reactid=&quot;\&amp;quot;4175\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;334\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4177\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;334-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4178\&amp;quot;&quot;&gt;blocks of threads&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; &lt;span data-key=&quot;\&amp;quot;336\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4179\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;336-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4180\&amp;quot;&quot;&gt;–&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;336-1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4181\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;4182\&amp;quot;&quot;&gt;gpu_call&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;336-2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4183\&amp;quot;&quot;&gt;abstracts that away in the simple version, but it can also be used with more complex launch configurations:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;4186\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;80bd4385-cd68-4fad-ada0-981d4b98b100\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4187\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;4197\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;4198\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;4199\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;4200\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4201\&amp;quot;&quot; readability=&quot;18&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4202\&amp;quot;&quot; readability=&quot;31&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;4203\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4204\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4206\&amp;quot;&quot;&gt;CuArrays&lt;/span&gt;\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4209\&amp;quot;&quot;&gt;threads&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4211\&amp;quot;&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4214\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4217\&amp;quot;&quot;&gt;2&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4220\&amp;quot;&quot;&gt;blocks&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4222\&amp;quot;&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4225\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4228\&amp;quot;&quot;&gt;2&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4231\&amp;quot;&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4233\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4235\&amp;quot;&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4237\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;, (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4241\&amp;quot;&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4244\&amp;quot;&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4249\&amp;quot;&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4252\&amp;quot;&quot;&gt;4&lt;/span&gt;))\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4256\&amp;quot;&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4258\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4260\&amp;quot;&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4262\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;, (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4266\&amp;quot;&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4269\&amp;quot;&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4274\&amp;quot;&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4277\&amp;quot;&quot;&gt;4&lt;/span&gt;))\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4281\&amp;quot;&quot;&gt;gpu_call&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4283\&amp;quot;&quot;&gt;T&lt;/span&gt;, (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4287\&amp;quot;&quot;&gt;B&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4290\&amp;quot;&quot;&gt;T&lt;/span&gt;), (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4295\&amp;quot;&quot;&gt;blocks&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4298\&amp;quot;&quot;&gt;threads&lt;/span&gt;)) &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4302\&amp;quot;&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4304\&amp;quot;&quot;&gt;state&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4307\&amp;quot;&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4310\&amp;quot;&quot;&gt;B&lt;/span&gt;\n  \n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4316\&amp;quot;&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4318\&amp;quot;&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4321\&amp;quot;&quot;&gt;blockidx_x&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4323\&amp;quot;&quot;&gt;state&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4327\&amp;quot;&quot;&gt;blockidx_y&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4329\&amp;quot;&quot;&gt;state&lt;/span&gt;))\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4334\&amp;quot;&quot;&gt;bdim&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4336\&amp;quot;&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4339\&amp;quot;&quot;&gt;blockdim_x&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4341\&amp;quot;&quot;&gt;state&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4345\&amp;quot;&quot;&gt;blockdim_y&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4347\&amp;quot;&quot;&gt;state&lt;/span&gt;))\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4352\&amp;quot;&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4354\&amp;quot;&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4357\&amp;quot;&quot;&gt;threadidx_x&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4359\&amp;quot;&quot;&gt;state&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4363\&amp;quot;&quot;&gt;threadidx_y&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4365\&amp;quot;&quot;&gt;state&lt;/span&gt;))\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4370\&amp;quot;&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4372\&amp;quot;&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4375\&amp;quot;&quot;&gt;bdim&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4377\&amp;quot;&quot;&gt;.*&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4380\&amp;quot;&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4382\&amp;quot;&quot;&gt;.-&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4384\&amp;quot;&quot;&gt;1&lt;/span&gt;)) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4388\&amp;quot;&quot;&gt;.+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4390\&amp;quot;&quot;&gt;t&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4393\&amp;quot;&quot;&gt;A&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4395\&amp;quot;&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4396\&amp;quot;&quot;&gt;...&lt;/span&gt;] &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4399\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4401\&amp;quot;&quot;&gt;b&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4404\&amp;quot;&quot;&gt;B&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4406\&amp;quot;&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4407\&amp;quot;&quot;&gt;...&lt;/span&gt;] &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4410\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4412\&amp;quot;&quot;&gt;t&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4415\&amp;quot;&quot;&gt;return&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4417\&amp;quot;&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4419\&amp;quot;&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4421\&amp;quot;&quot;&gt;&quot;Threads index: &lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4422\&amp;quot;&quot;&gt;\\n&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4423\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4426\&amp;quot;&quot;&gt;T&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4429\&amp;quot;&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4431\&amp;quot;&quot;&gt;&quot;Block index: &lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4432\&amp;quot;&quot;&gt;\\n&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4433\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4436\&amp;quot;&quot;&gt;B&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;4469\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;5a85c88c-f0a9-4064-bf8a-62c80bf270ae\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4470\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;4480\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;4481\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;4482\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4483\&amp;quot;&quot; readability=&quot;7.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4484\&amp;quot;&quot; readability=&quot;10&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;4485\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;341\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4486\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;341-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4487\&amp;quot;&quot;&gt;In the above example you can see the iteration order of a more complex launch configuration. Figuring out the right iteration + launch configuration is crucial to achieve state of the art GPU performance – but won't be part of this simple introduction. There are plenty of GPU tutorials for CUDA and OpenCL which explain this in great detail and those principles are identical when programming the GPU in Julia.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section data-node-id=&quot;\&amp;quot;33457f06-ffd8-4e64-a9e3-f336e875b947\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4491\&amp;quot;&quot;&gt;&lt;div class=&quot;\&amp;quot;relative&quot; heading-container=&quot;&quot; ph-gutter=&quot;&quot; heading-container-2=&quot;&quot; data-reactid=&quot;\&amp;quot;4492\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4503\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4504\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;4505\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4506\&amp;quot;&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4507\&amp;quot;&quot;&gt;
&lt;p&gt;
&lt;h2 class=&quot;\&amp;quot;heading&quot; relative=&quot;&quot; b=&quot;&quot; hd2=&quot;&quot; mw-read=&quot;&quot; data-reactid=&quot;\&amp;quot;4502\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;344\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4509\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;344-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4510\&amp;quot;&quot;&gt;Conclusion&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;4513\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;3bf52ba8-8341-4248-a628-72df5304880c\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4514\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;4524\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;4525\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;4526\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4527\&amp;quot;&quot; readability=&quot;6.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4528\&amp;quot;&quot; readability=&quot;8&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;4529\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;347\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4530\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;347-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4531\&amp;quot;&quot;&gt;Julia has come a long way to bring composable high-level programming to the high performance world. Now it's time to do the same for the GPU.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;4534\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;0b7718a8-066d-4e2b-a020-e3530b4284ec\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4535\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;4545\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;4546\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;4547\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4548\&amp;quot;&quot; readability=&quot;9&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4549\&amp;quot;&quot; readability=&quot;13&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;4550\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;350\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4551\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;350-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4552\&amp;quot;&quot;&gt;The hope is that Julia lowers the bar for people to start programming on GPUs, and that we can grow an extendable platform for open source GPU computing. The first success story, of automatic differentiation working out of the box via Julia packages that haven't even been written for the GPU, gives a lot of reason to believe in the success of Julia's extendable and generic design in the domain of GPU computing.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/section&gt;&lt;/article&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&quot;]]&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Thu, 18 Oct 2018 16:25:13 +0000</pubDate>
<dc:creator>simondanisch</dc:creator>
<dc:format>application/transit+json</dc:format>
<dc:identifier>https://nextjournal.com/sdanisch/julia-gpu-programming</dc:identifier>
</item>
<item>
<title>Large home libraries may have a long-term impact on proficiency: study</title>
<link>https://www.smithsonianmag.com/smart-news/growing-surrounded-books-may-bolster-skills-later-life-180970523/?no-ist</link>
<guid isPermaLink="true" >https://www.smithsonianmag.com/smart-news/growing-surrounded-books-may-bolster-skills-later-life-180970523/?no-ist</guid>
<description>&lt;div readability=&quot;100.15688735488&quot;&gt;
&lt;p&gt;Research has already suggested that opening a book may help &lt;a href=&quot;https://www.psychologytoday.com/us/blog/the-athletes-way/201401/reading-fiction-improves-brain-connectivity-and-function&quot;&gt;improve brain function&lt;/a&gt;, &lt;a href=&quot;https://www.telegraph.co.uk/news/health/news/5070874/Reading-can-help-reduce-stress.html&quot;&gt;reduce stress&lt;/a&gt;, and even &lt;a href=&quot;https://www.scientificamerican.com/article/novel-finding-reading-literary-fiction-improves-empathy/&quot;&gt;make us more empathetic&lt;/a&gt;. Now, a team led by Joanna Sikora of the Australian National University is looking into the benefits of growing up around a book-filled environment; as Alison Flood of the &lt;em&gt;&lt;a href=&quot;https://www.theguardian.com/books/2018/oct/10/growing-up-in-a-house-full-of-books-is-major-boost-to-literacy-and-numeracy-study-finds&quot;&gt;Guardian&lt;/a&gt;&lt;/em&gt; reports, the researchers' expansive new study suggests that homes with ample libraries can arm children with skills that persist into adulthood.&lt;/p&gt;

&lt;p&gt;The study, published recently in &lt;em&gt;&lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0049089X18300607&quot;&gt;Social Science Research&lt;/a&gt;&lt;/em&gt;, assessed data from 160,000 adults from 31 countries, including the United States, Canada, the United Kingdom, Australia, Turkey, Japan and Chile. Participants filled out surveys with the &lt;a href=&quot;http://www.oecd.org/skills/piaac/&quot;&gt;Programme for the International Assessment of Competencies&lt;/a&gt;, which measures proficiency in three categories: literacy, numeracy (using mathematical concepts in everyday life) and information communication technology, (using digital technology to communicate with other people, and to gather and analyze information).&lt;/p&gt;
&lt;p&gt;Respondents, who ranged in age from 25 to 65, were asked to estimate how many books were in their house when they were 16 years old. The research team was interested in this question because home library size can be a good indicator of what the study authors term “book-oriented socialization.” Participants were able to select from a given range of books that included everything from “10 or less” to “more than 500.”&lt;/p&gt;
&lt;p&gt;The surveys, which were taken between 2011 and 2015, showed that the average number of books in participants’ childhood homes was 115, but that number varied widely from country to country. The average library size in Norway was 212 books, for instance; in Turkey, it was 27. Across the board, however, it seemed that more books in the home was linked to higher proficiency in the areas tested by the survey.&lt;/p&gt;
&lt;p&gt;The effects were most marked when it came to literacy. Growing up with few books in the home resulted in below average literacy levels. Being surrounded by 80 books boosted the levels to average, and literacy continued to improve until libraries reached about 350 books, at which point the literacy rates leveled off. The researchers observed similar trends when it came to numeracy; the effects were not as pronounced with information communication technology tests, but skills did improve with increased numbers of books.&lt;/p&gt;
&lt;p&gt;So, what are the implications of the new study? Take, for instance, adults who grew up with hardly any books in the home, but went on to obtain a university degree in comparison to an adult who grew up with a large home library, but only had nine years of schooling. The study found that both of their literacy levels were roughly average. “So, literacy-wise, bookish adolescence makes up for a good deal of educational advantage,” the study authors write.&lt;/p&gt;
&lt;p&gt;Further research is needed to determine precisely why exposure to books in childhood fosters valuable skills later in life, but the study offers further evidence to suggest that reading has a powerful effect on the mind. And so home library size might be important because, as the researchers note, “[c]hildren emulate parents who read.”&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;32&quot;&gt;
&lt;p&gt;Like this article?&lt;br/&gt;&lt;span&gt;SIGN UP&lt;/span&gt; for our newsletter&lt;/p&gt;

&lt;/div&gt;</description>
<pubDate>Thu, 18 Oct 2018 15:22:33 +0000</pubDate>
<dc:creator>devy</dc:creator>
<og:image>https://thumbs-prod.si-cdn.com/AGCMQGH8X_er6BjXzoy_WpxqfU8=/1072x720/filters:no_upscale()/https://public-media.smithsonianmag.com/filer/53/31/53315912-3fdc-4de4-a67f-d4c393ca806b/e7f7kh.jpg</og:image>
<og:title>Growing Up Surrounded by Books Could Have Powerful, Lasting Effect on the Mind</og:title>
<og:url>https://www.smithsonianmag.com/smart-news/growing-surrounded-books-may-bolster-skills-later-life-180970523/</og:url>
<og:type>article</og:type>
<og:description>A new study suggests that exposure to large home libraries may have a long-term impact on proficiency in three key areas</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.smithsonianmag.com/smart-news/growing-surrounded-books-may-bolster-skills-later-life-180970523/?no-ist</dc:identifier>
</item>
<item>
<title>Microplastics found in 90 percent of table salt</title>
<link>https://www.nationalgeographic.com/environment/2018/10/microplastics-found-90-percent-table-salt-sea-salt/?user.testname=none</link>
<guid isPermaLink="true" >https://www.nationalgeographic.com/environment/2018/10/microplastics-found-90-percent-table-salt-sea-salt/?user.testname=none</guid>
<description>&lt;span itemprop=&quot;articleBody&quot; class=&quot;clearfix&quot;&gt;In partnership with the National Geographic Society.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot; class=&quot;clearfix&quot;&gt;&lt;a href=&quot;https://www.nationalgeographic.com/magazine/2018/06/plastic-planet-health-pollution-waste-microplastics/&quot;&gt;Microplastics&lt;/a&gt; were found in sea salt several years ago. But how extensively plastic bits are spread throughout the most commonly used seasoning remained unclear. Now, new research shows microplastics in 90 percent of the table salt brands sampled worldwide.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot; class=&quot;clearfix&quot;&gt;Of 39 salt brands tested, 36 had microplastics in them, according to a new analysis by researchers in South Korea and &lt;a href=&quot;http://www.greenpeace.org/eastasia/&quot;&gt;Greenpeace East Asia&lt;/a&gt;. Using prior salt studies, this new effort is the first of its scale to look at the geographical spread of microplastics in table salt and their correlation to where plastic pollution is found in the environment.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot; class=&quot;clearfix&quot;&gt;“The findings suggest that human ingestion of microplastics via marine products is strongly related to emissions in a given region,” said &lt;a href=&quot;https://www.researchgate.net/profile/Seung_Kyu_Kim&quot;&gt;Seung-Kyu Kim&lt;/a&gt;, a marine science professor at Incheon National University in South Korea.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot; class=&quot;clearfix&quot;&gt;National Geographic has also teamed up with Wattpad to raise awareness of the global plastic issue through a creative storytelling challenge. We're asking people to share a story—real or fiction—inspired by this global issue. Learn more and share your story here: &lt;a href=&quot;http://www.wattpad.com/user/NationalGeographic&quot;&gt;www.wattpad.com/user/NationalGeographic&lt;/a&gt;&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot; class=&quot;clearfix&quot;&gt;Salt samples from 21 countries in Europe, North and South America, Africa, and Asia were analyzed. The three brands that did not contain microplastics are from Taiwan (refined sea salt), China (refined rock salt), and France (unrefined sea salt produced by solar evaporation). The study was published this month in the journal &lt;a href=&quot;https://pubs.acs.org/doi/10.1021/acs.est.8b04180&quot;&gt;&lt;em&gt;Environmental Science &amp;amp; Technology&lt;/em&gt;.&lt;/a&gt;&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot; class=&quot;clearfix&quot;/&gt;</description>
<pubDate>Thu, 18 Oct 2018 14:15:14 +0000</pubDate>
<dc:creator>Shivetya</dc:creator>
<og:title>Microplastics found in 90 percent of table salt</og:title>
<og:description>A new study looked at sea, rock, and lake salt sold around the world. Here’s what you need to know.</og:description>
<og:url>https://www.nationalgeographic.com/environment/2018/10/microplastics-found-90-percent-table-salt-sea-salt/</og:url>
<og:type>article</og:type>
<og:image>https://www.nationalgeographic.com/content/dam/environment/2018/10/plasticsalt/plasticsalt_gettyimages-89768897.ngsversion.1539802802155.adapt.1900.1.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nationalgeographic.com/environment/2018/10/microplastics-found-90-percent-table-salt-sea-salt/?user.testname=none</dc:identifier>
</item>
<item>
<title>PostgreSQL 11 Released</title>
<link>https://www.postgresql.org/about/news/1894/</link>
<guid isPermaLink="true" >https://www.postgresql.org/about/news/1894/</guid>
<description>&lt;p&gt;Posted on &lt;strong&gt;2018-10-18&lt;/strong&gt; by PostgreSQL Global Development Group&lt;/p&gt;
&lt;p&gt;The PostgreSQL Global Development Group today announced the release of PostgreSQL 11, the latest version of the world’s most advanced open source database.&lt;/p&gt;
&lt;p&gt;PostgreSQL 11 provides users with improvements to overall performance of the database system, with specific enhancements associated with very large databases and high computational workloads. Further, PostgreSQL 11 makes significant improvements to the table partitioning system, adds support for stored procedures capable of transaction management, improves query parallelism and adds parallelized data definition capabilities, and introduces just-in-time (JIT) compilation for accelerating the execution of expressions in queries.&lt;/p&gt;
&lt;p&gt;&quot;For PostgreSQL 11, our development community focused on adding features that improve PostgreSQL's ability to manage very large databases,&quot; said Bruce Momjian, a &lt;a href=&quot;https://www.postgresql.org/developer/core/&quot;&gt;core team member&lt;/a&gt; of the &lt;a href=&quot;https://www.postgresql.org&quot;&gt;PostgreSQL Global Development Group&lt;/a&gt;. &quot;On top of PostgreSQL's proven performance for transactional workloads, PostgreSQL 11 makes it even easier for developers to run big data applications at scale.&quot;&lt;/p&gt;
&lt;p&gt;PostgreSQL benefits from over 20 years of open source development and has become the preferred open source relational database for developers. The project continues to receive recognition across the industry, and has been featured as the &quot;&lt;a href=&quot;https://db-engines.com/en/blog_post/76&quot;&gt;DBMS of the Year 2017&lt;/a&gt;&quot; by DB-Engines and in the &lt;a href=&quot;https://sdtimes.com/sdtimes-100/2018/best-in-show/database-and-database-management-2018/&quot;&gt;SD Times 2018 100&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PostgreSQL 11 is the first major release since PostgreSQL 10 was released on October 5, 2017. The next update release for PostgreSQL 11 containing bug fixes will be PostgreSQL 11.1, and the next major release with new features will be PostgreSQL 12.&lt;/p&gt;
&lt;h2&gt;Increased Robustness and Performance for Partitioning&lt;/h2&gt;
&lt;p&gt;PostgreSQL 11 adds the ability to partition data by a hash key, also known as hash partitioning, adding to the current ability to partition data in PostgreSQL by a list of values or by a range. PostgreSQL 11 further improves its data federation abilities with functionality improvements for partitions that use the PostgreSQL foreign data wrapper, &lt;a href=&quot;https://www.postgresql.org/docs/current/static/postgres-fdw.html&quot;&gt;postgres_fdw&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To help with managing partitions, PostgreSQL 11 introduces a catch-all default partition for data that does not match a partition key, and the ability to create primary keys, foreign keys, indexes, and triggers on partitioned tables that are passed down to all partitions. PostgreSQL 11 also supports automatically moving rows to the correct partition if the partition key for that row is updated.&lt;/p&gt;
&lt;p&gt;PostgreSQL 11 improves upon query performance when reading from partitions by using a new partition elimination strategy. Additionally, PostgreSQL 11 now supports the popular &quot;upsert&quot; feature on partitioned tables, which helps users to simplify application code and reduce network overhead when interacting with their data.&lt;/p&gt;
&lt;h2&gt;Transactions Supported in Stored Procedures&lt;/h2&gt;
&lt;p&gt;Developers have been able to create user-defined functions in PostgreSQL for over 20 years, but prior to PostgreSQL 11, these functions were unable to manage their own transactions. PostgreSQL 11 adds SQL procedures that can perform full transaction management within the body of a function, enabling developers to create more advanced server-side applications, such as ones involving incremental bulk data loading.&lt;/p&gt;
&lt;p&gt;SQL procedures can be created using the &lt;code&gt;CREATE PROCEDURE&lt;/code&gt; command, executed using the &lt;code&gt;CALL&lt;/code&gt; command, and are supported by the server-side procedural languages PL/pgSQL, PL/Perl, PL/Python, and PL/Tcl.&lt;/p&gt;
&lt;h2&gt;Enhanced Capabilities for Query Parallelism&lt;/h2&gt;
&lt;p&gt;PostgreSQL 11 improves parallel query performance, with performance gains in parallel sequential scans and hash joins along with more efficient scans of partitioned data. PostgreSQL can now execute SELECT queries that use &lt;code&gt;UNION&lt;/code&gt; in parallel if the underlying queries are unable to be parallelized.&lt;/p&gt;
&lt;p&gt;PostgreSQL 11 adds parallelism to several data definition commands, notably for the creation of B-tree indexes that are generated by executing the standard &lt;code&gt;CREATE INDEX&lt;/code&gt; command. Several data definition commands that either create tables or materialized views from queries are also parallel capable now, including the &lt;code&gt;CREATE TABLE .. AS&lt;/code&gt;, &lt;code&gt;SELECT INTO&lt;/code&gt;, and &lt;code&gt;CREATE MATERIALIZED VIEW&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Just-in-Time (JIT) Compilation for Expressions&lt;/h2&gt;
&lt;p&gt;PostgreSQL 11 introduces support for Just-In-Time (JIT) compilation to accelerate the execution of certain expressions during query execution. JIT expression compilation for PostgreSQL uses the LLVM project to speed up the execution of expressions in WHERE clauses, target lists, aggregates, projections, and some internal operations.&lt;/p&gt;
&lt;p&gt;To take advantage of JIT compilation, you will need to install the LLVM dependencies and enable JIT compilation in either your PostgreSQL settings file by setting &lt;code&gt;jit = on&lt;/code&gt; or from your PostgreSQL session by executing &lt;code&gt;SET jit = on&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;General User Experience Improvements&lt;/h2&gt;
&lt;p&gt;The enhancements to the PostgreSQL relational database are not possible without the feedback from an active user community and the hard work by the people who work on PostgreSQL. Below highlights a few of the many features included in PostgreSQL 11 designed to improve the overall user experience:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Removing the need for &lt;code&gt;ALTER TABLE .. ADD COLUMN .. DEFAULT ..&lt;/code&gt; with a not &lt;code&gt;NULL&lt;/code&gt; default to rewrite the whole table on execution, which provides a significant performance boost when running this command.&lt;/li&gt;
&lt;li&gt;&quot;Covering indexes,&quot; which allows a user to add additional columns to an index using the &lt;code&gt;INCLUDE&lt;/code&gt; clause and are helpful for performing index-only scans, especially on data types that are not indexable by B-tree indexes.&lt;/li&gt;
&lt;li&gt;Additional functionality for working with window functions, including allowing &lt;code&gt;RANGE&lt;/code&gt; to use &lt;code&gt;PRECEDING&lt;/code&gt;/&lt;code&gt;FOLLOWING&lt;/code&gt;, &lt;code&gt;GROUPS&lt;/code&gt;, and frame exclusion&lt;/li&gt;
&lt;li&gt;The inclusion of the keywords &quot;quit&quot; and &quot;exit&quot; in the PostgreSQL command-line interface to help make it easier to leave the command-line tool&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For a full list of features included in this release, please read the &lt;a href=&quot;https://www.postgresql.org/docs/11/static/release-11.html&quot;&gt;release notes&lt;/a&gt;, which can be found at:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.postgresql.org/docs/11/static/release-11.html&quot;&gt;https://www.postgresql.org/docs/11/static/release-11.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;About PostgreSQL&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.postgresql.org&quot;&gt;PostgreSQL&lt;/a&gt; is the world's most advanced open source database, with a global community of thousands of users, contributors, companies and organizations. The PostgreSQL Project builds on over 30 years of engineering, starting at the University of California, Berkeley, and has continued with an unmatched pace of development. PostgreSQL's mature feature set not only matches top proprietary database systems, but exceeds them in advanced database features, extensibility, security, and stability. Learn more about PostgreSQL and participate in our community at &lt;a href=&quot;https://www.postgresql.org&quot;&gt;PostgreSQL.org&lt;/a&gt;.&lt;/p&gt;
&lt;span class=&quot;newstag&quot;&gt;&lt;a class=&quot;btn btn-primary&quot; href=&quot;https://www.postgresql.org/about/newsarchive/pgsql/&quot;&gt;PostgreSQL Project&lt;/a&gt;&lt;/span&gt;</description>
<pubDate>Thu, 18 Oct 2018 13:20:21 +0000</pubDate>
<dc:creator>MarkusWinand</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.postgresql.org/about/news/1894/</dc:identifier>
</item>
<item>
<title>Even janitors have noncompetes now</title>
<link>https://www.washingtonpost.com/business/2018/10/18/even-janitors-have-noncompetes-now-nobody-is-safe/?noredirect=on</link>
<guid isPermaLink="true" >https://www.washingtonpost.com/business/2018/10/18/even-janitors-have-noncompetes-now-nobody-is-safe/?noredirect=on</guid>
<description>&lt;div data-elm-loc=&quot;0&quot; class=&quot;inline-content inline-photo inline-photo-normal&quot;&gt; &lt;img src=&quot;https://www.washingtonpost.com/resizer/5uB1A28GBhaDo6_K-WK8q78Voh8=/480x0/arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/Y5VQLQWTFYI6RJG3DBBRDUTRFE.jpg&quot; data-hi-res-src=&quot;https://www.washingtonpost.com/resizer/BreUW3icKIn_l3aMJG7M1yz1xxc=/1484x0/arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/Y5VQLQWTFYI6RJG3DBBRDUTRFE.jpg&quot; data-low-res-src=&quot;https://www.washingtonpost.com/resizer/5uB1A28GBhaDo6_K-WK8q78Voh8=/480x0/arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/Y5VQLQWTFYI6RJG3DBBRDUTRFE.jpg&quot; data-raw-src=&quot;https://arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/Y5VQLQWTFYI6RJG3DBBRDUTRFE.jpg&quot; data-threshold=&quot;480&quot; class=&quot;unprocessed&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;pb-caption&quot;&gt;(iStock)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;author-sig-line-wrapper analysis-story&quot;&gt;
&lt;div class=&quot;author-headshot&quot;&gt;&lt;a href=&quot;https://www.washingtonpost.com/people/matt-obrien/&quot;&gt;&lt;img src=&quot;https://www.washingtonpost.com/resizer/lYdK4tvHFL4ZI3ntmLtjuR0Mqfk=/200x200/s3.amazonaws.com/arc-authors/washpost/b543911d-3526-4133-9d86-2af4443aae44.png&quot; class=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;author-sig-line&quot;&gt;

&lt;div class=&quot;author-wrapper&quot; data-authorname=&quot;Matt O'Brien&quot;&gt;

&lt;span class=&quot;author-timestamp&quot; itemprop=&quot;datePublished&quot; content=&quot;2018-10-18T06:00-500&quot;&gt;October 18 at 6:00 AM&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p data-elm-loc=&quot;1&quot;&gt;&lt;em&gt;Update: Since the first publication of this story, Cushman &amp;amp; Wakefield have decided to drop their lawsuit against their former janitor, Sonia Mercado. They will also pay her back the balance of the $3,500 bonus she’d given up in an effort not to trigger her noncompete agreement. The company made this statement for the record: “Following recent media reports related to the use of restrictive agreements with our janitorial staff, we have completed a review of the circumstances. While we do have restrictions with a select number of salaried managers, we have found that this policy was incorrectly applied in this instance. We are taking action to correct this situation. We sincerely apologize to Ms. Mercado. Restricting the employment of hourly workers is inconsistent with our policies and contrary to our values as an organization.”&lt;/em&gt;&lt;/p&gt;
&lt;p data-elm-loc=&quot;2&quot;&gt;One of the central contradictions of capitalism is that what makes it work — competition — is also what capitalists want to get rid of the most.&lt;/p&gt;
&lt;p data-elm-loc=&quot;3&quot;&gt;That’s true not only of competition between companies, but also between them and their workers. After all, the more of a threat its rivals are, and the more options its employees have, the less profitable a business will tend to be. Which, as the Financial Times &lt;a href=&quot;https://www.ft.com/content/bfb69d30-ce44-11e8-b276-b9069bde0956&quot; target=&quot;_blank&quot;&gt;reports&lt;/a&gt;, probably goes a long way toward explaining why a $3.4 billion behemoth like Cushman &amp;amp; Wakefield would bother to sue one of its former janitors, accusing her of breaking her noncompete agreement by taking a job in the same building she had been cleaning for the global real estate company but doing it for a different firm.&lt;/p&gt;
&lt;p data-elm-loc=&quot;4&quot;&gt;Now, the company claims this wasn’t a noncompete per se but rather a “non-service” agreement meant to prevent a competitor from easily taking over the management of a building. But the effect is the same: limiting your current employees' future choices.&lt;/p&gt;
&lt;p data-elm-loc=&quot;5&quot;&gt;See, it’s not that keeping this specific cleaner from leaving is somehow vital to Cushman &amp;amp; Wakefield’s business — although, of course, the firm is obliged to say otherwise. (It would be “irreparably harmed,” its lawyers said, “the extent of which cannot be readily calculated.”) Rather, what’s important is keeping &lt;em&gt;all&lt;/em&gt; of its workers from leaving for better pay. Especially when a few of them had already been defecting to its top competitor.&lt;/p&gt;
&lt;p data-elm-loc=&quot;6&quot;&gt;Because that’s really what this is all about: whether workers are allowed to leave for greener pastures or their bosses are given the green light to put up such high fences around them that they’re forced to stay. In other words, it’s about power: who has it and who doesn’t. Or, more precisely, whom we give it to and whom we don’t. If we create a legal framework that puts workers on an equal footing, then they can go get a raise without having to wait for their employers to deign to give it to them. But if we don’t, then those bosses, secure in the knowledge that their employees can’t easily leave, can get away with offering only minuscule pay increases, if that.&lt;/p&gt;
&lt;p data-elm-loc=&quot;7&quot;&gt;You might think that there couldn’t be a more absurd example of a company using noncompetes to hold down wages than going after a janitor, but you’d be wrong. Amazon.com used them for &lt;a href=&quot;https://www.theverge.com/2015/3/26/8280309/amazon-warehouse-jobs-exclusive-noncompete-contracts&quot; target=&quot;_blank&quot;&gt;warehouse workers&lt;/a&gt;. Jimmy John’s for &lt;a href=&quot;https://www.washingtonpost.com/news/wonk/wp/2014/10/16/corporate-america-has-won-even-sandwich-makers-have-non-compete-clauses-now/?utm_term=.405b6b5a61ae&quot; target=&quot;_blank&quot;&gt;sandwich-makers&lt;/a&gt;. Camp Bow Wow, a doggy day care chain, for &lt;a href=&quot;https://www.washingtonpost.com/news/wonk/wp/2014/12/02/capitalism-is-officially-broken-even-doggy-day-care-workers-have-non-competes-now/?utm_term=.1ef320a3758e&quot; target=&quot;_blank&quot;&gt;dog-walkers&lt;/a&gt;.&lt;/p&gt;
&lt;div data-elm-loc=&quot;8&quot; class=&quot;inline-content inline-video&quot;&gt;

&lt;/div&gt;
&lt;p data-elm-loc=&quot;9&quot;&gt;In any case, the point is that noncompetes, which used to be about keeping top executives from taking trade secrets to rival firms, have now become much more common among all types of workers. Indeed, according to University of Maryland economist Evan Starr and his co-researchers from the University of Michigan, J.J. Prescott and Norman Bishara, noncompetes &lt;a href=&quot;https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2625714&quot; target=&quot;_blank&quot;&gt;cover 18 percent&lt;/a&gt; of all U.S. workers and have covered 38 percent at some point in time. And while it’s true that they’re still more prevalent among high-wage workers, noncompetes do cover a full 14 percent of workers without college degrees.&lt;/p&gt;
&lt;p data-elm-loc=&quot;10&quot;&gt;Companies have started suing over them more frequently, too. A &lt;a href=&quot;https://www.wsj.com/articles/litigation-over-noncompete-clauses-is-rising-does-entrepreneurship-suffer-1376520622&quot; target=&quot;_blank&quot;&gt;Wall Street Journal analysis&lt;/a&gt;, for one, found that noncompete lawsuits increased by 60 percent between 2002 and 2013.&lt;/p&gt;
&lt;p data-elm-loc=&quot;11&quot;&gt;Not that companies even need to do this to intimidate workers. The mere existence of a noncompete, whether it would be fully enforceable in a given state, can have what economists call a “&lt;a href=&quot;https://www.brookings.edu/wp-content/uploads/2018/02/es_2272018_reforming_noncompetes_support_workers_marx_policy_proposal.pdf&quot; target=&quot;_blank&quot;&gt;chilling effect&lt;/a&gt;” on workers. That’s because most people don’t moonlight as labor lawyers. They don’t know which noncompetes are and aren’t legal where they live. All they know is that they signed something that they couldn’t afford to fight in court.&lt;/p&gt;
&lt;p data-elm-loc=&quot;12&quot;&gt;It’s this perception of a legal threat, Starr, Prescott and Bishara &lt;a href=&quot;http://www.sole-jole.org/17462.pdf&quot; target=&quot;_blank&quot;&gt;found&lt;/a&gt;, much more than the reality of whether they could actually be sued that explains why people turn down job offers because of noncompetes. The predictable result is that workers with noncompetes tend to stay in the same job a lot longer. So it should be no surprise, as the &lt;a href=&quot;https://www.treasury.gov/resource-center/economic-policy/Documents/UST%20Non-competes%20Report.pdf&quot; target=&quot;_blank&quot;&gt;U.S. Treasury&lt;/a&gt; points out, that noncompetes are also associated with lower wage growth. It isn’t easy to negotiate a raise when you can’t use other offers as leverage.&lt;/p&gt;
&lt;p data-elm-loc=&quot;13&quot;&gt;As for the case between Cushman &amp;amp; Wakefield and its erstwhile janitor, it’s still being decided. In the meantime, though, the judge has granted a temporary injunction against the company’s former cleaner, barring her from working at her new job for the next few months. Neither side returned a call seeking comment.&lt;/p&gt;
&lt;p data-elm-loc=&quot;14&quot;&gt;It’s a reminder that markets are about more than just supply and demand. Markets are also about, well, the market itself. In particular, the rules we give it and how we interpret them. Which is to say — while it’s unequivocally good news that job openings outnumber unemployed people by more than at any point in 40 years and the unemployment rate is the lowest it’s been in almost 50 years — the economy still won’t be as good as it could be for workers if we’ve stacked the deck against them. This is what happens when we make it harder for workers to sue over stolen wages, as the Supreme Court &lt;a href=&quot;https://www.washingtonpost.com/blogs/plum-line/wp/2018/05/21/the-supreme-court-just-made-it-easier-on-employers-and-harder-on-workers/?utm_term=.9cd7729f1f2b&quot; target=&quot;_blank&quot;&gt;just did&lt;/a&gt;, or make it easier for companies to do so over noncompetes.&lt;/p&gt;
&lt;p data-elm-loc=&quot;15&quot;&gt;And that’s the real problem. It’s just a fact of life that capitalists want to take the competition out of capitalism. But it’s something different altogether when the courts and the government try to help them.&lt;/p&gt;
&lt;p data-elm-loc=&quot;16&quot;&gt;That’s a new Gilded Age.&lt;/p&gt;
</description>
<pubDate>Thu, 18 Oct 2018 13:03:28 +0000</pubDate>
<dc:creator>petethomas</dc:creator>
<og:type>article</og:type>
<og:url>https://www.washingtonpost.com/business/2018/10/18/even-janitors-have-noncompetes-now-nobody-is-safe/</og:url>
<og:image>https://www.washingtonpost.com/resizer/BreUW3icKIn_l3aMJG7M1yz1xxc=/1484x0/arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/Y5VQLQWTFYI6RJG3DBBRDUTRFE.jpg</og:image>
<og:title>Perspective | Even janitors have noncompetes now. Nobody is safe.</og:title>
<og:description>The proliferation of the wage-depressing contracts is a natural consequence of capitalists' paradoxical aversion to competition. That doesn't mean courts and politicians have to go along with it.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.washingtonpost.com/business/2018/10/18/even-janitors-have-noncompetes-now-nobody-is-safe/?noredirect=on</dc:identifier>
</item>
</channel>
</rss>