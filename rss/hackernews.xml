<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Elon Musk Accused by SEC of Misleading Investors in August Tweet</title>
<link>https://www.bloomberg.com/news/articles/2018-09-27/elon-musk-is-sued-by-securities-and-exchange-commission-docket-jml0doi2</link>
<guid isPermaLink="true" >https://www.bloomberg.com/news/articles/2018-09-27/elon-musk-is-sued-by-securities-and-exchange-commission-docket-jml0doi2</guid>
<description>&lt;head&gt;&lt;title&gt;Terms of Service Violation&lt;/title&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;24&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;9.4285714285714&quot;&gt;&lt;img src=&quot;https://www.bloomberg.com/graphics/assets/img/BB-Logo-2line.svg&quot; width=&quot;310&quot;/&gt;
&lt;p&gt;Your usage has been flagged as a violation of our &lt;a href=&quot;http://www.bloomberg.com/tos&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;terms of service&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For inquiries related to this message please &lt;a href=&quot;http://www.bloomberg.com/feedback&quot;&gt;contact support&lt;/a&gt;. For sales inquiries, please visit &lt;a href=&quot;http://www.bloomberg.com/professional/request-demo&quot;&gt;http://www.bloomberg.com/professional/request-demo&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;If you believe this to be in error, please confirm below that you are not a robot by clicking &quot;I'm not a robot&quot; below.&lt;/h3&gt;
&lt;br/&gt;&lt;h3&gt;Please make sure your browser supports JavaScript and cookies and that you are not blocking them from loading. For more information you can review the Terms of Service and Cookie Policy.&lt;/h3&gt;
&lt;br/&gt;&lt;h3 id=&quot;block_uuid&quot;&gt;Block reference ID:&lt;/h3&gt;
&lt;/div&gt;
&lt;/body&gt;</description>
<pubDate>Thu, 27 Sep 2018 20:08:34 +0000</pubDate>
<dc:creator>tysone</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/tosv2.html?vid=&amp;uuid=a477ba70-c2b1-11e8-867e-f32b7b21520d&amp;url=L25ld3MvYXJ0aWNsZXMvMjAxOC0wOS0yNy9lbG9uLW11c2staXMtc3VlZC1ieS1zZWN1cml0aWVzLWFuZC1leGNoYW5nZS1jb21taXNzaW9uLWRvY2tldC1qbWwwZG9pMg==</dc:identifier>
</item>
<item>
<title>This blog has moved</title>
<link>https://allendowney.blogspot.com/2018/09/this-blog-has-moved.html</link>
<guid isPermaLink="true" >https://allendowney.blogspot.com/2018/09/this-blog-has-moved.html</guid>
<description>As of September 2018, &lt;a href=&quot;https://www.allendowney.com/blog&quot;&gt;I am moving &lt;em&gt;Probably Overthinking It&lt;/em&gt; to a new location&lt;/a&gt;.&lt;p&gt;Blogger has been an excellent host; so far, this blog has received more than two million page views.&lt;/p&gt;&lt;p&gt;But earlier this month, when I published a new article, Blogger prompted me to post it on Google+, and I did.  A few hours later I discovered that my Google+ account had been suspended for violating terms of service, but I got no information about what terms I had violated.&lt;/p&gt;&lt;p&gt;While my Google+ account was suspended, I was unable to access Blogger and some other Google services.  And since &lt;em&gt;Probably Overthinking It&lt;/em&gt; is a substantial part of my professional web presence, that was unacceptable.&lt;/p&gt;&lt;p&gt;I appealed the suspension by pressing a button, with no opportunity to ask a question.  Within 24 hours, my account was restored, but with no communication and still no information.&lt;/p&gt;&lt;p&gt;So for me, using Google+ has become a game of Russian Roulette.  Every time I post something, there seems to be a random chance that I will lose control of my web presence.  And maybe next time it will be permanent.&lt;/p&gt;&lt;p&gt;It is nice that using Blogger is free, but this episode has been a valuable reminder that &quot;If you are not paying for it, you are not the customer&quot;.  (&lt;a href=&quot;https://quoteinvestigator.com/2017/07/16/product/&quot;&gt;Who said that?&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;I have moved &lt;em&gt;Probably Overthinking It&lt;/em&gt; to &lt;a href=&quot;https://www.allendowney.com/&quot;&gt;a site I control&lt;/a&gt;, hosted by &lt;a href=&quot;https://www.dreamhost.com/&quot;&gt;a company I pay&lt;/a&gt;, a company that has provided consistently excellent customer service.&lt;/p&gt;&lt;p&gt;Lesson learned.&lt;/p&gt;&lt;p&gt;[When I published this article, Blogger asked it I wanted to post it on Google+.  I did not.]&lt;/p&gt;</description>
<pubDate>Thu, 27 Sep 2018 17:33:50 +0000</pubDate>
<dc:creator>mayankkaizen</dc:creator>
<og:url>http://allendowney.blogspot.com/2018/09/this-blog-has-moved.html</og:url>
<og:title>This blog has moved</og:title>
<og:description>As of September 2018, I am moving Probably Overthinking It to a new location . Blogger has been an excellent host; so far, this blog has ...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://allendowney.blogspot.com/2018/09/this-blog-has-moved.html</dc:identifier>
</item>
<item>
<title>What Is This Thing: Found Hooked Up to My Router</title>
<link>https://www.reddit.com/r/whatisthisthing/comments/9ixdh9/found_hooked_up_to_my_router/e6nh61r/</link>
<guid isPermaLink="true" >https://www.reddit.com/r/whatisthisthing/comments/9ixdh9/found_hooked_up_to_my_router/e6nh61r/</guid>
<description>&lt;p class=&quot;yklcuq-10 hpxQMr&quot;&gt;I'm going to preface my comment with the fact that I'm more red team/pentesting and don't really deal with incident response, so my first comment was me going through what I would potentially look for/go after given that type of access.&lt;/p&gt;
&lt;p class=&quot;yklcuq-10 hpxQMr&quot;&gt;Are you asking about in a business capacity, or personal capacity? For personal capacity, I would definitely go with the help from a friend. Preferably one in the security field, or even IT field - they likely work with someone that focuses on security that can fill in the blanks and provide sound advice.&lt;/p&gt;
&lt;p class=&quot;yklcuq-10 hpxQMr&quot;&gt;Learning for yourself is probably the best option, though. Geek Squad is basically useless. Last I knew of, they just use a bootable CD or USB with antivirus, data recovery, and other basic diagnostic tools. There's a few out there that you can download, burn, and use for free. Scan your stuff, clean what you can, and use a live Linux disc to pull the critical data off and start fresh. Other professional consultations, for just a personal incident such as this, are going to be extremely expensive and really not worth the money, IMHO.&lt;/p&gt;
&lt;p class=&quot;yklcuq-10 hpxQMr&quot;&gt;In a business capacity, you should probably definitely have at least have an infosec consultant for a small company, or a dedicated employee/department otherwise.&lt;/p&gt;
&lt;p class=&quot;yklcuq-10 hpxQMr&quot;&gt;Hope this helps.&lt;/p&gt;
</description>
<pubDate>Thu, 27 Sep 2018 17:01:50 +0000</pubDate>
<dc:creator>empath75</dc:creator>
<og:title>r/whatisthisthing - Found hooked up to my router</og:title>
<og:type>website</og:type>
<og:url>https://www.reddit.com/r/whatisthisthing/comments/9ixdh9/found_hooked_up_to_my_router/e6nh61r</og:url>
<og:description>14,844 votes and 1,290 comments so far on Reddit</og:description>
<og:image>https://i.redditmedia.com/mXAssD9lXxwiYIS6cJWLYgZs6TH0X9YD0rdW7IZUsVU.jpg?s=3c54bf9ddbe2849cd8a692d9cd7a85dd</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reddit.com/r/whatisthisthing/comments/9ixdh9/found_hooked_up_to_my_router/e6nh61r/</dc:identifier>
</item>
<item>
<title>Yes Facebook is using your 2FA phone number to target you with ads</title>
<link>https://techcrunch.com/2018/09/27/yes-facebook-is-using-your-2fa-phone-number-to-target-you-with-ads/</link>
<guid isPermaLink="true" >https://techcrunch.com/2018/09/27/yes-facebook-is-using-your-2fa-phone-number-to-target-you-with-ads/</guid>
<description>&lt;p&gt;&lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/facebook&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;facebook&quot;&gt;Facebook&lt;/a&gt; has confirmed it does in fact use phone numbers that users provided it for security purposes to also target them with ads.&lt;/p&gt;
&lt;p&gt;Specifically a phone number handed over for two factor authentication (2FA) — a security technique that adds a second layer of authentication to help keep accounts secure.&lt;/p&gt;
&lt;p&gt;Facebook’s confession follows a story &lt;a href=&quot;https://gizmodo.com/facebook-is-giving-advertisers-access-to-your-shadow-co-1828476051&quot;&gt;Gizmodo&lt;/a&gt; ran a story yesterday, related to research work carried out by academics at two U.S. universities who ran a study in which they say they were able to demonstrate the company uses pieces of personal information that individuals did not explicitly provide it to, nonetheless, target them with ads.&lt;/p&gt;
&lt;p&gt;While it’s been — if not clear, then at least &lt;em&gt;evident&lt;/em&gt; — for a number of years that Facebook uses contact details of individuals who never personally provided their information for ad targeting purposes (harvesting people’s personal data by other means, such as other users’ mobile phone contact books which the Facebook app uploads), the revelation that numbers provided to Facebook by users in good faith, for the purpose of 2FA, are also, in its view, fair game for ads has not been so explicitly ‘fessed up to before.&lt;/p&gt;
&lt;p&gt;Some months ago Facebook did say that users who were getting spammed with Facebook notifications to the number they provided for 2FA was &lt;a href=&quot;https://gizmodo.com/facebook-admits-spam-texts-to-two-factor-authentication-1823091794&quot;&gt;a bug&lt;/a&gt;. “The last thing we want is for people to avoid helpful security features because they fear they will receive unrelated notifications,” Facebook then-CSO Alex Stamos wrote in a &lt;a href=&quot;https://www.facebook.com/notes/facebook-security/fixing-sms-notifications-for-those-using-two-factor-authentication/10155124741945766/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;blog post&lt;/a&gt; at the time.&lt;/p&gt;
&lt;p&gt;Apparently not thinking to mention the rather pertinent additional side-detail that it’s nonetheless happy to repurpose the same security feature for ad targeting.&lt;/p&gt;
&lt;p&gt;Because $$$s, presumably.&lt;/p&gt;
&lt;p&gt;We asked Facebook to confirm this is indeed what it’s doing — to make doubly doubly sure. Because, srsly wtaf. And it sent us a statement confirming that it repurposes digits handed to it by people wanting to secure their accounts to target them with marketing.&lt;/p&gt;
&lt;p&gt;Here’s the statement, attributed to a Facebook spokesperson: “We use the information people provide to offer a better, more personalized experience on Facebook, including ads. We are clear about how we use the information we collect, including the contact information that people upload or add to their own accounts. You can manage and delete the contact information you’ve uploaded at any time.”&lt;/p&gt;
&lt;p&gt;A spokesman also told us that users can opt out of this ad-based repurposing of their security digits by not using phone number based 2FA. (Albeit, the company only added the &lt;a href=&quot;https://www.facebook.com/notes/facebook-security/two-factor-authentication-for-facebook-now-easier-to-set-up/10155341377090766/&quot;&gt;ability to do non-mobile phone based 2FA&lt;/a&gt; back in May, so anyone before then was all outta luck.)&lt;/p&gt;
&lt;p&gt;On the ‘shadow profiles’ front — aka Facebook maintaining profiles of non-users based on the data it has been able to scrape about them from users and other data sources — the company has also been less than transparent.&lt;/p&gt;
&lt;p&gt;Founder &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/person/mark-zuckerberg&quot; target=&quot;_blank&quot; data-type=&quot;person&quot; data-entity=&quot;mark-zuckerberg&quot;&gt;Mark Zuckerberg&lt;/a&gt; feigned confusion when questioned about the practice by US lawmakers &lt;a href=&quot;https://techcrunch.com/2018/04/11/facebook-shadow-profiles-hearing-lujan-zuckerberg/&quot;&gt;earlier this year&lt;/a&gt; — claiming it only gathers data on non-users for “security purposes”.&lt;/p&gt;
&lt;p&gt;Well it seems Facebook is also using the (valid) security concerns of actual users to extend its ability to target individuals with ads — by using numbers provided for 2FA to also carry out ad targeting.&lt;/p&gt;
&lt;p&gt;Safe to say criticism of the company has been swift and sharp.&lt;/p&gt;

&lt;div class=&quot;embed breakout&quot; readability=&quot;7.9036885245902&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-width=&quot;550&quot; data-dnt=&quot;true&quot; readability=&quot;9.983606557377&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The repurposing by Facebook of phone numbers, provided by users for SMS 2FA, to better target for advertising is utterly disgusting. I’m not easily shocked, but this… &lt;a href=&quot;https://t.co/qFNgqMDFL1&quot;&gt;https://t.co/qFNgqMDFL1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Elizatech (@FitzTechLawIE) &lt;a href=&quot;https://twitter.com/FitzTechLawIE/status/1045055051792879616?ref_src=twsrc%5Etfw&quot;&gt;September 26, 2018&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;Soon Facebook will also be using behind-the-scenes tech means to target ads at WhatsApp users — despite also providing a robust encrypted security wrapper around their actual messages.&lt;/p&gt;
&lt;p&gt;Stamos — now Facebook’s ex-CSO — has also &lt;a href=&quot;https://techcrunch.com/2018/09/27/facebooks-ex-cso-alex-stamos-defends-its-decision-to-inject-ads-in-whatsapp/&quot;&gt;defended its actions on that front&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Thu, 27 Sep 2018 15:45:03 +0000</pubDate>
<dc:creator>sahin-boydas</dc:creator>
<og:title>Yes Facebook is using your 2FA phone number to target you with ads</og:title>
<og:description>Facebook has confirmed it does in fact use phone numbers that users provided it for security purposes to also target them with ads. Specifically a phone number handed over for two factor authentication (2FA) — a security technique that adds a second layer of authentication to help keep accoun…</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2013/10/facebook-app.jpg?w=640</og:image>
<og:url>http://social.techcrunch.com/2018/09/27/yes-facebook-is-using-your-2fa-phone-number-to-target-you-with-ads/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2018/09/27/yes-facebook-is-using-your-2fa-phone-number-to-target-you-with-ads/</dc:identifier>
</item>
<item>
<title>Hire people who aren’t proven</title>
<link>https://leonardofed.io/blog/startups-hiring.html</link>
<guid isPermaLink="true" >https://leonardofed.io/blog/startups-hiring.html</guid>
<description>&lt;p&gt;Hiring is broken on so many different levels, and it starts right there, at the job offer description. It then continues all the way down to the actual interview process.&lt;/p&gt;
&lt;p&gt;I'd like to unfold here some prescriptions about how I think startups should hire.&lt;/p&gt;
&lt;p&gt;Most jobs positions out there regarding the job role go like this &quot;10 years experience in &lt;code&gt;job role&lt;/code&gt;, proven experience in &lt;code&gt;whatever the responsibilities are&lt;/code&gt;, high proficiency in &lt;code&gt;infinite technology set&lt;/code&gt;, already built successful &lt;code&gt;whatever&lt;/code&gt;, ability to work well in a team, exceptional references from previous companies&quot;&lt;/p&gt;
&lt;p&gt;When I read such things, here's what I read instead: &quot;We're looking for a candidate who is: at least a &lt;code&gt;one time World Cup Champion&lt;/code&gt;, &lt;code&gt;two times FIFA World Cup awards winner&lt;/code&gt;, &lt;code&gt;best scorer&lt;/code&gt; of the season, proven ability to work well in a team, exceptional references from previous teams&quot;.&lt;/p&gt;
&lt;p&gt;How many people are really a good fit for this position? Two, maybe three on Earth. The reality is that you're not going to get them.&lt;/p&gt;
&lt;p&gt;If your company's job position looks like you're looking for unicorn you're doing it wrong and you'll never get what you're after.&lt;/p&gt;
&lt;p&gt;If there's anyone else in the world that can come up with your same conclusions with the same degree of confidence, it means that there are enough data points to objectively say this is a great player. If that's the case, you and your startup won't be able to hire the player. Someone will steal him from you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You have to go after people that aren't proven and you need to be really good at evaluating them with much less data points.&lt;/strong&gt; In short, you need to be extremely good at forecasting.&lt;/p&gt;
&lt;p&gt;Don't hire like FAANG companies, don't use their best practices, don't use their super oiled processes, don't play their same games with the same rules.&lt;/p&gt;
&lt;p&gt;Google, Amazon, Netflix, Apple have thousands of candidates and might need an object baseline to judge them. You don't.&lt;/p&gt;
&lt;p&gt;Google's interview best practices strictly focused on &lt;a href=&quot;https://www.quora.com/Why-do-interviewers-care-so-much-about-algorithm-and-data-structures/answer/Leonardo-Federico-1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;algorithms and data structure&lt;/a&gt; questions won't help you in your interview process. Amazon's bar-raiser won't help you either.&lt;/p&gt;
&lt;p&gt;If you play their games when hiring people, you're going to lose every single battle.&lt;/p&gt;
&lt;p&gt;Instead of relying on easy observable data points and measurable metrics (coding challenges, rankings, pedigrees and riddles) look for answers in non-measurable realms, in domains where there are fewer, if not none, data points, looks for areas that are not easy measurable, where there's no yet predefined scripts or manuals, and where new simple heuristics can win overpowered standardized common wisdom.&lt;/p&gt;
&lt;p&gt;Here's what instead you should do in your hiring process, try to find an answer to these four questions:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Can this candidate do the job?&lt;/li&gt;
&lt;li&gt;Will this candidate be motivated?&lt;/li&gt;
&lt;li&gt;Will this candidate get along with coworkers?&lt;/li&gt;
&lt;li&gt;What this candidate will be in three, six, twelve months from now?&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Everything you ask and everything you do during the interview should have the ultimate object of augmenting the details of each one of those four questions.&lt;/p&gt;
&lt;p&gt;Discover how do they deal with complexity? Don't do whiteboard coding on riddles or puzzles. (This is partially the reason why I decided to start &lt;a href=&quot;https://type12.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Type12&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;Learn how do they respond to real-world problems? Don't ask &lt;em&gt;&quot;Why are manhole covers round?&quot;&lt;/em&gt; Who gives a shit to why are manhole covers round. Pair-program with them instead and learn how well they break through blocks.&lt;/p&gt;
&lt;p&gt;Don't ask questions that if you just happen to know the answer to, you're golden, and if you get stuck in a situation where you have to work something out on the fly, you can easily get stuck in a mental wedgie that makes you look like a complete moron.&lt;/p&gt;
&lt;p&gt;Cut luck out of your system.&lt;/p&gt;
&lt;p&gt;Ultimately, look for very-high-dimensional vectors, such as smartness, attitudes, motivation, dynamic learning, courage, that can't be easily tested or represented by a basis vector or on a scale.&lt;/p&gt;
&lt;p&gt;While on the surface these may sound just contrarian, what most of these do is to optimize for something long term/less measurable where the incumbents are constrained by time and what can be measured.&lt;/p&gt;
&lt;p&gt;That's where you discover talents, that's when you hire great people.&lt;/p&gt;
</description>
<pubDate>Thu, 27 Sep 2018 13:45:12 +0000</pubDate>
<dc:creator>type12</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://leonardofed.io/blog/startups-hiring.html</dc:identifier>
</item>
<item>
<title>Nim 0.19</title>
<link>https://nim-lang.org/blog/2018/09/26/version-0190-released.html</link>
<guid isPermaLink="true" >https://nim-lang.org/blog/2018/09/26/version-0190-released.html</guid>
<description>&lt;div class=&quot;width-reduced&quot; readability=&quot;52.952640469133&quot;&gt;

&lt;h3 class=&quot;post-meta&quot;&gt;&lt;span&gt;26 September 2018&lt;/span&gt; &lt;span&gt; The Nim Team&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;The Nim team is happy to announce that the latest release of Nim, version 0.19.0, is now available. Nim is a systems programming language that focuses on performance, portability and expressiveness.&lt;/p&gt;

&lt;p&gt;If you have installed a previous version of Nim using &lt;code class=&quot;highlighter-rouge&quot;&gt;choosenim&lt;/code&gt;, getting Nim 0.19.0 is as easy as:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;choosenim update stable
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you don’t have it already, you can get &lt;code class=&quot;highlighter-rouge&quot;&gt;choosenim&lt;/code&gt; by following &lt;a href=&quot;https://github.com/dom96/choosenim&quot;&gt;these instructions&lt;/a&gt; or you can install Nim by following the instructions on our &lt;a href=&quot;https://nim-lang.org/install.html&quot;&gt;install&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; state for strings/seqs is gone. Instead the default value for these is &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot; / @[]&lt;/code&gt;. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;--nilseqs:on&lt;/code&gt; for a transition period. This eliminates a large class of bugs that used to plague the average Nim code out there, including Nim’s standard library.&lt;/p&gt;
&lt;p&gt;Accessing the binary zero terminator in Nim’s native strings is now invalid. Internally a Nim string still has the trailing zero for zero-copy interoperability with &lt;code class=&quot;highlighter-rouge&quot;&gt;cstring&lt;/code&gt;. Compile your code with the new switch &lt;code class=&quot;highlighter-rouge&quot;&gt;--laxStrings:on&lt;/code&gt; if you need a transition period.&lt;/p&gt;
&lt;p&gt;These changes to strings and seqs give us more flexibility in how they are implemented and indeed alternative implementations are in development.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;experimental&lt;/code&gt; is now a pragma and a command line switch that can enable specific language extensions, it is not an all-or-nothing switch anymore. We think this leads to a more robust development process where it’s clearly documented which parts of Nim are bleeding edge and which parts can be relied upon.&lt;/p&gt;
&lt;p&gt;Other notable language additions:&lt;/p&gt;
&lt;ul readability=&quot;5.4295624332978&quot;&gt;&lt;li&gt;Dot calls combined with explicit generic instantiations can now be written as &lt;code class=&quot;highlighter-rouge&quot;&gt;x.y[:z]&lt;/code&gt; which is transformed into &lt;code class=&quot;highlighter-rouge&quot;&gt;y[z](x)&lt;/code&gt; by the parser.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func&lt;/code&gt; is now an alias for &lt;code class=&quot;highlighter-rouge&quot;&gt;proc {.noSideEffect.}&lt;/code&gt;.&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Anonymous tuples with a single element can now be written as &lt;code class=&quot;highlighter-rouge&quot;&gt;(1,)&lt;/code&gt; with a trailing comma.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.97183098591549&quot;&gt;
&lt;p&gt;In order to make &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loops and iterators more flexible to use Nim now supports so called “for-loop macros”. See the &lt;a href=&quot;https://nim-lang.org/docs/manual.html#macros-for-loop-macros&quot;&gt;manual&lt;/a&gt; for more details. This feature enables a Python-like generic &lt;code class=&quot;highlighter-rouge&quot;&gt;enumerate&lt;/code&gt; implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Case statements can now be rewritten via macros. See the &lt;a href=&quot;https://nim-lang.org/docs/manual.html#macros-case-statement-macros&quot;&gt;manual&lt;/a&gt; for more information. This feature enables custom pattern matching.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;The command syntax now supports keyword arguments after the first comma.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Thread-local variables can now be declared inside procs. This implies all the effects of the &lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt; pragma.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Nim now supports the &lt;code class=&quot;highlighter-rouge&quot;&gt;except&lt;/code&gt; clause in the &lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; statement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Range float types, example &lt;code class=&quot;highlighter-rouge&quot;&gt;range[0.0 .. Inf]&lt;/code&gt;. More details in language manual.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;breaking-changes-to-be-mindful-of&quot;&gt;Breaking changes to be mindful of&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;The default location of &lt;code class=&quot;highlighter-rouge&quot;&gt;nimcache&lt;/code&gt; for the native code targets was changed. Read &lt;a href=&quot;https://nim-lang.org/docs/nimc.html#generated-c-code-directory&quot;&gt;the compiler user guide&lt;/a&gt; for more information.&lt;/li&gt;
&lt;li&gt;Lots of deprecated symbols in the standard library that have been deprecated for quite some time now like &lt;code class=&quot;highlighter-rouge&quot;&gt;system.expr&lt;/code&gt; or the old type aliases starting with a &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; prefix have been removed.&lt;/li&gt;
&lt;li&gt;The exception hierarchy was slightly reworked, &lt;code class=&quot;highlighter-rouge&quot;&gt;SystemError&lt;/code&gt; was renamed to &lt;code class=&quot;highlighter-rouge&quot;&gt;CatchableError&lt;/code&gt; and is the new base class for any exception that is guaranteed to be catchable. This change should have minimal impact on most existing Nim code.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;async-improvements&quot;&gt;Async improvements&lt;/h2&gt;
&lt;p&gt;The “closure iterators” that Nim’s &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; macro is based on has been rewritten from the ground up and so &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; works completely with exception handling. Finally it is possible to use &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; in a &lt;code class=&quot;highlighter-rouge&quot;&gt;try&lt;/code&gt; statement!&lt;/p&gt;
&lt;h2 id=&quot;nimble-090&quot;&gt;Nimble 0.9.0&lt;/h2&gt;
&lt;p&gt;This release includes a brand new version of Nimble. The new version contains a breaking change which you should read up on if you own hybrid packages. There are also the usual bug fixes and this release contains a lot of them.&lt;/p&gt;
&lt;p&gt;For more information, see the &lt;a href=&quot;https://github.com/nim-lang/nimble/blob/master/changelog.markdown#090---19092018&quot;&gt;Nimble v0.9.0 changelog&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;contributors-to-v0190&quot;&gt;Contributors to v0.19.0&lt;/h2&gt;
&lt;p&gt;Our contributors are amazing, and there is &lt;a href=&quot;https://github.com/nim-lang/Nim/graphs/contributors&quot;&gt;far too many&lt;/a&gt; to list here. Big thanks to all of you, we couldn’t have pulled off this release without you!&lt;/p&gt;

&lt;h2 id=&quot;changes-affecting-backwards-compatibility&quot;&gt;Changes affecting backwards compatibility&lt;/h2&gt;
&lt;h3 id=&quot;breaking-changes-in-the-standard-library&quot;&gt;Breaking changes in the standard library&lt;/h3&gt;
&lt;ul readability=&quot;21.5&quot;&gt;&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;re.split&lt;/code&gt; for empty regular expressions now yields every character in the string which is what other programming languages chose to do.&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;The returned tuple of &lt;code class=&quot;highlighter-rouge&quot;&gt;system.instantiationInfo&lt;/code&gt; now has a third field containing the column of the instantiation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cookies.setCookie&lt;/code&gt; no longer assumes UTC for the expiration date.&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;strutils.formatEng&lt;/code&gt; does not distinguish between &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt; strings anymore for its &lt;code class=&quot;highlighter-rouge&quot;&gt;unit&lt;/code&gt; parameter. Instead the space is controlled by a new parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;useUnitSpace&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;times.parse&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;times.format&lt;/code&gt; procs have been rewritten. The proc signatures are the same so it should generally not break anything. However, the new implementation is a bit stricter, which is a breaking change. For example &lt;code class=&quot;highlighter-rouge&quot;&gt;parse(&quot;2017-01-01 foo&quot;, &quot;yyyy-MM-dd&quot;)&lt;/code&gt; will now raise an error.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;proc `-`*(a, b: Time): int64&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;times&lt;/code&gt; module has changed return type to &lt;code class=&quot;highlighter-rouge&quot;&gt;times.Duration&lt;/code&gt; in order to support higher time resolutions. The proc is no longer deprecated.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;times.Timezone&lt;/code&gt; is now an immutable ref-type that must be initialized with an explicit constructor (&lt;code class=&quot;highlighter-rouge&quot;&gt;newTimezone&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;posix.Timeval.tv_sec&lt;/code&gt; has changed type to &lt;code class=&quot;highlighter-rouge&quot;&gt;posix.Time&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;math.`mod`&lt;/code&gt; for floats now behaves the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;mod&lt;/code&gt; for integers (previously it used floor division like Python). Use &lt;code class=&quot;highlighter-rouge&quot;&gt;math.floorMod&lt;/code&gt; for the old behavior.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;For string inputs, &lt;code class=&quot;highlighter-rouge&quot;&gt;unicode.isUpper&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;unicode.isLower&lt;/code&gt; now require a second mandatory parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;skipNonAlpha&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;For string inputs, &lt;code class=&quot;highlighter-rouge&quot;&gt;strutils.isUpperAscii&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;strutils.isLowerAscii&lt;/code&gt; now require a second mandatory parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;skipNonAlpha&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;osLastError&lt;/code&gt; is now marked with &lt;code class=&quot;highlighter-rouge&quot;&gt;sideEffect&lt;/code&gt;&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;The procs &lt;code class=&quot;highlighter-rouge&quot;&gt;parseHexInt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;parseOctInt&lt;/code&gt; now fail on empty strings and strings containing only valid prefixes, e.g. “0x” for hex integers.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;terminal.setCursorPos&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;terminal.setCursorXPos&lt;/code&gt; now work correctly with 0-based coordinates on POSIX (previously, you needed to use 1-based coordinates on POSIX for correct behaviour; the Windows behaviour was always correct).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lineInfoObj&lt;/code&gt; now returns absolute path instead of project path. It’s used by &lt;code class=&quot;highlighter-rouge&quot;&gt;lineInfo&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;check&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt;, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;net.sendTo&lt;/code&gt; no longer returns an int and now raises an &lt;code class=&quot;highlighter-rouge&quot;&gt;OSError&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;threadpool&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; and derivatives have been renamed to &lt;code class=&quot;highlighter-rouge&quot;&gt;blockUntil&lt;/code&gt; to avoid confusions with &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; macro.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;library-additions&quot;&gt;Library additions&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;re.split&lt;/code&gt; now also supports the &lt;code class=&quot;highlighter-rouge&quot;&gt;maxsplit&lt;/code&gt; parameter for consistency with &lt;code class=&quot;highlighter-rouge&quot;&gt;strutils.split&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;highlighter-rouge&quot;&gt;system.toOpenArray&lt;/code&gt; in order to support zero-copy slicing operations. This is currently not yet available for the JavaScript target.&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;highlighter-rouge&quot;&gt;getCurrentDir&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;findExe&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cpDir&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mvDir&lt;/code&gt; procs to &lt;code class=&quot;highlighter-rouge&quot;&gt;nimscript&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;times&lt;/code&gt; module now supports up to nanosecond time resolution when available.&lt;/li&gt;
&lt;li&gt;Added the type &lt;code class=&quot;highlighter-rouge&quot;&gt;times.Duration&lt;/code&gt; for representing fixed durations of time.&lt;/li&gt;
&lt;li&gt;Added the proc &lt;code class=&quot;highlighter-rouge&quot;&gt;times.convert&lt;/code&gt; for converting between different time units, e.g days to seconds.&lt;/li&gt;
&lt;li&gt;Added the proc &lt;code class=&quot;highlighter-rouge&quot;&gt;algorithm.binarySearch[T, K]&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;cmp&lt;/code&gt; parameter.&lt;/li&gt;
&lt;li&gt;Added the proc &lt;code class=&quot;highlighter-rouge&quot;&gt;algorithm.upperBound&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added inverse hyperbolic functions, &lt;code class=&quot;highlighter-rouge&quot;&gt;math.arcsinh&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;math.arccosh&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;math.arctanh&lt;/code&gt; procs.&lt;/li&gt;
&lt;li&gt;Added cotangent, secant and cosecant procs &lt;code class=&quot;highlighter-rouge&quot;&gt;math.cot&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;math.sec&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;math.csc&lt;/code&gt;; and their hyperbolic, inverse and inverse hyperbolic functions, &lt;code class=&quot;highlighter-rouge&quot;&gt;math.coth&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;math.sech&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;math.csch&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;math.arccot&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;math.arcsec&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;math.arccsc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;math.arccoth&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;math.arcsech&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;math.arccsch&lt;/code&gt; procs.&lt;/li&gt;
&lt;li&gt;Added the procs &lt;code class=&quot;highlighter-rouge&quot;&gt;math.floorMod&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;math.floorDiv&lt;/code&gt; for floor based integer division.&lt;/li&gt;
&lt;li&gt;Added the procs &lt;code class=&quot;highlighter-rouge&quot;&gt;rationals.`div&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;rationals.&lt;/code&gt;mod```, &lt;code class=&quot;highlighter-rouge&quot;&gt;rationals.floorDiv&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;rationals.floorMod&lt;/code&gt; for rationals.&lt;/li&gt;
&lt;li&gt;Added the proc &lt;code class=&quot;highlighter-rouge&quot;&gt;math.prod&lt;/code&gt; for product of elements in an openArray.&lt;/li&gt;
&lt;li&gt;Added the proc &lt;code class=&quot;highlighter-rouge&quot;&gt;parseBinInt&lt;/code&gt; to parse a binary integer from a string, which returns the value.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parseOct&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;parseBin&lt;/code&gt; in parseutils now also support the &lt;code class=&quot;highlighter-rouge&quot;&gt;maxLen&lt;/code&gt; argument similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;parseHexInt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added the proc &lt;code class=&quot;highlighter-rouge&quot;&gt;flush&lt;/code&gt; for memory mapped files.&lt;/li&gt;
&lt;li&gt;Added the &lt;code class=&quot;highlighter-rouge&quot;&gt;MemMapFileStream&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added a simple interpreting event parser template &lt;code class=&quot;highlighter-rouge&quot;&gt;eventParser&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;pegs&lt;/code&gt; module.&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;highlighter-rouge&quot;&gt;macros.copyLineInfo&lt;/code&gt; to copy lineInfo from other node.&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;highlighter-rouge&quot;&gt;system.ashr&lt;/code&gt; an arithmetic right shift for integers.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;library-changes&quot;&gt;Library changes&lt;/h2&gt;
&lt;h2 id=&quot;language-additions&quot;&gt;Language additions&lt;/h2&gt;
&lt;ul readability=&quot;0.49361022364217&quot;&gt;&lt;li&gt;Dot calls combined with explicit generic instantiations can now be written as &lt;code class=&quot;highlighter-rouge&quot;&gt;x.y[:z]&lt;/code&gt; which is transformed into &lt;code class=&quot;highlighter-rouge&quot;&gt;y[z](x)&lt;/code&gt; by the parser.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func&lt;/code&gt; is now an alias for &lt;code class=&quot;highlighter-rouge&quot;&gt;proc {.noSideEffect.}&lt;/code&gt;.&lt;/li&gt;
&lt;li readability=&quot;0.97183098591549&quot;&gt;
&lt;p&gt;In order to make &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loops and iterators more flexible to use Nim now supports so called “for-loop macros”. See the &lt;a href=&quot;https://nim-lang.org/docs/manual.html#macros-for-loop-macros&quot;&gt;manual&lt;/a&gt; for more details. This feature enables a Python-like generic &lt;code class=&quot;highlighter-rouge&quot;&gt;enumerate&lt;/code&gt; implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Case statements can now be rewritten via macros. See the &lt;a href=&quot;https://nim-lang.org/docs/manual.html#macros-case-statement-macros&quot;&gt;manual&lt;/a&gt; for more information. This feature enables custom pattern matchers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;typedesc&lt;/code&gt; special type has been renamed to just &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; are now also modifiers similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ptr&lt;/code&gt;. They denote the special types &lt;code class=&quot;highlighter-rouge&quot;&gt;static[T]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;type[T]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Forcing compile-time evaluation with &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; now supports specifying the desired target type (as a concrete type or as a type class)&lt;/li&gt;
&lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; operator now supports checking that the supplied expression matches an expected type constraint.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;language-changes&quot;&gt;Language changes&lt;/h2&gt;
&lt;ul readability=&quot;10.5&quot;&gt;&lt;li&gt;Anonymous tuples with a single element can now be written as &lt;code class=&quot;highlighter-rouge&quot;&gt;(1,)&lt;/code&gt; with a trailing comma. The underlying AST is &lt;code class=&quot;highlighter-rouge&quot;&gt;nnkTupleConstr(newLit 1)&lt;/code&gt; for this example. &lt;code class=&quot;highlighter-rouge&quot;&gt;nnkTupleConstr&lt;/code&gt; is a new node kind your macros need to be able to deal with!&lt;/li&gt;
&lt;li&gt;Indexing into a &lt;code class=&quot;highlighter-rouge&quot;&gt;cstring&lt;/code&gt; for the JS target is now mapped to &lt;code class=&quot;highlighter-rouge&quot;&gt;charCodeAt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Assignments that would “slice” an object into its supertype are now prevented at runtime. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;ref object&lt;/code&gt; with inheritance rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; with inheritance to prevent this issue.&lt;/li&gt;
&lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;not nil&lt;/code&gt; type annotation now has to be enabled explicitly via &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.experimental:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&quot;notnil&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt; as we are still not pleased with how this feature works with Nim’s containers.&lt;/li&gt;
&lt;li&gt;The parser now warns about inconsistent spacing around binary operators as these can easily be confused with unary operators. This warning will likely become an error in the future.&lt;/li&gt;
&lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;'c&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;'C'&lt;/code&gt; suffix for octal literals is now deprecated to bring the language in line with the standard library (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;parseOct&lt;/code&gt;).&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;The dot style for import paths (e.g &lt;code class=&quot;highlighter-rouge&quot;&gt;import path.to.module&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;import path/to/module&lt;/code&gt;) has been deprecated.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;importcpp&lt;/code&gt; pragma now allows importing the listed fields of generic C++ types. Support for numeric parameters have also been added through the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;static[T]&lt;/code&gt; types. (#6415)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Native C++ exceptions can now be imported with &lt;code class=&quot;highlighter-rouge&quot;&gt;importcpp&lt;/code&gt; pragma. Imported exceptions can be raised and caught just like Nim exceptions. More details in language manual.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; for strings/seqs is finally gone. Instead the default value for these is &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot; / @[]&lt;/code&gt;. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;--nilseqs:on&lt;/code&gt; for a transition period.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Accessing the binary zero terminator in Nim’s native strings is now invalid. Internally a Nim string still has the trailing zero for zero-copy interoperability with &lt;code class=&quot;highlighter-rouge&quot;&gt;cstring&lt;/code&gt;. Compile your code with the new switch &lt;code class=&quot;highlighter-rouge&quot;&gt;--laxStrings:on&lt;/code&gt; if you need a transition period.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;The command syntax now supports keyword arguments after the first comma.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Thread-local variables can now be declared inside procs. This implies all the effects of the &lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt; pragma.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Nim now supports the &lt;code class=&quot;highlighter-rouge&quot;&gt;except&lt;/code&gt; clause in the export statement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Range checked floating point types, for example &lt;code class=&quot;highlighter-rouge&quot;&gt;range[0.0 .. Inf]&lt;/code&gt;, are now supported.&lt;/li&gt;
&lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.this.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; pragma has been deprecated. It never worked within generics and we found the resulting code harder to read than the more explicit &lt;code class=&quot;highlighter-rouge&quot;&gt;obj.field&lt;/code&gt; syntax.&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;“Memory regions” for pointer types have been deprecated, they were hardly used anywhere. Note that this has &lt;strong&gt;nothing&lt;/strong&gt; to do with the &lt;code class=&quot;highlighter-rouge&quot;&gt;--gc:regions&lt;/code&gt; switch of managing memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;The exception hierarchy was slightly reworked, &lt;code class=&quot;highlighter-rouge&quot;&gt;SystemError&lt;/code&gt; was renamed to &lt;code class=&quot;highlighter-rouge&quot;&gt;CatchableError&lt;/code&gt; and is the new base class for any exception that is guaranteed to be catchable. This change should have minimal impact on most existing Nim code.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;tool-changes&quot;&gt;Tool changes&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jsondoc2&lt;/code&gt; has been renamed &lt;code class=&quot;highlighter-rouge&quot;&gt;jsondoc&lt;/code&gt;, similar to how &lt;code class=&quot;highlighter-rouge&quot;&gt;doc2&lt;/code&gt; was renamed &lt;code class=&quot;highlighter-rouge&quot;&gt;doc&lt;/code&gt;. The old &lt;code class=&quot;highlighter-rouge&quot;&gt;jsondoc&lt;/code&gt; can still be invoked with &lt;code class=&quot;highlighter-rouge&quot;&gt;jsondoc0&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;compiler-changes&quot;&gt;Compiler changes&lt;/h3&gt;
&lt;ul readability=&quot;19.272450532725&quot;&gt;&lt;li&gt;The undocumented &lt;code class=&quot;highlighter-rouge&quot;&gt;#? braces&lt;/code&gt; parsing mode was removed.&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;The undocumented PHP backend was removed.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;The VM’s instruction count limit was raised to 3 million instructions in order to support more complex computations at compile-time.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Support for hot code reloading has been implemented for the JavaScript target. To use it, compile your code with &lt;code class=&quot;highlighter-rouge&quot;&gt;--hotCodeReloading:on&lt;/code&gt; and use a helper library such as LiveReload or BrowserSync.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;A new compiler option &lt;code class=&quot;highlighter-rouge&quot;&gt;--cppCompileToNamespace&lt;/code&gt; puts the generated C++ code into the namespace “Nim” in order to avoid naming conflicts with existing C++ code. This is done for all Nim code - internal and exported.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Added &lt;code class=&quot;highlighter-rouge&quot;&gt;macros.getProjectPath&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ospaths.putEnv&lt;/code&gt; procs to Nim’s virtual machine.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;deadCodeElim&lt;/code&gt; option is now always turned on and the switch has no effect anymore, but is recognized for backwards compatibility.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;experimental&lt;/code&gt; is now a pragma / command line switch that can enable specific language extensions, it is not an all-or-nothing switch anymore.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.75531914893617&quot;&gt;
&lt;p&gt;Nintendo Switch was added as a new platform target. See &lt;a href=&quot;https://nim-lang.org/docs/nimc.html&quot;&gt;the compiler user guide&lt;/a&gt; for more info.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;macros.bindSym now capable to accepts not only literal string or string constant expression. bindSym enhancement make it also can accepts computed string or ident node inside macros / compile time functions / static blocks. Only in templates / regular code it retains it’s old behavior. This new feature can be accessed via {.experimental: “dynamicBindSym”.} pragma/switch.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;On Posix systems the global system wide configuration is now put under &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nim/nim.cfg&lt;/code&gt;, it used to be &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nim.cfg&lt;/code&gt;. Usually it does not exist, however.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;On Posix systems the user configuration is now looked under &lt;code class=&quot;highlighter-rouge&quot;&gt;$XDG_CONFIG_HOME/nim/nim.cfg&lt;/code&gt; (if &lt;code class=&quot;highlighter-rouge&quot;&gt;XDG_CONFIG_HOME&lt;/code&gt; is not defined, then under &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.config/nim/nim.cfg&lt;/code&gt;). It used to be &lt;code class=&quot;highlighter-rouge&quot;&gt;$XDG_CONFIG_DIR/nim.cfg&lt;/code&gt; (and &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.config/nim.cfg&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Similarly, on Windows, the user configuration is now looked under &lt;code class=&quot;highlighter-rouge&quot;&gt;%APPDATA%/nim/nim.cfg&lt;/code&gt;. This used to be &lt;code class=&quot;highlighter-rouge&quot;&gt;%APPDATA%/nim.cfg&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;
&lt;ul readability=&quot;24.787235367372&quot;&gt;&lt;li readability=&quot;-0.94252873563218&quot;&gt;
&lt;p&gt;Fixed “constructor pragma leads to “Most Vexing Parse” in c++ code gen” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/6837&quot;&gt;#6837&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “[RFC] newFileStream(string, FileMode) returns nil” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/5588&quot;&gt;#5588&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Search feature doesn’t work on all docs pages “ (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7294&quot;&gt;#7294&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Wrong comparison with empty string in version 0.18” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7291&quot;&gt;#7291&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “doc2 css troubles” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/5293&quot;&gt;#5293&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “SIGSEGV when passing empty array to strutils format” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7293&quot;&gt;#7293&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “strip() weird behavior “ (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7159&quot;&gt;#7159&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “On Windows: When app type is GUI, error message can’t be seen, about missing DLL file or procedure” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7212&quot;&gt;#7212&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Compiler crash: multiple exception types with infix as” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7115&quot;&gt;#7115&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “C++ template object: Internal Error mangleRecFieldName” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/6415&quot;&gt;#6415&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Undefined Behavior when using const/let tables (Nim v0.18.1)” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7332&quot;&gt;#7332&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Codegen: forward type declarations can be used more aggressively” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7339&quot;&gt;#7339&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “asyncfile getFileSize issue in linux” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7347&quot;&gt;#7347&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Compiler manual is not that clear about int literal” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7304&quot;&gt;#7304&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Bad error message when writing to a data structure within read-only object” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7335&quot;&gt;#7335&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Compiler crash using @[int]” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7331&quot;&gt;#7331&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Redefinition of object in C when a proc with sink param is defined.” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7364&quot;&gt;#7364&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “[Regression] Missing type declarations in C code if members are used in {.emit.}” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7363&quot;&gt;#7363&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “(regression) dereferencing pointer to incomplete type” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7392&quot;&gt;#7392&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “In nested try statements finally is not executed” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7414&quot;&gt;#7414&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “json.to doesn’t work when Option[T] is inside an array” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7433&quot;&gt;#7433&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “https://nim-lang.org/docs/lib.html =&amp;gt; If you are reading this you are missing nimblepkglist.js…” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7400&quot;&gt;#7400&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “json.to and Option[T] fails on JNull in JSON list literal” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/6902&quot;&gt;#6902&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “inconsistent escaping of string literals” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7473&quot;&gt;#7473&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Fixed “streams.readLine(): string should raise IOError, but doesn’t” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/5281&quot;&gt;#5281&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “Duplicate definition in cpp codegen” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/6986&quot;&gt;#6986&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “error at compile-time when case branch has implicit return” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7407&quot;&gt;#7407&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Still some issues with Static[T]” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/6843&quot;&gt;#6843&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “[regression] compiler/nimeval &lt;code class=&quot;highlighter-rouge&quot;&gt;execute(&quot;echo 1&quot;)&lt;/code&gt; =&amp;gt; Error: cannot ‘importc’ variable at compile time” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7522&quot;&gt;#7522&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Too many digits from float32 to string” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7252&quot;&gt;#7252&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “SIGSEGV: Illegal storage access. (Attempt to read from nil?)” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7528&quot;&gt;#7528&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Catching C++ exceptions in Nim” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/3571&quot;&gt;#3571&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “[RFC] Naming convention for in-place mutating procs” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7551&quot;&gt;#7551&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Compiler SIGSEGV when trying to use invalid subrange type” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/6895&quot;&gt;#6895&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Internal error: invalid kind for first(tyTuple) with parallel block” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/2779&quot;&gt;#2779&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “type checking issue when using an empty sequence embedded in a table” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/3948&quot;&gt;#3948&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Deprecate &lt;code class=&quot;highlighter-rouge&quot;&gt;callsite&lt;/code&gt; builtin” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7369&quot;&gt;#7369&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;-0.90909090909091&quot;&gt;
&lt;p&gt;Fixed “JS codegen - indexing into cstring.” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/4470&quot;&gt;#4470&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “strutils.formatEng relies on a distinction of “” and nil string” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/6205&quot;&gt;#6205&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “timeToTimeInfo issue” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/3678&quot;&gt;#3678&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “checking object type for a pragma is not possible” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7451&quot;&gt;#7451&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;-0.94897959183673&quot;&gt;
&lt;p&gt;Fixed “nnkBracketExpr.newTree now returns tuple of NimNodes breaking newTree chaining” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7610&quot;&gt;#7610&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Fixed ““newNilLitNode” printed when some objects’ AST is dumped shold be “newNilLit”” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7595&quot;&gt;#7595&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “string.replace() should throw an error when used with an empty string” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7507&quot;&gt;#7507&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Threadpool &lt;code class=&quot;highlighter-rouge&quot;&gt;awaitAny()&lt;/code&gt; problem on macOS” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7638&quot;&gt;#7638&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “TLineInfo on windows 32bit” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7654&quot;&gt;#7654&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Object slicing can bite our arses” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7637&quot;&gt;#7637&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “A warning for unused but conflicting procs would be nice” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/6393&quot;&gt;#6393&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Using var return types will result in segfaults in some cases” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/5113&quot;&gt;#5113&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Borrowing for &lt;code class=&quot;highlighter-rouge&quot;&gt;var T&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;lent T&lt;/code&gt; to improve Nim’s memory safety” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7373&quot;&gt;#7373&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Documentation/implementation mismatch for –genScript flag” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/802&quot;&gt;#802&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “httpclient.generateHeaders() not setting Content-Length if body.len=0” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7680&quot;&gt;#7680&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “generic object descended from generic ref object sigmatch bug” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7600&quot;&gt;#7600&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “array construction of ptr generic object with subtype relation failed” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7601&quot;&gt;#7601&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “ambiguously typed/tuple combination with auto result type leads to a compile-time crash with SIGSEGV” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7663&quot;&gt;#7663&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “nim –linedir:on c file segfaults” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7730&quot;&gt;#7730&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;-0.91379310344828&quot;&gt;
&lt;p&gt;Fixed “Better compiler warning/error messages” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7749&quot;&gt;#7749&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.88095238095238&quot;&gt;
&lt;p&gt;Fixed “Issues with finish.exe” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7747&quot;&gt;#7747&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “changed “encodeUrl” in lib/pure/uri.nim.” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7700&quot;&gt;#7700&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Unexpected import required” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7738&quot;&gt;#7738&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Strange interaction of add for string without explicit initialization” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7766&quot;&gt;#7766&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Command invocation syntax doesn’t work with unary operators” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7582&quot;&gt;#7582&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Command invocation syntax doesn’t work with unary operators” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7582&quot;&gt;#7582&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “3x performance regression” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7743&quot;&gt;#7743&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “seq is still nil in compile time” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7774&quot;&gt;#7774&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Compiler segfault on sink proc for type with destructor under special condition” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7757&quot;&gt;#7757&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Windows getch() does not correctly account for control keys” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7764&quot;&gt;#7764&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “thread local variable &lt;code class=&quot;highlighter-rouge&quot;&gt;threadvar&lt;/code&gt; not working as expected (differs from C++ thread_local and D static)” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7565&quot;&gt;#7565&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Setting a timeout causes assertion failures in httpclient” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/2753&quot;&gt;#2753&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Can’t convert expression when surrounded with parens using %*” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7817&quot;&gt;#7817&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Line number missing in stdlib trace” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/6832&quot;&gt;#6832&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Filter skips lines with only single character” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7855&quot;&gt;#7855&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “[regression] nimscript.task crash the compiler” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7696&quot;&gt;#7696&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “IndexError in streams.readStr()” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7877&quot;&gt;#7877&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “IndexError in streams.readStr()” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7877&quot;&gt;#7877&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “generic “Error: cannot instantiate: ‘T’” with overload(regression)” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7883&quot;&gt;#7883&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “marshal.store generates invalid JSON” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7881&quot;&gt;#7881&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “inconsistent internal representation of generic objects array construction” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7818&quot;&gt;#7818&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “There’s no &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; for openArray” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7940&quot;&gt;#7940&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “array and openarray arg vs. ptr/ref generic polymorphic issue” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7906&quot;&gt;#7906&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Yield in try generate stack error “ (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7969&quot;&gt;#7969&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Bad codegen (runtime crash) when catching exceptions in a proc with no stack trace” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7982&quot;&gt;#7982&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; doesn’t work for CritBitTree[void]” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7987&quot;&gt;#7987&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Assertion at runtime with await and json.to()” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7985&quot;&gt;#7985&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “[critbits[int]] When using &lt;code class=&quot;highlighter-rouge&quot;&gt;inc&lt;/code&gt; to add new keys, only the first added key gets the value 1” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7990&quot;&gt;#7990&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Fixed “Error: obsolete usage of ‘defined’, use ‘declared’ instead” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7997&quot;&gt;#7997&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “C++ codegen: importcpp breaks for generic types.” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7653&quot;&gt;#7653&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Bad line info in async code” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/6803&quot;&gt;#6803&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “tmacrostmt immediate pragma cannot be removed” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/5930&quot;&gt;#5930&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “parseBinInt” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8018&quot;&gt;#8018&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “RFC: Import Module Namespaces” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7250&quot;&gt;#7250&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “All symbols in concepts should be open by default” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7222&quot;&gt;#7222&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “static[T] issue with default arguments” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/6928&quot;&gt;#6928&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Compiler crash when casting a proc with asm statement to a pointer” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8076&quot;&gt;#8076&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Fixed “[regression]: nim doc produces &amp;lt;.html&amp;gt; instead of &quot; ([#8097](https://github.com/nim-lang/Nim/issues/8097))&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “[Regression] times.format interferes with strformat” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8100&quot;&gt;#8100&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Regression: SIGSEGV caused by using &lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt; with string” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8129&quot;&gt;#8129&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “uninitialized procs variables are not nil at compile time” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/6689&quot;&gt;#6689&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;-0.9390243902439&quot;&gt;
&lt;p&gt;Fixed “unixToNativePath cause IndexError with Empty string or “.”” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8173&quot;&gt;#8173&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.94252873563218&quot;&gt;
&lt;p&gt;Fixed “Octal int literal behavior differs from &lt;code class=&quot;highlighter-rouge&quot;&gt;parseOct&lt;/code&gt; - change &lt;code class=&quot;highlighter-rouge&quot;&gt;parseOct&lt;/code&gt;?” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8082&quot;&gt;#8082&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Fixed “[travis] flaky test: “No output has been received” caused by no prompt on “already exists. Overwrite?” after &lt;code class=&quot;highlighter-rouge&quot;&gt;nimble install&lt;/code&gt;” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8227&quot;&gt;#8227&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “noSideEffect in os module” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/5880&quot;&gt;#5880&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “missing &lt;code class=&quot;highlighter-rouge&quot;&gt;ospaths.absolutePath&lt;/code&gt; function to get absolute path from a path” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8174&quot;&gt;#8174&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;-0.93827160493827&quot;&gt;
&lt;p&gt;Fixed “Render bug with prefix and implicit string/cstring conversion” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8287&quot;&gt;#8287&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “ospaths.isAbsolute: uncovering out of bound bugs after updating to 0.18.1 from 0.18.0: empty string and nil string now checked for out of bound errors” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8251&quot;&gt;#8251&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;Error: cannot 'importc' variable at compile time&lt;/code&gt; shows wrong context” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7405&quot;&gt;#7405&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “[regression] [times.format] Error: attempting to call undeclared routine: ‘format’” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8273&quot;&gt;#8273&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;htmlparser.untilElementEnd&lt;/code&gt; is not GC-safe” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8338&quot;&gt;#8338&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;nim check&lt;/code&gt; internal error” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8230&quot;&gt;#8230&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;nim doc&lt;/code&gt; fails when source file contains &lt;code class=&quot;highlighter-rouge&quot;&gt;doAssertRaises&lt;/code&gt; in isMainModule” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8223&quot;&gt;#8223&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Windows: can’t compile with var name “far”” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8345&quot;&gt;#8345&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Render bug: procs with single if statement get incorrent indentation” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8343&quot;&gt;#8343&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “json.nim macro &lt;code class=&quot;highlighter-rouge&quot;&gt;to&lt;/code&gt; does not support objects with distinct types” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8037&quot;&gt;#8037&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “macros.hasCustomPragma() crashes when working with variant fields” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8371&quot;&gt;#8371&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;-0.93827160493827&quot;&gt;
&lt;p&gt;Fixed “await inside stmtListExpr inside a case stmt crashes compiler” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8399&quot;&gt;#8399&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Fixed “[os] failed operations (eg existsOrCreateDir) should show runtime context (eg file/dir) it failed for” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8391&quot;&gt;#8391&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “[ospaths] ospaths.nim says OSX is FileSystemCaseSensitive:true but should be false ; cmpPaths seems wrong” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8349&quot;&gt;#8349&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;-0.9375&quot;&gt;
&lt;p&gt;Fixed “excessiveStackTrace:on shows non-absolute file in stacktrace” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7492&quot;&gt;#7492&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;nim doc foo&lt;/code&gt; generates stuff that should be under a .gitignore’d directory” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8323&quot;&gt;#8323&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “type mismatch shows wrong type for union types T1|T2|T3|T4: only keeps T1 or T2, discards rest” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8434&quot;&gt;#8434&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “devel branch encodings.convert broken on Windows” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8468&quot;&gt;#8468&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “–app:gui gives an error on osx.” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/2576&quot;&gt;#2576&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “non ordinal enums are not allowed in set constructor” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8425&quot;&gt;#8425&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “[nimweb] ./koch web -o:/tmp/d13/ =&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;o&lt;/code&gt; is actually unused and docs output dir hardcoded regardless of o” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8419&quot;&gt;#8419&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “seq/string initialized with &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;setLen&lt;/code&gt; being deallocated” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7833&quot;&gt;#7833&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “alloc fails after 4GB” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7894&quot;&gt;#7894&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “[feature request] macros.bindSym can accept computed string” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7827&quot;&gt;#7827&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “tfragment_alloc.nim (which allocates 4GB) often makes appveyor fail with out of memory” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8509&quot;&gt;#8509&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; not thread safe on windows, causing [appveyor] flaky test: Failure: reOutputsDiffer in tforstmt.nim” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8511&quot;&gt;#8511&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “./koch xz doesn’t check for dirty work tree” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7292&quot;&gt;#7292&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “non ordinal enums are not allowed in set constructor” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8425&quot;&gt;#8425&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “bad example in https://nim-lang.org/docs/docgen.html” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8215&quot;&gt;#8215&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Ability to set a NimNode’s lineinfo” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/5617&quot;&gt;#5617&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “winlean.nim has wrong definition for moveFileExA” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8421&quot;&gt;#8421&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “shr operator should keep the sign bit on signed types.” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/6255&quot;&gt;#6255&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “proposal (with implementation): &lt;code class=&quot;highlighter-rouge&quot;&gt;undistinct(T)&lt;/code&gt;” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8519&quot;&gt;#8519&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;-0.9468085106383&quot;&gt;
&lt;p&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;.cache/projectname&lt;/code&gt; pollutes &lt;code class=&quot;highlighter-rouge&quot;&gt;.cache&lt;/code&gt; - put in &lt;code class=&quot;highlighter-rouge&quot;&gt;.cache/Nim/projectname&lt;/code&gt; instead” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8599&quot;&gt;#8599&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “Iterating closure iterator in nested function is empty” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8550&quot;&gt;#8550&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “[TODO] [feature] Nim error messages should show line contents, would save lots of debugging time” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7586&quot;&gt;#7586&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Converter: {lit} parameter constraint is not respected in implicit conversion” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7520&quot;&gt;#7520&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;mapIt&lt;/code&gt; still can’t be used with &lt;code class=&quot;highlighter-rouge&quot;&gt;openArray&lt;/code&gt; even after #8543, #8567: fails during bootstrap” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8577&quot;&gt;#8577&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Config should be in its own directory” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8653&quot;&gt;#8653&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “sequtils.toSeq produces the sequence from the iterator twice if compiles(iter.len) == true” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7187&quot;&gt;#7187&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;-0.93506493506494&quot;&gt;
&lt;p&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; for Option[string] types should double-quote the output” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8658&quot;&gt;#8658&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “Config should be in its own directory” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8653&quot;&gt;#8653&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “[feature request] compile time check for experimental features” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8644&quot;&gt;#8644&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Changes in typedesc reforms” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8126&quot;&gt;#8126&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “json.% regression” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8716&quot;&gt;#8716&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;nim doc2 --project -o:doc/&lt;/code&gt; cannot find files in subdirectories” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8218&quot;&gt;#8218&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;-0.91525423728814&quot;&gt;
&lt;p&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;onFailedAssert&lt;/code&gt; does not affect &lt;code class=&quot;highlighter-rouge&quot;&gt;doAssert&lt;/code&gt;” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8719&quot;&gt;#8719&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “[travis] [async] flaky test: tests/async/t7758.nim” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8756&quot;&gt;#8756&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “float literals are treated differently between manual and compiler” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8766&quot;&gt;#8766&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Fixed “[cmdline] [minor] &lt;code class=&quot;highlighter-rouge&quot;&gt;--hint.foo:on&lt;/code&gt; as alias for &lt;code class=&quot;highlighter-rouge&quot;&gt;--hint[foo]:on&lt;/code&gt;: avoids edge cases with &lt;code class=&quot;highlighter-rouge&quot;&gt;[&lt;/code&gt; that needs to be escaped on cmd line + other places” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8739&quot;&gt;#8739&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “Duplicate member error for union types” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8781&quot;&gt;#8781&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “nim c compiler/nimblecmd.nim fails: Error: type mismatch: got &amp;lt;StringTableRef, string&amp;gt;” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8776&quot;&gt;#8776&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Compiler crash with $, converter and generics” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/4766&quot;&gt;#4766&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “[unidecode] Fix the &lt;code class=&quot;highlighter-rouge&quot;&gt;unidecode&lt;/code&gt; example” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8768&quot;&gt;#8768&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “[unidecode] Make &lt;code class=&quot;highlighter-rouge&quot;&gt;loadUnidecodeTable&lt;/code&gt; use the path to unicode.dat on user’s system by default” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8767&quot;&gt;#8767&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “marshal.load() regression?” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7854&quot;&gt;#7854&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “[unidecode] Fix the &lt;code class=&quot;highlighter-rouge&quot;&gt;unidecode&lt;/code&gt; example” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8768&quot;&gt;#8768&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Converter applied when it should not be” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8049&quot;&gt;#8049&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Fixed “Pure enums allow using the same name but allow nonqualification with quirky behaviour” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8066&quot;&gt;#8066&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “Correctly redirect stderr when using osproc’s posix_spawn backend” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8624&quot;&gt;#8624&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;errorStream&lt;/code&gt; doesn’t seem to work” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8442&quot;&gt;#8442&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Nested template: SIGSEGV at compile-time” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8052&quot;&gt;#8052&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;Error: undeclared identifier: '|'&lt;/code&gt; when using &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;runnableExamples:&lt;/code&gt;” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8694&quot;&gt;#8694&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “runnableExamples doesn’t work at module level” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8641&quot;&gt;#8641&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “[runnableExamples] &lt;code class=&quot;highlighter-rouge&quot;&gt;Hint: operation successful: runnableExamples&lt;/code&gt; even though operation failed: compile error is ignored” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8831&quot;&gt;#8831&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;runnableExamples&lt;/code&gt; don’t have own scope for imports” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7285&quot;&gt;#7285&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;nim check&lt;/code&gt; segfaults” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8028&quot;&gt;#8028&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “addQuoted gives unquoted result on cstring (works on string)” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8847&quot;&gt;#8847&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “[nimscript] exception handling broken: &lt;code class=&quot;highlighter-rouge&quot;&gt;except BaseClass&lt;/code&gt; doesn’t work” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8740&quot;&gt;#8740&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Unary &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; operator can’t be parsed” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8797&quot;&gt;#8797&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “system.on_raise works only for “single level”” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/1652&quot;&gt;#1652&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Final facelifiting nimrod -&amp;gt; nim” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/2032&quot;&gt;#2032&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “marshal: document usage of “to”” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/3150&quot;&gt;#3150&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Name conflict between template and proc parameter” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/4750&quot;&gt;#4750&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Operator overloading bug with unittest check macro” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/5252&quot;&gt;#5252&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “nim check crash due to typo” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/5745&quot;&gt;#5745&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Regression (?): ICE in transformImportAs” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8852&quot;&gt;#8852&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “generic match error” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/1156&quot;&gt;#1156&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Adding a mention of the &lt;code class=&quot;highlighter-rouge&quot;&gt;unsafeAddr&lt;/code&gt; operator to the Nim manual” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/5038&quot;&gt;#5038&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;using&lt;/code&gt; types should have higher precedence” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8565&quot;&gt;#8565&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Add noSignalHandler documentation and examples” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8224&quot;&gt;#8224&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;-d:identifier&lt;/code&gt; is case insensitive (not partially case insensitive)” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7506&quot;&gt;#7506&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “addQuitProc argument requires {.noconv.} not documented” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/5794&quot;&gt;#5794&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Compilation error does not point to the actual wrong parameter” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8043&quot;&gt;#8043&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Clean up examples” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7725&quot;&gt;#7725&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Documentation footer timestamp is not UTC” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7305&quot;&gt;#7305&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Regression: compiler stack overflow in transformIteratorBody/lowerStmtListExprs” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8851&quot;&gt;#8851&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “The &lt;code class=&quot;highlighter-rouge&quot;&gt;writeStackTrace&lt;/code&gt; proc listed twice in docs” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/3655&quot;&gt;#3655&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Error: unhandled exception: n.kind == nkStmtListExpr [AssertionError]” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8243&quot;&gt;#8243&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “The &lt;code class=&quot;highlighter-rouge&quot;&gt;writeStackTrace&lt;/code&gt; proc listed twice in docs” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/3655&quot;&gt;#3655&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;-0.9390243902439&quot;&gt;
&lt;p&gt;Fixed “Regression: stack trace line numbers are messed up for asserts” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8928&quot;&gt;#8928&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “Regression bug in lines()” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8961&quot;&gt;#8961&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;-0.91803278688525&quot;&gt;
&lt;p&gt;Fixed “Core dump for RTree module – regression” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8883&quot;&gt;#8883&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;system.cmp&lt;/code&gt; returns different results for string on different operating systems” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8930&quot;&gt;#8930&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;-0.92957746478873&quot;&gt;
&lt;p&gt;Fixed “scanf Invalid node kind nnkBracketExpr for macros.&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8925&quot;&gt;#8925&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “Regression bug in lines()” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8961&quot;&gt;#8961&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Typetraits arity: off-by-one for arrays” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8965&quot;&gt;#8965&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “&lt;code class=&quot;highlighter-rouge&quot;&gt;strutils.nim(1533, 29) Error: illegal conversion from '-1' to '[0..9223372036854775807]'&lt;/code&gt; with strutils.replace on empty string at CT” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8911&quot;&gt;#8911&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Iterators in combination with closures misbehave” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/3837&quot;&gt;#3837&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “procCall is not documented” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/4329&quot;&gt;#4329&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “scanf Invalid node kind nnkBracketExpr for macros.&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8925&quot;&gt;#8925&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Add exports section to documentation generator” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/1616&quot;&gt;#1616&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “Improve error message for redefinitions” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/447&quot;&gt;#447&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Fixed “[minor] operator symbols in anchor text disappear, causing anchor clashes” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/7500&quot;&gt;#7500&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fixed “Incorrect executable name of the C compiler when performing crosscompilation” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/8081&quot;&gt;#8081&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed “[ICE/regression] when proc with var return type interacting with method” (&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/9076&quot;&gt;#9076&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 27 Sep 2018 13:36:22 +0000</pubDate>
<dc:creator>bpierre</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://nim-lang.org/blog/2018/09/26/version-0190-released.html</dc:identifier>
</item>
<item>
<title>Tailwind: A Utility-First CSS Framework</title>
<link>https://tailwindcss.com/docs/what-is-tailwind/</link>
<guid isPermaLink="true" >https://tailwindcss.com/docs/what-is-tailwind/</guid>
<description>&lt;div class=&quot;mt-8 text-2xl text-grey-dark mb-8&quot; readability=&quot;32&quot;&gt;
&lt;p class=&quot;leading-tight&quot;&gt;Tailwind is a utility-first CSS framework for rapidly building custom user interfaces.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Tailwind is different from frameworks like Bootstrap, Foundation, or Bulma in that &lt;strong&gt;it's not a UI kit.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It doesn't have a default theme, and there are no built-in UI components.&lt;/p&gt;
&lt;p&gt;On the flip side, it also has no opinion about how your site should look and doesn't impose design decisions that you have to fight to undo.&lt;/p&gt;
&lt;p&gt;If you're looking for a framework that comes with a menu of predesigned widgets to build your site with, Tailwind might not be the right framework for you.&lt;/p&gt;
&lt;p&gt;But if you want a huge head start implementing a custom design with its own identity, Tailwind might be just what you're looking for.&lt;/p&gt;
&lt;h2&gt;Utility-first&lt;/h2&gt;
&lt;p&gt;Creating a framework for building custom UIs means you can't provide abstractions at the usual level of buttons, forms, cards, navbars, etc.&lt;/p&gt;
&lt;p&gt;Instead, Tailwind provides highly composable, low-level &lt;em&gt;utility classes&lt;/em&gt; that make it easy to build complex user interfaces &lt;strong&gt;without encouraging any two sites to look the same.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here's an example of a responsive contact card component built with Tailwind without writing a single line of CSS:&lt;/p&gt;
&lt;div class=&quot;rounded overflow-hidden border border-grey-light mb-8 bg-white&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;border-b border-grey-light p-4 bg-grey-lighter py-8&quot;&gt;
&lt;div class=&quot;bg-white mx-auto max-w-sm shadow-lg rounded-lg overflow-hidden&quot;&gt;
&lt;div class=&quot;sm:flex sm:items-center px-6 py-4&quot;&gt;&lt;img class=&quot;block h-16 sm:h-24 rounded-full mx-auto mb-4 sm:mb-0 sm:mr-4 sm:ml-0&quot; src=&quot;https://avatars2.githubusercontent.com/u/4323180?s=400&amp;amp;u=4962a4441fae9fba5f0f86456c6c506a21ffca4f&amp;amp;v=4&quot; alt=&quot;&quot;/&gt;&lt;div class=&quot;text-center sm:text-left sm:flex-grow&quot; readability=&quot;31&quot;&gt;
&lt;div class=&quot;mb-4&quot; readability=&quot;7&quot;&gt;
&lt;p class=&quot;text-xl leading-tight&quot;&gt;Adam Wathan&lt;/p&gt;
&lt;p class=&quot;text-sm leading-tight text-grey-dark&quot;&gt;Developer at NothingWorks Inc.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;button class=&quot;text-xs font-semibold rounded-full px-4 py-1 leading-normal bg-white border border-purple text-purple hover:bg-purple hover:text-white&quot;&gt;Message&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;p-4 bg-grey-lightest&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;language-html&quot;&gt;
&lt;code&gt;&amp;lt;div class=&quot;bg-white mx-auto max-w-sm shadow-lg rounded-lg overflow-hidden&quot;&amp;gt;
  &amp;lt;div class=&quot;sm:flex sm:items-center px-6 py-4&quot;&amp;gt;
    &amp;lt;img class=&quot;block h-16 sm:h-24 rounded-full mx-auto mb-4 sm:mb-0 sm:mr-4 sm:ml-0&quot; src=&quot;https://avatars2.githubusercontent.com/u/4323180?s=400&amp;amp;u=4962a4441fae9fba5f0f86456c6c506a21ffca4f&amp;amp;v=4&quot; alt=&quot;&quot;&amp;gt;
    &amp;lt;div class=&quot;text-center sm:text-left sm:flex-grow&quot;&amp;gt;
      &amp;lt;div class=&quot;mb-4&quot;&amp;gt;
        &amp;lt;p class=&quot;text-xl leading-tight&quot;&amp;gt;Adam Wathan&amp;lt;/p&amp;gt;
        &amp;lt;p class=&quot;text-sm leading-tight text-grey-dark&quot;&amp;gt;Developer at NothingWorks Inc.&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;
        &amp;lt;button class=&quot;text-xs font-semibold rounded-full px-4 py-1 leading-normal bg-white border border-purple text-purple hover:bg-purple hover:text-white&quot;&amp;gt;Message&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Component-friendly&lt;/h2&gt;
&lt;p&gt;While you can do a &lt;em&gt;lot&lt;/em&gt; with just utility classes, sometimes a component class is the right decision.&lt;/p&gt;
&lt;p&gt;Tailwind provides tools for &lt;a href=&quot;https://tailwindcss.com/docs/extracting-components&quot;&gt;extracting component classes&lt;/a&gt; from repeated utility patterns, making it easy to update multiple instances of a component from one place:&lt;/p&gt;
&lt;div class=&quot;rounded overflow-hidden border border-grey-light mb-8 bg-white&quot; readability=&quot;7.5&quot;&gt;
&lt;p&gt;&lt;button class=&quot;bg-blue hover:bg-blue-dark text-white font-bold py-2 px-4 rounded&quot;&gt;Button&lt;/button&gt;&lt;/p&gt;
&lt;div class=&quot;p-4 bg-grey-lightest&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;language-html&quot;&gt;
&lt;code&gt;&amp;lt;!-- Using utilities: --&amp;gt;
&amp;lt;button class=&quot;bg-blue hover:bg-blue-dark text-white font-bold py-2 px-4 rounded&quot;&amp;gt;
  Button
&amp;lt;/button&amp;gt;

&amp;lt;!-- Extracting component classes: --&amp;gt;
&amp;lt;button class=&quot;btn btn-blue&quot;&amp;gt;
  Button
&amp;lt;/button&amp;gt;

&amp;lt;style&amp;gt;
  .btn {
    @apply .font-bold .py-2 .px-4 .rounded;
  }
  .btn-blue {
    @apply .bg-blue .text-white;
  }
  .btn-blue:hover {
    @apply .bg-blue-dark;
  }
&amp;lt;/style&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Responsive to the core&lt;/h2&gt;
&lt;p&gt;Every Tailwind utility also comes in responsive flavors, making it extremely easy to build responsive interfaces without ever leaving your HTML.&lt;/p&gt;
&lt;p&gt;Tailwind uses an intuitive &lt;code&gt;{screen}:&lt;/code&gt; prefix that makes it easy to notice responsive classes in your markup while keeping the original class name recognizable and intact.&lt;/p&gt;

&lt;h2&gt;Designed to be customized&lt;/h2&gt;
&lt;p&gt;If it makes sense to be customizable, Tailwind lets you customize it.&lt;/p&gt;
&lt;p&gt;This includes colors, border sizes, font weights, spacing utilities, breakpoints, shadows, and tons more.&lt;/p&gt;
&lt;p&gt;Tailwind is written in &lt;a href=&quot;http://postcss.org/&quot;&gt;PostCSS&lt;/a&gt; and configured in JavaScript, which means you have the full power of a real programming language at your fingertips.&lt;/p&gt;
&lt;p&gt;Tailwind is more than a CSS framework, &lt;em&gt;it's an engine for creating design systems.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;const colorPalette = {
  // ...
  'grey-lighter': '#f3f7f9',
  // ...
}

module.exports = {
  // ...
  backgroundColors: colorPalette,
  borderColors: {
    default: colorPalette['grey-lighter'],
    ...colorPalette,
  },
  // ...
}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Thu, 27 Sep 2018 13:04:23 +0000</pubDate>
<dc:creator>Ethan_Mick</dc:creator>
<og:url>https://tailwindcss.com/</og:url>
<og:type>article</og:type>
<og:title>What is Tailwind? - Tailwind CSS</og:title>
<og:description>Documentation for the Tailwind CSS framework.</og:description>
<og:image>https://tailwindcss.com/img/twitter-card.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://tailwindcss.com/docs/what-is-tailwind/</dc:identifier>
</item>
<item>
<title>Linus Torvalds: &amp;#039;I&amp;#039;ll never be cuddly but I can be more polite&amp;#039;</title>
<link>https://www.bbc.co.uk/news/technology-45664640</link>
<guid isPermaLink="true" >https://www.bbc.co.uk/news/technology-45664640</guid>
<description>&lt;figure class=&quot;media-landscape has-caption full-width lead&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                &lt;img class=&quot;js-image-replace&quot; alt=&quot;Linus Torvalds&quot; src=&quot;https://ichef.bbci.co.uk/news/320/cpsprodpb/C670/production/_103600805_linustorvalds.gif&quot; width=&quot;976&quot; height=&quot;549&quot;/&gt;&lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Getty Images&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Mr Torvalds has a reputation for sending rude emails to fellow developers
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;story-body__introduction&quot;&gt;Linux founder Linus Torvalds has told the BBC that he is seeking professional help to become more empathetic towards fellow developers, but admits he may have to &quot;fake it until I make it&quot;.&lt;/p&gt;&lt;p&gt;Mr Torvalds stepped back from his role heading the organisation, following accusations of bullying and rudeness.&lt;/p&gt;&lt;p&gt;He admitted to bad behaviour but added that the Linux community also has to look at the way it conducts itself.&lt;/p&gt;&lt;p&gt;He told the BBC parts of it had become &quot;a morass of nastiness&quot;.&lt;/p&gt;&lt;p&gt;Mr Torvalds developed the first version of the Linux operating system while studying at the University of Helsinki, Finland in 1991.&lt;/p&gt;&lt;p&gt;He has always had a reputation as someone who provides blunt feedback to engineers, with expletive-laden emails, once describing an Intel fix as &quot;complete and utter garbage&quot;.&lt;/p&gt;&lt;p&gt;In a TED (Technology, Entertainment, Design) Talk in 2016, &lt;a href=&quot;https://www.bbc.co.uk/news/technology-35599774&quot; class=&quot;story-body__link&quot;&gt;he spoke openly about how even as a child he was not a &quot;people person&quot;.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The Linux kernel - the code that lets software and hardware work together - has since been through many revisions and now powers many of the world's web servers, including those of Google, PayPal, Amazon and eBay. It is also behind the two billion mobile phones using Android.&lt;/p&gt;&lt;p&gt;Mr Torvalds oversees every line of code added to the kernel, but in recent years the male-dominated community has become increasingly divided.&lt;/p&gt;&lt;p&gt;Rows about sexism and rudeness led to the creation of a Code of Conflict (CoC) in 2015 which was short - simply recommending people &quot;be excellent to each other&quot;.&lt;/p&gt;&lt;p&gt;That has now been replaced by a more detailed Code of Conduct - which retains the acronym, but attempts to be more inclusive and eliminate insulting and derogatory comments and behaviour.&lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Getty Images&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Mr Torvalds has made no secret of the fact that he prefers technology to people
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;In an exclusive email to the BBC, Mr Torvalds shared his thoughts on his decision to temporarily step aside, the controversy behind the CoC, and the defects of the community he set up. &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&quot;So I've obviously long been on record as wanting to deal with the technical side, and not really wanting to get involved in most other discussions.&lt;/p&gt;&lt;p&gt;&quot;Because technology is what I have always found interesting. People? Not my forte. Never has been, clearly. If you watched that TED talk, you'll know I wasn't a people person even as a child.&lt;/p&gt;&lt;p&gt;&quot;And if you have read any of the recent stories, you will now know at least one other reason why I've wanted to stay away from that whole discussion. Because it's not just my lack of people skills. It's the discussions themselves.&lt;/p&gt;&lt;p&gt;&quot;The advantage of concentrating on technology is that you can have some mostly objective measures, and some basis for agreement, and you can have a very nice and healthy community around it all. I really am motivated by the technology, but the community around Linux has been a big positive too.&lt;/p&gt;&lt;p&gt;&quot;But there are very tangible and immediate common goals in any technical project like Linux, and while there is occasionally disagreement about how to solve some particular issue, there is a very real cohesive force in that common goal of improving the project. &lt;/p&gt;&lt;p&gt;&quot;And even when there are disagreements, people in the end often have fairly clear and objective measures of what is better. Code that is faster, simpler, or handles more cases naturally is just objectively 'better', without people really having to argue too much about it.&lt;/p&gt;&lt;p&gt;&quot;In contrast, the arguments about behaviour never seem to end up having a common goal. Except, in some sense, the argument itself.&lt;/p&gt;&lt;p&gt;&quot;Have you read the Twitter feeds and other things by the people who seem to care more about the non-technical side? I think your 'hyped stories' is about as polite as you can put it. It's a morass of nastiness. Instead of a 'common goal', you end up with horrible fighting between different 'in-groups'.&lt;/p&gt;&lt;p&gt;&quot;It's very polarising, and both sides love egging the other side on. It's not even a 'discussion', it's just people shouting at each other.&lt;/p&gt;&lt;p&gt;&quot;That's actually the reason I for the longest time did not want to be involved with the whole CoC discussion in the first place. That whole subject seems to very easily just devolve and become unproductive. And I found a lot of the people who pushed for a CoC and criticised me for cursing to be hypocritical and pointless. I could easily point you to various tweet storms by people who criticise my 'white cis male' behaviour, while at the same time cursing more than I ever do.&lt;/p&gt;&lt;p&gt;&quot;So that's my excuse for dismissing a lot of the politically correct concerns for years. I felt it wasn't worth it. Anybody who uses the words 'white cis male privilege' was simply not worth my time even talking to, I felt.&lt;/p&gt;&lt;p&gt;&quot;And I'm still not apologising for my gender or the colour of my skin, or the fact that I happen to have the common sexual orientation.&lt;/p&gt;&lt;p&gt;&quot;What changed? Maybe it was me, but I was also made very aware of some of the behaviour of the 'other' side in the discussion.&lt;/p&gt;&lt;p&gt;&quot;Because I may have my reservations about excessive political correctness, but honestly, I absolutely do not want to be seen as being in the same camp as the low-life scum on the internet that think it's OK to be a white nationalist Nazi, and have some truly nasty misogynistic, homophobic or transphobic behaviour. And those people were complaining about too much political correctness too, and in the process just making my public stance look bad.&lt;/p&gt;&lt;p&gt;&quot;And don't get me wrong, please - I'm not making excuses for some of my own rather strong language. But I do claim that it never ever was any of that kind of nastiness. I got upset with bad code, and people who made excuses for it, and used some pretty strong language in the process. Not good behaviour, but not the racist/etc claptrap some people spout.&lt;/p&gt;&lt;p&gt;&quot;So in the end, my 'I really don't want to be too PC' stance simply became untenable. Partly because you definitely can find some emails from me that were simply completely unacceptable, and I need to fix that going forward. But to a large degree also because I don't want to be associated with a lot of the people who complain about excessive political correctness.&lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Getty Images&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Mr Torvalds doubts he will ever be cuddly but can improve the way he handles people
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&quot;Am I turning into some cuddly people person? I'll admit that sounds very unlikely. I still care about the technology, and I'm still not exactly the most empathetic person. But I'm hoping I can at least 'fake it until I make it'. Part of that 'faking it' is definitely going to be a filter on my outgoing emails, but as mentioned, I'm actively also trying to find a professional therapist to talk to as well.&lt;/p&gt;&lt;p&gt;&quot;Will everybody be happy? No. People who don't like my blunt behaviour even when I'm not being actively nasty about it will just see that as 'look, nothing changed'. I'm trying to get rid of my outbursts, and be more polite about things, but technically wrong is still technically wrong, and I won't start accepting bad code just to make people feel better about themselves.&lt;/p&gt;&lt;p&gt;&quot;But if people at least realise that I'm not part of the disgusting underbelly of the internet that thinks it's OK to show the kind of behaviour you will find if you really have been reading up on the 'discussions' about the code of conduct, then even that will be a really good thing.&lt;/p&gt;&lt;p&gt;&quot;And again - the above is just my explanation of why I applied the CoC even if there is obviously discussion about it. We will have the maintainer summit in Edinburgh next month, and we'll talk about this issue a lot more. &lt;/p&gt;&lt;p&gt;&quot;In the meantime, I'm taking a break from the kernel and probably shouldn't talk to journalists.&quot;&lt;/p&gt;
            </description>
<pubDate>Thu, 27 Sep 2018 12:40:08 +0000</pubDate>
<dc:creator>Flenser</dc:creator>
<og:title>Linus Torvalds: I'm trying to be polite</og:title>
<og:type>article</og:type>
<og:description>In an exclusive conversation with the BBC, the Linux founder opens up.</og:description>
<og:url>https://www.bbc.com/news/technology-45664640</og:url>
<og:image>https://ichef.bbci.co.uk/news/1024/branded_news/C670/production/_103600805_linustorvalds.gif</og:image>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bbc.co.uk/news/technology-45664640</dc:identifier>
</item>
<item>
<title>Hayabusa 2 rovers send new images from Ryugu surface</title>
<link>https://www.bbc.co.uk/news/science-environment-45667350</link>
<guid isPermaLink="true" >https://www.bbc.co.uk/news/science-environment-45667350</guid>
<description>&lt;figure class=&quot;media-landscape no-caption full-width lead&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                &lt;img class=&quot;js-image-replace&quot; alt=&quot;Ryugu&quot; src=&quot;https://ichef.bbci.co.uk/news/320/cpsprodpb/10D88/production/_103600096_mediaitem103600095.jpg&quot; width=&quot;976&quot; height=&quot;720&quot;/&gt;&lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Jaxa&lt;/span&gt;
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;p class=&quot;story-body__introduction&quot;&gt;Japan's space agency (Jaxa) has released new images from the robot rovers it has deployed to the surface of an asteroid.&lt;/p&gt;&lt;p&gt;The photos reveal new details of the surface of the space rock, which is known as Ryugu.&lt;/p&gt;&lt;p&gt;On 21 September, the rovers were released on to the surface by the &quot;mothership&quot;, Hayabusa 2.&lt;/p&gt;&lt;p&gt;Hayabusa 2 reached Ryugu in June after a three-and-a-half-year journey.&lt;/p&gt;&lt;p&gt;The pictures show in clear relief the rugged, boulder-strewn landscape of this striking Solar System body.&lt;/p&gt;&lt;p&gt;The robots, known as Rover 1A and Rover 1B, are now both confirmed to be working on the surface of the space rock.&lt;/p&gt;&lt;p&gt;The 1kg autonomous rovers move about by hopping, using the asteroid's low gravity. Each one contains a motor-powered internal mass that rotates to generate force, propelling the robot across the surface.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.bbc.co.uk/news/science-environment-45598156&quot; class=&quot;story-body__link&quot;&gt;Japan's rovers send pictures from asteroid&lt;/a&gt;&lt;/p&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Jaxa&lt;/span&gt;
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Jaxa&lt;/span&gt;
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;p&gt;Rover 1B also sent back the first video footage from the surface of an asteroid.&lt;/p&gt;&lt;p&gt;On Friday, Hayabusa 2 descended to about 60m in order to release the rovers, which had been stored in a container on the base of the spacecraft.&lt;/p&gt;&lt;p&gt;One of the principal concerns for deployment was Ryugu's rougher-than-expected surface, which is carpeted with boulders and has very few smooth patches.&lt;/p&gt;&lt;p&gt;The 1kg rovers are equipped with wide-angle and stereo cameras to send back pictures. Spine-like projections from the edges of the hoppers are sensors that will measure surface temperatures on the asteroid.&lt;/p&gt;&lt;p&gt;The 900m-wide space rock known formally as 162173 Ryugu belongs to a particularly primitive type of asteroid. &lt;/p&gt;&lt;p&gt;It is thought to be a relic left over from the early days of our Solar System, so studying it could shed light on the origin and evolution of our own planet.&lt;/p&gt;&lt;p&gt;Follow Paul &lt;a href=&quot;http://twitter.com/rincon_p&quot; class=&quot;story-body__link-external&quot;&gt;on Twitter.&lt;/a&gt;&lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Twitter/HAYABUSA2@JAXA&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    This photo was released by Jaxa on Saturday, after the rovers had touched down
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;JAXA&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    The Minerva II-1 rovers move by hopping around in Ryugu's low gravity
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;</description>
<pubDate>Thu, 27 Sep 2018 12:28:13 +0000</pubDate>
<dc:creator>DanBC</dc:creator>
<og:title>New asteroid rover images released</og:title>
<og:type>article</og:type>
<og:description>Japan has released new images from the robot rovers it has deployed to the surface of an asteroid.</og:description>
<og:url>https://www.bbc.com/news/science-environment-45667350</og:url>
<og:image>https://ichef.bbci.co.uk/news/1024/branded_news/10D88/production/_103600096_mediaitem103600095.jpg</og:image>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bbc.co.uk/news/science-environment-45667350</dc:identifier>
</item>
<item>
<title>Introducing Cloudflare Registrar</title>
<link>https://blog.cloudflare.com/cloudflare-registrar/</link>
<guid isPermaLink="true" >https://blog.cloudflare.com/cloudflare-registrar/</guid>
<description>&lt;img src=&quot;https://blog.cloudflare.com/content/images/2018/09/registrar-hmc@2x-1.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;“I love my domain registrar.” Has anyone ever said this? From before Cloudflare even launched in September 2010, our early beta customers were literally begging us: &quot;Will you please launch a registrar too?!&quot; Today we're doing just that, launching the first registrar we hope you’ll be able to say you love. It's built around three principles: trust, security, and always-fair pricing. And it’s available to all Cloudflare customers.&lt;/p&gt;&lt;h3 id=&quot;needing-secure-domain-registration-ourselves&quot;&gt;Needing Secure Domain Registration Ourselves&lt;/h3&gt;
&lt;p&gt;Cloudflare has actually run a registrar for some time. Like many of our best products, it started by solving an internal issue we had. Cloudflare has several mission-critical domains. If the registration of these domains were ever compromised, it would be, in a word, bad.&lt;/p&gt;
&lt;p&gt;For years, we worked with our original domain registrar to ensure these domains were as locked down as possible. Unfortunately, in 2013, a hacker was able to compromise several of the systems of the registrar we used and come perilously close to taking over some of our domains.&lt;/p&gt;
&lt;p&gt;That began a process of us looking for a better registrar. Unfortunately, even the registrars that charge hefty premiums and promise to be very secure turn out to have pretty lousy security. We ultimately decided the only way to get the level of security we needed was to build a registrar ourselves.&lt;/p&gt;
&lt;h3 id=&quot;custom-domain-protection-for-the-ultra-high-end&quot;&gt;Custom Domain Protection for the Ultra High End&lt;/h3&gt;
&lt;p&gt;A handful of our customers noticed we had our own registrar and asked us about it. Those conversations turned into our Enterprise Registrar product with Custom Domain Protection for our most security-conscious clients. Every client using Custom Domain Protection defines their own process for updating records. For instance, if a Custom Domain Protection client wants us to not change their DNS records unless 6 different individuals call us, in order, from a set of predefined phone numbers, each reading multiple unique pass codes, and telling us their favorite ice cream flavor, on a Tuesday that is also a full moon, we will enforce that. Literally.&lt;/p&gt;
&lt;img src=&quot;https://blog.cloudflare.com/content/images/2018/09/custom-control@2x.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;That, obviously, doesn't scale. As a result, we charge a significant premium for our Custom Domain Protection product. (If you're interested you can learn more about it &lt;a href=&quot;https://www.cloudflare.com/products/registrar/custom-domain-protection&quot;&gt;here&lt;/a&gt;.) Running that, however, has helped us define a set of best practices that we think every registrar should follow. And that got us thinking: can we build a better registrar for everyone?&lt;/p&gt;
&lt;h3 id=&quot;what-consumers-hate-about-their-current-registrar&quot;&gt;What Consumers Hate About Their Current Registrar&lt;/h3&gt;
&lt;p&gt;With a good idea on how to build a more secure registrar we asked our customers what they hated about their current registrar. Two phrases kept coming up: &quot;bait and switch&quot; and “endless upsell.” If you've ever registered a domain, you know the drill. You get a discounted price when you first register, but with each renewal the price soars. In the best cases we've found, it's around two times the original offer. In the worst, it's more than twenty times. It's gross. That’s in addition to the constant upsells for other products that either should be included for free (for example, DNSSEC) or that you just don’t want (for example, worthless trusted site seals).&lt;/p&gt;
&lt;img src=&quot;https://blog.cloudflare.com/content/images/2018/09/registrar-hidden-fees@2x.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;The thing is, registering a domain is a commodity. There's no meaningful difference between any of the existing mass market registrars. Each top level domain registry (TLDs like .com .org .info .io, etc) sets a wholesale price for registering a domain under them. These prices are known and remain relatively consistent over time. All the registrar does is record you as the owner of a particular domain. That just involves sending some commands to an API. In other words, domain registrars are charging you for being a middle-man and delivering essentially no value to justify their markup. The more we looked at it, the more crazy the whole market looked to us.&lt;/p&gt;
&lt;h3 id=&quot;learning-from-making-ssl-free&quot;&gt;Learning from Making SSL Free&lt;/h3&gt;
&lt;p&gt;The last time we saw a market as messed up as this was when we looked into the market for SSL certificates. Back in 2014, we decided it was crazy that people should have to pay to be encrypted online. During our Birthday Week celebrations that year, we became one of the first services to say that you should get encryption at no extra cost, even on our free plan. Since then there's been an encryption revolution and we're proud that nearly all forward-thinking services offer SSL for free. If some service you're using still charges you extra to support encryption they’re ripping you off.&lt;/p&gt;
&lt;p&gt;Granted, the economics of registering a domain are a bit different, but only a bit. TLDs need to do some work to make sure no two people register the same domain. And it makes sense for there to be some cost to keep someone from just registering every possible combination of characters. But why should registrars charge any markup over what the TLDs charge? That seemed as nutty to us as certificate authorities charging to run a bit of math. When we see a broken market on the Internet we like to do something about it.&lt;/p&gt;
&lt;h3 id=&quot;the-cloudflare-registrar-promise&quot;&gt;The Cloudflare Registrar Promise&lt;/h3&gt;
&lt;p&gt;Today, on Cloudflare’s 8th birthday, we’re giving all our customers a present: a registrar they can love.&lt;/p&gt;
&lt;p&gt;Here's the promise of the Cloudflare Registrar: we'll follow the best possible security practices and offer you the best possible price. What do we mean by that? From the security side, we promise we'll allow you to enable two-factor authentication, we’ll lock your domain registration by default, and automatically enable best-practice security services like DNSSEC.&lt;/p&gt;
&lt;p&gt;From the price side it’s even simpler: &lt;strong&gt;we promise to never charge you anything more than the wholesale price each TLD charges&lt;/strong&gt;. That’s true the first year and it’s true every subsequent year. If you register your domain with Cloudflare Registrar you’ll always pay the wholesale price with no markup.&lt;/p&gt;
&lt;img src=&quot;https://blog.cloudflare.com/content/images/2018/09/a-ribbon-of-security-@2x.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;For instance, Verisign, which administers the .com TLD, currently charges $7.85 per year to register a .com domain. ICANN imposes a $0.18 per year fee on top of that for every domain registered. Today, if you transfer your .com domain to Cloudflare, that's what we'll charge you per year: $8.03/year. No markup. All we're doing is pinging an API, there's no incremental cost to us, so why should you have to pay more than wholesale?&lt;/p&gt;
&lt;img src=&quot;https://blog.cloudflare.com/content/images/2018/09/registrar-pricing-.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;You may be able to find a cheaper price somewhere else under some promotion. But, ultimately, there's a wholesale price that the other registrar must cover so inevitably you know there's going to be a bait and switch — with the price getting jacked up in the future — along with endless upsells.&lt;/p&gt;
&lt;p&gt;Cloudflare Registrar will also be offering personal data redaction on WHOIS, that meets current ICANN &lt;a href=&quot;https://www.icann.org/resources/pages/gtld-registration-data-specs-en&quot;&gt;guidelines&lt;/a&gt;, for free. Broadcasting the registrant contact information, via the WHOIS service, can invite mountains of spam to your personal addresses. Like your domain, your privacy should not come at a markup.&lt;/p&gt;
&lt;h3 id=&quot;rolling-out-cloudflare-registrar&quot;&gt;Rolling Out Cloudflare Registrar&lt;/h3&gt;
&lt;p&gt;You can't actually register a new domain with the Cloudflare Registrar. Not yet. Today, the service is restricted to existing Cloudflare customers transferring their existing domains to us. If you’ve had trouble transferring domains before, just wait: we’ve made the process extremely smooth and easy.&lt;/p&gt;
&lt;img src=&quot;https://blog.cloudflare.com/content/images/2018/09/Cloudflare-Registrar5.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;We anticipate there's going to be quite a bit of demand, so we’ll be rolling invitations out slowly to make sure we provide a terrific transition experience. To claim your place in line, you need to be a Cloudflare customer and &lt;a href=&quot;https://dash.cloudflare.com/domains&quot;&gt;sign up for Early Access&lt;/a&gt;. Invitations will then go out over the next few weeks based on loyalty: the longer you've used Cloudflare, the sooner you'll get your invitation. Just our way of thanking our most loyal customers and helping them save money on their domain registration fees.&lt;/p&gt;
&lt;p&gt;One twist: we’re providing another way to jump to the front of the queue. Just as we want to thank and reward our most tenured customers, we also want to help support those organizations that are attempting to make a meaningful difference in our industry.  One such organization is &lt;a href=&quot;https://girlswhocode.com/&quot;&gt;Girls Who Code&lt;/a&gt;, which aims to help close the gender gap in the technology industry.  To support this organization’s efforts, we’re inviting customers to make a contribution to Girls Who Code during the Early Access registration process, and those who do will move to the front of our Early Access invitation queue.&lt;/p&gt;
&lt;center&gt;&lt;a href=&quot;https://dash.cloudflare.com/domains&quot; class=&quot;btn btn-success&quot;&gt;Sign up for Early Access!&lt;/a&gt;&lt;/center&gt;
&lt;h3 id=&quot;welcoming-everyone-to-a-registrar-you-can-love&quot;&gt;Welcoming Everyone to a Registrar You Can Love&lt;/h3&gt;
&lt;p&gt;We estimate that if every one of our customers moved their domains to the Cloudflare Registrar, they’d save over $50 million per year. Combined with our Bandwidth Alliance announcement yesterday, we hope the announcements this Birthday Week will save our customers well over $100 million per year they’d been paying for their infrastructure before.&lt;/p&gt;
&lt;img src=&quot;https://blog.cloudflare.com/content/images/2018/09/cloudflare-promise@2x.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;If you're not yet a Cloudflare customer, but you want to use Cloudflare Registrar, we encourage you to sign up for our core service now. We don't prioritize based on how much you pay us — or if you pay us at all — so even new free customers will get a place in the queue.&lt;/p&gt;
&lt;p&gt;After we've given existing Cloudflare customers a chance to take advantage of the Cloudflare Registrar, we'll open it up more broadly. At that time, we'll allow new domain registration as well. But, regardless of when you sign up, our promise will always be the same: best security practices at the wholesale registration price. A registrar you can trust, and, we hope, one you can love.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;&lt;a href=&quot;https://blog.cloudflare.com/subscribe/&quot; rel=&quot;noopener noreferer&quot;&gt;Subscribe to the blog&lt;/a&gt; for daily updates on all our Birthday Week announcements.&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;img src=&quot;https://blog.cloudflare.com/content/images/2018/09/Cloudflare-Birthday-Week-9.png&quot; class=&quot;kg-image&quot;/&gt;</description>
<pubDate>Thu, 27 Sep 2018 12:00:15 +0000</pubDate>
<dc:creator>jgrahamc</dc:creator>
<og:type>article</og:type>
<og:title>Introducing Cloudflare Registrar: Domain Registration You Can Love</og:title>
<og:description>“I love my domain registrar.” Has anyone ever said this? From before Cloudflare even launched in September 2010, our early beta customers were literally begging us: &quot;Will you please launch a registrar too?!&quot;</og:description>
<og:url>https://blog.cloudflare.com/cloudflare-registrar/</og:url>
<og:image>https://blog.cloudflare.com/content/images/2018/09/registrar-hmc@2x.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.cloudflare.com/cloudflare-registrar/</dc:identifier>
</item>
</channel>
</rss>