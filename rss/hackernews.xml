<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Firefox is back. It&amp;#039;s time to give it a try</title>
<link>https://mobile.nytimes.com/2018/06/20/technology/personaltech/firefox-chrome-browser-privacy.html</link>
<guid isPermaLink="true" >https://mobile.nytimes.com/2018/06/20/technology/personaltech/firefox-chrome-browser-privacy.html</guid>
<description>&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;In fact, both Chrome and Firefox have tough security. Both include sandboxing, which isolates processes of the browser so a harmful website doesn’t infect other parts of your machine. So if you loaded a website with malicious code, it would be contained within the webpage so it couldn’t infect your files, webcam and microphone.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Google said there was one thing it could do better on: the inclusion of privacy settings to block tracking technology, similar to the tools that Firefox includes.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;“I think that’s something that we can improve on,” Ms. Tabriz said. “Firefox has some settings that we’re also exploring.”&lt;/p&gt;
&lt;h2 class=&quot;css-lkc1qz eqpy7av0&quot;&gt;Speed and Battery Tests&lt;/h2&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Which browser is faster?&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Some benchmark websites, which determine the speed of a browser by measuring the responsiveness of different web elements, say &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://browserbench.org/Speedometer2.0/&quot; title=&quot;&quot; target=&quot;_blank&quot;&gt;Chrome is faster&lt;/a&gt;. But some other benchmark sites say &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://browserbench.org/JetStream/&quot; title=&quot;&quot; target=&quot;_blank&quot;&gt;Firefox is faster&lt;/a&gt;. In my anecdotal testing as someone who juggles more than a dozen web tabs at a time, both were very speedy. Let’s call it a draw.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Mozilla’s promise that Firefox consumes less computer memory raises hopes that it should also use less battery life. Yet in my tests on a laptop running a script that automatically reloaded the top 10 news sites, Firefox lasted only a few minutes longer than Chrome before the battery was depleted. On another test, which involved streaming a Netflix video on a loop on each browser, the battery lasted about 20 minutes longer when the Chrome browser was used.&lt;/p&gt;
&lt;h2 class=&quot;css-lkc1qz eqpy7av0&quot;&gt;Resurrection Is Just Beginning&lt;/h2&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Firefox is the No. 2 computer browser, with about 12 percent of the desktop browser market, lagging far behind Chrome, which has about 67 percent, according to &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://gs.statcounter.com/browser-market-share/desktop/worldwide&quot; title=&quot;&quot; target=&quot;_blank&quot;&gt;StatCounter&lt;/a&gt;. Microsoft’s Internet Explorer and Apple’s Safari browsers are even farther behind in the desktop market, with Explorer’s share about 7 percent and Safari’s about 5.5 percent. On Android phones, the Chrome browser is still far more popular than Firefox’s mobile browser. And only lightweight versions of Firefox are available for Apple’s iOS devices.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Yet the path forward for Mozilla looks increasingly promising for consumers.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;In addition to the normal Firefox browser, Mozilla offers Firefox Focus, a privacy-centric mobile browser that blocks trackers by default and purges your web browsing history as soon as you close out of a page.&lt;/p&gt;
</description>
<pubDate>Thu, 21 Jun 2018 00:45:59 +0000</pubDate>
<dc:creator>MilnerRoute</dc:creator>
<og:url>https://www.nytimes.com/2018/06/20/technology/personaltech/firefox-chrome-browser-privacy.html</og:url>
<og:type>article</og:type>
<og:title>Firefox Is Back. It’s Time to Give It a Try.</og:title>
<og:image>https://static01.nyt.com/images/2018/06/21/business/21Techfix/merlin_139815324_5d0f3563-0071-4a44-926f-3841b7e7fb44-facebookJumbo.jpg</og:image>
<og:description>Mozilla redesigned its browser to take on Google’s Chrome. Firefox now has strong privacy features and is as fast as Chrome.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.nytimes.com/2018/06/20/technology/personaltech/firefox-chrome-browser-privacy.html</dc:identifier>
</item>
<item>
<title>Certificates for localhost</title>
<link>https://letsencrypt.org/docs/certificates-for-localhost/</link>
<guid isPermaLink="true" >https://letsencrypt.org/docs/certificates-for-localhost/</guid>
<description>&lt;p&gt;Last updated: December 21, 2017 | &lt;a href=&quot;https://letsencrypt.org/docs&quot;&gt;See all Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sometimes people want to get a certificate for the hostname “localhost”, either for use in local development, or for distribution with a native application that needs to communicate with a web application. Let’s Encrypt can’t provide certificates for “localhost” because nobody uniquely owns it, and it’s not rooted in a top level domain like “.com” or “.net”. It’s possible to set up your own domain name that happens to resolve to 127.0.0.1, and get a certificate for it using the DNS challenge. However, this is generally a bad idea and there are better options.&lt;/p&gt;

&lt;p&gt;If you’re developing a web app, it’s useful to run a local web server like Apache or Nginx, and access it via &lt;a href=&quot;http://localhost:8000/&quot;&gt;http://localhost:8000/&lt;/a&gt; in your web browser. However, web browsers behave in subtly different ways on HTTP vs HTTPS pages. The main difference: On an HTTPS page, any requests to load JavaScript from an HTTP URL will be blocked. So if you’re developing locally using HTTP, you might add a script tag that works fine on your development machine, but breaks when you deploy to your HTTPS production site. To catch this kind of problem, it’s useful to set up HTTPS on your local web server. However, you don’t want to see certificate warnings all the time. How do you get the green lock locally?&lt;/p&gt;
&lt;p&gt;The best option: Generate your own certificate, either self-signed or signed by a local root, and trust it in your operating system’s trust store. Then use that certificate in your local web server. See below for details.&lt;/p&gt;

&lt;p&gt;Sometimes developers want to offer a downloadable native app that can be used alongside a web site to offer extra features. For instance, the Dropbox and Spotify desktop apps scan for files from across your machine, which a web app would not be allowed to do. One common approach is for these native apps to offer a web service on localhost, and have the web app make requests to it via XMLHTTPRequest (XHR) or WebSockets. The web app almost always uses HTTPS, which means that browsers will forbid it from making XHR or WebSockets requests to non-secure URLs. This is called Mixed Content Blocking. To communicate with the web app, the native app needs to provide a secure web service.&lt;/p&gt;
&lt;p&gt;Fortunately, modern browsers &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=607878&quot;&gt;consider&lt;/a&gt; “&lt;a href=&quot;http://127.0.0.1:8000/&amp;quot;&quot;&gt;http://127.0.0.1:8000/&quot;&lt;/a&gt; to be a &lt;a href=&quot;https://www.w3.org/TR/secure-contexts/#is-origin-trustworthy&quot;&gt;“potentially trustworthy”&lt;/a&gt; URL because it refers to a loopback address. Traffic sent to 127.0.0.1 is guaranteed not to leave your machine, and so is considered automatically secure against network interception. That means if your web app is HTTPS, and you offer a native app web service on 127.0.0.1, the two can happily communicate via XHR. Unfortunately, &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-dnsop-let-localhost-be-localhost-02&quot;&gt;localhost doesn’t yet get the same treatment&lt;/a&gt;. Also, WebSockets don’t get this treatment for either name.&lt;/p&gt;
&lt;p&gt;You might be tempted to work around these limitations by setting up a domain name in the global DNS that happens to resolve to 127.0.0.1 (for instance, localhost.example.com), getting a certificate for that domain name, shipping that certificate and corresponding private key with your native app, and telling your web app to communicate with &lt;a href=&quot;https://localhost.example.com:8000/&quot;&gt;https://localhost.example.com:8000/&lt;/a&gt; instead of &lt;a href=&quot;http://127.0.0.1:8000/&quot;&gt;http://127.0.0.1:8000/&lt;/a&gt;. &lt;em&gt;Don’t do this.&lt;/em&gt; It will put your users at risk, and your certificate may get revoked.&lt;/p&gt;
&lt;p&gt;By introducing a domain name instead of an IP address, you make it possible for an attacker to Man in the Middle (MitM) the DNS lookup and inject a response that points to a different IP address. The attacker can then pretend to be the local app and send fake responses back to the web app, which may compromise your account on the web app side, depending on how it is designed.&lt;/p&gt;
&lt;p&gt;The successful MitM in this situation is possible because in order to make it work, you had to ship the private key to your certificate with your native app. That means that anybody who downloads your native app gets a copy of the private key, including the attacker. This is considered a compromise of your private key, and your Certificate Authority (CA) is required to revoke your certificate if they become aware of it. &lt;a href=&quot;https://groups.google.com/d/msg/mozilla.dev.security.policy/eV89JXcsBC0/wsj5zpbbAQAJ&quot;&gt;Many native apps&lt;/a&gt; have &lt;a href=&quot;https://groups.google.com/d/msg/mozilla.dev.security.policy/T6emeoE-lCU/-k-A2dEdAQAJ&quot;&gt;had their certificates&lt;/a&gt; revoked for &lt;a href=&quot;https://groups.google.com/d/msg/mozilla.dev.security.policy/pk039T_wPrI/tGnFDFTnCQAJ&quot;&gt;shipping their private key&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, this leaves native apps without a lot of good, secure options to communicate with their corresponding web site. And the situation may get trickier in the future if browsers further &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=378566&quot;&gt;tighten access to localhost from the web&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also note that exporting a web service that offers privileged native APIs is inherently risky, because web sites that you didn’t intend to authorize may access them. If you go down this route, make sure to read up on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;Cross-Origin Resource Sharing&lt;/a&gt;, use Access-Control-Allow-Origin, and make sure to use a memory-safe HTTP parser, because even origins you don’t allow access to can send preflight requests, which may be able to exploit bugs in your parser.&lt;/p&gt;

&lt;p&gt;Anyone can make their own certificates without help from a CA. The only difference is that certificates you make yourself won’t be trusted by anyone else. For local development, that’s fine.&lt;/p&gt;
&lt;p&gt;The simplest way to generate a private key and self-signed certificate for localhost is with this openssl command:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;openssl req -x509 -out localhost.crt -keyout localhost.key \
  -newkey rsa:2048 -nodes -sha256 \
  -subj '/CN=localhost' -extensions EXT -config &amp;lt;( \
   printf &quot;[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth&quot;)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can then configure your local web server with localhost.crt and localhost.key, and install localhost.crt in your list of locally trusted roots.&lt;/p&gt;
&lt;p&gt;If you want a little more realism in your development certificates, you can use &lt;a href=&quot;https://github.com/jsha/minica&quot;&gt;minica&lt;/a&gt; to generate your own local root certificate, and issue end-entity (aka leaf) certificates signed by it. You would then import the root certificate rather than a self-signed end-entity certificate.&lt;/p&gt;
&lt;p&gt;You can also choose to use a domain with dots in it, like “www.localhost”, by adding it to /etc/hosts as an alias to 127.0.0.1. This subtly changes how browsers handle cookie storage.&lt;/p&gt;
</description>
<pubDate>Wed, 20 Jun 2018 18:39:46 +0000</pubDate>
<dc:creator>colinprince</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://letsencrypt.org/docs/certificates-for-localhost/</dc:identifier>
</item>
<item>
<title>YAML: probably not so great after all (2017)</title>
<link>https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html</link>
<guid isPermaLink="true" >https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html</guid>
<description>&lt;p&gt;I previously wrote &lt;a href=&quot;http://arp242.net/weblog/JSON_as_configuration_files-_please_dont.html&quot;&gt;why using JSON for human-editable configuration files is a bad idea&lt;/a&gt;. Today we’re going to look at some general problems with the YAML format.&lt;/p&gt;
&lt;h2 id=&quot;insecure-by-default&quot;&gt;Insecure by default&lt;/h2&gt;
&lt;p&gt;YAML is insecure by default. Loading a user-provided (untrusted) YAML string needs careful consideration.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;!!python/object/apply:os.system
args: ['ls /']
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Running it with &lt;code&gt;print(yaml.load(open('a.yaml')))&lt;/code&gt; should give you something like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bin   etc   lib    lost+found  opt   root  sbin  tmp  var sys
boot  dev   efi    home        lib64 mnt   proc  run  srv usr
0
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Many other languages (including Ruby and PHP&lt;sup id=&quot;fnref:1&quot;&gt;&lt;/sup&gt;) are also unsafe by default. &lt;a href=&quot;https://github.com/search?q=yaml.load&amp;amp;type=Code&amp;amp;utf8=%E2%9C%93&quot;&gt;Searching for &lt;code&gt;yaml.load&lt;/code&gt; on GitHub&lt;/a&gt; gives a whopping 2.8 million results. &lt;a href=&quot;https://github.com/search?q=yaml.safe_load&amp;amp;type=Code&amp;amp;utf8=%E2%9C%93&quot;&gt;&lt;code&gt;yaml.safe_load&lt;/code&gt;&lt;/a&gt; only gives 26,000 results.&lt;/p&gt;
&lt;p&gt;Mind you, many of those &lt;code&gt;yaml.load()&lt;/code&gt;s are fine – loading in a config file with &lt;code&gt;yaml.load()&lt;/code&gt; is often okay since it’s usually (though not always!) from a ‘trusted source’, and many are from test files with static YAML. But still, one can’t help but wonder how many exploits are hidden in those 2.8 million results.&lt;/p&gt;
&lt;p&gt;This is not a theoretical problem. In 2013 &lt;a href=&quot;https://www.sitepoint.com/anatomy-of-an-exploit-an-in-depth-look-at-the-rails-yaml-vulnerability/&quot;&gt;every Ruby on Rails application ever written was found to be vulnerable&lt;/a&gt; to remote code execution due to exactly this problem.&lt;/p&gt;
&lt;p&gt;One might argue this is not really the fault of the YAML format &lt;em&gt;as such&lt;/em&gt;, but rather the fault of the libraries implementing it wrong, but it seems to be the case that the majority of libraries are unsafe by default (especially the dynamic languages), so &lt;em&gt;de-facto&lt;/em&gt; it is a problem with YAML.&lt;/p&gt;
&lt;p&gt;One might also argue that fixing it is as easy as replacing &lt;code&gt;load()&lt;/code&gt; with &lt;code&gt;safe_load()&lt;/code&gt;, but many people are unaware of the problem, and even &lt;em&gt;if&lt;/em&gt; you’re aware of it, it’s one of those things that can be easy to forget. It’s pretty bad API design.&lt;/p&gt;
&lt;h2 id=&quot;can-be-hard-to-edit-especially-for-large-files&quot;&gt;Can be hard to edit, especially for large files&lt;/h2&gt;
&lt;p&gt;YAML files can be hard to edit, and this difficulty grows fast as the file gets larger.&lt;/p&gt;
&lt;p&gt;A good example of this are Ruby on Rails’ translation files; for example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;en:
   formtastic:
         labels:
           title: &quot;Title&quot;  # Default global value
           article:
                 body: &quot;Article content&quot;
           post:
                 new:
                   title: &quot;Choose a title...&quot;
                   body: &quot;Write something...&quot;
                 edit:
                   title: &quot;Edit title&quot;
                   body: &quot;Edit body&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This still looks okay, right? But what if this file has 100 lines? Or 1,000 lines? It is difficult to see “where” in the file you are because it may be off the screen. You’ll need to scroll up, but then you need to keep track of the indentation, which can be pretty hard even with indentation guides, especially since 2-space indentation is the norm and &lt;a href=&quot;http://www.yaml.org/faq.html&quot;&gt;tab indentation is forbidden&lt;/a&gt;&lt;sup id=&quot;fnref:2&quot;&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;And accidentally getting the indentation wrong often isn’t an error; it will often just deserialize to something you didn’t intend. Happy debugging!&lt;/p&gt;
&lt;p&gt;I’ve been happily programming Python for over a decade, so I’m used to significant whitespace, but sometimes I’m still struggling with YAML. In Python the drawbacks and loss of clarity are contained by not having functions that are several pages long, but data or configuration files have no such natural limits to their length.&lt;/p&gt;
&lt;p&gt;For small files this is not a problem; but it really doesn’t scale well to larger files, especially not if you want to edit them later on.&lt;/p&gt;
&lt;h2 id=&quot;its-pretty-complex&quot;&gt;It’s pretty complex&lt;/h2&gt;
&lt;p&gt;YAML may seem ‘simple’ and ‘obvious’ when glancing at a basic example, but turns out it’s not. The &lt;a href=&quot;http://yaml.org/spec/1.2/spec.pdf&quot;&gt;YAML spec&lt;/a&gt; is 23,449 words; for comparison, &lt;a href=&quot;https://github.com/toml-lang/toml&quot;&gt;TOML&lt;/a&gt; is 3,339 words, &lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf&quot;&gt;JSON&lt;/a&gt; is 1,969 words, and &lt;a href=&quot;https://www.w3.org/TR/REC-xml/&quot;&gt;XML&lt;/a&gt; is 20,603 words.&lt;/p&gt;
&lt;p&gt;Who among us have read all that? Who among us have read and &lt;em&gt;understood&lt;/em&gt; all of that? Who among of have read, &lt;em&gt;understood&lt;/em&gt;, and &lt;strong&gt;remembered&lt;/strong&gt; all of that?&lt;/p&gt;
&lt;p&gt;For example did you know there are &lt;a href=&quot;http://stackoverflow.com/a/21699210/660921&quot;&gt;&lt;em&gt;nine&lt;/em&gt; ways to write a multi-line string in YAML&lt;/a&gt; with subtly different behaviour?&lt;/p&gt;
&lt;p&gt;Yeah :-/&lt;/p&gt;
&lt;p&gt;That post gets even more interesting if you look at &lt;a href=&quot;http://stackoverflow.com/posts/21699210/revisions&quot;&gt;its revision history&lt;/a&gt;, as the author of the post discovers more and more ways to do this and more of the subtleties involved.&lt;/p&gt;
&lt;p&gt;It’s telling that the YAML spec starts with a preview, which states (emphases mine):&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;This section provides a quick glimpse into the expressive power of YAML. &lt;strong&gt;It is not expected that the first-time reader grok all of the examples&lt;/strong&gt;. Rather, these selections are used as motivation for the remainder of the specification.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;surprising-behaviour&quot;&gt;Surprising behaviour&lt;/h3&gt;
&lt;p&gt;What does this parse to (examples courtesy of &lt;a href=&quot;https://github.com/crdoconnor/strictyaml/blob/master/FAQ.rst#what-is-wrong-with-implicit-typing&quot;&gt;Colm O’Connor&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;- Don Corleone: Do you have faith in my judgment?
- Clemenza: Yes
- Don Corleone: Do I have your loyalty?
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Yup!&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[
        {'Don Corleone': 'Do you have faith in my judgment?'},
        {'Clemenza': True},
        {'Don Corleone': 'Do I have your loyalty?'}
]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Or what about:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;python: 3.5.3
postgres: 9.3
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;3.5.3&lt;/code&gt; gets recognized as as string, but &lt;code&gt;9.3&lt;/code&gt; gets recognized as a number instead of a string:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{'python': '3.5.3', 'postgres': 9.3}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Or what about:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Effenaar: Eindhoven
013: Tilburg
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;013 is a popular music Venue in Tilburg, but YAML will send you the wrong way since it’s parsed as an octal number:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{11: 'Tilburg', 'Effenaar': 'Eindhoven'}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;All of this – and more – is why many experienced YAMLers will often quote all strings, even when it’s not strictly required. Many people don’t use quotes, and it can be easy to forget especially if the rest of the file – possibly written by other people – doesn’t use quotes.&lt;/p&gt;
&lt;h3 id=&quot;its-not-portable&quot;&gt;It’s not portable&lt;/h3&gt;
&lt;p&gt;Because it’s so complex, its claims of portability have been greatly exaggerated. For example consider this example taken from the YAML spec:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;? - Detroit Tigers
  - Chicago cubs
:
  - 2001-07-23

? [ New York Yankees,
        Atlanta Braves ]
: [ 2001-07-02, 2001-08-12,
        2001-08-14 ]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Aside from the fact that most readers of this probably won’t even know what this does, try parsing it in Python with PyYAML:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;yaml.constructor.ConstructorError: while constructing a mapping
  in &quot;a.yaml&quot;, line 1, column 1
found unhashable key
  in &quot;a.yaml&quot;, line 1, column 3
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In Ruby it works:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
        [&quot;Detroit Tigers&quot;, &quot;Chicago cubs&quot;] =&amp;gt; [
                #&amp;lt;Date: 2001-07-23 ((2452114j,0s,0n),+0s,2299161j)&amp;gt;
        ],
        [&quot;New York Yankees&quot;, &quot;Atlanta Braves&quot;] =&amp;gt; [
                #&amp;lt;Date: 2001-07-02 ((2452093j,0s,0n),+0s,2299161j)&amp;gt;,
                #&amp;lt;Date: 2001-08-12 ((2452134j,0s,0n),+0s,2299161j)&amp;gt;,
                #&amp;lt;Date: 2001-08-14 ((2452136j,0s,0n),+0s,2299161j)&amp;gt;
        ]
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The reason for this is because you can’t use a list as a dict key in Python:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; {['a']: 'zxc'}
Traceback (most recent call last):
  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;
  TypeError: unhashable type: 'list'
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And this restriction is not unique to Python; common languages such as PHP, JavaScript, and Go all share this restriction.&lt;/p&gt;
&lt;p&gt;So use this in a YAML file, and you won’t be able to read it in most languages.&lt;/p&gt;
&lt;p&gt;Here’s another example again taken from the examples section of the YAML spec:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# Ranking of 1998 home runs
---
- Mark McGwire
- Sammy Sosa
- Ken Griffey

# Team ranking
---
- Chicago Cubs
- St Louis Cardinals
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Python says:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;yaml.composer.ComposerError: expected a single document in the stream
  in &quot;a.yaml&quot;, line 3, column 1
but found another document
  in &quot;a.yaml&quot;, line 8, column 1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;While Ruby outputs:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[&quot;Mark McGwire&quot;, &quot;Sammy Sosa&quot;, &quot;Ken Griffey&quot;]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The reason for this is that there are multiple YAML documents in a single file (&lt;code&gt;---&lt;/code&gt; start the document). In Python there is the &lt;code&gt;load_all()&lt;/code&gt; function to parse all documents. Ruby’s &lt;code&gt;load()&lt;/code&gt; just loads the first document, and as near as I can tell, doesn’t have a way to load multiple documents.&lt;/p&gt;
&lt;p&gt;I’m fairly sure that many more incompatibilities more subtle than this can be found. Are you &lt;em&gt;sure&lt;/em&gt; that every YAML parser will treat &lt;code&gt;foo:bar&lt;/code&gt; as a string, or &lt;code&gt;0x42&lt;/code&gt; as the integer &lt;code&gt;66&lt;/code&gt;, etc.?&lt;/p&gt;
&lt;h2 id=&quot;goals-achieved&quot;&gt;Goals achieved?&lt;/h2&gt;
&lt;p&gt;The spec states:&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;The design goals for YAML are, in decreasing priority:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;YAML is easily readable by humans.&lt;/li&gt;
&lt;li&gt;YAML data is portable between programming languages.&lt;/li&gt;
&lt;li&gt;YAML matches the native data structures of agile languages.&lt;/li&gt;
&lt;li&gt;YAML has a consistent model to support generic tools.&lt;/li&gt;
&lt;li&gt;YAML supports one-pass processing.&lt;/li&gt;
&lt;li&gt;YAML is expressive and extensible.&lt;/li&gt;
&lt;li&gt;YAML is easy to implement and use.&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;So how well does it do?&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;YAML is easily readable by humans.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;True only if you stick to a small subset. The full set is complex – much &lt;em&gt;more&lt;/em&gt; so than XML or JSON.&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;YAML data is portable between programming languages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not really true, as it’s too easy to create constructs that are not supported by common languages.&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;YAML matches the native data structures of agile languages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See above. Plus, why only support agile (or dynamic) languages? What about other languages?&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;YAML has a consistent model to support generic tools.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am not even sure what this means and I can’t find any elaboration.&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;YAML supports one-pass processing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I’ll take their word for it.&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;YAML is expressive and extensible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, it is, but it’s &lt;em&gt;too&lt;/em&gt; expressive (e.g. too complex).&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;YAML is easy to implement and use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;$ cat `ls -1 ~/gocode/src/github.com/go-yaml/yaml/*.go | grep -v _test` | wc -l
9247

$ cat /usr/lib/python3.5/site-packages/yaml/*.py | wc -l
5713
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Don’t get me wrong, it’s not like YAML is absolutely terrible – it’s certainly not as &lt;a href=&quot;http://arp242.net/weblog/JSON_as_configuration_files-_please_dont.html&quot;&gt;problematic as using JSON&lt;/a&gt; – but it’s not exactly great either. There are some drawbacks and surprises that are not at all obvious at first, and there are a number of better alternatives such as &lt;a href=&quot;https://github.com/toml-lang/toml&quot;&gt;TOML&lt;/a&gt; and other more specialized formats.&lt;/p&gt;
&lt;p&gt;Personally, I’m not likely to use it again when I’ve got a choice.&lt;/p&gt;
&lt;p&gt;If you &lt;em&gt;must&lt;/em&gt; use YAML then I recommend you use &lt;a href=&quot;https://github.com/crdoconnor/strictyaml&quot;&gt;StrictYAML&lt;/a&gt;, which removes some (though not all) of the more hairy parts.&lt;/p&gt;

&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;You can mail me at &lt;a href=&quot;mailto:martin@arp242.net&quot;&gt;martin@arp242.net&lt;/a&gt; or &lt;a href=&quot;https://github.com/Carpetsmoker/arp242.net/issues/new&quot;&gt;create a GitHub issue&lt;/a&gt; for feedback, questions, etc.&lt;/p&gt;
</description>
<pubDate>Wed, 20 Jun 2018 18:20:53 +0000</pubDate>
<dc:creator>tlb</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html</dc:identifier>
</item>
<item>
<title>Big fish are found deep not because of age, climate, or prey, but because of us</title>
<link>https://arstechnica.com/science/2018/06/ecological-law-turns-out-to-just-be-the-result-of-us-fishing/</link>
<guid isPermaLink="true" >https://arstechnica.com/science/2018/06/ecological-law-turns-out-to-just-be-the-result-of-us-fishing/</guid>
<description>&lt;img src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/06/1280_Y56F53xCrF3H-800x533.jpg&quot;/&gt;&lt;aside id=&quot;social-left&quot;&gt;&lt;a title=&quot;44 posters participating&quot; class=&quot;comment-count icon-comment-bubble-down&quot; href=&quot;https://arstechnica.com/science/2018/06/ecological-law-turns-out-to-just-be-the-result-of-us-fishing/?comments=1&quot;&gt;&lt;span class=&quot;comment-count-before&quot;&gt;reader comments&lt;/span&gt; &lt;span class=&quot;comment-count-number&quot;&gt;62&lt;/span&gt;&lt;/a&gt;
&lt;div class=&quot;share-links&quot;&gt;&lt;span&gt;Share this story&lt;/span&gt;    &lt;/div&gt;
&lt;/aside&gt;&lt;p&gt;When studying populations of a flounder-like North Sea fish called plaice in the early 1900’s, a man named Heincke noticed that older, larger fish are found deeper in the water than younger, smaller fish. The same phenomenon was subsequently found for other North Atlantic species like cod, haddock, pollock, and some species of flatfish; it was thus dubbed Heincke’s Law and treated as an established fact. Biologists assumed it was ontogenic in nature, meaning that it must be connected to how the fish age and mature.&lt;/p&gt;
&lt;p&gt;All the species in which older, bigger fish are found in deeper water have something else in common: we eat them. Could it be, some Canadian scientists wondered, that all the big fish are found in deeper water because we fished them out of shallower water? Apparently (and somewhat astonishingly) this possibility had never been evaluated. And the scientists found that not only &lt;em&gt;could&lt;/em&gt; this be the case—it in fact was.&lt;/p&gt;
&lt;h2&gt;Explaining the law&lt;/h2&gt;
&lt;p&gt;Starting in the 1990s, a number of hypotheses were posited to explain Heincke’s Law. One is that larger, older fish gravitate down to cooler waters where the diminished metabolic demands can increase their lifespans. Another suggested that all fish prefer to be in shallower water, but when the population gets too big, the seniors get shunted out of prime territory by the youngsters and have to live in deeper waters. A third holds that juveniles hide in shallower waters from the threatening adults down in the depths.&lt;/p&gt;
&lt;p&gt;A new hypothesis, posited in 2005, contends that the older fish are going deeper to find favorable temperatures as ocean water warms. It has even been suggested that the depth at which we find these fish can act as an indicator of how much the seas are warming.&lt;/p&gt;
&lt;p&gt;The new research starts by reevaluating a dataset of cod stock in the Eastern Scotian Shelf, in the Northwest Atlantic just south of Nova Scotia, from 1970-1989. In 1993, Canada put a moratorium on cod fishing because the stock was so depleted, ending an industry that had sustained humans in the region for the past 500 years. Cod stocks have started to rebound, but the moratorium is still (mostly) in effect.&lt;/p&gt;
&lt;h2&gt;Simulated fishing&lt;/h2&gt;
&lt;p&gt;This new analysis recapitulated previous findings from 1992: older, larger cod were found in deeper, cooler waters. But the researchers added a simulation in which the depth and mass of fish were tied to the rate of mortality by fishing. When set to mimic the actual fishing rate over the two decades spanning the dataset, the model outcomes were consistent with both the new and old fish data. When fishing mortality rates were increased in the model, larger fish moved progressively deeper. And when fishing rates were set to zero in the model, there was no age-related deepening seen at all.&lt;/p&gt;
&lt;p&gt;Between 2006 and 2010, fishing rates were in fact zero—so larger cod were not being fished out of shallower water. During this time, codfish of all ages and sizes were found living together in shallower water.&lt;/p&gt;
&lt;p&gt;This process has implications beyond fisheries management. If hypotheses that related the maturity of fish to the water temperature were correct, then fisheries data would give us a way to estimate water temperatures, helping us track the oceans' warming. But it looks like we probably shouldn’t use the depth at which commercially fished species are swimming to tell us anything about the temperature.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PNAS&lt;/em&gt;, 2018. DOI: &lt;a href=&quot;http://dx.doi.org/10.1073/pnas.1802096115&quot;&gt;10.1073/pnas.1802096115&lt;/a&gt; (&lt;a href=&quot;http://arstechnica.com/%20science/news/2010/03/dois-and-their-discontents-1.ars&quot;&gt;About DOIs&lt;/a&gt;).&lt;/p&gt;
</description>
<pubDate>Wed, 20 Jun 2018 18:11:05 +0000</pubDate>
<dc:creator>curtis</dc:creator>
<og:url>https://arstechnica.com/science/2018/06/ecological-law-turns-out-to-just-be-the-result-of-us-fishing/</og:url>
<og:title>Ecological “law” turns out to just be the result of us fishing</og:title>
<og:image>https://cdn.arstechnica.net/wp-content/uploads/2018/06/1280_Y56F53xCrF3H-760x380.jpg</og:image>
<og:description>Mature fish are found deep not because of age, climate, or prey, but because of us.</og:description>
<og:type>article</og:type>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arstechnica.com/science/2018/06/ecological-law-turns-out-to-just-be-the-result-of-us-fishing/</dc:identifier>
</item>
<item>
<title>Keybase Exploding Messages</title>
<link>https://keybase.io/blog/keybase-exploding-messages</link>
<guid isPermaLink="true" >https://keybase.io/blog/keybase-exploding-messages</guid>
<description>&lt;h2&gt;&lt;span&gt;NEWS FLASH:&lt;/span&gt; &lt;strong&gt;Keybase Exploding Messages&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;June 20, 2018&lt;/p&gt;
&lt;center&gt;
&lt;div class=&quot;img-exploding&quot;&gt;&lt;img src=&quot;https://keybase.io/images/blog/exploding/cherry_sm.png&quot; width=&quot;218&quot; height=&quot;218&quot;/&gt;&lt;/div&gt;
&lt;/center&gt;
&lt;p&gt;Hi everyone. Starting today, you can put a short fuse on your Keybase chat messages. This works for 1-on-1 chats and also inside team, group, and community channels.&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;center class=&quot;img-exploding&quot;&gt;
&lt;div&gt;
&lt;div&gt;&lt;img src=&quot;https://keybase.io/images/blog/exploding/zep2.png&quot; class=&quot;img img-rounded img-responsive&quot; width=&quot;566&quot; height=&quot;344&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/center&gt;
&lt;p class=&quot;small&quot;&gt;demonstration from my brother&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We recommend your most &lt;strong&gt;intimate&lt;/strong&gt; and most &lt;strong&gt;corporate&lt;/strong&gt; messages get the exploding treatment. Each end of the professionalism spectrum. Don't put that dank meme or Income Statement in Slack, people. Put it in Keybase, so it's encrypted.&lt;/p&gt;
&lt;p&gt;And if you'd like it to be &lt;em&gt;temporary&lt;/em&gt;, make it explode.&lt;/p&gt;
&lt;p&gt;Some details:&lt;/p&gt;
&lt;h2&gt;They blow up&lt;/h2&gt;
&lt;p&gt;When the time comes, KA-BOOM&lt;/p&gt;
&lt;center class=&quot;img-exploding&quot;&gt;
&lt;div&gt;
&lt;div&gt;&lt;img src=&quot;https://keybase.io/images/blog/exploding/drugstore.gif&quot; class=&quot;img img-rounded img-responsive&quot; width=&quot;609&quot; height=&quot;314&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/center&gt;
&lt;p&gt;When the countdown hits zero, everyone throws away the plaintext and ciphertext.&lt;/p&gt;
&lt;h2&gt;Exploding messages have forward secrecy&lt;/h2&gt;
&lt;p&gt;Forward secrecy means your apps use temporary &quot;ephemeral&quot; keys that are thrown away.&lt;/p&gt;
&lt;p&gt;To be clear, all Keybase messages - not just exploding ones - are &lt;strong&gt;end-to-end encrypted&lt;/strong&gt;. No one can read them without compromising one of your devices.&lt;/p&gt;
&lt;p&gt;Forward secrecy is something extra. It protects you if someone in the future &lt;strong&gt;steals your device's key&lt;/strong&gt; and also has access to old recorded messages, say by scooping up ciphertexts as a man-in-the-middle.&lt;/p&gt;
&lt;p&gt;Forward secrecy works extra well with &lt;em&gt;timed&lt;/em&gt; messages because your device destroys &lt;strong&gt;both&lt;/strong&gt; the decryption keys and plaintext.&lt;/p&gt;
&lt;h2&gt;Splosions from the command line&lt;/h2&gt;
&lt;p&gt;You can also send exploding messages from your terminal of choice.*&lt;/p&gt;
&lt;div class=&quot;pre-exploding&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;code code-highlighted&quot;&gt;

keybase chat send --exploding-lifetime &lt;span class=&quot;hljs-string&quot;&gt;&quot;30s&quot;&lt;/span&gt; friend1234 \
&lt;span class=&quot;hljs-string&quot;&gt;&quot;Yo - meet @ 10pm under the powerlines. Bring the stuff&quot;&lt;/span&gt;


keybase chat send --exploding-lifetime &lt;span class=&quot;hljs-string&quot;&gt;&quot;6h&quot;&lt;/span&gt; acmecorp.finance \
&lt;span class=&quot;hljs-string&quot;&gt;&quot;That is NO laughing matter, James.&quot;&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;* assuming sane choices&lt;/p&gt;
&lt;p&gt;If you're writing a bot, you can pipe JSON to &lt;code&gt;keybase chat api&lt;/code&gt;. Example:&lt;/p&gt;
&lt;div class=&quot;pre-exploding&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;code code-highlighted&quot;&gt;
{
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;method&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;send&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;params&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;{
     &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;options&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;{
        &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;channel&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;{
           &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;vegetarians.bots&quot;&lt;/span&gt;
        &lt;/span&gt;}&lt;/span&gt;,
        &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;exploding_lifetime&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;1d&quot;&lt;/span&gt;&lt;/span&gt;,
        &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;message&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;{
           &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;body&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;smellbot has detected meat in the office foyer.&quot;&lt;/span&gt;
        &lt;/span&gt;}
     &lt;/span&gt;}
  &lt;/span&gt;}
&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can get more API examples with &lt;code&gt;keybase chat api --help&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;That's it!&lt;/h2&gt;
&lt;p&gt;Another step forward for Keybase. Cryptography for everyone.&lt;/p&gt;
&lt;p&gt;More stuff soon,&lt;br/&gt;💖 Keybase&lt;/p&gt;
&lt;center&gt;&lt;a class=&quot;btn btn-primary&quot; href=&quot;https://keybase.io/download&quot;&gt;INSTALL KEYBASE &lt;span&gt;🌈&lt;/span&gt;&lt;/a&gt;&lt;/center&gt;

&lt;div class=&quot;blog-faq&quot; readability=&quot;69.365299684543&quot;&gt;
&lt;h2 id=&quot;faq&quot;&gt;FAQ&lt;/h2&gt;
&lt;h3 id=&quot;are-there-docs-on-how-this-works-&quot;&gt;Are there docs on how this works?&lt;/h3&gt;
&lt;p&gt;Yes, here are the &lt;a href=&quot;https://keybase.io/docs/crypto/ephemeral&quot;&gt;crypto docs&lt;/a&gt;. And here's the Keybase &lt;a href=&quot;https://github.com/keybase/client&quot;&gt;source code&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;my-team-uses-telegram-and-i-m-scared-shitless-&quot;&gt;My team uses Telegram and I'm scared shitless.&lt;/h3&gt;
&lt;p&gt;Hugs&lt;/p&gt;
&lt;h3 id=&quot;what-s-the-point-if-someone-can-just-take-a-screenshot-&quot;&gt;What's the point, if someone can just take a screenshot?&lt;/h3&gt;
&lt;p&gt;I answered this on &lt;a href=&quot;https://news.ycombinator.com/item?id=17357992&quot;&gt;Hacker News&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;why-don-t-all-messages-have-forward-secrecy-&quot;&gt;Why don't all messages have forward secrecy?&lt;/h3&gt;
&lt;p&gt;We've &lt;a href=&quot;https://keybase.io/blog/keybase-chat#pfs&quot;&gt;blogged about this before&lt;/a&gt;. It's not the right answer for a mainstream chat replacement, because it forces dangerous behavior and/or makes you lose all your group's messages when you update devices.&lt;/p&gt;
&lt;p&gt;Still, it's up to you! Now you can have all the forward secrecy you want with Keybase.&lt;/p&gt;
&lt;h3 id=&quot;what-about-repudiation-&quot;&gt;What about repudiation?&lt;/h3&gt;
&lt;p&gt;Repudiation is launching in ~3 weeks.&lt;/p&gt;
&lt;p&gt;So yes, in chats up to 100 people, messages will be pairwise MAC'ed. Pairwise MAC'ing doesn't scale for mega-large community chats, so those messages are still signed &amp;amp; encrypted in the traditional sense. This seems like the best balance.&lt;/p&gt;
&lt;p&gt;Some have argued repudiation is a silly feature. After all, who, in the history of humanity, has ever &lt;em&gt;not&lt;/em&gt; gotten in trouble for something that leaked, &lt;strong&gt;just because it wasn't cryptographically signed&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Anyway, this is minimal overhead with some benefit, so we're doing it.&lt;/p&gt;
&lt;h3 id=&quot;does-the-timer-begin-when-the-message-is-sent-or-received-&quot;&gt;Does the timer begin when the message is sent or received?&lt;/h3&gt;
&lt;p&gt;Sent.&lt;/p&gt;
&lt;p&gt;This seems like the only sensible answer for group chats. And we can't have a different answer for 1-on-1 chats and group chats. That would confuse people. Not the kind of person who reads an FAQ such as yourself, of course.&lt;/p&gt;
&lt;p&gt;So our answer is simple: you set a timer and the message is gone after that time.&lt;/p&gt;
&lt;h3 id=&quot;i-have-nothing-to-hide&quot;&gt;I have nothing to hide&lt;/h3&gt;
&lt;p&gt;Because no one is trying to hurt you&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;&lt;a class=&quot;btn btn-primary&quot; href=&quot;https://keybase.io/download&quot;&gt;INSTALL KEYBASE &lt;span&gt;🌈&lt;/span&gt;&lt;/a&gt;&lt;/center&gt;
</description>
<pubDate>Wed, 20 Jun 2018 18:09:39 +0000</pubDate>
<dc:creator>aston</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://keybase.io/blog/keybase-exploding-messages</dc:identifier>
</item>
<item>
<title>Erlang OTP 21.0 is Released</title>
<link>http://www.erlang.org/news/123</link>
<guid isPermaLink="true" >http://www.erlang.org/news/123</guid>
<description>&lt;p&gt;Erlang/OTP 21 is a new major release with new features, improvements as well as incompatibilities.&lt;/p&gt;
&lt;h2&gt;Potential Incompatibilities&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;All Corba applications are now moved from the OTP repository&lt;/li&gt;
&lt;li&gt;A new Corba repository will be created https://github.com/erlang&lt;/li&gt;
&lt;li&gt;New applications ftp and tftp, moved from inets&lt;/li&gt;
&lt;li&gt;ssl no longer supports 3_DES cipher suites or RSA-key exchange cipher suites by default&lt;/li&gt;
&lt;li&gt;erlang:monitor on a primitive node (erl_interface, jinterface, etc) will no longer fail with badarg exception. Instead a monitor will be created, but it will only supervise the connection to the node.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt; Highlights&lt;/h2&gt;
&lt;h3&gt; Erts:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Enhanced IO scalability&lt;/li&gt;
&lt;li&gt;Support for usage of distribution controller processes for alternative transports, routing etc&lt;/li&gt;
&lt;li&gt;compact instructions on 64bit systems for code below 4GB 20% less memory for loaded code&lt;/li&gt;
&lt;li&gt;Rewrite of the efile-driver with NIFs and &quot;Dirty schedulers&quot; resulting in faster file operations&lt;/li&gt;
&lt;li&gt;non-smp VM removed&lt;/li&gt;
&lt;li&gt;link and monitor optimized for scalability&lt;/li&gt;
&lt;li&gt;os:getenv/putenv now work on thread-safe emulation. No longer in sync with libc getenv(3). Manual synchronization will be needed.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Compiler:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Misc compiler optimizations including contributions from the Elixir team resulting in 10% improvements in benchmarks&lt;/li&gt;
&lt;li&gt;&quot;Tuple calls&quot; have been removed from the run-time system.&lt;/li&gt;
&lt;li&gt;Code such as &lt;code&gt;f({ok, Val}) -&amp;gt; {ok, Val}&lt;/code&gt; is now automatically rewritten to &lt;code&gt;f({ok, Val} = Tuple) -&amp;gt; Tuple.&lt;/code&gt; this reduces code size, execution time, and removed GC pressure.&lt;/li&gt;
&lt;li&gt;More information in stacktrace from a number of operators&lt;/li&gt;
&lt;li&gt;&lt;code&gt;erlang:get_stacktrace/0&lt;/code&gt; deprecated to be replaced with &lt;code&gt;try ... catch C:R:Stacktrace -&amp;gt; ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Creation of small maps with literal keys optimized.&lt;/li&gt;
&lt;li&gt;A new predifined macro &lt;code&gt;`OTP_RELEASE`&lt;/code&gt; and preprocessor directives &lt;code&gt;`-if&lt;/code&gt;` and &lt;code&gt;`-elif`&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Security:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;DTLS is now supported in the SSL application&lt;/li&gt;
&lt;li&gt;Enhanced support for distribution over TLS&lt;/li&gt;
&lt;li&gt;&quot;unsecure&quot; ciphers removed from defaults in SSL and SSH.&lt;/li&gt;
&lt;li&gt;A new option value defined to facilitate implementing exec servers. Old option kept for compatibility, but now gives errors on stderror.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Standard libraries:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;New API for logging, logger&lt;/li&gt;
&lt;li&gt;New uri_string module for parsing URIs according to &quot;The standard&quot;&lt;/li&gt;
&lt;li&gt;New function lists:search(list,fun/1) -&amp;gt; {ok, Value} | false&lt;/li&gt;
&lt;li&gt;Changed default behaviour of .erlang loading. escript, erlc, dialyzer and typer no longer load an .erlang at all.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For more details see&lt;br /&gt;&lt;a href=&quot;http://erlang.org/download/otp_src_21.0.readme&quot;&gt;http://erlang.org/download/otp_src_21.0.readme&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pre built versions for Windows can be fetched here:&lt;br /&gt;&lt;a href=&quot;http://erlang.org/download/otp_win32_21.0.exe&quot;&gt;http://erlang.org/download/otp_win32_21.0.exe&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://erlang.org/download/otp_win64_21.0.exe&quot;&gt;http://erlang.org/download/otp_win64_21.0.exe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Online documentation can be browsed here:&lt;br /&gt;&lt;a href=&quot;http://erlang.org/documentation/doc-10.0/doc&quot;&gt;http://erlang.org/documentation/doc-10.0/doc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Erlang/OTP source can also be found at GitHub on the official Erlang repository, Here: &lt;a href=&quot;https://github.com/erlang/otp/releases/tag/OTP-21.0&quot;&gt;OTP-21.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for all your contributions!&lt;/p&gt;
</description>
<pubDate>Wed, 20 Jun 2018 17:02:40 +0000</pubDate>
<dc:creator>out_of_protocol</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.erlang.org/news/123</dc:identifier>
</item>
<item>
<title>Tesla sues ex-employee for hacking, theft, and leaking to the press</title>
<link>https://www.theverge.com/2018/6/20/17484030/tesla-sues-employee-hacking-theft-leaking</link>
<guid isPermaLink="true" >https://www.theverge.com/2018/6/20/17484030/tesla-sues-employee-hacking-theft-leaking</guid>
<description>&lt;p id=&quot;Yr7ffj&quot;&gt;Tesla filed a lawsuit on Wednesday alleging that a former employee hacked the company’s system and transferred “gigabytes” of data to unnamed third parties. The lawsuit may align with Tesla CEO Elon Musk’s &lt;a href=&quot;https://www.theverge.com/2018/6/18/17476854/tesla-sabotage-elon-musk-email&quot;&gt;recent claim of “sabotage”&lt;/a&gt; by an ex-worker.&lt;/p&gt;
&lt;p id=&quot;vOjGf6&quot;&gt;Tesla’s lawsuit names Martin Tripp, a former process technician at the company’s Gigafactory in Nevada, as the defendant. Tesla claims that Tripp “unlawfully hacked the company’s confidential and trade secret information and transferred that information to third parties.” To do so, Tripp placed “hacking software” in the computers of three individual employees to routinely export confidential data, the company says.&lt;/p&gt;
&lt;div class=&quot;c-float-right&quot;&gt;
&lt;aside id=&quot;47YkpK&quot;&gt;&lt;q&gt;“unlawfully hacked the company’s confidential and trade secret information”&lt;/q&gt;&lt;/aside&gt;&lt;/div&gt;
&lt;p id=&quot;tlXQ18&quot;&gt;Tesla says that Tripp has already admitted to hacking its manufacturing operating system, and the company accuses him of making false statements to the media about the stolen information. The suit, which was filed in federal court in Nevada, was &lt;a href=&quot;https://www.cnbc.com/2018/06/20/tesla-sues-former-employee-for-allegedly-stealing-gigabytes-of-data-making-false-claims-to-media.html&quot;&gt;first reported by CNBC&lt;/a&gt;.&lt;/p&gt;
&lt;p id=&quot;pX8rcf&quot;&gt;Tesla claims that Tripp was the source of a news report about punctured battery cells at Tesla’s factory.&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p id=&quot;n4uZJ7&quot;&gt;For example, Tripp claimed that punctured battery cells had been used in certain Model 3 vehicles even though no punctured cells were ever used in vehicles, batteries or otherwise. Tripp also vastly exaggerated the true amount and value of “scrap” material that Tesla generated during the manufacturing process, and falsely claimed that Tesla was delayed in bringing new manufacturing equipment online.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p id=&quot;FBGRXZ&quot;&gt;The lawsuit doesn’t specify which media outlet Tripp leaked to, but earlier this month, &lt;a href=&quot;http://uk.businessinsider.com/tesla-model-3-scrap-waste-high-gigafactory-2018-5?r=US&amp;amp;IR=T&quot;&gt;&lt;em&gt;Business Insider&lt;/em&gt; ran a story&lt;/a&gt; about scrap metal waste and punctured battery cells at Tesla’s factory, citing documents and former employees as sources.&lt;/p&gt;
&lt;p id=&quot;GlaKUr&quot;&gt;Musk &lt;a href=&quot;https://www.theverge.com/2018/6/18/17476854/tesla-sabotage-elon-musk-email&quot;&gt;first alluded&lt;/a&gt; to the incidents described in the lawsuit last week in an email to Tesla employees in which he claimed Tesla was being sabotaged by an ex-employee. The employee was allegedly found to have made “direct code changes” to Tesla’s manufacturing system and sent “large amounts of highly sensitive” data to third parties.&lt;/p&gt;
&lt;p id=&quot;9HlBot&quot;&gt;Musk also questioned whether “Wall Street short-sellers,” “oil &amp;amp; gas companies,” or “the multitude of big gas/diesel car company competitors” may have been involved. “If they’re willing to cheat so much about emissions, maybe they’re willing to cheat in other ways?” he wrote.&lt;/p&gt;
&lt;p id=&quot;qWBrPz&quot;&gt;Tesla has struggled to ramp up production of its Model 3 vehicle, encountering bottlenecks in its factory and supply chain. The company is scrambling to produce 5,000 Model 3s a week ahead of its third-quarter earnings, as it attempts to evolve from a niche luxury electric car company into a mass-market player.&lt;/p&gt;
&lt;p id=&quot;6tsm70&quot;&gt;A lawyer for Tripp could not be immediately reached, and a Tesla spokesperson declined to comment.&lt;/p&gt;

</description>
<pubDate>Wed, 20 Jun 2018 16:39:55 +0000</pubDate>
<dc:creator>salmonellaeater</dc:creator>
<og:description>Tesla filed a lawsuit on Wednesday alleging that a former employee hacked the company’s system and transferred &quot;gigabytes&quot; of data to unnamed third parties.</og:description>
<og:image>https://cdn.vox-cdn.com/thumbor/QOXVhSBb4175xx8o0uvdkZ4tAgA=/0x146:2040x1214/fit-in/1200x630/cdn.vox-cdn.com/uploads/chorus_asset/file/11423503/acastro_180524_1777_tesla_0001.jpg</og:image>
<og:title>Tesla sues ex-employee for hacking, theft, and leaking to the press</og:title>
<og:type>article</og:type>
<og:url>https://www.theverge.com/2018/6/20/17484030/tesla-sues-employee-hacking-theft-leaking</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theverge.com/2018/6/20/17484030/tesla-sues-employee-hacking-theft-leaking</dc:identifier>
</item>
<item>
<title>PostgreSQL Features You May Not Have Tried but Should</title>
<link>https://pgdash.io/blog/postgres-features.html?h=</link>
<guid isPermaLink="true" >https://pgdash.io/blog/postgres-features.html?h=</guid>
<description>&lt;p&gt;PostgreSQL contains a slew of great features. Many of them are very well known. Others can be incredibly useful but are not as widely appreciated. Here are our top picks for great PostgreSQL features you may not have taken a look at but really should, since they can help you get code into production faster, make ops easier and generally get things done with less code and sweat.&lt;/p&gt;
&lt;h3 id=&quot;pubsub-notifications&quot;&gt;Pub/Sub Notifications&lt;/h3&gt;
&lt;p&gt;PostgreSQL comes with a simple non-durable topic-based publish-subscribe notification system. It’s no Kafka, but the features do support common use cases.&lt;/p&gt;
&lt;p&gt;Messages on a specific topic can be broadcast to all connected subscribers who are listening for that topic. The messages are &lt;em&gt;pushed&lt;/em&gt; by the Postgres server to the listening clients. Polling is not required, but your database driver should support delivery of notifications to the application asynchronously.&lt;/p&gt;
&lt;p&gt;The notification consists of a topic name and a payload (upto about 8000 characters). The payload would typically be a JSON string, but of course it can be anything. You can send a notification using the &lt;a href=&quot;https://www.postgresql.org/docs/current/static/sql-notify.html&quot;&gt;NOTIFY&lt;/a&gt; command:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;NOTIFY&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo_events'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;userid&quot;:42,&quot;action&quot;:&quot;grok&quot;}'&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;or the &lt;a href=&quot;https://www.postgresql.org/docs/current/static/sql-notify.html&quot;&gt;pg_notify()&lt;/a&gt; function:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg_notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo_events'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;userid&quot;:42,&quot;action&quot;:&quot;grok&quot;}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The subscription happens with the &lt;a href=&quot;https://www.postgresql.org/docs/current/static/sql-listen.html&quot;&gt;LISTEN&lt;/a&gt; command, but typically you’ve to use driver-specific APIs. Here’s the &lt;a href=&quot;https://godoc.org/github.com/lib/pq/example/listen&quot;&gt;Go version&lt;/a&gt; for example.&lt;/p&gt;
&lt;h3 id=&quot;table-inheritance&quot;&gt;Table Inheritance&lt;/h3&gt;
&lt;p&gt;Assume you have a table called “invoices”. You’ve to now support “government invoices”, which are invoices but have a few additional fields. How would you model this? Rather than adding nullable columns to invoices, or a single nullable JSON column to invoices, try the inheritance feature:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invoices&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;invoice_number&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;issued_on&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;government_invoices&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;department_id&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INHERITS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invoices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This reflects the situation that all government invoices are invoices, but have an extra attribute. The “government_invoices” table above has a total of 3 columns:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;test=# \d invoices
                  Table &quot;public.invoices&quot;
     Column     |  Type   | Collation | Nullable | Default
----------------+---------+-----------+----------+---------
 invoice_number | integer |           | not null |
 issued_on      | date    |           | not null | now()
Indexes:
    &quot;invoices_pkey&quot; PRIMARY KEY, btree (invoice_number)
Number of child tables: 1 (Use \d+ to list them.)

test=# \d government_invoices
            Table &quot;public.government_invoices&quot;
     Column     |  Type   | Collation | Nullable | Default
----------------+---------+-----------+----------+---------
 invoice_number | integer |           | not null |
 issued_on      | date    |           | not null | now()
 department_id  | text    |           | not null |
Inherits: invoices&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Adding rows work as though the tables are independent:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invoices&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invoice_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;government_invoices&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invoice_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;department_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DOD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But watch happens when you SELECT:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;test=# SELECT * FROM government_invoices;
 invoice_number | issued_on  | department_id
----------------+------------+---------------
            101 | 2018-06-19 | DOD
(1 row)

test=# SELECT * FROM invoices;
 invoice_number | issued_on
----------------+------------
            100 | 2018-06-19
            101 | 2018-06-19
(2 rows)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Invoice number 101 from the child table is also listed in the parent table. This facilitates algorithms that know only about invoices to work on the parent invoices table while ignoring any child tables.&lt;/p&gt;
&lt;p&gt;You can learn more about table inheritance in PostgreSQL &lt;a href=&quot;https://www.postgresql.org/docs/current/static/ddl-inherit.html&quot;&gt;in the docs&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;foreign-data-wrappers&quot;&gt;Foreign Data Wrappers&lt;/h3&gt;
&lt;p&gt;Did you know you can have virtual tables that actually serve data from another PostgreSQL instance? Or even SQLite files, MongoDB, Redis, and more? This feature is called &lt;em&gt;Foreign Data Wrappers&lt;/em&gt;, which provides a standardized way to access and manipulate data stored externally to the Postgres server you’re connecting to. There are various FDW implementations available that let you connect to various different data sources. These are typically packaged as extensions.&lt;/p&gt;
&lt;p&gt;The standard Postgres distribution comes with the &lt;a href=&quot;https://www.postgresql.org/docs/current/static/postgres-fdw.html&quot;&gt;postgres_fdw&lt;/a&gt; extension, which lets you connect to other Postgres servers. For example, you can move a big table to another server, and setup a virtual table (the proper term is a “foreign table”) locally:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;-- install the extension (required only once)
CREATE EXTENSION postgres_fdw;

-- big_server is our big, remote server with the migrated table
CREATE SERVER big_server FOREIGN DATA WRAPPER postgres_fdw
  OPTIONS (host '10.1.2.3', dbname 'big_db');

-- create a user mapping for the app user
CREATE USER MAPPING FOR app_user SERVER big_server
  OPTIONS (user 'remote_user', password 'remote_pass');

-- and finally create the virtual table invoices -&amp;gt; big_db.public.invoices
CREATE FOREIGN TABLE invoices (
  invoice_num int NOT NULL PRIMARY KEY
  -- other columns omitted for brevity
) SERVER big_server;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This &lt;a href=&quot;https://wiki.postgresql.org/wiki/Foreign_data_wrappers&quot;&gt;Wiki page&lt;/a&gt; has a good list of the many FDW implementations available.&lt;/p&gt;
&lt;p&gt;Apart from accessing data from other servers, FDW has also been used to implement alternate storage layouts, like &lt;a href=&quot;https://github.com/citusdata/cstore_fdw&quot;&gt;cstore_fdw&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is also &lt;a href=&quot;https://www.postgresql.org/docs/current/static/dblink.html&quot;&gt;dblink&lt;/a&gt;, which is yet another method of accessing remote PostgreSQL (only) data.&lt;/p&gt;
&lt;h3 id=&quot;partitioned-tables&quot;&gt;Partitioned Tables&lt;/h3&gt;
&lt;p&gt;Starting with version 10, PostgreSQL natively supports sharding of a table into multiple child tables, based on a partition key value computed from one or more column values. This allows a single, large table to be physically stored as separate tables, for better DML performance and storage management.&lt;/p&gt;
&lt;p&gt;Here’s how to create a partitioned table, with the intention of adding a new table each month:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;-- the parent table
CREATE TABLE invoices (
    invoice_number   int  NOT NULL,
    issued_on        date NOT NULL DEFAULT now()
) PARTITION BY RANGE (issued_on);
  
-- table for the month of May 2018
CREATE TABLE invoices_2018_05 PARTITION OF invoices
  FOR VALUES FROM ('2018-05-01') TO ('2018-06-01');

-- table for the month of June 2018
CREATE TABLE invoices_2018_06 PARTITION OF invoices
  FOR VALUES FROM ('2018-06-01') TO ('2018-07-01');&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The child tables have to be manually or programmatically created, it does not happen automatically.&lt;/p&gt;
&lt;p&gt;You can query and insert at the parent level, and PostgreSQL will route it to the appropriate child table, have a look:&lt;/p&gt;
&lt;p&gt;First, we insert two rows:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;test=# INSERT INTO invoices VALUES (10042, '2018-05-15');
INSERT 0 1
test=# INSERT INTO invoices VALUES (43029, '2018-06-15');
INSERT 0 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We can see that the rows are actually inserted into the child tables:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;test=# SELECT * FROM invoices_2018_05;
 invoice_number | issued_on
----------------+------------
          10042 | 2018-05-15
(1 row)

test=# SELECT * FROM invoices_2018_06;
 invoice_number | issued_on
----------------+------------
          43029 | 2018-06-15
(1 row)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But queries can be done on the parent, returning combined result:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;test=# SELECT * FROM invoices;
 invoice_number | issued_on
----------------+------------
          10042 | 2018-05-15
          43029 | 2018-06-15
(2 rows)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Partitioning is in some ways similar to inheritance (query at parent level), but there are differences too (partition parent contains no data, for example). You can read more about partitioning &lt;a href=&quot;https://www.postgresql.org/docs/current/static/ddl-partitioning.html&quot;&gt;in the docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PostgreSQL 11, currently in beta, improves upon this feature. &lt;a href=&quot;https://pgdash.io/blog/partition-postgres-11.html&quot;&gt;This article&lt;/a&gt; has an overview of the improvements.&lt;/p&gt;
&lt;h3 id=&quot;range-types&quot;&gt;Range Types&lt;/h3&gt;
&lt;p&gt;Ever worked with temperature ranges, calendar scheduling, price ranges and the like? Working with intervals are one of those deceptively simple things that gently lead you into hair-pulling and late night debugging.&lt;/p&gt;
&lt;p&gt;Here’s a table with a range column, and some values:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;CREATE TABLE prices (
    item  text,
    price int4range -- int4range is a range of regular integers
);

INSERT INTO prices VALUES ('mouse',    '[10,16)');
INSERT INTO prices VALUES ('keyboard', '[20,31)');
INSERT INTO prices VALUES ('joystick', '[35,56)');&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The numbers in the mismatched brackets represent a half-open interval. Here is the query to find all items that are in the price range $15 to $30, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator (range overlap):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;test=# SELECT * FROM prices WHERE price &amp;amp;&amp;amp; int4range(15,30);
   item   |  price
----------+---------
 mouse    | [10,16)
 keyboard | [20,31)
(2 rows)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you are not impressed, try writing the query without ranges. (No really, just try it.)&lt;/p&gt;
&lt;p&gt;Range types are quite powerful – there are &lt;a href=&quot;https://www.postgresql.org/docs/10/static/functions-range.html#RANGE-OPERATORS-TABLE&quot;&gt;more operators&lt;/a&gt;, &lt;a href=&quot;https://www.postgresql.org/docs/10/static/functions-range.html#RANGE-FUNCTIONS-TABLE&quot;&gt;functions&lt;/a&gt;, you can define your own range types, and even index them.&lt;/p&gt;
&lt;p&gt;To learn more about ranges, try this &lt;a href=&quot;https://wiki.postgresql.org/images/7/73/Range-types-pgopen-2012.pdf&quot;&gt;presentation&lt;/a&gt;, and &lt;a href=&quot;https://www.postgresql.org/docs/current/static/rangetypes.html&quot;&gt;the docs&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;array-types&quot;&gt;Array Types&lt;/h3&gt;
&lt;p&gt;PostgreSQL has supported arrays for a long time. Array types can reduce the amount of boilerplate application code and simplify queries. Here is a table that uses an array column:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;CREATE TABLE posts (
    title text NOT NULL PRIMARY KEY,
    tags  text[]
);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Assuming each row represents a blog post, each having a set of tags, here is how we can list all the posts that have both “postgres” and “go” tags:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;test=# SELECT title, tags FROM posts WHERE '{&quot;postgres&quot;, &quot;go&quot;}' &amp;lt;@ tags;
               title               |          tags
-----------------------------------+------------------------
 Writing PostgreSQL Triggers in Go | {postgres,triggers,go}
(1 row)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The usage of the array type here makes for concise data modelling and simpler queries. Postgres arrays come with &lt;a href=&quot;https://www.postgresql.org/docs/current/static/functions-array.html&quot;&gt;operators and functions&lt;/a&gt;, including &lt;a href=&quot;https://www.postgresql.org/docs/current/static/functions-aggregate.html&quot;&gt;aggregate functions&lt;/a&gt;. You can also create indexes on array expressions. Here is &lt;a href=&quot;https://www.opsdash.com/blog/postgres-arrays-golang.html&quot;&gt;an article&lt;/a&gt; on using arrays with &lt;a href=&quot;https://golang.org&quot;&gt;Go&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;triggers&quot;&gt;Triggers&lt;/h3&gt;
&lt;p&gt;You can ask PostgreSQL to execute a specific function when rows are inserted, updated or deleted from a table. The function can even alter the values during an insert. You can read more about triggers &lt;a href=&quot;https://www.postgresql.org/docs/10/static/plpgsql-trigger.html&quot;&gt;here&lt;/a&gt;. Just to whet your appetite, here is a trigger that sends out a notification and writes to an audit log when a user is created:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;-- a table of users
CREATE TABLE users (
  username text NOT NULL PRIMARY KEY
);

-- an audit log
CREATE TABLE audit_log (
  at          timestamptz NOT NULL DEFAULT now(),
  description text NOT NULL
);

-- the actual function that is executed per insert
CREATE FUNCTION on_user_added() RETURNS TRIGGER AS $$
BEGIN
  IF (TG_OP = 'INSERT') THEN
    -- add an entry into the audit log
    INSERT INTO audit_log (description)
        VALUES ('new user created, username is ' || NEW.username);
    -- send a notification
    PERFORM pg_notify('usercreated', NEW.username);
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- set the function as an insert trigger
CREATE TRIGGER on_user_added AFTER INSERT ON users
  FOR EACH ROW EXECUTE PROCEDURE on_user_added();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now if we try to add a new user, an audit log entry is automatically added:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;test=# INSERT INTO users VALUES ('alice');
INSERT 0 1
test=# SELECT * FROM audit_log;
                at             |             description
-------------------------------+-------------------------------------
 2018-06-19 04:00:30.672947+00 | new user created, username is alice
(1 row)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;pg_stat_statements&quot;&gt;pg_stat_statements&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.postgresql.org/docs/current/static/pgstatstatements.html&quot;&gt;pg_stat_statements&lt;/a&gt; is an extension that is present by default in your PostgreSQL distribution, but is not enabled. This extension records a wealth of information about each statement executed, including the time taken, the memory used and disk I/Os initiated. It’s indispensible for understanding and debugging query performance issues.&lt;/p&gt;
&lt;p&gt;The overhead of installing and enabling this extension is small, it’s very simple to use, and there is no reason NOT to run it on your production servers! Read &lt;a href=&quot;https://www.postgresql.org/docs/current/static/pgstatstatements.html&quot;&gt;the docs&lt;/a&gt; for more info.&lt;/p&gt;
&lt;h3 id=&quot;hash-gin-and-brin-indexes&quot;&gt;Hash, GIN and BRIN Indexes&lt;/h3&gt;
&lt;p&gt;The default index type in PostgreSQL is the B-Tree, but there are also other types, that are documented &lt;a href=&quot;https://www.postgresql.org/docs/current/static/indexes-types.html&quot;&gt;here&lt;/a&gt;. Other index types are very helpful in cases that aren’t actually uncommon. In particular, setting up indexes of the hash, GIN and BRIN type might just be the solution to your performance issues:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;Hash&lt;/em&gt;: Unlike B-Tree indexes which have inherent ordering, hash indexes are unordered and can only do equality matches (lookup). However, hash indexes occupy much lesser space and are faster than B-Trees for equality matches. (Also, note that prior to PostgreSQL 10 it was not possible to replicate hash indexes; they were unlogged.)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;GIN&lt;/em&gt;: GIN is an inverted index, which essentially allows for multiple values for a single key. GIN indexes are useful for indexing arrays, JSON, ranges, full text search etc.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;BRIN&lt;/em&gt;: If your data has a specific, natural order – for example, time series data – and your queries typically work only with a small range of it, then BRIN indexes can speed up your queries with very little overhead. BRIN indexes maintain ranges per block of data, allowing the optimizer to skip over blocks that contain rows that won’t be selected by the query.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Start reading about PostgreSQL index types &lt;a href=&quot;https://www.postgresql.org/docs/current/static/indexes-types.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;full-text-search&quot;&gt;Full Text Search&lt;/h3&gt;
&lt;p&gt;PostgreSQL can do full text search very well, including in languages other than English. Here’s an [article] (https://www.opsdash.com/blog/postgres-full-text-search-golang.html) that walks you through the steps of creating a full text query search app over Postgres in Go.&lt;/p&gt;
&lt;h3 id=&quot;about-pgdash&quot;&gt;About pgDash&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://pgdash.io&quot;&gt;pgDash&lt;/a&gt; is an in-depth monitoring solution designed specifically for PostgreSQL deployments. pgDash shows you information and metrics about every aspect of your PostgreSQL database server, collected using the open-source tool &lt;a href=&quot;https://pgmetrics.io&quot;&gt;pgmetrics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pgdash.io/blog/images/pgdash-repl-primary.png&quot;&gt;&lt;img src=&quot;https://pgdash.io/blog/images/pgdash-repl-primary.png&quot; alt=&quot;Monitoring with pgDash&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pgDash is currently in Beta and provides core reporting and visualization functionality, including collecting and displaying PostgreSQL information and providing time-series graphs, detailed reports, alerting and more.&lt;/p&gt;
</description>
<pubDate>Wed, 20 Jun 2018 16:39:12 +0000</pubDate>
<dc:creator>_1</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://pgdash.io/blog/postgres-features.html?h=</dc:identifier>
</item>
<item>
<title>Surgeon Atul Gawande selected as CEO of new health care company from Amazon</title>
<link>https://www.statnews.com/2018/06/20/surgeon-atul-gawande-selected-ceo-amazon-partners/</link>
<guid isPermaLink="true" >https://www.statnews.com/2018/06/20/surgeon-atul-gawande-selected-ceo-amazon-partners/</guid>
<description>&lt;p class=&quot;big-cap-wrap&quot;&gt;&lt;span class=&quot;big-cap&quot;&gt;D&lt;/span&gt;&lt;/p&gt;&lt;p&gt;r. Atul Gawande — the prominent physician, prolific writer, and all-around health care celebrity — will become the &lt;a href=&quot;https://www.statnews.com/2018/06/20/gawande-five-ideas/&quot;&gt;chief executive&lt;/a&gt; of the &lt;a href=&quot;https://www.statnews.com/2018/01/30/amazon-jpmorgan-berkshire-health-care/&quot; rel=&quot;noopener&quot;&gt;new health care company&lt;/a&gt; launched by Amazon, Berkshire Hathaway, and JPMorgan Chase, the three companies announced Wednesday.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.statnews.com/2015/11/11/atul-gawande-health-care-journalism/&quot; rel=&quot;noopener&quot;&gt;Gawande&lt;/a&gt;, a surgeon at Brigham and Women’s Hospital in Boston who teaches at Harvard’s medical and public health schools, will take charge of the new organization July 9. In a note sent to friends and colleagues, Gawande said that he is not giving up his positions at Harvard or the Brigham and that he will keep writing, including for the New Yorker. But he said he will transition from being executive director to chairman of Ariadne Labs, which works on solving problems in health systems around the world.&lt;/p&gt;
&lt;p&gt;The new company will be based in Boston.&lt;/p&gt;
&lt;p class=&quot;ad-label&quot;&gt;advertisement&lt;/p&gt;

&lt;p&gt;“I have devoted my public health career to building scalable solutions for better healthcare delivery that are saving lives, reducing suffering, and eliminating wasteful spending both in the US and across the world,” Gawande said in a statement put out by the companies. “Now I have the backing of these remarkable organizations to pursue this mission with even greater impact for more than a million people, and in doing so incubate models of care for all.”&lt;/p&gt;
&lt;aside class=&quot;read-more standard&quot;&gt;
&lt;/aside&gt;&lt;p&gt;Not much has been revealed about the new health care enterprise from the three corporate giants; in the release Wednesday, it doesn’t even have a name. The new organization is meant to come up with ways to address the health care costs for the companies’ employees, though its founders have indicated they hope that it comes up with solutions that could be spread across the entire U.S. health system.&lt;/p&gt;
&lt;p&gt;Some experts have &lt;a href=&quot;https://www.statnews.com/2018/01/30/amazon-health-care-reaction/&quot; rel=&quot;noopener&quot;&gt;expressed some skepticism&lt;/a&gt; though so far, given the lack of details and the quagmire that is the health care industry. Many other innovators have sought to find solutions to health care costs in the past but have run head-on into the complexity of the system.&lt;/p&gt;
&lt;p&gt;But in his note to friends, Gawande said that “this new health care organization represents one of the most promising opportunities to accelerate improvement of US health care delivery. The work will be difficult and take time, but it must be done.”&lt;/p&gt;
&lt;p&gt;Gawande was not immediately available for an interview, according to the Brigham.&lt;/p&gt;

&lt;div class=&quot;content-meta&quot;&gt;

&lt;div class=&quot;author-info&quot; readability=&quot;4.0737704918033&quot;&gt;
&lt;div class=&quot;author-avatar&quot;&gt;&lt;img src=&quot;https://www.statnews.com/wp-content/uploads/2018/01/Circular_Drew.png&quot; srcset=&quot;https://www.statnews.com/wp-content/uploads/2018/01/Circular_Drew.png 160w, https://www.statnews.com/wp-content/uploads/2018/01/Circular_Drew-80x80.png 80w&quot; width=&quot;80&quot; height=&quot;80&quot; class=&quot;avatar&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;author-data&quot; readability=&quot;5.2377049180328&quot;&gt;

&lt;p&gt;General Assignment Reporter&lt;/p&gt;
&lt;p&gt;Andrew is a general assignment reporter.&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;


&lt;/div&gt;
</description>
<pubDate>Wed, 20 Jun 2018 13:57:35 +0000</pubDate>
<dc:creator>uptown</dc:creator>
<og:type>article</og:type>
<og:title>Atul Gawande picked as CEO of Amazon, Berkshire health care company</og:title>
<og:description>Atul Gawande, the surgeon and author, has been selected to lead the health-care venture from Amazon, J.P. Morgan, and Berkshire Hathaway.</og:description>
<og:url>https://www.statnews.com/2018/06/20/surgeon-atul-gawande-selected-ceo-amazon-partners/</og:url>
<og:image>https://www.statnews.com/wp-content/uploads/2017/07/Boghosian_Atul-Gawande3_STAT-1024x576.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.statnews.com/2018/06/20/surgeon-atul-gawande-selected-ceo-amazon-partners/</dc:identifier>
</item>
<item>
<title>Demand for Ruby on Rails is Still Huge</title>
<link>https://medium.com/@yoelblum_45935/demand-for-ruby-on-rails-is-still-huge-ea4434926c57</link>
<guid isPermaLink="true" >https://medium.com/@yoelblum_45935/demand-for-ruby-on-rails-is-still-huge-ea4434926c57</guid>
<description>&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*ZlCHsXU3PuTzRdpp7w5LBg.png&quot; data-width=&quot;1100&quot; data-height=&quot;450&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*ZlCHsXU3PuTzRdpp7w5LBg.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*ZlCHsXU3PuTzRdpp7w5LBg.png&quot;/&gt;&lt;/div&gt;
Silicon Valley Area demand for Rails developers is huge
&lt;p name=&quot;b121&quot; id=&quot;b121&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;TL;DR Looking at job postings, Rails is more popular than Django, Laravel or Express. By a lot. If you specifically measure startup cities like San Francisco Bay area, Rails even beats ASP.NET . In fact, judging by job postings, &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Rails is probably the most used full stack web technology for U.S web based startups.&lt;/strong&gt;&lt;/p&gt;
&lt;p name=&quot;73d8&quot; id=&quot;73d8&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;a href=&quot;https://medium.com/@yoelblum_45935/is-rails-still-popular-in-2018-d17f3b062b18&quot; data-href=&quot;https://medium.com/@yoelblum_45935/is-rails-still-popular-in-2018-d17f3b062b18&quot; class=&quot;markup--anchor markup--p-anchor&quot; target=&quot;_blank&quot;&gt;In a previous post&lt;/a&gt; I made the case that Rails is still popular but much less than in it used to be and that it’s used about as much as other frameworks like Laravel, Django, Express.JS etc. The method I used is looking at the number of Stackoverflow questions asked over time. Lots of people argued this is not a good metric so I decided to dig deeper.&lt;/p&gt;
&lt;p name=&quot;2f5a&quot; id=&quot;2f5a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Instead of gauging popularity by Stackoverflow or Google trends, &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;let’s look at the number of job openings (I used Linkedin); jobs are what we actually care about most , right?&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*sEN7tliT0NVef_w3-AlMrA.png&quot; data-width=&quot;737&quot; data-height=&quot;176&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*sEN7tliT0NVef_w3-AlMrA.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*sEN7tliT0NVef_w3-AlMrA.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;9ed7&quot; id=&quot;9ed7&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;San Francisco Bay Area:&lt;/p&gt;
&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;349e&quot; id=&quot;349e&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Rails&lt;/strong&gt; &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;1066&lt;/strong&gt;&lt;/li&gt;
&lt;li name=&quot;e90b&quot; id=&quot;e90b&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Django 636&lt;/li&gt;
&lt;li name=&quot;ea9d&quot; id=&quot;ea9d&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Spring MVC 304&lt;/li&gt;
&lt;li name=&quot;6cc7&quot; id=&quot;6cc7&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;ASP.NET 298&lt;/li&gt;
&lt;li name=&quot;9387&quot; id=&quot;9387&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Symphony 98&lt;/li&gt;
&lt;li name=&quot;f4c6&quot; id=&quot;f4c6&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Express.JS 74&lt;/li&gt;
&lt;li name=&quot;6ade&quot; id=&quot;6ade&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Laravel 30&lt;/li&gt;
&lt;li name=&quot;94e3&quot; id=&quot;94e3&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Sails 18&lt;/li&gt;
&lt;/ol&gt;&lt;p name=&quot;8689&quot; id=&quot;8689&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Caveat: Measuring ‘Express’ is problematic because it is a popular English word appearing in may jobs postings. I had to go with Express.js and it might do it injustice.&lt;/p&gt;
&lt;p name=&quot;ade4&quot; id=&quot;ade4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Rails is the most popular web framework in the bay area by job openings.&lt;/strong&gt;&lt;/p&gt;
&lt;p name=&quot;1660&quot; id=&quot;1660&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Notable mentions are “Spring” with 2498 and “.NET” with 1120. The reason I don’t include them is Spring is not a web framework but a general application framework (that is why I compare Rails to ‘Spring MVC’): a lot of Spring openings are actually meant for big data, data science etc. Same for .NET.&lt;/p&gt;
&lt;h4 name=&quot;c1aa&quot; id=&quot;c1aa&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;How about the languages themselves?&lt;/h4&gt;
&lt;p name=&quot;01a8&quot; id=&quot;01a8&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;San Francisco Bay Area:&lt;/p&gt;
&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;e2d2&quot; id=&quot;e2d2&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Python 13866&lt;/li&gt;
&lt;li name=&quot;7ab9&quot; id=&quot;7ab9&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Java 11472&lt;/li&gt;
&lt;li name=&quot;8d67&quot; id=&quot;8d67&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Javascript 7433&lt;/li&gt;
&lt;li name=&quot;df72&quot; id=&quot;df72&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;PHP 3628&lt;/li&gt;
&lt;li name=&quot;f98f&quot; id=&quot;f98f&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Ruby 3371&lt;/strong&gt;&lt;/li&gt;
&lt;li name=&quot;9772&quot; id=&quot;9772&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Node 2301 (Not a language, I know)&lt;/li&gt;
&lt;li name=&quot;c090&quot; id=&quot;c090&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;C# 2070&lt;/li&gt;
&lt;/ol&gt;&lt;p name=&quot;4d81&quot; id=&quot;4d81&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;It might not look that impressive for Ruby but being almost tied with PHP is impressive; and a possible explanation for PHP being popular as a language while it’s frameworks aren’t is that PHP is heavily used for Wordpress, Drupal or basic short scripts. That’s not classic app development.&lt;/p&gt;
&lt;p name=&quot;46c1&quot; id=&quot;46c1&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s look at the entire United States, counting everything from startups to Big Corps.&lt;/p&gt;
&lt;p name=&quot;4ecc&quot; id=&quot;4ecc&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;United States:&lt;/p&gt;
&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;8cff&quot; id=&quot;8cff&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Asp.NET 12203&lt;/li&gt;
&lt;li name=&quot;27e9&quot; id=&quot;27e9&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Rails 8710&lt;/strong&gt;&lt;/li&gt;
&lt;li name=&quot;c6df&quot; id=&quot;c6df&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Spring MVC 3570&lt;/li&gt;
&lt;li name=&quot;93f3&quot; id=&quot;93f3&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Django 2650&lt;/li&gt;
&lt;li name=&quot;016b&quot; id=&quot;016b&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Laravel 957&lt;/li&gt;
&lt;li name=&quot;d2b5&quot; id=&quot;d2b5&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Express.js 620&lt;/li&gt;
&lt;/ol&gt;&lt;p name=&quot;3647&quot; id=&quot;3647&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;That’s really high for Rails!&lt;/p&gt;
&lt;p name=&quot;a48f&quot; id=&quot;a48f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Key conclusions and takeaways:&lt;/p&gt;
&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;e8c0&quot; id=&quot;e8c0&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Rails is still extremely popular, especially in Silicon Valley and other startup cities, but also throughout the entire U.S. It gets more mentions in job postings than it’s immediate competitors Django, Laravel, Express.JS etc.&lt;/li&gt;
&lt;li name=&quot;de3a&quot; id=&quot;de3a&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Surprisingly low numbers for Laravel and Express in the Bay area. I can’t completely explain it because I know Node has a huge following. Either Node mostly became a front end tool or the server side is done frameworkless in Node world. Whatever the case you rarely see Express.JS in job posts.&lt;/li&gt;
&lt;li name=&quot;9c2b&quot; id=&quot;9c2b&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;As a general application development frameworks (not just web) Spring and .NET are still the most popular, by quite a margin. Rails doesn’t yet come close to their numbers.&lt;/li&gt;
&lt;li name=&quot;3c21&quot; id=&quot;3c21&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;I only checked the United States. I’m positive different countries will show different results. For example, being based in the Netherlands I sense that PHP is very popular here for app development. But like it or not, the influence of the U.S on the rest of the tech industry is huge.&lt;/li&gt;
&lt;/ol&gt;&lt;h4 name=&quot;ed9a&quot; id=&quot;ed9a&quot; class=&quot;graf graf--h4 graf-after--li&quot;&gt;How about coding boot camps?&lt;/h4&gt;
&lt;p name=&quot;8e53&quot; id=&quot;8e53&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;Looking at &lt;a href=&quot;https://www.switchup.org/research/best-coding-bootcamps&quot; data-href=&quot;https://www.switchup.org/research/best-coding-bootcamps&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;Switchup’s list of best boot camps for 2018&lt;/a&gt;, &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Rails is still the most taught web framework in prominent coding boot camps&lt;/strong&gt;. Many of the big ones still choose Rails to teach app development. I see a lot of Node.JS in there and some Django too but barely any PHP. I don’t see this changing any time soon; Scala, Elixir and newcomers etc are just not a good fit for coding boot camps.&lt;/p&gt;
&lt;p name=&quot;9697&quot; id=&quot;9697&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This is important because &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;boot camps know the market and care about their graduates employment prospects&lt;/strong&gt;. They choose Rails not only because it’s fun and easy to teach but because there’s a huge market for it.&lt;/p&gt;
&lt;p name=&quot;739d&quot; id=&quot;739d&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;These conclusions somewhat contradict my previous post that argued all these frameworks are more or less equal. We should definitely be careful when assessing framework popularity and use many metrics.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 20 Jun 2018 13:37:15 +0000</pubDate>
<dc:creator>rbanffy</dc:creator>
<og:title>Demand for Ruby on Rails is Still Huge – Yoel Blum – Medium</og:title>
<og:url>https://medium.com/@yoelblum_45935/demand-for-ruby-on-rails-is-still-huge-ea4434926c57</og:url>
<og:image>https://cdn-images-1.medium.com/max/1200/1*ZlCHsXU3PuTzRdpp7w5LBg.png</og:image>
<og:description>TL;DR Looking at job postings, Rails is more popular than Django, Laravel or Express. By a lot. If you specifically measure startup cities…</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/@yoelblum_45935/demand-for-ruby-on-rails-is-still-huge-ea4434926c57</dc:identifier>
</item>
</channel>
</rss>