<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Toyota Investing $500M in Uber in Driverless Car Pact</title>
<link>https://www.wsj.com/articles/toyota-investing-500-million-in-uber-in-driverless-car-pact-1535393774</link>
<guid isPermaLink="true" >https://www.wsj.com/articles/toyota-investing-500-million-in-uber-in-driverless-car-pact-1535393774</guid>
<description>&lt;p&gt; Toyota Motor Corp. is investing about $500 million in Uber Technologies Inc. as part of an agreement by the companies to work jointly on autonomous vehicles aimed at improving safety and lowering transportation costs.&lt;/p&gt; &lt;p&gt;Toyota’s investment values Uber at about $72 billion, slightly higher than where SoftBank Group Corp. valued the ride-hailing company earlier this year with its funding, according to people familiar with the matter.&lt;/p&gt;...
  </description>
<pubDate>Mon, 27 Aug 2018 18:28:20 +0000</pubDate>
<dc:creator>smaili</dc:creator>
<og:title>Toyota Investing $500 Million in Uber in Driverless-Car Pact</og:title>
<og:description>Toyota is set to invest about $500 million in Uber as part of an agreement by the two companies to work jointly on driverless-vehicle development.</og:description>
<og:url>https://www.wsj.com/articles/toyota-investing-500-million-in-uber-in-driverless-car-pact-1535393774</og:url>
<og:image>https://images.wsj.net/im-23703/social</og:image>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wsj.com/articles/toyota-investing-500-million-in-uber-in-driverless-car-pact-1535393774</dc:identifier>
</item>
<item>
<title>How Facebook, Apple and Microsoft Are Contributing to OpenStreetMap</title>
<link>https://theodi.org/article/how-are-facebook-apple-and-microsoft-contributing-to-openstreetmap/</link>
<guid isPermaLink="true" >https://theodi.org/article/how-are-facebook-apple-and-microsoft-contributing-to-openstreetmap/</guid>
<description>&lt;p&gt;&lt;em&gt;Multinational organisations are collaborating in the open to build an openly licensed map of the world: OpenStreetMap. Here’s what we’ve learned so far about what makes this kind of collaboration work best&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.openstreetmap.org/&quot;&gt;OpenStreetMap,&lt;/a&gt; launched in 2004, has grown into one of the most successful collaboratively maintained open datasets in the world. Today, contributors to the maps include not just keen local mappers, but also a diverse mix of commercial organisations, non-governmental organisations, humanitarian organisations and also large commercial organisations.&lt;/p&gt;
&lt;p&gt;At the &lt;a href=&quot;https://2018.stateofthemap.org&quot;&gt;State of the Map&lt;/a&gt; conference in Milan, the teams from Microsoft, Apple and Facebook presented their projects, describing how they are working with communities.&lt;/p&gt;
&lt;p&gt;There were many common factors that made these projects successful. These included:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Understanding and aligning the company’s policies with those of the global and local OpenStreetMap community&lt;/strong&gt; to understand how they can work together towards common goals&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Publicly documenting their plans and goals&lt;/strong&gt; so that the community was clear about what problems were being addressed and why&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Becoming contributing members of the community&lt;/strong&gt;, making sure that each contributor has a clear affiliation and has been trained to work effectively with the community&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Engaging with the community wherever they are&lt;/strong&gt;: on mailing lists, through comments on updates, via GitHub or through a mix of social messaging applications&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Listening to the needs of the community and supporting them to fix problems with their local maps&lt;/strong&gt;, eg helping to fix local data quality problems, like incomplete or inaccurate areas, and not just focusing on their own objectives&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Being responsive to questions and concerns&lt;/strong&gt; when raised, and importantly taking on feedback from local expert contributors to help improve how they work&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Supporting the community in advocating for more open data&lt;/strong&gt; from local governments and other organisations, and helping them solve data licensing issues&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Publishing data and code under open licences&lt;/strong&gt; so they can be used as resources by the community&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Taking on some of the maintenance and mentoring work to help support the community&lt;/strong&gt;, eg by reviewing edits and helping to improve quality issues that might otherwise be left to the community mappers&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Each of these organisations is meeting their own business objectives by contributing to OpenStreetMap. And it’s also helped them to better serve their customers and users.&lt;/p&gt;
&lt;h3&gt;Working in the open&lt;/h3&gt;
&lt;p&gt;These approaches go beyond &lt;a href=&quot;https://wiki.osmfoundation.org/wiki/Directed_Editing_Policy&quot;&gt;the evolving guidelines of the OSM community&lt;/a&gt; and demonstrate a commitment to working in the open, in collaboration and partnership with the OpenStreetMap community. Any of these organisations have the resources to create independent initiatives but instead have chosen to engage with an existing project.&lt;/p&gt;
&lt;p&gt;Working in the open, to deliver equitable value from data, &lt;a href=&quot;https://theodi.org/knowledge-opinion/topics/odi-view-cambridge-analytica-facebook-and-personal-data/&quot;&gt;can help large organisations like Facebook to build trust with their users&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are perhaps some lessons here for other collaborative, community-owned open data initiatives. For example: being clear about how and where you would like commercial support and contributions. And the means by which organisations can engage with your work.&lt;/p&gt;
&lt;p&gt;For example, &lt;a href=&quot;https://osmuk.org/&quot;&gt;OpenStreetMap UK&lt;/a&gt; was formed to make it easier for organisations of all types to engage with the UK OpenStreetMap community. Having a clear contact point can help organisations who are not used to working in the open to reach out to existing communities.&lt;/p&gt;
&lt;p&gt;Our national and global data infrastructure can be stronger if we use open data, open source and open innovation as a tool for collaboration. OpenStreetMap is proving to be a great example of how this can work in practice.&lt;/p&gt;
&lt;h3&gt;State of the Map&lt;/h3&gt;
&lt;p&gt;At the ODI we work with companies and governments &lt;a href=&quot;https://theodi.org/about-the-odi/our-vision-and-manifesto/&quot;&gt;to build an open, trustworthy data ecosystem&lt;/a&gt;. To do that we need to build a sustainable and well-managed data infrastructure that creates the best social and economic value from data for everyone.&lt;/p&gt;
&lt;p&gt;As part of &lt;a href=&quot;https://theodi.org/article/how-can-we-support-the-publication-and-use-of-more-open-geospatial-data/&quot;&gt;our R&amp;amp;D project on open geospatial data&lt;/a&gt;, we attended the &lt;a href=&quot;https://2018.stateofthemap.org&quot;&gt;State of the Map&lt;/a&gt; conference in Milan. Our goal was to learn more about the &lt;a href=&quot;https://www.openstreetmap.org/&quot;&gt;OpenStreetMap&lt;/a&gt; ecosystem and how a diverse mix of communities, organisations and governments are collaborating to create an open map of the world.&lt;/p&gt;
&lt;p&gt;You can read more about what we learned in &lt;a href=&quot;https://theodi.org/article/state-of-the-map-2018-what-we-learned-about-open-geospatial-data/&quot;&gt;our previous blog post&lt;/a&gt;. In this post we wanted to share a bit more about how large organisations like Microsoft, Apple, Facebook and Telenav are working in the open with the OpenStreetMap community.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;If you work for a commercial organisation working with OpenStreetMap data, especially in the UK, we’d love to hear about your experiences working with the OpenStreetMap community, the data and the value you’re creating from openly licensed geospatial data. &lt;a href=&quot;https://theodi.org/cdn-cgi/l/email-protection#0d6168646a6523696269697e4d79656862696423627f6a&quot;&gt;Contact Leigh Dodds&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Image: by &lt;a href=&quot;https://pixabay.com/en/aerial-view-river-clouds-landscape-1031760/&quot;&gt;Pixabay&lt;/a&gt; (&lt;a href=&quot;https://creativecommons.org/publicdomain/zero/1.0/deed.en&quot;&gt;cc by 1.0&lt;/a&gt;)&lt;/p&gt;
</description>
<pubDate>Mon, 27 Aug 2018 18:08:23 +0000</pubDate>
<dc:creator>ephesee</dc:creator>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://theodi.org/article/how-are-facebook-apple-and-microsoft-contributing-to-openstreetmap/</dc:identifier>
</item>
<item>
<title>Real world SSD wearout</title>
<link>https://blog.okmeter.io/real-world-ssd-wearout-a3396a35c663</link>
<guid isPermaLink="true" >https://blog.okmeter.io/real-world-ssd-wearout-a3396a35c663</guid>
<description>&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot; readability=&quot;83&quot;&gt;

&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*zFgiHN4aXwDc8SR7.png&quot; data-width=&quot;575&quot; data-height=&quot;303&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*zFgiHN4aXwDc8SR7.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1200/0*zFgiHN4aXwDc8SR7.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;4c8e&quot; id=&quot;4c8e&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;A year ago we’ve added SMART metrics collection to our monitoring agent that collects disk drive attributes on clients servers.&lt;/p&gt;
&lt;p name=&quot;66ab&quot; id=&quot;66ab&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So here a couple of interesting cases from the real world.&lt;/p&gt;
&lt;p name=&quot;2df6&quot; id=&quot;2df6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Because we needed it to work without installing any additional software, like smartmontools, we implemented collection not of all the attributes, but only basic and not vendor-specific ones — to be able to provide consistent experience. And also that way we skipped burdensome task of maintaining a knowledge base of specific stuff — and I like that a lot :)&lt;/p&gt;
&lt;p name=&quot;353f&quot; id=&quot;353f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This time we’ll discuss only SMART attribute named “media wearout indicator”. Normalized, it shows a percentage of “write resource” left in the device. Under the hood the device keeps track of the number of cycles the NAND media has undergone, and the percentage is calculated against the maximum number of cycles for that device. The normalized value declines linearly from 100 to 1 as the average erase cycle count increases from 0.&lt;/p&gt;
&lt;h3 name=&quot;3702&quot; id=&quot;3702&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Are there any actually dead SSDs?&lt;/h3&gt;
&lt;p name=&quot;7cd4&quot; id=&quot;7cd4&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Though SSDs are pretty common nowadays, just couple of years earlier you could hear a lot of fear talk about SSD wearout. So we wanted to see if some of it were true. So we searched for the maximum wearout across all the devices of all of our clients.&lt;/p&gt;
&lt;blockquote name=&quot;e9f5&quot; id=&quot;e9f5&quot; class=&quot;graf graf--pullquote graf-after--p&quot;&gt;
&lt;p&gt;It was just 1%&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;4be9&quot; id=&quot;4be9&quot; class=&quot;graf graf--p graf-after--pullquote&quot;&gt;Reading the docs says it just won’t go below 1%. So it is &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;worn&lt;/strong&gt; &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;out&lt;/strong&gt;.&lt;/p&gt;
&lt;p name=&quot;2426&quot; id=&quot;2426&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We notified this client. Turns out it was a dedicated server in Hetzner. Their support replaced the device:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*SdQ9aCAwRGX458JSUh0hEA.png&quot; data-width=&quot;969&quot; data-height=&quot;298&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*SdQ9aCAwRGX458JSUh0hEA.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*SdQ9aCAwRGX458JSUh0hEA.png&quot;/&gt;&lt;/div&gt;
&lt;h3 name=&quot;daea&quot; id=&quot;daea&quot; class=&quot;graf graf--h3 graf-after--figure&quot;&gt;Do SSDs die fast?&lt;/h3&gt;
&lt;p name=&quot;f0fe&quot; id=&quot;f0fe&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;As we introduced SMART monitoring for some of the clients already some time ago, we have accumulated history. And now we can see it on a timeline.&lt;/p&gt;
&lt;p name=&quot;d7b1&quot; id=&quot;d7b1&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;A server with highest wearout rate we have across our clients servers unfortunately was added to okmeter.io monitoring only two month ago:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*Y7q1_ElmAIvSxYah.png&quot; data-width=&quot;965&quot; data-height=&quot;296&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*Y7q1_ElmAIvSxYah.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*Y7q1_ElmAIvSxYah.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;08b2&quot; id=&quot;08b2&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This chart indicates that during these two month only, it burned through 8% of “write resource”.&lt;/p&gt;
&lt;blockquote name=&quot;531e&quot; id=&quot;531e&quot; class=&quot;graf graf--blockquote graf-after--p&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;So 100% of this SSD lifetime under that load will end in 100/(8/2) = &lt;strong class=&quot;markup--strong markup--blockquote-strong&quot;&gt;2 years&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;60c3&quot; id=&quot;60c3&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;Is that a lot or too little? I don’t know. But let’s check what kind of load it’s serving?&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*Lz1UAiMmmGoEXWMO.png&quot; data-width=&quot;964&quot; data-height=&quot;299&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*Lz1UAiMmmGoEXWMO.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*Lz1UAiMmmGoEXWMO.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;84aa&quot; id=&quot;84aa&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;As you can see, it’s &lt;code class=&quot;markup--code markup--p-code&quot;&gt;ceph&lt;/code&gt; doing all the disk writes, but it’s not doing these writes for itself — it’s a storage system for some application. This particular environment was running under Kubernetes, so let’s sneak a peek what’s running inside:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*bkDlCKW1gLB4WsNS.png&quot; data-width=&quot;967&quot; data-height=&quot;301&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*bkDlCKW1gLB4WsNS.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*bkDlCKW1gLB4WsNS.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;7612&quot; id=&quot;7612&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;It’s Redis! Though you might’ve noticed divergence in values with the previous chart — values here are 2 times lower (it’s probably due to ceph’s data replication), load profile is the same, so we conclude it’s redis after all.&lt;/p&gt;
&lt;p name=&quot;4c6a&quot; id=&quot;4c6a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s see what redis is doing:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*EfSMZwmgn8X2RUoI.png&quot; data-width=&quot;967&quot; data-height=&quot;300&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*EfSMZwmgn8X2RUoI.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*EfSMZwmgn8X2RUoI.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;0315&quot; id=&quot;0315&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;So it’s on average less than 100 write commands per second. As you might know, there’s two ways Redis makes actual writes to disk:&lt;/p&gt;
&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;35b2&quot; id=&quot;35b2&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;RDB&lt;/strong&gt; — which periodically snapshots all the dataset to the disk, and&lt;/li&gt;
&lt;li name=&quot;9b7e&quot; id=&quot;9b7e&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;AOF&lt;/strong&gt; — which writes a log of all the changes.&lt;/li&gt;
&lt;/ul&gt;&lt;p name=&quot;c68c&quot; id=&quot;c68c&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;It’s obvious that’s here we saw RDB with 1 minute dumps:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*__u2ctpL9Bt62f7G.png&quot; data-width=&quot;976&quot; data-height=&quot;299&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*__u2ctpL9Bt62f7G.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*__u2ctpL9Bt62f7G.png&quot;/&gt;&lt;/div&gt;
&lt;h3 name=&quot;7dd5&quot; id=&quot;7dd5&quot; class=&quot;graf graf--h3 graf-after--figure&quot;&gt;Case: SSD + RAID&lt;/h3&gt;
&lt;p name=&quot;db37&quot; id=&quot;db37&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;We see that there are three common patterns of server storage system setup with SSDs:&lt;/p&gt;
&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;5be4&quot; id=&quot;5be4&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Two SSDs in a RAID-1 that holds everything there is.&lt;/li&gt;
&lt;li name=&quot;97eb&quot; id=&quot;97eb&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Some HDDs + SSDs in a RAID-10 — we see that setup a lot on traditional RDBMS servers: OS, WAL and some “cold” data on HDD, while SSD array hold hotest data.&lt;/li&gt;
&lt;li name=&quot;c777&quot; id=&quot;c777&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Just a bunch of SSDs (JBOD) for some NoSQL like Apache Cassandra.&lt;/li&gt;
&lt;/ul&gt;&lt;p name=&quot;0f3e&quot; id=&quot;0f3e&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;So in the first case with RAID-1 writes go to both disks symmetrically, and wearout happens with the same rate:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*afOWCXamhJrXccpL.png&quot; data-width=&quot;970&quot; data-height=&quot;297&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*afOWCXamhJrXccpL.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*afOWCXamhJrXccpL.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;bd1c&quot; id=&quot;bd1c&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Looking for some anomalies we found one server where it was completely different:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*fzHUjZnEBD_mwdUY.png&quot; data-width=&quot;975&quot; data-height=&quot;300&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*fzHUjZnEBD_mwdUY.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*fzHUjZnEBD_mwdUY.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;88e1&quot; id=&quot;88e1&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Checking mount options, to understand this, didn’t produce much insight — all the partitions were RAID-1 &lt;code class=&quot;markup--code markup--p-code&quot;&gt;mdraid&lt;/code&gt;s:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*ueVc9ZCCoIBvAQIF.png&quot; data-width=&quot;1204&quot; data-height=&quot;145&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*ueVc9ZCCoIBvAQIF.png&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/0*ueVc9ZCCoIBvAQIF.png&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot; readability=&quot;32&quot;&gt;
&lt;p name=&quot;f678&quot; id=&quot;f678&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;But looking for per device IO metrics we see, again, there’s difference between two disks. And &lt;code class=&quot;markup--code markup--p-code&quot;&gt;/dev/sda&lt;/code&gt; gets more bytes written:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*bPqGKHbnWbnLl9uv.png&quot; data-width=&quot;977&quot; data-height=&quot;304&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*bPqGKHbnWbnLl9uv.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*bPqGKHbnWbnLl9uv.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;f5de&quot; id=&quot;f5de&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Turns out there’s swap configured on one of the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;/dev/sda&lt;/code&gt; partitions. And pretty decent swap IO on this server:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*JP9Is8jbLCmtmmhP.png&quot; data-width=&quot;968&quot; data-height=&quot;300&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*JP9Is8jbLCmtmmhP.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*JP9Is8jbLCmtmmhP.png&quot;/&gt;&lt;/div&gt;
&lt;h3 name=&quot;baac&quot; id=&quot;baac&quot; class=&quot;graf graf--h3 graf-after--figure&quot;&gt;SSD wearout and PostgreSQL&lt;/h3&gt;
&lt;p name=&quot;f757&quot; id=&quot;f757&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;This journey began with me looking to check SSD wearout with different Postgres write load profiles. But not much luck — all of our client’s Postgres databases, with at least somewhat high write load, are configured pretty carefully — writes go mostly to HDDs.&lt;/p&gt;
&lt;p name=&quot;cd39&quot; id=&quot;cd39&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;But I found one pretty interesting case nevertheless:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*YsUWDGfQIBlam0Zl.png&quot; data-width=&quot;972&quot; data-height=&quot;300&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*YsUWDGfQIBlam0Zl.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*YsUWDGfQIBlam0Zl.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;5113&quot; id=&quot;5113&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;We see these two SSDs in a RAID-1 wore out 4% during 3 months. But checking if it’s high amount of WAL writes turned out to be wrong — it’s only less than 100Kb/s:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*ltKc_FaKVtrbfL6o.png&quot; data-width=&quot;973&quot; data-height=&quot;299&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*ltKc_FaKVtrbfL6o.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*ltKc_FaKVtrbfL6o.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;0415&quot; id=&quot;0415&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;I figured that probably Postgres generates writes in some other way, and it is indeed. Constant temp files writes all the time:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*nhOuHI8tLKGA-Ib8.png&quot; data-width=&quot;972&quot; data-height=&quot;302&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*nhOuHI8tLKGA-Ib8.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*nhOuHI8tLKGA-Ib8.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;cd5e&quot; id=&quot;cd5e&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Thanks to Postgres elaborate internal statistics and okmeter.io’s rich support for it, we easily spotted the root cause of that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*arJ0IoqyjvFMSfEM9te_lg.png&quot; data-width=&quot;1188&quot; data-height=&quot;274&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*arJ0IoqyjvFMSfEM9te_lg.png&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/1*arJ0IoqyjvFMSfEM9te_lg.png&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot; readability=&quot;10.068711656442&quot;&gt;
&lt;p name=&quot;da0a&quot; id=&quot;da0a&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;It was a &lt;code class=&quot;markup--code markup--p-code&quot;&gt;SELECT&lt;/code&gt; query generating all that load and wearout! &lt;code class=&quot;markup--code markup--p-code&quot;&gt;SELECT&lt;/code&gt;’s in Postgres can sometime generate even non-temp file, but real writes. &lt;a href=&quot;https://blog.okmeter.io/postgresql-exploring-how-select-queries-can-produce-disk-writes-f36c8bee6b6f&quot; data-href=&quot;https://blog.okmeter.io/postgresql-exploring-how-select-queries-can-produce-disk-writes-f36c8bee6b6f&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Read about it here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 name=&quot;9087&quot; id=&quot;9087&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Summary&lt;/h3&gt;
&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;23aa&quot; id=&quot;23aa&quot; class=&quot;graf graf--li graf-after--h3&quot;&gt;Redis+RDB generates a ton of disk writes and it depends not on the amount of changes in Redis db, but on DB size and dump frequency. RDB seems to produce the maximum Write Amplification from all known to me storages.&lt;/li&gt;
&lt;li name=&quot;45ab&quot; id=&quot;45ab&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Actively used SWAP on SSD is probably a bad idea. Unless you want to add some jitter to RAID-1 SSDs wearout.&lt;/li&gt;
&lt;li name=&quot;95dd&quot; id=&quot;95dd&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;In DBMSes like Postgresql it might be not only WAL and datafiles that dominate disk writes. Bad database design or access patterns might produce a lot of temp files writes. &lt;a href=&quot;https://blog.okmeter.io/postgresql-query-monitoring-375ee8048c10&quot; data-href=&quot;https://blog.okmeter.io/postgresql-query-monitoring-375ee8048c10&quot; class=&quot;markup--anchor markup--li-anchor&quot; target=&quot;_blank&quot;&gt;Read how to monitor Postgres queries&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 name=&quot;29e3&quot; id=&quot;29e3&quot; class=&quot;graf graf--h3 graf-after--li&quot;&gt;That’s all for today. Be aware of your SSDs wearout!&lt;/h3&gt;
&lt;p name=&quot;8032&quot; id=&quot;8032&quot; class=&quot;graf graf--p graf-after--h3 graf--trailing&quot;&gt;Follow us on &lt;a href=&quot;https://blog.okmeter.io/&quot; data-href=&quot;https://blog.okmeter.io/&quot; class=&quot;markup--anchor markup--p-anchor&quot; target=&quot;_blank&quot;&gt;our blog&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/okmeterio/&quot; data-href=&quot;https://twitter.com/okmeterio/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;twitter&lt;/a&gt; to read more cases.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 27 Aug 2018 16:08:53 +0000</pubDate>
<dc:creator>MBCook</dc:creator>
<og:title>Real world SSD wearout – okmeter.io blog</og:title>
<og:url>https://blog.okmeter.io/real-world-ssd-wearout-a3396a35c663</og:url>
<og:image>https://cdn-images-1.medium.com/max/1200/0*zFgiHN4aXwDc8SR7.png</og:image>
<og:description>A year ago we’ve added SMART metrics collection to our monitoring agent that collects disk drive attributes on clients servers.</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.okmeter.io/real-world-ssd-wearout-a3396a35c663?gi=2d96c1227704</dc:identifier>
</item>
<item>
<title>A Road to Common Lisp</title>
<link>http://stevelosh.com/blog/2018/08/a-road-to-common-lisp/</link>
<guid isPermaLink="true" >http://stevelosh.com/blog/2018/08/a-road-to-common-lisp/</guid>
<description>&lt;p&gt;I’ve gotten a bunch of emails asking for advice on how to learn Common Lisp in the present day. I decided to write down all the advice I’ve been giving through email and social media posts in the hopes that someone might find it useful.&lt;/p&gt;
&lt;p&gt;One disclaimer up front: this is &lt;em&gt;a&lt;/em&gt; road to Common Lisp, not &lt;em&gt;the&lt;/em&gt; road to Common Lisp. It’s what I followed (without some of the dead ends) and has a &lt;em&gt;lot&lt;/em&gt; of my personal opinions baked in, but it is by no means the only way to learn the language.&lt;/p&gt;

&lt;h2 id=&quot;context&quot;&gt;Context&lt;/h2&gt;
&lt;p&gt;I think it’s important to have a sense of where Common Lisp came from and what kind of a language it is before you start learning it. There are some things that will seem very strange if you’re coming straight from modern languages, but will make more sense if you’ve got a bit of background context.&lt;/p&gt;
&lt;h3 id=&quot;history&quot;&gt;History&lt;/h3&gt;
&lt;p&gt;Common Lisp has a long, deep history. I’m not going to try to cover it all here — if you’re interested you should check out some of the following (in roughly increasing order of detail):&lt;/p&gt;
&lt;p&gt;I realize you probably won’t want to read all of the links above immediately, so here’s a whirlwind tour of sixty years of Lisp.&lt;/p&gt;
&lt;p&gt;Lisp began in the late 1950’s. It was invented by John McCarthy at MIT.&lt;/p&gt;
&lt;p&gt;Over the next twenty or so years various versions and dialects of Lisp grew and flourished. Some of the more notable dialects were Maclisp, BBN Lisp/Interlisp, Franz Lisp, Spice Lisp, and Lisp Machine Lisp. There were others too. The point is that there were a &lt;em&gt;lot&lt;/em&gt; of different implementations, all growing, changing, and trying out different things.&lt;/p&gt;
&lt;p&gt;(Scheme also originated in this time frame, but took a very different route and diverged from the path we’re looking at. I won’t cover Scheme in this post.)&lt;/p&gt;
&lt;p&gt;In the early 1980s people decided that having a whole slew of mutually-incompatible dialects of Lisp might be not be ideal. An effort was made to take these different languages that had grown organically and produce one common language that would satisfy the needs of everyone (or at least a reasonable subset of “everyone”). In 1984 the first edition of Guy Steele’s &lt;a href=&quot;https://www.cs.cmu.edu/Groups/AI/html/cltl/cltl2.html&quot;&gt;Common Lisp: the Language&lt;/a&gt; was published.&lt;/p&gt;
&lt;p&gt;If you do some math you’ll see that at the time the book was published Lisp had around twenty-five years of real-world use, experimentation, experience, and history to draw upon. Even so, the book alone didn’t quite satisfy everyone and in 1986 a committee (X3J13) was formed to produce an ANSI specification for Common Lisp.&lt;/p&gt;
&lt;p&gt;While the committee worked on the standardization process, in 1990 the second edition of Common Lisp: the Language was published. This was more comprehensive and contained some of the things the committee was working on (see the comp.lang.lisp FAQ linked above for more on this). At this point the Lisp family of languages had over thirty years of experience and history to draw upon. For comparison: Python (a “modern” language many people think of as also being “kind of old”) &lt;a href=&quot;https://en.wikipedia.org/wiki/History_of_Python#Early_history&quot;&gt;was released&lt;/a&gt; for the first time the following year.&lt;/p&gt;
&lt;p&gt;In 1992 the X3J13 committee published the first draft of the new Common Lisp ANSI standard for public review (see Pitman’s paper). The draft was approved in 1994 and the approved specification was finally published in 1995. At this point Lisp was over thirty-five years old. The first version of Ruby &lt;a href=&quot;https://en.wikipedia.org/wiki/Ruby_(programming_language)#First_publication&quot;&gt;was released&lt;/a&gt; in December of that year.&lt;/p&gt;
&lt;p&gt;That’s the end of the history lesson. There has not been another revision of the ANSI specification of Common Lisp. The version published in 1995 is the one that is still used today — if you see something calling itself “an implementation of Common Lisp” today, that is the specification it’s referring to.&lt;/p&gt;
&lt;h3 id=&quot;consequences&quot;&gt;Consequences&lt;/h3&gt;
&lt;p&gt;I wanted to give you a quick overview of the history of Common Lisp because I want you to know what you’re getting yourself into. I want you to realize that Common Lisp is a stable, large, practical, extensible, ugly language. Understanding these characteristics will make a lot of things make more sense as you learn the language, and I want to talk a little bit more about each of them before I start offering recommendations.&lt;/p&gt;
&lt;h4 id=&quot;escaping-the-hamster-wheel-of-backwards-incompatibility&quot;&gt;Escaping the Hamster Wheel of Backwards Incompatibility&lt;/h4&gt;
&lt;p&gt;If you’re coming from other languages, you’re probably used to things breaking when you “upgrade” your language implementation and/or libraries. If you want to run Ruby code you wrote ten years ago on the latest version of Ruby, it’s probably going to take some effort to update it. My current day job is in Scala, and if a library’s last activity is more than 2 or 3 years old on Github I just assume it won’t work without a significant amount of screwing around on my part. The Hamster Wheel of Backwards Incompatibility we deal with every day is a fact of life in most modern languages, though some are certainly better than others.&lt;/p&gt;
&lt;p&gt;If you learn Common Lisp, this is usually not the case. In the next section of this post I’ll be recommending a book written in 1990. You can run its code, unchanged, in a Common Lisp implementation released last month. After years of jogging on the Hamster Wheel of Backwards Incompatibility I cannot tell you how much of a &lt;em&gt;relief&lt;/em&gt; it is to be able to write code and reasonably expect it to still work in twenty years.&lt;/p&gt;
&lt;p&gt;Of course, this is only the case for the language itself — if you depend on any libraries there’s always the chance they might break when you update them. But I’ve found the stability of the core language is contagious, and overall the Common Lisp community seems fairly good about maintaining backwards compatibility.&lt;/p&gt;
&lt;p&gt;I’ll be honest though: there are exceptions. As you learn the language and start using libraries you’ll start noticing some library authors who don’t bother to document and preserve stable APIs for their libraries, and if staying off the Hamster Wheel is important to you you’ll learn to avoid relying on code written by those people as much as possible.&lt;/p&gt;
&lt;h4 id=&quot;practicality-begets-purity&quot;&gt;Practicality Begets Purity&lt;/h4&gt;
&lt;p&gt;Another thing to understand about Common Lisp is that it’s a large, practical language. The second edition of Common Lisp: the Language (usually abbreviated as “CLtL2” by Common Lisp programmers) is 971 pages long, not including the preface, references, or index. You can get a surprising amount done by writing pure Common Lisp without much extra support.&lt;/p&gt;
&lt;p&gt;When programming applications in Common Lisp people will often depend on a small(ish) number of stable libraries, and library writers often try to minimize dependencies by utilizing as much of the core language as possible. I try to stick to fewer than ten or so dependencies for my applications and no more than two or three for my libraries (preferably zero, if possible), but I’m probably a bit more conservative than most folks. I &lt;em&gt;really&lt;/em&gt; don’t like the Hamster Wheel.&lt;/p&gt;
&lt;p&gt;It’s also worth noting that since Common Lisp has been around and stable for so long, it has &lt;em&gt;libraries&lt;/em&gt; older and more stable than many programming languages. For example: Bordeaux Threads (the de-facto threading library for Common Lisp) was first proposed in 2004 and released soon after (2006 at the latest but possibly earlier, it’s hard to tell because so many links are dead now), which makes it about fourteen years old. So yes, threading is handled by a library, but I’m not worried about it breaking my code in the next decade or two.&lt;/p&gt;
&lt;p&gt;My advice is this: as you learn Common Lisp and look for libraries, try to suppress the voice in the back of your head that says “This project was last updated six years ago? That’s probably abandoned and broken.” The stability of Common Lisp means that sometimes libraries can just be &lt;em&gt;done&lt;/em&gt;, not &lt;em&gt;abandoned&lt;/em&gt;, so don’t dismiss them out of hand.&lt;/p&gt;
&lt;h4 id=&quot;extensibility&quot;&gt;Extensibility&lt;/h4&gt;
&lt;p&gt;Part of Common Lisp’s practicality comes from its extensibility. No one has been clamoring for a new version of the specification that adds features because Common Lisp’s extensibility allows users to add new features to the language as plain old libraries, without having to alter the core language. Macros are what might come to mind when you hear “Lisp extensibility”, and of course that’s part of it. Macros allow users to write libraries that would need to be core language features in other languages.&lt;/p&gt;
&lt;p&gt;Common Lisp doesn’t include string interpolation. You want it? No problem, you don’t have to wait for &lt;a href=&quot;https://docs.scala-lang.org/overviews/core/string-interpolation.html&quot;&gt;Scala 2.10&lt;/a&gt; or &lt;a href=&quot;https://www.python.org/dev/peps/pep-0498/&quot;&gt;Python 3.6&lt;/a&gt;, just &lt;a href=&quot;https://edicl.github.io/cl-interpol/&quot;&gt;use a library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Want to try some nondeterministic programming without any boilerplate? &lt;a href=&quot;https://nikodemus.github.io/screamer/&quot;&gt;Grab a library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pattern matching syntax can make for some really beautiful, readable code. Common Lisp doesn’t include it, but of course &lt;a href=&quot;https://github.com/guicho271828/trivia/wiki/What-is-pattern-matching%3F-Benefits%3F&quot;&gt;there’s a library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enjoying algebraic data types in Haskell or Scala? Here’s your &lt;a href=&quot;https://github.com/tarballs-are-good/cl-algebraic-data-type&quot;&gt;library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All of these libraries rely on macros to make using them feel seamless. Of course you could &lt;em&gt;do&lt;/em&gt; all of that without macros, but you’ve have to add a layer of boilerplate to manage evaluation. This:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;(match foo
  '(list x y z) (lambda (x y z) (+ x y z))
  '(vector x y) (lambda (x y) (- x y)))
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;just doesn’t flow off the fingers like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;(match foo
  ((list x y z) (+ x y z))
  ((vector x y) (- x y)))
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;No one’s up in arms trying to get a new revision of the Common Lisp standard to add pattern matching because you can write it as a library and get 90% or more of what you’ve get if it were built in. The language gives you enough power to extend it in a way that feels like the extension was there from the beginning.&lt;/p&gt;
&lt;p&gt;Having things that are core features in other languages be provided by libraries might seem at odds with the previous section about minimizing dependencies, and to some extent that’s true. But I think there’s a happy medium where you can write stable libraries in the core language and then depend on a small number of those libraries in your applications to add exactly the features you need for any particular problem.&lt;/p&gt;
&lt;h4 id=&quot;power&quot;&gt;Power&lt;/h4&gt;
&lt;p&gt;Macros are one of the things that make Lisp so extensible, because they let you transform arbitrary code into other arbitrary code. This is true for macros in languages like C too, but Common Lisp macros are different because they’re &lt;em&gt;part of the language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In C you have a layer of macros on top, written in a preprocessor macro language. The macro layer and the language layer are separate from each other, with the macro layer providing one one extra level of abstractive power (which, don’t get me wrong, is certainly useful).&lt;/p&gt;
&lt;p&gt;In Common Lisp, you write macros &lt;em&gt;in Common Lisp itself&lt;/em&gt;. You can then use those macros to write functions, and use those functions to write more macros. Instead of two stratified layers it’s a &lt;em&gt;feedback loop&lt;/em&gt; of abstractive power.&lt;/p&gt;
&lt;p&gt;But macros aren’t the only thing about Common Lisp that make it so practical and extensible. Something people often don’t realize is that while Common Lisp is an extremely high-level language thanks to macros, it also has plenty of low-level facilities as part of the language. It’s never going to be as low-level as something like C, Rust, or Forth, but you might be surprised at some of the things that the ANSI spec includes.&lt;/p&gt;
&lt;p&gt;Want to see the assembly code a particular function compiles down to? &lt;a href=&quot;http://clhs.lisp.se/Body/f_disass.htm&quot;&gt;&lt;code&gt;DISASSEMBLE&lt;/code&gt;&lt;/a&gt; it!&lt;/p&gt;
&lt;p&gt;Want to stack-allocate something to avoid some garbage collection? X3J13 &lt;a href=&quot;http://clhs.lisp.se/Body/d_dynami.htm&quot;&gt;thought of that&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Need arrays of unboxed floats to ship to a graphics card? &lt;a href=&quot;http://clhs.lisp.se/Body/15_ab.htm&quot;&gt;The standard allows for that&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Think &lt;code&gt;GOTO&lt;/code&gt; should be considered helpful, not harmful? Well, okay, we’re all adults here. &lt;a href=&quot;http://clhs.lisp.se/Body/s_tagbod.htm&quot;&gt;Good luck&lt;/a&gt;, try not to shoot your foot off.&lt;/p&gt;
&lt;p&gt;Need to do unsigned 8-bit arithmetic in your Game Boy emulator, but would prefer it to compile down to just a machine instruction or two? &lt;a href=&quot;https://pdfs.semanticscholar.org/7089/0eff0e93aba49174a9346731f4bf9225706d.pdf&quot;&gt;It’s possible&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Not all Common Lisp implementations actually perform all these optimizations, but the designers of Common Lisp had the foresight to include the language features needed to support them. You can write vanilla Common Lisp as defined by the standard and trust that it will run everywhere, and implementations that &lt;em&gt;do&lt;/em&gt; support these kinds of things will take advantage of the optimization opportunities.&lt;/p&gt;
&lt;p&gt;This combination of supporting extremely high-level programming with macros and a reasonable amount of low-level optimization mean that even though the specification is over twenty years old, it’s still a good solid base to build on today. The thirty years of experience and history the designers were drawing from allowed them to create a very practical language that has survived for decades.&lt;/p&gt;
&lt;h4 id=&quot;ugliness&quot;&gt;Ugliness&lt;/h4&gt;
&lt;p&gt;It’s also important to realize that while Common Lisp might be very practical, the need to accommodate existing users and dialects means that there are plenty of ugly parts. If you buy a paper copy of the second edition of Common Lisp: the Language and look up “kludges” in the index you’ll find this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://stevelosh.com/media/images/blog/2018/07/lisp-kludge.jpeg&quot;&gt;&lt;img src=&quot;http://stevelosh.com/media/images/blog/2018/07/lisp-kludge.jpeg&quot; alt=&quot;Photo of a page of CLtL2's Index, listing &amp;quot;kludges&amp;quot; as pages 1 to 971&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Common Lisp is not a beautiful crystal of programming language design. It’s a scruffy workshop with a big pegboard wall of tools, a thin layer of sawdust on the floor, a filing cabinet in the office with a couple of drawers that open perpendicular to the rest, and there’s a weird looking saw with &lt;code&gt;RPLACD&lt;/code&gt; written on the side sitting off in a corner where no one’s touched it for twenty years.&lt;/p&gt;
&lt;p&gt;This historical baggage is a price paid to ensure Common Lisp had a future. It made it practical for people using the old dialects to actually adopt Common Lisp with a reasonable amount of effort. If the designers had tried to make it perfect and beautiful this could have made it too different to port implementations and code to and might have resulted in the language being ignored, instead of being adopted and embraced.&lt;/p&gt;
&lt;h2 id=&quot;a-road-to-learning-common-lisp&quot;&gt;A Road to Learning Common Lisp&lt;/h2&gt;
&lt;p&gt;If all of this hasn’t scared you away from the language, let’s talk about how you can learn it in 2018.&lt;/p&gt;
&lt;p&gt;If you search around on the internet for Common Lisp tutorials and guides, you’re not going to find as much as you might expect. This is because a lot of Common Lisp reference material was created before or during the infancy of the internet. There are a &lt;em&gt;lot&lt;/em&gt; of books about Common Lisp out there. Some are better than others. I’ll recommend the ones I think are the best, but don’t hesitate to browse around and find others.&lt;/p&gt;
&lt;h3 id=&quot;get-a-lisp&quot;&gt;Get a Lisp&lt;/h3&gt;
&lt;p&gt;To get started with Common Lisp you’ll need to install a Common Lisp implementation. Common Lisp is an ANSI specification, so there are multiple implementations of it, which gives you choices. There are a bunch of options, but I’ll make it simple for you:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;If you’re using MacOS and want a single GUI app you can download from the App Store, choose &lt;a href=&quot;https://ccl.clozure.com/&quot;&gt;ClozureCL&lt;/a&gt; (often abbreviated “CCL”).&lt;/li&gt;
&lt;li&gt;Otherwise, choose &lt;a href=&quot;http://www.sbcl.org/&quot;&gt;SBCL&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;That’s Clozure with a Z. Clojure is something entirely different that just happens to have a confusingly similar name.&lt;/p&gt;
&lt;p&gt;You might also hear of something called CLISP, which sounds like it might be what you want. It’s not. CLISP is just another implementation, but it hasn’t had a release in eight years (even though development is still ongoing in its source repos!) and it’s not as commonly used as CCL or SBCL, so it’ll be harder to find help if you have questions about the installation, etc.&lt;/p&gt;
&lt;p&gt;You might also hear about something called Roswell. Don’t use Roswell, you don’t need it (yet (or at all)).&lt;/p&gt;
&lt;p&gt;Just install SBCL or CCL for now, you can explore the other options once you’ve got your bearings a bit better.&lt;/p&gt;
&lt;h3 id=&quot;pick-an-editor&quot;&gt;Pick an Editor&lt;/h3&gt;
&lt;p&gt;You might hear people tell you that you &lt;em&gt;must&lt;/em&gt; learn Emacs before learning Common Lisp. They’re wrong. You can get started learning the language just fine in whatever text editor you’re comfortable in.&lt;/p&gt;
&lt;p&gt;If you don’t have a preference, CCL itself comes bundled with a text editor on MacOS. That one will work just fine to start.&lt;/p&gt;
&lt;p&gt;Emacs, Vim, Sublime Text, Atom, whatever, for now it doesn’t matter. As long as it can balance parentheses, highlight comments and strings, and autoindent Lisp code that’s all you need to start. Worry about shaving the editor yak once you’re more comfortable in the language.&lt;/p&gt;
&lt;h3 id=&quot;hello-lisp&quot;&gt;Hello, Lisp&lt;/h3&gt;
&lt;p&gt;To check that you’ve got everything set up properly, make a &lt;code&gt;hello.lisp&lt;/code&gt; file with the following contents:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;write-line&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;What is your name?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;read-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, ~A.~%&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don’t worry about what this means yet, it’s just a check that everything’s working properly.&lt;/p&gt;
&lt;p&gt;Open an SBCL or CCL REPL and load the file by entering &lt;code&gt;(load &quot;hello.lisp&quot;)&lt;/code&gt;, then call the function and make sure it works. It should look something like this if you picked SBCL:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ sbcl
* (load &quot;hello.lisp&quot;)

T
* (hello)
What is your name?
Steve
Hello, Steve.
NIL
*
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Or if you chose CCL but still want to use the command line, rather than the MacOS app (the command line program might be annoyingly named &lt;code&gt;ccl64&lt;/code&gt; if you’re on a 64-bit system):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ ccl64
Clozure Common Lisp Version ...

? (load &quot;hello.lisp&quot;)
#P&quot;/home/sjl/Desktop/hello.lisp&quot;
? (hello)
What is your name?
Steve
Hello, Steve.
NIL
?
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If your arrow keys and backspace don’t work in the REPL, use &lt;a href=&quot;https://github.com/hanslub42/rlwrap&quot;&gt;&lt;code&gt;rlwrap&lt;/code&gt;&lt;/a&gt; to fix that. &lt;code&gt;rlwrap sbcl&lt;/code&gt; will give you a non-miserable REPL. &lt;code&gt;rlwrap&lt;/code&gt; is a handy tool to have in your toolbox anyway.&lt;/p&gt;
&lt;h3 id=&quot;a-gentle-introduction&quot;&gt;A Gentle Introduction&lt;/h3&gt;
&lt;p&gt;The best book I’ve found for getting started in Common Lisp is &lt;a href=&quot;https://www.cs.cmu.edu/~dst/LispBook/&quot;&gt;Common Lisp: A Gentle Introduction to Symbolic Computation&lt;/a&gt;. This book really does strive to be gentle. Even if you’ve programmed before I’d still recommend starting here because it eases you into the language.&lt;/p&gt;
&lt;p&gt;The 1990 edition is available free from the site, and there’s a 2013 reprint which fixes some minor errors in the 1990 version. If you can afford it I’d recommend buying the 2013 edition, but the 1990 version will also do fine.&lt;/p&gt;
&lt;p&gt;Go through the book and &lt;em&gt;do all the exercises&lt;/em&gt;. This will take a while, and is mainly meant to get you started overcoming some of the main obstacles to being comfortable in Common Lisp, such as:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;How am I ever going to remember all these weird function names?&lt;/li&gt;
&lt;li&gt;Why do people use strings so rarely?&lt;/li&gt;
&lt;li&gt;When do I need the god damn quotation mark?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you find the book is moving too slow, just skim forward a bit. Skimming is a very useful skill to practice as a programmer. I think it’s better for authors to err on the side of explaining too much when writing books and documentation — expert readers should be comfortable skimming if you explain too &lt;em&gt;much&lt;/em&gt;, but new users will be stuck wallowing in confusion if you’re too terse. Creating hours of newbie misery and confusion to save a few flicks of an expert’s scroll wheel is a poor tradeoff to make.&lt;/p&gt;
&lt;p&gt;You should also join the &lt;code&gt;#clschool&lt;/code&gt; channel on the Freenode IRC network so you can ask questions if you get stuck. For the most part people there are friendly and helpful, though I’ll warn you in advance that there’s at least one person who can sometimes be abrasive. There’s also a &lt;code&gt;#clnoobs&lt;/code&gt; channel, but that was mostly abandoned during the latest wave of Freenode spam because no one had ops to help combat the spam.&lt;/p&gt;
&lt;p&gt;If IRC isn’t your thing there’s also a &lt;a href=&quot;https://discord.gg/tffeu2x&quot;&gt;Discord server&lt;/a&gt; that some of us hang out in. Join the &lt;code&gt;#common-lisp&lt;/code&gt; channel there and we’ll be happy to help you.&lt;/p&gt;
&lt;h3 id=&quot;getting-practical&quot;&gt;Getting Practical&lt;/h3&gt;
&lt;p&gt;Once you’ve finished that book the next one you should attack is &lt;a href=&quot;http://www.gigamonkeys.com/book/&quot;&gt;Practical Common Lisp&lt;/a&gt;. You can get a paper copy if you want, but the full book is available on the site for free.&lt;/p&gt;
&lt;p&gt;You can skip the editor/programming environment part because the environment it recommends (Lisp in a Box) is abandoned and no longer works. Just keep using the programming environment you’re comfortable with for now.&lt;/p&gt;
&lt;p&gt;Unfortunately the book doesn’t include exercises. If you &lt;em&gt;really&lt;/em&gt; want to get the most out of it you can type in all the code as you’re reading it and poke at it, but if you’ve already done the exercises in the previous book it’s probably safe to just sit down and read the book carefully. Don’t read more than a chapter or two a day. It will take a while for your brain to digest all the information.&lt;/p&gt;
&lt;p&gt;Make sure you understand everything as you go through the book. Don’t be afraid to ask questions on IRC or Discord (or email me if you want, I don’t mind) if something’s not clear.&lt;/p&gt;
&lt;p&gt;You should also begin to get comfortable looking up things in &lt;a href=&quot;http://www.lispworks.com/documentation/lw70/CLHS/Front/Contents.htm&quot;&gt;the Common Lisp language specification&lt;/a&gt; itself. It’s the ultimate manual for Common Lisp. It can be pretty dense at points, but can answer many questions you might have if you read it slowly and carefully. You can either use the index page to find what you’re looking for or just search on Google for “clhs whatever” (CLHS stands for “Common Lisp HyperSpec”, which is the hyperlinked, HTML version of the spec). If you already use the Dash app for MacOS, it has the Common Lisp spec available.&lt;/p&gt;
&lt;p&gt;(Some people will tell you to learn the language by just reading the spec. That’s ridiculous — it’s like trying to learn French by reading a dictionary. It’s a useful tool to have, but not the only one you’ll need.)&lt;/p&gt;
&lt;h3 id=&quot;make-something&quot;&gt;Make Something&lt;/h3&gt;
&lt;p&gt;Once you’ve got those two books under your belt and some practice using the spec, it’s time to make something without someone holding your hand. It doesn’t have to be anything big or special, the goal is to just write some Lisp without having the answer on the next page.&lt;/p&gt;
&lt;p&gt;If you need some ideas:&lt;/p&gt;
&lt;p&gt;It doesn’t really matter what you make, just make &lt;em&gt;something&lt;/em&gt; on your own.&lt;/p&gt;
&lt;h3 id=&quot;lisp-as-a-system&quot;&gt;Lisp as a System&lt;/h3&gt;
&lt;p&gt;At this point it’s time to take your Common Lisp skills up a notch. Up until now I’ve told you to just use any text editor because it’s more important to get you some experience with the language, but now it’s time to dive into the deep end.&lt;/p&gt;
&lt;p&gt;In most languages the development process looks something like this:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Edit some code in the project with an editor.&lt;/li&gt;
&lt;li&gt;Compile the project (some languages skip this step).&lt;/li&gt;
&lt;li&gt;Run the project (or the tests).&lt;/li&gt;
&lt;li&gt;Observe the output (in the console, a browser, etc).&lt;/li&gt;
&lt;li&gt;Go to 1.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This is not how most Common Lisp users interact with the language. In Common Lisp, the development cycle looks more like this:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Start a Lisp process.&lt;/li&gt;
&lt;li&gt;Load the project.&lt;/li&gt;
&lt;li&gt;Edit some code with your editor.&lt;/li&gt;
&lt;li&gt;Tell the running process to compile &lt;em&gt;only the code you edited&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Interact with the changed code in the process via the REPL, an HTTP request, etc.&lt;/li&gt;
&lt;li&gt;Observe the output (in the console, a browser, etc).&lt;/li&gt;
&lt;li&gt;Go to 3.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;When you embrace the Lisp way of working you’ll rarely recompile and reload an entire project. Usually you’ll write a function (or a macro, or parameter, or whatever), compile &lt;em&gt;just that function&lt;/em&gt;, maybe poke at it in the REPL a bit, and then move on to the next function. This has some advantages over the traditional compile-everything-then-run approach.&lt;/p&gt;
&lt;p&gt;First: compiling a small chunk of code is fast. I just timed compiling a few of the larger functions in one of my projects and they took around 50-80 microseconds. You don’t have to wait for the compiler, so your concentration/thought process never has time to wander.&lt;/p&gt;
&lt;p&gt;Another advantage is that when you get back the results of your compilation (and running), any errors or warnings you receive are almost certainly related to the few lines of code you just compiled. If you compile a ten-line function, run it, and get a division by zero error you can immediately focus in on the ten lines you just compiled and think about what changed.&lt;/p&gt;
&lt;p&gt;Because the Lisp process is always running, as soon as you compile a function it’s ready to be used in the REPL. You can throw some arbitrary data at it and inspect the results to see how it behaves in isolation before you build more things on top of it. This cycle of making a function, compiling it, poking at it to make sure it’s working as expected, and moving on happens &lt;em&gt;constantly&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In contrast, when working in languages like Scala or Python I almost never find myself writing one single function and compiling or running the project immediately. Spinning up the compiler or running the unit tests takes at &lt;em&gt;least&lt;/em&gt; a second or two (or sometimes &lt;em&gt;minutes&lt;/em&gt; in Scala, unfortunately) so to avoid having a constant stream of gaps in my thought I end up writing a bunch of functions at once, and then I run the project or tests once I know they have a chance of working.&lt;/p&gt;
&lt;p&gt;But then when I get back an error I have much more surface area to check, because I’ve added a lot of new code! So now I have to track down a problem that might be in something I wrote four minutes ago, whereas in Lisp I would only have to ever look at the code I wrote in the last few seconds.&lt;/p&gt;
&lt;p&gt;I’ve started using IntelliJ with Scala to help make this a bit less painful. It does help with the compile times because it recompiles things on the fly, but it doesn’t solve the rest of the problem. I can write a Scala function in IntelliJ and it will be compiled immediately, but I can’t &lt;em&gt;interact&lt;/em&gt; with it immediately like I can in Common Lisp.&lt;/p&gt;
&lt;p&gt;When you work in this style with Common Lisp I think you’ll really grow to love it. Writing in other languages will begin to feel like shipping your code off to the DMV and getting it back a week later with a page full of red ink somewhere in the hundred forms you filled out. Writing in Common Lisp feels like interacting with a living, breathing organism, or like &lt;a href=&quot;https://www.reddit.com/r/lisp/comments/4oo1cp/common_lisp_for_clojure_programmer/d4eec68/&quot;&gt;teaching things to an eager assistant&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This philosophy of Lisp being not just a programming &lt;em&gt;language&lt;/em&gt; but a living, breathing programming &lt;a href=&quot;https://www.dreamsongs.com/Files/Incommensurability.pdf&quot;&gt;&lt;em&gt;system&lt;/em&gt;&lt;/a&gt; goes beyond just the short feedback loop and interactive REPL, too.&lt;/p&gt;
&lt;p&gt;As an example: imagine you’re making a video game and have a bug somewhere in your damage calculation that will occasionally cause a division by zero. Now let’s say you’re working on the code for a particular quest. You’ll start the game, load a save file at the beginning of the quest, and start going through the steps. All of a sudden, in the middle of killing the final monster for the quest, you hit the damage bug! In traditional languages, one of two things might happen:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The game crashes, and you get a stack trace and maybe a core dump.&lt;/li&gt;
&lt;li&gt;You’ve wrapped a &lt;code&gt;try&lt;/code&gt; block around the main game loop that logs a stack trace and ignores errors and allows the game to continue.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Case 1 is pretty bad. You’ve got to try to track down the bug from a snapshot of what things looked like at the time (the stack trace and core dump). And even if you manage to fix it, now you’ve got to redo all that playing to get back to testing your quest code that you were originally working on.&lt;/p&gt;
&lt;p&gt;Case 2 is bad, in a different way. If you just ignore errors all the time, the game might now be in a weird state. You also might lose some critical context that’s necessary to debug the problem, unless you’re also saving a core dump (but I don’t know of many people who save a core dump on every exception).&lt;/p&gt;
&lt;p&gt;In Common Lisp you can certainly choose to panic on or ignore errors, but there’s a better way to work. When an error is signaled in Common Lisp, it doesn’t unwind the stack. The Lisp process will pause execution at that point and open a window in your editor showing you the stack trace. Your warrior’s sword is hovering over the monster, waiting for you. At this point you can communicate with the running process at the REPL to see what’s going on. You can examine variables in the stack, or even run any arbitrary code you want.&lt;/p&gt;
&lt;p&gt;Once you figure out the problem (“Oh, I see, the &lt;code&gt;calculate-armor-percentage&lt;/code&gt; function returns &lt;code&gt;0&lt;/code&gt; if a shielding spell ran out during the same frame”) you can fix the code, recompile the problematic function, and &lt;em&gt;restart the execution of that function (or any other one!) in the call stack&lt;/em&gt;! Your warrior’s sword lands, and you move back to what you were doing before.&lt;/p&gt;
&lt;p&gt;You don’t have to track down the bug from just a stack trace, like a detective trying to piece together what happened by the &lt;a href=&quot;https://www.usenix.org/system/files/1311_05-08_mickens.pdf&quot;&gt;blood stains&lt;/a&gt; on the wall. You can examine the crime &lt;em&gt;as it’s happening&lt;/em&gt; and intervene to save the victim. It’s like if you could run your code in a debugger with a breakpoint at every single line that only activates if something goes wrong!&lt;/p&gt;
&lt;p&gt;Maybe you don’t make video games, sure, but this process can be useful in all kinds of contexts. Maybe you’re writing a web app that talks to an API somewhere, and are debugging a request that fails between two calls to the API, e.g. between “create widget &lt;code&gt;foo&lt;/code&gt;” and “add &lt;code&gt;foo&lt;/code&gt; to widget list &lt;code&gt;bar&lt;/code&gt;”. Instead of just aborting the request, logging a stack trace, and now leaving things in a possibly weird state (&lt;code&gt;foo&lt;/code&gt; having been created without being in the expected &lt;code&gt;bar&lt;/code&gt; list), you can fix the problem and allow the request to finish properly.&lt;/p&gt;
&lt;p&gt;Of course this won’t always work. If you’ve got a big function that does some side effects and then crashes, restarting execution of the function would make the side effects happen again. But if you divide up your functions well (&lt;a href=&quot;https://groups.google.com/forum/message/raw?msg=comp.lang.lisp/9SKZ5YJUmBg/Fj05OZQomzIJ&quot;&gt;one function to a function!&lt;/a&gt;) this case is pretty rare. And even when it does happen, it just means you’re back in the same situation you’re in &lt;em&gt;by default&lt;/em&gt; with other languages!&lt;/p&gt;
&lt;p&gt;Support for this style of interactive development doesn’t just come from some fancy editor plugins — it’s baked into the bones of the language. For example: the standard specifies a method named &lt;a href=&quot;http://clhs.lisp.se/Body/f_upda_1.htm&quot;&gt;&lt;code&gt;update-instance-for-redefined-class&lt;/code&gt;&lt;/a&gt; that lets you customize what happens to objects when their class is redefined! This isn’t something you’ll use all the time, but something like Sketch (a Common Lisp equivalent of Java’s Processing library) &lt;a href=&quot;https://github.com/vydd/sketch/blob/19fe20502d26fc75752e710dfe5106ed13345c5a/src/sketch.lisp#L118-L121&quot;&gt;uses it&lt;/a&gt; to automatically update the running sketch when you redefine its class. Dynamically updating running code in a safe, consistent way doesn’t require any dark magic in Common Lisp because it’s the expected, usual way to work.&lt;/p&gt;
&lt;p&gt;So how do you actually &lt;em&gt;get&lt;/em&gt; this wonderful interactive experience? The bad news is that you’re going to need to shave the editor yak. You really only have two choices here:&lt;/p&gt;
&lt;p&gt;I wish this weren’t the case, but those are really only the realistic options today (aside from the editing environments for the (expensive) commercial Lisps).&lt;/p&gt;
&lt;p&gt;If you’re like me and already have Vim burned too deeply into your fingers to ever get it out, I’d recommend Vim with Vlime. It will give you 80% of the experience you’ll get with Emacs.&lt;/p&gt;
&lt;p&gt;Otherwise go with Emacs. You might want to look into &lt;a href=&quot;https://portacle.github.io/&quot;&gt;Portacle&lt;/a&gt;, which bundles Emacs and SLIME and a bunch of other things together, or you might want to have a go at setting up Emacs and SLIME or Sly yourself. I can’t really give you much advice on the Emacs side of things because I haven’t had much experience with it, so you’ll need to do a bit of research here.&lt;/p&gt;
&lt;p&gt;Whatever you choose, spend some time setting up your editor and environment of choice. This will be a lot of fiddly metawork, but will pay off handsomely as you continue working in Lisp.&lt;/p&gt;
&lt;p&gt;On a side note: if anyone is interested in making a Common Lisp &lt;a href=&quot;https://langserver.org/&quot;&gt;LSP&lt;/a&gt; language server, I think it would be a hugely useful contribution to the community. Having an LSP server would mean you could get a much nicer programming experience in many editors out of the box, which would help new people quite a lot.&lt;/p&gt;
&lt;p&gt;I think you could piggyback on top of Swank to do a lot of the language-side stuff, and it would mostly be a matter of implementing the LSP interface. If this sounds interesting to you, please let me know — I’d be willing to help. I’ve done some work at my day job making a Scala LSP language server that uses IntelliJ as a backend, so I have at least some idea of how that sausage gets made. I just don’t have the time or motivation to do an entire LSP server for Common Lisp all by myself.&lt;/p&gt;
&lt;h3 id=&quot;learning-paradigms&quot;&gt;Learning Paradigms&lt;/h3&gt;
&lt;p&gt;At this point you should have a pretty good handle on the basics of Common Lisp, and have set up one of the more powerful development environments. Your next goals should be to learn how to write idiomatic Common Lisp and to get some practice using your fancy new environment.&lt;/p&gt;
&lt;p&gt;I think the perfect book for both of these is &lt;a href=&quot;https://github.com/norvig/paip-lisp&quot;&gt;Paradigms of Artificial Intelligence Programming&lt;/a&gt;, often abbreviated as PAIP. The book was recently made available for free as a PDF, or you can buy a used paper copy if you prefer.&lt;/p&gt;
&lt;p&gt;This book was written in 1992 so it’s not about the hyped up AI fields you’ve been hearing about in the news like machine learning — instead it’s a tour of &lt;a href=&quot;https://en.wikipedia.org/wiki/Symbolic_artificial_intelligence&quot;&gt;Good Old-Fashioned AI&lt;/a&gt;. Even if you’re not particularly interested in this kind of AI, the book is a great example of how to write Common Lisp code.&lt;/p&gt;
&lt;p&gt;One thing I really love about this book is that almost all the functions in it have docstrings. If you look at most other programming books they omit the documentation strings, presumably for space reasons and because they feel the surrounding text is documentation enough. But writing helpful docstrings is an art in and of itself, and I think books that omit them train readers that “good code omits docstrings”, which is a bad habit to get into.&lt;/p&gt;
&lt;p&gt;The book contains &lt;em&gt;plenty&lt;/em&gt; of exercises, conveniently categorized by how difficult or involved they are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;S&lt;/code&gt; for “seconds”.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M&lt;/code&gt; for “minutes”.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;H&lt;/code&gt; for “hours”.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;D&lt;/code&gt; for “days”.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This is a very good idea which more books should steal. Do all of the &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;M&lt;/code&gt; exercises, and try your hand at at least a few of the &lt;code&gt;H&lt;/code&gt; ones. If a &lt;code&gt;D&lt;/code&gt; sounds particularly interesting don’t be afraid to spend some time on it — really digging into a problem is exactly what you need at this point in your Lisp journey.&lt;/p&gt;
&lt;h3 id=&quot;switch-things-up&quot;&gt;Switch Things Up&lt;/h3&gt;
&lt;p&gt;Now that you’re comfortable in Common Lisp and your programming environment, it’s time to push yourself out of your comfort zone again. At the beginning I had you choose either SBCL or CCL. Now I want you to install whichever one you didn’t originally choose and make sure all the code you’ve written so far runs in it.&lt;/p&gt;
&lt;p&gt;This may seem a bit like running in place, but making sure your code runs in more than one implementation will keep you honest. It will force you to write portable code that doesn’t rely on anything implementation-specific that might change in the next decade or two. And you might even discover that you like this other implementation better than the original — maybe CCL’s super-fast compile times make you smile, or SBCL’s strong type inference catches more of your bugs.&lt;/p&gt;
&lt;p&gt;Go through all the code you’ve written so far and make sure it all runs in the new implementation. You might also want to take this opportunity to refactor or rewrite some of it — you’ve learned a lot since you first started, so your earliest Common Lisp code will probably look pretty rough to you now.&lt;/p&gt;
&lt;h3 id=&quot;recipes-for-success&quot;&gt;Recipes for Success&lt;/h3&gt;
&lt;p&gt;The final technical book I’ll recommend to every aspiring Lisp programmer is &lt;a href=&quot;http://weitz.de/cl-recipes/&quot;&gt;Common Lisp Recipes&lt;/a&gt;, sometimes abbreviated as CLR. Unlike most of the other books I’ve recommended so far this one is relatively recent: it was published in 2015. It’s not free, but I think it’s well worth the money it costs.&lt;/p&gt;
&lt;p&gt;The book is written by the author of several very heavily used Common Lisp libraries. It’s a bit of a grab bag of topics (which is why I think you need a decent amount of Lisp under your belt before you tackle it) but it’s a very well-written grab bag that will teach you a lot of things you won’t find in other books.&lt;/p&gt;
&lt;h3 id=&quot;final-patterns&quot;&gt;Final Patterns&lt;/h3&gt;
&lt;p&gt;If you’ve gotten this far you’re pretty invested in Common Lisp, and I want to recommend one not-strictly-technical book that I think you’ll really enjoy: Patterns of Software by Richard Gabriel. It’s available as a PDF on &lt;a href=&quot;https://www.dreamsongs.com/Books.html&quot;&gt;the author’s site&lt;/a&gt;, and you can still find used print copies online if you prefer.&lt;/p&gt;
&lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; the “Gang of Four”/“Design Patterns” book that you might have already read or heard about, but is a set of essays on a variety of loosely-related topics. It’s the best book I’ve read so far this year. I don’t want to spoil anything in it for you, so I’ll just say that I think you’ll find it well worth your time.&lt;/p&gt;
&lt;h2 id=&quot;where-to-go-from-here&quot;&gt;Where to Go From Here&lt;/h2&gt;
&lt;p&gt;If you made it through all the books and activities in the previous section: congratulations, you’re off to a great start! Now that you’ve got a decent handle on the core language you can explore in many different directions, depending on your interests.&lt;/p&gt;
&lt;h3 id=&quot;macros&quot;&gt;Macros&lt;/h3&gt;
&lt;p&gt;If you want to learn the secrets of macros, you’ll probably want to read and work through &lt;a href=&quot;http://www.paulgraham.com/onlisp.html&quot;&gt;On Lisp&lt;/a&gt; and &lt;a href=&quot;https://letoverlambda.com/&quot;&gt;Let Over Lambda&lt;/a&gt; (in that order).&lt;/p&gt;
&lt;p&gt;I’ll say that you should take both books (&lt;em&gt;especially&lt;/em&gt; the latter) with a large grain of salt. A lot of Common Lisp users don’t agree with all of the arguments and style in these books, but I think they can still provide plenty of value if you read them with a critical mind.&lt;/p&gt;
&lt;h3 id=&quot;object-oriented-programming-with-clos&quot;&gt;Object-Oriented Programming with CLOS&lt;/h3&gt;
&lt;p&gt;Common Lisp has some very sophisticated support for Object-Oriented Programming through CLOS. If you’re like me and have bad memories of OOP from working in a Java cube farm, I’d urge you to give CLOS a fair chance to change your mind.&lt;/p&gt;
&lt;p&gt;Start with &lt;a href=&quot;https://www.amazon.com/Object-Oriented-Programming-COMMON-LISP-Programmers/dp/0201175894&quot;&gt;Object-Oriented Programming in COMMON LISP: A Programmer’s Guide to CLOS&lt;/a&gt;. It’s a wonderfully-written, short and to-the-point book that will give you a good overview of how CLOS is intended to be used.&lt;/p&gt;
&lt;p&gt;If you really want to bend your mind, try &lt;a href=&quot;https://www.amazon.com/Art-Metaobject-Protocol-Gregor-Kiczales/dp/0262610744&quot;&gt;The Art of the Metaobject Protocol&lt;/a&gt; (usually abbreviated as AMOP). This book will probably take you a couple of tries to get through. Read it until you hit a mental wall, go work on other things for a couple of months, and come back and try again. Repeat that process as many times as necessary.&lt;/p&gt;
&lt;h3 id=&quot;low-level-programming&quot;&gt;Low-Level Programming&lt;/h3&gt;
&lt;p&gt;Low-level programming can mean a lot of different things, so I’ll just mention one possibility here.&lt;/p&gt;
&lt;p&gt;If you’re interested in writing emulators for old computers, I wrote &lt;a href=&quot;http://stevelosh.com/blog/2016/12/chip8-cpu/&quot;&gt;a series of posts&lt;/a&gt; on making a &lt;a href=&quot;https://en.wikipedia.org/wiki/CHIP-8&quot;&gt;CHIP-8&lt;/a&gt; emulator in Common Lisp. &lt;a href=&quot;https://github.com/kingcons/cl-6502&quot;&gt;cl-6502&lt;/a&gt; is an emulator for the processor used in the NES (and lots of other things) and has a really nice &lt;a href=&quot;http://redlinernotes.com/docs/cl-6502.pdf&quot;&gt;literate programming&lt;/a&gt; version that’s wonderful to read through.&lt;/p&gt;
&lt;h3 id=&quot;web-development&quot;&gt;Web Development&lt;/h3&gt;
&lt;p&gt;Unfortunately I don’t have too many suggestions for web development in Common Lisp. I’ve made a conscious effort to avoid web development in the past five or so years, because it seems like the Hamster Wheel of Backwards Incompatibility has become more of a Hamster Centrifuge in that field.&lt;/p&gt;
&lt;p&gt;There is a &lt;code&gt;#lispweb&lt;/code&gt; channel on Freenode and a &lt;code&gt;#webdev&lt;/code&gt; channel in the Lisp Discord, so if you have questions you could start by asking there. Those channels are a bit less populated than the other Lisp channels, so don’t expect an answer immediately.&lt;/p&gt;
&lt;h3 id=&quot;game-development&quot;&gt;Game Development&lt;/h3&gt;
&lt;p&gt;Common Lisp has a small but enthusiastic community of people who like making games. There’s a &lt;code&gt;#lispgames&lt;/code&gt; channel on Freenode and a &lt;code&gt;#gamedev&lt;/code&gt; channel on the Lisp Discord that you should join if you’re interested.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://landoflisp.com/&quot;&gt;Land of Lisp&lt;/a&gt; is a fun book to go through. The coding style in the book has some… “eccentricities”, which is why I don’t recommend it as a first book on Lisp (e.g. using &lt;code&gt;ash&lt;/code&gt; instead of &lt;code&gt;truncate&lt;/code&gt; or &lt;code&gt;floor&lt;/code&gt; for integer division), but if you know the language and just want to get started making some simple games I think you’ll enjoy working through it.&lt;/p&gt;
&lt;p&gt;If you want an excuse to make a game in Lisp in a week, the Lisp Game Jam is something you can join. It’s usually held once or twice each year, so you’ll have to search around (or ask in &lt;code&gt;#lispgames&lt;/code&gt;) to find out when the next one is.&lt;/p&gt;
&lt;p&gt;Lisp doesn’t have any engine as full-featured as Unity, but several people are currently working on making 3D game engines. Ask around to see what people are using these days. Unfortunately a 3D game engine will generally need to interface with the OS to render images and produce audio, and so can’t be written in pure Common Lisp. This means that some running on the Hamster Wheel of Backwards Incompatibility will be necessary to keep up with OS changes (e.g. &lt;a href=&quot;https://www.macrumors.com/2018/06/05/apple-deprecates-opengl-opencl-gaming/&quot;&gt;Apple deprecating OpenGL&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;If you’re interested in old-school ASCII/tile-based games, I’ve personally done some work with using &lt;a href=&quot;https://github.com/HiTECNOLOGYs/cl-charms&quot;&gt;ncurses&lt;/a&gt; and &lt;a href=&quot;http://foo.wyrd.name/en:bearlibterminal&quot;&gt;bearlibterminal&lt;/a&gt; in Common Lisp. There’s something really fun about making a game people can play over telnet! Feel free to get in touch with me if you’re interested in that kind of stuff and want to know more.&lt;/p&gt;
&lt;h3 id=&quot;window-management&quot;&gt;Window Management&lt;/h3&gt;
&lt;p&gt;If you’re running Linux and like tinkering with your desktop environment, &lt;a href=&quot;https://stumpwm.github.io/&quot;&gt;StumpWM&lt;/a&gt; is an X window manager written in Common Lisp. I’ve just recently switched back to Linux so I’ve only been using it for about two months, but it’s really pleasant to be able to customize my working environment with Common Lisp.&lt;/p&gt;
&lt;p&gt;StumpWM has a small but friendly community — if you’re looking for a non-trivial open source Common Lisp project to contribute to, StumpWM would be a great choice.&lt;/p&gt;
&lt;h3 id=&quot;unit-testing&quot;&gt;Unit Testing&lt;/h3&gt;
&lt;p&gt;If you’re coming from a modern language, especially one with a lot of test-driven development advocates, you might be surprised at the lack of an emphasis on unit testing in Common Lisp. I think one reason for this is that in some languages a unit test is the simplest way to actually &lt;em&gt;run&lt;/em&gt; a function, but Lisp’s interactive style of development gives you an even easier alternative: just &lt;em&gt;run the function&lt;/em&gt; in the REPL!&lt;/p&gt;
&lt;p&gt;Despite the lack of heavy unit testing in the community, there are almost as many unit testing &lt;em&gt;frameworks&lt;/em&gt; as there are Common Lisp programmers! This is probably because making a unit testing framework is so easy with a few macros. I love &lt;a href=&quot;https://github.com/lmj/1am&quot;&gt;1am&lt;/a&gt;, but there are &lt;em&gt;plenty&lt;/em&gt; more to choose from.&lt;/p&gt;
&lt;p&gt;Whichever one you choose, please make sure to be a good citizen and create a separate ASDF system for your unit tests, so people can use your library without having to load Yet Another Testing Framework.&lt;/p&gt;
&lt;h3 id=&quot;more-implementations&quot;&gt;More Implementations&lt;/h3&gt;
&lt;p&gt;I had you use SBCL and CCL because those are the most popular free Common Lisp implementations today, but they aren’t the only actively-developed ones out there. There’s plenty of others you might want to explore:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://common-lisp.net/project/armedbear/&quot;&gt;ABCL&lt;/a&gt; runs on the JVM.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://common-lisp.net/project/ecl/main.html&quot;&gt;ECL&lt;/a&gt; can be embedded in a C program, and can translate Common Lisp code to C code.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/clasp-developers/clasp&quot;&gt;CLASP&lt;/a&gt; is still under development, but is an implementation designed to be easy to interoperate with C++.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.lispworks.com/&quot;&gt;Lispworks&lt;/a&gt; and &lt;a href=&quot;https://franz.com/products/allegro-common-lisp/&quot;&gt;Allegro CL&lt;/a&gt; are commercial implementations with a lot of extra features and support, but are not free.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;(I omitted CLISP because I’m mad at them for choosing a name that confuses the heck out of new people. Hey, I warned you this post would contain Opinions™.)&lt;/p&gt;
&lt;p&gt;I tend to use SBCL for my own projects, but I make sure the units tests for all my libraries run in SBCL, CCL, ABCL, and ECL. This keeps me honest and gives me a reasonable degree of confidence that I’m writing portable code.&lt;/p&gt;
&lt;h2 id=&quot;modern-common-lisp&quot;&gt;Modern Common Lisp&lt;/h2&gt;
&lt;p&gt;Common Lisp is old and stable, but that doesn’t mean it’s stagnant. The language gives you plenty of power to build on, and before I wrap this up I want go over a couple of recent developments in the Common Lisp world that the older books you’ve been learning from don’t talk about. I also want to clarify some things that often trip up new people.&lt;/p&gt;
&lt;h3 id=&quot;structure&quot;&gt;Structure&lt;/h3&gt;
&lt;p&gt;Common Lisp’s terminology for various parts of projects is often confusing to new people because it’s old and uses a lot of words that we use now (like “package”) to mean subtly different things than people mean today. Things get easier once you internalize what Common Lisp means by the terms.&lt;/p&gt;
&lt;p&gt;(Side note: I posted a quick-and-dirty version of this section as a &lt;a href=&quot;https://lobste.rs/s/fwhuz5/my_lisp_journey_1_getting_started_with#c_ebhvzq&quot;&gt;comment&lt;/a&gt; on Lobste.rs while I was waiting for a plane — this section of the post is an expanded version of that comment.)&lt;/p&gt;
&lt;h4 id=&quot;packages&quot;&gt;Packages&lt;/h4&gt;
&lt;p&gt;We often see questions in IRC and Discord that look something like: “How do I export a class from a package”? Questions worded like this are a sign of a very common misunderstanding about what packages in Common Lisp &lt;em&gt;actually are&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A package in Common Lisp is a container for symbols&lt;/strong&gt;. That’s it. They’re a way to group related names (symbols) together so you don’t have to do the miserable prefixing of every name with &lt;code&gt;mylibrary-...&lt;/code&gt; like you need to do in Emacs Lisp or C to avoid name clashes.&lt;/p&gt;
&lt;p&gt;You don’t export a class from a package, you export a &lt;em&gt;symbol&lt;/em&gt;. You don’t import a function, you import the &lt;em&gt;symbol&lt;/em&gt; it’s attached to. This sounds pedantic, but is important to keep clear in your head as you start using the package system. If you’re not clear on what exactly a symbol &lt;em&gt;is&lt;/em&gt;, I wrote a &lt;a href=&quot;http://stevelosh.com/blog/2016/06/symbolic-computation/&quot;&gt;separate post&lt;/a&gt; just about symbols which you might find helpful.&lt;/p&gt;
&lt;p&gt;Another major tripping point for new people is the relationship between packages and files. Or, rather: the completely &lt;em&gt;lack&lt;/em&gt; of any relationship in Common Lisp.&lt;/p&gt;
&lt;p&gt;In many languages like Python, Java, or Clojure, a file’s package and its location on the hard drive are tied together. For example: when you say &lt;code&gt;import foo.bar.baz&lt;/code&gt; in Python, Python will look for a &lt;code&gt;baz.py&lt;/code&gt; file inside the &lt;code&gt;foo/bar/&lt;/code&gt; directory (it’s a little more complicated than this, but that doesn’t matter for this example).&lt;/p&gt;
&lt;p&gt;In Common Lisp, this is not the case. &lt;strong&gt;Files and packages are completely unrelated in Common Lisp.&lt;/strong&gt; You can have many files that all work in the same package, or one file that switches between many packages, or even create or modify packages at runtime.&lt;/p&gt;
&lt;p&gt;This gives you the flexibility to work however you want. For example: in my procedural art library &lt;a href=&quot;https://github.com/sjl/flax&quot;&gt;Flax&lt;/a&gt; most of the packages are each used in one specific file, much like you would do in modern languages. But the &lt;code&gt;flax.drawing&lt;/code&gt; package contains not only a drawing protocol but also several implementations of that protocol (PNG, SVG, etc), and so I split the code into &lt;a href=&quot;https://github.com/sjl/flax/tree/master/src/drawing&quot;&gt;a series of separate files&lt;/a&gt;, each one dealing with how to draw a single format (plus one for the protocol itself).&lt;/p&gt;
&lt;p&gt;I could have created separate packages for each implementation and set up the imports/exports between them, but I didn’t feel like the extra boilerplate was worth it. Common Lisp is flexible enough to let you make such choices.&lt;/p&gt;
&lt;p&gt;So if files and packages aren’t related, the next question is: how does Common Lisp know where to &lt;em&gt;find&lt;/em&gt; anything on disk when it comes time to load the code?&lt;/p&gt;
&lt;h4 id=&quot;systems&quot;&gt;Systems&lt;/h4&gt;
&lt;p&gt;A system in Common Lisp is a collection of serveral things:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Some code.&lt;/li&gt;
&lt;li&gt;A description of how to load that code.&lt;/li&gt;
&lt;li&gt;A list of other systems this system depends on, which need to be loaded prior to loading this one.&lt;/li&gt;
&lt;li&gt;Some metadata like author, license, version, homepage, etc.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The Common Lisp language itself has no knowledge of systems. If you look at &lt;a href=&quot;https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node120.html&quot;&gt;section 11.9&lt;/a&gt; of CLtL2 you’ll see that it was imagined that each author would write their own custom file to load their code. But since Common Lisp gives you the power to abstract almost anything, people eventually abstracted the process of loading Common Lisp code.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://common-lisp.net/project/asdf/&quot;&gt;ASDF&lt;/a&gt; is a Common Lisp library bundled with most modern implementations which handles defining and loading systems. The name ASDF stands for “Another System Definition Facility”, so as you might guess there have been several other such libraries. ASDF is the one everyone uses today.&lt;/p&gt;
&lt;p&gt;ASDF standardizes the process of defining a system into something like this:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The system definition(s) for a project called &lt;code&gt;foo&lt;/code&gt; would be in a file named &lt;code&gt;foo.asd&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Each system is defined with a &lt;code&gt;(defsystem ...)&lt;/code&gt; form inside this file.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We’ll talk more about what a “project” is shortly. Note the extension of the file is &lt;code&gt;asd&lt;/code&gt;, not &lt;code&gt;asdf&lt;/code&gt;, which is a little confusing, but was probably chosen to work in environments with three-letter-extension limits.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://common-lisp.net/project/asdf/#documentation&quot;&gt;ASDF manual&lt;/a&gt; is the definitive resource for the syntax and semantics of &lt;code&gt;defsystem&lt;/code&gt;, but can be a little heavy to read if you’re just getting started. Another way to get started is to read some &lt;code&gt;.asd&lt;/code&gt; files of some small-to-medium sized open source projects and see how they handle things.&lt;/p&gt;
&lt;p&gt;Systems and packages are orthogonal in Common Lisp. Some systems (like small libraries) will define exactly one package. Some systems will define multiple packages. Rarely a system might not define any new packages, but will use or add to an existing one.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;My directed graph library &lt;a href=&quot;https://github.com/sjl/cl-digraph&quot;&gt;cl-digraph&lt;/a&gt; contains a system called &lt;code&gt;cl-digraph&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;That system has a description of how to load the code, which lives in the &lt;a href=&quot;https://github.com/sjl/cl-digraph/blob/master/cl-digraph.asd&quot;&gt;&lt;code&gt;cl-digraph.asd&lt;/code&gt;&lt;/a&gt; file.&lt;/li&gt;
&lt;li&gt;One of the files specified for loading is &lt;a href=&quot;https://github.com/sjl/cl-digraph/blob/master/package.lisp&quot;&gt;&lt;code&gt;package.lisp&lt;/code&gt;&lt;/a&gt;, which creates a package called &lt;code&gt;digraph&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Even though ASDF standardizes some aspects of system definition, it still gives you plenty of flexibility. As you read projects by different authors you’ll encounter different ways of organizing systems — this can be a little overwhelming at first, but it means you can organize a system in the way that works &lt;em&gt;best for that system&lt;/em&gt;, which is really nice once you’ve got some experience under your belt.&lt;/p&gt;
&lt;p&gt;One example of this is how people define packages for their systems. There are a couple of common ways to do this you’ll see in the wild:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A single &lt;code&gt;package.lisp&lt;/code&gt; file which contains all the definitions for all the packages in the project, and gets loaded before all other files. This is the strategy I usually prefer.&lt;/li&gt;
&lt;li&gt;Each file defines its package at the top of the file, much like you would in Clojure or other modern languages. Care is taken in the system definition to load the files in the correct order so that each package is defined before it is ever used.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To review: a system is a collection of code and a description of how to load it, a list of its dependencies, and some metadata. Now let’s move up one level higher to the final layer of structure you need to know about.&lt;/p&gt;
&lt;h4 id=&quot;projects&quot;&gt;Projects&lt;/h4&gt;
&lt;p&gt;A project in Common Lisp is not an official term defined anywhere that I know of, but is a word that’s generally used to mean something like a library, a framework, an application, etc.&lt;/p&gt;
&lt;p&gt;A project will usually define at least one system, because systems are where you describe how to load the code, and if a project didn’t define a system how would you know how to load its code? My string-wrapping library &lt;a href=&quot;https://github.com/sjl/bobbin&quot;&gt;Bobbin&lt;/a&gt; is a project that defines &lt;em&gt;two&lt;/em&gt; systems:&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;The &lt;code&gt;bobbin&lt;/code&gt; system contains the actual data structure and API. It has no dependencies.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;The &lt;code&gt;bobbin/test&lt;/code&gt; system contains the unit tests. It depends on the &lt;code&gt;bobbin&lt;/code&gt; system (because that’s the code it’s going to test) and the &lt;code&gt;1am&lt;/code&gt; system (a unit test framework). I made this a separate system because it allows users to load the main code without also having to load the unit testing framework if they’re not going to be running the tests.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Both of these systems are defined in the &lt;a href=&quot;https://github.com/sjl/bobbin/blob/master/bobbin.asd&quot;&gt;&lt;code&gt;bobbin.asd&lt;/code&gt; file&lt;/a&gt;. ASDF &lt;a href=&quot;https://common-lisp.net/project/asdf/asdf.html#index-find_002dsystem&quot;&gt;treats systems with a forward slash in their name specially&lt;/a&gt; and knows to look for them in the &lt;code&gt;asd&lt;/code&gt; file named with the text before the slash.&lt;/p&gt;
&lt;p&gt;We saw how Common Lisp has no concept of a system — that concept comes from ASDF. Similarly, ASDF has no concept of the internet or of reaching out to somewhere to download things. ASDF assumes you have somehow acquired the systems you want to load and stored them on your hard drive, perhaps by sending a check to an address and receiving a copy of the code on floppy disk, as many of my old Lisp books offer in their final pages.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.quicklisp.org/beta/&quot;&gt;Quicklisp&lt;/a&gt; is another library that works on top of ASDF to provide the “download projects from the internet automatically if necessary” functionality that people expect in the modern world. So when you say &lt;code&gt;(ql:quickload :bobbin)&lt;/code&gt; you’re asking Quicklisp to download Bobbin (and any dependencies) if necessary, and then hand it off to ASDF to actually load the code of the &lt;code&gt;bobbin&lt;/code&gt; system.&lt;/p&gt;
&lt;p&gt;Unlike ASDF, Quicklisp is relatively new in the Common Lisp world (it’s only about eight years old) and so is not bundled with any modern Lisp implementations that I know of, which is why you need to install it separately.&lt;/p&gt;
&lt;h4 id=&quot;recap&quot;&gt;Recap&lt;/h4&gt;
&lt;p&gt;Here’s a quick recap of the different layers of project structure you’ll encounter in Common Lisp. Jot these down on a post it note you can refer to as you’re learning.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Files&lt;/strong&gt; are files on your hard drive.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Packages&lt;/strong&gt; are containers of symbols. They are orthogonal to files.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Systems&lt;/strong&gt; are collections of code, instructions on how to load that code, dependency lists, and metadata. They are orthogonal to packages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Projects&lt;/strong&gt; are high-level collections of… “stuff” such as code, documentation, maybe some image assets, etc. They are (mostly) orthogonal to systems (are you seeing a trend here?).&lt;/li&gt;
&lt;li&gt;Common Lisp itself knows about files and packages.&lt;/li&gt;
&lt;li&gt;ASDF adds systems.&lt;/li&gt;
&lt;li&gt;Quicklisp adds the internet.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;common-libraries&quot;&gt;Common Libraries&lt;/h3&gt;
&lt;p&gt;Common Lisp doesn’t have as &lt;em&gt;large&lt;/em&gt; of a community as some newer languages, but it still has a lot of libraries because it’s had a community for a longer time. The stability of the core language means that many libraries written in portable Common Lisp ten or fifteen years ago can still run just fine today.&lt;/p&gt;
&lt;p&gt;In this final section I’ll give you a quick overview of some of the more popular libraries you might run into as you learn the language. You don’t have to use all of them, but it’s helpful to have some idea of what’s available.&lt;/p&gt;
&lt;h4 id=&quot;alexandria&quot;&gt;Alexandria&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://common-lisp.net/project/alexandria/&quot;&gt;Alexandria&lt;/a&gt; is one of the most popular Common Lisp libraries (the name is a pun on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Library_of_Alexandria&quot;&gt;Library of Alexandria&lt;/a&gt;), and it’s a collection of all kinds of useful little utility functions like &lt;code&gt;read-file-into-byte-vector&lt;/code&gt; and &lt;code&gt;map-permutations&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are a &lt;em&gt;lot&lt;/em&gt; of utility libraries for Common Lisp around — one rite of passage is building up your own personal utility library over time — but Alexandria is the most popular one. Most projects with any dependencies at all will eventually end up with Alexandria in the dependency graph somewhere.&lt;/p&gt;
&lt;h4 id=&quot;bordeaux-threads&quot;&gt;Bordeaux Threads&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://common-lisp.net/project/bordeaux-threads/&quot;&gt;Bordeaux Threads&lt;/a&gt; was mentioned earlier. Threads aren’t part of the Common Lisp standard, but most implementations provide their own custom interface for working with them. Bordeaux Threads wraps all these implementation-specific interfaces and provides an API so you can write threaded code that will work portably.&lt;/p&gt;
&lt;p&gt;If you’re looking for something like Java’s &lt;code&gt;new Thread(() -&amp;gt; foo()).start()&lt;/code&gt;, this is what you want.&lt;/p&gt;
&lt;h4 id=&quot;cffi&quot;&gt;CFFI&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://common-lisp.net/project/cffi/&quot;&gt;CFFI&lt;/a&gt; is a foreign-function interface library that lets you load C libraries (e.g. &lt;code&gt;foo.dylib&lt;/code&gt; or &lt;code&gt;foo.so&lt;/code&gt;) and call the functions in them. It works by wrapping implementation-specific interfaces, because this isn’t part of the Common Lisp standard.&lt;/p&gt;
&lt;p&gt;Unfortunately it has the same name as Python’s FFI library, so if you’re searching for documentation make sure you’re looking at the right version.&lt;/p&gt;
&lt;h4 id=&quot;cl-ppcre&quot;&gt;CL-PPCRE&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://edicl.github.io/cl-ppcre/&quot;&gt;CL-PPCRE&lt;/a&gt; is an implementation of Perl-compatible regular expressions. If you’re looking to use regular expressions in Common Lisp, this is what you want.&lt;/p&gt;
&lt;h4 id=&quot;drakma&quot;&gt;Drakma&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://edicl.github.io/drakma/&quot;&gt;Drakma&lt;/a&gt; is an HTTP client. If you need to make an HTTP request, this is what you want. There are other HTTP clients around, but Drakma is commonly used and is fine for almost anything you might need.&lt;/p&gt;
&lt;h4 id=&quot;iterate&quot;&gt;Iterate&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://common-lisp.net/project/iterate/&quot;&gt;Iterate&lt;/a&gt; is a replacement for the &lt;code&gt;loop&lt;/code&gt; macro. It works similarly, but has a more Lispy syntax and a well-defined API for extending it with new iteration constructs. I really like it myself, but beware: if you get used to &lt;code&gt;iterate&lt;/code&gt; going back to vanilla &lt;code&gt;loop&lt;/code&gt; will feel painful.&lt;/p&gt;
&lt;h4 id=&quot;local-time&quot;&gt;local-time&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://common-lisp.net/project/local-time/&quot;&gt;local-time&lt;/a&gt; is a library for working with time and dates in Common Lisp. The standard has some basic support for times built in, but if you want to do much calculation with times (including timezones) this is probably what you want. If you’re looking for something like &lt;a href=&quot;http://www.joda.org/joda-time/&quot;&gt;Joda Time&lt;/a&gt; in Common Lisp, this is as close as you’re going to get.&lt;/p&gt;
&lt;h4 id=&quot;lparallel&quot;&gt;lparallel&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://lparallel.org/&quot;&gt;lparallel&lt;/a&gt; is a library that builds on top of Bordeaux Threads to make common parallel processing operations much easier. Think of it as &lt;a href=&quot;https://www.gnu.org/software/parallel/&quot;&gt;GNU Parallel&lt;/a&gt; for Lisp, with a few extra features (e.g. channels and tasks).&lt;/p&gt;
&lt;p&gt;For example: if you’ve got a big vector you’re mapping over with &lt;code&gt;(map 'vector #'work some-vector)&lt;/code&gt; you can split it into chunks and run in multiple threads by changing it to &lt;code&gt;(lparallel:pmap 'vector #'work some-vector)&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;named-readtables&quot;&gt;Named Readtables&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/melisgl/named-readtables&quot;&gt;Named readtables&lt;/a&gt; is a library that adds namespaces for readtables.&lt;/p&gt;
&lt;p&gt;One painful part of the standard is that reader macros are added and removed to the global readtable on the fly, so if you load multiple systems that define the same reader macros things can get messy. Named readtables adds some much-needed hygiene to that process. If you’re working with reader macros at all you absolutely want to use this.&lt;/p&gt;
&lt;h4 id=&quot;roswell&quot;&gt;Roswell&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/roswell/roswell&quot;&gt;Roswell&lt;/a&gt; is a couple of things rolled into one. It’s a C program that handles installing and running multiple different Common Lisp implementations (kind of like &lt;a href=&quot;https://github.com/creationix/nvm&quot;&gt;NVM&lt;/a&gt; or &lt;a href=&quot;https://rvm.io/&quot;&gt;rvm&lt;/a&gt;), and it also provides a unified way to write small shell scripts in Common Lisp and compile them into binaries.&lt;/p&gt;
&lt;p&gt;I used Roswell for a little over a year, but I eventually stopped and now I don’t think it’s worth the trouble, for a couple of reasons.&lt;/p&gt;
&lt;p&gt;First: if you write portable code you generally don’t need to worry running a particular version of an implementation, because Common Lisp is so stable. I usually just install the latest version of each implementation I use with a package manager or by building from source.&lt;/p&gt;
&lt;p&gt;Second: after using it for a while I found that Roswell was always very brittle to upgrade, and whenever things broke it would spew an almost JVM-sized stack trace without a decent error message.&lt;/p&gt;
&lt;p&gt;For me, the negatives outweighed the positives. I’d recommend simply using the latest version of the implementations you care about and writing portable code. For the compiling-into-binaries functionality I’d recommend using your implementation’s built-in support for this, or using UIOP’s wrapper around that, or using a separate library like &lt;a href=&quot;https://shinmera.github.io/deploy/&quot;&gt;Deploy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course your mileage might vary. If you find yourself &lt;em&gt;really&lt;/em&gt; needing to run specific versions of specific Common Lisp implementations in rapid succession, you should look into Roswell.&lt;/p&gt;
&lt;h4 id=&quot;series&quot;&gt;SERIES&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cliki.net/Series&quot;&gt;SERIES&lt;/a&gt; was almost included in Common Lisp (it’s in &lt;a href=&quot;https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node347.html&quot;&gt;Appendix A of CLtL2&lt;/a&gt;), but didn’t quite make it. It’s a library for writing functional code that looks like the traditional &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt; operations but which compiles down to efficient loops.&lt;/p&gt;
&lt;p&gt;If you’re looking for Clojure’s transducers in Common Lisp, this is what you want.&lt;/p&gt;
&lt;h4 id=&quot;st-json&quot;&gt;st-json&lt;/h4&gt;
&lt;p&gt;JSON support in Common Lisp is a god damn mess. There are &lt;a href=&quot;https://sites.google.com/site/sabraonthehill/home/json-libraries&quot;&gt;an absurd number of JSON libraries&lt;/a&gt; and I don’t really &lt;em&gt;like&lt;/em&gt; any of them.&lt;/p&gt;
&lt;p&gt;For me, the most important quality I need in a JSON library is an unambiguous, one-to-one mapping of types. For example: some libraries will deserialize JSON arrays as Lisp lists, and JSON &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; as &lt;code&gt;t&lt;/code&gt;/&lt;code&gt;nil&lt;/code&gt;. But this means &lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; both deserialize to &lt;code&gt;nil&lt;/code&gt;, so you can’t reliably round trip anything!&lt;/p&gt;
&lt;p&gt;I’ve settled on using &lt;a href=&quot;https://marijnhaverbeke.nl/st-json/&quot;&gt;st-json&lt;/a&gt; and wrapping it up to be a little more ergonomic with some glue code. It’s not the fastest solution out there, but it works for my needs. There are plenty of other options out there, so if you have different needs than me you should look into them.&lt;/p&gt;
&lt;h4 id=&quot;usocket&quot;&gt;usocket&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://common-lisp.net/project/usocket/&quot;&gt;usocket&lt;/a&gt; is a library for networking sockets. Sockets and networking aren’t part of the Common Lisp standard, but most implementations provide a custom interface for working with them. usocket wraps the implementation-specific interfaces and provides an API so you can write networking code portably.&lt;/p&gt;
&lt;p&gt;If you want to make Lisp listen on a port and read streams of bytes from clients, or want to connect to a port and send raw bytes to it, this is what you want.&lt;/p&gt;
&lt;h2 id=&quot;good-luck&quot;&gt;Good Luck!&lt;/h2&gt;
&lt;p&gt;I hope this whirlwind tour was useful. Common Lisp is an old, deep language. It’s not something you can learn in a month, but if you’re willing to spend the time it will reward careful study.&lt;/p&gt;
&lt;p&gt;Feel free to email me or pop into IRC or Discord if you have questions.&lt;/p&gt;
&lt;p&gt;Good luck!&lt;/p&gt;
</description>
<pubDate>Mon, 27 Aug 2018 15:54:25 +0000</pubDate>
<dc:creator>stevelosh</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://stevelosh.com/blog/2018/08/a-road-to-common-lisp/</dc:identifier>
</item>
<item>
<title>VSCodium: Binary releases of VSCode without MS branding, telemetry and licensing</title>
<link>https://github.com/VSCodium/vscodium</link>
<guid isPermaLink="true" >https://github.com/VSCodium/vscodium</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;&lt;h2&gt;VSCodium&lt;/h2&gt;
&lt;p&gt;This repository contains a build file to generate FLOSS release binaries of Microsoft's VSCode.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/VSCodium/vscodium/releases&quot;&gt;Download binaries here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft's downloads of VSCode are licensed under &lt;a href=&quot;https://code.visualstudio.com/license&quot; rel=&quot;nofollow&quot;&gt;this not-FLOSS license&lt;/a&gt;. That's why this repo exists. So you don't have to download+build from source.&lt;/p&gt;
&lt;p&gt;Until something more open comes around, we use the Microsoft Marketplace/Extensions in the &lt;code&gt;product.json&lt;/code&gt; file. Those links are licensed under MIT as per &lt;a href=&quot;https://github.com/Microsoft/vscode/issues/31168#issuecomment-317319063&quot;&gt;the comments on this issue.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Supported OS/arch&lt;/h3&gt;
&lt;p&gt;Currently we are only building OSX (zip) and Linux x64 (deb, rpm, and tar). If you are familiar with building Windows binaries on Travis CI + Wine please put in a PR! 💙&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;MIT&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 27 Aug 2018 12:20:27 +0000</pubDate>
<dc:creator>hsribei</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/40338071?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>VSCodium/vscodium</og:title>
<og:url>https://github.com/VSCodium/vscodium</og:url>
<og:description>binary releases of VS Code without MS branding/telemetry/licensing - VSCodium/vscodium</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/VSCodium/vscodium</dc:identifier>
</item>
<item>
<title>Tech workers say poor leadership is number one cause for burnout</title>
<link>http://blog.teamblind.com/index.php/2018/08/20/tech-workers-say-poor-leadership-is-number-one-cause-for-burnout/</link>
<guid isPermaLink="true" >http://blog.teamblind.com/index.php/2018/08/20/tech-workers-say-poor-leadership-is-number-one-cause-for-burnout/</guid>
<description>&lt;p&gt;Having discovered that burnout is a &lt;a href=&quot;http://blog.teamblind.com/index.php/2018/05/29/close-to-60-percent-of-surveyed-tech-workers-are-burnt-out-credit-karma-tops-the-list-for-most-employees-suffering-from-burnout/&quot;&gt;problem among tech workers&lt;/a&gt;, a survey on our Blind app aimed to find out its cause. We asked users from various tech companies to tell us their main source of burnout. Overwork, toxic culture, insufficient rewards, and poor leadership were some of the options they could choose from. The full details are provided below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Survey&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What is the main source of employee burnout at your current workplace?&lt;/p&gt;
&lt;p&gt;A) Work overload&lt;br/&gt;B) Toxic culture&lt;br/&gt;C) Lack of control and career growth&lt;br/&gt;D) Insufficient reward&lt;br/&gt;E) Poor leadership and unclear direction&lt;br/&gt;F) Burnout isn’t a problem at my current workplace&lt;br/&gt;G) Other&lt;/p&gt;
&lt;p&gt;Total Participants: 9,103&lt;/p&gt;
&lt;p&gt;Survey Dates: August 10, 2018 – August 17, 2018&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Overall Results&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Today, we share the final results for this survey:&lt;img class=&quot;aligncenter wp-image-2829&quot; src=&quot;http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_overall-1000x682.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;375&quot; srcset=&quot;http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_overall-1000x682.png 1000w, http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_overall-1467x1000.png 1467w, http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_overall-768x524.png 768w, http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_overall-1024x698.png 1024w&quot; sizes=&quot;(max-width: 550px) 100vw, 550px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Poor leadership and unclear direction was top reason for burnout. Among the companies that ranked highest for this option, eBay came in first followed by Salesforce and Intel.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter wp-image-2830&quot; src=&quot;http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_Bar5-1000x733.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;403&quot; srcset=&quot;http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_Bar5-1000x733.png 1000w, http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_Bar5-1364x1000.png 1364w, http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_Bar5-768x563.png 768w, http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_Bar5-1024x751.png 1024w&quot; sizes=&quot;(max-width: 550px) 100vw, 550px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Company Results&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We also broke down results for the two companies that tallied up with the most survey responses: Microsoft and Amazon. Comprehensive results for each company are displayed in the charts below.&lt;img class=&quot;wp-image-2831 aligncenter&quot; src=&quot;http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_MSFT-1000x682.png&quot; alt=&quot;&quot; width=&quot;551&quot; height=&quot;376&quot; srcset=&quot;http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_MSFT-1000x682.png 1000w, http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_MSFT-1467x1000.png 1467w, http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_MSFT-768x524.png 768w, http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_MSFT-1024x698.png 1024w&quot; sizes=&quot;(max-width: 551px) 100vw, 551px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter wp-image-2832&quot; src=&quot;http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_Amazon-1000x682.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;375&quot; srcset=&quot;http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_Amazon-1000x682.png 1000w, http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_Amazon-1467x1000.png 1467w, http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_Amazon-768x524.png 768w, http://blog.teamblind.com/wp-content/uploads/2018/08/082018_TrustHR_MultipleChoice_Amazon-1024x698.png 1024w&quot; sizes=&quot;(max-width: 550px) 100vw, 550px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;According to our survey results, the top three reasons for burnout at both tech companies are poor leadership, overwork, and insufficient rewards. Discussions on Blind, particularly regarding culture at &lt;a href=&quot;https://www.teamblind.com/search/amazon%20culture&quot;&gt;Amazon&lt;/a&gt; and &lt;a href=&quot;https://www.teamblind.com/search/microsoft%20culture&quot;&gt;Microsoft&lt;/a&gt;, might offer some insight into why this is.&lt;/p&gt;



&lt;div class=&quot;post-item-metadata entry-meta&quot;&gt;&lt;span class=&quot;tags-links&quot;&gt;Tags: &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/amazon/&quot; rel=&quot;tag&quot;&gt;amazon&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/apple/&quot; rel=&quot;tag&quot;&gt;apple&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/blind-app/&quot; rel=&quot;tag&quot;&gt;blind app&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/burnout/&quot; rel=&quot;tag&quot;&gt;burnout&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/career/&quot; rel=&quot;tag&quot;&gt;career&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/cisco/&quot; rel=&quot;tag&quot;&gt;cisco&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/company-culture/&quot; rel=&quot;tag&quot;&gt;company culture&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/ebay/&quot; rel=&quot;tag&quot;&gt;ebay&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/expedia/&quot; rel=&quot;tag&quot;&gt;expedia&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/facebook/&quot; rel=&quot;tag&quot;&gt;facebook&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/google/&quot; rel=&quot;tag&quot;&gt;google&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/intel/&quot; rel=&quot;tag&quot;&gt;intel&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/job-burnout/&quot; rel=&quot;tag&quot;&gt;job burnout&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/linkedin/&quot; rel=&quot;tag&quot;&gt;linkedIn&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/microsoft/&quot; rel=&quot;tag&quot;&gt;microsoft&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/occupational-burnout/&quot; rel=&quot;tag&quot;&gt;occupational burnout&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/oracle/&quot; rel=&quot;tag&quot;&gt;oracle&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/salesforce/&quot; rel=&quot;tag&quot;&gt;salesforce&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/tech/&quot; rel=&quot;tag&quot;&gt;tech&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/uber/&quot; rel=&quot;tag&quot;&gt;uber&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/workplace-culture/&quot; rel=&quot;tag&quot;&gt;workplace culture&lt;/a&gt;, &lt;a href=&quot;http://blog.teamblind.com/index.php/tag/workplace-stress/&quot; rel=&quot;tag&quot;&gt;workplace stress&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 27 Aug 2018 04:46:31 +0000</pubDate>
<dc:creator>Raj7k</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://blog.teamblind.com/index.php/2018/08/20/tech-workers-say-poor-leadership-is-number-one-cause-for-burnout/</dc:identifier>
</item>
<item>
<title>U.S. states reconsider confidential deals in workplace harassment</title>
<link>https://www.nytimes.com/aponline/2018/08/26/us/ap-us-sexual-misconduct-confidential-agreements.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/aponline/2018/08/26/us/ap-us-sexual-misconduct-confidential-agreements.html</guid>
<description>&lt;div readability=&quot;43&quot;&gt;
&lt;div class=&quot;css-1h6whtw&quot; readability=&quot;31&quot;&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Confidentiality agreements have come under fire during the #MeToo movement as one way abusive men have been able to hold on to their jobs, and keep harassing more women.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;State lawmakers are listening. They introduced bills in at least 16 states this year to restrict the use by private employers of non-disclosure agreements in sexual harassment cases, according to the National Conference of State Legislatures. They became law in six states: Arizona, Maryland, New York, Tennessee, Vermont and Washington.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Lawmakers in California also took action this past week, sending two bills to the governor. One, championed by actress Jane Fonda and former Fox News anchor Gretchen Carlson, would prohibit employers from requiring nondisclosure agreements related to sexual misconduct as a condition of getting or keeping a job.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;The other would ban settlements in sexual harassment or discrimination cases that seek to keep the circumstances secret. It would apply to the private sector, government agencies and the Legislature.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;&lt;div readability=&quot;45&quot;&gt;
&lt;div class=&quot;css-1h6whtw&quot; readability=&quot;35&quot;&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Legal experts say it's not clear yet what effect such legislation will have on sexual harassment in the workplace. Some warned that the new laws could have unintended consequences.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Zelda Perkins, a former assistant to Hollywood producer Harvey Weinstein, has said confidentiality agreements like the one she signed don't adequately protect victims. She left the company in 1988 after one of her colleagues told her Weinstein tried to rape her.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Former Fox News anchor Juliet Huddy, who agreed to keep the details confidential when she settled harassment claims against former host Bill O'Reilly, told NBC's Megyn Kelly last year that signing such an agreement is &quot;not necessarily the best move.&quot; If more women knew others were being harassed, they might be better prepared to fight it, she said.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Among the new laws is one in New York, which says settlements for sexual harassment may not include a confidentiality provision unless the person who brought the complaint wants it that way. Arizona now allows victims of sexual misconduct to talk to police or testify in a criminal case even if they signed a non-disclosure agreement.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;The NCSL says Maryland, Tennessee, Washington and Vermont now also restrict non-disclosure agreements in employment contracts. Rhode Island Democratic state Rep. Teresa Tanzi sponsored a similar bill that she said was directly inspired by some of the infamous cases of harassment.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;&lt;div readability=&quot;48.5&quot;&gt;
&lt;div class=&quot;css-1h6whtw&quot; readability=&quot;42&quot;&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;&quot;This is how it was allowed to exist and perpetuate,&quot; she said.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;The Rhode Island bill ultimately failed.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Congress also targeted confidentiality agreements in the tax bill it passed late last year. It bars people from deducting confidential settlements with sexual harassment and misconduct victims as a business expense on their federal taxes.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;A new Vermont law prohibits employers from requiring workers, as a condition of employment, to sign agreements preventing them from disclosing or reporting sexual harassment. It does not outlaw voluntary nondisclosure agreements in settlements.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Among those who pushed for the Vermont law was Lisa Senecal, who says she was harassed by an executive at a technology company in Stowe, Vermont, when she was seeking a job there.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;&quot;There really isn't a more egregious form of sexual harassment than what happened with me,&quot; she said, while declining to provide details.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;She struck a settlement with the company that included a non-disclosure agreement, and the executive left the firm. Months later, another woman told Senecal she had been harassed by the same executive under similar circumstances.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Because of the non-disclosure agreement, Senecal was unable to tell the woman that she had experienced almost the exact same behavior, she said.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;&lt;div readability=&quot;49&quot;&gt;
&lt;div class=&quot;css-1h6whtw&quot; readability=&quot;43&quot;&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;&quot;I think the worst is to find out there's someone else and know that you can't help that person to the degree that you'd like to be able to,&quot; she said.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;The second woman sued, prompting a denial from the former executive. The company's CEO told a local newspaper he was proud of the company's track record on preventing harassment. Senecal said after hearing those comments and believing them to be untrue because of her own experience, she decided to break her silence.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;In testimony in June before a federal task force studying workplace harassment, employment attorney Kathleen M. McKenna disputed the idea that non-disclosure agreements are acts of secrecy that protect harassers.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;She said proposals to ban them could be counterproductive. Without a non-disclosure agreement, for example, there could be less incentive for an employer to settle.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;That could mean that victims of harassment have to go through the difficulties and uncertainties of a trial or agree to a settlement with a lower dollar figure.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Orly Lobel, a law professor at the University of San Diego, said employment contracts that prevent workers in advance from speaking about illegal or troubling conditions at work are probably unenforceable already. Even so, workers often don't know that or might not be able to fight that battle, she said.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;&quot;The cost of litigation, getting an attorney to represent you — everything is kind of stacked against an employee taking that risk,&quot; she said.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;&lt;div readability=&quot;35.5&quot;&gt;
&lt;div class=&quot;css-1h6whtw&quot; readability=&quot;16&quot;&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;The new laws mean that employees accused of misconduct are also less likely to get a promise of secrecy from their company, said Elizabeth Tippett, an associate professor at the University of Oregon School of Law. But overall, she said it's difficult to know what effect such laws will have on the workplace.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;&quot;It's a really hard question,&quot; she said. &quot;We don't really know how it's going to change things.&quot;&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;___&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;</description>
<pubDate>Mon, 27 Aug 2018 01:49:34 +0000</pubDate>
<dc:creator>KirinDave</dc:creator>
<og:url>https://www.nytimes.com/aponline/2018/08/26/us/ap-us-sexual-misconduct-confidential-agreements.html</og:url>
<og:type>article</og:type>
<og:title>Some States Place Limits on Secret Harassment Settlements</og:title>
<og:image>https://static01.nyt.com/images/icons/t_logo_291_black.png</og:image>
<og:description>Confidentiality agreements have come under fire during the #MeToo movement as one way abusive men have been able to hold on to their jobs, and keep harassing more women.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/aponline/2018/08/26/us/ap-us-sexual-misconduct-confidential-agreements.html</dc:identifier>
</item>
<item>
<title>Google’s Jeff Dean’s undergrad senior thesis on neural networks (1990) [pdf]</title>
<link>https://drive.google.com/file/d/1I1fs4sczbCaACzA9XwxR3DiuXVtqmejL/view</link>
<guid isPermaLink="true" >https://drive.google.com/file/d/1I1fs4sczbCaACzA9XwxR3DiuXVtqmejL/view</guid>
<description>&lt;meta name=&quot;google&quot; content=&quot;notranslate&quot;/&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge;&quot;/&gt;&lt;title&gt;Jeffrey Dean CSE summa sum1990.pdf - Google Drive&lt;/title&gt;&lt;meta property=&quot;og:title&quot; content=&quot;Jeffrey Dean CSE summa sum1990.pdf&quot;/&gt;&lt;meta property=&quot;og:type&quot; content=&quot;article&quot;/&gt;&lt;meta property=&quot;og:site_name&quot; content=&quot;Google Docs&quot;/&gt;&lt;meta property=&quot;og:url&quot; content=&quot;https://drive.google.com/file/d/1I1fs4sczbCaACzA9XwxR3DiuXVtqmejL/view?usp=embed_facebook&quot;/&gt;&lt;meta property=&quot;og:image&quot; content=&quot;https://lh3.googleusercontent.com/t33c8AkjfuJ4I1vaK3Ft-HdhAvZys0FWy9ffwxbnK7QdZ0VFR7METwY8qpk=w1200-h630-p&quot;/&gt;&lt;meta property=&quot;og:image:width&quot; content=&quot;1200&quot;/&gt;&lt;meta property=&quot;og:image:height&quot; content=&quot;630&quot;/&gt;&lt;link rel=&quot;shortcut icon&quot; href=&quot;https://ssl.gstatic.com/docs/doclist/images/icon_14_pdf_favicon.ico&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/file/client/css/2271424374-projector_css_ltr.css&quot;/&gt;
       &quot;;var c=a.firstChild.firstChild;a.innerHTML=&quot;&quot;;return!c.parentElement});_.Id=function(a,c){a.src=_.sd(c);(c=_.fd())&amp;amp;&amp;amp;a.setAttribute(&quot;nonce&quot;,c)};
_.Jd=function(a,c){return _.n(c)?a.getElementById(c):c};_.Kd=function(a,c){return(c||window.document).getElementsByTagName(String(a))};_.Ld=function(a){return a.parentWindow||a.defaultView};_.Md=function(a){return window.document.createElement(String(a))};_.Nd=function(a){return a&amp;amp;&amp;amp;a.parentNode?a.parentNode.removeChild(a):null};

}catch(e){_._DumpException(e)}
try{
var Qd,Td;_.Od=function(a){if(a instanceof _.vd&amp;amp;&amp;amp;a.constructor===_.vd&amp;amp;&amp;amp;a.j===_.ud)return a.f;_.ya(a);return&quot;type_error:SafeUrl&quot;};_.Pd=function(a){if(a instanceof _.vd)return a;a=&quot;object&quot;==typeof a&amp;amp;&amp;amp;a.Hb?a.nb():String(a);_.wd.test(a)||(a=&quot;about:invalid#zClosurez&quot;);return _.xd(a)};Qd=function(a){var c=arguments.length;if(1==c&amp;amp;&amp;amp;_.r(arguments[0]))return Qd.apply(null,arguments[0]);for(var d={},e=0;e&lt;c d=&quot;&quot; instanceof=&quot;&quot; _.vd=&quot;&quot; _.sd=&quot;function(a){return&quot; _.aa=&quot;&quot; qd=&quot;&quot; area=&quot;&quot; button=&quot;&quot; head=&quot;&quot; input=&quot;&quot; link=&quot;&quot; menu=&quot;&quot; meta=&quot;&quot; optgroup=&quot;&quot; option=&quot;&quot; progress=&quot;&quot; select=&quot;&quot; source=&quot;&quot; textarea=&quot;&quot; title=&quot;&quot; track=&quot;&quot; _.m=&quot;function(a,c,d){_.r(d)&amp;amp;&amp;amp;(d=d.join(&amp;quot;&quot; e=&quot;aria-&quot; text=&quot;&quot; in=&quot;&quot; try=&quot;&quot; c=&quot;_.l,d=0;d&amp;lt;a.length;d++)if(c=c[a[d]],null==c)return&quot; null=&quot;&quot; _.jc=&quot;&quot; var=&quot;&quot; yd=&quot;&quot; a=&quot;&quot; _.ab=&quot;&quot; be=&quot;{2:&amp;quot;touch&amp;quot;,3:&amp;quot;pen&amp;quot;,4:&amp;quot;mouse&amp;quot;};&quot; _.ae.prototype.init=&quot;function(a,c){var&quot; void=&quot;&quot; _.ae.prototype.stoppropagation=&quot;function(){_.ae.H.stopPropagation.call(this);this.kb.stopPropagation?this.kb.stopPropagation():this.kb.cancelBubble=!0};_.ae.prototype.preventDefault=function(){_.ae.H.preventDefault.call(this);var&quot; if=&quot;&quot;&gt;=a.keyCode)a.keyCode=-1}catch(c){}};
var ee;_.ce=&quot;closure_listenable_&quot;+(1E6*Math.random()|0);_.de=function(a){return!(!a||!a[_.ce])};ee=0;var fe;fe=function(a,c,d,e,f){this.listener=a;this.b=null;this.src=c;this.type=d;this.capture=!!e;this.Dd=f;this.key=++ee;this.Nc=this.sd=!1};_.ge=function(a){a.Nc=!0;a.listener=null;a.b=null;a.src=null;a.Dd=null};_.he=function(a){this.src=a;this.b={};this.f=0};_.he.prototype.add=function(a,c,d,e,f){var g=a.toString();a=this.b[g];a||(a=this.b[g]=[],this.f++);var h=ie(a,c,e,f);-1&lt;h fe=&quot;&quot; c=&quot;&quot; in=&quot;&quot; this.b=&quot;&quot; f=&quot;this.b[a];c=ie(f,c,d,e);return-1&amp;lt;c?(_.ge(f[c]),Array.prototype.splice.call(f,c,1),0==f.length&amp;amp;&amp;amp;(delete&quot; _.je=&quot;function(a,c){var&quot; d=&quot;c.type;if(!(d&quot; a.b=&quot;&quot; e=&quot;_.Xd(a.b[d],c);e&amp;amp;&amp;amp;(_.ge(c),0==a.b[d].length&amp;amp;&amp;amp;(delete&quot; _.he.prototype.haslistener=&quot;function(a,c){var&quot; yd=&quot;&quot; g=&quot;0;g&amp;lt;a.length;++g)if(!(d&amp;amp;&amp;amp;a[g].type!=e||f&amp;amp;&amp;amp;a[g].capture!=c))return!0;return!1})};var&quot; ie=&quot;function(a,c,d,e){for(var&quot; var=&quot;&quot; ke=&quot;&quot; _.ne=&quot;&quot; null=&quot;&quot; _.de=&quot;&quot; pe=&quot;function(a,c,d,e,f,g){if(!c)throw&quot; error=&quot;&quot; h=&quot;_.Aa(f)?!!f.capture:!!f,m=_.qe(a);m||(a[ke]=m=new&quot; _.he=&quot;&quot; if=&quot;&quot; throw=&quot;&quot; re=&quot;function(){var&quot; a=&quot;ue,c=_.Sc?function(d){return&quot; a.call=&quot;&quot; _.we=&quot;function(a){if(_.va(a)||!a||a.Nc)return!1;var&quot; c.td=&quot;&quot; le=&quot;&quot; ye=&quot;function(a,c,d,e){var&quot; d.call=&quot;&quot; ue=&quot;function(a,c){if(a.Nc)return!0;if(!_.Sc){var&quot; _.ae=&quot;&quot;&gt;d.keyCode||void 0!=d.returnValue)){a:{var f=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(h){f=!0}if(f||void 0==d.returnValue)d.returnValue=!0}d=[];for(f=c.b;f;f=f.parentNode)d.push(f);a=a.type;for(f=d.length-1;!c.j&amp;amp;&amp;amp;0&amp;gt;&amp;gt;0);_.oe=function(a){if(_.za(a))return a;a[ze]||(a[ze]=function(c){return a.handleEvent(c)});return a[ze]};

}catch(e){_._DumpException(e)}
try{
_.Ae=function(a,c,d){return 2&amp;gt;=arguments.length?Array.prototype.slice.call(a,c):Array.prototype.slice.call(a,c,d)};_.O=function(){_.G.call(this);this.Gb=new _.he(this);this.kg=this;this.Ge=null};_.v(_.O,_.G);_.O.prototype[_.ce]=!0;_.k=_.O.prototype;_.k.Sc=function(){return this.Ge};_.k.Ac=function(a){this.Ge=a};_.k.addEventListener=function(a,c,d,e){_.N(this,a,c,d,e)};_.k.removeEventListener=function(a,c,d,e){_.ve(this,a,c,d,e)};
_.k.dispatchEvent=function(a){var c,d=this.Sc();if(d)for(c=[];d;d=d.Sc())c.push(d);d=this.kg;var e=a.type||a;if(_.n(a))a=new _.$d(a,d);else if(a instanceof _.$d)a.target=a.target||d;else{var f=a;a=new _.$d(e,d);_.Va(a,f)}f=!0;if(c)for(var g=c.length-1;!a.j&amp;amp;&amp;amp;0a.f&amp;amp;&amp;amp;(a.f++,c.next=a.b,a.b=c)};
var Ge=function(a){_.l.setTimeout(function(){throw a;},0)},He,Ie=function(){var a=_.l.MessageChannel;&quot;undefined&quot;===typeof a&amp;amp;&amp;amp;&quot;undefined&quot;!==typeof window&amp;amp;&amp;amp;window.postMessage&amp;amp;&amp;amp;window.addEventListener&amp;amp;&amp;amp;!_.x(&quot;Presto&quot;)&amp;amp;&amp;amp;(a=function(){var a=window.document.createElement(&quot;IFRAME&quot;);a.style.display=&quot;none&quot;;a.src=&quot;&quot;;window.document.documentElement.appendChild(a);var c=a.contentWindow;a=c.document;a.open();a.write(&quot;&quot;);a.close();var d=&quot;callImmediate&quot;+Math.random(),e=&quot;file:&quot;==c.location.protocol?&quot;*&quot;:c.location.protocol+
&quot;//&quot;+c.location.host;a=(0,_.u)(function(a){if((&quot;*&quot;==e||a.origin==e)&amp;amp;&amp;amp;a.data==d)this.port1.onmessage()},this);c.addEventListener(&quot;message&quot;,a,!1);this.port1={};this.port2={postMessage:function(){c.postMessage(d,e)}}});if(&quot;undefined&quot;!==typeof a&amp;amp;&amp;amp;!_.x(&quot;Trident&quot;)&amp;amp;&amp;amp;!_.x(&quot;MSIE&quot;)){var c=new a,d={},e=d;c.port1.onmessage=function(){if(_.ua(d.next)){d=d.next;var a=d.Te;d.Te=null;a()}};return function(a){e.next={Te:a};e=e.next;c.port2.postMessage(0)}}return&quot;undefined&quot;!==typeof window.document&amp;amp;&amp;amp;&quot;onreadystatechange&quot;in
window.document.createElement(&quot;SCRIPT&quot;)?function(a){var c=window.document.createElement(&quot;SCRIPT&quot;);c.onreadystatechange=function(){c.onreadystatechange=null;c.parentNode.removeChild(c);c=null;a();a=null};window.document.documentElement.appendChild(c)}:function(a){_.l.setTimeout(a,0)}};
var Je=function(){this.f=this.b=null},Le=new Ee(function(){return new Ke},function(a){a.reset()});Je.prototype.add=function(a,c){var d=Le.get();d.set(a,c);this.f?this.f.next=d:this.b=d;this.f=d};Je.prototype.remove=function(){var a=null;this.b&amp;amp;&amp;amp;(a=this.b,this.b=this.b.next,this.b||(this.f=null),a.next=null);return a};var Ke=function(){this.next=this.scope=this.b=null};Ke.prototype.set=function(a,c){this.b=a;this.scope=c;this.next=null};Ke.prototype.reset=function(){this.next=this.scope=this.b=null};
var Qe=function(a,c){Me||Ne();Oe||(Me(),Oe=!0);Pe.add(a,c)},Me,Ne=function(){if(_.l.Promise&amp;amp;&amp;amp;_.l.Promise.resolve){var a=_.l.Promise.resolve(void 0);Me=function(){a.then(Re)}}else Me=function(){var a=Re;!_.za(_.l.setImmediate)||_.l.Window&amp;amp;&amp;amp;_.l.Window.prototype&amp;amp;&amp;amp;!_.x(&quot;Edge&quot;)&amp;amp;&amp;amp;_.l.Window.prototype.setImmediate==_.l.setImmediate?(He||(He=Ie()),He(a)):_.l.setImmediate(a)}},Oe=!1,Pe=new Je,Re=function(){for(var a;a=Pe.remove();){try{a.b.call(a.scope)}catch(c){Ge(c)}Fe(Le,a)}Oe=!1};
_.Se=function(a){a.prototype.then=a.prototype.then;a.prototype.$goog_Thenable=!0};_.Te=function(a){if(!a)return!1;try{return!!a.$goog_Thenable}catch(c){return!1}};var We,af,ef,cf,hf,gf,jf;_.Ve=function(a,c){this.b=0;this.B=void 0;this.o=this.f=this.j=null;this.A=this.w=!1;if(a!=_.wa)try{var d=this;a.call(c,function(a){Ue(d,2,a)},function(a){Ue(d,3,a)})}catch(e){Ue(this,3,e)}};We=function(){this.next=this.context=this.f=this.j=this.b=null;this.o=!1};We.prototype.reset=function(){this.context=this.f=this.j=this.b=null;this.o=!1};var Xe=new Ee(function(){return new We},function(a){a.reset()}),Ye=function(a,c,d){var e=Xe.get();e.j=a;e.f=c;e.context=d;return e};
_.Ve.prototype.then=function(a,c,d){return _.Ze(this,_.za(a)?a:null,_.za(c)?c:null,d)};_.Se(_.Ve);_.Ve.prototype.cancel=function(a){0==this.b&amp;amp;&amp;amp;Qe(function(){var c=new _.$e(a);af(this,c)},this)};af=function(a,c){if(0==a.b)if(a.j){var d=a.j;if(d.f){for(var e=0,f=null,g=null,h=d.f;h&amp;amp;&amp;amp;(h.o||(e++,h.b==a&amp;amp;&amp;amp;(f=h),!(f&amp;amp;&amp;amp;1&lt;e ue=&quot;&quot; ef=&quot;function(a,c){a.f||2!=a.b&amp;amp;&amp;amp;3!=a.b||df(a);a.o?a.o.next=c:a.f=c;a.o=c};_.Ze=function(a,c,d,e){var&quot; f=&quot;Ye(null,null,null);f.b=new&quot; _.ve=&quot;&quot; instanceof=&quot;&quot; _.=&quot;&quot; f.b=&quot;&quot; var=&quot;&quot; typeerror=&quot;&quot; e=&quot;d,f=a.D,g=a.G;if(e&quot; h=&quot;!0}else&quot; if=&quot;&quot; m=&quot;e.then;if(_.za(m)){ff(e,m,f,g,a);h=!0;break&quot; a=&quot;&quot; g=&quot;!1,h=function(a){g||(g=!0,d.call(f,a))},m=function(a){g||(g=!0,e.call(f,a))};try{c.call(a,h,m)}catch(q){m(q)}},&quot; df=&quot;function(a){a.w||(a.w=!0,Qe(a.C,a))},bf=function(a){var&quot; c=&quot;null;a.f&amp;amp;&amp;amp;(c=a.f,a.f=c.next,c.next=null);a.f||(a.o=null);return&quot; try=&quot;&quot; gf=&quot;function(a,c){a.A=!0;Qe(function(){a.A&amp;amp;&amp;amp;jf.call(null,c)})};jf=Ge;_.$e=function(a){_.Fa.call(this,a)};_.v(_.$e,_.Fa);_.$e.prototype.name=&amp;quot;cancel&amp;quot;;&quot; mf=&quot;&quot; a.ka=&quot;&quot; _.k.lj=&quot;function(){if(this.Xb){var&quot; this.b=&quot;&quot; _.pf=&quot;function(a,c,d){if(_.za(a))d&amp;amp;&amp;amp;(a=(0,_.u)(a,d));else&quot; a.handleevent=&quot;&quot; throw=&quot;&quot; error=&quot;&quot; qf=&quot;&quot;/&gt;/g;uf=/&quot;/g;vf=/'/g;wf=/\x00/g;xf=/[\x00&amp;amp;&quot;']/;_.yf=function(a){if(!xf.test(a))return a;-1!=a.indexOf(&quot;&amp;amp;&quot;)&amp;amp;&amp;amp;(a=a.replace(rf,&quot;&amp;amp;&quot;));-1!=a.indexOf(&quot;&quot;)&amp;amp;&amp;amp;(a=a.replace(tf,&quot;&amp;gt;&quot;));-1!=a.indexOf('&quot;')&amp;amp;&amp;amp;(a=a.replace(uf,&quot;&quot;&quot;));-1!=a.indexOf(&quot;'&quot;)&amp;amp;&amp;amp;(a=a.replace(vf,&quot;'&quot;));-1!=a.indexOf(&quot;\x00&quot;)&amp;amp;&amp;amp;(a=a.replace(wf,&quot;&quot;));return a};
_.zf=function(a){return String(a).replace(/([-()\[\]{}+?*.$\^|,:#&quot;);d=d.join(&quot;&quot;)}d=a.createElement(d);e&amp;amp;&amp;amp;(_.n(e)?d.className=e:_.r(e)?d.className=e.join(&quot; &quot;):_.Kf(d,e));2&lt;c.length d=&quot;&quot; rf=&quot;&quot; c=&quot;&quot; _.tf=&quot;function(a,c){if(!a||!c)return!1;if(a.contains&amp;amp;&amp;amp;1==c.nodeType)return&quot; a=&quot;=c||a.contains(c);if(&amp;quot;undefined&amp;quot;!=typeof&quot; a.comparedocumentposition=&quot;&quot; if=&quot;&quot; _.sf=&quot;&quot; _.vf=&quot;function(a){try{var&quot; null=&quot;&quot; _.jd=&quot;&quot; this.b.createelement=&quot;&quot; _.wf=&quot;&quot; _.yf=&quot;function(a){_.G.call(this);this.U=a;this.P={}};_.v(_.Yf,_.G);var&quot; zf=&quot;[];_.Yf.prototype.K=function(a,c,d,e){return&quot; h=&quot;0;h&amp;lt;d.length;h++){var&quot; m=&quot;_.N(c,d[h],e||a.handleEvent,f||!1,g||a.U||a);if(!m)break;a.P[m.key]=m}return&quot; ag=&quot;&quot; var=&quot;&quot; g=&quot;0;g&amp;lt;c.length;g++)this.Ga(a,c[g],d,e,f);else&quot; this.p=&quot;&quot; this=&quot;&quot; _.bg=&quot;function(a){_.Cf(a.P,function(a,d){this.P.hasOwnProperty(d)&amp;amp;&amp;amp;_.we(a)},a);a.P={}};_.Yf.prototype.O=function(){_.Yf.H.O.call(this);_.bg(this)};_.Yf.prototype.handleEvent=function(){throw&quot; error=&quot;&quot; fg=&quot;&quot; _.eg=&quot;function(a,c,d,e,f,g){if(_.hb&amp;amp;&amp;amp;!_.wb(&amp;quot;525&amp;quot;))return!0;if(_.ib&amp;amp;&amp;amp;f)return&quot; _.cg=&quot;&quot; _.gb=&quot;&quot;&gt;=a||96=a||65=a||(_.hb||_.eb)&amp;amp;&amp;amp;0==a)return!0;switch(a){case 32:case 43:case 63:case 64:case 107:case 109:case 110:case 111:case 186:case 59:case 189:case 187:case 61:case 188:case 190:case 191:case 192:case 222:case 219:case 220:case 221:return!0;default:return!1}};_.dg=function(a){if(_.gb)a=fg(a);else if(_.ib&amp;amp;&amp;amp;_.hb)switch(a){case 93:a=91}return a}; fg=function(a){switch(a){case 61:return 187;case 59:return 186;case 173:return 189;case 224:return 91;case 0:return 224;default:return a}};
var ig;_.hg=function(a,c,d){if(_.n(c))(c=_.gg(a,c))&amp;amp;&amp;amp;(a.style[c]=d);else for(var e in c){d=a;var f=c[e],g=_.gg(d,e);g&amp;amp;&amp;amp;(d.style[g]=f)}};ig={};_.gg=function(a,c){var d=ig[c];if(!d){var e=_.Af(c);d=e;void 0===a.style[e]&amp;amp;&amp;amp;(e=(_.hb?&quot;Webkit&quot;:_.gb?&quot;Moz&quot;:_.y?&quot;ms&quot;:_.db?&quot;O&quot;:null)+Bf(e),void 0!==a.style[e]&amp;amp;&amp;amp;(d=e));ig[c]=d}return d};_.jg=function(a,c){var d=_.Hf(a);return d.defaultView&amp;amp;&amp;amp;d.defaultView.getComputedStyle&amp;amp;&amp;amp;(a=d.defaultView.getComputedStyle(a,null))?a[c]||a.getPropertyValue(c)||&quot;&quot;:&quot;&quot;};
_.kg=function(a,c){return _.jg(a,c)||(a.currentStyle?a.currentStyle[c]:null)||a.style&amp;amp;&amp;amp;a.style[c]};_.lg=function(a){a=a?_.Hf(a):window.document;return!_.y||_.yb(9)||_.Lf(_.Xf(a).b)?a.documentElement:a.body};_.mg=function(a){try{var c=a.getBoundingClientRect()}catch(d){return{left:0,top:0,right:0,bottom:0}}_.y&amp;amp;&amp;amp;a.ownerDocument.body&amp;amp;&amp;amp;(a=a.ownerDocument,c.left-=a.documentElement.clientLeft+a.body.clientLeft,c.top-=a.documentElement.clientTop+a.body.clientTop);return c};
_.ng=function(a){var c=_.Hf(a),d=new _.Df(0,0),e=_.lg(c);if(a==e)return d;a=_.mg(a);c=_.Of(_.Xf(c).b);d.x=a.left+c.x;d.b=a.top+c.b;return d};_.pg=function(a,c,d){if(c instanceof _.Ef)d=c.height,c=c.width;else if(void 0==d)throw Error(&quot;w&quot;);a.style.width=_.og(c,!0);a.style.height=_.og(d,!0)};_.og=function(a,c){&quot;number&quot;==typeof a&amp;amp;&amp;amp;(a=(c?Math.round(a):a)+&quot;px&quot;);return a};
_.rg=function(a){var c=_.qg;if(&quot;none&quot;!=_.kg(a,&quot;display&quot;))return c(a);var d=a.style,e=d.display,f=d.visibility,g=d.position;d.visibility=&quot;hidden&quot;;d.position=&quot;absolute&quot;;d.display=&quot;inline&quot;;a=c(a);d.display=e;d.position=g;d.visibility=f;return a};_.qg=function(a){var c=a.offsetWidth,d=a.offsetHeight,e=_.hb&amp;amp;&amp;amp;!c&amp;amp;&amp;amp;!d;return _.ua(c)&amp;amp;&amp;amp;!e||!a.getBoundingClientRect?new _.Ef(c,d):(a=_.mg(a),new _.Ef(a.right-a.left,a.bottom-a.top))};_.sg=function(a,c){a.style.display=c?&quot;&quot;:&quot;none&quot;}; _.tg=_.gb?&quot;MozUserSelect&quot;:_.hb||_.eb?&quot;WebkitUserSelect&quot;:null;

}catch(e){_._DumpException(e)}
try{
var wg,yg;_.ug=function(a){if(a instanceof _.Dd&amp;amp;&amp;amp;a.constructor===_.Dd&amp;amp;&amp;amp;a.o===_.Cd)return a.f;_.ya(a);return&quot;type_error:SafeHtml&quot;};_.vg=function(a,c){c=_.ug(c);if((0,_.Hd)())for(;a.lastChild;)a.removeChild(a.lastChild);a.innerHTML=c};wg=function(a,c,d,e){Array.prototype.splice.apply(a,_.Ae(arguments,1))};_.xg=function(a){return null==a?&quot;&quot;:String(a)};yg=function(a,c){return null!==a&amp;amp;&amp;amp;c in a?a[c]:void 0};
_.zg=function(){};_.xa(_.zg);_.zg.prototype.b=0;_.Ag=function(a){return&quot;:&quot;+(a.b++).toString(36)};var Bg,Eg,Fg;_.R=function(a){_.O.call(this);this.j=a||_.Xf();this.$=Bg;this.W=null;this.Fa=!1;this.b=null;this.M=void 0;this.D=this.A=this.f=this.w=null;this.va=!1};_.v(_.R,_.O);_.R.prototype.Da=_.zg.ta();Bg=null;_.Cg=function(a){return a.W||(a.W=_.Ag(a.Da))};_.R.prototype.F=function(){return this.b};_.Dg=function(a){a.M||(a.M=new _.Yf(a));return a.M};
Eg=function(a,c){if(a==c)throw Error(&quot;x&quot;);var d;if(d=c&amp;amp;&amp;amp;a.f&amp;amp;&amp;amp;a.W){d=a.f;var e=a.W;d=d.D&amp;amp;&amp;amp;e?yg(d.D,e)||null:null}if(d&amp;amp;&amp;amp;a.f!=c)throw Error(&quot;x&quot;);a.f=c;_.R.H.Ac.call(a,c)};_.R.prototype.Ac=function(a){if(this.f&amp;amp;&amp;amp;this.f!=a)throw Error(&quot;y&quot;);_.R.H.Ac.call(this,a)};_.R.prototype.qc=function(){this.b=this.j.createElement(&quot;DIV&quot;)};_.R.prototype.yc=function(a){Fg(this,a)};Fg=function(a,c,d){if(a.Fa)throw Error(&quot;z&quot;);a.b||a.qc();c?c.insertBefore(a.b,d||null):a.j.b.body.appendChild(a.b);a.f&amp;amp;&amp;amp;!a.f.Fa||a.Ba()};
_.Gg=function(a,c){if(a.Fa)throw Error(&quot;z&quot;);if(c){a.va=!0;var d=_.Hf(c);a.j&amp;amp;&amp;amp;a.j.b==d||(a.j=_.Xf(c));a.Wb(c);a.Ba()}else throw Error(&quot;A&quot;);};_.k=_.R.prototype;_.k.Wb=function(a){this.b=a};_.k.Ba=function(){this.Fa=!0;_.Hg(this,function(a){!a.Fa&amp;amp;&amp;amp;a.F()&amp;amp;&amp;amp;a.Ba()})};_.k.Qa=function(){_.Hg(this,function(a){a.Fa&amp;amp;&amp;amp;a.Qa()});this.M&amp;amp;&amp;amp;_.bg(this.M);this.Fa=!1};
_.k.O=function(){this.Fa&amp;amp;&amp;amp;this.Qa();this.M&amp;amp;&amp;amp;(this.M.ka(),delete this.M);_.Hg(this,function(a){a.ka()});!this.va&amp;amp;&amp;amp;this.b&amp;amp;&amp;amp;_.Nd(this.b);this.f=this.w=this.b=this.D=this.A=null;_.R.H.O.call(this)};
_.k.kc=function(a,c,d){if(a.Fa&amp;amp;&amp;amp;(d||!this.Fa))throw Error(&quot;z&quot;);if(0&amp;gt;c||c&amp;gt;_.Ig(this))throw Error(&quot;B&quot;);this.D&amp;amp;&amp;amp;this.A||(this.D={},this.A=[]);if(a.f==this){var e=_.Cg(a);this.D[e]=a;_.Xd(this.A,a)}else{e=this.D;var f=_.Cg(a);if(null!==e&amp;amp;&amp;amp;f in e)throw Error(&quot;e`&quot;+f);e[f]=a}Eg(a,this);wg(this.A,c,0,a);a.Fa&amp;amp;&amp;amp;this.Fa&amp;amp;&amp;amp;a.f==this?(d=this.b,c=d.childNodes[c]||null,c!=a.F()&amp;amp;&amp;amp;d.insertBefore(a.F(),c)):d?(this.b||this.qc(),c=_.Jg(this,c+1),Fg(a,this.b,c?c.b:null)):this.Fa&amp;amp;&amp;amp;!a.Fa&amp;amp;&amp;amp;a.b&amp;amp;&amp;amp;a.b.parentNode&amp;amp;&amp;amp;1==a.b.parentNode.nodeType&amp;amp;&amp;amp;
a.Ba()};_.Ig=function(a){return a.A?a.A.length:0};_.Jg=function(a,c){return a.A?a.A[c]||null:null};_.Hg=function(a,c,d){a.A&amp;amp;&amp;amp;(0,_.Ha)(a.A,c,d)};_.R.prototype.removeChild=function(a,c){if(a){var d=_.n(a)?a:_.Cg(a);a=this.D&amp;amp;&amp;amp;d?yg(this.D,d)||null:null;if(d&amp;amp;&amp;amp;a){var e=this.D;d in e&amp;amp;&amp;amp;delete e[d];_.Xd(this.A,a);c&amp;amp;&amp;amp;(a.Qa(),a.b&amp;amp;&amp;amp;_.Nd(a.b));Eg(a,null)}}if(!a)throw Error(&quot;C&quot;);return a};

}catch(e){_._DumpException(e)}
try{
var Lg;_.Kg=function(a,c){var d=a.length-c.length;return 0a};
_.Zg=function(a){var c;if((c=&quot;A&quot;==a.tagName||&quot;INPUT&quot;==a.tagName||&quot;TEXTAREA&quot;==a.tagName||&quot;SELECT&quot;==a.tagName||&quot;BUTTON&quot;==a.tagName?!a.disabled&amp;amp;&amp;amp;(!Xg(a)||Yg(a)):Xg(a)&amp;amp;&amp;amp;Yg(a))&amp;amp;&amp;amp;_.y){var d;!_.za(a.getBoundingClientRect)||_.y&amp;amp;&amp;amp;null==a.parentElement?d={height:a.offsetHeight,width:a.offsetWidth}:d=a.getBoundingClientRect();a=null!=d&amp;amp;&amp;amp;0&lt;d.height a=&quot;c;return&quot; e=&quot;0;a&amp;amp;&amp;amp;(null==d||e&amp;lt;=d);){if(c(a))return&quot; null=&quot;&quot; _.ah=&quot;function(a,c){a=a.getAttribute(&amp;quot;aria-&amp;quot;+c);return&quot; try=&quot;&quot; var=&quot;&quot; dh=&quot;&quot; instanceof=&quot;&quot; array=&quot;&quot; in=&quot;&quot; d=&quot;&quot; g=&quot;dh(a,c,d[f]);g&amp;amp;&amp;amp;(e=g)}return&quot; function=&quot;&quot; c.apply=&quot;&quot; _.gh=&quot;function(a,c,d,e,f,g){e=_.eh(a,e,g);a=_.N(c,d,e,f,g);_.fh(c,d);return&quot; window.element=&quot;&quot; window.mouseevent=&quot;&quot; a.dispatchevent=&quot;&quot; _.hh=&quot;function(a,c){_.Yf.call(this,c);this.A=a;this.sa=c||this};_.v(_.hh,_.Yf);_.hh.prototype.K=function(a,c,d,e){if(d){if(&amp;quot;function&amp;quot;!=typeof&quot; new=&quot;&quot; typeerror=&quot;&quot; _.hh.h.k.call=&quot;&quot; _.hh.h.j.call=&quot;&quot; _.hh.prototype.tb=&quot;function(a,c,d,e){if(d){if(&amp;quot;function&amp;quot;!=typeof&quot; _.hh.h.tb.call=&quot;&quot; ih=&quot;function(a){return&quot; _.r=&quot;&quot; _.jh=&quot;function(a,c){_.hh.call(this,c);this.f=a};_.v(_.jh,_.hh);_.jh.prototype.F=function(){return&quot; this.f=&quot;&quot; _.kh=&quot;function(a,c,d){_.jh.call(this,a,c);this.w=d;this.o=_.S(this.f,&amp;quot;gb_bc&amp;quot;);(a=_.P(&amp;quot;gb_cc&amp;quot;,this.f))&amp;amp;&amp;amp;_.Rg(this,a,this.b)};_.v(_.kh,_.jh);_.kh.prototype.b=function(a){var&quot; c=&quot;&quot; lh=&quot;function(a){_.G.call(this);this.A=a;this.j=this.o=null;this.b={};this.w={};this.f={}};_.v(lh,_.G);_.mh=function(a){if(a.o)return&quot; a.o=&quot;&quot; a.f=&quot;&quot; _.mh=&quot;&quot; _.k.ng=&quot;function(a){return!this.w[a.ad()]};_.k.He=function(a){this.f[a.ad()]=a};var&quot; nh=&quot;new&quot; qh=&quot;&quot; error=&quot;&quot; this.wc=&quot;&quot; this.b=&quot;&quot; _.k.start=&quot;function(a){this.stop();this.Ic=_.pf(this.f,_.ua(a)?a:this.j)};_.k.stop=function(){0!=this.Ic&amp;amp;&amp;amp;_.l.clearTimeout(this.Ic);this.Ic=0};_.k.dh=function(){this.Ic=0;this.wc&amp;amp;&amp;amp;this.wc.call(this.b)};th=function(a,c){a=_.P(&amp;quot;gb_Wa&amp;quot;,a.F());_.V(a,&amp;quot;gb_7a&amp;quot;,!c)};uh=function(a){a=a.getAttribute(&amp;quot;src&amp;quot;);return&quot; vh=&quot;function(a,c,d){a=_.P(&amp;quot;gb_Wa&amp;quot;,a.F());if(&amp;quot;&amp;quot;!=c||&amp;quot;&amp;quot;!=d)if(_.S(a,&amp;quot;gb_Va&amp;quot;)){var&quot; wh=&quot;function(a){return&quot; string=&quot;&quot; _.vd=&quot;&quot; d.queryselectorall=&quot;&quot; _.p=&quot;&quot; _.bh=&quot;function(a){return&quot; _.kd=&quot;&quot; _.vg=&quot;&quot; if=&quot;&quot; eh=&quot;&quot; for=&quot;&quot; a.dataset=&quot;&quot; void=&quot;&quot; a.getattribute=&quot;&quot; a.dataset:a.hasattribute=&quot;&quot; _.nh=&quot;function(a,c){_.O.call(this);this.b=a;this.j=Mh(this.b);this.B=c||100;this.o=_.N(a,&amp;quot;resize&amp;quot;,this.A,!1,this)};_.v(_.Nh,_.O);_.Nh.prototype.O=function(){_.we(this.o);_.Nh.H.O.call(this)};_.Nh.prototype.A=function(){this.f||(this.f=new&quot; _.sh=&quot;&quot; _.nh.prototype.w=&quot;function(){if(!this.b.Ha){var&quot; this.dispatchevent=&quot;&quot; oh=&quot;function(a){_.O.call(this);this.f=a||window;this.j=_.N(this.f,&amp;quot;resize&amp;quot;,this.o,!1,this);this.b=_.Mf(this.f)},Ph,Mh;_.v(Oh,_.O);_.Qh=function(){var&quot; ph=&quot;&quot; a.b=&quot;&quot; _.rh=&quot;function(a){this.f=a;this.b=null};_.Sh=function(a){a.b||(a.b=_.N(a.f,&amp;quot;keydown&amp;quot;,a.j,!1,a))};_.Uh=function(a){Th(a);_.V(a.f,&amp;quot;gb_0&amp;quot;,!1)};_.Rh.prototype.j=function(a){9!=a.keyCode||_.S(this.f,&amp;quot;gb_0&amp;quot;)||(_.V(this.f,&amp;quot;gb_0&amp;quot;,!0),Th(this))};var&quot; th=&quot;function(a){a.b&amp;amp;&amp;amp;(_.we(a.b),a.b=null)};&quot; _.vh=&quot;function(a,c){_.O.call(this);this.B=a;c&amp;amp;&amp;amp;(this.B.id=c)};_.v(_.Vh,_.O);_.Vh.prototype.F=function(){return&quot; this.b.id=&quot;&quot; _.wh=&quot;function(a){_.Vh.call(this,a);_.Qg.K(a,this.b,!1,this)};_.v(_.Wh,_.Vh);_.Wh.prototype.b=function(a){this.dispatchEvent(&amp;quot;click&amp;quot;)||a.preventDefault()};_.Xh=function(a){return&quot; ch=&quot;&quot; _.sd=&quot;&quot; zh=&quot;function(){};var&quot; ai=&quot;function(){this.b=[]};ai.prototype.f=function(a,c,d){this.A(a,c,d);this.b.push(new&quot; ci=&quot;function(a,c){this.o=new&quot; f.id=&quot;&quot; ci.prototype.a=&quot;function(a,c){this.o.A(a,c)};ci.prototype.j=function(a){this.o.j(a)};&quot; di=&quot;{Ij:&amp;quot;gb_Ua&amp;quot;,hk:&amp;quot;gb_Kd&amp;quot;,wj:&amp;quot;gb_pc&amp;quot;};var&quot; ei=&quot;{id:&amp;quot;unlimitedProductControl&amp;quot;,Id:Number.MAX_SAFE_INTEGER};var&quot; fi=&quot;function(a,c){c||(c=this.createElement(),a.kd().appendChild(c));_.Vh.call(this,c);this.o=new&quot; _.yf=&quot;&quot; a.dataset.item:a.removeattribute=&quot;&quot; this=&quot;&quot; kh=&quot;&quot; _.k.oc=&quot;function(a){_.V(this.F(),&amp;quot;gb_wc&amp;quot;,a);return&quot; gi=&quot;function(a,c){fi.call(this,a,c);this.j=_.yh(&amp;quot;gb_xc&amp;quot;,this.F());this.w=_.P(&amp;quot;gb_zc&amp;quot;,this.j);this.b=null;this.f=_.P(&amp;quot;gb_yc&amp;quot;,this.j)};_.v(gi,fi);_.k=gi.prototype;_.k.createElement=function(){var&quot; gi.h.jd.call=&quot;&quot; _.k.dj=&quot;function(a){if(!this.w)if(this.w=_.Q(&amp;quot;IMG&amp;quot;,&amp;quot;gb_zc&amp;quot;),this.w.setAttribute(&amp;quot;alt&amp;quot;,&amp;quot;&amp;quot;),this.b)Ah(this.w,this.b),this.b=null;else{var&quot; _.k.bj=&quot;function(a){if(!(a&quot; gb_zc=&quot;&quot; _.hi=&quot;function(a){_.Vh.call(this,a);this.f=[];this.G={}};_.v(_.hi,_.Vh);_.Vh.prototype.kd=function(){return&quot; this.g=&quot;&quot; ii=&quot;function(a,c){_.hi.call(this,c||this.createElement());this.j=a;a=this.F().getElementsByClassName(&amp;quot;gb_uc&amp;quot;);for(c=0;c&amp;lt;a.length;c++){var&quot; _.k.yi=&quot;function(){return&quot; w=&quot;function(a,c,d,e,f,g,h){_.hi.call(this,a);this.b=c;this.w=a;this.A=d;this.M=e;this.J=f;this.j=_.P(&amp;quot;gb_qc&amp;quot;,this.b);this.L=new&quot; ki=&quot;click mousedown scroll touchstart wheel keydown&quot; .split=&quot;&quot; w.prototype.kd=&quot;function(){return&quot; this.j=&quot;&quot; ni=&quot;&quot; oi=&quot;&quot; pi=&quot;function(a,c){switch(c){case&quot; ri=&quot;&quot; _.k.ce=&quot;function(a){this.J||(a&amp;amp;&amp;amp;_.hg(this.b,&amp;quot;transition&amp;quot;,&amp;quot;none&amp;quot;),this.dispatchEvent(&amp;quot;beforeshow&amp;quot;),_.T(this.b,&amp;quot;gb_g&amp;quot;),_.M(this.F(),&amp;quot;expanded&amp;quot;,!0),_.Yh(this.j),_.Sh(this.L),this.dispatchEvent(&amp;quot;open&amp;quot;),this.o.j(window.document.body,ki,this.R,!0,this),this.o.K(window.document.body,&amp;quot;focusin&amp;quot;,this.T),a&amp;amp;&amp;amp;_.pf(function(){_.hg(this.b,&amp;quot;transition&amp;quot;,&amp;quot;&amp;quot;)},0,this))};_.k.$i=function(a){this.J&amp;amp;&amp;amp;_.M(this.F(),&amp;quot;expanded&amp;quot;,a)};&quot; _.k.close=&quot;function(a){this.J||(a&amp;amp;&amp;amp;_.hg(this.b,&amp;quot;transition&amp;quot;,&amp;quot;none&amp;quot;),_.U(this.b,&amp;quot;gb_g&amp;quot;),_.M(this.F(),&amp;quot;expanded&amp;quot;,!1),window.document.activeElement==this.F()&amp;amp;&amp;amp;this.F().blur(),_.Uh(this.L),this.dispatchEvent(&amp;quot;close&amp;quot;),li(this),a&amp;amp;&amp;amp;_.pf(function(){_.hg(this.b,&amp;quot;transition&amp;quot;,&amp;quot;&amp;quot;)},0,this))};_.k.kj=function(a){ri(this.w)&amp;amp;&amp;amp;_.T(this.w,&amp;quot;gb_kc&amp;quot;);_.U(this.A,&amp;quot;gb_7a&amp;quot;);a&amp;amp;&amp;amp;_.ne(this.A,&amp;quot;click&amp;quot;,a)};_.k.hi=function(){_.T(this.A,&amp;quot;gb_7a&amp;quot;);_.S(this.w,&amp;quot;gb_kc&amp;quot;)&amp;amp;&amp;amp;_.U(this.w,&amp;quot;gb_kc&amp;quot;)};_.k.Jb=function(){return&quot; _.s=&quot;&quot; ji=&quot;function(a){_.Rg(a.o,a.F(),a.ma);a.F().addEventListener(&amp;quot;keydown&amp;quot;,function(a){32==a.keyCode&amp;amp;&amp;amp;a.preventDefault()});_.Rg(a.o,a.j,a.sa);a.o.K(a.b,&amp;quot;keydown&amp;quot;,a.ra);a.o.K(a.b,&amp;quot;keyup&amp;quot;,a.Z);_.Rg(a.o,a.A,function(){this.dispatchEvent(&amp;quot;bbc&amp;quot;)});_.Rg(a.o,a.M,function(){this.dispatchEvent(&amp;quot;cbc&amp;quot;)})};W.prototype.ma=function(){this.dispatchEvent(&amp;quot;mbc&amp;quot;);if(!this.J){if(this.Jb()){this.close();var&quot; this.ce=&quot;&quot; w.prototype.ra=&quot;function(a){a:{if(36==a.keyCode||35==a.keyCode){var&quot; w.prototype.sa=&quot;function(a){if(a.target&quot; window.node=&quot;&quot; this.p=&quot;&quot; si=&quot;function(a){return&quot; window.htmlelement=&quot;&quot; w.prototype.r=&quot;function(a){this.Jb()&amp;amp;&amp;amp;a.target&quot; w.prototype.t=&quot;function(){this.Jb()&amp;amp;&amp;amp;(!oi(this)||&amp;quot;IFRAME&amp;quot;!=window.document.activeElement.tagName&amp;amp;&amp;amp;(this.S&amp;amp;&amp;amp;_.$g(window.document.activeElement,si)||Ih(window.document.activeElement,&amp;quot;gb_lc&amp;quot;)||Ih(window.document.activeElement,&amp;quot;gb_aa&amp;quot;)||_.Yh(this.j)))};var&quot; li=&quot;function(a){a.o.Ga(window.document.body,ki,a.R,!1,a);a.o.Ga(window.document.body,&amp;quot;focusin&amp;quot;,a.T)};W.prototype.V=function(a,c){this.N.push(new&quot; ti=&quot;&quot; _.ui=&quot;function(a){_.Vh.call(this,a);_.N(a,&amp;quot;click&amp;quot;,this.b,!1,this)};_.v(_.ui,_.Vh);_.ui.prototype.f=function(){var&quot; vi=&quot;&quot; a.call=&quot;&quot; xi=&quot;function(a,c){c.xa=c.type;c.xb=c.target;return&quot; x=&quot;function(a,c,d,e){_.O.call(this);this.j=a;_.U(this.j,&amp;quot;gb_Cd&amp;quot;);this.f=c;this.Y=d;this.ab=&amp;quot;&amp;quot;;this.Cb=e;this.M=this.b=null;this.Ab=this.U=this.Z=!1;this.ya=_.H(_.B(this.f,16),!1);this.$=new&quot; _.k.hj=&quot;function(a){this.T&amp;amp;&amp;amp;(_.Uf(this.bc,a||&amp;quot;&amp;quot;),_.V(this.T,&amp;quot;gb_7a&amp;quot;,!a||this.G&amp;amp;&amp;amp;&amp;quot;gb_Ua&amp;quot;==this.D.b),this.N=!!a,Ei(this,this.D.b))};_.k.Ug=function(){return&quot; f=&quot;_.P(&amp;quot;gb_ic&amp;quot;);if(f){var&quot; w.prototype.cc=&quot;W.prototype.V;W.prototype.cd=W.prototype.va;W.prototype.ce=W.prototype.X;W.prototype.cf=W.prototype.Ce;W.prototype.cg=W.prototype.close;W.prototype.ch=W.prototype.ha;W.prototype.ci=W.prototype.kj;W.prototype.cj=W.prototype.hi;W.prototype.ck=W.prototype.Jb;W.prototype.cl=W.prototype.$i;_.p(&amp;quot;gbar.D&amp;quot;,ii,void&quot; fi.prototype.eb=&quot;fi.prototype.Oc;fi.prototype.ec=fi.prototype.Ai;fi.prototype.ed=fi.prototype.jd;_.p(&amp;quot;gbar.F&amp;quot;,gi,void&quot; a.y.log=&quot;&quot; a:if=&quot;&quot; a.o.appendchild=&quot;&quot; x.prototype.ra=&quot;function(){if(this.ma&amp;amp;&amp;amp;this.o){var&quot;&gt;d||c)e=!0,d--;var f=a.length-d;if(e!=!_.S(this.Da,&quot;gb_7a&quot;)||f!=this.R.children){_.V(this.Da,&quot;gb_7a&quot;,!e);if(e)for(;this.R.firstChild;)this.R.removeChild(this.R.firstChild);Ri(this,a,d);e?this.$.j(window.document.body,Fi,this.yb,!0,this):this.$.Ga(window.document.body,Fi,this.yb,!1,this)}}};
var Ri=function(a,c,d){c=(0,_.Ja)(c,function(a){return _.S(a,&quot;gb_Ke&quot;)?(Si(this,a),!1):!0},a);for(var e=0;e&lt;c.length f=&quot;c[e];e&quot;&gt;=d?Si(a,f):_.U(f,&quot;gb_7a&quot;)}},Si=function(a,c){_.T(c,&quot;gb_7a&quot;);var d=_.Md(&quot;LI&quot;);_.Mg(d,[&quot;gb_se&quot;,&quot;gb_uc&quot;,&quot;gb_Ac&quot;]);_.Fh(d,!0);_.Rg(a.$,d,Pi(c));var e=_.Q(&quot;A&quot;,&quot;gb_xc&quot;);d.appendChild(e);var f=_.Q(&quot;SPAN&quot;,&quot;gb_yc&quot;);e.appendChild(f);e=c.b?c.getAttribute(&quot;aria-label&quot;):c.title;_.Uf(f,e);e=!1;_.S(c,&quot;gb_Cf&quot;)&amp;amp;&amp;amp;(e=!0);var g,h=c.children[0];e?g=h.children[0].children[0].src:c.b?g=&quot;https://www.gstatic.com/images/icons/material/system/1x/search_black_24dp.png&quot;:
g=h.src;a.w=_.Q(&quot;IMG&quot;);_.Mg(a.w,[&quot;gb_zc&quot;,&quot;gb_te&quot;]);a.w.setAttribute(&quot;src&quot;,g);f.parentNode&amp;amp;&amp;amp;f.parentNode.insertBefore(a.w,f);a.R.appendChild(d)};X.prototype.yb=function(a){!_.S(this.S,&quot;gb_7a&quot;)&amp;amp;&amp;amp;a.target instanceof window.Node&amp;amp;&amp;amp;(&quot;keydown&quot;==a.type?27==a.keyCode&amp;amp;&amp;amp;(a.preventDefault(),a.stopPropagation(),_.T(this.S,&quot;gb_7a&quot;),this.F().focus()):_.Tf(this.S,a.target)||(&quot;touchstart&quot;==a.type&amp;amp;&amp;amp;(a.preventDefault(),a.stopPropagation()),_.T(this.S,&quot;gb_7a&quot;)))};
X.prototype.Kb=function(){Ei(this,this.D.b);this.b&amp;amp;&amp;amp;_.Ti(this,this.b.Jb(),!1);this.dispatchEvent(&quot;ffc&quot;)};_.Ti=function(a,c,d){a.b&amp;amp;&amp;amp;(oi(a.b)&amp;amp;&amp;amp;(c=!1),a=window.document.body,_.V(a,&quot;gb_oe&quot;,c),_.V(a,&quot;gb_ne&quot;,d))};X.prototype.Mb=function(){_.Ti(this,!0,!0)};X.prototype.Lb=function(){_.Ti(this,!1,!0)};X.prototype.Nb=function(){var a=this.b.b;oi(this.b)?_.P(&quot;gb_je&quot;,void 0).appendChild(a):this.j.appendChild(a)};_.Mi=function(a){return!!a.b&amp;amp;&amp;amp;(a.va?_.S(a.A,&quot;gb_8d&quot;):a.A.parentNode!=a.o)};
X.prototype.J=function(a){var c=!1;switch(a){case &quot;back&quot;:this.U=!0;qi(this.b);pi(this.b,&quot;back&quot;);c=!0;break;case &quot;close&quot;:this.U=!0;qi(this.b);pi(this.b,&quot;close&quot;);c=!0;break;case &quot;default&quot;:this.U=!1;Li(this,this.D.b)||this.Qb?(this.b&amp;amp;&amp;amp;!this.b.ua(&quot;menu&quot;)&amp;amp;&amp;amp;(qi(this.b),pi(this.b,&quot;menu&quot;)),c=!0):(this.b&amp;amp;&amp;amp;this.b.ua(&quot;back&quot;)&amp;amp;&amp;amp;qi(this.b),this.b&amp;amp;&amp;amp;this.b.ua(&quot;menu&quot;)?(a=this.b,a.close(),_.T(a.F(),&quot;gb_7a&quot;),ri(a.A)&amp;amp;&amp;amp;_.U(a.F(),&quot;gb_kc&quot;)):(a=_.P(&quot;gb_gc&quot;,this.j))&amp;amp;&amp;amp;_.T(a,&quot;gb_7a&quot;),c=!1);break;case &quot;none&quot;:this.U=!0,qi(this.b),
c=!1}null!=this.B&amp;amp;&amp;amp;_.V(this.B,&quot;gb_ze&quot;,c)};var Li=function(a,c){var d=&quot;gb_Ua&quot;==c;c=&quot;gb_Kd&quot;==c;var e=_.H(_.B(a.f,5),!1),f=_.H(_.B(a.f,2),!1);return!(_.H(_.B(a.f,10),!1)||a.ya)&amp;amp;&amp;amp;f&amp;amp;&amp;amp;(d||c&amp;amp;&amp;amp;(e||a.N))};X.prototype.getHeight=function(){return this.j.offsetHeight};_.Oi=function(a){var c=a.getHeight()+&quot;px&quot;;a.ab!=c&amp;amp;&amp;amp;(a.ab=c,a.Cb&amp;amp;&amp;amp;(a.Cb.style.height=c),a.dispatchEvent(&quot;resize&quot;))};X.prototype.Sb=function(){this.P&amp;amp;&amp;amp;_.Oi(this)};
X.prototype.Va=function(){if(!this.P){var a=_.Md(&quot;DIV&quot;);_.Mg(a,[&quot;gb_Nd&quot;,&quot;gb_ce&quot;]);Ui(a,Hi(this));a.style.backgroundColor=this.Oa();this.L.push(a);var c=this.o;c.parentNode&amp;amp;&amp;amp;c.parentNode.insertBefore(a,c.nextSibling);this.P=a}return this.P};X.prototype.hc=function(){_.Nd(this.P);this.P=null;_.Oi(this)};_.Vi=function(a,c){a.o&amp;amp;&amp;amp;a.o.appendChild(c)};X.prototype.dg=function(a){for(var c=0;c&lt;this.l.length var=&quot;&quot; ii=&quot;function(a,c){if(a.M){if(2==c){c=_.I(_.B(a.f,24),&amp;quot;&amp;quot;);var&quot; d=&quot;_.I(_.B(a.f,27),&amp;quot;&amp;quot;)}else&quot; a.classlist.contains=&quot;&quot; c=&quot;0;c&amp;lt;this.L.length;c++)this.L[c].style.backgroundColor=a};&quot; x.prototype.oa=&quot;function(){return&quot; this.l=&quot;&quot; a=&quot;_.Wd(&amp;quot;dd&amp;quot;);_.mh(a)&amp;amp;&amp;amp;_.mh(a).hd(!1);a.Od(null)};X.prototype.Ud=function(a){zi(this,a-8);Ki(this)};var&quot; zi=&quot;function(a,c){if(null==a.C)throw&quot; error=&quot;&quot;&gt;c)throw Error(&quot;Q&quot;);a.Bb=c},Ki=function(a){null!=a.B&amp;amp;&amp;amp;(&quot;gb_Ua&quot;==a.D.b?_.hg(a.B,&quot;min-width&quot;,&quot;&quot;):null!=a.Bb&amp;amp;&amp;amp;_.hg(a.B,&quot;min-width&quot;,a.Bb+&quot;px&quot;))};X.prototype.Ja=function(a){_.V(_.P(&quot;gb_9b&quot;,this.o),&quot;gb_7a&quot;,!a)}; var Gi=function(a,c){a.G&amp;amp;&amp;amp;(null!=a.B&amp;amp;&amp;amp;_.V(a.B,&quot;gb_Zd&quot;,c),null!=a.T&amp;amp;&amp;amp;_.V(a.T,&quot;gb_7a&quot;,c||!a.N))};X.prototype.jc=function(a){if(a){var c=_.P(&quot;gb_Aa&quot;);null!=c&amp;amp;&amp;amp;_.ph(c,a);_.K.ta().j.then(function(c){c.Pf(a)})}};
var Wi;var Xi=_.P(&quot;gb_Ta&quot;);
if(null==Xi)Wi=null;else{var Yi=_.F(_.vc,rh,6)||new rh,Zi=new X(Xi,Yi,_.L,_.P(&quot;gb_Hd&quot;));_.p(&quot;gbar.P&quot;,X,void 0);X.prototype.pa=X.prototype.getHeight;X.prototype.pb=X.prototype.hj;X.prototype.pc=X.prototype.dg;X.prototype.pd=X.prototype.Qc;X.prototype.pe=X.prototype.Va;X.prototype.pf=X.prototype.Sb;X.prototype.pg=X.prototype.hc;X.prototype.ph=X.prototype.Ug;X.prototype.pi=X.prototype.ha;X.prototype.pj=X.prototype.Ud;X.prototype.pk=X.prototype.Ja;X.prototype.pl=X.prototype.jc;X.prototype.pm=X.prototype.J; X.prototype.pn=X.prototype.Oa;X.prototype.po=X.prototype.fj;_.Be(_.K.ta().f,Zi);Wi=Zi}_.Y=Wi;

}catch(e){_._DumpException(e)}
try{
var $i=window.document.querySelector(&quot;.gb_fb .gb_b&quot;);$i&amp;amp;&amp;amp;_.Qc(_.Fc,$i,&quot;click&quot;);
}catch(e){_._DumpException(e)}
try{
(function(){for(var a=window.document.querySelectorAll(&quot;.gb_cc&quot;),c=0;c&lt;a.length c=&quot;_.P(&amp;quot;gb_9b&amp;quot;,a.o);c&amp;amp;&amp;amp;(c=new&quot; _.kh=&quot;&quot; try=&quot;&quot; var=&quot;&quot; aj=&quot;window.document.querySelector(&amp;quot;.gb_Mc&amp;quot;);if(aj){var&quot; bj=&quot;aj.querySelector(&amp;quot;.gb_b&amp;quot;);bj&amp;amp;&amp;amp;_.Qc(_.Fc,bj,&amp;quot;click&amp;quot;)};&quot; google=&quot;&quot; inc.=&quot;&quot;&gt;&lt;meta itemprop=&quot;name&quot; content=&quot;Jeffrey Dean CSE summa sum1990.pdf&quot;/&gt;&lt;meta itemprop=&quot;faviconUrl&quot; content=&quot;https://ssl.gstatic.com/docs/doclist/images/icon_14_pdf_favicon.ico&quot;/&gt;&lt;meta itemprop=&quot;url&quot; content=&quot;https://drive.google.com/file/d/1I1fs4sczbCaACzA9XwxR3DiuXVtqmejL/view?usp=embed_googleplus&quot;/&gt;&lt;meta itemprop=&quot;embedURL&quot; content=&quot;https://drive.google.com/file/d/1I1fs4sczbCaACzA9XwxR3DiuXVtqmejL/preview?usp=embed_googleplus&quot;/&gt;&lt;/a.length&gt;&lt;/this.l.length&gt;&lt;/c.length&gt;&lt;/d.height&gt;&lt;/c.length&gt;&lt;/h&gt;&lt;/c&gt;</description>
<pubDate>Mon, 27 Aug 2018 01:32:29 +0000</pubDate>
<dc:creator>russtrpkovski</dc:creator>
<og:title>Jeffrey Dean CSE summa sum1990.pdf</og:title>
<og:type>article</og:type>
<og:url>https://drive.google.com/file/d/1I1fs4sczbCaACzA9XwxR3DiuXVtqmejL/view?usp=embed_facebook</og:url>
<og:image>https://lh3.googleusercontent.com/t33c8AkjfuJ4I1vaK3Ft-HdhAvZys0FWy9ffwxbnK7QdZ0VFR7METwY8qpk=w1200-h630-p</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://drive.google.com/file/d/1I1fs4sczbCaACzA9XwxR3DiuXVtqmejL/view</dc:identifier>
</item>
<item>
<title>IncludeOS – A minimal, resource efficient unikernel for cloud services</title>
<link>http://www.includeos.org/</link>
<guid isPermaLink="true" >http://www.includeos.org/</guid>
<description>&lt;p&gt;Installing IncludeOS on Linux or macOS typically takes around 10 minutes. Once installed we suggest looking at and booting a few of the examples to familarize yourself with the system.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;bash&quot;&gt;git clone &quot;https://github.com/hioa-cs/IncludeOS.git&quot;
cd IncludeOS
export INCLUDEOS_PREFIX=~/IncludeOS_install
export PATH=$PATH:$INCLUDEOS_PREFIX/bin
./install.sh&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For detailed instructions see &lt;a href=&quot;http://www.includeos.org/get-started.html&quot;&gt;get started&lt;/a&gt;. Once installed have a look in IncludeOS/examples/demo_service. In order to boot the application just type &quot;sudo boot --create-bridge .&quot; and the application should build and run.&lt;/p&gt;
&lt;p&gt;We strive to make it easy to create fast and useful services. The below code will set up a simple TCP echo service and happily talk to anyone connecting.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;c++&quot;&gt;#include &amp;lt;os&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;net/inet4&amp;gt;

void Service::start()
{
  // Get the IP stack thats already been automatically configured
  auto&amp;amp; inet = net::Super_stack::get&amp;lt;net::IP4&amp;gt;(0);
  // Setup a TCP echo server on port 7 (echo port)
  auto&amp;amp; server = inet.tcp().listen(7); 

  server.on_connect([] (auto conn) {
    // Log incomming connections on the console:
    std::cout &amp;lt;&amp;lt; &quot;Connection &quot; &amp;lt;&amp;lt; conn-&amp;gt;to_string() &amp;lt;&amp;lt; &quot; established\n&quot;;
    // When data is received, echo back
    conn-&amp;gt;on_read(1024, [conn] (auto buf) {
      conn-&amp;gt;write(buf);
    });
  });
}&lt;/code&gt;
&lt;/pre&gt;
The network configuration of the virtual machine can reside in a JSON file, named config.json, placed in the same folder. It should look something like this, depending on your need:
&lt;pre&gt;
&lt;code class=&quot;json&quot;&gt;{
  &quot;net&quot; : [
    {
      &quot;iface&quot;: 0,
      &quot;config&quot;: &quot;dhcp-with-fallback&quot;,
      &quot;address&quot;: &quot;10.0.0.42&quot;,
      &quot;netmask&quot;: &quot;255.255.255.0&quot;,
      &quot;gateway&quot;: &quot;10.0.0.1&quot;
    }
  ]
}
&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 26 Aug 2018 22:38:32 +0000</pubDate>
<dc:creator>unixhero</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.includeos.org/</dc:identifier>
</item>
<item>
<title>WireGuard VPN review: A new type of VPN offers serious advantages</title>
<link>https://arstechnica.com/gadgets/2018/08/wireguard-vpn-review-fast-connections-amaze-but-windows-support-needs-to-happen/</link>
<guid isPermaLink="true" >https://arstechnica.com/gadgets/2018/08/wireguard-vpn-review-fast-connections-amaze-but-windows-support-needs-to-happen/</guid>
<description>&lt;img src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/wireguard-screenshot-800x450.png&quot;/&gt;&lt;div class=&quot;caption-text&quot;&gt;&lt;a href=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/wireguard-screenshot.png&quot; class=&quot;enlarge-link&quot; data-height=&quot;1080&quot; data-width=&quot;1920&quot;&gt;Enlarge&lt;/a&gt; &lt;span class=&quot;sep&quot;&gt;/&lt;/span&gt; The WireGuard interface, with a Firefox window open to netdata.&lt;/div&gt;&lt;div class=&quot;caption-credit&quot;&gt;Jim Salter&lt;/div&gt;
&lt;aside id=&quot;social-left&quot;&gt;&lt;a aria-describedby=&quot;96 posters participating, including story author.&quot; class=&quot;comment-count icon-comment-bubble-down&quot; href=&quot;https://arstechnica.com/gadgets/2018/08/wireguard-vpn-review-fast-connections-amaze-but-windows-support-needs-to-happen/?comments=1&quot;&gt;&lt;span class=&quot;comment-count-before&quot;&gt;reader comments&lt;/span&gt; &lt;span class=&quot;comment-count-number&quot;&gt;165&lt;/span&gt;&lt;/a&gt;
&lt;div class=&quot;share-links&quot;&gt;&lt;span&gt;Share this story&lt;/span&gt;    &lt;/div&gt;
&lt;/aside&gt;&lt;p&gt;&lt;a href=&quot;https://www.wireguard.com/&quot;&gt;WireGuard&lt;/a&gt; is a new type of VPN that aims to be simpler to set up and maintain than current VPNs and to offer a higher degree of security. The software is free and open source—it's licensed GPLv2, the same license as the Linux kernel—which is always a big plus in my book. It's also designed to be easily portable between operating systems. All of that might lead you to ask: in a world that already has IPSEC, PPTP, L2TP, OpenVPN, and a bewildering array of proprietary SSL VPNs, do we &lt;em&gt;need&lt;/em&gt; yet another type of VPN?&lt;/p&gt;
&lt;h2&gt;OK, but why?&lt;/h2&gt;
&lt;p&gt;I've seen a few new VPN designs pop up in the last few years—&lt;a href=&quot;https://www.zerotier.com/&quot;&gt;ZeroTier&lt;/a&gt; and &lt;a href=&quot;https://www.tinc-vpn.org/&quot;&gt;Tinc&lt;/a&gt; come to mind—and each time, I've thought, &quot;I should really look into that.&quot; And then I haven't. I use &lt;a href=&quot;https://arstechnica.com/gadgets/2017/05/how-to-build-your-own-vpn-if-youre-rightfully-wary-of-commercial-options/&quot;&gt;OpenVPN&lt;/a&gt; heavily; I'm thoroughly familiar with it, and it scratches most of my VPN-related itches pretty well.&lt;/p&gt;
&lt;p&gt;So how did WireGuard rattle my cage hard enough to get me to actually &lt;em&gt;play&lt;/em&gt; with it? It had something you almost never see: a &lt;a href=&quot;http://lkml.iu.edu/hypermail/linux/kernel/1808.0/02472.html&quot;&gt;positive comment about its code&lt;/a&gt; from none other than Linus Torvalds.&lt;/p&gt;
&lt;blockquote class=&quot;small&quot;&gt;
&lt;div class=&quot;pullquote-content&quot;&gt;Can I just once again state my love for [WireGuard] and hope it gets merged soon? Maybe the code isn't perfect, but I've skimmed it, and compared to the horrors that are OpenVPN and IPSec, it's a work of art.&lt;/div&gt;
&lt;div class=&quot;pullquote-attribution&quot;&gt;&lt;span&gt;Linus Torvalds, on the Linux Kernel Mailing List&lt;/span&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;That was enough to get me to sit up and pay attention. If you think &quot;maybe it isn't perfect, but&quot; is damning with faint praise, you clearly aren't familiar with Torvalds' &lt;a href=&quot;https://arstechnica.com/information-technology/2013/07/linus-torvalds-defends-his-right-to-shame-linux-kernel-developers/&quot;&gt;acerbic writing style&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Fewer lines of code&lt;/h3&gt;
&lt;p&gt;A little more research gave me some insight into why Torvalds might have been so uncharacteristically positive. WireGuard weighs in at around 4,000 lines of code; this compares to 600,000 total lines of code for OpenVPN + OpenSSL or 400,000 total lines of code for XFRM+StrongSwan for an IPSEC VPN. Two orders of magnitude fewer lines of code mean a &lt;em&gt;lot&lt;/em&gt; less attack surface to find flaws in.&lt;/p&gt;
&lt;p&gt;A much smaller codebase also means code that's more likely to work the way it's supposed to. One of my biggest operational beefs with OpenVPN is how its tunnels can either crash or hang.&lt;/p&gt;
&lt;p&gt;This probably won't happen frequently enough for you to notice if you only have a few tens of clients, and most of those are manually operated by a human clicking something to connect and disconnect their tunnel as needed anyway. But if you want to manage a network with hundreds of clients, all of which should automatically manage their own always-on tunnels, it's a big problem.&lt;/p&gt;
&lt;p&gt;OpenVPN features &lt;code&gt;ping&lt;/code&gt; and &lt;code&gt;ping-restart&lt;/code&gt; configuration arguments that &lt;em&gt;should&lt;/em&gt; take care of this for you, but they don't. I've spent more of my time crafting and maintaining watchdog scripts that carefully check for, kill -9, and restart OpenVPN daemons than I like to think about. I'd &lt;em&gt;love&lt;/em&gt; to be able to replace them with something that just works.&lt;/p&gt;
&lt;h3&gt;Simpler setup&lt;/h3&gt;
&lt;p&gt;I don't want to sugarcoat this: VPNs aren't simple, and WireGuard doesn't suddenly make them a kindergarten project. With that said, it took me a few days of careful, determined, and dedicated reading, implementation, and testing before I understood OpenVPN well enough to really have any idea what I was doing. A few years later, I needed another week or two of trawling the Internet for how-tos and piecing them together in order to build a large-scale OpenVPN-based network. I spent another half-day or so reading about the latest advancements in configuration and best practices before updating my configurations for last year's &lt;a href=&quot;https://arstechnica.com/gadgets/2017/05/how-to-build-your-own-vpn-if-youre-rightfully-wary-of-commercial-options/&quot;&gt;Ars Technica OpenVPN guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By rather sharp contrast, I created working, stable, documented &lt;a href=&quot;http://jrs-s.net/category/open-source/wireguard/&quot;&gt;configurations&lt;/a&gt; for a scalable, secure WireGuard network in about six hours on a Sunday afternoon. Much of this greater simplicity in setup and configuration is due to WireGuard's deliberate, principled rejection of &lt;a href=&quot;https://tools.ietf.org/html/rfc7696&quot;&gt;cryptographic agility&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Stronger algorithms&lt;/h3&gt;
&lt;p&gt;WireGuard deliberately eschews &quot;industry standard&quot; algorithms that have long-standing weaknesses in favor of only the latest, toughest primitives. From the WireGuard website:&lt;/p&gt;
&lt;blockquote class=&quot;small&quot;&gt;

&lt;/blockquote&gt;
&lt;p&gt;This all looks impressive enough, but I'm no cryptographer. I was still a little concerned about WireGuard's future security, because there's nothing configurable about it, and its keys were considerably smaller than what I was used to. Luckily for me, publishing my first three WireGuard VPN configs on my own blog was enough to catch the attention of Jason Donenfeld, WireGuard's author and principal developer. That gave me the chance for a little desperately-needed Q &amp;amp; A. (Please consider any errors in the following content mine, not Jason's. Did I mention I'm not a cryptographer?)&lt;/p&gt;
&lt;a href=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/key-lengths.png&quot; class=&quot;enlarge&quot; data-height=&quot;484&quot; data-width=&quot;1064&quot; alt=&quot;On the left, a WireGuard key. On the right, an OpenVPN key.&quot;&gt;&lt;img src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/key-lengths-640x291.png&quot; width=&quot;640&quot; height=&quot;291&quot; srcset=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/key-lengths.png 2x&quot; alt=&quot;On the left, a WireGuard key. On the right, an OpenVPN key.&quot;/&gt;&lt;/a&gt;
&lt;div class=&quot;caption-text&quot;&gt;&lt;a href=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/08/key-lengths.png&quot; class=&quot;enlarge-link&quot; data-height=&quot;484&quot; data-width=&quot;1064&quot;&gt;Enlarge&lt;/a&gt; &lt;span class=&quot;sep&quot;&gt;/&lt;/span&gt; On the left, a WireGuard key. On the right, an OpenVPN key.&lt;/div&gt;
&lt;p&gt;As someone who doesn't really &lt;em&gt;understand&lt;/em&gt; cryptography but who has been using it actively for 20 years, the combination of a short key and no configuration options made me a bit nervous. With OpenVPN, I like to err on the side of caution by using a honking big key. Why can't I do the same with WireGuard? Why am I limited to a 256-bit key with WireGuard, while OpenVPN offers me a whopping 4,096 bits? It turns out that a 4,096 bit key is kind of ridiculous.&lt;/p&gt;
&lt;p&gt;If you have to brute-force a 256-bit key, you have 2&lt;sup&gt;256&lt;/sup&gt; total combinations to work through. If you assume that, on average, you'll uncover the solution halfway through the problem set, that still leaves you with 2&lt;sup&gt;255&lt;/sup&gt; failures before success. Now assume that you have an extremely powerful system, capable of trying 38,000,000 keys per second, and local access to the public side of the keypair. If you're relying on brute force, it'll take you a little more than 1.52 × 10&lt;sup&gt;69&lt;/sup&gt; seconds on average to come up with the winning key. Given that the estimated &lt;a href=&quot;https://www.physicsoftheuniverse.com/numbers.html&quot;&gt;age of the universe&lt;/a&gt; itself is 4.32 × 10&lt;sup&gt;17&lt;/sup&gt; seconds, that's probably sufficient.&lt;/p&gt;
&lt;p&gt;The reason OpenVPN (and almost all VPN solutions) use such ridiculously long keys is that you don't &lt;em&gt;have&lt;/em&gt; to brute-force them. An actual cryptographic attack on the algorithms commonly used for VPNs (or for HTTPS connections to websites) looks a lot more like a dictionary attack than a brute-force attack; you can discount great swathes of the problem space without having to actually try them.&lt;/p&gt;
&lt;p&gt;The tremendous key length—and in some cases, repeated executions of the same algorithm (anyone else remember DES vs 3DES?)—is basically a naive &quot;well, do it harder then!&quot; mitigation that attempts to confound cryptographic attacks or expand the problem set to something so ludicrously huge that, even if you can just throw away all but 0.000000001 percent of it, it's still too much to bash through.&lt;/p&gt;
&lt;p&gt;As long as the algorithms underlying WireGuard remain unbreached, a 256-bit key isn't just &quot;strong enough until computers get faster.&quot; It's strong enough that simple physics prevents a brute-force approach—at least, until quantum computing comes into play. Quantum computers are odd beasts that have very different use cases than conventional computers, but one of the things they are extremely good at is attacking asymmetric (public/private key) cryptography. We're not capable of creating a quantum computer large enough to attack a 256-bit key yet, but it's &lt;a href=&quot;https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin&quot;&gt;expected to happen eventually&lt;/a&gt;. If you're sufficiently paranoid that you want future proofing against QC, you can optionally add a PSK (Pre-Shared Key) layer to WireGuard's encryption.&lt;/p&gt;
</description>
<pubDate>Sun, 26 Aug 2018 15:43:09 +0000</pubDate>
<dc:creator>alexkavon</dc:creator>
<og:url>https://arstechnica.com/gadgets/2018/08/wireguard-vpn-review-fast-connections-amaze-but-windows-support-needs-to-happen/</og:url>
<og:title>WireGuard VPN review: A new type of VPN offers serious advantages</og:title>
<og:image>https://cdn.arstechnica.net/wp-content/uploads/2018/08/wireguard-screenshot-760x380.png</og:image>
<og:description>Fewer lines of code, simpler setup, and better algorithms make a strong case.</og:description>
<og:type>article</og:type>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arstechnica.com/gadgets/2018/08/wireguard-vpn-review-fast-connections-amaze-but-windows-support-needs-to-happen/</dc:identifier>
</item>
</channel>
</rss>