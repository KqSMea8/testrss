<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Modern CSS Explained</title>
<link>https://medium.com/actualize-network/modern-css-explained-for-dinosaurs-5226febe3525</link>
<guid isPermaLink="true" >https://medium.com/actualize-network/modern-css-explained-for-dinosaurs-5226febe3525</guid>
<description>&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*kXsiGLMHSS4jUx4W6yBOlw.png&quot; data-width=&quot;1129&quot; data-height=&quot;735&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*kXsiGLMHSS4jUx4W6yBOlw.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*kXsiGLMHSS4jUx4W6yBOlw.png&quot;/&gt;&lt;/div&gt;
Images from &lt;a href=&quot;http://www.qwantz.com/&quot; data-href=&quot;http://www.qwantz.com/&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener nofollow noopener&quot; target=&quot;_blank&quot;&gt;Dinosaur Comics&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/ryanqnorth&quot; data-href=&quot;https://twitter.com/ryanqnorth&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener nofollow noopener&quot; target=&quot;_blank&quot;&gt;Ryan North&lt;/a&gt;
&lt;p name=&quot;d690&quot; id=&quot;d690&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;CSS is strangely considered both one of the easiest and one of the hardest languages to learn as a web developer. It’s certainly easy enough to get started with it — you define style properties and values to apply to specific elements, and…that’s pretty much all you need to get going! However, it gets tangled and complicated to organize CSS in a meaningful way for larger projects. Changing any line of CSS to style an element on one page often leads to unintended changes for elements on other pages.&lt;/p&gt;
&lt;p name=&quot;bf34&quot; id=&quot;bf34&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In order to deal with the inherent complexity of CSS, all sorts of different best practices have been established. The problem is that there isn’t any strong consensus on which best practices are in fact the best, and many of them seem to completely contradict each other. If you’re trying to learn CSS for the first time, this can be disorienting to say the least.&lt;/p&gt;
&lt;p name=&quot;ba2e&quot; id=&quot;ba2e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The goal of this article is to provide a historical context of how CSS approaches and tooling have evolved to what they are today in 2018. By understanding this history, it will be easier to understand each approach and how to use them to your benefit. Let’s get started!&lt;/p&gt;
&lt;h3 name=&quot;493b&quot; id=&quot;493b&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Using CSS for basic styling&lt;/h3&gt;
&lt;p name=&quot;8c78&quot; id=&quot;8c78&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Let’s start with a basic website using just a simple &lt;code class=&quot;markup--code markup--p-code&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;index.html&lt;/strong&gt;&lt;/code&gt; file that links to a separate &lt;code class=&quot;markup--code markup--p-code&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;index.css&lt;/strong&gt;&lt;/code&gt; file:&lt;/p&gt;
&lt;pre name=&quot;2796&quot; id=&quot;2796&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
&amp;lt;!DOCTYPE html&amp;gt;&lt;br/&gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;&lt;br/&gt;&amp;lt;head&amp;gt;&lt;br/&gt;&amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;&lt;br/&gt;&amp;lt;title&amp;gt;Modern CSS&amp;lt;/title&amp;gt;&lt;br/&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot;&amp;gt;&lt;br/&gt;&amp;lt;/head&amp;gt;&lt;br/&gt;&amp;lt;body&amp;gt;&lt;br/&gt;&amp;lt;header&amp;gt;This is the header.&amp;lt;/header&amp;gt;&lt;br/&gt;&amp;lt;main&amp;gt;&lt;br/&gt;&amp;lt;h1&amp;gt;This is the main content.&amp;lt;/h1&amp;gt;&lt;br/&gt;&amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;&lt;br/&gt;&amp;lt;/main&amp;gt;&lt;br/&gt;&amp;lt;nav&amp;gt;&lt;br/&gt;&amp;lt;h4&amp;gt;This is the navigation section.&amp;lt;/h4&amp;gt;&lt;br/&gt;&amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;&lt;br/&gt;&amp;lt;/nav&amp;gt;&lt;br/&gt;&amp;lt;aside&amp;gt;&lt;br/&gt;&amp;lt;h4&amp;gt;This is an aside section.&amp;lt;/h4&amp;gt;&lt;br/&gt;&amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;&lt;br/&gt;&amp;lt;/aside&amp;gt;&lt;br/&gt;&amp;lt;footer&amp;gt;This is the footer.&amp;lt;/footer&amp;gt;&lt;br/&gt;&amp;lt;/body&amp;gt;&lt;br/&gt;&amp;lt;/html&amp;gt;
&lt;/pre&gt;
&lt;p name=&quot;7196&quot; id=&quot;7196&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Right now we aren’t using any classes or ids in the HTML, just &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element#Content_sectioning&quot; data-href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element#Content_sectioning&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;semantic tags&lt;/a&gt;. Without any CSS, the website looks like this (using placeholder text):&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*MwOy9E5LacvhGEtIUb9pXQ.png&quot; data-width=&quot;2422&quot; data-height=&quot;1562&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*MwOy9E5LacvhGEtIUb9pXQ.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*MwOy9E5LacvhGEtIUb9pXQ.png&quot;/&gt;&lt;/div&gt;
Click &lt;a href=&quot;https://codepen.io/peterxjang/pen/qxbxwK?editors=1100&quot; data-href=&quot;https://codepen.io/peterxjang/pen/qxbxwK?editors=1100&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; to see a live example
&lt;p name=&quot;ae29&quot; id=&quot;ae29&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Functional, but not very pretty. We can add CSS to improve the basic typography in &lt;code class=&quot;markup--code markup--p-code&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;index.css&lt;/strong&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre name=&quot;f96f&quot; id=&quot;f96f&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
/* BASIC TYPOGRAPHY                       */&lt;br/&gt;/* from &lt;a href=&quot;https://github.com/oxalorg/sakura&quot; data-href=&quot;https://github.com/oxalorg/sakura&quot; class=&quot;markup--anchor markup--pre-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://github.com/oxalorg/sakura&lt;/a&gt; */
&lt;/pre&gt;
&lt;pre name=&quot;a8e3&quot; id=&quot;a8e3&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
html {&lt;br/&gt;font-size: 62.5%;&lt;br/&gt;font-family: serif;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;e355&quot; id=&quot;e355&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
body {&lt;br/&gt;font-size: 1.8rem;&lt;br/&gt;line-height: 1.618;&lt;br/&gt;max-width: 38em;&lt;br/&gt;margin: auto;&lt;br/&gt;color: #4a4a4a;&lt;br/&gt;background-color: #f9f9f9;&lt;br/&gt;padding: 13px;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;8fb4&quot; id=&quot;8fb4&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
@media (max-width: 684px) {&lt;br/&gt;body {&lt;br/&gt;font-size: 1.53rem;&lt;br/&gt;}&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;9723&quot; id=&quot;9723&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
@media (max-width: 382px) {&lt;br/&gt;body {&lt;br/&gt;font-size: 1.35rem;&lt;br/&gt;}&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;a157&quot; id=&quot;a157&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
h1, h2, h3, h4, h5, h6 {&lt;br/&gt;line-height: 1.1;&lt;br/&gt;font-family: Verdana, Geneva, sans-serif;&lt;br/&gt;font-weight: 700;&lt;br/&gt;overflow-wrap: break-word;&lt;br/&gt;word-wrap: break-word;&lt;br/&gt;-ms-word-break: break-all;&lt;br/&gt;word-break: break-word;&lt;br/&gt;-ms-hyphens: auto;&lt;br/&gt;-moz-hyphens: auto;&lt;br/&gt;-webkit-hyphens: auto;&lt;br/&gt;hyphens: auto;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;4bb5&quot; id=&quot;4bb5&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
h1 {&lt;br/&gt;font-size: 2.35em;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;55fa&quot; id=&quot;55fa&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
h2 {&lt;br/&gt;font-size: 2em;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;1e72&quot; id=&quot;1e72&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
h3 {&lt;br/&gt;font-size: 1.75em;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;73b7&quot; id=&quot;73b7&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
h4 {&lt;br/&gt;font-size: 1.5em;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;d9d0&quot; id=&quot;d9d0&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
h5 {&lt;br/&gt;font-size: 1.25em;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;7270&quot; id=&quot;7270&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
h6 {&lt;br/&gt;font-size: 1em;&lt;br/&gt;}
&lt;/pre&gt;
&lt;p name=&quot;4830&quot; id=&quot;4830&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Here most of the CSS is styling the typography (fonts with sizes, line height, etc.), with some styling for the colors and a centered layout. You’d have to study design to know good values to choose for each of these properties (these styles are from &lt;a href=&quot;https://github.com/oxalorg/sakura&quot; data-href=&quot;https://github.com/oxalorg/sakura&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;sakura.css&lt;/a&gt;), but the CSS itself that’s being applied here isn’t too complicated to read. The result looks like this:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*_rykiEopx6MCsnOAAcT8MA.png&quot; data-width=&quot;2458&quot; data-height=&quot;1566&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*_rykiEopx6MCsnOAAcT8MA.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*_rykiEopx6MCsnOAAcT8MA.png&quot;/&gt;&lt;/div&gt;
Click &lt;a href=&quot;https://codepen.io/peterxjang/pen/oEbERP?editors=1100&quot; data-href=&quot;https://codepen.io/peterxjang/pen/oEbERP?editors=1100&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; to see a live example
&lt;p name=&quot;1b03&quot; id=&quot;1b03&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;What a difference! This is the promise of CSS — a simple way to add styles to a document, without requiring programming or complex logic. Unfortunately, things start to get hairier when we use CSS for more than just typography and colors (which we’ll tackle next).&lt;/p&gt;
&lt;h3 name=&quot;c564&quot; id=&quot;c564&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Using CSS for layout&lt;/h3&gt;
&lt;p name=&quot;e8a0&quot; id=&quot;e8a0&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;In the 1990s, before CSS gained wide adoption, there weren’t a lot of options to layout content on the page. HTML was originally designed as a language to create plain documents, not dynamic websites with sidebars, columns, etc. In those early days, layout was often done using HTML tables — the entire webpage would be within a table, which could be used to organize the content in rows and columns. This approach worked, but the downside was the tight coupling of content and presentation — if you wanted to change the layout of a site, it would require rewriting significant amounts of HTML.&lt;/p&gt;
&lt;p name=&quot;e384&quot; id=&quot;e384&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Once CSS entered the scene, there was a strong push to keep content (written in the HTML) separate from presentation (written in the CSS). So people found ways to move all layout code out of HTML (no more tables) into CSS. It’s important to note that like HTML, CSS wasn’t really designed to layout content on a page either, so early attempts at this separation of concerns were difficult to achieve gracefully.&lt;/p&gt;
&lt;p name=&quot;2e52&quot; id=&quot;2e52&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s take a look at how this works in practice with our above example. Before we define any CSS layout, we’ll first reset any margins and paddings (which affect layout calculations) as well as give section distinct colors (not to make it pretty, but to make each section visually stand out when testing different layouts).&lt;/p&gt;
&lt;pre name=&quot;8d36&quot; id=&quot;8d36&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
/* RESET LAYOUT AND ADD COLORS */
&lt;/pre&gt;
&lt;pre name=&quot;1ebc&quot; id=&quot;1ebc&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
body {&lt;br/&gt;margin: 0;&lt;br/&gt;padding: 0;&lt;br/&gt;max-width: inherit;&lt;br/&gt;background: #fff;&lt;br/&gt;color: #4a4a4a;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;9e84&quot; id=&quot;9e84&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
header, footer {&lt;br/&gt;font-size: large;&lt;br/&gt;text-align: center;&lt;br/&gt;padding: 0.3em 0;&lt;br/&gt;background-color: #4a4a4a;&lt;br/&gt;color: #f9f9f9;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;3fc4&quot; id=&quot;3fc4&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
nav {&lt;br/&gt;background: #eee;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;07ea&quot; id=&quot;07ea&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
main {&lt;br/&gt;background: #f9f9f9;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;f8f5&quot; id=&quot;f8f5&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
aside {&lt;br/&gt;background: #eee;&lt;br/&gt;}
&lt;/pre&gt;
&lt;p name=&quot;2916&quot; id=&quot;2916&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Now the website temporarily looks like:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*Ii8mtqbLaS5GIB3VJTpqSw.png&quot; data-width=&quot;2380&quot; data-height=&quot;1560&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*Ii8mtqbLaS5GIB3VJTpqSw.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*Ii8mtqbLaS5GIB3VJTpqSw.png&quot;/&gt;&lt;/div&gt;
Click &lt;a href=&quot;https://codepen.io/peterxjang/pen/jZWzEV?editors=1100&quot; data-href=&quot;https://codepen.io/peterxjang/pen/jZWzEV?editors=1100&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; to see a live example
&lt;p name=&quot;47fa&quot; id=&quot;47fa&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Now we’re ready to use CSS to layout the content on the page. We’ll look at three different approaches in chronological order, starting with the classic float-based layouts.&lt;/p&gt;
&lt;h4 name=&quot;b73d&quot; id=&quot;b73d&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Float-based layout&lt;/h4&gt;
&lt;p name=&quot;527a&quot; id=&quot;527a&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;The CSS float property was originally introduced to float an image inside a column of text on the left or right (something you often see in newspapers). Web developers in the early 2000s took advantage of the fact that you could float not just images, but any element, meaning you could create the illusion of rows and columns by floating entire divs of content. But again, floats weren’t designed for this purpose, so creating this illusion was difficult to pull off in a consistent fashion.&lt;/p&gt;
&lt;p name=&quot;6849&quot; id=&quot;6849&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In 2006, &lt;a href=&quot;https://alistapart.com/&quot; data-href=&quot;https://alistapart.com/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;A List Apart&lt;/a&gt; published the popular article &lt;a href=&quot;https://alistapart.com/article/holygrail&quot; data-href=&quot;https://alistapart.com/article/holygrail&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;In Search of the Holy Grail&lt;/a&gt;, which outlined a detailed and thorough approach to creating what was known as the Holy Grail layout — a header, three columns and a footer. It’s pretty crazy to think that what sounds like a fairly straightforward layout would be referred to as the Holy Grail, but that was indeed how hard it was to create consistent layout at the time using pure CSS.&lt;/p&gt;
&lt;p name=&quot;1881&quot; id=&quot;1881&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Below is a float-based layout for our example based on the technique described in that article:&lt;/p&gt;
&lt;pre name=&quot;cca2&quot; id=&quot;cca2&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
/* FLOAT-BASED LAYOUT */
&lt;/pre&gt;
&lt;pre name=&quot;eb9a&quot; id=&quot;eb9a&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
body {&lt;br/&gt;padding-left: 200px;&lt;br/&gt;padding-right: 190px;&lt;br/&gt;min-width: 240px;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;e9ab&quot; id=&quot;e9ab&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
header, footer {&lt;br/&gt;margin-left: -200px;&lt;br/&gt;margin-right: -190px;   &lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;89f7&quot; id=&quot;89f7&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
main, nav, aside {&lt;br/&gt;position: relative;&lt;br/&gt;float: left;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;bdbc&quot; id=&quot;bdbc&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
main {&lt;br/&gt;padding: 0 20px;&lt;br/&gt;width: 100%;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;6736&quot; id=&quot;6736&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
nav {&lt;br/&gt;width: 180px;&lt;br/&gt;padding: 0 10px;&lt;br/&gt;right: 240px;&lt;br/&gt;margin-left: -100%;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;d64b&quot; id=&quot;d64b&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
aside {&lt;br/&gt;width: 130px;&lt;br/&gt;padding: 0 10px;&lt;br/&gt;margin-right: -100%;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;898d&quot; id=&quot;898d&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
footer {&lt;br/&gt;clear: both;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;3c18&quot; id=&quot;3c18&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
* html nav {&lt;br/&gt;left: 150px;&lt;br/&gt;}
&lt;/pre&gt;
&lt;p name=&quot;6c36&quot; id=&quot;6c36&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Looking at the CSS, you can see there are quite a few hacks necessary to get it to work (negative margins, the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;clear: both&lt;/code&gt; property, hard-coded width calculations, etc.) — the &lt;a href=&quot;https://alistapart.com/article/holygrail&quot; data-href=&quot;https://alistapart.com/article/holygrail&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;article&lt;/a&gt; does a good job explaining the reasoning for each in detail. Below is what the result looks like:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*_2LrWDjxL8Q33fL6Ci4hIw.png&quot; data-width=&quot;2340&quot; data-height=&quot;1560&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*_2LrWDjxL8Q33fL6Ci4hIw.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*_2LrWDjxL8Q33fL6Ci4hIw.png&quot;/&gt;&lt;/div&gt;
Click &lt;a href=&quot;https://codepen.io/peterxjang/pen/VQeXYg?editors=1100&quot; data-href=&quot;https://codepen.io/peterxjang/pen/VQeXYg?editors=1100&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; to see a live example
&lt;p name=&quot;f226&quot; id=&quot;f226&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This is nice, but you can see from the colors that the three columns are not equal in height, and the page doesn’t fill the height of the screen. These issues are inherent with a float-based approach. All a float can do is place content to the left or right of a section — the CSS has no way to infer the heights of the content in the other sections. This problem had no straightforward solution until many years later, with a flexbox-based layout.&lt;/p&gt;
&lt;h4 name=&quot;34cf&quot; id=&quot;34cf&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Flexbox-based layout&lt;/h4&gt;
&lt;p name=&quot;e156&quot; id=&quot;e156&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;The flexbox CSS property was first proposed in 2009, but didn’t get widespread browser adoption until around 2015. Flexbox was designed to define how space is distributed across a single column or row, which makes it a better candidate for defining layout compared to using floats. This meant that after about a decade of using float-based layouts, web developers were finally able to use CSS for layout without the need for the hacks needed with floats.&lt;/p&gt;
&lt;p name=&quot;8917&quot; id=&quot;8917&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Below is a flexbox-based layout for our example based on the technique described on the site &lt;a href=&quot;https://philipwalton.github.io/solved-by-flexbox/demos/holy-grail/&quot; data-href=&quot;https://philipwalton.github.io/solved-by-flexbox/demos/holy-grail/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;Solved by Flexbox&lt;/a&gt; (a popular resource showcasing different flexbox examples). Note that in order to make flexbox work, we need to an an extra wrapper div around the three columns in the HTML:&lt;/p&gt;
&lt;pre name=&quot;e7bf&quot; id=&quot;e7bf&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
&amp;lt;!DOCTYPE html&amp;gt;&lt;br/&gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;&lt;br/&gt;&amp;lt;head&amp;gt;&lt;br/&gt;&amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;&lt;br/&gt;&amp;lt;title&amp;gt;Modern CSS&amp;lt;/title&amp;gt;&lt;br/&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot;&amp;gt;&lt;br/&gt;&amp;lt;/head&amp;gt;&lt;br/&gt;&amp;lt;body&amp;gt;&lt;br/&gt;&amp;lt;header&amp;gt;This is the header.&amp;lt;/header&amp;gt;&lt;br/&gt;&lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;&amp;lt;div class=&quot;container&quot;&amp;gt;&lt;/strong&gt;&lt;br/&gt;&amp;lt;main&amp;gt;&lt;br/&gt;&amp;lt;h1&amp;gt;This is the main content.&amp;lt;/h1&amp;gt;&lt;br/&gt;&amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;&lt;br/&gt;&amp;lt;/main&amp;gt;&lt;br/&gt;&amp;lt;nav&amp;gt;&lt;br/&gt;&amp;lt;h4&amp;gt;This is the navigation section.&amp;lt;/h4&amp;gt;&lt;br/&gt;&amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;&lt;br/&gt;&amp;lt;/nav&amp;gt;&lt;br/&gt;&amp;lt;aside&amp;gt;&lt;br/&gt;&amp;lt;h4&amp;gt;This is an aside section.&amp;lt;/h4&amp;gt;&lt;br/&gt;&amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;&lt;br/&gt;&amp;lt;/aside&amp;gt;&lt;br/&gt;&lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;&amp;lt;/div&amp;gt;&lt;/strong&gt;&lt;br/&gt;&amp;lt;footer&amp;gt;This is the footer.&amp;lt;/footer&amp;gt;&lt;br/&gt;&amp;lt;/body&amp;gt;&lt;br/&gt;&amp;lt;/html&amp;gt;
&lt;/pre&gt;
&lt;p name=&quot;ad71&quot; id=&quot;ad71&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;And here’s the flexbox code in the CSS:&lt;/p&gt;
&lt;pre name=&quot;764c&quot; id=&quot;764c&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
/* FLEXBOX-BASED LAYOUT */
&lt;/pre&gt;
&lt;pre name=&quot;d8c1&quot; id=&quot;d8c1&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
body {&lt;br/&gt;min-height: 100vh;&lt;br/&gt;display: flex;&lt;br/&gt;flex-direction: column;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;6013&quot; id=&quot;6013&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
.container {&lt;br/&gt;display: flex;&lt;br/&gt;flex: 1;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;3299&quot; id=&quot;3299&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
main {&lt;br/&gt;flex: 1;&lt;br/&gt;padding: 0 20px;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;d3d2&quot; id=&quot;d3d2&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
nav {&lt;br/&gt;flex: 0 0 180px;&lt;br/&gt;padding: 0 10px;&lt;br/&gt;order: -1;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;2c6c&quot; id=&quot;2c6c&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
aside {&lt;br/&gt;flex: 0 0 130px;&lt;br/&gt;padding: 0 10px;&lt;br/&gt;}
&lt;/pre&gt;
&lt;p name=&quot;0ffc&quot; id=&quot;0ffc&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;That is way, way more compact compared to the float-based layout approach! The flexbox properties and values are a bit confusing at first glance, but it eliminates the need for a lot of the hacks like negative margins that were necessary with float-based layouts — a huge win. Here is what the result looks like:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*I6qa6O31X-jlilGCrcSTsQ.png&quot; data-width=&quot;2382&quot; data-height=&quot;1560&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*I6qa6O31X-jlilGCrcSTsQ.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*I6qa6O31X-jlilGCrcSTsQ.png&quot;/&gt;&lt;/div&gt;
Click &lt;a href=&quot;https://codepen.io/peterxjang/pen/xYZWGz?editors=1100&quot; data-href=&quot;https://codepen.io/peterxjang/pen/xYZWGz?editors=1100&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; for a live example
&lt;p name=&quot;3280&quot; id=&quot;3280&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Much better! The columns are all equal height and take up the full height of the page. In some sense this seems perfect, but there are a couple of minor downsides to this approach. One is browser support — currently every modern browser supports flexbox, but some older browsers never will. Fortunately browser vendors are making a bigger push to end support for these older browsers, making a more consistent development experience for web designers. Another downside is the fact that we needed to add the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;&amp;lt;div class=&quot;container&quot;&amp;gt;&lt;/code&gt; to the markup — it would be nice to avoid it. In an ideal world, any CSS layout wouldn’t require changing the HTML markup at all.&lt;/p&gt;
&lt;p name=&quot;c572&quot; id=&quot;c572&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The biggest downside though is the code in the CSS itself — flexbox eliminates a lot of the float hacks, but the code isn’t as expressive as it could be for defining layout. It’s hard to read the flexbox CSS and get a visual understanding how all of the elements will be laid out on the page. This leads to a lot of guessing and checking when writing flexbox-based layouts.&lt;/p&gt;
&lt;p name=&quot;5f2a&quot; id=&quot;5f2a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;It’s important to note again that flexbox was designed to space elements within a single column or row — it was not designed for an entire page layout! Even though it does a serviceable job (much better than float-based layouts), a different specification was specifically developed to handle layouts with multiple rows and columns. This specification is known as CSS grid.&lt;/p&gt;
&lt;h4 name=&quot;149d&quot; id=&quot;149d&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Grid-based layout&lt;/h4&gt;
&lt;p name=&quot;3ac9&quot; id=&quot;3ac9&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;CSS grid was first proposed in 2011 (not too long after the flexbox proposal), but took a long time to gain widespread adoption with browsers. As of early 2018, CSS grid is supported by most modern browsers (a huge improvement over even a year or two ago).&lt;/p&gt;
&lt;p name=&quot;badd&quot; id=&quot;badd&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Below is a grid-based layout for our example based on the first method in this &lt;a href=&quot;https://css-tricks.com/css-grid-one-layout-multiple-ways/&quot; data-href=&quot;https://css-tricks.com/css-grid-one-layout-multiple-ways/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;CSS tricks article&lt;/a&gt;. Note that for this example, we can get rid of the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;&amp;lt;div class=&quot;container&quot;&amp;gt;&lt;/code&gt; that we had to add for the flexbox-based layout — we can simply use the original HTML without modification. Here’s what the CSS looks like:&lt;/p&gt;
&lt;pre name=&quot;c198&quot; id=&quot;c198&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
/* GRID-BASED LAYOUT */
&lt;/pre&gt;
&lt;pre name=&quot;3b3f&quot; id=&quot;3b3f&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
body {&lt;br/&gt;display: grid;&lt;br/&gt;min-height: 100vh;&lt;br/&gt;grid-template-columns: 200px 1fr 150px;&lt;br/&gt;grid-template-rows: min-content 1fr min-content;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;157e&quot; id=&quot;157e&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
header {&lt;br/&gt;grid-row: 1;&lt;br/&gt;grid-column: 1 / 4;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;c3bc&quot; id=&quot;c3bc&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
nav {&lt;br/&gt;grid-row: 2;&lt;br/&gt;grid-column: 1 / 2;&lt;br/&gt;padding: 0 10px;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;df14&quot; id=&quot;df14&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
main {&lt;br/&gt;grid-row: 2;&lt;br/&gt;grid-column: 2 / 3;&lt;br/&gt;padding: 0 20px;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;ad59&quot; id=&quot;ad59&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
aside {&lt;br/&gt;grid-row: 2;&lt;br/&gt;grid-column: 3 / 4;&lt;br/&gt;padding: 0 10px;&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;214b&quot; id=&quot;214b&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
footer {&lt;br/&gt;grid-row: 3;&lt;br/&gt;grid-column: 1 / 4;&lt;br/&gt;}
&lt;/pre&gt;
&lt;p name=&quot;48e3&quot; id=&quot;48e3&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;The result is visually identical to the flexbox based layout. However, the CSS here is much improved in the sense that it clearly expresses the desired layout. The size and shape of the columns and rows are defined in the body selector, and each item in the grid is defined directly by its position.&lt;/p&gt;
&lt;p name=&quot;bf24&quot; id=&quot;bf24&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;One thing that can be confusing is the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;grid-column&lt;/code&gt; property, which defines the start point / end point of the column. It can be confusing because in this example, there are 3 columns, but the numbers range from 1 to 4. It becomes more clear when you look at the picture below:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*GOJJrm9Mhp_Qr319Bc7V9Q.png&quot; data-width=&quot;2382&quot; data-height=&quot;1560&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*GOJJrm9Mhp_Qr319Bc7V9Q.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*GOJJrm9Mhp_Qr319Bc7V9Q.png&quot;/&gt;&lt;/div&gt;
Click &lt;a href=&quot;https://codepen.io/peterxjang/pen/vdLROM?editors=1100&quot; data-href=&quot;https://codepen.io/peterxjang/pen/vdLROM?editors=1100&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; to see a live example
&lt;p name=&quot;ae99&quot; id=&quot;ae99&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The first column starts at 1 and ends at 2, the second column starts at 2 and ends at 3, and the third column starts at 3 and ends at 4. The header has a &lt;code class=&quot;markup--code markup--p-code&quot;&gt;grid-column&lt;/code&gt; of &lt;code class=&quot;markup--code markup--p-code&quot;&gt;1 / 4&lt;/code&gt; to span the entire page, the nav has a &lt;code class=&quot;markup--code markup--p-code&quot;&gt;grid-column&lt;/code&gt; of &lt;code class=&quot;markup--code markup--p-code&quot;&gt;1 / 2&lt;/code&gt; to span the first column, etc.&lt;/p&gt;
&lt;p name=&quot;6631&quot; id=&quot;6631&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Once you get used to the grid syntax, it clearly becomes the ideal way to express layout in CSS. The only real downside to a grid-based layout is browser support, which again has improved tremendously over the past year. It’s hard to overstate the importance of CSS grid as the first real tool in CSS that was actually designed for layout. In some sense, web designers have always had to be very conservative with making creative layouts, since the tools up until now have been fragile, using various hacks and workarounds. Now that CSS grid exists, there is the potential for a new wave of creative layout designs that never would have been possible before — exciting times!&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*JGkKSd3Hs7Pq17Qt5xTEzw.png&quot; data-width=&quot;2226&quot; data-height=&quot;778&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*JGkKSd3Hs7Pq17Qt5xTEzw.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*JGkKSd3Hs7Pq17Qt5xTEzw.png&quot;/&gt;&lt;/div&gt;
&lt;h3 name=&quot;9117&quot; id=&quot;9117&quot; class=&quot;graf graf--h3 graf-after--figure&quot;&gt;Using a CSS preprocessor for new syntax&lt;/h3&gt;
&lt;p name=&quot;2785&quot; id=&quot;2785&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;So far we’ve covered using CSS for basic styling as well as layout. Now we’ll get into tooling that was created to help improve the experience of working with CSS as a language itself, starting with CSS preprocessors.&lt;/p&gt;
&lt;p name=&quot;6787&quot; id=&quot;6787&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;A CSS preprocessor allows you to write styles using a different language which gets converted into CSS that the browser can understand. This was critical back in the day when browsers were very slow to implement new features. The first major CSS preprocessor was &lt;a href=&quot;http://sass-lang.com/&quot; data-href=&quot;http://sass-lang.com/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;Sass&lt;/a&gt;, released in 2006. It featured a new concise syntax (indentation instead of brackets, no semicolons, etc.) and added advanced features missing from CSS, such as variables, helper functions, and calculations. Here’s what the color section of our earlier example would look like using Sass with variables:&lt;/p&gt;
&lt;pre name=&quot;7b0b&quot; id=&quot;7b0b&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
$dark-color: #4a4a4a&lt;br/&gt;$light-color: #f9f9f9&lt;br/&gt;$side-color: #eee
&lt;/pre&gt;
&lt;pre name=&quot;67a9&quot; id=&quot;67a9&quot; class=&quot;graf graf--pre graf-after--pre&quot; readability=&quot;8&quot;&gt;
body&lt;br/&gt;color: $dark-color&lt;p&gt;header, footer&lt;br/&gt;background-color: $dark-color&lt;br/&gt;color: $light-color&lt;/p&gt;&lt;p&gt;main&lt;br/&gt;background: $light-color
&lt;/p&gt;&lt;/pre&gt;
&lt;pre name=&quot;f991&quot; id=&quot;f991&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
nav, aside&lt;br/&gt;background: $side-color
&lt;/pre&gt;
&lt;p name=&quot;1194&quot; id=&quot;1194&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Note how reusable variables are defined with the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;$&lt;/code&gt; symbol, and that brackets and semicolons are eliminated, making for a cleaner looking syntax. The cleaner syntax in Sass is nice, but features like variables were revolutionary at the time, as they opened up new possibilities for writing clean and maintainable CSS.&lt;/p&gt;
&lt;p name=&quot;5ce9&quot; id=&quot;5ce9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;To use Sass, you need to &lt;a href=&quot;https://www.ruby-lang.org/en/documentation/installation/&quot; data-href=&quot;https://www.ruby-lang.org/en/documentation/installation/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;install Ruby&lt;/a&gt;, the programming language used to compile Sass code to regular CSS. Then you would need to install the &lt;a href=&quot;http://sass-lang.com/install&quot; data-href=&quot;http://sass-lang.com/install&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;Sass gem&lt;/a&gt;, then run a &lt;a href=&quot;http://sass-lang.com/guide#topic-1&quot; data-href=&quot;http://sass-lang.com/guide#topic-1&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;command in the command line&lt;/a&gt; to convert your .sass files into .css files. Here’s an example of what a command would look like:&lt;/p&gt;
&lt;pre name=&quot;b599&quot; id=&quot;b599&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
sass --watch index.sass index.css
&lt;/pre&gt;
&lt;p name=&quot;b4d6&quot; id=&quot;b4d6&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;This command will convert Sass code written in a file named &lt;code class=&quot;markup--code markup--p-code&quot;&gt;index.sass&lt;/code&gt; to regular CSS in a file named &lt;code class=&quot;markup--code markup--p-code&quot;&gt;index.css&lt;/code&gt; (the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;--watch&lt;/code&gt; argument tells it to run any time the input changes on save, which is convenient).&lt;/p&gt;
&lt;p name=&quot;e869&quot; id=&quot;e869&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This process is known as a build step, and it was a pretty significant barrier to entry back in 2006. If you’re used to programming languages like Ruby, the process is pretty straightforward. But many frontend developers at the time only worked with HTML and CSS, which did not require any such tools. So it was a big ask to have someone learn an entire ecosystem to be able to get the features offered by a CSS preprocessor.&lt;/p&gt;
&lt;p name=&quot;bbc0&quot; id=&quot;bbc0&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In 2009, the &lt;a href=&quot;http://lesscss.org/&quot; data-href=&quot;http://lesscss.org/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;Less&lt;/a&gt; CSS preprocessor was released. It was also written in Ruby, and offered similar features to Sass. The key difference was the syntax, which was designed to be as close to CSS as possible. This means that any CSS code is valid Less code. Here’s the same example written using Less syntax:&lt;/p&gt;
&lt;pre name=&quot;47ca&quot; id=&quot;47ca&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
@dark-color: #4a4a4a;&lt;br/&gt;@light-color: #f9f9f9;&lt;br/&gt;@side-color: #eee;
&lt;/pre&gt;
&lt;pre name=&quot;3312&quot; id=&quot;3312&quot; class=&quot;graf graf--pre graf-after--pre&quot; readability=&quot;8&quot;&gt;
body {&lt;br/&gt;color: @dark-color;&lt;br/&gt;}&lt;p&gt;header, footer {&lt;br/&gt;background-color: @dark-color;&lt;br/&gt;color: @light-color;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;main {&lt;br/&gt;background: @light-color;&lt;br/&gt;}
&lt;/p&gt;&lt;/pre&gt;
&lt;pre name=&quot;36c5&quot; id=&quot;36c5&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
nav, aside {&lt;br/&gt;background: @side-color;&lt;br/&gt;}
&lt;/pre&gt;
&lt;p name=&quot;0978&quot; id=&quot;0978&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;It’s nearly the same (&lt;code class=&quot;markup--code markup--p-code&quot;&gt;@&lt;/code&gt; prefix instead of &lt;code class=&quot;markup--code markup--p-code&quot;&gt;$&lt;/code&gt; for variables), but not as pretty as the Sass example, with the same curly brackets and semi-colons as CSS. Yet the fact that it’s closer to CSS made it easier for developers to adopt it. In 2012, Less was rewritten to use JavaScript (specifically &lt;a href=&quot;https://nodejs.org/en/&quot; data-href=&quot;https://nodejs.org/en/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;Node.js&lt;/a&gt;) instead of Ruby for compiling. This made Less faster than its Ruby counterparts, and made it more appealing to developers who were already using Node.js in their workflows.&lt;/p&gt;
&lt;p name=&quot;3636&quot; id=&quot;3636&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;To convert this code to regular CSS, you would first need to &lt;a href=&quot;https://nodejs.org/en/download/&quot; data-href=&quot;https://nodejs.org/en/download/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;install Node.js&lt;/a&gt;, then &lt;a href=&quot;http://lesscss.org/#using-less-installation&quot; data-href=&quot;http://lesscss.org/#using-less-installation&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;install Less&lt;/a&gt;, then run a command like:&lt;/p&gt;
&lt;pre name=&quot;18ab&quot; id=&quot;18ab&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
lessc index.less index.css
&lt;/pre&gt;
&lt;p name=&quot;8dd0&quot; id=&quot;8dd0&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;This command will convert Less code written in a file named &lt;code class=&quot;markup--code markup--p-code&quot;&gt;index.less&lt;/code&gt; to regular CSS in a file named &lt;code class=&quot;markup--code markup--p-code&quot;&gt;index.css&lt;/code&gt;. Note that the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;lessc&lt;/code&gt; command does not come with a way to watch files for changes (unlike the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;sass&lt;/code&gt; command), meaning you would need to install a different tool to automatically watch and compile &lt;code class=&quot;markup--code markup--p-code&quot;&gt;.less&lt;/code&gt; files, adding a bit more complexity to the process. Again, this is not difficult for programmers who are used to using command line tools, but it is a significant barrier to entry for others who simply want to use a CSS preprocessor.&lt;/p&gt;
&lt;p name=&quot;fe6c&quot; id=&quot;fe6c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;As Less gained mindshare, Sass developers adapted by adding a new syntax called &lt;a href=&quot;http://sass-lang.com/documentation/file.SASS_CHANGELOG.html#SCSS__Sassy_CSS_&quot; data-href=&quot;http://sass-lang.com/documentation/file.SASS_CHANGELOG.html#SCSS__Sassy_CSS_&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;SCSS&lt;/a&gt; in 2010 (which was a superset of CSS similar to Less). They also released &lt;a href=&quot;http://sass-lang.com/libsass&quot; data-href=&quot;http://sass-lang.com/libsass&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;LibSass&lt;/a&gt;, a C/C++ port of the Ruby Sass engine, which made it faster and able to be used in various languages.&lt;/p&gt;
&lt;p name=&quot;48a5&quot; id=&quot;48a5&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Another alternative CSS preprocessor is &lt;a href=&quot;http://stylus-lang.com/&quot; data-href=&quot;http://stylus-lang.com/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;Stylus&lt;/a&gt;, which came out in 2010, written in Node.js, and focuses on cleaner syntax compared to Sass or Less. Usually conversations about CSS preprocessors focus on those three as the most popular (Sass, Less, and Stylus). In the end, they are all pretty similar in terms of the features they offer, so you can’t really go wrong picking any of them.&lt;/p&gt;
&lt;p name=&quot;f643&quot; id=&quot;f643&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;However, some people make the argument that CSS preprocessors are becoming less necessary, as browsers are finally beginning to implement some of their features (such as variables and calculations). Furthermore, there’s a different approach known as CSS postprocessing that has the potential to make CSS preprocessors obsolete (obviously not without controversy), which we’ll get into next.&lt;/p&gt;
&lt;h3 name=&quot;3edc&quot; id=&quot;3edc&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Using a CSS postprocessor for transformative features&lt;/h3&gt;
&lt;p name=&quot;6408&quot; id=&quot;6408&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;A CSS postprocessor uses JavaScript to analyze and transform your CSS into valid CSS. In this sense it’s pretty similar to a CSS preprocessor — you can think of it as a different approach to solving the same problem. The key difference is that while a CSS preprocessor uses special syntax to identify what needs to be transformed, a CSS postprocessor can parse regular CSS and transform it without any special syntax required. This is best illustrated with an example. Let’s look at a part of the CSS we originally defined above to style the header tags:&lt;/p&gt;
&lt;pre name=&quot;53b3&quot; id=&quot;53b3&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
h1, h2, h3, h4, h5, h6 {&lt;br/&gt;&lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;  -ms-hyphens: auto;&lt;br/&gt;-moz-hyphens: auto;&lt;br/&gt;-webkit-hyphens: auto;&lt;/strong&gt;&lt;br/&gt;hyphens: auto;&lt;br/&gt;}
&lt;/pre&gt;
&lt;p name=&quot;1901&quot; id=&quot;1901&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;The items in bold are called vendor prefixes. Vendor prefixes are used by browsers when they are experimentally adding or testing new CSS features, giving a way for developers to use these new CSS properties while the implementation is being finalized. Here the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;-ms&lt;/code&gt; prefix is for Microsoft Internet Explorer, the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;-moz&lt;/code&gt; prefix is for Mozilla Firefox, and the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;-webkit&lt;/code&gt; prefix is for browsers using the webkit rendering engine (like Google Chrome, Safari, and newer versions of Opera).&lt;/p&gt;
&lt;p name=&quot;5ddd&quot; id=&quot;5ddd&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;It’s pretty annoying to remember to put in all these different vendor prefixes to use these CSS properties. It would be nice to have a tool that can automatically put in vendor prefixes as needed. We can sort of pull this off with CSS preprocessors. For example, you could do something like this with SCSS:&lt;/p&gt;
&lt;pre name=&quot;f7bc&quot; id=&quot;f7bc&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
&lt;code class=&quot;markup--code markup--pre-code&quot;&gt;&lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;@mixin hyphens($value) {&lt;/strong&gt;&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;&lt;br/&gt;-ms-hyphens: &lt;/strong&gt;&lt;code class=&quot;markup--code markup--pre-code&quot;&gt;&lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;$value&lt;/strong&gt;&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;;&lt;br/&gt;-moz-hyphens: &lt;/strong&gt;&lt;code class=&quot;markup--code markup--pre-code&quot;&gt;&lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;$value&lt;/strong&gt;&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;;&lt;br/&gt;-webkit-hyphens: &lt;/strong&gt;&lt;code class=&quot;markup--code markup--pre-code&quot;&gt;&lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;$value&lt;/strong&gt;&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;;&lt;br/&gt;hyphens: &lt;/strong&gt;&lt;code class=&quot;markup--code markup--pre-code&quot;&gt;&lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;$value&lt;/strong&gt;&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;;&lt;/strong&gt;&lt;code class=&quot;markup--code markup--pre-code&quot;&gt;&lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;&lt;br/&gt;}&lt;/strong&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre name=&quot;05f9&quot; id=&quot;05f9&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
h1, h2, h3, h4, h5, h6 {&lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;&lt;br/&gt;@include hyphens(auto);&lt;/strong&gt;&lt;br/&gt;}
&lt;/pre&gt;
&lt;p name=&quot;b106&quot; id=&quot;b106&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Here we’re using &lt;a href=&quot;http://sass-lang.com/guide#topic-6&quot; data-href=&quot;http://sass-lang.com/guide#topic-6&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;Sass’ mixin feature&lt;/a&gt;, which allows you to define a chunk of CSS once and reuse it anywhere else. When this file is compiled into regular CSS, any &lt;code class=&quot;markup--code markup--p-code&quot;&gt;@include&lt;/code&gt; statements will be replaced with the CSS from the matching &lt;code class=&quot;markup--code markup--p-code&quot;&gt;@mixin&lt;/code&gt;. Overall this isn’t a bad solution, but you are responsible for defining each mixin the first time for any CSS property requiring vendor prefixes. These mixin definitions will require maintenance, as you may want to remove specific vendor prefixes that you no longer need as browsers update their CSS compatibility.&lt;/p&gt;
&lt;p name=&quot;1536&quot; id=&quot;1536&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Instead of using mixins, it would be nice to simply write normal CSS and have a tool automatically identify properties that require prefixes and add them accordingly. A CSS postprocessor is capable of doing exactly that. For example, if you use &lt;a href=&quot;http://postcss.org/&quot; data-href=&quot;http://postcss.org/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;PostCSS&lt;/a&gt; with the &lt;a href=&quot;https://github.com/postcss/autoprefixer&quot; data-href=&quot;https://github.com/postcss/autoprefixer&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;autoprefixer plugin&lt;/a&gt;, you can write completely normal CSS without any vendor prefixes and let the postprocessor do the rest of the work:&lt;/p&gt;
&lt;pre name=&quot;c6dc&quot; id=&quot;c6dc&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
h1, h2, h3, h4, h5, h6 {&lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;&lt;br/&gt;hyphens: auto;&lt;/strong&gt;&lt;br/&gt;}
&lt;/pre&gt;
&lt;p name=&quot;5fbd&quot; id=&quot;5fbd&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;When you run the CSS postprocessor on this code, the result is the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;hypens: auto;&lt;/code&gt; line gets replaced with all the appropriate vendor prefixes (as defined in the autoprefixer plugin, which you don’t need to directly manage). Meaning you can just write regular CSS without having to worry about any compatibility or special syntax, which is nice!&lt;/p&gt;
&lt;p name=&quot;e941&quot; id=&quot;e941&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;There are plugins other than autoprefixer for PostCSS that allow you to do really cool things. The &lt;a href=&quot;http://cssnext.io/&quot; data-href=&quot;http://cssnext.io/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;cssnext&lt;/a&gt; plugin allows you to use experimental CSS features. The &lt;a href=&quot;https://github.com/css-modules/css-modules&quot; data-href=&quot;https://github.com/css-modules/css-modules&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;CSS modules&lt;/a&gt; plugin automatically changes classes to avoid name conflicts. The &lt;a href=&quot;https://stylelint.io/&quot; data-href=&quot;https://stylelint.io/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;stylelint&lt;/a&gt; plugin identifies errors and inconsistent conventions in your CSS. These tools have really started to take off in the last year or two, showcasing developer workflows that has never been possible before!&lt;/p&gt;
&lt;p name=&quot;1ca1&quot; id=&quot;1ca1&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;There is a price to pay for this progress, however. Installing and using a CSS postprocessor like PostCSS is more involved compared to using a CSS preprocessor. Not only do you have to install and run tools using the command line, but you need to install and configure individual plugins and define a more complex set of rules (like which browsers you are targeting, etc.) Instead of running PostCSS straight from the command line, many developers integrate it into configurable build systems like &lt;a href=&quot;https://github.com/postcss/postcss#runners&quot; data-href=&quot;https://github.com/postcss/postcss#runners&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;Grunt&lt;/a&gt;, &lt;a href=&quot;https://github.com/postcss/postcss#gulp&quot; data-href=&quot;https://github.com/postcss/postcss#gulp&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;Gulp&lt;/a&gt;, or &lt;a href=&quot;https://github.com/postcss/postcss#webpack&quot; data-href=&quot;https://github.com/postcss/postcss#webpack&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;webpack&lt;/a&gt;, which help manage all the different build tools you might use in your frontend workflow.&lt;/p&gt;
&lt;blockquote name=&quot;028b&quot; id=&quot;028b&quot; class=&quot;graf graf--blockquote graf-after--p&quot; readability=&quot;8.9066666666667&quot;&gt;
&lt;p&gt;&lt;strong class=&quot;markup--strong markup--blockquote-strong&quot;&gt;Note&lt;/strong&gt;: It can be quite overwhelming to learn all the necessary parts to making a modern frontend build system work if you’ve never used one before. If you want to get started from scratch, check out my article &lt;a href=&quot;https://medium.com/the-node-js-collection/modern-javascript-explained-for-dinosaurs-f695e9747b70&quot; data-href=&quot;https://medium.com/the-node-js-collection/modern-javascript-explained-for-dinosaurs-f695e9747b70&quot; class=&quot;markup--anchor markup--blockquote-anchor&quot; target=&quot;_blank&quot;&gt;Modern JavaScript Explained For Dinosaurs&lt;/a&gt;, which goes over all the JavaScript tooling necessary to take advantage of these modern features for a frontend developer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;207c&quot; id=&quot;207c&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;It’s worth noting that there is some debate around CSS postprocessors. Some argue that the terminology is confusing (&lt;a href=&quot;https://css-tricks.com/the-trouble-with-preprocessing-based-on-future-specs/&quot; data-href=&quot;https://css-tricks.com/the-trouble-with-preprocessing-based-on-future-specs/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;one argument&lt;/a&gt; is that they should all be called CSS preprocessors, &lt;a href=&quot;https://medium.com/@ddprrt/deconfusing-pre-and-post-processing-d68e3bd078a3&quot; data-href=&quot;https://medium.com/@ddprrt/deconfusing-pre-and-post-processing-d68e3bd078a3&quot; class=&quot;markup--anchor markup--p-anchor&quot; target=&quot;_blank&quot;&gt;another argument&lt;/a&gt; is that they should just be simply called CSS processors, etc.). Some believe CSS postprocessors eliminate the need for CSS preprocessors altogether, some believe they should be used together. In any case, it’s clear that learning how to use a CSS postprocessor is worth it if you’re interested in pushing the edge of what’s possible with CSS.&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*53X7_j093ePj9MOxrkA5sw.png&quot; data-width=&quot;2216&quot; data-height=&quot;754&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*53X7_j093ePj9MOxrkA5sw.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*53X7_j093ePj9MOxrkA5sw.png&quot;/&gt;&lt;/div&gt;
&lt;h3 name=&quot;8ddd&quot; id=&quot;8ddd&quot; class=&quot;graf graf--h3 graf-after--figure&quot;&gt;Using CSS methodologies for maintainability&lt;/h3&gt;
&lt;p name=&quot;ee09&quot; id=&quot;ee09&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Tools like CSS preprocessors and CSS postprocessors go a long way towards improving the CSS development experience. But these tools alone aren’t enough to solve the problem of maintaining large CSS codebases. To address this, people began to document different guidelines on how to write CSS, generally referred to as CSS methodologies.&lt;/p&gt;
&lt;p name=&quot;e5ee&quot; id=&quot;e5ee&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Before we dive into any particular CSS methodology, it’s important to understand what makes CSS hard to maintain over time. The key issue is the global nature of CSS — every style you define is globally applied to every part of the page. It becomes your job to either come up with a detailed naming convention to maintain unique class names or wrangle with &lt;a href=&quot;https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/&quot; data-href=&quot;https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;specificity rules&lt;/a&gt; to determine which style gets applied any given element. CSS methodologies provide an organized way to write CSS in order to avoid these pain points with large code bases. Let’s take a look at some of the popular methodologies in rough chronological order.&lt;/p&gt;
&lt;h4 name=&quot;fbcb&quot; id=&quot;fbcb&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;OOCSS&lt;/h4&gt;
&lt;p name=&quot;62d9&quot; id=&quot;62d9&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;&lt;a href=&quot;https://github.com/stubbornella/oocss/wiki&quot; data-href=&quot;https://github.com/stubbornella/oocss/wiki&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;OOCSS&lt;/a&gt; (Object Oriented CSS) was first presented in 2009 as a methodology organized around two main principles. The first principle is &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;separate structure and skin&lt;/strong&gt;. This means the CSS to define the structure (like layout) shouldn’t be mixed together with the CSS to define the skin (like colors, fonts, etc.). This makes it easier to “re-skin” an application. The second principle is &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;separate container and content&lt;/strong&gt;. This means think of elements as re-usable objects, with the key idea being that an object should look the same regardless of where it is on the page.&lt;/p&gt;
&lt;p name=&quot;3a33&quot; id=&quot;3a33&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;OOCSS provides well thought out guidelines, but isn’t very prescriptive on the specifics of the approach. Later approaches like SMACSS took the core concepts and added more detail to make it easier to get started.&lt;/p&gt;
&lt;h4 name=&quot;5962&quot; id=&quot;5962&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;SMACSS&lt;/h4&gt;
&lt;p name=&quot;e623&quot; id=&quot;e623&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;&lt;a href=&quot;https://smacss.com/&quot; data-href=&quot;https://smacss.com/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;SMACSS&lt;/a&gt; (Scalable and Modular Architecture for CSS) was introduced in 2011 as a methodology based around writing your CSS in 5 distinct categories — &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;base rules&lt;/strong&gt;, &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;layout rules&lt;/strong&gt;, &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;modules&lt;/strong&gt;, &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;state rules&lt;/strong&gt;, and &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;theme rules&lt;/strong&gt;. The SMACSS methodology also recommends some naming conventions. For layout rules, you would prefix class names with &lt;code class=&quot;markup--code markup--p-code&quot;&gt;l-&lt;/code&gt; or &lt;code class=&quot;markup--code markup--p-code&quot;&gt;layout-&lt;/code&gt;. For state rules, you would prefix class names that describe the state, like &lt;code class=&quot;markup--code markup--p-code&quot;&gt;is-hidden&lt;/code&gt; or &lt;code class=&quot;markup--code markup--p-code&quot;&gt;is-collapsed&lt;/code&gt;.&lt;/p&gt;
&lt;p name=&quot;991b&quot; id=&quot;991b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;SMACSS has a lot more specifics in its approach compared to OOCSS, but it still requires some careful thought in deciding what CSS rules should go into which category. Later approaches like BEM took away some of this decision making to make it even easier to adopt.&lt;/p&gt;
&lt;h4 name=&quot;facb&quot; id=&quot;facb&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;BEM&lt;/h4&gt;
&lt;p name=&quot;f196&quot; id=&quot;f196&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;&lt;a href=&quot;https://en.bem.info/&quot; data-href=&quot;https://en.bem.info/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;BEM&lt;/a&gt; (Block, Element, Modifier) was introduced in 2010 as a methodology organized around the idea of dividing the user interface into independent blocks. A &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;block&lt;/strong&gt; is a re-usable component (an example would be a search form, defined as &lt;code class=&quot;markup--code markup--p-code&quot;&gt;&amp;lt;form class=&quot;search-form&quot;&amp;gt;&amp;lt;/form&amp;gt;&lt;/code&gt;). An &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;element&lt;/strong&gt; is a smaller part of a block that can’t be re-used on its own (an example would be a button within the search form, defined as &lt;code class=&quot;markup--code markup--p-code&quot;&gt;&amp;lt;button class=&quot;search-form__button&quot;&amp;gt;Search&amp;lt;/button&amp;gt;&lt;/code&gt;). A &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;modifier&lt;/strong&gt; is an entity that defines the appearance, state, or behavior of a block or element (an example would be a disabled search form button, defined as &lt;code class=&quot;markup--code markup--p-code&quot;&gt;&amp;lt;button class=&quot;search-form__button search-form__button--disabled&quot;&amp;gt;Search&amp;lt;/button&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p name=&quot;c2ff&quot; id=&quot;c2ff&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The BEM methodology is simple to understand, with a specific naming convention that allows newcomers to apply it without having to make complex decisions. The downside for some is that the class names can be quite verbose, and don’t follow traditional rules for &lt;a href=&quot;https://css-tricks.com/semantic-class-names/&quot; data-href=&quot;https://css-tricks.com/semantic-class-names/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;writing semantic class names&lt;/a&gt;. Later approaches like Atomic CSS would take this untraditional approach to a whole other level!&lt;/p&gt;
&lt;h4 name=&quot;3758&quot; id=&quot;3758&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Atomic CSS&lt;/h4&gt;
&lt;p name=&quot;ba6d&quot; id=&quot;ba6d&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2013/10/challenging-css-best-practices-atomic-approach/&quot; data-href=&quot;https://www.smashingmagazine.com/2013/10/challenging-css-best-practices-atomic-approach/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;Atomic CSS&lt;/a&gt; (also known as Functional CSS) was introduced in 2014 as a methodology organized around the idea of creating small, single-purpose classes with names based on visual function. This approach is in complete opposition with OOCSS, SMACSS, and BEM — instead of treating elements on the page as re-usable objects, Atomic CSS ignores these objects altogether and uses re-usable single purpose utility classes to style each element. So instead of something like &lt;code class=&quot;markup--code markup--p-code&quot;&gt;&amp;lt;button class=&quot;search-form__button&quot;&amp;gt;Search&amp;lt;/button&amp;gt;&lt;/code&gt;, you would have something like &lt;code class=&quot;markup--code markup--p-code&quot;&gt;&amp;lt;button class=&quot;f6 br3 ph3 pv2 white bg-purple hover-bg-light-purple&quot;&amp;gt;Search&amp;lt;/button&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p name=&quot;60ad&quot; id=&quot;60ad&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;If your first reaction to this example is to recoil in horror, you’re not alone — many people saw this methodology as a complete violation of established CSS best practices. However, there has been a lot of excellent discussion around the idea of questioning the effectiveness of those best practices in different scenarios. &lt;a href=&quot;https://adamwathan.me/css-utility-classes-and-separation-of-concerns/&quot; data-href=&quot;https://adamwathan.me/css-utility-classes-and-separation-of-concerns/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;This article&lt;/a&gt; does a great job highlighting how traditional separation of concerns ends up creating CSS that depends on the HTML (even when using methodologies like BEM), while an atomic or functional approach is about creating HTML that depends on the CSS. Neither is wrong, but upon close inspection you can see that a true separation of concerns between CSS and HTML is never fully achievable!&lt;/p&gt;
&lt;p name=&quot;5eb6&quot; id=&quot;5eb6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Other CSS methodologies like CSS in JS actually embrace the notion that CSS and HTML will always depend on each other, leading to one of the most controversial methodologies yet…&lt;/p&gt;
&lt;h4 name=&quot;ac50&quot; id=&quot;ac50&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;CSS in JS&lt;/h4&gt;
&lt;p name=&quot;5564&quot; id=&quot;5564&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;&lt;a href=&quot;http://blog.vjeux.com/2014/javascript/react-css-in-js-nationjs.html&quot; data-href=&quot;http://blog.vjeux.com/2014/javascript/react-css-in-js-nationjs.html&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;CSS in JS&lt;/a&gt; was introduced in 2014 as a methodology organized around defining CSS styles not in a separate style sheet, but directly in each component itself. It was introduced as an approach for the &lt;a href=&quot;https://reactjs.org/&quot; data-href=&quot;https://reactjs.org/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;React JavaScript framework&lt;/a&gt; (which already took the controversial approach of defining the HTML for a component directly in JavaScript instead of a separate HTML file). Originally the methodology used inline styles, but later implementations used JavaScript to generate CSS (with unique class names based on the component) and insert it into the document with a style tag.&lt;/p&gt;
&lt;p name=&quot;b91c&quot; id=&quot;b91c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The CSS in JS methodology once again goes completely against established CSS best practices of separation of concerns. This is because the way we use the web has shifted dramatically over time. Originally the web largely consisted of static web sites — here the separation of HTML content from CSS presentation makes a lot of sense. Nowadays the web is used for creating dynamic web applications — here it makes sense to separate things out by re-usable components.&lt;/p&gt;
&lt;p name=&quot;ca7f&quot; id=&quot;ca7f&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;The goal of the CSS in JS methodology is to be able to define components with hard boundaries that consist of their own encapsulated HTML/CSS/JS, such that the CSS in one component has no chance of affecting any other components. React was one of the first widely adopted frameworks that pushed for these components with hard boundaries, influencing other major frameworks like Angular, Ember, and Vue.js to follow suit. It’s important to note that the CSS in JS methodology is relatively new, and there’s a lot of experimentation going on in this space as developers try to establish new best practices for CSS in the age of components for web applications.&lt;/p&gt;
</description>
<pubDate>Mon, 05 Feb 2018 03:17:47 +0000</pubDate>
<dc:creator>MikusR</dc:creator>
<og:title>Modern CSS Explained For Dinosaurs – Actualize – Medium</og:title>
<og:url>https://medium.com/actualize-network/modern-css-explained-for-dinosaurs-5226febe3525</og:url>
<og:image>https://cdn-images-1.medium.com/max/1200/1*kXsiGLMHSS4jUx4W6yBOlw.png</og:image>
<og:description>CSS is strangely considered both one of the easiest and one of the hardest languages to learn as a web developer. It’s certainly easy…</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/actualize-network/modern-css-explained-for-dinosaurs-5226febe3525</dc:identifier>
</item>
<item>
<title>StarCraft: Remastered – Emulating a buffer overflow for fun and profit [pdf]</title>
<link>http://0xeb.net/wp-content/uploads/2018/02/StarCraft_EUD_Emulator.pdf</link>
<guid isPermaLink="true" >http://0xeb.net/wp-content/uploads/2018/02/StarCraft_EUD_Emulator.pdf</guid>
<description>&lt;a href=&quot;http://0xeb.net/wp-content/uploads/2018/02/StarCraft_EUD_Emulator.pdf&quot;&gt;Download PDF&lt;/a&gt;</description>
<pubDate>Mon, 05 Feb 2018 00:30:38 +0000</pubDate>
<dc:creator>jsnell</dc:creator>
<og:title>Modern CSS Explained For Dinosaurs – Actualize – Medium</og:title>
<og:url>https://medium.com/actualize-network/modern-css-explained-for-dinosaurs-5226febe3525</og:url>
<og:image>https://cdn-images-1.medium.com/max/1200/1*kXsiGLMHSS4jUx4W6yBOlw.png</og:image>
<og:description>CSS is strangely considered both one of the easiest and one of the hardest languages to learn as a web developer. It’s certainly easy…</og:description>
<og:type>article</og:type>
<dc:format>application/pdf</dc:format>
<dc:identifier>http://0xeb.net/wp-content/uploads/2018/02/StarCraft_EUD_Emulator.pdf</dc:identifier>
</item>
<item>
<title>Migrating to Python 3 with pleasure</title>
<link>http://github.com/arogozhnikov/python3_with_pleasure</link>
<guid isPermaLink="true" >http://github.com/arogozhnikov/python3_with_pleasure</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;h2&gt;A short guide on features of Python 3 for data scientists&lt;/h2&gt;
&lt;p&gt;Python became a mainstream language for machine learning and other scientific fields that heavily operate with data; it boasts various deep learning frameworks and well-established set of tools for data processing and visualization.&lt;/p&gt;
&lt;p&gt;However, Python ecosystem co-exists in Python 2 and Python 3, and Python 2 is still used among data scientists. By the end of 2019 the scientific stack will &lt;a href=&quot;http://www.python3statement.org&quot; rel=&quot;nofollow&quot;&gt;stop supporting Python2&lt;/a&gt;. As for numpy, after 2018 any new feature releases will only support &lt;a href=&quot;https://github.com/numpy/numpy/blob/master/doc/neps/dropping-python2.7-proposal.rst&quot;&gt;Python3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To make the transition less frustrating, I've collected a bunch of Python 3 features that you may find useful.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/9936046c7d691a3f6d74c2873e483332b7a0b20e/68747470733a2f2f75706c6f6164732e746f7074616c2e696f2f626c6f672f696d6167652f39323231362f746f7074616c2d626c6f672d696d6167652d313435373631383635393437322d62653266333830666533616164343133333334323765636435613165633563352e6a7067&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/9936046c7d691a3f6d74c2873e483332b7a0b20e/68747470733a2f2f75706c6f6164732e746f7074616c2e696f2f626c6f672f696d6167652f39323231362f746f7074616c2d626c6f672d696d6167652d313435373631383635393437322d62653266333830666533616164343133333334323765636435613165633563352e6a7067&quot; width=&quot;400&quot; data-canonical-src=&quot;https://uploads.toptal.io/blog/image/92216/toptal-blog-image-1457618659472-be2f380fe3aad41333427ecd5a1ec5c5.jpg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Image from &lt;a href=&quot;https://www.toptal.com/python/python-3-is-it-worth-the-switch&quot; rel=&quot;nofollow&quot;&gt;Dario Bertini post (toptal)&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Better paths handling with &lt;code&gt;pathlib&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pathlib&lt;/code&gt; is a default module in python3, that helps you to avoid tons of &lt;code&gt;os.path.join&lt;/code&gt;s:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; pathlib &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; Path

dataset &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;wiki_images&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
datasets_root &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; Path(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/path/to/datasets/&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)

train_path &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; datasets_root &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt; dataset &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;train&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
test_path &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; datasets_root &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt; dataset &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;test&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; image_path &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; train_path.iterdir():
    &lt;span class=&quot;pl-k&quot;&gt;with&lt;/span&gt; image_path.open() &lt;span class=&quot;pl-k&quot;&gt;as&lt;/span&gt; f: &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; note, open is a method of Path object&lt;/span&gt;
        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; do something with an image&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Previously it was always tempting to use string concatenation (concise, but obviously bad), now with &lt;code&gt;pathlib&lt;/code&gt; the code is safe, concise, and readable.&lt;/p&gt;
&lt;p&gt;Also &lt;code&gt;pathlib.Path&lt;/code&gt; has a bunch of methods and properties, that every python novice previously had to google:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
p.exists()
p.is_dir()
p.parts
p.with_name(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;sibling.png&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; only change the name, but keep the folder&lt;/span&gt;
p.with_suffix(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;.jpg&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; only change the extension, but keep the folder and the name&lt;/span&gt;
p.chmod(mode)
p.rmdir()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;pathlib&lt;/code&gt; should save you lots of time, please see &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html&quot; rel=&quot;nofollow&quot;&gt;docs&lt;/a&gt; and &lt;a href=&quot;https://pymotw.com/3/pathlib/&quot; rel=&quot;nofollow&quot;&gt;reference&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2&gt;Type hinting is now part of the language&lt;/h2&gt;
&lt;p&gt;Example of type hinting in pycharm:&lt;br/&gt;&lt;a href=&quot;https://github.com/arogozhnikov/python3_with_pleasure/blob/master/images/pycharm-type-hinting.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/arogozhnikov/python3_with_pleasure/raw/master/images/pycharm-type-hinting.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python is not just a language for small scripts anymore, data pipelines these days include numerous steps each involving different frameworks (and sometimes very different logic).&lt;/p&gt;
&lt;p&gt;Type hinting was introduced to help with growing complexity of programs, so machines could help with code verification. Previously different modules used custom ways to point &lt;a href=&quot;https://www.jetbrains.com/help/pycharm/type-hinting-in-pycharm.html#legacy&quot; rel=&quot;nofollow&quot;&gt;types in doctrings&lt;/a&gt; (Hint: pycharm can convert old docstrings to fresh typehinting).&lt;/p&gt;
&lt;p&gt;As a simple example, the following code may work with different types of data (that's what we like about python data stack).&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;repeat_each_entry&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;):
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&quot;&quot;&lt;/span&gt; Each entry in the data is doubled&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    &amp;lt;blah blah nobody reads the documentation till the end&amp;gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    &lt;span class=&quot;pl-pds&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;
    index &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; numpy.repeat(numpy.arange(&lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(data)), &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;)
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; data[index]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code e.g. works for &lt;code&gt;numpy.array&lt;/code&gt; (incl. multidimensional ones), &lt;code&gt;astropy.Table&lt;/code&gt; and &lt;code&gt;astropy.Column&lt;/code&gt;, &lt;code&gt;bcolz&lt;/code&gt;, &lt;code&gt;cupy&lt;/code&gt;, &lt;code&gt;mxnet.ndarray&lt;/code&gt; and others.&lt;/p&gt;
&lt;p&gt;This code will work for &lt;code&gt;pandas.Series&lt;/code&gt;, but in the wrong way:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
repeat_each_entry(pandas.Series(&lt;span class=&quot;pl-v&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;], &lt;span class=&quot;pl-v&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;])) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; returns Series with Nones inside&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was two lines of code. Imagine how unpredictable behavior of a complex system, because just one function may misbehave. Stating explicitly which types a method expects is very helpful in large systems, this will warn you if a function was passed unexpected arguments.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;repeat_each_entry&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;: Union[numpy.ndarray, bcolz.carray]):
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you have a significant codebase, hinting tools like &lt;a href=&quot;http://mypy.readthedocs.io&quot; rel=&quot;nofollow&quot;&gt;MyPy&lt;/a&gt; are likely to become part of your continuous integration pipeline. A webinar &lt;a href=&quot;https://www.youtube.com/watch?v=JqBCFfiE11g&quot; rel=&quot;nofollow&quot;&gt;&quot;Putting Type Hints to Work&quot;&lt;/a&gt; by Daniel Pyrathon is good for a brief introduction.&lt;/p&gt;
&lt;p&gt;Sidenote: unfortunately, hinting is not yet powerful enough to provide fine-grained typing for ndarrays/tensors, but &lt;a href=&quot;https://github.com/numpy/numpy/issues/7370&quot;&gt;maybe we'll have it once&lt;/a&gt;, and this will be a great feature for DS.&lt;/p&gt;
&lt;h2&gt;Type hinting → type checking in runtime&lt;/h2&gt;
&lt;p&gt;By default, function annotations do not influence how your code is working, but merely help you to point code intentions.&lt;/p&gt;
&lt;p&gt;However, you can enforce type checking in runtime with tools like ... &lt;a href=&quot;https://github.com/RussBaz/enforce&quot;&gt;enforce&lt;/a&gt;, this can help you in debugging (there are many cases when type hinting is not working).&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-en&quot;&gt;@enforce.runtime_validation&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;str&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;:
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(text)

foo(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Hi&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; ok&lt;/span&gt;
foo(&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;)    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; fails&lt;/span&gt;


&lt;span class=&quot;pl-en&quot;&gt;@enforce.runtime_validation&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;any2&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;: List[&lt;span class=&quot;pl-c1&quot;&gt;bool&lt;/span&gt;]) -&amp;gt; &lt;span class=&quot;pl-c1&quot;&gt;bool&lt;/span&gt;:
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;any&lt;/span&gt;(x)

&lt;span class=&quot;pl-c1&quot;&gt;any&lt;/span&gt; ([&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;]) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; True&lt;/span&gt;
any2([&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;]) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; True&lt;/span&gt;

&lt;span class=&quot;pl-c1&quot;&gt;any&lt;/span&gt; ([&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;False&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; True&lt;/span&gt;
any2([&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;False&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; fails&lt;/span&gt;

&lt;span class=&quot;pl-c1&quot;&gt;any&lt;/span&gt; ([&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; False&lt;/span&gt;
any2([&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; fails&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Other usages of function annotations&lt;/h2&gt;
&lt;p&gt;As mentioned before, annotations do not influence code execution, but rather provide some meta-information, and you can use it as you wish.&lt;/p&gt;
&lt;p&gt;For instance, measurement units are a common pain in scientific areas, &lt;code&gt;astropy&lt;/code&gt; package &lt;a href=&quot;http://docs.astropy.org/en/stable/units/quantity.html#functions-that-accept-quantities&quot; rel=&quot;nofollow&quot;&gt;provides a simple decorator&lt;/a&gt; to control units of input quantities and convert output to required units&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 3&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; astropy &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; units &lt;span class=&quot;pl-k&quot;&gt;as&lt;/span&gt; u
&lt;span class=&quot;pl-en&quot;&gt;@u.quantity_input&lt;/span&gt;()
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;frequency&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;speed&lt;/span&gt;: u.meter &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt; u.s, &lt;span class=&quot;pl-smi&quot;&gt;wavelength&lt;/span&gt;: u.m) -&amp;gt; u.terahertz:
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; speed &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt; wavelength

frequency(&lt;span class=&quot;pl-v&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;300_000&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt; u.km &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt; u.s, &lt;span class=&quot;pl-v&quot;&gt;wavelength&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;555&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt; u.nm)
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; output: 540.5405405405404 THz, frequency of green visible light&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you're processing tabular scientific data in python (not necessarily astronomical), you should give &lt;code&gt;astropy&lt;/code&gt; a shot.&lt;/p&gt;
&lt;p&gt;You can also define your application-specific decorators to perform control / conversion of inputs and output in the same manner.&lt;/p&gt;
&lt;h2&gt;Matrix multiplication with @&lt;/h2&gt;
&lt;p&gt;Let's implement one of the simplest ML models — a linear regression with l2 regularization (a.k.a. ridge regression):&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; l2-regularized linear regression: || AX - b ||^2 + alpha * ||x||^2 -&amp;gt; min&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 2&lt;/span&gt;
X &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; np.linalg.inv(np.dot(A.T, A) &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; alpha &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt; np.eye(A.shape[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;])).dot(A.T.dot(b))
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 3&lt;/span&gt;
X &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; np.linalg.inv(A.T &lt;span class=&quot;pl-k&quot;&gt;@&lt;/span&gt; A &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; alpha &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt; np.eye(A.shape[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;])) &lt;span class=&quot;pl-k&quot;&gt;@&lt;/span&gt; (A.T &lt;span class=&quot;pl-k&quot;&gt;@&lt;/span&gt; b)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code with &lt;code&gt;@&lt;/code&gt; becomes more readable and more translatable between deep learning frameworks: same code &lt;code&gt;X @ W + b[None, :]&lt;/code&gt; for a single layer of perceptron works in &lt;code&gt;numpy&lt;/code&gt;, &lt;code&gt;cupy&lt;/code&gt;, &lt;code&gt;pytorch&lt;/code&gt;, &lt;code&gt;tensorflow&lt;/code&gt; (and other frameworks that operate with tensors).&lt;/p&gt;
&lt;h2&gt;Globbing with &lt;code&gt;**&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Recursive folder globbing is not easy in Python 2, even though the &lt;a href=&quot;https://github.com/miracle2k/python-glob2&quot;&gt;glob2&lt;/a&gt; custom module exists that overcomes this. A recursive flag is supported since Python 3.5:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; glob

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 2&lt;/span&gt;
found_images &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; \
    glob.glob(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/path/*.jpg&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) \
  &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; glob.glob(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/path/*/*.jpg&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) \
  &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; glob.glob(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/path/*/*/*.jpg&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) \
  &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; glob.glob(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/path/*/*/*/*.jpg&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) \
  &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; glob.glob(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/path/*/*/*/*/*.jpg&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 3&lt;/span&gt;
found_images &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; glob.glob(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/path/**/*.jpg&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;recursive&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A better option is to use &lt;code&gt;pathlib&lt;/code&gt; in python3 (minus one import!):&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 3&lt;/span&gt;
found_images &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; pathlib.Path(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/path/&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).glob(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;**/*.jpg&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Print is a function now&lt;/h2&gt;
&lt;p&gt;Yes, code now has these annoying parentheses, but there are some advantages:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;simple syntax for using file descriptor:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;sys.stderr, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;critical error&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;      &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 2&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;critical error&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;sys.stderr)  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;printing tab-aligned tables without &lt;code&gt;str.join&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 3&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;array, &lt;span class=&quot;pl-v&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(batch, epoch, loss, accuracy, time, &lt;span class=&quot;pl-v&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hacky suppressing / redirection of printing output:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 3&lt;/span&gt;
_print &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; store the original print function&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;args&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;kargs&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;pass&lt;/span&gt;  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; do something useful, e.g. store output to some file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In jupyter it is desirable to log each output to a separate file (to track what's happening after you got disconnected), so you can override &lt;code&gt;print&lt;/code&gt; now.&lt;/p&gt;
&lt;p&gt;Below you can see a context manager that temporarily overrides behavior of print:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-en&quot;&gt;@contextlib.contextmanager&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;replace_print&lt;/span&gt;():
    &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; builtins
    _print &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; saving old print function&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; or use some other function here&lt;/span&gt;
    builtins.print &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;args&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;kwargs&lt;/span&gt;: _print(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;new printing&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;args, &lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt;kwargs)
    &lt;span class=&quot;pl-k&quot;&gt;yield&lt;/span&gt;
    builtins.print &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; _print

&lt;span class=&quot;pl-k&quot;&gt;with&lt;/span&gt; replace_print():
    &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;code here will invoke other &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt; function&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is &lt;em&gt;not&lt;/em&gt; a recommended approach, but a small dirty hack that is now possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;print&lt;/code&gt; can participate in list comprehensions and other language constructs&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 3&lt;/span&gt;
result &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; process(x) &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; is_valid(x) &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;invalid item: &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, x)
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Underscores in Numeric Literal (Thousands Seperator)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0515/&quot; title=&quot;PEP-515&quot; rel=&quot;nofollow&quot;&gt;PEP-515&lt;/a&gt; introduced underscores in Numeric Literals. In Python3, underscores can be used to group digits visually in integral, floating-point, and complex number literals.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; grouping decimal numbers by thousands&lt;/span&gt;
one_million &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1_000_000&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; grouping hexadecimal addresses by words&lt;/span&gt;
addr &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;0x&lt;/span&gt;CAFE_F00D&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; grouping bits into nibbles in a binary literal&lt;/span&gt;
flags &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;0b&lt;/span&gt;_0011_1111_0100_1110&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; same, for string conversions&lt;/span&gt;
flags &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;0b_1111_0000&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;f-strings for simple and reliable formatting&lt;/h2&gt;
&lt;p&gt;The default formatting system provides a flexibility that is not required in data experiments. The resulting code is either too verbose or too fragile towards any changes.&lt;/p&gt;
&lt;p&gt;Quite typically data scientists outputs some logging information iteratively in a fixed format. It is common to have a code like:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 2&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;{batch&lt;span class=&quot;pl-k&quot;&gt;:3&lt;/span&gt;}&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;{epoch&lt;span class=&quot;pl-k&quot;&gt;:3&lt;/span&gt;}&lt;/span&gt; / &lt;span class=&quot;pl-c1&quot;&gt;{total_epochs&lt;span class=&quot;pl-k&quot;&gt;:3&lt;/span&gt;}&lt;/span&gt;  accuracy: &lt;span class=&quot;pl-c1&quot;&gt;{acc_mean&lt;span class=&quot;pl-k&quot;&gt;:0.4f&lt;/span&gt;}&lt;/span&gt;±&lt;span class=&quot;pl-c1&quot;&gt;{acc_std&lt;span class=&quot;pl-k&quot;&gt;:0.4f&lt;/span&gt;}&lt;/span&gt; time: &lt;span class=&quot;pl-c1&quot;&gt;{avg_time&lt;span class=&quot;pl-k&quot;&gt;:3.2f&lt;/span&gt;}&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;.format(
    &lt;span class=&quot;pl-v&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;batch, &lt;span class=&quot;pl-v&quot;&gt;epoch&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;epoch, &lt;span class=&quot;pl-v&quot;&gt;total_epochs&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;total_epochs,
    &lt;span class=&quot;pl-v&quot;&gt;acc_mean&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;numpy.mean(accuracies), &lt;span class=&quot;pl-v&quot;&gt;acc_std&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;numpy.std(accuracies),
    &lt;span class=&quot;pl-v&quot;&gt;avg_time&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;time &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(data_batch)
))

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 2 (too error-prone during fast modifications, please avoid):&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;{&lt;span class=&quot;pl-k&quot;&gt;:3&lt;/span&gt;}&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;{&lt;span class=&quot;pl-k&quot;&gt;:3&lt;/span&gt;}&lt;/span&gt; / &lt;span class=&quot;pl-c1&quot;&gt;{&lt;span class=&quot;pl-k&quot;&gt;:3&lt;/span&gt;}&lt;/span&gt;  accuracy: &lt;span class=&quot;pl-c1&quot;&gt;{&lt;span class=&quot;pl-k&quot;&gt;:0.4f&lt;/span&gt;}&lt;/span&gt;±&lt;span class=&quot;pl-c1&quot;&gt;{&lt;span class=&quot;pl-k&quot;&gt;:0.4f&lt;/span&gt;}&lt;/span&gt; time: &lt;span class=&quot;pl-c1&quot;&gt;{&lt;span class=&quot;pl-k&quot;&gt;:3.2f&lt;/span&gt;}&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;.format(
    batch, epoch, total_epochs, numpy.mean(accuracies), numpy.std(accuracies),
    time &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(data_batch)
))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sample output:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;120  12 / 300  accuracy: 0.8180±0.4649 time: 56.60
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;f-strings&lt;/strong&gt; aka formatted string literals were introduced in Python 3.6:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 3.6+&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;{&lt;/span&gt;batch&lt;span class=&quot;pl-k&quot;&gt;:3&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;{&lt;/span&gt;epoch&lt;span class=&quot;pl-k&quot;&gt;:3&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt; / &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;{&lt;/span&gt;total_epochs&lt;span class=&quot;pl-k&quot;&gt;:3&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;  accuracy: &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;{&lt;/span&gt;numpy.mean(accuracies)&lt;span class=&quot;pl-k&quot;&gt;:0.4f&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;±&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;{&lt;/span&gt;numpy.std(accuracies)&lt;span class=&quot;pl-k&quot;&gt;:0.4f&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt; time: &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;{&lt;/span&gt;time &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(data_batch)&lt;span class=&quot;pl-k&quot;&gt;:3.2f&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Explicit difference between 'true division' and 'integer division'&lt;/h2&gt;
&lt;p&gt;For data science this is definitely a handy change (but not for system programming, I believe)&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
data &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; pandas.read_csv(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;timing.csv&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
velocity &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; data[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;distance&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt; data[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;time&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Results in Python 2 depend on whether 'time' and 'distance' (e.g. measured in meters and seconds) are stored as integers. In Python 3, the result is correct in both cases, because the result of division is float.&lt;/p&gt;
&lt;p&gt;Another case is integer division, which is now an explicit operation:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
n_gifts &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; money &lt;span class=&quot;pl-k&quot;&gt;//&lt;/span&gt; gift_price  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; correct for int and float arguments&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note, that this applies both to built-in types and to custom types provided by data packages (e.g. &lt;code&gt;numpy&lt;/code&gt; or &lt;code&gt;pandas&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;Strict ordering&lt;/h2&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; All these comparisons are illegal in Python 3&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;3&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;
(&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;)
(&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;]

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; False in both Python 2 and Python 3&lt;/span&gt;
(&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;prevents from occasional sorting of instances of different types
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;sorted&lt;/span&gt;([&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;])  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; invalid for Python 3, in Python 2 returns [2, 3, '1']&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;helps to spot some problems that arise when processing raw data&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Sidenote: proper check for None is (in both Python versions)&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;:
  &lt;span class=&quot;pl-k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; a: &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; WRONG check for None&lt;/span&gt;
  &lt;span class=&quot;pl-k&quot;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Unicode for NLP&lt;/h2&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
s &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;您好&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(s))
&lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(s[:&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Python 2: &lt;code&gt;6\n��&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Python 3: &lt;code&gt;2\n您好&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;x = u'со'
x += 'co' # ok
x += 'со' # fail
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Python 2 fails, Python 3 works as expected (because I've used russian letters in strings).&lt;/p&gt;
&lt;p&gt;In Python 3 &lt;code&gt;str&lt;/code&gt;s are unicode strings, and it is more convenient for NLP processing of non-english texts.&lt;/p&gt;
&lt;p&gt;There are other funny things, for instance:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 2: True&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;         &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 2: False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; Counter
Counter(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Möbelstück&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Python 2: &lt;code&gt;Counter({'\xc3': 2, 'b': 1, 'e': 1, 'c': 1, 'k': 1, 'M': 1, 'l': 1, 's': 1, 't': 1, '\xb6': 1, '\xbc': 1})&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Python 3: &lt;code&gt;Counter({'M': 1, 'ö': 1, 'b': 1, 'e': 1, 'l': 1, 's': 1, 't': 1, 'ü': 1, 'c': 1, 'k': 1})&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;You can handle all of this in Python 2 properly, but Python 3 is more friendly.&lt;/p&gt;
&lt;h2&gt;Preserving order of dictionaries and **kwargs&lt;/h2&gt;
&lt;p&gt;In CPython 3.6+ dicts behave like &lt;code&gt;OrderedDict&lt;/code&gt; by default (and &lt;a href=&quot;https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6&quot; rel=&quot;nofollow&quot;&gt;this is guaranteed in Python 3.7+&lt;/a&gt;). This preserves order during dict comprehensions (and other operations, e.g. during json serialization/deserialization)&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; json
x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;pl-c1&quot;&gt;str&lt;/span&gt;(i):i &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;)}
json.loads(json.dumps(x))
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 2&lt;/span&gt;
{&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;0&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;3&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;2&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;4&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;}
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 3&lt;/span&gt;
{&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;0&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;2&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;3&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;4&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Same applies to &lt;code&gt;**kwargs&lt;/code&gt; (in Python 3.6+), they're kept in the same order as they appear in parameters. Order is crucial when it comes to data pipelines, previously we had to write it in a cumbersome manner:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from torch import nn

# Python 2
model = nn.Sequential(OrderedDict([
          ('conv1', nn.Conv2d(1,20,5)),
          ('relu1', nn.ReLU()),
          ('conv2', nn.Conv2d(20,64,5)),
          ('relu2', nn.ReLU())
        ]))

# Python 3.6+, how it *can* be done, not supported right now in pytorch
model = nn.Sequential(
    conv1=nn.Conv2d(1,20,5),
    relu1=nn.ReLU(),
    conv2=nn.Conv2d(20,64,5),
    relu2=nn.ReLU())
)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Did you notice? Uniqueness of names is also checked automatically.&lt;/p&gt;
&lt;h2&gt;Iterable unpacking&lt;/h2&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; handy when amount of additional stored info may vary between experiments, but the same code can be used in all cases&lt;/span&gt;
model_paramteres, optimizer_parameters, &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;other_params &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; load(checkpoint_name)

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; picking two last values from a sequence&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;prev, next_to_last, last &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; values_history

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; This also works with any iterables, so if you have a function that yields e.g. qualities,&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; below is a simple way to take only last two values from a list&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;prev, next_to_last, last &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; iter_train(args)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Default pickle engine provides better compression for arrays&lt;/h2&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 2&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; cPickle &lt;span class=&quot;pl-k&quot;&gt;as&lt;/span&gt; pickle
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; numpy
&lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(pickle.dumps(numpy.random.normal(&lt;span class=&quot;pl-v&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt;])))
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; result: 23691675&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 3&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; pickle
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; numpy
&lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(pickle.dumps(numpy.random.normal(&lt;span class=&quot;pl-v&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt;])))
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; result: 8000162&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Three times less space. And it is &lt;em&gt;much&lt;/em&gt; faster. Actually similar compression (but not speed) is achievable with &lt;code&gt;protocol=2&lt;/code&gt; parameter, but users typically ignore this option (or simply are not aware of it).&lt;/p&gt;
&lt;h2&gt;Safer comprehensions&lt;/h2&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
labels &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;initial_value&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
predictions &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [model.predict(data) &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; data, labels &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; dataset]

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; labels are overwritten in Python 2&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; labels are not affected by comprehension in Python 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Super, simply super()&lt;/h2&gt;
&lt;p&gt;Python 2 &lt;code&gt;super(...)&lt;/code&gt; was a frequent source of mistakes in code.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 2&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;MySubClass&lt;/span&gt;(&lt;span class=&quot;pl-e&quot;&gt;MySuperClass&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;&lt;span class=&quot;pl-smi&quot;&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;name&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;options&lt;/span&gt;):
        &lt;span class=&quot;pl-c1&quot;&gt;super&lt;/span&gt;(MySubClass, &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;).&lt;span class=&quot;pl-c1&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;subclass&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt;options)

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 3&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;MySubClass&lt;/span&gt;(&lt;span class=&quot;pl-e&quot;&gt;MySuperClass&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;&lt;span class=&quot;pl-smi&quot;&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;name&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;options&lt;/span&gt;):
        &lt;span class=&quot;pl-c1&quot;&gt;super&lt;/span&gt;().&lt;span class=&quot;pl-c1&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;subclass&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt;options)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More on &lt;code&gt;super&lt;/code&gt; and method resolution order on &lt;a href=&quot;https://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods&quot; rel=&quot;nofollow&quot;&gt;stackoverflow&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Better IDE suggestions with variable annotations&lt;/h2&gt;
&lt;p&gt;The most enjoyable thing about programming in languages like Java, C# and alike is that IDE can make very good suggestions, because type of each identifier is known before executing a program.&lt;/p&gt;
&lt;p&gt;In python this is hard to achieve, but annotations will help you&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;write your expectations in a clear form&lt;/li&gt;
&lt;li&gt;and get good suggestions from IDE&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/arogozhnikov/python3_with_pleasure/blob/master/images/variable_annotations.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/arogozhnikov/python3_with_pleasure/raw/master/images/variable_annotations.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;This is an example of PyCharm suggestions with variable annotations. This works even in situations when functions you use are not annotated (e.g. due to backward compatibility).&lt;/p&gt;
&lt;h2&gt;Multiple unpacking&lt;/h2&gt;
&lt;p&gt;Here is how you merge two dicts now:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;)
y &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;)
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 3.5+&lt;/span&gt;
z &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt;x, &lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt;y}
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; z = {'a': 1, 'b': 3, 'd': 4}, note that value for `b` is taken from the latter dict.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href=&quot;https://stackoverflow.com/questions/38987/how-to-merge-two-dictionaries-in-a-single-expression&quot; rel=&quot;nofollow&quot;&gt;this thread at StackOverflow&lt;/a&gt; for a comparison with Python 2.&lt;/p&gt;
&lt;p&gt;The same approach also works for lists, tuples, and sets (&lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt; are any iterables):&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
[&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;a, &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;b, &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;c] &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; list, concatenating&lt;/span&gt;
(&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;a, &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;b, &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;c) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; tuple, concatenating&lt;/span&gt;
{&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;a, &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;b, &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;c} &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; set, union&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Functions also &lt;a href=&quot;https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-448&quot; rel=&quot;nofollow&quot;&gt;support this&lt;/a&gt; for &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Python 3.5+
do_something(**{**default_settings, **custom_settings})

# Also possible, this code also checks there is no intersection between keys of dictionaries
do_something(**first_args, **second_args)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Future-proof APIs with keyword-only arguments&lt;/h2&gt;
&lt;p&gt;Let's consider this snippet&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
model &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; sklearn.svm.SVC(&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;poly&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.5&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Obviously, an author of this code didn't get the Python style of coding yet (most probably, just jumped from cpp or rust). Unfortunately, this is not just question of taste, because changing the order of arguments (adding/deleting) in &lt;code&gt;SVC&lt;/code&gt; will break this code. In particular, &lt;code&gt;sklearn&lt;/code&gt; does some reordering/renaming from time to time of numerous algorithm parameters to provide consistent API. Each such refactoring may drive to broken code.&lt;/p&gt;
&lt;p&gt;In Python 3, library authors may demand explicitly named parameters by using &lt;code&gt;*&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class SVC(BaseSVC):
    def __init__(self, *, C=1.0, kernel='rbf', degree=3, gamma='auto', coef0=0.0, ... )
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;users have to specify names of parameters &lt;code&gt;sklearn.svm.SVC(C=2, kernel='poly', degree=2, gamma=4, coef0=0.5)&lt;/code&gt; now&lt;/li&gt;
&lt;li&gt;this mechanism provides a great combination of reliability and flexibility of APIs&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Minor: constants in &lt;code&gt;math&lt;/code&gt; module&lt;/h2&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python 3&lt;/span&gt;
math.inf &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; 'largest' number&lt;/span&gt;
math.nan &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; not a number&lt;/span&gt;

max_quality &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;math.inf  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; no more magic initial values!&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; model &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; trained_models:
    max_quality &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;max&lt;/span&gt;(max_quality, compute_quality(model, data))
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Minor: single integer type&lt;/h2&gt;
&lt;p&gt;Python 2 provides two basic integer types, which are &lt;code&gt;int&lt;/code&gt; (64-bit signed integer) and &lt;code&gt;long&lt;/code&gt; for long arithmetics (quite confusing after C++).&lt;/p&gt;
&lt;p&gt;Python 3 has a single type &lt;code&gt;int&lt;/code&gt;, which incorporates long arithmetics.&lt;/p&gt;
&lt;p&gt;Here is how you check that value is integer:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;isinstance(x, numbers.Integral) # Python 2, the canonical way
isinstance(x, (long, int))      # Python 2
isinstance(x, int)              # Python 3, easier to remember
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Other stuff&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Enum&lt;/code&gt;s are theoretically useful, but
&lt;ul&gt;&lt;li&gt;string-typing is already widely adopted in the python data stack&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Enum&lt;/code&gt;s don't seem to interplay with numpy and categorical from pandas&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;coroutines also &lt;em&gt;sound&lt;/em&gt; very promising for data pipelining (see &lt;a href=&quot;http://www.dabeaz.com/coroutines/Coroutines.pdf&quot; rel=&quot;nofollow&quot;&gt;slides&lt;/a&gt; by David Beazley), but I don't see their adoption in the wild.&lt;/li&gt;
&lt;li&gt;Python 3 has &lt;a href=&quot;https://www.python.org/dev/peps/pep-0384/&quot; rel=&quot;nofollow&quot;&gt;stable ABI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python 3 supports unicode identifies (so &lt;code&gt;ω = Δφ / Δt&lt;/code&gt; is ok), but you'd &lt;a href=&quot;https://stackoverflow.com/a/29855176/498892&quot; rel=&quot;nofollow&quot;&gt;better use good old ASCII names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;some libraries e.g. &lt;a href=&quot;https://github.com/jupyterhub/jupyterhub&quot;&gt;jupyterhub&lt;/a&gt; (jupyter in cloud), django and fresh ipython only support Python 3, so features that sound useless for you are useful for libraries you'll probably want to use once.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Problems for code migration specific for data science (and how to resolve those)&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;support for nested arguments &lt;a href=&quot;https://www.python.org/dev/peps/pep-3113/&quot; rel=&quot;nofollow&quot;&gt;was dropped&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;map(lambda x, (y, z): x, z, dict.items())
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, it is still perfectly working with different comprehensions:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
{x:z &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; x, (y, z) &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; d.items()}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In general, comprehensions are also better 'translatable' between Python 2 and 3.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;map()&lt;/code&gt;, &lt;code&gt;.keys()&lt;/code&gt;, &lt;code&gt;.values()&lt;/code&gt;, &lt;code&gt;.items()&lt;/code&gt;, etc. return iterators, not lists. Main problems with iterators are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;no trivial slicing&lt;/li&gt;
&lt;li&gt;can't be iterated twice&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Almost all of the problems are resolved by converting result to list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;see &lt;a href=&quot;https://eev.ee/blog/2016/07/31/python-faq-how-do-i-port-to-python-3/&quot; rel=&quot;nofollow&quot;&gt;Python FAQ: How do I port to Python 3?&lt;/a&gt; when in trouble&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Main problems for teaching machine learning and data science with python&lt;/h3&gt;
&lt;p&gt;Course authors should spend time in the first lectures to explain what is an iterator, why it can't be sliced / concatenated / multiplied / iterated twice like a string (and how to deal with it).&lt;/p&gt;
&lt;p&gt;I think most course authors would be happy to avoid these details, but now it is hardly possible.&lt;/p&gt;

&lt;p&gt;Python 2 and Python 3 have co-existed for almost 10 years, but we &lt;em&gt;should&lt;/em&gt; move to Python 3.&lt;/p&gt;
&lt;p&gt;Research and production code should become a bit shorter, more readable, and significantly safer after moving to Python 3-only codebase.&lt;/p&gt;
&lt;p&gt;Right now most libraries support both Python versions. And I can't wait for the bright moment when packages drop support for Python 2 and enjoy new language features.&lt;/p&gt;
&lt;p&gt;Following migrations are promised to be smoother: &lt;a href=&quot;https://snarky.ca/why-python-3-exists/&quot; rel=&quot;nofollow&quot;&gt;&quot;we will never do this kind of backwards-incompatible change again&quot;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Links&lt;/h3&gt;
&lt;h3&gt;License&lt;/h3&gt;
&lt;p&gt;This text was published by &lt;a href=&quot;https://arogozhnikov.github.io/about/&quot; rel=&quot;nofollow&quot;&gt;Alex Rogozhnikov&lt;/a&gt; under &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/3.0/&quot; rel=&quot;nofollow&quot;&gt;CC BY-SA 3.0 License&lt;/a&gt; (excluding images).&lt;/p&gt;
&lt;/article&gt;</description>
<pubDate>Sun, 04 Feb 2018 21:00:04 +0000</pubDate>
<dc:creator>arogozhnikov</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/6318811?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>arogozhnikov/python3_with_pleasure</og:title>
<og:url>https://github.com/arogozhnikov/python3_with_pleasure</og:url>
<og:description>python3_with_pleasure - A short guide on features of Python 3</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/arogozhnikov/python3_with_pleasure</dc:identifier>
</item>
<item>
<title>LLVM for Grad Students (2015)</title>
<link>http://www.cs.cornell.edu/~asampson/blog/llvm.html</link>
<guid isPermaLink="true" >http://www.cs.cornell.edu/~asampson/blog/llvm.html</guid>
<description>&lt;p&gt;This is an introduction to doing research with the &lt;a href=&quot;http://llvm.org/&quot;&gt;LLVM&lt;/a&gt; compiler infrastructure. It should be enough for a grad student to go from &lt;em&gt;mostly uninterested in compilers&lt;/em&gt; to &lt;em&gt;excited to use LLVM to do great work&lt;/em&gt;.&lt;/p&gt;&lt;h2 id=&quot;what-is-llvm&quot;&gt;What is LLVM?&lt;/h2&gt;
&lt;p&gt;LLVM is a compiler. It’s a &lt;em&gt;really nice&lt;/em&gt;, hackable, ahead-of-time compiler for “native” languages like C and C++.&lt;/p&gt;
&lt;p&gt;Of course, since LLVM is so awesome, you will also hear that it is much more than this (it can also be a JIT; it powers a great diversity of un-C-like languages; it is &lt;a href=&quot;https://developer.apple.com/library/prerelease/watchos/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35-SW2&quot;&gt;the new delivery format for the App Store&lt;/a&gt;; etc.; etc.). These are all true, but for our purposes, the above definition is what matters.&lt;/p&gt;
&lt;p&gt;A few huge things make LLVM different from other compilers:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;LLVM’s intermediate representation (IR) is its great innovation. LLVM works on a representation of programs that you can &lt;em&gt;actually read&lt;/em&gt; if you can read assembly. This may not seem like a great revelation, but it is: other compilers’ IRs tend to be in-memory structures so complicated that you can’t really write them down. This makes other compilers harder to understand and messier to implement.&lt;/li&gt;
&lt;li&gt;LLVM is nicely written: its architecture is &lt;em&gt;way&lt;/em&gt; more modular than other compilers. Part of the reason for this niceness comes from its original implementor, who is &lt;a href=&quot;http://nondot.org/sabre/&quot;&gt;one of us&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Despite being the &lt;a href=&quot;http://awards.acm.org/award_winners/lattner_5074762.cfm&quot;&gt;research tool of choice&lt;/a&gt; for squirrelly academic hackers like us, LLVM is also an industrial-strength compiler backed by the largest company on Earth. This means you don’t have to compromise between a &lt;em&gt;great&lt;/em&gt; compiler and a &lt;em&gt;hackable&lt;/em&gt; compiler, as you do in Javaland when you choose between &lt;a href=&quot;http://java.com/en/download/&quot;&gt;HotSpot&lt;/a&gt; and &lt;a href=&quot;http://www.jikesrvm.org/&quot;&gt;Jikes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;why-would-a-grad-student-care-about-llvm&quot;&gt;Why Would a Grad Student Care About LLVM?&lt;/h2&gt;
&lt;p&gt;LLVM is a great compiler, but who cares if you don’t do compilers research?&lt;/p&gt;
&lt;p&gt;A compiler infrastructure is useful whenever you need to &lt;em&gt;do stuff with programs&lt;/em&gt;. Which, in my experience, is a lot. You can analyze programs to see how often they do something, transform them to work better with your system, or change them to pretend to use your hypothetical new architecture or OS without actually fabbing a new chip or writing a kernel module. For grad students, a compiler infrastructure is more often the right tool than most people give it credit for. I encourage you to reach for LLVM by default before hacking any of these tools unless you have a really good reason:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;an &lt;a href=&quot;http://research.cs.wisc.edu/vertical/papers/2014/wddd-sim-harmful.pdf&quot;&gt;architectural simulator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;a dynamic binary instrumentation tool like &lt;a href=&quot;http://www.pintool.org/&quot;&gt;Pin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source-level transformation (from simple stuff like &lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt; to more complete tools involving AST parsing and serialization)&lt;/li&gt;
&lt;li&gt;hacking the kernel to intercept system calls&lt;/li&gt;
&lt;li&gt;anything resembling a hypervisor&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Even if a compiler doesn’t seem like a &lt;em&gt;perfect&lt;/em&gt; match for your task, it can often get you 90% of the way there far easier than, say, a source-to-source translation.&lt;/p&gt;
&lt;p&gt;Here are some nifty examples of research projects that used LLVM to do things that are not all that compilery:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://sva.cs.illinois.edu/pubs/VirtualGhost-ASPLOS-2014.pdf&quot;&gt;Virtual Ghost&lt;/a&gt; from UIUC showed you could use a compiler pass to protect processes from compromised OS kernels.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://homes.cs.washington.edu/~djg/papers/asplos10-coredet.pdf&quot;&gt;CoreDet&lt;/a&gt; from UW makes multithreaded programs deterministic.&lt;/li&gt;
&lt;li&gt;In our approximate computing work, we use an LLVM pass to inject errors into programs to simulate error-prone hardware.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I’ll reemphasize: LLVM is not just for implementing new compiler optimizations!&lt;/p&gt;
&lt;h2 id=&quot;the-pieces&quot;&gt;The Pieces&lt;/h2&gt;
&lt;p&gt;Here’s a picture that shows the major components of LLVM’s architecture (and, really, the architecture of any modern compiler):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.cs.cornell.edu/~asampson/media/llvm/compiler-arch.svg&quot; alt=&quot;Front End, Passes, Back End&quot; class=&quot;img-responsive&quot;/&gt;&lt;/p&gt;
&lt;p&gt;There are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;em&gt;front end&lt;/em&gt;, which takes your source code and turns it into an &lt;em&gt;intermediate representation&lt;/em&gt; or IR. This translation simplifies the job of the rest of the compiler, which doesn’t want to deal with the full complexity of C++ source code. You, an intrepid grad student, probably do not need to hack this part; you can use &lt;a href=&quot;http://clang.llvm.org/&quot;&gt;Clang&lt;/a&gt; unmodified.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;passes&lt;/em&gt;, which transform IR to IR. In ordinary circumstances, passes usually optimize the code: that is, they produce an IR program as output that does the same thing as the IR they took as input, except that it’s faster. &lt;em&gt;This is where you want to hack.&lt;/em&gt; Your research tool can work by looking at and changing IR as it flows through the compilation process.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;back end&lt;/em&gt;, which generates actual machine code. You almost certainly don’t need to touch this part.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Although this architecture describes most compilers these days, one novelty about LLVM is worth noting here: programs use &lt;em&gt;the same IR&lt;/em&gt; throughout the process. In other compilers, each pass might produce code in a unique form. LLVM opts for the opposite approach, which is great for us as hackers: we don’t have to worry much about when in the process our code runs, as long as it’s somewhere between the front end and back end.&lt;/p&gt;
&lt;h2 id=&quot;getting-oriented&quot;&gt;Getting Oriented&lt;/h2&gt;
&lt;p&gt;Let’s start hacking.&lt;/p&gt;
&lt;h3 id=&quot;get-llvm&quot;&gt;Get LLVM&lt;/h3&gt;
&lt;p&gt;You’ll need to need to install LLVM. Linux distributions often have LLVM and Clang packages you can use off the shelf. But you’ll need to ensure you get a version that includes all the headers necessary to hack with it. The OS X build that comes with &lt;a href=&quot;https://developer.apple.com/xcode/&quot;&gt;Xcode&lt;/a&gt;, for example, is not complete enough. Fortunately, it’s not hard to &lt;a href=&quot;http://llvm.org/docs/CMake.html&quot;&gt;build LLVM from source&lt;/a&gt; using CMake. Usually, you only need to build LLVM itself: your system-provided Clang will do just fine as long as the versions match (although there are &lt;a href=&quot;http://clang.llvm.org/get_started.html&quot;&gt;instructions for building Clang&lt;/a&gt; too).&lt;/p&gt;
&lt;p&gt;On OS X in particular, &lt;a href=&quot;http://bholt.org&quot;&gt;Brandon Holt&lt;/a&gt; has &lt;a href=&quot;http://bholt.org/posts/building-llvm.html&quot;&gt;good instructions for doing it right&lt;/a&gt;. There’s also a &lt;a href=&quot;https://github.com/Homebrew/homebrew-core/blob/master/Formula/llvm.rb&quot;&gt;Homebrew formula&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;rtfm&quot;&gt;RTFM&lt;/h3&gt;
&lt;p&gt;You will need to get friendly with the documentation. I find these links in particular are worth coming back to:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;a href=&quot;http://llvm.org/doxygen/&quot;&gt;automatically generated Doxygen pages&lt;/a&gt; are &lt;em&gt;super important&lt;/em&gt;. You will need to live inside these API docs to make any progress at all while hacking on LLVM. Those pages can be hard to navigate, though, so I recommend going through Google. If you append “LLVM” to any function or class name, Google &lt;a href=&quot;https://google.com/search?q=basicblock+llvm&quot;&gt;usually finds the right Doxygen page&lt;/a&gt;. (If you’re diligent, you can even train Google to give you LLVM results first even without typing “LLVM”!) I realize this sounds ridiculous, but you really need to jump around LLVM’s API docs like this to survive—and if there’s a better way to navigate the API, I haven’t found it.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;http://llvm.org/docs/LangRef.html&quot;&gt;language reference manual&lt;/a&gt; is handy if you ever get confused by syntax in an LLVM IR dump.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;http://llvm.org/docs/ProgrammersManual.html&quot;&gt;programmer’s manual&lt;/a&gt; describes the toolchest of data structures peculiar to LLVM, including efficient strings, STL alternatives for maps and vectors, etc. It also outlines the fast type introspection tools (&lt;code class=&quot;highlighter-rouge&quot;&gt;isa&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cast&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;dyn_cast&lt;/code&gt;) that you’ll run into everywhere.&lt;/li&gt;
&lt;li&gt;Read the &lt;a href=&quot;http://llvm.org/docs/WritingAnLLVMPass.html&quot;&gt;&lt;em&gt;Writing an LLVM Pass&lt;/em&gt;&lt;/a&gt; tutorial whenever you have questions about what your pass can do. Because you’re a researcher and not a day-to-day compiler hacker, this article disagrees with that tutorial on some details. (Most urgently, ignore the Makefile-based build system instructions and skip straight to the CMake-based &lt;a href=&quot;http://llvm.org/docs/CMake.html#cmake-out-of-source-pass&quot;&gt;“out-of-source” instructions&lt;/a&gt;.) But it’s nonetheless the canonical source for answers about passes in general.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://github.com/llvm-mirror/llvm&quot;&gt;GitHub mirror&lt;/a&gt; is sometimes convenient for browsing the LLVM source online.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;lets-write-a-pass&quot;&gt;Let’s Write a Pass&lt;/h2&gt;
&lt;p&gt;Productive research with LLVM usually means writing a custom pass. This section will guide you through building and running a simple pass that transforms programs on the fly.&lt;/p&gt;
&lt;h3 id=&quot;a-skeleton&quot;&gt;A Skeleton&lt;/h3&gt;
&lt;p&gt;I’ve put together a &lt;a href=&quot;https://github.com/sampsyo/llvm-pass-skeleton&quot;&gt;template repository&lt;/a&gt; that contains a useless LLVM pass. I recommend you start with the template: when starting from scratch, getting the build configuration set up can be painful.&lt;/p&gt;
&lt;p&gt;Clone the &lt;a href=&quot;https://github.com/sampsyo/llvm-pass-skeleton&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-pass-skeleton&lt;/code&gt; repository&lt;/a&gt; from GitHub:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;$ git clone https://github.com/sampsyo/llvm-pass-skeleton.git
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The real work gets done in &lt;code class=&quot;highlighter-rouge&quot;&gt;skeleton/Skeleton.cpp&lt;/code&gt;, so open up that file. Here’s where the business happens:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runOnFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;errs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;I saw a function called &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There are several kinds of LLVM pass, and we’re using one called a &lt;a href=&quot;http://llvm.org/docs/WritingAnLLVMPass.html#the-functionpass-class&quot;&gt;&lt;em&gt;function pass&lt;/em&gt;&lt;/a&gt; (it’s a good place to start). Exactly as you would expect, LLVM invokes the method above with every function it finds in the program we’re compiling. For now, all it does is print out the name.&lt;/p&gt;
&lt;p&gt;Details:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;That &lt;code class=&quot;highlighter-rouge&quot;&gt;errs()&lt;/code&gt; thing is an LLVM-provided C++ output stream we can use to print to the console.&lt;/li&gt;
&lt;li&gt;The function returns &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; to indicate that it didn’t modify &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt;. Later, when we actually transform the program, we’ll need to return &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;build-it&quot;&gt;Build It&lt;/h3&gt;
&lt;p&gt;Build the pass with &lt;a href=&quot;http://www.cmake.org/&quot;&gt;CMake&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;llvm-pass-skeleton
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;build
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;build
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cmake ..  &lt;span class=&quot;c&quot;&gt;# Generate the Makefile.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make  &lt;span class=&quot;c&quot;&gt;# Actually build the pass.&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If LLVM isn’t installed globally, you will need to tell CMake where to find it. You can do that by giving it the path to the &lt;code class=&quot;highlighter-rouge&quot;&gt;share/llvm/cmake/&lt;/code&gt; directory inside wherever LLVM resides in the &lt;code class=&quot;highlighter-rouge&quot;&gt;LLVM_DIR&lt;/code&gt; environment variable. Here’s an example with the path from Homebrew:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;$ LLVM_DIR=/usr/local/opt/llvm/share/llvm/cmake cmake ..
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Building your pass produces a shared library. You can find it at &lt;code class=&quot;highlighter-rouge&quot;&gt;build/skeleton/libSkeletonPass.so&lt;/code&gt; or a similar name, depending on your platform. In the next step, we’ll load this library to run the pass on some real code.&lt;/p&gt;
&lt;h3 id=&quot;run-it&quot;&gt;Run It&lt;/h3&gt;
&lt;p&gt;To run your new pass, invoke &lt;code class=&quot;highlighter-rouge&quot;&gt;clang&lt;/code&gt; on some C program and use some freaky flags to point at the shared library you just compiled:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;$ clang -Xclang -load -Xclang build/skeleton/libSkeletonPass.* something.c
I saw a function called main!
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That &lt;code class=&quot;highlighter-rouge&quot;&gt;-Xclang -load -Xclang path/to/lib.so&lt;/code&gt; dance is all you need to &lt;a href=&quot;http://www.cs.cornell.edu/~asampson/blog/clangpass.html&quot;&gt;load and activate your pass in Clang&lt;/a&gt;. So if you need to process larger projects, you can just add those arguments to a Makefile’s &lt;code class=&quot;highlighter-rouge&quot;&gt;CFLAGS&lt;/code&gt; or the equivalent for your build system.&lt;/p&gt;
&lt;p&gt;(You can also run passes one at a time, independently from invoking &lt;code class=&quot;highlighter-rouge&quot;&gt;clang&lt;/code&gt;. This way, which uses LLVM’s &lt;code class=&quot;highlighter-rouge&quot;&gt;opt&lt;/code&gt; command, is the &lt;a href=&quot;http://llvm.org/docs/WritingAnLLVMPass.html#running-a-pass-with-opt&quot;&gt;official documentation-sanctioned way&lt;/a&gt;, but I won’t cover it here.)&lt;/p&gt;
&lt;p&gt;Congratulations; you’ve just hacked a compiler! In the next steps, we’ll extend this hello-world pass to do something interesting to the program.&lt;/p&gt;
&lt;h2 id=&quot;understanding-llvm-ir&quot;&gt;Understanding LLVM IR&lt;/h2&gt;
&lt;img src=&quot;http://www.cs.cornell.edu/~asampson/media/llvm/llvm-containers.svg&quot; alt=&quot;Module, Function, BasicBlock, Instruction&quot;/&gt;&lt;a href=&quot;http://llvm.org/docs/doxygen/html/classllvm_1_1Module.html&quot;&gt;Module&lt;/a&gt;s contain &lt;a href=&quot;http://llvm.org/docs/doxygen/html/classllvm_1_1Function.html&quot;&gt;Function&lt;/a&gt;s, which contain &lt;a href=&quot;http://llvm.org/docs/doxygen/html/classllvm_1_1BasicBlock.html&quot;&gt;BasicBlock&lt;/a&gt;s, which contain &lt;a href=&quot;http://www.llvm.org/docs/doxygen/html/classllvm_1_1Instruction.html&quot;&gt;Instruction&lt;/a&gt;s. Everything but Module descends from &lt;a href=&quot;http://www.llvm.org/docs/doxygen/html/classllvm_1_1Value.html&quot;&gt;Value&lt;/a&gt;.
&lt;p&gt;To work with programs in LLVM, you need to know a little about how the IR is organized.&lt;/p&gt;
&lt;h3 id=&quot;containers&quot;&gt;Containers&lt;/h3&gt;
&lt;p&gt;Here’s on overview of the most important components in an LLVM program:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A &lt;a href=&quot;http://llvm.org/docs/doxygen/html/classllvm_1_1Module.html&quot;&gt;Module&lt;/a&gt; represents a source file (roughly) or a &lt;em&gt;translation unit&lt;/em&gt; (pedantically). Everything else is contained in a Module.&lt;/li&gt;
&lt;li&gt;Most notably, Modules house &lt;a href=&quot;http://llvm.org/docs/doxygen/html/classllvm_1_1Function.html&quot;&gt;Function&lt;/a&gt;s, which are exactly what they sound like: named chunks of executable code. (In C++, both functions and methods correspond to LLVM Functions.)&lt;/li&gt;
&lt;li&gt;Aside from declaring its name and arguments, a Function is mainly a container of &lt;a href=&quot;http://llvm.org/docs/doxygen/html/classllvm_1_1BasicBlock.html&quot;&gt;BasicBlock&lt;/a&gt;s. The &lt;a href=&quot;https://en.wikipedia.org/wiki/Basic_block&quot;&gt;basic block&lt;/a&gt; is a familiar concept from compilers, but for our purposes, it’s just a contiguous chunk of instructions.&lt;/li&gt;
&lt;li&gt;An &lt;a href=&quot;http://www.llvm.org/docs/doxygen/html/classllvm_1_1Instruction.html&quot;&gt;Instruction&lt;/a&gt;, in turn, is a single code operation. The level of abstraction is roughly the same as in &lt;a href=&quot;https://en.wikipedia.org/wiki/Reduced_instruction_set_computing&quot;&gt;RISC&lt;/a&gt;-like machine code: an instruction might be an integer addition, a floating-point divide, or a store to memory, for example.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Most things in LLVM—including Function, BasicBlock, and Instruction—are C++ classes that inherit from an omnivorous base class called &lt;a href=&quot;http://www.llvm.org/docs/doxygen/html/classllvm_1_1Value.html&quot;&gt;Value&lt;/a&gt;. A Value is any data that can be used in a computation—a number, for example, or the address of some code. Global variables and constants (a.k.a. literals or immediates, like 5) are also Values.&lt;/p&gt;
&lt;h3 id=&quot;an-instruction&quot;&gt;An Instruction&lt;/h3&gt;
&lt;p&gt;Here’s an example of an Instruction in the human-readable text form of LLVM IR:&lt;/p&gt;
&lt;div class=&quot;language-llvm highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;%5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This instruction adds two 32-bit integer values (indicated by the type &lt;code class=&quot;highlighter-rouge&quot;&gt;i32&lt;/code&gt;). It adds the number in register 4 (written &lt;code class=&quot;highlighter-rouge&quot;&gt;%4&lt;/code&gt;) and the literal number 2 (written &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;) and places its result in register 5. This is what I mean when I say LLVM IR looks like idealized RISC machine code: we even use the same terminology, like &lt;em&gt;register&lt;/em&gt;, but there are infinitely many registers.&lt;/p&gt;
&lt;p&gt;That same instruction is represented inside the compiler as an instance of the &lt;a href=&quot;http://www.llvm.org/docs/doxygen/html/classllvm_1_1Instruction.html&quot;&gt;Instruction&lt;/a&gt; C++ class. The object has an opcode indicating that it’s an addition, a type, and a list of operands that are pointers to other Value objects. In our case, it points to a &lt;a href=&quot;http://www.llvm.org/docs/doxygen/html/classllvm_1_1Constant.html&quot;&gt;Constant&lt;/a&gt; object representing the number 2 and another &lt;a href=&quot;http://www.llvm.org/docs/doxygen/html/classllvm_1_1Instruction.html&quot;&gt;Instruction&lt;/a&gt; corresponding to the register %4. (Since LLVM IR is in &lt;a href=&quot;https://en.wikipedia.org/wiki/Static_single_assignment_form&quot;&gt;static single assignment&lt;/a&gt; form, registers and Instructions are actually one and the same. Register numbers are an artifact of the text representation.)&lt;/p&gt;
&lt;p&gt;By the way, if you ever want to see the LLVM IR for your program, you can instruct Clang to do that:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;$ clang -emit-llvm -S -o - something.c
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;inspecting-ir-in-our-pass&quot;&gt;Inspecting IR in Our Pass&lt;/h3&gt;
&lt;p&gt;Let’s get back to that LLVM pass we were working on. We can inspect all of the important IR objects using a common convenience method named &lt;code class=&quot;highlighter-rouge&quot;&gt;dump()&lt;/code&gt;. It just prints out the human-readable representation of an object in the IR. Since our pass gets handed Functions, let’s use it to iterate over each Function’s BasicBlocks, and then over each BasicBlock’s set of Instructions.&lt;/p&gt;
&lt;p&gt;Here’s some code to do that. You can get it by checking out &lt;a href=&quot;https://github.com/sampsyo/llvm-pass-skeleton/tree/containers&quot;&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;containers&lt;/code&gt; branch&lt;/a&gt; of the &lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-pass-skeleton&lt;/code&gt; git repository:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;errs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Function body:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;errs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Basic block:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;errs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Instruction: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Using &lt;a href=&quot;https://en.wikipedia.org/wiki/C%2B%2B11&quot;&gt;C++11&lt;/a&gt;’s fancy &lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt; type and foreach syntax makes it easy to navigate the hierarchy in LLVM IR.&lt;/p&gt;
&lt;p&gt;If you build the pass again and run a program through it, you should now see the various parts of the IR split out as we traverse them.&lt;/p&gt;
&lt;h2 id=&quot;now-make-the-pass-do-something-mildly-interesting&quot;&gt;Now Make the Pass Do Something Mildly Interesting&lt;/h2&gt;
&lt;p&gt;The real magic comes in when you &lt;em&gt;look for patterns&lt;/em&gt; in the program and, optionally, &lt;em&gt;change the code&lt;/em&gt; when you find them. Here’s a really simple example: let’s say we want to replace the first binary operator (&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;, etc.) in every function with a multiply. Sounds useful, right?&lt;/p&gt;
&lt;p&gt;Here’s the code to do that. This version, along with an example program to try it on, is available in &lt;a href=&quot;https://github.com/sampsyo/llvm-pass-skeleton/tree/mutate&quot;&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;mutate&lt;/code&gt; branch&lt;/a&gt; of the &lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-pass-skeleton&lt;/code&gt; git repository:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dyn_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BinaryOperator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Insert at the point where the instruction `op` appears.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;IRBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Make a multiply with the same operands as `op`.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lhs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOperand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rhs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOperand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateMul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Everywhere the old instruction was used as an operand, use our&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// new multiply instruction instead.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// A User is anything with operands.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setOperand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOperandNo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// We modified the code.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Details:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;That &lt;code class=&quot;highlighter-rouge&quot;&gt;dyn_cast&amp;lt;T&amp;gt;(p)&lt;/code&gt; construct is an &lt;a href=&quot;http://llvm.org/docs/ProgrammersManual.html#isa&quot;&gt;LLVM-specific introspection utility&lt;/a&gt;. It uses some conventions from the LLVM codebase to made dynamic type tests efficient, because compilers have to use them all the time. This particular construct returns a null pointer if &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; is not a &lt;code class=&quot;highlighter-rouge&quot;&gt;BinaryOperator&lt;/code&gt;, so it’s perfect for special-casing like this.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;http://llvm.org/docs/doxygen/html/classllvm_1_1IRBuilder.html&quot;&gt;IRBuilder&lt;/a&gt; is for constructing code. It has a million methods for creating any kind of instruction you could possibly want.&lt;/li&gt;
&lt;li&gt;To stitch our new instruction into the code, we have to find all the places it’s used and swap in our new instruction as an argument. Recall that an Instruction is a Value: here, the multiply Instruction is used as an operand in another Instruction, meaning that the product will be fed in as an argument.&lt;/li&gt;
&lt;li&gt;We should probably also remove the old instruction, but I left bit that off for brevity.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Now if we compile a program like this (&lt;a href=&quot;https://github.com/sampsyo/llvm-pass-skeleton/blob/mutate/example.c&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;example.c&lt;/code&gt;&lt;/a&gt; in the repository):&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%i&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%i&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Compiling it with an ordinary compiler does what the code says, but our plugin makes it double the number instead of adding 2:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;$ cc example.c
$ ./a.out
10
12
$ clang -Xclang -load -Xclang build/skeleton/libSkeletonPass.so example.c
$ ./a.out
10
20
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Like magic!&lt;/p&gt;
&lt;h2 id=&quot;linking-with-a-runtime-library&quot;&gt;Linking With a Runtime Library&lt;/h2&gt;
&lt;p&gt;When you need to instrument code to do something nontrivial, it can be painful to use &lt;a href=&quot;http://llvm.org/docs/doxygen/html/classllvm_1_1IRBuilder.html&quot;&gt;IRBuilder&lt;/a&gt; to generate the LLVM instructions to do it. Instead, you probably want to write your run-time behavior in C and link it with the program you’re compiling. This section will show you how to write a runtime library that logs the results of binary operators instead of silently changing them.&lt;/p&gt;
&lt;p&gt;Here’s the LLVM pass code, which is in &lt;a href=&quot;https://github.com/sampsyo/llvm-pass-skeleton/tree/rtlib&quot;&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;rtlib&lt;/code&gt; branch&lt;/a&gt; of the &lt;code class=&quot;highlighter-rouge&quot;&gt;llvm-pass-skeleton&lt;/code&gt; repository:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Get the function to call from our runtime library.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LLVMContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Constant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logFunc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getParent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOrInsertFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;logop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getVoidTy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInt32Ty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dyn_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BinaryOperator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Insert *after* `op`.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;IRBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetInsertPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetInsertPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Insert a call to our function.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The tools you need are &lt;a href=&quot;http://llvm.org/docs/doxygen/html/classllvm_1_1Module.html#a66057011b4f824c8a8d04de9697c194a&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Module::getOrInsertFunction&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://llvm.org/docs/doxygen/html/classllvm_1_1IRBuilder.html#aa6912a2a8a62dbd8706ec00df02c4b8a&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IRBuilder::CreateCall&lt;/code&gt;&lt;/a&gt;. The former adds a &lt;em&gt;declaration&lt;/em&gt; for your runtime function &lt;code class=&quot;highlighter-rouge&quot;&gt;logop&lt;/code&gt;, which is analogous to declaring &lt;code class=&quot;highlighter-rouge&quot;&gt;void logop(int i);&lt;/code&gt; in the program’s C source without a function body. The instrumentation code pairs with a run-time library (&lt;a href=&quot;https://github.com/sampsyo/llvm-pass-skeleton/blob/rtlib/rtlib.c&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rtlib.c&lt;/code&gt;&lt;/a&gt; in the repository) that defines that &lt;code class=&quot;highlighter-rouge&quot;&gt;logop&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;computed: %i&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To run an instrumented program, link it with your runtime library:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;$ cc -c rtlib.c
$ clang -Xclang -load -Xclang build/skeleton/libSkeletonPass.so -c example.c
$ cc example.o rtlib.o
$ ./a.out
12
computed: 14
14
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you like, it’s also possible to stitch together the program and runtime library &lt;em&gt;before compiling to machine code&lt;/em&gt;. The &lt;a href=&quot;http://llvm.org/docs/CommandGuide/llvm-link.html&quot;&gt;llvm-link&lt;/a&gt; utility, which you can think of as the rough IR-level equivalent of &lt;a href=&quot;https://sourceware.org/binutils/docs/ld/&quot;&gt;ld&lt;/a&gt;, can help with that.&lt;/p&gt;
&lt;h2 id=&quot;annotations&quot;&gt;Annotations&lt;/h2&gt;
&lt;p&gt;Most projects eventually need to interact with the programmer. You’ll eventually wish for &lt;em&gt;annotations:&lt;/em&gt; some way to convey extra information from the program to your LLVM pass. There are several ways to build up annotation systems:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The practical and hacky way is to use &lt;em&gt;magic functions&lt;/em&gt;. Declare some empty functions with special, probably-unique names in a header file. Include that file in your source and call those do-nothing functions. Then, in your pass, look for &lt;a href=&quot;http://llvm.org/docs/doxygen/html/classllvm_1_1CallInst.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CallInst&lt;/code&gt; instructions&lt;/a&gt; that invoke your functions and use them to trigger your magic. For example, you might use calls like &lt;code class=&quot;highlighter-rouge&quot;&gt;__enable_instrumentation()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;__disable_instrumentation()&lt;/code&gt; to let the program confine your code-munging to specific regions.&lt;/li&gt;
&lt;li&gt;If you need to let programmers add markers to function or variable declarations, Clang’s &lt;code class=&quot;highlighter-rouge&quot;&gt;__attribute__((annotate(&quot;foo&quot;)))&lt;/code&gt; syntax will emit &lt;a href=&quot;http://llvm.org/docs/LangRef.html#metadata&quot;&gt;metadata&lt;/a&gt; with an arbitrary string that you can process in your pass. Brandon Holt again has &lt;a href=&quot;http://bholt.org/posts/llvm-quick-tricks.html&quot;&gt;some background on this technique&lt;/a&gt;. If you need to mark expressions instead of declarations, the undocumented and sadly limited &lt;a href=&quot;https://github.com/llvm-mirror/clang/blob/master/test/Sema/annotate.c&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__builtin_annotation(e, &quot;foo&quot;)&lt;/code&gt; intrinsic&lt;/a&gt; might work.&lt;/li&gt;
&lt;li&gt;You can jump in full dingle and modify Clang itself to interpret your new syntax. I don’t recommend this.&lt;/li&gt;
&lt;li&gt;If you need to annotate &lt;em&gt;types&lt;/em&gt;—and I believe people often do, even if they don’t realize it—I’m developing a system called &lt;a href=&quot;https://github.com/sampsyo/quala&quot;&gt;Quala&lt;/a&gt;. It patches Clang to support custom type qualifiers and pluggable type systems, à la &lt;a href=&quot;http://types.cs.washington.edu/jsr308/&quot;&gt;JSR-308&lt;/a&gt; for Java. &lt;a href=&quot;mailto:asampson@cs.cornell.edu&quot;&gt;Let me know&lt;/a&gt; if you’re interested in collaborating on this project!&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I hope to expand on some of these techniques in future posts.&lt;/p&gt;
&lt;h2 id=&quot;and-more&quot;&gt;And More&lt;/h2&gt;
&lt;p&gt;LLVM is enormous. Here are a few more topics I didn’t cover here:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Using the vast array of classic compiler analyses available in LLVM’s junk drawer.&lt;/li&gt;
&lt;li&gt;Generating any special machine instructions, as architects often want to do, by hacking the back end.&lt;/li&gt;
&lt;li&gt;Exploiting &lt;a href=&quot;http://llvm.org/docs/SourceLevelDebugging.html&quot;&gt;debug info&lt;/a&gt;, so you can connect back to the source line and column corresponding to a point in the IR.&lt;/li&gt;
&lt;li&gt;Writing &lt;a href=&quot;http://clang.llvm.org/docs/ClangPlugins.html&quot;&gt;frontend plugins for Clang&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I hope this gave you enough background to make something awesome. Explore, build, and &lt;a href=&quot;mailto:asampson@cs.cornell.edu&quot;&gt;let me know&lt;/a&gt; if this helped!&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;Thanks to the UW &lt;a href=&quot;http://sampa.cs.washington.edu&quot;&gt;architecture&lt;/a&gt; and &lt;a href=&quot;http://syslab.cs.washington.edu&quot;&gt;systems&lt;/a&gt; groups, who sat through an out-loud version of this post and asked many shockingly good questions.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Addenda, courtesy of kind readers:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://emeryberger.com&quot;&gt;Emery Berger&lt;/a&gt; pointed out that dynamic binary instrumentation tools, like &lt;a href=&quot;http://www.pintool.org/&quot;&gt;Pin&lt;/a&gt;, are still the right choice if you need to observe architecture specifics: registers, the memory hierarchy, instruction encoding, etc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bholt.org&quot;&gt;Brandon Holt&lt;/a&gt; just posted &lt;a href=&quot;http://bholt.org/posts/llvm-debugging.html&quot;&gt;tips for debugging in LLVM&lt;/a&gt;, including how to draw control flow graphs with GraphViz.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cs.utah.edu/~regehr/&quot;&gt;John Regehr&lt;/a&gt; &lt;a href=&quot;https://news.ycombinator.com/item?id=10000611&quot;&gt;mentioned in a comment&lt;/a&gt; a drawback to hitching your software wagon to LLVM’s star: API instability. LLVM internals change a lot from release to release, so maintaining a project means keeping up with the project. &lt;a href=&quot;http://asbradbury.org/&quot;&gt;Alex Bradbury&lt;/a&gt;’s &lt;a href=&quot;http://llvmweekly.org/&quot;&gt;&lt;em&gt;LLVM Weekly&lt;/em&gt; newsletter&lt;/a&gt; is a great resource for following the LLVM ecosystem.&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sun, 04 Feb 2018 20:11:25 +0000</pubDate>
<dc:creator>onderkalaci</dc:creator>
<og:type>article</og:type>
<og:title>LLVM for Grad Students</og:title>
<og:description>LLVM is a godsend of a research tool. Here are some detailed notes on what LLVM is, why you would want to use it for research, and how to get started as a compiler hacker.</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cs.cornell.edu/~asampson/blog/llvm.html</dc:identifier>
</item>
<item>
<title>Donkey Kong scoreboard strips high score claim</title>
<link>https://arstechnica.com/gaming/2018/02/donkey-kong-scoreboard-strips-billy-mitchells-high-score-claims/</link>
<guid isPermaLink="true" >https://arstechnica.com/gaming/2018/02/donkey-kong-scoreboard-strips-billy-mitchells-high-score-claims/</guid>
<description>&lt;img src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/02/mitchell-800x600.jpg&quot;/&gt;&lt;div class=&quot;caption-text&quot;&gt;&lt;a href=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/02/mitchell.jpg&quot; class=&quot;enlarge-link&quot; data-height=&quot;900&quot; data-width=&quot;1200&quot;&gt;Enlarge&lt;/a&gt; &lt;span class=&quot;sep&quot;&gt;/&lt;/span&gt; Mitchell rides an oversized &lt;em&gt;Donkey Kong&lt;/em&gt; machine in the recent Citrus Bowl parade.&lt;/div&gt;&lt;aside id=&quot;social-left&quot;&gt;&lt;a title=&quot;102 posters participating, including story author.&quot; class=&quot;comment-count icon-comment-bubble-down&quot; href=&quot;https://arstechnica.com/gaming/2018/02/donkey-kong-scoreboard-strips-billy-mitchells-high-score-claims/?comments=1&quot;&gt;&lt;span class=&quot;comment-count-before&quot;&gt;reader comments&lt;/span&gt; &lt;span class=&quot;comment-count-number&quot;&gt;153&lt;/span&gt;&lt;/a&gt;
&lt;div class=&quot;share-links&quot;&gt;&lt;span&gt;Share this story&lt;/span&gt;    &lt;/div&gt;
&lt;/aside&gt;&lt;p&gt;&lt;strong&gt;Update (Feb. 4, 2018):&lt;/strong&gt; &lt;a href=&quot;https://arstechnica.com/gaming/2016/05/is-this-the-worlds-first-perfect-game-of-donkey-kong/&quot;&gt;Former &lt;em&gt;Donkey Kong&lt;/em&gt; world record holder Wes Copeland&lt;/a&gt; has &lt;a href=&quot;https://twitter.com/wescopeland_/status/959533103457894400&quot;&gt;presented new statistical evidence&lt;/a&gt; that he says suggests Mitchell's 1.05 million point game was patched together from multiple emulated plays. Drawing data from &lt;a href=&quot;http://kongtrackr.herokuapp.com/#/game/-K125oy5q-Cwth6eJ_jM/summary&quot;&gt;the KongTrackr analysis app&lt;/a&gt;, Copeland says Mitchell's run derives a significantly higher-than-average ratio of points from smashing enemies with the hammer.&lt;/p&gt;
&lt;p&gt;Since the points derived from those enemy smashes are assigned semi-randomly (&lt;a href=&quot;http://www.classicarcadegaming.com/forums/index.php?topic=4164.0&quot;&gt;as detailed here&lt;/a&gt;), Copeland &lt;a href=&quot;https://twitter.com/wescopeland_/status/959533103457894400&quot;&gt;says&lt;/a&gt; such a statistically divergent performance &quot;is evidence of splicing. Billy replayed the boards over and over until he got the right smash RNG [random number generation] to lock in his pace.&quot; Copeland &lt;a href=&quot;https://twitter.com/wescopeland_/status/959976531161477120&quot;&gt;adds&lt;/a&gt; that it's &quot;extremely unlikely&quot; such a performance could happen due to pure chance in a single run. While this statistical evidence is still a bit circumstantial, it certainly takes on added weight when combined with the evidence of MAME play presented below.&lt;/p&gt;
&lt;p&gt;Amid all this unfolding drama, Robbie Lakeman managed to &lt;a href=&quot;http://donkeykongforum.com/index.php?topic=2056.0&quot;&gt;beat his own &lt;em&gt;Donkey Kong&lt;/em&gt; world record&lt;/a&gt; in &lt;a href=&quot;https://www.twitch.tv/videos/225148030&quot;&gt;a livestreamed performance on Friday&lt;/a&gt;. Lakeman surpassed a December mark of 1,230,100 by scoring 1,247,700 points.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Original story&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Billy Mitchell has been a polarizing figure in the tight-knit world of classic video game high scores since well before he appeared as Steve Wiebe's antagonist in &lt;a href=&quot;http://www.imdb.com/title/tt0923752/&quot;&gt;the 2007 documentary &lt;em&gt;The King of Kong: A Fistful of Quarters&lt;/em&gt;&lt;/a&gt;. But the Mitchell doubters got some strong new support on Friday as the &lt;em&gt;Donkey Kong&lt;/em&gt; Forum—a popular clearinghouse for tracking performance in the game—removed Mitchell's best claimed scores from its high-score list.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;http://donkeykongforum.com/index.php?topic=2055.0&quot;&gt;a detailed post on the &lt;em&gt;Donkey Kong&lt;/em&gt; Forum&lt;/a&gt; justifying the decision, moderator and scoreboard maintainer Jeremy &quot;Xelnia&quot; Young cites video evidence to suggest that three 1,000,000+ point scores presented by Mitchell were actually set using emulation rather than actual arcade hardware, as Mitchell claimed.&lt;/p&gt;
&lt;img src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/02/mamedk.gif&quot; width=&quot;224&quot; height=&quot;256&quot; alt=&quot;Footage captured from MAME version 0.115 shows the stage being built in whole chunks.&quot;/&gt;&lt;div class=&quot;caption-text&quot;&gt;Footage captured from MAME version 0.115 shows the stage being built in whole chunks.&lt;/div&gt;
&lt;a href=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/02/dfdk.gif&quot; class=&quot;enlarge&quot; data-height=&quot;540&quot; data-width=&quot;960&quot; alt=&quot;Direct-feed footage captured by Chris Gleed shows how an actual &amp;lt;em&amp;gt;Donkey Kong&amp;lt;/em&amp;gt; cabinet renders a new stage (click for animation).&quot;&gt;&lt;img src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/02/dfdk-300x169.gif&quot; width=&quot;300&quot; height=&quot;169&quot; srcset=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/02/dfdk-640x360.gif 2x&quot; alt=&quot;Direct-feed footage captured by Chris Gleed shows how an actual &amp;lt;em&amp;gt;Donkey Kong&amp;lt;/em&amp;gt; cabinet renders a new stage (click for animation).&quot;/&gt;&lt;/a&gt;
&lt;div class=&quot;caption-text&quot;&gt;&lt;a href=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/02/dfdk.gif&quot; class=&quot;enlarge-link&quot; data-height=&quot;540&quot; data-width=&quot;960&quot;&gt;Enlarge&lt;/a&gt; &lt;span class=&quot;sep&quot;&gt;/&lt;/span&gt; Direct-feed footage captured by Chris Gleed shows how an actual &lt;em&gt;Donkey Kong&lt;/em&gt; cabinet renders a new stage (click for animation).&lt;/div&gt;
&lt;a href=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/02/W5HiUgi-1.gif&quot; class=&quot;enlarge&quot; data-height=&quot;720&quot; data-width=&quot;480&quot; alt=&quot;Footage from Billy Mitchell's 1.05 million point claim seems to resemble the MAME footage (click for animation).&quot;&gt;&lt;img src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/02/W5HiUgi-1-300x450.gif&quot; width=&quot;300&quot; height=&quot;450&quot; srcset=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/02/W5HiUgi-1.gif 2x&quot; alt=&quot;Footage from Billy Mitchell's 1.05 million point claim seems to resemble the MAME footage (click for animation).&quot;/&gt;&lt;/a&gt;
&lt;div class=&quot;caption-text&quot;&gt;&lt;a href=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/02/W5HiUgi-1.gif&quot; class=&quot;enlarge-link&quot; data-height=&quot;720&quot; data-width=&quot;480&quot;&gt;Enlarge&lt;/a&gt; &lt;span class=&quot;sep&quot;&gt;/&lt;/span&gt; Footage from Billy Mitchell's 1.05 million point claim seems to resemble the MAME footage (click for animation).&lt;/div&gt;
&lt;p&gt;While a real &lt;em&gt;Donkey Kong&lt;/em&gt; cabinet generates and displays game scenes in a &quot;sliding door&quot; effect, sliding from one side to the other, old versions of the Multiple Arcade Machine Emulator (MAME) instead build entire chunks of a level at once and then display them as a complete screen buffer (with slight differences as MAME has been updated over the years). The difference is noticeable in slow-motion, frame-by-frame analysis of the transitions between &lt;em&gt;Donkey Kong&lt;/em&gt; levels. In the analysis, a new stage is first built in pieces after the &quot;How High Can You Get?&quot; interludes.&lt;/p&gt;
&lt;p&gt;Comparing slow-motion footage of Mitchell's videos with those from MAME and authentic cabinets, Young writes, &quot;show that each of the &lt;em&gt;Donkey Kong&lt;/em&gt; world record direct-feed recordings presented by Billy Mitchell and verified by TG were generated in MAME and not by original &lt;em&gt;Donkey Kong&lt;/em&gt; hardware.&quot;&lt;/p&gt;
&lt;h2&gt;“The preponderance of evidence”&lt;/h2&gt;
&lt;p&gt;The difference between a MAME-set record and one set on an authentic &lt;em&gt;Donkey Kong&lt;/em&gt; printed circuit board isn't academic. Besides &lt;a href=&quot;http://www.twingalaxies.com/showthread.php/118168-Donkey-Kong-MAME-ROM-vs-Arcade-question&quot;&gt;important differences in timing and controls&lt;/a&gt; between the two, MAME allows players to easily record and replay inputs to piece together a record-breaking run from multiple attempts. While there's no direct evidence that Mitchell did this kind of rerecording, presenting a MAME run as actual arcade gameplay would certainly introduce the possibility of such cheating.&lt;/p&gt;
&lt;p&gt;Young cites other reasons to doubt Mitchell's score submissions. While Mitchell claims all of his 1M+ point scores came from &quot;direct feed&quot; off an actual &lt;em&gt;Donkey Kong&lt;/em&gt; cabinet, setting up such a direct output from the ancient arcade hardware requires an incredibly complex setup, as &lt;a href=&quot;http://donkeykongforum.com/index.php?topic=1413.0&quot;&gt;laid out by &lt;em&gt;Donkey Kong&lt;/em&gt; streamer Chris Gleed&lt;/a&gt;. This is why most &lt;em&gt;Donkey Kong&lt;/em&gt; scores are confirmed in front of a live audience or using a video camera pointed at the screen, which can also have the benefit of showing the player at the cabinet at the same time.&lt;/p&gt;
&lt;p&gt;There is no such footage of Mitchell actually at the controls of a real machine during his three claimed 1M+ point games, including the infamous &quot;surprise&quot; footage presented in a climactic scene in &lt;em&gt;The King of Kong&lt;/em&gt;. What's more, there are some significant questions regarding the circumstances under which each score was supposedly created.&lt;/p&gt;
&lt;p&gt;A screen recording of Mitchell's highest claimed &lt;em&gt;DK&lt;/em&gt; score of 1.062 million points was only shown publicly &lt;a href=&quot;https://www.youtube.com/watch?v=7y15Y6xrpXY&amp;amp;feature=youtu.be&quot;&gt;at a short press conference event&lt;/a&gt; put on by the International Video Game Hall of Fame. The authenticity of that record is mainly propped up by testimony of Todd Rogers, who was &lt;a href=&quot;http://www.twingalaxies.com/feed_details.php/104/twin-galaxies-dragster-dispute-concludes-with-banning-of-todd-rogers/5&quot;&gt;recently banned from gaming high-score board Twin Galaxies&lt;/a&gt; after evidence he had lied about a long-standing &lt;em&gt;Dragster&lt;/em&gt; record on the Atari 2600.&lt;/p&gt;
&lt;p&gt;&quot;Scores already on the board are &lt;em&gt;always&lt;/em&gt; subject to review, and if the preponderance of evidence is against [one score], than the score should be removed, even if no single bit of evidence is a 'smoking gun,'&quot; Young writes in the &lt;em&gt;Donkey Kong&lt;/em&gt; Forum post. &quot;In my view, we have reached that point with Billy Mitchell.&quot;&lt;/p&gt;
&lt;h2&gt;Fall of a giant?&lt;/h2&gt;
&lt;aside class=&quot;pullbox sidebar story-sidebar right&quot;&gt;
&lt;/aside&gt;
Mitchell's various gaming achievements, braggadocious style, and signature American flag tie have made him one of the most recognizable (&lt;a href=&quot;https://arstechnica.com/gaming/2015/11/court-king-of-kongs-billy-mitchell-isnt-an-exploding-floating-cartoon-head/&quot;&gt;and parodied&lt;/a&gt;) professional gamers for years before esports were even a real thing. His biggest claim to fame in the gaming community remains &lt;a href=&quot;http://www.funspotnh.com/-Articles/pc-billymitchell.htm&quot;&gt;playing the first perfect game of &lt;em&gt;Pac-Man&lt;/em&gt;&lt;/a&gt;, an undisputed record which he achieved in 1999. But &lt;em&gt;Donkey Kong&lt;/em&gt; has become a big part of his public persona in recent years, including &lt;a href=&quot;https://twitter.com/socceracad/status/947168046405341184&quot;&gt;a ride on a giant Donkey Kong machine in December's Citrus Bowl parade&lt;/a&gt;.
&lt;p&gt;While Mitchell's &lt;em&gt;Donkey Kong&lt;/em&gt; scores were impressive at the time he claimed them, they've since been surpassed in video-verified runs by numerous players. Mitchell's highest claimed score only ranked at No. 20 on the &lt;em&gt;Donkey Kong&lt;/em&gt; Forum rankings before being removed. As it stands, Mitchell's highest confirmed score—an impressive 933,900-point performance achieved in front of multiple witnesses at Midwest Gaming Classic in 2004—is the 47th highest score listed on the site.&lt;/p&gt;
&lt;p&gt;Mitchell has not responded to a request for comment from Ars Technica. Twin Galaxies—a long-standing video game high-score authority recognized by the Guinness Book of World Records—&lt;a href=&quot;http://www.twingalaxies.com/showthread.php/176004-Dispute-Jeremy-Young-Arcade-Donkey-Kong-Points-Hammer-Allowed-Player-Billy-L-Mitchell-Score-1-062-800?p=946666&amp;amp;viewfull=1#post946666&quot;&gt;responded via a forum post&lt;/a&gt; by commissioner Dave Hawksett. He wrote that &quot;Time will be needed for Twin Galaxies to fully review this evidence. We will do this thoroughly and impartially. In the meantime we will continue to observe this discussion by experts in our community.&quot;&lt;/p&gt;
&lt;aside class=&quot;pullbox sidebar story-sidebar right&quot;&gt;
&lt;/aside&gt;
Incidentally, Wes Copeland's 1.218 million-point &lt;em&gt;Donkey Kong&lt;/em&gt; game—referred to by some as &lt;a href=&quot;https://arstechnica.com/gaming/2016/05/is-this-the-worlds-first-perfect-game-of-donkey-kong/&quot;&gt;a perfect game of &lt;em&gt;Donkey Kong&lt;/em&gt;&lt;/a&gt; when it was achieved as a new high score in 2016—was surpassed in December with &lt;a href=&quot;http://donkeykongforum.com/index.php?topic=2056.msg33435;topicseen#msg33435&quot;&gt;a 1.23 million-point game from Robbie Lakeman&lt;/a&gt;. Both of those amazing scores have direct video evidence showing the players performing on actual arcade cabinets, yet another way they seem to be in a different class from those of the storied Billy Mitchell.</description>
<pubDate>Sun, 04 Feb 2018 20:01:18 +0000</pubDate>
<dc:creator>sanj</dc:creator>
<og:url>https://arstechnica.com/gaming/2018/02/donkey-kong-scoreboard-strips-billy-mitchells-high-score-claims/</og:url>
<og:title>Donkey Kong scoreboard strips Billy Mitchell’s high score claims [Updated]</og:title>
<og:image>https://cdn.arstechnica.net/wp-content/uploads/2018/02/mitchell-760x380.jpg</og:image>
<og:description>Frame-by-frame video analysis suggests records were actually set using emulator</og:description>
<og:type>article</og:type>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arstechnica.com/gaming/2018/02/donkey-kong-scoreboard-strips-billy-mitchells-high-score-claims/</dc:identifier>
</item>
<item>
<title>Early Facebook and Google Employees Form a Center for Humane Technology</title>
<link>https://www.nytimes.com/2018/02/04/technology/early-facebook-google-employees-fight-tech.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2018/02/04/technology/early-facebook-google-employees-fight-tech.html</guid>
<description>&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;213&quot; data-total-count=&quot;1921&quot; id=&quot;story-continues-3&quot;&gt;“The largest supercomputers in the world are inside of two companies — Google and Facebook — and where are we pointing them?” Mr. Harris said. “We’re pointing them at people’s brains, at children.”&lt;/p&gt;


&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;337&quot; data-total-count=&quot;2258&quot;&gt;Silicon Valley executives for years positioned their companies as tight-knit families and rarely spoke publicly against one another. That has changed. Chamath Palihapitiya, a venture capitalist who was an early employee at Facebook, said in November that the social network was “&lt;a href=&quot;https://www.theverge.com/2017/12/11/16761016/former-facebook-exec-ripping-apart-society&quot;&gt;ripping apart the social fabric of how society works&lt;/a&gt;.”&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;522&quot; data-total-count=&quot;2780&quot;&gt;The new Center for Humane Technology includes an unprecedented alliance of former employees of some of today’s biggest tech companies. Apart from Mr. Harris, the center includes Sandy Parakilas, a former Facebook operations manager; Lynn Fox, a former Apple and Google communications executive; Dave Morin, a former Facebook executive; Justin Rosenstein, who created Facebook’s Like button and is a co-founder of Asana; Roger McNamee, an early investor in Facebook; and Renée DiResta, &lt;a href=&quot;https://www.nytimes.com/2017/11/12/technology/social-media-disinformation.html&quot;&gt;a technologist who studies bots&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;354&quot; data-total-count=&quot;3134&quot;&gt;The group expects its numbers to grow. Its first project to reform the industry will be to introduce a Ledger of Harms — a website aimed at guiding rank-and-file engineers who are concerned about what they are being asked to build. The site will include data on the health effects of different technologies and ways to make products that are healthier.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;522&quot; data-total-count=&quot;3656&quot;&gt;Jim Steyer, chief executive and founder of Common Sense, said the Truth About Tech campaign was modeled on antismoking drives and focused on children because of their vulnerability. That may sway tech chief executives to change, he said. Already, Apple’s chief executive, Timothy D. Cook, told The Guardian last month that &lt;a href=&quot;https://www.theguardian.com/technology/2018/jan/19/tim-cook-i-dont-want-my-nephew-on-a-social-network&quot;&gt;he would not let his nephew on social media&lt;/a&gt;, while the Facebook investor Sean Parker also recently said of the social network that “&lt;a href=&quot;https://www.theverge.com/2017/11/9/16627724/sean-parker-facebook-childrens-brains-feedback-loop&quot;&gt;God only knows what it’s doing to our children’s brains&lt;/a&gt;.”&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;91&quot; data-total-count=&quot;3747&quot;&gt;Mr. Steyer said, “You see a degree of hypocrisy with all these guys in Silicon Valley.”&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;447&quot; data-total-count=&quot;4194&quot;&gt;The new group also plans to begin lobbying for laws to curtail the power of big tech companies. It will initially focus on two pieces of legislation: a bill being introduced by Senator Edward J. Markey, Democrat of Massachusetts, that would commission research on technology’s impact on children’s health, and a bill in California by State Senator Bob Hertzberg, a Democrat, which would prohibit the use of digital bots without identification.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;148&quot; data-total-count=&quot;4342&quot;&gt;Mr. McNamee said he had joined the Center for Humane Technology because he was horrified by what he had helped enable as an early Facebook investor.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;153&quot; data-total-count=&quot;4495&quot;&gt;“Facebook appeals to your lizard brain — primarily fear and anger,” he said. “And with smartphones, they’ve got you for every waking moment.”&lt;/p&gt;
&lt;div id=&quot;story-ad-2&quot; class=&quot;story-ad ad ad-placeholder nocontent robots-nocontent&quot;&gt;

&lt;a class=&quot;visually-hidden skip-to-text-link&quot; href=&quot;https://www.nytimes.com/2018/02/04/technology/early-facebook-google-employees-fight-tech.html#story-continues-4&quot;&gt;Continue reading the main story&lt;/a&gt;&lt;/div&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;85&quot; data-total-count=&quot;4580&quot; id=&quot;story-continues-4&quot;&gt;He said the people who made these products could stop them before they did more harm.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;73&quot; data-total-count=&quot;4653&quot;&gt;“This is an opportunity for me to correct a wrong,” Mr. McNamee said.&lt;/p&gt;
&lt;a class=&quot;visually-hidden skip-to-text-link&quot; href=&quot;https://www.nytimes.com/2018/02/04/technology/early-facebook-google-employees-fight-tech.html#whats-next&quot;&gt;Continue reading the main story&lt;/a&gt;</description>
<pubDate>Sun, 04 Feb 2018 18:56:49 +0000</pubDate>
<dc:creator>stanleydrew</dc:creator>
<og:url>https://www.nytimes.com/2018/02/04/technology/early-facebook-google-employees-fight-tech.html</og:url>
<og:type>article</og:type>
<og:title>Early Facebook and Google Employees Form Coalition to Fight What They Built</og:title>
<og:description>A group of Silicon Valley technologists plans to call attention to the dangers of tech, including working on an ad campaign aimed at 55,000 public schools.</og:description>
<og:image>https://static01.nyt.com/images/2018/02/03/business/05TECHTRUTH/05TECHTRUTH-facebookJumbo.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2018/02/04/technology/early-facebook-google-employees-fight-tech.html</dc:identifier>
</item>
<item>
<title>RustBelt: securing the foundations of the Rust programming language</title>
<link>https://dl.acm.org/citation.cfm?doid=3177123.3158154</link>
<guid isPermaLink="true" >https://dl.acm.org/citation.cfm?doid=3177123.3158154</guid>
<description>&lt;td class=&quot;small-link-text&quot; readability=&quot;2.6042553191489&quot;&gt;
&lt;div id=&quot;divmain&quot; readability=&quot;4.5574468085106&quot;&gt;

&lt;table class=&quot;medium-text&quot; readability=&quot;4.0801354401806&quot;&gt;&lt;colgroup&gt;&lt;col /&gt;&lt;/colgroup&gt;&lt;tr readability=&quot;8.1602708803612&quot;&gt;&lt;td&gt;
&lt;table class=&quot;medium-text&quot; readability=&quot;0.46551724137931&quot;&gt;&lt;col /&gt;&lt;col /&gt;&lt;tr readability=&quot;0.93103448275862&quot;&gt;&lt;td&gt;Full Text:&lt;/td&gt;
&lt;td&gt;&lt;a name=&quot;FullTextPDF&quot; title=&quot;FullText PDF&quot; href=&quot;https://dl.acm.org/ft_gateway.cfm?id=3158154&amp;amp;ftid=1937016&amp;amp;dwn=1&amp;amp;CFID=5149081&amp;amp;CFTOKEN=1690d0cb6616a004-0303E282-EDC5-2451-B3DF1447AB6AED22&quot; target=&quot;_blank&quot; id=&quot;FullTextPDF&quot;&gt;&lt;img src=&quot;https://dl.acm.org/imagetypes/pdf_logo.gif&quot; alt=&quot;PDF&quot; class=&quot;fulltext_lnk&quot; border=&quot;0&quot; /&gt;PDF&lt;/a&gt;
&lt;div&gt;see &lt;a href=&quot;https://dl.acm.org/citation.cfm?id=3158154&amp;amp;picked=formats&quot; title=&quot;Source Materials Tab&quot;&gt;source materials&lt;/a&gt; below for &lt;a href=&quot;https://dl.acm.org/citation.cfm?id=3158154&amp;amp;picked=formats&quot; title=&quot;Source Materials Tab&quot;&gt;more options&lt;/a&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;table class=&quot;medium-text&quot; readability=&quot;0.14545454545455&quot;&gt;&lt;col /&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; nowrap=&quot;nowrap&quot;&gt;Authors:&lt;/td&gt;
&lt;td valign=&quot;top&quot; nowrap=&quot;nowrap&quot;&gt;&lt;a href=&quot;https://dl.acm.org/author_page.cfm?id=99658672987&amp;amp;coll=DL&amp;amp;dl=ACM&amp;amp;trk=0&quot; title=&quot;Author Profile Page&quot; target=&quot;_self&quot;&gt;Ralf Jung&lt;/a&gt;&lt;/td&gt;
&lt;td valign=&quot;bottom&quot;&gt;&lt;a href=&quot;https://dl.acm.org/inst_page.cfm?id=60002485&quot; title=&quot;Institutional Profile Page&quot;&gt;&lt;small&gt;MPI-SWS, Germany&lt;/small&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; nowrap=&quot;nowrap&quot;&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; nowrap=&quot;nowrap&quot;&gt;&lt;a href=&quot;https://dl.acm.org/author_page.cfm?id=81502766398&amp;amp;coll=DL&amp;amp;dl=ACM&amp;amp;trk=0&quot; title=&quot;Author Profile Page&quot; target=&quot;_self&quot;&gt;Jacques-Henri Jourdan&lt;/a&gt;&lt;/td&gt;
&lt;td valign=&quot;bottom&quot;&gt;&lt;a href=&quot;https://dl.acm.org/inst_page.cfm?id=60002485&quot; title=&quot;Institutional Profile Page&quot;&gt;&lt;small&gt;MPI-SWS, Germany&lt;/small&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0.05&quot;&gt;&lt;td valign=&quot;top&quot; nowrap=&quot;nowrap&quot;&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; nowrap=&quot;nowrap&quot;&gt;&lt;a href=&quot;https://dl.acm.org/author_page.cfm?id=81488669469&amp;amp;coll=DL&amp;amp;dl=ACM&amp;amp;trk=0&quot; title=&quot;Author Profile Page&quot; target=&quot;_self&quot;&gt;Robbert Krebbers&lt;/a&gt;&lt;/td&gt;
&lt;td valign=&quot;bottom&quot;&gt;&lt;a href=&quot;https://dl.acm.org/inst_page.cfm?id=60006288&quot; title=&quot;Institutional Profile Page&quot;&gt;&lt;small&gt;Delft University of Technology, Netherlands&lt;/small&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; nowrap=&quot;nowrap&quot;&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; nowrap=&quot;nowrap&quot;&gt;&lt;a href=&quot;https://dl.acm.org/author_page.cfm?id=81100381796&amp;amp;coll=DL&amp;amp;dl=ACM&amp;amp;trk=0&quot; title=&quot;Author Profile Page&quot; target=&quot;_self&quot;&gt;Derek Dreyer&lt;/a&gt;&lt;/td&gt;
&lt;td valign=&quot;bottom&quot;&gt;&lt;a href=&quot;https://dl.acm.org/inst_page.cfm?id=60002485&quot; title=&quot;Institutional Profile Page&quot;&gt;&lt;small&gt;MPI-SWS, Germany&lt;/small&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;td rowspan=&quot;20&quot;&gt;
&lt;table border=&quot;0&quot; class=&quot;medium-text&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; readability=&quot;3.5963302752294&quot;&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://dl.acm.org/images/apdf.jpg&quot; title=&quot;RustBelt: securing the foundations of the rust programming language&quot; width=&quot;60&quot; height=&quot;90&quot; alt=&quot;RustBelt: securing the foundations of the rust programming language&quot; border=&quot;0&quot; /&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot; nowrap=&quot;nowrap&quot;&gt;&lt;img src=&quot;https://dl.acm.org/images/ACM_mini.jpg&quot; title=&quot;Published by ACM&quot; alt=&quot;Published by ACM&quot; /&gt; 2017 Article&lt;br /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot; valign=&quot;baseline&quot;&gt;&lt;a href=&quot;javascript:ColdFusion.Window.show('theexplaination');ColdFusion.navigate('explain.cfm?expid=13','theexplaination');&quot; title=&quot;Artifact Review and Badging: explained&quot;&gt;Artifacts&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td colspan=&quot;2&quot; valign=&quot;baseline&quot;&gt;&lt;img src=&quot;https://dl.acm.org/images/artifacts_evaluated_functional_dl.jpg&quot; alt=&quot;Artifacts Evaluated - Functional&quot; /&gt;  Artifacts Evaluated - Functional&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot; valign=&quot;baseline&quot;&gt;&lt;img src=&quot;https://dl.acm.org/images/artifacts_available_dl.jpg&quot; alt=&quot;Artifacts Available&quot; /&gt;  Artifacts Available&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot; valign=&quot;baseline&quot;&gt;&lt;img src=&quot;https://dl.acm.org/img/stats.jpg&quot; alt=&quot;Bibliometrics Data&quot; /&gt;  &lt;a href=&quot;javascript:ColdFusion.Window.show('theexplaination');ColdFusion.navigate('explain.cfm?expid=1','theexplaination');&quot; title=&quot;Bibliometrics: explained&quot;&gt;Bibliometrics&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;small-text&quot; colspan=&quot;2&quot; valign=&quot;top&quot;&gt;· Citation Count: 0&lt;br /&gt;· Downloads (cumulative): 3,292&lt;br /&gt;· Downloads (12 Months): 3,292&lt;br /&gt;· Downloads (6 Weeks): 3,292&lt;br /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;br clear=&quot;all&quot; /&gt;&lt;table border=&quot;0&quot; class=&quot;medium-text&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; readability=&quot;2.3160621761658&quot;&gt;&lt;tr valign=&quot;top&quot; readability=&quot;4.6321243523316&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; class=&quot;medium-text&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot; readability=&quot;3.0880829015544&quot;&gt;&lt;tr valign=&quot;top&quot;&gt;&lt;td rowspan=&quot;20&quot; nowrap=&quot;nowrap&quot; align=&quot;center&quot;&gt;Published in:&lt;br /&gt;&lt;a href=&quot;http://pacmpl.acm.org/&quot; title=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://portalparts.acm.org/3180000/3177123/cover/cover_full.jpg&quot; height=&quot;102&quot; width=&quot;69&quot; alt=&quot;Cover Image&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr valign=&quot;top&quot;&gt;&lt;td nowrap=&quot;nowrap&quot;&gt;· Journal&lt;/td&gt;
&lt;/tr&gt;&lt;tr valign=&quot;top&quot; readability=&quot;1.7454545454545&quot;&gt;&lt;td&gt;Proceedings of the ACM on Programming Languages  &lt;a href=&quot;https://dl.acm.org/citation.cfm?id=J1568&amp;amp;picked=prox&quot; target=&quot;_self&quot; class=&quot;small-link-text&quot;&gt;archive&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr valign=&quot;top&quot; readability=&quot;3.9444444444444&quot;&gt;&lt;td&gt;Volume 2 Issue POPL, January 2018&lt;br /&gt;Article No. 66&lt;br /&gt;&lt;a href=&quot;https://www.acm.org/publications&quot; class=&quot;small-link-text&quot; title=&quot;ACM&quot;&gt;ACM&lt;/a&gt; &lt;span class=&quot;small-link-text&quot;&gt;New York, NY&lt;/span&gt;&lt;span class=&quot;small-link-text&quot;&gt;, USA&lt;/span&gt;&lt;br /&gt;&lt;a href=&quot;https://dl.acm.org/citation.cfm?id=3177123&amp;amp;picked=prox&quot; target=&quot;_self&quot; class=&quot;small-link-text&quot;&gt;table of contents&lt;/a&gt; &lt;span&gt;doi&amp;gt;&lt;a href=&quot;https://doi.org/10.1145/3158154&quot; target=&quot;_self&quot; class=&quot;small-link-text&quot;&gt;10.1145/3158154&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;br clear=&quot;all&quot; /&gt;&lt;/div&gt;
&lt;/td&gt;&lt;td class=&quot;small-link-text&quot;&gt;
&lt;div id=&quot;divtools&quot;&gt;

&lt;ul title=&quot;Tools and Resources&quot;&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;https://dl.acm.org/rightslink.cfm?id=3158154&amp;amp;parent_id=3177123&quot; class=&quot;small-link-text&quot; title=&quot;Request Permissions&quot; target=&quot;_blank&quot;&gt;Request Permissions&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span class=&quot;small-link-text&quot;&gt;TOC Service:&lt;/span&gt; &lt;img src=&quot;https://dl.acm.org/images/blanks.gif&quot; border=&quot;0&quot; alt=&quot;Spacer Image reserves space for checkmark when TOC Service is updated&quot; name=&quot;saved&quot; id=&quot;saved&quot; /&gt;&lt;/span&gt;
&lt;ul&gt;&lt;li&gt;&lt;br /&gt;&lt;img src=&quot;https://dl.acm.org/img/email_small.gif&quot; alt=&quot;Toc Alert via Email&quot; border=&quot;0&quot; hspace=&quot;3&quot; /&gt;&lt;a href=&quot;https://dl.acm.org/citation.cfm?doid=3177123.3158154#&quot; onclick=&quot;window.alert('To use this Feature, you must login with your personal ACM Web Account.');&quot; class=&quot;small-link-text&quot;&gt;Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;https://dl.acm.org/img/rss_small.gif&quot; alt=&quot;Toc Alert via Email&quot; border=&quot;0&quot; hspace=&quot;3&quot; /&gt;&lt;a href=&quot;https://dl.acm.org/citation.cfm?doid=3177123.3158154#&quot; onclick=&quot;window.alert('To use this Feature, you must login with your personal ACM Web Account.');&quot; class=&quot;small-link-text&quot;&gt;RSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&quot;https://dl.acm.org/citation.cfm?doid=3177123.3158154#&quot; onclick=&quot;window.alert('To use this Feature, you must login with your personal ACM Web Account.');&quot; class=&quot;small-link-text&quot;&gt;Save to Binder&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span class=&quot;small-link-text&quot;&gt;Export Formats:&lt;/span&gt;&lt;/span&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;javascript:ColdFusion.Window.show('theformats');ColdFusion.navigate('exportformats.cfm?id=3158154&amp;amp;expformat=bibtex','theformats');&quot; class=&quot;small-link-text&quot;&gt;BibTeX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;javascript:ColdFusion.Window.show('theformats');ColdFusion.navigate('exportformats.cfm?id=3158154&amp;amp;expformat=endnotes','theformats');&quot; class=&quot;small-link-text&quot;&gt;EndNote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;javascript:ColdFusion.Window.show('theformats');ColdFusion.navigate('exportformats.cfm?id=3158154&amp;amp;expformat=acmref','theformats');&quot; class=&quot;small-link-text&quot;&gt;ACM Ref&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;small-link-text&quot;&gt;Share:&lt;/p&gt;
&lt;p&gt;      &lt;span class=&quot;addthis_separator&quot;&gt;|&lt;/span&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;medium-text&quot;&gt;&lt;a href=&quot;javascript:ColdFusion.Window.show('theexplaination');ColdFusion.navigate('explain.cfm?expid=2','theexplaination');&quot; title=&quot;Tags: explained&quot;&gt;&lt;strong&gt;Author Tags&lt;/strong&gt;&lt;/a&gt; &lt;a href=&quot;javascript:%20void(0);&quot; onclick=&quot;toggleAuthorKeys();&quot; title=&quot;Expand Author Tags&quot;&gt;&lt;img id=&quot;expandcollapseauthortags&quot; class=&quot;expand-collapse&quot; src=&quot;https://dl.acm.org/images/expand.png&quot; width=&quot;40px&quot; alt=&quot;Expand Author Tags&quot; name=&quot;expandcollapseauthortags&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;/td&gt;
</description>
<pubDate>Sun, 04 Feb 2018 12:49:34 +0000</pubDate>
<dc:creator>based2</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://dl.acm.org/citation.cfm?doid=3177123.3158154</dc:identifier>
</item>
<item>
<title>A pessimistic vision of India’s looming environmental and economic collapse</title>
<link>https://thewire.in/217773/india-systematic-destruction/</link>
<guid isPermaLink="true" >https://thewire.in/217773/india-systematic-destruction/</guid>
<description>&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-official sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;&lt;h3&gt;A startlingly pessimistic vision of India’s looming environmental and economic collapse – aired by a senior business leader – deserves our urgent attention.&lt;/h3&gt;
&lt;div id=&quot;attachment_217806&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;32&quot;&gt;&lt;img data-attachment-id=&quot;217806&quot; data-permalink=&quot;https://thewire.in/217773/india-systematic-destruction/nuclear-explosion/&quot; data-orig-file=&quot;https://i1.wp.com/cdn.thewire.in/wp-content/uploads/2018/01/25191930/nuclear-explosion.jpg?fit=1200%2C750&amp;amp;ssl=1&quot; data-orig-size=&quot;1200,750&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;nuclear-explosion&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://i1.wp.com/cdn.thewire.in/wp-content/uploads/2018/01/25191930/nuclear-explosion.jpg?fit=300%2C188&amp;amp;ssl=1&quot; data-large-file=&quot;https://i1.wp.com/cdn.thewire.in/wp-content/uploads/2018/01/25191930/nuclear-explosion.jpg?fit=1024%2C640&amp;amp;ssl=1&quot; class=&quot;size-full wp-image-217806&quot; src=&quot;https://i1.wp.com/cdn.thewire.in/wp-content/uploads/2018/01/25191930/nuclear-explosion.jpg?resize=1160%2C725&amp;amp;ssl=1&quot; alt=&quot;&quot; width=&quot;1160&quot; height=&quot;725&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Raghu Raman put forward a starkly apocalyptic vision of the country’s future. Credit: File photo&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;p1&quot;&gt;Recently, writing against the backdrop of the unprecedented spike in Delhi’s air pollution, Raghu Raman, the president of Reliance Industries’ risk, security &amp;amp; new ventures division and former CEO of India’s National Intelligence Grid (NATGRID), &lt;span class=&quot;s1&quot;&gt;put forward&lt;/span&gt; a starkly apocalyptic vision of the country’s future:&lt;/p&gt;
&lt;blockquote readability=&quot;15&quot;&gt;
&lt;p class=&quot;p1&quot;&gt;India is sitting on several time bombs. Climate change, toxic environments, burgeoning aspirations, jobless growth, crumbling infrastructure and of course, pollution being just a few of them. The current models of social consumption and growth are simply unsustainable. More importantly, not only are these issues interlinked but in most cases, have reached a gridlock wherein no single component can be solved in isolation without impacting stakeholders affected by other problems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;p1&quot;&gt;In the article titled ‘&lt;a href=&quot;https://thewire.in/196791/india-environment-self-destruction-collapse-jared-diamond/&quot; title=&quot;India's is Hurtling Down A Path of Self-Destruction'&quot;&gt;India’s is Hurtling Down A Path of Self-Destruction’&lt;/a&gt;, Raman makes his case by drawing from the work of the Pulitzer Prize-winning anthropologist Jared Diamond’s study of Easter Island, the Pacific Island society that supposedly collapsed owing to over-exploitation of natural resources. He concludes that the gridlock-like situation makes collapse inevitable, because:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p class=&quot;p2&quot;&gt;… that’s what collapsing societies do. They hurtle down the path of self-destruction in pursuit of short-term disastrous objectives in unison, even while they realise the looming catastrophe as individuals.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;p2&quot;&gt;Raman’s short piece, well worth reading in full, is a remarkable statement; both on account of its unyieldingly pessimistic outlook and the fact that it comes from a senior executive of India’s leading corporation. It should have made the headlines; but except for some murmurs in social media, it drew no response even from the pink papers – otherwise overly attentive to the pronouncements of business leaders.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;Are we &lt;em&gt;really&lt;/em&gt; doomed?&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Raman’s analysis is not without its problems. Diamond’s work on Easter Island, for example, has been &lt;a href=&quot;https://theconversation.com/the-truth-about-easter-island-a-sustainable-society-has-been-falsely-blamed-for-its-own-demise-85563&quot; target=&quot;_blank&quot; title=&quot;rejected by&quot;&gt;&lt;span class=&quot;s1&quot;&gt;rejected by&lt;/span&gt;&lt;/a&gt; experts who have researched the phenomenon, who trace the origins of such interpretations to the West’s colonial imagination. But that’s a quibble; what should really concern us is Raman’s main thesis.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;So, are we doomed as a country? Just how valid are Raman’s claims, which also extend to the rest of the world? Consider these facts:&lt;/p&gt;
&lt;ul&gt;&lt;li class=&quot;li3&quot;&gt;In the summer of 2016, temperatures in parts of western India exceeded 50 degrees celsius, with Phalodi in Rajasthan setting &lt;a href=&quot;http://www.independent.co.uk/news/world/asia/india-s-roads-melt-as-record-breaking-heat-wave-continues-a7044146.html&quot; target=&quot;_blank&quot; title=&quot;a new record&quot;&gt;&lt;span class=&quot;s2&quot;&gt;a new record&lt;/span&gt;&lt;/a&gt; for the country at a scorching 51 degrees celsius. In Gujarat’s Valsad, people were forced to abandon their sandals while crossing roads, because they got stuck on the melting tar. In the last four years, heat waves killed more than &lt;a href=&quot;http://www.hindustantimes.com/india-news/heatwave-in-india-claim-4-620-lives-in-four-years/story-yDAJTaroKEUBio6uEeTcgN.html&quot; target=&quot;_blank&quot; title=&quot;4,600 Indians&quot;&gt;&lt;span class=&quot;s2&quot;&gt;4,600 Indians&lt;/span&gt;&lt;/a&gt;, the overwhelming bulk of them working class people in Andhra Pradesh and Telangana.&lt;/li&gt;
&lt;li&gt;Farmers in South Asia are expected to use between 80 and 200% more water by 2050. Yet, Indian farmers are drawing water from the Upper Ganges aquifer (large underground deposit of water) at &lt;a href=&quot;http://www.readcube.com/articles/10.1038/nature21403&quot; target=&quot;_blank&quot; title=&quot;50 times&quot;&gt;&lt;span class=&quot;s2&quot;&gt;50 times&lt;/span&gt;&lt;/a&gt; its recharge rate. A &lt;a href=&quot;https://www.nasa.gov/jpl/grace/study-third-of-big-groundwater-basins-in-distress/&quot; target=&quot;_blank&quot; title=&quot;NASA study&quot;&gt;&lt;span class=&quot;s2&quot;&gt;NASA study&lt;/span&gt;&lt;/a&gt; in 2009 identified a third of the world’s major aquifers to be in distress, with the Indus basin – which includes Punjab and Haryana, India’s granaries – ranked the second-most over-stressed.&lt;/li&gt;
&lt;li class=&quot;li3&quot;&gt;The UN estimates &lt;a href=&quot;http://liquid-investments.com/six-million-hectares-of-additional-farmland-needed-2/&quot; target=&quot;_blank&quot; title=&quot;6 million hectares&quot;&gt;&lt;span class=&quot;s2&quot;&gt;6 million hectares&lt;/span&gt;&lt;/a&gt; (14.8 million acres) of new farmland is needed globally every year to keep up with food demand; instead, we are &lt;a href=&quot;https://reliefweb.int/report/world/high-price-desertification-23-hectares-land-minute&quot; target=&quot;_blank&quot; title=&quot;losing 12 million hectares&quot;&gt;&lt;span class=&quot;s2&quot;&gt;losing 12 million hectares&lt;/span&gt;&lt;/a&gt; a year through soil degradation. In India alone, a whopping &lt;a href=&quot;http://www.thehindubusinessline.com/opinion/a-desert-storm-is-engulfing-india/article8949236.ece&quot; target=&quot;_blank&quot; title=&quot;25%&quot;&gt;&lt;span class=&quot;s2&quot;&gt;25%&lt;/span&gt;&lt;/a&gt; (82 million hectares) of total land (329 mn ha) is undergoing desertification while 32% (105 mn ha) is facing degradation.&lt;/li&gt;
&lt;li class=&quot;li3&quot;&gt;Scientists are keeping a &lt;a href=&quot;https://grist.org/article/antarctica-doomsday-glaciers-could-flood-coastal-cities/&quot; target=&quot;_blank&quot; title=&quot;close watch&quot;&gt;&lt;span class=&quot;s1&quot;&gt;close watch&lt;/span&gt;&lt;/a&gt; on two little known glaciers in Pine Island Bay, Antarctica, which are &lt;span class=&quot;s1&quot;&gt;so huge&lt;/span&gt; that “they act as a plug holding back enough ice to pour 11 feet of sea-level rise into the world’s oceans — an amount that would submerge every coastal city on the planet.” If global warming continues to accelerate as it is doing now, those two glaciers could melt in as much as 20 to 50 years – much too sooner than humanity can adapt.&lt;/li&gt;
&lt;li class=&quot;li3&quot;&gt;Globally, between 1990 and 2015, we lost the equivalent of 1,000 football fields’ worth of forests &lt;em&gt;per hour&lt;/em&gt;, according to &lt;a href=&quot;https://blogs.worldbank.org/opendata/five-forest-figures-international-day-forests&quot; target=&quot;_blank&quot; title=&quot;the World Bank&quot;&gt;&lt;span class=&quot;s2&quot;&gt;the World Bank&lt;/span&gt;&lt;/a&gt;. The &lt;em&gt;&lt;a href=&quot;http://www.hindustantimes.com/india/india-lost-original-forests-70-times-delhi-s-area-in-14-years/story-OoM8EaCwbi06FVgQFyfaRN.html&quot; target=&quot;_blank&quot; title=&quot;Hindustan Times&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Hindustan Times&lt;/span&gt;&lt;/a&gt;&lt;/em&gt; says India alone may have lost close to 10.6 million hectares in just 14 years – between 1999 to 2013. Deforestation increases soil erosion, affects rainfall patterns and river flows, apart from destroying wildlife habitats.&lt;/li&gt;
&lt;/ul&gt;&lt;div id=&quot;attachment_217805&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;35&quot;&gt;&lt;img data-attachment-id=&quot;217805&quot; data-permalink=&quot;https://thewire.in/217773/india-systematic-destruction/deforestation-india-reuters/&quot; data-orig-file=&quot;https://i1.wp.com/cdn.thewire.in/wp-content/uploads/2018/01/25191737/deforestation-India-Reuters.jpg?fit=800%2C480&amp;amp;ssl=1&quot; data-orig-size=&quot;800,480&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;deforestation-India-Reuters&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://i1.wp.com/cdn.thewire.in/wp-content/uploads/2018/01/25191737/deforestation-India-Reuters.jpg?fit=300%2C180&amp;amp;ssl=1&quot; data-large-file=&quot;https://i1.wp.com/cdn.thewire.in/wp-content/uploads/2018/01/25191737/deforestation-India-Reuters.jpg?fit=800%2C480&amp;amp;ssl=1&quot; class=&quot;size-full wp-image-217805&quot; src=&quot;https://i1.wp.com/cdn.thewire.in/wp-content/uploads/2018/01/25191737/deforestation-India-Reuters.jpg?resize=800%2C480&amp;amp;ssl=1&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;480&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Between 1990 and 2015, we lost the equivalent of 1,000 football fields’ worth of forests &lt;em&gt;per hour&lt;/em&gt;. Credit: Reuters&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;p1&quot;&gt;These figures merely skim the surface of a crisis – more accurately, a set of interlinked crises – that is of truly earth-shaking proportions. The crises are not merely ‘environmental’ – after all, the fate of humanity is inextricably linked to that of nature.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;As the trends above show, these crises are not future events either. And w&lt;span class=&quot;s1&quot;&gt;orse, on almost every one of these fronts, the trends are not only accelerating, but show no sign of abating. Every year, we are breaching more and more &lt;a href=&quot;http://www.stockholmresilience.org/research/planetary-boundaries/planetary-boundaries/about-the-research/the-nine-planetary-boundaries.html&quot; target=&quot;_blank&quot; title=&quot;planetary boundaries&quot;&gt;&lt;span class=&quot;s2&quot;&gt;planetary boundaries&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;, which can be seen as the earth’s health indicators, pushing our natural systems further towards a terminal state.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Among the many crises that are converging on the 21&lt;sup&gt;st&lt;/sup&gt; century, climate change stands out for being the most &lt;a href=&quot;http://nymag.com/daily/intelligencer/2017/07/climate-change-earth-too-hot-for-humans.html&quot; target=&quot;_blank&quot; title=&quot;urgent and far-reaching&quot;&gt;&lt;span class=&quot;s1&quot;&gt;urgent and far-reaching&lt;/span&gt;&lt;/a&gt; in its impact. A phenomenon primarily attributed to the burning of fossil fuels, it brings with it a host of inter-related challenges – shifting rainfall patterns, megadroughts and floods, sea level rise, acidification of oceans, and so on – any &lt;em&gt;one&lt;/em&gt; of which would qualify as a major global crisis.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Of late, the warnings have reached fever pitch. In November 2017, the Union of Concerned Scientists issued a dire ‘&lt;a href=&quot;http://www.independent.co.uk/environment/letter-to-humanity-warning-climate-change-global-warming-scientists-union-concerned-a8052481.html&quot; target=&quot;_blank&quot; title=&quot;second warning&quot;&gt;&lt;span class=&quot;s1&quot;&gt;second warning&lt;/span&gt;&lt;/a&gt;’ about “the existential threat of runaway consumption of limited resources,” signed by 15,000 scientists from 184 countries, including many Nobel laureates.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;In short, we are well past the stage where such concerns about our collective future can be dismissed as ‘alarmism’.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;Industrial civilisation as a ‘nine-day wonder’&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;The &lt;a href=&quot;https://www.theguardian.com/books/2016/apr/15/neoliberalism-ideology-problem-george-monbiot&quot; target=&quot;_blank&quot; title=&quot;main driver&quot;&gt;&lt;span class=&quot;s2&quot;&gt;main driver&lt;/span&gt;&lt;/a&gt; of the 21&lt;sup&gt;st&lt;/sup&gt; century’s converging crises is the global industrial-capitalist system, and the pernicious ideology of perpetual, exponential economic growth that governs it. In 2016, in an &lt;a href=&quot;https://blogs.timesofindia.indiatimes.com/toi-edit-page/infinite-growth-in-a-finite-world-hopium-economics-has-given-us-deeply-in-debt-individuals-businesses-and-nations/&quot; target=&quot;_blank&quot; title=&quot;op-ed piece&quot;&gt;op-ed piece&lt;/a&gt; in the &lt;em&gt;The Times of India&lt;/em&gt;, international banker turned author Satyajit Das laid out in jargon-free terms how this came to be:&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s3&quot;&gt;Economic growth is a central assumption to political and economic systems…&lt;/span&gt; &lt;span class=&quot;s4&quot;&gt;But strong growth is not normal, being a recent phenomenon over the last two centuries… It was based upon the profligate use of mispriced natural resources such as oil, water and soil. It relied on allowing unsustainable degradation of the environment.&lt;/span&gt; &lt;span class=&quot;s3&quot;&gt;The human race refuses to accept that it is not possible to have infinite growth and improvement in living standards in a finite world. &lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;p1&quot;&gt;Exploitation and inequality is innate to the industrial-capitalist system; a fact well-known at least since the time of Marx. But the question of its environmental impacts and viability has received far less attention, historically speaking. Interestingly, chief among those who sounded the early warnings about modern industrial civilization were a bunch of illustrious Indians: &lt;a href=&quot;http://www.tonu.org/tag/robbery-of-the-soil/&quot; target=&quot;_blank&quot; title=&quot;Tagore&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Tagore&lt;/span&gt;&lt;/a&gt;, &lt;a href=&quot;https://scroll.in/article/826426/defying-capitalism-and-socialism-kumarappa-and-gandhi-had-imagined-a-decentralised-indian-economy&quot; target=&quot;_blank&quot; title=&quot;Gandhi and J.C. Kumarappa&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Gandhi and J.C. Kumarappa&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;In 1909, in his characteristically homespun manner, Gandhi had described industrial civilisation as a &lt;a href=&quot;https://thewire.in/66777/gandhi-was-perfectly-sensible-to-call-industrial-civilisation-a-nine-days-wonder-mark-lindley/&quot; title=&quot;&quot; nine-day=&quot;&quot;&gt;&lt;span class=&quot;s2&quot;&gt;“nine-day wonder”&lt;/span&gt;&lt;/a&gt;. Today, this deeply unfashionable view has returned with a vengeance, and Gandhi and Kumarappa are now seen as beacons by those who are seeking alternatives to the present system.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;In fact, there is rich irony in the fact that it took more than half a century for Gandhi’s warning to echo through the halls of the scientific establishment. That came in the form of a 1972 study, which sought to simulate the consequences of unchecked economic growth. The results, published in a report titled ‘&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Limits_to_Growth&quot; target=&quot;_blank&quot; title=&quot;The Limits to Growth&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;em&gt;The Limits to Growth&lt;/em&gt;&lt;/span&gt;&lt;/a&gt;,’ implied that industrial societies were thoroughly unsustainable and headed towards collapse, if they didn’t change course. Predictably, its findings were duly ignored.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Today, however, many analysts believe that we have finally hit the ‘limits to growth’ predicted in the study 45 years ago. Their painstaking research &lt;span class=&quot;s1&quot;&gt;connects the ongoing global economic slowdown to underlying resource constraints. (Some of these analyses can be read &lt;a href=&quot;https://ourfiniteworld.com/2013/03/29/how-resource-limits-lead-to-financial-collapse/&quot; target=&quot;_blank&quot; title=&quot;here&quot;&gt;here&lt;/a&gt;&lt;/span&gt;, &lt;a href=&quot;http://richardheinberg.com/220-peak-everything&quot; target=&quot;_blank&quot; title=&quot;here&quot;&gt;&lt;span class=&quot;s1&quot;&gt;here&lt;/span&gt;&lt;/a&gt; and &lt;a href=&quot;http://cassandralegacy.blogspot.in/2013/09/mineral-resources-and-limits-to-growth.html&quot; target=&quot;_blank&quot; title=&quot;here&quot;&gt;&lt;span class=&quot;s1&quot;&gt;here&lt;/span&gt;&lt;/a&gt;). Closer home, researchers at The Energy Resources Institute (TERI) have issued a &lt;a href=&quot;https://thewire.in/12382/curbing-consumption-is-the-only-way-out-to-avoid-climate-change/&quot; title=&quot;similar warning&quot;&gt;&lt;span class=&quot;s1&quot;&gt;similar warning&lt;/span&gt;&lt;/a&gt; for India: curbing economic growth and consumption is the only way to avoid a catastrophe.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Primarily, there are three reasons why long-term economic growth is not viable:&lt;/p&gt;
&lt;ol class=&quot;ol1&quot;&gt;&lt;li class=&quot;li1&quot;&gt;The ‘pie’ is shrinking; the non-renewable resources – metals, minerals and fossil fuels – which hi-tech industrial societies depend on are increasingly scarce and inaccessible (See &lt;a href=&quot;http://donellameadows.org/archives/a-synopsis-limits-to-growth-the-30-year-update/&quot; target=&quot;_blank&quot; title=&quot;here&quot;&gt;&lt;span class=&quot;s5&quot;&gt;here&lt;/span&gt;&lt;/a&gt;, &lt;a href=&quot;http://www.worldscientific.com/worldscibooks/10.1142/7323&quot; target=&quot;_blank&quot; title=&quot;here&quot;&gt;&lt;span class=&quot;s5&quot;&gt;here&lt;/span&gt;&lt;/a&gt; and &lt;a href=&quot;http://wildancestors.blogspot.in/2013/07/scarcity.html&quot; target=&quot;_blank&quot; title=&quot;here&quot;&gt;&lt;span class=&quot;s1&quot;&gt;here&lt;/span&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;li class=&quot;li1&quot;&gt;There is greater competition for these shrinking resources – once monopolised by the West – as the rest of the world apes the western economic model; which means that with time, fewer and fewer of these will be available for each.&lt;/li&gt;
&lt;li class=&quot;li1&quot;&gt;The catastrophic environmental impacts of economic growth – climate change, deforestation, pollution and toxicity, etc – are putting in place new and more urgent limits on the production and consumption of these resources.&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;p1&quot;&gt;The&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt; conclusion is as inescapable as it was expected. The planet simply lacks the capacity to support the economic utopia promised to everyone by the champions of growth. However, to continue espousing this model knowing it has thrown planetary systems off-kilter – as India’s elite decision-makers do – is beyond myopic; it’s lunatic.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;But, as even the most casual survey of the ‘rich lists’ show, it’s a lunacy that has served its proponents only too well.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;A feast of vultures&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;em&gt;A Feast of Vultures&lt;/em&gt;: that’s the title of a &lt;a href=&quot;http://www.livemint.com/Leisure/2TIvyIJAi68p4EtUVwyijL/Book-review-A-Feast-Of-Vultures.html&quot; target=&quot;_blank&quot; title=&quot;recent book&quot;&gt;&lt;span class=&quot;s1&quot;&gt;recent book&lt;/span&gt;&lt;/a&gt; by the investigative journalist Josy Joseph. It documents from the inside the spectacular corruption and economic feeding frenzy that followed when India threw open its resources to private players in the name of ‘economic reforms’. It’s no coincidence that the same period has seen the wealth of India’s neo-rich soar to previously unimagined heights.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;According to the charity &lt;a href=&quot;https://thewire.in/216160/richest-1-cornered-73-wealth-generated-india-2017-oxfam-survey/&quot; title=&quot;Oxfam's annual report&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Oxfam’s annual report&lt;/span&gt;&lt;/a&gt; on inequality, India’s richest 1% cornered 73% of the wealth generated in the country in 2017. Meanwhile, 67 crore Indians comprising the population’s poorest half saw their wealth rise by just 1%. The study estimates that to earn what a top paid executive in a leading Indian firm earns in a year, it will take a minimum wage labourer in rural India an astounding 941 years.&lt;/p&gt;
&lt;hr/&gt;&lt;h3&gt;Also read: &lt;a href=&quot;https://thewire.in/216160/richest-1-cornered-73-wealth-generated-india-2017-oxfam-survey/&quot; title=&quot;Richest 1% Cornered 73% of Wealth Generated in India in 2017: Oxfam Survey&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Richest 1% Cornered 73% of Wealth Generated in India in 2017: Oxfam Survey&lt;/a&gt;&lt;/h3&gt;
&lt;hr/&gt;&lt;p class=&quot;p1&quot;&gt;These grim figures are very much in tune with global trends: 82% of the wealth generated last year worldwide was cornered by the top 1%, while 3.7 billion people that account for the poorest half of population saw no increase in their wealth at all.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;Number one among India’s super-rich is Mukesh Ambani, the owner of Reliance Industries; as of this year, the world’s &lt;a href=&quot;http://www.livemint.com/Companies/wPa7m4ZN1knkekIFTgqvuO/RIL-worlds-3rd-largest-energy-firm-Platts-rankings.html&quot; target=&quot;_blank&quot; title=&quot;third largest&quot;&gt;&lt;span class=&quot;s1&quot;&gt;third largest&lt;/span&gt;&lt;/a&gt; fossil fuel company. His family is not only &lt;a href=&quot;http://www.thehindu.com/news/national/mukesh-ambani-family-tops-forbes-list-of-asias-richest-families-pip-lees/article20465328.ece&quot; target=&quot;_blank&quot; title=&quot;Asia’s wealthiest&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Asia’s wealthiest&lt;/span&gt;&lt;/a&gt;, their net worth rose by $19 billion this year to reach $44.8 billion. Based as it is on the performance of the Reliance empire, the family’s net worth is now close to the Gross Domestic Product (GDP) of the state of Punjab ($ 47 billion), one of India’s richest and home to almost three crore people.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;The wealth it added to its stash in the last year alone is greater than the GDP of Uttarakhand ($18 billion). As the 2017 &lt;em&gt;Forbes&lt;/em&gt; ‘India’s &lt;a href=&quot;https://www.forbes.com/india-billionaires/%2312a9ee84643b&quot; target=&quot;_blank&quot; title=&quot;100 richest&quot;&gt;&lt;span class=&quot;s1&quot;&gt;100 richest&lt;/span&gt;&lt;/a&gt;’ list shows, the fortunes of other tycoons too are growing at a similarly heady rate.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;strong&gt;‘The ideology of the cancer cell’&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Large parts of these vast fortunes piled up by India’s own band of &lt;a href=&quot;https://www.theglobeandmail.com/report-on-business/rob-commentary/india-struggles-through-its-own-era-of-robber-barons/article4252238/&quot; target=&quot;_blank&quot; title=&quot;robber barons&quot;&gt;robber barons&lt;/a&gt; can be directly traced to the &lt;a href=&quot;http://www.thehindubusinessline.com/opinion/the-great-environment-scam/article5075991.ece&quot; target=&quot;_blank&quot; title=&quot;ongoing fire sale&quot;&gt;ongoing fire sale&lt;/a&gt; of the country’s natural resources and a whole range of not-so-visible subsidies they receive from the government – from heavy tax rebates to land secured at throwaway prices to bad-debts written-off.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;While this process of state-enabled plunder is concealed from the public eye through elaborate bureaucratic skulduggery, the modus operandi itself remains devilishly simple: Collude with the state to transfer publicly owned resources into one’s own hands at a pittance; privatise the profits; and ‘socialise’ the costs – ie, the loss of homes and livelihoods, depleted resources, polluted air, water and soil.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;And yet, this process that enriches the few at the cost of the many, while permanently destroying the country’s environmental fabric, is roundly cheered by our self-declared patriots and a section of the metropolitan pundit class. What is, as a matter of fact, one of history’s most outrageous examples of forced wealth transfer, is perversely celebrated as ‘wealth creation’, and its chief beneficiaries glorified as ‘nation builders’.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;But, violent and exploitative as it has been, the true scale of the criminality of these policies are becoming evident only now, in the age of climate change. Today, alarming events like Delhi’s air pollution spike show that those accumulated ‘socialised’ costs are coming back to bite us, just as saner voices had always warned they will.&lt;/p&gt;
&lt;div readability=&quot;11.5&quot;&gt;In fact, India’s situation is rapidly approaching that of China, whose wrong-headed political and economic policies are an inspiration for our elites and middle classes. Three decades of rapid growth has thrust that nation into what has been described as a ‘&lt;a href=&quot;https://thewire.in/196791/india-environment-self-destruction-collapse-jared-diamond/&quot; title=&quot;communist-capitalist ecological apocalyspe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-saferedirecturl=&quot;https://www.google.com/url?hl=en&amp;amp;q=https://thewire.in/196791/india-environment-self-destruction-collapse-jared-diamond/&amp;amp;source=gmail&amp;amp;ust=1517036021999000&amp;amp;usg=AFQjCNENQcELk9CP2GU5aeQYjE-ATJ_hrQ&quot;&gt;communist-capitalist ecological apocalyspe&lt;/a&gt;‘ which now threatens to undo its economic achievements.&lt;/div&gt;
&lt;p class=&quot;p2&quot;&gt;The idea of infinite economic growth on a finite planet is a mathematical impossibility. Indeed, as the American author Edward Abbey had warned, “Growth for the sake of growth is the ideology of the cancer cell.” And yet, this delusional and ultimately suicidal ideology is now an article of faith for most Indians, thanks to a cynical and self-serving elite who have systematically injected it into society via the media, advertising, and educational institutions.&lt;br/&gt;&lt;strong&gt;&lt;br/&gt;“We have met the enemy and he is us”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In a manner reminiscent of that famous Vietnam war-era cartoon, Raman too arrives at the same, inexorable conclusion. Channeling Diamond, he makes what must be the most singular admission ever to be made by an Indian corporate leader.&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p class=&quot;p2&quot;&gt;“…one of the main reasons why even sophisticated societies fall into this suicidal spiral is the conflict between the short-term interests of decision-making elites and the long-term interests of society as a whole, especially if the elites are able to insulate themselves from the consequences of their actions. And that is how many decision makers have behaved over centuries across the world, including in India.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;p2&quot;&gt;That extraordinary statement, coming from an ‘elite decision-maker’, is the closest we have got to a confession from an insider as to what has really been going in the country over the last few decades. In many ways, it confirms what the critics, from Medha Patkar to the Maoists, have always charged India’s development model with: that it’s violent and unjust, skewed in favour of the privileged few, and ecologically disastrous.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;It shines new light on the mindset that promises bullet trains and ‘smart cities’ while neglecting public health and malnutrition; the pursuit of heartless policies calculated to keep agriculture economically unviable, &lt;a href=&quot;http://www.catchnews.com/pov/total-recall-how-the-match-is-fixed-against-indian-farmers-1432731942.html&quot; target=&quot;_blank&quot; title=&quot;driving the rural poor&quot;&gt;&lt;span class=&quot;s1&quot;&gt;driving the rural poor&lt;/span&gt;&lt;/a&gt; wholesale into the cities to serve as cheap fodder for India’s ‘economic miracle’; and the permanent destruction of million-year-old mountains, forests and rivers to create a ‘nine-day’ industrial wonder.&lt;/p&gt;
&lt;p&gt;Ironically, these policies are being enacted in the name of poverty reduction and ‘development’, which is flatly contradicted by the government’s own data. In the period from 2004-2005 to 2015-2016, tax concessions given by the Indian government to corporations amounted to an incredible &lt;a href=&quot;http://www.dnaindia.com/analysis/column-sinkhole-in-the-tax-landscape-2566886&quot; target=&quot;_blank&quot; title=&quot;Rs 50 lakh crore&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Rs 50 lakh crore&lt;/span&gt;&lt;/a&gt; – a sum that could have made India’s poverty history. Bear in mind that this astronomical figure is just &lt;em&gt;one&lt;/em&gt; form of ‘invisible’ subsidies given to corporations, and that too for a mere 12-year period. Given this, it’s hard to avoid the conclusion: the Indian public has been duped.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;That’s why Raghu Raman’s statement ought to immediately revive the debate about the direction of India’s development. A debate that was virtually shut down after the ’90s, when the component elements of the system – the famous ‘pillars of democracy’ – closed ranks to form a consensus that we needed growth at any cost.&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;&lt;strong&gt;System&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt; change, not climate change&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;p2&quot;&gt;This is a not call for return to 20&lt;sup&gt;th&lt;/sup&gt; century-style socialism, which is perhaps irredeemably caught up in the logic of industrialism. We need to need to find another way – rather, ways – and hundreds of experiments and models along these lines already abound (See &lt;a href=&quot;https://systemchangenotclimatechange.org/ecosocialism&quot; target=&quot;_blank&quot; title=&quot;here&quot;&gt;&lt;span class=&quot;s1&quot;&gt;here&lt;/span&gt;&lt;/a&gt;, &lt;a href=&quot;https://transitionnetwork.org/&quot; target=&quot;_blank&quot; title=&quot;here&quot;&gt;&lt;span class=&quot;s1&quot;&gt;here&lt;/span&gt;&lt;/a&gt;, &lt;a href=&quot;http://evonomics.com/will-replace-outdated-left-right-economic-thinking-commons-paradigm/&quot; target=&quot;_blank&quot; title=&quot;here&quot;&gt;&lt;span class=&quot;s1&quot;&gt;here&lt;/span&gt;&lt;/a&gt;, &lt;a href=&quot;https://theconversation.com/buen-vivir-south-americas-rethinking-of-the-future-we-want-44507&quot; target=&quot;_blank&quot; title=&quot;here&quot;&gt;&lt;span class=&quot;s1&quot;&gt;here&lt;/span&gt;&lt;/a&gt; and &lt;a href=&quot;https://www.theguardian.com/commentisfree/2017/apr/12/doughnut-growth-economics-book-economic-model&quot; target=&quot;_blank&quot; title=&quot;here&quot;&gt;&lt;span class=&quot;s1&quot;&gt;here&lt;/span&gt;&lt;/a&gt; for starters).&lt;/p&gt;
&lt;p&gt;This is not a matter of choice either. Our collective survival depends on how soon – whether – we correct course, while ensuring a modicum of economic security for everyone and avoiding large-scale conflict. This is the central challenge of the 21&lt;sup&gt;st&lt;/sup&gt; century not just for India, but for every nation on the planet.&lt;/p&gt;
&lt;p&gt;Returning sanity to our economic models necessarily involves devolving power and redistributing wealth. That’s why this change can never come from our elite decision-makers, but only from ordinary citizens. Raghu Raman’s startling statement has served the memo to the people of India on the fate that awaits them, if they are to leave things in the hands of the elites and their short-term interests.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.theguardian.com/environment/2017/mar/08/how-climate-change-battles-are-increasingly-being-fought-and-won-in-court&quot; target=&quot;_blank&quot; title=&quot;wave of climate lawsuits&quot;&gt;&lt;span class=&quot;s1&quot;&gt;wave of climate lawsuits&lt;/span&gt;&lt;/a&gt;, calls for &lt;a href=&quot;http://www.motherjones.com/environment/2009/12/bolivia-paying-rain/&quot; target=&quot;_blank&quot; title=&quot;climate reparations&quot;&gt;&lt;span class=&quot;s1&quot;&gt;climate reparations&lt;/span&gt;&lt;/a&gt; and increasingly successful fossil fuel &lt;a href=&quot;http://www.resilience.org/stories/2017-12-14/how-bill-mckibbens-radical-idea-of-fossil-fuel-divestment-transformed-the-climate-debate/&quot; target=&quot;_blank&quot; title=&quot;divestment campaigns&quot;&gt;&lt;span class=&quot;s1&quot;&gt;divestment campaigns&lt;/span&gt;&lt;/a&gt; show that such a course correction may have begun already. Last week, the city of &lt;a href=&quot;https://www.theguardian.com/us-news/2018/jan/11/new-york-city-fossil-fuel-divestment-spur-global-movement&quot; target=&quot;_blank&quot; title=&quot;New York announced&quot;&gt;&lt;span class=&quot;s1&quot;&gt;New York announced&lt;/span&gt;&lt;/a&gt; that it will divest pension funds worth $5 billion from fossil fuel companies, apart from filing lawsuits against them for creating global warming. No doubt, these changes only scratch the surface of problem. But, hopefully, they are precursors of much more radical changes to come.&lt;/p&gt;
&lt;p&gt;Just as well. Because, as &lt;span class=&quot;s1&quot;&gt;the author Derrick Jensen&lt;/span&gt; says, for way too long a time, “We have been too kind to those who are killing the planet. We have been inexcusably, unforgivably, insanely kind.”&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;em&gt;&lt;a href=&quot;https://thewire.in/author/sjose/&quot; title=&quot;Sajai Jose&quot;&gt;Sajai Jose&lt;/a&gt; is a member of&lt;/em&gt; &lt;a href=&quot;https://www.ecologise.in/&quot; target=&quot;_blank&quot; title=&quot;Ecologise&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&lt;em&gt;Ecologise&lt;/em&gt;&lt;/span&gt;&lt;/a&gt;&lt;em&gt;, a collective with a shared interest in understanding the 21&lt;sup&gt;st&lt;/sup&gt; century’s converging crises and exploring alternative pathways&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-official sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h3 class=&quot;jp-relatedposts-headline&quot;&gt;&lt;em&gt;What to read next:&lt;/em&gt;&lt;/h3&gt;
&lt;/p&gt;
&lt;div class=&quot;taxonomies&quot; readability=&quot;7.8926174496644&quot;&gt;
&lt;p class=&quot;tax-categories taxonomy&quot;&gt;Categories: &lt;a href=&quot;https://thewire.in/category/economy/agriculture/&quot; rel=&quot;category tag&quot;&gt;Agriculture&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/category/economy/&quot; rel=&quot;category tag&quot;&gt;Economy&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/category/environment-2/&quot; rel=&quot;category tag&quot;&gt;Environment&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/category/featured/&quot; rel=&quot;category tag&quot;&gt;Featured&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;tax-tags taxonomy&quot;&gt;Tagged as: &lt;a href=&quot;https://thewire.in/tag/a-feast-of-vultures/&quot; rel=&quot;tag&quot;&gt;A Feast of Vultures&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/agriculture/&quot; rel=&quot;tag&quot;&gt;agriculture&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/climate-change/&quot; rel=&quot;tag&quot;&gt;climate change&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/deforestation/&quot; rel=&quot;tag&quot;&gt;deforestation&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/droughts-india/&quot; rel=&quot;tag&quot;&gt;droughts India&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/economic-growth/&quot; rel=&quot;tag&quot;&gt;economic growth&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/gandhi/&quot; rel=&quot;tag&quot;&gt;Gandhi&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/global-economic-slowdown/&quot; rel=&quot;tag&quot;&gt;global economic slowdown&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/granaries/&quot; rel=&quot;tag&quot;&gt;granaries&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/heat/&quot; rel=&quot;tag&quot;&gt;heat&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/india/&quot; rel=&quot;tag&quot;&gt;India&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/india-economy/&quot; rel=&quot;tag&quot;&gt;India economy&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/india-gdp/&quot; rel=&quot;tag&quot;&gt;India GDP&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/josy-joseph/&quot; rel=&quot;tag&quot;&gt;Josy Joseph&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/kumarappa/&quot; rel=&quot;tag&quot;&gt;Kumarappa&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/mukesh-ambani/&quot; rel=&quot;tag&quot;&gt;Mukesh Ambani&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/natgrid/&quot; rel=&quot;tag&quot;&gt;Natgrid&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/oxfam-report/&quot; rel=&quot;tag&quot;&gt;Oxfam report&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/pollution/&quot; rel=&quot;tag&quot;&gt;Pollution&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/raghu-raman/&quot; rel=&quot;tag&quot;&gt;Raghu Raman&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/rajasthan/&quot; rel=&quot;tag&quot;&gt;Rajasthan&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/reliance-industries/&quot; rel=&quot;tag&quot;&gt;Reliance Industries&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/reliance-industries-risk/&quot; rel=&quot;tag&quot;&gt;Reliance Industries’ Risk&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/sea-level/&quot; rel=&quot;tag&quot;&gt;Sea Level&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/temperature/&quot; rel=&quot;tag&quot;&gt;temperature&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/teri/&quot; rel=&quot;tag&quot;&gt;TERI&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/un/&quot; rel=&quot;tag&quot;&gt;UN&lt;/a&gt;, &lt;a href=&quot;https://thewire.in/tag/wildlife-habitats/&quot; rel=&quot;tag&quot;&gt;wildlife habitats&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 04 Feb 2018 07:13:27 +0000</pubDate>
<dc:creator>Santosh83</dc:creator>
<og:type>article</og:type>
<og:title>Debate: India Is Not 'Self-Destructing', It’s Being Destroyed Systematically - The Wire</og:title>
<og:description>A startlingly pessimistic vision of India’s looming environmental and economic collapse – aired by a senior business leader – deserves our urgent attention.</og:description>
<og:url>https://thewire.in/217773/india-systematic-destruction/</og:url>
<og:image>https://cdn.thewire.in/wp-content/uploads/2018/01/25191930/nuclear-explosion.jpg</og:image>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://thewire.in/217773/india-systematic-destruction/</dc:identifier>
</item>
<item>
<title>Best practices for user account, authorization and password management</title>
<link>https://cloudplatform.googleblog.com/2018/01/12-best-practices-for-user-account.html</link>
<guid isPermaLink="true" >https://cloudplatform.googleblog.com/2018/01/12-best-practices-for-user-account.html</guid>
<description>&lt;noscript&gt;
&lt;p&gt;&lt;span class=&quot;byline-author&quot;&gt;By Ian Maddox, GCP Solutions Architect&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Account management, authorization and password management can be tricky. For many developers, account management is a dark corner that doesn't get enough attention. For product managers and customers, the resulting experience often falls short of expectations.&lt;/p&gt;&lt;p&gt;Fortunately, &lt;a href=&quot;https://cloud.google.com/&quot; target=&quot;_blank&quot;&gt;Google Cloud Platform&lt;/a&gt; (GCP) brings several tools to help you make good decisions around the creation, secure handling and authentication of user accounts (in this context, anyone who identifies themselves to your system &lt;span&gt;—&lt;/span&gt; customers or internal users). Whether you're responsible for a website hosted in &lt;a href=&quot;https://cloud.google.com/kubernetes-engine/&quot; target=&quot;_blank&quot;&gt;Google Kubernetes Engine&lt;/a&gt;, an API on &lt;a href=&quot;https://cloud.google.com/apigee-api-management/&quot; target=&quot;_blank&quot;&gt;Apigee&lt;/a&gt;, an app using &lt;a href=&quot;https://firebase.google.com/&quot; target=&quot;_blank&quot;&gt;Firebase&lt;/a&gt; or other service with authenticated users, this post will lay out the best practices to ensure you have a safe, scalable, usable account authentication system.&lt;/p&gt;
&lt;h3&gt;1. Hash those passwords&lt;/h3&gt;
&lt;br/&gt;My most important rule for account management is to safely store sensitive user information, including their password. You must treat this data as sacred and handle it appropriately.&lt;p&gt;Do not store plaintext passwords under any circumstances. Your service should instead store a cryptographically strong hash of the password that cannot be reversed &lt;span&gt;—&lt;/span&gt; created with, for example, PBKDF2, SHA3, Scrypt, or Bcrypt. The hash should be &lt;a href=&quot;https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet#Use_a_cryptographically_strong_credential-specific_salt&quot; target=&quot;_blank&quot;&gt;salted&lt;/a&gt; with a value unique to that specific login credential. Do not use deprecated hashing technologies such as MD5, SHA1 and under no circumstances should you use reversible encryption or &lt;a href=&quot;https://www.schneier.com/blog/archives/2011/04/schneiers_law.html&quot; target=&quot;_blank&quot;&gt;try to invent your own hashing algorithm&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;You should design your system assuming it will be compromised eventually. Ask yourself &quot;If my database were exfiltrated today, would my users' safety and security be in peril on my service or other services they use? What can we do to mitigate the potential for damage in the event of a leak?&quot;&lt;/p&gt;&lt;p&gt;Another point: If you could possibly produce a user's password in plaintext at any time outside of immediately after them providing it to you, there's a problem with your implementation.&lt;/p&gt;&lt;h3&gt;2. Allow for third-party identity providers if possible&lt;/h3&gt;
&lt;br/&gt;Third-party identity providers enable you to rely on a trusted external service to authenticate a user's identity. Google, Facebook and Twitter are commonly used providers.&lt;p&gt;You can implement external identity providers alongside your existing internal authentication system using a platform such as &lt;a href=&quot;https://firebase.google.com/docs/auth/&quot; target=&quot;_blank&quot;&gt;Firebase Auth&lt;/a&gt;. There are a number of benefits that come with Firebase Auth, including simpler administration, smaller attack surface and a multi-platform SDK. We'll touch on more benefits throughout this list. See our &lt;a href=&quot;https://firebase.google.com/docs/auth/case-studies/&quot; target=&quot;_blank&quot;&gt;case studies&lt;/a&gt; on companies that were able to integrate Firebase Auth in as little as one day.&lt;/p&gt;&lt;h3&gt;3. Separate the concept of user identity and user account&lt;/h3&gt;
&lt;br/&gt;Your users are not an email address. They're not a phone number. They're not the unique ID provided by an OAUTH response. Your users are the culmination of their unique, personalized data and experience within your service. A well designed user management system has low coupling and high cohesion between different parts of a user's profile.&lt;p&gt;Keeping the concepts of user account and credentials separate will greatly simplify the process of implementing third-party identity providers, allowing users to change their username and linking multiple identities to a single user account. In practical terms, it may be helpful to have an internal global identifier for every user and link their profile and authentication identity via that ID as opposed to piling it all in a single record.&lt;/p&gt;&lt;h3&gt;4. Allow multiple identities to link to a single user account&lt;/h3&gt;
&lt;br/&gt;A user who authenticates to your service using their &lt;a href=&quot;https://firebase.google.com/docs/auth/web/password-auth&quot; target=&quot;_blank&quot;&gt;username and password&lt;/a&gt; one week might choose &lt;a href=&quot;https://firebase.google.com/docs/auth/web/google-signin&quot; target=&quot;_blank&quot;&gt;Google Sign-In&lt;/a&gt; the next without understanding that this could create a duplicate account. Similarly, a user may have very good reason to link multiple email addresses to your service. If you properly separated user identity and authentication, it will be a simple process to &lt;a href=&quot;https://firebase.google.com/docs/auth/web/account-linking&quot; target=&quot;_blank&quot;&gt;link several identities&lt;/a&gt; to a single user.&lt;p&gt;Your backend will need to account for the possibility that a user gets part or all the way through the signup process before they realize they're using a new third-party identity not linked to their existing account in your system. This is most simply achieved by asking the user to provide a common identifying detail, such as email address, phone or username. If that data matches an existing user in your system, require them to also authenticate with a known identity provider and link the new ID to their existing account.&lt;/p&gt;&lt;h3&gt;5. Don't block long or complex passwords&lt;/h3&gt;
&lt;br/&gt;NIST has recently updated guidelines on &lt;a href=&quot;https://pages.nist.gov/800-63-3/sp800-63b.html#appendix-astrength-of-memorized-secrets&quot; target=&quot;_blank&quot;&gt;password complexity and strength&lt;/a&gt;. Since you are (or will be very soon) using a strong cryptographic hash for password storage, a lot of problems are solved for you. Hashes will always produce a fixed-length output no matter the input length, so your users should be able to use passwords as long as they like. If you must cap password length, only do so based on the maximum POST size allowable by your servers. This is commonly well above 1MB. Seriously.&lt;p&gt;Your hashed passwords will be comprised of a small selection of known ASCII characters. If not, you can easily convert a binary hash to &lt;a href=&quot;https://en.wikipedia.org/wiki/Base64&quot; target=&quot;_blank&quot;&gt;Base64&lt;/a&gt;. With that in mind, you should allow your users to use literally any characters they wish in their password. If someone wants a password made of &lt;a href=&quot;https://en.wikipedia.org/wiki/Klingon_alphabets&quot; target=&quot;_blank&quot;&gt;Klingon&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Emoji#Unicode_blocks&quot; target=&quot;_blank&quot;&gt;Emoji&lt;/a&gt; and control characters with whitespace on both ends, you should have no technical reason to deny them.&lt;/p&gt;&lt;h3&gt;6. Don't impose unreasonable rules for usernames&lt;/h3&gt;
&lt;br/&gt;It's not unreasonable for a site or service to require usernames longer than two or three characters, block hidden characters and prevent whitespace at the beginning and end of a username. However, some sites go overboard with requirements such as a minimum length of eight characters or by blocking any characters outside of 7-bit ASCII letters and numbers.&lt;p&gt;A site with tight restrictions on usernames may offer some shortcuts to developers, but it does so at the expense of users and extreme cases will drive some users away.&lt;/p&gt;&lt;p&gt;There are some cases where the best approach is to assign usernames. If that's the case for your service, ensure the assigned username is user-friendly insofar as they need to recall and communicate it. Alphanumeric IDs should avoid visually ambiguous symbols such as &quot;Il1O0.&quot; You're also advised to perform a dictionary scan on any randomly generated string to ensure there are no unintended messages embedded in the username. These same guidelines apply to auto-generated passwords.&lt;/p&gt;&lt;h3&gt;7. Allow users to change their username&lt;/h3&gt;
&lt;br/&gt;It's surprisingly common in legacy systems or any platform that provides email accounts not to allow users to change their username. There are &lt;a href=&quot;https://www.computerworld.com/article/2838283/facebook-yahoo-prevent-use-of-recycled-email-addresses-to-hijack-accounts.html&quot; target=&quot;_blank&quot;&gt;very good reasons&lt;/a&gt; not to automatically release usernames for reuse, but long-term users of your system will eventually come up with a good reason to use a different username and they likely won't want to create a new account.&lt;p&gt;You can honor your users' desire to change their usernames by allowing aliases and letting your users choose the primary alias. You can apply any business rules you need on top of this functionality. Some orgs might only allow one username change per year or prevent a user from displaying anything but their primary username. Email providers might ensure users are thoroughly informed of the risks before detaching an old username from their account or perhaps forbid unlinking old usernames entirely.&lt;/p&gt;&lt;p&gt;Choose the right rules for your platform, but make sure they allow your users to grow and change over time.&lt;br/&gt;&lt;/p&gt;&lt;h3&gt;&lt;br/&gt;8. Let your users delete their accounts&lt;/h3&gt;
&lt;br/&gt;A surprising number of services have no self-service means for a user to delete their account and associated data. There are a number of good reasons for a user to close an account permanently and delete all personal data. These concerns need to be balanced against your security and compliance needs, but most regulated environments provide specific guidelines on data retention. A common solution to avoid compliance and hacking concerns is to let users schedule their account for automatic future deletion.&lt;p&gt;In some circumstances, you may be &lt;a href=&quot;http://ec.europa.eu/justice/data-protection/files/factsheets/factsheet_data_protection_en.pdf&quot; target=&quot;_blank&quot;&gt;legally required to comply&lt;/a&gt; with a user's request to delete their data in a timely manner. You also greatly increase your exposure in the event of a data breach where the data from &quot;closed&quot; accounts is leaked.&lt;/p&gt;&lt;h3&gt;9. Make a conscious decision on session length&lt;/h3&gt;
&lt;br/&gt;An often overlooked aspect of security and authentication is &lt;a href=&quot;https://firebase.google.com/docs/auth/web/auth-state-persistence&quot; target=&quot;_blank&quot;&gt;session length&lt;/a&gt;. Google puts a lot of effort into &lt;a href=&quot;https://support.google.com/accounts/answer/7162782?co=GENIE.Platform%3DAndroid&amp;amp;hl=en&quot; target=&quot;_blank&quot;&gt;ensuring users are who they say they are&lt;/a&gt; and will double-check based on certain events or behaviors. Users can take steps to &lt;a href=&quot;https://support.google.com/accounts/answer/7519408?hl=en&amp;amp;ref_topic=7189123&quot; target=&quot;_blank&quot;&gt;increase their security even further&lt;/a&gt;.&lt;p&gt;Your service may have good reason to keep a session open indefinitely for non-critical analytics purposes, but there should be &lt;a href=&quot;https://pages.nist.gov/800-63-3/sp800-63b.html#aal1reauth&quot; target=&quot;_blank&quot;&gt;thresholds&lt;/a&gt; after which you ask for password, 2nd factor or other user verification.&lt;/p&gt;&lt;p&gt;Consider how long a user should be able to be inactive before re-authenticating. Verify user identity in all active sessions if someone performs a password reset. Prompt for authentication or 2nd factor if a user changes core aspects of their profile or when they're performing a sensitive action. Consider whether it makes sense to disallow logging in from more than one device or location at a time.&lt;/p&gt;&lt;p&gt;When your service does expire a user session or require re-authentication, prompt the user in real-time or provide a mechanism to preserve any activity they have unsaved since they were last authenticated. It's very frustrating for a user to fill out a long form, submit it some time later and find out all their input has been lost and they must log in again.&lt;/p&gt;&lt;h3&gt;10. Use 2-Step Verification&lt;/h3&gt;
&lt;br/&gt;Consider the practical impact on a user of having their account stolen when choosing from &lt;a href=&quot;https://www.google.com/landing/2step/&quot; target=&quot;_blank&quot;&gt;2-Step Verification&lt;/a&gt; (also known as 2-factor authorization or just 2FA) methods. SMS 2FA auth has been &lt;a href=&quot;https://pages.nist.gov/800-63-3/sp800-63b.html&quot; target=&quot;_blank&quot;&gt;deprecated by NIST&lt;/a&gt; due to multiple weaknesses, however, it may be the most secure option your users will accept for what they consider a trivial service. Offer the most secure 2FA auth you reasonably can. Enabling third-party identity providers and piggybacking on their 2FA is a simple means to boost your security without great expense or effort.&lt;h3&gt;11. Make user IDs case insensitive&lt;/h3&gt;
&lt;br/&gt;Your users don't care and may not even remember the exact case of their username. Usernames should be fully case-insensitive. It's trivial to store usernames and email addresses in all lowercase and transform any input to lowercase before comparing.&lt;p&gt;Smartphones represent an ever-increasing percentage of user devices. Most of them offer autocorrect and automatic capitalization of plain-text fields. Preventing this behavior at the UI level might not be desirable or completely effective, and your service should be robust enough to handle an email address or username that was unintentionally auto-capitalized.&lt;/p&gt;&lt;h3&gt;12. Build a secure auth system&lt;/h3&gt;
&lt;br/&gt;If you're using a service like Firebase Auth, a lot of security concerns are handled for you automatically. However, your service will always need to be engineered properly to prevent abuse. Core considerations include implementing a &lt;a href=&quot;https://firebase.google.com/docs/auth/web/manage-users#send_a_password_reset_email&quot; target=&quot;_blank&quot;&gt;password reset&lt;/a&gt; instead of password retrieval, detailed account activity logging, rate limiting login attempts, locking out accounts after too many unsuccessful login attempts and requiring 2-factor authentication for unrecognized devices or accounts that have been idle for extended periods. There are many more aspects to a secure authentication system, so please see the section below for links to more information.&lt;br/&gt;&lt;h3&gt;&lt;br/&gt;Further reading&lt;/h3&gt;
&lt;br/&gt;There are a number of excellent resources available to guide you through the process of developing, updating or migrating your account and authentication management system. I recommend the following as a starting place:&lt;br/&gt;&lt;/noscript&gt;</description>
<pubDate>Sat, 03 Feb 2018 22:40:00 +0000</pubDate>
<dc:creator>mooreds</dc:creator>
<og:title>12 best practices for user account, authorization and password management</og:title>
<og:url>https://cloudplatform.googleblog.com/2018/01/12-best-practices-for-user-account.html</og:url>
<og:type>article</og:type>
<og:description>By Ian Maddox, GCP Solutions Architect Account management, authorization and password management can be tricky. For many developers, accou...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://cloudplatform.googleblog.com/2018/01/12-best-practices-for-user-account.html</dc:identifier>
</item>
<item>
<title>“Invisible Electrostatic Wall” at 3M adhesive tape plant (1996)</title>
<link>http://amasci.com/weird/unusual/e-wall.html?utm=email</link>
<guid isPermaLink="true" >http://amasci.com/weird/unusual/e-wall.html?utm=email</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/AskReddit/comments/4jb24s/what_are_some_weird_real_life_xfiles_type/d35db1i/&quot;&gt;echisholm&lt;/a&gt; 5/2016&lt;br/&gt;&lt;em&gt;Have a relative (sort of) who works at a 3M plant. Shit still occasionally happens.&lt;br/&gt;&amp;gt; You can't just say that and go away!! How are you not irresistibly&lt;br/&gt;&amp;gt; interested in that?? I would've interrogated that relative so hard&lt;br/&gt;It just came up in passing at Thanksgiving! I don't really know him that well; he's an in-law. He mentioned being able to throw small washers and bolts at the field and watching them get repelled. People got interested, and so someone came with a voltmeter, and after throwing a couple more, they checked for voltage, and there was a residual charge after they finally caught on on a plastic sheet to prevent immediate grounding. It also had a very slight magnetic field. It's apparently fairly common, but engineering hasn't come up with a solid explanation why.&lt;/em&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ALSO: &lt;a href=&quot;https://www.reddit.com/r/AskReddit/comments/4jb24s/what_are_some_weird_real_life_xfiles_type/d35dxw1/&quot;&gt;dc469&lt;/a&gt; 5/2016&lt;br/&gt;&lt;em&gt;I met this guy at an ESD meeting in austin once. He said the strength of the field maxed out his equipment at a distance so he couldn't get a maximum measurement.&lt;br/&gt;After he published the paper he was contacted by NASA and all the three letter agencies asking for more info. He wanted to experiment around with it but no company had millions to throw into such a project (presumably, the government did). It had to be a pretty narrow window of temperature, pressure, humidity, etc. They kept the garage door open so that's where the insects and sparrows got sucked in (which obviously ruined the product).&lt;br/&gt;He said it was actually known to the technicians for awhile before he experienced it and they just were kinda like &quot;meh&quot;. Eventually they fixed the grounding issue on the machine and the problem never popped up again.&lt;br/&gt;edit: found the ESD website. David Swenson apparently is still with them on their board of directors. http://centxesdassoc.homestead.com/&lt;br/&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;div id=&quot;&quot;&gt;
&lt;p&gt;&lt;span&gt;Problems: coulomb forces would be expected to &lt;em&gt;attract&lt;/em&gt; a person into the &quot;chamber&quot; formed by the PP film, and the attractive force should increase linearly across distance. There should be no &quot;wall&quot; in the center, a discrete wall is repulsive, also nonlinear.&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;If for some reason a person was repelled from the center of the chamber rather than being attracted, there still should be no &quot;wall,&quot; since the repulsion force should exist over a large distance; it should act like a deep pillow which exerts more and more force as one moves deeper into it. Large fuzzy fields, this is how magnets and iron behave, and this is how e-fields and conductive objects should also behave.&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;A thought: unspooling of film typically generates a much higher net charge on the long piece of film than on the small surface of the spool. However, since charge is created in pairs, and net charge is conserved, the imbalances of charge &lt;em&gt;must&lt;/em&gt; be equal and opposite. The charge on the entire length of moving film &lt;em&gt;must&lt;/em&gt; be equal in magnitude to the charge on the spool. Yet the charge on the film is very large and is continuously increasing. The limited surface-charge on the spool required that opposite charge is being &lt;em&gt;lost through some unseen path.&lt;/em&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Very probably the spool is spewing out enormous quantities of ionized air with polarity opposite that of the charge on the moving plastic film.&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Charged air would be created by discharge in the cleft between film and spool as the film was peeled from the spool. I wonder if film was being peeled from the top of the spool, so that any ionized air created in the cleft would be launched into the &quot;tent-chamber&quot; region? (If it was peeled from the bottom of the spool, the charged air would end up outside the &quot;tent.&quot;) Or, if a corona discharge arises in the cleft between film and spool, perhaps the UV and e-fields of this corona can ionize the air on both sides of the exiting plastic film, and spray the charged air everywhere.&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;So, if the charged &quot;tent&quot; of film is negative in the above situation, and if a large quantity of positively charged air is being generated by the spool, then perhaps the &quot;invisible wall&quot; is caused by a cloud of suspended air ions held in position by e-fields. Perhaps it's a pressure gradient created by ionized air trapped under the tent by electrostatic attraction. Yet again this effect would be expected to create a diffuse zone of increasing force, not a &quot;wall&quot;, but an &quot;invisible pillow.&quot; Added note: concrete floors behave as conductors (resistors) in this situation. Where megavolts at microamps are involved, the division between insulators and conductors is at 10^6/10^-6 = 1000 gigaohms. Concrete resistivity is in the realm of megohms, so it behaves like a grounded metal sheet.&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;However, a volume of charged air is somewhat analogous to iron filings near a magnet. If a solid sheet of iron filings is held in place by a magnet, then a literal &quot;wall&quot; is created, and this wall will resist penetration by nonferrous objects. If in the above manufacturing plant, a sheet of highly charged air is for some reason being held in place by the fields created by the charged film, then a transparent &quot;wall&quot; made of charged air would come into being. It might produce pressures on surfaces, and resist penetration by human bodies.&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;My question is this: if the entire situation could be turned on its side, so the &quot;invisible wall&quot; became an &quot;invisible floor&quot;, could a person *&lt;em&gt;stand&lt;/em&gt;* on it? Have we discovered the long-sought &quot;Zero-G waterbed?&quot; :) - B.B.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Sat, 03 Feb 2018 20:27:22 +0000</pubDate>
<dc:creator>sergiotapia</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://amasci.com/weird/unusual/e-wall.html?utm=email</dc:identifier>
</item>
</channel>
</rss>