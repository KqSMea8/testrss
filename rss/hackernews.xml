<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Ruby 2.5.0 Released</title>
<link>https://www.ruby-lang.org/en/news/2017/12/25/ruby-2-5-0-released/</link>
<guid isPermaLink="true" >https://www.ruby-lang.org/en/news/2017/12/25/ruby-2-5-0-released/</guid>
<description>&lt;p class=&quot;post-info&quot;&gt;Posted by naruse on 25 Dec 2017&lt;/p&gt;
&lt;p&gt;We are pleased to announce the release of Ruby 2.5.0.&lt;/p&gt;
&lt;p&gt;Ruby 2.5.0 is the first stable release of the Ruby 2.5 series. It introduces many new features and performance improvements. The notable changes are as follows:&lt;/p&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;rescue&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;/&lt;code&gt;ensure&lt;/code&gt; are now allowed to be used directly with &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt; blocks. &lt;a href=&quot;https://bugs.ruby-lang.org/issues/12906&quot;&gt;[Feature #12906]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;yield_self&lt;/code&gt; to yield given block in its context. Unlike &lt;code&gt;tap&lt;/code&gt;, it returns the result of the block. &lt;a href=&quot;https://bugs.ruby-lang.org/issues/6721&quot;&gt;[Feature #6721]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support branch coverage and method coverage measurement. The branch coverage indicates which branches are executed and which are not. The method coverage indicates which methods are invoked and which are not. By running the test suite with these new features, you will know which branches and methods are executed, and evaluate total coverage of the test suite more strictly. &lt;a href=&quot;https://bugs.ruby-lang.org/issues/13901&quot;&gt;[Feature #13901]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hash#slice &lt;a href=&quot;https://bugs.ruby-lang.org/issues/8499&quot;&gt;[Feature #8499]&lt;/a&gt; and Hash#transform_keys &lt;a href=&quot;https://bugs.ruby-lang.org/issues/13583&quot;&gt;[Feature #13583]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Struct.new can create classes that accept keyword arguments. &lt;a href=&quot;https://bugs.ruby-lang.org/issues/11925&quot;&gt;[Feature #11925]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Enumerable#any?,all?,none? and one? accept a pattern argument &lt;a href=&quot;https://bugs.ruby-lang.org/issues/11286&quot;&gt;[Feature #11286]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Top-level constant look-up is no longer available. &lt;a href=&quot;https://bugs.ruby-lang.org/issues/11547&quot;&gt;[Feature #11547]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;One of our most loved libraries, pp.rb, is now automatically loaded. You no longer have to write &lt;code&gt;require &quot;pp&quot;&lt;/code&gt;. &lt;a href=&quot;https://bugs.ruby-lang.org/issues/14123&quot;&gt;[Feature #14123]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Print backtrace and error message in reverse order (oldest call first, most recent call last). When a long backtrace appears on your terminal (TTY), you can easily find the cause line at the bottom of the backtrace. Note that the order is reversed only when backtrace is printed out to the terminal directly. &lt;a href=&quot;https://bugs.ruby-lang.org/issues/8661&quot;&gt;[Feature #8661]&lt;/a&gt; [experimental]&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Performance improvements&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;About 5-10% performance improvement by removing all &lt;code&gt;trace&lt;/code&gt; instructions from overall bytecode (instruction sequences). The &lt;code&gt;trace&lt;/code&gt; instruction was added to support the &lt;code&gt;TracePoint&lt;/code&gt;. However, in most cases, &lt;code&gt;TracePoint&lt;/code&gt; is not used and &lt;code&gt;trace&lt;/code&gt; instructions are pure overhead. Instead, now we use a dynamic instrumentation technique. See &lt;a href=&quot;https://bugs.ruby-lang.org/issues/14104&quot;&gt;[Feature #14104]&lt;/a&gt; for more details.&lt;/li&gt;
&lt;li&gt;Block passing by a block parameter (e.g. &lt;code&gt;def foo(&amp;amp;b); bar(&amp;amp;b); end&lt;/code&gt;) is about 3 times faster than Ruby 2.4 by “Lazy Proc allocation” technique. &lt;a href=&quot;https://bugs.ruby-lang.org/issues/14045&quot;&gt;[Feature #14045]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mutex is rewritten to be smaller and faster. &lt;a href=&quot;https://bugs.ruby-lang.org/issues/13517&quot;&gt;[Feature #13517]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ERB now generates code from a template which runs twice as fast as Ruby 2.4.&lt;/li&gt;
&lt;li&gt;Improve performance of some built-in methods including &lt;code&gt;Array#concat&lt;/code&gt;, &lt;code&gt;Enumerable#sort_by&lt;/code&gt;, &lt;code&gt;String#concat&lt;/code&gt;, &lt;code&gt;String#index&lt;/code&gt;, &lt;code&gt;Time#+&lt;/code&gt; and more.&lt;/li&gt;
&lt;li&gt;IO.copy_stream uses copy_file_range(2) to copy offload &lt;a href=&quot;https://bugs.ruby-lang.org/issues/13867&quot;&gt;[Feature #13867]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Other notable changes since 2.4&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;SecureRandom now prefers OS-provided sources over OpenSSL. &lt;a href=&quot;https://bugs.ruby-lang.org/issues/9569&quot;&gt;[Bug #9569]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Promote cmath, csv, date, dbm, etc, fcntl, fiddle, fileutils, gdbm, ipaddr, scanf, sdbm, stringio, strscan, webrick, zlib from standard libraries to default gems.&lt;/li&gt;
&lt;li&gt;Update to &lt;a href=&quot;https://github.com/k-takata/Onigmo/&quot;&gt;Onigmo&lt;/a&gt; 6.1.3.
&lt;/li&gt;
&lt;li&gt;Update to Psych 3.0.2.&lt;/li&gt;
&lt;li&gt;Update to RubyGems 2.7.3.&lt;/li&gt;
&lt;li&gt;Update to RDoc 6.0.1.
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/ruby/rdoc/pull/512&quot;&gt;Switch the lexer from IRB based one to Ripper&lt;/a&gt;. This dramatically improves the performance of document generation.&lt;/li&gt;
&lt;li&gt;Fix a significant amount of bugs that existed over ten years.&lt;/li&gt;
&lt;li&gt;Add support for new Ruby syntax from the latest versions.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Update supported Unicode version to 10.0.0.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Thread.report_on_exception&lt;/code&gt; is now set to true by default. This change helps debugging of multi-threaded programs. &lt;a href=&quot;https://bugs.ruby-lang.org/issues/14143&quot;&gt;[Feature #14143]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IO#write now receives multiple arguments &lt;a href=&quot;https://bugs.ruby-lang.org/issues/9323&quot;&gt;[Feature #9323]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;See &lt;a href=&quot;https://github.com/ruby/ruby/blob/v2_5_0/NEWS&quot;&gt;NEWS&lt;/a&gt; or &lt;a href=&quot;https://github.com/ruby/ruby/compare/v2_4_0...v2_5_0&quot;&gt;commit logs&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;With those changes, &lt;a href=&quot;https://github.com/ruby/ruby/compare/v2_4_0...v2_5_0&quot;&gt;6158 files changed, 348484 insertions(+), 82747 deletions(-)&lt;/a&gt; since Ruby 2.4.0!&lt;/p&gt;
&lt;p&gt;Merry Christmas, Happy Holidays, and enjoy programming with Ruby 2.5!&lt;/p&gt;
&lt;h2&gt;Download&lt;/h2&gt;
&lt;ul readability=&quot;7.4609665427509&quot;&gt;&lt;li readability=&quot;2.4821428571429&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz&quot;&gt;https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SIZE:   15834941 bytes
SHA1:   58f77301c891c1c4a08f301861c26b1ea46509f6
SHA256: 46e6f3630f1888eb653b15fa811d77b5b1df6fd7a3af436b343cfe4f4503f2ab
SHA512: 0712fe68611f5d0cd6dd54b814f825478e64b6a62bdf67bce431f4dca2dc00b1a33f77bebfbcd0a151118a1152554ab457decde435b424aa1f004bc0aa40580d
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;2.5045045045045&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.zip&quot;&gt;https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.zip&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SIZE:   19495617 bytes
SHA1:   700b6f55d689a5c8051c8c292b9e77a1b50bf96e
SHA256: 94559ea6e3c619423da604e503ce1dc1c465d6e0747a07fbdc5f294acaf14c24
SHA512: e4324064cee8c65b80192e3eff287e915d2d40464d300744c36fb326ae4b1846911400a99d4332192d8a217009d3a5209b43eb5e8bc0b739035bef89cc493e84
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;2.4747774480712&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.bz2&quot;&gt;https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.bz2&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SIZE:   13955820 bytes
SHA1:   827b9a3bcffa86d1fc9ed96d403cb9dc37731688
SHA256: d87eb3021f71d4f62e5a5329628ac9a6665902173296e551667edd94362325cc
SHA512: 8f6fdf6708e7470f55bc009db2567cd8d4e633ad0678d83a015441ecf5b5d88bd7da8fb8533a42157ff83b74d00b6dc617d39bbb17fc2c6c12287a1d8eaa0f2c
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;2.4821428571429&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.xz&quot;&gt;https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.xz&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SIZE:   11292472 bytes
SHA1:   9c7babcf9e299be3f197d9091024ae458f1a1273
SHA256: 1da0afed833a0dab94075221a615c14487b05d0c407f991c8080d576d985b49b
SHA512: 55714a33d7661fe8b432f73c34fd67b49699f8b79df1cbd680a74899124d31111ab0f444677672aac1ba725820182940d485efb2db0bf2bc96737c5d40c54578
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Mon, 25 Dec 2017 10:37:48 +0000</pubDate>
<dc:creator>phereford</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.ruby-lang.org/en/news/2017/12/25/ruby-2-5-0-released/</dc:identifier>
</item>
<item>
<title>NVIDIA GeForce driver deployment in datacenters is forbidden now</title>
<link>http://www.nvidia.com/content/DriverDownload-March2009/licence.php?lang=us&amp;type=GeForce</link>
<guid isPermaLink="true" >http://www.nvidia.com/content/DriverDownload-March2009/licence.php?lang=us&amp;type=GeForce</guid>
<description>
&lt;div id=&quot;greenBand&quot;&gt;&lt;img xmlns=&quot;&quot; class=&quot;sectionTitle&quot; alt=&quot;Download Drivers&quot; border=&quot;0&quot; height=&quot;22&quot; width=&quot;209&quot; src=&quot;http://images.nvidia.com/templates/2009/section_titles/title_download_drivers_en.png&quot;/&gt;&lt;/div&gt;


&lt;div readability=&quot;12.448700410397&quot;&gt;
&lt;div id=&quot;mainContent&quot; readability=&quot;132.95212038304&quot;&gt;
&lt;p&gt;IMPORTANT NOTICE -- READ CAREFULLY: This License For Customer Use of NVIDIA GeForce Software (&quot;LICENSE&quot;) is the agreement which governs use of the GeForce software of NVIDIA Corporation and its subsidiaries (&quot;NVIDIA&quot;) downloadable herefrom, including computer software and associated materials (&quot;SOFTWARE&quot;). By downloading, installing, copying, or otherwise using the SOFTWARE, you agree to be bound by the terms of this LICENSE. If you do not agree to the terms of this LICENSE, do not download the SOFTWARE.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RECITALS&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;15&quot;&gt;
&lt;p&gt;Use of NVIDIA's products requires three elements: the SOFTWARE, the hardware on a graphics controller board, and a personal computer. The SOFTWARE is protected by copyright laws and international copyright treaties, as well as other intellectual property laws and treaties. The SOFTWARE is not sold, and instead is only licensed for use, strictly in accordance with this LICENSE. The hardware is protected by various patents, and is sold, but this LICENSE does not cover that sale. This LICENSE sets forth the terms and conditions of the SOFTWARE use only.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;1. DEFINITIONS&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;1.1&lt;/strong&gt; Customer. Customer means the entity or individual that downloads the SOFTWARE.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;2. GRANT OF LICENSE&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;17&quot;&gt;
&lt;p&gt;&lt;strong&gt;2.1&lt;/strong&gt; Rights and Limitations of Grant. NVIDIA hereby grants Customer a non-exclusive, non-transferable license to install and use the SOFTWARE for use with NVIDIA GeForce or Titan branded hardware products owned by Customer, subject to the following:&lt;/p&gt;
&lt;blockquote readability=&quot;31&quot;&gt;
&lt;p&gt;&lt;strong&gt;2.1.1&lt;/strong&gt; Rights. Customer may install and use multiple copies of the SOFTWARE on a shared computer or concurrently on different computers, and make multiple back-up copies of the SOFTWARE, solely for Customer's use within Customer's Enterprise. &quot;Enterprise&quot; shall mean individual use by Customer or any legal entity (such as a corporation or university) and the subsidiaries it owns by more than fifty percent (50%).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1.2&lt;/strong&gt; Linux/FreeBSD Exception. Notwithstanding the foregoing terms of Section 2.1.1, SOFTWARE designed exclusively for use on the Linux or FreeBSD operating systems, or other operating systems derived from the source code to these operating systems, may be copied and redistributed, provided that the binary files thereof are not modified in any way (except for unzipping of compressed files).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1.3&lt;/strong&gt; Limitations.&lt;/p&gt;
&lt;blockquote readability=&quot;27&quot;&gt;
&lt;p&gt;No Modification or Reverse Engineering. Customer may not modify (except as provided in Section 2.1.2), reverse engineer, decompile, or disassemble the SOFTWARE, nor attempt in any other manner to obtain the source code.&lt;/p&gt;
&lt;p&gt;No Separation of Components. The SOFTWARE is licensed as a single product. Its component parts may not be separated for use on more than one computer, nor otherwise used separately from the other parts.&lt;/p&gt;
&lt;p&gt;No Sublicensing or Distribution. Customer may not sell, rent, sublicense, distribute or transfer the SOFTWARE; or use the SOFTWARE for public performance or broadcast; or provide commercial hosting services with the SOFTWARE.&lt;/p&gt;
&lt;p&gt;No Datacenter Deployment. The SOFTWARE is not licensed for datacenter deployment, except that blockchain processing in a datacenter is permitted.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;3. TERMINATION&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;15&quot;&gt;
&lt;p&gt;This LICENSE will automatically terminate if Customer fails to comply with any of the terms and conditions hereof. In such event, Customer must destroy all copies of the SOFTWARE and all of its component parts.&lt;/p&gt;
&lt;p&gt;Defensive Suspension. If Customer commences or participates in any legal proceeding against NVIDIA, then NVIDIA may, in its sole discretion, suspend or terminate all license grants and any other rights provided under this LICENSE during the pendency of such legal proceedings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;4. OWNERSHIP&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;18&quot;&gt;
&lt;p&gt;All title and intellectual property rights in and to the SOFTWARE (including but not limited to all images, photographs, animations, video, audio, music, text, and other information incorporated into the SOFTWARE), the accompanying materials, and any copies of the SOFTWARE, are owned by NVIDIA or its suppliers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;5. APPLICABLE LAW AND BINDING ARBITRATION&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;56&quot;&gt;
&lt;p&gt;Governing Law. This LICENSE shall be deemed to have been made in, and shall be construed pursuant to, the laws of the State of Delaware, without regard to or application of its conflict of laws rules or principles. The United Nations Convention on Contracts for the International Sale of Goods is specifically disclaimed.&lt;/p&gt;
&lt;p&gt;Arbitration. For any claim against or dispute or controversy with NVIDIA relating to this LICENSE or that may arise from it or out of use of the SOFTWARE (collectively, &quot;Disputes&quot;), Customer agrees to first contact NVIDIA by U.S. Mail at NVIDIA Corporation, ATTN: Legal, 2788 San Tomas Expressway, Santa Clara, California, 95051 and attempt to resolve the Dispute with NVIDIA informally. In the unlikely event that NVIDIA has not been able to resolve such Dispute it has with Customer within 60 days of Customer's original informal claim (or sooner if, in NVIDIA's opinion, a Dispute is not likely to be resolved within 60 days), Customer and NVIDIA each agree to resolve any such Dispute (excluding any NVIDIA claims for injunctive or other equitable relief) by binding arbitration before an arbitrator from Judicial Mediation and Arbitration Services (&quot;JAMS&quot;) located in Santa Clara County, California under the Optional Expedited Arbitration Procedures then in effect for JAMS, except as provided herein. The arbitration will be conducted in Santa Clara County, California (or the nearest JAMS Office to Santa Clara County), unless Customer requests an in-person hearing in Customer's hometown or Customer and NVIDIA agree otherwise. Nothing in this section shall prevent either party from seeking injunctive or other equitable relief from the courts as necessary to prevent the actual or threatened infringement, misappropriation, or violation of that party's data security, intellectual property rights, or other proprietary rights. If for any reason this agreement to arbitrate is found not to apply to a Dispute and as a result a Dispute proceeds in court rather than in arbitration, the dispute shall be exclusively brought in state or federal court in Santa Clara County, California.&lt;/p&gt;
&lt;p&gt;Class Action &amp;amp; Jury Trial Waiver. ALL CLAIMS MUST BE BROUGHT IN THE PARTIES' INDIVIDUAL CAPACITY, AND NOT AS A PLAINTIFF OR CLASS MEMBER IN ANY PURPORTED CLASS OR REPRESENTATIVE PROCEEDING. THIS WAIVER APPLIES TO CLASS ARBITRATION UNLESS SUCH ARBITRATION IS NECESSARY TO EFFECTUATE THE ENFORCEMENT OF THE COURT CLASS ACTION WAIVER OR IN THE EVENT THAT CLASS ARBITRATION IS EXPRESSLY AGREED TO BY NVIDIA. CUSTOMER AGREES THAT, BY ENTERING INTO THIS LICENSE, CUSTOMER AND NVIDIA ARE EACH WAIVING THE RIGHT TO A TRIAL BY JURY OR TO PARTICIPATE IN A CLASS ACTION.&lt;/p&gt;
&lt;p&gt;Right to Opt Out. CUSTOMER MAY OPT OUT OF THE FOREGOING ARBITRATION AND CLASS ACTION/JURY TRIAL WAIVER PROVISION OF THIS LICENSE BY NOTIFYING NVIDIA IN WRITING WITHIN 30 DAYS OF COMMENCEMENT OF USE OF THE SOFTWARE UNDER THIS LICENSE. SUCH WRITTEN NOTIFICATION MUST BE SENT TO ATTN: LEGAL, 2788 SAN TOMAS EXPRESSWAY, SANTA CLARA, CALIFORNIA, 95051 AND MUST INCLUDE (1) Customer's NAME, (2) Customer's ADDRESS, (3) THE REFERENCE TO GEFORCE SOFTWARE AS THE SOFTWARE THE NOTICE RELATES TO, AND (4) A CLEAR STATEMENT INDICATING THAT CUSTOMER DOES NOT WISH TO RESOLVE DISPUTES THROUGH ARBITRATION AND DEMONSTRATING COMPLIANCE WITH THE 30 DAY TIME LIMIT TO OPT OUT.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;6. DISCLAIMER OF WARRANTIES AND LIMITATION OF LIABILITY&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;37&quot;&gt;
&lt;p&gt;&lt;strong&gt;6.1&lt;/strong&gt; No Warranties. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THE SOFTWARE IS PROVIDED &quot;AS IS&quot; AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES OF ANY KIND OR NATURE, WHETHER EXPRESS, IMPLIED, OR STATUTORY, RELATING TO OR ARISING FROM THE SOFTWARE, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. Without limiting the foregoing, Customer is solely responsible for determining and verifying that the SOFTWARE that Customer obtains and installs is the appropriate version for Customer's model of graphics controller board, operating system, and computer hardware.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.2&lt;/strong&gt; Limitations of Liability. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER, OR FOR DAMAGES FOR LOSS OF BUSINESS PROFITS, LOSS OF DATA, BUSINESS INTERRUPTION, OR LOSS OF BUSINESS INFORMATION ARISING OUT OF THE USE OF OR INABILITY TO USE THE SOFTWARE, EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. IN NO EVENT WILL NVIDIA's TOTAL CUMULATIVE LIABILITY UNDER OR ARISING OUT OF THIS LICENSE EXCEED THE NET AMOUNT PAID TO NVIDIA FOR Customer's USE OF THE PARTICULAR SOFTWARE UPON WHICH LIABILITY IS BASED, OR US$10.00 IF NVIDIA RECEIVED NO FEES FOR Customer's USE OF THE SOFTWARE.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;7. SYSTEM UPDATES&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;30.302390998594&quot;&gt;
&lt;p&gt;Customer hereby agrees and acknowledges that the SOFTWARE may access and collect information about, update, and configure Customer's system in order to properly optimize such system for use with the SOFTWARE. To the extent that Customer uses the SOFTWARE, Customer hereby consents to all of the foregoing, and represent and warrant that Customer has the right to grant such consent. In addition, Customer agrees that Customer is solely responsible for maintaining appropriate data backups and system restore points for Customer's system, and that NVIDIA will have no responsibility for any damage or loss to such system (including loss of data or access) arising from or relating to (a) any changes to the configuration, application settings, environment variables, registry, drivers, BIOS, or other attributes of the system (or any part of such system) initiated through the SOFTWARE; or (b) installation of any SOFTWARE or third party software patches through the NVIDIA update service. The SOFTWARE may contain links to websites and services. NVIDIA encourages Customer to review the privacy statements on those sites and services that Customer chooses to visit so that Customer can understand how they may collect, use and share Customer's personal information. NVIDIA is not responsible for the privacy statements or practices of sites and services controlled by other companies or organizations.&lt;/p&gt;
&lt;p&gt;Registration and Customer Information. Customer represents and warrants that the information that Customer has furnished in connection with its registration for the SOFTWARE is complete and accurate. To the extent that Customer provides to NVIDIA during registration or otherwise personal data, Customer also acknowledges that such information will be collected, used, and disclosed by NVIDIA in accordance with NVIDIA's privacy policy, available at URL &lt;a href=&quot;http://www.nvidia.com/object/privacy_policy.html&quot;&gt;http://www.nvidia.com/object/privacy_policy.html&lt;/a&gt;. If Customer does not wish the SOFTWARE to provide system updates as described in this Section 7, uncheck &quot;Automatically check for updates&quot; in the &quot;Preferences&quot; tab of the applicable NVIDIA update control panel for the SOFTWARE.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;8. MISCELLANEOUS&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;18&quot;&gt;
&lt;p&gt;If any provision of this LICENSE is inconsistent with, or cannot be fully enforced under, the law, such provision will be construed as limited to the extent necessary to be consistent with and fully enforceable under the law. This LICENSE is the final, complete and exclusive agreement between the parties relating to the subject matter hereof, and supersedes all prior or contemporaneous understandings and agreements relating to such subject matter, whether oral or written. This LICENSE may only be modified in writing signed by an authorized officer of NVIDIA. Customer agrees that it will not ship, transfer or export the SOFTWARE into any country, or use the SOFTWARE in any manner, prohibited by the United States Bureau of Industry and Security or any applicable export laws, restrictions or regulations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 25 Dec 2017 00:46:06 +0000</pubDate>
<dc:creator>f2n</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.nvidia.com/content/DriverDownload-March2009/licence.php?lang=us&amp;type=GeForce</dc:identifier>
</item>
<item>
<title>Computer latency: 1977-2017</title>
<link>https://danluu.com/input-lag/</link>
<guid isPermaLink="true" >https://danluu.com/input-lag/</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;title&gt;Computer latency: 1977-2017&lt;/title&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;/&gt;&lt;link rel=&quot;icon&quot; href=&quot;data:;base64,iVBORw0KGgo=&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;395.95309150519&quot;&gt;
&lt;p&gt;&lt;strong&gt;Computer latency: 1977-2017&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;I have this nagging feeling that the computers I use today feel slower than the computers I used as a kid. I don’t trust this kind of feeling because human perception has been shown to be unreliable in empirical studies, so I carried around a high-speed camera and measured the response latency of devices I’ve run into in the past few months. Here are the results:&lt;/p&gt;
&lt;table readability=&quot;2&quot;&gt;&lt;tr&gt;&lt;th&gt;computer&lt;/th&gt;
&lt;th&gt;latency&lt;br/&gt;(ms)&lt;/th&gt;
&lt;th&gt;year&lt;/th&gt;
&lt;th&gt;clock&lt;/th&gt;
&lt;th&gt;# T&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;apple 2e&lt;/td&gt;
&lt;td bgcolor=&quot;#FFFFCC&quot;&gt;30&lt;/td&gt;
&lt;td bgcolor=&quot;#54278F&quot;&gt;&lt;span&gt;1983&lt;/span&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#08306B&quot;&gt;&lt;span&gt;1 MHz&lt;/span&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#08306B&quot;&gt;&lt;span&gt;3.5k&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;ti 99/4a&lt;/td&gt;
&lt;td bgcolor=&quot;#FFFFCC&quot;&gt;40&lt;/td&gt;
&lt;td bgcolor=&quot;#3F007D&quot;&gt;&lt;span&gt;1981&lt;/span&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#08519C&quot;&gt;&lt;span&gt;3 MHz&lt;/span&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#08306B&quot;&gt;&lt;span&gt;8k&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;custom haswell-e &lt;em&gt;165Hz&lt;/em&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#FFEDA0&quot;&gt;50&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2014&lt;/td&gt;
&lt;td bgcolor=&quot;#DEEBF7&quot;&gt;3.5 GHz&lt;/td&gt;
&lt;td bgcolor=&quot;#F7FBFF&quot;&gt;2G&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;commodore pet 4016&lt;/td&gt;
&lt;td bgcolor=&quot;#FFEDA0&quot;&gt;60&lt;/td&gt;
&lt;td bgcolor=&quot;#3F007D&quot;&gt;&lt;span&gt;1977&lt;/span&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#08306B&quot;&gt;&lt;span&gt;1 MHz&lt;/span&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#08306B&quot;&gt;&lt;span&gt;3.5k&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;sgi indy&lt;/td&gt;
&lt;td bgcolor=&quot;#FFEDA0&quot;&gt;60&lt;/td&gt;
&lt;td bgcolor=&quot;#807DBA&quot;&gt;1993&lt;/td&gt;
&lt;td bgcolor=&quot;#6BAED6&quot;&gt;.1 GHz&lt;/td&gt;
&lt;td bgcolor=&quot;#4292C6&quot;&gt;1.2M&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;custom haswell-e &lt;em&gt;120Hz&lt;/em&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#FFEDA0&quot;&gt;60&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2014&lt;/td&gt;
&lt;td bgcolor=&quot;#DEEBF7&quot;&gt;3.5 GHz&lt;/td&gt;
&lt;td bgcolor=&quot;#F7FBFF&quot;&gt;2G&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;thinkpad 13 &lt;strong&gt;chromeos&lt;/strong&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#FED976&quot;&gt;70&lt;/td&gt;
&lt;td bgcolor=&quot;#FCFBFD&quot;&gt;2017&lt;/td&gt;
&lt;td bgcolor=&quot;#DEEBF7&quot;&gt;2.3 GHz&lt;/td&gt;
&lt;td bgcolor=&quot;#DEEBF7&quot;&gt;1G&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;imac g4 &lt;strong&gt;os 9&lt;/strong&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#FED976&quot;&gt;70&lt;/td&gt;
&lt;td bgcolor=&quot;#BCBDDC&quot;&gt;2002&lt;/td&gt;
&lt;td bgcolor=&quot;#C6DBEF&quot;&gt;.8 GHz&lt;/td&gt;
&lt;td bgcolor=&quot;#6BAED6&quot;&gt;11M&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;custom haswell-e &lt;em&gt;60Hz&lt;/em&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#FED976&quot;&gt;80&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2014&lt;/td&gt;
&lt;td bgcolor=&quot;#DEEBF7&quot;&gt;3.5 GHz&lt;/td&gt;
&lt;td bgcolor=&quot;#F7FBFF&quot;&gt;2G&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;mac color classic&lt;/td&gt;
&lt;td bgcolor=&quot;#FEB24C&quot;&gt;90&lt;/td&gt;
&lt;td bgcolor=&quot;#807DBA&quot;&gt;1993&lt;/td&gt;
&lt;td bgcolor=&quot;#2171B5&quot;&gt;&lt;span&gt;16 MHz&lt;/span&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#2171B5&quot;&gt;&lt;span&gt;273k&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;l&quot;&gt;powerspec g405 &lt;strong&gt;linux&lt;/strong&gt; &lt;em&gt;60Hz&lt;/em&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#FEB24C&quot;&gt;90&lt;/td&gt;
&lt;td bgcolor=&quot;#FCFBFD&quot;&gt;2017&lt;/td&gt;
&lt;td bgcolor=&quot;#F7FBFF&quot;&gt;4.2 GHz&lt;/td&gt;
&lt;td bgcolor=&quot;#F7FBFF&quot;&gt;2G&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;macbook pro 2014&lt;/td&gt;
&lt;td bgcolor=&quot;#FEB24C&quot;&gt;100&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2014&lt;/td&gt;
&lt;td bgcolor=&quot;#DEEBF7&quot;&gt;2.6 GHz&lt;/td&gt;
&lt;td bgcolor=&quot;#DEEBF7&quot;&gt;700M&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;thinkpad 13 &lt;strong&gt;linux chroot&lt;/strong&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#FEB24C&quot;&gt;100&lt;/td&gt;
&lt;td bgcolor=&quot;#FCFBFD&quot;&gt;2017&lt;/td&gt;
&lt;td bgcolor=&quot;#DEEBF7&quot;&gt;2.3 GHz&lt;/td&gt;
&lt;td bgcolor=&quot;#DEEBF7&quot;&gt;1G&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;l&quot;&gt;lenovo x1 carbon 4g &lt;strong&gt;linux&lt;/strong&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#FD8D3C&quot;&gt;110&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2016&lt;/td&gt;
&lt;td bgcolor=&quot;#DEEBF7&quot;&gt;2.6 GHz&lt;/td&gt;
&lt;td bgcolor=&quot;#DEEBF7&quot;&gt;1G&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;imac g4 &lt;strong&gt;os x&lt;/strong&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#FD8D3C&quot;&gt;120&lt;/td&gt;
&lt;td bgcolor=&quot;#BCBDDC&quot;&gt;2002&lt;/td&gt;
&lt;td bgcolor=&quot;#C6DBEF&quot;&gt;.8 GHz&lt;/td&gt;
&lt;td bgcolor=&quot;#6BAED6&quot;&gt;11M&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;custom haswell-e &lt;em&gt;24Hz&lt;/em&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#FC4E2A&quot;&gt;140&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2014&lt;/td&gt;
&lt;td bgcolor=&quot;#DEEBF7&quot;&gt;3.5 GHz&lt;/td&gt;
&lt;td bgcolor=&quot;#F7FBFF&quot;&gt;2G&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;lenovo x1 carbon 4g &lt;strong&gt;win&lt;/strong&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#E31A1C&quot;&gt;150&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2016&lt;/td&gt;
&lt;td bgcolor=&quot;#DEEBF7&quot;&gt;2.6 GHz&lt;/td&gt;
&lt;td bgcolor=&quot;#DEEBF7&quot;&gt;1G&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;next cube&lt;/td&gt;
&lt;td bgcolor=&quot;#E31A1C&quot;&gt;150&lt;/td&gt;
&lt;td bgcolor=&quot;#6A51A3&quot;&gt;&lt;span&gt;1988&lt;/span&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#4292C6&quot;&gt;25 MHz&lt;/td&gt;
&lt;td bgcolor=&quot;#4292C6&quot;&gt;1.2M&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;powerspec g405 &lt;strong&gt;linux&lt;/strong&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#BD0026&quot;&gt;170&lt;/td&gt;
&lt;td bgcolor=&quot;#FCFBFD&quot;&gt;2017&lt;/td&gt;
&lt;td bgcolor=&quot;#F7FBFF&quot;&gt;4.2 GHz&lt;/td&gt;
&lt;td bgcolor=&quot;#F7FBFF&quot;&gt;2G&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot; bgcolor=&quot;silver&quot;&gt;packet around the world&lt;/td&gt;
&lt;td bgcolor=&quot;silver&quot;&gt;190&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;powerspec g405 &lt;strong&gt;win&lt;/strong&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;black&quot;&gt;&lt;span&gt;200&lt;/span&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#FCFBFD&quot;&gt;2017&lt;/td&gt;
&lt;td bgcolor=&quot;#F7FBFF&quot;&gt;4.2 GHz&lt;/td&gt;
&lt;td bgcolor=&quot;#F7FBFF&quot;&gt;2G&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;symbolics 3620&lt;/td&gt;
&lt;td bgcolor=&quot;black&quot;&gt;&lt;span&gt;300&lt;/span&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#54278F&quot;&gt;&lt;span&gt;1986&lt;/span&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#08519C&quot;&gt;&lt;span&gt;5 MHz&lt;/span&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#2171B5&quot;&gt;&lt;span&gt;390k&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;These are tests of the latency between a keypress and the display of a character in a terminal (see appendix for more details). The results are sorted from quickest to slowest. In the latency column, the background goes from green to yellow to red to black as devices get slower and the background gets darker as devices get slower. No devices are green. When multiple OSes were tested on the same machine, the os is &lt;strong&gt;in bold&lt;/strong&gt;. When multiple refresh rates were tested on the same machine, the refresh rate is &lt;em&gt;in italics&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In the year column, the background gets darker and purple-er as devices get older. If older devices were slower, we’d see the year column get darker as we read down the chart.&lt;/p&gt;
&lt;p&gt;The next two columns show the clock speed and number of transistors in the processor. Smaller numbers are darker and blue-er. As above, if slower clocked and smaller chips correlated with longer latency, the columns would get darker as we go down the table, but it, if anything, seems to be the other way around.&lt;/p&gt;
&lt;p&gt;For reference, the latency of a packet going around the world through fiber from NYC back to NYC via &lt;a href=&quot;https://www.extremetech.com/extreme/122989-1-5-billion-the-cost-of-cutting-london-toyko-latency-by-60ms&quot;&gt;Tokyo and London&lt;/a&gt; is inserted in the table.&lt;/p&gt;
&lt;p&gt;If we look at overall results, the fastest machines are ancient. Newer machines are all over the place. Fancy gaming rigs with unusually high refresh-rate displays are almost competitive with machines from the late 70s and early 80s, but “normal” modern computers can’t compete with thirty to forty year old machines.&lt;/p&gt;
&lt;p&gt;We can also look at mobile devices. In this case, we’ll look at scroll latency in the browser:&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;th&gt;device&lt;/th&gt;
&lt;th&gt;latency&lt;br/&gt;(ms)&lt;/th&gt;
&lt;th&gt;year&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;ipad pro 10.5&quot; pencil&lt;/td&gt;
&lt;td bgcolor=&quot;#FFFFCC&quot;&gt;30&lt;/td&gt;
&lt;td bgcolor=&quot;#FCFBFD&quot;&gt;2017&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;ipad pro 10.5&quot;&lt;/td&gt;
&lt;td bgcolor=&quot;#FED976&quot;&gt;70&lt;/td&gt;
&lt;td bgcolor=&quot;#FCFBFD&quot;&gt;2017&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;iphone 4s&lt;/td&gt;
&lt;td bgcolor=&quot;#FED976&quot;&gt;70&lt;/td&gt;
&lt;td bgcolor=&quot;#DADAEB&quot;&gt;2011&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;iphone 6s&lt;/td&gt;
&lt;td bgcolor=&quot;#FED976&quot;&gt;70&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2015&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;iphone 3gs&lt;/td&gt;
&lt;td bgcolor=&quot;#FED976&quot;&gt;70&lt;/td&gt;
&lt;td bgcolor=&quot;#DADAEB&quot;&gt;2009&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;iphone x&lt;/td&gt;
&lt;td bgcolor=&quot;#FED976&quot;&gt;80&lt;/td&gt;
&lt;td bgcolor=&quot;#FCFBFD&quot;&gt;2017&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;iphone 7&lt;/td&gt;
&lt;td bgcolor=&quot;#FED976&quot;&gt;80&lt;/td&gt;
&lt;td bgcolor=&quot;#FCFBFD&quot;&gt;2017&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;iphone 6&lt;/td&gt;
&lt;td bgcolor=&quot;#FED976&quot;&gt;80&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2014&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;gameboy color&lt;/td&gt;
&lt;td bgcolor=&quot;#FED976&quot;&gt;80&lt;/td&gt;
&lt;td bgcolor=&quot;#9E9AC8&quot;&gt;1998&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;iphone 5&lt;/td&gt;
&lt;td bgcolor=&quot;#FEB24C&quot;&gt;90&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2012&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;blackberry q10&lt;/td&gt;
&lt;td bgcolor=&quot;#FEB24C&quot;&gt;100&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2013&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;huawei honor 8&lt;/td&gt;
&lt;td bgcolor=&quot;#FD8D3C&quot;&gt;110&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2016&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;google pixel 2 xl&lt;/td&gt;
&lt;td bgcolor=&quot;#FD8D3C&quot;&gt;110&lt;/td&gt;
&lt;td bgcolor=&quot;#FCFBFD&quot;&gt;2017&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;galaxy s7&lt;/td&gt;
&lt;td bgcolor=&quot;#FD8D3C&quot;&gt;120&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2016&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;galaxy note 3&lt;/td&gt;
&lt;td bgcolor=&quot;#FD8D3C&quot;&gt;120&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2016&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;nexus 5x&lt;/td&gt;
&lt;td bgcolor=&quot;#FD8D3C&quot;&gt;120&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2015&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;oneplus 3t&lt;/td&gt;
&lt;td bgcolor=&quot;#FC4E2A&quot;&gt;130&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2016&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;blackberry key one&lt;/td&gt;
&lt;td bgcolor=&quot;#FC4E2A&quot;&gt;130&lt;/td&gt;
&lt;td bgcolor=&quot;#FCFBFD&quot;&gt;2017&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;moto e (2g)&lt;/td&gt;
&lt;td bgcolor=&quot;#FC4E2A&quot;&gt;140&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2015&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;moto g4 play&lt;/td&gt;
&lt;td bgcolor=&quot;#FC4E2A&quot;&gt;140&lt;/td&gt;
&lt;td bgcolor=&quot;#FCFBFD&quot;&gt;2017&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;moto g4 plus&lt;/td&gt;
&lt;td bgcolor=&quot;#FC4E2A&quot;&gt;140&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2016&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;google pixel&lt;/td&gt;
&lt;td bgcolor=&quot;#FC4E2A&quot;&gt;140&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2016&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;samsung galaxy avant&lt;/td&gt;
&lt;td bgcolor=&quot;#E31A1C&quot;&gt;150&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2014&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;asus zenfone3 max&lt;/td&gt;
&lt;td bgcolor=&quot;#E31A1C&quot;&gt;150&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2016&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;sony xperia z5 compact&lt;/td&gt;
&lt;td bgcolor=&quot;#E31A1C&quot;&gt;150&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2015&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;htc one m4&lt;/td&gt;
&lt;td bgcolor=&quot;#E31A1C&quot;&gt;160&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2013&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;galaxy s4 mini&lt;/td&gt;
&lt;td bgcolor=&quot;#BD0026&quot;&gt;170&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2013&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;lg k4&lt;/td&gt;
&lt;td bgcolor=&quot;#800026&quot;&gt;&lt;span&gt;180&lt;/span&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2016&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot; bgcolor=&quot;silver&quot;&gt;packet&lt;/td&gt;
&lt;td bgcolor=&quot;silver&quot;&gt;190&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;htc rezound&lt;/td&gt;
&lt;td bgcolor=&quot;black&quot;&gt;&lt;span&gt;240&lt;/span&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#DADAEB&quot;&gt;2011&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;palm pilot 1000&lt;/td&gt;
&lt;td bgcolor=&quot;black&quot;&gt;&lt;span&gt;490&lt;/span&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#807DBA&quot;&gt;1996&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;kindle paperwhite 3&lt;/td&gt;
&lt;td bgcolor=&quot;black&quot;&gt;&lt;span&gt;630&lt;/span&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#EFEDF5&quot;&gt;2015&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;l&quot;&gt;kindle 4&lt;/td&gt;
&lt;td bgcolor=&quot;black&quot;&gt;&lt;span&gt;860&lt;/span&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;#DADAEB&quot;&gt;2011&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;As above, the results are sorted by latency and color-coded from green to yellow to red to black as devices get slower. Also as above, the year gets purple-er (and darker) as the device gets older.&lt;/p&gt;
&lt;p&gt;If we exclude the &lt;code&gt;game boy color&lt;/code&gt;, which is a different class of device than the rest, all of the quickest devices are Apple phones or tablets. The next quickest device is the &lt;code&gt;blackberry q10&lt;/code&gt;. Although we don’t have enough data to really tell why the &lt;code&gt;blackberry q10&lt;/code&gt; is unusually quick for a non-Apple device, one plausible guess is that it’s helped by having actual buttons, which are easier to implement with low latency than a touchscreen. The other two devices with actual buttons are the &lt;code&gt;gameboy color&lt;/code&gt; and the &lt;code&gt;kindle 4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After that &lt;code&gt;iphones&lt;/code&gt; and non-kindle button devices, we have a variety of Android devices of various ages. At the bottom, we have the ancient &lt;code&gt;palm pilot 1000&lt;/code&gt; followed by the kindles. The &lt;code&gt;palm&lt;/code&gt; is hamstrung by a touchscreen and display created in an era with much slower touchscreen technology and the &lt;code&gt;kindles&lt;/code&gt; use &lt;a href=&quot;https://en.wikipedia.org/wiki/E_Ink&quot;&gt;e-ink&lt;/a&gt; displays, which are much slower than the displays used on modern phones, so it’s not surprising to see those devices at the bottom.&lt;/p&gt;
&lt;h3 id=&quot;why-is-the-apple-2e-so-fast&quot;&gt;Why is the &lt;code&gt;apple 2e&lt;/code&gt; so fast?&lt;/h3&gt;
&lt;p&gt;Compared to a modern computer that’s not the latest &lt;code&gt;ipad pro&lt;/code&gt;, the &lt;code&gt;apple 2&lt;/code&gt; has significant advantages on both the input and the output, and it also has an advantage between the input and the output for all but the most carefully written code since the &lt;code&gt;apple 2&lt;/code&gt; doesn’t have to deal with context switches, buffers involved in handoffs between different processes, etc.&lt;/p&gt;
&lt;p&gt;On the input, if we look at modern keyboards, it’s common to see them scan their inputs at &lt;code&gt;100 Hz&lt;/code&gt; to &lt;code&gt;200 Hz&lt;/code&gt; (e.g., &lt;a href=&quot;https://github.com/benblazak/ergodox-firmware&quot;&gt;the ergodox claims to scan at &lt;code&gt;167 Hz&lt;/code&gt;&lt;/a&gt;). By comparison, the &lt;code&gt;apple 2e&lt;/code&gt; effectively scans at &lt;code&gt;556 Hz&lt;/code&gt;. See appendix for details.&lt;/p&gt;
&lt;p&gt;If we look at the other end of the pipeline, the display, we can also find latency bloat there. I have a display that advertises &lt;code&gt;1 ms&lt;/code&gt; switching on the box, but if we look at how long it takes for the display to actually show a character from when you can first see the trace of it on the screen until the character is solid, it can easily be &lt;code&gt;10 ms&lt;/code&gt;. You can even see this effect with some high-refresh-rate displays that are sold on their allegedly good latency.&lt;/p&gt;
&lt;p&gt;At &lt;code&gt;144 Hz&lt;/code&gt;, each frame takes &lt;code&gt;7 ms&lt;/code&gt;. A change to the screen will have &lt;code&gt;0 ms&lt;/code&gt; to &lt;code&gt;7 ms&lt;/code&gt; of extra latency as it waits for the next frame boundary before getting rendered (on average,we expect half of the maximum latency, or &lt;code&gt;3.5 ms&lt;/code&gt;). On top of that, even though my display at home advertises a &lt;code&gt;1 ms&lt;/code&gt; switching time, it actually appears to take &lt;code&gt;10 ms&lt;/code&gt; to fully change color once the display has started changing color. When we add up the latency from waiting for the next frame to the latency of an actual color change, we get an expected latency of &lt;code&gt;7/2 + 10 = 13.5ms&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;With the old CRT in the &lt;code&gt;apple 2e&lt;/code&gt;, we’d expect half of a &lt;code&gt;60 Hz&lt;/code&gt; refresh (&lt;code&gt;16.7 ms / 2&lt;/code&gt;) plus a negligible delay, or &lt;code&gt;8.3 ms&lt;/code&gt;. That’s hard to beat today: a state of the art “gaming monitor” can get the total display latency down into the same range, but in terms of marketshare, very few people have such displays, and even displays that are advertised as being fast aren’t always actually fast.&lt;/p&gt;
&lt;h3 id=&quot;ios-rendering-pipeline&quot;&gt;iOS rendering pipeline&lt;/h3&gt;
&lt;p&gt;If we look at what’s happening between the input and the output, the differences between a modern system and an &lt;code&gt;apple 2e&lt;/code&gt; are too many to describe without writing an entire book. To get a sense of the situation in modern machines, here’s former iOS/UIKit engineer &lt;a href=&quot;https://andymatuschak.org/&quot;&gt;Andy Matuschak&lt;/a&gt;’s high-level sketch of what happens on iOS, which he says should be presented with the disclaimer that “this is my out of date memory of out of date information”:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;hardware has its own scanrate (e.g. &lt;code&gt;120 Hz&lt;/code&gt; for recent touch panels), so that can introduce up to &lt;code&gt;8 ms&lt;/code&gt; latency&lt;/li&gt;
&lt;li&gt;events are delivered to the kernel through firmware; this is relatively quick but system scheduling concerns may introduce a couple &lt;code&gt;ms&lt;/code&gt; here&lt;/li&gt;
&lt;li&gt;the kernel delivers those events to privileged subscribers (here, &lt;code&gt;backboardd&lt;/code&gt;) over a mach port; more scheduling loss possible&lt;/li&gt;
&lt;li&gt;&lt;code&gt;backboardd&lt;/code&gt; must determine which process should receive the event; this requires taking a lock against the window server, which shares that information (a trip back into the kernel, more scheduling delay)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;backboardd&lt;/code&gt; sends that event to the process in question; more scheduling delay possible before it is processed&lt;/li&gt;
&lt;li&gt;those events are only dequeued on the main thread; something else may be happening on the main thread (e.g. as result of a timer or network activity), so some more latency may result, depending on that work&lt;/li&gt;
&lt;li&gt;UIKit introduced &lt;code&gt;1-2 ms&lt;/code&gt; event processing overhead, CPU-bound&lt;/li&gt;
&lt;li&gt;application decides what to do with the event; apps are poorly written, so usually this takes many &lt;code&gt;ms&lt;/code&gt;. the consequences are batched up in a data-driven update which is sent to the render server over IPC
&lt;ul&gt;&lt;li&gt;If the app needs a new shared-memory video buffer as a consequence of the event, which will happen anytime something non-trivial is happening, that will require round-trip IPC to the render server; more scheduling delays&lt;/li&gt;
&lt;li&gt;(trivial changes are things which the render server can incorporate itself, like affine transformation changes or color changes to layers; non-trivial changes include anything that has to do with text, most raster and vector operations)&lt;/li&gt;
&lt;li&gt;These kinds of updates often end up being triple-buffered: the GPU might be using one buffer to render right now; the render server might have another buffer queued up for its next frame; and you want to draw into another. More (cross-process) locking here; more trips into kernel-land.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;the render server applies those updates to its render tree (a few &lt;code&gt;ms&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;every &lt;code&gt;N Hz&lt;/code&gt;, the render tree is flushed to the GPU, which is asked to fill a video buffer
&lt;ul&gt;&lt;li&gt;Actually, though, there’s often triple-buffering for the screen buffer, for the same reason I described above: the GPU’s drawing into one now; another might be being read from in preparation for another frame&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;every &lt;code&gt;N Hz&lt;/code&gt;, that video buffer is swapped with another video buffer, and the display is driven directly from that memory
&lt;ul&gt;&lt;li&gt;(this &lt;code&gt;N Hz&lt;/code&gt; isn’t necessarily ideally aligned with the preceding step’s &lt;code&gt;N Hz&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Andy says “the actual amount of &lt;em&gt;work&lt;/em&gt; happening here is typically quite small. A few &lt;code&gt;ms&lt;/code&gt; of CPU time. Key overhead comes from:”&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;periodic scanrates (input device, render server, display) imperfectly aligned&lt;/li&gt;
&lt;li&gt;many handoffs across process boundaries, each an opportunity for something else to get scheduled instead of the consequences of the input event&lt;/li&gt;
&lt;li&gt;lots of locking, especially across process boundaries, necessitating trips into kernel-land&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;By comparison, on the Apple 2e, there basically aren’t handoffs, locks, or process boundaries. Some very simple code runs and writes the result to the display memory, which causes the display to get updated on the next scan.&lt;/p&gt;
&lt;h3 id=&quot;refresh-rate-vs-latency&quot;&gt;Refresh rate vs. latency&lt;/h3&gt;
&lt;p&gt;One thing that’s curious about the computer results is the impact of refresh rate. We get a &lt;code&gt;90 ms&lt;/code&gt; improvement from going from &lt;code&gt;24 Hz&lt;/code&gt; to &lt;code&gt;165 Hz&lt;/code&gt;. At &lt;code&gt;24 Hz&lt;/code&gt; each frame takes &lt;code&gt;41.67 ms&lt;/code&gt; and at &lt;code&gt;165 Hz&lt;/code&gt; each frame takes &lt;code&gt;6.061 ms&lt;/code&gt;. As we saw above, if there weren’t any buffering, we’d expect the average latency added by frame refreshes to be &lt;code&gt;20.8ms&lt;/code&gt; in the former case and &lt;code&gt;3.03 ms&lt;/code&gt; in the latter case (because we’d expect to arrive at a uniform random point in the frame and have to wait between &lt;code&gt;0ms&lt;/code&gt; and the full frame time), which is a different of about &lt;code&gt;18ms&lt;/code&gt;. But the difference is actually &lt;code&gt;90 ms&lt;/code&gt;, implying we have latency equivalent to &lt;code&gt;(90 - 18) / (41.67 - 6.061) = 2&lt;/code&gt; buffered frames.&lt;/p&gt;
&lt;p&gt;If we plot the results from the other refresh rates on the same machine (not shown), we can see that they’re roughly in line with a “best fit” curve that we get if we assume that, for that machine running powershell, we get 2.5 frames worth of latency regardless of refresh rate. This lets us estimate what the latency would be if we equipped this low latency gaming machine with an &lt;code&gt;infinity Hz&lt;/code&gt; display – we’d expect latency to be &lt;code&gt;140 - 2.5 * 41.67 = 36 ms&lt;/code&gt;, almost as fast as quick but standard machines from the 70s and 80s.&lt;/p&gt;
&lt;h3 id=&quot;complexity&quot;&gt;Complexity&lt;/h3&gt;
&lt;p&gt;Almost every computer and mobile device that people buy today is slower than common models of computers from the 70s and 80s. Low-latency gaming desktops and the &lt;code&gt;ipad pro&lt;/code&gt; can get into the same range as quick machines from thirty to forty years ago, but most off-the-shelf devices aren’t even close.&lt;/p&gt;
&lt;p&gt;If we had to pick one root cause of latency bloat, we might say that it’s because of “complexity”. Of course, we all know that complexity is bad. If you’ve been to a non-academic non-enterprise tech conference in the past decade, there’s a good chance that there was at least one talk on how complexity is the root of all evil and we should aspire to reduce complexity.&lt;/p&gt;
&lt;p&gt;Unfortunately, it’s a lot harder to remove complexity than to give a talk saying that we should remove complexity. A lot of the complexity buys us something, either directly or indirectly. When we looked at the input of a fancy modern keyboard vs. the &lt;code&gt;apple 2&lt;/code&gt; keyboard, we saw that using a relatively powerful and expensive general purpose processor to handle keyboard inputs can be slower than dedicated logic for the keyboard, which would both be simpler and cheaper. However, using the processor gives people the ability to easily customize the keyboard, and also pushes the problem of “programming” the keyboard from hardware into software, which reduces the cost of making the keyboard. The more expensive chip increases the manufacturing cost, but considering how much of the cost of these small-batch artisanal keyboards is the design cost, it seems like a net win to trade manufacturing cost for ease of programming.&lt;/p&gt;
&lt;p&gt;We see this kind of tradeoff in every part of the pipeline. One of the biggest examples of this is the OS you might run on a modern desktop vs. the loop that’s running on the &lt;code&gt;apple 2&lt;/code&gt;. Modern OSes let programmers write generic code that can deal with having other programs simultaneously running on the same machine, and do so with pretty reasonable general performance, but we pay a huge complexity cost for this and the handoffs involved in making this easy result in a significant latency penalty.&lt;/p&gt;
&lt;p&gt;A lot of the complexity might be called &lt;a href=&quot;http://wiki.c2.com/?AccidentalComplexity&quot;&gt;accidental complexity&lt;/a&gt;, but most of that accidental complexity is there because it’s so convenient. At every level from the hardware architecture to the syscall interface to the I/O framework we use, we take on complexity, much of which could be eliminated if we could sit down and re-write all of the systems and their interfaces today, but it’s too inconvenient to re-invent the universe to reduce complexity and we get benefits from economies of scale, so we live with what we have.&lt;/p&gt;
&lt;p&gt;For those reasons and more, in practice, the solution to poor performance caused by “excess” complexity is often to add more complexity. In particular, the gains we’ve seen that get us back to the quickness of the quickest machines from thirty to forty years ago have come not from listening to exhortations to reduce complexity, but from piling on more complexity.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ipad pro&lt;/code&gt; is a feat of modern engineering; the engineering that went into increasing the refresh rate on both the input and the output as well as making sure the software pipeline doesn’t have unnecessary buffering is complex! The design and manufacture of high-refresh-rate displays that can push system latency down is also non-trivially complex in ways that aren’t necessary for bog standard &lt;code&gt;60 Hz&lt;/code&gt; displays.&lt;/p&gt;
&lt;p&gt;This is actually a common theme when working on latency reduction. A common trick to reduce latency is to add a cache, but adding a cache to a system makes it more complex. For systems that generate new data and can’t tolerate a cache, the solutions are often even more complex. An example of this might be &lt;a href=&quot;https://en.wikipedia.org/wiki/RDMA_over_Converged_Ethernet&quot;&gt;large scale RoCE deployments&lt;/a&gt;. These can push remote data access latency from from the millisecond range down to the microsecond range, &lt;a href=&quot;https://danluu.com/infinite-disk/&quot;&gt;which enables new classes of applications&lt;/a&gt;. However, this has come at a large cost in complexity. Early large-scale RoCE deployments easily took tens of person years of effort to get right and also came with a tremendous operational burden.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;It’s a bit absurd that a modern gaming machine running at &lt;code&gt;4,000x&lt;/code&gt; the speed of an &lt;code&gt;apple 2&lt;/code&gt;, with a CPU that has &lt;code&gt;500,000x&lt;/code&gt; as many transistors (with a GPU that has &lt;code&gt;2,000,000x&lt;/code&gt; as many transistors) can maybe manage the same latency as an &lt;code&gt;apple 2&lt;/code&gt; in very carefully coded applications if we have a monitor with nearly &lt;code&gt;3x&lt;/code&gt; the refresh rate. It’s perhaps even more absurd that the default configuration of the &lt;code&gt;powerspec g405&lt;/code&gt;, which had the fastest single-threaded performance you could get until October 2017, had more latency from keyboard-to-screen (approximately &lt;code&gt;3 feet&lt;/code&gt;, maybe &lt;code&gt;10 feet&lt;/code&gt; of actual cabling) than sending a packet around the world (&lt;code&gt;16187 mi&lt;/code&gt; from NYC to Tokyo to London back to NYC, more due to the cost of running the shortest possible length of fiber).&lt;/p&gt;
&lt;p&gt;On the bright side, we’re arguably emerging from the latency dark ages and it’s now possible to assemble a computer or buy a tablet with latency that’s in the same range as you could get off-the-shelf in the 70s and 80s. This reminds me a bit of the screen resolution &amp;amp; density dark ages, where CRTs from the 90s offered better resolution and higher pixel density than affordable non-laptop LCDs until relatively recently. 4k displays have now become normal and affordable 8k displays are on the horizon, blowing past anything we saw on consumer CRTs. I don’t know that we’ll see the same kind improvement with respect to latency, but one can hope. There are individual developers improving the experience for people who use certain, very carefully coded, applications, but it’s not clear what force could cause a significant improvement in the default experience most users see.&lt;/p&gt;
&lt;h3 id=&quot;other-posts-on-latency-measurement&quot;&gt;Other posts on latency measurement&lt;/h3&gt;
&lt;h3 id=&quot;appendix-why-measure-latency&quot;&gt;Appendix: why measure latency?&lt;/h3&gt;
&lt;p&gt;Latency matters! For very simple tasks, &lt;a href=&quot;https://pdfs.semanticscholar.org/386a/15fd85c162b8e4ebb6023acdce9df2bd43ee.pdf&quot;&gt;people can perceive latencies down to &lt;code&gt;2 ms&lt;/code&gt; or less&lt;/a&gt;. Moreover, increasing latency is not only noticeable to users, &lt;a href=&quot;http://www.tactuallabs.com/papers/howMuchFasterIsFastEnoughCHI15.pdf&quot;&gt;it causes users to execute simple tasks less accurately&lt;/a&gt;. If you want a visual demonstration of what latency looks like and you don’t have a super-fast old computer lying around, &lt;a href=&quot;https://www.youtube.com/watch?v=vOvQCPLkPt4&quot;&gt;check out this MSR demo on touchscreen la&lt;br/&gt;tency&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/39187441/334816&quot;&gt;Throughput&lt;/a&gt; also matters, but this is widely understood and measured. If you go to pretty much any mainstream review or benchmarking site, you can find a wide variety of throughput measurements, so there’s less value in writing up additional throughput measurements.&lt;/p&gt;
&lt;h3 id=&quot;appendix-apple-2-keyboard&quot;&gt;Appendix: apple 2 keyboard&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;apple 2e&lt;/code&gt;, instead of using a programmed microcontroller to read the keyboard, uses a much simpler custom chip designed for reading keyboard input, the AY 3600. If we look at &lt;a href=&quot;https://danluu.com/AY3600.pdf&quot;&gt;the AY 3600 datasheet&lt;/a&gt;,we can see that the scan time is &lt;code&gt;(90 * 1/f)&lt;/code&gt; and the debounce time is listed as &lt;code&gt;strobe_delay&lt;/code&gt;. These quantities are determined by some capacitors and a resistor, which appear to be &lt;code&gt;47pf&lt;/code&gt;, &lt;code&gt;100k ohms&lt;/code&gt;, and &lt;code&gt;0.022uf&lt;/code&gt; for the Apple 2e. Plugging these numbers into &lt;a href=&quot;https://danluu.com/AY3600.pdf&quot;&gt;the AY3600 datasheet&lt;/a&gt;, we can see that &lt;code&gt;f = 50 kHz&lt;/code&gt;, giving us a &lt;code&gt;1.8 ms&lt;/code&gt; scan delay and a &lt;code&gt;6.8 ms&lt;/code&gt; debounce delay (assuming the values are accurate – &lt;a href=&quot;http://www.kemet.com/Lists/TechnicalArticles/Attachments/191/Why%2047%20uF%20capacitor%20drops%20to%2037%20uF-%2030%20uF-%20or%20lower.pdf&quot;&gt;capacitors can degrade over time&lt;/a&gt;, so we should expect the real delays to be shorter on our old Apple 2e), giving us less than &lt;code&gt;8.6 ms&lt;/code&gt; for the internal keyboard logic.&lt;/p&gt;
&lt;p&gt;Comparing to a keyboard with a &lt;code&gt;167 Hz&lt;/code&gt; scan rate that &lt;a href=&quot;https://www.arduino.cc/en/Tutorial/Debounce&quot;&gt;scans two extra times to debounce&lt;/a&gt;, the equivalent figure is &lt;code&gt;3 * 6 ms = 18 ms&lt;/code&gt;. With a &lt;code&gt;100Hz&lt;/code&gt; scan rate, that becomes &lt;code&gt;3 * 10 ms = 30 ms&lt;/code&gt;. &lt;code&gt;18 ms&lt;/code&gt; to &lt;code&gt;30 ms&lt;/code&gt; of keyboard scan plus debounce latency is in line with &lt;a href=&quot;https://danluu.com/keyboard-latency/&quot;&gt;what we saw when we did some preliminary keyboard latency measurements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For reference, the ergodox uses a &lt;code&gt;16 MHz&lt;/code&gt; microcontroller with ~80k transistors and the &lt;code&gt;apple 2e&lt;/code&gt; CPU is a &lt;code&gt;1 MHz&lt;/code&gt; chip with 3.5k transistors.&lt;/p&gt;
&lt;h3 id=&quot;appendix-experimental-setup&quot;&gt;Appendix: experimental setup&lt;/h3&gt;
&lt;p&gt;Most measurements were taken with a 240fps camera (&lt;code&gt;4.167 ms&lt;/code&gt; resolution). Devices with response times below &lt;code&gt;40 ms&lt;/code&gt; were re-measured with a 1000fps camera (&lt;code&gt;1 ms&lt;/code&gt; resolution). Results in the tables are the results of multiple runs and are rounded to the nearest &lt;code&gt;10 ms&lt;/code&gt; to avoid the impression of false precision. For desktop results, results are measured from when the key started moving until the screen finished updating. Note that this is different from most key-to-screen-update measurements you can find online, which typically use a setup that effectively removes much or all of the keyboard latency, which, as an end-to-end measurement, is only realistic if you have a psychic link to your computer (this isn’t to say the measurements aren’t useful – if, as a programmer, you want a reproducible benchmark, it’s nice to reduce measurement noise from sources that are beyond your control, but that’s not relevant to end users). Another significant difference is that measurements were done with settings as close to the default OS settings as possible since approximately 0% of users will futz around with display settings to reduce buffering, disable the compositor, etc. Waiting until the screen has finished updating is also different from most end-to-end measurements do – most consider the update “done” when any movement has been detected on the screen. Waiting until the screen is finished changing is analogous to webpagetest’s “visually complete” time.&lt;/p&gt;
&lt;p&gt;Computer results were taken using the “default” terminal for the system, &lt;a href=&quot;https://danluu.com/term-latency/&quot;&gt;which could easily cause &lt;code&gt;20 ms&lt;/code&gt; to &lt;code&gt;30 ms&lt;/code&gt; difference between a fast terminal and a slow terminal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;powerspec g405&lt;/code&gt; baseline result is using integrated graphics (the machine doesn’t come with a graphics card) and the &lt;code&gt;60 Hz&lt;/code&gt; result is with a cheap video card.&lt;/p&gt;
&lt;p&gt;Mobile results were done by using the default browser, browsing to &lt;a href=&quot;https://danluu.com&quot;&gt;https://danluu.com&lt;/a&gt;, and measuring the latency from finger movement until the screen first updates to indicate that scrolling has occurred. In the cases where this didn’t make sense, (kindles, gameboy color, etc.), some action that makes sense for the platform was taken (changing pages on the kindle, pressing the joypad on the gameboy color in a game, etc.).&lt;/p&gt;
&lt;p&gt;In the case of “ties”, results are ordered by the unrounded latency as a tiebreaker, but this shouldn’t be considered significant. Differences of &lt;code&gt;10 ms&lt;/code&gt; should probably also not be considered significant.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;custom haswell-e&lt;/code&gt; was tested with &lt;code&gt;gsync&lt;/code&gt; on and there was no observable difference. The year for that box is somewhat arbitrary, since the CPU is from &lt;code&gt;2014&lt;/code&gt;, but the display is newer (I believe you couldn’t get a &lt;code&gt;165 Hz&lt;/code&gt; display until &lt;code&gt;2015&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The number of transistors for some modern machines is a rough estimate because exact numbers aren’t public. Feel free to ping me if you have a better estimate!&lt;/p&gt;
&lt;p&gt;The color scales for latency and year are linear and the color scales for clock speed and number of transistors are log scale.&lt;/p&gt;
&lt;p&gt;All Linux results were done with a &lt;a href=&quot;https://lwn.net/SubscriberLink/741878/eb6c9d3913d7cb2b/&quot;&gt;pre-KPTI&lt;/a&gt; kernel. It’s possible that KPTI will impact user perceivable latency.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This is a work in progress. I expect to get benchmarks from a lot more old computers the next time I visit Seattle. If you know of old computers I can test in the NYC area (that have their original displays or something like them), let me know! If you have a device you’d like to donate for testing, feel free to mail it to&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Dan Luu&lt;br/&gt;Recurse Center&lt;br/&gt;455 Broadway, 2nd Floor&lt;br/&gt;New York, NY 10013&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https://www.recurse.com/scout/click?t=b504af89e87b77920c9b60b2a1f6d5e8&quot;&gt;RC&lt;/a&gt;, David Albert, Bert Muthalaly, Christian Ternus, Kate Murphy, Ikhwan Lee, Peter Bhat Harkins, Leah Hanson, Alicia Thilani Singham Goodwin, Amy Huang, Dan Bentley, Jacquin Mininger, Rob, Raph Levien, Max McCrea, Peter Town, Jon Cinque, Anonymous, and Jonathan Dahan for donating devices to test and thanks to Leah Hanson, Andy Matuschak, Milosz Danczak, @amos, @emitter_coupled, and David Albert for comments/corrections/discussion.&lt;/em&gt;&lt;/p&gt;

&lt;footer&gt;
&lt;/footer&gt;&lt;/body&gt;</description>
<pubDate>Sun, 24 Dec 2017 21:35:53 +0000</pubDate>
<dc:creator>kens</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://danluu.com/input-lag/</dc:identifier>
</item>
<item>
<title>LisaOS to be open-sourced and donated to Computer History Museum</title>
<link>https://twitter.com/6502lane/status/944965691710496769</link>
<guid isPermaLink="true" >https://twitter.com/6502lane/status/944965691710496769</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://twitter.com/6502lane/status/944965691710496769&quot;&gt;https://twitter.com/6502lane/status/944965691710496769&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=16001275&quot;&gt;https://news.ycombinator.com/item?id=16001275&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 239&lt;/p&gt;&lt;p&gt;# Comments: 82&lt;/p&gt;</description>
<pubDate>Sun, 24 Dec 2017 20:57:45 +0000</pubDate>
<dc:creator>mpweiher</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/6502lane/status/944965691710496769</dc:identifier>
</item>
<item>
<title>I Got Paid $0 from the Uber Security Bug Bounty</title>
<link>https://medium.com/bread-and-circuses/how-i-got-paid-0-from-the-uber-security-bug-bounty-aa9646aa103f</link>
<guid isPermaLink="true" >https://medium.com/bread-and-circuses/how-i-got-paid-0-from-the-uber-security-bug-bounty-aa9646aa103f</guid>
<description>&lt;p name=&quot;09dc&quot; id=&quot;09dc&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;So Uber partners with HackerOne to offer a public bug bounty program, advertising a &lt;a href=&quot;https://hackerone.com/uber&quot; data-href=&quot;https://hackerone.com/uber&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;$500 minimum guaranteed payout&lt;/a&gt; if a security vulnerability is found within an Uber app or information asset. Fair enough, I’ve led numerous penetration tests over the years in addition to delivering advanced pentest training for corporate clients.&lt;/p&gt;
&lt;p name=&quot;da06&quot; id=&quot;da06&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I spend a few days getting some resources lined up for the analysis piece, and build a fairly comprehensive map of Uber’s various endpoints using subdomain enumeration and application fingerprinting. I also start kicking the tires of Uber’s Android app, which is locked down pretty tight per the Uber Bug Bounty Treasure Map with &lt;a href=&quot;https://eng.uber.com/bug-bounty/&quot; data-href=&quot;https://eng.uber.com/bug-bounty/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;certificate-pinned HTTPS requests&lt;/a&gt;. After a few hours of wrangling with the Android SDK, I get the most recent Uber .apk running in an ARM emulator as they apparently don’t publish any x86 Android apps. Slooooooow progress to say the least.&lt;/p&gt;
&lt;p name=&quot;e34a&quot; id=&quot;e34a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I manage to bypass some of the certificate pinning security in the Uber .apk, sufficient to start mapping out some of the Uber mobile endpoints. There is reference in that traffic to a Microsoft Phone API, so I head over to the Microsoft Store and start testing the Uber Surface/Windows Phone app.&lt;/p&gt;
&lt;p name=&quot;bf51&quot; id=&quot;bf51&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;It doesn’t implement any type of certificate pinning, which is a violation of Uber’s own publicly-stated Treasure Map; so there’s the first guaranteed $500 payout per their bug bounty.&lt;/p&gt;
&lt;p name=&quot;eb10&quot; id=&quot;eb10&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Uber uses OAuth2 tokens for all of their mobile app authentication workflow, which has a lot of security benefits over old school cookie-based authentication methods. I put together a Python-based client that can talk to Uber’s backends, to start harvesting OAuth2 tokens for entropy analysis and to see if there are any issues with their PRNG. What’s weird though is that the OAuth2 token doesn’t ever change, and I can’t find anything in the Uber developer documentation that deals with token expiration; literally the same token I was issued when I first created my Uber account for testing is the same token I keep getting, no matter how many times I log in and out of my account using the Surface app. Surely Uber is expiring these tokens at least once every few days?&lt;/p&gt;
&lt;p name=&quot;cf4a&quot; id=&quot;cf4a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I put that issue on the back burner and start probing the Uber promo endpoint, which has two pretty glaring vulnerabilities in that it doesn’t implement any type of rate limiting for promo code POSTs nor does it require any multifactor authentication. Or in other words, I can fire up an HTTP load testing suite to issue thousands of promo code POSTs to this endpoint, to enumerate OAuth2 tokens; in a few minutes I am able to enumerate over a million OAuth2 tokens, without any type of IP blacklisting or rate limiting taking place.&lt;/p&gt;
&lt;p name=&quot;dbca&quot; id=&quot;dbca&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So back to this token expiration issue. If I can pull a couple hundred thousand OAuth2 tokens by somehow figuring out how Uber expires issued tokens, then I can use some visualization tools to see if there are any patterns or attractors that emerge, which in turn can then be used with function approximation to try to guess some valid OAuth2 tokens. But this Surface app doesn’t actually communicate with the Uber backend whenever it processes a logout event, and I am able to access all Uber rider endpoints using my OAuth2 token even after the Surface app logs off. Huh?&lt;/p&gt;
&lt;p name=&quot;b79a&quot; id=&quot;b79a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So Uber is processing mobile app logouts locally, without any type of token expiration or invalidation taking place. That’s a big one, and now I understand why there is no mention made to OAuth2 token expiration in any of the Uber developer documentation: because once a user creates an account with Uber, the OAuth2 token that’s issued never expires and their mobile applications &lt;em class=&quot;markup--em markup--p-em&quot;&gt;only process logout events locally in the client itself&lt;/em&gt;. This is a big application security No No that maps to several public CVE and OWASP vulnerability definitions, so I submit the first round of these issues to HackerOne for payment.&lt;/p&gt;
&lt;p name=&quot;0a7e&quot; id=&quot;0a7e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Issue 1: The Uber Customer Promo Endpoint does not implement multi factor authentication resulting in the ability of an attacker to enumerate millions of OAuth2 rider and driver tokens.&lt;/p&gt;
&lt;p name=&quot;13fe&quot; id=&quot;13fe&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Issue 2: The Uber Customer Promo Endpoint does not implement any type of rate limiting and/or IP address blacklisting resulting in the ability of an attacker to enumerate millions of OAuth2 rider and driver tokens.&lt;/p&gt;
&lt;p name=&quot;b11d&quot; id=&quot;b11d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Issue 3: The Uber Microsoft Surface/Phone app does not implement certificate pinning in addition to accepting self-signed certificates in violation of the “cn.uber.com is a RESTful API performed over certificate-pinned HTTPS requests” required by the Uber Bug Bounty Treasure Map.&lt;/p&gt;
&lt;p name=&quot;39cb&quot; id=&quot;39cb&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Issue 4: Uber mobile apps are only processing logout events locally, resulting in OAuth2 tokens never being expired and with the ability to access driver and rider information after a user has logged out of their Uber mobile app.&lt;/p&gt;
&lt;p name=&quot;2319&quot; id=&quot;2319&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So these tickets get assigned to &lt;a href=&quot;https://www.linkedin.com/in/rbfletcher&quot; data-href=&quot;https://www.linkedin.com/in/rbfletcher&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;Rob Fletcher&lt;/a&gt; with Uber’s security team.&lt;/p&gt;
&lt;p name=&quot;ff08&quot; id=&quot;ff08&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Issue 1: Uber knows about this problem, we are going to fix it in the future. No payout.&lt;/p&gt;
&lt;p name=&quot;e6aa&quot; id=&quot;e6aa&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Issue 2: Uber knows about this problem, we are going to fix it in the future. No payout.&lt;/p&gt;
&lt;p name=&quot;4c3e&quot; id=&quot;4c3e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Issue 3: Uber knows about this problem, we are going to fix it in the future. No payout.&lt;/p&gt;
&lt;p name=&quot;36bb&quot; id=&quot;36bb&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Issue 4: Uber does not currently have the ability to expire issued tokens. We are going to address this issue with our next generation authentication framework. No payout.&lt;/p&gt;
&lt;p name=&quot;5084&quot; id=&quot;5084&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;At this point I’ve spent over a week of my time on this bug bounty that has a clearly stated $500 minimum payout policy; not one of these issues have been publicly documented as out-of-scope on Uber’s Bug Bounty Treasure Map and/or the HackerOne Uber Bug Bounty disclosure page; and, with the certificate pinning vulnerability directly contradicting the requirements of Uber’s Bug Bounty Treasure Map itself…?&lt;/p&gt;
&lt;p name=&quot;745f&quot; id=&quot;745f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So I file a mediation request with HackerOne. It gets assigned to Kevin Rosenbaum. His response:&lt;/p&gt;
&lt;blockquote name=&quot;d62a&quot; id=&quot;d62a&quot; class=&quot;graf graf--blockquote graf-after--p&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;I am sorry you are having a negative experience with this issue, but we have contacted the Uber App Sec team and they have confirmed with us that these are not security issues that are in scope on their program. I understand that this can be a disappointment but I can assure you that they looked at this report and gave it the proper attention it deserved. I hope you can continue to work on our site and I wish you the best of luck.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;2f2b&quot; id=&quot;2f2b&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;OK. Now I am determined to demonstrate a critical severity vulnerability that Uber can’t get around. It’s obviously open mic night in their infosec department, and I bet I can hammer them with something that they can’t dismiss as vaguely out of scope.&lt;/p&gt;
&lt;p name=&quot;f579&quot; id=&quot;f579&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Another day of digging around and I can reflect query parameters from the &lt;a href=&quot;https://m.uber.com&quot; data-href=&quot;https://m.uber.com&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://m.uber.com&lt;/a&gt; mobile endpoint. Their Content Security Policy includes a whitelist for *.cloudfront.net. I can enable Cloudfront in my Amazon Web Services console and host whatever arbitrary JavaScript code I want there, to be executed by &lt;a href=&quot;https://m.uber.com.&quot; data-href=&quot;https://m.uber.com.&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;https://m.uber.com.&lt;/a&gt; These are two separate issues considered critical severity findings under Content Security Policy 3, in addition to the ability to reflect arbitrary whatever through their mobile endpoint.&lt;/p&gt;
&lt;p name=&quot;2059&quot; id=&quot;2059&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I submit the report to Uber:&lt;/p&gt;
&lt;blockquote name=&quot;0fa8&quot; id=&quot;0fa8&quot; class=&quot;graf graf--blockquote graf-after--p&quot; readability=&quot;11.36690647482&quot;&gt;
&lt;p&gt;The udi-id request parameter at the &lt;a href=&quot;https://m.uber.com/0-dfffb25d2cf6ceeb0a27.js&quot; data-href=&quot;https://m.uber.com/0-dfffb25d2cf6ceeb0a27.js&quot; class=&quot;markup--anchor markup--blockquote-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://m.uber.com/0-dfffb25d2cf6ceeb0a27.js&lt;/a&gt; mobile endpoint is copied into a javascript string encapsulated in double quotation marks, resulting in SSL-protected payloads being reflected unmodified in the application’s response. The script-src whitelist at the endpoint includes a wildcard *.cloudfront.net host, which could be used by any attacker with an Amazon Web Services account to provision an arbitrary cloudfront.net host to serve trusted files from. The endpoint also has a missing base-uri, which allows the injection of base tags. They can be used to set the base URL for all relative (script) URLs to an attacker controlled domain. In addition to the reflected XSS issue, both the script-src and base-uri issues are considered high severity findings under Content Security Policy 3.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;13e2&quot; id=&quot;13e2&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;I’m also able to bypass the Uber OneLogin SSO portal, resulting in source code disclosure from their internal uChat employee messaging system. It’s not as serious as the XSS/CSP issues, but I throw that in a second report for good measure.&lt;/p&gt;
&lt;p name=&quot;942b&quot; id=&quot;942b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Rob Fletcher gets assigned the ticket:&lt;/p&gt;
&lt;blockquote name=&quot;713a&quot; id=&quot;713a&quot; class=&quot;graf graf--blockquote graf-after--p&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;We’ll take a look into this one more time, but so far this is not a security bug that is in scope — you’ve failed to demonstrate Javascript execution in a modern browser and the other behavior you allude to with “generating some arbitrary text using single quotes” sounds like simple content injection, which is out of scope for our program.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote name=&quot;6649&quot; id=&quot;6649&quot; class=&quot;graf graf--blockquote graf-after--blockquote&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Please refrain from making theoretical arguments for why something has security impact and instead familiarize yourself with our scope page and demonstrate actual security impact that is in scope per our guidelines.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;10ef&quot; id=&quot;10ef&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;…&lt;/p&gt;
&lt;p name=&quot;8229&quot; id=&quot;8229&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;One of my responses:&lt;/p&gt;
&lt;blockquote name=&quot;7daf&quot; id=&quot;7daf&quot; class=&quot;graf graf--blockquote graf-after--p&quot;&gt;
&lt;p&gt;Hello Rob,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote name=&quot;9d87&quot; id=&quot;9d87&quot; class=&quot;graf graf--blockquote graf-after--blockquote&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;This is reflected XSS, and certainly in scope. For example, here is the Uber sample report:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote name=&quot;72d0&quot; id=&quot;72d0&quot; class=&quot;graf graf--blockquote graf-after--blockquote&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;## Summary&lt;br/&gt;reflected XSS in partners.uber.com&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote name=&quot;9cfb&quot; id=&quot;9cfb&quot; class=&quot;graf graf--blockquote graf-after--blockquote&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;## Security Impact&lt;br/&gt;Since partners.uber.com has an authenticated experience, an XSS in this domain&lt;br/&gt;means an attacker can forge authenticated requests on behalf of the victim.&lt;br/&gt;Also, advanced phishing attacks and defacement are possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote name=&quot;5bcd&quot; id=&quot;5bcd&quot; class=&quot;graf graf--blockquote graf-after--blockquote&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;## Reproduction Steps&lt;br/&gt;This is a reflected XSS in `partners.uber.com/ via the `lang` querystring&lt;br/&gt;parameter via the route `/documents`.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote name=&quot;475c&quot; id=&quot;475c&quot; class=&quot;graf graf--blockquote graf-after--blockquote&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;This particular issue is almost word-for-word the same as your sample vulnerability report, with a POC that executes arbitrary html from an SSL-protected Uber website, so I don’t know how you could possibly say this is not in scope…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;7560&quot; id=&quot;7560&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;His response:&lt;/p&gt;
&lt;blockquote name=&quot;174f&quot; id=&quot;174f&quot; class=&quot;graf graf--blockquote graf-after--p&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;It’s not XSS if you can’t get Javascript to execute — we’re verifying your most recent payloads to see if they fire Javascript and will go from there.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;0214&quot; id=&quot;0214&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;Ok. So I’ve demonstrated reflected XSS through their mobile endpoint, but their WAF is apparently filtering double quotes to prevent arbitrary JavaScript execution, and Uber is attempting to constrain the definition of XSS to only JavaScript execution even though the XSS definition has been expanded over the years to several other code execution frameworks well beyond just JavaScript. And, I’ve been able to trigger JavaScript execution with this particular attack vector in older Webkit browser engines, but Chrome’s XSS_Auditor is jumping in to block the XSS due to partial quote escaping by the Uber WAF and Uber is using this to not pay the bounty.&lt;/p&gt;
&lt;p name=&quot;6bdf&quot; id=&quot;6bdf&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Bug bounties are exactly that: a way of openly researching and then submitting reports on the discovered application and/or infrastructure bug, supported with adequate evidence to prove the report abstract. This isn’t, or at least should not be, some digital munitions service where I have to provide a full-on exploit to prove that an application or service is vulnerable to attack, because if I have to go to that effort then why not just legitimately sell the exploit on any one of a number of commercial exploit brokerage auction services?&lt;/p&gt;
&lt;p name=&quot;fa14&quot; id=&quot;fa14&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Well whatever, I am already invested in this so I build another payload, this time evading their WAF and Chrome’s XSS_Auditor, by injecting an HTML form that says “ENTER YOUR UBER USERNAME AND PASSWORD” which gets perfectly rendered from &lt;a href=&quot;https://m.uber.com/&quot; data-href=&quot;https://m.uber.com/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://m.uber.com&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote name=&quot;61c6&quot; id=&quot;61c6&quot; class=&quot;graf graf--blockquote graf-after--p&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Here is a login form. Not properly formatted, because I am not a web developer or professional phisher.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;ded3&quot; id=&quot;ded3&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;So now it’s a completely verified critical security vulnerability, with working POC that will harvest usernames and passwords from an Uber mobile endpoint, and SSL-protected with Uber’s signed certificate. The Uber development team gets involved, and additionally verifies that yes, they can execute arbitrary JavaScript code from any *.cloudfront.net host, so these are three distinct critical severity security issues: reflected XSS, HTML content injection, and a CSP that allows execution of arbitrary JavaScript from any *.cloudfront.net host.&lt;/p&gt;
&lt;p name=&quot;49aa&quot; id=&quot;49aa&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So Uber pulls the &lt;a href=&quot;https://m.uber.com&quot; data-href=&quot;https://m.uber.com&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://m.uber.com&lt;/a&gt; endpoint, and starts redirecting the various offending applications to their OneLogin SSO portal.&lt;/p&gt;
&lt;p name=&quot;8c54&quot; id=&quot;8c54&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Followed by locking and then closing without payment all of my submitted security reports, so that they can’t be viewed or publicly disclosed.&lt;/p&gt;
&lt;p name=&quot;e896&quot; id=&quot;e896&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;And now the HackerOne / Uber Bug Bounty report submission button:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*XQ7OTHmiQfbygzIEVQhG5g.png&quot; data-width=&quot;927&quot; data-height=&quot;514&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*XQ7OTHmiQfbygzIEVQhG5g.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*XQ7OTHmiQfbygzIEVQhG5g.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;da3c&quot; id=&quot;da3c&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;TL;DR;&lt;/p&gt;
&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;73d6&quot; id=&quot;73d6&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Uber maintains GPS coordinate tracking data for tens of millions of people in the U.S. and abroad, so the security of their information assets is almost a matter of public interest.&lt;/li&gt;
&lt;li name=&quot;ec99&quot; id=&quot;ec99&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;All of the recent bad press about the brotato corporate culture at Uber is really real.&lt;/li&gt;
&lt;li name=&quot;0d41&quot; id=&quot;0d41&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Uber is not serious about their security efforts, and their HackerOne Bug Bounty is completely bogus.&lt;/li&gt;
&lt;li name=&quot;e6a9&quot; id=&quot;e6a9&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;If you invest any time and effort into HackerOne Bug Bounties, HackerOne does not honor their minimum bug bounty guarantee, and will not go to bat for you if you have a dispute with one of their well-placed vendors such as Uber.&lt;/li&gt;
&lt;/ol&gt;&lt;p name=&quot;e24c&quot; id=&quot;e24c&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Caveat Emptor.&lt;/em&gt;&lt;/p&gt;
&lt;p name=&quot;d7c7&quot; id=&quot;d7c7&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;&lt;a href=&quot;mailto:totallynotrobots@protonmail.com&quot; data-href=&quot;mailto:totallynotrobots@protonmail.com&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;totallynotrobots@protonmail.com&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 24 Dec 2017 18:16:06 +0000</pubDate>
<dc:creator>GregoryVPerry</dc:creator>
<og:title>How I Got Paid $0 From the Uber Security Bug Bounty</og:title>
<og:url>https://medium.com/bread-and-circuses/how-i-got-paid-0-from-the-uber-security-bug-bounty-aa9646aa103f</og:url>
<og:image>https://cdn-images-1.medium.com/max/1200/1*XQ7OTHmiQfbygzIEVQhG5g.png</og:image>
<og:description>So Uber partners with HackerOne to offer a public bug bounty program, advertising a $500 minimum guaranteed payout if a security…</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/bread-and-circuses/how-i-got-paid-0-from-the-uber-security-bug-bounty-aa9646aa103f</dc:identifier>
</item>
<item>
<title>Vue.js vs. React: what happened in 2017</title>
<link>http://pixeljets.com/blog/vue-js-vs-react-what-to-expect-in-2018/</link>
<guid isPermaLink="true" >http://pixeljets.com/blog/vue-js-vs-react-what-to-expect-in-2018/</guid>
<description>&lt;p&gt;One year ago I've published a post about reasons why our team chose Vue.js over React for our qwintry.com project rewrite. I've made some predictions back then:&lt;/p&gt;&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;I expect Vue to become a primary JS framework in 16-24 months if Evan You makes right steps, at least around backenders and smaller teams of frontenders. I still consider React stack to be the primary JS framework of 2017, especially if React Native manages to mature and improve itself with the same pace it used to.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://pixeljets.com/blog/why-we-chose-vuejs-over-react/&quot;&gt;me, 10 dec 2016&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since guys from stateofjs.com recently published its 2017 results, there is some material for analysis and thoughts here.&lt;/p&gt;
&lt;h2 id=&quot;stateofjs2017frontendframeworkresults&quot;&gt;Stateofjs 2017 Frontend Framework results&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://pixeljets.com/blog/content/images/2017/12/stateofjs_2017_front.png&quot; alt=&quot;&quot;/&gt;&lt;a href=&quot;https://stateofjs.com/2017/front-end/results&quot;&gt;https://stateofjs.com/2017/front-end/results&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now compare it to Stateofjs 2016 Frontend Framework results:&lt;br/&gt;&lt;img src=&quot;http://pixeljets.com/blog/content/images/2017/12/stateofjs_2016_front.png&quot; alt=&quot;&quot;/&gt;&lt;a href=&quot;http://2016.stateofjs.com/2016/frontend/&quot;&gt;http://2016.stateofjs.com/2016/frontend/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, 1 year passed, and Vue.js is clearly the leader in &quot;would like to learn&quot; by a huge margin which makes me think the next year would be the year of Vue.js success, with React being stable in its growth, while Angular won't be able to keep up with these two rivals. Compare it with 2016 when Vue.js was clearly a dark horse and &quot;another JS framework&quot;, Angular was a second choice for &quot;serious guys&quot; and React was a leader.&lt;/p&gt;
&lt;p&gt;But.. Vue.js will be dominating only in the web, definitely not in overall frontend world.&lt;br/&gt;React is becoming the technology that will rule the frontend world.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;h2 id=&quot;synergyandsatelliteproducts&quot;&gt;Synergy and satellite products&lt;/h2&gt;
&lt;p&gt;Here is the answer:&lt;br/&gt;&lt;strong&gt;Stateofjs.com 2017 Mobile &amp;amp; Desktop Frameworks results&lt;/strong&gt; &lt;img src=&quot;http://pixeljets.com/blog/content/images/2017/12/stateofjs_2017_mobile.png&quot; alt=&quot;Stateofjs 2017 mobile frameworks results&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stateofjs.com/2017/mobile/results/&quot;&gt;https://stateofjs.com/2017/mobile/results/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Synergy, my friends, is the key to React upcoming monopoly.&lt;/p&gt;
&lt;h4 id=&quot;reactnative&quot;&gt;React Native&lt;/h4&gt;
&lt;p&gt;Vue.js failed to provide viable alternative to React Native (Weex and Quasar are too young, fragmented and weak), and React Native + React.js is exploding because if you (as an average 2018 developer) master React and Redux for the web, you will get a huge profit right away: if you want, you will be productive in mobile world in a matter of weeks with React Native which clearly demonstrated its advantages over Cordova and other hybrid approaches – just look at Adidas Glitch App, and Skype for Android and iOS, to feel the abyss between React Native and competing hybrid technologies:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/possible-cee/how-we-have-been-breaking-patterns-with-the-adidas-glitch-d734340fd40e&quot;&gt;https://medium.com/possible-cee/how-we-have-been-breaking-patterns-with-the-adidas-glitch-d734340fd40e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mspoweruser.com/skype-is-testing-a-new-android-app-with-a-new-design-reaction-feature-and-bing-integration/&quot;&gt;https://mspoweruser.com/skype-is-testing-a-new-android-app-with-a-new-design-reaction-feature-and-bing-integration/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Modern development is about mobile, not just about the web.&lt;/p&gt;
&lt;p&gt;React Native is a success, and it will drag React.js to the sky.&lt;/p&gt;
&lt;p&gt;We (as a Qwintry team) are preparing big releases of our apps for iOS and Android, scheduled for the first quarter of 2018, for our new website rewritten from scratch (codename Q3, powered by Vue.js and Yii2), and our new apps are powered by React Native.&lt;br/&gt;When we were considering React Native 1.5-2 years ago for our previous versions of apps, our Swift developer conclusion was &quot;definitely no&quot;, that was &quot;boring&quot; but logical decision – it was a great idea to wait for technology to mature. We ended up having Swift app for iOS and Java app for Android back then, and I am pretty sure we avoided a lot of pain.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/ru/app/%D0%B1%D0%B0%D0%BD%D0%B4%D0%B5%D1%80%D0%BE%D0%BB%D1%8C%D0%BA%D0%B0-%D0%B4%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%BA%D0%B0-%D0%B8%D0%B7-%D0%BC%D0%B0%D0%B3%D0%B0%D0%B7%D0%B8%D0%BD%D0%BE%D0%B2-%D1%81%D1%88%D0%B0/id1015885334?mt=8&quot;&gt;Link to our iOS app which is now written in Swift but will get React Native release in a matter of weeks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now our Swift developer is writing JS code in React Native and admits it's pretty good and it is the right moment to jump to new stack because advantages of React Native in a lot of cases are now bigger than disadvantages.&lt;/p&gt;
&lt;p&gt;Our frontend guys who are writing Vue.js code for web became productive in React Native in a matter of weeks, but I think this process would be even less painful and our stack would be simpler if we chose React.js for the web. We definitely do not regret choosing Vue.js for web, &lt;a href=&quot;http://pixeljets.com/blog/why-we-chose-vuejs-over-react/&quot;&gt;read more in my previous post why we did that&lt;/a&gt;, my expectations on Vue.js web domination are becoming the reality, but I still expect a lot of other small and mid-sized teams in 2018 to choose React stack both for web and mobile because of the synergy – it is just an obvious choice now when React Native is so good. Managing separate native mobile development process with Java and Swift/Objective C is still great and safe choice, but it might get expensive from the business point of view, and going through app store approvals still sucks compared to the magic of &lt;a href=&quot;https://github.com/Microsoft/react-native-code-push&quot;&gt;React Native Codepush&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;graphql&quot;&gt;GraphQL&lt;/h4&gt;
&lt;p&gt;GraphQL is another product of Facebook which adds value to React ecosystem.&lt;br/&gt;It's not mature yet, it is complex, it has its disadvantages - but it looks like GraphQL is the future replacement for REST.&lt;/p&gt;
&lt;p&gt;GraphQL is another sign that innovation in frontend world mostly happens in React universe, and then these innovations are adopted&amp;amp;improved in other frameworks.&lt;/p&gt;
&lt;h2 id=&quot;moreinfo&quot;&gt;More info&lt;/h2&gt;
&lt;p&gt;Stackoverflow shows an interesting graph of developer questions related to frontend:&lt;br/&gt;&lt;img src=&quot;http://pixeljets.com/blog/content/images/2017/12/download--1-.svg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Angular is definitely looking &quot;better&quot; here but I don't think this is an indicator that Angular as a framework will be successful in a long-term period – to my mind it is just an indicator that migration from Angular 1 to Angular2+ is an obvious choice for a regular developer who maintains legacy Angular 1 code, but when he tries to migrate and sees the number of changes between old and new versions of Angular – it leads to frustration and this fact explains big number of questions on SO.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.stackoverflow.com/trends?tags=angularjs%2Cangular%2Creactjs%2Cvue.js%2Cember.js&quot;&gt;https://insights.stackoverflow.com/trends?tags=angularjs%2Cangular%2Creactjs%2Cvue.js%2Cember.js&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;coulditbedifferent&quot;&gt;Could it be different?&lt;/h2&gt;
&lt;p&gt;There was a moment in 2017 when Vue.js could win the &quot;war&quot; with React in terms of gaining developer traction, even with the absence of proper mobile solution in its stack.&lt;br/&gt;I am talking about the situation with React licensing:&lt;br/&gt;&lt;a href=&quot;https://ma.tt/2017/09/on-react-and-wordpress/&quot;&gt;https://ma.tt/2017/09/on-react-and-wordpress/&lt;/a&gt; &lt;a href=&quot;https://news.ycombinator.com/item?id=15253781&quot;&gt;(HackerNews discussion)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wordpress was considering to ditch React as the frontend solution for its &lt;a href=&quot;https://ithemes.com/2017/11/09/gutenberg-wordpress-editor-10-things-to-know/&quot;&gt;layout builder&lt;/a&gt;, and it could result in Vue.js to be chosen for Wordpress ecosystem pretty much like it was chosen for Laravel.&lt;/p&gt;
&lt;p&gt;The intrigue was killed with Facebook just-in-time wise decision to fix the React license:&lt;br/&gt;&lt;a href=&quot;https://ma.tt/2017/09/facebook-dropping-patent-clause/&quot;&gt;https://ma.tt/2017/09/facebook-dropping-patent-clause/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Congratulations, Facebook and React team, you did a good job this year, and we will be glad to use React products in our stack, and recommend both Vue.js and React for other teams depending on their situation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pixeljets.com/blog/content/images/2017/12/DJI_0057.JPG&quot; alt=&quot;&quot;/&gt;&lt;em&gt;New Qwintry warehouse in New Castle, Delaware, right after Black Friday 2017 customer purchase volumes hit us hard. Every package here is managed, received, and picked via our Swift and React Native powered operator apps, and customers create their orders via Swift/Java (soon React Native) customer apps.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;UPD: This post made its way to Hacker News frontpage and &lt;a href=&quot;https://news.ycombinator.com/item?id=15999688&quot;&gt;there is a useful discussion with 100+ comments there&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Useful comments:&lt;br/&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=16002312&quot;&gt;&lt;img src=&quot;http://pixeljets.com/blog/content/images/2017/12/Screenshot-at-Dec-25-14-31-30.png&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 24 Dec 2017 14:36:10 +0000</pubDate>
<dc:creator>jetter</dc:creator>
<og:type>article</og:type>
<og:title>Vue.js vs React in 2017: state of art</og:title>
<og:description>One year ago I've published a post about reasons why our team chose Vue.js over React for our qwintry.com project rewrite. I've made some predictions back then: I expect Vue to become a primary JS framework in 16-24 months if Evan You makes right steps, at least around</og:description>
<og:url>http://pixeljets.com/blog/vue-js-vs-react-what-to-expect-in-2018/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>http://pixeljets.com/blog/vue-js-vs-react-what-to-expect-in-2018/</dc:identifier>
</item>
<item>
<title>Axiom Beta – Digital cinema camera built around FOSS and open hardware</title>
<link>https://www.apertus.org/axiom-beta</link>
<guid isPermaLink="true" >https://www.apertus.org/axiom-beta</guid>
<description>&lt;a href=&quot;https://www.apertus.org/sites/default/files/images/AXIOM%20Beta%20Standard%20wallpaper%2001%20Many%20Tweaks.png&quot; class=&quot;colorbox&quot;&gt;&lt;img src=&quot;https://www.apertus.org/sites/default/files/images/AXIOM%20Beta%20Standard%20wallpaper%2001%20Many%20Tweaks.png&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Pictured: AXIOM Beta Developer Kit.&lt;/p&gt;
&lt;p&gt;Introducing AXIOM Beta, a professional digital cinema camera built around FOSS and open hardware licenses.&lt;br/&gt;&lt;/p&gt;
&lt;div class=&quot;twocoloumns&quot; readability=&quot;16.505592841163&quot;&gt;The first of its kind, and providing users with the ability to swap or upgrade sensors at any time, our community’s debut camera is the result of years of collaboration with the &lt;a href=&quot;http://www.magiclantern.fm/&quot; target=&quot;blank&quot;&gt;Magic Lantern&lt;/a&gt; team. With powerful internal components, custom-built printed circuit boards and plugin modules, FPGAs and an onboard Linux operating system at your disposal, changing the entire operation of your camera to suit the needs of any project is now possible.&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&quot;The most interesting aspect of the AXIOM cameras is that they have the potential to be the last camera you will ever need… they won't eventually become technologically obsolete like most cameras.&quot;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.apertus.org/sites/default/files/images/AXIOM%20Beta%20Compact%20Overview%2003.png&quot; class=&quot;colorbox&quot;&gt;&lt;img src=&quot;https://www.apertus.org/sites/default/files/images/AXIOM%20Beta%20Compact%20Overview%2003.png&quot;/&gt;&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;AXIOM Beta Compact enclosure concept circa Nov 2017.&lt;/p&gt;
&lt;p&gt;This truly is the first camera where nothing is hidden from you.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;The camera boasts superb image quality, high frame rates, rich colour science properties and a small, lightweight form factor. It's designed to evolve continuously and give users unparalleled access to the raw data being recorded from a sensor. Individual hardware components can be swapped out and upgraded as and when required, and software can be modified to suit the needs of specific use cases anytime. Take what we’ve done, modify anything you like in whatever way you like, and make it yours.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&quot;We need a camera that is fully customisable. I can build my PC and pick every single part to fit my needs and upgrade each part as and when needed. It would be great to just upgrade the AF system or upgrade to a new sensor instead of buying a whole new camera.&quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;- Adam Cross&lt;/p&gt;
&lt;h2&gt;Versions&lt;/h2&gt;
&lt;p&gt;AXIOM Beta is available/planned in the following enclosures/versions:&lt;/p&gt;
&lt;br/&gt;&lt;div class=&quot;row-fluid&quot; readability=&quot;26.498204207286&quot;&gt;
&lt;div class=&quot;span4&quot; readability=&quot;22.390015600624&quot;&gt;&lt;a href=&quot;https://www.apertus.org/sites/default/files/images/AXIOM%20Beta%20DK%20w%20Lens%20on%20e1e1e1.png&quot; class=&quot;colorbox&quot;&gt;&lt;img src=&quot;https://www.apertus.org/sites/default/files/images/AXIOM%20Beta%20DK%20w%20Lens%20on%20e1e1e1.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;h3&gt;AXIOM Beta Developer Kit&lt;/h3&gt;
This version of the camera is suitable for anyone who’d like to work on development, reconfigure its software and or core components, or build their own enclosures etc… Developer Kits are supported by a custom CNC-milled skeleton framework and provide easy access to the camera’s printed circuit boards - With this in mind associated design files, board layouts, BOMs, CAD models, software source code repositories, etc. are all made freely available.&lt;p&gt;For insight into how AXIOM Beta Developer Kits have been configured by members of the community see &lt;a href=&quot;https://wiki.apertus.org/index.php/AXIOM_Beta/Case_Studies&quot; target=&quot;blank&quot;&gt;Case Studies&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Price: €3,990.00 (excl. VAT + Shipping)&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://wiki.apertus.org/index.php/AXIOM_Beta/Prices&quot; target=&quot;blank&quot; class=&quot;btn btn-warning&quot;&gt;Order&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;span4&quot; readability=&quot;20.322580645161&quot;&gt;&lt;a href=&quot;https://www.apertus.org/sites/default/files/images/AXIOM%20Beta%20CP%20w%20Lens%20on%20e1e1e1.png&quot; class=&quot;colorbox&quot;&gt;&lt;img src=&quot;https://www.apertus.org/sites/default/files/images/AXIOM%20Beta%20CP%20w%20Lens%20on%20e1e1e1.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;h3&gt;AXIOM Beta Compact&lt;/h3&gt;
This enclosure option provides a solid but lightweight aluminum layer around the camera's electronics and incorporates several mount points and future expansion slots. Individual modules are swappable (eg. lens mount, plugin modules) and extra care has been taken to use screws instead of glue so that customisation, and, should the need arise, simple repairs are made easy.&lt;p&gt;AXIOM Beta Compact is purpose-built for rig integration and general in-the-field protection, making it ideally suited to most photo and video production environments.&lt;/p&gt;&lt;p&gt;Price: €5,990.00 (excl. VAT + Shipping)&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLScLBP_C61CxAE39xH4B25re8TI5hxU9cf8ad9N-HjuMIlNs4Q/viewform?usp=send_form&quot; target=&quot;blank&quot; class=&quot;btn btn-warning&quot;&gt;Get Pre-Order Access&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;span4&quot; readability=&quot;15.206997084548&quot;&gt;&lt;a href=&quot;https://www.apertus.org/sites/default/files/images/AXIOM%20Beta%20EX%20on%20e1e1e1%20b.png&quot; class=&quot;colorbox&quot;&gt;&lt;img src=&quot;https://www.apertus.org/sites/default/files/images/AXIOM%20Beta%20EX%20on%20e1e1e1%20b.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;h3&gt;AXIOM Beta Extended&lt;/h3&gt;
Currently in a state of early development, and inspired by the 35mm film camera magazines of yesteryear's golden age of analog film cameras, this enclosure is ideal for any film production scenario and rests well on the DOP's shoulders. With ergonomics in mind and providing space for a more sophisticated airflow system, AXIOM Beta Extended is a camera and integrated AXIOM Recorder combination that plans to incorporate an INTEL NUC and 2.5&quot; SSD(s). And of course, the AXIOM Recorder module can be attached in various locations around the enclosure and at different angles.&lt;p&gt;Learn more about the AXIOM Beta Extended from &lt;a href=&quot;https://www.apertus.org/axiom-team-talk-volume-13.2-article-november-2017&quot; target=&quot;blank&quot;&gt;Team Talk 13.2&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Price: TBD&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLScLBP_C61CxAE39xH4B25re8TI5hxU9cf8ad9N-HjuMIlNs4Q/viewform?usp=send_form&quot; target=&quot;blank&quot; class=&quot;btn btn-warning&quot;&gt;Get Pre-Order Access&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Hand-built. Constantly evolving.&lt;br/&gt;&lt;/p&gt;
&lt;div class=&quot;twocoloumns&quot; readability=&quot;15.243010752688&quot;&gt;Over the past five years our core team and the wider community have custom-built the PCBs (printed circuit boards) and software that bring AXIOM Beta to life. Since the &lt;a href=&quot;https://wiki.apertus.org/index.php/AXIOM_Project_Background&quot; target=&quot;blank&quot;&gt;project’s beginnings&lt;/a&gt; each camera has been painstakingly assembled by hand and, wherever possible, open source programs and equipment have been used to accomplish all aspects of project development. Now, in the same way, we’ve also built machines to assemble the camera as precisely as we did.&lt;/div&gt;
&lt;p&gt;&lt;em&gt;“... regardless of the open source aspect of the project, it's different to other cameras because of how they implement the hardware. Whereas [other manufacturers] use their own ASICs (Application Specific Integrated Circuits) for the image &amp;amp; data processing, the AXIOM Beta uses an FPGA (Field Programmable Gate Array)... With an FPGA you can change the entire operation of the camera down to how it handles handshakes with the analog-to-digital converters from the sensor. Thus, the apertus° team can continuously provide updates and new features easier than any other manufacturer.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.apertus.org/sites/default/files/images/AXIOM%20Beta%20II%20Overview%2001.png&quot; class=&quot;colorbox&quot;&gt;&lt;img src=&quot;https://www.apertus.org/sites/default/files/images/AXIOM%20Beta%20II%20Overview%2001.png&quot;/&gt;&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;AXIOM Beta Compact enclosure concept circa Nov 2017.&lt;/p&gt;
&lt;div class=&quot;twocoloumns&quot; readability=&quot;11.697478991597&quot;&gt;The AXIOM Beta's internal components consist of five PCBs, one of which accommodates two high speed module slots. Each module has a total bandwidth to and from the camera's main processing FPGA of at least 6 Gbit/s. This makes the modules perfect for dealing with high bandwidth video outputs like HDMI/Displayport/SDI, and has allowed us to explore the provision of solid state media recording facilities for an AXIOM Recorder. Learn more about structure on the &lt;a href=&quot;https://wiki.apertus.org/index.php/AXIOM_Beta/Camera_Structure&quot; target=&quot;blank&quot;&gt;Project Wiki&lt;/a&gt;.&lt;/div&gt;
&lt;div&gt;&lt;em&gt;&quot;The hardware design of the AXIOM Beta was kept simple at first, purely addressing problems discovered with its predecessor, the &lt;a href=&quot;https://www.apertus.org/alpha_prototype&quot; target=&quot;blank&quot;&gt;AXIOM Alpha&lt;/a&gt;. In the beginning we had intended to design the camera around a single board on top of an off-the-shelf FPGA/system-on-chip development board: the MicroZed™, but as a result of field testing and together with feedback gathered from the community we agreed to make it far more powerful by devising a more complex stack of boards where each layer is dedicated to specific functions.”&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;- Sebastian Pichelhofer, apertus°.&lt;/p&gt;
&lt;h2&gt;Specifications&lt;/h2&gt;
&lt;br/&gt;&lt;table class=&quot;table table-striped&quot; readability=&quot;20.083005249344&quot;&gt;&lt;tr readability=&quot;9.4666666666667&quot;&gt;&lt;td width=&quot;150px&quot;&gt;&lt;strong&gt;Image Sensor&lt;/strong&gt;&lt;/td&gt;
&lt;td readability=&quot;8.9735099337748&quot;&gt;
&lt;p&gt;ams Sensors Belgium CMV12000 - 4K resolution, Super 35mm diameter, global shutter with up to 300 frames per second at full resolution&lt;br/&gt;(This sensor has been used for research and development purposes but more &lt;a href=&quot;https://www.apertus.org/axiom-beta-imagesensors&quot; target=&quot;blank&quot;&gt;options&lt;/a&gt; will become available. For other compatible alternatives see &lt;a href=&quot;https://wiki.apertus.org/index.php/Image_Sensor_Table&quot; target=&quot;blank&quot;&gt;Wiki: Image Sensor Table&lt;/a&gt;)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;&lt;strong&gt;Lens Mount&lt;/strong&gt;&lt;/td&gt;
&lt;td readability=&quot;7&quot;&gt;
&lt;p&gt;Passive E-mount&lt;br/&gt;Compatible with mechanical adapters to accommodate every manual lens, active lens mounts planned for the future.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td&gt;&lt;strong&gt;Camera Control&lt;/strong&gt;&lt;/td&gt;
&lt;td readability=&quot;8&quot;&gt;
&lt;p&gt;SSH&lt;/p&gt;
&lt;p&gt;WebGUI (Smartphone, Tablet, Laptop, etc.)&lt;/p&gt;
&lt;p&gt;AXIOM Remote&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;&lt;strong&gt;Expansion&lt;/strong&gt;&lt;/td&gt;
&lt;td readability=&quot;9&quot;&gt;
&lt;p&gt;2x High-speed plugin module slots&lt;/p&gt;
&lt;p&gt;1x Medium-speed shield slot&lt;/p&gt;
&lt;p&gt;1x Low-speed shield slot&lt;/p&gt;
&lt;p&gt;2x Center Solder On (CSO) modules&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;21.5&quot;&gt;&lt;td&gt;&lt;strong&gt;Expansion Modules&lt;/strong&gt;&lt;/td&gt;
&lt;td readability=&quot;24&quot;&gt;
&lt;p&gt;Single HDMI 1080p60 (4:4:4) output plugin module&lt;/p&gt;
&lt;p&gt;Dual 6G SDI output plugin module (in development)&lt;/p&gt;
&lt;p&gt;Genlock, Trigger, Timecode, LANC shields (in development)&lt;/p&gt;
&lt;p&gt;4K Displayport/HDMI plugin module (in development)&lt;/p&gt;
&lt;p&gt;CSO Module for Motion Tracking (3D Accelerometer, 3D magnetometer, 3D gyroscope, air pressure e.g. for 3D tracking or image stabilization) (in development)&lt;/p&gt;
&lt;p&gt;3x PMOD debug plugin module&lt;/p&gt;
&lt;p&gt;1x PMOD debug plugin module&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;strong&gt;General Connectivity&lt;/strong&gt;&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;USB / Serial Console / Gigabit Ethernet / WiFi (optional)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;&lt;strong&gt;Internal Image Processing&lt;/strong&gt;&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;Matrix color conversion&lt;/p&gt;
&lt;p&gt;Look-Up-Tables (LUTs)&lt;/p&gt;
&lt;p&gt;Fixed Pattern Noise (FPN) compensation&lt;/p&gt;
&lt;p&gt;False color display&lt;/p&gt;
&lt;p&gt;Overlays&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;strong&gt;Hardware Architecture&lt;/strong&gt;&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;Xilinx Zynq 7020 based MicroZed&lt;br/&gt;FPGA + Dual ARM Core&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Operating System&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Embedded Linux (Arch)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;strong&gt;Power Supply&lt;/strong&gt;&lt;/td&gt;
&lt;td readability=&quot;7&quot;&gt;
&lt;p&gt;5V DC supply module (swappable)&lt;/p&gt;
&lt;p&gt;Wide input voltage range module 5-40V (planned)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h2&gt;Results&lt;/h2&gt;
&lt;br/&gt;&lt;a href=&quot;https://www.apertus.org/sites/default/files/images/AXIOM%20Beta%20Sensor%20Board%20PR%20Card%2004.png&quot; class=&quot;colorbox&quot;&gt;&lt;img src=&quot;https://www.apertus.org/sites/default/files/images/AXIOM%20Beta%20Sensor%20Board%20PR%20Card%2004.png&quot;/&gt;&lt;/a&gt;&lt;p&gt;Very promising characteristics are being achieved with preliminary internal image capture and processing,&lt;br/&gt;indicating that, when development reaches a stage of greater maturity, the camera will record digital film at exceptional quality.&lt;br/&gt;&lt;/p&gt;
&lt;div class=&quot;twocoloumns&quot; readability=&quot;16.406976744186&quot;&gt;The modularity of the camera means that any of its internal components can be swapped out and replaced or upgraded, including the sensor. When we began the process of crowdfunding research and development we ran polls asking what sensor the community would like to see being used for demonstration purposes. Approximately 90% of project backers chose the ams Sensors Belgium, 35mm, 4K CMV12000. The following video was part of a Shakespearean adaptation shot by &lt;a href=&quot;http://www.imdb.com/title/tt5902750/&quot; target=&quot;blank&quot;&gt;Traum und Wahnsinn&lt;/a&gt;, on AXIOM Beta, using the CMV12000.&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&quot;We're happy with the footage that's been captured with the camera through this particular sensor, but there's definitely room for good improvement as software matures.&quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;- Herbert Pötzl.&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/L65zNiAnM0E&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;br/&gt;&lt;strong&gt;Note:&lt;/strong&gt; YouTube transcoding downgrades image quality, but you may want to visit our &lt;a href=&quot;https://wiki.apertus.org/index.php/AXIOM_Beta/Video&quot; target=&quot;blank&quot;&gt;Video Archive&lt;/a&gt; to see early test footage submissions. There are uncompressed .mov .mp4 and .dng files in 720p, 1080p and 4K archived here if you'd like to play with them.&lt;h2&gt;Freedom&lt;/h2&gt;
&lt;br/&gt;&lt;div class=&quot;row-fluid&quot; readability=&quot;18.998027613412&quot;&gt;
&lt;div class=&quot;span4&quot; readability=&quot;13.641732283465&quot;&gt;&lt;img src=&quot;https://www.apertus.org/sites/default/files/images/Overview%20ML2.png&quot;/&gt;&lt;p&gt;Full potential unlocked.&lt;/p&gt;
&lt;p&gt;The AXIOM Beta is being built together with experts from the &lt;a href=&quot;http://www.magiclantern.fm/&quot; target=&quot;blank&quot;&gt;Magic Lantern&lt;/a&gt; team. The community that brought you the features Canon never wanted you to have are now bringing a cinema camera into the film-making world.&lt;/p&gt;&lt;p&gt;Because the AXIOM project and the software they originally pioneered are underpinned by the same ethos, Magic Lantern partnered with apertus° Association in September 2014. Since then they’ve been responsible for color science and raw processing inside the camera.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;span4&quot; readability=&quot;17.826923076923&quot;&gt;&lt;img src=&quot;https://www.apertus.org/sites/default/files/images/Overview%20Tux2.png&quot;/&gt;&lt;p&gt;Love Linux.&lt;/p&gt;
&lt;p&gt;The AXIOM project has been built around the &lt;a href=&quot;https://www.linux.com/what-is-linux&quot; target=&quot;blank&quot;&gt;Linux&lt;/a&gt; operating system. Together with the development tools it offers, Linux provides unparalleled control over the camera software’s functions and processing, but you don’t have to be a programmer to operate it.&lt;/p&gt;&lt;p&gt;AXIOM Beta’s software incorporates a purpose-built user interface so that general functions e.g. shutter presets, ISO and inputting meta-data, can be controlled from the comfort of WiFi connected devices such as laptops, tablets and smart-phones.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;“The beauty of an open source camera to me is a step back toward the dark room, in which making the tools is part of the joy of making the art.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;- Lee Parker, IMAX Cinematographer.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;br/&gt;&lt;div class=&quot;row-fluid&quot; readability=&quot;10.013513513514&quot;&gt;
&lt;div class=&quot;span3&quot;&gt;&lt;a href=&quot;https://wiki.apertus.org/index.php/Main_Page&quot;&gt;&lt;img src=&quot;https://www.apertus.org/sites/default/files/images/Overview%20Wiki%2002.jpg&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;span9&quot; readability=&quot;15.258687258687&quot;&gt;
&lt;h3&gt;Documentation&lt;/h3&gt;
For all technical information e.g. User Manual, electronics schematics, PCB layouts, BOMs, STLs, and detailed reading on all aspects of project development, see the &lt;a href=&quot;https://wiki.apertus.org/index.php/Main_Page&quot; target=&quot;blank&quot;&gt;Project Wiki&lt;/a&gt;.&lt;p&gt;Any help with keeping Wiki pages up to date is greatly appreciated.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;&lt;div class=&quot;row-fluid&quot; readability=&quot;6.7095435684647&quot;&gt;
&lt;div class=&quot;span3&quot;&gt;&lt;a href=&quot;https://lab.apertus.org/home/&quot;&gt;&lt;img src=&quot;https://www.apertus.org/sites/default/files/images/Overview%20Labs.png&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;span9&quot; readability=&quot;8.6265560165975&quot;&gt;
&lt;h3&gt;Labs&lt;/h3&gt;
Our &lt;a href=&quot;https://lab.apertus.org/home/&quot; target=&quot;blank&quot;&gt;AXIOM Labs&lt;/a&gt; are like a forum with some extra performance modules. It has a rich content history dating back years and all project tasks are organised and discussed here. If you have feedback or ideas then consider creating a profile.&lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;&lt;div class=&quot;row-fluid&quot; readability=&quot;5.6949152542373&quot;&gt;
&lt;div class=&quot;span3&quot;&gt;&lt;a href=&quot;https://github.com/apertus-open-source-cinema&quot;&gt;&lt;img src=&quot;https://www.apertus.org/sites/default/files/images/Overview%20GH3.jpg&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;span9&quot; readability=&quot;6.6440677966102&quot;&gt;
&lt;h3&gt;Source Code&lt;/h3&gt;
Access all of the project's software source code repositories and mechanical component drawings on &lt;a href=&quot;https://github.com/apertus-open-source-cinema&quot; target=&quot;blank&quot;&gt;Github&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;&lt;div class=&quot;row-fluid&quot; readability=&quot;5.9613259668508&quot;&gt;
&lt;div class=&quot;span3&quot;&gt;&lt;a href=&quot;https://www.apertus.org/axiom-ecosystem&quot;&gt;&lt;img src=&quot;https://www.apertus.org/sites/default/files/images/Overview%20Ecosystem.png&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;span9&quot; readability=&quot;7.3370165745856&quot;&gt;
&lt;h3&gt;Ecosystem&lt;/h3&gt;
By creating a profile on &lt;a href=&quot;https://www.apertus.org/axiom-ecosystem&quot; target=&quot;blank&quot;&gt;AXIOM Ecosystem&lt;/a&gt; you can list yourself as offering products or services to the community. See where your nearest AXIOM Beta camera is located here.&lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;</description>
<pubDate>Sun, 24 Dec 2017 14:16:29 +0000</pubDate>
<dc:creator>jarmitage</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.apertus.org/axiom-beta</dc:identifier>
</item>
<item>
<title>Formal Verification: The Gap Between Perfect Code and Reality</title>
<link>https://raywang.tech/2017/12/20/Formal-Verification:-The-Gap-between-Perfect-Code-and-Reality/</link>
<guid isPermaLink="true" >https://raywang.tech/2017/12/20/Formal-Verification:-The-Gap-between-Perfect-Code-and-Reality/</guid>
<description>&lt;p&gt;In Fall 2017, I took MIT’s &lt;a href=&quot;http://6826.csail.mit.edu/2017/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;6.826, Principles of Computer Systems&lt;/a&gt;, taught by Turing Award-winner Butler Lampson, Nickolai Zeldovich, and Frans Kaashoek. Despite its rudimentary title, it’s a grad class on building formally verified systems. Using the proof language Coq, we wrote specifications, implementations, and proofs of toy structures: a remapped disk, an atomic pair of blocks, and a replicated disk. We also read quite a few papers from the state-of-the-art in formal methods.&lt;/p&gt;
&lt;p&gt;I went into the class believing that formal verification is the future — the only solution to a world of software ridden with bugs and security issues. But after recent events and a semester of trying to apply formal methods, I’m a serious skeptic. In this post, I’ll discuss why I think formal verification has a long way to go — and why it just doesn’t work right now.&lt;/p&gt;


&lt;p&gt;First, let’s talk about how we get a system that we can rubber-stamp as “formally verified”.&lt;/p&gt;
&lt;h2 id=&quot;Simulation-proofs&quot;&gt;Simulation proofs&lt;/h2&gt;
&lt;p&gt;There are two broad ways to write a formally verified system. The first, the more conventional way, involves carefully constructing specifications of the behavior of a system, an implementation of the system, and then manually writing proofs that the implementation matches the spec. All of this is written in a theorem-proving language like Coq, and then extracted to OCaml or Haskell for a runnable implementation.&lt;/p&gt;
&lt;p&gt;From personal experience with 6.826 labs, this is a nightmare.&lt;/p&gt;
&lt;p&gt;First, the proof burden is huge — for MIT’s &lt;a href=&quot;http://adam.chlipala.net/papers/FscqSOSP15/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FSCQ file system&lt;/a&gt;, developed over about 1.5 years using Coq, the complete system was &lt;strong&gt;10x more code&lt;/strong&gt; than a similar unverified filesystem. Imagine that — 2000 lines of implementation become 20,000 lines of proof! This is partly because Coq is a very general language for reasoning about mathematical logic, and it has little built-in machinery for specialized applications such as complex computer systems. So, we need to build infrastructure from scratch, as well as define our systems from the ground up — from bits and bytes into entire disks.&lt;/p&gt;
&lt;p&gt;The labs were largely spared this ridiculous proof burden due to a lot of automation and infrastructure provided by the instructors. Indeed, 2700 lines of Coq (LoC) are devoted to proof infrastructure — and, in the case of the toy replicated disk lab, another 1500 lines for the actual system.&lt;/p&gt;
&lt;p&gt;Where does all this overhead come from? Well, we need to support what’s called a “simulation proof”. In this proof style, we step through every procedure in our system and show that every reachable state in our implementation has a corresponding state in our spec. Our spec for each procedure contains three conditions — a &lt;em&gt;precondition&lt;/em&gt;, a &lt;em&gt;postcondition&lt;/em&gt;, and a &lt;em&gt;crash condition&lt;/em&gt; that is true if our code suddenly crashes. Then, our proof involves several things:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Establish that the precondition of our procedure holds&lt;/li&gt;
&lt;li&gt;Prove &lt;em&gt;&lt;strong&gt;every line/branch&lt;/strong&gt;&lt;/em&gt; of the procedure is a valid transition&lt;/li&gt;
&lt;li&gt;If there are no crashes at the end of execution, prove the postcondition holds&lt;/li&gt;
&lt;li&gt;If crashes happened before the end of execution, then prove the crash condition holds before each crash, the crash recovery procedure is a valid transition, and the postcondition ends up holding&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Here’s a diagram of a single transition, showing the correspondence between a code state and a spec state. The double arrows are what we need to prove.&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;






&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;line&quot;&gt;spec semantics&lt;/div&gt;
&lt;div class=&quot;line&quot;&gt;forall state ===================&amp;gt; exists state'&lt;/div&gt;


&lt;div class=&quot;line&quot;&gt;V code semantics VV&lt;/div&gt;
&lt;div class=&quot;line&quot;&gt;forall w -----------------------&amp;gt; forall w'&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;In the FSCQ code, 6000 of 32,000 LoC were devoted to just this infrastructure.&lt;/p&gt;
&lt;p&gt;I want to highlight that we need to prove &lt;strong&gt;&lt;em&gt;every possible code path&lt;/em&gt;&lt;/strong&gt; — exponentially many in the number of conditional statements, and doubled by considering a crash at every point. Loops need to be proved inductively. On top of all that, if any spec or implementation changes even slightly, all the specs, impls, and proofs that depend on it will change as well. This makes even small changes a huge pain.&lt;/p&gt;
&lt;p&gt;Is there any other way, you ask, before you shoot yourself?&lt;/p&gt;
&lt;h2 id=&quot;Push-button-proofs&quot;&gt;Push-button proofs&lt;/h2&gt;
&lt;p&gt;Another way is the “push-button” style, which formulates the spec and implementation states as symbolic SMT equations that can be passed to a solver, such as Z3. This allows Z3 to automatically verify the system, without writing any manual proofs. Z3 might, for example, check whether each code operation satisfies a formula defining the relationship between code and spec states.&lt;/p&gt;
&lt;p&gt;The main effort here is cleverly designing a set of verifiable specs that is actually scalable. It’s hard to determine whether a problem is tractable for Z3, and you have to play all sorts of tricks to make it work. For example, the writers of &lt;a href=&quot;https://www.usenix.org/system/files/conference/osdi16/osdi16-sigurbjarnarson.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yggdrasil&lt;/a&gt;, a push-button verified filesystem, spent 4 months exploring ways to scale verification, 2-3 months building their system, and at least 6 more months &lt;a href=&quot;https://locore.cs.washington.edu/papers/sigurbjarnarson-yggdrasil-slides.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;experimenting with optimizations&lt;/a&gt;. In the end, among other wild tricks, they rely on a stack of five layered abstractions, so the solver only has to reason about one layer at a time and won’t get stuck.&lt;/p&gt;

&lt;p&gt;After all this effort, either carefully designing specs that are amenable to push-button verification, or tediously writing proofs in Coq, what do we get? You’d hope for perfect code, but the truth is a lot less palatable.&lt;/p&gt;
&lt;p&gt;The guarantees of a formally verified system rest entirely on the assumptions of the system, including its trusted computing base (TCB). The TCB of a verified system includes the specs, which are manually written and hoped (fingers crossed!) to be correct, the verification tools (e.g., Coq engine, Z3, compiler), and the runtime infrastructure (OS, hardware). This should be a huge red flag. For instance, if you’ve used Z3, you’ll agree that it’s black magic to everyone except the developers, and my professors confess that they’ve found correctness bugs, especially in decidability theories that are not commonly used.&lt;/p&gt;
&lt;h2 id=&quot;An-empirical-study&quot;&gt;An empirical study&lt;/h2&gt;
&lt;p&gt;One of the papers we read, &lt;a href=&quot;https://homes.cs.washington.edu/~pfonseca/papers/eurosys2017-dsbugs.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;An Empirical Study on the Correctness of Formally Verified Distributed Systems&lt;/a&gt;, thoroughly analyzes three recent formally-verified distributed systems — two were Coq/OCaml-based, and a third was Dafny/SMT-based. The abstract says it all:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Through code review and testing, we found a total of 16 bugs, many of which produce serious consequences, including crashing servers, returning incorrect results to clients, and invalidating verification guarantees. These bugs were caused by violations of a wide-range of assumptions on which the verified components relied.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Among other serious consequences were &lt;strong&gt;command injection&lt;/strong&gt; and &lt;strong&gt;data loss&lt;/strong&gt;, in supposedly &lt;em&gt;formally verified&lt;/em&gt; systems!&lt;/p&gt;
&lt;p&gt;I want to discuss some of these bugs, including where and how they were found.&lt;/p&gt;
&lt;p&gt;Most of these bugs were found through static analysis of the specs and implementations, as well as conventional debugging and network and file system fuzzing. These bugs generally occurred at the interfaces between verified and unverified components.&lt;/p&gt;
&lt;p&gt;11 occurred at what the authors call the &lt;em&gt;shim layer&lt;/em&gt;, the OS interface that includes system calls and other primitives. When the verified components do not exactly model the real-world OS implementation, serious bugs arise. For instance, not escaping metacharacters or not handling all possible syscall error codes caused incorrect results, leading to command injection and data loss. Real-world resource limits, such as too-large packets or stack exhaustion, also broke assumptions and crashed or hung the distributed system.&lt;/p&gt;
&lt;p&gt;The remaining bugs were due to incomplete or incorrect specs, and critical issues with the verification tools themselves. In particular, these provers were not fail-safe — &lt;code&gt;SIGINTs&lt;/code&gt;, exceptions, or other verifier crashes would cause the prover to report that verification succeeded!&lt;/p&gt;
&lt;p&gt;As if that’s not concerning enough, there’s two recent headlines in which supposedly formally verified systems had alarming bugs, in one case with disastrous security consequences.&lt;/p&gt;
&lt;h2 id=&quot;KRACK-and-CompCert&quot;&gt;KRACK and CompCert&lt;/h2&gt;
&lt;p&gt;Big news back in October was the KRACK attack on WPA2-protected WiFi networks. Cryptographer Matt Green &lt;a href=&quot;https://blog.cryptographyengineering.com/2017/10/16/falling-through-the-kracks/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sums it up nicely&lt;/a&gt;. The two parts of WPA2 — the 4-way handshake and the encryption protocol — have security proofs; the 4-way handshake was even formally verified in &lt;a href=&quot;https://www.andrew.cmu.edu/user/danupam/hsddm-ccs05.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2005&lt;/a&gt;! However, no one reasoned about how these two parts interacted in real-world code, leading to almost every single implementation on the planet being vulnerable to a catastrophic Key Reuse attack that can lead to full decryption and forgery of WiFi traffic.&lt;/p&gt;
&lt;p&gt;A smaller issue is a recent &lt;a href=&quot;https://github.com/AbsInt/CompCert/issues/211&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;parsing bug&lt;/a&gt; in CompCert, a formally verified C compiler released in 2008. The bug is an amateur scoping issue, where a variable declared in the scope of a &lt;code&gt;for&lt;/code&gt; loop clobbers a global variable with the same name.&lt;/p&gt;
&lt;p&gt;Although the CompCert paper explicitly says that the parsing step, as well as the assembling/linking steps, are not verified, this kind of bug is a huge blow to the credibility of formal methods. It really makes you wonder what sort of bugs formal verification is supposed to catch.&lt;/p&gt;
&lt;h2 id=&quot;Is-there-hope&quot;&gt;Is there hope?&lt;/h2&gt;
&lt;p&gt;Formal verification may not totally be wishful thinking. I’m hanging onto the hope that there is a place for it, and there’s some evidence to support this.&lt;/p&gt;
&lt;p&gt;In the empirical study, no bugs were found in the implementation of complex and error-prone distributed protocols (Paxos, RAFT). This shows that verification &lt;em&gt;can be&lt;/em&gt; applied to increase reliability. And John Regehr’s &lt;a href=&quot;https://www.cs.utah.edu/~regehr/papers/pldi11-preprint.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;compiler bug-hunting paper&lt;/a&gt; reported that CompCert did not have any &lt;em&gt;runtime wrong-code errors&lt;/em&gt;, which were found in 10 other compilers.&lt;/p&gt;
&lt;p&gt;But the guarantees that we expect are much stronger than a correct protocol, handshake, or compiler optimization. We need the entire system to be reliable, and we need proof effort to be minimal for widespread adoption to be feasible.&lt;/p&gt;
&lt;p&gt;The bottom line is that formal methods will languish in academic circles, unable to bridge the gap with the real, nonsensical world, for a long time to come.&lt;/p&gt;
</description>
<pubDate>Sun, 24 Dec 2017 11:20:35 +0000</pubDate>
<dc:creator>tom_mellior</dc:creator>
<og:type>article</og:type>
<og:title>Formal Verification: The Gap Between Perfect Code and Reality</og:title>
<og:url>http://raywang.tech/2017/12/20/Formal-Verification:-The-Gap-between-Perfect-Code-and-Reality/index.html</og:url>
<og:description>In Fall 2017, I took MIT’s 6.826, Principles of Computer Systems, taught by Turing Award-winner Butler Lampson, Nickolai Zeldovich, and Frans Kaashoek. Despite its rudimentary title, it’s a grad class</og:description>
<og:image>http://raywang.tech/images/2017/12/coq2.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://raywang.tech/2017/12/20/Formal-Verification:-The-Gap-between-Perfect-Code-and-Reality/</dc:identifier>
</item>
<item>
<title>Open Source .NET three years later</title>
<link>http://www.mattwarren.org/2017/12/19/Open-Source-.Net-3-years-later</link>
<guid isPermaLink="true" >http://www.mattwarren.org/2017/12/19/Open-Source-.Net-3-years-later</guid>
<description>&lt;span class=&quot;post-date&quot;&gt;19 Dec 2017 - 1085 words&lt;/span&gt; &lt;p&gt;A little over 3 years ago Microsoft announced that they were &lt;a href=&quot;http://www.hanselman.com/blog/AnnouncingNET2015NETAsOpenSourceNETOnMacAndLinuxAndVisualStudioCommunity.aspx&quot;&gt;open sourcing large parts of the .NET framework&lt;/a&gt; and as &lt;a href=&quot;https://twitter.com/shanselman&quot;&gt;Scott Hanselman&lt;/a&gt; said in his &lt;a href=&quot;https://channel9.msdn.com/Events/Connect/2016/Keynotes-Scott-Guthrie-and-Scott-Hanselman&quot;&gt;Connect 2016 keynote&lt;/a&gt;, the community has been contributing in a significant way:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/poweredbyaltnet/status/798942478195970048&quot;&gt;&lt;img src=&quot;http://mattwarren.org/images/2016/11/Over%2060%20of%20the%20contributions%20to%20dotnetcore%20come%20from%20the%20community.jpg&quot; alt=&quot;Over 60% of the contribution to .NET Core come from the community&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post forms part of an on-going series, if you want to see how things have changed over time you can check out the previous ones:&lt;/p&gt;
&lt;p&gt;In addition, I’ve recently done a talk &lt;a href=&quot;http://mattwarren.org/2017/11/14/Microsoft-and-Open-Source-a-Brave-New-World-CORESTART/&quot;&gt;covering this subject&lt;/a&gt;, the slides are below:&lt;/p&gt;


&lt;hr/&gt;&lt;h3 id=&quot;historical-perspective&quot;&gt;Historical Perspective&lt;/h3&gt;
&lt;p&gt;Now that we are 3 years down the line, it’s interesting to go back and see what the aims were when it all started. If you want to know more about this, I recommend watching the 2 Channel 9 videos below, made by the Microsoft Engineers involved in the process:&lt;/p&gt;
&lt;p&gt;It hasn’t always been plain sailing, it’s fair to say that there have been a few bumps along the way (I guess that’s what happens if you get to see &lt;a href=&quot;https://english.stackexchange.com/questions/120739/a-peek-into-the-sausage-factory&quot;&gt;“how the sausage gets made”&lt;/a&gt;), but I think that we’ve ended up in a good place.&lt;/p&gt;
&lt;p&gt;During the past 3 years there have been a few notable events that I think are worth mentioning:&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;repository-activity-over-time&quot;&gt;Repository activity over time&lt;/h3&gt;
&lt;p&gt;But onto the data, first we are going to look at an overview of the &lt;strong&gt;level of activity in each repo&lt;/strong&gt;, by looking at the total number of ‘&lt;strong&gt;Issues&lt;/strong&gt;’ (created) or ‘&lt;strong&gt;Pull Requests&lt;/strong&gt;’ (closed) per month. (&lt;a href=&quot;http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0001OR&quot;&gt;yay sparklines FTW!!&lt;/a&gt;). If you are interested in &lt;em&gt;how&lt;/em&gt; I got the data, see the previous post &lt;a href=&quot;http://mattwarren.org/2016/11/23/open-source-net-2-years-later#methodology---community-v-microsoft&quot;&gt;because the process is the same&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Numbers in &lt;span&gt;black&lt;/span&gt; are from the most recent month, with the &lt;span&gt;red&lt;/span&gt; dot showing the lowest and the &lt;span&gt;green&lt;/span&gt; dot the highest previous value. You can toggle between &lt;strong&gt;Issues&lt;/strong&gt; and &lt;strong&gt;Pull Requests&lt;/strong&gt; by clicking on the buttons, hover over individual sparklines to get a tooltip showing the per/month values and click on the project name to take you to the GitHub page for that repository.&lt;/p&gt;
&lt;section class=&quot;press&quot; align=&quot;center&quot;&gt;&lt;button id=&quot;btnIssues&quot; class=&quot;active&quot;&gt;Issues&lt;/button&gt; &lt;button id=&quot;btnPRs&quot;&gt;Pull Requests&lt;/button&gt;&lt;/section&gt;


&lt;p&gt;This data gives a good indication of how healthy different repos are, are they growing over time, or staying the same. You can also see the different levels of activity each repo has and how they compare to other ones.&lt;/p&gt;
&lt;p&gt;Whilst it’s clear that &lt;a href=&quot;https://github.com/microsoft/vscode&quot;&gt;Visual Studio Code&lt;/a&gt; is way ahead of all the other repos, it’s interesting to see that some of the .NET-only ones are still pretty large, notably CoreFX and Roslyn.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Next will will look at the &lt;strong&gt;total participation from the last 3 years&lt;/strong&gt;, i.e. &lt;strong&gt;November 2014&lt;/strong&gt; to &lt;strong&gt;November 2017&lt;/strong&gt;. All Pull Requests are Issues are treated equally, so a large PR counts the same as one that fixes a spelling mistake. Whilst this isn’t ideal it’s the simplest way to get an idea of the &lt;strong&gt;Microsoft/Community split&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can hover over the bars to get the actual numbers, rather than percentages.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Issues:&lt;/span&gt; &lt;span&gt;Microsoft&lt;/span&gt; &lt;span&gt;Community&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Pull Requests:&lt;/span&gt; &lt;span&gt;Microsoft&lt;/span&gt; &lt;span&gt;Community&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Finally we can see the ‘per-month’ data from the last 3 years, i.e. &lt;strong&gt;November 2014&lt;/strong&gt; to &lt;strong&gt;November 2017&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can inspect different repos by selecting them from the pull-down list, but be aware that the y-axis on the graphs are re-scaled, so the maximum value will change each time.&lt;/p&gt;
&lt;p&gt; &lt;span&gt;Issues:&lt;/span&gt; &lt;span&gt;Microsoft&lt;/span&gt; &lt;span&gt;Community&lt;/span&gt; &lt;/p&gt;
&lt;p&gt; &lt;span&gt;Pull Requests:&lt;/span&gt; &lt;span&gt;Microsoft&lt;/span&gt; &lt;span&gt;Community&lt;/span&gt; &lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;It’s clear that the community continues to be invested in the .NET-related, Open Source repositories, contributing significantly and for a sustained period of time. I think this is good for &lt;em&gt;all .NET developers&lt;/em&gt;, whether you contribute to OSS or not, having .NET be a &lt;strong&gt;thriving, Open Source product&lt;/strong&gt; has many benefits!&lt;/p&gt;
</description>
<pubDate>Sun, 24 Dec 2017 09:53:21 +0000</pubDate>
<dc:creator>matthewwarren</dc:creator>
<og:title>Open Source .NET – 3 years later</og:title>
<og:description>A little over 3 years ago Microsoft announced that they were open sourcing large parts of the .NET framework and as Scott Hanselman said in his Connect 2016 keynote, the community has been contributing in a significant way:</og:description>
<og:url>http://www.mattwarren.org/2017/12/19/Open-Source-.Net-3-years-later</og:url>
<og:type>article</og:type>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://mattwarren.org/2017/12/19/Open-Source-.Net-3-years-later</dc:identifier>
</item>
<item>
<title>Apple Autocorrects Names of Some Medications to Names of Different Medications</title>
<link>https://twitter.com/slatestarcodex/status/944739157988974592</link>
<guid isPermaLink="true" >https://twitter.com/slatestarcodex/status/944739157988974592</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://twitter.com/slatestarcodex/status/944739157988974592&quot;&gt;https://twitter.com/slatestarcodex/status/944739157988974592&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=15997503&quot;&gt;https://news.ycombinator.com/item?id=15997503&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 243&lt;/p&gt;&lt;p&gt;# Comments: 127&lt;/p&gt;</description>
<pubDate>Sun, 24 Dec 2017 02:14:43 +0000</pubDate>
<dc:creator>Houshalter</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/slatestarcodex/status/944739157988974592</dc:identifier>
</item>
</channel>
</rss>