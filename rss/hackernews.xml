<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Google Suppresses Memo Revealing Plans to Closely Track Search Users in China</title>
<link>https://theintercept.com/2018/09/21/google-suppresses-memo-revealing-plans-to-closely-track-search-users-in-china/</link>
<guid isPermaLink="true" >https://theintercept.com/2018/09/21/google-suppresses-memo-revealing-plans-to-closely-track-search-users-in-china/</guid>
<description>&lt;p&gt;&lt;u&gt;Google bosses have&lt;/u&gt; forced employees to delete a confidential memo circulating inside the company that revealed explosive details about a plan to launch a censored search engine in China, The Intercept has learned.&lt;/p&gt;
&lt;p&gt;The memo, authored by a Google engineer who was asked to work on the project, disclosed that the search system, codenamed Dragonfly, would require users to log in to perform searches, track their location — and share the resulting history with a Chinese partner who would have “unilateral access” to the data.&lt;/p&gt;
&lt;p&gt;The memo was shared earlier this month among a group of Google employees who have been organizing internal protests over the censored search system, which has been designed to remove content that China’s authoritarian Communist Party regime views as sensitive, such as information about democracy, human rights, and peaceful protest.&lt;/p&gt;
&lt;p&gt;According to three sources familiar with the incident, Google leadership discovered the memo and were furious that secret details about the China censorship were being passed between employees who were not supposed to have any knowledge about it. Subsequently, Google human resources personnel emailed employees who were believed to have accessed or saved copies of the memo and ordered them to immediately delete it from their computers. Emails demanding deletion of the memo contained “pixel trackers” that notified human resource managers when their messages had been read, recipients determined.&lt;/p&gt;
&lt;p&gt;The Dragonfly memo reveals that a prototype of the censored search engine was being developed as an app for both Android and iOS devices, and would force users to sign in so they could use the service. The memo confirms, as The Intercept &lt;a href=&quot;https://theintercept.com/2018/09/14/google-china-prototype-links-searches-to-phone-numbers/&quot;&gt;first reported&lt;/a&gt; last week, that users’ searches would be associated with their personal phone number. The memo adds that Chinese users’ movements would also be stored, along with the IP address of their device and links they clicked on. It accuses developers working on the project of creating “spying tools” for the Chinese government to monitor its citizens.&lt;/p&gt;
&lt;p&gt;People’s search histories, location information, and other private data would be sent out of China to a database in Taiwan, the memo states. But the data would also be provided to employees of a Chinese company who would be granted “unilateral access” to the system.&lt;/p&gt;
&lt;p&gt;To launch the censored search engine, Google set up a “joint venture” partnership with an unnamed Chinese company. The search engine will “blacklist sensitive queries” so that “no results will be shown” at all when people enter certain words or phrases, according to documents &lt;a href=&quot;https://theintercept.com/2018/08/08/google-censorship-china-blacklist/&quot;&gt;seen by The Intercept&lt;/a&gt;. Blacklisted search terms on a prototype of the search engine include “human rights,” “student protest,” and “Nobel Prize” in Mandarin, &lt;a href=&quot;https://theintercept.com/2018/09/14/google-china-prototype-links-searches-to-phone-numbers/&quot;&gt;said&lt;/a&gt; sources familiar with the project.&lt;/p&gt;
&lt;p&gt;According to the memo, aside from being able to access users’ search data, the Chinese partner company could add to the censorship blacklists: It would be able to “selectively edit search result pages … unilaterally, and with few controls seemingly in place.”&lt;/p&gt;
&lt;p&gt;That a Chinese company would maintain a copy of users’ search data means that, by extension, the data would be accessible to Chinese authorities, who have broad powers to obtain information that is held or processed on the country’s mainland. A central concern human rights groups &lt;a href=&quot;https://theintercept.com/2018/08/28/google-china-censorship-plan-human-rights/&quot;&gt;have expressed&lt;/a&gt; about Dragonfly is that it could place users at risk of Chinese government surveillance — and any person in China searching for blacklisted words or phrases could find themselves interrogated or detained. Chinese authorities are well-known for routinely targeting critics, activists, and journalists.&lt;/p&gt;
&lt;p&gt;“It’s alarming to hear that such information will be stored and, potentially, easily shared with the Chinese authorities,” said Patrick Poon, a Hong Kong-based researcher with the human rights group Amnesty International. “It will completely put users’ privacy and safety at risk. Google needs to immediately explain if the app will involve such arrangements. It’s time to give the public full transparency of the project.”&lt;/p&gt;
&lt;p&gt;&lt;u&gt;On August 16,&lt;/u&gt; two weeks after The Intercept &lt;a href=&quot;https://theintercept.com/2018/08/01/google-china-search-engine-censorship/&quot;&gt;revealed&lt;/a&gt; the Dragonfly plan, Google CEO &lt;a href=&quot;https://theintercept.com/2018/08/17/internal-meeting-reveals-how-google-bosses-misled-staff-on-their-china-censorship-plan-here-are-the-questions-they-must-answer/&quot;&gt;Sundar Pichai&lt;/a&gt; told the company’s employees that the China plan was in its “early stages” and “exploratory.” However, employees working on the censored search engine were instructed in late July, days before the project was publicly exposed, that they should prepare to get it into a “launch-ready state” to roll out within weeks, pending approval from officials in Beijing.&lt;/p&gt;
&lt;blockquote class=&quot;stylized pull-right&quot; data-shortcode-type=&quot;pullquote&quot; data-pull=&quot;right&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;“It will completely put users’ privacy and safety at risk.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The memo raises new questions about Pichai’s claim that the project was not well-developed. Information stored on the company’s internal networks about Dragonfly “paints a very different picture,” it says. “The statement from our high-level leadership that Dragonfly is just an experiment seems wrong.”&lt;/p&gt;
&lt;p&gt;The memo identifies at least 215 employees who appear to have been tasked with working full-time on Dragonfly, a number it says is “larger than many Google projects.” It says that source code associated with the project dates back to May 2017, and “many infrastructure parts predate” that. Moreover, screenshots of the app “show a project in a pretty advanced state,” the memo declares.&lt;/p&gt;
&lt;p&gt;Most of the details about the project “have been secret from the start,” the memo says, adding that “after the existence of Dragonfly leaked, engineers working on the project were also quick to hide all of their code.”&lt;/p&gt;
&lt;p&gt;The author of the memo said in the document that they were opposed to the China censorship. However, they added, “more than the project itself, I hate the culture of secrecy that has been built around it.”&lt;/p&gt;
&lt;p&gt;The memo was first posted September 5 on an internal messaging list set up for Google employees to raise ethical concerns. But the memo was soon scrubbed from the list and individuals who had opened or saved the document were contacted by Google’s human resources department to discuss the matter. The employees were instructed not to share the memo.&lt;/p&gt;
&lt;p&gt;Google reportedly &lt;a href=&quot;https://www.businessinsider.com/google-has-internal-website-for-employees-to-report-whistleblowers-2016-6&quot;&gt;maintains&lt;/a&gt; an &lt;a href=&quot;https://arstechnica.com/tech-policy/2016/12/anonymous-googler-files-suit-against-his-employer-over-secrecy-policies/&quot;&gt;aggressive&lt;/a&gt; security and investigation team known as “stopleaks,” which is dedicated to preventing unauthorized disclosures. The team is also said to monitor internal discussions.&lt;/p&gt;
&lt;blockquote class=&quot;stylized pull-left&quot; data-shortcode-type=&quot;pullquote&quot; data-pull=&quot;left&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;“More than the project itself, I hate the culture of secrecy that has been built around it.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Internal security efforts at Google have ramped up this year as employees have raised ethical concerns around a range of new company projects. Following the revelation by &lt;a href=&quot;https://gizmodo.com/google-is-helping-the-pentagon-build-ai-for-drones-1823464533&quot;&gt;Gizmodo&lt;/a&gt; and &lt;a href=&quot;https://theintercept.com/2018/03/06/google-is-quietly-providing-ai-technology-for-drone-strike-targeting-project/&quot;&gt;The Intercept&lt;/a&gt; that Google had quietly begun work on a contract with the military last year, known as Project Maven, to develop automated image recognition systems for drone warfare, the communications team moved swiftly to monitor employee activity.&lt;/p&gt;
&lt;p&gt;The “stopleaks” team, which coordinates with the internal Google communications department, even began monitoring an internal image board used to post messages based on internet memes, according to one former Google employee, for signs of employee sentiment around the Project Maven contract.&lt;/p&gt;
</description>
<pubDate>Fri, 21 Sep 2018 17:45:12 +0000</pubDate>
<dc:creator>halestock</dc:creator>
<og:url>https://theintercept.com/2018/09/21/google-suppresses-memo-revealing-plans-to-closely-track-search-users-in-china/</og:url>
<og:description>The company forced employees to delete the document, which stated that a Chinese partner would have “unilateral access” to user data.</og:description>
<og:image>https://theintercept.imgix.net/wp-uploads/sites/1/2018/09/google-dragonfly-02-15-1537547812.jpg?auto=compress%2Cformat&amp;q=90&amp;fit=crop&amp;w=1200&amp;h=800</og:image>
<og:type>article</og:type>
<og:title>Google Suppresses Memo Revealing Plans to Closely Track Search Users in China</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://theintercept.com/2018/09/21/google-suppresses-memo-revealing-plans-to-closely-track-search-users-in-china/</dc:identifier>
</item>
<item>
<title>NewSQL databases fail to guarantee consistency and I blame Spanner</title>
<link>http://dbmsmusings.blogspot.com/2018/09/newsql-database-systems-are-failing-to.html</link>
<guid isPermaLink="true" >http://dbmsmusings.blogspot.com/2018/09/newsql-database-systems-are-failing-to.html</guid>
<description>&lt;div dir=&quot;ltr&quot; id=&quot;docs-internal-guid-34e9d9bf-7fff-5228-0a7b-b2989ac9e72b&quot;&gt;&lt;span&gt;The CAP theorem famously states that it is impossible to guarantee both consistency and availability in the event of a network partition. Since network partitions are always theoretically possible in a scalable, distributed system, the architects of modern scalable database systems fractured into two camps: those that prioritized availability (the NoSQL camp) and those that prioritized consistency (the NewSQL camp). For a while, the NoSQL camp was clearly the more dominant of the two --- in an “always-on” world, downtime is unacceptable, and developers were forced into handling the reduced consistency levels of scalable NoSQL systems. [Side note: NoSQL is a broad umbrella that contains many different systems with different features and innovations. When this post uses the term “NoSQL”, we are referring to the subset of the umbrella that is known for building scalable systems that prioritize availability over consistency, such as &lt;a href=&quot;http://cassandra.apache.org/&quot; target=&quot;_blank&quot;&gt;Cassandra&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/dynamodb/&quot; target=&quot;_blank&quot;&gt;DynamoDB&lt;/a&gt; (default settings), &lt;a href=&quot;http://www.project-voldemort.com/&quot; target=&quot;_blank&quot;&gt;Voldemort&lt;/a&gt;, &lt;a href=&quot;http://couchdb.apache.org/&quot; target=&quot;_blank&quot;&gt;CouchDB&lt;/a&gt;, &lt;a href=&quot;http://basho.com/products/riak-kv/&quot; target=&quot;_blank&quot;&gt;Riak&lt;/a&gt;, and multi-region deployments of &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/cosmos-db/consistency-levels&quot; target=&quot;_blank&quot;&gt;Azure CosmosDB&lt;/a&gt;.]&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;Over the past decade, application developers have discovered that it is extremely difficult to build bug-free applications over database systems that do not guarantee consistency. This has led to a surprising shift in momentum, with many of the more recently released systems claiming to guarantee consistency (and be CP from CAP). Included in this list of newer systems are: &lt;a href=&quot;https://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf&quot; target=&quot;_blank&quot;&gt;Spanner&lt;/a&gt; (and its &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/cosmos-db/consistency-levels&quot; target=&quot;_blank&quot;&gt;Cloud Spanner&lt;/a&gt; counterpart), &lt;a href=&quot;https://fauna.com/&quot; target=&quot;_blank&quot;&gt;FaunaDB&lt;/a&gt;, &lt;a href=&quot;https://www.cockroachlabs.com/&quot; target=&quot;_blank&quot;&gt;CockroachDB&lt;/a&gt;, and &lt;a href=&quot;https://yugabyte.com/&quot; target=&quot;_blank&quot;&gt;YugaByte&lt;/a&gt;. In this post, we will look more deeply into the consistency claims of these four systems (along with similar systems) and note that while some do indeed guarantee consistency, way too many of them fail to completely guarantee consistency. We will trace the failure to guarantee consistency to a controversial design decision made by Spanner that has been tragically and imperfectly emulated in other systems.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;&lt;span&gt;What is consistency anyway?&lt;/span&gt;&lt;/h2&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Consistency, also known as “atomic consistency” or “linearizability”, guarantees that once a write completes, all future reads will reflect that value of the write. For example, let’s say that we have a variable called X, whose value is currently 4. If we run the following code:&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;X = 10;&lt;/span&gt;&lt;span&gt;&lt;br class=&quot;kix-line-break&quot;/&gt;&lt;/span&gt;&lt;span&gt;Y = X + 8;&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In a consistent system, there is only one possible value for Y after running this code (assuming the second statement is run after the first statement completes): 18. Everybody who has completed an “Introduction to Programming” course understands how this works, and relies on this guarantee when writing code.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In a system that does not guarantee consistency, the value of Y after running this code is also probably 18. But there’s a chance it might be 12 (since the original value of X was 4). Even if the system returns an explicit message: “I have completed the X = 10 statement”, it is nonetheless still a possibility that the subsequent read of X will reflect the old value (4) and Y will end up as 12. Consequently, the application developer has to be aware of the non-zero possibility that Y is not 18, and must deal with all possible values of Y in subsequent code. This is MUCH more complicated, and beyond the intellectual capabilities of a non-trivial subset of application developers.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;[Side note: Another name for &quot;consistency&quot; is &quot;strong consistency&quot;. This alternate name was coined in order to distinguish the full consistency guarantee from weaker consistency levels that also use the word &quot;consistency&quot; in their name (despite not providing the complete consistency guarantee). Indeed, some of these weaker consistency levels, such as &quot;causal consistency&quot;, &quot;session consistency&quot;, and &quot;bounded staleness consistency&quot; provide useful guarantees that somewhat reduce complexity for application developers. Nonetheless, the best way to avoid the existence of corner case bugs in an application is to build it on top of a system that guarantees complete, strong consistency.]&lt;/span&gt;&lt;/div&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;&lt;span&gt;Why give up on consistency?&lt;/span&gt;&lt;/h2&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Consistency is a basic staple, a guarantee that is extremely hard to live without. So why do most NoSQL systems fail to guarantee consistency? They blame the CAP theorem. (For example,&lt;/span&gt; &lt;a href=&quot;https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf&quot;&gt;&lt;span&gt;the Amazon Dynamo paper&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, which inspired many widely used NoSQL systems, such as Cassandra, DynamoDB, and Riak, mention the availability vs. consistency tradeoff in the first paragraph of the section that discussed their “Design Considerations”, which lead to their famous “eventually consistent” architecture.) It is&lt;/span&gt; &lt;span&gt;very hard&lt;/span&gt;&lt;span&gt;, but&lt;/span&gt; &lt;span&gt;not impossible,&lt;/span&gt; &lt;span&gt;to build applications over systems that do not guarantee consistency. But the CAP theorem says that it is&lt;/span&gt; &lt;span&gt;impossible&lt;/span&gt; &lt;span&gt;for a system that guarantees consistency&lt;/span&gt; &lt;span&gt;to guarantee 100% availability in the presence of a network partition. So if you can only choose one, it makes sense to choose availability. As we said above, once the system fails to guarantee consistency,  developing applications on top of it without ugly corner case bugs is extremely challenging, and generally requires highly-skilled application developers that are able to handle the intellectual rigors of such development environments. Nonetheless, such skilled developers do exist, and this is the only way to avoid the impossibility proof from the CAP theorem of 100% availability.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The reasoning of the previous paragraph, although perhaps well-thought out and convincing, is fundamentally flawed. The CAP theorem lives in a theoretical world where there is such a thing as 100% availability. In the real world, there is no such thing as 100% availability. Highly available systems are defined in terms of ‘9s’. Are you 99.9% available? Or 99.99% available? The more 9s, the better. Availability is fundamentally a pursuit in imperfection. No system can&lt;/span&gt; &lt;span&gt;guarantee&lt;/span&gt; &lt;span&gt;availability.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;This fact has significant ramifications when considering the availability vs. consistency tradeoff that was purported by the CAP theorem. It is not the case that if we guarantee consistency, we have to give up the guarantee of availability. We never had a guarantee of availability in the first place! Rather, guaranteeing consistency causes a&lt;/span&gt; &lt;span&gt;reduction&lt;/span&gt; &lt;span&gt;to our already imperfect availability.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Therefore: the question becomes: how much availability is lost when we guarantee consistency? In practice, the answer is&lt;/span&gt; &lt;span&gt;very little&lt;/span&gt;&lt;span&gt;. Systems that guarantee consistency only experience a necessary reduction in availability in the event of a network partition. As networks become more redundant, partitions become an increasingly rare event. And even if there is a partition, it is still possible for the majority partition to be available. Only the minority partition must become unavailable. Therefore, for the reduction in availability to be perceived, there must be both a network partition, and also clients that are able to communicate with the nodes in the minority partition (and not the majority partition). This combination of events is typically rarer than other causes of system unavailability. Consequently, the real world impact of guaranteeing consistency on availability is often negligible. It is very possible to have a system that guarantees consistency and achieves high availability at the same time.&lt;/span&gt;&lt;/div&gt;


&lt;h2 dir=&quot;ltr&quot;&gt;&lt;span&gt;The glorious return of consistent NewSQL systems&lt;/span&gt;&lt;/h2&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The argument above actually results in 3 distinct reasons for modern systems to be CP from CAP, instead of AP (i.e. choose consistency over availability):&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;(1)    Systems that fail to guarantee consistency result in complex, expensive, and often buggy application code.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;(2)    The reduction of availability that is caused by the guarantee of consistency is minute, and hardly noticeable for many deployments.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;(3)    The CAP theorem is fundamentally asymmetrical. CP systems can&lt;/span&gt; &lt;span&gt;guarantee&lt;/span&gt; &lt;span&gt;consistency. AP systems&lt;/span&gt; &lt;span&gt;do not guarantee&lt;/span&gt; &lt;span&gt;availability (no system can guarantee 100% availability). Thus only one side of the CAP theorem opens the door for any useful guarantees.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;I believe that the above three points is what has caused the amazing renaissance of distributed, transactional database systems --- many of which have become commercially available in the past few years ---  that choose to be CP from CAP instead of AP. There is still certainly a place for AP systems, and their associated NoSQL implementations. But for most developers, building on top of a CP system is a safer bet.&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;However, when I say that CP systems are the safer bet, I intend to refer to CP systems that&lt;/span&gt; &lt;span&gt;&lt;strong&gt;actually&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;guarantee consistency. Unfortunately, way too many of these modern NewSQL systems fail to guarantee consistency, despite their claims to the contrary. And once the guarantee is removed, the corner case bugs, complexity, and costs return.&lt;/span&gt;&lt;/div&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;&lt;span&gt;Spanner is the source of the problem&lt;/span&gt;&lt;/h2&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;I have&lt;/span&gt; &lt;a href=&quot;http://dbmsmusings.blogspot.com/2011/12/replication-and-latency-consistency.html&quot;&gt;&lt;span&gt;discussed in previous posts&lt;/span&gt;&lt;/a&gt; &lt;span&gt;that there are many ways to guarantee consistency in distributed systems. The most popular mechanism, which guarantees consistency at minimal cost to availability, is to use the Paxos or Raft consensus protocols to enforce consistency across multiple replicas of the data. At a simplified level, these protocols work via a majority voting mechanism. Any change to the data requires a majority of replicas to agree to the change. This allows the minority of replicas to be down or unavailable and the system can nonetheless continue to read or write data.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Most NewSQL systems use consensus protocols to enforce consistency. However, they differ in a significant way in&lt;/span&gt; &lt;span&gt;how&lt;/span&gt; &lt;span&gt;they use these protocols. I divide NewSQL systems into two categories along this dimension: The first category, as embodied in systems such as Calvin (which came out of my research group) and FaunaDB, uses a single, global consensus protocol per database. Every transaction participates in the same global protocol. The second category, as embodied in systems such as Spanner, CockroachDB, and YugaByte, partitions the data into ‘shards’, and applies a separate consensus protocol per shard.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The main downside of the first category is scalability. A server can process a fixed number of messages per second. If every transaction in the system participates in the same consensus protocol, the same set of servers vote on every transaction. Since voting requires communication, the number of votes per second is limited by the number of messages each server can handle. This limits the total amount of transactions per second that the system can handle.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Calvin and FaunaDB get around this downside via batching. Rather than voting on each transaction individually, they vote on batches of transactions. Each server batches all transactions that it receives over a fixed time period (e.g., 10 ms), and then initiates a vote on that entire batch at once. With 10ms batches, Calvin was able to achieve a throughput of over 500,000 transactions per second. For comparison, Amazon.com and NASDAQ likely process no more than 10,000 orders/trades per second even during peak workloads.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The main downside of the second category is that by localizing consensus on a per-shard basis, it becomes nontrivial to guarantee consistency in the presence of transactions that touch data in multiple shards. The quintessential example is the case of someone performing a sequence of two actions on a photo-sharing application (1) Removing her parents from having permission to see her photos (2) Posting her photos from spring break. Even though there was a clear sequence of these actions from the vantage point of the user, if the permissions data and the photo data are located in separate shards, and the shards perform consensus separately, there is a risk that the parents will nonetheless be able to see the user’s recently uploaded photos.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Spanner famously got around this downside with their TrueTime API. All transactions receive a timestamp which is based on the actual (wall-clock) current time. This enables there to be a concept of “before” and “after” for two different transactions, even those that are processed by completely disjoint set of servers. The transaction with a lower timestamp is “before” the transaction with a higher timestamp. Obviously, there may be a small amount of skew across the clocks of the different servers. Therefore, Spanner utilizes the concept of an “uncertainty” window which is based on the maximum possible time skew across the clocks on the servers in the system. After completing their writes, transactions wait until after this uncertainty window has passed before they allow any client to see the data that they wrote.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Spanner thus faces a potentially uncomfortable tradeoff. It is desirable that the uncertainty window should be as small as possible, since as it gets larger, the latency of transactions increases, and the overall concurrency of the system decreases. On the other hand, it needs to 100% sure that clock skew&lt;/span&gt; &lt;span&gt;never&lt;/span&gt; &lt;span&gt;gets larger than the uncertainty window (since otherwise the guarantee of consistency would no longer exist), and thus larger windows are safer than smaller ones.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Spanner handles this tradeoff with a specialized hardware solution that uses both GPS and atomic clocks to ensure a minimal clock skew across servers. This solution allows the system to keep the uncertainty window relatively narrow while at the same time keeping the probability of incorrect uncertainty window estimates (and corresponding consistency violations) to be extremely small. Indeed, the probability is so small that Spanner’s architects feel comfortable claiming that Spanner “guarantees” consistency.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;[It is worth noting at this point that systems that use global consensus avoid this problem entirely. If every transaction goes through the same protocol, then a natural order of all transactions emerges --- the order is simply the order in which transactions were voted on during the protocol. When batches are used instead of transactions, it is the batches that are ordered during the protocol, and transactions are globally ordered by combining their batch identifier with their sequence number within the batch. There is no need for clock time to be used in order to create a notion of before or after. Instead, the consensus protocol itself can be used to elegantly create a global order.]&lt;/span&gt;&lt;/div&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;&lt;span&gt;Spanner Derivatives&lt;/span&gt;&lt;/h2&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Spanner is a beautiful and innovative system. It was also invented by Google and widely used there. Either because of the former or latter (or both), it has been extremely influential, and many systems (e.g., CockroachDB and YugaByte) have been inspired by the architectural decisions by Spanner. Unfortunately,  these derivative systems are software-only, which implies that they have inherited only the software innovations without the hardware and infrastructure upon which Spanner relies at Google. In light of Spanner’s decision to have separate consensus protocols per shard, software-only derivatives are extremely dangerous. Like Spanner, these systems rely on real-world time in order to enforce consistency --- CockroachDB on&lt;/span&gt; &lt;a href=&quot;https://cse.buffalo.edu/tech-reports/2014-04.pdf&quot;&gt;&lt;span&gt;HLC (hybrid logical clocks)&lt;/span&gt;&lt;/a&gt; &lt;span&gt;and YugaByte on&lt;/span&gt; &lt;a href=&quot;http://users.ece.utexas.edu/~garg/pdslab/david/hybrid-time-tech-report-01.pdf&quot;&gt;&lt;span&gt;Hybrid Time&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. Like Spanner, these systems rely on knowing the maximum clock skew across servers in order to avoid consistency violations. But unlike Spanner, these systems lack hardware and infrastructure support for minimizing and measuring clock skew uncertainty.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;CockroachDB, to its credit, has&lt;/span&gt; &lt;a href=&quot;https://www.cockroachlabs.com/blog/living-without-atomic-clocks/&quot;&gt;&lt;span&gt;acknowledged&lt;/span&gt;&lt;/a&gt; &lt;span&gt;that by only incorporating Spanner’s software innovations, the system cannot guarantee CAP consistency (which, as mentioned above, is linearizability).&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;YugaByte, however, continues to claim a guarantee of consistency. I would advise people not to trust this claim. YugaByte, by virtue of its Spanner roots, will run into consistency violations when the local clock on a server suddenly jumps beyond the skew uncertainty window. This can happen under a variety of scenarios such as when a VM that is running YugaByte freezes or migrates to a different machine. Even without sudden jumps, YugaByte’s free edition relies on the user to set the assumptions about maximum clock skew. Any mistaken assumptions on behalf of the user can result in consistency violations.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In contrast to CockroachDB and YugaByte, FaunaDB was inspired by Calvin instead of Spanner. [Historical note: the Calvin and Spanner papers were both published in 2012]. FaunaDB therefore has a single, elegant, global consensus protocol, and needs no small print regarding clock skew assumptions. Consequently, FaunaDB is able to&lt;/span&gt; &lt;span&gt;guarantee&lt;/span&gt; &lt;span&gt;consistency of transactions that modify&lt;/span&gt; &lt;span&gt;any&lt;/span&gt; &lt;span&gt;data in the database without concern for the corner case violations that can plague software-only derivatives of Spanner-style systems.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;There are other differences between Calvin-style systems and Spanner-style systems&lt;/span&gt; &lt;a href=&quot;http://dbmsmusings.blogspot.com/2017/04/distributed-consistency-at-scale.html&quot;&gt;&lt;span&gt;that I’ve talked about in the past&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. In this post we focused on perhaps the most consequential difference: global consensus vs. partitioned consensus. As with any architectural decision, there are tradeoffs between these two options. For the vast majority of applications, exceeding 500,000 transactions a second is beyond their wildest dreams. If so, then the decision is clear. Global consensus is probably the better choice.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;[Editor's note: Daniel Abadi is an advisor at FaunaDB.]&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;
</description>
<pubDate>Fri, 21 Sep 2018 13:26:55 +0000</pubDate>
<dc:creator>evanweaver</dc:creator>
<og:url>http://dbmsmusings.blogspot.com/2018/09/newsql-database-systems-are-failing-to.html</og:url>
<og:title>NewSQL database systems are failing to guarantee consistency, and I blame Spanner</og:title>
<og:description> The CAP theorem famously states that it is impossible to guarantee both consistency and availability in the event of a network partition. S...</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>http://dbmsmusings.blogspot.com/2018/09/newsql-database-systems-are-failing-to.html</dc:identifier>
</item>
<item>
<title>Thanks for the Surprise Integration with My Website, Apple</title>
<link>https://www.asaph.org/2018/09/jguitar-apple-ios-shortcut.html</link>
<guid isPermaLink="true" >https://www.asaph.org/2018/09/jguitar-apple-ios-shortcut.html</guid>
<description>&lt;p&gt;Those of you who are avid readers of my &lt;a href=&quot;https://stackoverflow.com/users/166339/asaph&quot;&gt;Stack Overflow profile&lt;/a&gt; know that I am the creator of &lt;a href=&quot;https://jguitar.com/&quot;&gt;JGuitar.com&lt;/a&gt;, a popular guitar chord and scale calculator website. I'm also a longtime fan of Apple products. So you can imagine my surprise and delight when I received this message in my inbox this week from a JGuitar user:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is there a way to select a specific instrument (like ukulele) via the URL - so that I'd have a link that would take me right to chord search for that instrument?&lt;/p&gt;
&lt;p&gt;I am starting to mess around with iOS's new shortcut function. They have a shortcut for searching chords on your website, but it defaults to guitar; I'd like to make a ukulele version of the shortcut.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hold on a sec... Did Apple really integrate their new iOS shortcuts feature with my website? How is it possible I didn't know this was coming? No one from Apple reached out to me. I had eagerly upgraded my iPhone X to iOS 12 earlier that day but hadn't yet discovered &quot;shortcuts&quot;. Naturally, I immediately wanted to see this in action.&lt;/p&gt;
&lt;p&gt;After a little googling, I learned that in order to add shortcuts, you need to download the Shortcuts App from the Apple App Store.&lt;/p&gt;
&lt;a href=&quot;https://1.bp.blogspot.com/-9d57mee_QP4/W6SLW3_nyEI/AAAAAAAAAzo/A9kE2FKV0BoR-CPyiy4jZUN8wevLbybyQCPcBGAYYCw/s1600/App%2BStore%2BShortcuts%2BApp.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1600&quot; data-original-width=&quot;739&quot; height=&quot;320&quot; src=&quot;https://1.bp.blogspot.com/-9d57mee_QP4/W6SLW3_nyEI/AAAAAAAAAzo/A9kE2FKV0BoR-CPyiy4jZUN8wevLbybyQCPcBGAYYCw/s320/App%2BStore%2BShortcuts%2BApp.png&quot; width=&quot;148&quot;/&gt;&lt;/a&gt;
&lt;p&gt;After installing and launching the Shortcuts app, you're greeted to an empty Library screen. In order to use a shortcut, you need to either create one from scratch or select a pre-made shortcut from the gallery. I clicked on the Gallery icon, scrolled down to the &quot;Tools for Making Music&quot; section and saw the &quot;Guitar Chord Finder&quot; shortcut.&lt;/p&gt;
&lt;a href=&quot;https://2.bp.blogspot.com/-l_tNDFDqaGs/W6SLYvtVMeI/AAAAAAAAAzk/smIlEkOvKVwTgwYIb-PzMceZfi7fL--LwCPcBGAYYCw/s1600/Shortcuts%2BLibrary%2BEmpty.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1600&quot; data-original-width=&quot;739&quot; height=&quot;320&quot; src=&quot;https://2.bp.blogspot.com/-l_tNDFDqaGs/W6SLYvtVMeI/AAAAAAAAAzk/smIlEkOvKVwTgwYIb-PzMceZfi7fL--LwCPcBGAYYCw/s320/Shortcuts%2BLibrary%2BEmpty.png&quot; width=&quot;148&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-kaa5NLJZbAs/W6SLcEBEz0I/AAAAAAAAAzs/UDZre3lXOEAGCo2STkRYzWdPtataJ4fqgCPcBGAYYCw/s1600/Shortcuts%2BGallery%2Bwith%2BChord%2BFinder%2BShortcut.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1600&quot; data-original-width=&quot;739&quot; height=&quot;320&quot; src=&quot;https://2.bp.blogspot.com/-kaa5NLJZbAs/W6SLcEBEz0I/AAAAAAAAAzs/UDZre3lXOEAGCo2STkRYzWdPtataJ4fqgCPcBGAYYCw/s320/Shortcuts%2BGallery%2Bwith%2BChord%2BFinder%2BShortcut.png&quot; width=&quot;148&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-1GIypf7oOt4/W6SLV8SiRRI/AAAAAAAAAzo/XW9C2R_g62w9-hII3PtsTlkIsglZNSNegCPcBGAYYCw/s1600/Guitar%2BChord%2BFinder%2BShortcut.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1600&quot; data-original-width=&quot;739&quot; height=&quot;320&quot; src=&quot;https://3.bp.blogspot.com/-1GIypf7oOt4/W6SLV8SiRRI/AAAAAAAAAzo/XW9C2R_g62w9-hII3PtsTlkIsglZNSNegCPcBGAYYCw/s320/Guitar%2BChord%2BFinder%2BShortcut.png&quot; width=&quot;148&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Could this be it? The description didn't mention JGuitar.com. I clicked on it. There were instructions for how to use the shortcut but still no mention of JGuitar.com. When I clicked &quot;show actions&quot; it revealed the &quot;actions&quot; that make up the shortcut and I could finally see the JGuitar.com link in the URL section. Here are the complete actions that make up the Guitar Chord Finder Shortcut.&lt;/p&gt;
&lt;a href=&quot;https://3.bp.blogspot.com/-kDJWsqNPCHU/W6SNvw11U5I/AAAAAAAAA0Q/TU36OvKuP5gLGAaw_LdNV9HhUTvuMFX7wCPcBGAYYCw/s1600/JGuitar%2BApple%2BShortcut%2B3.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1600&quot; data-original-width=&quot;739&quot; height=&quot;320&quot; src=&quot;https://3.bp.blogspot.com/-kDJWsqNPCHU/W6SNvw11U5I/AAAAAAAAA0Q/TU36OvKuP5gLGAaw_LdNV9HhUTvuMFX7wCPcBGAYYCw/s320/JGuitar%2BApple%2BShortcut%2B3.png&quot; width=&quot;148&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-tNE8rDSul90/W6SNwC0unEI/AAAAAAAAA0Y/EBdIvTTQDPU040L05TyCL1o9ZWgHRsHHgCPcBGAYYCw/s1600/JGuitar%2BApple%2BShortcut%2B1.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1600&quot; data-original-width=&quot;739&quot; height=&quot;320&quot; src=&quot;https://4.bp.blogspot.com/-tNE8rDSul90/W6SNwC0unEI/AAAAAAAAA0Y/EBdIvTTQDPU040L05TyCL1o9ZWgHRsHHgCPcBGAYYCw/s320/JGuitar%2BApple%2BShortcut%2B1.png&quot; width=&quot;148&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-66iIgfsrAF8/W6SNwO1UbYI/AAAAAAAAA0U/SuA6rzAiyWU_rYhlS630lXxOC_6jhDP2gCPcBGAYYCw/s1600/JGuitar%2BApple%2BShortcut%2B2.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1600&quot; data-original-width=&quot;739&quot; height=&quot;320&quot; src=&quot;https://1.bp.blogspot.com/-66iIgfsrAF8/W6SNwO1UbYI/AAAAAAAAA0U/SuA6rzAiyWU_rYhlS630lXxOC_6jhDP2gCPcBGAYYCw/s320/JGuitar%2BApple%2BShortcut%2B2.png&quot; width=&quot;148&quot;/&gt;&lt;/a&gt;
&lt;p&gt;In a nutshell, the shortcut uses the user's input (a chord symbol) to construct a url to a chord search result page on JGuitar.com and then looks for 200x200px chord diagram images on that page and shows them to the user. The rest of the web page isn't shown.&lt;/p&gt;
&lt;p&gt;There are a couple of things I would have done differently in these shortcut actions. Firstly, I would have used an https url instead of http and secondly, I would have made it look for images with a width &amp;amp; height &lt;em&gt;greater than&lt;/em&gt; 200px rather than &lt;em&gt;equal to&lt;/em&gt; 200px. That would give me the flexibility to boost image resolution without breaking the shortcut. And boosting image resolution is an easy change for me since all the chord diagram images are dynamically generated on the fly and cached.&lt;/p&gt;
&lt;p&gt;Now that I had found and understood the feature it was time to take it for a test drive. I added the Guitar Chord Finder Shortcut to my Library and played with it both within the Shortcuts App and via the voice command: &quot;Hey Siri: Guitar Chord Finder&quot;. Both worked as expected.&lt;/p&gt;
&lt;a href=&quot;https://3.bp.blogspot.com/-Y8AaDq-GEu0/W6SLT-GDkhI/AAAAAAAAAzs/ZXA-iZQSuKsyxR3RIr3OOs9C_3LB-0OXwCPcBGAYYCw/s1600/B%2BFlat%2BChord%2Bin%2BShortcut.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1600&quot; data-original-width=&quot;739&quot; height=&quot;320&quot; src=&quot;https://3.bp.blogspot.com/-Y8AaDq-GEu0/W6SLT-GDkhI/AAAAAAAAAzs/ZXA-iZQSuKsyxR3RIr3OOs9C_3LB-0OXwCPcBGAYYCw/s320/B%2BFlat%2BChord%2Bin%2BShortcut.png&quot; width=&quot;148&quot;/&gt;&lt;/a&gt;
&lt;p&gt;I was also able to easily modify the shortcut to support ukulele as requested by my user. I just added &lt;code&gt;?instrument=Ukulele&lt;/code&gt; to the url field and replaced the image width rule with one that matches images with width greater than 100px.&lt;/p&gt;
&lt;p&gt;To check if users are actually using this feature, I scanned my log files. Sure enough, the following user agent string started appearing thousands of times a day in jguitar.com's web server logs on 9/17/2018:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Shortcuts/700 CFNetwork/974.2.1 Darwin/18.0.0&lt;/code&gt;&lt;/p&gt;
I'm genuinely thrilled that someone at Apple deemed my chord calculator technology worthy of inclusion in the iOS shortcuts gallery. If anyone from Apple is reading this, please reach out using &lt;a href=&quot;https://jguitar.com/contactus.jsp?subject=Guitar+Chord+Finder+Shortcut&quot;&gt;JGuitar.com's contact form&lt;/a&gt;. We can work together to make this experience even better. I can provide high quality SVG images of all chord diagrams, support alternate tunings, instruments and more.

</description>
<pubDate>Fri, 21 Sep 2018 06:50:40 +0000</pubDate>
<dc:creator>asaph</dc:creator>
<og:url>https://www.asaph.org/2018/09/jguitar-apple-ios-shortcut.html</og:url>
<og:title>Thanks for the Surprise Integration with my Website, Apple!</og:title>
<og:description>Addicted To Programming - @asaph's blog</og:description>
<og:image>https://1.bp.blogspot.com/-9d57mee_QP4/W6SLW3_nyEI/AAAAAAAAAzo/A9kE2FKV0BoR-CPyiy4jZUN8wevLbybyQCPcBGAYYCw/w1200-h630-p-k-no-nu/App%2BStore%2BShortcuts%2BApp.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.asaph.org/2018/09/jguitar-apple-ios-shortcut.html</dc:identifier>
</item>
<item>
<title>Ask HN: What open source project, in your opinion, has the highest code quality?</title>
<link>https://news.ycombinator.com/item?id=18037613</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=18037613</guid>
<description>&lt;tr class=&quot;athing comtr&quot; id=&quot;18037855&quot; readability=&quot;20.572566371681&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;10.286283185841&quot;&gt;&lt;tr readability=&quot;20.572566371681&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.816814159292&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;16.923423423423&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I hold the source code of Go standard library &amp;amp; base distribution (i.e. compiler, etc.) in very high regard. Especially the standard library is, in my opinion, &lt;em&gt;stunningly&lt;/em&gt; easy to read, explore and understand, while at the same time being well thought through, easy to use (great and astonishingly well documented APIs), of very good performance, and with huge amounts of (also well readable!) tests. The compiler (including the runtime library) is noticeably harder to read and understand (especially because of sparse comments and somewhat idiosyncratic naming conventions; that's partly explained by it being constantly in flux). But still &lt;em&gt;doable&lt;/em&gt; for a human being, and I guess probably significantly easier than in most modern compilers. (Though I'd love to be proven wrong on this account!)&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;At the same time, the apparent simplicity should not be mistaken for lack of effort; on the contrary, I feel every line oozes with purpose, practicality, and to-the-point-ness, like a well sharpened knife, or a great piece of art where it's not about that you cannot add more, but that you cannot &lt;em&gt;remove&lt;/em&gt; more.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039646&quot; readability=&quot;15.549597855228&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;7.7747989276139&quot;&gt;&lt;tr readability=&quot;15.549597855228&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.3170241286863&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.917582417582&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;This is one of the great things about many Go libraries; the language is so simple its difficult to overcomplicate a Go project. This makes reading any Go source code, projects, libraries, the stdlib, a joy. The only times I've found Go libraries to be a PITA to read is when they get autogenerated from some other language (protobuf compilations, parts of the compiler that came from C, AWS/GoogleCloud/Azure libraries, etc), but that's to be expected in every language.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Kubernetes is another great example of a project that is so unbelievably complex in its function, it should be completely impenetrable to anyone who isn't a language expert. But, go check it out; its certainly complex and huge, but actually grokable.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041381&quot; readability=&quot;5.4975609756098&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038876&quot; readability=&quot;6.5602094240838&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2801047120419&quot;&gt;&lt;tr readability=&quot;6.5602094240838&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I'd agree, but only as far as aesthetics go. When you have to understand the time complexity and runtime characteristics of the standard library sorting algorithms, I think Go does a very bad job - the standard `sort.Sort(data sort.Interface)` will run poorly if the data is already mostly sorted. I expect these kinds of things to be documented properly.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042344&quot; readability=&quot;10.591905564924&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.2959527824621&quot;&gt;&lt;tr readability=&quot;10.591905564924&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.814502529511&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.9216027874564&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Golang's `sort.Sort(data sort.Interface)` will sort mostly-sorted data in nearly its fastest possible time, because it basically uses median-of-three quicksort, falling back to insertion sort for small partitions. Median-of-three on sorted or nearly-sorted data picks the optimal or nearly optimal partitioning element for quicksort. The code is simple, readable, and well-commented. Moreover, its average and worst-case complexity is documented in the godoc.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;In short, your comment is wrong from beginning to end. What led you to believe that anything in it was true?&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040870&quot; readability=&quot;2.6784140969163&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039386&quot; readability=&quot;2.4626865671642&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2313432835821&quot;&gt;&lt;tr readability=&quot;2.4626865671642&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I was pretty certain most libraries shuffle then quicksort. No need for documentation. Does go not do this?&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040042&quot; readability=&quot;3.0188679245283&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040828&quot; readability=&quot;2.1891891891892&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042002&quot; readability=&quot;9.0683229813665&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.5341614906832&quot;&gt;&lt;tr readability=&quot;9.0683229813665&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.8944099378882&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.210272873194&quot;&gt;&lt;span class=&quot;commtext c5a&quot;&gt;I'm sorry, but Timsort is a bit of a hack. It's a &quot;this seems to work well&quot; algorithm, and it shows. It took 13 years until its claimed running time was finally proven in 2015. The four (originally three) rules for merging sequences from the stack are rather arbitrary. Multiple issues were found well after it was already widely deployed.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c5a&quot;&gt;Recently, it was also shown that Timsort doesn't optimally use the information it has about runs. As an alternative, powersort was proposed, which seems to outperform Timsort both on randomly ordered inputs as well as inputs with long runs: &lt;a href=&quot;https://arxiv.org/pdf/1805.04154.pdf&quot; rel=&quot;nofollow&quot;&gt;https://arxiv.org/pdf/1805.04154.pdf&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042712&quot; readability=&quot;1.3888888888889&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039596&quot; readability=&quot;1.0416666666667&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040243&quot; readability=&quot;3.6975945017182&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.8487972508591&quot;&gt;&lt;tr readability=&quot;3.6975945017182&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;People were still finding bugs in common implementations of timsort as of 3 years ago. It's not unreasonable to stick with a somewhat more conservative choice for a core library function until there's more reason to have confidence in the implementations of timsort.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040857&quot; readability=&quot;1.5176470588235&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040939&quot; readability=&quot;7.8&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042662&quot; readability=&quot;7.5789473684211&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.7894736842105&quot;&gt;&lt;tr readability=&quot;7.5789473684211&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.7368421052632&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8872180451128&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;If I recall correctly, the bug only applied for arrays/lists of length greater than 2 to the more-than-astronomical. Not something that anyone ever encountered in the wild, because current hardware doesn't have enough memory.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Edit: The article linked in the other comment says the Java dev team didn't even bother to implement the &quot;proper&quot; fix, but merely adjusted how much space is allocated.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040762&quot; readability=&quot;1.2155172413793&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039568&quot; readability=&quot;3.6113360323887&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.8056680161943&quot;&gt;&lt;tr readability=&quot;3.6113360323887&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c5a&quot;&gt;Being pretty certain isn't the same as being certain. I really don't care what most libraries do as long as they document what exactly they have chosen to do. Go's `sort.Sort(data Interface)` definitely does not shuffle.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038677&quot; readability=&quot;8.3823529411765&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.1911764705882&quot;&gt;&lt;tr readability=&quot;8.3823529411765&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.5882352941176&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.809027777778&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;em&gt;&amp;gt; standard library is, in my opinion, stunningly easy to read&lt;/em&gt;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Reading this brought to mind the JDK. All well structured, neatly formatted and well documented. I’ll often just click thru to the source to get the nitty-gritty on a function, I rarely need to consult the actual docs!&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038810&quot; readability=&quot;3.5135135135135&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7567567567568&quot;&gt;&lt;tr readability=&quot;3.5135135135135&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;The fact that almost everyone uses the same style and standards through the go tools has made learning easy. I can dip into the most advanced package and make sense of what's going on quickly.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038563&quot; readability=&quot;4.1666666666667&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.0833333333333&quot;&gt;&lt;tr readability=&quot;4.1666666666667&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;As far as I know, parts of the compiler are still code automatically translated from C, so this may be part of the reason.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038819&quot; readability=&quot;3.6516853932584&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038871&quot; readability=&quot;4.4700460829493&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2350230414747&quot;&gt;&lt;tr readability=&quot;4.4700460829493&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;That doesn't invalidate the parent comment :) The code is pure Go, but parts of it originate in C by means of automatic translation during development of Go 1.4 (or whichever version it was).&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038997&quot; readability=&quot;1.4081632653061&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041879&quot; readability=&quot;9.6848137535817&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.8424068767908&quot;&gt;&lt;tr readability=&quot;9.6848137535817&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.810888252149&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.918998527246&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I think one of the things that makes Go library code so easy to read is the lack of generics. Everything you need to understand the code is right in front of you, without the barrier of having to learn new sets of complicated abstractions or worrying that some obscure code in some other file impacts/is invisibly called by the function. With large code bases written in other programming languages, I have to spend an inordinate amount of time studying the code base and object relations before making changes.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;For me, code readability is such a high value that, on these grounds alone, I oppose the introduction of generics and hope the current proposals ultimately fail.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037867&quot; readability=&quot;7.7518248175182&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.8759124087591&quot;&gt;&lt;tr readability=&quot;7.7518248175182&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.1824817518248&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;16.163265306122&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;SQLite.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;and for this reason alone!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://www.sqlite.org/testing.html&quot; rel=&quot;nofollow&quot;&gt;https://www.sqlite.org/testing.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span class=&quot;commtext c00&quot;&gt;&lt;code&gt;    As of version 3.23.0 (2018-04-02), the SQLite library consists of approximately 
    128.9 KSLOC of C code. (KSLOC means thousands of &quot;Source Lines Of Code&quot; or, in 
    other words, lines of code excluding blank lines and comments.) 

    By comparison, the project has 711 times as much test code and test scripts - 
    91772.0 KSLOC.&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039103&quot; readability=&quot;15.574920297556&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;7.7874601487779&quot;&gt;&lt;tr readability=&quot;15.574920297556&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;13.141339001063&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;25.858541893362&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Automated testing is useful and good. But I really feel it's reached a lever of fetishisation that is quite concerning.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Testing code is code which needs to be written, read, maintained, refactored. Very often nowadays I have to wade through tests which test nothing useful, except syntax. Even worse, with developers who adopt the mock-everything approach, I often find tests which only verify that the &lt;em&gt;implementation&lt;/em&gt; is exactly the one they wrote, which is even worse: it makes refactoring a pain, because, even if you rewrote a method in a better way which produces exactly the results you wanted, the test will fail.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;So, the ratio of testing code vs implementation code is a completely wrong proxy for code quality.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;EDIT: I'm not criticising SQLite and their code quality - which I never studie - but the idea that you can judge code quality for a project just by the ratio of test code vs implementation code.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039213&quot; readability=&quot;16.084688726865&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;8.0423443634324&quot;&gt;&lt;tr readability=&quot;16.084688726865&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;20.815479528884&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;41.19101762365&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;They actually have to test to that degree to follow aviation standards (DO-178b [0]) because they're used in aviation equipment.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Dr. Hipp said he started really following it when Android came out and included SQLite and suddenly there were 200M mobile SQLite users finding edge cases: &lt;a href=&quot;https://youtu.be/Jib2AmRb_rk?t=3413&quot; rel=&quot;nofollow&quot;&gt;https://youtu.be/Jib2AmRb_rk?t=3413&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Lightly edited transcript here:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; It made a huge difference. That that was when Android was just kicking off. In fact Android might not have been publicly announced, but we had been called in to help with getting Android going with SQLite. [Actually], they had been publicly announced and there were a bunch of Android phones out and we were getting flooded with problems coming in from Android.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; I mean it worked great in the lab it worked great in all the testing and then [...] you give it to 200 million people and let them start clicking on their phone all day and suddenly bugs come up. And this is a big problem for us.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; So I started doing following this DO-178b process and it took a good solid year to get us there. Good solid year of 12 hour days, six days a week, I mean we really really pushed but we got it there. And you know, once we got SQLite to the point where it was at that DO-178b level, standard, we still get bugs but you know they're very manageable. They're infrequent and they don't affect nearly as many people.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; So it's been a huge huge thing. If you're writing an application deal ones, you know a website, a DO-178b/a is way overkill, okay? It's just because it's very expensive and very time-consuming, but if you're running an infrastructure thing like SQL, it's the only way to do it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;[0]: &lt;a href=&quot;https://youtu.be/Jib2AmRb_rk?t=677&quot; rel=&quot;nofollow&quot;&gt;https://youtu.be/Jib2AmRb_rk?t=677&lt;/a&gt; &quot;SQLite: The Database at the Edge of the Network with Dr. Richard Hipp&quot;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039303&quot; readability=&quot;5.6953125&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.84765625&quot;&gt;&lt;tr readability=&quot;5.6953125&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.64453125&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;12.867075664622&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;SQlite is very high quality software, but they use DO-178b &quot;inspired&quot; testing process. As far as I know they don't have version of software that is or can be used in safety critical parts despite their boasting.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;They say in their site that:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; Airbus confirms that SQLite is being used in the flight software for the A350 XWB family of aircraft.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Flight software does not imply safety critical parts of avionics. It can be the entertainment system or some logging that is not critical.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039992&quot; readability=&quot;16.757928802589&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;8.3789644012945&quot;&gt;&lt;tr readability=&quot;16.757928802589&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;16.265048543689&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;31.895150720839&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Correct. The key word is &quot;inspired&quot;. Multiple companies have run a DO-178B cert on SQLite, I am told, but the core developers did not get to participate, and I think the result was level-C or -D.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;While all that was happening 10+ years ago, I learned about DO-178B. I have a copy of the DO-178B spec within arms reach. And I found that, unlike most other &quot;quality&quot; standards I have encountered, DO-178B is actually useful for improving quality.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I originally developed the TH3 test suite for SQLite with the idea that I could sell it to companies interested in using SQLite in safety-critical applications, and thereby help pay for the open-source side of SQLite. That plan didn't work out as nobody ever bought it. But TH3 and the discipline of 100% MC/DC testing was and continues to be enormously helpful in keeping bugs out of SQLite, and so TH3 and all the other DO-178B-inspired testing and refactoring of SQLite has turned out to be well worth the thousands of hours of effort invested.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;The SQLite project is not 100% DO-178B compliant. We have gotten slack on some of the more mundane paperwork aspects. Also, we aggressively optimize the SQLite code base for performance, whereas in a real safety-critical application the focus would be on extreme simplicity at the cost of reduced performance.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;However, if some company does call us tomorrow and says that they want to purchase a complete set of DO-178B/C Level-A certification artifacts from us, I think we could deliver that with a few months of focused effort.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041403&quot; readability=&quot;5.123595505618&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.561797752809&quot;&gt;&lt;tr readability=&quot;5.123595505618&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I just bought a copy of DO-178C after reading these posts here and the Wikipedia article on it. $290, but if it's good, it should be worth it, right?&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18043491&quot; readability=&quot;3.438202247191&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7191011235955&quot;&gt;&lt;tr readability=&quot;3.438202247191&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;240&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I haven't seen -C only DO-178B, though I'm told there isn't much difference. It is not a page-turner. It took me about a year to really understand it.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039365&quot; readability=&quot;4.2261904761905&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1130952380952&quot;&gt;&lt;tr readability=&quot;4.2261904761905&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.3809523809524&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.2556962025316&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Yeah DO-178B gives several levels for software from DALA (highest) to DALE (lowest). If DALA software fails the results are catastrophic if DALE fails there is no effect on the aircraft. Since DALE is usually just test equipment and such they might be at a DALD level. So still requires a lot of testing but not nearly to the level that DALA requires.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/DO-178B&quot; rel=&quot;nofollow&quot;&gt;https://en.wikipedia.org/wiki/DO-178B&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039459&quot; readability=&quot;6.4203821656051&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2101910828025&quot;&gt;&lt;tr readability=&quot;6.4203821656051&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.5859872611465&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8453608247423&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I think it's possible that parts of SQLite, for example file format in read only mode and few constant queries are certified as part of some safety critical software.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Hipp's Hwaci consulting company would probably help to do the work, but it has no relation to the SQLite as a library.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039327&quot; readability=&quot;4.3283582089552&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1641791044776&quot;&gt;&lt;tr readability=&quot;4.3283582089552&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Good point. The video I linked to merely says that he was contacted by someone in the aviation space about the standard, which I took to mean that it was used in avionics.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040023&quot; readability=&quot;3.4141414141414&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7070707070707&quot;&gt;&lt;tr readability=&quot;3.4141414141414&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.6944444444444&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.7093023255814&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;&quot;They actually have to test to that degree to follow aviation standards...&quot;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I didn't know that, and that's very cool.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Makes me think that the name SQLite is misnomer.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039151&quot; readability=&quot;4.7017045454545&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3508522727273&quot;&gt;&lt;tr readability=&quot;4.7017045454545&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.7017045454545&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8652694610778&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;While I agree in general I disagree here. If you read about the Sqlite tests you will find that they do test sensibly.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;One suite I'm particularly impressed with will run tests from zero bytes with slowly increasing available memory until the program passes. The tests verify that at no point the DB is corrupted by an OOM event.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039298&quot; readability=&quot;5.2924528301887&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6462264150943&quot;&gt;&lt;tr readability=&quot;5.2924528301887&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Just to clarify, I wasn't criticising sqlite, I was criticising the idea of judging their code quality &quot;for this reason alone!&quot; - ie that they have so much test code vs implementation.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040773&quot; readability=&quot;4.6688741721854&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3344370860927&quot;&gt;&lt;tr readability=&quot;4.6688741721854&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.6688741721854&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8421052631579&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Sure! Can't judge a book by its size.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;As a heuristic the code versus test-code ratio serves well as an indicator of quality. Just like consistent indentation does. You don't know whether a well-indented program is good. But if the indentation is inconsistent you'll expect worse.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039669&quot; readability=&quot;2.5407725321888&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039865&quot; readability=&quot;12.991689750693&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;6.4958448753463&quot;&gt;&lt;tr readability=&quot;12.991689750693&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.9598337950139&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;13.792899408284&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Yes, bad tests are bad. Yes, mocks are bad. Good tests, however, are good.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;To expound on that, designing for testability allows you to sidestep the need for mocks almost entirely, and forces you into easier, more reliable and more consistent code. Then when you choose to test it, the tests are simple, straightforward and valuable.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040790&quot; readability=&quot;3.1875&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040542&quot; readability=&quot;8.4334140435835&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.2167070217918&quot;&gt;&lt;tr readability=&quot;8.4334140435835&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.090799031477&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.846153846154&quot;&gt;&lt;span class=&quot;commtext c5a&quot;&gt;Oh boy, I would give your comment an infinite number of up-votes. Yes, testing has reached fetish-like levels.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c5a&quot;&gt;Some of the test code I've encountered recently has been more voluminous, complex and has taken more man hours to develop and maintain than the application or library it's assigned to.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c5a&quot;&gt;For the love of God, develop the damned software! It's either going to work or it's not.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040956&quot; readability=&quot;4.6850393700787&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3425196850394&quot;&gt;&lt;tr readability=&quot;4.6850393700787&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.0905511811024&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.833333333333&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; has taken more man hours to develop and maintain than the application&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;But that is perfectly normal when developing quality code.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;There is no rule that says that test code development should take LESS time.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Certainly different applications have different quality requirements. Perhaps the software you are developing doesn't have that high requirements?&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041123&quot; readability=&quot;6.4958448753463&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2479224376731&quot;&gt;&lt;tr readability=&quot;6.4958448753463&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.1759002770083&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.8816568047337&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Yeah, yeah. Just venting. The products I work on aren't the most important, but they certainly are quite important and most of the testing infrastructure that has been built thus far has a lot of goofy sh@t in it.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I just don't have a high tolerance for needless complexity and gee-whiz-look-what-I-can-do while the clock is running.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038525&quot; readability=&quot;4.5064377682403&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039095&quot; readability=&quot;3.6014234875445&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.8007117437722&quot;&gt;&lt;tr readability=&quot;3.6014234875445&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.6014234875445&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.86328125&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;A better comparison would be some sort of defect rate. Does SQLLite manage less defects per line of code per month (or whatever) than PostgreSQL with that test suite?&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Is there a distinction between the best codebase and the best test suite? Probably.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038394&quot; readability=&quot;5.2990654205607&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6495327102804&quot;&gt;&lt;tr readability=&quot;5.2990654205607&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Tangent: I always thought SLOC means &quot;significant lines of code&quot;. Since &quot;code&quot; is a shortand for &quot;source code&quot;, expanding SLOC as &quot;source lines of [source] code&quot; makes little sense, IMO.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038724&quot; readability=&quot;4.2546583850932&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1273291925466&quot;&gt;&lt;tr readability=&quot;4.2546583850932&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;&quot;Source lines&quot; includes lines with comments, empty lines and code. Source lines of code... Specifies only lines with code, no comments&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038993&quot; readability=&quot;3.5&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.75&quot;&gt;&lt;tr readability=&quot;3.5&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I always thought it meant &quot;single lines of code&quot;, like if line breaks added for formatting had been removed so every statement had its own line.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038740&quot; readability=&quot;0.70833333333333&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038782&quot; readability=&quot;2.3758389261745&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039544&quot; readability=&quot;5.1506849315068&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.5753424657534&quot;&gt;&lt;tr readability=&quot;5.1506849315068&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;As a point of information, I wasn't using monopoly in a particularly pejorative sense, but more just to explain the situation. Feel free to replace with a less loaded word in your head.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038745&quot; readability=&quot;1.4545454545455&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039033&quot; readability=&quot;1.2068965517241&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039116&quot; readability=&quot;4.1221374045802&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.0610687022901&quot;&gt;&lt;tr readability=&quot;4.1221374045802&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;It's like code coverage, though. Zero might indicate a problem, but lots doesn't necessarily mean &quot;good&quot;.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037881&quot; readability=&quot;1.3506493506494&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038231&quot; readability=&quot;2.1333333333333&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038401&quot; readability=&quot;4.9259259259259&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.462962962963&quot;&gt;&lt;tr readability=&quot;4.9259259259259&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;But to be honest, this is mostly fair criticism. Not sure why they need some of those things, but if they need it, then it's fine.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039717&quot; readability=&quot;6.6287425149701&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039835&quot; readability=&quot;4.4748858447489&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2374429223744&quot;&gt;&lt;tr readability=&quot;4.4748858447489&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;The most interesting thing (IMO) left out of this page is the fact that D. Richard Hipp is the author of Fossil. This has a particular smell factor to it, not sure if it is a good or bad smell.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038576&quot; readability=&quot;1.421686746988&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038635&quot; readability=&quot;5.6310160427807&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8155080213904&quot;&gt;&lt;tr readability=&quot;5.6310160427807&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;This was a response to test coverage used as a benchmark. I see them both as an indirect project quality benchmark. Neither is directly representing the actual code quality but does indicate if it is a project that matches my view of a mature project. Sure, others will disagree - but the whole idea of quality in this context is subjective anyway.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038983&quot; readability=&quot;10.68345323741&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.341726618705&quot;&gt;&lt;tr readability=&quot;10.68345323741&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;9.3480215827338&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;18.499061913696&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Its older than some HN posters, but the GPLed DOOM source code was one I liked.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;The performance reached by the game was considered impossible until Carmack did show us otherwise. So I expected lots of ASM and weird hacks, especially as compiler optimization wasnt as good as it is today.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Surprise, surprise, the thing was easy to read, easy to get going, easy to port, reasonablye documented . It has shown me what a goog balance between nice code and usable code is.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;If you want tho browse: &lt;a href=&quot;https://github.com/id-Software/DOOM&quot; rel=&quot;nofollow&quot;&gt;https://github.com/id-Software/DOOM&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039088&quot; readability=&quot;3.1304347826087&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040492&quot; readability=&quot;2.3951612903226&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042534&quot; readability=&quot;7.045871559633&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.5229357798165&quot;&gt;&lt;tr readability=&quot;7.045871559633&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Actually, Hypeman is using this correctly in my opinion. We all knew the code would be good, it was only him that doubted it. So its not surprising to us, the reader, that the code is good.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039318&quot; readability=&quot;5.5512465373961&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7756232686981&quot;&gt;&lt;tr readability=&quot;5.5512465373961&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.0886426592798&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.8516320474777&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;You are reading cleaned up source code that only compiles and runs on Linux. That's why it looks nice.&lt;/span&gt;
&lt;pre&gt;
&lt;span class=&quot;commtext c00&quot;&gt;&lt;code&gt;  Many thanks to Bernd Kreimeier for taking the time to clean up the
  project and make sure that it actually works.  Projects tends to rot if
  you leave it alone for a few years, and it takes effort for someone to
  deal with it again.&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039395&quot; readability=&quot;7.3066666666667&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.6533333333333&quot;&gt;&lt;tr readability=&quot;7.3066666666667&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.48&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.801444043321&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I didnt have interrnet at the time so I didn't check github 20 years ago ;-)&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;On the more serous side, i wanted to say something about the TODOs as example of the balance, but couldnt find any. I thought i was confusing with quake, but the cleanup might explain it better.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039225&quot; readability=&quot;2.0704225352113&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039627&quot; readability=&quot;2.0795454545455&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039513&quot; readability=&quot;0.46153846153846&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039205&quot; readability=&quot;2.5317919075145&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2658959537572&quot;&gt;&lt;tr readability=&quot;2.5317919075145&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;The DOOM code is so straightforward. You don't ever experience that feeling of having zero understanding of the code when you look into a file.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037693&quot; readability=&quot;1.0043668122271&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039595&quot; readability=&quot;6.1864623243934&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.0932311621967&quot;&gt;&lt;tr readability=&quot;6.1864623243934&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.5351213282248&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.3720316622691&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;There's a lot to admire in OpenBSD but sometimes the peripheral tools they deliver don't work well. The example I know best is OpenNTPD (last link in your comment). It has a bunch of problems, including relatively poor clock discipline compared to other NTP implementations. And it doesn't even try to handle leap seconds. That causes problems on the machine itself which may or may not matter to you, but it's catastrophic if that OpenNTPD serves time to other servers. Unfortunately there's a bunch of OpenNTPD servers in the NTP Pool actively providing bad time. Some details from the 2016 leap second: &lt;a href=&quot;https://community.ntppool.org/t/leap-second-2017-status/59/10&quot; rel=&quot;nofollow&quot;&gt;https://community.ntppool.org/t/leap-second-2017-status/59/1...&lt;/a&gt;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Again I mostly admire OpenBSD. But OpenNTPD is not the best example of their work.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041886&quot; readability=&quot;3.551724137931&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7758620689655&quot;&gt;&lt;tr readability=&quot;3.551724137931&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Have you had a chance to look at systemd-timesyncd? I'm curious how it stacks up as a NTP client. Was thinking about switching my systems to it (from chrony) as I don't need the NTP server functionality.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040132&quot; readability=&quot;4.5064377682403&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2532188841202&quot;&gt;&lt;tr readability=&quot;4.5064377682403&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.6051502145923&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.8356807511737&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;This is seriously bad, but I do get why they thought OpenNTPd was necessary (bad/perfectible code in the other implementations).&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Maybe I'll check that at home (where I replaced FreeBSD's ntpd with OpenNTPd).&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040430&quot; readability=&quot;5.1654929577465&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.5827464788732&quot;&gt;&lt;tr readability=&quot;5.1654929577465&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.1654929577465&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.8474264705882&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Yeah the stock old ntpd had a lot of unused code and various security problems over the years. It makes sense OpenBSD would replace it. Just a shame they didn't do it completely. I think that describes a lot of OpenBSD tools; you're trading off some functionality for very good security.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;There are better NTP implementations now. Chrony is great, it's the default in Ubuntu now. NTPsec is coming along although I haven't tried to use it myself. Also good ol' ntpd is greatly improved.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://chrony.tuxfamily.org/&quot; rel=&quot;nofollow&quot;&gt;https://chrony.tuxfamily.org/&lt;/a&gt; &lt;a href=&quot;https://www.ntpsec.org/&quot; rel=&quot;nofollow&quot;&gt;https://www.ntpsec.org/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038314&quot; readability=&quot;3.5757575757576&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7878787878788&quot;&gt;&lt;tr readability=&quot;3.5757575757576&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.469696969697&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8117154811715&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Just wanted to +1 this.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Once had to make some changes to OpenSSH for an internal project and it was surprisingly easy to find the relevant code and make the necessary changes. One of the few times my code worked on the first compile.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037741&quot; readability=&quot;4.4497607655502&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2248803827751&quot;&gt;&lt;tr readability=&quot;4.4497607655502&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext cdd&quot;&gt;for sure not. OpenBSD makes no attempt to use proper performance which is critical for a kernel. there are so many naive ad-hoc data structures and algos, it's a shame to walkthrough.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037872&quot; readability=&quot;3.1612903225806&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038899&quot; readability=&quot;4.247311827957&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1236559139785&quot;&gt;&lt;tr readability=&quot;4.247311827957&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;How is performance related to code quality. That makes no sense. If anything, if you had to inline ASM for example, the code would suffer from readability.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038956&quot; readability=&quot;1.3978494623656&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039065&quot; readability=&quot;3.3988439306358&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039474&quot; readability=&quot;2.4&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2&quot;&gt;&lt;tr readability=&quot;2.4&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Is the gnu-coreutils true much faster? I have a hard time seeing how return 0 can be so slow.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039218&quot; readability=&quot;10.588785046729&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.2943925233645&quot;&gt;&lt;tr readability=&quot;10.588785046729&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;12.032710280374&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;23.834254143646&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I did say “one of the goals”.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I don’t see how those examples are relevant. Why would that last one be faster?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I agree that the OpenBSD code here is good, no more and no less than needed.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I assumed the grandparent was referring to cases where an O(n) algorithm is used where it might be O(log n) or O(1) with just a little more effort. It’s a tradeoff, sure, and in some cases linear searches can work surprisingly well, but in general I think this kind of thing should always be considered in good code.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Micro-optimizations like inline assembly for inner loops may or may not be a good idea, depending on the application. All else being equal, I’d certainly agree that good clean code would not use assembly.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039399&quot; readability=&quot;4.5418326693227&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2709163346614&quot;&gt;&lt;tr readability=&quot;4.5418326693227&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;200&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.5418326693227&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8051948051948&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;How is the coreutils true faster?&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I would expect the openbsd true to be the fastest, it doesn't need to spawn a subshell and it doesn't do more than the posix specification requires (afaik --help/--version should be ignored).&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039455&quot; readability=&quot;3.364238410596&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.682119205298&quot;&gt;&lt;tr readability=&quot;3.364238410596&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;240&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.364238410596&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.7307692307692&quot;&gt;&lt;span class=&quot;commtext c5a&quot;&gt;Experience shows it's faster. It's just weird, but it's like that.&lt;/span&gt;
&lt;pre&gt;
&lt;span class=&quot;commtext c5a&quot;&gt;&lt;code&gt;  time { for i in $(seq 1 10000); do /path/to/true; done; }&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039580&quot; readability=&quot;2.3823529411765&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040538&quot; readability=&quot;1.2911392405063&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037782&quot; readability=&quot;14.810622551154&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;7.4053112755768&quot;&gt;&lt;tr readability=&quot;14.810622551154&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;21.722246408359&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;42.905328049317&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;NetBSD.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Why? I was able to do substantial changes to the kernel when I was a teenager (late 90s), mostly on my first try. There was no giant wall of abstraction I had to climb over or some huge swath of mutually interacting code I had to comprehend. There was also nothing that required fancy code navigation and the creation of something like the ctags database in order to find out what on earth was happening.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;No action at a distance or lasagna style dereferencing or mysterious type names that are just typedef'd and #define'd around dozens of times back to something basic like char. No fancy obscure GNU preprocessor extensions or exotic programming patterns.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Nothing had obtuse documentation that tried my patience or required much more than enthusiasm and basic C knowledge.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I did things like got a wireless card working from code written for one with a similar chipset and got various other things like the IrDA transmitter on my laptop at the time to do a slattach and thus work as a primitive wireless network - all in the late 90s.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I likely had no idea what, say, the difference between network byte order and host byte order was at the time or how the 802.11b protocol worked or what a radiotap header was or any of that. The separation of concerns was so good however, that none of that knowledge was actually needed.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Compare that to say, the Qualcomm compatible WWAN I just dealt with over the past few weeks where I needed to have in-depth knowledge of an exhaustive number of things (very specific chipset and network details) to get a basic ipv4 address working. Then I needed to read up on GNSS technology and NMEA data to debug codes over USBmon to get the GPS from the wwan working. Then after I had the qmi kernel modules doing what I wanted and the qmi userland toolsets, I had to write some python scripts to talk to dbus to get the data from the modemmanager that I needed in order to log the GPS. All the maintainers of these pieces were very nice and helpful and I have nothing negative to say. This is just how it usually is these days.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Back then however, I wasn't a good programmer, I was likely pretty terrible in fact but with the NetBSD codebase I was able to knockout whatever I wanted every time, fast, on a 486.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I miss those days.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041788&quot; readability=&quot;5.6047904191617&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8023952095808&quot;&gt;&lt;tr readability=&quot;5.6047904191617&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.2035928143713&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.8730158730159&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; No action at a distance or lasagna style dereferencing or mysterious type names that are just typedef'd and #define'd around dozens of times back to something basic like char. No fancy obscure GNU preprocessor extensions or exotic programming patterns.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Ah, I see you've also looked at the Linux kernel code.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037878&quot; readability=&quot;4.5106382978723&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2553191489362&quot;&gt;&lt;tr readability=&quot;4.5106382978723&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;What's your relation with it nowadays? I'm very curious about NetBSD but never tried it yet. I sincerely wonder what's your opinion on it now, and why you speak about the situation only as &quot;those days&quot; now? :)&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037961&quot; readability=&quot;6.5036674816626&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2518337408313&quot;&gt;&lt;tr readability=&quot;6.5036674816626&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.1100244498778&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.8694516971279&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I have no idea, haven't kept up with it. I'd recommend 1.x (&amp;lt;=4) any day though, simply for the education alone.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I don't really use it these days because I need systems that future cheap devs can maintain and once you enter userland it takes commitment and time I simply don't have to stay with netbsd.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Debian permits me to usually not have to care and that's pretty invaluable&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041073&quot; readability=&quot;5.207100591716&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.603550295858&quot;&gt;&lt;tr readability=&quot;5.207100591716&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.2445759368836&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;16.425&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Going to throw Elixir Lang into the mix.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;- The tooling is excellent.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;- The code is well-documented and readable.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;- The core team committed to never needing to introduce breaking changes.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;The Elixir community tends to produce work that is actually considered &quot;Done&quot;. An elixir package is not stale when it hasn't seen a commit in a few months. Instead, the feeling is: &quot;It's feature complete and only needs maintenance from here on out.&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://github.com/elixir-lang/elixir&quot; rel=&quot;nofollow&quot;&gt;https://github.com/elixir-lang/elixir&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041959&quot; readability=&quot;2.6393442622951&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.3196721311475&quot;&gt;&lt;tr readability=&quot;2.6393442622951&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.5191256830601&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.7865853658537&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; The core team committed to never needing to introduce breaking changes.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Is this why Elixir seems to have many different ways of doing the same thing though?&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042222&quot; readability=&quot;6.4489795918367&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2244897959184&quot;&gt;&lt;tr readability=&quot;6.4489795918367&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I think that's one reason. The other is that classic erlang (Elixir is built on top of the erlang beam vm) sometimes does things one way but elixir has a more elegant way of doing the same thing, however, in elixir you can still call into erlang libraries to achieve the same thing if that's more familiar to you.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038443&quot; readability=&quot;5.6215384615385&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8107692307692&quot;&gt;&lt;tr readability=&quot;5.6215384615385&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.2123076923077&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;5.983498349835&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;This is not necessarily about the code, but I've been really impressed for a while by the lodash project and its maintainer's dedication to constantly keep the number of open issues at 0. Any issues get dealt with at record speed, it's quite a sight to see.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;a href=&quot;https://github.com/lodash/lodash/issues&quot; rel=&quot;nofollow&quot;&gt;https://github.com/lodash/lodash/issues&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040397&quot; readability=&quot;8.265306122449&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.1326530612245&quot;&gt;&lt;tr readability=&quot;8.265306122449&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;JDD, the maintainer, is also incredibly devoted and overall a nice guy to talk to. He has something like 5 years (and counting) of making a commit every single day, including weekends and holidays and sick days. They may not always be world-changing commits, but it still shows an incredible amount of dedication&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039096&quot; readability=&quot;2.2121212121212&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039139&quot; readability=&quot;6.2540983606557&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.1270491803279&quot;&gt;&lt;tr readability=&quot;6.2540983606557&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;With such a big project, being quick to hand out wontfix isn't necessarily a bad thing. To be honest, seeing as this project is used by a huge part of the… rather diverse JS crowd, 15% wontfix is &lt;em&gt;astoundingly low&lt;/em&gt;.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039378&quot; readability=&quot;3.1067961165049&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038977&quot; readability=&quot;2.5419847328244&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2709923664122&quot;&gt;&lt;tr readability=&quot;2.5419847328244&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;It's not always a good thing. In the haste of fixing things introspection of root causes may be neglected...&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038806&quot; readability=&quot;0.93617021276596&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037775&quot; readability=&quot;13.026315789474&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;6.5131578947368&quot;&gt;&lt;tr readability=&quot;13.026315789474&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.3421052631579&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.0242510699001&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Strictly talking about code quality, I will nominate RCP100, which is a small, virtually unknown, now-abandoned routing software written in C [0]. I started programming with C way back in the 90s, and this is one of only &lt;em&gt;two&lt;/em&gt; projects I can recall being immediately struck by the beauty of the code (Redis being the other). I know almost nothing about the author but he seems not to want to be known by name. You can browse the source on Github [1], which I uploaded myself, since you can only get a tarball from sourceforge. Anyway, as someone else mentions, C is usually a mess, but RCP100 struck me as beautiful.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;[0] &lt;a href=&quot;http://rcp100.sourceforge.net/&quot; rel=&quot;nofollow&quot;&gt;http://rcp100.sourceforge.net/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;[1] &lt;a href=&quot;https://github.com/curtiszimmerman/rcp100&quot; rel=&quot;nofollow&quot;&gt;https://github.com/curtiszimmerman/rcp100&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041250&quot; readability=&quot;6.5&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.25&quot;&gt;&lt;tr readability=&quot;6.5&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.0357142857143&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.809523809524&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Hi Curtiz,&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Thanks for uploading RCP100. Your comment is a timely one. I wanted to learn how a router works and is built and was looking for a simpler implementation.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Can you recommend any resources from which I could learn more about network programming, so that I could understand RCP100 code better?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Thanks!&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038559&quot; readability=&quot;1.2647058823529&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039447&quot; readability=&quot;4.2682926829268&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1341463414634&quot;&gt;&lt;tr readability=&quot;4.2682926829268&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I actually did send fan mail to the author, heh, thinly-disguised as a courtesy to let them know that I mirrored their project on Github.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039690&quot; readability=&quot;4.5483870967742&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038500&quot; readability=&quot;4.6426735218509&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039077&quot; readability=&quot;5.1428571428571&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.5714285714286&quot;&gt;&lt;tr readability=&quot;5.1428571428571&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.8571428571429&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.7278911564626&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;It's not clean at all. Thousands of different styles, no single convention on function-naming, etc.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Want a clean kernel, go look at the BSDs.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041871&quot; readability=&quot;5.7035294117647&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8517647058824&quot;&gt;&lt;tr readability=&quot;5.7035294117647&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.7529411764706&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8894348894349&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;One thing the Linux kernel has going for it is that there are a lot of books that describe how the various parts work and how to use the various internal interfaces. I can't think of any other open source project that has multiple books on how to contribute.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;(Sadly, most of those good kernel books were written in the 90's and early 2000's. I don't know if there are any recent kernel hacking books.)&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037859&quot; readability=&quot;6.3362068965517&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.1681034482759&quot;&gt;&lt;tr readability=&quot;6.3362068965517&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Lua. It's has everything a good C project should have: small size, simple build system, portability by using the simplest constructs and not ifdefs, a clear and well define scope that none dares trespassing.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039622&quot; readability=&quot;0.86046511627907&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040218&quot; readability=&quot;8.9500860585198&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.4750430292599&quot;&gt;&lt;tr readability=&quot;8.9500860585198&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.5025817555938&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;16.65&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Sequel, a database ORM for Ruby: &lt;a href=&quot;https://github.com/jeremyevans/sequel&quot; rel=&quot;nofollow&quot;&gt;https://github.com/jeremyevans/sequel&lt;/a&gt;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;The quality of the code is amazing, it's simple to use and even simpler to look through the docs to reason about.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I also want to praise the author of the library (Jeremy Evans), his support through the IRC is second to none, you can talk directly with him pretty much on a daily basis.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;And even after 8+ years, the project is still constantly being updated (last commit 4 days ago). I haven't seen too many project of this calibre especially when it is ran mostly by a single person.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040697&quot; readability=&quot;6.3955431754875&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.1977715877437&quot;&gt;&lt;tr readability=&quot;6.3955431754875&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Julia. Julia / Julialang is so pedantically tested and the names are pretty meticulously chosen. The algorithms in Base are almost all generic and handle a very wide variety of inputs without catering to them. If you want to learn Julia, along with good software engineering, looking at the Base library is quite recommended.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041977&quot; readability=&quot;3.7157534246575&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038933&quot; readability=&quot;8.5393258426966&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.2696629213483&quot;&gt;&lt;tr readability=&quot;8.5393258426966&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Python: I really like requests, scikit-learn, the Path module from the stardard library, Keras, Django.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;C: Redis, SQLite, LUA.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Java: Joda Time, Guava&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040037&quot; readability=&quot;2.0869565217391&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039089&quot; readability=&quot;4.3571428571429&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1785714285714&quot;&gt;&lt;tr readability=&quot;4.3571428571429&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.3571428571429&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.758064516129&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Joda Time is one of my all time favourite libraries.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;After struggling with JVM stdlib time nonsense, JodaTime was a breath of fresh air and actually made programming with time fun.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039246&quot; readability=&quot;4.4036697247706&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2018348623853&quot;&gt;&lt;tr readability=&quot;4.4036697247706&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Java 8 time module is now considered the replacement for JodaTime for new projects. It is separate from the older Java time libraries, and fixes many of the problems in Joda. Give it a try!&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037736&quot; readability=&quot;5.3149606299213&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6574803149606&quot;&gt;&lt;tr readability=&quot;5.3149606299213&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.4291338582677&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8026315789474&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;When we take the language into consideration, unwound like to mention Redis.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Often codebases written in C are a a mess to understand, a mess to read. The Redis Source Code is understandable even without deep knowledge of C&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040282&quot; readability=&quot;2.3649635036496&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041654&quot; readability=&quot;4.5849056603774&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2924528301887&quot;&gt;&lt;tr readability=&quot;4.5849056603774&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Although still in beta, I'd like to add BearSSL to the mix of well written and documented C libraries. In particular compared to the OpenSSL &quot;documentation&quot;. It's also nice to see an TLS implementation without any memory allocations at all.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038681&quot; readability=&quot;4.2924528301887&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040946&quot; readability=&quot;2.5&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.25&quot;&gt;&lt;tr readability=&quot;2.5&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;+1 for s2n. It's one of the select few C codebases that is actually a pleasure to read.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037798&quot; readability=&quot;3.2992700729927&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6496350364964&quot;&gt;&lt;tr readability=&quot;3.2992700729927&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I'd prefer if people said &lt;em&gt;why&lt;/em&gt; they consider the code good, instead of throwing out a bunch of random projects.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042496&quot; readability=&quot;1.0740740740741&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039925&quot; readability=&quot;7.4300254452926&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.7150127226463&quot;&gt;&lt;tr readability=&quot;7.4300254452926&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Granted I haven't read much open source code but when I was working in Flask, I found the source code to be awesomely clear and well-documented. I actually learned quite a bit about Python by reading Flask code. Also, no-one could explain &quot;g&quot; in a way that made sense, but the source code made it obvious. Would recommend reading it if you're into Python at all.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039973&quot; readability=&quot;0.38461538461538&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040089&quot; readability=&quot;1.4285714285714&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037662&quot; readability=&quot;6.44&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.22&quot;&gt;&lt;tr readability=&quot;6.44&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.44&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;12.813218390805&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;There are too many in very different domains and languages.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;However, I opt for jQuery here. It is one of the greatest examples of how constant refactoring and thoughful usage of design pattern get you a very long way.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;If you are designing JavaScript libraries, pls have a look at jQuery. So many great design decisions aka great code quality.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038922&quot; readability=&quot;4.3700787401575&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1850393700787&quot;&gt;&lt;tr readability=&quot;4.3700787401575&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Pushing all dom manipulation through global evals seems like the exact opposite of thoughtful design to me. I have a long list of places where I want to implement strict CSPs, but can’t purely for minor use of jQuery.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039623&quot; readability=&quot;2.865671641791&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039705&quot; readability=&quot;1.3882352941176&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038466&quot; readability=&quot;1.4299065420561&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040419&quot; readability=&quot;4.5551601423488&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2775800711744&quot;&gt;&lt;tr readability=&quot;4.5551601423488&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;qmail cheats a bit because it's so simple, that most people end up using something with messy code on top. Not that I don't think it's a sound engineering decision but when comparing it's code cleanliness with other SMTP stacks it needs to be mentioned.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038975&quot; readability=&quot;1.1153846153846&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039150&quot; readability=&quot;2.0721649484536&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040554&quot; readability=&quot;5.3783783783784&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6891891891892&quot;&gt;&lt;tr readability=&quot;5.3783783783784&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;They're better than most C software of the era, but not better than qmail --- qmail has a better vulnerability record than Postfix does (perhaps because it does less, but that's beside the point).&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038753&quot; readability=&quot;2.3181818181818&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038818&quot; readability=&quot;7.3846153846154&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.6923076923077&quot;&gt;&lt;tr readability=&quot;7.3846153846154&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.1538461538462&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.8933333333333&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Nice to see you include / mention docs and community. I believe a code-based product has a UX. That UX is the code (with comments), documentation and community. That UX is your (i.e., a dev / engineer) end to end experience with &quot;the product.&quot; It's not simply the code.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Put another way, there's more to a product that's easy and sensible to work with than code quality.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038982&quot; readability=&quot;5.6437847866419&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.821892393321&quot;&gt;&lt;tr readability=&quot;5.6437847866419&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.5250463821892&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;14.852941176471&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I definitely admired PostgreSQL's code when I first looked at it.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Projects written in C require a fair amount of care and discipline to be scaled up to larger codebases and teams. PostgreSQL is such a codebase.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I've also seen various parts of Spring's codebase and found all of it to be consistently solid and careful. They take a lot of care to structure carefully and comment immaculately.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Disclosure: I work for Pivotal, which sponsors Spring. Which is why Spring is highly visible in my working life.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041681&quot; readability=&quot;10.663755458515&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.3318777292576&quot;&gt;&lt;tr readability=&quot;10.663755458515&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.7554585152838&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;14.887892376682&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I particularly like reading code from Upspin (upspin.io). Its probably partially because I think the project design is interesting and write go. Regardless, its a great ground up Go project by some of the original Go authors and contributors.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Very well organized code and it feels like they got the project off the ground, fixed bugs for a few months, and now have largely trailed off from maintaining it largely because it just works (I use it) which lends some credibility to their coding style. Of course, I'd like to see the project evolve conceptually, but, right now it does what it says it does reliably for a project that hasn't even cut a single release.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042841&quot; readability=&quot;7.7317073170732&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.8658536585366&quot;&gt;&lt;tr readability=&quot;7.7317073170732&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;11.114329268293&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;21.827315541601&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Typescript&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Even though it’s a fairly complex transpiler, the authors did a good job modularizing and leaving lots of contextual comments on what each part does.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Also typescript baseline tests are a simple but very effective way to get lots of coverage on the compiler.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I’ve read source code for Babel, typescript, coffeescript and flow. Typescript architecture stands out.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Typescript not only does fascinating things like magical code completion abilities and great tooling for IDEs but their codebase has been an inspiration for me to build better front end code.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I may be a bit biased since I’ve worked at Microsoft before.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038322&quot; readability=&quot;2.304&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039147&quot; readability=&quot;4.5238095238095&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2619047619048&quot;&gt;&lt;tr readability=&quot;4.5238095238095&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I've been working with LLVM for a few years and I still find the code difficult to navigate and badly documented. And every single function's argument list is a random jumble of pointers and references (almost all arguments &lt;em&gt;should&lt;/em&gt; be references, but many aren't).&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040763&quot; readability=&quot;8.6697247706422&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.3348623853211&quot;&gt;&lt;tr readability=&quot;8.6697247706422&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.2018348623853&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.8183254344392&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Indeed. And it's not just medium to low-level stuff that's not well documented, it's the high-level stuff too. I personally don't mind that much if I have to spend a few minutes to understand something on a a very local scope, but if the bigger picture is unclear, that's quite bad. For LLVM one largely has to grep for a bunch of other users and try to figure it out from that.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;While I think it has some clear deficiencies, I found a lot of e.g. the optimization passes in GCC a lot easier to read. It's probably above par, but e.g. &lt;a href=&quot;https://github.com/gcc-mirror/gcc/blob/master/gcc/gimple-ssa-store-merging.c&quot; rel=&quot;nofollow&quot;&gt;https://github.com/gcc-mirror/gcc/blob/master/gcc/gimple-ssa...&lt;/a&gt; is really well explained imo.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038430&quot; readability=&quot;4.4230769230769&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2115384615385&quot;&gt;&lt;tr readability=&quot;4.4230769230769&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;LLVM is remarkable; the domain is both difficult and critical. Still, the code is consistent enough that I can often guess how things work based on what I think would be reasonable!&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038763&quot; readability=&quot;1.4623655913978&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042088&quot; readability=&quot;3.7432432432432&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.8716216216216&quot;&gt;&lt;tr readability=&quot;3.7432432432432&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.7432432432432&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.875&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;The coding standard for variables in LLVM drives me nuts. Both class names and variables names must be upper camel case so if you're lucky the code looks like this:&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Analyzer TheAnalyzer;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;but more commonly:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Analyzer A;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;with A being utterly unhelpful to read many lines later.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038995&quot; readability=&quot;1.008&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042875&quot; readability=&quot;5.6666666666667&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8333333333333&quot;&gt;&lt;tr readability=&quot;5.6666666666667&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.7222222222222&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8806366047745&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Redis. I have to say antirez not only is an amazing engineer but from the way the code is written, you can see he is a very clear thinker.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I hold Redis codebase as an example of what good C code should be. On the other hand opencv codebase as an example of what C could should not be. Opencv codebase is really inconsistent with quite a bit of unreadable spaghetti sauce.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041371&quot; readability=&quot;4.4769874476987&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2384937238494&quot;&gt;&lt;tr readability=&quot;4.4769874476987&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.581589958159&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.8387096774194&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;On the JavaScript side I've enjoyed reading the code for Backbone and Underscore, helped also by the awesome in-line documentation. Very easy to see what is going on.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Also big fan of Sidekiq for similar reasons.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038729&quot; readability=&quot;0.80851063829787&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038968&quot; readability=&quot;2.1611374407583&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039847&quot; readability=&quot;2.6290322580645&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.3145161290323&quot;&gt;&lt;tr readability=&quot;2.6290322580645&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Golang and Kubernetes have been highly regarded as high quality. I particularly found the Golang code for Kubernetes to be well documented and well architected.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037636&quot; readability=&quot;0.57971014492754&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038908&quot; readability=&quot;8.3434650455927&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.1717325227964&quot;&gt;&lt;tr readability=&quot;8.3434650455927&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;We try to keep up, but the truth is that it's a 15 years old C++ codebase implementing some weird hardware in even weirder ways. We're far from where we'd want to be code quality wise -- close to no automating testing infrastructure, code is full of module-level globals, inconsistent conventions, etc.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039739&quot; readability=&quot;4.4979079497908&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2489539748954&quot;&gt;&lt;tr readability=&quot;4.4979079497908&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.5983263598326&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.8394495412844&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;How would you even test an emulator except manually? It seems like automated website testing, but even worse. I guess screenshots + scripted input?&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;That seems like it'd be terrible to try to get running reliably.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038439&quot; readability=&quot;3.5046728971963&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038873&quot; readability=&quot;3.2056737588652&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6028368794326&quot;&gt;&lt;tr readability=&quot;3.2056737588652&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Knuth did a good job on TeX, and it has been closely examined for many years since so there are very few bugs.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039144&quot; readability=&quot;3.9285714285714&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039679&quot; readability=&quot;14.707070707071&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;7.3535353535354&quot;&gt;&lt;tr readability=&quot;14.707070707071&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;17.005050505051&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;33.473684210526&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Are you sure you aren't thinking of LaTeX?&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;TeX (plain TeX, not LaTeX) has phenomenally good logging and error messages IMO — everything you need is there, each error message comes in a “formal” and “informal” form and points you to exactly the place the error happened, and TeX lets you fix things on-the-fly without restarting the program. All this of course assumes you use TeX the way it is described in the manual (The TeXbook). The experience is opposite with LaTeX, so I find it worth giving up all the convenience of LaTeX just for the wonderful experience with TeX.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;As for “the TeX language”, there is no such thing. As Knuth has said many times, TeX is designed for typesetting, not programming. Sure it has macros to save some typing, but if you're writing elaborate programs in it (as is nearly inevitable if you're using LaTeX) you're doing something wrong. Knuth said:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; When I put in the calculation of prime numbers into the TeX manual I was not thinking of this as the way to use TeX. I was thinking, “Oh, by the way, look at this: dogs can stand on their hind legs and TeX can calculate prime numbers.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;But of course LaTeX does every such thing imaginable :-)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;More on TeX not being a programming language: &lt;a href=&quot;https://cstheory.stackexchange.com/a/40282/115&quot; rel=&quot;nofollow&quot;&gt;https://cstheory.stackexchange.com/a/40282/115&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;On the TeX error experience: &lt;a href=&quot;https://news.ycombinator.com/item?id=15734980&quot; rel=&quot;nofollow&quot;&gt;https://news.ycombinator.com/item?id=15734980&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040588&quot; readability=&quot;11.145867098865&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.5729335494327&quot;&gt;&lt;tr readability=&quot;11.145867098865&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;9.0024311183144&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;17.714285714286&quot;&gt;&lt;span class=&quot;commtext c73&quot;&gt;&lt;em&gt;Plain TeX&lt;/em&gt; is different to &lt;em&gt;TeX&lt;/em&gt;:&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c73&quot;&gt;...&quot;virgin&quot; TeX...knows just primitive commands, no macros. Plain TeX is the set of macros (developed by Knuth) which makes TeX usable in everyday life of a typist. ... The available commands can be classified into primitive commands and macros. ... The &quot;virgin&quot; TeX knows only the primitive commands. ... Formats (plain TeX, LaTeX, etc.) extend TeX's vocabulary by defining macros. ...For example, plain TeX defines macros \item, \rm, \newdimen, \loop, etc. Plain TeX defines about 600 macros.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c73&quot;&gt;&lt;a href=&quot;https://tex.stackexchange.com/questions/97520/what-is-plain-tex&quot; rel=&quot;nofollow&quot;&gt;https://tex.stackexchange.com/questions/97520/what-is-plain-...&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040771&quot; readability=&quot;9.2355889724311&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.6177944862155&quot;&gt;&lt;tr readability=&quot;9.2355889724311&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.4649122807018&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;12.234314980794&quot;&gt;&lt;span class=&quot;commtext c73&quot;&gt;Yes of course; see this answer I wrote about typesetting with “virgin” TeX: &lt;a href=&quot;https://tex.stackexchange.com/a/388360/48&quot; rel=&quot;nofollow&quot;&gt;https://tex.stackexchange.com/a/388360/48&lt;/a&gt; (it's not easy). “Virgin” TeX is never (and was never) used by typical users, and is used only by the system administrator (or these days, the people behind the TeX distributions) to pre-load formats (like plain or LaTeX).&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c73&quot;&gt;Knuth wrote both the TeX program and the “plain” set of macros; when you start `tex` it is with `plain` that it starts up, and &lt;em&gt;The TeXbook&lt;/em&gt; describes both the TeX program and the plain format without being careful to distinguish what comes from where (you have to look at Appendix B to see the proper definition of plain.tex), so when we speak of TeX as Knuth intended/imagined it to be used, it is plain TeX that is meant.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037795&quot; readability=&quot;1.6791044776119&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037689&quot; readability=&quot;1.25&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038398&quot; readability=&quot;4.3243243243243&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1621621621622&quot;&gt;&lt;tr readability=&quot;4.3243243243243&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;As a C beginner getting into writing larger projects, especially in that sort of context, the quake source has been my reference on how to structure my code.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038366&quot; readability=&quot;3.4450867052023&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7225433526012&quot;&gt;&lt;tr readability=&quot;3.4450867052023&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Oh, this +1. I ported it to another C dialect (test case for the compiler) and found those parts I touched well structured and easy to understand.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037768&quot; readability=&quot;5.2173913043478&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6086956521739&quot;&gt;&lt;tr readability=&quot;5.2173913043478&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.3478260869565&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.7239263803681&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I really liked the clojure core, I read it quite a lot when learning the language.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I have heard good things about sqlite, and some day, I plan to read it :-)&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037733&quot; readability=&quot;2.5341614906832&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2670807453416&quot;&gt;&lt;tr readability=&quot;2.5341614906832&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Python core libraries have great code. You can open pretty much any module and be able to understand the source without much context.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038663&quot; readability=&quot;3.2972972972973&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6486486486486&quot;&gt;&lt;tr readability=&quot;3.2972972972973&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I don't know how you can say this. The standard lib isn't even very pythonic, let alone &quot;great&quot; along other dimensions.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038981&quot; readability=&quot;6.520782396088&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.260391198044&quot;&gt;&lt;tr readability=&quot;6.520782396088&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.1234718826406&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.8697916666667&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Agreed. Almost every time I've looked deeply into stdlib code I was surprised by how hard to follow it is and how frequently antipatterns are employed. Doubly so for anything near a C module.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I consider the Python stdlib in a similar vein as the C++ stdlib or Boost: Yes, some useful bits in there, but (1) lots of rot (2) you don't want to have your code look anything like it.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037801&quot; readability=&quot;3.2957746478873&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6478873239437&quot;&gt;&lt;tr readability=&quot;3.2957746478873&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;The only core library code I needed to look at was namedtuple, which is pretty incomprehensible even with context.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038299&quot; readability=&quot;3.1724137931034&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037895&quot; readability=&quot;4.3366336633663&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039068&quot; readability=&quot;3.4424242424242&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7212121212121&quot;&gt;&lt;tr readability=&quot;3.4424242424242&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I agree with Flask, much more readable code than Django for example. I would also add Django Rest Framework (and Tom Christie) to the list.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039971&quot; readability=&quot;2.3739130434783&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039054&quot; readability=&quot;4.5627376425856&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2813688212928&quot;&gt;&lt;tr readability=&quot;4.5627376425856&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Agreed with the rest, I've ended up reading pypy's implementation of some functions sometimes to see how it works after trying CPython first. From the few I've read I'd say pypy looks nice by the way (I'm talking about standard library).&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038410&quot; readability=&quot;3.2564102564103&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6282051282051&quot;&gt;&lt;tr readability=&quot;3.2564102564103&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I was going to say the GNU version of /bin/false and /bin/true, but I actually took a look at the source and it is terrible.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038435&quot; readability=&quot;3.1963470319635&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038486&quot; readability=&quot;2.043956043956&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041821&quot; readability=&quot;4.1666666666667&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.0833333333333&quot;&gt;&lt;tr readability=&quot;4.1666666666667&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;The GNU coding style does not help with readability, in my opinion (he said, donning flame-proof underwear)&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037769&quot; readability=&quot;4.9390243902439&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.469512195122&quot;&gt;&lt;tr readability=&quot;4.9390243902439&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I’m no C expert so I’m somewhat guessing, to me, PostgreSQL source looks remarkably clean, well structured and nicely commented.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037738&quot; readability=&quot;1.4157303370787&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040395&quot; readability=&quot;26.371551724138&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;13.185775862069&quot;&gt;&lt;tr readability=&quot;26.371551724138&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;most people are talking about clean code, good design constructs, but i feel that many are missing the point, we’re talking about code quality here, design is the grit and grind that all developers go through to develop great software, certainly there are better designed software projects out there that leaves them more maintainable and prone to less bugs, but the fact of the matter is that for complicated code, designs go through many iterations and refactorings over time e.g. linux kernel, all software projects have bugs, even well designed or well tested software. but the significance of good testing and good processes are not being highlighted here, unit testing, code coverage, functional testing, end to end testing，scale testing, performance testing, code review, fault injection, debuggability, test automation, static code analysis, etc, i am shocked not to see lots of discussion on these things (aside from the sqlite mention) and testing techniques. probably a more developer friendly crowd here at hn, but testing is a significant and game changing part of what separates developers from great developers.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038918&quot; readability=&quot;3.4669811320755&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041226&quot; readability=&quot;6.4166666666667&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2083333333333&quot;&gt;&lt;tr readability=&quot;6.4166666666667&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;After spending about a month of concerted effort pouring through the zlib sources, looking for vulnerabilities, I can say that zlib is the most astonishingly bug-free code I've ever seen. But in the conventional understanding of &quot;code quality&quot;, it's pretty bad.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039099&quot; readability=&quot;2.4473684210526&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2236842105263&quot;&gt;&lt;tr readability=&quot;2.4473684210526&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;PostgreSQL and Quake3 are good candidates. Both are C codebases which are surprisingly readable even by relative novices.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042501&quot; readability=&quot;2.0483870967742&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038516&quot; readability=&quot;4.760147601476&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037704&quot; readability=&quot;0.31428571428571&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037715&quot; readability=&quot;0.3265306122449&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041048&quot; readability=&quot;2.2173913043478&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041090&quot; readability=&quot;0.67039106145251&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042329&quot; readability=&quot;5.3246753246753&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6623376623377&quot;&gt;&lt;tr readability=&quot;5.3246753246753&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I still think musl overall is quite readable, but my goodness, that switch statement in your second example. What a monster. I didn't think it was possible to be this confusing without the preprocessor.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041595&quot; readability=&quot;1.7454545454545&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037644&quot; readability=&quot;0.46153846153846&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038838&quot; readability=&quot;1.7394957983193&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038008&quot; readability=&quot;3.5368421052632&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7684210526316&quot;&gt;&lt;tr readability=&quot;3.5368421052632&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I'm suprised nobody cited TeX from Knuth. It's an absolute standard in quality of implementation, documentation and computer science background. Perhaps unsurpassed.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039490&quot; readability=&quot;6.4615384615385&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.2307692307692&quot;&gt;&lt;tr readability=&quot;6.4615384615385&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Actually, I think early versions (like from pre-1.0 through maybe 1.5 or so) of Docker had some very high quality code and was also very pleasing to look at. It was very clean and super approachable and readable, and I felt sort of like how the NetBSD commenter felt as described in their comment.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039583&quot; readability=&quot;3.325&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041492&quot; readability=&quot;2.0757575757576&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041639&quot; readability=&quot;2.3529411764706&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037745&quot; readability=&quot;0.66666666666667&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037846&quot; readability=&quot;2.6153846153846&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.3076923076923&quot;&gt;&lt;tr readability=&quot;2.6153846153846&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Definitely agree with this. Both the documentation and code are of excellent quality. Others that come to mind are sqlite and zeromq.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039450&quot; readability=&quot;2.5960264900662&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038019&quot; readability=&quot;4.531914893617&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2659574468085&quot;&gt;&lt;tr readability=&quot;4.531914893617&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.531914893617&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.7916666666667&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;my first experience with high quality code was with tge quake2 engine.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;i was both amazed by the simplicity of the architecture (a huge single event loop), and the attention to code presentation and indentation.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039982&quot; readability=&quot;3.3591160220994&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6795580110497&quot;&gt;&lt;tr readability=&quot;3.3591160220994&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Interesting to see so many John Carmack projects in this thread. He's a good candidate for &quot;best programmer of all time&quot;, if there were such a thing.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040456&quot; readability=&quot;4.9090909090909&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.4545454545455&quot;&gt;&lt;tr readability=&quot;4.9090909090909&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.5&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.7296416938111&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;As far as C++ code goes, the Lean Prover is really well maintained: &lt;a href=&quot;https://github.com/leanprover/lean&quot; rel=&quot;nofollow&quot;&gt;https://github.com/leanprover/lean&lt;/a&gt;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I'd also say GHC is quite good.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;And Pandoc as well.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I don't think I can compute enough variables to consider the &quot;highest&quot; though... so the aforementioned are only examples of what I think are good.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039962&quot; readability=&quot;0.75862068965517&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040205&quot; readability=&quot;9.3735498839907&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.6867749419954&quot;&gt;&lt;tr readability=&quot;9.3735498839907&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;linux kernel, purely the reasoning being that it’s probably one of the most used pieces of software out there, along those lines, probably the kernel libraries and user libraries like libstdc that are a part of it. i dont know how the linux kernel is tested, but i know that production testing of the kernel on different platforms, at large scale is probably the most used open source in the market.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037885&quot; readability=&quot;3.3741496598639&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.687074829932&quot;&gt;&lt;tr readability=&quot;3.3741496598639&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Twisted. Not only highly organized and sensibly delineated, but also a lot of fun to read - borderline comical at places.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039307&quot; readability=&quot;1.4130434782609&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041033&quot; readability=&quot;13.602580645161&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;6.8012903225806&quot;&gt;&lt;tr readability=&quot;13.602580645161&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;12.630967741935&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;24.834656084656&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;asyncio is more modern, more stylish, and more concrete.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Twisted is more timeless, more patterned, and more self-aware.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I can imagine Twisted's asyncio reactor becoming its default (and the Twisted flow control slowly declining in importance), but Twisted's protocols, control structures, and execution models becoming more popular.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Twisted has undergone a great resurgence in quality engineering since asyncio became more viable - this was surprising to me, but is actually probably reasonably consistent with the way the historical influence of the standard library.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Overall, I think that Twisted is a great project; I almost always reach for it when my python codebase becomes mature enough to need more thoughtful abstractions around network I/O.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038144&quot; readability=&quot;3.5858585858586&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039175&quot; readability=&quot;7.8799414348463&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.9399707174231&quot;&gt;&lt;tr readability=&quot;7.8799414348463&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.1288433382138&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.668674698795&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;In Dan Abramov's excellent egghead redux course [0] he implements the `createStore` from scratch which is the core of redux, it's simple enough to post here:&lt;/span&gt;
&lt;pre&gt;
&lt;span class=&quot;commtext c00&quot;&gt;&lt;code&gt;  const createStore = (reducer) =&amp;gt; {
    let state;
    let listeners = [];

    const getState = () =&amp;gt; state;

    const dispatch = (action) =&amp;gt; {
        state = reducer(state, action);
        listeners.map(listener =&amp;gt; listener());
    };

    const subscribe = (listener) =&amp;gt; {
        listeners.push(listener);
        // unsubscribe
        return () =&amp;gt; {
            listeners = listeners.filter(l =&amp;gt; l !== listener)
        };
    };

    // populate initial state
    dispatch({});

    return { getState, dispatch, subscribe };
  };

&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;span class=&quot;commtext c00&quot;&gt;[0]: &lt;a href=&quot;https://egghead.io/lessons/react-redux-implementing-store-from-scratch&quot; rel=&quot;nofollow&quot;&gt;https://egghead.io/lessons/react-redux-implementing-store-fr...&lt;/a&gt;&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038711&quot; readability=&quot;3.1645569620253&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037820&quot; readability=&quot;6.6219239373602&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037815&quot; readability=&quot;1.4457831325301&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037834&quot; readability=&quot;4.5728155339806&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037748&quot; readability=&quot;2.2941176470588&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040254&quot; readability=&quot;1.5670103092784&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042282&quot; readability=&quot;1.4157303370787&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038798&quot; readability=&quot;2.8867924528302&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040341&quot; readability=&quot;4.8082524271845&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039889&quot; readability=&quot;2.6368421052632&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.3184210526316&quot;&gt;&lt;tr readability=&quot;2.6368421052632&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;GTKmm. GTK uses GObject to implement inheritance between C structs and it's easy to go wrong when extending. GTKmm wraps GTK in C++. It's a joy to use and is safer.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039464&quot; readability=&quot;5.1269841269841&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039433&quot; readability=&quot;2.0927152317881&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040102&quot; readability=&quot;2.5034482758621&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.251724137931&quot;&gt;&lt;tr readability=&quot;2.5034482758621&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I am very lucky that there are too many great open source libraries out there to label one with the &quot;highest&quot; quality.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037695&quot; readability=&quot;1.2394366197183&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039305&quot; readability=&quot;1.3571428571429&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042535&quot; readability=&quot;5.5412844036697&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7706422018349&quot;&gt;&lt;tr readability=&quot;5.5412844036697&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Does 'Physically Based Rendering' count? It's a book... which is also source. It was written as only the 2nd work of true 'Literate Programming' that I know of. I believe Knuth wrote a book about TeX which was the first example. But basically it is prose interleaved with source, readable as a book.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039707&quot; readability=&quot;2.5827814569536&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2913907284768&quot;&gt;&lt;tr readability=&quot;2.5827814569536&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;The Linux kernel of course. In userland I have to say lib QT. I've used a lot of APIs and QT is always a pleasure to work with.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039967&quot; readability=&quot;5.444089456869&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7220447284345&quot;&gt;&lt;tr readability=&quot;5.444089456869&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.5367412140575&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.8432055749129&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I'm a Linux fanboy myself but come on - we're talking about nearly 30 years' worth of commits from thousands (tens of thousands?) of developers.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;The only thing I can say is that with this in mind it's actually a lot better than I'd expect - testament to Linus's iron fist, perhaps.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037710&quot; readability=&quot;2.5027932960894&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037763&quot; readability=&quot;1.8554913294798&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040880&quot; readability=&quot;1.5217391304348&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041345&quot; readability=&quot;1.3157894736842&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18041040&quot; readability=&quot;3.5443037974684&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039046&quot; readability=&quot;2.5337837837838&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2668918918919&quot;&gt;&lt;tr readability=&quot;2.5337837837838&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.8006756756757&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.6875&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Spring Framework&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;1. Elegant structure 2. Strict code style 3. Project size is not too large 4. Have detailed documentation&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038985&quot; readability=&quot;1.3125&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040963&quot; readability=&quot;1.3246753246753&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18042749&quot; readability=&quot;0.73684210526316&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18037667&quot; readability=&quot;2.3829787234043&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18040196&quot; readability=&quot;1.1884057971014&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18039444&quot; readability=&quot;1.2307692307692&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038311&quot; readability=&quot;1.4318181818182&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;18038786&quot; readability=&quot;2.4&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2&quot;&gt;&lt;tr readability=&quot;2.4&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Qt sources too (which has a lot of overlap in people and mindshare with KDE). Mostly.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;morespace&quot;&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Fri, 21 Sep 2018 06:42:31 +0000</pubDate>
<dc:creator>chefqual</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=18037613</dc:identifier>
</item>
<item>
<title>Coursera Machine Learning MOOC by Andrew Ng – Python Programming Assignments</title>
<link>https://github.com/dibgerge/ml-coursera-python-assignments</link>
<guid isPermaLink="true" >https://github.com/dibgerge/ml-coursera-python-assignments</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;

&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/dibgerge/ml-coursera-python-assignments/blob/master/machinelearning.jpg&quot;&gt;&lt;img src=&quot;https://github.com/dibgerge/ml-coursera-python-assignments/raw/master/machinelearning.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This repositry contains the python versions of the programming assignments for the &lt;a href=&quot;https://www.coursera.org/learn/machine-learning&quot; rel=&quot;nofollow&quot;&gt;Machine Learning online class&lt;/a&gt; taught by Professor Andrew Ng. This is perhaps the most popular introductory online machine learning class. In addition to being popular, it is also one of the best Machine learning classes any interested student can take to get started with machine learning. An unfortunate aspect of this class is that the programming assignments are in MATLAB or OCTAVE, probably because this class was made before python become the go-to language in machine learning.&lt;/p&gt;
&lt;p&gt;The Python machine learning ecosystem has grown exponentially in the past few years, and still gaining momentum. I suspect that many students who want to get started with their machine learning journey would like to start it with Python also. It is for those reasons I have decided to re-write all the programming assignments in Python, so students can get acquainted with its ecosystem from the start of their learning journey.&lt;/p&gt;
&lt;p&gt;These assignments work seamlessly with the class and do not require any of the materials published in the MATLAB assignments. Here are some new and useful features for these sets of assignments:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The assignments use &lt;a href=&quot;http://jupyter-notebook-beginner-guide.readthedocs.io/en/latest/what_is_jupyter.html&quot; rel=&quot;nofollow&quot;&gt;Jupyter Notebook&lt;/a&gt;, which provides an intuitive flow easier than the original MATLAB/OCTAVE assignments.&lt;/li&gt;
&lt;li&gt;The original assignment instructions have been completely re-written and the parts which used to reference MATLAB/OCTAVE functionality have been changed to reference its &lt;code&gt;python&lt;/code&gt; counterpart.&lt;/li&gt;
&lt;li&gt;The re-written instructions are now embedded within the Jupyter Notebook along with the &lt;code&gt;python&lt;/code&gt; starter code. For each assignment, all work is done solely within the notebook.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;python&lt;/code&gt; assignments can be submitted for grading. They were tested to work perfectly well with the original Coursera grader that is currently used to grade the MATLAB/OCTAVE versions of the assignments.&lt;/li&gt;
&lt;li&gt;After each part of a given assignment, the Jupyter Notebook contains a cell which prompts the user for submitting the current part of the assignment for grading.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Downloading the Assignments&lt;/h2&gt;
&lt;p&gt;To get started, you can start by either downloading a zip file of these assignments by clicking on the &lt;code&gt;Clone or download&lt;/code&gt; button. If you have &lt;code&gt;git&lt;/code&gt; installed on your system, you can clone this repository using :&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;clone https://github.com/dibgerge/ml-coursera-python-assignments.git
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Each assignment is contained in a separate folder. For example, assignment 1 is contained within the folder &lt;code&gt;Exercise1&lt;/code&gt;. Each folder contains two files:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The assignment &lt;code&gt;jupyter&lt;/code&gt; notebook, which has a &lt;code&gt;.ipynb&lt;/code&gt; extension. All the code which you need to write will be written within this notebook.&lt;/li&gt;
&lt;li&gt;A python module &lt;code&gt;utils.py&lt;/code&gt; which contains some helper functions needed for the assignment. Functions within the &lt;code&gt;utils&lt;/code&gt; module are called from the python notebook. You do not need to modify or add any code to this file.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;These assignments has been tested and developed using the following libraries:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;- python==3.6.4
- numpy==1.13.3
- scipy==1.0.0
- matplotlib==2.1.2
- jupyter==1.0.0
- jupyter-client==5.0.1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We recommend using at least these versions of the required libraries or later. Python 2 is not supported.&lt;/p&gt;
&lt;h2&gt;Python Installation&lt;/h2&gt;
&lt;p&gt;We highly recommend using anaconda for installing python. &lt;a href=&quot;https://www.anaconda.com/download/&quot; rel=&quot;nofollow&quot;&gt;Click here&lt;/a&gt; to go to Anaconda's download page. Make sure to download Python 3.6 version. If you are on a windows machine:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Open the executable after download is complete and follow instructions.&lt;/li&gt;
&lt;li&gt;Once installation is complete, open &lt;code&gt;Anaconda prompt&lt;/code&gt; from the start menu. This will open a terminal with python enabled.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you are on a linux machine:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;Open a terminal and navigate to the directory where Anaconda was downloaded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the permission to the downloaded file so that it can be executed. So if the downloaded file name is &lt;code&gt;Anaconda3-5.1.0-Linux-x86_64.sh&lt;/code&gt;, then use the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chmod a+x Anaconda3-5.1.0-Linux-x86_64.sh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, run the installation script using &lt;code&gt;./Anaconda3-5.1.0-Linux-x86_64.sh&lt;/code&gt;, and follow installation instructions in the terminal.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Once you have installed python, create a new python environment will all the requirements using the following command:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;conda create -n machine_learning python=3.6 scipy=1 numpy=1.13 matplotlib=2.1 jupyter
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After the new environment is setup, activate it using (windows)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;activate machine_learning
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;or if you are on a linux machine&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;source activate machine_learning 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now we have our python environment all set up, we can start working on the assignments. To do so, navigate to the directory where the assignments were installed, and launch the jupyter notebook from the terminal using the command&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;jupyter notebook
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This should automatically open a tab in the default browser. To start with assignment 1, open the notebook &lt;code&gt;./Exercise1/exercise1.ipynb&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Python Tutorials&lt;/h2&gt;
&lt;p&gt;If you are new to python and to &lt;code&gt;jupyter&lt;/code&gt; notebooks, no worries! There is a plethora of tutorials and documentation to get you started. Here are a few links which might be of help:&lt;/p&gt;
&lt;h2&gt;Caveats and tips&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;In many of the exercises, the regularization parameter $\lambda$ is denoted as the variable name &lt;code&gt;lambda_&lt;/code&gt;, notice the underscore at the end of the name. This is because &lt;code&gt;lambda&lt;/code&gt; is a reserved python keyword, and should never be used as a variable name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;code&gt;numpy&lt;/code&gt;, the function &lt;code&gt;dot&lt;/code&gt; is used to perform matrix multiplication. The operation '*' only does element-by-element multiplication (unlike MATLAB). If you are using python version 3.5+, the operator '@' is the new matrix multiplication, and it is equivalent to the &lt;code&gt;dot&lt;/code&gt; function.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;I would like to thank professor Andrew Ng and the crew of the Stanford Machine Learning class on Coursera for such an awesome class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some of the material used, especially the code for submitting assignments for grading is based on &lt;a href=&quot;https://github.com/mstampfer/Coursera-Stanford-ML-Python&quot;&gt;&lt;code&gt;mstampfer&lt;/code&gt;'s&lt;/a&gt; python implementation of the assignments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 20 Sep 2018 23:47:47 +0000</pubDate>
<dc:creator>sonabinu</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/13351778?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>dibgerge/ml-coursera-python-assignments</og:title>
<og:url>https://github.com/dibgerge/ml-coursera-python-assignments</og:url>
<og:description>Python assignments for the machine learning class by andrew ng on coursera with complete submission for grading capability and re-written instructions. - dibgerge/ml-coursera-python-assignments</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/dibgerge/ml-coursera-python-assignments</dc:identifier>
</item>
<item>
<title>Show HN: Hacking slot machines with a buttonhole camera and brute-force search</title>
<link>https://github.com/tensor8/hacking_slot_machines</link>
<guid isPermaLink="true" >https://github.com/tensor8/hacking_slot_machines</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;So it turns out that there's a game on a specific brand of UK trivia machine that's basically like an extreme version of Trivial Pursuit. It &lt;em&gt;also&lt;/em&gt; turns out that the answers can be found online. Enjoy!&lt;/p&gt;
&lt;p&gt;Here's the pipeline:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Capture image of slot machine screen with buttonhole camera to raspberry pi&lt;/li&gt;
&lt;li&gt;Process image to undo perspective shift and segment into question and answer boxes with OpenCV&lt;/li&gt;
&lt;li&gt;Pass processed question boxes to Google Tesseract for text recognition&lt;/li&gt;
&lt;li&gt;Run OCR text through a hand-designed brute-force search to get the most likely answer&lt;/li&gt;
&lt;li&gt;Pass answer through text-to-speech engine and into hidden earpiece&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Disclaimer: game legitimately aquired and not included for obvious reasons. This was a fun project on an old game that has been retired from machines.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;The game&lt;/h3&gt;
&lt;p&gt;The game asks you a series of general knowledge questions. It presents you with a choice of four answers, where one is correct. The more you get right, the more money you build up, until you win the jackpot.&lt;/p&gt;
&lt;h3&gt;Designing a brute force search&lt;/h3&gt;
&lt;p&gt;Now we have the data, the fun begins. We need to read the screen, match what we can see to a question in the data bank via a brute force search, and read out the corresponding correct answer.&lt;/p&gt;
&lt;p&gt;I initially tried to do this with the question data alone, ignoring the answers. Unfortunately, this doesn't work. Optical character recognition is imperfect, especially when running in real-time off a bad camera. About 30% of the characters will typically be misread. This means that the OCR-read question text is typically too garbled to identify which exact question it corresponds to; we can only narrow the search down to about 30 possible candidates.&lt;/p&gt;
&lt;p&gt;So, we need to use the information provided by the answers to help identify which question we are looking at. This makes the brute force search a little more tricky, but still possible.&lt;/p&gt;
&lt;p&gt;The two basic ingredients of this brute-force search will be (i) a way to compare two strings for similarity; and, using this, (ii) a metric to rank similarity between imperfectly observed question/answer pairs and true samples from the database.&lt;/p&gt;
&lt;p&gt;We use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Levenshtein_distance&quot; rel=&quot;nofollow&quot;&gt;Levenschtein distance&lt;/a&gt; to define the similarity between two strings, defined as the minimum number of edits needed to change one string into another. Since a longer string tends to accumulate more reading errors, we'll normalize the Levenschtein distance over its length.&lt;/p&gt;
&lt;p&gt;We form a confusion matrix of OCR answers against database answers. Taking the Frobenius inner product between this and every 4-D &lt;a href=&quot;https://en.wikipedia.org/wiki/Permutation_matrix&quot; rel=&quot;nofollow&quot;&gt;permutation matrix&lt;/a&gt; will give us the metric we need. We can brute-force search over this to find the correct answer. The intuition behind this algorithm is that we're taking the dot product between the observed confusion matrix (which is noisy due to poor observability), and idealized confusion matrices (assuming perfect observability). The idealized confusion matrices take the form of permutation matrices because the four answers can appear in any permutation.&lt;/p&gt;
&lt;p&gt;The code to carry out the brute force search can be found in &lt;code&gt;/src/&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Hardware&lt;/h3&gt;
&lt;p&gt;I bought a &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-2-model-b/&quot; rel=&quot;nofollow&quot;&gt;raspberry pi 2&lt;/a&gt; to run the software, and used a TTS engine (Google Tesseract) to read out the answer into an earpiece.&lt;/p&gt;
&lt;p&gt;I actually couldn't get the code to run fast enough on the raspberry pi to be useful (a single pass took about 30s). The bottleneck was opencv and tesseract (the only bits I couldn't optimize), so I ended up having to pipe the image over wifi to be processed by a laptop in a backpack. The code running on the rpi can be found in &lt;code&gt;./pi_interface.py&lt;/code&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 20 Sep 2018 20:41:15 +0000</pubDate>
<dc:creator>jamesough</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/29287994?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>tensor8/hacking_slot_machines</og:title>
<og:url>https://github.com/tensor8/hacking_slot_machines</og:url>
<og:description>A bit of fun with an old machine. Top of HN for 12 hours straight! - tensor8/hacking_slot_machines</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/tensor8/hacking_slot_machines</dc:identifier>
</item>
<item>
<title>People Like You More Than You Know</title>
<link>https://blogs.scientificamerican.com/illusion-chasers/people-like-you-more-than-you-know/</link>
<guid isPermaLink="true" >https://blogs.scientificamerican.com/illusion-chasers/people-like-you-more-than-you-know/</guid>
<description>&lt;div class=&quot;mura-region mura-region-loose&quot;&gt;
&lt;div class=&quot;mura-region-local&quot;&gt;
&lt;p&gt;&lt;span&gt;As a young child, I was painfully shy. I’d watch other children at play in the park, wishing I could join their ranks for a game of tag, hide-and-seek, or jump rope, but too scared to approach them. Eventually, my mother would come to the rescue. She’d get up from the bench where she was sitting with the other moms, take my hand, and ask the other kids if I could play too. The answer was always yes (I’m sure the other children didn’t want to get in trouble with their own moms), and then I’d be all set for the rest of the afternoon… until the pattern repeated itself the next day. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I became less awkward and more outgoing as I grew up, thankfully—though I never turned into what you’d call a social butterfly. Today, I feel comfortable giving public lectures in large auditoriums, and having conversations in small groups, but I still tend to dodge situations in which I’m expected to ‘mingle’ with a roomful of strangers (I’m working on it).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The reasons for my aversion could be manifold. For one, I might be carrying some residual childhood fear of rejection. But beyond that possibility, one likely element is that I tend to underestimate how much people like me after I meet them. As most of us do.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;A new research paper, published last week in &lt;em&gt;&lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pubmed/30183512&quot;&gt;Psychological Science&lt;/a&gt;&lt;/em&gt;, reports that the common concern that new people may not like us, or that they may not enjoy our company, is largely unfounded.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Erica Boothby of Cornell University, and her colleagues Gus Cooney, Gilliam Sandstrom, and Margaret Clark, of Harvard University, University if Essex, and Yale University, conducted a series of studies to find out what our conversation partners really think of us. In doing so, they discovered a new cognitive illusion they call “the liking gap:” our failure to realize how much strangers appreciate our company after a bit of conversation.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The researchers observed the disconnect in a variety of situations: strangers getting acquainted in the research laboratory, first-year college students getting to know their dorm mates over the course of many months, and community members meeting fellow participants in personal development workshops. In each scenario, people consistently underestimated how much others liked them.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The discrepancy in perspectives happened for conversations that spanned from 2 minutes to 45 minutes, and was long-lasting. For much of the academic year, as dorm mates got to know each other and even started to develop enduring friendships, the liking gap persisted. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;The data also revealed some of the potential reasons for the divide: we are often harsher with ourselves than with others, and our inner critic prevents us from appreciating how positively other people evaluate us. Not knowing what our conversation partners really think of us, we use our own thoughts as a proxy—a mistake, because our thoughts tend to be more negative than reality.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;As the paper’s authors state, “conversations are a great source of happiness in our lives,” but they could bring us even greater joy if we only realized that “others like us more than we know.” Which is a good thing to keep in mind as you survey the imposing room of strangers at your next cocktail party, mix and mingle reception, or company happy hour. I know I’ll try to.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 20 Sep 2018 19:34:06 +0000</pubDate>
<dc:creator>ALee</dc:creator>
<og:type>article</og:type>
<og:title>People Like You More Than You Know</og:title>
<og:description>All it takes is a little conversation</og:description>
<og:image>https://static.scientificamerican.com/blogs/cache/file/82F2F04D-3BD3-4EAA-8E57B06B567B2EA8.png</og:image>
<og:url>https://blogs.scientificamerican.com/illusion-chasers/people-like-you-more-than-you-know/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blogs.scientificamerican.com/illusion-chasers/people-like-you-more-than-you-know/</dc:identifier>
</item>
<item>
<title>Titans of Mathematics Clash Over Epic Proof of ABC Conjecture</title>
<link>https://www.quantamagazine.org/titans-of-mathematics-clash-over-epic-proof-of-abc-conjecture-20180920/</link>
<guid isPermaLink="true" >https://www.quantamagazine.org/titans-of-mathematics-clash-over-epic-proof-of-abc-conjecture-20180920/</guid>
<description>&lt;p&gt;In a report &lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/~motizuki/SS2018-08.pdf&quot;&gt;posted online today&lt;/a&gt;, &lt;a href=&quot;http://www.math.uni-bonn.de/people/scholze/&quot;&gt;Peter Scholze&lt;/a&gt; of the University of Bonn and &lt;a href=&quot;https://www.math.uni-frankfurt.de/~stix/&quot;&gt;Jakob Stix&lt;/a&gt; of Goethe University Frankfurt describe what Stix calls a “serious, unfixable gap” within a &lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/~motizuki/Inter-universal%20Teichmuller%20Theory%20I.pdf&quot;&gt;mammoth&lt;/a&gt; &lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/~motizuki/Inter-universal%20Teichmuller%20Theory%20II.pdf&quot;&gt;series&lt;/a&gt; &lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/~motizuki/Inter-universal%20Teichmuller%20Theory%20III.pdf&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/~motizuki/Inter-universal%20Teichmuller%20Theory%20IV.pdf&quot;&gt;papers&lt;/a&gt; by &lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/~motizuki/top-english.html&quot;&gt;Shinichi Mochizuki&lt;/a&gt;, a mathematician at Kyoto University who is renowned for his brilliance. Posted online in 2012, Mochizuki’s papers supposedly prove the &lt;em&gt;abc&lt;/em&gt; conjecture, one of the most far-reaching problems in number theory.&lt;/p&gt;
&lt;p&gt;Despite multiple &lt;a href=&quot;https://www.quantamagazine.org/hope-rekindled-for-abc-proof-20151221/&quot;&gt;conferences dedicated to explicating Mochizuki’s proof&lt;/a&gt;, number theorists have struggled to come to grips with its underlying ideas. His series of papers, which total more than 500 pages, are written in an impenetrable style, and refer back to a further 500 pages or so of previous work by Mochizuki, creating what one mathematician, &lt;a href=&quot;http://math.stanford.edu/~conrad/&quot;&gt;Brian Conrad&lt;/a&gt; of Stanford University, &lt;a href=&quot;https://mathbabe.org/2015/12/15/notes-on-the-oxford-iut-workshop-by-brian-conrad/&quot;&gt;has called&lt;/a&gt; “a sense of infinite regress.”&lt;/p&gt;
&lt;p&gt;Between 12 and 18 mathematicians who have studied the proof in depth believe it is correct, wrote &lt;a href=&quot;https://www.maths.nottingham.ac.uk/personal/ibf/&quot;&gt;Ivan Fesenko&lt;/a&gt; of the University of Nottingham in an email. But only mathematicians in “Mochizuki’s orbit” have vouched for the proof’s correctness, Conrad &lt;a href=&quot;http://www.math.columbia.edu/~woit/wordpress/?p=9871&amp;amp;cpage=1#comments&quot;&gt;commented&lt;/a&gt; in a blog discussion last December. “There is nobody else out there who has been willing to say even off the record that they are confident the proof is complete.”&lt;/p&gt;
&lt;p&gt;Nevertheless, wrote &lt;a href=&quot;http://math.uchicago.edu/~fcale/research.html&quot;&gt;Frank Calegari&lt;/a&gt; of the University of Chicago in a December &lt;a href=&quot;https://galoisrepresentations.wordpress.com/2017/12/17/the-abc-conjecture-has-still-not-been-proved/&quot;&gt;blog post&lt;/a&gt;, “mathematicians are very loath to claim that there is a problem with Mochizuki’s argument because they can’t point to any definitive error.”&lt;/p&gt;
&lt;p&gt;That has now changed. In their report, Scholze and Stix argue that a line of reasoning near the end of the proof of “Corollary 3.12” in Mochizuki’s third of four papers is fundamentally flawed. The corollary is central to Mochizuki’s proposed &lt;em&gt;abc&lt;/em&gt; proof.&lt;/p&gt;
&lt;p&gt;“I think the &lt;em&gt;abc&lt;/em&gt; conjecture is still open,” Scholze said. “Anybody has a chance of proving it.”&lt;/p&gt;

Scholze and Stix’s conclusions are based not only on their own study of the papers but also on a weeklong visit they paid to Mochizuki and his colleague &lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/~yuichiro/index_e.html&quot;&gt;Yuichiro Hoshi&lt;/a&gt; in March at Kyoto University to discuss the proof. That visit helped enormously, Scholze said, in distilling his and Stix’s objections down to their essence. The pair “came to the conclusion that there is no proof,” they wrote in their report.
&lt;p&gt;But the meeting led to an oddly unsatisfying conclusion: Mochizuki couldn’t convince Scholze and Stix that his argument was sound, but they couldn’t convince him that it was unsound. Mochizuki has now posted Scholze’s and Stix’s report on his website, along with &lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/~motizuki/IUTch-discussions-2018-03.html&quot;&gt;several reports of his own in rebuttal&lt;/a&gt;. (Mochizuki and Hoshi did not respond to requests for comments for this article.)&lt;/p&gt;
&lt;p&gt;In his rebuttal, Mochizuki attributes Scholze and Stix’s criticism to “certain fundamental misunderstandings” about his work. Their “negative position,” he wrote, “does not imply the existence of any flaws whatsoever” in his theory.&lt;/p&gt;
&lt;p&gt;Just as Mochizuki’s high reputation made mathematicians view his work as a serious attempt on the &lt;em&gt;abc&lt;/em&gt; conjecture, Scholze and Stix’s stature guarantees that mathematicians will pay attention to what they have to say. Though only 30, Scholze has risen quickly to the top of his field. He was &lt;a href=&quot;https://www.quantamagazine.org/peter-scholze-becomes-one-of-the-youngest-fields-medalists-ever-20180801/&quot;&gt;awarded the Fields Medal&lt;/a&gt;, mathematics’ highest honor, in August. Stix, meanwhile, is an expert in Mochizuki’s particular area of research, a field known as anabelian geometry.&lt;/p&gt;
&lt;p&gt;“Peter and Jakob are extremely careful and thoughtful mathematicians,” Conrad said. “Any concerns that they have … definitely merit being cleared up.”&lt;/p&gt;
&lt;h2&gt;The Sticking Point&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;abc&lt;/em&gt; conjecture, which Conrad &lt;a href=&quot;https://mathbabe.org/2015/12/15/notes-on-the-oxford-iut-workshop-by-brian-conrad/&quot;&gt;has called&lt;/a&gt; “one of the outstanding conjectures in number theory,” starts with one of the simplest equations imaginable: &lt;em&gt;a&lt;/em&gt; + &lt;em&gt;b&lt;/em&gt; = &lt;em&gt;c&lt;/em&gt;. The three numbers &lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt; and &lt;em&gt;c&lt;/em&gt; are supposed to be positive integers, and they are not allowed to share any common prime factors — so, for example, we could consider the equation 8 + 9 = 17, or 5 + 16 = 21, but not 6 + 9 = 15, since 6, 9 and 15 are all divisible by 3.&lt;/p&gt;
&lt;p&gt;Given such an equation, we can look at all the primes that divide any of the three numbers — so, for instance, for the equation 5 + 16 = 21, our primes are 5, 2, 3 and 7. Multiplying these together produces 210, a much larger number than any of the numbers in the original equation. By contrast, for the equation 5 + 27 = 32, whose primes are 5, 3 and 2, the prime product is 30 — a smaller number than the 32 in the original equation. The product comes out so small because 27 and 32 have only small prime factors (3 and 2, respectively) that get repeated many times to make them.&lt;/p&gt;
&lt;p&gt;If you start playing around with other &lt;em&gt;abc&lt;/em&gt; triples, you’ll find that this second scenario is extremely rare. For example, among the 3,044 different triples you can make in which &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are between 1 and 100, there are only seven in which the product of primes is smaller than &lt;em&gt;c&lt;/em&gt;. The &lt;em&gt;abc&lt;/em&gt; conjecture, which was first formulated in the 1980s, codifies the intuition that this kind of triple hardly ever happens.&lt;/p&gt;
&lt;p&gt;More specifically, coming back to the 5 + 27 = 32 example, 32 is larger than 30, but only by a little. It’s smaller than 30&lt;sup&gt;2&lt;/sup&gt;, or 30&lt;sup&gt;1.5&lt;/sup&gt;, or even 30&lt;sup&gt;1.02&lt;/sup&gt;, which is about 32.11. The &lt;em&gt;abc&lt;/em&gt; conjecture says that if you pick any exponent bigger than 1, then there are only finitely many &lt;em&gt;abc&lt;/em&gt; triples in which &lt;em&gt;c&lt;/em&gt; is larger than the product of the prime factors raised to your chosen exponent.&lt;/p&gt;
&lt;p&gt;“The &lt;em&gt;abc&lt;/em&gt; conjecture is a very elementary statement about multiplication and addition,” said &lt;a href=&quot;http://people.maths.ox.ac.uk/kimm/&quot;&gt;Minhyong Kim&lt;/a&gt; of the University of Oxford. It’s the kind of statement, he said, where “you feel like you’re revealing some kind of very fundamental structure about number systems in general that you hadn’t seen before.”&lt;/p&gt;
&lt;p&gt;And the simplicity of the &lt;em&gt;a&lt;/em&gt; + &lt;em&gt;b&lt;/em&gt; = &lt;em&gt;c&lt;/em&gt; equation means that a wide range of other problems fall under the conjecture’s sway. For instance, Fermat’s Last Theorem is about equations of the form &lt;em&gt;x&lt;sup&gt;n&lt;/sup&gt;&lt;/em&gt; + &lt;em&gt;y&lt;sup&gt;n&lt;/sup&gt;&lt;/em&gt; = &lt;em&gt;z&lt;sup&gt;n&lt;/sup&gt;&lt;/em&gt;, and Catalan’s Conjecture, which says that 8 and 9 are the only two consecutive perfect powers (since 8 = 2&lt;sup&gt;3&lt;/sup&gt; and 9 = 3&lt;sup&gt;2&lt;/sup&gt;), is about the equation &lt;em&gt;x&lt;sup&gt;m&lt;/sup&gt;&lt;/em&gt; + 1 = &lt;em&gt;y&lt;sup&gt;n&lt;/sup&gt;&lt;/em&gt;. The &lt;em&gt;abc&lt;/em&gt; conjecture (in certain forms) would offer new proofs of these two theorems and solve a host of related open problems.&lt;/p&gt;

The conjecture “always seems to lie on the boundary of what is known and what is unknown,” &lt;a href=&quot;http://www.math.columbia.edu/~goldfeld/index.html&quot;&gt;Dorian Goldfeld&lt;/a&gt; of Columbia University &lt;a href=&quot;https://pdfs.semanticscholar.org/e10f/abaf419e185b1e2029e54783c110a86a5737.pdf&quot;&gt;has written&lt;/a&gt;.
&lt;p&gt;The wealth of consequences that would spring from a proof of the &lt;em&gt;abc&lt;/em&gt; conjecture had convinced number theorists that proving the conjecture was likely to be very hard. So when word spread in 2012 that Mochizuki had presented a proof, many number theorists dived enthusiastically into his work — only to be stymied by the unfamiliar language and unusual presentation. Definitions went on for pages, followed by theorems whose statements were similarly long, but whose proofs only said, essentially, “this follows immediately from the definitions.”&lt;/p&gt;
&lt;p&gt;“Each time I hear of an analysis of Mochizuki’s papers by an expert (off the record) the report is disturbingly familiar: vast fields of trivialities followed by an enormous cliff of unjustified conclusions,” Calegari &lt;a href=&quot;https://galoisrepresentations.wordpress.com/2017/12/17/the-abc-conjecture-has-still-not-been-proved/&quot;&gt;wrote&lt;/a&gt; in his December blog post.&lt;/p&gt;
&lt;p&gt;Scholze was one of the paper’s early readers. Known for his ability to absorb mathematics quickly and deeply, he got further than many number theorists, completing what he called a “rough reading” of the four main papers shortly after they came out. Scholze was bemused by the long theorems with their short proofs, which struck him as valid but insubstantial. In the two middle papers, he &lt;a href=&quot;https://galoisrepresentations.wordpress.com/2017/12/17/the-abc-conjecture-has-still-not-been-proved/&quot;&gt;later wrote&lt;/a&gt;, “very little seems to happen.”&lt;/p&gt;
&lt;p&gt;Then Scholze got to Corollary 3.12 in the third paper. Mathematicians usually use the word “corollary” to denote a theorem that is a secondary consequence of a previous, more important theorem. But in the case of Mochizuki’s Corollary 3.12, mathematicians agree that it is at the core of the proof of &lt;em&gt;abc&lt;/em&gt;. Without it, “there is no proof at all,” Calegari &lt;a href=&quot;https://galoisrepresentations.wordpress.com/2017/12/17/the-abc-conjecture-has-still-not-been-proved/&quot;&gt;wrote&lt;/a&gt;. “It is a critical step.”&lt;/p&gt;

This corollary is the only theorem in the two middle papers whose proof is longer than a few lines — it fills nine pages. As Scholze read through them, he reached a point where he couldn’t follow the logic at all.
&lt;p&gt;Scholze, who was only 24 at the time, believed the proof was flawed. But he mostly stayed out of discussions about the papers, except when asked directly for his thoughts. After all, he thought, perhaps other mathematicians would find significant ideas in the paper that he had missed. Or, perhaps, they would eventually come to the same conclusion as he had. One way or the other, he thought, the mathematics community would surely be able to sort things out.&lt;/p&gt;
&lt;h2&gt;Escher’s Staircase&lt;/h2&gt;
&lt;p&gt;Meanwhile, other mathematicians were grappling with the densely written papers. Many had high hopes for a &lt;a href=&quot;https://www.quantamagazine.org/hope-rekindled-for-abc-proof-20151221/&quot;&gt;meeting dedicated to Mochizuki’s work&lt;/a&gt; in late 2015 at the University of Oxford. But as several of Mochizuki’s close associates tried to describe the key ideas of the proof, a “cloud of fog” seemed to descend over the listeners, Conrad wrote in a &lt;a href=&quot;https://mathbabe.org/2015/12/15/notes-on-the-oxford-iut-workshop-by-brian-conrad/&quot;&gt;report&lt;/a&gt; shortly after the meeting. “Those who understand the work need to be more successful at communicating to arithmetic geometers what makes it tick,” he wrote.&lt;/p&gt;
&lt;p&gt;Within days of Conrad’s post, he received unsolicited emails from three different mathematicians (one of them Scholze), all with the same story: They had been able to read and understand the papers until they hit a particular part. “For each of these people, the proof that had stumped them was for 3.12,” Conrad &lt;a href=&quot;https://galoisrepresentations.wordpress.com/2017/12/17/the-abc-conjecture-has-still-not-been-proved/&quot;&gt;later wrote&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Kim heard similar concerns about Corollary 3.12 from another mathematician, &lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/en/list/koshikawa.html&quot;&gt;Teruhisa Koshikawa&lt;/a&gt;, currently at Kyoto University. And Stix, too, got perplexed in the same spot. Gradually, various number theorists became aware that this corollary was a sticking point, but it wasn’t clear whether the argument had a hole or Mochizuki simply needed to explain his reasoning better.&lt;/p&gt;
&lt;p&gt;Then in late 2017 a rumor spread, to the consternation of many number theorists, that Mochizuki’s papers had been accepted for publication. Mochizuki himself was the editor-in-chief of the journal in question, &lt;em&gt;&lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/~prims/index.html&quot;&gt;Publications of the Research Institute for Mathematical Sciences&lt;/a&gt;&lt;/em&gt;, an arrangement that Calegari called “&lt;a href=&quot;https://galoisrepresentations.wordpress.com/2017/12/17/the-abc-conjecture-has-still-not-been-proved/&quot;&gt;poor optics&lt;/a&gt;” (though editors generally recuse themselves in such situations). But much more concerning to many number theorists was the fact that the papers were still, as far as they were concerned, unreadable.&lt;/p&gt;

“No expert who claims to understand the arguments has succeeded in explaining them to any of the (very many) experts who remain mystified,” &lt;a href=&quot;http://www.math.uchicago.edu/~emerton/&quot;&gt;Matthew Emerton&lt;/a&gt; of the University of Chicago &lt;a href=&quot;http://www.math.columbia.edu/~woit/wordpress/?p=9871&amp;amp;cpage=1#comments&quot;&gt;wrote&lt;/a&gt;.
&lt;p&gt;Calegari wrote a &lt;a href=&quot;https://galoisrepresentations.wordpress.com/2017/12/17/the-abc-conjecture-has-still-not-been-proved/&quot;&gt;blog post&lt;/a&gt; decrying the situation as “a complete disaster,” to a chorus of amens from prominent number theorists. “We do now have the ridiculous situation where ABC is a theorem in Kyoto but a conjecture everywhere else,” Calegari wrote.&lt;/p&gt;
&lt;p&gt;PRIMS soon responded to press inquiries with a statement that the papers had not, in fact, been accepted. Before they had done so, however, Scholze resolved to state publicly what he had been saying privately to number theorists for some time. The whole discussion surrounding the proof had gotten “too sociological,” he decided. “Everybody was talking just about how this feels like it isn’t a proof, but nobody was actually saying, ‘Actually there is this point where nobody understands the proof.’”&lt;/p&gt;
&lt;p&gt;So in the comments section below Calegari’s blog post, Scholze wrote that he was “entirely unable to follow the logic after Figure 3.8 in the proof of Corollary 3.12.” He added that mathematicians “who do claim to understand the proof are unwilling to acknowledge that more must be said there.”&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://kuias.kyoto-u.ac.jp/e/profile/mori/&quot;&gt;Shigefumi Mori&lt;/a&gt;, Mochizuki’s colleague at Kyoto University and a winner of the Fields Medal, wrote to Scholze offering to facilitate a meeting between him and Mochizuki. Scholze in turn reached out to Stix, and in March the pair traveled to Kyoto to discuss the sticky proof with Mochizuki and Hoshi.&lt;/p&gt;
&lt;p&gt;Mochizuki’s approach to the &lt;em&gt;abc&lt;/em&gt; conjecture translates the problem into a question about &lt;a href=&quot;https://www.quantamagazine.org/tag/elliptic-curves/&quot;&gt;elliptic curves&lt;/a&gt;, a special type of cubic equation in two variables, &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;. The translation, which was well known before Mochizuki’s work, is simple — you associate each &lt;em&gt;abc&lt;/em&gt; equation with the elliptic curve whose graph crosses the &lt;em&gt;x&lt;/em&gt;-axis at &lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt; and the origin — but it allows mathematicians to exploit the rich structure of elliptic curves, which connect number theory to geometry, calculus and other subjects. (This same translation is at the heart of &lt;a href=&quot;http://www.jstor.org/stable/2118559?origin=crossref&amp;amp;seq=1#page_scan_tab_contents&quot;&gt;Andrew Wiles’ 1994 proof&lt;/a&gt; of Fermat’s Last Theorem.)&lt;/p&gt;

The &lt;em&gt;abc&lt;/em&gt; conjecture then boils down to proving a certain inequality between two quantities associated with the elliptic curve. Mochizuki’s work translates this inequality into yet another form, which, Stix said, can be thought of as comparing the volumes of two sets. Corollary 3.12 is where Mochizuki presents his proof of this new inequality, which, if true, would prove the &lt;em&gt;abc&lt;/em&gt; conjecture.
&lt;p&gt;The proof, as Scholze and Stix describe it, involves viewing the volumes of the two sets as living inside two different copies of the real numbers, which are then represented as part of a circle of six different copies of the real numbers, together with mappings that explain how each copy relates to its neighbors along the circle. To keep track of how the volumes of sets relate to one another, it’s necessary to understand how volume measurements in one copy relate to measurements in the other copies, Stix said.&lt;/p&gt;
&lt;p&gt;“If you have an inequality of two things but the measuring stick is sort of shrunk by a factor which you don’t control, then you lose control over what the inequality actually means,” Stix said.&lt;/p&gt;
&lt;p&gt;It is at this crucial spot in the argument that things go wrong, Scholze and Stix believe. In Mochizuki’s mappings, the measuring sticks are locally compatible with one another. But when you go around the circle, Stix said, you end up with a measuring stick that looks different from if you had gone around the other way. The situation, he said, is akin to Escher’s famous winding staircase, which climbs and climbs only to somehow end up below where it started.&lt;/p&gt;
&lt;p&gt;This incompatibility in the volume measurements means that the resulting inequality is between the wrong quantities, Scholze and Stix assert. And if you adjust things so the volume measurements are globally compatible, then the inequality becomes meaningless, they say.&lt;/p&gt;
&lt;p&gt;Scholze and Stix have “identified a way that the argument can’t possibly work,” said &lt;a href=&quot;https://math.ucsd.edu/~kedlaya/&quot;&gt;Kiran Kedlaya&lt;/a&gt;, a mathematician at the University of California, San Diego, who has studied Mochizuki’s papers in depth. “So if the argument is to be correct, it has to do something different, and something a lot more subtle” than what Scholze and Stix describe.&lt;/p&gt;
&lt;p&gt;Something more subtle is exactly what the proof does, Mochizuki contends. Scholze and Stix err, he wrote, in making arbitrary identifications between mathematical objects that should be regarded as distinct. When he told colleagues the nature of Scholze and Stix’s objections, he wrote, his descriptions “were met with a remarkably unanimous response of utter astonishment and even disbelief (at times accompanied by bouts of laughter!) that such manifestly erroneous misunderstandings could have occurred.”&lt;/p&gt;
&lt;p&gt;Mathematicians will now have to absorb Scholze and Stix’s argument and Mochizuki’s response. But Scholze hopes that, in contrast with the situation for Mochizuki’s original series of papers, this should not be a protracted process, since the gist of his and Stix’s objection is not highly technical. Other number theorists “would have totally been able to follow the discussions that we had had this week with Mochizuki,” he said.&lt;/p&gt;

Mochizuki sees things very differently. In his view, Scholze and Stix’s criticism stems from a “lack of sufficient time to reflect deeply on the mathematics under discussion,” perhaps coupled with “a deep sense of discomfort, or unfamiliarity, with new ways of thinking about familiar mathematical objects.”
&lt;p&gt;Mathematicians who are already skeptical of Mochizuki’s &lt;em&gt;abc&lt;/em&gt; proof may well consider Scholze and Stix’s report the end of the story, said Kim. Others will want to study the new reports for themselves, an activity that Kim himself has commenced. “I don’t think I can completely avoid the need to check more carefully for myself before making up my mind,” he wrote in an email.&lt;/p&gt;
&lt;p&gt;In the past couple of years, many number theorists have given up on trying to understand Mochizuki’s papers. But if Mochizuki or his followers can provide a thorough and coherent explanation for why Scholze and Stix’s picture is too simplistic (assuming that it is), “this might go a long way towards relieving some of the fatigue and maybe giving people more willingness to look into this thing again,” Kedlaya said.&lt;/p&gt;
&lt;p&gt;In the meantime, Scholze said, “I think this should not be considered a proof until Mochizuki does some very substantial revisions and explains this key step much better.” Personally, he said, “I didn’t really see a key idea that would get us closer to the proof of the &lt;em&gt;abc&lt;/em&gt; conjecture.”&lt;/p&gt;
&lt;p&gt;Regardless of the eventual outcome of this discussion, the pinpointing of such a specific part of Mochizuki’s argument should lead to greater clarity, Kim said. “What Jakob and Peter have done is an important service to the community,” he said. “Whatever happens, I’m pretty confident that the reports will be progress of a definite sort.”&lt;/p&gt;
</description>
<pubDate>Thu, 20 Sep 2018 19:00:58 +0000</pubDate>
<dc:creator>digital55</dc:creator>
<og:title>Titans of Mathematics Clash Over Epic Proof of ABC Conjecture | Quanta Magazine</og:title>
<og:type>article</og:type>
<og:url>https://www.quantamagazine.org/titans-of-mathematics-clash-over-epic-proof-of-abc-conjecture-20180920/</og:url>
<og:image>https://d2r55xnwy6nx47.cloudfront.net/uploads/2018/08/ABC_Conjecture_1200_Social.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.quantamagazine.org/titans-of-mathematics-clash-over-epic-proof-of-abc-conjecture-20180920/</dc:identifier>
</item>
<item>
<title>Introducing the Librem Key</title>
<link>https://puri.sm/posts/introducing-the-librem-key/</link>
<guid isPermaLink="true" >https://puri.sm/posts/introducing-the-librem-key/</guid>
<description>&lt;div class=&quot;abh_box abh_box_up abh_box_business&quot;&gt;
&lt;div class=&quot;abh_tab_content&quot;&gt;
&lt;section class=&quot;vcard abh_about_tab abh_tab&quot;&gt;&lt;div class=&quot;abh_image&quot;&gt;&lt;a href=&quot;https://puri.sm/posts/author/kyle-rankin/&quot; class=&quot;url&quot; title=&quot;Kyle Rankin&quot;&gt;&lt;img src=&quot;https://puri.sm/wp-content/uploads/gravatar/kyle%20rankin%20posts.jpg&quot; class=&quot;photo&quot; width=&quot;80&quot; alt=&quot;Kyle Rankin&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;div class=&quot;abh_text&quot;&gt;
&lt;h3 class=&quot;fn name&quot;&gt;&lt;a href=&quot;https://puri.sm/posts/author/kyle-rankin/&quot; class=&quot;url&quot;&gt;Kyle Rankin&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;description note abh_description&quot;&gt;Chief Security Officer&lt;br/&gt;PGP ID: 0xBD83B92B2F4BFD99&lt;br/&gt;Fingerprint: 7B85 0961 8D82 0DF6 39241BB6 BD83 B92B 2F4B FD99&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section class=&quot;abh_posts_tab abh_tab&quot;&gt;&lt;div class=&quot;abh_image&quot;&gt;&lt;a href=&quot;https://puri.sm/posts/author/kyle-rankin/&quot; class=&quot;url&quot; title=&quot;Kyle Rankin&quot;&gt;&lt;img src=&quot;https://puri.sm/wp-content/uploads/gravatar/kyle%20rankin%20posts.jpg&quot; class=&quot;photo&quot; width=&quot;80&quot; alt=&quot;Kyle Rankin&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;div class=&quot;abh_text&quot;&gt;
&lt;h4&gt;Latest posts by Kyle Rankin &lt;span class=&quot;abh_allposts&quot;&gt;(&lt;a href=&quot;https://puri.sm/posts/author/kyle-rankin/&quot;&gt;see all&lt;/a&gt;)&lt;/span&gt;&lt;/h4&gt;

&lt;/div&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A few months ago we announced that &lt;a href=&quot;https://puri.sm/posts/purism-and-nitrokey-partner-to-build-purekey-for-purisms-librem-laptops/&quot;&gt;we were partnering with Nitrokey to produce a new security token: the Librem Key&lt;/a&gt; and I’m pleased to announce that today the Librem Key is &lt;a href=&quot;https://puri.sm/products/librem-key&quot;&gt;available for purchase on our site&lt;/a&gt; for $59.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-58984&quot; src=&quot;https://puri.sm/wp-content/uploads/2018/09/librem-key-shadow-bg.png&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;540&quot; srcset=&quot;https://puri.sm/wp-content/uploads/2018/09/librem-key-shadow-bg.png 960w, https://puri.sm/wp-content/uploads/2018/09/librem-key-shadow-bg-300x169.png 300w, https://puri.sm/wp-content/uploads/2018/09/librem-key-shadow-bg-768x432.png 768w, https://puri.sm/wp-content/uploads/2018/09/librem-key-shadow-bg-600x338.png 600w&quot; sizes=&quot;(max-width: 960px) 100vw, 960px&quot;/&gt;&lt;/p&gt;

&lt;p&gt;In case you haven’t heard of USB security tokens before, they are devices typically about the size of a USB thumb drive that can act as “something you have” for multi-factor authentication. With so many attacks on password logins, most security experts these days recommend adding a second form of authentication (often referred to as “2FA” or “multi-factor authentication”) in addition to your password so that if your password gets compromised the attacker still has to compromise your second factor. USB security tokens work well as this second factor because they are “something you have” instead of “something you know” like a password is, and because they are portable enough you can just keep them in your pocket, purse, or keychain and use them only when you need to login to a secure site.&lt;/p&gt;
&lt;p&gt;In addition to multi-factor authentication, security tokens can also often store your private GPG keys in a tamper-proof way so you can protect them from attackers who may compromise your laptop. With your private keys on the security token, you can just insert the key when you need to encrypt, decrypt, sign, or authenticate and then type in your PIN to unlock the key. Since your private keys stay on the security token, even if an attacker compromises your computer, they can’t copy your keys (and even if you leave the key plugged in, they need to know your PIN to use it).&lt;/p&gt;

&lt;p&gt;There are many other vendors out there who offer their own security tokens, so why make our own? The first reason is that few security tokens out on the market align with our values here at Purism, in particular with respect to freedom. I’ve explained in a previous post &lt;a href=&quot;https://puri.sm/posts/why-freedom-is-essential-to-security-and-privacy/&quot;&gt;why freedom is essential to security and privacy&lt;/a&gt; and this is especially true for a device that is holding some of your most sensitive secrets. We wanted a security token that used open hardware, free software firmware, and free software user applications and that is why we partnered with Nitrokey to produce a security token that respected your freedom from the beginning.&lt;/p&gt;
&lt;p&gt;We also wanted to make the Librem Key because of all of the integration possibilities with our existing products that would make customers more secure in a way that’s also more convenient. When you can bundle a security token with your own laptop and operating system, there are so many interesting possibilities, especially when the firmware and user applications are free software so we can easily modify them to add even more features.&lt;/p&gt;
&lt;p&gt;In addition to the standard features of a security token (GPG key storage and multi-factor authentication) that the Librem Key can perform on any computer, here are some of the interesting integration options with our Librem laptops we are already looking into with the Librem Key that will make security much more convenient for users who are facing average threats:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Insert the Librem Key at boot and automatically decrypt your hard drive&lt;/li&gt;
&lt;li&gt;Automatically lock your laptop whenever you remove the Librem Key&lt;/li&gt;
&lt;li&gt;Use your Librem Key to log in&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the &lt;em&gt;most&lt;/em&gt; exciting opportunities the Librem Key opens up to us is in integrating with our &lt;a href=&quot;https://puri.sm/posts/demonstrating-tamper-detection-with-heads/&quot;&gt;tamper-evident Heads BIOS&lt;/a&gt; to provide cutting-edge tamper-evident security but in a convenient package that &lt;strong&gt;doesn’t exist anywhere else&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Currently with Heads, when you want to prove that the BIOS hasn’t been tampered with, you need to set up a TOTP application on your phone and scan a QR code from within Heads. Then at each boot you compare the 6-digit code Heads displays on the screen with the code in your phone. If the codes match, the BIOS is safe. This method works but is a bit cumbersome and with the Librem Key we can do better.&lt;/p&gt;
&lt;p&gt;We have worked with Nitrokey to add a custom feature to our Librem Key firmware specifically for Heads. This custom firmware along with a userspace application allows us to store the shared secret from the TPM on the Librem Key instead of on a phone app. Then when Heads boots, if the BIOS hasn’t been tampered with the TPM will unlock its copy of the shared secret, and Heads will send the 6-digit code over to the Librem Key. If the code matches what the Librem Key itself generated, it flashes a green light. If the codes don’t match, it flashes a red light.&lt;/p&gt;
&lt;p&gt;So if you are concerned about someone tampering with your computer when you aren’t around, just boot with the Librem Key inserted. If it blinks green you are safe, if it blinks red you’ve been tampered with. &lt;strong&gt;There is no other product on the market today&lt;/strong&gt; that offers this kind of simple but strong tamper-evident protection, much less one that respects your freedom where the keys are fully in your control.&lt;/p&gt;
&lt;h2&gt;Even Stronger Anti-Interdiction Protection&lt;/h2&gt;
&lt;p&gt;The Librem Key opens up possibilities for even stronger anti-interdiction protection for customers who need it. We will be able to link a Librem Key with a laptop running Heads at our facility and then ship them separately. Then when each package arrives you can immediately test for tampering with an easy “green is good, red is bad” test.&lt;/p&gt;

&lt;p&gt;Many companies have already incorporated 3rd party security tokens into their engineering teams as a way for software engineers to sign their code pushes securely or as convenient multi-factor token. The Librem Key offers enterprises a way to combine all of the other features they are used to with other security tokens along with our cutting-edge tamper-evident boot process on our Librem laptops in an easy and convenient package where all of the keys are fully under their control.&lt;/p&gt;
&lt;p&gt;Since the firmware and userspace tools are free software, that means enterprises can also easily customize these tools to suit their own internal policies whether with their own software teams or by working with Purism. That could mean anything from providing a customized error page to employees when Heads detects tampering to actively preventing employees from booting a tampered-with machine.&lt;/p&gt;

&lt;p&gt;Knowing that our customers have a secure and freedom-respecting security token opens up all sorts of other possibilities and today we are only scratching the surface on what we will be able to do with Librem Key both for new customers and those that have been with us from the beginning. Stay tuned for future posts where I will dive deeper into some of the Librem Key’s features and explain how to get the most out of it. In the mean time you can order your own Librem Key from the &lt;a href=&quot;https://puri.sm/products/librem-key&quot;&gt;Librem Key product page&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Thu, 20 Sep 2018 16:09:26 +0000</pubDate>
<dc:creator>abrowne</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://puri.sm/posts/introducing-the-librem-key/</dc:identifier>
</item>
<item>
<title>Becoming a Better Software Developer: A Handbook on Personal Performance</title>
<link>https://www.7pace.com/blog/become-a-better-programmer-skills-development</link>
<guid isPermaLink="true" >https://www.7pace.com/blog/become-a-better-programmer-skills-development</guid>
<description>&lt;div class=&quot;shapely-content&quot;&gt;
&lt;p&gt;There’s a big difference between &lt;em&gt;writing code&lt;/em&gt; and &lt;em&gt;being a great programmer&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Writing code is the output–and almost anyone can learn the basics of syntax and formatting. But what makes someone a skilled developer? It’s much more than just understanding the basics, of course. It’s mastery of the fundamental concepts and logic that make one capable. But, in order to be great, there must also be a way to measure, evaluate, and improve that performance.&lt;/p&gt;
&lt;p&gt;While there are a plethora of ways to learn the basics of coding, developing the supporting skills can sometimes be much more difficult. There’s no simple online course that can teach you how to better collaborate with your team.&lt;/p&gt;
&lt;p&gt;And there’s no single way to improve your own cognitive or problem-solving abilities.&lt;/p&gt;
&lt;p&gt;So, how exactly do developers go from capable to good? From good to great?&lt;/p&gt;
&lt;p&gt;This handbook is meant to be a guide to developer performance–how to understand it, measure it, and improve it.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Our Microsoft ALM Ranger Lineup&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;For help with this, we reached out to the &lt;a href=&quot;https://blogs.msdn.microsoft.com/visualstudioalmrangers/2015/04/22/introducing-the-team-aka-msvsarindex/&quot;&gt;Microsoft ALM Rangers&lt;/a&gt; to get their insight on developer performance, measurement, and growth.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Gerson Dias, Consultant at Lambda 3&lt;/li&gt;
&lt;li&gt;Etienne “ET” Tremblay, Senior ALM Consultant at Imaginet&lt;/li&gt;
&lt;li&gt;Ken Muse, Consulting Director at Wintellect&lt;/li&gt;
&lt;li&gt;Niel Zeeman, Owner at Team Foundation Consulting&lt;/li&gt;
&lt;li&gt;Richard Hundhausen, Professional Scrum Trainer at Accentient&lt;/li&gt;
&lt;li&gt;Josh Garverick, Senior Cloud Architect at Willis Towers Watson&lt;/li&gt;
&lt;li&gt;Jesse Houwing, Trainer, Coach, and Tinkerer at Xpirit&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;strong&gt;Chapter 1: Mindset&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The well-known &lt;a href=&quot;http://www.businessinsider.com/malcolm-gladwell-explains-the-10000-hour-rule-2014-6&quot;&gt;10,000-hour principle&lt;/a&gt;, popularized by Malcolm Gladwell, illustrates an important lesson for developers. (For those not familiar, the rule states that it takes 10,000 hours of deliberate practice in order to become world-class at any particular skill or activity.)&lt;/p&gt;
&lt;p&gt;It takes extreme dedication to become a master at &lt;em&gt;anything&lt;/em&gt;–and programming is no different.&lt;/p&gt;
&lt;p&gt;Sure, there are some innate abilities that may give certain programmers an advantage over their peers. And others may struggle to grasp the basics. But, the barrier for most engineers looking to go from good to great is not genetics or luck.&lt;/p&gt;
&lt;p&gt;It’s dedication–it’s passion.&lt;/p&gt;
&lt;p&gt;In order to become a “rockstar” engineer (cringe), one must not only be smart and capable. You have to want it. You have to be willing to dedicate a whole heap of time and energy into becoming masterful.&lt;/p&gt;
&lt;p&gt;Gerson Dias shares his thoughts. “Knowledge and experience come with time, and raw talent is nothing without passion,” he says.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“If you have passion for what you are doing, you will be productive and have excellent performance, because you are putting your energy [into it]. Of course, it’s tough to find a job that you can say, ‘I really like to build that!’ But is important to have your ‘spiritual bindings,’ even to think, ‘Okay, I hate this, but while nothing better comes, I’ll do it because [I need to support] my family and my skills will improve.’”&lt;br/&gt;&lt;/em&gt;-Gerson Dias&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And you must be deliberate in your approach. No one becomes an accidental master of anything. It takes focused effort and a clear vision for what it is that you want to accomplish.&lt;/p&gt;
&lt;p&gt;Then it takes a plan for how to achieve that mark.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-4619&quot; src=&quot;https://www.7pace.com/blog/wp-content/uploads/2018/09/bell-graph-1.png&quot; alt=&quot;&quot; width=&quot;848&quot; height=&quot;505&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Now, this isn’t to say that it’s all-or-nothing. There’s ground to be gained for programmers at all levels–from novice to experts. And it doesn’t take 10,000 hours just to move the needle a little bit. But it’s important to understand the fundamental gap that exists between the majority and the truly extraordinary.&lt;/p&gt;
&lt;p&gt;Beyond just dedication and passion to the craft, the &lt;a href=&quot;http://connect.blogs.xerox.com/2015/08/27/8-essential-components-to-the-engineers-mindset/&quot;&gt;engineering mindset&lt;/a&gt; is also a hallmark of those who are successful at problem solving of all types.&lt;/p&gt;
&lt;p&gt;This is typically defined by its 8 main characteristics.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-4611&quot; src=&quot;https://www.7pace.com/blog/wp-content/uploads/2018/09/mindset-graph.png&quot; alt=&quot;&quot; width=&quot;848&quot; height=&quot;505&quot;/&gt;&lt;/p&gt;
&lt;p&gt;While some developers may be predisposed to have these characteristics, that doesn’t mean that the engineering mindset is entirely predetermined. It can be learned and consciously developed over time.&lt;/p&gt;
&lt;p&gt;In order to develop your ability to evaluate and solve problems, you need a way to measure and assess that performance.&lt;/p&gt;
&lt;p&gt;Otherwise, how do you know if you’ve improved?&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Chapter 2: Measuring Performance&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Before we talk about &lt;em&gt;how to improve&lt;/em&gt;, we need to define what improvement means.&lt;/p&gt;
&lt;p&gt;What makes someone a good developer in the first place?&lt;/p&gt;
&lt;p&gt;Almost every one of the people I spoke to for this guide agreed that performance is both &lt;em&gt;subjective&lt;/em&gt; and &lt;em&gt;relative&lt;/em&gt;. This means that there is no single, definitive way to measure performance (there are a lot of ways &lt;em&gt;not&lt;/em&gt; to measure it, but that’s not helpful) and that there is no static scale by which you can compare performance between two developers or teams.&lt;/p&gt;
&lt;p&gt;In other words: &lt;strong&gt;&lt;em&gt;The best way to assess a developer’s performance is to measure their growth over time.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“&lt;em&gt;Measuring your ability is about reflecting on each release and trying to find ways that you can be more efficient and effective going forward,&lt;/em&gt;” Ken Muse explained. “&lt;em&gt;If your continuously evaluating your progress and making changes, then your performance will improve.&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;If you want to become a better runner, what would you do?&lt;/p&gt;
&lt;p&gt;You probably begin by setting a goal and developing a plan. But, how do you know if you’re making progress toward your goal?&lt;/p&gt;
&lt;p&gt;You measure your abilities.&lt;/p&gt;
&lt;p&gt;You time your runs, track your distance, and compare your speed. The same applies here.&lt;/p&gt;
&lt;p&gt;Whether it’s the number of story points completed within an iteration or the quality of code written–it should be measured as a continuous trend over a defined period. If your score was 10, than your goal should be 11.&lt;/p&gt;
&lt;p&gt;As with running, the process is this:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Define a way to measure your performance&lt;/li&gt;
&lt;li&gt;Measure your performance&lt;/li&gt;
&lt;li&gt;Set a goal&lt;/li&gt;
&lt;li&gt;Continue to measure and compare performance over time&lt;/li&gt;
&lt;li&gt;Identify and test new strategies for improving performance&lt;/li&gt;
&lt;li&gt;Once you’ve reached your goal, repeat&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;em&gt;Are you becoming objectively better, quicker, or more efficient?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is the main reason we advocate for &lt;a href=&quot;https://www.7pace.com/blog/software-teams-time-tracking&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;time tracking across software teams&lt;/a&gt;. Not because it’s a great way to whip developers into shape and make sure they’re hitting their arbitrary quotas, but because it gives developers themselves–&lt;em&gt;individuals&lt;/em&gt;–a simple and universal way to measure and compare their own abilities.&lt;/p&gt;
&lt;p&gt;Muse summed it up by saying, “&lt;em&gt;Understanding the time it takes to complete a development cycle and refining those cycles can be a valuable way for a teams to collectively and individually improve.&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;If it took you 50 hours of work to complete 12 story points last month, then your goal should be accomplish that same amount of work in less time for this month.&lt;/p&gt;
&lt;p&gt;Admittedly, many people I spoke with for this guide did not advocate for time tracking. And how many companies have implemented time tracking is not a good way to help developers manage their own time and abilities.&lt;/p&gt;
&lt;p&gt;Certainly, it’s fair to say that using time as a measurement of performance is not right in every scenario.&lt;/p&gt;
&lt;p&gt;But, no matter what benchmark you use, you need to define a KPI–an objective and consistent way to measure and evaluate &lt;em&gt;your own&lt;/em&gt; performance as a developer. Which metric(s) you use is ultimately up to you, but just decide on ones that can be easily and consistently measured and compared.&lt;/p&gt;
&lt;p&gt;Richard Hundhausen explained his thinking on this topic. “&lt;em&gt;If the team decides (without any outside influence) that they want to track time for whatever reason (again, not because someone or some policy outside the team requires it), then they should do it,”&lt;/em&gt; he wrote in an email. &lt;em&gt;“Because one of the rules in Scrum is to let the team decide how they want to work.”&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Chapter 3: Mastering the Fundamentals&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Understanding the fundamentals of any particular skill is the most essential step toward mastery.&lt;/p&gt;
&lt;p&gt;Consider the game of chess. Before someone can become a Grandmaster, they must first understand the underlying principles of the game. Not only do they need to know how the bishop moves across the board, but also understand openings, positions, and tactics.&lt;/p&gt;
&lt;p&gt;For developers, there are two categories of fundamentals that are critical to mastery:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Engineering fundamentals&lt;/li&gt;
&lt;li&gt;Language/framework fundamentals&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The first set is universal for nearly all types of programming. It’s about understanding the underlying structures, processes, and frameworks for effective programming.&lt;/p&gt;
&lt;p&gt;In the second set, we look more to specialized fundamentals–specifics to certain languages or frameworks that are being used within a certain context. Programmers may not be experts at all languages or frameworks, but having a solid foundation can often make it easier to pick up new technologies.&lt;/p&gt;
&lt;p&gt;For our purposes, we want to focus on the engineering fundamentals.&lt;/p&gt;
&lt;p&gt;What does that include?&lt;/p&gt;
&lt;p&gt;Things like:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Algorithms&lt;/li&gt;
&lt;li&gt;Abstraction&lt;/li&gt;
&lt;li&gt;Isolation&lt;/li&gt;
&lt;li&gt;Databases&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Although these &lt;em&gt;look&lt;/em&gt; different in different languages/frameworks/paradigms, the fundamental logic is relatively static.&lt;/p&gt;
&lt;p&gt;It may be tempting to think that if you are already capable of writing functional code that you must already know the fundamentals. But, do you really understand all of the underlying science?&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-4613&quot; src=&quot;https://www.7pace.com/blog/wp-content/uploads/2018/09/I-have-no-idea.png&quot; alt=&quot;&quot; width=&quot;619&quot; height=&quot;236&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I can build a pendulum in my garage. But, that doesn’t mean that I understand the physics.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Even competent engineers sometimes lack a true understanding of why and how things work in gory detail–they just know which keys to press in which order to make it happen. The interesting paradox is that these fundamentals actually become &lt;em&gt;more important&lt;/em&gt; later in your career and as your work becomes more complex and further from the basics of writing and understanding code on a screen.&lt;/p&gt;
&lt;p&gt;This means that many developers go years–even decades–without truly understanding the fundamentals.&lt;/p&gt;
&lt;p&gt;But, eventually, they hit a wall.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-4612&quot; src=&quot;https://www.7pace.com/blog/wp-content/uploads/2018/09/fundaments-graph.png&quot; alt=&quot;&quot; width=&quot;848&quot; height=&quot;505&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As problems become more complex–as you attempt to grow and become a better engineer–you must master these fundamental concepts.&lt;/p&gt;
&lt;p&gt;Otherwise, they will eventually become a barrier to your development. So you need to be deliberate about dedicating time to this basic part of the craft. As with anything, this means carving out time for deliberate and focused effort–training.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Chapter 4: Exercises for Improvement&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Fundamentals are–well–fundamental.&lt;/p&gt;
&lt;p&gt;But, knowing the underlying components of programming != being a good engineer.&lt;/p&gt;
&lt;p&gt;“I think we are in an industry of continuous learning and if you are not learning then you’re not going to be performant,” said Etienne Tremblay. “I think if they can genuinely say they learnt something (not superficially) then they should be happy about it.”&lt;/p&gt;
&lt;p&gt;Programming is fundamentally a problem-solving exercise. It’s about taking in data, understanding context, and formulating the best possible solution. Probably the most important part of developing any problem-solving ability is repetition and pattern recognition.&lt;/p&gt;
&lt;p&gt;It takes practice.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Learn, learn, learn. Read books, try new things, fail and try again. Stay abreast of the latest technology, watch conference videos (they are free). I can’t stress enough how things change so fast in our industry if you are not learning you’ll be left behind.”&lt;br/&gt;&lt;/em&gt;– Etienne Tremblay&lt;em&gt;&lt;br/&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The more use cases you encounter, the more context you have for how to solve each subsequent problem. You’ve seen more problems and developed more solutions, which gives you a greater pool of knowledge to draw from in the future.&lt;/p&gt;
&lt;p&gt;So how can developers apply this mechanic to improve their individual abilities?&lt;/p&gt;
&lt;h3&gt;Practice diffuse and focused thinking&lt;/h3&gt;
&lt;p&gt;It may seem improbable that you can somehow train your brain to be a better engineer.&lt;/p&gt;
&lt;p&gt;But there may be some scientifically backed ways to accomplish it.&lt;/p&gt;
&lt;p&gt;One is to simply practice the &lt;em&gt;kinds&lt;/em&gt; of thinking that are important to problem solving. And, maybe more importantly, practicing our ability to switch between these types of thinking in order to better and more easily discover solutions.&lt;/p&gt;
&lt;p&gt;In general, we have two kinds of thinking that are deployed when solving problems or learning new things.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Focused thinking&lt;/li&gt;
&lt;li&gt;Diffuse thinking&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;With focused thinking, we concentrate on a particular problem or question and actively try to come to a solution. With diffuse thinking, we let the idea incubate in sort of a latent or passive thinking mode–we’re not actively concentrating on it, but it remains somewhere in the back of our minds and we continue to look for solutions or patterns.&lt;/p&gt;
&lt;p&gt;When it comes to improving your abilities as a developer, it turns out that &lt;a href=&quot;https://www.brainscape.com/blog/2016/08/better-learning-focused-vs-diffuse-thinking/&quot;&gt;both of these types of thinking are important&lt;/a&gt;. Some problems can be solved through sheer will and concentration; but others may just require more time and contemplation.&lt;/p&gt;
&lt;p&gt;Practicing this is pretty simple, actually.&lt;/p&gt;
&lt;p&gt;You can easily alternate between the two types of thinking.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-4614&quot; src=&quot;https://www.7pace.com/blog/wp-content/uploads/2018/09/problem-solve-graph.png&quot; alt=&quot;&quot; width=&quot;848&quot; height=&quot;505&quot;/&gt;&lt;/p&gt;
&lt;p&gt;First: Start by focusing deeply on something you are trying to do or solve.&lt;/p&gt;
&lt;p&gt;Spend some time turning it over and thinking through different solutions. Focus closely on the problem, examine its different elements and weigh different options and considerations.&lt;/p&gt;
&lt;p&gt;Then, after you’ve internalized the idea and the context, &lt;em&gt;go and do something else&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let the question remain in the back of your head, but take on another task that will take your mind off of it and allow you to deploy diffuse thinking.&lt;/p&gt;
&lt;p&gt;This simple, two-step cycle is a fundamental process for problem solving. And, even if you don’t know it, you will often apply the same kind of system when trying to solve problems throughout your career. We often call this “incubating” a solution or taking a break from the problem at hand.&lt;/p&gt;
&lt;p&gt;Either way, it’s a practiced strategy. Apply it to different problems you are trying to solve, strengthen your ability, and solidify it as a go-to approach for solving difficult problems.&lt;/p&gt;
&lt;h3&gt;Create side projects&lt;/h3&gt;
&lt;p&gt;Not only are side projects often an indicator of passion and drive, but they have some broader benefits for you as a developer.&lt;/p&gt;
&lt;p&gt;Latish Sehgal wrote an article &lt;a href=&quot;https://simpleprogrammer.com/side-projects/&quot;&gt;explaining the importance of side projects&lt;/a&gt;. He outlines these benefits:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Teaches you to add value (not just write code)&lt;/li&gt;
&lt;li&gt;Pushes you to take action&lt;/li&gt;
&lt;li&gt;Improves focus&lt;/li&gt;
&lt;li&gt;Rewards perseverance&lt;/li&gt;
&lt;li&gt;Makes you more empathetic&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The major difference for side projects versus a day job is that you are exposed to more perspectives.&lt;/p&gt;
&lt;p&gt;Rather than simply being a developer as part of a team, you become a project manager, a CTO, and perhaps a CEO as well.&lt;/p&gt;
&lt;p&gt;Wearing these different hats–and without any external pressure–you’re able to better grasp the context of projects and products. You step outside of your role to understand the bigger picture and use that to make better decisions.&lt;/p&gt;
&lt;h3&gt;Read other people’s code&lt;/h3&gt;
&lt;p&gt;Can you imagine that authors like Hemingway or Steinbeck would have been great if they had not read the works of other great authors before them?&lt;/p&gt;
&lt;p&gt;Of course not.&lt;/p&gt;
&lt;p&gt;We learn and grow, in large part, by consuming the work of others.&lt;/p&gt;
&lt;p&gt;While it can sometimes feel a bit &lt;em&gt;abstract&lt;/em&gt; to consider your work outside of the context in which you created it, analyzing another person’s work gives you the chance to step outside of the code and try to deconstruct and understand the thinking in a new way.&lt;/p&gt;
&lt;p&gt;Make a habit of partnering with different team members to review or analyze each others work.&lt;/p&gt;
&lt;p&gt;You don’t need to make it a formal process, necessarily. But, simply taking the time to examine and consider the thought behind someone else’s code or structure can inspire new ideas or push you to improve your own abilities.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Chapter 5: Solidifying Knowledge&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Learning is great. But retaining and applying knowledge is really what’s important.&lt;/p&gt;
&lt;p&gt;It can often be difficult to take something you’ve learned and recall it later when it’s time to use that knowledge.&lt;/p&gt;
&lt;p&gt;There are some tricks and strategies that will help you solidify the knowledge you have learned and identify opportunities to apply those learnings well into the future.&lt;/p&gt;
&lt;h3&gt;Use interleaving to learn new concepts&lt;/h3&gt;
&lt;p&gt;The idea behind interleaving is pretty simple. Studies have found that &lt;a href=&quot;https://www.scientificamerican.com/article/the-interleaving-effect-mixing-it-up-boosts-learning/&quot;&gt;people are able to better learn and recall new concepts&lt;/a&gt; if they mix up what they’re learning–alternating between a few different concepts or practices.&lt;/p&gt;
&lt;p&gt;While &lt;a href=&quot;https://www.7pace.com/blog/time-blocking-for-developers-how-to-achieve-flow-stop-being-busy-start-being-productive&quot;&gt;time blocking can be effective for developer productivity&lt;/a&gt;, the concept of interleaving may actually be better for learning and recall.&lt;/p&gt;
&lt;p&gt;One study found that students &lt;a href=&quot;http://journals.sagepub.com/doi/abs/10.1111/j.1467-9280.2008.02127.x&quot;&gt;performed 25% better on a surprise test when they had learned with interleaving techniques&lt;/a&gt; versus peers who learned in traditional blocks. But, more amazingly, those students were much better able to recall the test material later on.&lt;/p&gt;
&lt;p&gt;Students who originally learned through interleaving performed 76% better when given a test a month later.&lt;/p&gt;
&lt;p&gt;So, interleaving appears to both aid in short-term learning and also improve long-term retention. As you’re learning new things or trying new techniques, you may want to mix in multiple concepts and learn them together in an alternating pattern.&lt;/p&gt;
&lt;h3&gt;Teach what you’ve learned to others&lt;/h3&gt;
&lt;p&gt;For many, the best way to learn is to &lt;em&gt;teach&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you understand a complex problem enough to explain it to someone else, then you’re much more likely to be able to apply that knowledge in a meaningful way.&lt;/p&gt;
&lt;p&gt;This is also backed by plenty of science. In particular, the &lt;a href=&quot;https://qz.com/1213768/the-forgetting-curve-explains-why-humans-struggle-to-memorize/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Forgetting Curve&lt;/a&gt; explains how information is lost over time. If there is no active effort made to retain that knowledge, it will slowly disappear from your memory.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-4625&quot; src=&quot;https://www.7pace.com/blog/wp-content/uploads/2018/09/forgetting-curve-annotated.png&quot; alt=&quot;&quot; width=&quot;620&quot; height=&quot;349&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In addition, science has shown that &lt;a href=&quot;https://www.speaktoyourmind.com/blog/active-recall&quot;&gt;practicing active recall of knowledge can boost retrieval&lt;/a&gt; and memory by more than 100%.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-4626&quot; src=&quot;https://www.7pace.com/blog/wp-content/uploads/2018/09/spaced-repetition-chart.png&quot; alt=&quot;&quot; width=&quot;620&quot; height=&quot;404&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Teaching is, of course, an exercise that encourages and requires knowledge to be actively recalled, explained, and applied.&lt;/p&gt;
&lt;p&gt;So, teaching what you learn can be a fundamental strategy for retaining new knowledge and improve your ability to recall and apply that knowledge to your own work later on.&lt;/p&gt;
&lt;p&gt;As developers improve their skills, it’s often helpful for them to solidify that knowledge by sharing with others. Either through formalized teaching or coaching, or though informal mentoring of other teammates.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Chapter 6: Teamwork&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;At the end of the day, an individual’s abilities or knowledge will only play a small role in the outcome of the entire team.&lt;/p&gt;
&lt;p&gt;Being the smartest person in the room won’t make you a great developer unless you use that knowledge the foster and improve those around you.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“We don’t want heroes on the team”&lt;/em&gt;, wrote Hundhausen, &lt;em&gt;“unless those heroes are sharing their knowledge, pairing up, being respectful to others, and not command- and-controlling the work.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Josh Garverick put it even more bluntly.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“No one wants to work with a jerk who doesn’t feel like he/she needs to be taught anything,”&lt;/em&gt; he said.&lt;/p&gt;
&lt;p&gt;Teamwork and collaboration are &lt;em&gt;just as important&lt;/em&gt; as the ability to write elegant code or solve difficult problems. In fact, it may actually be &lt;a href=&quot;https://www.7pace.com/blog/fit-vs-ability-why-hiring-the-right-engineer-is-more-important-than-hiring-the-best-engineer&quot;&gt;&lt;em&gt;more important&lt;/em&gt; for have a functioning team&lt;/a&gt; than any one person be a particularly high-performing developer.&lt;/p&gt;
&lt;p&gt;Application development is a team sport. &lt;em&gt;Period. Full stop.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Sure, there may be mythical stories floating around about individual developers who performed some Herculean task of building programs all on their own. And that’s great for them.&lt;/p&gt;
&lt;p&gt;But that’s not the real world–and it’s not a sustainable way to build software.&lt;/p&gt;
&lt;p&gt;As you progress through our career, you will work with (and may embody) &lt;a href=&quot;https://www.7pace.com/blog/the-7-types-of-software-developers-youll-probably-work-with-someday&quot;&gt;many different types of developers&lt;/a&gt;. And in order to do your job well, you will need to learn how to traverse different personalities and work most effectively with these different types of people.&lt;/p&gt;
&lt;p&gt;More importantly, diversity can help you grow as a person and also &lt;a href=&quot;https://www.7pace.com/blog/importance-diversity-problem-solving&quot;&gt;make your team better at solving problems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But, “being good at working as a team” is a bit too abstract. How do we actually assess and improve our skills and collaboration, discussion, and giving/receiving feedback?&lt;/p&gt;
&lt;p&gt;According to a &lt;a href=&quot;https://hbr.org/2012/04/the-new-science-of-building-great-teams&quot;&gt;2012 study from MIT&lt;/a&gt;, the following characteristics are important for building a successful team:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Equal contribution from every member of the team&lt;/li&gt;
&lt;li&gt;The team shares a lot of energy&lt;/li&gt;
&lt;li&gt;Team members communicate directly with each other&lt;/li&gt;
&lt;li&gt;The team conducts back-channel conversations&lt;/li&gt;
&lt;li&gt;The members explore the outside world and report their findings back to the team&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Understanding your strengths (and weaknesses)&lt;/h3&gt;
&lt;p&gt;As an individual within a team, it may seem like your role in facilitating teamwork is limited. But you can take steps to become a better team player, which is just as important as a leader or manager facilitating teamwork from the top-down.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Understand and communicate your strengths&lt;/li&gt;
&lt;li&gt;Understand and communicate your weaknesses&lt;/li&gt;
&lt;li&gt;Understand the strengths and weaknesses of others on your team&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This is not easy. It requires being vulnerable and honestly assessing yourself–and asking your peers to do the same.&lt;/p&gt;
&lt;p&gt;But, that’s no excuse to ignore it.&lt;/p&gt;
&lt;p&gt;Each person on your team should be aware of their abilities and have an understanding of how they are able to complement one another. If your weakness is algorithms, the best way for you to &lt;em&gt;improve&lt;/em&gt; on that weakness is to understand who is better than you and actively work with them to develop your skills.&lt;/p&gt;
&lt;p&gt;You can only do that if you’re open and honest, communicating clearly with the rest of the team.&lt;/p&gt;
&lt;h3&gt;Defining your role&lt;/h3&gt;
&lt;p&gt;Secondly, you should consider how your strengths or weaknesses then define your role within the team structure.&lt;/p&gt;
&lt;p&gt;Are you the one who is seen as reliable and efficient? Or are you the out-of-the-box thinker who pushes the team to explore new ideas? Whatever your ultimate role is, you need to consider how it plays a part in the overall team dynamic and how you can play that role in a way that helps drive better outcomes.&lt;/p&gt;
&lt;p&gt;Ted Bauer published an article about teamwork and outlined &lt;a href=&quot;https://medium.com/@tedbauer2003/a-no-bullshit-way-to-get-teams-to-work-better-together-a1813edb4e1a&quot;&gt;4 types of people within a team&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-4620&quot; src=&quot;https://www.7pace.com/blog/wp-content/uploads/2018/09/agree-graph-1.png&quot; alt=&quot;&quot; width=&quot;848&quot; height=&quot;505&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As he points out, you do sometimes need troublemakers to push things forward.&lt;/p&gt;
&lt;p&gt;But, it’s up to the person in that role to understand when it makes sense to make trouble–how to pick and choose their battles. If you are, within your team, the one who is likely to push for change or progress, then you must do it selectively.&lt;/p&gt;
&lt;p&gt;Otherwise, you quickly slide into the “Jerk” territory and rather than &lt;em&gt;driving&lt;/em&gt; progress, you will quickly impede it.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Chapter 7: Developing Context&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Beyond just being a proficient programmer, the most effective software developers have a broad understanding of the context within which they operate.&lt;/p&gt;
&lt;p&gt;What does that mean?&lt;/p&gt;
&lt;p&gt;It means that software is not created in a vacuum.&lt;/p&gt;
&lt;p&gt;Strong developers understand that there are institutional considerations that go beyond just writing functional code and checking off user stories in the backlog.&lt;/p&gt;
&lt;p&gt;Software is created to serve a purpose. And it operates under a particular set of conditions, within a specific budget range, and for users that have a certain level of knowledge or ability.&lt;/p&gt;
&lt;p&gt;In other words, software is not just software. It is, ultimately, a solution for something.&lt;/p&gt;
&lt;p&gt;Moving beyond understanding the fundamentals of programming and being a competent or effective developer, there is another level of performance that comes from a broader understanding of the application lifecycle.&lt;/p&gt;
&lt;p&gt;This understanding about the user, the constraints, and the context allow skilled developers to make smarter and more effective decisions about how to solve problems.&lt;/p&gt;
&lt;p&gt;It’s easy for competent developers to spend their entire career with their head down, writing and checking in code. They may be a great teammate and a valuable asset.&lt;/p&gt;
&lt;p&gt;But, to level up, you need to look beyond what’s on the screen.&lt;/p&gt;
&lt;p&gt;In order to improve your abilities–and your value–as a developer, you should strive to zoom out from the day-to-day monotony of writing code and ask &lt;em&gt;why&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Gain context and understanding about how decisions are being made and how they will impact your work. But, don’t just do it for selfish reasons–do it because you want to be included in that decision-making process and able to better understand the purpose and importance of what you do.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Chapter 7: Additional Resources&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;While this guide is meant to include many ideas and strategies for leveling up your skills as a developer, the heart of everything is learning.&lt;/p&gt;
&lt;p&gt;It’s actively seeking out new knowledge and ideas, and then finding ways to apply that new knowledge in your day-to-day work.&lt;/p&gt;
&lt;p&gt;In that spirit, there are many other resources for you to consider as you look for ways to improve and grow in your abilities and your career. Here are some recommended by the Microsoft ALM Rangers we talked to when developing this guide.&lt;/p&gt;
&lt;h3&gt;Websites &amp;amp; Publications&lt;/h3&gt;
&lt;h3&gt;Books&lt;/h3&gt;

&lt;/div&gt;
</description>
<pubDate>Thu, 20 Sep 2018 15:33:57 +0000</pubDate>
<dc:creator>encorekt</dc:creator>
<og:title>How to Become a Better Software Developer: A Handbook on Personal Performance</og:title>
<og:type>article</og:type>
<og:image>https://www.7pace.com/blog/wp-content/uploads/2018/09/cover.png</og:image>
<og:url>https://www.7pace.com/blog/become-a-better-programmer-skills-development</og:url>
<og:description>There’s a big difference between writing code and being a great programmer. Writing code is the output--and almost anyone can learn the basics of syntax and formatting. But what makes someone...</og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.7pace.com/blog/become-a-better-programmer-skills-development</dc:identifier>
</item>
</channel>
</rss>