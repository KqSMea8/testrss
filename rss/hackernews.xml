<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Permanent Daylight Saving Time? Florida Says Yes, but It’s Not So Simple</title>
<link>https://www.nytimes.com/2018/03/08/us/daylight-saving-time-florida.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2018/03/08/us/daylight-saving-time-florida.html</guid>
<description>&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;294&quot; data-total-count=&quot;2098&quot; id=&quot;story-continues-3&quot;&gt;In other words: Even if the governor signs the bill, nothing will happen now. Congress, rived over tariffs and gun control and immigration, would have to act on clocks — or the Transportation Department &lt;a href=&quot;https://www.transportation.gov/regulations/procedure-moving-area-one-time-zone-another&quot;&gt;would have to issue a new regulation&lt;/a&gt;, an option the Florida legislation does not mention.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;176&quot; data-total-count=&quot;2274&quot;&gt;Given that hurdle, it is perhaps not surprising that while other states have discussed making daylight saving time the permanent law of their lands, none have managed to do it.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;535&quot; data-total-count=&quot;2809&quot;&gt;In recent years, several states in New England — Maine, Massachusetts, New Hampshire and Rhode Island — have &lt;a href=&quot;https://www.nytimes.com/2017/03/12/us/spring-forward-daylight-savings-time.html&quot;&gt;created commissions or introduced proposals&lt;/a&gt; to that end. Staying on daylight saving time could have particular benefits in New England, which, as the easternmost region of a sprawling time zone, endures very early winter sunsets. In parts of Maine, for example, between Thanksgiving and Christmas, the sun sets before 4 p.m. — more than an hour earlier than it does in Detroit, at the other end of the Eastern time zone.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;158&quot; data-total-count=&quot;2967&quot;&gt;This can mean more electricity use and more symptoms of seasonal affective disorder — not to mention less after-work shopping, which takes an economic toll.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;344&quot; data-total-count=&quot;3311&quot;&gt;But changing time zones could have an economic cost, too, especially in a region like the Northeast, where millions of people commute across state lines. No one wants their office to be an hour ahead of their home. Cognizant of that, most of the New England states contemplating a change made it contingent on their neighbors’ doing the same.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;95&quot; data-total-count=&quot;3406&quot;&gt;That is less of a problem in Florida, where a vast majority of residents work within the state.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;385&quot; data-total-count=&quot;3791&quot;&gt;The sponsors of the Florida legislation — State Senator Greg Steube and State Representatives Heather Fitzenhagen and Jeanette Nuñez, all Republicans — did not respond to requests for comment Wednesday afternoon. But in interviews with local newspapers on Tuesday, they said they believed year-round daylight saving time would improve the economy, public safety and mental health.&lt;/p&gt;
&lt;a class=&quot;visually-hidden skip-to-text-link&quot; href=&quot;https://www.nytimes.com/2018/03/08/us/daylight-saving-time-florida.html#whats-next&quot;&gt;Continue reading the main story&lt;/a&gt;</description>
<pubDate>Thu, 08 Mar 2018 20:22:53 +0000</pubDate>
<dc:creator>hvo</dc:creator>
<og:url>https://www.nytimes.com/2018/03/08/us/daylight-saving-time-florida.html</og:url>
<og:type>article</og:type>
<og:title>Year-Round Daylight Saving Time? Florida Says Yes, but It’s Not So Simple</og:title>
<og:description>Florida lawmakers overwhelmingly passed a bill to keep the state on daylight saving time year-round. The only problem: They don’t have the authority to do that.</og:description>
<og:image>https://static01.nyt.com/images/2018/03/07/autossell/xp-daylight/merlin_42977644_5a21cae9-9e75-491f-869e-d441d1a3dd91-facebookJumbo.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2018/03/08/us/daylight-saving-time-florida.html</dc:identifier>
</item>
<item>
<title>Elementary Knightship found in Conway&amp;#039;s Game of Life</title>
<link>http://www.conwaylife.com/forums/viewtopic.php?t=3303</link>
<guid isPermaLink="true" >http://www.conwaylife.com/forums/viewtopic.php?t=3303</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;cite&gt;calcyman wrote:&lt;/cite&gt;This came out of ikpx (my search program, which is essentially a multithreaded hybrid of LLS and gfind) when I fed one of Tom Rokicki's long partials into it...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br /&gt;It was terribly tempting to edit the original post and change one cell toward the end, so that the knightship didn't quite work.&lt;p&gt;Unfortunately April Fool's Day is still almost a month away... well. With great power comes great responsibility. With infinitesimal power comes a reasonably small amount of responsibility. I'll just add my congratulations, and say &quot;welcome&quot; to 282P6H2V1, until another name appears!&lt;/p&gt;&lt;p&gt;(Am trying to find some kind of pun, maybe on &quot;C-horse&quot; with the chess-knight connection. But &quot;(2,1)c/6horse&quot; just isn't very close.)&lt;/p&gt;&lt;p&gt;&lt;span&gt;EDIT&lt;/span&gt;: I believe we're up to two dozen spaceship velocities now, counting the five infinite families only once each. Some of the infinite families -- Gemini, half-baked knightships, Demonoid, Caterloopillar, Orthogonoid -- may really be multiple infinite families, but it's too hard to count them if you start thinking like that.&lt;/p&gt;</description>
<pubDate>Thu, 08 Mar 2018 17:55:05 +0000</pubDate>
<dc:creator>vanderZwan</dc:creator>
<dc:language>en-gb</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.conwaylife.com/forums/viewtopic.php?t=3303</dc:identifier>
</item>
<item>
<title>California to Introduce &amp;#039;Right to Repair&amp;#039; Bill</title>
<link>https://a13.asmdc.org/press-releases/20180307-eggman-introduces-legislation-create-right-repair-electronics</link>
<guid isPermaLink="true" >https://a13.asmdc.org/press-releases/20180307-eggman-introduces-legislation-create-right-repair-electronics</guid>
<description>&lt;p&gt;SACRAMENTO—Assemblymember Susan Talamantes Eggman (D-Stockton) has announced that she will be introducing the California Right to Repair Act. The legislation would require manufacturers of electronics to make diagnostic and repair information, as well as equipment or service parts, available to product owners and to independent repair shops.&lt;/p&gt;

&lt;p&gt;“The Right to Repair Act will provide consumers with the freedom to have their electronic products and appliances fixed by a repair shop or service provider of their choice, a practice that was taken for granted a generation ago but is now becoming increasingly rare in a world of planned obsolescence,” Eggman said.&lt;/p&gt;

&lt;p&gt;People who can’t afford the high price of manufacturer-based repair services are increasingly forced to prematurely replace durable goods, such as phones, TVs, and appliances. Repairing and reusing electronics is not only a more efficient use of the scarce materials that go into manufacturing the products, but it can also stimulate local economies instead of unsustainable overseas factories. &lt;/p&gt;

&lt;p&gt;“People shouldn’t be forced to ‘upgrade’ to the newest model every time a replaceable part on their smartphone or home appliance breaks,” said Mark Murray, Executive Director of Californians Against Waste. “These companies are profiting at the expense of our environment and our pocketbooks as we become a throw-away society that discards over 6 million tons of electronics every year.”&lt;/p&gt;

&lt;p&gt;&quot;The bill is critical to protect independent repair shops and a competitive market for repair, which means better service and lower prices. It also helps preserve the right of individual device owners to understand and fix their own property,” Kit Walsh, Senior Staff Attorney with the Electronic Frontier Foundation said. “We should encourage people to take things apart and learn from them. After all, that's how many of today's most successful innovators got started.&quot;&lt;/p&gt;

&lt;p&gt;&quot;Consumers Union thanks Assemblymember Eggman for her efforts to ensure consumers have the choice to fix their own electronic devices or have them fixed by an independent repair servicer”, said Maureen Mahoney, Policy Analyst for Consumers Union. “Consumers are now being forced to go back to the manufacturer for even simple repairs or refurbishing, or to throw out the device and buy a new one. We look forward to working with Assemblymember Eggman to secure this important ownership right for consumers.&quot;&lt;/p&gt;

&lt;p&gt;“We should be working to reduce needless waste – repairing things that still have life -- but companies use their power to make things harder to repair. Repair should be the easier, more affordable choice and it can be, but first we need to fix our laws,&quot; said Emily Rusch, Executive Director of CALPIRG. &quot;Our recent survey, Recharge Repair, showed a surge in interest in additional repair options after Apple announced battery issues. The Right to Repair Act would give people those options.&quot;&lt;/p&gt;

&lt;p&gt;California joins 17 other states who have introduced similar legislation, which includes: Washington, Massachusetts, Vermont, New York, Hawaii, Illinois, Iowa, Kansas, Minnesota, Missouri, North Carolina, Nebraska, New Hampshire, New Jersey, Oklahoma, Tennessee, Virginia.&lt;/p&gt;

&lt;div readability=&quot;7&quot;&gt;
&lt;p&gt;For immediate release&lt;/p&gt;
&lt;p&gt;Contact: David Stammerjohan&lt;/p&gt;
&lt;p&gt;(916) 319-2013&lt;/p&gt;

&lt;/div&gt;
&lt;p&gt;###&lt;/p&gt;


</description>
<pubDate>Thu, 08 Mar 2018 17:04:46 +0000</pubDate>
<dc:creator>tambourine_man</dc:creator>
<og:type>article</og:type>
<og:url>https://a13.asmdc.org/press-releases/20180307-eggman-introduces-legislation-create-right-repair-electronics</og:url>
<og:title>Eggman Introduces Legislation to Create a “Right to Repair” for Electronics</og:title>
<og:description>SACRAMENTO—Assemblymember Susan Talamantes Eggman (D-Stockton) has announced that she will be introducing the California Right to Repair Act. The legislation would require manufacturers of electronics to make diagnostic and repair information, as well as equipment or service parts, available to product owners and to independent repair shops.  </og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://a13.asmdc.org/press-releases/20180307-eggman-introduces-legislation-create-right-repair-electronics</dc:identifier>
</item>
<item>
<title>Scrcpy – An app to display and control Android devices</title>
<link>https://blog.rom1v.com/2018/03/introducing-scrcpy/</link>
<guid isPermaLink="true" >https://blog.rom1v.com/2018/03/introducing-scrcpy/</guid>
<description>&lt;span class=&quot;post-date&quot;&gt;08 Mar 2018&lt;/span&gt;
&lt;p&gt;I developed an application to display and control Android devices connected on USB. It does not require any root access. It works on GNU/Linux, Windows and Mac OS.&lt;/p&gt;
&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Genymobile/scrcpy&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Genymobile/scrcpy/master/assets/screenshot-debian-600.jpg&quot; alt=&quot;scrcpy&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It focuses on:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;lightness&lt;/strong&gt; (native, displays only the device screen)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;performance&lt;/strong&gt; (30~60fps)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;quality&lt;/strong&gt; (1920×1080 or above)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;low latency&lt;/strong&gt; (70~100ms)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;low startup time&lt;/strong&gt; (~1 second to display the first image)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;non-intrusiveness&lt;/strong&gt; (nothing is left installed on the device)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Like my previous project, &lt;a href=&quot;https://medium.com/genymobile/gnirehtet-reverse-tethering-android-2afacdbdaec7&quot;&gt;&lt;em&gt;gnirehtet&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.genymobile.com/&quot;&gt;Genymobile&lt;/a&gt; accepted to open source it: &lt;a href=&quot;https://github.com/Genymobile/scrcpy&quot;&gt;scrcpy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;https://github.com/Genymobile/scrcpy/blob/master/README.md&quot;&gt;build, install and run&lt;/a&gt; it.&lt;/p&gt;
&lt;h2 id=&quot;how-does-scrcpy-work&quot;&gt;How does scrcpy work?&lt;/h2&gt;
&lt;p&gt;The application executes a server on the device. The client and the server communicate via a socket over an &lt;em&gt;adb tunnel&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The server streams an &lt;a href=&quot;https://en.wikipedia.org/wiki/H.264/MPEG-4_AVC&quot;&gt;H.264&lt;/a&gt; video of the device screen. The client decodes the video frames and displays them.&lt;/p&gt;
&lt;p&gt;The client captures input (keyboard and mouse) events, sends them to the server, which injects them to the device.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/Genymobile/scrcpy/blob/master/DEVELOP.md&quot;&gt;documentation&lt;/a&gt; gives more details.&lt;/p&gt;
&lt;p&gt;Here, I will detail several technical aspects of the application likely to interest developers.&lt;/p&gt;
&lt;h2 id=&quot;minimize-latency&quot;&gt;Minimize latency&lt;/h2&gt;
&lt;h3 id=&quot;no-buffering&quot;&gt;No buffering&lt;/h3&gt;
&lt;p&gt;It takes time to encode, transmit and decode the video stream. To minimize latency, we must avoid any additional delay.&lt;/p&gt;
&lt;p&gt;For example, let’s stream the screen with &lt;code class=&quot;highlighter-rouge&quot;&gt;screenrecord&lt;/code&gt; and play it with VLC:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;codehilite&quot;&gt;
&lt;code&gt;adb exec-out screenrecord --output-format=h264 - | vlc - --demux h264
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Initially, it works, but quickly the latency increases and frames are broken. The reason is that VLC associates a &lt;a href=&quot;https://en.wikipedia.org/wiki/Presentation_timestamp&quot;&gt;PTS&lt;/a&gt; to frames, and buffers the stream to play frames at some target time.&lt;/p&gt;
&lt;p&gt;As a consequence, it sometimes prints such errors on &lt;em&gt;stderr&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;codehilite&quot;&gt;
&lt;code&gt;ES_OUT_SET_(GROUP_)PCR  is called too late (pts_delay increased to 300 ms)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just before I started the project, Philippe, a colleague who played with &lt;a href=&quot;https://en.wikipedia.org/wiki/WebRTC&quot;&gt;WebRTC&lt;/a&gt;, advised me to “manually” decode (using &lt;em&gt;FFmpeg&lt;/em&gt;) and render frames, to avoid any additional latency. This saved me from wasting time, it was the right solution.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Genymobile/scrcpy/blob/master/DEVELOP.md#decoder&quot;&gt;Decoding&lt;/a&gt; the video stream to retrieve individual frames &lt;a href=&quot;https://www.ffmpeg.org/doxygen/3.4/group__lavc__encdec.html&quot;&gt;with FFmpeg&lt;/a&gt; is rather &lt;a href=&quot;https://github.com/Genymobile/scrcpy/blob/v1.0/app/src/decoder.c#L94-L110&quot;&gt;straightforward&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;skip-frames&quot;&gt;Skip frames&lt;/h3&gt;
&lt;p&gt;If, for any reason, the rendering is delayed, decoded frames are dropped so that &lt;em&gt;scrcpy&lt;/em&gt; always displays the last decoded frame.&lt;/p&gt;
&lt;p&gt;Note that this behavior may be changed with a &lt;a href=&quot;https://github.com/Genymobile/scrcpy/blob/v1.0/app/meson.build#L81&quot;&gt;configuration flag&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;codehilite&quot;&gt;
&lt;code&gt;mesonconf x -Dskip_frames=false
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;run-a-java-main-on-android&quot;&gt;Run a Java main on Android&lt;/h2&gt;
&lt;p&gt;Capturing the device screen requires some privileges, which are granted to &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is possible to execute Java code as &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt; on Android, by invoking &lt;code class=&quot;highlighter-rouge&quot;&gt;app_process&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;adb shell&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;hello-world&quot;&gt;Hello, world!&lt;/h3&gt;
&lt;p&gt;Here is a simple Java application:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Let’s compile and &lt;em&gt;dex&lt;/em&gt; it:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;codehilite&quot;&gt;
&lt;code&gt;javac -source 1.7 -target 1.7 HelloWorld.java
&quot;$ANDROID_HOME&quot;/build-tools/27.0.2/dx \
    --dex --output classes.dex HelloWorld.class
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, we push &lt;code class=&quot;highlighter-rouge&quot;&gt;classes.dex&lt;/code&gt; to an Android device:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;codehilite&quot;&gt;
&lt;code&gt;adb push classes.dex /data/local/tmp/
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And execute it:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;codehilite&quot;&gt;
&lt;code&gt;$ adb shell CLASSPATH=/data/local/tmp/classes.dex app_process / HelloWorld
Hello, world!
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;access-the-android-framework&quot;&gt;Access the Android framework&lt;/h3&gt;
&lt;p&gt;The application can access the Android framework at runtime.&lt;/p&gt;
&lt;p&gt;For example, let’s use &lt;code class=&quot;highlighter-rouge&quot;&gt;android.os.SystemClock&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.os.SystemClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SystemClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; world!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We link our class against &lt;code class=&quot;highlighter-rouge&quot;&gt;android.jar&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;codehilite&quot;&gt;
&lt;code&gt;javac -source 1.7 -target 1.7 \
    -cp &quot;$ANDROID_HOME&quot;/platforms/android-27/android.jar
    HelloWorld.java
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then run it as before.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note that scrcpy also needs to access &lt;a href=&quot;https://github.com/Genymobile/scrcpy/blob/master/DEVELOP.md#hidden-methods&quot;&gt;hidden methods&lt;/a&gt; from the framework. In that case, linking against &lt;code class=&quot;highlighter-rouge&quot;&gt;android.jar&lt;/code&gt; is not sufficient, so it uses &lt;a href=&quot;https://en.wikipedia.org/wiki/Reflection_(computer_programming)&quot;&gt;reflection&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;like-an-apk&quot;&gt;Like an APK&lt;/h3&gt;
&lt;p&gt;The execution also works if &lt;code class=&quot;highlighter-rouge&quot;&gt;classes.dex&lt;/code&gt; is embedded in a zip/jar:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;codehilite&quot;&gt;
&lt;code&gt;jar cvf hello.jar classes.dex
adb push hello.jar /data/local/tmp/
adb shell CLASSPATH=/data/local/tmp/hello.jar app_process / HelloWorld
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You know an example of a zip containing &lt;code class=&quot;highlighter-rouge&quot;&gt;classes.dex&lt;/code&gt;? An &lt;a href=&quot;https://en.wikipedia.org/wiki/Android_application_package&quot;&gt;APK&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Therefore, it works for any installed APK containing a class with a main method:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;codehilite&quot;&gt;
&lt;code&gt;$ adb install myapp.apk
…
$ adb shell pm path my.app.package
package:/data/app/my.app.package-1/base.apk
$ adb shell CLASSPATH=/data/app/my.app.package-1/base.apk \
    app_process / HelloWorld
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;in-scrcpy&quot;&gt;In scrcpy&lt;/h3&gt;
&lt;p&gt;To simplify the build system, I decided to build the server as an APK using &lt;a href=&quot;https://gradle.org/&quot;&gt;gradle&lt;/a&gt;, even if it’s not a real Android application: &lt;em&gt;gradle&lt;/em&gt; provides tasks for running tests, checking style, etc.&lt;/p&gt;
&lt;p&gt;Invoked that way, the server is authorized to capture the device screen.&lt;/p&gt;
&lt;h2 id=&quot;improve-startup-time&quot;&gt;Improve startup time&lt;/h2&gt;
&lt;h3 id=&quot;quick-installation&quot;&gt;Quick installation&lt;/h3&gt;
&lt;p&gt;Nothing is required to be installed on the device by the user: at startup, the client is responsible for executing the server on the device.&lt;/p&gt;
&lt;p&gt;We saw that we can execute the main method of the server from an APK either:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;installed, or&lt;/li&gt;
&lt;li&gt;pushed to &lt;code class=&quot;highlighter-rouge&quot;&gt;/data/local/tmp&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Which one to choose?&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;codehilite&quot;&gt;
&lt;code&gt;$ time adb install server.apk
…
real    0m0,963s
…

$ time adb push server.apk /data/local/tmp/
…
real    0m0,022s
…
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So I decided to push.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;/data/local/tmp&lt;/code&gt; is readable and writable by &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt;, but not world-writable, so a malicious application may not replace the server just before the client executes it.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;parallelization&quot;&gt;Parallelization&lt;/h3&gt;
&lt;p&gt;If you executed the &lt;em&gt;Hello, world!&lt;/em&gt; in the previous section, you may have noticed that running &lt;code class=&quot;highlighter-rouge&quot;&gt;app_process&lt;/code&gt; takes some time: &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello, World!&lt;/code&gt; is not printed before some delay (between 0.5 and 1 second).&lt;/p&gt;
&lt;p&gt;In the client, initializing SDL also takes some time.&lt;/p&gt;
&lt;p&gt;Therefore, these initialization steps &lt;a href=&quot;https://github.com/Genymobile/scrcpy/commit/90a46b4c45637d083e877020d85ade52a9a5fa8e&quot;&gt;have been parallelized&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;clean-up-the-device&quot;&gt;Clean up the device&lt;/h2&gt;
&lt;p&gt;After usage, we want to remove the server (&lt;code class=&quot;highlighter-rouge&quot;&gt;/data/local/tmp/scrcpy-server.jar&lt;/code&gt;) from the device.&lt;/p&gt;
&lt;p&gt;We could remove it on exit, but then, it would be left on device disconnection.&lt;/p&gt;
&lt;p&gt;Instead, once the server is opened by &lt;code class=&quot;highlighter-rouge&quot;&gt;app_process&lt;/code&gt;, &lt;em&gt;scrcpy&lt;/em&gt; &lt;a href=&quot;http://man7.org/linux/man-pages/man2/unlink.2.html&quot;&gt;unlink&lt;/a&gt;s (&lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt;) it. Thus, the file is present only for less than 1 second (it is removed even before the screen is displayed).&lt;/p&gt;
&lt;p&gt;The file itself (not its name) is actually removed when the last associated open file descriptor is closed (at the latest, when &lt;code class=&quot;highlighter-rouge&quot;&gt;app_process&lt;/code&gt; dies).&lt;/p&gt;
&lt;h2 id=&quot;handle-text-input&quot;&gt;Handle text input&lt;/h2&gt;
&lt;p&gt;Handling input received from a keyboard is more complicated than I thought.&lt;/p&gt;
&lt;h3 id=&quot;events&quot;&gt;Events&lt;/h3&gt;
&lt;p&gt;There are 2 kinds of “keyboard” events:&lt;/p&gt;
&lt;p&gt;Key events &lt;a href=&quot;https://wiki.libsdl.org/CategoryKeyboard&quot;&gt;provide&lt;/a&gt; both the &lt;em&gt;scancode&lt;/em&gt; (the physical location of a key on the keyboard) and the &lt;em&gt;keycode&lt;/em&gt; (which depends on the keyboard layout). Only &lt;em&gt;keycodes&lt;/em&gt; are used by &lt;em&gt;scrcpy&lt;/em&gt; (it doesn’t need the location of physical keys).&lt;/p&gt;
&lt;p&gt;However, key events are not sufficient to handle &lt;a href=&quot;https://wiki.libsdl.org/Tutorials/TextInput&quot;&gt;text input&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Sometimes it can take multiple key presses to produce a character. Sometimes a single key press can produce multiple characters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even simple characters may not be handled easily with key events, since they depend on the layout. For example, on a French keyboard, typing &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; &lt;em&gt;(dot)&lt;/em&gt; generates &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift&lt;/code&gt;+&lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Therefore, &lt;em&gt;scrcpy&lt;/em&gt; forwards key events to the device only for a &lt;a href=&quot;https://github.com/Genymobile/scrcpy/blob/v1.0/app/src/convert.c#L75-L87&quot;&gt;limited set of keys&lt;/a&gt;. The remaining are handled by &lt;em&gt;text input&lt;/em&gt; events.&lt;/p&gt;
&lt;h3 id=&quot;injecting-text&quot;&gt;Injecting text&lt;/h3&gt;
&lt;p&gt;On the Android side, we may not inject text directly (injecting a &lt;a href=&quot;https://developer.android.com/reference/android/view/KeyEvent.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;KeyEvent&lt;/code&gt;&lt;/a&gt; created by &lt;a href=&quot;https://developer.android.com/reference/android/view/KeyEvent.html#KeyEvent(long,%20java.lang.String,%20int,%20int)&quot;&gt;the relevant constructor&lt;/a&gt; does not work). Instead, we can retrieve a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyEvent&lt;/code&gt;s to generate for a &lt;code class=&quot;highlighter-rouge&quot;&gt;char[]&lt;/code&gt;, using &lt;a href=&quot;https://developer.android.com/reference/android/view/KeyCharacterMap.html#getEvents(char[])&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getEvents(char[])&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'?'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;KeyEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;charMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;events&lt;/code&gt; is initialized with an array of 4 events:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;press &lt;code class=&quot;highlighter-rouge&quot;&gt;KEYCODE_SHIFT_LEFT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;press &lt;code class=&quot;highlighter-rouge&quot;&gt;KEYCODE_SLASH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;release &lt;code class=&quot;highlighter-rouge&quot;&gt;KEYCODE_SLASH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;release &lt;code class=&quot;highlighter-rouge&quot;&gt;KEYCODE_SHIFT_LEFT&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Genymobile/scrcpy/blob/v1.0/server/src/main/java/com/genymobile/scrcpy/EventController.java#L103-L107&quot;&gt;Injecting&lt;/a&gt; those events correctly generates the char &lt;code class=&quot;highlighter-rouge&quot;&gt;'?'&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;handling-accented-characters&quot;&gt;Handling accented characters&lt;/h3&gt;
&lt;p&gt;Unfortunately, the previous method only works for ASCII characters:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'é'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;KeyEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;charMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// events is null!!!&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I first thought there was no way to inject such events from there, until I discussed with Philippe (yes, the same as earlier), who knew the solution: it works when we decompose the characters using &lt;a href=&quot;https://source.android.com/devices/input/key-character-map-files#behaviors&quot;&gt;combining diacritical dead key characters&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Concretely, instead of injecting &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;é&quot;&lt;/code&gt;, we inject &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;\u0301e&quot;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\u0301'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;KeyEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;charMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// now, there are events&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Therefore, to support accented characters, &lt;em&gt;scrcpy&lt;/em&gt; attempts to &lt;a href=&quot;https://github.com/Genymobile/scrcpy/blob/v1.0/server/src/main/java/com/genymobile/scrcpy/EventController.java#L97&quot;&gt;decompose&lt;/a&gt; the characters using &lt;a href=&quot;https://github.com/Genymobile/scrcpy/blob/v1.0/server/src/main/java/com/genymobile/scrcpy/KeyComposition.java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;KeyComposition&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;EDIT: Accented characters do not work with the virtual keyboard Gboard (the default Google keyboard), but work with the default (AOSP) keyboard and SwiftKey.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;set-a-window-icon&quot;&gt;Set a window icon&lt;/h2&gt;
&lt;p&gt;The application window may have an icon, used in the title bar (for some desktop environments) and/or in the desktop taskbar.&lt;/p&gt;
&lt;p&gt;The window icon must be set from an &lt;a href=&quot;https://wiki.libsdl.org/SDL_Surface&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SDL_Surface&lt;/code&gt;&lt;/a&gt; by &lt;a href=&quot;https://wiki.libsdl.org/SDL_SetWindowIcon&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SDL_SetWindowIcon&lt;/code&gt;&lt;/a&gt;. Creating the surface with the icon content is up to the developer. For exemple, we could decide to load the icon from a PNG file, or directly from its raw pixels in memory.&lt;/p&gt;
&lt;p&gt;Instead, another colleague, &lt;a href=&quot;http://agateau.com/&quot;&gt;Aurélien&lt;/a&gt;, suggested I use the &lt;a href=&quot;https://en.wikipedia.org/wiki/X_PixMap&quot;&gt;XPM&lt;/a&gt; image format, which is also a valid C source code: &lt;a href=&quot;https://github.com/Genymobile/scrcpy/blob/v1.0/app/src/icon.xpm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;icon.xpm&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that the image is not the content of the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;icon_xpm&lt;/code&gt; declared in &lt;code class=&quot;highlighter-rouge&quot;&gt;icon.xpm&lt;/code&gt;: it’s the whole file! Thus, &lt;code class=&quot;highlighter-rouge&quot;&gt;icon.xpm&lt;/code&gt; may be both directly opened in &lt;a href=&quot;https://www.gimp.org/&quot;&gt;Gimp&lt;/a&gt; and included in C source code:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;icon.xpm&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As a benefit, we directly “recognize” the icon from the source code, and we can patch it easily: in debug mode, the &lt;a href=&quot;https://github.com/Genymobile/scrcpy/blob/v1.0/app/src/tinyxpm.c#L34-L37&quot;&gt;icon color&lt;/a&gt; is changed.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Developing this project was an awesome and motivating experience. I’ve learned a lot (I never used &lt;em&gt;SDL&lt;/em&gt; or &lt;em&gt;libav/FFmpeg&lt;/em&gt; before).&lt;/p&gt;
&lt;p&gt;The resulting application works better than I initially expected, and I’m happy to have been able to open source it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Discuss on &lt;a href=&quot;https://news.ycombinator.com/item?id=16544977&quot;&gt;Hacker News&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 08 Mar 2018 15:41:17 +0000</pubDate>
<dc:creator>rom1v</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.rom1v.com/2018/03/introducing-scrcpy/</dc:identifier>
</item>
<item>
<title>Keybase is now supported by the Stellar Development Foundation</title>
<link>https://keybase.io/blog/keybase-stellar</link>
<guid isPermaLink="true" >https://keybase.io/blog/keybase-stellar</guid>
<description>&lt;p&gt;March 8, 2018&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://keybase.io/images/blog/sdf/sdf_rocket.png&quot; width=&quot;150&quot; height=&quot;150&quot;/&gt;&lt;/center&gt;
&lt;p&gt;The nonprofit &lt;a href=&quot;https://stellar.org&quot;&gt;Stellar.org&lt;/a&gt; is now funding Keybase. If you follow cryptocurrencies, you might know of &lt;a href=&quot;https://coinmarketcap.com/&quot;&gt;Lumens&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Later this year we will release something big involving Stellar. Hint: it'll be great for Keybase users and Stellar usability.&lt;/p&gt;
&lt;p&gt;I'll divide this post into two halves: (1) why we like Stellar, and (2) a summary of what's next.&lt;/p&gt;
&lt;h2 id=&quot;part-1-why-we-like-stellar&quot;&gt;Part 1: Why we like Stellar&lt;/h2&gt;
&lt;p&gt;We think Stellar can fulfill Bitcoin's original goal of &lt;strong&gt;fast, cheap, worldwide payments.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stellar combines all of the following traits:&lt;/p&gt;
&lt;h3 id=&quot;1-transaction-fees-are-basically-zero&quot;&gt;1. Transaction fees are basically zero&lt;/h3&gt;
&lt;p&gt;A transaction in Stellar costs &lt;em&gt;a tiny fraction of a penny&lt;/em&gt;, and it will scale to far more transactions than Bitcoin. With Stellar, you can send someone $1.00 or $0.25 or even $0.01. Let's not forget the micropayments dream.&lt;/p&gt;
&lt;h3 id=&quot;2-it-is-fast&quot;&gt;2. It is fast&lt;/h3&gt;
&lt;p&gt;As I'm writing this, the average ledger time on Stellar is 4.74 seconds. And &lt;a href=&quot;https://www.stellar.org/blog/2018-Stellar-Roadmap/&quot;&gt;Stellar's lightning network&lt;/a&gt; will launch this year.&lt;/p&gt;
&lt;h3 id=&quot;3-stellar-is-not-bad-for-the-environment&quot;&gt;3. Stellar is not bad for the environment&lt;/h3&gt;
&lt;p&gt;We are disturbed by Bitcoin's energy consumption. BTC alone is consuming as much electricity as all of Portugal, and roughly 1/500&lt;sup&gt;th&lt;/sup&gt; of all the electricity &lt;em&gt;in the world.&lt;/em&gt;&lt;/p&gt;
&lt;center&gt;
&lt;div&gt;&lt;img src=&quot;https://keybase.io/images/blog/sdf/btc_energy.png&quot; class=&quot;img img-responsive&quot;/&gt;&lt;/div&gt;
&lt;small&gt;Source: &lt;a href=&quot;https://digiconomist.net/bitcoin-energy-consumption&quot;&gt;Digiconimist.net&lt;/a&gt;&lt;/small&gt;&lt;/center&gt;
&lt;p&gt;The above graph shows it has climbed 400% in just 12 months. At this rate, Bitcoin will soon use more electricity than the entire United States of America.&lt;/p&gt;
&lt;p&gt;I suspect this is an overestimate, but the trend is terrifying.&lt;/p&gt;
&lt;center&gt;
&lt;div&gt;&lt;img src=&quot;https://keybase.io/images/blog/sdf/oh_fuck_the_earth.gif&quot; class=&quot;img img-responsive&quot;/&gt;&lt;/div&gt;
&lt;small&gt;Source: &lt;a href=&quot;https://twitter.com/ZLabe/status/967973776393728000&quot;&gt;some dude on Twitter&lt;/a&gt; I don't know&lt;/small&gt;&lt;/center&gt;
&lt;p&gt;It's very likely the world is at great risk right now, and as cryptocurrency scales, the share of blame it shoulders for climate change will scale, too. You should fear a backlash. There may be social and legal opposition to any cryptocurrencies which haven't switched away from proof-of-work.&lt;/p&gt;
&lt;p&gt;And traditional banking, with its branches and offices and free dog treats, &lt;strong&gt;uses even more electricity than Bitcoin&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Stellar does not burn electricity just to form consensus. It has no proof-of-work component.&lt;/p&gt;
&lt;h3 id=&quot;4-other-projects-are-jumping-on-board&quot;&gt;4. Other projects are jumping on board&lt;/h3&gt;
&lt;p&gt;Many other projects are jumping on, either by having ICOs on Stellar or by tokenizing real-world assets like carbon credits or gold.&lt;/p&gt;
&lt;p&gt;Most recently, a team including Moxie Marlinspike (of Signal) announced MobileCoin, to run on Stellar's protocol. And Kik is switching from Ethereum to the Stellar Network.&lt;/p&gt;
&lt;p&gt;ICO's have begun switching because Ethereum and its scripting are &quot;too expensive and too insecure.&quot; [&lt;a href=&quot;https://www.coindesk.com/why-a-39-million-ico-chose-stellar-over-ethereum/&quot;&gt;link&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;And the CEO of Kik said: &quot;We've been using Ethereum to date, and to be honest I call it the dial-up era of blockchain.&quot;&lt;/p&gt;
&lt;h3 id=&quot;5-stellar-understands-real-currencies&quot;&gt;5. Stellar understands real currencies&lt;/h3&gt;
&lt;p&gt;Stellar's protocol natively understands currencies paired with issuers.&lt;/p&gt;
&lt;p&gt;Beyond Lumens, your Stellar wallet can hold a currency you like (dollars, euros, litecoin), issued by &quot;anchors&quot; you choose to trust. You can think of them as cryptocurrency-tracked IOU's. And you can trade them.&lt;/p&gt;
&lt;p&gt;In the future, I may hold &lt;em&gt;Bank of America USD&lt;/em&gt;, and redeem them at Bank of America. But perhaps you think BoA is a POS, and you only trust &lt;em&gt;Chase USD&lt;/em&gt;. If I send you my dollars, the Stellar network finds the cheapest, fastest conversion into a dollar you trust. This isn't a smart contract you write or paste in. It's built into the network.&lt;/p&gt;
&lt;p&gt;Similarly, I could send my dollars to a friend in Germany, and they would arrive as euros. On Stellar, this would be an &lt;a href=&quot;https://en.wikipedia.org/wiki/Atomicity_(database_systems)&quot;&gt;atomic transaction&lt;/a&gt;. &lt;strong&gt;No one would get stuck with a currency or issuer they didn't trust.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;6-the-network-implements-a-decentralized-exchange&quot;&gt;6. The network implements a decentralized exchange&lt;/h3&gt;
&lt;p&gt;Stellar's network understands limit orders, which means Stellar itself acts as an exchange. This model powers the above-mentioned atomic payments. Even more impressive: it lets traders trade &lt;strong&gt;without exposing their private keys to someone else.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;7-it-is-live&quot;&gt;7. It is live&lt;/h3&gt;
&lt;p&gt;Stellar is not a pending white paper or future project. All the above features are live. And Lumens are actively traded on exchanges in very high volumes.&lt;/p&gt;
&lt;h3 id=&quot;8-we-have-a-history-with-its-chief-scientist-david-mazi-res&quot;&gt;8. We have a history with its chief scientist, David Mazières&lt;/h3&gt;
&lt;p&gt;A big part of our own professional opinion comes from the team.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.scs.stanford.edu/~dm/home/papers/&quot;&gt;Here's a list&lt;/a&gt; of David's papers.&lt;/p&gt;
&lt;p&gt;Search that page to see that he has co-authored:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;5 papers with &lt;a href=&quot;https://keybase.io/max&quot;&gt;Max Krohn&lt;/a&gt;, Keybase's CEO&lt;/li&gt;
&lt;li&gt;4 papers with Dan Boneh, an advisor to Keybase&lt;/li&gt;
&lt;li&gt;13 papers with M. Frans Kaashoek, an advisor to Keybase&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In other words, Keybase and Stellar have a history of working together.&lt;/p&gt;
&lt;h2&gt;Part 2: What is next&lt;/h2&gt;
&lt;p&gt;Keybase will continue to build out all its existing features. We will add polish, performance, bug-fixes, and enhancements to:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;chat&lt;/li&gt;
&lt;li&gt;KBFS&lt;/li&gt;
&lt;li&gt;team management&lt;/li&gt;
&lt;li&gt;encrypted git&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We will also focus on some things we've been ignoring:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;better onboarding&lt;/li&gt;
&lt;li&gt;&quot;growth hacking&quot; type stuff&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;All while integrating certain Stellar features &lt;em&gt;directly into Keybase's apps&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Specifically, here's a list of payments problems we want to tackle:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;to send someone cryptocurrency, &lt;strong&gt;you shouldn't need to pass around big ugly addresses&lt;/strong&gt;. It's annoying and dangerous.&lt;/li&gt;
&lt;li&gt;you should be able to address someone however you know them - and preferably not with a phone number.&lt;/li&gt;
&lt;li&gt;you shouldn't have to paste a private key into a webpage or browser extension&lt;/li&gt;
&lt;li&gt;your wallet should persist across multiple devices.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If these problems sound familiar, it's because they're the exact problems we've been working on for the last 3 years.&lt;/p&gt;
&lt;p&gt;And we'll be expanding the team to do it. So yes, &lt;a href=&quot;https://keybase.io/jobs&quot;&gt;we are hiring&lt;/a&gt;. More than ever, in fact.&lt;/p&gt;
&lt;p&gt;Very happy with this partnership,&lt;/p&gt;&lt;p&gt;— Chris Coyne&lt;br/&gt;&lt;a href=&quot;https://keybase.io/chris&quot;&gt;https://keybase.io/chris&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;faq&quot;&gt;FAQ&lt;/h2&gt;
&lt;h3 id=&quot;are-you-hiring-&quot;&gt;Are you hiring?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://keybase.io/jobs&quot;&gt;Yup, as stated above!&lt;/a&gt; We are looking for engineers and designers.&lt;/p&gt;
&lt;h3 id=&quot;where-can-i-talk-about-this-&quot;&gt;Where can I talk about this?&lt;/h3&gt;
&lt;p&gt;There is now an open &lt;strong&gt;&lt;a href=&quot;https://keybase.io/team/stellar.public&quot;&gt;stellar team&lt;/a&gt;&lt;/strong&gt; on Keybase. Anyone can join the team to discuss Stellar, Stellar+Keybase, etc.&lt;/p&gt;
&lt;h3 id=&quot;does-keybase-itself-have-lumens-&quot;&gt;Does Keybase itself have Lumens?&lt;/h3&gt;
&lt;p&gt;Thus far, SDF has supported us with cash — &quot;dirty fiat&quot; — which is what it takes to build software. But yes, we will hold Lumens later.&lt;/p&gt;
&lt;h3 id=&quot;but-stellar-is-not-turing-complete&quot;&gt;But Stellar is not Turing complete&lt;/h3&gt;
&lt;p&gt;Ok&lt;/p&gt;
&lt;h3 id=&quot;hodl-on-a-second-aren-t-these-anchored-currencies-the-same-thing-as-tethers-usdt-i-hear-bad-things-about-them-&quot;&gt;Hodl on a second - aren't these anchored currencies the same thing as &quot;tethers&quot; (USDT)? I hear bad things about them.&lt;/h3&gt;
&lt;p&gt;Sort of. How Stellar's view of real-world currencies is different:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;you choose which issuing parties to trust. No one seems to know if Tethers are redeemable.&lt;/li&gt;
&lt;li&gt;the exchange itself is decentralized; you can change your trust lines whenever you like, and you can trade away the rubbish.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This is very different from being stuck in a centralized exchange with one questionable currency-pegged token.&lt;/p&gt;
&lt;h3 id=&quot;what-about-keybase-profiles-support-of-bitcoin-and-zcash-addresses-&quot;&gt;What about Keybase profiles' support of Bitcoin and Zcash addresses?&lt;/h3&gt;
&lt;p&gt;This won't change. We continue to be big fans of Zcash (for all the reasons &lt;a href=&quot;https://keybase.io/blog/keybase-and-zcash&quot;&gt;mentioned here&lt;/a&gt;), Ethereum (for its flexibility), and Bitcoin (for its relative stability). We're also excited for Filecoin.&lt;/p&gt;
&lt;p&gt;We really are pro cryptocurrency across the board.&lt;/p&gt;
&lt;h3 id=&quot;where-can-i-learn-about-stellar-&quot;&gt;Where can I learn about Stellar?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=vmwnhZmEZjc&quot;&gt;Here's a Talk at Google about it&lt;/a&gt;. After the video, you could read the &lt;a href=&quot;https://www.stellar.org/papers/stellar-consensus-protocol.pdf&quot;&gt;Stellar Consensus Protocol paper&lt;/a&gt;. And &lt;a href=&quot;https://www.stellar.org/blog/keybase-and-stellar-partnership/&quot;&gt;here's their blog post&lt;/a&gt; announcing their support of us.&lt;/p&gt;
&lt;h3 id=&quot;won-t-this-distract-the-keybase-team-from-its-other-work-&quot;&gt;Won't this distract the Keybase team from its other work?&lt;/h3&gt;
&lt;p&gt;All of our existing product (chat, teams, files, identity, etc.) should only get better, with more total resources put into them.&lt;/p&gt;
&lt;h3 id=&quot;so-are-you-launching-a-coin-like-mobilecoin-or-kik-s-&quot;&gt;So are you launching a coin, like MobileCoin or Kik's?&lt;/h3&gt;
&lt;p&gt;No. We will be helping Stellar in general, not launching our own coin.&lt;/p&gt;
&lt;h3 id=&quot;have-you-ever-heard-of-the-dutch-tulip-craze-&quot;&gt;Have you ever heard of the Dutch tulip craze?&lt;/h3&gt;
&lt;p&gt;It sounds familiar. Have you ever heard of &lt;a href=&quot;https://en.wikipedia.org/wiki/Proof_by_example&quot;&gt;proof by example&lt;/a&gt;?&lt;/p&gt;
&lt;h3 id=&quot;any-advice-on-storing-cryptocurrency-today-&quot;&gt;Any advice on storing cryptocurrency today?&lt;/h3&gt;
&lt;p&gt;Advice we've gotten is the &lt;a href=&quot;https://www.ledgerwallet.com/products/ledger-nano-s&quot;&gt;Ledger Nano S&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;what-about-monero-&quot;&gt;WHAT ABOUT MONERO??&lt;/h3&gt;
&lt;p&gt;...&lt;/p&gt;
</description>
<pubDate>Thu, 08 Mar 2018 14:37:57 +0000</pubDate>
<dc:creator>jamessun</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://keybase.io/blog/keybase-stellar</dc:identifier>
</item>
<item>
<title>An argument that companies should pay users for their data</title>
<link>https://www.nytimes.com/2018/03/06/business/economy/user-data-pay.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2018/03/06/business/economy/user-data-pay.html</guid>
<description>&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;322&quot; data-total-count=&quot;1588&quot; id=&quot;story-continues-2&quot;&gt;The idea has been around for a bit. Jaron Lanier, the tech philosopher and virtual-reality pioneer who now works for Microsoft Research, proposed it in his 2013 book, “&lt;a href=&quot;http://www.nytimes.com/2013/05/06/books/who-owns-the-future-by-jaron-lanier.html&quot;&gt;Who Owns the Future?&lt;/a&gt;,” as a needed corrective to an online economy mostly financed by advertisers’ covert manipulation of users’ consumer choices.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;277&quot; data-total-count=&quot;1865&quot;&gt;It is being picked up in “Radical Markets,” a book due out shortly from Eric A. Posner of the University of Chicago Law School and E. Glen Weyl, principal researcher at Microsoft. And it is playing into European efforts to collect tax revenue from American internet giants.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;309&quot; data-total-count=&quot;2174&quot;&gt;In &lt;a href=&quot;https://g8fip1kplyr33r3krz5b97d1-wpengine.netdna-ssl.com/wp-content/uploads/2018/02/taxation-of-digital-economy-2.pdf&quot;&gt;a report&lt;/a&gt; obtained last month &lt;a href=&quot;https://www.politico.eu/article/technology-brussels-digital-tax-move-raises-transatlantic-stakes/&quot;&gt;by Politico&lt;/a&gt;, the European Commission proposes to impose a tax on the revenue of digital companies based on their users’ location, on the grounds that “a significant part of the value of a business is created where the users are based and data is collected and processed.”&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;326&quot; data-total-count=&quot;2500&quot;&gt;Users’ data is a valuable commodity. Facebook offers advertisers precisely targeted audiences based on user profiles. YouTube, too, uses users’ preferences to tailor its feed. Still, this pales in comparison with how valuable data is about to become, as the footprint of artificial intelligence extends across the economy.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;301&quot; data-total-count=&quot;2801&quot;&gt;Data is the crucial ingredient of the A.I. revolution. Training systems to perform even relatively straightforward tasks like voice translation, voice transcription or image recognition requires vast amounts of data — like tagged photos, to identify their content, or recordings with transcriptions.&lt;/p&gt;
&lt;div id=&quot;story-ad-1&quot; class=&quot;story-ad ad ad-placeholder nocontent robots-nocontent&quot;&gt;

&lt;a class=&quot;visually-hidden skip-to-text-link&quot; href=&quot;https://www.nytimes.com/2018/03/06/business/economy/user-data-pay.html#story-continues-3&quot;&gt;Continue reading the main story&lt;/a&gt;&lt;/div&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;299&quot; data-total-count=&quot;3100&quot; id=&quot;story-continues-3&quot;&gt;“Among leading A.I. teams, many can likely replicate others’ software in, at most, one to two years,” &lt;a href=&quot;https://hbr.org/2016/11/what-artificial-intelligence-can-and-cant-do-right-now&quot;&gt;notes the technologist Andrew Ng&lt;/a&gt;. “But it is exceedingly difficult to get access to someone else’s data. Thus data, rather than software, is the defensible barrier for many businesses.”&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;355&quot; data-total-count=&quot;3455&quot;&gt;We may think we get a fair deal, offering our data as the price of sharing puppy pictures. By other metrics, we are being victimized: In the largest technology companies, the share of income going to labor is only about 5 to 15 percent, Mr. Posner and Mr. Weyl write. That’s way below Walmart’s 80 percent. Consumer data amounts to work they get free.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;313&quot; data-total-count=&quot;3768&quot;&gt;“If these A.I.-driven companies represent the future of broader parts of the economy,” they argue, “without something basic changing in their business model, we may be headed for a world where labor’s share falls dramatically from its current roughly 70 percent to something closer to 20 to 30 percent.”&lt;/p&gt;


&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;374&quot; data-total-count=&quot;4142&quot;&gt;As Mr. Lanier, Mr. Posner and Mr. Weyl point out, it is ironic that humans are providing free data to train the artificial-intelligence systems to replace workers across the economy. Commentators from both left and right fret over how ordinary people will put food on the table once robots take all the jobs. Perhaps a universal basic income, funded by taxes, is the answer?&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;417&quot; data-total-count=&quot;4559&quot;&gt;How about paying people for the data they produced to train the robots? If A.I. accounted for 10 percent of the economy and the big-data companies paid two-thirds of their income for data — the same as labor’s share of income across the economy — the share of income going to “workers” would rise drastically. By Mr. Weyl and Mr. Posner’s reckoning, the median household of four would gain $20,000 a year.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;477&quot; data-total-count=&quot;5036&quot;&gt;A critical consideration is that if people were paid for their data, its quality and value would increase. Facebook could directly ask users to tag the puppy pictures to train the machines. It could ask translators to upload their translations. Facebook and Google could demand quality information if the value of the transaction were more transparent. Unwilling to enter in a direct quid pro quo with their users, the data titans must make do with whatever their users submit.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;466&quot; data-total-count=&quot;5502&quot;&gt;The transition would not be painless. We would need to figure out systems to put value on data. Your puppy pictures might turn out to be worthless, but that college translation from Serbo-Croatian could be valuable. Barred from free data, YouTube and Facebook might charge a user fee for their service — like Netflix. Alternatively, they might make their money from training A.I. systems and pay some royalty stream to the many people whose data helped train them.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;201&quot; data-total-count=&quot;5703&quot;&gt;But whatever the cost, the transformation seems worthwhile. Notably, it could help resolve one of the most relevant questions coming into focus in this new technological age: Who will control the data?&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;365&quot; data-total-count=&quot;6068&quot;&gt;Today, the dominant data harvesters in the business are Google and Facebook, with Amazon, Apple and Microsoft some way behind. Their dominance cannot really be challenged: Could you think of a rival search engine? Could another social network replace the one all your friends are on? This dominance might matter less if companies had to pay for their users’ data.&lt;/p&gt;
&lt;div id=&quot;story-ad-2&quot; class=&quot;story-ad ad ad-placeholder nocontent robots-nocontent&quot;&gt;

&lt;a class=&quot;visually-hidden skip-to-text-link&quot; href=&quot;https://www.nytimes.com/2018/03/06/business/economy/user-data-pay.html#story-continues-4&quot;&gt;Continue reading the main story&lt;/a&gt;&lt;/div&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;328&quot; data-total-count=&quot;6396&quot; id=&quot;story-continues-4&quot;&gt;Google and Facebook and Amazon would not be able to extend the network effects that cemented their place at the top of the technology ecosystem to the world of A.I. Everybody wants to be on Facebook because everybody’s friends are on Facebook. But this dominance could be eroded if rivals made direct offers of money for data.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;294&quot; data-total-count=&quot;6690&quot;&gt;Companies with different business models might join the fray. “This is an opportunity for other companies to enter and say look, we will pay you for this data,” Mr. Posner said. “All this is so new that ordinary people haven’t figured out how manipulated they are by these companies.”&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;376&quot; data-total-count=&quot;7066&quot;&gt;The big question, of course, is how we get there from here. My guess is that it would be naïve to expect Google and Facebook to start paying for user data of their own accord, even if that improved the quality of the information. Could policymakers step in, somewhat the way the European Commission did, demanding that technology companies compute the value of consumer data?&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;114&quot; data-total-count=&quot;7180&quot;&gt;In any event, there is probably a better deal out there, in your future, than giving Facebook free puppy pictures.&lt;/p&gt;
&lt;a class=&quot;visually-hidden skip-to-text-link&quot; href=&quot;https://www.nytimes.com/2018/03/06/business/economy/user-data-pay.html#whats-next&quot;&gt;Continue reading the main story&lt;/a&gt;</description>
<pubDate>Thu, 08 Mar 2018 10:25:48 +0000</pubDate>
<dc:creator>phront</dc:creator>
<og:url>https://www.nytimes.com/2018/03/06/business/economy/user-data-pay.html</og:url>
<og:type>article</og:type>
<og:title>Your Data Is Crucial to a Robotic Age. Shouldn’t You Be Paid for It?</og:title>
<og:description>Getting companies to pay for the information they reap from people’s online lives will improve the data and may counteract a concentration of power.</og:description>
<og:image>https://static01.nyt.com/images/2018/03/07/business/7Porter/merlin_135055269_faf46056-a97e-4a4d-ac1b-e93fbf79001a-facebookJumbo.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2018/03/06/business/economy/user-data-pay.html</dc:identifier>
</item>
<item>
<title>Unexpected challenges of making money on the internet</title>
<link>https://www.kapwing.com/blog/unexpected-challenges-of-making-money/</link>
<guid isPermaLink="true" >https://www.kapwing.com/blog/unexpected-challenges-of-making-money/</guid>
<description>&lt;p&gt;Before I left Google to work on my own startup, I hadn’t thought much about monetization. I believed that, because so many websites do it everyday, charging people for online services would be straightforward. But as I started growing &lt;a href=&quot;https://www.kapwing.com/&quot;&gt;Kapwing, my video editing website,&lt;/a&gt; with a simple freemium model, I ran in to a surprising number of problematic hazards on the road to ramen profitability. In this posts, I’ll share some of the unexpected challenges we faced so that other first-time entrepreneurs can avoid them when they start to make money on the internet.&lt;/p&gt;&lt;h2 id=&quot;the-pre-revenue-launch&quot;&gt;The pre-revenue launch&lt;/h2&gt;
&lt;p&gt;After leaving our corporate jobs this summer, Eric (my cofounder) and I started building Kapwing in late September and launched a bare-bones product in mid-October 2017. At first, we didn’t have any monetization strategy. We asked users to “donate” to Kapwing, but unsurprisingly no one did.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5FUdQIQ.png?1&quot; alt=&quot;The first version of kapwing&quot;/&gt;&lt;em&gt;Kapwing MVP: The first iteration&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-original-pricing-scheme&quot;&gt;The original pricing scheme&lt;/h2&gt;
&lt;p&gt;Startups that don’t have a plan for monetization die before they can sustain or scale their product. Eric and I live in San Francisco and need a revenue stream that will be able to pay our rent in order to work on the startup full-time.&lt;/p&gt;
&lt;p&gt;We decided on a basic premium subscription model. About three weeks after launch, we started adding a small “Kapwing.com” watermark in the corner of every Kapwing video and asked users to pay to remove the watermark. Users could either pay &lt;strong&gt;$1&lt;/strong&gt; for a single video or could pay &lt;strong&gt;$10/month&lt;/strong&gt; for unlimited no-watermark videos with all Kapwing tools. I like this set up for a few reasons: it’s easy to try out our features without committing, the purchase options are clear and limited, and the numbers are round.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/KlRkgtm.png&quot; alt=&quot;Remove watermark page&quot;/&gt;&lt;em&gt;Kapwing’s video confirmation page&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;monetization-challenges&quot;&gt;Monetization challenges&lt;/h2&gt;
&lt;p&gt;As per usual in Startup Land, things didn’t go exactly as planned. I learned that, tactically, making money on the internet is not as simple as I once thought. Here are the surprises we ran into as we tried to grow a SaaS website:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;Passive drop-off impacts retention significantly&lt;/strong&gt;: I knew that people’s credit cards failed and changed, but from my own anecdotal experience I considered this a rare edge case. Wrong. A higher proportion of Kapwing customers drop-off because their credit cards fail than actively cancel. Because of the payment failure rate, we added a &lt;strong&gt;$100/annual plan&lt;/strong&gt; option, letting users save a bit in exchange for payment up front. A handful of people have joined the annual plan so far. &lt;em&gt;Takeaway&lt;/em&gt;: If your service charges a monthly fee, add an annual plan with some discount to increase lifetime customer value.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/m3vf8Xd.png&quot; alt=&quot;Kapwing pricing&quot;/&gt;&lt;em&gt;The current pricing options on Kapwing’s payment page&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; &lt;strong&gt;Transaction fees make small payments less lucrative&lt;/strong&gt; : We try to offer Kapwing at a low price, but the amount that Stripe takes away is hair-raising. For every $1 charged, Stripe took 2.9% + 30c, meaning we only pocketed 66c from every customer. We raised the price to $2 for a single video which is much more lucrative given that we now make $1.64. &lt;em&gt;Takeaway&lt;/em&gt;: If your site supports microtransactions, consider the post-transaction revenue when analyzing the ideal price point.&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;“It’s not expensive, I like the fact that you do the ‘one off’ pricing, lots of folks only have 1 video!” – User feedback&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;3. Authentication and payment processing are not technically trivial:&lt;/strong&gt; Even with many existing solutions for sign-in/sign up and paywalls, it took a good amount of engineering effort to set up the Kapwing payment flow. We use Stripe to handle payment process and rely on Google/Facebook for authentication, but despite these powerful platforms we still needed to implement access restrictions, cancellation and upgrade flows, customer support touch points, and user profiles to have a robust paid service. We have still run in to severe bugs, like premium users not being able to sign in. &lt;em&gt;Takeaway&lt;/em&gt;: Until you have all the pieces, it might benefit your site to launch without a price tag or identity requirement.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Honest policies can be costly&lt;/strong&gt;: When we started charging, I had a few ideals I wanted to implement to set us apart from other subscription services. I wanted to waive the monthly fee if customers hadn’t used the product in the last 30 days, automatically upgrade customers they’d paid &amp;gt;$10 in one-off fees, and set prices in round numbers. But some of those principles have been expensive and hard to uphold, and it’s hard to turn away a dollar when you still can’t afford to pay rent. I still aspire to these transparent policies, but they’re a future goal. &lt;em&gt;Takeaway&lt;/em&gt;: When you’re small, it’s difficult and often dumb to spend money or engineering effort on things you don’t absolutely need.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. If you can’t prevent people from skipping payment, use it to your advantage&lt;/strong&gt;: Kapwing has a not-so-obvious backdoor on the payment page that lets people skip the payment if they write an apology or give us feedback on the website. By clicking on the “I really can’t pay link”, the user can remove the watermark for free. As a result, about 75% of the people who have removed the watermark have done so without paying. We’ve gotten &lt;a href=&quot;https://www.kapwing.com/blog/skipping-our-paywall-with-an-apology/&quot;&gt;good product feedback&lt;/a&gt; and a few other things (one user gave us exclusive access to his upcoming music album, and another “liked” our &lt;a href=&quot;https://twitter.com/KapwingApp/status/948376540168962050&quot;&gt;tweets&lt;/a&gt; from the celebrity Twitter account he manages), but nothing is a substitute for cash at the beginning. &lt;em&gt;Takeaway&lt;/em&gt;: If you can’t stop people from skipping your paywalll, think about how you might make it easier for them to do it in a way that benefits you.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/z1D4P8C.png&quot; alt=&quot;Credit card form&quot;/&gt;&lt;em&gt;An option to skip the paywall&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. Many users prefer Paypal to credit cards&lt;/strong&gt;: Many of the Kapwing users who skip the paywall write that they don’t have a credit card or don’t trust us with their info. One users even emailed us saying how much he appreciated free access to the service because in his country the government monitors credit card transactions. We plan to add Paypal soon to address this issue, but it hasn’t yet been a priority. &lt;em&gt;Takeaway&lt;/em&gt;: Consider alternatives to credit cards, especially if your product is targeted towards users in Europe, China, India, or countries with other dominant payment methods.&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;“I felt uncomfortable with the payment plan because it isn’t very specific: What happens after a month or two, what if I want to cancel? I have had so many bad experiences with things being automatically extended and with being ripped off online that I feel very reluctant to pay like this. Also: what about PayPay? I am in Europe and if there is a dispute, they will take care of everything. There I feel more secure than using my credit card. “ –User feedback&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;7. Relying on Google and Facebook Identity is not sufficient for some professional users&lt;/strong&gt;: On Kapwing, you must use Facebook or Google to sign in. We like that accounts have mostly real names and verified email addresses, but users who work at companies that don’t use the GSuite tell us that they wish they could use their work email and are uncomfortable signing up with their personal info. We might add a “sign up with email” option in the future to accommodate these people, but I do think the validity of emails will decrease. &lt;em&gt;Takeaway&lt;/em&gt;: If you’re creating a sign up flow for your app, you should think about these trade offs between social and email-based auth.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/UyQHt58.png&quot; alt=&quot;Social auth sign in&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8. Customers are bad at telling you how much they would pay&lt;/strong&gt;: Before we added the paywall, we asked a sample of users if they’d be willing to pay a fee to remove a watermark. The majority said they wouldn’t be. But when we actually added the paywall, several people who said they wouldn’t pay did. After we launched, some people have told us our product is cheap and plenty have said it’s too expensive. &lt;em&gt;Takeaway&lt;/em&gt;: The easiest way to tell if people will pay is to make them an offer and see if they cash in.&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;“And while I really love the simplicity of what I’m seeing here, the price doesn’t fit compared to other, more fulfilled softwares.” – User who later subscribed to our premium plan&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;9. People will pay for things you wouldn’t pay for&lt;/strong&gt;: When we started charging $10/month for our video meme maker (the first Kapwing tool), some people on &lt;a href=&quot;https://www.producthunt.com/posts/kapwing&quot;&gt;Product Hunt&lt;/a&gt; and &lt;a href=&quot;https://news.ycombinator.com/item?id=15590476&quot;&gt;Hacker News&lt;/a&gt; told us we were crazy. But over and over again our premium customers express how grateful and appreciative they are, and we’re growing 300% every month. We’re considering raising the price as we add more tools, like the &lt;a href=&quot;https://www.kapwing.com/trim-video&quot;&gt;video trimmer&lt;/a&gt; we launched recently. I would personally never pay $10/month for Kapwing, but I’m also not a social media marketer and creator that needs the service. &lt;em&gt;Takeaway&lt;/em&gt;: Don’t base your prices on advice from non-users or your own intuition unless you’re in the target demographic.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In the last three months, our SaaS website has taken us from $0 to thousands of monthly recurring dollars, but we’re modified it several times and still have a ways to go before our payment scheme is perfect. Hopefully this article will help other internet entrepreneurs design their monetization strategy well the first time around.&lt;/p&gt;
&lt;p&gt;Thanks for reading! Keep following the Kapwing blog as Eric and I race towards paying rent with revenue.&lt;/p&gt;
</description>
<pubDate>Thu, 08 Mar 2018 05:51:08 +0000</pubDate>
<dc:creator>jenthoven</dc:creator>
<og:title>Unexpected challenges of making money on the internet · Kapwing Blog</og:title>
<og:url>https://www.kapwing.com/blog/unexpected-challenges-of-making-money/</og:url>
<og:image>https://i.imgur.com/m7uAea3.jpg</og:image>
<og:description>Before I left Google to work on my own startup, I thought monetization was simple, but I ran in to a surprising number of problematic hazards on the road to ramen profitability.</og:description>
<og:type>article</og:type>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.kapwing.com/blog/unexpected-challenges-of-making-money/</dc:identifier>
</item>
<item>
<title>Writing a Microservice in Rust</title>
<link>http://www.goldsborough.me/rust/web/tutorial/2018/01/20/17-01-11-writing_a_microservice_in_rust/</link>
<guid isPermaLink="true" >http://www.goldsborough.me/rust/web/tutorial/2018/01/20/17-01-11-writing_a_microservice_in_rust/</guid>
<description>&lt;p&gt;Let me begin this article on &lt;em&gt;Writing a Microservice in Rust&lt;/em&gt; by talking about C++. I’ve been a reasonably active member of the C++ community for quite a while now, attending and &lt;a href=&quot;https://www.youtube.com/watch?v=E6i8jmiy8MY&quot;&gt;contributing talks&lt;/a&gt; to conferences, following the development and evangelism of the language’s more modern features and of course writing lots of it. C++ is a language that gives its users very fine-grained control over all aspects of the program they are writing, at the cost of a steep learning curve and a &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf&quot;&gt;large body of knowledge&lt;/a&gt; required to write effective C++. However, C++ is also a very old language, conceived by Bjarne Stroustrup in 1985, and thus caries a lot of technical debt even into modern standards. Of course, research into language design continued after the creation of C++, leading to interesting new programming languages like &lt;a href=&quot;https://golang.org&quot;&gt;Go&lt;/a&gt;, &lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt;, &lt;a href=&quot;https://crystal-lang.org&quot;&gt;Crystal&lt;/a&gt; and many more. However, it’s very rare for one of these new languages to have significantly more interesting features than modern C++, &lt;em&gt;while still&lt;/em&gt; guaranteeing the same performance and control over memory and hardware. Go set out to be a replacement for C++, but as &lt;a href=&quot;https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html&quot;&gt;Rob Pike found himself&lt;/a&gt;, C++ programmers were not quite elated by a language that offers less control at lower performance. On the other hand, Rust is appealing to many a C++ aficionado. Rust and C++ share quite a few design goals, such as &lt;em&gt;zero-cost abstractions&lt;/em&gt; and detailed control over memory. However, on top of that, Rust adds a number of language features that make programs safer and more expressive, and development more productive. The things that excite me the most about Rust are&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The &lt;em&gt;borrow checker&lt;/em&gt;, which greatly improves memory safety (&lt;code class=&quot;highlighter-rouge&quot;&gt;SEGFAULT&lt;/code&gt;s no more!),&lt;/li&gt;
&lt;li&gt;Immutability (&lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt;) by default,&lt;/li&gt;
&lt;li&gt;Intuitive syntactic sugar such as pattern matching,&lt;/li&gt;
&lt;li&gt;No built-in implicit conversions between (arithmetic) types.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Now, having rambled, the remainder of this post will walk you through creating a small but complete &lt;em&gt;microservice&lt;/em&gt; – similar to the &lt;a href=&quot;https://github.com/goldsborough/psag.cc&quot;&gt;URL shortener&lt;/a&gt; I built for my blog. With &lt;em&gt;microservice&lt;/em&gt;, I mean an application that speaks HTTP, accepts requests, speaks to a database, returns a response (possibly serving HTML), packaged up in a Docker container and ready to be dropped somewhere in the cloud. For this post, we’ll build a simple chat application which lets you store and retrieve messages. I will introduce the relevant packages (crates) we’ll use for this as we go along. You can find the complete service &lt;a href=&quot;http://github.com/goldsborough/microservice-rs&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;speaking-http&quot;&gt;Speaking HTTP&lt;/h2&gt;
&lt;p&gt;The first thing we need to teach our web service is how to &lt;em&gt;speak HTTP&lt;/em&gt;. With that, I mean that our application (server) has to accept and parse HTTP requests and return HTTP responses. While there exist a number of high-level, &lt;a href=&quot;http://flask.pocoo.org&quot;&gt;Flask&lt;/a&gt; or &lt;a href=&quot;https://www.djangoproject.com&quot;&gt;Django&lt;/a&gt; like frameworks that abstract away most of the fun about this, we will opt for using the slightly lower-level &lt;a href=&quot;https://hyper.rs&quot;&gt;hyper&lt;/a&gt; library to handle HTTP, which uses the &lt;a href=&quot;https://tokio.rs&quot;&gt;tokio&lt;/a&gt; networking library and &lt;a href=&quot;https://github.com/alexcrichton/futures-rs&quot;&gt;futures&lt;/a&gt;, to give us the ability to create a neat asynchronous web server. For vanity, we’ll also use the &lt;a href=&quot;https://docs.rs/log/0.4.1/log/&quot;&gt;log&lt;/a&gt; and &lt;a href=&quot;https://docs.rs/crate/env_logger/0.5.2&quot;&gt;env-logger&lt;/a&gt; crates for logging purposes.&lt;/p&gt;
&lt;p&gt;We’ll begin by setting up our &lt;code class=&quot;highlighter-rouge&quot;&gt;Cargo.toml&lt;/code&gt; and grabbing said crates:&lt;/p&gt;
&lt;div class=&quot;language-toml highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[package]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;microservice_rs&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;authors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;you &amp;lt;you@email&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[dependencies]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;env_logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.5.3&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;futures&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.1.17&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;hyper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.11.13&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.4.1&quot;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now to the actual code. Hyper has the concept of a &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt;, which is a type that implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt; trait and has a &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; function, which can be called with a &lt;code class=&quot;highlighter-rouge&quot;&gt;hyper::Request&lt;/code&gt; object representing a parsed HTTP request. That function must, for an asynchronous service, return a &lt;code class=&quot;highlighter-rouge&quot;&gt;Future&lt;/code&gt;. Here is the basic boilerplate for this, which we can drop into our &lt;code class=&quot;highlighter-rouge&quot;&gt;main.rs&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[macro_use]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Microservice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Microservice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;info!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Microservice received a request: {:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note how we also have to declare some basic types for our service. Our future type is boxed, since &lt;code class=&quot;highlighter-rouge&quot;&gt;futures::future::Future&lt;/code&gt; itself is only a trait and can thus not be returned from a function by value. Inside &lt;code class=&quot;highlighter-rouge&quot;&gt;call()&lt;/code&gt;, we currently return the simplest valid value, a boxed future containing an empty response.&lt;/p&gt;
&lt;p&gt;To start the server, we bind an IP address to a &lt;code class=&quot;highlighter-rouge&quot;&gt;hyper::server::Http&lt;/code&gt; instance and call its &lt;code class=&quot;highlighter-rouge&quot;&gt;run()&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;env_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1:8080&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Microservice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}))&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;info!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Running microservice at {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With the above code, hyper will start listening for HTTP requests at &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8080&lt;/code&gt;, parse incoming requests and forward them to our &lt;code class=&quot;highlighter-rouge&quot;&gt;Microservice&lt;/code&gt; class. Note that a new instance is created for each new request. We are now ready to start our server and curl some requests at it! Start a server in one terminal:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ RUST_LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;microservice=debug&quot;&lt;/span&gt; cargo run
  Finished dev &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;unoptimized + debuginfo] target&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.0 secs
    Running &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;target/debug/microservice&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
INFO 2018-01-21T23:35:05Z: microservice: Running microservice at 127.0.0.1:8080
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And send it requests from another:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;s1&quot;&gt;'localhost:8080'&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the first terminal, you should see something like&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;10.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;$ RUST_LOG=&quot;microservice=debug&quot; cargo run
  Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
  Running `target/debug/microservice`
Running microservice at 127.0.0.1:8080
INFO 2018-01-21T23:35:05Z: microservice: Running microservice at 127.0.0.1:8080
INFO 2018-01-21T23:35:06Z: microservice: Microservice received a request: Request { method: Get, uri: &quot;/&quot;, version: Http11, remote_addr: Some(V4(127.0.0.1:61667)), headers: {&quot;Host&quot;: &quot;localhost:8080&quot;, &quot;User-Agent&quot;: &quot;curl/7.54.0&quot;, &quot;Accept&quot;: &quot;*/*&quot;} }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Hooray! We have ourselves a basic server, written in Rust. Note that in the commands above, I prepended &lt;code class=&quot;highlighter-rouge&quot;&gt;RUST_LOG=&quot;microservice=debug&quot;&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo run&lt;/code&gt;. This is how we control the behavior of &lt;code class=&quot;highlighter-rouge&quot;&gt;env_logger&lt;/code&gt;, which will look for this environment variable specifically. The first part of this specifies the root module for which we want to enable logging, and the second part (after the &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;) specifies the minimum logging level that will be visible. By default, only &lt;code class=&quot;highlighter-rouge&quot;&gt;error!&lt;/code&gt; gets logged.&lt;/p&gt;
&lt;p&gt;Now, let’s make our server actually do something. Since we’re building a chat application, the two kinds of requests we’ll want to handle are &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; requests, with form data containing the user’s name and the message, and &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; requests with optional &lt;code class=&quot;highlighter-rouge&quot;&gt;before&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;after&lt;/code&gt; parameters to filter by time.&lt;/p&gt;
&lt;h3 id=&quot;accepting-post-requests&quot;&gt;Accepting &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; Requests&lt;/h3&gt;
&lt;p&gt;Let’s begin on the write-side. We’ll accept &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; requests to our service’s root path (&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;/&quot;&lt;/code&gt;) and expect them to contain a &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; field in their form data. We’ll then pass that information on to a function that writes the values of those fields into a database. Finally, we return a response.&lt;/p&gt;
&lt;p&gt;Let’s begin with rewriting &lt;code class=&quot;highlighter-rouge&quot;&gt;call()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;future&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.concat2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_to_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_post_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;nn&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.with_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;StatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We distinguish between different requests by matching on the method and path fo the request. The method will be &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Get&lt;/code&gt; in our case. The only valid path for our service is the root path &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;/&quot;&lt;/code&gt;. If the method is &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;Post&lt;/code&gt; and the path correct, we call the functions I mentioned earlier. Notice how beautifully we can pipeline the futures using their combination functions. The &lt;code class=&quot;highlighter-rouge&quot;&gt;and_then&lt;/code&gt; combinator will call a function with the value contained in a future, if that future resolved successfully (did not contain an error). The function called must then return a new future. This allows passing values through several stages of processing, without computing anything &lt;em&gt;just yet&lt;/em&gt;. Finally, we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; combinator, which executes its callback regardless of the future’s state. As such, it receives a &lt;code class=&quot;highlighter-rouge&quot;&gt;Result&lt;/code&gt; and not a value directly.&lt;/p&gt;
&lt;p&gt;Here are the stubs for the functions used above:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;12&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form_chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FutureResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write_to_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FutureResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_post_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FutureResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.with_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;StatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and our &lt;code class=&quot;highlighter-rouge&quot;&gt;use&lt;/code&gt; statements have changed a little too:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FutureResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Let’s continue by taking a look at &lt;code class=&quot;highlighter-rouge&quot;&gt;parse_form&lt;/code&gt;, which receives a &lt;code class=&quot;highlighter-rouge&quot;&gt;Chunk&lt;/code&gt; (a message body), and parses out the username and message while handling errors appropriately. To parse the form, we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt; crate (which you’ll have to grab with cargo):&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;10.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form_chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FutureResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;form_urlencoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form_chunk&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.into_owned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;ErrorKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvalidInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;Missing field 'message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After parsing the form into a hashmap, we attempt to remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; key from it. If that fails, we return an error, since a message is mandatory. Otherwise, we grab the &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; field, which we default to &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;anonymous&quot;&lt;/code&gt; if it’s not there. Finally, we return a successful future containing our simple &lt;code class=&quot;highlighter-rouge&quot;&gt;NewMessage&lt;/code&gt; struct.&lt;/p&gt;
&lt;p&gt;I’ll not talk about the &lt;code class=&quot;highlighter-rouge&quot;&gt;write_to_db&lt;/code&gt; function just yet. Database interaction is a beast of its own, so I’ll devote a subsequent section to this function and the corresponding routine that reads messages from the database. However, note that &lt;code class=&quot;highlighter-rouge&quot;&gt;write_to_db&lt;/code&gt; returns an &lt;code class=&quot;highlighter-rouge&quot;&gt;i64&lt;/code&gt; when successful. This will be the timestamp of the submission of the new message into the database.&lt;/p&gt;
&lt;p&gt;Instead, let’s see what we need to do to return a response back to whoever blessed our microservice with a request:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;macro_use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serde_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_post_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FutureResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;json!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.with_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ContentLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.with_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;ContentType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.with_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;debug!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_error_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We match on the &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; to see if we were able to write to the database successfully or not. If so, we’ll create a JSON payload forming the body of the response we return. For this I use the &lt;code class=&quot;highlighter-rouge&quot;&gt;serde_json&lt;/code&gt; crate, which you should add to your &lt;code class=&quot;highlighter-rouge&quot;&gt;Cargo.toml&lt;/code&gt;. When constructing the response struct, we need to set the correct HTTP headers. In this case, this means setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Length&lt;/code&gt; header to the length of the response body and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; header to &lt;code class=&quot;highlighter-rouge&quot;&gt;application/json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I’ve refactored out the code to make the response struct for the erroneous case into a separate function &lt;code class=&quot;highlighter-rouge&quot;&gt;make_error_response&lt;/code&gt;, since we’ll be re-using that later on:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_error_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FutureResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;json!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.with_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;StatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InternalServerError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.with_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ContentLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.with_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;ContentType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.with_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;debug!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The response construction is quite similar to the previous function, however this time we have to set the HTTP status of the response to &lt;code class=&quot;highlighter-rouge&quot;&gt;StatusCode::InternalServerError&lt;/code&gt; (status 500). The default is OK (200), so we didn’t have to set the status earlier.&lt;/p&gt;
&lt;h3 id=&quot;accepting-get-requests&quot;&gt;Accepting &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; Requests&lt;/h3&gt;
&lt;p&gt;Next, let’s move on to &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; requests, which will be sent to our server to fetch messages. The request is allowed to have two query arguments, &lt;code class=&quot;highlighter-rouge&quot;&gt;before&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;after&lt;/code&gt;, both timestamps to constrain the messages fetched according to their timestamp, and both optional. If neither &lt;code class=&quot;highlighter-rouge&quot;&gt;before&lt;/code&gt; nor &lt;code class=&quot;highlighter-rouge&quot;&gt;after&lt;/code&gt; are present, we will return only the last message.&lt;/p&gt;
&lt;p&gt;Below is the code for the match arm handling &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; requests. It’s slightly more logic than before:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;11&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeRange&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_range&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_get_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_error_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;By calling &lt;code class=&quot;highlighter-rouge&quot;&gt;request.query()&lt;/code&gt;, we get an &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&amp;lt;&amp;amp;str&amp;gt;&lt;/code&gt;, since a URI may not have a query string at all. If it is present, we call &lt;code class=&quot;highlighter-rouge&quot;&gt;parse_query&lt;/code&gt;, which parses the query arguments and returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;TimeRange&lt;/code&gt; struct, defined as&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeRange&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Since both &lt;code class=&quot;highlighter-rouge&quot;&gt;before&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;after&lt;/code&gt; arguments are optional, we make both &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&lt;/code&gt;s in the &lt;code class=&quot;highlighter-rouge&quot;&gt;TimeRange&lt;/code&gt; struct. Further, the timestamps may be invalid (e.g. not numeric), so we have to deal with the case where parsing their values fails. In such a case, &lt;code class=&quot;highlighter-rouge&quot;&gt;parse_query&lt;/code&gt; will return an error message, which we can forward to the &lt;code class=&quot;highlighter-rouge&quot;&gt;make_error_response&lt;/code&gt; function we wrote earlier. Otherwise, we can go on to call &lt;code class=&quot;highlighter-rouge&quot;&gt;query_db&lt;/code&gt;, which will fetch the messages for us, and &lt;code class=&quot;highlighter-rouge&quot;&gt;make_get_response&lt;/code&gt;, which creates an appropriate &lt;code class=&quot;highlighter-rouge&quot;&gt;Response&lt;/code&gt; object to return back to the client.&lt;/p&gt;
&lt;p&gt;To parse the query string, we again use the &lt;code class=&quot;highlighter-rouge&quot;&gt;url::form_urlencoded&lt;/code&gt; function from earlier, since the syntax is still &lt;code class=&quot;highlighter-rouge&quot;&gt;key=value&amp;amp;key=value&lt;/code&gt;. We then try to fetch the &lt;code class=&quot;highlighter-rouge&quot;&gt;before&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;after&lt;/code&gt; values and convert them to integers (timestamps):&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;10.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;form_urlencoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.into_owned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;py&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;before&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;format!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error parsing 'before': {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;after&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;format!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error parsing 'after': {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeRange&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The code for this is unfortunately slightly clunky and repetitive, but is hard to make much nicer in this case without added complexity. Essentially, we try to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;before&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;after&lt;/code&gt; fields from the form, and if they are there, we attempt to parse them as &lt;code class=&quot;highlighter-rouge&quot;&gt;i64&lt;/code&gt;. One thing I would have wished for here is to be able to combine multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;if let&lt;/code&gt; statements, so we could write:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;format!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error parsing 'before': {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, this is not currently possible in Rust (you can have multiple values in &lt;code class=&quot;highlighter-rouge&quot;&gt;if let&lt;/code&gt; statements by packing them in tuples, but not if the values depend on each other, like here).&lt;/p&gt;
&lt;p&gt;Skipping over &lt;code class=&quot;highlighter-rouge&quot;&gt;query_db&lt;/code&gt; for now, &lt;code class=&quot;highlighter-rouge&quot;&gt;make_get_response&lt;/code&gt; looks fairly simple:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_get_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FutureResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.with_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ContentLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.with_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.with_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;StatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InternalServerError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;debug!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If the &lt;code class=&quot;highlighter-rouge&quot;&gt;messages&lt;/code&gt; option contains a value, we can pass the messages on to &lt;code class=&quot;highlighter-rouge&quot;&gt;render_page&lt;/code&gt;, which will return an HTML page that forms the body of our response, showing the messages in a simple HTML list. If the option is empty, an error occurred in &lt;code class=&quot;highlighter-rouge&quot;&gt;query_db&lt;/code&gt;, which we’ll log but not expose to the user, so we just return a response with status code 500. I’ll cover the implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;render_page&lt;/code&gt; in the section on templating.&lt;/p&gt;
&lt;h2 id=&quot;connecting-to-a-database&quot;&gt;Connecting to a Database&lt;/h2&gt;
&lt;p&gt;Now that we have paths for both writing and reading in our service, we need to tie the ends together with a database to write to and read from. Rust has a very nice and popular object relational model (ORM) library called &lt;a href=&quot;http://diesel.rs&quot;&gt;diesel&lt;/a&gt;, which is very fun and intuitive to work with. Add it to your &lt;code class=&quot;highlighter-rouge&quot;&gt;Cargo.toml&lt;/code&gt; and enable the &lt;code class=&quot;highlighter-rouge&quot;&gt;postgres&lt;/code&gt; feature, since we’ll be using &lt;a href=&quot;https://postgresql.org&quot;&gt;Postgres&lt;/a&gt; for this tutorial:&lt;/p&gt;
&lt;div class=&quot;language-toml highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;py&quot;&gt;diesel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;features&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;postgres&quot;]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Please make sure you have Postgres installed on your machine and are able to log in with &lt;code class=&quot;highlighter-rouge&quot;&gt;psql&lt;/code&gt; (as a basic sanity check). Diesel also supports other DBMSs like MySQL, in case you want to try those out after this tutorial.&lt;/p&gt;
&lt;p&gt;Let’s begin by creating a database schema for our application. We’ll drop it in &lt;code class=&quot;highlighter-rouge&quot;&gt;schemas/messages.sql&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SERIAL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TEXT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BIGINT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXTRACT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'epoch'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Each row in our table stores a message, represented by a monotonically incrementing ID, the username of the author, the message text and finally a timestamp. The default value of the timestamp specified above will insert the current seconds since the epoch for every new entry. Since the &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; column is also auto-incrementing, we’ll ultimately only have to insert the username and message for each new row.&lt;/p&gt;
&lt;p&gt;We now have to integrate this table with Diesel. For this, you’ll need to install the Diesel CLI with &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo install diesel_cli&lt;/code&gt;. Then, you can run the following command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DATABASE_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;postgres://&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@localhost
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diesel print-schema | tee src/schema.rs
table! &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    messages &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        id -&amp;gt; Int4,
        username -&amp;gt; Varchar,
        message -&amp;gt; Text,
        timestamp -&amp;gt; Int8,
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;&lt;/code&gt; are your database’s username and password. If your database doesn’t have a password, the user will suffice. The latter command shows us the representation of our database in Rust, which we also store in &lt;code class=&quot;highlighter-rouge&quot;&gt;src/schema.rs&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;table!&lt;/code&gt; macro comes from Diesel. Besides the &lt;em&gt;schema&lt;/em&gt;, Diesel also requires us to write a &lt;em&gt;model&lt;/em&gt;. This we have to write ourselves, in &lt;code class=&quot;highlighter-rouge&quot;&gt;src/models.rs&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;derive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queryable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This model is the Rust struct we interact with in our code. To do so, we need to add a few declarations to our main module:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;macro_use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serde_derive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[macro_use]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diesel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;At this point, we are ready to fill in the functions &lt;code class=&quot;highlighter-rouge&quot;&gt;write_to_db&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;query_db&lt;/code&gt; that we left out earlier.&lt;/p&gt;
&lt;h3 id=&quot;writing-to-the-database&quot;&gt;Writing to the Database&lt;/h3&gt;
&lt;p&gt;We’ll begin with &lt;code class=&quot;highlighter-rouge&quot;&gt;write_to_db&lt;/code&gt;, which should simply write an entry into the database and return its creation timestamp:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;11&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;diesel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;prelude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;diesel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PgConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write_to_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PgConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FutureResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;diesel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert_into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.returning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.get_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nd&quot;&gt;error!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error writing to database: {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
          &lt;span class=&quot;nn&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;hyper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;ErrorKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;service error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And it’s as easy as that! Diesel exposes a very intuitive and type-safe query interface, with which we:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;specify the table we are inserting into,&lt;/li&gt;
&lt;li&gt;specify the value(s) we are inserting (more on this in a second),&lt;/li&gt;
&lt;li&gt;specify what values we want to return at the same (if any) and&lt;/li&gt;
&lt;li&gt;call &lt;code class=&quot;highlighter-rouge&quot;&gt;get_result&lt;/code&gt;, which will actually execute the query.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This gives us a &lt;code class=&quot;highlighter-rouge&quot;&gt;QueryResult&amp;lt;i64&amp;gt;&lt;/code&gt; object, which we can match on, handling errors as needed. Two things that should surprise you above are that (1) we can pass the &lt;code class=&quot;highlighter-rouge&quot;&gt;NewMessage&lt;/code&gt; struct as-is to Diesel and (2) we are using a magical &lt;code class=&quot;highlighter-rouge&quot;&gt;db_connection&lt;/code&gt; parameter that wasn’t there before. Let’s resolve these two mysteries! For (1), this will not actually compile with the code I have given you so far. To make it compile, we need to move our &lt;code class=&quot;highlighter-rouge&quot;&gt;NewMessage&lt;/code&gt; struct into &lt;code class=&quot;highlighter-rouge&quot;&gt;src/models.rs&lt;/code&gt;, right under the &lt;code class=&quot;highlighter-rouge&quot;&gt;Message&lt;/code&gt; struct, and make it look like so:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;11.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[derive(Queryable,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Debug)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[derive(Insertable,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Debug)]&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[table_name&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;messages&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This way, Diesel can directly associate the fields of our struct with the columns in the database. Neat! Note that, for this, the table must be called &lt;code class=&quot;highlighter-rouge&quot;&gt;messages&lt;/code&gt;, as indicated by the &lt;code class=&quot;highlighter-rouge&quot;&gt;table_name&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;For the second mystery, we’ll have to change our code a bit to introduce the concept of a database connection. In &lt;code class=&quot;highlighter-rouge&quot;&gt;Service::call()&lt;/code&gt;, put the following right at the top:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect_to_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;nn&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.with_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;StatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InternalServerError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;connect_to_db&lt;/code&gt; is defined as&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_DATABASE_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'static&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;postgresql://postgres@localhost:5432&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect_to_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PgConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DATABASE_URL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEFAULT_DATABASE_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PgConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;establish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;error!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error connecting to database: {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This function looks for the environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;DATABASE_URL&lt;/code&gt; to determine the Postgres database URL, or uses a pre-defined constant otherwise. It then attempts to create a new database connection and returns it if possible. You’ll also want to update your &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; handlers:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;12.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;future&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.concat2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write_to_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_post_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeRange&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_range&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_get_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_error_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With this scheme, we’ll be creating a new Database connection for each request. Depending on your setup, this may be fine. However, you may also want to consider using &lt;a href=&quot;https://github.com/diesel-rs/r2d2-diesel&quot;&gt;r2d2&lt;/a&gt; to establish a &lt;em&gt;connection pool&lt;/em&gt; which will keep a constant number of connections open for you and hand you one as you need it.&lt;/p&gt;
&lt;h3 id=&quot;querying-the-database&quot;&gt;Querying the Database&lt;/h3&gt;
&lt;p&gt;We can now write new messages into the database – that’s awesome. Next, we’ll want to figure out how to read them back out by querying the database appropriately. Let’s implement &lt;code class=&quot;highlighter-rouge&quot;&gt;query_db&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;12&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;query_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PgConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeRange&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;py&quot;&gt;.load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;py&quot;&gt;.load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;py&quot;&gt;.load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query_result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;error!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error querying DB: {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The code for this is unfortunately slightly complex. This is because both &lt;code class=&quot;highlighter-rouge&quot;&gt;before&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;after&lt;/code&gt; are &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&lt;/code&gt;s, and Diesel does not currently provide an easy way to gradually build up a query. So we have to exhaustively check if &lt;code class=&quot;highlighter-rouge&quot;&gt;before&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;after&lt;/code&gt; are &lt;code class=&quot;highlighter-rouge&quot;&gt;Some&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt; and perform zero to two filters each time. The querying itself, however, is once more simple and intutitive. Since &lt;code class=&quot;highlighter-rouge&quot;&gt;where&lt;/code&gt; is a keyword in Rust, the &lt;code class=&quot;highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; clause from SQL is implemented with the &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; method in Diesel. Relational operators like &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; are methods on the model structs, like &lt;code class=&quot;highlighter-rouge&quot;&gt;.gt()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.eq()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;rendering-html-templates&quot;&gt;Rendering HTML Templates&lt;/h2&gt;
&lt;p&gt;We’re very close! All that’s left at this point is to write &lt;code class=&quot;highlighter-rouge&quot;&gt;render_page&lt;/code&gt;, which we left out earlier. For this, we’ll want to use a &lt;em&gt;templating&lt;/em&gt; library. Templating, in the context of web servers, is the general concept of creating an HTML page with dynamic data and control flow. Popular templating libraries in other languages are &lt;a href=&quot;http://handlebarsjs.com&quot;&gt;Handlebars&lt;/a&gt; in JavaScript or &lt;a href=&quot;http://jinja.pocoo.org&quot;&gt;Jinja&lt;/a&gt; in Python. While I personally used a &lt;a href=&quot;https://github.com/sunng87/handlebars-rust&quot;&gt;Rust port of Handlebars&lt;/a&gt; for my &lt;a href=&quot;http://github.com/goldsborough/psag.cc&quot;&gt;url-shortening project&lt;/a&gt;, I have to say that the landscape of templating libraries in Rust is &lt;a href=&quot;http://www.arewewebyet.org/topics/templating/&quot;&gt;not fantastic&lt;/a&gt;. Like in quite a few domains in Rust, there is no go-to, “quasi-standard” library like Jinja is in Python. This makes picking one of the hard, since you never know if it will turn into abandonware 6 months down the road.&lt;/p&gt;
&lt;p&gt;Nevertheless, for this tutorial, we’ll use a templating library called &lt;a href=&quot;http://maud.lambda.xyz&quot;&gt;maud&lt;/a&gt;. Albeit not be the most scalable option for a real-world application, maud is interesting and clever, allowing us to write HTML templates directly in Rust, using natural control flow. If anything, maud shows off the power of Rust macros. That said, maud will require a nightly build of Rust to enable the procedural macro feature, which is &lt;a href=&quot;https://github.com/rust-lang/rust/issues/38356&quot;&gt;close to being stable, it seems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, add &lt;code class=&quot;highlighter-rouge&quot;&gt;maud&lt;/code&gt; to your Cargo.toml:&lt;/p&gt;
&lt;div class=&quot;language-toml highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[dependencies]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;maud&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.17.2&quot;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then, add the following declarations to the top of your &lt;code class=&quot;highlighter-rouge&quot;&gt;main.rs&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc_macro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maud&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, we can write &lt;code class=&quot;highlighter-rouge&quot;&gt;render_page&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;html!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;microservice&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;body { font-family: monospace }&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; (&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;): &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;mind = blown&lt;/em&gt;? Yes, somewhat. Just let that sink in for a bit. Breathe in deeply. Exhale. You’re writing an HTML page using a Rust macro. Damn.&lt;/p&gt;
&lt;p&gt;And that’s it! Our microservice is complete. And &lt;em&gt;micro&lt;/em&gt; it is. Let’s run it:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ DATABASE_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;postgresql://goldsborough@localhost&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RUST_LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;microservice=debug&quot;&lt;/span&gt; cargo run
Compiling microservice v0.1.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;file:///Users/goldsborough/Documents/Rust/microservice&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 Finished dev &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;unoptimized + debuginfo] target&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;12.30 secs
  Running &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;target/debug/microservice&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
INFO 2018-01-22T01:22:16Z: microservice: Running microservice at 127.0.0.1:8080
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and then in another terminal:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'username=peter&amp;amp;message=hi'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'localhost:8080'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;:1516584255&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'username=mike&amp;amp;message=hi2'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'localhost:8080'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;:1516584282&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the first, you should see the debug logs:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;13&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;...
DEBUG 2018-01-22T01:24:14Z: microservice: Request { method: Post, uri: &quot;/&quot;, version: Http11, remote_addr: Some(V4(127.0.0.1:64869)), headers: {&quot;Host&quot;: &quot;localhost:8080&quot;, &quot;User-Agent&quot;: &quot;curl/7.54.0&quot;, &quot;Accept&quot;: &quot;*/*&quot;, &quot;Content-Length&quot;: &quot;25&quot;, &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;} }
DEBUG 2018-01-22T01:24:14Z: microservice: Response { status: Ok, version: Http11, headers: {&quot;Content-Length&quot;: &quot;24&quot;, &quot;Content-Type&quot;: &quot;application/json&quot;} }
...
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, let’s &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; some messages:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;$ curl 'localhost:8080'
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;microservice&amp;lt;/title&amp;gt;&amp;lt;style&amp;gt;body { font-family: monospace }&amp;lt;/style&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;peter (1516584255): hi&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;mike (1516584282): hi2&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/body&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;or, if you navigate your web browser to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.goldsborough.me/images/rust-webservice/index.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;
&lt;p&gt;You can also try adding &lt;code class=&quot;highlighter-rouge&quot;&gt;?after=&amp;lt;timestamp&amp;gt;&amp;amp;before=&amp;lt;timestamp&amp;gt;&lt;/code&gt; to the query URL and verify that you only get messages in the specified time range.&lt;/p&gt;
&lt;h2 id=&quot;packaging-with-docker&quot;&gt;Packaging with Docker&lt;/h2&gt;
&lt;p&gt;I’ll talk very briefly about how to package this application in a Docker container. This doesn’t have anything to do with Rust per-se, but it’s useful to know about relevant Docker containers to base yours on.&lt;/p&gt;
&lt;p&gt;There are two official Docker images maintained by the Rust developers: one for stable and one for nightly Rust. The stable Rust image is simply &lt;a href=&quot;https://hub.docker.com/_/rust/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust&lt;/code&gt;&lt;/a&gt; and the nightly one is &lt;a href=&quot;https://hub.docker.com/r/rustlang/rust/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust-lang/rust:nightly&lt;/code&gt;&lt;/a&gt;. Basing our container on one of these is very simple. We’ll want to base ours on the nightly image. Make the content of your &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; look like this:&lt;/p&gt;
&lt;div class=&quot;language-docker highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; rustlang/rust:nightly&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;MAINTAINER&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &amp;lt;your@email&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /var/www/microservice/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . .&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;rustc &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;cargo install

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;microservice&quot;]&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We’ll run the Postgres database in a separate Docker container, as is typical of a microservice architecture. Make this &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile-db&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-docker highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; postgres&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;MAINTAINER&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &amp;lt;your@email&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create the table on start-up&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; schemas/messages.sql /docker-entrypoint-initdb.d/&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And tie things together with a &lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;docker-compose.yaml&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker/Dockerfile&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;network&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8080:80&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;DATABASE_URL&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;postgresql://postgres:secret@db:5432&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;RUST_BACKTRACE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;RUST_LOG&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;microservice=debug&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker/Dockerfile-db&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;network&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secret&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This file is a bit more involved, but once it’s written, the rest is a breeze. Note that I place both Dockerfiles into a &lt;code class=&quot;highlighter-rouge&quot;&gt;docker/&lt;/code&gt; folder. Now, simply run &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-compose up
Recreating microservice_db_1 ...
Recreating microservice_server_1 ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Attaching to microservice_db_1, microservice_server_1
server_1  |  INFO 2018-01-22T01:38:57Z: microservice: Running microservice at 127.0.0.1:8080
db_1      | 2018-01-22 01:38:57.886 UTC &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1] LOG:  listening on IPv4 address &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;, port 5432
db_1      | 2018-01-22 01:38:57.886 UTC &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1] LOG:  listening on IPv6 address &lt;span class=&quot;s2&quot;&gt;&quot;::&quot;&lt;/span&gt;, port 5432
db_1      | 2018-01-22 01:38:57.891 UTC &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1] LOG:  listening on Unix socket &lt;span class=&quot;s2&quot;&gt;&quot;/var/run/postgresql/.s.PGSQL.5432&quot;&lt;/span&gt;
db_1      | 2018-01-22 01:38:57.917 UTC &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;20] LOG:  database system was shut down at 2018-01-22 00:10:07 UTC
db_1      | 2018-01-22 01:38:57.939 UTC &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1] LOG:  database system is ready to accept connections
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This will look different for you the first time you run it, of course. Anyway, that’s all there is to it. You could now push this into a GitHub repo, drop it on a (free) &lt;a href=&quot;https://aws.amazon.com/free/&quot;&gt;AWS&lt;/a&gt; or &lt;a href=&quot;https://cloud.google.com/free/&quot;&gt;Google Cloud&lt;/a&gt; instance, and access your service from the outside world. Wooh!&lt;/p&gt;
&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;Pieced together, the above snippets of code make up around 270 lines necessary to create our full-fledged microservice in Rust. I’m not saying that’s little, compared to the equivalent code written in, say, Flask. However, there are also more batteries-inclued web frameworks available in Rust, such as &lt;a href=&quot;https://rocket.rs&quot;&gt;Rocket&lt;/a&gt;, that abstract away even more for you. Nevertheless, I believe taking this route and going slightly lower level with &lt;em&gt;Hyper&lt;/em&gt; gave you some nice insights into how you can leverage Rust to write a safe and performant webservice.&lt;/p&gt;
&lt;p&gt;I wrote this blog post to share the knowledge I picked up while learning about Rust and applying my knowledge to a small &lt;a href=&quot;http://github.com/goldsborough/psag.cc&quot;&gt;url-shortening webservice&lt;/a&gt; that I use to shorten URLs for my blog (which, if you take a look at your browser’s URL bar, are quite long). Coming out of this, I feel like I now have a solid appreciation for the features Rust brings along, and where it is more expressive and safe or less expressive (but not less safe) to work with compared to modern C++.&lt;/p&gt;
&lt;p&gt;I feel like it may take another few years for Rust’s ecosystem to stabilize and go-to, stable and well-maintained packages to establish themselves for the majority of tasks. Nevertheless, the prospects are promising. Facebook is already investigating the use of Rust for a new &lt;a href=&quot;https://www.theregister.co.uk/2016/10/18/facebook_mercurial_devs_forget_git/&quot;&gt;Mercurial server&lt;/a&gt; which would host its codebase. And more and more people are looking at Rust as an interesting option for embedded programming. I’ll be watching the development of the language closely, meaning I subscribed to the &lt;code class=&quot;highlighter-rouge&quot;&gt;r/Rust&lt;/code&gt; subreddit.&lt;/p&gt;
</description>
<pubDate>Thu, 08 Mar 2018 05:45:05 +0000</pubDate>
<dc:creator>blacksmythe</dc:creator>
<og:type>article</og:type>
<og:title>Writing a Microservice in Rust</og:title>
<og:description>A blog on computer science, artificial intelligence and the excitement of life.</og:description>
<og:url>http://www.goldsborough.me/rust/web/tutorial/2018/01/20/17-01-11-writing_a_microservice_in_rust/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.goldsborough.me/rust/web/tutorial/2018/01/20/17-01-11-writing_a_microservice_in_rust/</dc:identifier>
</item>
<item>
<title>Two Photographers Unknowingly Shot the Same Millisecond in Time</title>
<link>https://petapixel.com/2018/03/07/two-photographers-unknowingly-shot-millisecond-time/</link>
<guid isPermaLink="true" >https://petapixel.com/2018/03/07/two-photographers-unknowingly-shot-millisecond-time/</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://petapixel.com/assets/uploads/2018/03/twophotossametimefeatt-800x420.jpg&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;420&quot; class=&quot;aligncenter size-large wp-image-305598&quot; srcset=&quot;https://petapixel.com/assets/uploads/2018/03/twophotossametimefeatt-800x420.jpg 800w, https://petapixel.com/assets/uploads/2018/03/twophotossametimefeatt-320x168.jpg 320w, https://petapixel.com/assets/uploads/2018/03/twophotossametimefeatt.jpg 1600w&quot; sizes=&quot;(max-width: 800px) 100vw, 800px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;On March 3rd, during a large East Coast winter storm, I headed to the ocean to capture some wave action. My travels eventually took me to Great Island Commons in New Castle, New Hampshire, where Whaleback Lighthouse is prominently featured .8 miles offshore. I was hoping to capture big waves crashing around the lighthouse, and Mother Nature didn’t disappoint.&lt;/p&gt;&lt;p&gt;Great Island Common is a wide open park where people come to picnic during the summer and to watch the ocean during the winter.&lt;/p&gt;
&lt;p&gt;After arriving, I set up my tripod and my Canon 5D Mark IV with Sigma 150-600mm lens on a tripod and positioned myself just to the right of a tree in order to help reduce the pummeling Northerly winds. As many of you know it’s a challenge keeping 600mm stable in high winds, even on a tripod.&lt;/p&gt;
&lt;p&gt;I set the camera up and then waited until I saw a wave starting to hit the lighthouse. I then kept firing until the splash ended, not knowing ahead of time the action of the wave. Most shots never panned out, but about three of them over the course of about 45 minutes were pretty decent.&lt;/p&gt;
&lt;p&gt;Once back at home I culled through the images, and choose one to edit and upload to Instagram, replacing an earlier upload that was done in haste while still in the parking lot. When a local TV station shared the photo to their Facebook page (with permission) it started to receive a large amount of shares, comments, and likes.&lt;/p&gt;
&lt;p&gt;However, there was one comment that mentioned that I had stolen the image from another New England photographer, &lt;a href=&quot;https://www.facebook.com/ericgendronphotography/&quot; data-wpel-link=&quot;external&quot; target=&quot;_blank&quot; rel=&quot;follow external noopener noreferrer&quot;&gt;Eric Gendon&lt;/a&gt;. After letting the commenter know that it was indeed my image and that I possess the original RAW file, I headed over to the other photographers page and was blown away. We had what looked like the exact same image, taken at the exact millisecond in time, from what looked like the same exact location and perspective.&lt;/p&gt;
&lt;img src=&quot;https://petapixel.com/assets/uploads/2018/03/Full-Image_by_RonRisman-800x525.jpg&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;525&quot; class=&quot;size-large wp-image-305600&quot; srcset=&quot;https://petapixel.com/assets/uploads/2018/03/Full-Image_by_RonRisman-800x525.jpg 800w, https://petapixel.com/assets/uploads/2018/03/Full-Image_by_RonRisman-320x210.jpg 320w, https://petapixel.com/assets/uploads/2018/03/Full-Image_by_RonRisman-120x80.jpg 120w, https://petapixel.com/assets/uploads/2018/03/Full-Image_by_RonRisman.jpg 1200w&quot; sizes=&quot;(max-width: 800px) 100vw, 800px&quot;/&gt;Photo by me, Ron Risman. &lt;img src=&quot;https://petapixel.com/assets/uploads/2018/03/Full-Image_by_Eric_Gendron-800x525.jpg&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;525&quot; class=&quot;size-large wp-image-305601&quot; srcset=&quot;https://petapixel.com/assets/uploads/2018/03/Full-Image_by_Eric_Gendron-800x525.jpg 800w, https://petapixel.com/assets/uploads/2018/03/Full-Image_by_Eric_Gendron-320x210.jpg 320w, https://petapixel.com/assets/uploads/2018/03/Full-Image_by_Eric_Gendron-120x80.jpg 120w, https://petapixel.com/assets/uploads/2018/03/Full-Image_by_Eric_Gendron.jpg 1200w&quot; sizes=&quot;(max-width: 800px) 100vw, 800px&quot;/&gt;Photo by &lt;a href=&quot;http://www.ericgendronphotography.com/&quot; data-wpel-link=&quot;external&quot; target=&quot;_blank&quot; rel=&quot;follow external noopener noreferrer&quot;&gt;Eric Gendon&lt;/a&gt;
&lt;p&gt;Aside from choices made in Lightroom, the photos at first glance look virtually identical aside from water in front and some of the white caps being in different position. Even then, the white caps were identical in size and shape – and I know those things are easily moved using the clone stamp in Photoshop – so I was concerned that maybe MY image was stolen and altered a bit.&lt;/p&gt;
&lt;p&gt;Initially, I only had access to his shared, low-resolution, image so I wasn’t able to make out some of the very fine details that ultimately helped to convince me that we both had originals. After overlaying and aligning the images in Photoshop I was blown away that the lighthouse and waves were carbon copies, almost to the pixel. As mentioned already, there were many differences in the foreground water and the white caps on the horizon, and it was these differences that held me back from claiming he stole my image.&lt;/p&gt;
&lt;p&gt;It wasn’t until another local photographer started comparing my photo to a higher resolution version of Eric’s image that he noticed that the iron gating around the top of the lighthouse had slightly different spacing between the vertical bars compared to my image. This would indicate that the other photographer was likely standing just a little bit left of where I was standing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://petapixel.com/assets/uploads/2018/03/Photographers_Position-800x688.jpg&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;688&quot; class=&quot;aligncenter size-large wp-image-305602&quot; srcset=&quot;https://petapixel.com/assets/uploads/2018/03/Photographers_Position-800x688.jpg 800w, https://petapixel.com/assets/uploads/2018/03/Photographers_Position-320x275.jpg 320w, https://petapixel.com/assets/uploads/2018/03/Photographers_Position.jpg 1125w&quot; sizes=&quot;(max-width: 800px) 100vw, 800px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Since the 60D uses an APS-C sensor he would have also likely been back a little further to compensate for the 1.6x “zoom” / crop of the sensor or using a shorter focal length to compensate. This would also explain the white caps being in different positions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://petapixel.com/assets/uploads/2018/03/Compare_with_circles.jpg&quot; alt=&quot;&quot; width=&quot;507&quot; height=&quot;306&quot; class=&quot;aligncenter size-full wp-image-305603&quot; srcset=&quot;https://petapixel.com/assets/uploads/2018/03/Compare_with_circles.jpg 507w, https://petapixel.com/assets/uploads/2018/03/Compare_with_circles-320x193.jpg 320w&quot; sizes=&quot;(max-width: 507px) 100vw, 507px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;However, the fact that the lighthouse doesn’t really show any rotational changes and the crashing wave is an exact match – makes this all the more remarkable that these were captured randomly from two different photographers.&lt;/p&gt;
&lt;p&gt;The next morning Eric woke up to a flood of messages from me as well as other photographers, and immediately contacted me to share his EXIF data, and to agree that it was astounding that we both captured the exact same image of water motion at the exact millisecond in time. What makes this even more amazing is that this wasn’t a planned event (aka. Sporting event, shuttle launch, etc.).&lt;/p&gt;
&lt;p&gt;I also didn’t know Eric; we each chose this location randomly; we both shot with different cameras (60D and 5D Mark IV) with different size sensors; the 60D has a burst mode of 5.3fps, the 5DMKIV is 7fps; we both used a 600mm focal length; our exposures and depth-of-field were almost the same as well (f/8 aperture, ISO 400, 1/1600th shutter vs. f/8, ISO 320, 1/1000th shutter); and ultimately we both selected the same photo from that day to promote. Come to find out we were only 28 meters away from each other. He was hunkered down under a picnic enclosure to help block some of the wind and I was up against a tree to help reduce the wind.&lt;/p&gt;
&lt;p&gt;I did a Google search to see how often this happens and could only find one article from 2011 where two photographers filming a surf competition on Huntington Beach ended up catching a virtually identical image of a surfer and its wave action.&lt;/p&gt;
&lt;p&gt;If you shoot water in burst mode you know how different each exposure is even when the difference in time is just 1/7th of a second between shots. And I have been leading night-sky photography workshops for five years and have had well over 200 photographers who are often aiming at the same subject, shooting with similar cameras and lenses, and capturing at the same moment in time, even doing continuous shooting for time lapse, and until now I have never seen two images that were so close as to be virtual clones of each other.&lt;/p&gt;
&lt;center&gt;
&lt;div class=&quot;fluid-iframe&quot;&gt;
&lt;p&gt;&lt;iframe src=&quot;https://player.vimeo.com/video/258671812&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/center&gt;
&lt;p&gt;While this is a rare occurrence, I believe that with cameras getting faster and photographers taking more time to prepare for their shots, I have to imagine that these situations will happen more frequently. It happens every day with stationary or slow motion objects (buildings, sun/moon rise) but almost never with water movement.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;About the author&lt;/strong&gt;: Ron Risman is a timelapse photographer and owner of &lt;a href=&quot;https://www.timelapseworkshops.com/&quot; data-wpel-link=&quot;external&quot; target=&quot;_blank&quot; rel=&quot;follow external noopener noreferrer&quot;&gt;Timelapse Workshops&lt;/a&gt;. The opinions expressed in this article are solely those of the author. You can find more of his work on &lt;a href=&quot;https://www.facebook.com/ron.risman&quot; data-wpel-link=&quot;external&quot; target=&quot;_blank&quot; rel=&quot;follow external noopener noreferrer&quot;&gt;Facebook&lt;/a&gt; and &lt;a href=&quot;https://www.instagram.com/Timeographer/&quot; data-wpel-link=&quot;external&quot; target=&quot;_blank&quot; rel=&quot;follow external noopener noreferrer&quot;&gt;Instagram&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 08 Mar 2018 05:01:55 +0000</pubDate>
<dc:creator>shawndumas</dc:creator>
<og:type>article</og:type>
<og:title>How Two Photographers Unknowingly Shot the Same Millisecond in Time</og:title>
<og:description>On March 3rd, during a large East Coast winter storm, I headed to the ocean to capture some wave action. My travels eventually took me to Great Island Comm</og:description>
<og:url>https://petapixel.com/2018/03/07/two-photographers-unknowingly-shot-millisecond-time/</og:url>
<og:image>https://petapixel.com/assets/uploads/2018/03/twophotossametimefeatt.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://petapixel.com/2018/03/07/two-photographers-unknowingly-shot-millisecond-time/</dc:identifier>
</item>
<item>
<title>Some terrible personal news</title>
<link>https://www.mattcutts.com/blog/cindy-cutts/</link>
<guid isPermaLink="true" >https://www.mattcutts.com/blog/cindy-cutts/</guid>
<description>&lt;p&gt;Cindy Cutts, my wife and best friend, passed away earlier this week. While I was traveling for work recently, Cindy went to visit her family in Omaha, Nebraska. On Sunday, while enjoying time with family, Cindy started having trouble breathing. Her family quickly called 911 and paramedics took Cindy to the hospital, but Cindy lost and never regained consciousness. She passed away on Monday.&lt;/p&gt;
&lt;p&gt;Cindy didn’t want any callouts on my blog, so I always just referred to her as &lt;a href=&quot;https://www.google.com/search?q=site%3Amattcutts.com+%22my+wife%22&quot;&gt;my wife&lt;/a&gt;. But I’d like to tell you something about her. She loved her family and &lt;a href=&quot;https://www.mattcutts.com/blog/why-do-i-blog/&quot;&gt;her&lt;/a&gt; &lt;a href=&quot;https://www.mattcutts.com/blog/meet-my-other-cat-ozzie/&quot;&gt;cats&lt;/a&gt;, Emmy and Ozzie. She danced in the Bay Area with a &lt;a href=&quot;http://www.bigmoves.org/&quot;&gt;fantastic troop of kick-ass women&lt;/a&gt; for years. She ran a &lt;a href=&quot;http://www.sanjosefit.com/&quot;&gt;half-marathon once&lt;/a&gt; and then decided that she never needed to do that again. She sang in show choir in high school and could still rock a karaoke room with an Adele song. She wrestled with anxiety and depression at times, as so many people do. We should all talk about mental health more to lessen the stigma for other people who think they’re alone when they’re not.&lt;/p&gt;
&lt;p&gt;Cindy enjoyed falling asleep to &lt;em&gt;Parks and Rec&lt;/em&gt;. She liked re-reading William Gibson’s novel &lt;em&gt;Pattern Recognition&lt;/em&gt;. Cindy made quilts for her family and crocheted scarves. She kept me healthy and on track and moving in the right direction, and I paid her back with occasional head rubs. Cindy was whip smart, with a particular gift with languages, from French to Chinese. I tackled small details like paperwork and license plates and paying bills, but she was the one who looked at the big picture. Cindy was the person who said “Let’s go try this Google thing for a while.”&lt;/p&gt;
&lt;p&gt;Cindy and I knew each other for 23 years and we were married for 18 years, which is no small thing. I’m unmanned and unmoored without her. I’m just going to tackle the details in front of me and count on time and family and friends to pull me back on course at some point.&lt;/p&gt;
&lt;p&gt;If anyone wants to send flowers, the service is at Heafey-Hoffmann-Dworak-Cutler at 7805 W Center Rd in Omaha on Saturday, March 10th, starting at 3pm.&lt;/p&gt;
&lt;p&gt;For the people who didn’t get to meet her, Cindy looked like a movie star:&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://www.mattcutts.com/images/cindy-movie-star.jpg&quot; alt=&quot;Cindy movie star&quot; /&gt;&lt;/center&gt;
&lt;p&gt;She loved hanging with her family:&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://www.mattcutts.com/images/cindy-family.jpg&quot; alt=&quot;Cindy with her family&quot; /&gt;&lt;/center&gt;
&lt;p&gt;She had the best smile and amazing green eyes:&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://www.mattcutts.com/images/cindy-smile.jpg&quot; alt=&quot;Cindy smiling&quot; /&gt;&lt;/center&gt;
&lt;p&gt;And her cat Ozzie adored her as much as I did:&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://www.mattcutts.com/images/cindy-ozzie.jpg&quot; alt=&quot;Cindy and Ozzie&quot; /&gt;&lt;/center&gt;
&lt;p&gt;Please give your friends or family a hug for me. We never know how much time we have with someone, and sometimes it’s all too short.&lt;/p&gt;
</description>
<pubDate>Thu, 08 Mar 2018 01:04:16 +0000</pubDate>
<dc:creator>rpledge</dc:creator>
<og:type>article</og:type>
<og:title>Some terrible personal news</og:title>
<og:url>https://www.mattcutts.com/blog/cindy-cutts/</og:url>
<og:description>Cindy Cutts, my wife and best friend, passed away earlier this week. While I was traveling for work recently, Cindy went to visit her family in Omaha, Nebraska. On Sunday, while enjoying time with …</og:description>
<og:image>https://s0.wp.com/i/blank.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.mattcutts.com/blog/cindy-cutts/</dc:identifier>
</item>
</channel>
</rss>