<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Matrix Calculus</title>
<link>http://www.matrixcalculus.org</link>
<guid isPermaLink="true" >http://www.matrixcalculus.org</guid>
<description>&lt;p&gt;Only scalars, vectors, and matrices are displayed as output. If the derivative is a higher order tensor it will be computed but not displayed since there is no (good) representation of higher order tensors by matrices. For instance, differentiating the matrix expression &lt;span&gt;X&lt;/span&gt; with respect to the matrix &lt;span&gt;X&lt;/span&gt; yields the 4th order identity tensor. It will not be displayed.&lt;/p&gt;
</description>
<pubDate>Sat, 18 Nov 2017 07:32:16 +0000</pubDate>
<dc:creator>sytelus</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.matrixcalculus.org/</dc:identifier>
</item>
<item>
<title>How Facebook&amp;#039;s Instagram Acquisition Led to the Open Sourcing of React.js</title>
<link>https://stackshare.io/posts/the-react-story</link>
<guid isPermaLink="true" >https://stackshare.io/posts/the-react-story</guid>
<description>&lt;hr/&gt;&lt;div readability=&quot;8&quot;&gt;&lt;img src=&quot;https://d26dzxoao6i3hh.cloudfront.net/items/0I2O3J1v2p2K160n2H06/pete5.jpg&quot;/&gt;&lt;p&gt;Pete Hunt, CEO @ Smyte. OG React.js. Ex-Facebook and Instagram&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://stackshare.io/react&quot;&gt;React&lt;/a&gt; is now one of the most popular JavaScript UI libraries in the world. It has over 70K stars on GitHub, over 1100 contributors, over &lt;a href=&quot;https://www.npmjs.com/package/react&quot;&gt;6M downloads&lt;/a&gt; this past month alone, and well over &lt;a href=&quot;https://stackshare.io/react/in-stacks&quot;&gt;4K company stacks&lt;/a&gt;. But when Facebook first introduced React to the world, not too many people cared.&lt;/p&gt;
&lt;p&gt;For the latest episode of Stack Stories, we did something a bit different. We decided to focus on the origin story of the one of the most popular technologies in the software development world: &lt;a href=&quot;https://stackshare.io/react&quot;&gt;React&lt;/a&gt;. We sat down with Pete Hunt, one of the original creators of React, now CEO at &lt;a href=&quot;https://www.smyte.com/&quot;&gt;Smyte&lt;/a&gt;, to get the untold, in-depth story of why React was first created, how it gained adoption within Facebook due to the Instagram acquisition, and it's eventual release to the public.&lt;/p&gt;
&lt;p&gt;Listen to the interview in full or check out the transcript below (edited for brevity).&lt;/p&gt;
&lt;p&gt;Check out Stack Stories' sponsor &lt;strong&gt;STRV&lt;/strong&gt; at &lt;a href=&quot;https://www.strv.com/stackshare&quot;&gt;strv.com/stackshare&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;div-center&quot;&gt;&lt;a href=&quot;https://itunes.apple.com/us/podcast/stack-stories/id1167618950?mt=2&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.stackshare.io/featured_posts/itunes_subscribe.png&quot;/&gt;&lt;/a&gt;&lt;/div&gt;





&lt;hr/&gt;&lt;p&gt;Contents&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Highlights&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stackshare.io/posts/the-react-story#the-one-man-facebook-video-team&quot;&gt;The One Man Facebook Video Team&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;I think it became like the number three most popular video site in the world or something. It was this hackathon project that was barely maintained, so I was like the one guy at the company that was maintaining this thing. This was back before Facebook Live was a priority or any of that stuff...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://stackshare.io/posts/the-react-story#instagram-acquisition&quot;&gt;From Facebook Camera App To Instagram Acquisition&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;26.933333333333&quot;&gt;
&lt;p&gt;Zuck gets everybody together and is like, “Hey mobile is going to be a big deal and we are dropping everything and moving tons and tons of resources to mobile.”...I was like, “We can’t maintain the largest photo site in the world with a handful of people, this is crazy guys. We’re putting all these people into iOS and Android for apps that make up a minuscule amount of our traffic this doesn’t make any sense.” Turns out that it was 100% the right thing to do, that’s why I was not CEO of Facebook...&lt;/p&gt;
&lt;p&gt;We had this app that we built and we were really proud of called Facebook Camera... We worked really hard on it, I wasn’t working directly on it, I was supporting it from the server side but we had a bunch of really talented engineers working on it and tons of designers. Instagram just came in and ate its lunch...&lt;/p&gt;
&lt;p&gt;With Instagram they gave them a garage in the Facebook campus where they could just do their own thing. They took advantage of the Facebook kind of trusted safety systems, but other than that, they continued to use &lt;a href=&quot;https://stackshare.io/amazon-ec2&quot;&gt;AWS&lt;/a&gt;, they continued to draft their own product strategy from what I could tell...I was the first one to go full time over there to Instagram when that happened...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://stackshare.io/posts/the-react-story#instagram-web-presence&quot;&gt;Instagram Needs A Web Presence&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;37.017048794827&quot;&gt;
&lt;p&gt;They had photo pages and the web was a bit of a strategic thing for them, so they were mobile first, Instagram has always been mobile first. Instagram actually, a lot of the content is public and, I think SEO was an important thing for them...&lt;/p&gt;
&lt;p&gt;They were using &lt;a href=&quot;https://stackshare.io/amazon-ec2&quot;&gt;AWS&lt;/a&gt; and all the cloud computing stuff that you are used to, all off the shelf &lt;a href=&quot;https://stackshare.io/django&quot;&gt;Django&lt;/a&gt; run on &lt;a href=&quot;https://stackshare.io/amazon-ec2&quot;&gt;AWS&lt;/a&gt; talking to &lt;a href=&quot;https://stackshare.io/postgresql&quot;&gt;Postgres&lt;/a&gt;, pretty different software stack.&lt;/p&gt;
&lt;p&gt;...You couldn’t see all the photos somebody has uploaded or anything. We wanted to fix that but we had this problem where if you are, this goes back into the stack, but we had these application servers that were &lt;a href=&quot;https://stackshare.io/django&quot;&gt;Django&lt;/a&gt; and we had these database servers which were &lt;a href=&quot;https://stackshare.io/postgresql&quot;&gt;Postgres&lt;/a&gt; and Postgres can only support a certain number of connections...we can’t add any more load to the servers, and serving a bunch of dynamic web pages actually does add a bunch of load to the servers, especially when it’s going to be exposed in the public web. We decided we had to do client rendering.&lt;/p&gt;
&lt;p&gt;I went to the front end engineering team at Facebook called UIE...I was like, “Hey we need a JavaScript framework what should we use?” They were like, “Well we’ve got these three or four experimental things that we have baking right now. We have BoltJS, we have JSHTML and then we have this &lt;a href=&quot;https://stackshare.io/react&quot;&gt;React&lt;/a&gt; thing.”...I took a look at all of them and I talked to the people working on them and decided to try out &lt;a href=&quot;https://stackshare.io/react&quot;&gt;React&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Instagram was kind of the future in terms of tech stacks at least relative to Facebook, and I was bridging the Facebook world and the Instagram world. I saw that Facebook is five years in the future in one direction and Instagram is in the present but kind of in a slightly different direction.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://stackshare.io/posts/the-react-story#react-gains-adoption-within-facebook&quot;&gt;React Gains Adoption Within Facebook&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;29&quot;&gt;
&lt;p&gt;The ads team is some of the strongest front end engineers out there and they came to me and they were like, “Hey how was your experience building with React,” and I told them. I said, “Hey I’m a huge fan I don’t want to use any other framework other than this thing.”...&lt;/p&gt;
&lt;p&gt;The guy that actually originally came up with idea for React, Jordan Walke, came from the ads team. He was like, &quot;making a change on this product is terrifying, like potentially lose a day of revenue because you’ve missed a semicolon or something.&quot; He had felt the ads pain and then he convinced them after building this thing on nights and weekends to work on it full time for a little while. As he was working on this framework full time he built a type ahead component and had rolled that out I think in maybe a little News Feed unit but never a full application. Instagram was like the first full application...&lt;/p&gt;
&lt;p&gt;Then Ads says, “Worked on that News Feed thing, worked on the Instagram thing, we’ll try it on ads.” Mobile search said, “Hey it worked on that News Feed thing, it worked on that Instagram thing and I hear that ads is going to try it,” and then they keep going.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://stackshare.io/posts/the-react-story#open-sourcing-react&quot;&gt;Open Sourcing React&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;25.849517684887&quot;&gt;
&lt;p&gt;We were really excited back at Facebook because we had been writing documentation, getting it ready and it was early morning for us because we were on the West Coast and the tweets started to roll in that were all like, “Facebook is terrible, this is the worst idea I have ever seen.”...We were like, “they’ll love this” and we didn’t realize that like that’s not how the rest of the world thought... Nobody used it and it was just kind of like a disaster.&lt;/p&gt;
&lt;p&gt;Then JSConf EU was later that year...I wrote this talk and I was like, “I’m not going to try to convince you that React is better. I’m just going to tell you why it’s different and these are the three or four things that nobody has tried before.” That was a lot more; people were a lot more receptive to that.&lt;/p&gt;
&lt;p&gt;Another thing that is often overlooked about React when you think about stability, within Facebook there are, I don’t work there anymore but when I left there were tens of thousands of React components which probably translates to hundreds of thousands of lines of code. Whenever React wants to make a breaking change, they can’t tell other people to re-factor their code. They have to re-factor those hundreds of thousands of lines of code themselves... React team has to do it all. What that means is that it has to be automatable with some sort of script and those scripts are shared with the community and that’s why you don’t get an &lt;a href=&quot;https://stackshare.io/angular-2&quot;&gt;Angular 2&lt;/a&gt; scenario with React because the people paying the price are the people actually making the breaking changes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://stackshare.io/posts/the-react-story#reflections-and-whats-next&quot;&gt;Reflections and What's Next For React&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;18&quot;&gt;
&lt;p&gt;What I wanted to do was I wanted to have a React team certified badge where we say, “Hey, we are blessing this third party library and we say this is the right thing to do.”...&lt;/p&gt;
&lt;p&gt;Fiber just started passing all of its tests recently and that’s a really cool project. It does bring a lot of really interesting concepts so that’s really cool. I think the React VR announcement was really interesting. If you think about all the different platforms you can target with React Native or with React, there is iOS, Android, web, VR now...That’s really cool because you teach these engineers how to write a little JavaScript and the basics of React and then you just give them API documentation for all these platforms and they can go and move really quickly. That’s really cool, that’s stuff that I’m really excited to see.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;Yonas: All right welcome. Pete do you want to introduce yourself?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pete: Yeah I’m Pete Hunt formerly of the &lt;a href=&quot;https://stackshare.io/react&quot;&gt;React&lt;/a&gt; team at &lt;a href=&quot;https://stackshare.io/facebook&quot;&gt;Facebook&lt;/a&gt; a long time ago. Over the past two, two and a half years I’ve been CEO and co-founder of a company called &lt;a href=&quot;https://stackshare.io/smyte&quot;&gt;Smyte&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I grew up north of Boston and amongst many, many Red Sox fans which turned me into a fan of kind of anybody who plays against the Red Sox basically. If you ever met any Boston fans you know what I mean.&lt;/p&gt;
&lt;p&gt;I went to college in upstate New York and then basically went straight from my graduate program to Facebook in at the end of 2010.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: When you first got there what team did you join and what was the set up for what you were working on?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: I got my master’s in computer science and I focused on distributed systems and I was really excited about building the next distributed database, because this was back when databases were a really, really cool technology. There were all these new database startups coming out. I thought caching was really cool and distributed consensus and all that stuff.&lt;/p&gt;
&lt;p&gt;I joined Facebook and I was thinking, “All right okay I’m going to work in search infrastructure, memcache,” there is this thing called &lt;a href=&quot;https://www.facebook.com/notes/facebook-engineering/tao-the-power-of-the-graph/10151525983993920/&quot;&gt;TAO&lt;/a&gt; which is their distributed graph database.&lt;/p&gt;
&lt;p&gt;What happens at Facebook is they put you into this bootcamp program where the first six weeks I don’t know if it’s changed since then, but back then it was the first six weeks. You go work on a little bit of everything so you are given; a front end task, a back end task, an infrastructure task, a mobile task and all over the stack.&lt;/p&gt;
&lt;p&gt;One of the things that I had to work on was the embeddable comments widget that you see on TechCrunch and other blogs that you can put Facebook comments in there. The task was like send a notification to the blog owner when somebody makes a comment and there was some condition associated with it. I wrote the code, got the code code reviewed the tests pass and it rolls out on a Tuesday. Then two or three hours after it rolls out TechCrunch posts this thing that’s just like, “What the hell happened to Facebook notifications.” Because this thing had a bug in it where it sent all the owners of these blogs like thousands of notifications in like a day.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Ouch. It was your first bug!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: This is like my third week on the job or something right and I’m like, “Wow my work made it into TechCrunch that’s awesome.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Congrats man that’s huge.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Thanks. They rolled it back there were like no permanent problems from that or anything and it’s, I think any tech company these days doesn’t hold bugs against the engineers at least the ones that people want to work for. That was a super positive experience; I ended up really liking the idea of working on user facing products. I ended up joining the Facebook video team and that was one person so I was the second person on that, the first person moved on so I was like the Facebook videos team.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: The Facebook video man.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah basically.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Wait, one person? So this is like way before videos is even a thing on Facebook.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: This was like, you know we were talking about &lt;a href=&quot;https://stackshare.io/react-native&quot;&gt;React Native&lt;/a&gt; before we started recording and Charlie Cheever started &lt;a href=&quot;https://stackshare.io/expo&quot;&gt;Expo&lt;/a&gt;. Two years before I joined Facebook his hackathon project was, “Hey you should be able to upload videos to Facebook.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Duh!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, right? I think it became like the number three most popular video site in the world or something. It was this hackathon project that was barely maintained, so I was like the one guy at the company that was maintaining this thing. This was back before Facebook Live was a priority or any of that stuff.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: He had built, so Charlie had built the first version of videos and then you were tasked with taking that on.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: There were a couple of people that had hacked on it but I saw his name all over the codebase. There were a couple of other kind of old timers that had built that. It was one of these things that was, it was like a hackathon project and it was never a strategic priority while I was there so I was just like the one person that was keeping the lights on making sure that everything was working.&lt;/p&gt;
&lt;p&gt;It was the third largest video site in the world or something. They put this like… 23 year old kid who sends thousands of notifications to blog owners to like maintain this thing.&lt;/p&gt;
&lt;p&gt;It was cool, I don’t know if it was a good idea but it was cool.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Did you make any like, any big bugs make it into the video product?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: It was like … I was really into &lt;a href=&quot;https://stackshare.io/python&quot;&gt;Python&lt;/a&gt; in college that was a pretty cool – While I was in college again like &lt;a href=&quot;https://stackshare.io/rails&quot;&gt;Ruby on Rails&lt;/a&gt; had just become popular, so python was kind of riding that wave too. I was really excited about Python and kind of looked down on &lt;a href=&quot;https://stackshare.io/php&quot;&gt;PHP&lt;/a&gt; programmers. During my tenure on Facebook video I took all the Python code that they had written and ported it into PHP because we wanted one codebase in one language. It was kind of just like …&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: We as in yeah, like everybody like as part of engineering wanted it. Did you want that or were you just like, “Oh man?”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: I mean back then I didn’t have the experience I have now so I was like, “Python is cool and PHP is for losers.”&lt;/p&gt;
&lt;p&gt;Like I appreciated having one language but I didn’t realize that for all intents and purposes it didn’t matter what language you use.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Got you. At that point Hack/HHVM all that was already a thing right?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: That was when &lt;a href=&quot;https://en.wikipedia.org/wiki/HipHop_for_PHP&quot;&gt;HPHP&lt;/a&gt; had just finished, so they had just rolled out the last web servers on HPHP which basically takes regular old PHP and compiled it to C++. If you are familiar with all these transpilers in the JavaScript world, well it’s all the same thing, but server side you transpile from PHP to C++. The guy who wrote that saved the company some ridiculous amount of money.&lt;/p&gt;
&lt;p&gt;I mean just making single digit percentage points gains in efficiency at that scale is a big deal.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: For sure, wow interesting. So, video was like your big project and then did you go directly into photos or how did photos come into the mix?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: So, because it was a team of one it was kind of org’d or it was org’d under the photos team. We had the photos and videos team, I worked on video and almost exclusively video and then my manager managed me and then the four people or five people working on photos. Again, largest photo sharing site in the world had like four or five people working on it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: How many people were at the company at this point?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: I think it was under 2,000. Facebook engineering was I want to say like 600 people. Remember, a lot of that went into infrastructure, this was, Facebook was started before the cloud was a thing so they had to run their own data centers and do all that stuff. That’s, a lot of the headcount was tied up in various infrastructure related stuff.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: That would be a good thing to focus on, cloud...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: I was just thinking like what would Facebook’s engineering, what would that have looked like had the cloud already been a thing?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, it’s really interesting. The …&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: We could probably spend like hours talking about that but yeah.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Hey if you want to make two podcasts today, I’m into it.&lt;/p&gt;
&lt;p&gt;One thing, I don’t know if this is just something I read in a blog post somewhere or if this is like common knowledge. Some people say that the Facebook’s and Google’s of the world are like five years ahead of open source and companies that can’t throw zillions of dollars at engineers. When I joined I remember this vividly I think it was 2011 or maybe 2012 I gave this tech talk on this thing called Tupperware and it was using this thing called Linux Containers. I didn’t really understand what that was because I wasn’t super knowledgeable about the actual kind of devops side of things. That’s basically Facebook’s version of Docker and this was back in 2011. They had built that and Google I know had their own containerized thing that they had.&lt;/p&gt;
&lt;p&gt;Then Docker came out I think it was 2013 is when it started getting really popular, 2014. I think that one change that would happen today is that rather than invent your own container orchestration they would just use &lt;a href=&quot;https://stackshare.io/docker&quot;&gt;Docker&lt;/a&gt; and probably something like &lt;a href=&quot;https://stackshare.io/kubernetes&quot;&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Got you yeah, no that seems like an obvious one. I think it was Heroku who had also been using Linux Containers and the obvious choice would have been Docker in orchestration there. But, yeah that’s interesting, do you think that … Out of the 600, I guess we can use that as a proxy, out of the 600 engineers how many would you say at that point were working on infrastructure versus application code?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Oh man that’s a hard question.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Ballpark. I mean one person on video, I mean that’s kind of crazy.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Remember though at the time there was a whole effort for Timeline, so Timeline was like the big, one of the couple of big projects that was going on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Timeline, I remember Timeline yeah.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: That sucked up a lot of talent on the front end engineering side. You are building this infinitely scrolling timeline user interface that’s got to work in IE6 or something that takes a lot of resources. On the infrastructure side you need to have a back end that lets people skip from the current year to what they did five years ago. A lot of times you’d put that data more in a cold storage and how do you deliver a user experience that lets you load that fast enough. I would just, I’m just making up a number here but I would say it felt like two thirds of the company was infrastructure and one third of the company, or of engineering, was front end or product.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Y: Now that’s huge right because then that could have gone, that could have flipped the other way like one third to infrastructure let’s say if the cloud had already been a thing and you guys weren’t building out your data center. That could probably be a whole separate podcast but it’s so interesting, so the photos team, I guess we can probably get into the React stuff now. Photos - what was that like; were there any like big challenges that you can remember when you were first getting ramped up in video and photos that you remember?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah. I joined to work on video and it was kind of in maintenance mode and so one of the problems that video had was every Sunday morning the encode queue would get backed up and I would get paged and I would have to restart the encode servers. We fixed that by again like throwing out a bunch of Python code and rewriting it in PHP and the nature of the company at the time was like people would change teams really often. They would actually try to get you to change teams after a year to try to spread knowledge around the company or something.&lt;/p&gt;
&lt;p&gt;The photos team started to turnover and I interfaced with them a lot so I ended up having to pick up the slack on some of the photos tasks. Before I really knew what was happening I was the longest tenured person on the photos team and it happened really quickly.&lt;/p&gt;
&lt;p&gt;Back then … There was a couple of things going on; there was Timeline that was going on and that timeline involved a bunch of search and stuff like that. Another big thing that was going on was the shift to mobile, so I joined and then it was a couple of months after I joined, Zuck gets everybody together and is like, “Hey mobile is going to be a big deal and we are dropping everything and moving tons and tons of resources to mobile.” A lot of people were pulled off of the web teams and put on mobile, which pissed me off because I didn’t have an appreciation. I didn’t have a smartphone, so I didn’t have like an appreciation for mobile. This was like 2011; you know what I had just gotten my first smartphone, that’s what it was, when I graduated.&lt;/p&gt;
&lt;p&gt;I was like, “We can’t maintain the largest photo site in the world with a handful of people, this is crazy guys. We’re putting all these people into iOS and Android for apps that make up a minuscule amount of our traffic this doesn’t make any sense.” Turns out that it was 100% the right thing to do, that’s why I was not CEO of Facebook.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Yeah it was a good bet.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah it was definitely a good bet. The kind of people that had been around for a while were being pulled on the mobile teams, which created opportunities for the less tenured people at Facebook to step up and own products and own pieces of the infrastructure. So that by the time we acquired &lt;a href=&quot;https://stackshare.io/instagram&quot;&gt;Instagram&lt;/a&gt; they were like, “Hey we need a senior-ish person on the photos team to go over there and build out their web stuff, integrate them, help them get integrated into Facebook engineering. Kind of welcome them and plug them into the right stuff.” I was one of the people that was, I was the first one to go full time over there to Instagram when that happened.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Got you okay. What was that like? You read about it then you were like, “Whoa this is cool,” or what were you thinking at the time?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Well, you know again we had, I was on Facebook photos we had this big initiative to move to mobile. We had this app that we built and we were really proud of called Facebook Camera. It was …&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: I don’t even remember that.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah that’s this, that comes into the story. We worked really hard on it, I wasn’t working directly on it, I was supporting it from the server side but we had a bunch of really talented engineers working on it and tons of designers. Instagram just came in and ate its lunch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Wait I do remember that app, it was all photos and then you were supposed to like stuff but the whole screen was the photo or something.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah and we went back and forth in that design decision for a long time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Yeah I do remember that.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah so we launched that app. My read of the situation, again I don’t remember everything 100% accurately or anything, but we spent a really long time trying to figure out the exact gestures that we were going to do and all sorts of really, really nuanced UI things. The Facebook ethos at the time was unashamedly move fast and break things and I was like, “Guys this is not move fast and break things. This is like pause, pause, pause and miss the market.” That may or may not explain what happened, it kind of felt like it was ready to launch for a long time it just was people couldn’t agree that the design was right. Anyway it did launch, Instagram made its launch. We considered them like these fierce competitors and like, you can see my first photo on my current Instagram account is when I worked at Facebook and took a photo of my desk trying to figure out why do people like this app? I’m trying to figure out, all that kind of stuff.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Right, you still weren’t convinced that mobile was the future?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, I’m still trying to figure it out you know?&lt;/p&gt;
&lt;p&gt;Then one day we get this or one evening we got this email it’s like, “Hey guys come in early to work tomorrow we got a big announcement.” Then we come in early and he is like, “Yeah you know in an hour they’re going to report that we acquired Instagram and they are coming in this afternoon and go shake their hands.” I was like whoa like.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: All six of them.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah. Like they are our sworn enemies and now we’ve got to be friends with them... great.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Right. Yeah it was like six people though right?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: It was 14 I think.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Oops.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: No, it was actually, but depending on whether you count when they announced the acquisition or when it actually closed because they hired people in between those two.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Got you, okay interesting. 14 people walked into the office.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, I think it was like 14 people. There is a photo somewhere that I could go and count the people.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Yeah I’m sure. Okay, so then at some level you must have been like, “Oh well this is good now we have like a way to do photos and we don’t need to spend weeks figuring out gestures and stuff.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: I don’t know I liked …&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: You liked Facebook Camera?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Well I wouldn’t say I liked Facebook Camera. I wanted, I bled the blue and I wanted our company to win and it didn’t feel like we won...turns out we did.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Yeah, that’s a huge W right there.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: It was a little weird when they showed up for me anyway and then they worked … What was cool is I think that some of the really successful tech acquisitions that have happened - think like YouTube and Instagram - those are the two that stick out for me. You kind of leave them alone, you say, “Hey we’ve got all these resources, take advantage of the resources you want but we’re not going to tell you how to run your product.”&lt;/p&gt;
&lt;p&gt;With Instagram they gave them a garage in the Facebook campus where they could just do their own thing. They took advantage of the Facebook kind of trusted safety systems, but other than that, they continued to use &lt;a href=&quot;https://stackshare.io/amazon-ec2&quot;&gt;AWS&lt;/a&gt;, they continued to draft their own product strategy from what I could tell. It was really interesting how hands-off it appeared at least. I wasn’t in the conversations with Mark or the executive team or anything, but as kind of an engineer, it seemed like they just could do what they wanted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Y: Then how did the transition happen when you got pulled on to Instagram?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: They needed a web presence.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: They had no website at the time.?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: They had photo pages and the web was a bit of a strategic thing for them, so they were mobile first, Instagram has always been mobile first. Instagram actually, a lot of the content is public and, I think SEO was an important thing for them...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Really?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, you search for like Justin Bieber you want the Instagram link to be up at the top right?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Yeah. Yeah.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: I think that was the strategic reason why.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Yeah I can see the head of Instagram saying, “Look desktop is going to be a big thing let’s go after it.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: That’s what was weird because it flipped.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Yeah exactly.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Everything went mobile first and then we would think about like, “Okay what’s the desktop angle or the mobile web angle.” SEO was kind of a justification I think for what we were doing, so my main …&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: You were the guy. You were the desktop photos guy.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: That’s right so my manager was like, “Hey you’ve been around the team for a while - you interested in making the change? We are spinning up this new team on the Instagram side to build out all the Instagram web stuff,” and he was like, “You should go,” and I was like, “All right, I’ll do it. I’m on that.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Nice all right.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: That was being, I was the first full time engineer to go over to Instagram. From the Facebook side.&lt;/p&gt;
&lt;p&gt;I was like the corporate drone being dropped into a new startup... the corporate drone from like Facebook, right?&lt;/p&gt;
&lt;p&gt;No they didn’t make, it’s not like they made me feel that way or anything. They were all super nice and cool, they did things very differently than Facebook so, code review was largely optional. They did continuous deployment which I thought was totally crazy, Facebook would deploy on Tuesdays at 2 p.m. and if you didn’t get your changes in they weren’t going out that week.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Okay so yeah it was a startup essentially, they were still just operating as kind of like a startup.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: They were using &lt;a href=&quot;https://stackshare.io/amazon-ec2&quot;&gt;AWS&lt;/a&gt; and all the cloud computing stuff that you are used to, they were using &lt;a href=&quot;https://stackshare.io/django&quot;&gt;Django&lt;/a&gt; rather than the Facebook home built … At that point it was like a home built framework and a home built language at Facebook scale and on Instagram it’s all off the shelf Django run on AWS talking to &lt;a href=&quot;https://stackshare.io/postgresql&quot;&gt;Postgres&lt;/a&gt;, pretty different software stack.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: It’s funny because that’s of the perfect representation of what has happened in the past few years and the reason that StackShare even exists is, these days you're not building all that stuff for yourself. You are not rolling your own framework so that’s the perfect example.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah I mean our company we started two and a half years ago, we process a lot of data, like hundreds of millions monthly actives type of data and it’s event data too so the volume is really high. We have four people working full time on infrastructure. It’s crazy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: It’s like the opposite.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, yeah, yeah, it’s pretty cool all the technology that’s come out recently that lets you just manage all that. But anyway...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: That’s awesome though, so you get into the Instagram world; everyone is deploying code, slinging code to production, no code reviews...interesting.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: They had some code review but it was optional. There were a couple of people, I remember there being like three engineers that knew how everything worked and they could just roll out anything they wanted and it was totally fine. The newer guys like me, we would want our code to be reviewed, we didn’t want to take down the site. One thing that they did have it was basically like everything was really, really well tested so if the tests were green you were okay to roll out and the tests were really, really thorough.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Man so interesting, I definitely want to hear about this stack, but let’s try to keep it focused. When you got there, there was no front end framework being used?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: So let’s rewind for a second. We had to build this, what we thought were going to be a pretty comprehensive set of web apps. Like we were going to start with profile pages and photo pages and then we were going to build hash tag pages, maps like geographic search and stuff like that, all for the Instagram web.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: What existed is the single photos, the single photo pages?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, there was a photo page and then there was instagram.com which was like a billboard for the app. That’s all that they had.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Got you yeah, I remember that actually, but you could only see a photo.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah and you couldn’t see all the photos somebody has uploaded or anything. We wanted to fix that but we had this problem where if you are, this goes back into the stack, but we had these application servers that were &lt;a href=&quot;https://stackshare.io/django&quot;&gt;Django&lt;/a&gt; and we had these database servers which were &lt;a href=&quot;https://stackshare.io/postgresql&quot;&gt;Postgres&lt;/a&gt; and Postgres can only support a certain number of connections. The constraint was – and we were at that max limit - the constraint was we can’t add any more load to the servers, and creating a bunch, serving a bunch of dynamic web pages actually does add a bunch of load to the servers, especially when it’s going to be exposed in the public web. We decided we had to do client rendering.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: What about caching?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: They were really good about caching and I don’t actually know if, like looking back on this the way I would have done it now is be like, “Hey we are going to server render it and we are just going to cache it.” I don’t actually remember if there were other reasons why we decided that we had to client render it. I remember I was basically told like, “Hey I think we need to client render this.” There was a prototype that was going on that was client rendered so we decided to go … Oh yeah, because eventually we were thinking those pages would be personalized, so if you are logged in, you look at the same profile page it looks different to both for us. Which is like Facebook for example... you can’t cache any full page because everybody’s page is personalized.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Okay so you were doing it with that in mind?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: That’s what it was.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Okay got you. You needed to client render and none of that was, had been rolled out or anything at that point?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: We had no client rendering. It was a small prototype of jQuery-Mustache templates which was kind of the, the designer had hacked something up with a certain engineer over there and they were like, “Hey you know this is a prototype. Hey Facebook engineer, go like production-ize this and get it rolled out.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Facebook drone, execute!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: No. They were super cool, I love those guys. We had to client render; I actually didn’t know &lt;a href=&quot;https://stackshare.io/javascript&quot;&gt;JavaScript&lt;/a&gt; at the time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Wow.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Facebook largely doesn’t, they don’t want engineers to write &lt;a href=&quot;https://stackshare.io/javascript&quot;&gt;JavaScript&lt;/a&gt; because it adds to the download, so it increases … It’s more CPU utilization and it’s another language to learn, it’s more code to download, it’s more work, so there is a little bit of JavaScript that’s reused all over the place on Facebook. I kind of knew JavaScript but not really. I went to the front end engineering team at Facebook called UIE. User Interface Engineering, I was like, “Hey we need a JavaScript framework what should we use?”&lt;/p&gt;
&lt;p&gt;They were like, “Well we’ve got these three or four experimental things that we have baking right now. We have BoltJS, we have JS HTML and then we have this &lt;a href=&quot;https://stackshare.io/react&quot;&gt;React&lt;/a&gt; thing.” There were pilot projects for all of them, there might have been something else too but … because I remember I think Facebook had acquired the WebOS guys and they were really good and they had built something. We had a mobile web framework called Javelin so there was a bunch of different options. I took a look at all of them and I talked to the people working on them and decided to try out &lt;a href=&quot;https://stackshare.io/react&quot;&gt;React&lt;/a&gt; and so-.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: What drove you to do that? What about the other options did you just like the name or?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: So everyone has got their “hello world” and if you’ve worked on other ways of rendering client side apps before and then you see React, it’s like almost too good to be true. You are like, “How does that work? There is no way that that works and if it works it must be really slow.” It took me, like Jordan worked with me a lot and he had written a lot of really interesting hello world, not hello world but like quick starts for various types of things. We had prototyped the profile page in React and it was a pretty positive experience, the end result was really positive. It was fast, it worked really well, didn’t have too many bugs because it’s getting rid of all the mutable state is a good thing. We launched it and it was really successful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Which profile page?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: The Instagram profile page.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Okay so a user’s profile page. You basically, okay whoa that’s quick. You saw React you were like, “This looks really cool,” and then you just started to build out the profile page with that.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, but there is a lot of blood, sweat, and tears in between like let’s try React, and let’s put something into production.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Okay all right cool, let’s talk about that because that sounds pretty quick it’s like, “Oh this seems cool...BOOM , it’s live for everyone.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: I think if there is one, like reflecting on this, if there is one big theme it’s that Instagram was kind of the future in terms of tech stacks at least relative to Facebook, and I was bridging the Facebook world and the Instagram world. I saw that Facebook is five years in the future in one direction and Instagram is in the present but kind of in a slightly different direction.&lt;/p&gt;
&lt;p&gt;There is some things that Facebook did really, really well and better than anybody else, there were other things that they would have just used a cloud service for.&lt;/p&gt;
&lt;p&gt;A good example was all the Facebook JavaScript, React included, was packaged using their homegrown bundler which was really, really advanced it used some machine learning or statistical thing that looks at the logs of people downloading individual modules and the dependency graph and will do an optimization on what modules are we going to bundle together and what are you going to have to download up front versus lazily and all sorts of stuff.&lt;/p&gt;
&lt;p&gt;Written by this PhD, super super crazy, it’s awesome, it’s better than &lt;a href=&quot;https://stackshare.io/webpack&quot;&gt;Webpack&lt;/a&gt;, it’s better than anything that’s out in open source still, but it’s very, very much tied to Facebook’s infrastructure. The module system - we had these comments in the JavaScript that was @ require and the module name and it would show up as a magical global - so we had to take that and somehow bring the React dependency into Instagram. The first thing I did was I wrote a Python script that would translate that weird syntax; it was a bunch of just gnarly regular expressions to &lt;a href=&quot;https://stackshare.io/requirejs&quot;&gt;RequireJS&lt;/a&gt;. I don’t know if you guys remember RequireJS?&lt;/p&gt;
&lt;p&gt;AMD modules, so we did that. That was enough I think to get us to production, so I ran the script once, committed the generated code to git and then we set up a little RequireJS integration with &lt;a href=&quot;https://stackshare.io/django&quot;&gt;Django&lt;/a&gt; and then we shipped it. As we started to pull over, build more products, we wanted to use analytics so we wanted to use Facebook's analytics stack so we had to pull over more of those modules and then that script got bigger and bigger and bigger and bigger.&lt;/p&gt;
&lt;p&gt;Eventually I moved to management and I got a team of three or four engineers that were helping to build out all this stuff, and we wanted to build this whole suite of business products. By this point we were pretty happy with React and we knew that, we were going to go all in on it and we …&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: You are talking about Instagram?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: I’m talking about Instagram, yeah.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Interesting yeah. In terms of where React was, you basically got it ready, you brought it into the Instagram environment or codebase and then you shipped it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: We shipped the profiles product, then we shipped - that went over pretty well - then we shipped a News Feed product so you can log in, see a feed, paginate. It had this one really cool subtle feature that I’m still really proud of where if you went somewhere and then clicked the back button it would cache where you were in the feed in the history API and it would also cache the data that you had downloaded. So it would bring you right back to where it was, which is super annoying if you ever use a product that doesn’t do that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Facebook mobile... yeah, it’s super annoying but that’s awesome. For that initial launch it sounds like that went really well, you guys were happy with React. Was that an “aha moment” for you or were you just like, “Oh this is cool let’s continue to use it,” or did you have some inkling like, “Oh man this is going to be pretty big if we can continue to build out with React.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: There was a couple of things going on; the first was I thought the development experience was awesome. It was pretty different from how it looks today. Lee Byron came in a couple of months after we had shipped the first, the profile pages and he was like, “This API is unintelligible for the lifecycle hooks let’s,” -- because we had different hooks, totally different names for every lifecycle hook. We had some they called like “prop trigger” and another thing called like “on state changed” and another they were kind of like ad hoc names-- so he is the guy who came up with “component did mount, “component will mount” he kind of cribbed it from how iOS does things. It was totally a team effort and I cleaned up a lot of the API too and fixed some performance stuff and did all the packaging for Instagram then we just went and reused a lot of that for open source.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Y: So, in terms of the evolution it sounds like that was the proof of concept, “Okay this works.” By the way how many users were there on Instagram at that point?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: I forget, but I mean tens of millions at least.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Okay, so you knew it worked well at scale in a sense, and then from there did you start building everything else out immediately in React?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: If you look at it from the React point of view there were a couple of things going on. Yeah we were like this works great and then I get another PSD from our designer for a newsfeed and they are like, “Go build that.” Like, “All right got to go back to work and build that,” didn’t really reflect too much on the framework. I thought the framework was super super kick ass, I thought that it was really, really innovative, it was doing things in a way that had never been done before and I wanted to be a part of it. So I started contributing back to the code, the Facebook side code base just kind of in my spare time. As we would roll out new products I would fix bugs and clean up the API, write docs, whatever.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: On Instagram.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: On Instagram but those would make it back into React core.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: It was open source from day one?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: No, this was all …You can think of Facebook internally open sourcing React to Instagram.&lt;/p&gt;
&lt;p&gt;There were the source of truth modules in the Facebook codebase and then we would periodically, we would just pick a git commit and then we would export it into Instagram when we wanted to take advantage of a new feature or something. It was always actually really painful to do that, because I had again this hacky script that would translate it to RequireJS and like maybe it broke or something and you’ve got to fix that and then you’ve got to, we didn’t have a lot of stability back then.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: It’s not like you are forking it right, you didn’t fork react the core.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: No, it was when we made changes it was always to the Facebook source of truth and then we would export that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Okay all right, so you were committing directly to the core repo?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: That’s right yeah.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Got you interesting. You were making these changes okay basically it happened incrementally now you had to build the News Feed so obviously you are going to use React. Then what came after News Feed do you remember?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Then Facebook ads had to do client rendering too, they were rebuilding some critical ads product and they were looking, they were doing the same thing that I did a couple of months prior which was BoltJS, whatever their options were in React.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: By the way was Angular ever a thought?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: No, not even close.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: When you guys were thinking about this it was always, “Let’s look at what’s already being used in the Facebook ecosystem or has been created inside of Facebook.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: It’s less about, I mean there is a little bit of NIH there, but there is good reason for it. Templates were never on the table. So a long time ago on the PHP side of the house they had this thing called XHP which is open source but nobody uses it. Where rather than having what passes for a template in PHP world, you build what’s called XHP elements which are components. They use this similar syntax to JSX, they have similar kind of lifecycles for loading data and server side they just spit out a string of HTML rather than DOM elements.&lt;/p&gt;
&lt;p&gt;We were like this is definitely the right way to build applications it wasn’t even up for debate.&lt;/p&gt;
&lt;p&gt;All those the BoltJS and all these other things you build the apps in similar ways and components. What made React unique was how the components re-rendered, the other ones there would have been an initial render and then you would have to manually like update the DOM.&lt;/p&gt;
&lt;p&gt;That’s what I thought was, that’s what blew my mind. I like didn’t understand how that was possible.&lt;/p&gt;
&lt;p&gt;Now we have a really crisp explanation of this like, think of it as a Virtual DOM and you do a diff and the diff is fast. That was a really big pill to swallow back then. Remember we were pushing products on IE7 and 8 back then, so having that be fast enough I was like, “Yeah right.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Right...wow that’s so interesting. It sounds like it was super organic and sorry you were saying the ads team was looking around at BoltJS and then they found React.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah and the ads team is some of the strongest front end engineers out there and they came to me and they were like, “Hey how was your experience building with React,” and I told them. I said, “Hey I’m a huge fan I don’t want to use any other framework other than this thing.”&lt;/p&gt;
&lt;p&gt;What they did is they did some benchmarks. The UIE team internally had also done some benchmarks too and basically we all came to the same conclusion that was like, “Hey we all clearly obviously love the programming model and it turns out like it’s most likely going to be fast enough for the types of problems that we want to solve.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: It’s going to be fast enough not necessarily it’s going to be faster?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah fast enough. One of the big observations that I didn’t really appreciate until building something with React was usually it’s only a tiny percentage of your app that re-renders so the diffs normally aren’t actually that big. In the cases that the diffs are really big the alternative approach is to use data binding and the building up and tearing down of all those change listeners is really, really expensive. React in a lot of ways optimizes just for the initial render and sometimes at the expense of the incremental updates, because the incremental updates are pretty rare and pretty small.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Got you, okay interesting. From the ad side of things why did they want to take on React? Were they experiencing issues... what were they using prior to that?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Have you ever created an ad on Facebook?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Yes, once.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: It’s pretty hardcore. You are pulling in all these different demographic groups, they are spending money so you have to understand what locale a person is in. Yeah like if you are creating an ad in Israel like it’s got to work left or right or right to left. You want the preview of the ad unit to exactly match the actual ad unit, so you need a way to render it with the same code, but make it editable and a couple of edge cases when you are creating the ad versus rendering the ad. It’s got to be fast. If the button doesn’t save your change like you are going to spend money on something that isn’t what you wanted to buy, so it’s a very stressful thing to work on.&lt;/p&gt;
&lt;p&gt;The guy that actually originally came up with idea for React, Jordan Walke, came from the ads team. He was like, &quot;making a change on this product is terrifying, like potentially lose a day of revenue because you’ve missed a semicolon or something.&quot;&lt;/p&gt;
&lt;p&gt;He had felt the ads pain and then he convinced - I don’t know how he did this - but he convinced them after building this thing on nights and weekends to work on it full time for a little while. As he was working on this framework full time he built a type ahead component and had rolled that out I think in maybe a little News Feed unit but never a full application. Instagram was like the first full application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: I was about to say so was React already being used at some level by ads or did they never...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: It wasn’t used by ads it was used a little tiny bit on News Feed. It was like 1% of News Feed users were getting this experiment that was the client-rendered comment box.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Client rendered comment box okay so that was after Instagram or before?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: That happened just before Instagram. We knew like it will work on like IE7 or whatever it was that supported it back then. We knew that it would work we just didn’t know that it would work at the scale of a full page, with like a router and data fetching and all that stuff.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Got you. So basically React the inception was because of ads by Jordan so he built it as a side project they started to experiment with it in News Feed to client render comments for 1% or whatever of users, right? Then you basically saw that and said, “Looks good let’s start using it for Instagram profiles,” and then everything else just started happening?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Then Ads says, “Worked on that News Feed thing, worked on the Instagram thing, we’ll try it on ads.” Mobile search said, “Hey it worked on that News Feed thing, it worked on that Instagram thing and I hear that ads is going to try it,” and then they keep going. They kicked off something concurrently as well, so it really did kind of grow organically and it’s like everybody that used it got really passionate about it and excited about it and just started spreading it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Like wild fire.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah and it got to a point where, what’s called the product infrastructure team at Facebook which owns a lot of developer abstraction and stuff like that was like, “Guys, you are writing too much JavaScript. We know that React is really fun but you can use PHP once in a while to render this thing.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: That’s hilarious, they probably saw like a graph of JavaScript entering the code base.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, you know like, “This has gone up way too fast; do you really need all of this JavaScript?”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Got you, interesting okay. It was largely organic and then, but that’s a big bet to make on ads, because ads is the life blood of the entire company. I’m guessing they started with like 1% of 1% of ads and then just like looked at benchmarks and then eventually more and more ads.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah. Once that had happened, it was basically like the de facto way to build apps in JavaScript at Facebook.&lt;/p&gt;
&lt;p&gt;Like if you can prove it on ads and you can prove it ... It’s like if you can prove it on ads, then you’ve proven it across all the heavy weight UIs and then there is a second question which is like; is this thing going to work on mobile and we had benchmarks to prove that as far as JavaScript goes React is going to be fine on mobile. The greater question for Facebook was; how much client rendering do we want to do?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Yeah, okay so on the Instagram side because it sounds like Instagram is still the biggest user of React? Is that fair to say? Or once ads took over that was it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: I would say the ads codebase was probably bigger.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Then they became like the biggest user of React before Instagram became all React everything?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Instagram was first. Instagram was all React but the surface area of the Instagram product is smaller than ads. We don’t deal with too much internationalization stuff or localization stuff. Like yeah we have to translate the strings, but we don’t need to know about different currencies. We don’t have to preview components within the components and stuff like that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Got you.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: We had to deal with like performance, our biggest challenges were what does a React Router look like; so we built the first three React Routers ever. What does data fetching look like? Originally we were a React app that was plugged into Backbone and Backbone was doing all the data management on this. Yeah, that was actually the first profile page. The first profile pages were powered by &lt;a href=&quot;https://stackshare.io/backbone&quot;&gt;Backbone&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Wait, how did Backbone get there?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: That prototype was &lt;a href=&quot;https://stackshare.io/mustache&quot;&gt;Mustache&lt;/a&gt;, &lt;a href=&quot;https://stackshare.io/jquery&quot;&gt;jQuery&lt;/a&gt; and I forgot to say Backbone.&lt;/p&gt;
&lt;p&gt;We're like, “Man we got to ship this thing,” so hack a script to like pull React in. We replaced the templates with the React components. We shipped it, we were like, “Well, that’s pretty good,” and then Jordan was like, “You know you don’t really need Backbone, it’ll be a lot faster and better if you don’t use Backbone.” Then we built the feed without Backbone and then we started to remove Backbone from the codebase.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Got you. Then when did you run into basically state management and then need to actually build something for that or was that never, when did Redux and some of that stuff come into play?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, state management... you got to think about it you know the second your app does anything interesting, anything changes in the UI. I was kind of like whenever I would face one of these problems, I would go to Jordan and I would be like, “Hey how should I solve this,” and then he would give me an answer and I would actually put it, like turn that into code and try to push that into production and be like, “Hey that doesn’t actually work like we got to make this changes, this change this, change the code base.” It was great because like he was kind of coming at it from the theoretical like this is how I think it should be, like drawing the state machine diagrams and stuff like that. I was hacking the shit out and actually trying to push to product.&lt;/p&gt;
&lt;p&gt;Yeah, at that point I didn’t need code review anymore in the JavaScript stuff. I was the guy that could do that stuff.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Yeah, got you. Right, you had to deal with that early on?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, what ends up happening is you get like one controller component that has the state for 90% of the page and then you tediously kind of pass these props down all the way down to the bottom of your app. And we actually got pretty far with that, I think most people bail out too early on that approach because that approach has a lot of benefits. Like yeah it’s a lot more typing but you also know exactly what data your component is using and you know when it’s going to change and it’s really easy to debug.&lt;/p&gt;
&lt;p&gt;On the flip side it’s a lot of typing and then sometimes your interface to your component doesn’t make a lot of sense. If you want to render the badge of the current user somewhere you’ve got to go look at your component hierarchy and pass the user all the way down which isn’t fun. So for Instagram we just powered through it, we didn’t use any sort of state management thing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Okay got you.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Ads used &lt;a href=&quot;https://stackshare.io/flux&quot;&gt;Flux&lt;/a&gt;, the original Flux from the beginning.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: OG Flux, okay.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, the OG Flux.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Actually OG means something different on Facebook but …&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, the open graph tags.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: That’s funny, so you guys didn’t use any of that but ads needed it and they were just like, the way to go was to have something, something separate. Did they create Flux?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Sorry, Flux predates React, a lot of people don’t know that.&lt;/p&gt;
&lt;p&gt;Flux came from the Facebook chat team. So the chat bar on Facebook and you type a message and you got to sync, there is like a little … The example they always use is that there is a little unread message count in the top bar and there is an unread message count in the bottom bar and you got to keep those in sync. It gets a little more hardcore because if you have multiple browser windows open you want to keep those in sync and …&lt;/p&gt;
&lt;p&gt;Yeah, so Flux was already there and basically the approach a lot of teams took was, “Hey we are already using Flux we’re just going to swap out our manual DOM manipulation with React,” and that ended up working like pretty okay.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Right and then that became the standard- React and Flux?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah. It’s like people kept asking the question in open source like, “How do I deal with this problem?” I said, “Hey we have this thing called Flux it’s what we use, it wasn’t really designed for React but it works well enough.” That’s why you don’t often see people using the vanilla Facebook Flux Implementation, because it wasn’t really designed for React.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Right and is that one of the reasons that someone who was it, Dan, that created Redux?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah he wanted, he took … The main motivation was he wanted to do hot module reloading with Flux so you got this hot module reloading basically says, “Hey, you make a change, you save it. Then we're able to pause the state of the application load in the new code and resume and then re-render the page. It’s almost as you are typing and saving, your changes are showing up in real time. The problem is your state is stored in some variable somewhere and you have to get a reference to it and retain that. Swap out the old code swap in the new code and then put that reference back into the code.&lt;/p&gt;
&lt;p&gt;Redux was like, “Hey, how do I just make Flux work with this hot module reloading thing?” Then I think what happened is he just got a little carried away and ended up throwing out a lot of the bad ideas and bringing in a lot of good ideas and ended up with Redux.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Got you, but Instagram wasn’t using either of those.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: No.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Y: Okay, got you. Good stuff. When did the open source piece come into play and how did that decision even come about?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, I remember this because... I was super excited about React, there were other people at Facebook they were super excited. Like some of the names that you know now like Chris Chedeau, Tim Young, Jordan obviously, Sebastian and then they were some people internally that you don’t really remember. Like Michael Lowman’s was a designer on Instagram and he designed the original website and the logo that’s still used today. There are some other Instagram people that were involved a little behind the scenes.&lt;/p&gt;
&lt;p&gt;We were all really excited about it. I actually was talking with a startup about a CTO gig. Like leaving Facebook and being their CTO and they had millions of dollars in revenue and it was kind of enticing and I actually told them I was like, “Okay like I want to open source React, like hold off for like six months, I just want to do this thing.” I was, I’m saying that not to say how awesome I am, I’m saying that to say how excited I was.&lt;/p&gt;
&lt;p&gt;That would have been a huge step up for me career wise. I was like, “No, I’m strapping myself to this React Rocket ship.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: React is the future.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, we felt really, really passionate about it. Especially because remember this thing had been baked off by some of the best engineers I know against a bunch of competing solutions and we knew for a fact templates were the wrong way to do things. We knew for a fact that this Virtual DOM diffing thing which is kind of what we called it did work in the majority of cases that we tried it. For the ones that it didn’t there were escape patches that let you build 90% of your app with React and then 10% without.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: How did the idea to open source even happen or come about? Were you just like, “Yeah, we need to release this and let everybody start using it,” or was it kind of just this standard like once you have something that works really well across products you start to think about open sourcing it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: We all kind of wanted to do it. I think there was some stuff going on back then that I wasn’t plugged into. I think that James Pearce was hired around then and I know that Tom Occhino was the kind of the main business driver behind a lot of this and Adam Wolf. I think Tom reported to Adam and Adam was a big advocate for this.&lt;/p&gt;
&lt;p&gt;If you go back to that time, it was January 2013 or something like that, people hated Facebook, I mean the way that people talk about Uber today is like how people talked about Facebook. Just publicly, Social Network was still wearing off, the movie, and in the developer community Facebook IPO tanked if you remember that. I was around for that too.&lt;/p&gt;
&lt;p&gt;So Facebook’s open source portfolio was like a bunch of projects they had thrown over the wall and abandoned. Famously there was this iOS library called &lt;a href=&quot;https://github.com/facebookarchive/three20&quot;&gt;Three20&lt;/a&gt; that every iOS developer hated Facebook because they depended on this thing and then Facebook just stopped supporting it and that pissed a lot of people off. Open source wasn’t something Facebook was very good at, but I think when they hired James Pearce I think that happened at this time they were actively looking to reboot that. There also happened to be independent of that like a groundswell of support for open sourcing this React thing so the timing was pretty good.&lt;/p&gt;
&lt;p&gt;We were like, “Hey, we got to get this thing out.” There was a bunch of lawyering involved that I’m not going to get into that. We got it done and then we decide to announce it at JSConf 2013, I’m not sure if you guys remember that, but Facebook sponsors, the JSConfs and in exchange they get like a keynote spot or something. There is some sort of arrangement like that that happened. Already the sponsor keynote spots people are like a little “meh” about, the audience is kind of like, “The sponsor gets to speak to us... like... great.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Yeah Facebook.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, also Facebook this evil mega corp that ruined open source and blah, blah, blah they’re speaking at JSConf. Then so Facebook goes up, Tom O. goes up and he is a really charismatic guy and he goes up with Jordan, who is the smartest engineer I have ever met. They are like, “Hey, we have a new way of building web applications. Everything that you are doing is wrong and here is how we do it.” At least that’s how it was interpreted and it’s like step one put XML in your JavaScript, inside your JavaScript it will be totally fine.” People were like XML whoa I hate XML and then they were like, “I thought I was supposed to separate my mark up from my JavaScript, from my styling and you are telling me to put all of that stuff into one file... I think this is too much.”&lt;/p&gt;
&lt;p&gt;When he was doing the keynote and was announcing it and it’s called React, we pressed okay on the deploy button and we deployed the GitHub repo or we opened up the GitHub repo.&lt;/p&gt;
&lt;p&gt;We were really excited back at Facebook because we had been writing documentation, getting it ready and it was early morning for us because we were on the West Coast and the tweets started to roll in that were all like, “Facebook is terrible, this is the worst idea I have ever seen.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: They just told me to throw out all my front end code.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, well it wasn’t even that it’s like they don’t … It wasn’t even like, “Man, I have to throw out my code,” it’s like, “These guys are dumb, Facebook is stupid. Like they have been in their own little world for too long and they don’t know what they are doing and blah, blah, blah,” it was like sort of a bummer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: It’s safe to say people were not excited.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: No, they were excited to hate it and I believe that was the last conference that Jordan spoke at.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: That’s like, that’s a ballsy move though, if you are going to launch a brand new framework when you do it at a conference where there is not a whole lot of anticipation that you are going to announce something big, so that’s huge. I mean hats off to you guys and the team right? That takes a lot of courage and you never know how people are going to React.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: I see what you did there. I was chalking it up to ignorance we were just like oh yeah people obviously understand that templates suck. Like components are clearly the way to do things and we know that everybody has felt the pain of having the separate mark up from your JavaScript driving it. We were like, “they’ll love this” and we didn’t realize that like that’s not how the rest of the world thought.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Yeah, that’s not how the real world works outside of the Facebook walls. So there wasn’t any real evidence that other companies or anyone else was going to use it right? It was just you guys saying, “We believe this is the future, here it is.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah pretty much. I felt really passionate about it being the future and remember we had already done the internal open sourcing from Facebook to Instagram and brought it into a foreign codebase. We knew that it was usable, which is a big problem with like a lot of these open source projects that are open sourced from an internal company things it’s like just completely unusable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Right that’s an important point.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: It’s really important.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: It had already been used outside of ‘Facebook’ by Instagram so you had already dealt with some of those challenges. Okay, right that’s a good point.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, so that was hugely beneficial and we had … Remember also we had ported it to RequireJS and I think right around the time we were open sourcing it we were migrating. We evaluated all these module bundlers to be able to get away from this terrible script and we decided to go with &lt;a href=&quot;https://stackshare.io/webpack&quot;&gt;Webpack&lt;/a&gt; which was pretty unknown at the time so we …&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: I didn’t know that you guys were like one of the first Webpack users.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah. I discovered Webpack, I’m going to take credit for that one.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Nice, okay Webpack has you to thank.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: I mean I didn’t write a single line of code or anything but it was our team actually did a big evaluation on a bunch of different bundlers. We looked at writing our own, we looked at &lt;a href=&quot;https://stackshare.io/browserify&quot;&gt;Browserify&lt;/a&gt;, we looked at writing our own with browserify file components. We looked at, there was something modular.&lt;/p&gt;
&lt;p&gt;There was Google Module Server I think was another one. There was a ton.&lt;/p&gt;
&lt;p&gt;The code splitting is what, we needed code splitting. We are basically building out all these products and we didn’t want to have to download the profile page if we are on the photo page, because again the search engine optimization performance matters so we had to do that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Got you, okay. Webpack was being used when you open sourced React?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: We had maybe just finished moving over. I don’t actually remember the exact timing but like Webpack came in pretty soon after the Facebook or after the React open source if I remember it correctly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Got you, okay. So what do you think was the big driver behind everyone starting to adopt it, right? And what did that adoption look like from the inside looking out?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, let me walk through how it got adopted. Everybody hated it at JSConf 2013.&lt;/p&gt;
&lt;p&gt;Nobody used it and it was just kind of like a disaster. Well actually we had an IRC channel, a couple of people, if you know the Chang Lu and Ben Alpert both who now work for Facebook. They were these kind of people that stumble in the IRC and they were like, “Hey we really liked your JSConf video,” which we were like, “Really?”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Thanks nobody else did, come work here!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: No, took years. We basically, anybody at that came in the IRC I was always in there, Chedeau was always in there so we would get notifications whenever anyone would join and we would welcome them and we would answer any questions like super, super quick. The first couple of people that came in the community were up and running pretty fast because of that support. Then JSConf EU was later that year and Tom O., I was sitting next to Tom O. at the time and he was like, “I don’t want to do this stupid conference talk,” because remember his last one was so fun and I was like, “I’ll do it!” And he was like, “All right.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Nice.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: I wrote this talk and I was like, “I’m not going to try to convince you that React is better. I’m just going to tell you why it’s different and these are the three or four things that nobody has tried before.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Good job.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: That was a lot more; people were a lot more receptive to that. I was like, I don’t know if this is going to work. In reality we were pretty sure it was going to work but you can’t just come in and say, “Hey, we got a better solution that you should just do it this way.” You got to say, “Hey, here is the stuff that’s different,” and then you work your way to ...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Just the diff yeah.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, exactly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Nice, okay so your talk was a hit?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, talk was a hit. Ended up doing a lot more talks based on kind of the success of that one. We got, we talked to David Nolen who was the guy who made &lt;a href=&quot;https://stackshare.io/clojurescript&quot;&gt;ClojureScript&lt;/a&gt;. He had been waiting for something like this and he wrote a really kind of famous blog post called; &lt;a href=&quot;http://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs&quot;&gt;the future of JavaScript MVCs&lt;/a&gt;. Where he talked about how great React was, that caused a really big step function increase in React’s popularity. Another thing that we did is that we had this wiki page of companies using React, so if any company had one tiny little project that was using React we would put their name there. This was …&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Got you, I think this is pre-StackShare, when was that? What year was that?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: That was 2013 …&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Yeah, that was pre-StackShare&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: … maybe the beginning of 2014.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Yeah, we always saw that and we are like, “Man that eventually needs to be on StackShare,” like just listing out all the customers. It’s powerful because that’s one of the first things you are evaluating is like, “Okay Facebook has used it obviously, but who else?”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah the first question is like does it have any big users? Well, Facebook uses it. Okay, it’s like does anybody besides the authors use this because you don’t know if it works outside of Facebook use cases. That’s yeah like StackShare is obviously like a good idea like it’s been replicated on wikis how many times, yeah props to that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Yeah, absolutely. It sounds like the wiki page was like part of the strategy, the marketing. I guess let me try to run through some of these questions from the community. Some of this we’ve touched on coming back to just like philosophies. One of the questions here is; “how did functional programming influence just the whole React philosophy of state props determining output?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, so it’s, the way React works is very similar to how the web works; you get some data, you render a web page and you send it down the pipe and that’s conceptually how React works. This, I mean this was Jordan’s big insight and the answer is, yes, functional programming absolutely influenced React because V0 of React was written in OCaml, which is a functional programming language.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Okay, interesting cool yeah. As far as React entering Facebook, we didn’t really get into that and how it like started to take on Facebook stuff outside of ads, but did it hinder or help collaboration on specific features? Do you have any insight into how it impacted the way that things were being built?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, when we talk about the evaluations in bake-offs, it’s not just opening the profiler and seeing what the TTI is. It’s also taking a look at how the team is executing; is it easy to reuse code, is it easy to do code review and coordinate and how stable is it? When the core makes a change do we have to throw out all of our apps or can the core team re-factor everything for us?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Okay, that’s upfront part of the evaluation is like does it make this easier or harder to work together?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: That’s right. Another thing that is often overlooked about React when you think about stability, within Facebook there are, I don’t work there anymore but when I left there were tens of thousands of React components which probably translates to hundreds of thousands of lines of code. Whenever React wants to make a breaking change, they can’t tell other people to re-factor their code. They have to re-factor those hundreds of thousands of lines of code themselves.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Interesting, the React team has to do it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: React team has to do it all. What that means is that it has to be automatable with some sort of script and those scripts are shared with the community and that’s why you don’t get an &lt;a href=&quot;https://stackshare.io/angular-2&quot;&gt;Angular 2&lt;/a&gt; scenario with React because the people paying the price are the people actually making the breaking changes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: We didn’t really talk about server side rendering but do you want to touch on that? Was that after you had left?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: No, so server side rendering was one of those things that that was really cool. When I started using React one of the reasons why I got really excited about was I would go and ask Jordan I would be like, “Hey, can React do X?” He would be like, “Yeah, like it was designed to do that. Like render client side and server side, any mobile platform natively,” I just thought that was incredible and required a lot of foresight.&lt;/p&gt;
&lt;p&gt;The thing was when I joined, when I started working on React it’s like the server side rendering piece was more theoretical than it actually worked in practice. I had to build the API for it. Again, going back to the SEO thing we wanted to server render those photo pages so they could be crawled by Google, so I had learned &lt;a href=&quot;https://stackshare.io/nodejs&quot;&gt;NodeJS&lt;/a&gt; for that and built the first server rendering API. In practice at Facebook I’m not sure how much traction it has. I know that there is a lot of companies that do depend on it.&lt;/p&gt;
&lt;p&gt;It was conceptually in React but there wasn’t … Basically what React does is it builds up a big markup string and then like puts it into the page. Well, that’s what it used to do, and there was no way of just building up that markup string. The first step was like, okay how do I get that markup string, and then I wrote an API for that and then rendered it in Node and we said “oh shit they are actually using like the window object or document dot something”. So we had to weed out all of those things, so then there was some branching in there and some abstraction, because as you add more contributors they weren’t thinking about that so we had to kind of roll back some of that stuff.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Y: If you could change one thing about React today what would it be and why?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, that’s a great question. There are certain things that I always wanted to do that I just never got around to doing. I’ve actually never worked on React full time, I’ve always been working on a product or managing a team that was working on a product and like half-timing on React. When we launched this JavaScript Fatigue thing it was a big deal almost instantly. Like our answer, we didn’t have, we intentionally left a lot of kind of open questions for routing and data fetching and state management and styling and accessibility and internationalization all that stuff, like we didn’t have opinions about it.&lt;/p&gt;
&lt;p&gt;What I wanted to do was I wanted to have a React team certified badge where we say, “Hey, we are blessing this third party library and we say this is the right thing to do.” I just wanted to be very opinionated about that type of thing even if it, because the flip side of that right it’s like you might alienate somebody or you might stifle innovation in some ways and I get that and there has been a lot of innovation in the React community. I’m not saying it would have been better but that’s, I still feel like that would have been a good idea.&lt;/p&gt;
&lt;p&gt;Go on npm and there's like 40 different React type aheads right? How many of those get accessibility right? How of those get tab behavior right? How many of those are sufficiently styleable? How many of those mutate props God forbid? I was just thinking that people can submit to the React team, then the team goes and does a quick code review, and maybe there's a checklist of what we think or we check for, locales that kind of thing. Then we say, “Yes, this type ahead is good or passes this bar,” and we never did that. I think that there was an opportunity for somebody to do that. I’m not going to do it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Well, the other way to do that is to just say what are people doing. If I was asking that question, hopefully I'll go to the Smyte page and say, “All right, what's your stack profile,” and say, “Okay, let me see everything that Pete’s using.” That’s a roundabout way to do it without a coordinated effort to say, “Well what does Pete think is good?”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, that’s right. If you look at kind of the, if you are trying to figure out which of one of these 20 different type ahead packages I’m going to use, a lots of times you just go on... A lot of times they are not actually on StackShare, probably it should be.&lt;/p&gt;
&lt;p&gt;If they were I would go there but a lot of times it’s people go and look at the GitHub stars and the number of npm installs which if somebody has got a lot of Twitter followers or hits the front page of Hacker News by some roll of the dice that can throw that number off.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Right, yeah. Yeah, no that’s an interesting project. Going back you would have created that from the beginning.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, I would have said, &quot;We think Webpack is the one true bundler.&quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: So the future; what do you think lies ahead for React? What are some of the things you are excited about? Maybe some of the things you are not excited about? You can include React Native in that but what do you think is going to happen with React and is there anything you are excited about or not?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Well, &lt;a href=&quot;http://isfiberreadyyet.com/&quot;&gt;Fiber&lt;/a&gt; just started passing all of its tests recently and that’s a really cool project. It does bring a lot of really interesting concepts so that’s really cool. I think the React VR announcement was really interesting. If you think about all the different platforms you can target with React Native or with React, there is iOS, Android, web, VR now. Somebody released a React renderer for Microsoft Word the other day. Which is not something you would normally think of.&lt;/p&gt;
&lt;p&gt;That’s really cool because you teach these engineers how to write a little JavaScript and the basics of React and then you just give them API documentation for all these platforms and they can go and move really quickly. That’s really cool, that’s stuff that I’m really excited to see. I am sitting around waiting for the next release of the Native Windows and Mac UI toolkits because I bet they are going to look just like React. I’m waiting for the day when the only way that you build UI, the only way you can build UI is with the React paradigm.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Got you. Well, I guess yeah that kind of answers the question but what do you think about &lt;a href=&quot;https://stackshare.io/electron&quot;&gt;Electron&lt;/a&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Man, you know I don’t know. I’ve got mixed opinions of it of like I get the program and productivity savings, but it is really heavy. We, I think that there is one thing that I would kind of change in the front end dev community in general is people use this kind of programmer or productivity savings as an excuse for, like you can justify like almost anything with that. I’m only adding five kilobytes to JavaScript or I’m only adding 50 milliseconds on this render pass, it’s not a big deal.&lt;/p&gt;
&lt;p&gt;That’s premature optimization; guess what, optimization is premature. Like premature optimization it’s meaningless because it’s going to be repeat that 50 milliseconds 10 times and now you have half a second delay every time a component renders, right? React came on the scene and it was super, super fast because it was micro benchmarked, because it was micro optimized. Like did we have to do that event object pool thing? Probably not but nobody complained about garbage collection pauses when it came out.&lt;/p&gt;
&lt;p&gt;I’m saying that there are things that sound really true that are repeated all the time. Like premature optimization is one of those things where it sounds great, it sounds like, “Oh, you are thinking about the big picture,” but in reality you are adding latency to your app and you don’t have a … a lot of people don’t have a rubric for when is that okay and when is that not okay.&lt;/p&gt;
&lt;p&gt;I also like to follow people on Twitter that disagree with me or are from a totally different world of engineering. I follow like a lot of game programmers and like when something like Electron comes out or some use of JavaScript somewhere that they don’t like, they always just make fun of all JavaScript programmers. They are like, “Look at these morons,” blah, blah, blah.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: JavaScript land, what a dump.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah and then the JavaScript people are like, “They are just a jerk and there is nothing true to what they are saying.” In reality there are big benefits to bring in a language that everybody knows to a new platform and building as much as you can in that platform. At the same time we burn so many CPU cycles that we don’t need to burn, delivering pretty basic UIs. I just think that you have to listen. Even if somebody is being a little offensive in the way that they like disagree with you, there still might be a kernel of truth to that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Yeah interesting. One very important question; are you guys using React at Smyte?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yes we are. We are absolutely using it at &lt;a href=&quot;https://www.smyte.com/&quot;&gt;Smyte&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Do you want to tell people a little bit about Smyte? They will learn more in the coming weeks, hint hint.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, so remember how I mentioned that when Instagram came over, they took advantage of some of these tools that Facebook had but we mostly left them alone, the one big one they took advantage of was Facebook Site Integrity System for catching bad guys. Fake accounts, compromised accounts, spam, harassment and I was just struck by how important that was.&lt;/p&gt;
&lt;p&gt;So Smyte is trust and safety as a service so you plug your application into Smyte either your analytics stream with our API. We’ll analyze it for bad behavior, this can be; spam, harassment, buyer side fraud. Like if you ever bought an apartment on Craigslist or rented an apartment on Craigslist you know that there are some deals that are too good to be true. We try to find that stuff on market places, fake credit cards.&lt;/p&gt;
&lt;p&gt;So we work with a lot of marketplaces and we try to find fake inventory, so those are often deals that are too good to be true. Sometimes they are terms of service violations, so every marketplace, the instant it gets started. People post drugs for sale and some of them, some market places don’t want it so. It's a really interesting problem it’s a text classification problem, it’s a user behavior classification problem, it’s an image classification problem all kind of rolled up into one really interesting product I think. It’s been really fun doing it.&lt;/p&gt;
&lt;p&gt;It’s been really fun building on all sorts of new, like it’s mostly infrastructure, we do have UIs that are built with React but I think the really interesting problems are the infrastructure and being able to scale up to all these hundreds and millions of monthly actives with an infra team of four people, that’s pretty cool.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Amazing. if you think about it, that was one the big stories about Instagram was like they were able to do it with five, six engineers all writing application code and they weren’t worrying about the plumbing.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: With Kubernetes the math is getting even more crazy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: With Smyte so you guys are powering some pretty massive sites right?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, I mean we work with a bunch of market places like GoFundMe and Indiegogo and YouCaring. Social Apps like Quora and musical.ly, Task Rabbit yeah. If you think about like any sort of peer to peer application and two sided application they are built on the idea of their users trusting them and that it is a safe place to interact with people, a safe place to transact. In order to do that you need lot of automatic analysis as well as kind of a nice human element to understand those kind of gray area cases so that’s what we do.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Yeah, no that’s awesome. Well, one thing that came to mind was that you being such a strong believer in React the natural assumption would be like you are going to go build something around React. What inspired you to start Smyte and how did that even come about? Did you go straight from Facebook to Smyte?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, as soon as my, as soon as I handed in my gun and badge at Facebook I went and I bought a new computer and started writing code for Smyte. But the idea, you know kind of going back to what we were talking about earlier, to think of Facebook as being kind of five years ahead of everybody else their approach to trust and safety is something that will be useful for other companies.&lt;/p&gt;
&lt;p&gt;I saw this thing it was really, really valuable and important. I was like, “Okay, you shouldn’t have to sell your company in order to solve this problem.” That’s why we started Smyte to go and try to help out the companies that aren’t Facebook and can’t afford to get an army of engineers and a million servers to solve this problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Y: Awesome man this is amazing, thanks for taking the time.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P: Yeah, thanks for having me.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;If you liked this interview, &lt;strong&gt;&lt;a href=&quot;https://soundcloud.com/stack-stories&quot;&gt;Follow us on SoundCloud&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href=&quot;https://itunes.apple.com/us/podcast/stack-stories/id1167618950?mt=2&quot;&gt;subscribe via iTunes&lt;/a&gt;&lt;/strong&gt; to catch future episodes. Subscribe to &lt;a href=&quot;https://stackshare.io/weekly&quot;&gt;StackShare Weekly&lt;/a&gt; to keep up with the latest tools and tech stacks.&lt;/p&gt;
&lt;div id=&quot;post-cloud-stack&quot;&gt;
&lt;div class=&quot;sp-section-titles row&quot;&gt;
&lt;div&gt;&lt;a href=&quot;https://stackshare.io/instagram/instagram&quot;&gt;&lt;img class=&quot;company-icon-cloudstack&quot; src=&quot;https://pbs.twimg.com/profile_images/786681705981673472/T5OKNZ1-_400x400.jpg&quot; alt=&quot;T5oknz1 400x400&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Instagram&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Sat, 18 Nov 2017 04:54:49 +0000</pubDate>
<dc:creator>fagnerbrack</dc:creator>
<og:image>https://img.stackshare.io/guest_posts/stack_stories_episode3.png</og:image>
<og:title>The React Story: How Facebook's Instagram Acquisition Led To The Open Sourcing of React.js | StackShare</og:title>
<og:url>https://stackshare.io/posts/the-react-story</og:url>
<og:description>The React Story: How Facebook's Instagram Acquisition Led To The Open Sourcing of React.js</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://stackshare.io/posts/the-react-story</dc:identifier>
</item>
<item>
<title>Scaling Postgres with Read Replicas and Using WAL to Counter Stale Reads</title>
<link>https://brandur.org/postgres-reads</link>
<guid isPermaLink="true" >https://brandur.org/postgres-reads</guid>
<description>&lt;p&gt;A common technique when running applications powered by relational databases like Postgres, MySQL, and SQL Server is offloading read operations to readonly replicas , helping to distribute load between more nodes in the system by re-routing queries that don’t need to run on the primary. These databases are traditionally single master, so writes have to go to the primary that’s leading the cluster, but reads can go to any replica as long as it’s reasonably current.&lt;/p&gt;&lt;p&gt;Spreading load across more servers is good, and the pattern shows itself to be even more useful when considering that although write operations might be numerous, most of them have predictable performance – they’re often inserting, updating, or deleting just a single record. Reads on the other hand are often more elaborate, and by extension, more expensive.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://brandur.org/assets/postgres-reads/replica-reads.svg&quot;&gt;&lt;img data-rjs=&quot;2&quot; src=&quot;https://brandur.org/assets/postgres-reads/replica-reads.svg&quot; class=&quot;overflowing&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
Writes on the primary and reads on its replicas.
&lt;p&gt;Even as part of a normal application’s workload (barring analytical queries that can be even more complex), we might join on two or three different tables in order to perform an eager load, or even just have to read out a few dozen rows to accurately render a response. A mature application might execute hundreds of queries to fulfill even a single request, and farming these out to replicas would yield huge benefits in reducing pressure on the primary.&lt;/p&gt;

&lt;p&gt;Running reads on replicas is a pretty good high-impact and low-effort win for scalability, but it’s not without its challenges. The technique introduces the possibility of &lt;strong&gt;&lt;em&gt;stale reads&lt;/em&gt;&lt;/strong&gt; that occur when an application reads from replica before that replica has received relevant updates that have been committed to the primary. A user might update some key details, and then go to view their changes and see stale data representing the pre-update state.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://brandur.org/assets/postgres-reads/stale-read.svg&quot;&gt;&lt;img data-rjs=&quot;2&quot; src=&quot;https://brandur.org/assets/postgres-reads/stale-read.svg&quot; class=&quot;overflowing&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
A stale read that went to a replica that hadn't yet applied changes from the primary.
&lt;p&gt;Stale reads are a race condition. Modern databases operating over low latency connections can keep replicas trailing their primary &lt;em&gt;very&lt;/em&gt; closely, and probably spend most of their time less than a second out of date. Even systems using read replicas without any techniques for mitigating stale reads will produce correct results most of the time.&lt;/p&gt;
&lt;p&gt;But as software engineers interested in building bulletproof systems, “most of the time” isn’t good enough, and we can do better. Let’s take a look at a technique to make sure that stale reads &lt;em&gt;never&lt;/em&gt; occur. We’ll use Postgres’s own understanding of its replication state and some in-application intelligence around connection management to accomplish it.&lt;/p&gt;

&lt;p&gt;First, we’re going to have to understand a little bit about how replication works in Postgres.&lt;/p&gt;
&lt;p&gt;Postgres commits all changes to a &lt;strong&gt;&lt;em&gt;WAL&lt;/em&gt;&lt;/strong&gt; (write-ahead log) for durability reasons. Every change is written out as a new entry in the WAL and it acts the canonical reference as to whether any change in the system occurred – committed information is written to a data directory like you might expect, but is only considered visible to new transactions if the WAL confirms that it’s committed (see &lt;a href=&quot;https://brandur.org/postgres-atomicity&quot;&gt;How Postgres makes transactions atomic&lt;/a&gt; for more on this subject).&lt;/p&gt;
&lt;p&gt;Changes are written to the WAL one entry at a time and each one is assigned a &lt;strong&gt;&lt;em&gt;LSN&lt;/em&gt;&lt;/strong&gt; (log sequence number). Changes are batched in 16 MB &lt;strong&gt;&lt;em&gt;WAL segments&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;wal-replication&quot;&gt;&lt;a href=&quot;https://brandur.org/postgres-reads#wal-replication&quot;&gt;The WAL's role in replication&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A Postgres database can dump a representation of its current state to a &lt;em&gt;base backup&lt;/em&gt; which can be used to initialize replica. From there, the replica stays in lockstep with its primary by consuming changes in its emitted WAL. A base backup comes with a pointer to the current LSN so that when a replica starts to consume the WAL, it knows where to start.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://brandur.org/assets/postgres-reads/replicas-and-wal.svg&quot;&gt;&lt;img data-rjs=&quot;2&quot; src=&quot;https://brandur.org/assets/postgres-reads/replicas-and-wal.svg&quot; class=&quot;overflowing&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
A replica being initialized from base backup and consuming its primary's WAL.
&lt;p&gt;There are a few ways for a replica to consume WAL. The first is “log shipping”: completed WAL segments (16 MB chunks of the WAL) are copied from primary to replicas and consumed as a single batch. This has the major advantage of efficiency (it’s fast to copy files around, and has negligible cost to the primary), but with a tradeoff of how closely any secondary can be following its primary – secondaries will be at least as behind as the current segment that’s still being written.&lt;/p&gt;
&lt;p&gt;Another common configuration for consuming WAL is “streaming”, where WAL is emitted by the primary to replicas over an open connection. This has the advantage of secondaries being very current at the cost of some extra resource consumption.&lt;/p&gt;
&lt;p&gt;Based on their respective aptitude’s for becoming primary at a moment’s notice, replicas consuming WAL with log shipping are also known as “warm standbys” while those using streaming are called “hot standbys”. Hot standbys are often seen in production setups because maintain state that closely matches their primary and make great targets to fail over to at a moment’s notice. The technique we’re going to discuss works better with streaming, but should yield at benefits with either method.&lt;/p&gt;

&lt;p&gt;By routing read operations only to replicas that are caught up enough to run them accurately, we can eliminate stale reads. This necessitates an easy way of measuring how far behind a replica is, and the WAL’s LSN is perfect for this use.&lt;/p&gt;
&lt;p&gt;When mutating a resource in the system we’ll store the last committed LSN for the entity making the request. Then, when we subsequently want to fulfill a read operation for that same entity, we’ll check which replicas have consumed to that point or beyond it, and randomly select one from the pool. If no replicas are sufficiently advanced (i.e. say a read operation is being run very closely after the initial write), we’ll fall back to the master. Stale reads become impossible regardless of the state of any given replica.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://brandur.org/assets/postgres-reads/routing.svg&quot;&gt;&lt;img data-rjs=&quot;2&quot; src=&quot;https://brandur.org/assets/postgres-reads/routing.svg&quot; class=&quot;overflowing&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
Routing read operations based on replica progress in the WAL.
&lt;p&gt;The technique is inspired by &lt;a href=&quot;https://about.gitlab.com/2017/10/02/scaling-the-gitlab-database/#sticky-connections&quot;&gt;GitLab’s article on scaling their database&lt;/a&gt;, where they refer to it as “sticky connections”. Their large Postgres installation is still unpartitioned, and using replicas for extra read capacity is key in managing its considerable load.&lt;/p&gt;
&lt;h3 id=&quot;rocket-rides&quot;&gt;&lt;a href=&quot;https://brandur.org/postgres-reads#rocket-rides&quot;&gt;Scalable Rocket Rides&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To build a working demo we’ll be returning to the same toy application that we used to show off an implementation for &lt;a href=&quot;https://brandur.org/idempotency-keys&quot;&gt;idempotency keys&lt;/a&gt; and &lt;a href=&quot;https://brandur.org/redis-streams&quot;&gt;the unified log&lt;/a&gt; – &lt;em&gt;Rocket Rides&lt;/em&gt;. As a quick reminder, &lt;em&gt;Rocket Rides&lt;/em&gt; is a Lyft-like app that lets its users get rides with pilots wearing jetpacks; a vast improvement over the everyday banality of a car.&lt;/p&gt;
&lt;p&gt;Our new &lt;em&gt;Scalable Rocket Rides&lt;/em&gt; demo has an &lt;code&gt;api&lt;/code&gt; process that writes to a Postgres database. It’s configured with a number of read replicas that are configured with Postgres replication to receive changes from the primary. When performing a read, the &lt;code&gt;api&lt;/code&gt; tries to route it to one of a random replica that’s sufficiently caught up to fulfill the operation for a particular user.&lt;/p&gt;
&lt;p&gt;We’ll be using the Sequel gem, which can be configured with a primary and any number of read replicas. Replicas are assigned names like &lt;code&gt;replica0&lt;/code&gt;, and operations are sent to them with the &lt;code&gt;server(...)&lt;/code&gt; helper:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-ruby&quot;&gt;DB = Sequel.connect(&quot;postgres://localhost:5433/rocket-rides-scalale&quot;,
  servers: {
    replica0: { port: 5434 },
    replica1: { port: 5435 },
    replica2: { port: 5436 },
    ...
  }

# routes to primary
DB[:users].update(...)

# routes to replica0
DB[:users].server(:replica0).select(...)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;A working version of all this code is available in the &lt;a href=&quot;https://github.com/brandur/rocket-rides-scalable&quot;&gt;&lt;em&gt;Scalable Rocket Rides&lt;/em&gt;&lt;/a&gt; repository. We’ll walk through the project with a number of extracted snippets, but if you prefer, you can download the code and follow along:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/brandur/rocket-rides-scalable.git
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;cluster&quot;&gt;&lt;a href=&quot;https://brandur.org/postgres-reads#cluster&quot;&gt;Bootstrapping a cluster&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For demo purposes it’s useful to create a small locally-running cluster with a primary and some replicas. The project &lt;a href=&quot;https://github.com/brandur/rocket-rides-scalable/tree/master/scripts/create_cluster&quot;&gt;includes a small script to help with that&lt;/a&gt;. It initializes and starts a primary, and for a number of times equal to the &lt;code&gt;NUM_REPLICAS&lt;/code&gt; environment variable performs a base backup and boots a replica with it&lt;/p&gt;
&lt;p&gt;Postgres daemons are started as children of the script with Ruby’s &lt;code&gt;Process.spawn&lt;/code&gt; and will all die when it’s stopped. The setup’s designed to be ephemeral and any data added to the primary is removed when the cluster bootstraps itself again on the script’s next run.&lt;/p&gt;
&lt;h3 id=&quot;observer&quot;&gt;&lt;a href=&quot;https://brandur.org/postgres-reads#observer&quot;&gt;The Observer: tracking replication status&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To save every &lt;code&gt;api&lt;/code&gt; process from having to reach out and check on the replication status of every replica for itself, we’ll have a process called an &lt;code&gt;observer&lt;/code&gt; that periodically refreshes the state of every replica and stores it to a Postgres table.&lt;/p&gt;
&lt;p&gt;The table contains a common &lt;code&gt;name&lt;/code&gt; for each replica (e.g. &lt;code&gt;replica0&lt;/code&gt;) and a &lt;code&gt;last_lsn&lt;/code&gt; field that stores a sequence number as Postgres’s native &lt;code&gt;pg_lsn&lt;/code&gt; data type:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE replica_statuses (
    id       BIGSERIAL    PRIMARY KEY,
    last_lsn PG_LSN       NOT NULL,
    name     VARCHAR(100) NOT NULL UNIQUE
);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Keep in mind that this status information could really go anywhere. If we have Redis available, we could put it in there for fast access, or have every &lt;code&gt;api&lt;/code&gt; worker cache it in-process periodically for even faster access. Postgres is convenient, and as we’ll see momentarily, makes lookups quite elegant, but it’s not necessary.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;observer&lt;/code&gt; runs in a loop, and executes something like this on every iteration:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-ruby&quot;&gt;# exclude :default at the zero index
replica_names = DB.servers[1..-1]

last_lsns = replica_names.map do |name|
  DB.with_server(name) do
    DB[Sequel.lit(&amp;lt;&amp;lt;~eos)].first[:lsn]
      SELECT pg_last_wal_replay_lsn() AS lsn;
    eos
  end
end

insert_tuples = []
replica_names.each_with_index do |name, i|
  insert_tuples &amp;lt;&amp;lt; { name: name.to_s, last_lsn: last_lsns[i] }
end

# update all replica statuses at once with upsert
DB[:replica_statuses].
  insert_conflict(target: :name,
    update: { last_lsn: Sequel[:excluded][:last_lsn] }).
  multi_insert(insert_tuples)

$stdout.puts &quot;Updated replica LSNs: results=#{insert_tuples}&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;A connection is made to every replica and &lt;code&gt;pg_last_wal_replay_lsn()&lt;/code&gt; is used to see its current location in the WAL. When all statuses have been collected, Postgres upsert (&lt;code&gt;INSERT INTO ... ON CONFLICT ...&lt;/code&gt;) is used to store the entire set to &lt;code&gt;replica_statuses&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;min-lsn&quot;&gt;&lt;a href=&quot;https://brandur.org/postgres-reads#min-lsn&quot;&gt;Saving minimum LSN&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Knowing the status of our replicas is half of the implementation. The other half is knowing the minimum replication progress for every user that will give us the horizon beyond which stale reads are impossible. This is determined by saving the primary’s current LSN whenever the user makes a change in the system.&lt;/p&gt;
&lt;p&gt;We’ll model this as a &lt;code&gt;min_lsn&lt;/code&gt; field on our &lt;code&gt;users&lt;/code&gt; relation (and again use the built-in &lt;code&gt;pg_lsn&lt;/code&gt; data type):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE users (
    id      BIGSERIAL    PRIMARY KEY,
    email   VARCHAR(255) NOT NULL UNIQUE,
    min_lsn PG_LSN
);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For any action that will later affect reads, we touch the user’s &lt;code&gt;min_lsn&lt;/code&gt; by setting it to the value of the primary’s &lt;code&gt;pg_current_wal_lsn()&lt;/code&gt;. This is performed in &lt;code&gt;update_user_min_lsn&lt;/code&gt; in this simple implementation:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-ruby&quot;&gt;post &quot;/rides&quot; do
  user = authenticate_user(request)
  params = validate_params(request)

  DB.transaction(isolation: :serializable) do
    ride = Ride.create(
      distance: params[&quot;distance&quot;],
      user_id: user.id,
    )
    update_user_min_lsn(user)

    [201, JSON.generate(serialize_ride(ride))]
  end
end

def update_user_min_lsn(user)
  User.
    where(id: user.id).
    update(Sequel.lit(&quot;min_lsn = pg_current_wal_lsn()&quot;))
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;select-replica&quot;&gt;&lt;a href=&quot;https://brandur.org/postgres-reads#select-replica&quot;&gt;Selecting an eligible replica&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now that replication status and minimum WAL progress for every user is being tracked, &lt;code&gt;api&lt;/code&gt; processes need a way to select an eligible replica candidate for read operations. Here’s an implementation that does just that:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-ruby&quot;&gt;def select_replica(user)
  # If the user's `min_lsn` is `NULL` then they haven't performed an operation
  # yet, and we don't yet know if we can use a replica yet. Default to the
  # primary.
  return :default if user.min_lsn.nil?

  # exclude :default at the zero index
  replica_names = DB.servers[1..-1].map { |name| name.to_s }

  res = DB[Sequel.lit(&amp;lt;&amp;lt;~eos), replica_names, user.min_lsn]
    SELECT name
    FROM replica_statuses
    WHERE name IN ?
      AND pg_wal_lsn_diff(last_lsn, ?) &amp;gt;= 0;
  eos

  # If no candidates are caught up enough, then go to the primary.
  return :default if res.nil? || res.empty?

  # Return a random replica name from amongst the candidates.
  candidate_names = res.map { |res| res[:name].to_sym }
  candidate_names.sample
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;pg_wal_lsn_diff()&lt;/code&gt; returns the difference between two &lt;code&gt;pg_lsn&lt;/code&gt; values, and we use it to compare the stored status of each replica in &lt;code&gt;replica_statuses&lt;/code&gt; to the &lt;code&gt;min_lsn&lt;/code&gt; value of the current user (&lt;code&gt;&amp;gt;= 0&lt;/code&gt; means that the replica is ahead of the user’s minimum). We take the name of a random replica from the returned set. If the set was empty, then no replica is advanced enough for our purposes, so we fall back to the primary.&lt;/p&gt;
&lt;p&gt;Here’s &lt;code&gt;select_replica&lt;/code&gt; in action on an API endpoint:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-ruby&quot;&gt;get &quot;/rides/:id&quot; do |id|
  user = authenticate_user(request)

  name = select_replica(user)
  $stdout.puts &quot;Reading ride #{id} from server '#{name}'&quot;

  ride = Ride.server(name).first(id: id)
  if ride.nil?
    halt 404, JSON.generate(wrap_error(
      Messages.error_not_found(object: &quot;ride&quot;, id: id)
    ))
  end

  [200, JSON.generate(serialize_ride(ride))]
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And that’s it! The repository also comes with a simulator that creates a new ride and then immediately tries to read it. Running the whole constellation of programs will show that most of the time these reads will be served from a replica, but occasionally from the primary (&lt;code&gt;default&lt;/code&gt; in Sequel) as replication falls behind or the &lt;code&gt;observer&lt;/code&gt; hasn’t performed its work loop in a while:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ forego start | grep 'Reading ride'
api.1       | Reading ride 96 from server 'replica0'
api.1       | Reading ride 97 from server 'replica0'
api.1       | Reading ride 98 from server 'replica0'
api.1       | Reading ride 99 from server 'replica1'
api.1       | Reading ride 100 from server 'replica4'
api.1       | Reading ride 101 from server 'replica2'
api.1       | Reading ride 102 from server 'replica0'
api.1       | Reading ride 103 from server 'default'
api.1       | Reading ride 104 from server 'default'
api.1       | Reading ride 105 from server 'replica2'
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Maybe. The implementation’s major downside is that each user’s &lt;code&gt;min_lsn&lt;/code&gt; needs to be updated every time an action that affects read results is performed. If you squint just a little bit, you’ll notice that this looks a lot like cache invalidation – a technique infamous for working well until it doesn’t. In a more complex codebase save hooks and update triggers can be useful in helping to ensure correctness, but given enough lines of code and enough people working on it, &lt;em&gt;perfect&lt;/em&gt; correctness can be frustratingly elusive.&lt;/p&gt;
&lt;p&gt;Projects that produce only moderate database load (the majority of all projects) shouldn’t bother, and keep their implementations simple by running everything against the primary. Projects that need infinitely scalable storage (i.e. disk usage is expected to grow well beyond what a single node can handle) should probably look into a more elaborate partitioning scheme (&lt;a href=&quot;https://www.citusdata.com/&quot;&gt;like Citus&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;There is a sweet spot of projects that can keep their storage within a single node, but still want to scale out on computation. For this sort of use moving reads to replicas can be quite beneficial because it greatly expands the runway for scalability while also avoiding the considerable overhead and operational complexity of partitioning.&lt;/p&gt;


&lt;div class=&quot;info&quot; readability=&quot;10.12927756654&quot;&gt;
&lt;div class=&quot;publishing-info-bottom&quot; readability=&quot;10.409395973154&quot;&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Scaling Postgres with Read Replicas &amp;amp; Using WAL to Counter Stale Reads&lt;/strong&gt; was published on &lt;strong&gt;November 17, 2017&lt;/strong&gt; from &lt;strong&gt;Osaka&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Find me on Twitter at &lt;strong&gt;&lt;a href=&quot;https://twitter.com/brandur&quot;&gt;@brandur&lt;/a&gt;&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Please post comments and discussion to &lt;strong&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=15726376&quot;&gt;Hacker News&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Did I make a mistake? Please consider &lt;a href=&quot;https://github.com/brandur/sorg/edit/master/content/articles/postgres-reads.md&quot;&gt;sending a pull request&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 17 Nov 2017 22:04:50 +0000</pubDate>
<dc:creator>craigkerstiens</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://brandur.org/postgres-reads</dc:identifier>
</item>
<item>
<title>Coders who trade: Wall Street designs its staff for the future</title>
<link>https://www.bloomberg.com/professional/blog/coders-trade-wall-street-designs-staff-future/</link>
<guid isPermaLink="true" >https://www.bloomberg.com/professional/blog/coders-trade-wall-street-designs-staff-future/</guid>
<description>&lt;p&gt;&lt;strong&gt;‘Stay relevant’&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At Citigroup, employees are being pushed to think differently about how they approach their jobs and help clients, according to Vanessa Colella, chief innovation officer and head of its venture-investing unit.&lt;/p&gt;
&lt;p&gt;About two years ago it launched a program called Discover 10X asking employees to suggest new products or innovations. Some have been honed through an intense process of workshops, pitches and viability studies, with the best ideas getting additional funding. While it’s not designed as training, it helps employees “explore and get a window into a different way of thinking,” Colella said. “That tends to snowball.”&lt;/p&gt;
&lt;p&gt;Employees at EY will soon be able to earn “badges” showing they can work with new technologies. The professional-services firm plans to debut the program in November at offices in more than 150 countries. Employees will be able to demonstrate four levels of expertise in “future-focused” topics, such as artificial intelligence.&lt;/p&gt;
&lt;p&gt;“The fear factor of ‘What happens if my job is automated and goes away?’ can be high if you don’t replace it with ‘Here’s how you can stay relevant,’” said Nancy Altobello, the firm’s global vice chair of talent.&lt;/p&gt;
&lt;p&gt;A catalog will steer workers to lessons online and in classrooms. Afterward, they will have to demonstrate their knowledge through activities, such as volunteering for a panel, coaching colleagues or writing an article.&lt;/p&gt;
&lt;p&gt;Since EY &lt;a class=&quot;terminal-news-story&quot; title=&quot;Ernst &amp;amp; Young: New program will allow EY people to earn credentials in future-focused skills&quot; href=&quot;https://www.bloomberg.com/news/terminal/OUOWO6BE07I9&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;announced&lt;/a&gt; the program in August, clients have been asking how they can offer it to their own staffs. “I expect there will be a market interest in it, not necessarily us having to go to people and tell them about it,” Altobello said.&lt;/p&gt;
&lt;p&gt;Many big firms are still working out their approaches. Sherrie Littlejohn, head of Wells Fargo’s internal innovation strategies, told a &lt;a title=&quot;CB Insights Conference Transcript&quot; href=&quot;https://www.cbinsights.com/research/wells-fargo-citi-disruption-fintech-relevance/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;conference&lt;/a&gt; in June that busy employees will need help adapting.&lt;/p&gt;
&lt;p&gt;“We’re going to need new skills,” she said. Yet, “we’re so busy operationally trying to keep things running that we haven’t seen a way to kind of make room for us to learn and train and teach — and be curious about how to make this new world come to fruition.”&lt;/p&gt;
</description>
<pubDate>Fri, 17 Nov 2017 19:28:39 +0000</pubDate>
<dc:creator>chollida1</dc:creator>
<og:type>article</og:type>
<og:title>Coders who trade: Wall Street designs its staff for the future | Bloomberg Professional Services</og:title>
<og:description>Want to protect your Wall Street job from robots? Learn how to code.</og:description>
<og:url>https://www.bloomberg.com/professional/blog/coders-trade-wall-street-designs-staff-future/</og:url>
<og:image>https://data.bloomberglp.com/professional/sites/10/311389190_1-61.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/professional/blog/coders-trade-wall-street-designs-staff-future/</dc:identifier>
</item>
<item>
<title>$3 Trillion in Forgotten Debt</title>
<link>https://www.bloomberg.com/gadfly/articles/2017-03-20/say-hello-to-3-trillion-in-forgotten-debt</link>
<guid isPermaLink="true" >https://www.bloomberg.com/gadfly/articles/2017-03-20/say-hello-to-3-trillion-in-forgotten-debt</guid>
<description>&lt;p&gt;Companies have been on a &lt;a href=&quot;https://www.bloomberg.com/news/articles/2016-10-21/why-corporate-america-s-debt-is-a-major-risk&quot; title=&quot;Why Corporate America’s Debt Is a ‘Major Risk’&quot;&gt;borrowing binge&lt;/a&gt;, but you wouldn't always know the full scale of their liabilities by looking at the balance sheet. This makes it hard for investors to compare businesses that fund their activities in different ways. Happily though, that's about to change.&lt;/p&gt;
&lt;p&gt;How come? The answer is buried in the notes to financial statements (you know, the ones you don't bother reading). It's here that companies have parked about $3 trillion in operating lease obligations, according to Bloomberg data.  For non-financial companies, those obligations equate to more than one quarter of their long-term (on-balance sheet) debt.  &lt;/p&gt;
&lt;p&gt;Operating leases are actually pretty similar to debt. They represent money companies will be obliged to cough up in future to rent things like planes, ships and retail floor space. But right now you won't find them on the balance sheet. &lt;/p&gt;
&lt;div class=&quot;toaster-chart&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Lease Leaders&lt;/p&gt;
&lt;p&gt;These companies are among the largest users of operating leases&lt;/p&gt;

&lt;p&gt;Source: Bloomberg&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;From 2019, this will change. New accounting rules called IFRS 16  will force companies to include operating lease commitments as part of their reported debt and assets. Heavy lease users in the retail, telecoms, energy and airline sectors will probably be most affected. &lt;/p&gt;
&lt;div class=&quot;toaster-chart&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;Leverage Hangover&lt;/p&gt;
&lt;p&gt;IFRS 16 will cause debt to balloon. In some cases, it'll be ugly&lt;/p&gt;

&lt;p&gt;Source: PwC&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;The upshot: this is going to make companies appear &lt;a href=&quot;https://www.bloomberg.com/gadfly/articles/2016-04-11/as-bad-as-sprint-s-debt-burden-looks-it-s-probably-worse&quot; title=&quot;Sprint's Hidden Debt Bomb&quot;&gt;far more leveraged&lt;/a&gt;. Debt will increase compared to equity. At the same time, earnings before interest, taxation, depreciation and amortization may increase because leases will be depreciated, not expensed. Retailers can typically expect an Ebitda uplift of more than 40 percent, &lt;a href=&quot;https://www.pwc.com/gx/en/audit-services/publications/assets/a-study-on-the-impact-of-lease-capitalisation.pdf&quot; title=&quot;PwC study on leases&quot; data-web-url=&quot;https://www.pwc.com/gx/en/audit-services/publications/assets/a-study-on-the-impact-of-lease-capitalisation.pdf&quot;&gt;PwC found&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The impact on reported liabilities is likely to prove most significant though.&lt;/p&gt;
&lt;p&gt;I sympathize if you're tempted to dismiss this is as another dull accounting exercise. Total cash flow won't be affected, and cash is what pays the bills and determines the value of a business. Furthermore, rating agencies and analysts already adjust for leases when assessing credit-worthiness .  &lt;/p&gt;
&lt;p&gt;Some companies already spell out the impact of leases on total indebtedness. Air France-KLM's reported net debt is 3.7 billion euros ($3.9 billion) but its lease-adjusted net debt is 11.2 billion euros. The present value of Tesco's operating lease commitments is one and a half times the size of reported net debt, according to its 2016 annual report.&lt;/p&gt;
&lt;p&gt;Even so, I doubt this transition will be painless. At the very least, the rule change should give armchair investors, not to mention a company's customers, employees and suppliers, a much better idea of how risky a business is compared to rivals. For some folk, this will be a nasty surprise. Worries about corporate leverage are &lt;a href=&quot;https://www.bloomberg.com/gadfly/articles/2017-03-07/top-rated-debt-is-poised-to-fall-as-leverage-swells&quot; title=&quot;Top-Rated Credit Is Poised to Fall&quot;&gt;already widespread&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Besides, companies aren't always as forthcoming as you might hope. Some airlines make debt adjustments for aircraft leases but not for other off-balance sheet rental agreements such as airport buildings. Delta Air Lines Inc. reported $6.1 billion in adjusted net debt at the end of December, including $2 billion in aircraft rent liabilities. Yet the discounted value of all its operating leases is closer to $9 billion, Gadfly estimates. &lt;/p&gt;
&lt;p&gt;Importantly, there's precedent for seemingly cosmetic accounting changes to impact valuation. Last year, British aircraft engine maker Rolls-Royce Plc said it would report &lt;a href=&quot;https://www.bloomberg.com/gadfly/articles/2016-11-16/rolls-royce-thinks-too-highly-of-itself&quot; title=&quot;Rolls-Royce Thinks Too Highly of Itself&quot;&gt;lower profit&lt;/a&gt; under a separate new accounting standard (IFRS 15). Its shares fell even though it stressed that cash flow would stay the same.&lt;/p&gt;
&lt;p&gt;Accounting reform can also affect corporate behavior. When British companies had to start recognizing the full liability for defined benefit pensions on financial statements, a lot of those &quot;final salary&quot; plans ended up closed.&lt;/p&gt;
&lt;p&gt;It's conceivable therefore that IFRS 16 will affect corporate decisions on whether to rent or purchase an asset. Consider sale and lease-back arrangements. These were once a popular way for companies to get their hands on some cash and a quick chance for executives to make themselves look like geniuses. All of a sudden, return on assets improved. &lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now, if all that rented floor space has to sit on the balance sheet anyway, selling off the corporate silverware might become less attractive. Buying big ticket assets, rather than leasing, is also cheaper now because of low interest rates.&lt;/p&gt;
&lt;p&gt;Another approach may see some companies partly embrace shorter lease terms to minimize the balance sheet liability, according to Ruxandra Haradau-Doser, aviation analyst at Kepler Cheuvreux. Shorter leases are already common in retail, albeit for different reasons. With sales migrating online, retailers want more flexibility to close stores. IFRS 16 could accelerate that&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;toaster-chart&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Rental Culture&lt;/p&gt;
&lt;p&gt;Airlines and retailers are big fans of operating leases&lt;/p&gt;

&lt;p&gt;Source: IASB&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;The accounting changes could also lead to more volatility in financial results, according to James Stamp, a partner at KPMG. Airlines typically take out aircraft leases in U.S. dollars. If the carrier's domestic currency weakens against the dollar, its liabilities would suddenly increase and it would have to take a currency hit against earnings. Stamp thinks demand for hedging will rise.&lt;/p&gt;
&lt;p&gt;Far from being academic, the accounting changes will have an effect in the real world. Some may be profound.&lt;/p&gt;
&lt;p class=&quot;news-disclaimer-text&quot;&gt;This column does not necessarily reflect the opinion of Bloomberg LP and its owners.&lt;/p&gt;

&lt;p&gt;To contact the authors of this story:&lt;br/&gt;&lt;span itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Person&quot;&gt; Chris Bryant&lt;/span&gt; in &lt;span itemprop=&quot;workLocation&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Place&quot;&gt;Berlin&lt;/span&gt; at &lt;a href=&quot;mailto:cbryant32@bloomberg.net&quot;&gt;cbryant32@bloomberg.net&lt;/a&gt;&lt;br/&gt;&lt;span itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Person&quot;&gt; Andrea Felsted&lt;/span&gt; in &lt;span itemprop=&quot;workLocation&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Place&quot;&gt;London&lt;/span&gt; at &lt;a href=&quot;mailto:afelsted@bloomberg.net&quot;&gt;afelsted@bloomberg.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To contact the editor responsible for this story:&lt;br/&gt;&lt;span itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Person&quot;&gt; James Boxell&lt;/span&gt; at &lt;a href=&quot;mailto:jboxell@bloomberg.net&quot;&gt;jboxell@bloomberg.net&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 17 Nov 2017 18:28:14 +0000</pubDate>
<dc:creator>gscott</dc:creator>
<og:url>https://www.bloomberg.com/gadfly/articles/2017-03-20/say-hello-to-3-trillion-in-forgotten-debt</og:url>
<og:title>Say Hello to $3 Trillion in Forgotten Debt</og:title>
<og:description>IFRS 16 is coming, and it may have ugly consequences.</og:description>
<og:image>https://assets.bwbx.io/images/users/iqjWHBFdfxIU/itXrjca.ie_U/v0/1200x785.jpg</og:image>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/gadfly/articles/2017-03-20/say-hello-to-3-trillion-in-forgotten-debt</dc:identifier>
</item>
<item>
<title>Microsoft and GitHub team up to take Git virtual file system to macOS, Linux</title>
<link>https://arstechnica.com/gadgets/2017/11/microsoft-and-github-team-up-to-take-git-virtual-file-system-to-macos-linux/</link>
<guid isPermaLink="true" >https://arstechnica.com/gadgets/2017/11/microsoft-and-github-team-up-to-take-git-virtual-file-system-to-macos-linux/</guid>
<description>&lt;img src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2017/02/git-branching.png&quot;/&gt;&lt;aside id=&quot;social-left&quot;&gt;&lt;a title=&quot;55 posters participating, including story author.&quot; class=&quot;comment-count icon-comment-bubble-down&quot; href=&quot;https://arstechnica.com/gadgets/2017/11/microsoft-and-github-team-up-to-take-git-virtual-file-system-to-macos-linux/?comments=1&quot;&gt;&lt;span class=&quot;comment-count-before&quot;&gt;reader comments&lt;/span&gt; &lt;span class=&quot;comment-count-number&quot;&gt;85&lt;/span&gt;&lt;/a&gt;
&lt;div class=&quot;share-links&quot;&gt;&lt;span&gt;Share this story&lt;/span&gt;    &lt;/div&gt;
&lt;/aside&gt;&lt;p&gt;One of the more surprising stories of the past year was Microsoft's announcement that it was going to use the &lt;a href=&quot;https://arstechnica.com/information-technology/2017/02/microsoft-hosts-the-windows-source-in-a-monstrous-300gb-git-repository/&quot;&gt;Git version control system for Windows development&lt;/a&gt;. Microsoft had to modify Git to handle the demands of Windows development but said that it wanted to get these modifications accepted upstream and integrated into the standard Git client.&lt;/p&gt;
&lt;p&gt;That plan appears to be going well. Yesterday, the company announced that &lt;a href=&quot;https://blogs.msdn.microsoft.com/devops/2017/11/15/updates-to-gvfs/&quot;&gt;GitHub was adopting its modifications&lt;/a&gt; and that the two would be working together to bring suitable clients to macOS and Linux.&lt;/p&gt;
&lt;p&gt;Microsoft wanted to move to Git because of Git's features, like its easy branching and its popularity among developers. But the transition faced three problems. Git wasn't designed for such vast numbers of developers—more than 3,000 actively working on the codebase. Also, Git wasn't designed for a codebase that was so large, either in terms of the number of files and version history for each file, or in terms of sheer size, coming in at more than 300GB. When using standard Git, working with the source repository was unacceptably slow. Common operations (such as checking which files have been modified) would take multiple minutes.&lt;/p&gt;
&lt;p&gt;The company's solution was to develop Git Virtual File System (GVFS). With GVFS, a local replica of a Git repository is virtualized such that it contains metadata and only the source code files that have been explicitly retrieved. By eliminating the need to replicate &lt;em&gt;every&lt;/em&gt; file (and, hence, check &lt;em&gt;every&lt;/em&gt; file for modifications), both the disk footprint of the repository and the speed of working with it were greatly improved. Microsoft modified Git to handle this virtual file system. The client was altered so that it didn't needlessly try to access files that weren't available locally and a new transfer protocol was added for selectively retrieving individual files from a remote repository.&lt;/p&gt;
&lt;p&gt;Internally, this &lt;a href=&quot;https://arstechnica.com/information-technology/2017/05/90-of-windows-devs-now-using-git-creating-1760-windows-builds-per-day/&quot;&gt;proved successful&lt;/a&gt;, with Windows development being substantially migrated to Git in May of this year. But what of the broader Git community?&lt;/p&gt;
&lt;p&gt;Microsoft says that, so far, about half of its modifications have been accepted upstream, with upstream Git developers broadly approving of the approach the company has taken to improve the software's scaling. Redmond also says that it has been willing to make changes to its approach to satisfy the demands of upstream Git. The biggest complexity is that Git has a very conservative approach to compatibility, requiring that repositories remain compatible across versions.&lt;/p&gt;
&lt;p&gt;GitHub's interest and involvement is motivated by the company's desire to address the needs of enterprise customers. The open source, free GitHub hosting doesn't need the scaling work Microsoft has done—obviously, if someone is using standard Git, today then standard Git must be good enough for their development process. But on the paid, enterprise side, the situation can be a little different. Certain industries have large repositories that pose problems with Git; for example, game repositories are often physically large not because they have millions of files and decades of history, but because of their large number of graphics and other assets. The scaling improvements that Microsoft has made to Git are useful for this kind of large repository, too. As such, having the same family of improvements available in GitHub will enable the company to better serve these communities.&lt;/p&gt;
&lt;p&gt;Microsoft itself has had similar demands from enterprise; the company told us that Siemens wanted to move away from the Team Foundation Server version control &lt;a href=&quot;https://www.visualstudio.com/team-services/git/&quot;&gt;to using Git instead&lt;/a&gt;. But it'll only be able to do this once the scaling improvements had been made; right now, TFS version control scales better.&lt;/p&gt;
&lt;p&gt;As the name would imply, GVFS requires a file system driver to work. The Windows division worked with the engineering team to add features to Windows to make this efficient. The intent is to eventually make this capability into a supported, extensible API and, at some point, move systems such as the new &lt;a href=&quot;https://arstechnica.com/information-technology/2017/06/onedrive-done-right-is-back-and-now-it-works-properly/&quot;&gt;OneDrive placeholders&lt;/a&gt; to use the same API.&lt;/p&gt;
&lt;p&gt;Microsoft and GitHub are also working to bring similar capabilities to other platforms, with macOS coming first, and later Linux. The obvious way to do this on both systems is to use FUSE, an infrastructure for building file systems that run in user mode rather than kernel mode (desirable because user-mode development is easier and safer than kernel mode). However, the companies have discovered that FUSE isn't fast enough for this—a lesson Dropbox also learned when developing a similar capability, &lt;a href=&quot;https://arstechnica.com/information-technology/2016/04/dropboxs-project-infinite-shows-all-your-files-locally-without-using-any-disk-space/&quot;&gt;Project Infinite&lt;/a&gt;. Currently, the companies believe that tapping into a macOS extensibility mechanism called Kauth (or KAuth) will be the best way forward.&lt;/p&gt;
</description>
<pubDate>Fri, 17 Nov 2017 17:24:28 +0000</pubDate>
<dc:creator>dmmalam</dc:creator>
<og:url>https://arstechnica.com/gadgets/2017/11/microsoft-and-github-team-up-to-take-git-virtual-file-system-to-macos-linux/</og:url>
<og:title>Microsoft and GitHub team up to take Git virtual file system to macOS, Linux</og:title>
<og:image>https://cdn.arstechnica.net/wp-content/uploads/2017/02/git-branching-760x380.png</og:image>
<og:description>Microsoft isn't the only company that's interested in scaling Git.</og:description>
<og:type>article</og:type>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arstechnica.com/gadgets/2017/11/microsoft-and-github-team-up-to-take-git-virtual-file-system-to-macos-linux/</dc:identifier>
</item>
<item>
<title>Is software development really a dead-end job after age 35-40?</title>
<link>https://www.quora.com/Is-software-development-really-a-dead-end-job-after-age-35-40/answer/Jeff-Nelson-32?share=1</link>
<guid isPermaLink="true" >https://www.quora.com/Is-software-development-really-a-dead-end-job-after-age-35-40/answer/Jeff-Nelson-32?share=1</guid>
<description>&lt;p class=&quot;qtext_para&quot;&gt;&lt;span class=&quot;rendered_qtext&quot;&gt;I think you are asking about 3 different questions and should perhaps rewrite the question. Let's break it down, thusly:&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span class=&quot;rendered_qtext&quot;&gt;Is Agism a problem in Software Development individual contributor careers?&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;rendered_qtext&quot;&gt;Should you steer your career toward management roles instead of individual career roles?&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;rendered_qtext&quot;&gt;Is Software Development individual contributor career a dead end job?&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;qtext_para&quot;&gt;&lt;span class=&quot;rendered_qtext&quot;&gt;Each of these is thoroughly answered here on Quora in other questions with details broken down as outlined above, so I'm going to just discuss each point briefly.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;qtext_para&quot;&gt;&lt;span class=&quot;rendered_qtext&quot;&gt;On agism, I don't think anyone can deny there is a certain amount of agism in the industry. You can just look at the median age of new hires of just about every Silicon Valley company. I suspect many, if not most, have median hiring ages well below 30. However, that doesn't necessarily mean there are official corporate policies not to hire candidates above a certain age, race, sex,Sexual preference, or other characteristics.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;qtext_para&quot;&gt;&lt;span class=&quot;rendered_qtext&quot;&gt;The reasons why agism exists in the tech industry are multifold and don't require some collusion not to hire older employees. For one, many companies find it easiest to use new college graduates of top schools (the MITs and Stanfords, etc) as a primary pool for recruiting. New graduates are cheap. They have a consistent quality. They are untrammelled by experiences at other companies. They are a clean slate, so it's somewhat easier to teach them corporate culture, software methodology, best practices, and to fit in with other predominantly new grad hires at a startup.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;qtext_para&quot;&gt;&lt;span class=&quot;rendered_qtext&quot;&gt;I don't think that anyone in Silicon Valley would argue, though, that if you have a candidate with 3 years of solid programming experience in a relevant technology - plus also graduated with a prestigious degree - isn't also a good candidate, possibly a better candidate. In fact, I'd go so far as to say there isn't a number N, where a candidate with N years of relevant experience is better than a candidate with N+1 years of experience, all other factors being equal and the skills and experience being relevant and targeted at the business the company is doing.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;qtext_para&quot;&gt;&lt;span class=&quot;rendered_qtext&quot;&gt;The myth that the technology changes too fast for engineers to stay relevant may have been true at one time, but the core technologies on which the web is built have been around for many decades. The C programming language emerged way back in the late 1970s, over 40 years ago. The Javascript language, such as it is, emerged for the first time in 1997, about 20 years ago. That means we have engineers walking around, nearing retirement age, whose entire career has been focused on C and running Unix servers, for decades and decades. There are very few engineers of that quality, with that much experience, though, and I doubt anyone would try to claim that to 22 year old who just graduated is necessarily better than a 60 year old, who has spent 40+ years working in these technologies. Those types of engineers are few and far between, of course.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;qtext_para&quot;&gt;&lt;span class=&quot;rendered_qtext&quot;&gt;Consquently, to the other point in the question, I don't believe software engineering is a dead end career. I would say that it does tend to plateau after a certain number of years in terms of salary growth. Part of the reason for that is simply that engineers are essentially a human commodity. Unless you are a very special engineer, indeed, you can always be replaced by someone else. I think that helps keep software engineering salaries somewhat low compared to other competitive industries. However, I can almost guarantee you that demand for software engineers will exceed the supply of new graduates or others in the candidate pool, so you'll always have a job. You might not receive those fat 10% exponential raises every year, like you do for your first 2 or 3 years, though.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;qtext_para&quot;&gt;&lt;span class=&quot;rendered_qtext&quot;&gt;Finally, to your point about whether management is a better option, I'd ask why consider only that option? There are certainly any number of career paths you can take. You can transition to another area of engineering. For example, many software engineers who don't enjoy creating product move to other roles, sometimes in the same company, such as Operations, Product Management, Project Management, QA, or something even less technical like Sales or Executive positions. I also have friends who have changed careers entirely, such as going into full time teaching.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;qtext_para&quot;&gt;&lt;span class=&quot;rendered_qtext&quot;&gt;Let me conclude by saying that I, for one, do appreciate it when I'm working with managers who have a solid background in engineering, preferably software engineering with technologies relevant to the company, so please don't rush into engineering management as a career path. For those of us who might have to deal with you in the future, get 5 or 6 years of good solid engineering as an individual contributor under your belt. Learn how the industry works as a contributor. Only then, consider moving your career in a management direction. You wouldn't hire a florist to build the Brooklyn Bridge. Don't hire any engineering manager who hasn't paid his dues as an engineer.&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 17 Nov 2017 17:06:14 +0000</pubDate>
<dc:creator>rbanffy</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.quora.com/Is-software-development-really-a-dead-end-job-after-age-35-40/answer/Jeff-Nelson-32?share=1</dc:identifier>
</item>
<item>
<title>Orcas have learned how to drown great white sharks</title>
<link>https://www.theguardian.com/science/blog/2017/nov/16/orca-whales-vs-great-white-sharks-in-a-battle-of-the-apex-predators-who-wins?CMP=fb_gu</link>
<guid isPermaLink="true" >https://www.theguardian.com/science/blog/2017/nov/16/orca-whales-vs-great-white-sharks-in-a-battle-of-the-apex-predators-who-wins?CMP=fb_gu</guid>
<description>&lt;p&gt;The great white shark, &lt;em&gt;Carcharodon carcharias&lt;/em&gt;, is considered the most voracious apex predator in temperate marine ecosystems worldwide, playing a key role in controlling ecosystem dynamics.&lt;/p&gt;
&lt;p&gt;As a result, it is difficult to imagine a great white as prey. And yet, earlier this year the carcasses of five great whites washed ashore along South Africa’s Western Cape province. Ranging in size from 2.7 metres (9ft) to 4.9 metres (16ft), the two females and three males all had one thing in common: holes puncturing the muscle wall between the pectoral fins. Strangest of all, their livers were missing.&lt;/p&gt;
&lt;aside class=&quot;element element-rich-link element--thumbnail element-rich-link--not-upgraded&quot; data-component=&quot;rich-link&quot; data-link-name=&quot;rich-link-3 | 1&quot;&gt;
&lt;/aside&gt;&lt;p&gt;The bite marks inflicted, together with confirmed sightings indicate that orcas, &lt;em&gt;Orcinus orca&lt;/em&gt;, were responsible for this precisely-targeted predation. Although the opening scene from Jaws II immediately springs to mind, in which an orca washes up with huge bite marks on it, the reality has turned out to be the exact opposite.&lt;/p&gt;

&lt;div class=&quot;u-responsive-ratio&quot;&gt;&lt;img class=&quot;gu-image&quot; itemprop=&quot;contentUrl&quot; alt=&quot;Orcas are apex predators whose diet is often geographic or population specific&quot; src=&quot;https://i.guim.co.uk/img/media/b339572204f03729bbdd7c34133b4ebfd21e27d1/0_110_5216_3129/master/5216.jpg?w=300&amp;amp;q=55&amp;amp;auto=format&amp;amp;usm=12&amp;amp;fit=max&amp;amp;s=80daf17b3d00444f60c01a92e2e53692&quot;/&gt;&lt;/div&gt;

Orcas are apex predators whose diet is often geographic or population specific. Photograph: Martin Ruegner/Getty Images/age fotostock RM
&lt;p&gt;When comparing these two apex predators alongside each other, the stats read like a game of Top Trumps. Max length: great white 6.4 metres, orca 9.6 metres; max weight: great white 2,268kg, orca 9,000kg; burst swim speed: great white 45km/h, orca 48km/h. On paper, at least, it does seem that orcas have the edge.&lt;/p&gt;
&lt;p&gt;The diet of orcas is often geographic or population specific. Those populations predating in South African waters have been documented targeting smaller shark species for their livers. Cow sharks, blues and makos caught on longlines have had their livers removed by orcas, alongside the brains of the billfish also caught. Cow shark carcasses without livers have also washed ashore near Cape Town, and again, this followed nearby orca sightings.&lt;/p&gt;
&lt;p&gt;With no doubt that orcas are using highly specialised hunting strategies to target the liver; the real question is: why?&lt;/p&gt;
&lt;p&gt;Shark livers are large, typically accounting for 5% or more of a shark’s total body weight. They are oil rich, with a principal component, squalene, serving as an energy store and providing buoyancy in the absence of the swim-bladder found in teleosts (bony fish).&lt;/p&gt;
&lt;aside class=&quot;element element-rich-link element--thumbnail element-rich-link--not-upgraded&quot; data-component=&quot;rich-link&quot; data-link-name=&quot;rich-link-3 | 2&quot;&gt;
&lt;/aside&gt;&lt;p&gt;Analysis of white shark livers in particular shows an extremely high total lipid content, dominated by triacylglycerols (&amp;gt;93%). This results in an energy density that is higher than whale blubber. For the sharks this serves as an energy storage unit to fuel migrations, growth and reproduction (Pethybridge et al 2014). For the orcas this is like eating a deep fried Mars Bar with added vitamins. Generally speaking, livers contain vitamin C, vitamin B12, folate, vitamin B6, niacin, riboflavin, vitamin A, iron, sodium and of course fat, carbohydrate and protein energy sources.&lt;/p&gt;
&lt;p&gt;Since the attraction of this delicacy to the orca is clear, how exactly does an orca go about removing a great white shark’s liver? The evidence we have shows that it is done with some precision – the shark carcasses were not obliterated.&lt;/p&gt;

&lt;div class=&quot;u-responsive-ratio&quot;&gt;&lt;img class=&quot;gu-image&quot; itemprop=&quot;contentUrl&quot; alt=&quot;The examination of one of the great whites beginsThe incision under the pectoral fin was made by the orca.&quot; src=&quot;https://i.guim.co.uk/img/media/f2bf88249379baefd8e10973919a95dbc048d33b/0_0_3987_2392/master/3987.jpg?w=300&amp;amp;q=55&amp;amp;auto=format&amp;amp;usm=12&amp;amp;fit=max&amp;amp;s=5550026826f394ff835fcbedc5964c2d&quot;/&gt;&lt;/div&gt;

The examination of one of the great whites begins. The incision under the pectoral fin was made by the orca. Photograph: Dyer Island Conservation Trust, Michelle Wcisel
&lt;p&gt;During a 1997 encounter off the Farrallon Islands off the coast of San Francisco, a group of whale watchers witnessed an orca ramming into the side of a great white shark, momentarily stunning it and allowing the orca to flip it over and holding it in place (ventral/belly up) for around 15 minutes, after which the orca began consuming its prey, much to the surprise of the whale watchers on board. A similar incident was captured on film off Costa Rica in 2014 – this time the orca’s prey was a tiger shark. And it’s not just sharks; orcas have been observed doing the same to stingrays too.&lt;/p&gt;
&lt;aside class=&quot;element element-rich-link element--thumbnail element-rich-link--not-upgraded&quot; data-component=&quot;rich-link&quot; data-link-name=&quot;rich-link-3 | 3&quot;&gt;
&lt;/aside&gt;&lt;p&gt;What the orcas were exploiting to their own advantage is a curious phenomenon known as “tonic immobility” (TI). This is a natural state of paralysis, which occurs when elasmobranchs are positioned ventral side up in the water column. For certain species of shark like the great white, which is unable to pump water across its gills unless it keeps swimming, the consequence of being maintained within this ‘tonic’ state for too long is final. Effectively, the orcas have learned how to drown their prey whilst minimising their own predatory exertion.&lt;/p&gt;
&lt;p&gt;T I is a reflex that is characterised by a catatonic state and total loss of muscle tone – it equates to at least stage IIb of anaesthesia (loss of consciousness to automatic respiration, as shown by McFarland, 1959). It has been observed and documented for a variety of terrestrial species, but in the aquatic environment it is usually associated with elasmobranchs.&lt;/p&gt;

&lt;div class=&quot;u-responsive-ratio&quot;&gt;&lt;img class=&quot;gu-image&quot; itemprop=&quot;contentUrl&quot; alt=&quot;Sub-adult lemon shark held in tonic immobility for hook removal.&quot; src=&quot;https://i.guim.co.uk/img/media/b28a71cd8e2e45ca62e5ec3237742ca2e58e1254/72_0_1450_870/master/1450.jpg?w=300&amp;amp;q=55&amp;amp;auto=format&amp;amp;usm=12&amp;amp;fit=max&amp;amp;s=275abca76b8bf3a863aff0fe884ad249&quot;/&gt;&lt;/div&gt;

Sub-adult lemon shark held in tonic immobility for hook removal. Photograph: Lauren Smith
&lt;p&gt;Researchers often use this reflex to help with the surgical implantation of acoustic tags. The rapid induction and recovery of the animals optimises the surgical procedure, which is particularly desirable during what are often complex field work conditions (Kessel &amp;amp; Hussey 2015).&lt;/p&gt;
&lt;p&gt;Helpful to researchers and predatory orcas it may be, but the evolutionary benefit to those elasmobranchs exhibiting TI is less certain. It may serve as a defence strategy, but the advantage of sharks being able to “play dead” is not clear. An alternative theory suggests that TI may be related to mating, with males using it as a technique to temporarily immobilise the female.&lt;/p&gt;
&lt;p&gt;Whatever the primary use of TI is in the wild for elasmobranchs, orcas are known to exploit this to aid their predation. The sharks however, also learn, and sightings of great whites off the South African coastline rapidly declined whilst the orcas were in the area. Once the orcas moved on, the great whites slowly began to return.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pethybridge HR, Parrish CC, Bruce BD, Young JW, Nichols PD. 2014. &lt;a href=&quot;http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0097877&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;Lipid, Fatty Acid and Energy Density Profiles of White Sharks: Insights into the Feeding Ecology and Ecophysiology of a Complex Top Predator&lt;/a&gt;. PLoS ONE 5: e97877.&lt;/p&gt;
&lt;p&gt;Kessel, ST, Hussey, NE. 2015. &lt;a href=&quot;http://www.nrcresearchpress.com/doi/10.1139/cjfas-2015-0136#.Wg1yBRO0NHc&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;Tonic immobility as an anaesthetic for elasmobranchs during surgical implantation procedures.&lt;/a&gt; Canadian Journal of Fisheries and Aquaculture Science. 72. 1-5.&lt;/p&gt;
&lt;p&gt;McFarland, WN. 1959. A study of the effects of anaesthetics on the behaviour and physiology of fishes. Publication of the Institute of Marine Science, University of Texas at Austin, 6: 23–55.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;This headline on this piece was edited on 16 November to correct an error made by a subeditor – orcas, technically speaking, are the largest dolphins and not whales .&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Fri, 17 Nov 2017 16:29:01 +0000</pubDate>
<dc:creator>walkingolof</dc:creator>
<og:url>http://www.theguardian.com/science/blog/2017/nov/16/orca-whales-vs-great-white-sharks-in-a-battle-of-the-apex-predators-who-wins</og:url>
<og:description>It’s difficult to imagine the voracious great white shark as prey. Could orcas really be overpowering them and removing their livers?</og:description>
<og:image>https://i.guim.co.uk/img/media/18b002b97b654e8c1ea7966625fe42527321edda/0_357_5350_3210/master/5350.jpg?w=1200&amp;h=630&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;crop=faces%2Centropy&amp;bm=normal&amp;ba=bottom%2Cleft&amp;blend64=aHR0cHM6Ly91cGxvYWRzLmd1aW0uY28udWsvMjAxNi8wNS8yNS9vdmVybGF5LWxvZ28tMTIwMC05MF9vcHQucG5n&amp;s=796b420b4563c2adf0f7b69507439c5a</og:image>
<og:type>article</og:type>
<og:title>Orcas vs great white sharks: in a battle of the apex predators who wins?</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theguardian.com/science/blog/2017/nov/16/orca-whales-vs-great-white-sharks-in-a-battle-of-the-apex-predators-who-wins?CMP=fb_gu</dc:identifier>
</item>
<item>
<title>Germany bans children&amp;#039;s smartwatches</title>
<link>http://www.bbc.co.uk/news/technology-42030109</link>
<guid isPermaLink="true" >http://www.bbc.co.uk/news/technology-42030109</guid>
<description>&lt;figure class=&quot;media-landscape has-caption full-width lead&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                &lt;img class=&quot;js-image-replace&quot; alt=&quot;Smartwatches&quot; src=&quot;https://ichef-1.bbci.co.uk/news/320/cpsprodpb/CCB0/production/_98800425_mediaitem98356800.jpg&quot; width=&quot;976&quot; height=&quot;549&quot;/&gt;&lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;NCC&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    The German telecoms regulator urged parents to destroy children's smartwatches
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;story-body__introduction&quot;&gt;A German regulator has banned the sale of smartwatches aimed at children, describing them as spying devices.&lt;/p&gt;&lt;p&gt;It had previously banned an internet-connected doll called, My Friend Cayla, for similar reasons.&lt;/p&gt;&lt;p&gt;Telecoms regulator the Federal Network Agency urged parents who had such watches to destroy them.&lt;/p&gt;&lt;p&gt;One expert said the decision could be a &quot;game-changer&quot; for internet-connected devices.&lt;/p&gt;&lt;p&gt;&quot;Poorly secured smart devices often allow for privacy invasion. That is really concerning when it comes to kids' GPS tracking watches - the very watches that are supposed to help keep them safe,&quot; said Ken Munro, a security expert at Pen Test Partners.&lt;/p&gt;&lt;p&gt;&quot;There is a shocking lack of regulation of the 'internet of things', which allows lax manufacturers to sell us dangerously insecure smart products.&lt;/p&gt;&lt;p&gt;&quot;Using privacy regulation to ban such devices is a game-changer, stopping these manufacturers playing fast and loose with our kids' security,&quot; he added.&lt;/p&gt;&lt;p&gt;In a statement, the agency said it had already taken action against several firms offering such watches on the internet.&lt;/p&gt;&lt;p&gt;&quot;Via an app, parents can use such children's watches to listen unnoticed to the child's environment and they are to be regarded as an unauthorised transmitting system,&quot; said Jochen Homann, president of the Federal Network Agency.&lt;/p&gt;&lt;p&gt;&quot;According to our research, parents' watches are also used to listen to teachers in the classroom.&quot;&lt;/p&gt;&lt;p&gt;The agency also asked schools to &quot;pay more attention&quot; to such watches among students.&lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;Tracking children&lt;/h2&gt;&lt;p&gt;Such watches - which are sold by a large number of providers in Germany - are generally aimed at children between the ages of five and 12.&lt;/p&gt;&lt;p&gt;Most are equipped with a Sim card and a limited telephony function and are set up and controlled via an app.&lt;/p&gt;&lt;p&gt;In October, the Norwegian Consumer Council (NCC) reported that 'some children's watches - including Gator and GPS for kids - had flaws such as transmitting and storing data without encryption.&lt;/p&gt;&lt;p&gt;It meant that strangers, using basic hacking techniques, could track children as they moved or make a child appear to be in a completely different location.&lt;/p&gt;&lt;p&gt;It is not clear whether the German decision to ban such devices was based on the privacy issues associated with them or wider security flaws that have been uncovered by NCC and others.&lt;/p&gt;&lt;p&gt;Both firms said that they had resolved the security issues.&lt;/p&gt;&lt;p&gt;Finn Myrstad, head of digital policy at the NCC said: &quot;This ban sends a strong signal to makers of products aimed at children that they need to be safer.&quot;&lt;/p&gt;&lt;p&gt;He called for Europe-wide measures to increase the security of such devices.&lt;/p&gt;
    </description>
<pubDate>Fri, 17 Nov 2017 16:22:15 +0000</pubDate>
<dc:creator>watbe</dc:creator>
<og:title>Germany bans children's smartwatches</og:title>
<og:type>article</og:type>
<og:description>Telecoms regulator says kids' smartwatches are spying devices and are to be banned under German law.</og:description>
<og:url>http://www.bbc.co.uk/news/technology-42030109</og:url>
<og:image>https://ichef.bbci.co.uk/news/1024/cpsprodpb/CCB0/production/_98800425_mediaitem98356800.jpg</og:image>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.bbc.co.uk/news/technology-42030109</dc:identifier>
</item>
<item>
<title>Brave expands Basic Attention Token platform to YouTube</title>
<link>https://basicattentiontoken.org/brave-expands-basic-attention-token-platform-to-youtube/</link>
<guid isPermaLink="true" >https://basicattentiontoken.org/brave-expands-basic-attention-token-platform-to-youtube/</guid>
<description>&lt;div class=&quot;et_pb_section et_pb_section_0 et_section_regular&quot; data-padding=&quot;0px|0px|49.3906px|0px&quot;&gt;
&lt;div class=&quot; et_pb_row et_pb_row_0&quot;&gt;
&lt;div class=&quot;et_pb_column et_pb_column_4_4 et_pb_column_0&quot;&gt;
&lt;div class=&quot;et_pb_text et_pb_module et_pb_bg_layout_light et_pb_text_align_left et_pb_text_0&quot;&gt;
&lt;div class=&quot;et_pb_text_inner&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;YouTube creators can now earn BAT for their content&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;et_pb_text et_pb_module et_pb_bg_layout_light et_pb_text_align_left et_pb_text_1&quot;&gt;
&lt;div class=&quot;et_pb_text_inner&quot;&gt;
&lt;p&gt;&lt;span&gt;With today’s release of&lt;/span&gt; &lt;a href=&quot;https://brave.com/download/&quot;&gt;&lt;span&gt;Brave browser 0.19.95&lt;/span&gt;&lt;/a&gt;&lt;span&gt; for the desktop, audiences can use the&lt;/span&gt; &lt;a href=&quot;https://brave.com/faq-payments/#what-is-brave-payments&quot;&gt;&lt;span&gt;Brave Payments&lt;/span&gt;&lt;/a&gt; &lt;span&gt;system to reward their favorite YouTube creators with Basic Attention Tokens (BAT).   YouTube viewers can either distribute contributions based on the time they spend viewing material or by “pinning” a set amount for a particular channel. Previously, the BAT could only be distributed on a domain-by-domain basis.    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The Brave browser provides an ad-free YouTube video experience. It also enables a direct monetary relationship between the content creator and their audience. Compensation for YouTube creators no longer needs to be based on vague rules or mercurial algorithms, as users can decide who to compensate. This new ability will especially benefit YouTube creators who have under 10,000 lifetime views, as they&lt;/span&gt; &lt;a href=&quot;https://www.theverge.com/2017/4/6/15209220/youtube-partner-program-rule-change-monetize-ads-10000-views&quot;&gt;&lt;span&gt;do not receive ad revenue from YouTube&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Previously, YouTube creators could not be listed as individual publishers in Brave Payments. This change allows BAT contributions to flow directly into their wallets. The Brave browser determines the YouTube creator name from a YouTube video, no matter what site embeds it. It then displays it in the Brave Payments list, enabling the user to donate back on a monthly basis. Once a user enables Brave Payments, donations are done automatically and anonymously.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;In order to verify YouTube creators with our Brave Payments system, we use the OAuth standard. Once the creator’s email is confirmed by our system, they are asked to verify their YouTube channel by connecting via Google; in turn, Google confirms with our&lt;/span&gt; &lt;a href=&quot;https://publishers.basicattentiontoken.org/&quot;&gt;&lt;span&gt;publisher site&lt;/span&gt;&lt;/a&gt; &lt;span&gt;that the creator has authenticated as an authorized owner of that channel, without revealing their credentials.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;After the YouTube creator completes this verification process and opens an account with&lt;/span&gt; &lt;a href=&quot;https://uphold.com/signup&quot;&gt;&lt;span&gt;Uphold&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, they are eligible to start collecting monthly BAT contributions&lt;/span&gt; &lt;span&gt;from their audience. BAT contributions are automatically converted to fiat and&lt;/span&gt; &lt;span&gt;may then be transferred to the creator’s bank account.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;We look forward to seeing a new category of content creators on YouTube get rewarded via BAT. We plan on extending BAT to additional user-generated content platforms so that more creators can benefit from audience support, and anticipate seeing BAT’s utility grow as it supports more creators and publishers in our digital advertising and services platform.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;et_pb_module et-waypoint et_pb_image et_pb_animation_left et_pb_image_0 et_always_center_on_mobile&quot;&gt;&lt;a href=&quot;https://basicattentiontoken.org/brave-expands-basic-attention-token-platform-to-youtube/images/Brave_Payments_Youtube-1.png&quot; class=&quot;et_pb_lightbox_image&quot; title=&quot;&quot;&gt;&lt;img src=&quot;https://basicattentiontoken.org/brave-expands-basic-attention-token-platform-to-youtube/images/Brave_Payments_Youtube-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;et_pb_text et_pb_module et_pb_bg_layout_light et_pb_text_align_left et_pb_text_2&quot;&gt;
&lt;div class=&quot;et_pb_text_inner&quot;&gt;
&lt;p&gt;Brave Payments Log-In Screen&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;et_pb_module et-waypoint et_pb_image et_pb_animation_left et_pb_image_1 et_always_center_on_mobile&quot;&gt;&lt;a href=&quot;https://basicattentiontoken.org/brave-expands-basic-attention-token-platform-to-youtube/images/image3_1.png&quot; class=&quot;et_pb_lightbox_image&quot; title=&quot;&quot;&gt;&lt;img src=&quot;https://basicattentiontoken.org/brave-expands-basic-attention-token-platform-to-youtube/images/image3_1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;et_pb_text et_pb_module et_pb_bg_layout_light et_pb_text_align_left et_pb_text_3&quot;&gt;
&lt;div class=&quot;et_pb_text_inner&quot;&gt;
&lt;p&gt;Brave Payments Publisher Dashboard&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;et_pb_module et-waypoint et_pb_image et_pb_animation_left et_pb_image_2 et_always_center_on_mobile&quot;&gt;&lt;a href=&quot;https://basicattentiontoken.org/brave-expands-basic-attention-token-platform-to-youtube/images/image1.png&quot; class=&quot;et_pb_lightbox_image&quot; title=&quot;&quot;&gt;&lt;img src=&quot;https://basicattentiontoken.org/brave-expands-basic-attention-token-platform-to-youtube/images/image1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;et_pb_section et_pb_section_2 et_pb_with_background et_section_regular&quot;&gt;
&lt;div class=&quot; et_pb_row et_pb_row_1 et_pb_equal_columns et_pb_row_fullwidth&quot;&gt;
&lt;div class=&quot;et_pb_column et_pb_column_1_3 et_pb_column_1&quot;&gt;
&lt;div class=&quot;et_pb_module et-waypoint et_pb_image et_pb_animation_left et_pb_image_3&quot;&gt;&lt;img src=&quot;https://basicattentiontoken.org/brave-expands-basic-attention-token-platform-to-youtube/fonts/BAT_icon.svg&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;et_pb_column et_pb_column_1_3 et_pb_column_2&quot;&gt;
&lt;div class=&quot;et_pb_text et_pb_module et_pb_bg_layout_dark et_pb_text_align_left et_pb_text_4&quot;&gt;
&lt;div class=&quot;et_pb_text_inner&quot;&gt;
&lt;p&gt;&lt;span&gt;The Basic Attention Token is the new token for the digital advertising industry. It pays publishers for their content and users for their attention, while providing advertisers with more in return for their ads.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

</description>
<pubDate>Fri, 17 Nov 2017 14:45:27 +0000</pubDate>
<dc:creator>Helloworldboy</dc:creator>
<og:title>Brave expands Basic Attention Token platform to YouTube</og:title>
<og:url>https://basicattentiontoken.org/brave-expands-basic-attention-token-platform-to-youtube/</og:url>
<og:type>article</og:type>
<og:description>Brave expands Basic Attention Token platform to YouTube</og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://basicattentiontoken.org/brave-expands-basic-attention-token-platform-to-youtube/</dc:identifier>
</item>
</channel>
</rss>