<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Learn to use Awk with hundreds of examples</title>
<link>https://github.com/learnbyexample/Command-line-text-processing/blob/master/gnu_awk.md</link>
<guid isPermaLink="true" >https://github.com/learnbyexample/Command-line-text-processing/blob/master/gnu_awk.md</guid>
<description>&lt;h2&gt;GNU awk&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;br/&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ awk --version &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; head -n1
GNU Awk 4.1.3, API: 1.1 (GNU MPFR 3.1.4, GNU MP 6.1.0)

$ man awk
GAWK(1)                        Utility Commands                        GAWK(1)

NAME
       gawk - pattern scanning and processing language

SYNOPSIS
       gawk [ POSIX or GNU style options ] -f program-file [ -- ] file ...
       gawk [ POSIX or GNU style options ] [ -- ] program-text file ...

DESCRIPTION
       Gawk  is  the  GNU Project&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;s implementation of the AWK programming lan‚Äê&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;       guage.  It conforms to the definition of  the  language  in  the  POSIX&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;       1003.1  Standard.   This version in turn is based on the description in&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;       The AWK Programming Language, by Aho, Kernighan, and Weinberger.   Gawk&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;       provides  the additional features found in the current version of Brian&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;       Kernighan&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;s awk and a number of GNU-specific extensions.
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Prerequisites and notes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;familiarity with programming concepts like variables, printing, control structures, arrays, etc&lt;/li&gt;
&lt;li&gt;familiarity with regular expressions
&lt;/li&gt;
&lt;li&gt;this tutorial is primarily focussed on short programs that are easily usable from command line, similar to using &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt;, etc&lt;/li&gt;
&lt;li&gt;see &lt;a href=&quot;https://www.gnu.org/software/gawk/manual/&quot;&gt;Gawk: Effective AWK Programming&lt;/a&gt; manual for complete reference, has information on other &lt;code&gt;awk&lt;/code&gt; versions as well as notes on POSIX standard&lt;/li&gt;
&lt;/ul&gt;&lt;br/&gt;&lt;h2&gt;Field processing&lt;/h2&gt;
&lt;br/&gt;&lt;h4&gt;Default field separation&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;$0&lt;/code&gt; contains the entire input record
&lt;ul&gt;&lt;li&gt;default input record separator is newline character&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$1&lt;/code&gt; contains the first field text
&lt;ul&gt;&lt;li&gt;default input field separator is one or more of continuous space, tab or newline characters&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$2&lt;/code&gt; contains the second field text and so on&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(2+3)&lt;/code&gt; result of expressions can be used, this one evaluates to &lt;code&gt;$5&lt;/code&gt; and hence gives fifth field
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NF&lt;/code&gt; is a built-in variable which contains number of fields in the current record
&lt;ul&gt;&lt;li&gt;so, &lt;code&gt;$NF&lt;/code&gt; will give last field&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(NF-1)&lt;/code&gt; will give second last field and so on&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat fruits.txt 
fruit   qty
apple   42
banana  31
fig     90
guava   6

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; print only first field&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $1}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt 
fruit
apple
banana
fig
guava

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; print only second field&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $2}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt 
qty
42
31
90
6
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h4&gt;Specifying different input field separator&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;by using &lt;code&gt;-F&lt;/code&gt; command line option&lt;/li&gt;
&lt;li&gt;by setting &lt;code&gt;FS&lt;/code&gt; variable&lt;/li&gt;
&lt;li&gt;See &lt;a href=&quot;https://github.com/learnbyexample/Command-line-text-processing/blob/master/gnu_awk.md#fpat-and-fieldwidths&quot;&gt;FPAT and FIELDWIDTHS&lt;/a&gt; section for other ways of defining input fields&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; second field where input field separator is :&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:789&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $2}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
123

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; last field&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:789&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $NF}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
789

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; first and last field&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; note the use of , and space between output fields&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:789&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $1, $NF}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo 789

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; second last field&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:789&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $(NF-1)}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
bar

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; use quotes to avoid clashes with shell special characters&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;one;two;three;four&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $3}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
three
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Regular expressions based input field separator&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Sample123string54with908numbers&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;[0-9]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $2}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
string

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; first field will be empty as there is nothing before '{'&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{foo}   bar=baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;[{}= ]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $1}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{foo}   bar=baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;[{}= ]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $2}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{foo}   bar=baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;[{}= ]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $3}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
bar
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;default input field separator is one or more of continuous space, tab or newline characters (will be termed as whitespace here on)
&lt;ul&gt;&lt;li&gt;exact same behavior if &lt;code&gt;FS&lt;/code&gt; is assigned single space character&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;in addition, leading and trailing whitespaces won't be considered when splitting the input record&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; a    ate b\tc   \n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
 a    ate b     c
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; a    ate b\tc   \n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $1}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
a
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; a    ate b\tc   \n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print NF}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
4
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; same behavior if FS is assigned to single space character&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; a    ate b\tc   \n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $1}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
a
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; a    ate b\tc   \n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print NF}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
4

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; for anything else, leading/trailing whitespaces will be considered&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; a    ate b\tc   \n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;[ \t]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $2}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
a
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; a    ate b\tc   \n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;[ \t]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print NF}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
6
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;assigning empty string to FS will split the input record character wise&lt;/li&gt;
&lt;li&gt;note the use of command line option &lt;code&gt;-v&lt;/code&gt; to set FS&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;apple&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v FS= &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $1}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
a
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;apple&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v FS= &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $2}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
p
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;apple&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v FS= &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $NF}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
e

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; detecting multibyte characters depends on locale&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;hiüëç how are you?&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v FS= &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $3}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
üëç
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Further Reading&lt;/strong&gt;&lt;/p&gt;
&lt;br/&gt;&lt;h4&gt;Specifying different output field separator&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;by setting &lt;code&gt;OFS&lt;/code&gt; variable&lt;/li&gt;
&lt;li&gt;also gets added between every argument to &lt;code&gt;print&lt;/code&gt; statement
&lt;/li&gt;
&lt;li&gt;default is single space&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; statements inside BEGIN are executed before processing any input text&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:789&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{FS=OFS=&quot;:&quot;} {print $1, $NF}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo:789
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; can also be set using command line option -v&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:789&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F: -v OFS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;:&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $1, $NF}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo:789

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; changing a field will re-build contents of $0&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; a      ate b   &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$2 = &quot;foo&quot;; print $0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; cat -A
a foo b$

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; $1=$1 is an idiomatic way to re-build when there is nothing else to change&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:789&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F: -v OFS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;-&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo:123:bar:789
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:789&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F: -v OFS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;-&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$1=$1; print $0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo-123-bar-789

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; OFS is used to separate different arguments given to print&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:789&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F: -v OFS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;\t&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $1, $3}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo     bar

$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Sample123string54with908numbers&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;[0-9]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$1=$1; print $0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
Sample string with numbers
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h2&gt;Filtering&lt;/h2&gt;
&lt;br/&gt;&lt;h4&gt;Idiomatic print usage&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;print&lt;/code&gt; statement with no arguments will print contents of &lt;code&gt;$0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if condition is specified without corresponding statements, contents of &lt;code&gt;$0&lt;/code&gt; is printed if condition evaluates to true&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt; is typically used to represent always true condition and thus print contents of &lt;code&gt;$0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat poem.txt 
Roses are red,
Violets are blue,
Sugar is sweet,
And so are you.

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; displaying contents of input file(s) similar to 'cat' command&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; equivalent to using awk '{print $0}' and awk '1'&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt 
Roses are red,
Violets are blue,
Sugar is sweet,
And so are you.
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h4&gt;Field comparison&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Each block of statements within &lt;code&gt;{}&lt;/code&gt; can be prefixed by an optional condition so that those statements will execute only if condition evaluates to true&lt;/li&gt;
&lt;li&gt;Condition specified without corresponding statements will lead to printing contents of &lt;code&gt;$0&lt;/code&gt; if condition evaluates to true&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; if first field exactly matches the string 'apple'&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;$1==&quot;apple&quot;{print $2}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt 
42

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; print first field if second field &amp;gt; 35&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; NR&amp;gt;1 to avoid the header line&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; NR built-in variable contains record number&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR&amp;gt;1 &amp;amp;&amp;amp; $2&amp;gt;35{print $1}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt 
apple
fig

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; print header and lines with qty &amp;lt; 35&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==1 || $2&amp;lt;35&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt
fruit   qty
banana  31
guava   6
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;If the above examples are too confusing, think of it as syntactical sugar&lt;/li&gt;
&lt;li&gt;Statements are grouped within &lt;code&gt;{}&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;inside &lt;code&gt;{}&lt;/code&gt;, we have a &lt;code&gt;if&lt;/code&gt; control structure&lt;/li&gt;
&lt;li&gt;Like &lt;code&gt;C&lt;/code&gt; language, braces not needed for single statements within &lt;code&gt;if&lt;/code&gt;, but consider that &lt;code&gt;{}&lt;/code&gt; is used for clarity&lt;/li&gt;
&lt;li&gt;From this explicit syntax, remove the outer &lt;code&gt;{}&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;()&lt;/code&gt; used for &lt;code&gt;if&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;As we'll see later, this allows to mash up few lines of program compactly on command line itself
&lt;ul&gt;&lt;li&gt;Of course, for medium to large programs, it is better to put the code in separate file. See &lt;a href=&quot;https://github.com/learnbyexample/Command-line-text-processing/blob/master/gnu_awk.md#awk-scripts&quot;&gt;awk scripts&lt;/a&gt; section&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; awk '$1==&quot;apple&quot;{print $2}' fruits.txt &lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;         if($1 == &quot;apple&quot;){&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;            print $2&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;         }&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;       }&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt
42

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; awk 'NR==1 || $2&amp;lt;35' fruits.txt&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;         if(NR==1 || $2&amp;lt;35){&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;            print $0&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;         }&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;       }&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt
fruit   qty
banana  31
guava   6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Further Reading&lt;/strong&gt;&lt;/p&gt;
&lt;br/&gt;&lt;h4&gt;Regular expressions based filtering&lt;/h4&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; all lines containing the string 'are'&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; same as: grep 'are' poem.txt&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/are/&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt
Roses are red,
Violets are blue,
And so are you.

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; negating REGEXP, same as: grep -v 'are' poem.txt&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;!/are/&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt
Sugar is sweet,

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; same as: grep 'are' poem.txt | grep -v 'so'&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/are/ &amp;amp;&amp;amp; !/so/&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt
Roses are red,
Violets are blue,

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; lines starting with 'a' or 'b'&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/^[ab]/&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt
apple   42
banana  31

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; print last field of all lines containing 'are'&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/are/{print $NF}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt
red,
blue,
you.
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;strings can be used as well, which will be interpreted as &lt;em&gt;REGEXP&lt;/em&gt; if necessary&lt;/li&gt;
&lt;li&gt;Allows &lt;a href=&quot;https://github.com/learnbyexample/Command-line-text-processing/blob/master/gnu_awk.md#using-shell-variables&quot;&gt;using shell variables&lt;/a&gt; instead of hardcoded &lt;em&gt;REGEXP&lt;/em&gt;
&lt;ul&gt;&lt;li&gt;that section also notes difference between using &lt;code&gt;//&lt;/code&gt; and string&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;$0 !~ &quot;are&quot;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt
Sugar is sweet,

$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;$0 ~ &quot;^[ab]&quot;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt
apple   42
banana  31

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; also helpful if search strings have the / delimiter character&lt;/span&gt;
$ cat paths.txt
/foo/a/report.log
/foo/y/power.log
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/\/foo\/a\//&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; paths.txt
/foo/a/report.log
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;$0 ~ &quot;/foo/a/&quot;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; paths.txt
/foo/a/report.log
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;REGEXP&lt;/em&gt; matching against specific field&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; if first field contains 'a'&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;$1 ~ /a/&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt 
apple   42
banana  31
guava   6

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; if first field contains 'a' and qty &amp;gt; 20&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;$1 ~ /a/ &amp;amp;&amp;amp; $2 &amp;gt; 20&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt 
apple   42
banana  31

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; if first field does NOT contain 'a'&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;$1 !~ /a/&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt 
fruit   qty
fig     90
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h4&gt;Fixed string matching&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;to search a string literally, &lt;code&gt;index&lt;/code&gt; function can be used instead of &lt;em&gt;REGEXP&lt;/em&gt;
&lt;ul&gt;&lt;li&gt;similar to &lt;code&gt;grep -F&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;the function returns the starting position and &lt;code&gt;0&lt;/code&gt; if no match found&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat eqns.txt
a=b,a+b=c,c&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;d
a+b,pi=3.14,5e12
i&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;(t+9-g)/8,4-a+b

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; no output since '+' is meta character, would need '/a\+b/'&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/a+b/&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; eqns.txt
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; same as: grep -F 'a+b' eqns.txt&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;index($0,&quot;a+b&quot;)&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; eqns.txt
a+b,pi=3.14,5e12
i&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;(t+9-g)/8,4-a+b

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; much easier than '/i\*\(t\+9-g\)/'&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;index($0,&quot;i*(t+9-g)&quot;)&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; eqns.txt
i&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;(t+9-g)/8,4-a+b

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; check only last field&lt;/span&gt;
$ awk -F, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;index($NF,&quot;a+b&quot;)&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; eqns.txt
i&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;(t+9-g)/8,4-a+b
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; index not needed if entire field/line is being compared&lt;/span&gt;
$ awk -F, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;$1==&quot;a+b&quot;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; eqns.txt
a+b,pi=3.14,5e12
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;return value is useful to match at specific position&lt;/li&gt;
&lt;li&gt;for ex: at start/end of line&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; start of line&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;index($0,&quot;a+b&quot;)==1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; eqns.txt
a+b,pi=3.14,5e12

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; end of line&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; length function returns number of characters, by default acts on $0&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;index($0,&quot;a+b&quot;)==length()-length(&quot;a+b&quot;)+1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; eqns.txt
i&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;(t+9-g)/8,4-a+b
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; to avoid repetitions, save the search string in variable&lt;/span&gt;
$ awk -v s=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;a+b&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;index($0,s)==length()-length(s)+1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; eqns.txt
i&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;(t+9-g)/8,4-a+b
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h4&gt;Line number based filtering&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Built-in variable &lt;code&gt;NR&lt;/code&gt; contains total records read so far&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;FNR&lt;/code&gt; if you need line numbers separately for &lt;a href=&quot;https://github.com/learnbyexample/Command-line-text-processing/blob/master/gnu_awk.md#multiple-file-processing&quot;&gt;multiple file processing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; same as: head -n2 poem.txt | tail -n1&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==2&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt 
Violets are blue,

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; print 2nd and 4th line&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==2 || NR==4&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt 
Violets are blue,
And so are you.

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; same as: tail -n1 poem.txt&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; statements inside END are executed after processing all input text&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;END{print}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt 
And so are you.

$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==4{print $2}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt 
90
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;for large input, use &lt;code&gt;exit&lt;/code&gt; to avoid unnecessary record processing&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ seq 14323 14563435 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==234{print; exit}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
14556

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; sample time comparison&lt;/span&gt;
$ &lt;span class=&quot;pl-k&quot;&gt;time&lt;/span&gt; seq 14323 14563435 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==234{print; exit}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
14556

real    0m0.004s
user    0m0.004s
sys     0m0.000s
$ &lt;span class=&quot;pl-k&quot;&gt;time&lt;/span&gt; seq 14323 14563435 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==234{print}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
14556

real    0m2.167s
user    0m2.280s
sys     0m0.092s
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h2&gt;Case Insensitive filtering&lt;/h2&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; same as: grep -i 'rose' poem.txt &lt;/span&gt;
$ awk -v IGNORECASE=1 &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/rose/&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt 
Roses are red,

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; for small enough set, can also use REGEXP character class&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/[rR]ose/&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt 
Roses are red,

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; another way is to use built-in string function 'tolower'&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;tolower($0) ~ /rose/&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt 
Roses are red,
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h2&gt;Changing record separators&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;RS&lt;/code&gt; to change input record separator&lt;/li&gt;
&lt;li&gt;default is newline character&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ s=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;this is a sample string&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; space as input record separator, printing all records&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v RS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print NR, $0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
1 this
2 is
3 a
4 sample
5 string

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; print all records containing 'a'&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v RS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/a/&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
a
sample
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;ORS&lt;/code&gt; to change output record separator&lt;/li&gt;
&lt;li&gt;gets added to every &lt;code&gt;print&lt;/code&gt; statement
&lt;/li&gt;
&lt;li&gt;default is newline character&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ seq 3 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
1
2
3
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; note that there is empty line after last record&lt;/span&gt;
$ seq 3 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v ORS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;\n\n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
1

2

3

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; dynamically changing ORS&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; can also use: seq 6 | awk '{ORS = NR%2 ? &quot; &quot; : RS} 1'&lt;/span&gt;
$ seq 6 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{ORS = NR%2 ? &quot; &quot; : &quot;\n&quot;} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
1 2
3 4
5 6
$ seq 6 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{ORS = NR%3 ? &quot;-&quot; : &quot;\n&quot;} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
1-2-3
4-5-6
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h4&gt;Paragraph mode&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;When &lt;code&gt;RS&lt;/code&gt; is set to empty string, one or more consecutive empty lines is used as input record separator&lt;/li&gt;
&lt;li&gt;Can also use regular expression &lt;code&gt;RS=\n\n+&lt;/code&gt; but there are subtle differences, see &lt;a href=&quot;https://www.gnu.org/software/gawk/manual/html_node/Multiple-Line.html&quot;&gt;gawk manual - multiline records&lt;/a&gt;. Important points from that link quoted below&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;
&lt;p&gt;However, there is an important difference between ‚ÄòRS = &quot;&quot;‚Äô and ‚ÄòRS = &quot;\n\n+&quot;‚Äô. In the first case, leading newlines in the input data file are ignored, and if a file ends without extra blank lines after the last record, the final newline is removed from the record. In the second case, this special processing is not done&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Now that the input is separated into records, the second step is to separate the fields in the records. One way to do this is to divide each of the lines into fields in the normal manner. This happens by default as the result of a special feature. When RS is set to the empty string and FS is set to a single character, the newline character always acts as a field separator. This is in addition to whatever field separations result from FS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;When FS is the null string (&quot;&quot;) or a regexp, this special feature of RS does not apply. It does apply to the default field separator of a single space: ‚ÄòFS = &quot; &quot;‚Äô&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Consider the below sample file&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat sample.txt
Hello World

Good day
How are you

Just do-it
Believe it

Today is sunny
Not a bit funny
No doubt you like it too

Much ado about nothing
He he he
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Filtering paragraphs&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; print all paragraphs containing 'it'&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; if extra newline at end is undesirable, can use&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; awk -v RS= '/it/{print c++ ? &quot;\n&quot; $0 : $0}' sample.txt&lt;/span&gt;
$ awk -v RS= -v ORS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;\n\n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/it/&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; sample.txt
Just do-it
Believe it

Today is sunny
Not a bit funny
No doubt you like it too

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; based on number of lines in each paragraph&lt;/span&gt;
$ awk -F&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;\n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; -v RS= -v ORS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;\n\n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NF==1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; sample.txt
Hello World

$ awk -F&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;\n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; -v RS= -v ORS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;\n\n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NF==2 &amp;amp;&amp;amp; /do/&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; sample.txt
Just do-it
Believe it

Much ado about nothing
He he he
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Re-structuring paragraphs&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; default FS is one or more of continuous space, tab or newline characters&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; default OFS is single space&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; so, $1=$1 will change it uniformly to single space between fields&lt;/span&gt;
$ awk -v RS= &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$1=$1} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; sample.txt
Hello World
Good day How are you
Just do-it Believe it
Today is sunny Not a bit funny No doubt you like it too
Much ado about nothing He he he

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; a better usecase&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{FS=&quot;\n&quot;; OFS=&quot;. &quot;; RS=&quot;&quot;; ORS=&quot;\n\n&quot;} {$1=$1} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; sample.txt
Hello World

Good day. How are you

Just do-it. Believe it

Today is sunny. Not a bit funny. No doubt you like it too

Much ado about nothing. He he he
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Further Reading&lt;/strong&gt;&lt;/p&gt;
&lt;br/&gt;&lt;h4&gt;Multicharacter RS&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Some marker like &lt;code&gt;Error&lt;/code&gt; or &lt;code&gt;Warning&lt;/code&gt; etc&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat report.log 
blah blah
Error: something went wrong
more blah
whatever
Error: something surely went wrong
some text
some more text
blah blah blah

$ awk -v RS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Error:&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;END{print NR-1}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; report.log
2
$ awk -v RS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Error:&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; report.log
blah blah

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; filter 'Error:' block matching particular string&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; to preserve formatting, use: '/whatever/{print RS $0}'&lt;/span&gt;
$ awk -v RS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Error:&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/whatever/&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; report.log
 something went wrong
more blah
whatever

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; blocks with more than 3 lines&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; splitting string with 3 newlines will yield 4 fields&lt;/span&gt;
$ awk -F&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;\n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; -v RS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Error:&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NF&amp;gt;4{print RS $0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; report.log
Error: something surely went wrong
some text
some more text
blah blah blah
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Regular expression based &lt;code&gt;RS&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;the &lt;code&gt;RT&lt;/code&gt; variable will contain string matched by &lt;code&gt;RS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Note that entire input is treated as single string, so &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; anchors will apply only once - not every line&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ s=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Sample123string54with908numbers&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v RS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;[0-9]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
Sample

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; note the relationship between record and separators&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v RS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;[0-9]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print NR &quot; : &quot; $0 &quot; - &quot; RT}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
1 &lt;span class=&quot;pl-c1&quot;&gt;:&lt;/span&gt; Sample - 123
2 &lt;span class=&quot;pl-c1&quot;&gt;:&lt;/span&gt; string - 54
3 &lt;span class=&quot;pl-c1&quot;&gt;:&lt;/span&gt; with - 908
4 &lt;span class=&quot;pl-c1&quot;&gt;:&lt;/span&gt; numbers - 

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; need to be careful of empty records&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;123string54with908&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v RS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;[0-9]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print NR &quot; : &quot; $0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
1 &lt;span class=&quot;pl-c1&quot;&gt;:&lt;/span&gt; 
2 &lt;span class=&quot;pl-c1&quot;&gt;:&lt;/span&gt; string
3 &lt;span class=&quot;pl-c1&quot;&gt;:&lt;/span&gt; with
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; and newline at end of input&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;123string54with908\n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v RS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;[0-9]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print NR &quot; : &quot; $0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
1 &lt;span class=&quot;pl-c1&quot;&gt;:&lt;/span&gt; 
2 &lt;span class=&quot;pl-c1&quot;&gt;:&lt;/span&gt; string
3 &lt;span class=&quot;pl-c1&quot;&gt;:&lt;/span&gt; with
4 &lt;span class=&quot;pl-c1&quot;&gt;:&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Joining lines based on specific end of line condition&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat msg.txt
Hello there.
It will rain to-
day. Have a safe
and pleasant jou-
rney.

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; join lines ending with - to next line&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; by manipulating RS and ORS&lt;/span&gt;
$ awk -v RS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;-\n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; -v ORS= &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; msg.txt
Hello there.
It will rain today. Have a safe
and pleasant journey.

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; by manipulating ORS alone, sub function covered in later sections&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{ORS = sub(/-$/,&quot;&quot;) ? &quot;&quot; : &quot;\n&quot;} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; msg.txt
Hello there.
It will rain today. Have a safe
and pleasant journey.
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; easier: perl -pe 's/-\n//' msg.txt as newline is still part of input line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;processing null terminated input&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo\0bar\0&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; cat -A
foo^@bar^@$ 
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo\0bar\0&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v RS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;\0&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo
bar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Further Reading&lt;/strong&gt;&lt;/p&gt;
&lt;br/&gt;&lt;h2&gt;Substitute functions&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Use &lt;code&gt;sub&lt;/code&gt; string function for replacing first occurrence&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;gsub&lt;/code&gt; for replacing all occurrences&lt;/li&gt;
&lt;li&gt;By default, &lt;code&gt;$0&lt;/code&gt; which contains input record is modified, can specify any other field or variable as needed&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; replacing first occurrence&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;1-2-3-4-5&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{sub(&quot;-&quot;, &quot;:&quot;)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
1:2-3-4-5

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; replacing all occurrences&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;1-2-3-4-5&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{gsub(&quot;-&quot;, &quot;:&quot;)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
1:2:3:4:5

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; return value for sub/gsub is number of replacements made&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;1-2-3-4-5&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{n=gsub(&quot;-&quot;, &quot;:&quot;); print n} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
4
1:2:3:4:5

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; // format is better suited to specify search REGEXP&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;1-2-3-4-5&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{gsub(/[^-]+/, &quot;abc&quot;)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
abc-abc-abc-abc-abc

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; replacing all occurrences only for third field&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;one;two;three;four&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{gsub(&quot;e&quot;, &quot;E&quot;, $3)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
one two thrEE four
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Use &lt;code&gt;gensub&lt;/code&gt; to return the modified string unlike &lt;code&gt;sub&lt;/code&gt; or &lt;code&gt;gsub&lt;/code&gt; which modifies inplace&lt;/li&gt;
&lt;li&gt;it also supports back-references and ability to modify specific match&lt;/li&gt;
&lt;li&gt;acts upon &lt;code&gt;$0&lt;/code&gt; if target is not specified&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; replace second occurrence&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$0=gensub(&quot;:&quot;, &quot;-&quot;, 2)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo:123-bar:baz
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; use REGEXP as needed&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$0=gensub(/[^:]+/, &quot;XYZ&quot;, 2)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo:XYZ:bar:baz

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; or print the returned string directly&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print gensub(&quot;:&quot;, &quot;-&quot;, 2)}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo:123-bar:baz

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; replace third occurrence&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$0=gensub(/[^:]+/, &quot;XYZ&quot;, 3)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo:123:XYZ:baz

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; replace all occurrences, similar to gsub&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$0=gensub(/[^:]+/, &quot;XYZ&quot;, &quot;g&quot;)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
XYZ:XYZ:XYZ:XYZ

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; target other than $0&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F: -v OFS=: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$1=gensub(/o/, &quot;b&quot;, 2, $1)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
fob:123:bar:baz
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;back-reference examples&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;\&quot;&lt;/code&gt; within double-quotes to represent &lt;code&gt;&quot;&lt;/code&gt; character in replacement string&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;\\1&lt;/code&gt; to represent &lt;code&gt;\1&lt;/code&gt; - the first captured group and so on&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;\0&lt;/code&gt; will back-reference entire matched string&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; replacing last occurrence without knowing how many occurrences are there&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$0=gensub(/(.*):/, &quot;\\1-&quot;, 1)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo:123:bar-baz
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo and bar and baz land good&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$0=gensub(/(.*)and/, &quot;\\1XYZ&quot;, 1)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo and bar and baz lXYZ good

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; use word boundaries as necessary&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo and bar and baz land good&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$0=gensub(/(.*)\&amp;lt;and\&amp;gt;/, &quot;\\1XYZ&quot;, 1)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo and bar XYZ baz land good

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; replacing last but one&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;456:foo:123:bar:789:baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$0=gensub(/(.*):(.*:)/, &quot;\\1-\\2&quot;, 1)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
456:foo:123:bar-789:baz

$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$0=gensub(/[^:]+/, &quot;\&quot;&amp;amp;\&quot;&quot;, &quot;g&quot;)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;foo&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;123&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;bar&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;baz&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;saving quotes in variables - to avoid escaping double quotes or having to use octal code for single quotes&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$0=gensub(/[^:]+/, &quot;\047&amp;amp;\047&quot;, &quot;g&quot;)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;123&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;bar&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v sq=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$0=gensub(/[^:]+/, sq&quot;&amp;amp;&quot;sq, &quot;g&quot;)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;123&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;bar&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$0=gensub(/[^:]+/, &quot;\&quot;&amp;amp;\&quot;&quot;, &quot;g&quot;)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;foo&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;123&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;bar&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;baz&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v dq=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&quot;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$0=gensub(/[^:]+/, dq&quot;&amp;amp;&quot;dq, &quot;g&quot;)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;foo&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;123&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;bar&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;baz&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Further Reading&lt;/strong&gt;&lt;/p&gt;
&lt;br/&gt;&lt;h2&gt;Inplace file editing&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Use this option with caution, preferably after testing that the &lt;code&gt;awk&lt;/code&gt; code is working as intended&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat greeting.txt 
Hi there
Have a nice day

$ awk -i inplace &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{gsub(&quot;e&quot;, &quot;E&quot;)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; greeting.txt 
$ cat greeting.txt 
Hi thErE
HavE a nicE day
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Multiple input files are treated individually and changes are written back to respective files&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat f1
I ate 3 apples
$ cat f2
I bought two bananas and 3 mangoes

$ awk -i inplace &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{gsub(&quot;3&quot;, &quot;three&quot;)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; f1 f2
$ cat f1
I ate three apples
$ cat f2
I bought two bananas and three mangoes
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;to create backups of original file, set &lt;code&gt;INPLACE_SUFFIX&lt;/code&gt; variable&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ awk -i inplace -v INPLACE_SUFFIX=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;.bkp&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{gsub(&quot;three&quot;, &quot;3&quot;)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; f1
$ cat f1
I ate 3 apples
$ cat f1.bkp
I ate three apples
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h2&gt;Using shell variables&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;when &lt;code&gt;awk&lt;/code&gt; code is part of shell program and shell variable needs to be passed as input to &lt;code&gt;awk&lt;/code&gt; code&lt;/li&gt;
&lt;li&gt;for example:
&lt;ul&gt;&lt;li&gt;command line argument passed to shell script, which is in turn passed on to &lt;code&gt;awk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;control structures in shell script calling &lt;code&gt;awk&lt;/code&gt; with different search strings&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;See also &lt;a href=&quot;https://stackoverflow.com/questions/19075671/how-do-i-use-shell-variables-in-an-awk-script&quot;&gt;stackoverflow - How do I use shell variables in an awk script?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; examples tested with bash shell&lt;/span&gt;

$ f=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;apple&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
$ awk -v word=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;$1==word&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt
apple   42
$ f=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;fig&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
$ awk -v word=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;$1==word&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt
fig     90

$ q=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;20&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
$ awk -v threshold=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$q&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==1 || $2&amp;gt;threshold&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt
fruit   qty
apple   42
banana  31
fig     90
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;accessing shell environment variables&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; existing environment variable&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{print ENVIRON[&quot;PWD&quot;]}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
/home/learnbyexample
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{print ENVIRON[&quot;SHELL&quot;]}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
/bin/bash

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; defined along with awk code&lt;/span&gt;
$ word=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;hello world&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{print ENVIRON[&quot;word&quot;]}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
hello world

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; using ENVIRON also prevents awk's interpretation of escape sequences&lt;/span&gt;
$ s=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a\n=c&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
$ foo=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{print ENVIRON[&quot;foo&quot;]}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
a&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;=c
$ awk -v foo=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{print foo}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
a
=c
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ s=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;are&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; for: awk '!/are/' poem.txt&lt;/span&gt;
$ awk -v s=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;$0 !~ s&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt
Sugar is sweet,
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; for: awk '/are/ &amp;amp;&amp;amp; !/so/' poem.txt&lt;/span&gt;
$ awk -v s=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;$0 ~ s &amp;amp;&amp;amp; !/so/&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt
Roses are red,
Violets are blue,

$ r=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;[^-]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;1-2-3-4-5&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v r=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$r&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{gsub(r, &quot;abc&quot;)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
abc-abc-abc-abc-abc

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; escape sequence has to be doubled when string is interpreted as REGEXP&lt;/span&gt;
$ s=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo and bar and baz land good&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$0=gensub(&quot;(.*)\\&amp;lt;and\\&amp;gt;&quot;, &quot;\\1XYZ&quot;, 1)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo and bar XYZ baz land good
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; hence passing as variable should be&lt;/span&gt;
$ r=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;(.*)\\&amp;lt;and\\&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v r=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$r&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$0=gensub(r, &quot;\\1XYZ&quot;, 1)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo and bar XYZ baz land good

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; or use ENVIRON&lt;/span&gt;
$ r=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;(.*)\&amp;lt;and\&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; r=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$r&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$0=gensub(ENVIRON[&quot;r&quot;], &quot;\\1XYZ&quot;, 1)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo and bar XYZ baz land good
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h2&gt;Multiple file input&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Example to show difference between &lt;code&gt;NR&lt;/code&gt; and &lt;code&gt;FNR&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; NR for overall record number&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt greeting.txt 
Roses are red,

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; FNR for individual file's record number&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; same as: head -q -n1 poem.txt greeting.txt&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;FNR==1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt greeting.txt 
Roses are red,
Hi thErE
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Constructs to do some processing before starting each file as well as at the end&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BEGINFILE&lt;/code&gt; - to add code to be executed before start of each input file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ENDFILE&lt;/code&gt; - to add code to be executed after processing each input file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FILENAME&lt;/code&gt; - file name of current input file being processed&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; similar to: tail -n1 poem.txt greeting.txt&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGINFILE{print &quot;file: &quot;FILENAME}&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;       ENDFILE{print $0&quot;\n------&quot;}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt greeting.txt
file: poem.txt
And so are you.
------
file: greeting.txt
HavE a nicE day
------
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;And of course, there can be usual &lt;code&gt;awk&lt;/code&gt; code&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGINFILE{print &quot;file: &quot;FILENAME}&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;       FNR==1;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;       ENDFILE{print &quot;------&quot;}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt greeting.txt
file: poem.txt
Roses are red,
------
file: greeting.txt
Hi thErE
------

$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGINFILE{c++; print &quot;file: &quot;FILENAME}&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;       FNR==2;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;       END{print &quot;\nTotal input files: &quot;c}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt greeting.txt
file: poem.txt
Violets are blue,
file: greeting.txt
HavE a nicE day

Total input files: 2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Further Reading&lt;/strong&gt;&lt;/p&gt;
&lt;br/&gt;&lt;h2&gt;Control Structures&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Syntax is similar to &lt;code&gt;C&lt;/code&gt; language and single statements inside control structures don't require to be grouped within &lt;code&gt;{}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;See &lt;a href=&quot;https://www.gnu.org/software/gawk/manual/html_node/Statements.html&quot;&gt;gawk manual - Control Statements&lt;/a&gt; for details&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Remember that by default there is a loop that goes over all input records and constructs like &lt;code&gt;BEGIN&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt; fall outside that loop&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat nums.txt 
42
-2
10101
-3.14
-75
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{sum += $1} END{print sum}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; nums.txt
10062.9

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; uninitialized variables will have empty string&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{sum += $1} END{print sum}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; so either add '0' or use unary '+' operator to convert to number&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{sum += $1} END{print +sum}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
0
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h4&gt;if-else and loops&lt;/h4&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; same as: sed -n '/are/ s/so/SO/p' poem.txt &lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; remember that sub/gsub returns number of substitutions made&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/are/{if(sub(&quot;so&quot;, &quot;SO&quot;)) print}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt
And SO are you.
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; of course, can also use&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/are/ &amp;amp;&amp;amp; sub(&quot;so&quot;, &quot;SO&quot;)&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt
And SO are you.

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; if-else example&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR&amp;gt;1{if($2&amp;gt;40) $0=&quot;+&quot;$0; else $0=&quot;-&quot;$0} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt
fruit   qty
+apple   42
-banana  31
+fig     90
-guava   6
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat nums.txt 
42
-2
10101
-3.14
-75

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; changing -ve to +ve and vice versa&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; same as: awk '{if($0 ~ /^-/) sub(/^-/,&quot;&quot;); else sub(/^/,&quot;-&quot;)} 1' nums.txt&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$0 ~ /^-/ ? sub(/^-/,&quot;&quot;) : sub(/^/,&quot;-&quot;)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; nums.txt
-42
2
-10101
3.14
75
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; can also use: awk '!sub(/^-/,&quot;&quot;){sub(/^/,&quot;-&quot;)} 1' nums.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{for(i=2; i&amp;lt;11; i+=2) print i}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
2
4
6
8
10

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; looping each field&lt;/span&gt;
$ s=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;scat:cat:no cat:abdicate:cater&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F: -v OFS=: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{for(i=1;i&amp;lt;=NF;i++) if($i==&quot;cat&quot;) $i=&quot;CAT&quot;} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
scat:CAT:no cat:abdicate:cater
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; can also use sub function&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F: -v OFS=: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{for(i=1;i&amp;lt;=NF;i++) sub(/^cat$/,&quot;CAT&quot;,$i)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
scat:CAT:no cat:abdicate:cater
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;while loop&lt;/li&gt;
&lt;li&gt;do-while is also available&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{i=2; while(i&amp;lt;11){print i; i+=2}}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
2
4
6
8
10

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; recursive substitution&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; here again return value of sub/gsub is useful&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;titillate&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{while( gsub(/til/, &quot;&quot;) ) print}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
tilate
ate
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h4&gt;next and nextfile&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;next&lt;/code&gt; will skip rest of statements and start processing next line of current file being processed
&lt;ul&gt;&lt;li&gt;there is a loop by default which goes over all input records, &lt;code&gt;next&lt;/code&gt; is applicable for that&lt;/li&gt;
&lt;li&gt;it is similar to &lt;code&gt;continue&lt;/code&gt; statement within loops&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;it is often used in &lt;a href=&quot;https://github.com/learnbyexample/Command-line-text-processing/blob/master/gnu_awk.md#two-file-processing&quot;&gt;Two file processing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; here 'next' is used to skip processing header line&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==1{print; next} /a.*a/{$0=&quot;*&quot;$0} /[eiou]/{$0=&quot;-&quot;$0} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt
fruit   qty
-apple   42
&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;banana  31
-fig     90
-&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;guava   6
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;nextfile&lt;/code&gt; is useful to skip remaining lines from current file being processed and move on to next file&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; same as: head -q -n1 poem.txt greeting.txt fruits.txt&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;FNR&amp;gt;1{nextfile} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt greeting.txt fruits.txt
Roses are red,
Hi thErE
fruit   qty

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; specific field&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;FNR&amp;gt;2{nextfile} {print $1}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt greeting.txt fruits.txt
Roses
Violets
Hi
HavE
fruit
apple

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; similar to 'grep -il'&lt;/span&gt;
$ awk -v IGNORECASE=1 &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/red/{print FILENAME; nextfile}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;
colors_1.txt
colors_2.txt
poem.txt
$ awk -v IGNORECASE=1 &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;$1 ~ /red/{print FILENAME; nextfile}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;
colors_1.txt
colors_2.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h2&gt;Multiline processing&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Processing consecutive lines&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat poem.txt 
Roses are red,
Violets are blue,
Sugar is sweet,
And so are you.

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; match two consecutive lines&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;p~/are/ &amp;amp;&amp;amp; /is/{print p ORS $0} {p=$0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt 
Violets are blue,
Sugar is sweet,
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; if only the second line is needed&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;p~/are/ &amp;amp;&amp;amp; /is/; {p=$0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt 
Sugar is sweet,

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; match three consecutive lines&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;p2~/red/ &amp;amp;&amp;amp; p1~/blue/ &amp;amp;&amp;amp; /is/{print p2} {p2=p1; p1=$0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt
Roses are red,

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; common mistake&lt;/span&gt;
$ sed -n &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/are/{N;/is/p}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt 
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; would need something like this and not practical to extend for other cases&lt;/span&gt;
$ sed &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;$!N; /are.*\n.*is/p; D&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt 
Violets are blue,
Sugar is sweet,
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Consider this sample input file&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat range.txt 
foo
BEGIN
1234
6789
END
bar
BEGIN
a
b
c
END
baz
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;extracting lines around matching line&lt;/li&gt;
&lt;li&gt;See also &lt;a href=&quot;https://stackoverflow.com/questions/17908555/printing-with-sed-or-awk-a-line-following-a-matching-pattern&quot;&gt;stackoverflow - lines around matching regexp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;how &lt;code&gt;n &amp;amp;&amp;amp; n--&lt;/code&gt; works:
&lt;ul&gt;&lt;li&gt;need to note that right hand side of &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; is processed only if left hand side is &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;so for example, if initially &lt;code&gt;n=2&lt;/code&gt;, then we get
&lt;ul&gt;&lt;li&gt;&lt;code&gt;2 &amp;amp;&amp;amp; 2; n=1&lt;/code&gt; - evaluates to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;amp;&amp;amp; 1; n=0&lt;/code&gt; - evaluates to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;amp;&amp;amp;&lt;/code&gt; - evaluates to &lt;code&gt;false&lt;/code&gt; ... no decrementing &lt;code&gt;n&lt;/code&gt; and hence will be &lt;code&gt;false&lt;/code&gt; until &lt;code&gt;n&lt;/code&gt; is re-assigned non-zero value&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; similar to: grep --no-group-separator -A1 'BEGIN' range.txt &lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/BEGIN/{n=2} n &amp;amp;&amp;amp; n--&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; range.txt
BEGIN
1234
BEGIN
a

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; only print the line after matching line&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; can also use: awk '/BEGIN/{n=1; next} n &amp;amp;&amp;amp; n--' range.txt&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;n &amp;amp;&amp;amp; n--; /BEGIN/{n=1}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; range.txt 
1234
a
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; generic case: print nth line after match&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;n &amp;amp;&amp;amp; !--n; /BEGIN/{n=3}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; range.txt
END
c

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; print second line prior to matched line&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/END/{print p2} {p2=p1; p1=$0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; range.txt
1234
b
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; save all lines in an array for generic case&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/END/{print a[NR-3]} {a[NR]=$0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; range.txt
BEGIN
a
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; or use the reversing trick&lt;/span&gt;
$ tac range.txt &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;n &amp;amp;&amp;amp; !--n; /END/{n=3}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; tac
BEGIN
a
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Checking if multiple strings are present at least once in entire input file&lt;/li&gt;
&lt;li&gt;If there are lots of strings to check, use arrays&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; can also use BEGINFILE instead of FNR==1&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;FNR==1{s1=s2=0} /is/{s1=1} /are/{s2=1} s1&amp;amp;&amp;amp;s2{print FILENAME; nextfile}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;
poem.txt
sample.txt

$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;FNR==1{s1=s2=0} /foo/{s1=1} /report/{s2=1} s1&amp;amp;&amp;amp;s2{print FILENAME; nextfile}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;
paths.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h2&gt;Two file processing&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;We'll use awk's associative arrays (key-value pairs) here
&lt;/li&gt;
&lt;li&gt;Unlike &lt;a href=&quot;https://github.com/learnbyexample/Command-line-text-processing/blob/master/sorting_stuff.md#comm&quot;&gt;comm&lt;/a&gt; the input files need not be sorted and comparison can be done based on certain field(s) as well&lt;/li&gt;
&lt;/ul&gt;&lt;br/&gt;&lt;h4&gt;Comparing whole lines&lt;/h4&gt;
&lt;p&gt;Consider the following test files&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat colors_1.txt
Blue
Brown
Purple
Red
Teal
Yellow

$ cat colors_2.txt
Black
Blue
Green
Red
White
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;common lines and lines unique to one of the files&lt;/li&gt;
&lt;li&gt;For two files as input, &lt;code&gt;NR==FNR&lt;/code&gt; will be true only when first file is being processed&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;next&lt;/code&gt; will skip rest of code when first file is processed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a[$0]&lt;/code&gt; will create unique keys (here entire line content is used as key) in array &lt;code&gt;a&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;just referencing a key will create it if it doesn't already exist, with value as empty string (will also act as zero in numeric context)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$0 in a&lt;/code&gt; will be true if key already exists in array &lt;code&gt;a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; common lines&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; same as: grep -Fxf colors_1.txt colors_2.txt&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==FNR{a[$0]; next} $0 in a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; colors_1.txt colors_2.txt
Blue
Red

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; lines from colors_2.txt not present in colors_1.txt&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; same as: grep -vFxf colors_1.txt colors_2.txt&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==FNR{a[$0]; next} !($0 in a)&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; colors_1.txt colors_2.txt
Black
Green
White

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; reversing the order of input files gives&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; lines from colors_1.txt not present in colors_2.txt&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==FNR{a[$0]; next} !($0 in a)&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; colors_2.txt colors_1.txt
Brown
Purple
Teal
Yellow
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h4&gt;Comparing specific fields&lt;/h4&gt;
&lt;p&gt;Consider the sample input file&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat marks.txt
Dept    Name    Marks
ECE     Raj     53
ECE     Joel    72
EEE     Moi     68
CSE     Surya   81
EEE     Tia     59
ECE     Om      92
CSE     Amy     67
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;single field&lt;/li&gt;
&lt;li&gt;For ex: only first field comparison by using &lt;code&gt;$1&lt;/code&gt; instead of &lt;code&gt;$0&lt;/code&gt; as key&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat list1
ECE
CSE

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; extract only lines matching first field specified in list1&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==FNR{a[$1]; next} $1 in a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; list1 marks.txt
ECE     Raj     53
ECE     Joel    72
CSE     Surya   81
ECE     Om      92
CSE     Amy     67

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; if header is needed as well&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==FNR{a[$1]; next} FNR==1 || $1 in a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; list1 marks.txt
Dept    Name    Marks
ECE     Raj     53
ECE     Joel    72
CSE     Surya   81
ECE     Om      92
CSE     Amy     67
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;multiple fields&lt;/li&gt;
&lt;li&gt;create a string by adding some character between the fields to act as key
&lt;ul&gt;&lt;li&gt;for ex: to avoid matching two field values &lt;code&gt;abc&lt;/code&gt; and &lt;code&gt;123&lt;/code&gt; to match with two other field values &lt;code&gt;ab&lt;/code&gt; and &lt;code&gt;c123&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;by adding character, say &lt;code&gt;_&lt;/code&gt;, the key would be &lt;code&gt;abc_123&lt;/code&gt; for first case and &lt;code&gt;ab_c123&lt;/code&gt; for second case&lt;/li&gt;
&lt;li&gt;this can still lead to false match if input data has &lt;code&gt;_&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;there is also a built-in way to do this using &lt;a href=&quot;https://www.gnu.org/software/gawk/manual/html_node/Multidimensional.html#Multidimensional&quot;&gt;gawk manual - Multidimensional Arrays&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat list2
EEE Moi
CSE Amy
ECE Raj

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; extract only lines matching both fields specified in list2&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==FNR{a[$1&quot;_&quot;$2]; next} $1&quot;_&quot;$2 in a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; list2 marks.txt
ECE     Raj     53
EEE     Moi     68
CSE     Amy     67

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; uses SUBSEP as separator, whose default value is non-printing character \034&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==FNR{a[$1,$2]; next} ($1,$2) in a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; list2 marks.txt
ECE     Raj     53
EEE     Moi     68
CSE     Amy     67
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;field and value comparison&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat list3
ECE 70
EEE 65
CSE 80

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; extract line matching Dept and minimum marks specified in list3&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==FNR{d[$1]; m[$1]=$2; next} $1 in d &amp;amp;&amp;amp; $3 &amp;gt;= m[$1]&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; list3 marks.txt
ECE     Joel    72
EEE     Moi     68
CSE     Surya   81
ECE     Om      92
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h4&gt;getline&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;If entire line (instead of fields) from one file is needed to change the other file, using &lt;code&gt;getline&lt;/code&gt; would be faster&lt;/li&gt;
&lt;li&gt;But use it with caution
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; replace mth line in poem.txt with nth line from nums.txt&lt;/span&gt;
$ awk -v m=3 -v n=2 &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{while(n-- &amp;gt; 0) getline s &amp;lt; &quot;nums.txt&quot;}&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;                     FNR==m{$0=s} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; poem.txt
Roses are red,
Violets are blue,
-2
And so are you.

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; without getline, but slower due to NR==FNR check for every line processed&lt;/span&gt;
$ awk -v m=3 -v n=2 &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==FNR{if(FNR==n){s=$0; nextfile} next}&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;                     FNR==m{$0=s} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; nums.txt poem.txt
Roses are red,
Violets are blue,
-2
And so are you.
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Another use case is if two files are to be processed exactly for same line numbers&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; print line from fruits.txt if corresponding line from nums.txt is +ve number&lt;/span&gt;
$ awk -v file=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;nums.txt&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{getline num &amp;lt; file; if(num&amp;gt;0) print}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt
fruit   qty
banana  31

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; without getline, but has to save entire file in array&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==FNR{n[FNR]=$0; next} n[FNR]&amp;gt;0&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; nums.txt fruits.txt
fruit   qty
banana  31
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Further Reading&lt;/strong&gt;&lt;/p&gt;
&lt;br/&gt;&lt;h2&gt;Creating new fields&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Number of fields in input record can be changed by simply manipulating &lt;code&gt;NF&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; reducing fields&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo,bar,123,baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F, -v OFS=, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{NF=2} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo,bar

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; creating new empty field(s)&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo,bar,123,baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F, -v OFS=, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{NF=5} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo,bar,123,baz,

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; assigning to field greater than NF will create empty fields as needed&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo,bar,123,baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F, -v OFS=, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$7=42} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo,bar,123,baz,,,42

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; adding a new 'Grade' field&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{OFS=&quot;\t&quot;; g[9]=&quot;S&quot;; g[8]=&quot;A&quot;; g[7]=&quot;B&quot;; g[6]=&quot;C&quot;; g[5]=&quot;D&quot;}&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;      {NF++; if(NR==1)$NF=&quot;Grade&quot;; else $NF=g[int($(NF-1)/10)]} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; marks.txt
Dept    Name    Marks   Grade
ECE     Raj     53      D
ECE     Joel    72      B
EEE     Moi     68      C
CSE     Surya   81      A
EEE     Tia     59      D
ECE     Om      92      S
CSE     Amy     67      C
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;two file example&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat list4
Raj class_rep
Amy sports_rep
Tia placement_rep

$ awk -v OFS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;\t&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==FNR{r[$1]=$2; next}&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;         {NF++; if(FNR==1)$NF=&quot;Role&quot;; else $NF=r[$2]} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; list4 marks.txt
Dept    Name    Marks   Role
ECE     Raj     53      class_rep
ECE     Joel    72
EEE     Moi     68
CSE     Surya   81
EEE     Tia     59      placement_rep
ECE     Om      92
CSE     Amy     67      sports_rep
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h2&gt;Dealing with duplicates&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;default value of uninitialized variable is &lt;code&gt;0&lt;/code&gt; in numeric context and empty string in text context
&lt;ul&gt;&lt;li&gt;and evaluates to &lt;code&gt;false&lt;/code&gt; when used conditionally&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Illustration to show default numeric value and array in action&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;mad\n42\n42\ndam\n42\n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
mad
42
42
dam
42

$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;mad\n42\n42\ndam\n42\n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $0 &quot;\t&quot; int(a[$0]); a[$0]++}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
mad     0
42      0
42      1
dam     0
42      2
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; only those entries with second column value zero will be retained&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;mad\n42\n42\ndam\n42\n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;!a[$0]++&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
mad
42
dam
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;first, examples that retain only first copy of duplicates&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat duplicates.txt
abc  7   4
food toy &lt;span class=&quot;pl-k&quot;&gt;****&lt;/span&gt;
abc  7   4
&lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt; toy 123
good toy &lt;span class=&quot;pl-k&quot;&gt;****&lt;/span&gt;

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; whole line&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;!seen[$0]++&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; duplicates.txt
abc  7   4
food toy &lt;span class=&quot;pl-k&quot;&gt;****&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt; toy 123
good toy &lt;span class=&quot;pl-k&quot;&gt;****&lt;/span&gt;

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; particular column&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;!seen[$2]++&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; duplicates.txt
abc  7   4
food toy &lt;span class=&quot;pl-k&quot;&gt;****&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;For multiple fields, separate them using &lt;code&gt;,&lt;/code&gt; or form a string with some character in between
&lt;ul&gt;&lt;li&gt;choose a character unlikely to appear in input data, else there can be false matches&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;!seen[$2&quot;_&quot;$3]++&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; duplicates.txt
abc  7   4
food toy &lt;span class=&quot;pl-k&quot;&gt;****&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt; toy 123

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; can also use simulated multidimensional array&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; SUBSEP, whose default is \034 non-printing character, is used as separator&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;!seen[$2,$3]++&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; duplicates.txt
abc  7   4
food toy &lt;span class=&quot;pl-k&quot;&gt;****&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt; toy 123
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;retaining specific numbered copy&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; second occurrence of duplicate&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;++seen[$2]==2&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; duplicates.txt
abc  7   4
&lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt; toy 123

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; third occurrence of duplicate&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;++seen[$2]==3&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; duplicates.txt
good toy &lt;span class=&quot;pl-k&quot;&gt;****&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;retaining only last copy of duplicate&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; reverse the input line-wise, retain first copy and then reverse again&lt;/span&gt;
$ tac duplicates.txt &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;!seen[$2]++&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; tac
abc  7   4
good toy &lt;span class=&quot;pl-k&quot;&gt;****&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; all duplicates based on 1st column&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==FNR{a[$1]++; next} a[$1]&amp;gt;1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; duplicates.txt duplicates.txt
abc  7   4
abc  7   4
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; all duplicates based on 3rd column&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==FNR{a[$3]++; next} a[$3]&amp;gt;1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; duplicates.txt duplicates.txt
abc  7   4
food toy &lt;span class=&quot;pl-k&quot;&gt;****&lt;/span&gt;
abc  7   4
good toy &lt;span class=&quot;pl-k&quot;&gt;****&lt;/span&gt;

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; more than 2 duplicates based on 2nd column&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==FNR{a[$2]++; next} a[$2]&amp;gt;2&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; duplicates.txt duplicates.txt
food toy &lt;span class=&quot;pl-k&quot;&gt;****&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt; toy 123
good toy &lt;span class=&quot;pl-k&quot;&gt;****&lt;/span&gt;

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; only unique lines based on 3rd column&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==FNR{a[$3]++; next} a[$3]==1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; duplicates.txt duplicates.txt
&lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt; toy 123
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h2&gt;Lines between two REGEXPs&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;This section deals with filtering lines bound by two &lt;em&gt;REGEXP&lt;/em&gt;s (referred to as blocks)&lt;/li&gt;
&lt;li&gt;For simplicity the two &lt;em&gt;REGEXP&lt;/em&gt;s usually used in below examples are the strings &lt;strong&gt;BEGIN&lt;/strong&gt; and &lt;strong&gt;END&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;br/&gt;&lt;h4&gt;All unbroken blocks&lt;/h4&gt;
&lt;p&gt;Consider the below sample input file, which doesn't have any unbroken blocks (i.e &lt;strong&gt;BEGIN&lt;/strong&gt; and &lt;strong&gt;END&lt;/strong&gt; are always present in pairs)&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat range.txt 
foo
BEGIN
1234
6789
END
bar
BEGIN
a
b
c
END
baz
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Extracting lines between starting and ending &lt;em&gt;REGEXP&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; include both starting/ending REGEXP&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; can also use: awk '/BEGIN/,/END/' range.txt&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; which is similar to sed -n '/BEGIN/,/END/p'&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; but not suitable to extend for other cases&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/BEGIN/{f=1} f; /END/{f=0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; range.txt
BEGIN
1234
6789
END
BEGIN
a
b
c
END

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; exclude both starting/ending REGEXP&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; can also use: awk '/BEGIN/{f=1; next} /END/{f=0} f' range.txt&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/END/{f=0} f; /BEGIN/{f=1}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; range.txt
1234
6789
a
b
c
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Include only start or end &lt;em&gt;REGEXP&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; include only starting REGEXP&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/BEGIN/{f=1} /END/{f=0} f&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; range.txt
BEGIN
1234
6789
BEGIN
a
b
c

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; include only ending REGEXP&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;f; /END/{f=0} /BEGIN/{f=1}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; range.txt
1234
6789
END
a
b
c
END
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Extracting lines other than lines between the two &lt;em&gt;REGEXP&lt;/em&gt;s&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/BEGIN/{f=1} !f; /END/{f=0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; range.txt
foo
bar
baz

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; the other three cases would be&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/END/{f=0} !f; /BEGIN/{f=1}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; range.txt
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;!f; /BEGIN/{f=1} /END/{f=0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; range.txt 
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/BEGIN/{f=1} /END/{f=0} !f&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; range.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h4&gt;Specific blocks&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Getting first block&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/BEGIN/{f=1} f; /END/{exit}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; range.txt 
BEGIN
1234
6789
END

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; use other tricks discussed in previous section as needed&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/END/{exit} f; /BEGIN/{f=1}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; range.txt
1234
6789
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Getting last block&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; reverse input linewise, change the order of REGEXPs, finally reverse again&lt;/span&gt;
$ tac range.txt &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/END/{f=1} f; /BEGIN/{exit}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; tac
BEGIN
a
b
c
END

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; or, save the blocks in a buffer and print the last one alone&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; ORS contains output record separator, which is newline by default&lt;/span&gt;
$ seq 30 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/4/{f=1; b=$0; next} f{b=b ORS $0} /6/{f=0} END{print b}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
24
25
26
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Getting blocks based on a counter&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; all blocks&lt;/span&gt;
$ seq 30 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; sed -n &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/4/,/6/p&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
4
5
6
14
15
16
24
25
26

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; get only 2nd block&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; can also use: seq 30 | awk -v b=2 '/4/{c++} c==b{print; if(/6/) exit}'&lt;/span&gt;
$ seq 30 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v b=2 &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/4/{c++} c==b; /6/ &amp;amp;&amp;amp; c==b{exit}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
14
15
16

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; to get all blocks greater than 'b' blocks&lt;/span&gt;
$ seq 30 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v b=1 &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/4/{f=1; c++} f &amp;amp;&amp;amp; c&amp;gt;b; /6/{f=0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
14
15
16
24
25
26
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;excluding a particular block&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; excludes 2nd block&lt;/span&gt;
$ seq 30 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v b=2 &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/4/{f=1; c++} f &amp;amp;&amp;amp; c!=b; /6/{f=0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
4
5
6
24
25
26
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h4&gt;Broken blocks&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;If there are blocks with ending &lt;em&gt;REGEXP&lt;/em&gt; but without corresponding start, &lt;code&gt;awk '/BEGIN/{f=1} f; /END/{f=0}'&lt;/code&gt; will suffice&lt;/li&gt;
&lt;li&gt;Consider the modified input file where starting &lt;em&gt;REGEXP&lt;/em&gt; doesn't have corresponding ending&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat broken_range.txt
foo
BEGIN
1234
6789
END
bar
BEGIN
a
b
c
baz

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; the file reversing trick comes in handy here as well&lt;/span&gt;
$ tac broken_range.txt &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/END/{f=1} f; /BEGIN/{f=0}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; tac
BEGIN
1234
6789
END
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;But if both kinds of broken blocks are present, accumulate the records and print accordingly&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat multiple_broken.txt 
qqqqqqq
BEGIN
foo
BEGIN
1234
6789
END
bar
END
0-42-1
BEGIN
a
BEGIN
b
END
&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;as&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;s&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;sd&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt;

$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/BEGIN/{f=1; buf=$0; next}&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;       f{buf=buf ORS $0}&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;       /END/{f=0; if(buf) print buf; buf=&quot;&quot;}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; multiple_broken.txt
BEGIN
1234
6789
END
BEGIN
b
END
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Further Reading&lt;/strong&gt;&lt;/p&gt;
&lt;br/&gt;&lt;h2&gt;Arrays&lt;/h2&gt;
&lt;p&gt;We've already seen examples using arrays, some more examples discussed in this section&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;array looping&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; average marks for each department&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR&amp;gt;1{d[$1]+=$3; c[$1]++} END{for(i in d)print i, d[i]/c[i]}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; marks.txt
ECE 72.3333
EEE 63.5
CSE 74
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; by default, keys are traversed in random order&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{a[&quot;z&quot;]=1; a[&quot;x&quot;]=12; a[&quot;b&quot;]=42; for(i in a)print i, a[i]}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
x 12
z 1
b 42

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; index sorted ascending order as strings&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{PROCINFO[&quot;sorted_in&quot;] = &quot;@ind_str_asc&quot;;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;       a[&quot;z&quot;]=1; a[&quot;x&quot;]=12; a[&quot;b&quot;]=42; for(i in a)print i, a[i]}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
b 42
x 12
z 1

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; value sorted ascending order as numbers&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{PROCINFO[&quot;sorted_in&quot;] = &quot;@val_num_asc&quot;;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;       a[&quot;z&quot;]=1; a[&quot;x&quot;]=12; a[&quot;b&quot;]=42; for(i in a)print i, a[i]}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
z 1
x 12
b 42
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;deleting array elements&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat list5
CSE     Surya   75
EEE     Jai     69
ECE     Kal     83

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; update entry if a match is found&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; else append the new entries&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{ky=$1&quot;_&quot;$2} NR==FNR{upd[ky]=$0; next}&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;        ky in upd{$0=upd[ky]; delete upd[ky]} 1;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;        END{for(i in upd)print upd[i]}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; list5 marks.txt
Dept    Name    Marks
ECE     Raj     53
ECE     Joel    72
EEE     Moi     68
CSE     Surya   75
EEE     Tia     59
ECE     Om      92
CSE     Amy     67
ECE     Kal     83
EEE     Jai     69
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR&amp;gt;1{d[$1][$2]=$3} END{for(i in d[&quot;ECE&quot;])print i}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; marks.txt
Joel
Raj
Om

$ awk -v f=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;CSE&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR&amp;gt;1{d[$1][$2]=$3} END{for(i in d[f])print i, d[f][i]}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; marks.txt
Surya 81
Amy 67
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Further Reading&lt;/strong&gt;&lt;/p&gt;
&lt;br/&gt;&lt;h2&gt;awk scripts&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;For larger programs, save the code in a file and use &lt;code&gt;-f&lt;/code&gt; command line option&lt;/li&gt;
&lt;li&gt;&lt;code&gt;;&lt;/code&gt; is not needed to terminate a statement&lt;/li&gt;
&lt;li&gt;See also &lt;a href=&quot;https://www.gnu.org/software/gawk/manual/html_node/Options.html#Options&quot;&gt;gawk manual - Command-Line Options&lt;/a&gt; for other related options&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat buf.awk
/BEGIN/{
    f=1
    buf=&lt;span class=&quot;pl-smi&quot;&gt;$0&lt;/span&gt;
    next
}

f{
    buf=buf ORS &lt;span class=&quot;pl-smi&quot;&gt;$0&lt;/span&gt;
}

/END/{
    f=0
    if(buf)
        print buf
    buf=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}

$ awk -f buf.awk multiple_broken.txt 
BEGIN
1234
6789
END
BEGIN
b
END
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Another advantage is that single quotes can be freely used&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{$0=gensub(/[^:]+/, &quot;\047&amp;amp;\047&quot;, &quot;g&quot;)} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;123&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;bar&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

$ cat quotes.awk
{
    &lt;span class=&quot;pl-smi&quot;&gt;$0&lt;/span&gt; = gensub(/[^:]+/, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'&amp;amp;'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;g&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
}

1

$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo:123:bar:baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -f quotes.awk
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;123&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;bar&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;baz&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;If the code has been first tried out on command line, add &lt;code&gt;-o&lt;/code&gt; option to get a pretty printed version&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ awk -o -v OFS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;\t&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==FNR{r[$1]=$2; next}&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;         {NF++; if(FNR==1)$NF=&quot;Role&quot;; else $NF=r[$2]} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; list4 marks.txt
Dept    Name    Marks   Role
ECE     Raj     53      class_rep
ECE     Joel    72
EEE     Moi     68
CSE     Surya   81
EEE     Tia     59      placement_rep
ECE     Om      92
CSE     Amy     67      sports_rep
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;File name can be passed along &lt;code&gt;-o&lt;/code&gt; option, otherwise by default &lt;code&gt;awkprof.out&lt;/code&gt; will be used&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat awkprof.out
        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; gawk profile, created Tue Oct 24 15:10:02 2017&lt;/span&gt;

        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Rule(s)&lt;/span&gt;

        NR == FNR {
                r[&lt;span class=&quot;pl-smi&quot;&gt;$1&lt;/span&gt;] = &lt;span class=&quot;pl-smi&quot;&gt;$2&lt;/span&gt;
                next
        }

        {
                NF++
                &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (FNR == 1) {
                        &lt;span class=&quot;pl-smi&quot;&gt;$NF&lt;/span&gt; = &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Role&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
                        &lt;span class=&quot;pl-smi&quot;&gt;$NF&lt;/span&gt; = r[&lt;span class=&quot;pl-smi&quot;&gt;$2&lt;/span&gt;]
                }
        }

        1 {
                print &lt;span class=&quot;pl-smi&quot;&gt;$0&lt;/span&gt;
        }

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; note that other command line options have to be provided as usual&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; for ex: awk -v OFS='\t' -f awkprof.out list4 marks.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h2&gt;Miscellaneous&lt;/h2&gt;
&lt;br/&gt;&lt;h4&gt;FPAT and FIELDWIDTHS&lt;/h4&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ s=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Sample123string54with908numbers&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; define fields to be one or more consecutive digits&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v FPAT=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;[0-9]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $1, $2, $3}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
123 54 908
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; define fields to be one or more consecutive alphabets&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v FPAT=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;[a-zA-Z]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $1, $2, $3, $4}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
Sample string with numbers
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;For simpler &lt;strong&gt;csv&lt;/strong&gt; input having quoted strings if fields themselves have &lt;code&gt;,&lt;/code&gt; in them, using &lt;code&gt;FPAT&lt;/code&gt; is reasonable approach&lt;/li&gt;
&lt;li&gt;Use a proper parser if input can have other cases like newlines in fields
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ s=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo,&quot;bar,123&quot;,baz,abc&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $2}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;bar&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;$ echo &lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt; | awk -v FPAT='&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;[^&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;]*&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt;[^,]&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;{print &lt;span class=&quot;pl-smi&quot;&gt;$2&lt;/span&gt;}&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;&quot;bar,123&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;if input has well defined fields based on number of characters, &lt;code&gt;FIELDWIDTHS&lt;/code&gt; can be used to specify width of each field&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ awk -v FIELDWIDTHS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;8 3&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; -v OFS= &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/fig/{$2=35} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt
fruit   qty
apple   42
banana  31
fig     35
guava   6

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; without FIELDWIDTHS&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;/fig/{$2=35} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt
fruit   qty
apple   42
banana  31
fig 35
guava   6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Further Reading&lt;/strong&gt;&lt;/p&gt;
&lt;br/&gt;&lt;h4&gt;String functions&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;length&lt;/code&gt; function - returns length of string, by default acts on &lt;code&gt;$0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ seq 8 13 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;length()==1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
8
9

$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==1 || length($1)&amp;gt;4&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt
fruit   qty
apple   42
banana  31
guava   6

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; character count and not byte count is calculated, similar to 'wc -m'&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;hiüëç&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print length()}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
3

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; use -b option if number of bytes are needed&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;hiüëç&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -b &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print length()}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
6
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; 1st argument is string to be split&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; 2nd argument is array to save results, indexed from 1&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; 3rd argument is separator, default is FS&lt;/span&gt;
$ s=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo,1996-10-25,hello,good&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{split($2,d,&quot;-&quot;); print &quot;Month is: &quot; d[2]}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
Month is: 10

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; using regular expression to define separator&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; return value is number of fields after splitting&lt;/span&gt;
$ s=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Sample123string54with908numbers&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{n=split($0,s,/[0-9]+/); for(i=1;i&amp;lt;=n;i++)print s[i]}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
Sample
string
with
numbers
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; use 4th argument if separators are needed as well&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{n=split($0,s,/[0-9]+/,seps); for(i=1;i&amp;lt;n;i++)print seps[i]}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
123
54
908

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; single row to multiple rows based on splitting last field&lt;/span&gt;
$ s=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo,baz,12:42:3&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{n=split($NF,a,&quot;:&quot;); NF--; for(i=1;i&amp;lt;=n;i++) print $0,a[i]}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo baz 12
foo baz 42
foo baz 3
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;substr&lt;/code&gt; function allows to extract specified number of characters from given string
&lt;ul&gt;&lt;li&gt;indexing starts with &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;See &lt;a href=&quot;https://www.gnu.org/software/gawk/manual/gawk.html#index-substr_0028_0029-function&quot;&gt;gawk manual - substr function&lt;/a&gt; for corner cases and details&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; 1st argument is string to be worked on&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; 2nd argument is starting position&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; 3rd argument is number of characters to be extracted&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;abcdefghij&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print substr($0,1,5)}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
abcde
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;abcdefghij&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print substr($0,4,3)}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
def
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; if 3rd argument is not given, string is extracted until end&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;abcdefghij&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print substr($0,6)}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
fghij

$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;abcdefghij&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v OFS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;:&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print substr($0,2,3), substr($0,6,3)}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
bcd:fgh

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; if only few characters are needed from input line, can use empty FS&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;abcdefghij&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v FS= &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $3}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
c
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;abcdefghij&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v FS= &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $3, $5}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
c e
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h4&gt;Executing external commands&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;External commands can be issued using &lt;code&gt;system&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;Output would be as usual on &lt;code&gt;stdout&lt;/code&gt; unless redirected while calling the command&lt;/li&gt;
&lt;li&gt;Return value of &lt;code&gt;system&lt;/code&gt; depends on &lt;code&gt;exit&lt;/code&gt; status of executed command, see &lt;a href=&quot;https://www.gnu.org/software/gawk/manual/html_node/I_002fO-Functions.html&quot;&gt;gawk manual - Input/Output Functions&lt;/a&gt; for details&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{system(&quot;echo Hello World&quot;)}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
Hello World

$ wc poem.txt
 4 13 65 poem.txt
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{system(&quot;wc poem.txt&quot;)}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
 4 13 65 poem.txt

$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{system(&quot;seq 10 | paste -sd, &amp;gt; out.txt&quot;)}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
$ cat out.txt
1,2,3,4,5,6,7,8,9,10

$ ls xyz.txt
ls: cannot access &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;xyz.txt&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: No such file or directory
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;$?&lt;/span&gt;
2
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{s=system(&quot;ls xyz.txt&quot;); print &quot;Status: &quot; s}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
ls: cannot access &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;xyz.txt&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: No such file or directory
Status: 2

$ cat f2
I bought two bananas and three mangoes
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;f1,f2,odd.txt&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -F, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{system(&quot;cat &quot; $2)}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
I bought two bananas and three mangoes
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h4&gt;printf formatting&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Similar to &lt;code&gt;printf&lt;/code&gt; function in &lt;code&gt;C&lt;/code&gt; and shell built-in command&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;sprintf&lt;/code&gt; function to save result in variable instead of printing&lt;/li&gt;
&lt;li&gt;See also &lt;a href=&quot;https://www.gnu.org/software/gawk/manual/html_node/Printf.html&quot;&gt;gawk manual - printf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{sum += $1} END{print sum}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; nums.txt
10062.9

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; note that ORS is not appended and has to be added manually&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{sum += $1} END{printf &quot;%.2f\n&quot;, sum}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; nums.txt
10062.86

$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{sum += $1} END{printf &quot;%10.2f\n&quot;, sum}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; nums.txt
  10062.86

$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{sum += $1} END{printf &quot;%010.2f\n&quot;, sum}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; nums.txt
0010062.86

$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{sum += $1} END{printf &quot;%d\n&quot;, sum}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; nums.txt
10062

$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{sum += $1} END{printf &quot;%+d\n&quot;, sum}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; nums.txt
+10062

$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{sum += $1} END{printf &quot;%e\n&quot;, sum}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; nums.txt
1.006286e+04
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;to refer argument by positional number (starts with 1), use &lt;code&gt;&amp;lt;num&amp;gt;$&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; can also use: awk 'BEGIN{printf &quot;hex=%x\noct=%o\ndec=%d\n&quot;, 15, 15, 15}'&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{printf &quot;hex=%1$x\noct=%1$o\ndec=%1$d\n&quot;, 15}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
hex=f
oct=17
dec=15

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; adding prefix to hex/oct numbers&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{printf &quot;hex=%1$#x\noct=%1$#o\ndec=%1$d\n&quot;, 15}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
hex=0xf
oct=017
dec=15
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; prefix remaining width with spaces&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{printf &quot;%6s:%5s\n&quot;, &quot;foo&quot;, &quot;bar&quot;}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
   foo:  bar

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; suffix remaining width with spaces&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{printf &quot;%-6s:%-5s\n&quot;, &quot;foo&quot;, &quot;bar&quot;}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
foo   :bar  

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; truncate&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{printf &quot;%.2s\n&quot;, &quot;foobar&quot;}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
fo
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;avoid using &lt;code&gt;printf&lt;/code&gt; without format specifier&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGIN{s=&quot;solve: 5 % x = 1&quot;; printf s}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
awk: cmd. line:1: fatal: not enough arguments to satisfy format string
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;solve: 5 % x = 1&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-s&quot;&gt;               ^ ran out for this one&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-s&quot;&gt;$ awk &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;BEGIN{s=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;solve: 5 % x = 1&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;%s\n&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, s}&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-s&quot;&gt;solve: 5 % x = 1&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h4&gt;Redirecting print output&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;redirecting to file instead of stdout using &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;similar to behavior in shell, if file already exists it is overwritten
&lt;ul&gt;&lt;li&gt;use &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; to append to an existing file without deleting content&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;however, unlike shell, subsequent redirections to same file will append to it&lt;/li&gt;
&lt;li&gt;See also &lt;a href=&quot;https://www.gnu.org/software/gawk/manual/html_node/Close-Files-And-Pipes.html&quot;&gt;gawk manual - Closing Input and Output Redirections&lt;/a&gt; if you have too many redirections&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ seq 6 &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR%2{print &amp;gt; &quot;odd.txt&quot;; next} {print &amp;gt; &quot;even.txt&quot;}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
$ cat odd.txt
1
3
5
$ cat even.txt
2
4
6

$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NR==1{col1=$1&quot;.txt&quot;; col2=$2&quot;.txt&quot;; next}&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;       {print $1 &amp;gt; col1; print $2 &amp;gt; col2}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt
$ cat fruit.txt
apple
banana
fig
guava
$ cat qty.txt
42
31
90
6
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;redirecting to shell command&lt;/li&gt;
&lt;li&gt;this is useful if you have different things to redirect to different commands, otherwise it can be done as usual in shell acting on &lt;code&gt;awk&lt;/code&gt;'s output&lt;/li&gt;
&lt;li&gt;all redirections to same command gets combined as single input to that command&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; same as: echo 'foo good 123' | awk '{print $2}' | wc -c&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo good 123&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $2 | &quot;wc -c&quot;}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
5
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; to avoid newline character being added to print&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo good 123&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v ORS= &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $2 | &quot;wc -c&quot;}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
4
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; assuming no format specifiers in input&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo good 123&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{printf $2 | &quot;wc -c&quot;}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
4

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; same as: echo 'foo good 123' | awk '{printf $2 $3 | &quot;wc -c&quot;}'&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo good 123&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{printf $2 | &quot;wc -c&quot;; printf $3 | &quot;wc -c&quot;}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
7
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Further Reading&lt;/strong&gt;&lt;/p&gt;
&lt;br/&gt;&lt;h2&gt;Gotchas and Tips&lt;/h2&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; wrong&lt;/span&gt;
$ awk -v word=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;apple&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;$1==$word&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; right&lt;/span&gt;
$ awk -v word=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;apple&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;$1==word&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; fruits.txt
apple   42
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; no issue with unix style line ending&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo bar\n123 789\n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $2, $1}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
bar foo
789 123

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; dos style line ending causes trouble&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo bar\r\n123 789\r\n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $2, $1}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
 foo
 123

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; easy to deal by simply setting appropriate RS&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; note that ORS would still be newline character only&lt;/span&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;foo bar\r\n123 789\r\n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk -v RS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;\r\n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $2, $1}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
bar foo
789 123
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;relying on default intial value&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; step 1 - works for single file&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{sum += $1} END{print sum}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; nums.txt
10062.9

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; step 2 - change to work for multiple file&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{sum += $1} ENDFILE{print FILENAME, sum}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; nums.txt
nums.txt 10062.9

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; step 3 - check with multiple file input&lt;/span&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; oops, default numerical value '0' for sum works only once&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{sum += $1} ENDFILE{print FILENAME, sum}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; nums.txt &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;lt;(&lt;/span&gt;seq 3&lt;span class=&quot;pl-pds&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
nums.txt 10062.9
/dev/fd/63 10068.9

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; step 4 - correctly initialize variables&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;BEGINFILE{sum=0} {sum += $1} ENDFILE{print FILENAME, sum}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; nums.txt &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;lt;(&lt;/span&gt;seq 3&lt;span class=&quot;pl-pds&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
nums.txt 10062.9
/dev/fd/63 6
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;use unary operator &lt;code&gt;+&lt;/code&gt; to force numeric conversion&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{sum += $1} END{print FILENAME, sum}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; nums.txt
nums.txt 10062.9

$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{sum += $1} END{print FILENAME, sum}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; /dev/null
/dev/null 

$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{sum += $1} END{print FILENAME, +sum}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; /dev/null
/dev/null 0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;concatenate empty string to force string comparison&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;5 5.0&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $1==$2 ? &quot;same&quot; : &quot;different&quot;, &quot;string&quot;}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
same string

$ &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;5 5.0&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $1&quot;&quot;==$2 ? &quot;same&quot; : &quot;different&quot;, &quot;string&quot;}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
different string
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;beware of expressions going -ve for field calculations&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ cat misc.txt
foo
good bad ugly
123 xyz
a b c d

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; trying to delete last two fields&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{NF -= 2} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; misc.txt
awk: cmd. line:1: (FILENAME=misc.txt FNR=1) fatal: NF &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt; to negative value
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; dynamically change it depending on number of fields&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{NF = (NF&amp;lt;=2) ? 0 : NF-2} 1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; misc.txt

good

a b

$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; similarly, trying to access 3rd field from end&lt;/span&gt;
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;{print $(NF-2)}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; misc.txt
awk: cmd. line:1: (FILENAME=misc.txt FNR=1) fatal: attempt to access field -1
$ awk &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NF&amp;gt;2{print $(NF-2)}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; misc.txt
good
b
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;If input is ASCII alone, simple trick to improve speed&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; all words containing exactly 3 lowercase a&lt;/span&gt;
$ &lt;span class=&quot;pl-k&quot;&gt;time&lt;/span&gt; awk -F&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NF==4{cnt++} END{print +cnt}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; /usr/share/dict/words
1019

real    0m0.075s

$ &lt;span class=&quot;pl-k&quot;&gt;time&lt;/span&gt; LC_ALL=C awk -F&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;NF==4{cnt++} END{print +cnt}&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; /usr/share/dict/words
1019

real    0m0.045s
&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;man awk&lt;/code&gt; and &lt;code&gt;info awk&lt;/code&gt; for quick reference from command line&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/gawk/manual/gawk.html#SEC_Contents&quot;&gt;gawk manual&lt;/a&gt; for complete reference, extensions and more&lt;/li&gt;
&lt;li&gt;What's up with different &lt;code&gt;awk&lt;/code&gt; versions?
&lt;/li&gt;
&lt;li&gt;Tutorials and Q&amp;amp;A
&lt;/li&gt;
&lt;li&gt;Alternatives
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/datamash/alternatives/&quot;&gt;GNU datamash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lh3/bioawk&quot;&gt;bioawk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gelisam/hawk/blob/master/doc/README.md&quot;&gt;hawk&lt;/a&gt; - based on Haskell&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/johnkerl/miller&quot;&gt;miller&lt;/a&gt; - similar to awk/sed/cut/join/sort for name-indexed data such as CSV, TSV, and tabular JSON
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://unix.stackexchange.com/questions/303044/when-to-use-grep-less-awk-sed&quot;&gt;unix.stackexchange - When to use grep, sed, awk, perl, etc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/TheMozg/awk-raycaster&quot;&gt;awkaster&lt;/a&gt; - Pseudo-3D shooter written completely in awk using raycasting technique&lt;/li&gt;
&lt;li&gt;examples for some of the stuff not covered in this tutorial
&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Wed, 25 Oct 2017 12:00:07 +0000</pubDate>
<dc:creator>asicsp</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/17766317?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>learnbyexample/Command-line-text-processing</og:title>
<og:url>https://github.com/learnbyexample/Command-line-text-processing</og:url>
<og:description>Command-line-text-processing - From finding text to search and replace, from sorting to beautifying text and more</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/learnbyexample/Command-line-text-processing/blob/master/gnu_awk.md</dc:identifier>
</item>
<item>
<title>Scipy 1.0 released</title>
<link>https://mail.python.org/pipermail/scipy-user/2017-October/037357.html</link>
<guid isPermaLink="true" >https://mail.python.org/pipermail/scipy-user/2017-October/037357.html</guid>
<description>&lt;head&gt;&lt;title&gt;[SciPy-User] SciPy 1.0 released!&lt;/title&gt;&lt;link rel=&quot;Index&quot; href=&quot;index.html&quot; /&gt;&lt;link rel=&quot;made&quot; href=&quot;mailto:scipy-user%40python.org?Subject=Re%3A%20%5BSciPy-User%5D%20SciPy%201.0%20released%21&amp;amp;In-Reply-To=%3CCABL7CQgou%3DhFMFUx_BPm3rMrB%2BZQZ47Cb9vJ2s3qQRdert%3DbPQ%40mail.gmail.com%3E&quot; /&gt;&lt;meta name=&quot;robots&quot; content=&quot;index,nofollow&quot; /&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;link rel=&quot;Previous&quot; href=&quot;037356.html&quot; /&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#FFFFFF&quot; id=&quot;readabilityBody&quot; readability=&quot;190.83629893238&quot;&gt;

&lt;p&gt;&lt;strong&gt;Ralf Gommers&lt;/strong&gt; &lt;a href=&quot;mailto:scipy-user%40python.org?Subject=Re%3A%20%5BSciPy-User%5D%20SciPy%201.0%20released%21&amp;amp;In-Reply-To=%3CCABL7CQgou%3DhFMFUx_BPm3rMrB%2BZQZ47Cb9vJ2s3qQRdert%3DbPQ%40mail.gmail.com%3E&quot; title=&quot;[SciPy-User] SciPy 1.0 released!&quot;&gt;ralf.gommers at gmail.com&lt;/a&gt;&lt;br /&gt;&lt;em&gt;Wed Oct 25 06:14:07 EDT 2017&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;pre&gt;
Hi all,

We are extremely pleased to announce the release of SciPy 1.0, 16 years
after
version 0.1 saw the light of day.  It has been a long, productive journey to
get here, and we anticipate many more exciting new features and releases in
the
future.


Why 1.0 now?
------------

A version number should reflect the maturity of a project - and SciPy was a
mature and stable library that is heavily used in production settings for a
long time already.  From that perspective, the 1.0 version number is long
overdue.

Some key project goals, both technical (e.g. Windows wheels and continuous
integration) and organisational (a governance structure, code of conduct
and a
roadmap), have been achieved recently.

Many of us are a bit perfectionist, and therefore are reluctant to call
something &quot;1.0&quot; because it may imply that it's &quot;finished&quot; or &quot;we are 100%
happy
with it&quot;.  This is normal for many open source projects, however that
doesn't
make it right.  We acknowledge to ourselves that it's not perfect, and there
are some dusty corners left (that will probably always be the case).
Despite
that, SciPy is extremely useful to its users, on average has high quality
code
and documentation, and gives the stability and backwards compatibility
guarantees that a 1.0 label imply.


Some history and perspectives
-----------------------------

- 2001: the first SciPy release
- 2005: transition to NumPy
- 2007: creation of scikits
- 2008: scipy.spatial module and first Cython code added
- 2010: moving to a 6-monthly release cycle
- 2011: SciPy development moves to GitHub
- 2011: Python 3 support
- 2012: adding a sparse graph module and unified optimization interface
- 2012: removal of scipy.maxentropy
- 2013: continuous integration with TravisCI
- 2015: adding Cython interface for BLAS/LAPACK and a benchmark suite
- 2017: adding a unified C API with scipy.LowLevelCallable; removal of
scipy.weave
- 2017: SciPy 1.0 release


**Pauli Virtanen** is SciPy's Benevolent Dictator For Life (BDFL).  He says:

*Truthfully speaking, we could have released a SciPy 1.0 a long time ago,
so I'm
happy we do it now at long last. The project has a long history, and during
the
years it has matured also as a software project.  I believe it has well
proved
its merit to warrant a version number starting with unity.*

*Since its conception 15+ years ago, SciPy has largely been written by and
for
scientists, to provide a box of basic tools that they need. Over time, the
set
of people active in its development has undergone some rotation, and we have
evolved towards a somewhat more systematic approach to development.
Regardless,
this underlying drive has stayed the same, and I think it will also continue
propelling the project forward in future. This is all good, since not long
after 1.0 comes 1.1.*

**Travis Oliphant** is one of SciPy's creators.  He says:

*I'm honored to write a note of congratulations to the SciPy developers and
the
entire SciPy community for the release of SciPy 1.0.   This release
represents
a dream of many that has been patiently pursued by a stalwart group of
pioneers
for nearly 2 decades.   Efforts have been broad and consistent over that
time
from many hundreds of people.   From initial discussions to efforts coding
and
packaging to documentation efforts to extensive conference and community
building, the SciPy effort has been a global phenomenon that it has been a
privilege to participate in.*

*The idea of SciPy was already in multiple people‚Äôs minds in 1997 when I
first
joined the Python community as a young graduate student who had just fallen
in
love with the expressibility and extensibility of Python.   The internet was
just starting to bringing together like-minded mathematicians and
scientists in
nascent electronically-connected communities.   In 1998, there was a
concerted
discussion on the matrix-SIG, python mailing list with people like Paul
Barrett, Joe Harrington, Perry Greenfield, Paul Dubois, Konrad Hinsen, David
Ascher, and others.   This discussion encouraged me in 1998 and 1999 to
procrastinate my PhD and spend a lot of time writing extension modules to
Python that mostly wrapped battle-tested Fortran and C-code making it
available
to the Python user.   This work attracted the help of others like Robert
Kern,
Pearu Peterson and Eric Jones who joined their efforts with mine in 2000 so
that by 2001, the first SciPy release was ready.   This was long before
Github
simplified collaboration and input from others and the &quot;patch&quot; command and
email was how you helped a project improve.*

*Since that time, hundreds of people have spent an enormous amount of time
improving the SciPy library and the community surrounding this library has
dramatically grown. I stopped being able to participate actively in
developing
the SciPy library around 2010.  Fortunately, at that time, Pauli Virtanen
and
Ralf Gommers picked up the pace of development supported by dozens of other
key
contributors such as David Cournapeau, Evgeni Burovski, Josef Perktold, and
Warren Weckesser.   While I have only been able to admire the development of
SciPy from a distance for the past 7 years, I have never lost my love of the
project and the concept of community-driven development.    I remain driven
even now by a desire to help sustain the development of not only the SciPy
library but many other affiliated and related open-source projects.  I am
extremely pleased that SciPy is in the hands of a world-wide community of
talented developers who will ensure that SciPy remains an example of how
grass-roots, community-driven development can succeed.*

**Fernando Perez** offers a wider community perspective:

*The existence of a nascent Scipy library, and the incredible --if tiny by
today's standards-- community surrounding it is what drew me into the
scientific Python world while still a physics graduate student in 2001.
Today,
I am awed when I see these tools power everything from high school
education to
the research that led to the 2017 Nobel Prize in physics.*

*Don't be fooled by the 1.0 number: this project is a mature cornerstone of
the
modern scientific computing ecosystem.  I am grateful for the many who have
made it possible, and hope to be able to contribute again to it in the
future.
My sincere congratulations to the whole team!*


Highlights of this release
--------------------------

Some of the highlights of this release are:

- Major build improvements.  Windows wheels are available on PyPI for the
  first time, and continuous integration has been set up on Windows and OS X
  in addition to Linux.
- A set of new ODE solvers and a unified interface to them
  (`scipy.integrate.solve_ivp`).
- Two new trust region optimizers and a new linear programming method, with
  improved performance compared to what `scipy.optimize` offered previously.
- Many new BLAS and LAPACK functions were wrapped.  The BLAS wrappers are
now
  complete.


Upgrading and compatibility
---------------------------

There have been a number of deprecations and API changes in this release,
which
are documented below.  Before upgrading, we recommend that users check that
their own code does not use deprecated SciPy functionality (to do so, run
your
code with ``python -Wd`` and check for ``DeprecationWarning`` s).

This release requires Python 2.7 or &amp;gt;=3.4 and NumPy 1.8.2 or greater.

This is also the last release to support LAPACK 3.1.x - 3.3.x.  Moving the
lowest supported LAPACK version to &amp;gt;3.2.x was long blocked by Apple
Accelerate
providing the LAPACK 3.2.1 API.  We have decided that it's time to either
drop
Accelerate or, if there is enough interest, provide shims for functions
added
in more recent LAPACK versions so it can still be used.


New features
============

`scipy.cluster` improvements
----------------------------

`scipy.cluster.hierarchy.optimal_leaf_ordering`, a function to reorder a
linkage matrix to minimize distances between adjacent leaves, was added.


`scipy.fftpack` improvements
----------------------------

N-dimensional versions of the discrete sine and cosine transforms and their
inverses were added as ``dctn``, ``idctn``, ``dstn`` and ``idstn``.


`scipy.integrate` improvements
------------------------------

A set of new ODE solvers have been added to `scipy.integrate`.  The
convenience
function `scipy.integrate.solve_ivp` allows uniform access to all solvers.
The individual solvers (``RK23``, ``RK45``, ``Radau``, ``BDF`` and
``LSODA``)
can also be used directly.


`scipy.linalg` improvements
----------------------------

The BLAS wrappers in `scipy.linalg.blas` have been completed.  Added
functions
are ``*gbmv``, ``*hbmv``, ``*hpmv``, ``*hpr``, ``*hpr2``, ``*spmv``,
``*spr``,
``*tbmv``, ``*tbsv``, ``*tpmv``, ``*tpsv``, ``*trsm``, ``*trsv``, ``*sbmv``,
``*spr2``,

Wrappers for the LAPACK functions ``*gels``, ``*stev``, ``*sytrd``,
``*hetrd``,
``*sytf2``, ``*hetrf``, ``*sytrf``, ``*sycon``, ``*hecon``, ``*gglse``,
``*stebz``, ``*stemr``, ``*sterf``, and ``*stein`` have been added.

The function `scipy.linalg.subspace_angles` has been added to compute the
subspace angles between two matrices.

The function `scipy.linalg.clarkson_woodruff_transform` has been added.
It finds low-rank matrix approximation via the Clarkson-Woodruff Transform.

The functions `scipy.linalg.eigh_tridiagonal` and
`scipy.linalg.eigvalsh_tridiagonal`, which find the eigenvalues and
eigenvectors of tridiagonal hermitian/symmetric matrices, were added.


`scipy.ndimage` improvements
----------------------------

Support for homogeneous coordinate transforms has been added to
`scipy.ndimage.affine_transform`.

The ``ndimage`` C code underwent a significant refactoring, and is now
a lot easier to understand and maintain.


`scipy.optimize` improvements
-----------------------------

The methods ``trust-region-exact`` and ``trust-krylov`` have been added to
the
function `scipy.optimize.minimize`. These new trust-region methods solve the
subproblem with higher accuracy at the cost of more Hessian factorizations
(compared to dogleg) or more matrix vector products (compared to ncg) but
usually require less nonlinear iterations and are able to deal with
indefinite
Hessians. They seem very competitive against the other Newton methods
implemented in scipy.

`scipy.optimize.linprog` gained an interior point method.  Its performance
is
superior (both in accuracy and speed) to the older simplex method.


`scipy.signal` improvements
---------------------------

An argument ``fs`` (sampling frequency) was added to the following
functions:
``firwin``, ``firwin2``, ``firls``, and ``remez``.  This makes these
functions
consistent with many other functions in `scipy.signal` in which the sampling
frequency can be specified.

`scipy.signal.freqz` has been sped up significantly for FIR filters.


`scipy.sparse` improvements
---------------------------

Iterating over and slicing of CSC and CSR matrices is now faster by up to
~35%.

The ``tocsr`` method of COO matrices is now several times faster.

The ``diagonal`` method of sparse matrices now takes a parameter, indicating
which diagonal to return.


`scipy.sparse.linalg` improvements
----------------------------------

A new iterative solver for large-scale nonsymmetric sparse linear systems,
`scipy.sparse.linalg.gcrotmk`, was added.  It implements ``GCROT(m,k)``, a
flexible variant of ``GCROT``.

`scipy.sparse.linalg.lsmr` now accepts an initial guess, yielding
potentially
faster convergence.

SuperLU was updated to version 5.2.1.


`scipy.spatial` improvements
----------------------------

Many distance metrics in `scipy.spatial.distance` gained support for
weights.

The signatures of `scipy.spatial.distance.pdist` and
`scipy.spatial.distance.cdist` were changed to ``*args, **kwargs`` in order
to
support a wider range of metrics (e.g. string-based metrics that need extra
keywords).  Also, an optional ``out`` parameter was added to ``pdist`` and
``cdist`` allowing the user to specify where the resulting distance matrix
is
to be stored


`scipy.stats` improvements
--------------------------

The methods ``cdf`` and ``logcdf`` were added to
`scipy.stats.multivariate_normal`, providing the cumulative distribution
function of the multivariate normal distribution.

New statistical distance functions were added, namely
`scipy.stats.wasserstein_distance` for the first Wasserstein distance and
`scipy.stats.energy_distance` for the energy distance.


Deprecated features
===================

The following functions in `scipy.misc` are deprecated: ``bytescale``,
``fromimage``, ``imfilter``, ``imread``, ``imresize``, ``imrotate``,
``imsave``, ``imshow`` and ``toimage``.  Most of those functions have
unexpected
behavior (like rescaling and type casting image data without the user asking
for that).  Other functions simply have better alternatives.

``scipy.interpolate.interpolate_wrapper`` and all functions in that
submodule
are deprecated.  This was a never finished set of wrapper functions which is
not relevant anymore.

The ``fillvalue`` of `scipy.signal.convolve2d` will be cast directly to the
dtypes of the input arrays in the future and checked that it is a scalar or
an array with a single element.

``scipy.spatial.distance.matching`` is deprecated.  It is an alias of
`scipy.spatial.distance.hamming`, which should be used instead.

Implementation of `scipy.spatial.distance.wminkowski` was based on a wrong
interpretation of the metric definition. In scipy 1.0 it has been just
deprecated in the documentation to keep retro-compatibility but is
recommended
to use the new version of `scipy.spatial.distance.minkowski` that implements
the correct behaviour.

Positional arguments of `scipy.spatial.distance.pdist` and
`scipy.spatial.distance.cdist` should be replaced with their keyword
version.


Backwards incompatible changes
==============================

The following deprecated functions have been removed from `scipy.stats`:
``betai``, ``chisqprob``, ``f_value``, ``histogram``, ``histogram2``,
``pdf_fromgamma``, ``signaltonoise``, ``square_of_sums``, ``ss`` and
``threshold``.

The following deprecated functions have been removed from
`scipy.stats.mstats`:
``betai``, ``f_value_wilks_lambda``, ``signaltonoise`` and ``threshold``.

The deprecated ``a`` and ``reta`` keywords have been removed from
`scipy.stats.shapiro`.

The deprecated functions ``sparse.csgraph.cs_graph_components`` and
``sparse.linalg.symeig`` have been removed from `scipy.sparse`.

The following deprecated keywords have been removed in
`scipy.sparse.linalg`:
``drop_tol`` from ``splu``, and ``xtype`` from ``bicg``, ``bicgstab``,
``cg``,
``cgs``, ``gmres``, ``qmr`` and ``minres``.

The deprecated functions ``expm2`` and ``expm3`` have been removed from
`scipy.linalg`.  The deprecated keyword ``q`` was removed from
`scipy.linalg.expm`.  And the deprecated submodule ``linalg.calc_lwork`` was
removed.

The deprecated functions ``C2K``, ``K2C``, ``F2C``, ``C2F``, ``F2K`` and
``K2F`` have been removed from `scipy.constants`.

The deprecated ``ppform`` class was removed from `scipy.interpolate`.

The deprecated keyword ``iprint`` was removed from
`scipy.optimize.fmin_cobyla`.

The default value for the ``zero_phase`` keyword of `scipy.signal.decimate`
has been changed to True.

The ``kmeans`` and ``kmeans2`` functions in `scipy.cluster.vq` changed the
method used for random initialization, so using a fixed random seed will
not necessarily produce the same results as in previous versions.

`scipy.special.gammaln` does not accept complex arguments anymore.

The deprecated functions ``sph_jn``, ``sph_yn``, ``sph_jnyn``, ``sph_in``,
``sph_kn``, and ``sph_inkn`` have been removed. Users should instead use
the functions ``spherical_jn``, ``spherical_yn``, ``spherical_in``, and
``spherical_kn``. Be aware that the new functions have different
signatures.

The cross-class properties of `scipy.signal.lti` systems have been removed.
The following properties/setters have been removed:

Name - (accessing/setting has been removed) - (setting has been removed)

* StateSpace - (``num``, ``den``, ``gain``) - (``zeros``, ``poles``)
* TransferFunction (``A``, ``B``, ``C``, ``D``, ``gain``) - (``zeros``,
``poles``)
* ZerosPolesGain (``A``, ``B``, ``C``, ``D``, ``num``, ``den``) - ()

``signal.freqz(b, a)`` with ``b`` or ``a`` &amp;gt;1-D raises a ``ValueError``.
This
was a corner case for which it was unclear that the behavior was
well-defined.

The method ``var`` of `scipy.stats.dirichlet` now returns a scalar rather
than
an ndarray when the length of alpha is 1.


Other changes
=============

SciPy now has a formal governance structure.  It consists of a BDFL (Pauli
Virtanen) and a Steering Committee.  See `the governance document
&amp;lt;
&lt;a href=&quot;https://github.com/scipy/scipy/blob/master/doc/source/dev/governance/governance.rst&quot;&gt;https://github.com/scipy/scipy/blob/master/doc/source/dev/governance/governance.rst&lt;/a&gt;
&amp;gt;&lt;em&gt;`_
&lt;/em&gt;for details.

It is now possible to build SciPy on Windows with MSVC + gfortran!
Continuous
integration has been set up for this build configuration on Appveyor,
building
against OpenBLAS.

Continuous integration for OS X has been set up on TravisCI.

The SciPy test suite has been migrated from ``nose`` to ``pytest``.

``scipy/_distributor_init.py`` was added to allow redistributors of SciPy to
add custom code that needs to run when importing SciPy (e.g. checks for
hardware, DLL search paths, etc.).

Support for PEP 518 (specifying build system requirements) was added - see
``pyproject.toml`` in the root of the SciPy repository.

In order to have consistent function names, the function
``scipy.linalg.solve_lyapunov`` is renamed to
`scipy.linalg.solve_continuous_lyapunov`.  The old name is kept for
backwards-compatibility.


Authors
=======

* @arcady +
* @xoviat +
* Anton Akhmerov
* Dominic Antonacci +
* Alessandro Pietro Bardelli
* Ved Basu +
* Michael James Bedford +
* Ray Bell +
* Juan M. Bello-Rivas +
* Sebastian Berg
* Felix Berkenkamp
* Jyotirmoy Bhattacharya +
* Matthew Brett
* Jonathan Bright
* Bruno Jim√©nez +
* Evgeni Burovski
* Patrick Callier
* Mark Campanelli +
* CJ Carey
* Robert Cimrman
* Adam Cox +
* Michael Danilov +
* David Haberth√ºr +
* Andras Deak +
* Philip DeBoer
* Anne-Sylvie Deutsch
* Cathy Douglass +
* Dominic Else +
* Guo Fei +
* Roman Feldbauer +
* Yu Feng
* Jaime Fernandez del Rio
* Orestis Floros +
* David Freese +
* Adam Geitgey +
* James Gerity +
* Dezmond Goff +
* Christoph Gohlke
* Ralf Gommers
* Dirk Gorissen +
* Matt Haberland +
* David Hagen +
* Charles Harris
* Lam Yuen Hei +
* Jean Helie +
* Gaute Hope +
* Guillaume Horel +
* Franziska Horn +
* Yevhenii Hyzyla +
* Vladislav Iakovlev +
* Marvin Kastner +
* Mher Kazandjian
* Thomas Keck
* Adam Kurkiewicz +
* Ronan Lamy +
* J.L. Lanfranchi +
* Eric Larson
* Denis Laxalde
* Gregory R. Lee
* Felix Lenders +
* Evan Limanto
* Julian Lukwata +
* Fran√ßois Magimel
* Syrtis Major +
* Charles Masson +
* Nikolay Mayorov
* Tobias Megies
* Markus Meister +
* Roman Mirochnik +
* Jordi Montes +
* Nathan Musoke +
* Andrew Nelson
* M.J. Nichol
* Juan Nunez-Iglesias
* Arno Onken +
* Nick Papior +
* Dima Pasechnik +
* Ashwin Pathak +
* Oleksandr Pavlyk +
* Stefan Peterson
* Ilhan Polat
* Andrey Portnoy +
* Ravi Kumar Prasad +
* Aman Pratik
* Eric Quintero
* Vedant Rathore +
* Tyler Reddy
* Joscha Reimer
* Philipp Rentzsch +
* Antonio Horta Ribeiro
* Ned Richards +
* Kevin Rose +
* Benoit Rostykus +
* Matt Ruffalo +
* Eli Sadoff +
* Pim Schellart
* Nico Schl√∂mer +
* Klaus Sembritzki +
* Nikolay Shebanov +
* Jonathan Tammo Siebert
* Scott Sievert
* Max Silbiger +
* Mandeep Singh +
* Michael Stewart +
* Jonathan Sutton +
* Deep Tavker +
* Martin Thoma
* James Tocknell +
* Aleksandar Trifunovic +
* Paul van Mulbregt +
* Jacob Vanderplas
* Aditya Vijaykumar
* Pauli Virtanen
* James Webber
* Warren Weckesser
* Eric Wieser +
* Josh Wilson
* Zhiqing Xiao +
* Evgeny Zhurko
* Nikolay Zinov +
* Z√© Vin√≠cius +

A total of 121 people contributed to this release.
People with a &quot;+&quot; by their names contributed a patch for the first time.
This list of names is automatically generated, and may not be fully
complete.


Cheers,
Ralf
-------------- next part --------------
An HTML attachment was scrubbed...
URL: &amp;lt;&lt;a href=&quot;http://mail.python.org/pipermail/scipy-user/attachments/20171025/a50e3526/attachment-0001.html&quot;&gt;http://mail.python.org/pipermail/scipy-user/attachments/20171025/a50e3526/attachment-0001.html&lt;/a&gt;&amp;gt;
&lt;/pre&gt;
&lt;hr /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://mail.python.org/mailman/listinfo/scipy-user&quot;&gt;More information about the SciPy-User mailing list&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Wed, 25 Oct 2017 10:19:08 +0000</pubDate>
<dc:creator>ngoldbaum</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mail.python.org/pipermail/scipy-user/2017-October/037357.html</dc:identifier>
</item>
<item>
<title>Facebook Shouldn‚Äôt Be Allowed to Buy Tbh</title>
<link>https://stratechery.com/2017/why-facebook-shouldnt-be-allowed-to-buy-tbh/</link>
<guid isPermaLink="true" >https://stratechery.com/2017/why-facebook-shouldnt-be-allowed-to-buy-tbh/</guid>
<description>&lt;p&gt;There was one line in &lt;a href=&quot;https://techcrunch.com/2017/10/16/facebook-acquires-anonymous-teen-compliment-app-tbh-will-let-it-run/&quot;&gt;TechCrunch‚Äôs report&lt;/a&gt; about Facebook‚Äôs purchase of social app &lt;em&gt;tbh&lt;/em&gt; [sic] that made me raise my eyebrows (emphasis mine):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Facebook announced it‚Äôs acquiring positivity-focused polling startup &lt;em&gt;tbh&lt;/em&gt; and will allow it to operate somewhat independently with its own brand.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;tbh&lt;/em&gt; had scored 5 million downloads and 2.5 million daily active users in the past nine weeks with its app that lets people anonymously answer kind-hearted multiple-choice questions about friends who then receive the poll results as compliments. You see questions like ‚ÄúBest to bring to a party?,‚Äù ‚ÄúTheir perseverance is admirable?‚Äù and ‚ÄúCould see becoming a poet?‚Äù with your uploaded contacts on the app as answer choices.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;tbh&lt;/em&gt; has racked up more than 1 billion poll answers since officially launching in limited states in August, mostly from teens and high school students, and spent weeks topping the free app charts. When we &lt;a href=&quot;https://techcrunch.com/2017/09/22/tbh-app/&quot;&gt;profiled &lt;em&gt;tbh&lt;/em&gt; last month in the company‚Äôs first big interview&lt;/a&gt;, co-creator Nikita Bier told us, ‚ÄúIf we‚Äôre improving the mental health of millions of teens, that‚Äôs a success to us.‚Äù&lt;/p&gt;
&lt;p&gt;Financial terms of the deal weren‚Äôt disclosed, but &lt;strong&gt;TechCrunch has heard the price paid was less than $100 million and won‚Äôt require any regulatory approval&lt;/strong&gt;. As part of the deal, &lt;em&gt;tbh&lt;/em&gt;‚Äôs four co-creators ‚Äî Bier, Erik Hazzard, Kyle Zaragoza and Nicolas Ducdodon ‚Äî will join Facebook‚Äôs Menlo Park headquarters while continuing to grow their app with Facebook‚Äôs cash, engineering, anti-spam, moderation and localization resources.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This isn‚Äôt quite right. I suspect TechCrunch, and whatever source they ‚Äúheard‚Äù from, is referencing the &lt;a href=&quot;https://en.wikipedia.org/wiki/Hart%E2%80%93Scott%E2%80%93Rodino_Antitrust_Improvements_Act&quot;&gt;Hart-Scott-Rodino Antitrust Improvements Act&lt;/a&gt;. In order to reduce the burden on the Fair Trade Commission and the Antitrust Division of the Department of Justice, an acquirer only needs to report acquisitions (and wait for a specified time period to give time for review) for which the total value is more than a specified threshold; &lt;a href=&quot;https://www.ftc.gov/news-events/blogs/competition-matters/2017/02/hsr-threshold-adjustments-reportability-2017&quot;&gt;for 2017&lt;/a&gt;, that threshold is $80.8 million. To that end, I wouldn‚Äôt be surprised if this deal is worth approximately $80.7 million; that would mean Facebook doesn‚Äôt have to submit this acquisition for review.&lt;/p&gt;
&lt;p&gt;However, just because Facebook doesn‚Äôt have to submit this acquisition for review doesn‚Äôt mean it can‚Äôt be reviewed; indeed, in a closely-watched case from 2014, the &lt;a href=&quot;https://www.ftc.gov/enforcement/cases-proceedings/121-0069/st-lukes-health-system-ltd-saltzer-medical-group-pa&quot;&gt;FTC successfully sued to undo a $28 million acquisition that had already been consummated&lt;/a&gt;. That was only one of many acquisitions the FTC has investigated that didn‚Äôt cross the Hart-Scott-Rodino threshold; in most cases the FTC acted in response to complaints from customers or competitors.&lt;/p&gt;
&lt;p&gt;Might an analyst complain as well? The FTC can, and should, investigate this acquisition.&lt;/p&gt;
&lt;h4&gt;The Social-Communications Map&lt;/h4&gt;
&lt;p&gt;In late 2013, &lt;a href=&quot;https://stratechery.com/2013/multitudes-social/&quot;&gt;Facebook made their most concerted effort&lt;/a&gt; to buy Snapchat (for $3 billion); that was when I made the &lt;a href=&quot;https://stratechery.com/2013/multitudes-social/&quot;&gt;Social-Communications Map&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stratechery.com/2013/socialcommunication-map/&quot;&gt;&lt;img src=&quot;https://stratechery.com/wp-content/uploads/2017/10/IMG_0020-1024x768.png&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;480&quot; class=&quot;aligncenter size-large wp-image-2797&quot; srcset=&quot;https://stratechery.com/wp-content/uploads/2017/10/IMG_0020-1024x768.png 1024w, https://stratechery.com/wp-content/uploads/2017/10/IMG_0020-300x225.png 300w, https://stratechery.com/wp-content/uploads/2017/10/IMG_0020-768x576.png 768w&quot; sizes=&quot;(max-width: 640px) 100vw, 640px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The goal of this map was to show that there was no single social app that covered all of humanity‚Äôs social needs: there were critical differences in how people &lt;em&gt;perceived&lt;/em&gt;&lt;sup&gt;&lt;a href=&quot;https://stratechery.com/2017/why-facebook-shouldnt-be-allowed-to-buy-tbh/#footnote_0_2795&quot; id=&quot;identifier_0_2795&quot; class=&quot;footnote-link footnote-identifier-link&quot; title=&quot;Perceived is a critical point: Twitter and Instagram, for example, are permanent, but are perceived by most as being ephemeral (arguably Twitter‚Äôs has shifted in the public conscious as being something that is more permanent) &quot;&gt;1&lt;/a&gt;&lt;/sup&gt; different social apps, and that no one app could fill every part of this map.&lt;/p&gt;
&lt;p&gt;Facebook, for its part, had, for better or worse, transitioned to a public app that not only handled symmetric relationships, but, at least according to perception, asymmetric broadcast as well; that, though, &lt;a href=&quot;https://stratechery.com/2016/what-facebook-is-and-isnt/&quot;&gt;left an opening for an app like Snapchat&lt;/a&gt;. Thus Facebook‚Äôs acquisition drive: the company had already secured Instagram, giving it a position in asymmetric ephemeral broadcast apps; Snapchat rebuffed advances, so the company soon &lt;a href=&quot;https://stratechery.com/2014/social-conglomerate/&quot;&gt;moved on to WhatsApp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The importance of these two acquisitions cannot be overstated: Facebook has always been secure in its dominance of permanent social relationships, a position that has given the company a dominant position in digital advertising. However, while everyone may need a permanent place on the Internet (all of those teenagers people say Facebook needs to reach have Facebook accounts), the ultimate currency is attention, and much like real life, it is ephemeral conversation that dominates. Facebook, by virtue of early decisions around privacy and significant bad press about the dangers of revealing too much, was locked out of this sphere, so it bought in.&lt;/p&gt;
&lt;h4&gt;The FTC‚Äôs Failure&lt;/h4&gt;
&lt;p&gt;Those acquisitions, by the way, were, per the Hart-Scott-Rodino Act, submitted to the FTC; in the case of Instagram the agency sent what sure seems like &lt;a href=&quot;https://www.ftc.gov/sites/default/files/documents/closing_letters/facebook-inc./instagram-inc./120822barnettfacebookcltr.pdf&quot;&gt;a form letter&lt;/a&gt;; I‚Äôll quote it in full:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Commission has been conducting an investigation to determine whether the proposed acquisition of Instagram, Inc. by Facebook, Inc. may violate Section 7 of the Clayton Act or Section 5 of the Federal Trade Commission Act.&lt;/p&gt;
&lt;p&gt;Upon further review of this matter, it now appears that no further action is warranted by the Commission at this time. Accordingly, the investigation has been closed. This action is not to be construed as a determination that a violation may not have occurred, just as the pendency of an investigation should not be construed as a determination that a violation has occurred. The Commission reserves the right to take such further action as the public interest may require.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And so the single most injurious acquisition with regards to competition in not just social networking specifically but digital advertising broadly was approved. Section 7 of the Clayton Act (post its 1950 amendment), &lt;a href=&quot;https://www.law.cornell.edu/uscode/text/15/18&quot;&gt;states&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No person shall acquire, directly or indirectly, the whole or any part of the stock or other share capital and no person subject to the jurisdiction of the Federal Trade Commission shall acquire the whole or any part of the assets of one or more persons engaged in commerce or in any activity affecting commerce, where in any line of commerce or in any activity affecting commerce in any section of the country, the effect of such acquisition, of such stocks or assets, or of the use of such stock by the voting or granting of proxies or otherwise, may be substantially to lessen competition, or to tend to create a monopoly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚ÄúLessen competition‚Äù is exactly what happened. Instagram, super-charged both with the Facebook social graph and the Facebook ad machine, is not only dominating its native ephemeral asymmetric broadcasting space but increasingly &lt;a href=&quot;https://stratechery.com/2016/the-audacity-of-copying-well/&quot;&gt;preventing Snapchat from expanding&lt;/a&gt;. WhatsApp, meanwhile, dominates the messaging space across most of the world,&lt;sup&gt;&lt;a href=&quot;https://stratechery.com/2017/why-facebook-shouldnt-be-allowed-to-buy-tbh/#footnote_1_2795&quot; id=&quot;identifier_1_2795&quot; class=&quot;footnote-link footnote-identifier-link&quot; title=&quot;The most noteworthy exceptions being the United States (mixed), China (WeChat), South Korea (Kakao), Japan, Thailand, and Taiwan (LINE) &quot;&gt;2&lt;/a&gt;&lt;/sup&gt; and is the most prominent arrow in Facebook‚Äôs ‚Äúfuture growth‚Äù quiver.&lt;/p&gt;
&lt;p&gt;The consolidation of attention has translated into dominance in digital advertising. Facebook accounted for &lt;a href=&quot;http://www.businessinsider.com/facebook-and-google-dominate-ad-industry-with-a-combined-99-of-growth-2017-4&quot;&gt;77% of revenue growth in digital advertising&lt;/a&gt; in the United States in 2016; add in Google and the duopoly‚Äôs share of growth was 99%. Even Snapchat, which after rightly rebuffing Facebook‚Äôs acquisition offers, IPO‚Äôd earlier this year for $24 billion,&lt;sup&gt;&lt;a href=&quot;https://stratechery.com/2017/why-facebook-shouldnt-be-allowed-to-buy-tbh/#footnote_2_2795&quot; id=&quot;identifier_2_2795&quot; class=&quot;footnote-link footnote-identifier-link&quot; title=&quot;As an aside, for all of Snapchat‚Äôs troubles to justify its $24 billion IPO, keep in mind that the vast majority of the commentariat insisted Spiegel was irrational to turn down $3 billion; it‚Äôs a reminder that few understand exponential growth curves&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; has &lt;a href=&quot;https://stratechery.com/2017/snaps-earnings-seasonality-versus-maturity-snaps-missing-business/&quot;&gt;seen revenue declines&lt;/a&gt;, all while Facebook ever more blatantly &lt;a href=&quot;https://stratechery.com/2017/facebook-and-the-cost-of-monopoly/&quot;&gt;rips off the product&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;The Privacy Red Herring&lt;/h4&gt;
&lt;p&gt;The FTC‚Äôs response to the WhatsApp acquisition is more interesting: there the agency‚Äôs focus was privacy, &lt;a href=&quot;https://www.ftc.gov/system/files/documents/public_statements/297701/140410facebookwhatappltr.pdf&quot;&gt;specifically insisting&lt;/a&gt; that Facebook not change WhatsApp‚Äôs more stringent promises around user data without affirmative consent from users. This followed a few years after Facebook‚Äôs &lt;a href=&quot;https://www.ftc.gov/news-events/press-releases/2011/11/facebook-settles-ftc-charges-it-deceived-consumers-failing-keep&quot;&gt;consent decree&lt;/a&gt; with the FTC that demanded the company not share user data without their permission.&lt;/p&gt;
&lt;p&gt;There‚Äôs just one problem: whatever limitations this consent decree may have placed upon Facebook, the reality is that the company is a self-contained ecosystem: prohibiting the permissionless sharing of personal information in fact entrenches Facebook‚Äôs position. Take, for example, Europe‚Äôs vaunted GDPR law: as I &lt;a href=&quot;https://stratechery.com/2017/the-gdpr-and-facebook-and-google-intelligent-tracking-prevention-data-portability-and-social-graphs/&quot;&gt;explained in the Daily Update&lt;/a&gt;, data portability that, for privacy reasons, excludes the social graph (because your friends didn‚Äôt give you permission to share their information with other services) makes it that much harder for competition to arise.&lt;/p&gt;
&lt;p&gt;So it was with the FTC‚Äôs restrictions around the WhatsApp deal: the agency reiterated that Facebook couldn‚Äôt violate user‚Äôs privacy, and completely ignored that the easiest away around privacy restrictions is to simply own all of a user‚Äôs social interactions.&lt;/p&gt;
&lt;h4&gt;Understanding Social Networks&lt;/h4&gt;
&lt;p&gt;Perhaps the most fanciful regulatory document of all, though, is not from the FTC, but rather the United Kingdom‚Äôs Office of Fair Trading. &lt;a href=&quot;http://webarchive.nationalarchives.gov.uk/20140402232639/http://www.oft.gov.uk/shared_oft/mergers_ea02/2012/facebook.pdf&quot;&gt;Its review of the Instagram deal&lt;/a&gt; rested on its analysis of Facebook Camera, an app that no longer exists.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are several relatively strong competitors to Instagram in the supply of camera and photo editing apps, and those competitors appear at present to be a stronger constraint on Instagram than Facebook‚Äôs new app. The majority of third parties did not believe that photo apps are attractive to advertisers on a stand-alone basis, but that they are complementary to social networks. The OFT therefore does not believe that the transaction gives rise to a realistic prospect of a substantial lessening of competition in the supply of photo apps.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚ÄúThe supply of photo apps.‚Äù What a stunningly ignorant evaluation of what Instagram already was: not simply a photo filter app but a social network in its own right. The part about revenue generation, though, was even more amazing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The parties‚Äô revenue models are also very different. While Facebook generates revenue from advertising and users purchasing virtual and digital goods via Facebook, Instagram does not generate any revenue.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This bit, five year on, still leaves me speechless: Instagram didn‚Äôt generate advertising revenue because that‚Äôs not how social networks work. As &lt;a href=&quot;https://stratechery.com/2015/daily-update-facebooks-earnings-naverline-disappoint/&quot;&gt;Mark Zuckerberg frequently explains&lt;/a&gt;, there is a formula for monetization: first grow users, then increase engagement, next attract businesses, and finally sell ads. Just because Instagram, at the time of this acquisition, was still in Stage 1, did not preclude the possibility of Stage 4; the problem is that the Office of Fair Trading simply had no idea how this world worked.&lt;/p&gt;
&lt;p&gt;The issue is straightforward: networks are &lt;a href=&quot;https://stratechery.com/2016/antitrust-and-aggregation/&quot;&gt;the monopoly makers of the Internet era&lt;/a&gt;. To build one is extremely difficult, but, once built, nearly impregnable. The only possible antidote is &lt;em&gt;another&lt;/em&gt; network that draws away the one scarce resource: attention. To that end, when it comes to the Internet, the single most effective tool in antitrust regulation is keeping social networks in separate competitive companies. That the FTC and Office of Fair Trading failed to do so in the case of Instagram and WhatsApp is to the detriment of everyone.&lt;/p&gt;
&lt;h4&gt;Facebook and &lt;em&gt;tbh&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;This is the context for Facebook‚Äôs &lt;em&gt;tbh&lt;/em&gt; acquisition. The app, new as it is, is attacking greenspace in the Social-Communication Map:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stratechery.com/wp-content/uploads/2017/10/IMG_0019.png&quot;&gt;&lt;img src=&quot;https://stratechery.com/wp-content/uploads/2017/10/IMG_0019-1024x768.png&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;480&quot; class=&quot;aligncenter size-large wp-image-2796&quot; srcset=&quot;https://stratechery.com/wp-content/uploads/2017/10/IMG_0019-1024x768.png 1024w, https://stratechery.com/wp-content/uploads/2017/10/IMG_0019-300x225.png 300w, https://stratechery.com/wp-content/uploads/2017/10/IMG_0019-768x576.png 768w&quot; sizes=&quot;(max-width: 640px) 100vw, 640px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;tbh&lt;/em&gt; is hardly the only contender: Secret and &lt;a href=&quot;https://stratechery.com/2014/daily-update-yikyak-raises-62-million-recode-removes-comments-problem-apples-red-campaign/&quot;&gt;Yik Yak&lt;/a&gt; were others. Secret failed due to the lack of an organizational mechanic and negativity; Yik Yak fixed the former by utilizing location, but suffered from the same negativity problem. &lt;em&gt;tbh&lt;/em&gt; has clearly learned lessons from both: the app leverages both location and your address book as an organizing mechanic, and is engineered from the ground-up to be focused on positivity.&lt;/p&gt;
&lt;p&gt;Moreover, it‚Äôs easy to see how it could be super-charged by Facebook: the social graph is probably even more powerful than the address book in terms of building a network, and provides multiple outlets for connections established on &lt;em&gt;tbh&lt;/em&gt;. Just as importantly, Facebook can in the short term fund &lt;em&gt;tbh&lt;/em&gt; and, in the long run, simply graft the service onto its cross-app sales engine. It‚Äôs a great move for both parties.&lt;/p&gt;
&lt;p&gt;What is much more questionable, though, is whether this is a great deal for society. &lt;em&gt;tbh&lt;/em&gt; is, by definition, winning share in the zero sum competition for attention in the ultra-desirable teenage demographic in particular, and that‚Äôs good news for any would-be Facebook competitors. Why should it be ok for Facebook to simply swallow up another app, small thoughh it may currently be? Again, simply looking at narrowly-defined marketshare estimations or non-existent revenue streams is to fundamentally misunderstand how social networks work.&lt;/p&gt;
&lt;p&gt;Indeed, I‚Äôve &lt;a href=&quot;https://stratechery.com/2017/manifestos-and-monopolies/&quot;&gt;already made my position clear&lt;/a&gt; ‚Äî social networks should &lt;em&gt;not&lt;/em&gt; be allowed to acquire other social networks:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Facebook should not be allowed to buy another network-based app; I would go further and make it prima facie anticompetitive for one social network to buy another. Network effects are just too powerful to allow them to be combined. For example, the current environment would look a lot different if Facebook didn‚Äôt own Instagram or WhatsApp (and, should Facebook ever lose an antitrust lawsuit, the remedy would almost certainly be spinning off Instagram and WhatsApp).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The FTC dropped the ball with Instagram and WhatsApp; absent a time machine, the best time to do the right thing is right now.&lt;/p&gt;
&lt;p&gt;Or, perhaps, Facebook should be allowed to proceed ‚Äî but with conditions. My second demand is about the social graph:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All social networks should be required to enable social graph portability ‚Äî the ability to export your lists of friends from one network to another. Again Instagram is the perfect example: the one-time photo-filtering app launched its network off the back of Twitter by enabling the wholesale import of your Twitter social graph. And, after it was acquired by Facebook, Instagram has only accelerated its growth by continually importing your Facebook network. Today all social networks have long since made this impossible, making it that much more difficult for competitors to arise.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Requiring Facebook to offer its social graph to any would-be competitor as a condition of acquiring &lt;em&gt;tbh&lt;/em&gt; would be a good outcome; unfortunately, it is perhaps the most unlikely, given the FTC‚Äôs commitment to unfettered privacy (without a consideration of the impact on competition).&lt;/p&gt;
&lt;p&gt;What shouldn‚Äôt be allowed is what Facebook clearly hopes ‚Äî and suggests ‚Äî will happen: no regulatory review at all. The FTC has the power, and it‚Äôs time to use it.&lt;/p&gt;
&lt;ol class=&quot;footnotes&quot;&gt;&lt;li id=&quot;footnote_0_2795&quot; class=&quot;footnote&quot;&gt;&lt;em&gt;Perceived&lt;/em&gt; is a critical point: Twitter and Instagram, for example, are permanent, but are perceived by most as being ephemeral (arguably Twitter‚Äôs has shifted in the public conscious as being something that is more permanent) [&lt;a href=&quot;https://stratechery.com/2017/why-facebook-shouldnt-be-allowed-to-buy-tbh/#identifier_0_2795&quot; class=&quot;footnote-link footnote-back-link&quot;&gt;‚Ü©&lt;/a&gt;]&lt;/li&gt;
&lt;li id=&quot;footnote_1_2795&quot; class=&quot;footnote&quot;&gt;The most noteworthy exceptions being the United States (mixed), China (WeChat), South Korea (Kakao), Japan, Thailand, and Taiwan (LINE) [&lt;a href=&quot;https://stratechery.com/2017/why-facebook-shouldnt-be-allowed-to-buy-tbh/#identifier_1_2795&quot; class=&quot;footnote-link footnote-back-link&quot;&gt;‚Ü©&lt;/a&gt;]&lt;/li&gt;
&lt;li id=&quot;footnote_2_2795&quot; class=&quot;footnote&quot;&gt;As an aside, for all of Snapchat‚Äôs troubles to justify its $24 billion IPO, keep in mind that the vast majority of the commentariat insisted Spiegel was irrational to turn down $3 billion; it‚Äôs a reminder that few understand exponential growth curves [&lt;a href=&quot;https://stratechery.com/2017/why-facebook-shouldnt-be-allowed-to-buy-tbh/#identifier_2_2795&quot; class=&quot;footnote-link footnote-back-link&quot;&gt;‚Ü©&lt;/a&gt;]&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 25 Oct 2017 05:28:16 +0000</pubDate>
<dc:creator>kawera</dc:creator>
<og:type>article</og:type>
<og:title>Why Facebook Shouldn‚Äôt Be Allowed to Buy tbh</og:title>
<og:url>https://stratechery.com/2017/why-facebook-shouldnt-be-allowed-to-buy-tbh/</og:url>
<og:description>Facebook is acquiring tbh, another burgeoning social network; regulators erred in allowing the Instagram and WhatsApp acquisitions, but there is no better place to start enforcing the law than now.</og:description>
<og:image>https://stratechery.com/wp-content/uploads/2017/10/IMG_0019-1024x768.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://stratechery.com/2017/why-facebook-shouldnt-be-allowed-to-buy-tbh/</dc:identifier>
</item>
<item>
<title>U.S. Consumer Bureau Loses Fight to Allow More Class-Action Suits</title>
<link>https://www.nytimes.com/2017/10/24/business/senate-vote-wall-street-regulation.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2017/10/24/business/senate-vote-wall-street-regulation.html</guid>
<description>&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;398&quot; data-total-count=&quot;1992&quot; id=&quot;story-continues-3&quot;&gt;The arbitration rule has sparked a political battle that has taken on broader significance in the new administration. Republicans latched on to the rule as a way to cast the agency as a player in the regulatory regime that was impeding business and the economy. Shortly after the rule was adopted in July, the U.S. Chamber of Commerce pointed to it as a ‚Äúprime example of an agency gone rogue.‚Äù&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;208&quot; data-total-count=&quot;2200&quot;&gt;In recent months, financial firms and their Republican allies in Congress mobilized to defeat the rule. Some credit unions and community banks also weighed in, lodging calls to lawmakers in their home states.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;146&quot; data-total-count=&quot;2346&quot;&gt;Under the Congressional Review Act, Republicans had roughly &lt;a href=&quot;https://www.nytimes.com/2016/11/16/business/with-trumps-signature-obamas-rules-could-fall.html&quot;&gt;60 legislative days&lt;/a&gt; to overturn the rule. The House passed its own resolution in July.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;276&quot; data-total-count=&quot;2622&quot;&gt;Wrangling the votes in the Senate was trickier. In the weeks leading up to the vote, Senator Lindsey Graham, Republican of South Carolina, who sponsored &lt;a href=&quot;https://www.nytimes.com/2015/11/21/business/dealbook/bipartisan-bill-would-protect-service-members-right-to-go-to-court.html&quot;&gt;legislation&lt;/a&gt; to protect military members from being forced into arbitration, said he would not support a repeal of the rule.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;272&quot; data-total-count=&quot;2894&quot;&gt;Looking to head off a repeal, Democrats and consumer advocates branded the effort as a gift to financial institutions like Wells Fargo and Equifax. Both companies, in the face of corporate scandals, used arbitration clauses to try to quash legal challenges from customers.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;209&quot; data-total-count=&quot;3103&quot;&gt;The rule, Democrats argued, was precisely what was needed to protect the rights of vulnerable borrowers. Regulators and judges, including some appointed by Republican presidents, have also backed the position.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;428&quot; data-total-count=&quot;3531&quot;&gt;Class actions, they argue, are not just about the size of the payouts, which are typically spread out among a large group of people. They are also about pushing companies to change their practices. Large banks, for example, had to pay more than $1 billion to settle class actions beginning in 2009 that accused them of tweaking checking account policies to increase the amount of overdraft fees that they could charge customers.&lt;/p&gt;
&lt;div id=&quot;story-ad-2&quot; class=&quot;story-ad ad ad-placeholder nocontent robots-nocontent&quot;&gt;

&lt;a class=&quot;visually-hidden skip-to-text-link&quot; href=&quot;https://www.nytimes.com/2017/10/24/business/senate-vote-wall-street-regulation.html#story-continues-4&quot;&gt;Continue reading the main story&lt;/a&gt;&lt;/div&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;292&quot; data-total-count=&quot;3823&quot; id=&quot;story-continues-4&quot;&gt;‚ÄúTonight‚Äôs vote is a giant setback for every consumer in this country,‚Äù Richard Cordray, the director of the consumer bureau, said in a statement. ‚ÄúAs a result, companies like Wells Fargo and Equifax remain free to break the law without fear of legal blowback from their customers.‚Äù&lt;/p&gt;
&lt;span class=&quot;visually-hidden&quot;&gt;Photo&lt;/span&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://static01.nyt.com/images/2017/10/25/business/25ARBITRATION-2/25ARBITRATION-2-master675.jpg&quot; alt=&quot;&quot; class=&quot;media-viewer-candidate&quot; data-mediaviewer-src=&quot;https://static01.nyt.com/images/2017/10/25/business/25ARBITRATION-2/25ARBITRATION-2-superJumbo.jpg&quot; data-mediaviewer-caption=&quot;Senator John Cornyn, Republican of Texas, called the rule &amp;#x201C;harmful regulation that imposes obvious costs and offers invisible benefits.&amp;#x201D;&quot; data-mediaviewer-credit=&quot;Michael Reynolds/European Pressphoto Agency&quot; itemprop=&quot;url&quot; itemid=&quot;https://static01.nyt.com/images/2017/10/25/business/25ARBITRATION-2/25ARBITRATION-2-master675.jpg&quot;/&gt;&lt;/div&gt;
&lt;span class=&quot;caption-text&quot;&gt;Senator John Cornyn, Republican of Texas, called the rule ‚Äúharmful regulation that imposes obvious costs and offers invisible benefits.‚Äù&lt;/span&gt; &lt;span class=&quot;credit&quot; itemprop=&quot;copyrightHolder&quot;&gt;&lt;span class=&quot;visually-hidden&quot;&gt;Credit&lt;/span&gt; Michael Reynolds/European Pressphoto Agency&lt;/span&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;264&quot; data-total-count=&quot;4087&quot;&gt;The vote was a win for a party that has struggled to deliver on its legislative priorities. Last month, Senator Mitch McConnell of Kentucky, the majority leader, failed to drum up the support needed to overturn President Barack Obama‚Äôs signature health care &lt;a href=&quot;https://www.nytimes.com/2017/09/27/us/politics/mcconnell-gambled-on-health-care-and-the-alabama-senate-race-he-lost.html&quot;&gt;law&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;277&quot; data-total-count=&quot;4364&quot;&gt;Mr. Graham and Senator John Kennedy of Louisiana broke with the Republicans to vote against the measure. But Senator John McCain of Arizona, whom some Democrats had hoped to sway, voted to overturn the rule. The measure now heads to President Trump, who is expected to sign it.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;266&quot; data-total-count=&quot;4630&quot;&gt;The consumer bureau has unusually broad authority ‚Äî and autonomy from both the White House and Congress ‚Äî to enforce existing federal laws and write new regulations, like the arbitration rule. That independence has rankled Republicans and other federal agencies.&lt;/p&gt;


&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;364&quot; data-total-count=&quot;4994&quot;&gt;In June, the Treasury Department issued a report accusing the agency of regulatory overreach and calling for Mr. Trump to have the right to remove its director. This week, the department weighed in directly on the arbitration rule, &lt;a href=&quot;https://www.treasury.gov/press-center/press-releases/Documents/10-23-17%20Analysis%20of%20CFPB%20arbitration%20rule.pdf&quot;&gt;warning&lt;/a&gt; that the regulation could unleash frivolous lawsuits, costing financial firms an estimated $500 million in legal fees alone.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;333&quot; data-total-count=&quot;5327&quot;&gt;Republicans echoed those arguments on the floor of the Senate on Tuesday. Senator John Cornyn, Republican of Texas, rallied his peers, calling it ‚Äúharmful regulation that imposes obvious costs and offers invisible benefits.‚Äù Like the Treasury report, he argued that class actions ‚Äúenrich lawyers‚Äù at the expense of consumers.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;125&quot; data-total-count=&quot;5452&quot;&gt;The debate over the arbitration rule put Mr. Cordray, into an odd position of publicly bickering with other federal agencies.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;316&quot; data-total-count=&quot;5768&quot;&gt;After the Treasury report, Mr. Cordray sent a letter to Treasury Secretary Steven Mnuchin faulting the department for misrepresenting the bureau‚Äôs work. He also expressed surprise at the report, noting that during his agency‚Äôs work on arbitration, the Treasury ‚Äúraised no issues or concerns with the bureau.‚Äù&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;211&quot; data-total-count=&quot;5979&quot;&gt;The friction is intensifying as Mr. Cordray‚Äôs tenure at the bureau is ending. Appointed by Mr. Obama in 2012 to a five-year term, Mr. Cordray is widely expected to step down sooner to run for governor in Ohio.&lt;/p&gt;
&lt;div id=&quot;story-ad-3&quot; class=&quot;story-ad ad ad-placeholder nocontent robots-nocontent&quot;&gt;

&lt;a class=&quot;visually-hidden skip-to-text-link&quot; href=&quot;https://www.nytimes.com/2017/10/24/business/senate-vote-wall-street-regulation.html#story-continues-5&quot;&gt;Continue reading the main story&lt;/a&gt;&lt;/div&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;167&quot; data-total-count=&quot;6146&quot; id=&quot;story-continues-5&quot;&gt;Mr. Trump will then be free to install his own appointee, a move that is expected to defang what has been one of the financial industry‚Äôs most aggressive regulators.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;266&quot; data-total-count=&quot;6412&quot;&gt;The arbitration rule, in many ways, encapsulated the bureau‚Äôs work: It was independent and designed to fill a regulatory gap. The rule was the first major check on arbitration since a pair of Supreme Court decisions, in 2011 and 2013, enshrined its widespread use.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;238&quot; data-total-count=&quot;6650&quot;&gt;Emboldened by those decisions, more and more companies adopted the clauses. Today, it is hard to open up a checking account, rent a car, get cable service or check a loved one into a nursing home without agreeing to mandatory arbitration.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;305&quot; data-total-count=&quot;6955&quot;&gt;As arbitration clauses appeared in tens of millions of contracts, the consumer agency was specifically mandated to study arbitration under the Dodd-Frank financial law in 2010. That effort culminated in a &lt;a href=&quot;http://files.consumerfinance.gov/f/201503_cfpb_arbitration-study-report-to-congress-2015.pdf&quot;&gt;728&lt;/a&gt;-page report, released in March 2015, that challenged longstanding assumptions about arbitration.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;274&quot; data-total-count=&quot;7229&quot;&gt;The agency found that once blocked from suing, few people went to arbitration at all. And the results for those who did were dismal. During the two-year period studied, only 78 arbitration claims resulted in judgments in favor of consumers, who got $400,000 in total relief.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;51&quot; data-total-count=&quot;7280&quot;&gt;The vote late Tuesday left many Democrats dismayed.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;247&quot; data-total-count=&quot;7527&quot;&gt;Senator Sherrod Brown, Democrat of Ohio, said the Republicans had betrayed ordinary Americans. ‚ÄúBy voting to take rights away from customers,‚Äù he said, ‚Äúthe Senate voted tonight to side with Wells Fargo lobbyists over the people we serve.‚Äù&lt;/p&gt;
&lt;a class=&quot;visually-hidden skip-to-text-link&quot; href=&quot;https://www.nytimes.com/2017/10/24/business/senate-vote-wall-street-regulation.html#whats-next&quot;&gt;Continue reading the main story&lt;/a&gt;</description>
<pubDate>Wed, 25 Oct 2017 05:05:42 +0000</pubDate>
<dc:creator>runesoerensen</dc:creator>
<og:url>https://www.nytimes.com/2017/10/24/business/senate-vote-wall-street-regulation.html</og:url>
<og:type>article</og:type>
<og:title>Consumer Bureau Loses Fight to Allow More Class-Action Suits</og:title>
<og:description>A Senate vote to overturn a rule restricting arbitration clauses, with Vice President Mike Pence breaking a tie, was part of a Republican push to roll back Obama-era financial regulations.</og:description>
<og:image>https://static01.nyt.com/images/2017/10/25/business/25ARBITRATION1/25ARBITRATION1-facebookJumbo.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2017/10/24/business/senate-vote-wall-street-regulation.html</dc:identifier>
</item>
<item>
<title>The Anti-Portfolio</title>
<link>https://www.bvp.com/portfolio/anti-portfolio</link>
<guid isPermaLink="true" >https://www.bvp.com/portfolio/anti-portfolio</guid>
<description>&lt;tr readability=&quot;8&quot;&gt;&lt;td&gt;&lt;img alt=&quot;&quot; src=&quot;https://res.cloudinary.com/bvp-com/image/upload/f_auto,q_80/sites/default/files/Air%20Bnb%20PNG.png&quot;/&gt;&lt;/td&gt;
&lt;td&gt;Jeremy Levine met Brian Chesky in January 2010, the first $100K revenue month. Brian‚Äôs $40M valuation ask was ‚Äúcrazy‚Äù, but Jeremy was impressed and made a plan to reconnect in May. Unbeknownst to Jeremy $100K in January became 200 in February and 300 in March. In April, Airbnb raised money at 1.5X the ‚Äúcrazy‚Äù price. Their last fundraising was completed at ~500X that valuation.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;&lt;img alt=&quot;Apple Computer&quot; src=&quot;https://res.cloudinary.com/bvp-com/image/upload/f_auto,q_80/sites/default/files/Apple%20LOGO.png&quot;/&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;BVP had the opportunity to invest in pre-IPO secondary stock in Apple at a $60M valuation. BVP's Neill Brownstein called it &quot;outrageously expensive.&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td&gt;&lt;img alt=&quot;&quot; src=&quot;https://res.cloudinary.com/bvp-com/image/upload/f_auto,q_80/sites/default/files/Atlassian%20Logo%20PNG_1.png&quot;/&gt;&lt;/td&gt;
&lt;td&gt;Buzz of a developer tool from Australia (of all places!) drove Byron Deeter to Atlassian‚Äôs door in 2006. Notes from the meeting included ‚Äútotally self-financed, started with a credit card‚Äù and ‚Äúgreat business but Scott &amp;amp; Mike don‚Äôt ever want to be a public company.‚Äù Years and countless meetings later the first opportunity to invest emerged in 2010, but the $400m company valuation was thought to be a tad ‚Äúrich‚Äù by then. In 2015, Atlassian became the largest tech IPO in Australian history, and the shares we passed on are worth more than a billion dollars today.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;

&lt;p&gt;&lt;img alt=&quot;eBay&quot; src=&quot;https://res.cloudinary.com/bvp-com/image/upload/f_auto,q_80/sites/default/files/Ebay%20PNG.png&quot;/&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;&quot;Stamps? Coins? Comic books? You've GOT to be kidding,&quot; thought Cowan. &quot;No-brainer pass.&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td&gt;&lt;img alt=&quot;&quot; src=&quot;https://res.cloudinary.com/bvp-com/image/upload/f_auto,q_80/sites/default/files/Facebook%20PNG.png&quot;/&gt;&lt;/td&gt;
&lt;td&gt;Jeremy Levine spent a weekend at a corporate retreat in the summer of 2004 dodging persistent Harvard undergrad Eduardo Saverin's rabid pitch. Finally, cornered in a lunch line, Jeremy delivered some sage advice &quot;Kid, haven't you heard of Friendster? Move on. It's over!&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;&lt;img alt=&quot;Federal Express&quot; src=&quot;https://res.cloudinary.com/bvp-com/image/upload/f_auto,q_80/sites/default/files/fedex.png&quot;/&gt;&lt;/td&gt;
&lt;td&gt;Incredibly, BVP passed on Federal Express seven times.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td&gt;&lt;img alt=&quot;Google&quot; src=&quot;https://res.cloudinary.com/bvp-com/image/upload/f_auto,q_80/sites/default/files/Google%20Logo.png&quot;/&gt;&lt;/td&gt;
&lt;td&gt;Cowan‚Äôs college friend rented her garage to Sergey and Larry for their first year. In 1999 and 2000 she tried to introduce Cowan to ‚Äúthese two really smart Stanford students writing a search engine.‚Äù Students? A new search engine? In the most important moment ever for Bessemer‚Äôs anti-portfolio, Cowan asked her, ‚ÄúHow can I get out of this house without going anywhere near your garage?‚Äù&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;img alt=&quot;Intel&quot; src=&quot;https://res.cloudinary.com/bvp-com/image/upload/f_auto,q_80/sites/default/files/Intel%20PNG.png&quot;/&gt;&lt;/td&gt;
&lt;td&gt;BVP's Pete Bancroft never quite settled on terms with Bob Noyce, who instead took venture financing from a guy named Arthur Rock.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td&gt;&lt;img alt=&quot;&quot; src=&quot;https://res.cloudinary.com/bvp-com/image/upload/f_auto,q_80/sites/default/files/Intuit%20PNG_0.png&quot;/&gt;&lt;/td&gt;
&lt;td&gt;Along with every venture capitalist on Sand Hill Road, Neill Brownstein turned down Intuit founder Scott Cook. Scott managed to scrape together only $225K from friends, including HBS classmate and Sierra Ventures founder Peter Wendell, who personally invested $25K to get Scott off his back.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;img alt=&quot;&quot; src=&quot;https://res.cloudinary.com/bvp-com/image/upload/f_auto,q_80/sites/default/files/Kayak%20PNG.png&quot;/&gt;&lt;/td&gt;
&lt;td&gt;After extensive diligence Jeremy Levine identified a fatal business model flaw: airlines wouldn't pay high fees for placement on the platform. Fortunately for Kayak, hotels did. As did Priceline when it acquired the company for $1.8 billion.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td&gt;&lt;img alt=&quot;&quot; src=&quot;https://res.cloudinary.com/bvp-com/image/upload/f_auto,q_80/sites/default/files/lotus_compaq.png&quot;/&gt;&lt;/td&gt;
&lt;td&gt;Ben Rosen, one of the founders of Sevin Rosen, offered Felda Hardymon the chance to invest in both Lotus and Compaq Computer on the same day. Says Hardymon: &quot;Lotus wasn't proven yet, and I was worried about the situation there. As for Compaq, I told him there was no real future in transportable computers since IBM could do it.&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td&gt;&lt;img alt=&quot;&quot; src=&quot;https://res.cloudinary.com/bvp-com/image/upload/f_auto,q_80/sites/default/files/Paypal%20Logo.png&quot;/&gt;&lt;/td&gt;
&lt;td&gt;David Cowan passed on the Series A round. Rookie team, regulatory nightmare, and, 4 years later, a $1.5 billion acquisition by eBay.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td&gt;&lt;img alt=&quot;&quot; src=&quot;https://res.cloudinary.com/bvp-com/image/upload/f_auto,q_80/sites/default/files/Snap%20Chat%20Logo.png&quot;/&gt;&lt;/td&gt;
&lt;td&gt;In 2011 Jeremy Levine arrived at LAX three hours late, thanks to flight delays, with enough time for only one of the two meetings on his calendar. He literally tossed a quarter and phoned Evan Spiegel with his regrets. Because Jeremy does nothing halfway, he then visited Zip Recruiter where he fretted to CEO Ian Siegel that Zip‚Äôs business model had vulnerabilities. SNAP was the largest IPO in 2017 and Zip Recruiter is one of the fastest growing &amp;gt;$200M SaaS companies.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;&lt;img alt=&quot;&quot; src=&quot;https://res.cloudinary.com/bvp-com/image/upload/f_auto,q_80/sites/default/files/Tesla%20PNG.png&quot;/&gt;&lt;/td&gt;
&lt;td&gt;In 2006 Byron Deeter met the team and test-drove a roadster. He put a deposit on the car, but passed on the negative margin company telling his partners &quot;It's a win-win. I get a great car and some other VC pays for it!&quot; The company passed $30B in market cap in 2014.¬†Byron recently paid full price for his Model X.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;¬†&lt;/td&gt;
&lt;td&gt;¬†&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;¬†&lt;/td&gt;
&lt;td&gt;¬†&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Wed, 25 Oct 2017 03:10:14 +0000</pubDate>
<dc:creator>bbourn</dc:creator>
<og:type>article</og:type>
<og:url>https://www.bvp.com/portfolio/anti-portfolio</og:url>
<og:title>The Anti-Portfolio</og:title>
<og:description>Over the course of our history, we did invest in a wig company, a french-fry company, and the Lahaina, Ka'anapali &amp; Pacific Railroad. However, we chose to decline these investments, each of which we had the opportunity to invest in, and each of which later blossomed into a tremendously successful company.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bvp.com/portfolio/anti-portfolio</dc:identifier>
</item>
<item>
<title>Why We Must Fight for the Right to Repair Our Electronics</title>
<link>https://spectrum.ieee.org/green-tech/conservation/why-we-must-fight-for-the-right-to-repair-our-electronics</link>
<guid isPermaLink="true" >https://spectrum.ieee.org/green-tech/conservation/why-we-must-fight-for-the-right-to-repair-our-electronics</guid>
<description>&lt;img alt=&quot;illustration&quot; src=&quot;https://spectrum.ieee.org/image/Mjk2OTQ3MA.jpeg&quot;/&gt; Photo: The Voorhes
&lt;p&gt;&lt;strong&gt;The &lt;a href=&quot;https://www.cta.tech/&quot;&gt;Consumer Technology Association&lt;/a&gt;&lt;/strong&gt; estimated that residents of the United States bought &lt;a href=&quot;https://www.cta.tech/News/Press-Releases/2016/September/Evolving-Mobile-Device-Lifecycle-Creates-New-Marke.aspx&quot;&gt;183 million smartphones&lt;/a&gt; in 2016. There are already &lt;a href=&quot;https://www.cta.tech/News/Blog/Articles/2016/May/There-Are-as-Many-TVs-Owned-as-People-in-the-U-S.aspx&quot;&gt;as many TVs&lt;/a&gt; in this country as there are people. That‚Äôs a lot of electronics, and these numbers are just going up.&lt;/p&gt;&lt;p&gt;On balance, all this technology is probably making our lives better. But¬†there‚Äôs a downside, too: The stuff¬†often malfunctions. Unlike the 30-year-old mixer on your kitchen counter that refuses to die, new technology‚Äîespecially the smart devices with fancy, embedded electronics‚Äîbreaks more quickly. That trend, &lt;a href=&quot;https://www.theguardian.com/environment/2015/mar/03/lifespan-of-consumer-electronics-is-getting-shorter-study-finds&quot;&gt;confirmed by a recent study&lt;/a&gt; by the German government, applies not just to delicate products like smartphones and tablets but also to equipment we would expect to last for a long time‚Äîlike¬†televisions, washing machines, and &lt;a href=&quot;https://www.wired.com/2015/02/new-high-tech-farm-equipment-nightmare-farmers/&quot;&gt;even tractors&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Manufacturers would prefer to sell you their latest models rather than repair your old electronics, so they work to make fixing their products too expensive or too impractical. It‚Äôs a global problem because the marketplace for technology is global, and people everywhere are affected. With so many people throwing out so much broken stuff, it should come as no surprise that e-waste is the fastest-growing waste stream, with &lt;a href=&quot;https://unu.edu/news/news/ewaste-2014-unu-report.html&quot;&gt;tens of millions of tons&lt;/a&gt; discarded annually around the world.&lt;/p&gt;
&lt;p&gt;Tossing things out instead of fixing them has far-reaching consequences‚Äîfor¬†consumers, for the economy, and for the environment. Indeed, a future in¬†which nothing ever gets repaired isn‚Äôt bright for anyone except the people trying to sell you new products. And many of us are not prepared to accept that future without a fight.&lt;/p&gt;
&lt;p&gt;In 2013, a group of concerned consumers, recyclers, refurbishers, environmentalists, digital-rights advocates, and repair specialists in the United States teamed up to found &lt;a href=&quot;http://repair.org/&quot;&gt;Repair.org&lt;/a&gt;, of which one of us (Gordon-Byrne) is executive director and the other (Wiens) is chairman of the board. We‚Äôre working to make sure that when something breaks, U.S. consumers can¬†easily find the information and parts they need to repair it, or else have it¬†repaired by whomever they choose.&lt;/p&gt;
&lt;p&gt;Over the past few years, this battle has been heating up. In 2017, &lt;a href=&quot;https://repair.org/stand-up/&quot;&gt;twelve states&lt;/a&gt;¬†introduced ‚Äúright to repair‚Äù legislation that would make it easier for¬†consumers to fix broken digital equipment. With grassroots support, Repair.org is leading the charge to turn these bills into laws. Not surprisingly, we‚Äôve encountered significant resistance, not from lawmakers but from lobbyists hired by large tech companies to &lt;a href=&quot;http://www.huffingtonpost.com/entry/right-to-repair-new-york_us_57641b5ce4b0853f8bf097fc&quot;&gt;kill right-to-repair bills&lt;/a&gt; behind closed doors.&lt;/p&gt;
&lt;p&gt;You might think that these legislative battles are inconsequential or don‚Äôt have too much to do with you personally. But if you believe that when you buy something you actually own it, you should pay attention as we explain why that may not be the case and give the history of how we got to today‚Äôs very odd¬†situation.&lt;/p&gt;
&lt;img alt=&quot;img&quot; src=&quot;https://spectrum.ieee.org/image/Mjk2ODY2Mg.jpeg&quot;/&gt; Photo: The Voorhes
&lt;p&gt;&lt;strong&gt;People have been fixing&lt;/strong&gt; electronic devices for as long as they have existed. You know the drill: When something breaks, you troubleshoot the problem, take the thing apart, fix or replace the failed component or subassembly, and turn the machine back on. If it works, great. If not, try again. It‚Äôs as simple as¬†that.&lt;/p&gt;
&lt;p&gt;The trouble with repairing computerized products‚Äîa category that just keeps growing and includes pretty much anything you plug into the wall or run off a battery these days‚Äîis that the path to repair isn‚Äôt always so straightforward. Sometimes it‚Äôs easy to see that a¬†connection has come loose or that a¬†capacitor has gone bad, but for the most part identifying and correcting the underlying problem requires sophisticated diagnostic tools and detailed service documentation. If the manufacturer refuses to provide those things, repair is still possible, but it‚Äôs &lt;em&gt;a lot&lt;/em&gt; more difficult. Every repair becomes an¬†R&amp;amp;D¬†project.&lt;/p&gt;
&lt;p&gt;In past decades, companies that made electronic equipment typically provided the information needed for repair‚Äîand¬†usually free of charge. Computers came with schematic diagrams showing how the various components on the circuit boards were connected. Even Apple, now one of¬†the¬†most repair-unfriendly gadget makers in the business, sent a free, &lt;a href=&quot;https://archive.org/details/applerefjan78&quot;&gt;exhaustive manual&lt;/a&gt;‚Äîcomplete with schematics‚Äîto owners of &lt;a href=&quot;https://en.wikipedia.org/wiki/Apple_II_series&quot;&gt;the Apple¬†II&lt;/a&gt;. It¬†was expected that many owners would repair and maybe even tinker with their¬†equipment.&lt;/p&gt;
&lt;p&gt;But as the years went on, this kind of information became scarcer. It‚Äôs ironic. We live in the age of information. And yet, at the very moment when information about how to repair electronics should be easiest for owners to¬†get their hands on, it has dried up.&lt;/p&gt;
&lt;p&gt;That scarcity is by design. Manufacturers don‚Äôt want you to fix that broken microwave or air conditioner; they want you to buy a new one. Some even send cease-and-desist letters to people who post repair information online. Back in 2012, Toshiba told laptop repair tech Tim Hicks that he needed to &lt;a href=&quot;http://www.tim.id.au/blog/2012/11/10/toshiba-laptop-service-manuals-and-the-sorry-state-of-copyright-law/&quot;&gt;remove 300 PDFs of Toshiba‚Äôs official repair manuals&lt;/a&gt; from his website, where he was offering the information for free. To avoid being sued, Hicks complied, and now fewer people have the guidance they need to repair Toshiba laptops.&lt;/p&gt;
&lt;p&gt;Toshiba isn‚Äôt the only guilty party. Go to Apple‚Äôs website and try to find a¬†repair manual for a MacBook Pro. It‚Äôs not there. Go to Samsung‚Äôs website and look for ways to fix your flat-screen TV. You‚Äôll come away empty-handed. Same for your Keurig. Or your Kindle. Or your GoPro. Or your Lexmark printer that‚Äôs &lt;em&gt;always&lt;/em&gt; broken. You‚Äôll probably find user manuals and perhaps a few other online resources created by people who figured out how to fix the broken product on their own. But manufacturers by and large remain silent on the topic of repair.&lt;/p&gt;
&lt;p&gt;Instead, they put official service information and diagnostic tools behind passwords and paywalls, limiting the distribution of repair information to a¬†select few ‚Äúauthorized‚Äù providers. Without access to repair instructions, customers are forced to use these authorized service centers, which can charge high prices because there are no alternatives‚Äîexcept¬†perhaps buying a¬† new device.&lt;/p&gt;
&lt;p&gt;That‚Äôs why one of us (Wiens) created &lt;a href=&quot;https://www.ifixit.com/&quot;&gt;iFixit&lt;/a&gt;, a company that takes apart popular models of consumer electronics to reverse-engineer repair instructions and then posts the information for free online. The instructions come from iFixit, not the manufacturer, so iFixit can‚Äôt be sued for disseminating proprietary repair information.&lt;/p&gt;
&lt;aside class=&quot;right2repair inlay xlrg&quot;&gt;&lt;h3 class=&quot;sb-hed&quot;&gt;E-Waste Outstrips Population&lt;/h3&gt;
&lt;img alt=&quot;chart&quot; src=&quot;https://spectrum.ieee.org/image/Mjk2ODY3MA.jpeg&quot;/&gt; Source: &lt;em&gt;The Global E-Waste Monitor 2014&lt;/em&gt;, Institute for the Advanced Study of Sustainability/United Nations University&lt;/aside&gt;&lt;p&gt;Even if you happen to find repair instructions on iFixit‚Äôs website or elsewhere, you still have to locate replacement parts. In some cases, parts are so difficult to get from the manufacturer that people instead extract them from junked equipment, as if they were harvesting organs from the recently deceased. Things are even harder for small repair shops, which struggle to find reliable sources of high-quality replacement parts.&lt;/p&gt;
&lt;p&gt;The lack of service parts is an especially big impediment when it comes to repairing smartphones, tablets, and gaming devices. Together, those products number in the billions, and yet many models have no independent sources for¬†fragile items like glass. That‚Äôs crazy because glass, of course, breaks frequently. Fixing it is a big business for phone manufacturers like Apple and Samsung, which are fighting vigorously to protect their monopolies on repair. As of September 2014, gadget insurance company SquareTrade estimated that Americans had spent US¬†&lt;a href=&quot;https://www.squaretrade.dk/press/new-study-shows-damaged-iphones-cost-americans-10.7billion-4.8b-in-the-last-two-years-alone&quot;&gt;$10.7 billion on iPhone&lt;/a&gt; repairs since the phone‚Äôs 2007 introduction.&lt;/p&gt;
&lt;p&gt;Apple may be the worst offender when it comes to refusing to sell service parts or provide repair information to anyone but its authorized service providers. The company doesn‚Äôt even provide such information for equipment that Apple won‚Äôt repair anymore (Apple has a long list of ‚Äú&lt;a href=&quot;https://support.apple.com/en-us/HT201624&quot;&gt;vintage and obsolete&lt;/a&gt;‚Äù devices it no longer supports) or for repairs that its ‚ÄúGeniuses‚Äù aren‚Äôt skilled enough to do, like fixing a computer‚Äôs motherboard.&lt;/p&gt;
&lt;p&gt;In 2015, the company went even further‚Äîremotely disabling iPhones whose screens had been repaired outside of Apple‚Äôs authorized network. One of those dead devices belonged to Antonio Olmos, a photographer for &lt;em&gt;&lt;a href=&quot;https://www.theguardian.com/money/2016/feb/05/error-53-apple-iphone-software-update-handset-worthless-third-party-repair&quot;&gt;The Guardian&lt;/a&gt;&lt;/em&gt;. He broke his screen while covering the refugee crisis in the Balkans. There‚Äôs no Apple store in Macedonia, so Olmos had a local repair shop replace the broken screen with an aftermarket part. It worked great. Months later, though, after a routine software update, Olmos‚Äôs phone stopped working simply because of that screen.&lt;/p&gt;
&lt;p&gt;At first, Apple defended ‚Äúerror 53‚Äù (as the problem was identified) as a security measure. The company blamed unauthorized repair shops: ‚ÄúWhen an¬†iPhone is serviced by an unauthorised repair provider, faulty screens or other invalid components that affect the touch ID sensor could cause the check to fail if the pairing cannot be validated. With a subsequent update or restore, additional security checks result in an ‚Äòerror 53‚Äô being displayed,‚Äù an¬†Apple spokesperson told &lt;em&gt;The Guardian&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;But that explanation didn‚Äôt fly with owners. Independent repair shops didn‚Äôt break these phones; Apple did. And the aftermarket screens hadn‚Äôt been faulty; they just hadn‚Äôt been made by the original equipment manufacturer‚Äîbecause Apple refuses to sell OEM screens to independent repair shops.&lt;/p&gt;
&lt;p&gt;Bowing to public pressure, Apple apologized and fixed the broken phones with a new update. But a precedent had been set. Previously, Apple had made¬†it difficult for people to fix its products by restricting access to parts¬†and¬†service information. Now, to those owners who dared to repair their¬†equipment without the company‚Äôs blessing, Apple could dole out punishment‚Äîwith software.&lt;/p&gt;
&lt;img alt=&quot;img&quot; src=&quot;https://spectrum.ieee.org/image/Mjk2ODcwMA.jpeg&quot;/&gt;&lt;img alt=&quot;img&quot; class=&quot;lrg rt&quot; src=&quot;https://spectrum.ieee.org/image/Mjk2ODY5OQ.jpeg&quot;/&gt;&lt;p&gt;Photos: iFixit &lt;strong&gt;No Serviceable Parts:&lt;/strong&gt; Or so manufacturers would have people believe when it comes to electronic devices such as smart¬†watches and mobile phones. But repair is often possible, using replacement parts and instructions from other sources.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In 2011, the entrepreneur&lt;/strong&gt; and venture capitalist Marc Andreessen quipped in an op-ed for &lt;em&gt;The Wall Street Journal&lt;/em&gt; that ‚Äú&lt;a href=&quot;https://www.wsj.com/articles/SB10001424053111903480904576512250915629460&quot;&gt;software is eating the¬†world&lt;/a&gt;‚Äù‚Äîmeaning that it‚Äôs now in pretty much everything: phones, microwave ovens, coffeemakers, sewing machines, even &lt;a href=&quot;http://abcnews.go.com/Technology/barbie-internet-connected-doll-conversations/story?id=29026245&quot;&gt;Barbies&lt;/a&gt;. And it‚Äôs threatening to gobble up repair with it.&lt;/p&gt;
&lt;p&gt;All computerized equipment comes with embedded software‚Äîcode that tells the machine what to do and how its components should function together. Without that code, our coffee doesn‚Äôt brew, our cars don‚Äôt shift gears, and our sewing machines can‚Äôt stitch.&lt;/p&gt;
&lt;p&gt;When you buy such a machine, the hardware becomes yours. But if you ask manufacturers, they‚Äôll say that the software inside still belongs to them. It‚Äôs copyrighted, and most manufacturers don‚Äôt want you to touch it, even if the thing is broken. And thanks to a controversial U.S. law called the &lt;a href=&quot;https://www.copyright.gov/legislation/dmca.pdf&quot;&gt;Digital Millennium Copyright Act&lt;/a&gt; (DMCA) [PDF], manufacturers are allowed to put digital locks on the code to stop people from meddling with (or even looking at) it. The &lt;a href=&quot;http://eur-lex.europa.eu/LexUriServ/LexUriServ.do?uri=CELEX:32001L0029:EN:HTML&quot;&gt;European Union‚Äôs Copyright Directive&lt;/a&gt; has similar provisions. Originally, these sorts of laws were designed to prevent pirates from copying movies and music. But, increasingly, manufacturers use them to maintain control of the products they sell to you.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lexmark.com/en_us.html&quot;&gt;Lexmark&lt;/a&gt; famously used the DMCA to &lt;a href=&quot;https://www.eff.org/cases/lexmark-v-static-control-case-archive&quot;&gt;sue Static Control Components&lt;/a&gt;, which was making chips that allowed other companies to refill Lexmark toner cartridges and sell them again. Recently, &lt;a href=&quot;http://www.hp.com/country/us/en/welcome.html&quot;&gt;HP&lt;/a&gt; went so far as remotely &lt;a href=&quot;https://www.theregister.co.uk/2016/09/28/hp_inc_coo_sorry_not_sorry/&quot;&gt;disabling unlicensed cartridges&lt;/a&gt; installed in its printers. Even John Deere &lt;a href=&quot;http://www.npr.org/sections/alltechconsidered/2015/08/17/432601480/diy-tractor-repair-runs-afoul-of-copyright-law&quot;&gt;deploys digital locks&lt;/a&gt; to make sure that only its own technicians can fix anything software-related on its agricultural machines.&lt;/p&gt;
&lt;p&gt;When asked why it was standing in the way of farmers who want to fix their own tractors, the company replied that farmers didn‚Äôt really own their tractors. &lt;a href=&quot;https://copyright.gov/1201/2015/comments-032715/class%2021/John_Deere_Class21_1201_2014.pdf&quot;&gt;According to John Deere&lt;/a&gt; [PDF], farmers have only ‚Äúan implied license for the life of the vehicle to operate the vehicle,‚Äù and farmers (or their mechanics) aren‚Äôt allowed to fiddle with the software to effect a repair.&lt;/p&gt;
&lt;p&gt;Naturally, that position upset a lot of farmers, who assumed that when they plopped down $75,000 or more for a new tractor, they were buying the whole thing. They felt they should be able to fix their tractors on their own terms. And it turns out that the farmers were right.&lt;/p&gt;
&lt;p&gt;Authorities in the &lt;a href=&quot;https://www.copyright.gov/&quot;&gt;U.S. Copyright Office&lt;/a&gt;‚Äîwho presumably have a deeper knowledge of U.S. copyright law than John Deere does‚Äîhave generally sided with consumers when it comes to repair. In 2015, copyright officials told John Deere that owners do have the right to &lt;a href=&quot;http://www.ipwatchdog.com/2015/11/09/copyright-office-dmca-exemptions-for-automotive-software-jailbreaking-smart-tvs/id=62834/&quot;&gt;repair their own tractors&lt;/a&gt; and other equipment. And, in December 2016, the copyright office concluded &lt;a href=&quot;https://www.copyright.gov/policy/software/software-full-report.pdf&quot;&gt;a yearlong study&lt;/a&gt; [PDF] on copyright law, repair, and embedded software that solidly confirms that repair is legal under copyright law. The same study argues that federal copyright law can‚Äôt be used as an excuse to prevent repair.&lt;/p&gt;
&lt;p&gt;But that hasn‚Äôt stopped some manufacturers from continuing to try. For example, as part of John Deere‚Äôs 2016 End User Licensing Agreement, the buyer agrees to give up all control over the electronics within the machine‚Äîincluding sensors, actuators, and computing units, as well as data, documentation, and diagnostics. What‚Äôs more, the buyer is assumed to have agreed to the contract simply by &lt;a href=&quot;https://www.deere.com/privacy_and_data/docs/agreement_pdfs/english/2016-10-28-Embedded-Software-EULA.pdf&quot;&gt;switching on the machine&lt;/a&gt; [PDF]. There is no discussion. No negotiation. No signature requirement. Just turn the key and you waive your right to own critical parts of the machine you just bought.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So how can people&lt;/strong&gt; in the United States preserve their right to repair electronics? The answer is now apparent: through right-to-repair legislation enacted at the state level.&lt;/p&gt;
&lt;p&gt;Popular support on this issue has been clear since 2012, when 86 percent of the voters in Massachusetts endorsed a ballot initiative that would ‚Äú[require] motor vehicle manufacturers to allow vehicle owners and independent repair facilities in Massachusetts to have access to the same vehicle diagnostic and repair information made available to the manufacturers‚Äô Massachusetts dealers and authorized repair facilities.‚Äù&lt;/p&gt;
&lt;p&gt;Carmakers howled in protest, but after the law passed, they decided not to fight independent repair. Indeed, in January 2014 they entered into a national &lt;a href=&quot;http://www.autocare.org/Government-Affairs/Issues/Links/mou-pdf/&quot;&gt;memorandum of understanding&lt;/a&gt; [PDF], voluntarily extending the terms of the Massachusetts law to the entire country. The &lt;a href=&quot;http://autocare.org/workarea/DownloadAsset.aspx?id=2646&amp;amp;gmssopc=1&quot;&gt;commercial vehicle industry&lt;/a&gt; followed suit in October 2015.&lt;/p&gt;
&lt;p&gt;Now we need right-to-repair legislation for other kinds of equipment, too, particularly electronic equipment, which is the focus of ‚Äúdigital right to repair‚Äù initiatives in many states.&lt;/p&gt;
&lt;p&gt;Similar to the Massachusetts legislation for automobiles, these digital-right-to-repair proposals would require manufacturers to provide access to service documentation, tools, firmware, and diagnostic programs. They also would require manufacturers to sell replacement parts to consumers and independent repair facilities at reasonable prices.&lt;/p&gt;
&lt;p&gt;The bills introduced this year in &lt;a href=&quot;https://repair.org/stand-up&quot;&gt;a dozen states&lt;/a&gt; have some variations. The ones in Kansas and Wyoming, for example, are limited to farm equipment. The one most likely to be adopted soon is in Massachusetts, which seeks to outlaw the monopoly on repair parts and information within the state. If it passes, electronics manufacturers will probably change their practices nationwide.&lt;/p&gt;
&lt;p&gt;Consumers would then have more choices when something breaks. The next time your smartphone screen cracks, your microwave oven gets busted, or your TV dies, you may be able to get it fixed quickly, affordably, and fairly. And you, not the manufacturer, would decide where your equipment is repaired: at home, with the manufacturer, or at a local repair shop that you¬†trust.&lt;/p&gt;
&lt;p&gt;The right to repair electronics isn‚Äôt just about repair or even about technology‚Å†‚Äîit‚Äôs about ownership. You bought the thing, and therefore you¬†own it‚Äîand¬†not just part of it but all of it. And that means you should be¬†able to fix it¬†or get it fixed by whomever you choose. The terms of ownership shouldn‚Äôt change just because the product has a chip in¬†it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This article appears in the November 2017 print issue as ‚ÄúThe Fight to Fix¬†It.‚Äù&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;About the Author&lt;/h2&gt;
&lt;p&gt;Kyle Wiens is cofounder and CEO of &lt;a href=&quot;https://www.ifixit.com/&quot;&gt;iFixit&lt;/a&gt;. Gay Gordon-Byrne is executive director of &lt;a href=&quot;https://repair.org/&quot;&gt;Repair.org&lt;/a&gt;.¬†&lt;/p&gt;
</description>
<pubDate>Wed, 25 Oct 2017 01:05:08 +0000</pubDate>
<dc:creator>sohkamyung</dc:creator>
<og:title>Why We Must Fight for the Right to Repair Our Electronics</og:title>
<og:url>https://spectrum.ieee.org/green-tech/conservation/why-we-must-fight-for-the-right-to-repair-our-electronics</og:url>
<og:description>Pending U.S. legislation could force manufacturers to make repair parts and information available at fair prices</og:description>
<og:image>https://spectrum.ieee.org/image/Mjk2ODY0Ng.jpeg</og:image>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://spectrum.ieee.org/green-tech/conservation/why-we-must-fight-for-the-right-to-repair-our-electronics</dc:identifier>
</item>
<item>
<title>Dynamic Progamming: First Principles</title>
<link>http://www.flawlessrhetoric.com/Dynamic-Programming-First-Principles</link>
<guid isPermaLink="true" >http://www.flawlessrhetoric.com/Dynamic-Programming-First-Principles</guid>
<description>&lt;h2 id=&quot;dynamic-programming&quot;&gt;Dynamic Programming&lt;/h2&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Dynamic Programming is a mathematical tool for finding the optimal algorithm of a problem, often employed in the realms of computer science.&lt;/p&gt;
&lt;p&gt;During the autumn of 1950, Richard Bellman, a tenured professor from Stanford University began working for RAND (Research and Development) Corp, whom suggested he begin work on multistage decision processes. During the 1950s, Charles Erwin Wilson was the Secretary of Defence for the United States, and as RAND was employed by the U.S Air Force, Wilson was virtually their boss. Wilson, originally an electrical engineer, ironically had a hatred for the word ‚Äòresearch‚Äô, and so Bellman had to come up with an alternative name to hide the fact that he was purely researching mathematics. To convey that Bellman‚Äôs research was about planning and decision making, he used the word ‚Äòprogramming‚Äô, and prefixed it with ‚Äòdynamic‚Äô, to convey that it was multistage and had time variances [1]. Bellman, due to the aforementioned recommendations by RAND, developed an approach that would break down a large or complex problem into a series of smaller problems. Through solving these smaller problems, the optimal solution to the overall problem is discovered.&lt;/p&gt;
&lt;p&gt;The aim of Dynamic Programming is the use of past values for the procurement of a solution to a problem. This is done to avoid unnecessary computation of the same calculation that problems may contain, optimising, enabling computer algorithms to run as efficiently as possible. It aims to find the optimal substructure of a problem (if it exists), and to eliminate any occurrences of overlapping sub problems.&lt;/p&gt;
&lt;p&gt;Dynamic Programming works in contrast to Linear Programming. Whilst it is concerned with functional relations and multi-stage decision processes, Linear Programming is a method used to achieve the best result based upon linear relationships [2].&lt;/p&gt;
&lt;h3 id=&quot;optimal-substructures&quot;&gt;Optimal Substructures&lt;/h3&gt;
&lt;p&gt;When Dynamic Programming is applied, breaking up a problem and reconstructing it, we often find the optimal substructure of a problem. A solution is said to have an optimal substructure if it can be defined based upon optimal solutions of its sub problems.&lt;/p&gt;
&lt;p&gt;For example, the shortest path problem has the optimal substructure property. If we have three sequentially placed locations, X, Y, and Z, and we wish to find the optimal distance of X to Z. The solution can be defined as the sum of the optimal solutions between X to Y, and Y to Z, therefore X to Z can be defined based upon the optimal solutions of it‚Äôs sub problems.&lt;/p&gt;
&lt;h3 id=&quot;overlapping-sub-problems&quot;&gt;Overlapping Sub-Problems&lt;/h3&gt;
&lt;p&gt;A problem or function contains overlapping problems if it can be broken down into a series of smaller problems, and some are duplicates. The need for the problem to compute the same calculation many times over can cause large increases in the running time of the problem. Dynamic Programming aims to remove the need to compute the same calculations multiple times.&lt;/p&gt;
&lt;h3 id=&quot;memoisation&quot;&gt;Memoisation&lt;/h3&gt;
&lt;p&gt;Memoisation , also known as caching, is a technique used in Computer Science, which stores the results of functions and calculations, and uses them if the calculations are needed again. Due to the fact that memory is finite, memoisation is not feasible in all situations, and thus, needs to be used appropriately and sparingly, especially when it comes to large applications. Tail recursion [3], a variant of traditional recursion implements memoisation, which uses memoisation very economically.&lt;/p&gt;
&lt;h3 id=&quot;fibonacci-an-elementary-use-of-dynamic-programming&quot;&gt;Fibonacci: An elementary use of Dynamic Programming&lt;/h3&gt;
&lt;p&gt;One of the simplest problems that can be optimised with a Dynamic Programming approach is the Fibonacci number. The Fibonacci number (also known as the Fibonacci sequence) is a series of numbers where the leading number is the sum of the previous two numbers (modern interpretation) [4].&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;0,1,1,2,3,5,8,13,21,34‚Ä¶
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;It is named after Italian mathematician Leonardo of Pisa (commonly known as Fibonacci), whom described the sequence in his book Liber Abaci during 1202 AD. It had previously been described in Indian Mathematics, but had not yet encountered the western world [5].&lt;/p&gt;
&lt;p&gt;Fibonacci can be described as follows;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;F0 = 0
F1 = 1
Fn = F(n-1) + F(n-2),
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;For example;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;F3 = F(2)  + F(1)
F3 = (F(1) + F(0))  + 1
F3 = (1 + 0) + 1
F3 = 2
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;This poses a problem. Computing a Fibonacci number greater than two will force overlapping sub problems. &lt;img src=&quot;https://i.imgur.com/T3olAmi.png&quot; alt=&quot;fibonacci of four&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The figure above represents the structure of the Fibonacci sequence of four. The Fibonacci number of four will compute the Fibonacci of two twice. The number of overlapping sub problems will grow exponentially as the Fibonacci number is increased, and thus the running time to compute it.&lt;/p&gt;
&lt;p&gt;We can use Dynamic Programming (and memoisation) to mitigate these unneeded computations, and define the Fibonacci Number of n as follows;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Fibonacci (n, i = 0, a = 0, b = 1 )
{
      if ( i &amp;lt; n )
        Fibonacci( n, i+1, b, a+b )
      return b;
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;This approach first checks if we have reached the desired number, if not, it computes the sequence. It will never call a number that has already been calculated, and will instead use memoisation and pass the previous (to the current number we are at) two values to the function to calculate them.&lt;/p&gt;
&lt;h3 id=&quot;economic-optimisation-a-canonical-example-of-dynamic-programming&quot;&gt;Economic Optimisation: A Canonical example of dynamic programming.&lt;/h3&gt;
&lt;p&gt;Various economic problems, especially around stage based decision making can be solved through the use of dynamic programming.&lt;/p&gt;
&lt;p&gt;Michael Tick describes the following problem. A corporation owning a number of plants has funds to invest, with each of the plants providing a number of proposals of what returns it can provide depending on how many funds it is allocated. This problem can be solved quite nicely with dynamic programming [6].&lt;/p&gt;
&lt;p&gt;The total number of solutions is the number of proposals in each plant multiplied, in Ticks case there are 24 possible solutions (3 x 4 x 2). Enumerating of all solutions is infeasible due to the fact that many solutions may not be possible with the funds available, and are not worth calculation, and for problems containing lots of proposals, it may not be computationally feasible. Enumerating over all solutions is also not efficient, we do not look at previous solutions to eliminate possible, inferior (less generated revenue) solutions.&lt;/p&gt;
&lt;p&gt;This is where dynamic programming can come into use. We can employ it to develop a solution that will take into consideration the available funds as well as previously tested solutions.&lt;/p&gt;
&lt;h3 id=&quot;solution-design&quot;&gt;Solution Design&lt;/h3&gt;
&lt;p&gt;A solution was developed using dynamic programming to approach this problem, written in C++.&lt;/p&gt;
&lt;h4 id=&quot;proposals&quot;&gt;Proposals&lt;/h4&gt;
&lt;p&gt;Proposals contain three integers, an index (their position in the plant), as well as their cost, and revenue. These are only set in the constructor and can be accessed but not changed.&lt;/p&gt;
&lt;h4 id=&quot;plant&quot;&gt;Plant&lt;/h4&gt;
&lt;p&gt;Each plant contains a vector of proposals, which it creates when the constructor is invoked. It can return a reference to the vector of it‚Äôs proposals, as well as the number of proposals it contains.&lt;/p&gt;
&lt;h4 id=&quot;stage&quot;&gt;Stage&lt;/h4&gt;
&lt;p&gt;This class contains the algorithm. Each state maintains a list of proposals (from the given plant), as well as a map, it‚Äôs key the cost, and value the revenue it generates. The stage takes a previous stage (or null if it is the first).&lt;/p&gt;
&lt;p&gt;If it is the first stage, then revenue is just the possible proposals that cost less than the funds available. If we are on any of the stages after the initial, we begin iterating through each of the proposals. If the cost of that proposal is less than or equal to the available funds, then we assign the revenue to a temporary variable, and if any funds remain, we access the revenue from the previous stage for the remaining funds, adding it to the temporary variable. It is then checked against the previous stage‚Äôs revenue for that cost. If it is greater, then it is the new revenue for that cost, if not, we get use the previous stage‚Äôs revenue for that cost.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/y22pJjW.png&quot; alt=&quot;UML&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This solution uses Tail Recursion. Each stage does its necessary calculations, then passes its information to the next stage which is the natural solution to the problem. Each stage will asses it‚Äôs plant‚Äôs proposals compared to the available funds, and then pass its information to the next stage. Whilst the approach finds the best solution, it does not return the proposals used, only the possible revenue and the cost it will require. The map of cost to revenue, implements the memoisation aspect of the algorithm.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if first stage
  foreach proposal in plant
    if proposal cost &amp;lt;= available funds
      if Revenue[proposal cost] &amp;lt; revenue of new proposal
        Revenue[proposal cost] = revenue of new proposal
else
  foreach proposal in plant
    if proposal cost &amp;lt;= available funds
      revenue = proposal revenue
      remaining funds = funds - proposal cost
      if remaining funds &amp;gt; 0
        (revenue-1,cost-1) = max Stage-1[remaining funds]
      revenue += revenue-1
      cost = propsal cost + cost-1
      if Revenue[cost] &amp;lt; revenue
        Revenue[cost] = revenue
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Whilst solvable, Tick makes several assumptions. Firstly, his solution assumes that each plant will have a proposal enacted upon, and secondly, that we use all the funds with the remainder not included in the revenue created in the end.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Dynamic Programming is an essential tool for solving multistage problems. It helps find the optimal substructure of a problem where possible, and remove any overlapping sub problems. It is applicable for smaller problems, such as Fibonacci, and larger problems such as economic optimisations. This report is by no means an extensive or advanced approach to dynamic programming, and aims only to introduce the concept of dynamic programming, and explain how it works on a rudimentary example.&lt;/p&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;[1] R. Bellman, Eye of the hurricane. Singapore: World Scientific, 1984&lt;/li&gt;
&lt;li&gt;[2] S. Dreyfus, ‚ÄúA Comparison of Linear Programming and Dynamic Programming‚Äù, RAND, 1956.&lt;/li&gt;
&lt;li&gt;[3] D. Friedman and M. Want, Essentials of Programming Languages. MIT Press, 1999.&lt;/li&gt;
&lt;li&gt;[4] ‚ÄúFibonacci number‚Äù, En.wikipedia.org, 2017. [Online]. Available: https://en.wikipedia.org/wiki/Fibonacci_number. [Accessed: 22- Oct- 2017].&lt;/li&gt;
&lt;li&gt;[5] L. Fibonacci and L. Sigler, Fibonacci‚Äôs Liber abaci. New York: Springer, 2003.&lt;/li&gt;
&lt;li&gt;[6] M. Tick, ‚ÄúA Tutorial on Dynamic Programming‚Äù, Mat.gsia.cmu.edu, 2017. [Online]. Available: http://mat.gsia.cmu.edu/classes/dynamic/dynamic.html. [Accessed: 30- Oct- 2015].&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The source code can be found &lt;a href=&quot;https://github.com/Foxh0und/dynamicprogramming&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Tue, 24 Oct 2017 22:15:04 +0000</pubDate>
<dc:creator>foxh0und</dc:creator>
<og:title>Dynamic Programming: First Principles</og:title>
<og:url>https://rsms.me/Dynamic-Programming-First-Principles</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.flawlessrhetoric.com/Dynamic-Programming-First-Principles</dc:identifier>
</item>
<item>
<title>AMD Announces 307% Increase in Q3 Earnings</title>
<link>http://markets.businessinsider.com/news/stocks/amd-earnings-stock-price-q3-results-2017-10-1005485288</link>
<guid isPermaLink="true" >http://markets.businessinsider.com/news/stocks/amd-earnings-stock-price-q3-results-2017-10-1005485288</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://static4.businessinsider.com/image/59ef97bdb914f01f008b457a-895/screen-shot-2017-07-31-at-105818-am.png&quot; alt=&quot;amd ryzen threadripper cpu&quot; class=&quot;img-responsive imported-news-img&quot;/&gt;&lt;span class=&quot;source&quot;&gt;YouTube/HardwareCanucks&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://markets.businessinsider.com/stock/amd-Quote?utm_source=markets&amp;amp;utm_medium=ingest&quot; target=&quot;_blank&quot;&gt;AMD&lt;/a&gt;¬†reported earnings after the bell on Tuesday.&lt;/p&gt;
&lt;p&gt;The company¬†earned an adjusted $0.10¬† a share on revenue of¬†$1.64, outpacing the $0.08 and $1.51 billion that Wall Street was anticipating.¬†&lt;/p&gt;
&lt;p&gt;The company released lower guidance for the fourth quarter, though. &quot;&lt;span&gt;For the fourth quarter of 2017, AMD expects revenue to decrease approximately 15 percent sequentially,&quot; the company¬†said in its release.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Shares of AMD were down¬†as much as 11% in after-market trading.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;‚ÄúStrong customer adoption of our new high-performance products drove significant revenue growth and improved financial results from a year ago,‚Äù CEO¬†&lt;/span&gt;Lisa Su said in the company's release.&lt;/p&gt;
&lt;p&gt;AMD's third-quarter earnings come as the company¬†ramps up its product lines to better compete with competitors Nvidia and Intel. &lt;a href=&quot;http://markets.businessinsider.com/news/stocks/amd-nvidia-stock-price-partnership-with-tesla-wont-be-enough-2017-9-1002399588?utm_source=markets&amp;amp;utm_medium=ingest&quot; target=&quot;_blank&quot;&gt;AMD is reportedly working with Tesla to develop a custom self-driving chip for its vehicles&lt;/a&gt;¬†which would replace the Nvidia chips Tesla currently uses in its vehicles.&lt;/p&gt;
&lt;p&gt;AMD's Radeon RX Vega series of graphics processing units &lt;a href=&quot;http://markets.businessinsider.com/news/stocks/amd-threadripper-radeon-rx-vega-price-release-date-2017-7-1002219755?utm_source=markets&amp;amp;utm_medium=ingest&quot; target=&quot;_blank&quot;&gt;were introduced early in the quarter&lt;/a&gt; and are positioned to compete directly with Nvidia's series of GPUs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://markets.businessinsider.com/news/stocks/amd-threadripper-radeon-rx-vega-price-release-date-2017-7-1002219755?utm_source=markets&amp;amp;utm_medium=ingest&quot; target=&quot;_blank&quot;&gt;AMD also introduced its Threadripper series&lt;/a&gt; of central processing units to compete with Intel's mostly dominant hold of the CPU market.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static2.businessinsider.com/image/59efb4b28280a621008b4861-775/screen-shot-2017-10-24-at-54542-pm.png&quot; alt=&quot;Screen Shot 2017 10 24 at 5.45.42 PM&quot; class=&quot;img-responsive imported-news-img&quot;/&gt;&lt;span class=&quot;source&quot;&gt;Markets Insider&lt;/span&gt;&lt;/p&gt;


</description>
<pubDate>Tue, 24 Oct 2017 21:38:33 +0000</pubDate>
<dc:creator>baazaar</dc:creator>
<og:title>AMD says its going to see a big drop in revenue, shares sink (AMD)</og:title>
<og:type>article</og:type>
<og:image>http://static4.businessinsider.com/image/59ef97bdb914f01f008b457a-895/screen-shot-2017-07-31-at-105818-am.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>http://markets.businessinsider.com/news/stocks/amd-earnings-stock-price-q3-results-2017-10-1005485288</dc:identifier>
</item>
<item>
<title>The Uncanny Resurrection of Dungeons and Dragons</title>
<link>https://www.newyorker.com/culture/cultural-comment/the-uncanny-resurrection-of-dungeons-and-dragons</link>
<guid isPermaLink="true" >https://www.newyorker.com/culture/cultural-comment/the-uncanny-resurrection-of-dungeons-and-dragons</guid>
<description>&lt;p data-reactid=&quot;143&quot;&gt;The clinical psychologist Jon Freeman was feeling burnt out. He spent his days at a corporate office in Manhattan, managing dozens of research assistants as they tested pharmaceuticals on people with anxiety, depression, and insomnia. Looking for an escape hatch, he noticed that his daughter often had nothing to do after school. She would pick up her Nintendo Wii controller and drift ‚Äúinto this world of digital isolation,‚Äù Freeman &lt;a href=&quot;https://vimeo.com/123222452&quot; target=&quot;_blank&quot; class=&quot;ArticleBody__link___1FS03&quot; data-reactid=&quot;147&quot;&gt;recalled&lt;/a&gt;. From time to time, he enticed her back into social existence with board games. ‚ÄúThen I had this idea: Couldn‚Äôt we do this on a larger scale? Could we expand this to our neighborhood?‚Äù&lt;/p&gt;
&lt;p data-reactid=&quot;150&quot;&gt;Freeman quit his job, and, shortly thereafter, in 2011, the first customers‚Äîinitially, his daughter‚Äôs friends‚Äîarrived at his pop-up board-game club and caf√©, Brooklyn Strategist, a place where children and their parents could sit down and play games, both classic and obscure, over veggie platters and homemade ginger ale. Looking back at his work in the research lab, he paired cognitive-ability tests with the board games that he had on hand, and divided these amusements by brain function‚Äîkids worked their way around their frontal lobes a die roll at a time.&lt;/p&gt;
&lt;p data-reactid=&quot;152&quot;&gt;One day, a child who had grown tired of a sports-statistics game asked if Freeman had heard of the role-playing game Dungeons &amp;amp; Dragons, and if they could play it. The game has no board and no cards. Occasionally, players make use of maps. At its best, it‚Äôs a story told between the players, who control characters (elves, dwarves, gnomes, humans), and the Dungeon Master, who describes the world and uses dice to determine outcomes in the second person (‚ÄúYou come across a band of orcs, travelling down the road. What do you do?‚Äù). Freeman refused for a week or two‚Äîthe game was too open-ended, and didn‚Äôt have a straightforward cognitive benefit‚Äîbut the customer persisted, so he went up into his parents‚Äô attic, dug out all his old D. &amp;amp; D. manuals, and wrote an adventure. ‚ÄúI tried to give them a little flavor of everything,‚Äù he told me, ‚ÄúA little dungeon crawl, a little fighting monsters. They ate it up.‚Äù Word got out. A few months later, a parent stopped him on the street with tears in her eyes. ‚ÄúWhat are you guys doing?‚Äù she asked him. Her son was dyslexic and had been role-playing at Brooklyn Strategist for a couple of weeks. Before D. &amp;amp; D., he couldn‚Äôt focus on writing for more than a few seconds. Now he was staying up all night to draft stories about his character. ‚ÄúWhatever it is, bottle it and sell it to me,‚Äù the mother said.&lt;/p&gt;
&lt;p data-reactid=&quot;154&quot;&gt;Freeman got a permanent space in 2012 and added French-press coffee. A few months later, &lt;em data-reactid=&quot;156&quot;&gt;Gygax&lt;/em&gt;, a once defunct magazine named for the Dungeons &amp;amp; Dragons co-creator Gary Gygax, chose Brooklyn Strategist to host its relaunch party. A reporter for &lt;em data-reactid=&quot;159&quot;&gt;Wired&lt;/em&gt;, covering the event, asked the magazine‚Äôs founders why they wanted to waste their energy on such a publication (not to mention such a store) when ‚Äúit‚Äôs video games, not Dungeons and Dragons and other RPGs, that are getting all the attention?‚Äù This attention, it seems, has shifted. Two popular role-playing shows, ‚ÄúThe Adventure Zone‚Äù and ‚ÄúCritical Role,‚Äù sent Freeman‚Äôs older patrons to their knees, begging for more D. &amp;amp; D. time in the store. Soon, Freeman had to hire half a dozen paid Dungeon Masters for the kids and has now begun training volunteer Dungeon Masters to guide adventures for the adults who drop in on Thursdays to fight goblins, trick castle guards, and drink wine.&lt;/p&gt;
&lt;p data-reactid=&quot;162&quot;&gt;Dungeons &amp;amp; Dragons nights have spread into classrooms and game stores across the country. Forty dollars in Portland, Oregon, gets you into Orcs! Orcs! Orcs!, a ‚ÄúTavern-inspired‚Äù pop-up restaurant with D. &amp;amp; D. games and artisanal delicacies. (One night, it boasted ‚Äútankards of beer‚Äù and ‚Äúa whole roast pig.‚Äù) In Massachusetts, snow or shine, a series of role-playing camps called Guard Up offers children the chance to chase each other through the fields of Burlington with foam swords and Nerf blasters, while somehow also learning. (&lt;a href=&quot;https://ww2.kqed.org/mindshift/2017/04/06/how-a-sword-and-sorcery-camp-uses-immersive-role-play-to-teach-steam/&quot; target=&quot;_blank&quot; class=&quot;ArticleBody__link___1FS03&quot; data-reactid=&quot;164&quot;&gt;Each summer&lt;/a&gt;, in one camp, novels like ‚ÄúAnimal Farm‚Äù or ‚ÄúTwenty Thousand Leagues Under the Sea‚Äù are adapted into a mock zombie apocalypse that is then played out by the campers. In another, at a moment of detente, Gandalf might appear on the edge of a running track to give physics lessons.) ‚ÄúI‚Äôve had parents get very upset with me,‚Äù said Freeman, who recently opened another store near Columbia University. ‚ÄúBecause they sign their kids up for role playing and my staff is trying to expand their horizons beyond D. &amp;amp; D. and into other independent games. But the parents are, like, ‚ÄòIf they can‚Äôt play D. &amp;amp; D., then I don‚Äôt know if this is going to work.‚Äô ‚Äù&lt;/p&gt;
&lt;p data-reactid=&quot;167&quot;&gt;This turn of events might shock a time traveller from the twentieth century. In the seventies and eighties, Dungeons &amp;amp; Dragons, with its supernatural themes, became the fixation of an overheated news media in the midst of a culture war. Role players were seen as closet cases, the least productive kind of geek, retreating to basements to open maps, spill out bags of dice, and light candles by which to see their medieval figurines. They squared with no one. Unlike their hippie peers, they had dropped out without bothering to tune in. On the other side of politics,Christian moralists‚Äô cries of the occult and anxiety about witchcraft followed D. &amp;amp; D. players everywhere. Worse still, parents feared how this enveloping set of lies about druids in dark cloaks and paladins on horseback could tip already vulnerable minds off the cliff of reality. At the end of the 1982 TV movie ‚ÄúMazes and Monsters,‚Äù a troubled gamer, played by a pre-fame Tom Hanks, loses touch and starts to believe that he really does live beside an evil wood in need of heroes. ‚ÄúHe saw the monsters. We did not,‚Äù his ex-girlfriend says in a voice-over. ‚ÄúWe saw nothing but the death of hope, and the loss of our friend.‚Äù&lt;/p&gt;
&lt;p data-reactid=&quot;171&quot;&gt;Decades passed, D. &amp;amp; D. movies and cartoons came and went, and the game remade itself over and over. But interest fell like an orc beneath a bastard sword. The game‚Äôs designers, surrounded by copycats and perplexed about how to bring D. &amp;amp; D. online, made flat-footed attempts at developing new rule books to mimic the video games that D. &amp;amp; D. had inspired. Gygax died, in 2008, occasioning a wealth of tributes but little enthusiasm. Then, a fifth edition of D. &amp;amp; D. rules came out, in 2014, and, somehow, the culture was receptive again to bags of holding and silver-haired drow. People started buying up these volumes in droves. ‚ÄúMore people are interested in D&amp;amp;D than we thought,‚Äù the game‚Äôs lead developer, Mike Mearls, &lt;a href=&quot;https://www.polygon.com/2015/8/20/9172559/dungeons-dragons-dnd-4th-edition-one-year-later-twitch-youtube&quot; target=&quot;_blank&quot; class=&quot;ArticleBody__link___1FS03&quot; data-reactid=&quot;173&quot;&gt;said&lt;/a&gt;, as print runs repeatedly sold out. ‚ÄúWho are these people? What do they want?‚Äù&lt;/p&gt;
&lt;p data-reactid=&quot;176&quot;&gt;In 2017, gathering your friends in a room, setting your devices aside, and taking turns to contrive a story that exists largely in your head gives off a radical whiff for a completely different reason than it did in 1987. And the fear that a role-playing game might wound the psychologically fragile seems to have flipped on its head. Therapists use D. &amp;amp; D. to get troubled kids to talk about experiences that might otherwise embarrass them, and children with autism use the game to improve their social skills. Last year, researchers found that a group of a hundred and twenty-seven role players exhibited above-average levels of empathy, and a Brazilian study from 2013 showed that role-playing classes were an extremely effective way to teach cellular biology to medical undergraduates.&lt;/p&gt;
&lt;p data-reactid=&quot;178&quot;&gt;Adult D. &amp;amp; D. acolytes are everywhere now, too. The likes of Drew Barrymore and Vin Diesel regularly take up the twenty-sided die (or at least profess to do so). Tech workers from Silicon Valley to Brooklyn have long-running campaigns, and the showrunners and the novelist behind ‚ÄúGame of Thrones‚Äù have all been Dungeon Masters. (It‚Äôs also big with comedy improvisers in Los Angeles, but it‚Äôs no surprise that theatre kids have nerdy hobbies.) Nevertheless, the image of the recluse persists even among fans. ‚ÄúWe‚Äôre going to alienate ninety-nine per cent of the people out there right now,‚Äù Stephen Colbert told Anderson Cooper last year, on ‚ÄúThe Late Show,‚Äù as they fondly recalled their respective turns as an elven thief and a witch. ‚ÄúThe shut-in at home is really excited,‚Äù Cooper replied. ‚ÄúNeckbeards,‚Äù Colbert added.&lt;/p&gt;
&lt;p data-reactid=&quot;180&quot;&gt;The ‚Äúneckbeards‚Äù may be more numerous now than he and Cooper realize. ‚ÄúThe Big Bang Theory‚Äù is a sitcom about young scientists at CalTech who spend most of their time shuttling between their laboratories and the comic-book store. The show‚Äôs protagonists also play a lot of D. &amp;amp; D. In one episode, a theoretical physicist takes on the guise of the Dungeon Master to relieve a microbiologist of her distress over the restraints of her pregnancy. She pretends, for an evening, to live in a world where only men are with child (‚ÄúYour husband is home trying not to pee when he laughs‚Äù), to drink ale out of the skull of a goblin, and to eat sushi made from the meat of a monster that she has butchered herself. Fourteen million people tuned in.&lt;/p&gt;
&lt;p data-reactid=&quot;182&quot;&gt;Dungeons &amp;amp; Dragons seems to have been waiting for us somewhere under the particular psyche of this generation, a psyche that may have been coaxed into fantasy mania by the media that surrounded it. Many were seeded with ‚ÄúHarry Potter‚Äù books as children, raised with the ‚ÄúLord of the Rings‚Äù movies (and more ‚ÄúHarry Potter‚Äù in cinematic splendor), and brought to blossom in adulthood by ‚ÄúGame of Thrones‚Äù on television. Let us not forget the imminent return of ‚ÄúStranger Things,‚Äù a show in which something akin to Dungeons &amp;amp; Dragons not only literally lurks in the wings but is also played by the central characters.&lt;/p&gt;
&lt;p data-reactid=&quot;184&quot;&gt;Last year, Dan Harmon, the creator of ‚ÄúCommunity‚Äù and an avid D. &amp;amp; D. player, produced and starred in ‚ÄúHarmonQuest,‚Äù a role-playing television show with celebrity guests. He offered his theory of the game‚Äôs popularity: we have always been geeks, but we didn‚Äôt know how to break it to each other. Being a nerd is ‚Äúnot about IQ or different characteristics, it‚Äôs all about obsession and focus and taking something seriously,‚Äù he told &lt;em data-reactid=&quot;186&quot;&gt;Entertainment Weekly&lt;/em&gt;. ‚ÄúThe internet really allowed everyone to realize that everyone was a nerd.‚Äù Sometimes the Internet reveals these truths even more plainly. In a &lt;a href=&quot;https://www.theatlantic.com/magazine/archive/2017/01/my-president-was-black/508793/&quot; target=&quot;_blank&quot; class=&quot;ArticleBody__link___1FS03&quot; data-reactid=&quot;189&quot;&gt;recent article for &lt;em data-reactid=&quot;191&quot;&gt;The Atlantic&lt;/em&gt;&lt;/a&gt;, about the rise of white supremacy in the U.S., Ta-Nehisi Coates wrote of ‚Äúeldritch energies‚Äù released by an ‚Äúorcish reality-television star.‚Äù When someone on Twitter pointed out his word choice, &lt;a href=&quot;https://twitter.com/tanehisicoates/status/905784619068518403&quot; target=&quot;_blank&quot; class=&quot;ArticleBody__link___1FS03&quot; data-reactid=&quot;194&quot;&gt;Coates replied&lt;/a&gt;, ‚ÄúDungeon &amp;amp; Dragons was my first literature‚Äîthat and hip-hop. Can‚Äôt escape who you are.‚Äù&lt;/p&gt;
&lt;p data-reactid=&quot;199&quot;&gt;Although, no doubt, escaping is part of the draw. Observe the throngs that have harkened the call to break out dice and pencils for a fight against a demon lord and you might think it‚Äôs not that something hidden has come to light but, rather, that the terms of hiding have changed. When mainstream American culture was largely about standing in a factory line, or crowding into smoke-stained boardrooms for meetings, or even dropping acid and collapsing in a field for your hundred-person ‚Äúbe-in,‚Äù the idea of retiring to a dimly lit table to make up stories with three or four friends seemed fruitless and antisocial. Now that being American often means being alone or interacting distantly‚Äîfidgeting with Instagram in a crosswalk, or lying prone beneath the heat of a laptop with Netflix streaming over you‚Äîthree or four people gathering in the flesh to look each other in the eye and sketch out a world without pixels can feel slightly rebellious, or at least pleasantly out of place.&lt;/p&gt;
&lt;p data-reactid=&quot;201&quot;&gt;Thirty or forty years ago, people reached through the dice-rolling mathematics of Dungeons &amp;amp; Dragons for a thrilling order that video games, and the world at large, couldn‚Äôt yet provide. Today, the chaos of physical dice is reassuringly clunky and slow compared to the speed with which you nervously tally the likes under a Facebook post. Rejecting your feed for an evening isn‚Äôt like rejecting the God-fearing community that reared you, but something heretical lingers in this lo-fi entertainment.&lt;/p&gt;
&lt;p data-reactid=&quot;203&quot;&gt;To be sure, the latest generation of dungeon delvers has also brought in new technologies to help conduct what might otherwise be a freeform narrative. Dungeon Masters often keep computers nearby to look up forgotten rules or project maps of fantasy villages onto walls and move characters across them like chess pieces. Many players sit at separate screens, with microphones at their chins, and cast their spells by video conference.&lt;/p&gt;
&lt;p data-reactid=&quot;205&quot;&gt;And yet the emphasis, even these days, is not on such forms but on moving beyond them. A decade ago, when developers attempted to bring Dungeons &amp;amp; Dragons into the twenty-first century by stuffing it with rules so that it might better resemble a video game, the glue of the game, the narrative aspect that drew so many in, melted away. Players hacked monsters to death, picked up treasure, collected experience points, and coolly moved through preset challenges. The plotters of the game‚Äôs fifth edition seemed to remember that D. &amp;amp; D.‚Äôs strength lay in creating indulgent spaces (get lost in your gnomish identity, quest or don‚Äôt, spend time flirting in the tavern) and opposing whatever modes of human industry prevailed among the broader public. D. &amp;amp; D. now has vastly simpler rules than those found in an iTunes terms-and-conditions agreement. The structures the designers made are also simpler and more subjective. If a player thinks of something clever, you don‚Äôt have to thumb through a handbook for a strictly defined bonus. The Dungeon Master can ponder the idea for a moment‚Äîcould a dwarf with low charisma, with a few well-chosen compliments, really convince a city of elves to love him?‚Äîand then decide to reward the player with an extra chance to succeed.&lt;/p&gt;
&lt;p data-reactid=&quot;207&quot;&gt;Game engineers have begun to describe D. &amp;amp; D. as though it were crafted as a pastime for Bronze Age poets. ‚ÄúEver since we were primitive sitting around campfires, we‚Äôve been telling stories to each other, and listening to each other tell stories to each other,‚Äù a D. &amp;amp; D. designer explained. ‚ÄúThere‚Äôs really nothing out there that can perfectly emulate it digitally.‚Äù And we know that Gygax would approve. Earlier this year, a graphic novel titled ‚Äú&lt;a href=&quot;https://www.amazon.com/Rise-Dungeon-Master-Gygax-Creation/dp/1568585594/&quot; target=&quot;_blank&quot; class=&quot;ArticleBody__link___1FS03&quot; data-reactid=&quot;209&quot;&gt;Rise of the Dungeon Master&lt;/a&gt;,‚Äù based on interviews for a &lt;em data-reactid=&quot;212&quot;&gt;Wired&lt;/em&gt; article by David Kushner, depicted the D. &amp;amp; D. creator robed and on a throne, playing one final session just before his death. ‚ÄúD&amp;amp;D is not an online game,‚Äù he told Kushner. ‚ÄúThere is no role-playing in an online game that can match what happens in person.‚Äù&lt;/p&gt;
&lt;p data-reactid=&quot;215&quot;&gt;I've found this, too, at my own table. A few months ago, I was in San Francisco running D. &amp;amp; D. games for three groups of people. They came to my house to take a break from their careers at Google or Airbnb, or their Ph.D. dissertations on Soviet film or medieval manners. For three or four hours, they would concentrate instead on how they could convince a goblin to overthrow his king. During one game, a player felt his phone shaking in his pocket, revealed its glowing surface, and, from three thousand miles away, saw the news that the national-security adviser Michael Flynn had resigned from the Trump Administration. ‚ÄúPut it away,‚Äù another player snapped. ‚ÄúThat‚Äôs what I came here to escape.‚Äù&lt;/p&gt;
</description>
<pubDate>Tue, 24 Oct 2017 21:27:40 +0000</pubDate>
<dc:creator>petethomas</dc:creator>
<og:image>https://media.newyorker.com/photos/59e52bbe0349d052ad1750ef/16:9/w_1200,h_630,c_limit/steed.dand.jpg</og:image>
<og:title>The Uncanny Resurrection of Dungeons &amp; Dragons</og:title>
<og:description>Dungeons &amp; Dragons seems to have been waiting for us somewhere under the particular psyche of this generation.</og:description>
<og:url>https://www.newyorker.com/culture/cultural-comment/the-uncanny-resurrection-of-dungeons-and-dragons</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.newyorker.com/culture/cultural-comment/the-uncanny-resurrection-of-dungeons-and-dragons</dc:identifier>
</item>
<item>
<title>How We Bootstrapped Our SaaS Startup to Ramen Profitability</title>
<link>https://blog.canny.io/saas-startup-ramen-profitability/</link>
<guid isPermaLink="true" >https://blog.canny.io/saas-startup-ramen-profitability/</guid>
<description>&lt;div id=&quot;wtr-content&quot; data-bg=&quot;#FFFFFF&quot; data-fg=&quot;#525df9&quot; data-width=&quot;4&quot; data-mute=&quot;1&quot; data-fgopacity=&quot;0.80&quot; data-mutedopacity=&quot;0.5&quot; data-placement=&quot;top&quot; data-placement-offset=&quot;0&quot; data-placement-touch=&quot;top&quot; data-placement-offset-touch=&quot;0&quot; data-transparent=&quot;&quot; data-touch=&quot;&quot; data-comments=&quot;&quot; data-commentsbg=&quot;#ffcece&quot; data-location=&quot;page&quot; data-mutedfg=&quot;#525df9&quot;&gt;
&lt;p&gt;It‚Äôs been seven months since we launched our SaaS startup and we‚Äôre &lt;a href=&quot;http://www.paulgraham.com/ramenprofitable.html&quot;&gt;ramen¬†profitable&lt;/a&gt;. Canny makes enough to pay for its own expenses and our personal living¬†expenses.&lt;/p&gt;
&lt;p&gt;This is far less money than we made working at Facebook, but a huge milestone for our bootstrapped startup. We‚Äôve eliminated one of the biggest risks of failure: running out of¬†money.&lt;/p&gt;
&lt;p&gt;In this post I‚Äôll cover how we got here, and what we‚Äôve¬†learned.&lt;/p&gt;
&lt;h2&gt;How we found our burning problem&lt;/h2&gt;
&lt;p&gt;I won‚Äôt bore you with generic advice. You‚Äôve heard it a thousand times. Solve a burning problem! Make something people want! Great advice, but not super¬†actionable.&lt;/p&gt;
&lt;p&gt;Instead, I‚Äôll share how we found our burning¬†problem.&lt;/p&gt;
&lt;p&gt;We actually started with a problem of our own, then pivoted to a more valuable¬†one.&lt;/p&gt;
&lt;h2&gt;Our original problem&lt;/h2&gt;
&lt;p&gt;We followed Paul Graham‚Äôs &lt;a href=&quot;http://www.paulgraham.com/startupideas.html&quot;&gt;advice&lt;/a&gt; and started with a problem we had¬†ourselves:&lt;/p&gt;
&lt;p&gt;As users, it doesn‚Äôt feel like companies listen to our feedback. They‚Äôll say ‚Äúthanks, we‚Äôll pass it on to the team‚Äù, but nothing ever happens. This is demoralizing. Apps are buggy and missing useful features. Fixing them would mean making all software experiences¬†better.&lt;/p&gt;
&lt;img class=&quot;wp-image-247 size-full&quot; src=&quot;https://i0.wp.com/blog.canny.io/wp-content/uploads/2017/10/appy-email.png?resize=1068%2C684&amp;amp;ssl=1&quot; alt=&quot;generic-email-reply&quot; srcset=&quot;https://i0.wp.com/blog.canny.io/wp-content/uploads/2017/10/appy-email.png?w=1068&amp;amp;ssl=1 1068w, https://i0.wp.com/blog.canny.io/wp-content/uploads/2017/10/appy-email.png?resize=300%2C192&amp;amp;ssl=1 300w, https://i0.wp.com/blog.canny.io/wp-content/uploads/2017/10/appy-email.png?resize=768%2C492&amp;amp;ssl=1 768w, https://i0.wp.com/blog.canny.io/wp-content/uploads/2017/10/appy-email.png?resize=1024%2C656&amp;amp;ssl=1 1024w&quot; sizes=&quot;(max-width: 1068px) 100vw, 1068px&quot; data-recalc-dims=&quot;1&quot;/&gt;Sad, generic reply
&lt;p&gt;We built a community where people could post and vote on feedback for any product,¬†publicly.&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-244&quot; src=&quot;https://i0.wp.com/blog.canny.io/wp-content/uploads/2017/10/productpains.png?resize=1200%2C736&amp;amp;ssl=1&quot; alt=&quot;product-pains&quot; srcset=&quot;https://i0.wp.com/blog.canny.io/wp-content/uploads/2017/10/productpains.png?w=2338&amp;amp;ssl=1 2338w, https://i0.wp.com/blog.canny.io/wp-content/uploads/2017/10/productpains.png?resize=300%2C184&amp;amp;ssl=1 300w, https://i0.wp.com/blog.canny.io/wp-content/uploads/2017/10/productpains.png?resize=768%2C471&amp;amp;ssl=1 768w, https://i0.wp.com/blog.canny.io/wp-content/uploads/2017/10/productpains.png?resize=1024%2C628&amp;amp;ssl=1 1024w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;p&gt;Around 5,000 people posted and voted on ideas for several hundred products. It was a neat beta, but retention was weak. It was difficult to get teams to subscribe to feedback about their¬†product.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learning Lesson&lt;/strong&gt;: We kind of just assumed our problem was valid and started building the product. We should have talked to more people first. It would have saved us months. We would have realized it wasn‚Äôt something people really needed or would pay¬†for.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MRR&lt;/strong&gt;: $0 (Oct,¬†2016)&lt;/p&gt;
&lt;h2&gt;The bigger problem&lt;/h2&gt;
&lt;p&gt;We starting talking to a ton of teams about user¬†feedback.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;How do you collect feedback from your¬†users?&lt;/li&gt;
&lt;li&gt;How do you keep track of user¬†feedback?&lt;/li&gt;
&lt;li&gt;How do you decide what to¬†build?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;It turns out there‚Äôs a reason it doesn‚Äôt feel like companies are listening to our feedback. It‚Äôs because they¬†aren‚Äôt.&lt;/p&gt;
&lt;p&gt;It‚Äôs not that they don‚Äôt care. They care deeply. It‚Äôs just that feedback is a mess. Product managers don‚Äôt have time to read every chat message, email, and support ticket. And even if they did, they wouldn‚Äôt remember it¬†all.&lt;/p&gt;
&lt;p&gt;This is when we realized there was a business problem causing our consumer¬†problem.&lt;/p&gt;
&lt;p&gt;To validate our new findings, we built a widget to help teams collect and keep track of user¬†feedback.&lt;/p&gt;
&lt;img class=&quot;alignnone wp-image-305 size-full&quot; src=&quot;https://i1.wp.com/blog.canny.io/wp-content/uploads/2017/10/canny-widget.png?resize=1200%2C775&amp;amp;ssl=1&quot; alt=&quot;canny-widget&quot; srcset=&quot;https://i1.wp.com/blog.canny.io/wp-content/uploads/2017/10/canny-widget.png?w=2345&amp;amp;ssl=1 2345w, https://i1.wp.com/blog.canny.io/wp-content/uploads/2017/10/canny-widget.png?resize=300%2C194&amp;amp;ssl=1 300w, https://i1.wp.com/blog.canny.io/wp-content/uploads/2017/10/canny-widget.png?resize=768%2C496&amp;amp;ssl=1 768w, https://i1.wp.com/blog.canny.io/wp-content/uploads/2017/10/canny-widget.png?resize=1024%2C662&amp;amp;ssl=1 1024w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;p&gt;I still remember the first time someone paid us $19/mo for it. We were ecstatic. It was the first time we‚Äôd ever sold something we built. The best part: they‚Äôre still using us today, a year¬†later.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learning Lesson&lt;/strong&gt;: Talking to people is a great way to discover and validate problems. Writing code isn‚Äôt. Charging money is the ultimate form of validation. If a total stranger pays for your product, they must think you‚Äôre solving some problem for¬†them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MRR&lt;/strong&gt;: $100 (Dec,¬†2016)&lt;/p&gt;
&lt;h2&gt;Understanding our value proposition&lt;/h2&gt;
&lt;p&gt;At this point, we knew what we had to do: fork the repo and re-market our community as a SaaS¬†tool.&lt;/p&gt;
&lt;p&gt;Sarah‚Äôs a product designer and I‚Äôm a software engineer. Building the MVP was the easy¬†part.&lt;/p&gt;
&lt;p&gt;But how do you make a landing page? What words go on it? How do you price¬†it?&lt;/p&gt;
&lt;p&gt;These are sales and marketing problems that we had never faced before.¬†The way to solve these problems, we learned, is to understand your value¬†proposition:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;What problem do you¬†solve?&lt;/li&gt;
&lt;li&gt;Who has that¬†problem?&lt;/li&gt;
&lt;li&gt;How do they describe the¬†problem?&lt;/li&gt;
&lt;li&gt;How big of a problem is¬†it?&lt;/li&gt;
&lt;li&gt;How much would they pay for a¬†solution?&lt;/li&gt;
&lt;li&gt;What other solutions are out¬†there?&lt;/li&gt;
&lt;li&gt;How are you better /¬†different?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Without answers to these questions, you‚Äôre just¬†guessing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learning Lesson&lt;/strong&gt;: Sales and marketing is about understanding the problem you solve, and clearly communicating that. If you‚Äôre struggling with them, you may not understand your value proposition. We spent a lot of time reading blog posts about sales and marketing. We should have spent that time talking to our target¬†customer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MRR&lt;/strong&gt;: $100 (Mar,¬†2017)&lt;/p&gt;
&lt;h2&gt;Launching our MVP&lt;/h2&gt;
&lt;p&gt;We started with a soft launch to the teams already using¬†us.&lt;/p&gt;
&lt;p&gt;When we shipped our pivot, we were able to migrate everyone over from the old site. The core product was similar¬†enough.&lt;/p&gt;
&lt;p&gt;This was a great way to get a bunch of people trying our ‚Äúpaid‚Äù product from day one. We let it run for a week or two, worked out the kinks, then launched on Product¬†Hunt.&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-283&quot; src=&quot;https://i1.wp.com/blog.canny.io/wp-content/uploads/2017/10/product-hunt-launch-1.jpg?resize=1200%2C701&amp;amp;ssl=1&quot; alt=&quot;product-hunt-launch&quot; srcset=&quot;https://i1.wp.com/blog.canny.io/wp-content/uploads/2017/10/product-hunt-launch-1.jpg?w=2428&amp;amp;ssl=1 2428w, https://i1.wp.com/blog.canny.io/wp-content/uploads/2017/10/product-hunt-launch-1.jpg?resize=300%2C175&amp;amp;ssl=1 300w, https://i1.wp.com/blog.canny.io/wp-content/uploads/2017/10/product-hunt-launch-1.jpg?resize=768%2C449&amp;amp;ssl=1 768w, https://i1.wp.com/blog.canny.io/wp-content/uploads/2017/10/product-hunt-launch-1.jpg?resize=1024%2C598&amp;amp;ssl=1 1024w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;p&gt;Our launch went amazing. Over 350 companies tried Canny that week. Dozens ended up paying after our 30-day¬†trial.&lt;/p&gt;
&lt;p&gt;Several factors played into our successful¬†launch:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;We solve a problem for software companies. Product Hunt‚Äôs community is mainly people working in tech. This audience was highly relevant for¬†us.&lt;/li&gt;
&lt;li&gt;We emailed the 5,000 people who had left feedback in our community. We let them know about our pivot, and that we were launching on Product¬†Hunt.&lt;/li&gt;
&lt;li&gt;We already had a few paying customers. This meant we knew we had something other people would pay for¬†too.&lt;/li&gt;
&lt;li&gt;Chris Messina hunted us. Thanks Chris! (he has &lt;a href=&quot;https://chrismessina.typeform.com/to/t5FMAz&quot;&gt;a form&lt;/a&gt; where you can ask him to hunt you¬†too)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Learning Lesson&lt;/strong&gt;: If you sell to tech companies, Product Hunt is a great place to launch. It‚Äôs a one-time trigger, not your marketing strategy. If you do it sooner, you‚Äôll get valuable feedback. If you do it later, you‚Äôll get paying customers. I‚Äôm glad we did it¬†later.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MRR&lt;/strong&gt;: $1,000 (May,¬†2017)&lt;/p&gt;
&lt;h2&gt;Building an Inbound Engine&lt;/h2&gt;
&lt;p&gt;We‚Äôre coming up on 100 paying customers, and we‚Äôve never done any outbound sales. Our strongest channel is organic, via ‚ÄúPowered by¬†Canny‚Äù.&lt;/p&gt;
&lt;p&gt;This is one of the huge benefits of building a user-facing SaaS product. By user-facing, I mean our product is used by our customers‚Äô¬†customers.&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-243&quot; src=&quot;https://i2.wp.com/blog.canny.io/wp-content/uploads/2017/10/poweredbycanny.png?resize=1200%2C716&amp;amp;ssl=1&quot; alt=&quot;powered-by-canny&quot; srcset=&quot;https://i2.wp.com/blog.canny.io/wp-content/uploads/2017/10/poweredbycanny.png?w=2598&amp;amp;ssl=1 2598w, https://i2.wp.com/blog.canny.io/wp-content/uploads/2017/10/poweredbycanny.png?resize=300%2C179&amp;amp;ssl=1 300w, https://i2.wp.com/blog.canny.io/wp-content/uploads/2017/10/poweredbycanny.png?resize=768%2C458&amp;amp;ssl=1 768w, https://i2.wp.com/blog.canny.io/wp-content/uploads/2017/10/poweredbycanny.png?resize=1024%2C611&amp;amp;ssl=1 1024w, https://i2.wp.com/blog.canny.io/wp-content/uploads/2017/10/poweredbycanny.png?w=2400&amp;amp;ssl=1 2400w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;p&gt;Thousands of people use our product every day. Some percentage of those people are PMs or founders, and have the problem we solve. They then sign up for Canny, wanting to use it for their own¬†product.&lt;/p&gt;
&lt;p&gt;This channel is boosted by the fact that my co-founder Sarah is a super talented designer. Several of our customers have switched from competitors specifically for our¬†design.&lt;/p&gt;
&lt;p&gt;Since we already had a bunch of inbound traffic, we‚Äôve spent most of our time iterating on our¬†funnel:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Landing Page ‚Üí Pricing Page&lt;/strong&gt;: Iterated on and simplified our landing page. Experimented with the headline. Included key¬†features.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pricing Page ‚Üí Register Page&lt;/strong&gt;: Changed and simplified our pricing. Added a slider to remove anxiety around scaling¬†pricing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Register Page ‚Üí Free Trial&lt;/strong&gt;: Simplified our registration¬†forms.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Free Trial ‚Üí Using Trial&lt;/strong&gt;: Added user onboarding to encourage key actions. Made it easier to¬†integrate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using Trial ‚Üí Paying&lt;/strong&gt;: Created a drip campaign in Intercom to encourage key actions. Added billing¬†reminders.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Paying ‚Üí Retained&lt;/strong&gt;: Offering friendly, prompt customer service. Nurturing to make sure people are getting value. Promptly fixing bugs + building features where it makes sense. Adding sticky integrations like Slack +¬†Zapier.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;As a result, our funnel has gotten pretty darn good, and most months our churn is zero. We‚Äôve been able to more than triple in just a few months, from our organic¬†channel.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learning Lesson&lt;/strong&gt;: Start marketing earlier. Write less code. Since we‚Äôre an engineer + designer, we constantly fall back into a ‚Äúproduct mindset‚Äù. Features are great, but they usually aren‚Äôt the most optimal way to drive your¬†business.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MRR&lt;/strong&gt;: $3,500 (Oct,¬†2017)&lt;/p&gt;
&lt;img class=&quot;size-full wp-image-307&quot; src=&quot;https://i0.wp.com/blog.canny.io/wp-content/uploads/2017/10/graph.jpg?resize=1200%2C672&amp;amp;ssl=1&quot; alt=&quot;saas-profits&quot; srcset=&quot;https://i0.wp.com/blog.canny.io/wp-content/uploads/2017/10/graph.jpg?w=1624&amp;amp;ssl=1 1624w, https://i0.wp.com/blog.canny.io/wp-content/uploads/2017/10/graph.jpg?resize=300%2C168&amp;amp;ssl=1 300w, https://i0.wp.com/blog.canny.io/wp-content/uploads/2017/10/graph.jpg?resize=768%2C430&amp;amp;ssl=1 768w, https://i0.wp.com/blog.canny.io/wp-content/uploads/2017/10/graph.jpg?resize=1024%2C574&amp;amp;ssl=1 1024w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot; data-recalc-dims=&quot;1&quot;/&gt;MRR: Up and to the right!
&lt;h2&gt;Umm, how do you live on $3,500?&lt;/h2&gt;
&lt;p&gt;If you live in San Francisco, you‚Äôre probably wondering how $3,500/mo is ramen¬†profitable.&lt;/p&gt;
&lt;p&gt;Four months ago we moved out of our cozy apartment in San Francisco to be digital nomads. Right now we‚Äôre in Valencia, Spain. We‚Äôre also a¬†couple.&lt;/p&gt;
&lt;p&gt;We‚Äôll split an Airbnb for $1,000 a month, work from cafes, and eat cheaply. Canny spends hundreds a month, mostly on hosting and other¬†SaaS.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learning Lesson&lt;/strong&gt;: If you can get away with it, you can save a lot of money working nomad. As long as you have Wi-Fi, you can work anywhere. We‚Äôre actually more productive working remotely because we don‚Äôt know as many people. All we do is eat, sleep, work, and¬†explore.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intrigued?&lt;/strong&gt; Check out our &lt;a href=&quot;https://instagram.com/carryoncode&quot;&gt;travel¬†Instagram&lt;/a&gt; or read Sarah‚Äôs post, &lt;a href=&quot;https://blog.canny.io/building-startup-digital-nomads/&quot;&gt;Building our Startup as Digital¬†Nomads&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Next Up&lt;/h2&gt;
&lt;p&gt;We‚Äôve built a solid engine that converts visitors into paying customers. It‚Äôs time to switch gears and focus on¬†traffic.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Blogging&lt;/strong&gt;: Seems to work well for SaaS companies like ours. We love what Eoghan says about content: the less you try to make it convert, the better it does. We‚Äôre focusing on posts that benefit our target customer, rather than trying to sell¬†Canny.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Advertising&lt;/strong&gt;: We‚Äôve begun experimenting with FB + Google ads. Turning $X into $Y seems like a no brainer if Y &amp;gt;¬†X.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Side Projects&lt;/strong&gt;: There‚Äôs this idea that you can build a useful product, and give it away for free. For example, Front built &lt;a href=&quot;http://reallygoodemails.com&quot;&gt;reallygoodemails.com&lt;/a&gt;. If done right, these projects can be huge business drivers. We‚Äôre product people, so this lets us do what we do¬†best.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We‚Äôll let you know how it goes in our next post! Thanks for¬†reading.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;wp-about-author-containter-none&quot;&gt;
&lt;div class=&quot;wp-about-author-pic wp-about-author-circle&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://secure.gravatar.com/avatar/61add4e4bf7ae918d780d7d30a99629f?s=90&amp;amp;d=mm&amp;amp;r=g&quot; srcset=&quot;https://secure.gravatar.com/avatar/61add4e4bf7ae918d780d7d30a99629f?s=180&amp;amp;d=mm&amp;amp;r=g 2x&quot; class=&quot;avatar avatar-90 photo&quot; height=&quot;90&quot; width=&quot;90&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;wp-about-author-text&quot;&gt;
&lt;h3&gt;&lt;a href=&quot;https://blog.canny.io/author/a13n/&quot; title=&quot;Andrew Rasmussen&quot;&gt;Andrew Rasmussen&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hi, I'm a co-founder of Canny. Before that, I was a software engineer at Facebook. I love JavaScript, rock climbing, trading tech stocks, and SaaS.&lt;/p&gt;
&lt;p class=&quot;wpa-nomargin&quot;&gt;&lt;a href=&quot;https://blog.canny.io/author/a13n/&quot; title=&quot;More posts by Andrew Rasmussen&quot;&gt;More Posts&lt;/a&gt; - &lt;a href=&quot;http://www.twitter.com/a13n&quot;&gt;Twitter&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;post-subscribe-form&quot;&gt;
&lt;div class=&quot;header&quot;&gt;Like what you read?&lt;/div&gt;
&lt;div class=&quot;subtitle&quot;&gt;Get an email when we post new¬†content&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Tue, 24 Oct 2017 19:15:14 +0000</pubDate>
<dc:creator>a13n</dc:creator>
<og:type>article</og:type>
<og:title>How we Bootstrapped our SaaS Startup to Ramen Profitability ‚Äì Canny Blog</og:title>
<og:description>It‚Äôs been seven months since we launched our SaaS startup and we‚Äôre ramen profitable. Read about how we got here and what we've learned.</og:description>
<og:url>https://blog.canny.io/saas-startup-ramen-profitability/</og:url>
<og:image>https://blog.canny.io/wp-content/uploads/2017/10/ramen-profitable.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.canny.io/saas-startup-ramen-profitability/</dc:identifier>
</item>
</channel>
</rss>