<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>ADSL over wet string</title>
<link>http://www.revk.uk/2017/12/its-official-adsl-works-over-wet-string.html</link>
<guid isPermaLink="true" >http://www.revk.uk/2017/12/its-official-adsl-works-over-wet-string.html</guid>
<description>Broadband services are a wonderful innovation of our time, using multiple frequency &lt;em&gt;bands&lt;/em&gt; (hence the name) to carry signals over wires (usually, copper, sometimes aluminium). One of the key aspects of the technology is its ability to adapt to the length and characteristics of the &lt;em&gt;line&lt;/em&gt; on which it is deployed.&lt;p&gt;We have seen faults on broadband circuits that manifest as the system adapting to much lower speeds, this is a key factor as a service can work, but unusually slowly, over very bad lines.&lt;/p&gt;&lt;p&gt;It has always been said that ADSL will work over a bit of wet string.&lt;/p&gt;&lt;p&gt;Well one of our techies (&lt;a href=&quot;http://www.aa.net.uk/&quot;&gt;www.aa.net.uk&lt;/a&gt;) took it upon himself to try it today at the office, and well done.&lt;/p&gt;&lt;p&gt;He got some proper string, and made it wet...&lt;/p&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-PI6GDS0UiK0/WjAXI5DF5PI/AAAAAAAAGbc/ieEBnmbx53EifjIVw8AlnqZZrjD28IRIACLcBGAs/s1600/DQziME8WsAAT8ZP.jpg-large.jpeg&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1600&quot; data-original-width=&quot;1600&quot; height=&quot;400&quot; src=&quot;https://1.bp.blogspot.com/-PI6GDS0UiK0/WjAXI5DF5PI/AAAAAAAAGbc/ieEBnmbx53EifjIVw8AlnqZZrjD28IRIACLcBGAs/s400/DQziME8WsAAT8ZP.jpg-large.jpeg&quot; width=&quot;398&quot;/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;It turns out he needed salty water to get anywhere.&lt;p&gt;A 2m length...&lt;/p&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-dA2R_S9SCn8/WjAhVtpvzSI/AAAAAAAAGb0/eOB91I2J8iQsQ62zvFR8MtRZjff-4EAJwCEwYBhgL/s1600/DQ3XL2hXcAAhodq.jpg-large.jpeg&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1600&quot; data-original-width=&quot;900&quot; height=&quot;400&quot; src=&quot;https://2.bp.blogspot.com/-dA2R_S9SCn8/WjAhVtpvzSI/AAAAAAAAGb0/eOB91I2J8iQsQ62zvFR8MtRZjff-4EAJwCEwYBhgL/s400/DQ3XL2hXcAAhodq.jpg-large.jpeg&quot; width=&quot;225&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-l3vf51_DNL0/WjAXPrvveiI/AAAAAAAAGbg/1aDNo7bFBCQwFCrxheMuWrXiI1AN1I8_gCLcBGAs/s1600/DQ3MsLnWsAAmJs7.jpg-large.jpeg&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1600&quot; data-original-width=&quot;900&quot; height=&quot;400&quot; src=&quot;https://4.bp.blogspot.com/-l3vf51_DNL0/WjAXPrvveiI/AAAAAAAAGbg/1aDNo7bFBCQwFCrxheMuWrXiI1AN1I8_gCLcBGAs/s400/DQ3MsLnWsAAmJs7.jpg-large.jpeg&quot; width=&quot;225&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br/&gt;And the result - it works!!! Not even that slow (3½Mb/s down) though slow uplink. Don't dare touch the string though...&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-PsmeKKPx04E/WjAXT_iyjHI/AAAAAAAAGbk/v-GJUCQ9JPEyTxcMDqMNjzoPGyr4pWGRACLcBGAs/s1600/DQ3NL95XUAAabAq.jpg-large.jpeg&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;900&quot; data-original-width=&quot;1600&quot; height=&quot;225&quot; src=&quot;https://4.bp.blogspot.com/-PsmeKKPx04E/WjAXT_iyjHI/AAAAAAAAGbk/v-GJUCQ9JPEyTxcMDqMNjzoPGyr4pWGRACLcBGAs/s400/DQ3NL95XUAAabAq.jpg-large.jpeg&quot; width=&quot;400&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br/&gt;So, there you go, ADSL over 2m of literal &quot;wet string&quot;. Well done all for testing this. It shows the importance of handling faults that seem to just be &quot;low speed&quot;.&lt;p&gt;As a bonus, fit tin cans to both ends and you get voice as well as broadband on the same wet string!
&lt;/p&gt;
</description>
<pubDate>Tue, 12 Dec 2017 18:30:57 +0000</pubDate>
<dc:creator>tomkap</dc:creator>
<og:url>http://www.revk.uk/2017/12/its-official-adsl-works-over-wet-string.html</og:url>
<og:title>It's official, ADSL works over wet string</og:title>
<og:description>Broadband services are a wonderful innovation of our time, using multiple frequency  bands  (hence the name) to carry signals over wires (us...</og:description>
<og:image>https://1.bp.blogspot.com/-PI6GDS0UiK0/WjAXI5DF5PI/AAAAAAAAGbc/ieEBnmbx53EifjIVw8AlnqZZrjD28IRIACLcBGAs/w1200-h630-p-k-no-nu/DQziME8WsAAT8ZP.jpg-large.jpeg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.revk.uk/2017/12/its-official-adsl-works-over-wet-string.html</dc:identifier>
</item>
<item>
<title>FT Person of the Year: Susan Fowler</title>
<link>https://www.ft.com/content/b4bc2a68-dc4f-11e7-a039-c64b1c09b482</link>
<guid isPermaLink="true" >https://www.ft.com/content/b4bc2a68-dc4f-11e7-a039-c64b1c09b482</guid>
<description>&lt;div class=&quot;article-info&quot; readability=&quot;23.586956521739&quot;&gt;
&lt;div class=&quot;article-info__time-byline&quot; readability=&quot;24.347826086957&quot;&gt;
&lt;p class=&quot;article-info__byline&quot;&gt;&lt;a class=&quot;n-content-tag n-content-tag--author&quot; href=&quot;https://www.ft.com/stream/0bd76a95-4aa7-358a-bf78-d70657658f53&quot; data-trackable=&quot;author&quot;&gt;Leslie Hook&lt;/a&gt; in San Francisco&lt;/p&gt;
&lt;time class=&quot;article-info__timestamp o-date&quot; data-o-component=&quot;o-date&quot; datetime=&quot;2017-12-12T04:00:48Z&quot; data-o-date-js=&quot;&quot;&gt;December 12, 2017&lt;/time&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ftlabsaudioplayerholder ftlabsaudioplayerholder--inactive n-ui-hide-core&quot; data-trackable=&quot;ftlabs-audio-player&quot;&gt;
&lt;div class=&quot;ftlabsaudiocontainer&quot;&gt;
&lt;p&gt;&lt;span&gt;Experimental feature&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;ftlabsaudioplayerwrap&quot;&gt;
&lt;h2&gt;Listen to this article&lt;/h2&gt;
&lt;div class=&quot;ftlabsaudioplayercontrols&quot; data-trackable=&quot;controls&quot;&gt;&lt;button class=&quot;control control__play&quot; data-trackable=&quot;play&quot;&gt;Play audio for this article&lt;/button&gt; &lt;button class=&quot;control control__pause&quot; disabled=&quot;disabled&quot; data-trackable=&quot;pause&quot;&gt;Pause&lt;/button&gt;
&lt;div class=&quot;audio-time&quot;&gt;&lt;span class=&quot;audio-time-text__current audio-time-text&quot;&gt;00:00&lt;/span&gt;

&lt;span class=&quot;audio-time-text__total audio-time-text&quot;&gt;00:00&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ftlabsaudioplayer-feedback&quot;&gt;
&lt;p&gt;&lt;span&gt;Experimental feature&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;ftlabsaudioplayer-feedback__components&quot; readability=&quot;5.8610169491525&quot;&gt;

&lt;span class=&quot;ftlabsaudioplayer-feedback__components--separator&quot;&gt;or&lt;/span&gt;
&lt;div class=&quot;js-feedback feedback ftlabs-audio-feedback&quot; readability=&quot;7.0175438596491&quot;&gt;
&lt;p class=&quot;feedback__invitation&quot;&gt;&lt;a href=&quot;https://www.ft.com/content/b4bc2a68-dc4f-11e7-a039-c64b1c09b482#&quot; class=&quot;feedback__trigger js-ftlabs-audio-feedback__trigger&quot; data-complete=&quot;.js-feedback__complete&quot;&gt;Give us your feedback&lt;/a&gt; &lt;span class=&quot;js-feedback__complete feedback__complete&quot;&gt;Thank you for your feedback.&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;js-feedback__content&quot; data-feedback-stage=&quot;1&quot;&gt;
&lt;h3 class=&quot;feedback__heading&quot;&gt;What do you think?&lt;/h3&gt;
&lt;ul class=&quot;feedback__options&quot;&gt;&lt;li class=&quot;feedback__option&quot;&gt;&lt;button class=&quot;js-feedback__responder feedback__option-btn&quot; data-answer=&quot;positive&quot; data-question=&quot;use_again&quot;&gt;I‘ll use it in the future&lt;/button&gt;&lt;/li&gt;
&lt;li class=&quot;feedback__option&quot;&gt;&lt;button class=&quot;js-feedback__responder feedback__option-btn&quot; data-answer=&quot;negative&quot; data-question=&quot;use_again&quot;&gt;I don‘t think I‘ll use it&lt;/button&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class=&quot;js-feedback__content&quot; data-feedback-stage=&quot;2&quot; readability=&quot;32&quot;&gt;
&lt;p&gt;&lt;label for=&quot;ftlabs-audio-feedback__textarea&quot; class=&quot;o-forms__label feedback__heading&quot;&gt;Please tell us why &lt;small&gt;(optional)&lt;/small&gt;&lt;/label&gt; 
&lt;textarea id=&quot;ftlabs-audio-feedback__textarea&quot; class=&quot;o-forms__textarea feedback__input&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;button class=&quot;o-buttons o-buttons--primary o-buttons--big js-feedback__responder&quot; data-question=&quot;additional_feedback&quot; data-answer-selector=&quot;#ftlabs-audio-feedback__textarea&quot;&gt;Send Feedback&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;When Susan Fowler joined &lt;a href=&quot;https://www.ft.com/topics/organisations/Uber&quot; data-trackable=&quot;link&quot;&gt;Uber&lt;/a&gt; in late 2015, the company looked like an unstoppable juggernaut. It was expanding rapidly around the world and becoming the most valuable start-up of all time. For software engineers like Ms Fowler, there was exciting work to be done on the app that was changing transportation. Employees at San Francisco’s hottest company proudly wore their Uber sweatshirts around town.&lt;/p&gt;
&lt;p&gt;But two years later, those sweatshirts are no longer visible and Uber is in crisis. Beset by &lt;a href=&quot;https://www.ft.com/content/d890585e-d102-11e7-9dbb-291a884dd8c6&quot; data-trackable=&quot;link&quot;&gt;one setback after another&lt;/a&gt;, the company has become a symbol of everything that is wrong with the &lt;a href=&quot;https://www.ft.com/content/c9a8b592-a81d-11e7-ab55-27219df83c97&quot; data-trackable=&quot;link&quot;&gt;hard-driving tech world&lt;/a&gt;. In large part, that shift is due to &lt;a href=&quot;https://www.ft.com/content/469fbaec-fa76-11e6-9516-2d969e0d3b65&quot; data-trackable=&quot;link&quot;&gt;Ms Fowler&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In February she published a &lt;a href=&quot;https://www.susanjfowler.com/blog/2017/2/19/reflecting-on-one-very-strange-year-at-uber&quot; data-trackable=&quot;link&quot; target=&quot;_blank&quot;&gt;blog&lt;/a&gt; about her time at Uber that lifted the lid on a company that was out of control. Ms Fowler described the &lt;a href=&quot;https://www.ft.com/stream/fc9213c8-174d-318e-922f-e5e103dc9fc4&quot; data-trackable=&quot;link&quot;&gt;sexual harassment&lt;/a&gt; she experienced, including her boss propositioning her for sex on the first day she joined his team. The human resources department turned a blind eye to her complaints, saying he was a “high performer”. When she wrote about this and other incidents, her post quickly went viral. Ms Fowler had pulled on a thread that would lead to a great unravelling.&lt;/p&gt;

&lt;p&gt;In the process, the 26-year-old from rural Arizona who had to teach herself at the local library to get into university, found herself at the centre of three of the most important trends of the year. Her description of the reality of working at Uber generated a crisis that has raised questions about the very viability of the company. They also formed an early part of the growing backlash against the power and influence of the Big Tech companies.&lt;/p&gt;
&lt;p&gt;Most of all, her intervention was one of the most important testimonies in what — as the year comes to a close — has become an avalanche of allegations about sexual harassment and assault that have brought down some of the most important men in media, entertainment and business, and which hold the potential to improve the way women are treated at work permanently.&lt;/p&gt;
&lt;p&gt;“Women have been speaking up for many, many years, but were very rarely believed, and there were almost never any real consequences for offenders,” Ms Fowler told the Financial Times. “This year, that completely changed.”&lt;/p&gt;
&lt;div class=&quot;n-image-wrapper n-image-wrapper--placeholder&quot;&gt;&lt;img alt=&quot;&quot; role=&quot;presentation&quot; class=&quot;n-image&quot; srcset=&quot;https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2Fce7a8f2c-de83-11e7-8f9f-de1c2175f5ce?source=next&amp;amp;fit=scale-down&amp;amp;width=700 700w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2Fce7a8f2c-de83-11e7-8f9f-de1c2175f5ce?source=next&amp;amp;fit=scale-down&amp;amp;width=500 500w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2Fce7a8f2c-de83-11e7-8f9f-de1c2175f5ce?source=next&amp;amp;fit=scale-down&amp;amp;width=300 300w&quot; sizes=&quot;(min-width: 76.25em) 700px, (min-width: 61.25em) 620px, (min-width: 46.25em) 700px, calc(100vw - 20px)&quot;/&gt;&lt;/div&gt;
Protesters on the Women's March in Washington on January 21, a day after Donald Trump's inauguration as US president © AFP
&lt;p&gt;Inside Uber, her story immediately struck a nerve. The account was so damning because it detailed the complicity of Uber’s HR department and top executives who protected the harasser. A few days after the post came out, employees wept at the company-wide meeting that was held to discuss it. Uber’s board launched several investigations and adopted far-reaching corporate governance reforms. The company set up a hotline for harassment complaints, drawing tips that resulted in more than 20 employees being fired.&lt;/p&gt;
&lt;p&gt;Outside of Uber, the reaction was just as dramatic. Investors started to question whether &lt;a href=&quot;https://www.ft.com/content/9b65a59a-03e1-11e7-ace0-1ce02ef0def9&quot; data-trackable=&quot;link&quot;&gt;Travis Kalanick&lt;/a&gt;, the controversial chief executive (who used to refer to the company as “Boob-er” because it helped him meet women) had created a company whose culture had become poisonous. Low morale inside Uber contributed to a series of damaging leaks, including revelations about the &lt;a href=&quot;http://www.bbc.co.uk/news/technology-40196055&quot; data-trackable=&quot;link&quot; target=&quot;_blank&quot;&gt;mishandling of a rape victim’s medical records&lt;/a&gt; and the existence of Greyball, a technology used to mislead regulators. Mr Kalanick vowed to change, but by June investors demanded that he step down.&lt;/p&gt;
&lt;p&gt;“Susan Fowler’s letter was the tipping point for us,” says one Uber investor, Freada Kapor Klein, a partner at Kapor Capital. “We had been trying to get the company to address this behind the scenes. But with Susan’s blog post, it was — that is enough, it has so crossed the line, it is time for drastic action.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Uber could not have&lt;/strong&gt; found a more unlikely nemesis than the petite Ms Fowler. She grew up in what she describes as poverty as one of seven children in a small rural Arizona town with just 600 people. Her father was a preacher, prison chaplain and at one stage a high school teacher. Ms Fowler never graduated from high school, instead working as a babysitter and ranch hand, and teaching herself in the local library. Lacking a formal education but determined to go to university, she submitted a list of books she had read as part of her college application.&lt;/p&gt;
&lt;p&gt;After winning a place at Arizona State University to study philosophy, she then transferred to the University of Pennsylvania, earning a degree in physics. In her final year at Penn, she wrote a blog entitled “If Susan can learn physics, so can you”, explaining how she caught up despite having no secondary maths education. By the time she reached Uber at age 24, she was a physicist and computer scientist, and wrote her first book about software architecture while working at the company.&lt;/p&gt;
&lt;div class=&quot;n-image-wrapper n-image-wrapper--placeholder&quot;&gt;&lt;img alt=&quot;&quot; role=&quot;presentation&quot; class=&quot;n-image&quot; srcset=&quot;https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2F7629322c-de76-11e7-8f9f-de1c2175f5ce?source=next&amp;amp;fit=scale-down&amp;amp;width=700 700w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2F7629322c-de76-11e7-8f9f-de1c2175f5ce?source=next&amp;amp;fit=scale-down&amp;amp;width=500 500w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2F7629322c-de76-11e7-8f9f-de1c2175f5ce?source=next&amp;amp;fit=scale-down&amp;amp;width=300 300w&quot; sizes=&quot;(min-width: 76.25em) 700px, (min-width: 61.25em) 620px, (min-width: 46.25em) 700px, calc(100vw - 20px)&quot;/&gt;&lt;/div&gt;
Rose McGowan, one of Harvey Weinstein's most vociferous accusers, with Tarana Burke, the originator of the Me Too movement © Getty
&lt;p&gt;Since leaving Uber last December, Ms Fowler, who now works at the payments start-up Stripe, has kept a low profile. She says she did not imagine the post would have such a big impact. “I expected the reaction to die down, but it never did,” she says. “It became much bigger than me, so much bigger than Uber.” Ms Fowler is currently eight months pregnant and on bed rest and, due to health concerns agreed to a written, rather than a face-to face interview, for this article.&lt;/p&gt;
&lt;p&gt;Ms Fowler says she felt compelled to blow the whistle because “it was the right thing to do”. The fact her background is so different from her peers in Silicon Valley may have also played a role, she adds.&lt;/p&gt;
&lt;p&gt;“When I was younger, I used to think that my unconventional upbringing was a weakness, but over the past few years I’ve learnt to see it as one of my greatest strengths,” she says. “I never had a single thing handed to me, I had to fight for everything I wanted, like my education. When I was harassed and discriminated against, I fought as hard as I could — because I hadn’t gone through all of that, I hadn’t worked so hard my entire life, just to have someone take it away from me.”&lt;/p&gt;
&lt;p&gt;At the time Ms Fowler published her blog post, the Uber sexual harassment scandal might have seemed like an isolated incident. But the ripples travelled well beyond one company. This year has seen an unprecedented number of women speak publicly about sexual harassment — and unprecedented consequences for their harassers.&lt;/p&gt;
&lt;p&gt;In Silicon Valley, female entrepreneurs recalled how pitch meetings with potential investors could lead to unwanted groping or propositions. The wave of allegations prompted the firing and resignation of several prominent venture capitalists — including the &lt;a href=&quot;https://www.ft.com/content/ed46db44-9767-11e7-a652-cde3f882dd7b&quot; data-trackable=&quot;link&quot;&gt;chief executive of SoFi&lt;/a&gt;, the online lender, and Justin Caldbeck, a co-founder of Binary Capital.&lt;/p&gt;

&lt;p&gt;A few months later the tidal wave reached Hollywood. The New York Times and New Yorker revealed in October that Hollywood mogul &lt;a href=&quot;https://www.ft.com/content/1dc8a8ae-b7e0-11e7-8c12-5661783e5589&quot; data-trackable=&quot;link&quot;&gt;Harvey Weinstein had a pattern of sexual harassment and assault&lt;/a&gt; that went back decades. Mr Weinstein was fired from his eponymous company and is under investigation by police in at least two countries. Among the dozens of actresses making accusations were Gwyneth Paltrow and Rose McGowan.&lt;/p&gt;
&lt;p&gt;Meanwhile the #MeToo campaign swept across social media, as millions of women and some men shared personal stories of sexual harassment, assault and abuse. The movement has only continued &lt;a href=&quot;https://www.ft.com/content/204ab48c-d54f-11e7-a303-9060cb1e5f44&quot; data-trackable=&quot;link&quot;&gt;to spread&lt;/a&gt;. In November, American television stars including Charlie Rose and Matt Lauer were forced to resign due to revelations about harassing colleagues. In politics, Al Franken in the Senate and John Conyers and Trent Frank in the House of Representatives have announced plans to retire after facing harassment allegations. Congress introduced a bill last month that would change the way congressional employees can report harassment.&lt;/p&gt;
&lt;p&gt;“There is a kind of unmasking going on. A lot of these are people who are venerated, people who were taken very seriously,” says Robin Lakoff, a professor of linguistics at the University of California, Berkeley. In the past, a sex scandal might be in the headlines for a few weeks and then disappear. “This one seems to really have legs, because new ones keep cropping up,” she says.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There are many reasons&lt;/strong&gt; this is happening now but most explanations point, at least in part, to the presence in the White House of President Donald Trump, who was caught on record boasting about sexually assaulting women. In a 2005 recording that was released shortly before last year’s election, Mr Trump says: “When you’re a star, they let you do it. You can do anything . . . Grab ’em by the pussy. You can do anything.” Since then, at least 16 women have come forward to accuse Mr Trump of sexual harassment.&lt;/p&gt;
&lt;p&gt;The fact he was elected to the highest office despite those remarks has fuelled a backlash. The day after his inauguration, millions of women across hundreds of cities took to the streets to demonstrate in the Women’s March.&lt;/p&gt;
&lt;p&gt;Social media has also played a part. Ms Fowler, who is constantly on Twitter, says social media had a “very positive role” in the movement. “It has given a voice to many, like myself, who otherwise wouldn’t have had a platform,” she says. “#MeToo is a perfect example of this . . . It made the rest of the world finally understand the true extent of inappropriate behaviour against women, and the damage it causes.”&lt;/p&gt;
&lt;p&gt;Another reason why 2017 has been a turning point is simply that there is strength in numbers: women have been inspired by others who spoke out.&lt;/p&gt;

&lt;p&gt;“Definitely she was a role model for me,” says Cheryl Yeoh, an entrepreneur who published her own account of assault in July. Like Ms Fowler, Ms Yeoh decided to write her story herself and publish it online, rather than approach a journalist or try to go through a lawyer. She says that watching the impact Ms Fowler had on Uber was very encouraging. “If I hadn’t seen what had happened to Uber after her post, I wouldn’t have dared to write my account,” she says.&lt;/p&gt;
&lt;p&gt;The cultural shift that has come about this year is also the result of decades of work by activists and leaders fighting for equal rights. Ms Klein links the wave of allegations back to events like the 1991 testimony of Anita Hill, whose televised account of sexual harassment by Clarence Thomas riveted the country during his confirmation hearing for the Supreme Court, and to the founding of the “Me Too” movement a decade ago by activist Tarana Burke.&lt;/p&gt;
&lt;p&gt;“What Susan Fowler and the #MeToo movement have in common is they both stand on the shoulders of giants,” says Ms Klein.&lt;/p&gt;
&lt;p&gt;Earlier generations of female leaders often found sexual harassment a complex issue to raise, and instead focused on areas like equal pay or reproductive rights. Women who spoke out about harassment often found themselves blamed, and their careers derailed.&lt;/p&gt;
&lt;p&gt;Lilly Ledbetter, the equal pay advocate whose court case on wage discrimination made it to the Supreme Court and resulted in the Lilly Ledbetter Fair Pay Act in 2009, welcomes the #MeToo movement. “I wish this had happened earlier,” she says. “I’ve been so glad that this is all coming to the forefront now.”&lt;/p&gt;
&lt;p&gt;She recalls her own experience of harassment in the early 1980s — when a manager asked that she have sex with him in order to get a high performance review. She never reported it at that time. “I let that one slide,” she says.&lt;/p&gt;
&lt;p&gt;“Things have gotten more open and people have a tendency to support each other better today,” she says. “I think women in the beginning didn’t trust each other and didn’t support each other, and now they are better at that. There are companies that are looking at their policies and changing, and being a lot more supportive,” she says. One policy change that would make a difference is ending the widespread practice of making employees seek arbitration for harassment claims, and Congress is currently considering a bill that would end that practice.&lt;/p&gt;
&lt;div class=&quot;n-image-wrapper n-image-wrapper--placeholder&quot;&gt;&lt;img alt=&quot;&quot; role=&quot;presentation&quot; class=&quot;n-image&quot; srcset=&quot;https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2F74d14950-de76-11e7-8f9f-de1c2175f5ce?source=next&amp;amp;fit=scale-down&amp;amp;width=700 700w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2F74d14950-de76-11e7-8f9f-de1c2175f5ce?source=next&amp;amp;fit=scale-down&amp;amp;width=500 500w, https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.prod-us.s3.amazonaws.com%2F74d14950-de76-11e7-8f9f-de1c2175f5ce?source=next&amp;amp;fit=scale-down&amp;amp;width=300 300w&quot; sizes=&quot;(min-width: 76.25em) 700px, (min-width: 61.25em) 620px, (min-width: 46.25em) 700px, calc(100vw - 20px)&quot;/&gt;&lt;/div&gt;
President Barack Obama with campaigner Lily Ledbetter before signing the Lilly Ledbetter Fair Pay Act in 2009 © Getty
&lt;p&gt;At the same time, some are concerned the movement could end up backfiring in subtle ways, or result in discrimination against women in the workplace.&lt;/p&gt;
&lt;p&gt;“The percentage of men who will be afraid to be alone with a female colleague has to be sky high right now,” wrote Sheryl Sandberg, chief operating officer at Facebook, in a recent post. “I have already heard the rumblings of a backlash: ‘This is why you shouldn’t hire women.’ Actually, this is why you should,” she wrote.&lt;/p&gt;
&lt;p&gt;Ms Fowler is expected to give birth to a little girl. At Stripe, she is the editor-in-chief of a quarterly magazine called &lt;a href=&quot;https://increment.com/&quot; data-trackable=&quot;link&quot; target=&quot;_blank&quot;&gt;Increment&lt;/a&gt;, which is geared towards software engineers. She is also working on a book and a movie about her experiences.&lt;/p&gt;
&lt;aside class=&quot;n-content-recommended&quot; role=&quot;complementary&quot; data-editorial-component-id=&quot;component1&quot; data-trackable=&quot;recommended&quot;&gt;&lt;h3 class=&quot;n-content-recommended__title&quot;&gt;Recommended&lt;/h3&gt;
&lt;/aside&gt;&lt;p&gt;The fortunes of Uber, on the other hand, have changed more drastically than anyone could have imagined. The company that once looked invincible has seen its valuation fall from $71bn to $54bn and it has lost market share in the US. “Would Uber have changed if it weren’t for Susan’s blog post? I don’t know,” one senior executive admits privately. “Certainly her post gave us the resolve that we needed to change.”&lt;/p&gt;
&lt;p&gt;The contrast between the plaudits for Ms Fowler and the crisis at Uber is perhaps the clearest sign of how much things have changed for women who speak up about harassment.&lt;/p&gt;
&lt;p&gt;Yet it still comes at a cost. “The most difficult [thing] has been that being a whistleblower displaces and dwarfs all of your other career aspirations, all your accomplishments. You’re no longer the engineer, or the physicist, or the writer — you’re the whistleblower,” says Ms Fowler. Nevertheless, she says, it is “a badge of honour”.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Find out &lt;a href=&quot;https://www.ft.com/content/204ab48c-d54f-11e7-a303-9060cb1e5f44&quot; data-trackable=&quot;link&quot;&gt;more&lt;/a&gt; on the men accused of sexual harassment&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Click &lt;a href=&quot;https://ig.ft.com/sites/person-of-the-year/&quot; data-trackable=&quot;link&quot;&gt;here&lt;/a&gt; to read about the FT’s Persons of the Year from 1970 to 2016&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You’ve read our Person of the Year. Who is yours? Make a case&lt;/em&gt; &lt;em&gt;&lt;a href=&quot;https://financialtimes.polldaddy.com/s/readers-choice-person-of-year&quot; data-trackable=&quot;link&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;em&gt;&lt;em&gt;. The best and most original submissions will be published in the FT&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 12 Dec 2017 17:38:55 +0000</pubDate>
<dc:creator>olivermarks</dc:creator>
<og:title>FT Person of the Year: Susan Fowler</og:title>
<og:description>The software engineer who lifted the lid on sexual harassment at Uber and inspired women to speak out</og:description>
<og:image>http://prod-upp-image-read.ft.com/203f6e18-de7f-11e7-8f9f-de1c2175f5ce</og:image>
<og:url>https://www.ft.com/content/b4bc2a68-dc4f-11e7-a039-c64b1c09b482</og:url>
<og:type>article</og:type>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.ft.com/content/b4bc2a68-dc4f-11e7-a039-c64b1c09b482</dc:identifier>
</item>
<item>
<title>Litecoin and Ethereum buys and sells are temporarily disabled</title>
<link>https://status.coinbase.com/incidents/5fj9rx0py3bq</link>
<guid isPermaLink="true" >https://status.coinbase.com/incidents/5fj9rx0py3bq</guid>
<description>&lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;phone_number&quot; id=&quot;phone-number-5fj9rx0py3bq&quot; placeholder=&quot;ex. 6505551234&quot; data-js-hook=&quot;phone-number&quot; class=&quot;span12&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 12 Dec 2017 16:21:21 +0000</pubDate>
<dc:creator>tomduncalf</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://status.coinbase.com/incidents/5fj9rx0py3bq</dc:identifier>
</item>
<item>
<title>Internet protocols are changing</title>
<link>https://blog.apnic.net/2017/12/12/internet-protocols-changing/</link>
<guid isPermaLink="true" >https://blog.apnic.net/2017/12/12/internet-protocols-changing/</guid>
<description>&lt;img width=&quot;555&quot; height=&quot;202&quot; src=&quot;https://blog.apnic.net/wp-content/uploads/2017/12/evolution-555x202.png&quot; class=&quot;attachment-featuredImageLarge size-featuredImageLarge wp-post-image&quot; alt=&quot;&quot; srcset=&quot;https://blog.apnic.net/wp-content/uploads/2017/12/evolution.png 555w, https://blog.apnic.net/wp-content/uploads/2017/12/evolution-300x110.png 300w, https://blog.apnic.net/wp-content/uploads/2017/12/evolution-206x75.png 206w, https://blog.apnic.net/wp-content/uploads/2017/12/evolution-256x93.png 256w&quot; sizes=&quot;(max-width: 555px) 100vw, 555px&quot;/&gt;&lt;p&gt;When the Internet started to become widely used in the 1990s, most traffic used just a few protocols: IPv4 routed packets, TCP turned those packets into connections, SSL (later TLS) encrypted those connections, DNS named hosts to connect to, and HTTP was often the application protocol using it all.&lt;/p&gt;&lt;p&gt;For many years, there were negligible changes to these core Internet protocols; HTTP added a few new headers and methods, TLS slowly went through minor revisions, TCP adapted congestion control, and DNS introduced features like DNSSEC. The protocols themselves looked about the same ‘on the wire’ for a very long time (excepting IPv6, which already gets its fair amount of attention in the network operator community.)&lt;/p&gt;
&lt;p&gt;As a result, network operators, vendors, and policymakers that want to understand (and sometimes, control) the Internet have adopted a number of practices based upon these protocols’ wire ‘footprint’ — whether intended to debug issues, improve quality of service, or impose policy.&lt;/p&gt;
&lt;p&gt;Now, significant changes to the core Internet protocols are underway. While they are intended to be compatible with the Internet at large (since they won’t get adoption otherwise), they might be disruptive to those who have taken liberties with undocumented aspects of protocols or made an assumption that things won’t change.&lt;/p&gt;
&lt;h4&gt;Why we need to change the Internet&lt;/h4&gt;
&lt;p&gt;There are a number of factors driving these changes.&lt;/p&gt;
&lt;p&gt;First, the limits of the core Internet protocols have become apparent, especially regarding performance. Because of structural problems in the application and transport protocols, the network was not being used as efficiently as it could be, leading to end-user perceived performance (in particular, latency).&lt;/p&gt;
&lt;p&gt;This translates into a strong motivation to evolve or replace those protocols because there is a &lt;a href=&quot;https://www.smashingmagazine.com/2015/09/why-performance-matters-the-perception-of-time/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;large body of experience showing the impact of even small performance gains&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Second, the ability to evolve Internet protocols — at any layer — has become more difficult over time, largely thanks to the unintended uses by networks discussed above. For example, HTTP proxies that tried to compress responses made it more difficult to deploy new compression techniques; TCP optimization in middleboxes made it more difficult to deploy improvements to TCP.&lt;/p&gt;
&lt;p&gt;Finally, &lt;a href=&quot;https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/46197.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;we are in the midst of a shift towards more use of encryption on the Internet&lt;/a&gt;, first spurred by Edward Snowden’s revelations in 2015. That’s really a separate discussion, but it is relevant here in that encryption is one of best tools we have to ensure that protocols can evolve.&lt;/p&gt;
&lt;p&gt;Let’s have a look at what’s happened, what’s coming next, how it might impact networks, and how networks impact protocol design.&lt;/p&gt;
&lt;h4&gt;HTTP/2&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://http2.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HTTP/2&lt;/a&gt; (based on Google’s SPDY) was the first notable change — standardized in 2015, it multiplexes multiple requests onto one TCP connection, thereby avoiding the need to queue requests on the client without blocking each other. It is now widely deployed, and supported by all major browsers and web servers.&lt;/p&gt;
&lt;p&gt;From a network’s viewpoint, HTTP/2 made a few notable changes. First, it’s a binary protocol, so any device that assumes it’s HTTP/1.1 is going to break.&lt;/p&gt;
&lt;p&gt;That breakage was one of the primary reasons for another big change in HTTP/2; it effectively requires encryption. This gives it a better chance of avoiding interference from intermediaries that assume it’s HTTP/1.1, or do more subtle things like strip headers or block new protocol extensions — both things that had been seen by some of the engineers working on the protocol, causing significant support problems for them.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://httpwg.org/specs/rfc7540.html#TLSUsage&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HTTP/2 also requires TLS/1.2 to be used when it is encrypted&lt;/a&gt;, and &lt;a href=&quot;http://httpwg.org/specs/rfc7540.html#BadCipherSuites&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;blacklists&lt;/a&gt; cipher suites that were judged to be insecure — with the effect of only allowing ephemeral keys. See the TLS 1.3 section for potential impacts here.&lt;/p&gt;
&lt;p&gt;Finally, HTTP/2 allows more than one host’s requests to be &lt;a href=&quot;http://httpwg.org/specs/rfc7540.html#reuse&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;coalesced onto a connection&lt;/a&gt;, to improve performance by reducing the number of connections (and thereby, congestion control contexts) used for a page load.&lt;/p&gt;
&lt;p&gt;For example, you could have a connection for &lt;tt&gt;www.example.com&lt;/tt&gt;, but also use it for requests for &lt;tt&gt;images.example.com&lt;/tt&gt;. &lt;a href=&quot;https://tools.ietf.org/html/draft-bishop-httpbis-http2-additional-certs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Future protocol extensions might also allow additional hosts to be added to the connection&lt;/a&gt;, even if they weren’t listed in the original TLS certificate used for it. As a result, assuming that the traffic on a connection is limited to the purpose it was initiated for isn’t going to apply.&lt;/p&gt;
&lt;p&gt;Despite these changes, it’s worth noting that HTTP/2 doesn’t appear to suffer from significant interoperability problems or interference from networks.&lt;/p&gt;
&lt;h4&gt;TLS 1.3&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/draft-ietf-tls-tls13/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TLS 1.3&lt;/a&gt; is just going through the final processes of standardization and is already supported by some implementations.&lt;/p&gt;
&lt;p&gt;Don’t be fooled by its incremental name; this is effectively a new version of TLS, with a much-revamped handshake that allows application data to flow from the start (often called ‘0RTT’). The new design relies upon ephemeral key exchange, thereby ruling out static keys.&lt;/p&gt;
&lt;p&gt;This has caused concern from some network operators and vendors — in particular those who need visibility into what’s happening inside those connections.&lt;/p&gt;
&lt;p&gt;For example, consider the datacentre for a bank that has regulatory requirements for visibility. By sniffing traffic in the network and decrypting it with the static keys of their servers, they can log legitimate traffic and identify harmful traffic, whether it be attackers from the outside or employees trying to leak data from the inside.&lt;/p&gt;
&lt;p&gt;TLS 1.3 doesn’t support that particular technique for intercepting traffic, since it’s also &lt;a href=&quot;https://en.wikipedia.org/wiki/Forward_secrecy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;a form of attack that ephemeral keys protect against&lt;/a&gt;. However, since they have regulatory requirements to both use modern encryption protocols and to monitor their networks, this puts those network operators in an awkward spot.&lt;/p&gt;
&lt;p&gt;There’s been much debate about whether regulations require static keys, whether alternative approaches could be just as effective, and whether weakening security for the entire Internet for the benefit of relatively few networks is the right solution. Indeed, it’s still possible to decrypt traffic in TLS 1.3, but you need access to the ephemeral keys to do so, and by design, they aren’t long-lived.&lt;/p&gt;
&lt;p&gt;At this point it doesn’t look like TLS 1.3 will change to accommodate these networks, but there are rumblings about creating another protocol that allows a third party to observe what’s going on— and perhaps more — for these use cases. Whether that gets traction remains to be seen.&lt;/p&gt;
&lt;h4&gt;QUIC&lt;/h4&gt;
&lt;p&gt;During work on HTTP/2, it became evident that TCP has similar inefficiencies. Because TCP is an in-order delivery protocol, the loss of one packet can prevent those in the buffers behind it from being delivered to the application. For a multiplexed protocol, this can make a big difference in performance.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://quicwg.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;QUIC&lt;/a&gt; is an attempt to address that by effectively rebuilding TCP semantics (along with some of HTTP/2’s stream model) on top of UDP. Like HTTP/2, it started as a Google effort and is now in the IETF, with an initial use case of HTTP-over-UDP and a goal of becoming a standard in late 2018. However, since Google has already deployed QUIC in the Chrome browser and on its sites, it already accounts for more than 7% of Internet traffic.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Read&lt;/strong&gt; &lt;a href=&quot;https://blog.apnic.net/2016/08/30/questions-answered-quic/&quot;&gt;&lt;strong&gt;Your questions answered about QUIC&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Besides the shift from TCP to UDP for such a sizable amount of traffic (and all of the adjustments in networks that might imply), both Google QUIC (gQUIC) and IETF QUIC (iQUIC) require encryption to operate at all; there is no unencrypted QUIC.&lt;/p&gt;
&lt;p&gt;iQUIC uses TLS 1.3 to establish keys for a session and then uses them to encrypt each packet. However, since it’s UDP-based, a lot of the session information and metadata that’s exposed in TCP gets encrypted in QUIC.&lt;/p&gt;
&lt;p&gt;In fact, iQUIC’s current &lt;a href=&quot;https://quicwg.github.io/base-drafts/draft-ietf-quic-transport.html#short-header&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;‘short header’&lt;/a&gt; — used for all packets except the handshake — only exposes a packet number, an optional connection identifier, and a byte of state for things like the encryption key rotation schedule and the packet type (which might end up encrypted as well).&lt;/p&gt;
&lt;p&gt;Everything else is encrypted — including ACKs, to raise the bar for &lt;a href=&quot;https://www.mjkranch.com/docs/CODASPY17_Kranch_Reed_IdentifyingHTTPSNetflix.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;traffic analysis&lt;/a&gt; attacks.&lt;/p&gt;
&lt;p&gt;However, this means that passively estimating RTT and packet loss by observing connections is no longer possible; there isn’t enough information. This lack of observability has caused a significant amount of concern by some in the operator community, who say that passive measurements like this are critical for debugging and understanding their networks.&lt;/p&gt;
&lt;p&gt;One proposal to meet this need is the ‘&lt;a href=&quot;https://tools.ietf.org/html/draft-trammell-quic-spin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spin Bit&lt;/a&gt;‘ — a bit in the header that flips once a round trip, so that observers can estimate RTT. Since it’s decoupled from the application’s state, it doesn’t appear to leak any information about the endpoints, beyond a rough estimate of location on the network.&lt;/p&gt;
&lt;h4&gt;DOH&lt;/h4&gt;
&lt;p&gt;The newest change on the horizon is DOH — &lt;a href=&quot;https://datatracker.ietf.org/wg/doh/about/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DNS over HTTP&lt;/a&gt;. A &lt;a href=&quot;https://datatracker.ietf.org/meeting/99/materials/slides-99-maprg-fingerprint-based-detection-of-dns-hijacks-using-ripe-atlas/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;significant amount of research has shown that networks commonly use DNS as a means of imposing policy&lt;/a&gt; (whether on behalf of the network operator or a greater authority).&lt;/p&gt;
&lt;p&gt;Circumventing this kind of control with encryption has been &lt;a href=&quot;https://datatracker.ietf.org/wg/dprive/about/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;discussed for a while&lt;/a&gt;, but it has a disadvantage (at least from some standpoints) — it is possible to discriminate it from other traffic; for example, by using its port number to block access.&lt;/p&gt;
&lt;p&gt;DOH addresses that by piggybacking DNS traffic onto an existing HTTP connection, thereby removing any discriminators. A network that wishes to block access to that DNS resolver can only do so by blocking access to the website as well.&lt;/p&gt;
&lt;p&gt;For example, if Google was to deploy its &lt;a href=&quot;https://developers.google.com/speed/public-dns/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;public DNS service over DOH&lt;/a&gt; on &lt;tt&gt;www.google.com&lt;/tt&gt; and a user configures their browser to use it, a network that wants (or is required) to stop it would have to effectively block all of Google (thanks to how they host their services).&lt;/p&gt;
&lt;p&gt;DOH has just started its work, but there’s already a fair amount of interest in it, and some rumblings of deployment. How the networks (and governments) that use DNS to impose policy will react remains to be seen.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Read &lt;a href=&quot;https://blog.apnic.net/2017/11/17/ietf-100-singapore-dns-http-doh/&quot;&gt;&lt;strong&gt;IETF 100, Singapore: DNS over HTTP (DOH!)&lt;/strong&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Ossification and grease&lt;/h4&gt;
&lt;p&gt;To return to motivations, one theme throughout this work is how protocol designers are increasingly encountering problems where networks make assumptions about traffic.&lt;/p&gt;
&lt;p&gt;For example, TLS 1.3 has had a number of last-minute issues with middleboxes that assume it’s an older version of the protocol. gQUIC blacklists several networks that throttle UDP traffic, because they think that it’s harmful or low-priority traffic.&lt;/p&gt;
&lt;p&gt;When a protocol can’t evolve because deployments ‘freeze’ its extensibility points, we say it has &lt;em&gt;ossified&lt;/em&gt;. TCP itself is a severe example of ossification; so many middleboxes do so many things to TCP — whether it’s blocking packets with TCP options that aren’t recognized, or ‘optimizing’ congestion control.&lt;/p&gt;
&lt;p&gt;It’s necessary to prevent ossification, to ensure that protocols can evolve to meet the needs of the Internet in the future; otherwise, it would be a ‘tragedy of the commons’ where the actions of some individual networks — although well-intended — would affect the health of the Internet overall.&lt;/p&gt;
&lt;p&gt;There are many ways to prevent ossification; if the data in question is encrypted, it cannot be accessed by any party but those that hold the keys, preventing interference. If an extension point is unencrypted but commonly used in a way that would break applications visibly (for example, HTTP headers), it’s less likely to be interfered with.&lt;/p&gt;
&lt;p&gt;Where protocol designers can’t use encryption and an extension point isn’t used often, artificially exercising the extension point can help; we call this &lt;em&gt;greasing&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;For example, QUIC encourages endpoints to use a range of decoy values in its &lt;a href=&quot;https://quicwg.github.io/base-drafts/draft-ietf-quic-transport.html#rfc.section.3.7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;version negotiation&lt;/a&gt;, to avoid implementations assuming that it will never change (as was often encountered in TLS implementations, leading to significant problems).&lt;/p&gt;
&lt;h4&gt;The network and the user&lt;/h4&gt;
&lt;p&gt;Beyond the desire to avoid ossification, these changes also reflect the evolving relationship between networks and their users. While for a long time people assumed that networks were always benevolent — or at least disinterested — parties, this is no longer the case, thanks not only to &lt;a href=&quot;https://tools.ietf.org/html/rfc7258&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pervasive monitoring&lt;/a&gt; but also attacks like &lt;a href=&quot;http://codebutler.com/firesheep&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Firesheep&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As a result, there is growing tension between the needs of Internet users overall and those of the networks who want to have access to some amount of the data flowing over them. Particularly affected will be networks that want to impose policy upon those users; for example, enterprise networks.&lt;/p&gt;
&lt;p&gt;In some cases, they might be able to meet their goals by installing software (or a CA certificate, or a browser extension) on their users’ machines. However, this isn’t as easy in cases where the network doesn’t own or have access to the computer; for example, BYOD has become common, and IoT devices seldom have the appropriate control interfaces.&lt;/p&gt;
&lt;p&gt;As a result, a lot of discussion surrounding protocol development in the IETF is touching on the sometimes competing needs of enterprises and other ‘leaf’ networks and the good of the Internet overall.&lt;/p&gt;
&lt;h4&gt;Get involved&lt;/h4&gt;
&lt;p&gt;For the Internet to work well in the long run, it needs to provide value to end users, avoid ossification, and allow networks to operate. The changes taking place now need to meet all three goals, but we need more input from network operators.&lt;/p&gt;
&lt;p&gt;If these changes affect your network — or won’t— please leave comments below, or better yet, get involved in the &lt;a href=&quot;https://www.ietf.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IETF&lt;/a&gt; by attending a meeting, joining a mailing list, or providing feedback on a draft.&lt;/p&gt;
&lt;p&gt;Thanks to Martin Thomson and Brian Trammell for their review.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;Mark Nottingham is a member of the Internet Architecture Board and co-chairs the IETF’s HTTP and QUIC Working Groups.&lt;/span&gt;&lt;br/&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table class=&quot;rw-rating-table rw-ltr rw-left&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;nobr&gt;Rate this article&lt;/nobr&gt;&lt;/td&gt;
&lt;td&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;hr/&gt;&lt;p id=&quot;views-disclaimer&quot;&gt;The views expressed by the authors of this blog are their own and do not necessarily reflect the views of APNIC. Please note a &lt;a href=&quot;http://blog.apnic.net/?p=395&quot;&gt;Code of Conduct&lt;/a&gt; applies to this blog.&lt;/p&gt;
</description>
<pubDate>Tue, 12 Dec 2017 16:14:29 +0000</pubDate>
<dc:creator>nmjohn</dc:creator>
<og:type>article</og:type>
<og:title>Internet protocols are changing | APNIC Blog</og:title>
<og:description>Guest Post: Learn about the significant recent changes being made to the core Internet protocols.</og:description>
<og:url>https://blog.apnic.net/2017/12/12/internet-protocols-changing/</og:url>
<og:image>https://blog.apnic.net/wp-content/uploads/2017/12/evolution.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.apnic.net/2017/12/12/internet-protocols-changing/</dc:identifier>
</item>
<item>
<title>SEC Shuts Down Munchee ICO</title>
<link>https://techcrunch.com/2017/12/12/sec-shuts-down-munchee-ico/</link>
<guid isPermaLink="true" >https://techcrunch.com/2017/12/12/sec-shuts-down-munchee-ico/</guid>
<description>&lt;img src=&quot;https://tctechcrunch2011.files.wordpress.com/2017/12/bg-foodee.jpg?w=738&quot; class=&quot;&quot;/&gt;&lt;p id=&quot;speakable-summary&quot;&gt;In what should be an interesting beginning to the coming avalanche of ICO failures, the SEC has come down hard on &lt;a target=&quot;_blank&quot; href=&quot;https://munchee.io&quot; rel=&quot;noopener&quot;&gt;Munchee&lt;/a&gt;, a company that built a $15 million token sale. The &lt;a target=&quot;_blank&quot; href=&quot;https://techcrunch.com/2017/12/11/with-markets-going-crypto-crazy-sec-chairman-weighs-in/&quot; rel=&quot;noopener&quot;&gt;SEC chairman&lt;/a&gt; recently noted that coin offerings are, in fact, securities and that pre-sale participants must be registered with the SEC.&lt;/p&gt;&lt;p&gt;The &lt;a target=&quot;_blank&quot; href=&quot;https://www.coindesk.com/sec-halts-multimillion-dollar-munchee-ico-securities-violations/&quot; rel=&quot;noopener&quot;&gt;Munchee ICO&lt;/a&gt; aimed to fund the MUN coin, a payment system for restaurant reviews. The company received a &lt;a target=&quot;_blank&quot; href=&quot;https://www.sec.gov/litigation/admin/2017/33-10445.pdf&quot; rel=&quot;noopener&quot;&gt;cease and desist&lt;/a&gt; from the SEC on December 11.&lt;/p&gt;
&lt;p&gt;Within the SECs findings they noted that Munchee touted itself as a “utility” token which means that the company believed the MUN token would be primarily used within the Munchee ecosystem and not be used to fund operations. However, thanks to an application of the &lt;a target=&quot;_blank&quot; href=&quot;http://consumer.findlaw.com/securities-law/what-is-the-howey-test.html&quot; rel=&quot;noopener&quot;&gt;Howey Test&lt;/a&gt; (a Supreme Court finding that essentially states that any instrument with the expectation of return is an investment vehicle), the SEC found the Munchee was actually releasing a security masquerading as a utility.&lt;/p&gt;
&lt;p&gt;“Munchee offered MUN tokens in order to raise capital to build a profitable enterprise,” read the SEC notice. “Munchee said that it would use the offering proceeds to run its business, including hiring people to develop its product, promoting the Munchee App, and ensuring ‘the smooth operation of the MUN token ecosystem.'”&lt;/p&gt;
&lt;p&gt;The stickiest part? Munchee claimed that its coins would increase in value thanks to a convoluted process of growth.&lt;/p&gt;
&lt;p&gt;“In the MUN White Paper, on the Munchee Website and elsewhere, Munchee and its agents further emphasized that the company would run its business in ways that would cause MUN tokens to rise in value. First, Munchee described a ‘tier’ plan in which the amount it would pay for a Munchee App review would depend on the amount of the author’s holdings of MUN tokens. For example, a “Diamond Level” holder having at least 300 MUN tokens would be paid more for a review than a “Gold Level” holder having only 200 MUN tokens. Also, Munchee said it could or would “burn” MUN tokens in the future when restaurants pay for advertising with MUN tokens, thereby taking MUN tokens out of circulation,” wrote the SEC.&lt;/p&gt;
&lt;p&gt;The final nail?&lt;/p&gt;

&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;Munchee published a blog post on October 30, 2017 that was titled “7 Reasons You Need To Join The Munchee Token Generation Event.” Reason 4 listed on the post was “As more users get on the platform, the more valuable your MUN tokens will become” and then went on to describe how MUN purchasers could “watch[] their value increase over time” and could count on the “burning” of MUN tokens to raise the value of remaining MUN tokens.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In short, Munchee was undone by two things: depending on the token sale as a vehicle to raise cash for operations and using the typically spammy and scammy marketing efforts most ICO floggers use now, tactics taken directly from affiliate marketing handbooks.&lt;/p&gt;
&lt;p&gt;Until token sales leave the internet ghetto and refuse to use get-rich-quick tactics and erection pill marketing ploys, more and more of these ridiculous token sales will end in failure. Fortunately, Munchee was able to return all $15 million to the 40 investors that dumped their coins into scheme.&lt;/p&gt;
&lt;p&gt;I tried to contact Munchee via their website but, like their ICO, that feature is shut down.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignright size-full wp-image-1577162&quot; src=&quot;https://tctechcrunch2011.files.wordpress.com/2017/12/screen-shot-2017-12-12-at-9-18-33-am.png?w=1024&amp;amp;h=790&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;790&quot; srcset=&quot;https://tctechcrunch2011.files.wordpress.com/2017/12/screen-shot-2017-12-12-at-9-18-33-am.png?w=1024&amp;amp;h=790 1024w, https://tctechcrunch2011.files.wordpress.com/2017/12/screen-shot-2017-12-12-at-9-18-33-am.png?w=150&amp;amp;h=116 150w, https://tctechcrunch2011.files.wordpress.com/2017/12/screen-shot-2017-12-12-at-9-18-33-am.png?w=300&amp;amp;h=231 300w, https://tctechcrunch2011.files.wordpress.com/2017/12/screen-shot-2017-12-12-at-9-18-33-am.png?w=768&amp;amp;h=592 768w, https://tctechcrunch2011.files.wordpress.com/2017/12/screen-shot-2017-12-12-at-9-18-33-am.png?w=680&amp;amp;h=525 680w, https://tctechcrunch2011.files.wordpress.com/2017/12/screen-shot-2017-12-12-at-9-18-33-am.png 1426w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;/p&gt;
&lt;small&gt;Featured Image: munchee&lt;/small&gt;</description>
<pubDate>Tue, 12 Dec 2017 15:38:39 +0000</pubDate>
<dc:creator>LearnerHerzog</dc:creator>
<og:title>SEC shuts down Munchee ICO</og:title>
<og:description>In what should be an interesting beginning to the coming avalanche of ICO failures, the SEC has come down hard on Munchee, a company that built a $15 million..</og:description>
<og:image>https://tctechcrunch2011.files.wordpress.com/2017/12/bg-foodee.jpg</og:image>
<og:url>http://social.techcrunch.com/2017/12/12/sec-shuts-down-munchee-ico/</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2017/12/12/sec-shuts-down-munchee-ico/</dc:identifier>
</item>
<item>
<title>Why Is Anime Obsessed With Power Lines?</title>
<link>https://www.atlasobscura.com/articles/why-power-lines-anime-electrical-infrastructure</link>
<guid isPermaLink="true" >https://www.atlasobscura.com/articles/why-power-lines-anime-electrical-infrastructure</guid>
<description>&lt;img class=&quot;article-image with-structured-caption&quot; src=&quot;https://assets.atlasobscura.com/article_images/49639/image.jpg&quot; alt=&quot;Some damn fine power lines from hit anime &amp;lt;em&amp;gt;One Punch Man&amp;lt;/em&amp;gt;. &quot; width=&quot;auto&quot; data-kind=&quot;article-image&quot; id=&quot;article-image-49639&quot;/&gt;Some damn fine power lines from hit anime &lt;em&gt;One Punch Man&lt;/em&gt;. &lt;a class=&quot;caption-credit&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;http://www.madhouse.co.jp/&quot;&gt;Madhouse/Netflix&lt;/a&gt;&lt;p class=&quot;item-body-text-graf&quot;&gt;&lt;span class=&quot;section-start-text&quot;&gt;Tumblr can be a wild&lt;/span&gt; and … fascinating place. If you can think of it, there is a probably a Tumblr blog dedicated to it. From &lt;em&gt;&lt;a href=&quot;http://law-order-food.tumblr.com/&quot;&gt;Law &amp;amp; Order &amp;amp; Food&lt;/a&gt;&lt;/em&gt; to the classic &lt;em&gt;&lt;a href=&quot;http://awkwardstockphotos.com/&quot;&gt;Awkward Stock Photos&lt;/a&gt;&lt;/em&gt; to &lt;a href=&quot;http://weirdtumblrs.tumblr.com/&quot;&gt;a Tumblr dedicated to other weird Tumblrs&lt;/a&gt;, there is something for everyone. But every so often, amid all the hyper-specific strangeness and absurdity, something emerges that shines a light on some previously unexplored facet of the world. We know what you’re thinking: Why are there so many shots of power lines in Japanese anime cartoons?&lt;/p&gt;
&lt;p class=&quot;item-body-text-graf&quot;&gt;The Tumblr &lt;a href=&quot;https://powerlinesinanime.tumblr.com/&quot;&gt;&lt;em&gt;Power Lines in Anime&lt;/em&gt;&lt;/a&gt; is dedicated to appreciating the truly lovely and surprisingly ubiquitous depictions of mundane power lines that appear in a large number of Japanese animation series. The blog is run by Tumblr user whitequark, who first started to notice the trend while watching a romantic comedy anime. “I first noticed that power lines were ‘A Thing’ while watching &lt;a href=&quot;http://www.crunchyroll.com/monthly-girls-nozaki-kun&quot;&gt;&lt;em&gt;Monthly Girls Nozaki-kun&lt;/em&gt;&lt;/a&gt; and looking at the background behind the reflection in the glass,” says whitequark, who prefers to use their online handle. “That made me think it over. Why, indeed, are there so many power lines? Why are these industrial constructs with lots of time-consuming detail drawn so consistently true to their nature?”&lt;/p&gt;
&lt;img class=&quot;article-image with-structured-caption&quot; src=&quot;https://assets.atlasobscura.com/article_images/49651/image.jpg&quot; alt=&quot;A detailed shot of power lines from &amp;lt;em&amp;gt;Neon Genesis Evangelion&amp;lt;/em&amp;gt;.&quot; width=&quot;auto&quot; data-kind=&quot;article-image&quot; id=&quot;article-image-49651&quot;/&gt;A detailed shot of power lines from &lt;em&gt;Neon Genesis Evangelion&lt;/em&gt;. &lt;a class=&quot;caption-credit&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;https://www.youtube.com/watch?time_continue=35&amp;amp;v=vGzJOeyJgFM&quot;&gt;Alexspier/YouTube&lt;/a&gt;
&lt;p class=&quot;item-body-text-graf&quot;&gt;Anime series can cover any number of genres, including sports, high fantasy, office life, and, of course, science fiction, but no matter what it’s about, it seems that if the story is set on modern-day Earth, it will contain some amazingly detailed images of power lines, telephone poles, and other wired infrastructure. While a number of anime series (and cartoons in general), opt for a style of hyper-detailed backgrounds before which relatively simpler characters can interact, power lines stand out for the detail and complexity required to illustrate them. Speaking about one such power line shot, whitquark says, “It serves no purpose to the story. It is not repeated, emphasized, seems to have no useful purpose. Yet it is there! Someone cared about it, cared about it so much to go outside, take a photo, lovingly trace and color it to utter perfection.” They might be mundane, but their consistent presence could point to a deeper significance.&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/vGzJOeyJgFM?start=35&quot; width=&quot;560&quot; height=&quot;315&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p class=&quot;item-body-text-graf&quot;&gt;“It puts the power infrastructure first and foremost as narrative and visual elements of the anime,” says &lt;a href=&quot;https://www.concordia.ca/finearts/cinema/faculty.html?fpid=marc-steinberg&quot;&gt;Marc Steinberg&lt;/a&gt;, a scholar of film studies at Concordia University in Montreal and author of &lt;a href=&quot;https://www.upress.umn.edu/book-division/books/animeas-media-mix&quot;&gt;&lt;em&gt;Anime’s Media Mix&lt;/em&gt;&lt;/a&gt;. For years, he has been studying and teaching anime, and he has also noticed the prevalence of power lines. He traces the origin of the trend to one of the most popular anime series in recent memory. “I think it’s basically a post–&lt;a href=&quot;http://evangelion.wikia.com/wiki/Neon_Genesis_Evangelion_(anime)&quot;&gt;&lt;em&gt;Neon Genesis Evangelion&lt;/em&gt;&lt;/a&gt; phenomenon,” he says. “One of the peculiarities [of the series], besides the crazy storyline, is that it really focused on objects in everyday life in a way that anime before that had not, as much. This includes shots of telephone booths, shots of doorways, train crossings. Things that were associated with everyday life in Japan at that moment in time.” In that anime specifically, Steinberg says, power lines are specifically highlighted as a visual connection to the theme of power that runs through the series—most fantastically and prominently seen in the colossal power cords connected to the titular giant robots.&lt;/p&gt;
&lt;p class=&quot;item-body-text-graf&quot;&gt;The trend didn’t stop with the series, but instead became a kind of signifier. “[&lt;em&gt;Evangelion&lt;/em&gt;] had all these shots of power lines, and it became this signature for the more experimental, slightly more adult-oriented anime that became popular in the late 1990s, early 2000s,” says Steinberg. He also mentions another influential anime that may have helped cement anime power lines as a recurring trope, &lt;em&gt;Serial Experiment Lain&lt;/em&gt;, released in 1998. The series, set in suburban Japan, focused heavily on themes of communication and electricity, and unsurprisingly had a number of illustrated power lines and telephone poles. whitequark says that they consider it “*the* power lines anime” (although their favorite anime power lines belong to &lt;a href=&quot;https://powerlinesinanime.tumblr.com/post/148972975619/nisemonogatari&quot;&gt;a series called &lt;em&gt;Monogatari&lt;/em&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/OoGChbQ3h5E&quot; width=&quot;560&quot; height=&quot;315&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p class=&quot;item-body-text-graf&quot;&gt;Maybe the most obvious explanation for the trend of power line shots is that many anime stories take place in and around some version of Tokyo, which contains a great number of power lines and electrical pylons IRL. “You’re kind of covered in power lines. A lot of the power grid is above ground. In places where the power grid is mostly underground, it’s not as evident and visible an aspect of everyday city life. In part because of the trains that run on electricity,” says Steinberg. Power lines act as a signal of the mundane and the normal in the modern Japanese landscape. They aren’t the only image that appears regularly in anime to signal everyday life, they stand out as both one of the most common and the most visually complex. “Train crossings are one of the other big ones,” says Steinberg.&lt;/p&gt;
&lt;p class=&quot;item-body-text-graf item-body-last&quot;&gt;Over the last two decades, the power line trope can now be found in all kinds of anime, including smash hits such as &lt;a href=&quot;http://onepunchman.wikia.com/wiki/One-Punch_Man_Wiki&quot;&gt;&lt;em&gt;One Punch Man&lt;/em&gt;&lt;/a&gt;. The presence of detailed background infrastructure in a cartoon might seem like a small thing, but once you notice them, these seemingly innocuous images take on a whole new significance. whitequark certainly won’t see anime the same way again. “This, to me, seems like a reflection of anime’s soul in general: Spend all of yourself on the things almost no one will notice, and spend yourself thrice on things that truly are important.”&lt;/p&gt;
</description>
<pubDate>Tue, 12 Dec 2017 11:07:49 +0000</pubDate>
<dc:creator>drops</dc:creator>
<og:title>Why Is Anime Obsessed With Power Lines?</og:title>
<og:url>http://www.atlasobscura.com/articles/why-power-lines-anime-electrical-infrastructure</og:url>
<og:image>https://assets.atlasobscura.com/media/W1siZiIsInVwbG9hZHMvYXNzZXRzL2I5Y2YwNmU2NDE2ZmQzMDE1ZF9TY3JlZW4gU2hvdCAyMDE3LTEyLTExIGF0IDEyLjE5LjExIFBNLnBuZyJdLFsicCIsImNvbnZlcnQiLCItcXVhbGl0eSA4MSAtYXV0by1vcmllbnQiXSxbInAiLCJ0aHVtYiIsIjYwMHg-Il1d/Screen%20Shot%202017-12-11%20at%2012.19.11%20PM.png</og:image>
<og:description>Exploring the reasons behind the genre's lavishly detailed electrical infrastructure.</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.atlasobscura.com/articles/why-power-lines-anime-electrical-infrastructure</dc:identifier>
</item>
<item>
<title>Microsoft Adds an OpenSSH Client to Windows 10</title>
<link>https://www.servethehome.com/say-farewell-putty-microsoft-adds-openssh-client-windows-10/</link>
<guid isPermaLink="true" >https://www.servethehome.com/say-farewell-putty-microsoft-adds-openssh-client-windows-10/</guid>
<description>&lt;div class=&quot;td-post-featured-image&quot; readability=&quot;32&quot;&gt;&lt;a href=&quot;https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client-Cover.jpg&quot; data-caption=&quot;Microsoft Windows OpenSSH Client Cover&quot;&gt;&lt;img width=&quot;696&quot; height=&quot;386&quot; class=&quot;entry-thumb td-modal-image&quot; src=&quot;https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client-Cover-696x386.jpg&quot; srcset=&quot;https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client-Cover-696x385.jpg 696w, https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client-Cover-400x222.jpg 400w, https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client-Cover-800x444.jpg 800w, https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client-Cover-757x420.jpg 757w, https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client-Cover.jpg 863w&quot; sizes=&quot;(max-width: 696px) 100vw, 696px&quot; alt=&quot;Microsoft Windows OpenSSH Client Cover&quot; title=&quot;Microsoft Windows OpenSSH Client Cover&quot;/&gt;&lt;/a&gt;Microsoft Windows OpenSSH Client Cover&lt;/div&gt;
&lt;p&gt;Ask just about any *NIX admin using a Windows laptop and they will have come across Putty. For years, Apple MacBooks have been the go-to choice for many admins partly because getting to a ssh shell is so easy. The newly re-invigorated Microsoft is changing how easy it is to interface with Linux (and other *NIX flavors) significantly with features like &lt;a href=&quot;https://www.servethehome.com/install-ubuntu-fedora-suse-windows-apps/&quot;&gt;Ubuntu on Windows&lt;/a&gt;. There is a new beta feature in Windows 10 that may just see the retirement of Putty from many users: an OpenSSH client and OpenSSH server application for Windows.&lt;span id=&quot;more-25901&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Installing the Windows OpenSSH Client&lt;/h2&gt;
&lt;p&gt;Since this is not the best-documented feature, and still one in Beta, we made a quick video of the installation process.&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/iyLUTgyDkGI?feature=oembed&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;If you do not want to watch go to “Manage Optional Features” then + “Add a feature”. You can then scroll down the list and find the OpenSSH Client (Beta) and OpenSSH Server (Beta) features in Windows. The idea of running another remote service on Windows can be daunting so we do not blame you if you do not want to install the server.&lt;/p&gt;
&lt;p&gt;Once installed, you can simply fire up your command line and use the OpenSSH client by typing ssh followed by the command such as ssh ubuntu@someIP.&lt;/p&gt;
&lt;a href=&quot;https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client.jpg&quot;&gt;&lt;img class=&quot;size-full wp-image-25914&quot; src=&quot;https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client.jpg&quot; alt=&quot;Microsoft Windows OpenSSH Client&quot; width=&quot;620&quot; height=&quot;171&quot; srcset=&quot;https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client.jpg 620w, https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client-400x110.jpg 400w&quot; sizes=&quot;(max-width: 620px) 100vw, 620px&quot;/&gt;&lt;/a&gt;Microsoft Windows OpenSSH Client
&lt;p&gt;Here is the current (as of November 28, 2017) ssh command usage guide we are getting with the Windows OpenSSH Client:&lt;br/&gt;&lt;code&gt;C:\WINDOWS\system32&amp;gt;ssh&lt;br/&gt;usage: ssh [-46AaCfGgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]&lt;br/&gt;[-D [bind_address:]port] [-E log_file] [-e escape_char]&lt;br/&gt;[-F configfile] [-I pkcs11] [-i identity_file]&lt;br/&gt;[-J [user@]host[:port]] [-L address] [-l login_name] [-m mac_spec]&lt;br/&gt;[-O ctl_cmd] [-o option] [-p port] [-Q query_option] [-R address]&lt;br/&gt;[-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]]&lt;br/&gt;[user@]hostname [command]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For most admins, this is going to be extremely easy to transition to.&lt;/p&gt;
&lt;h2&gt;Final Words&lt;/h2&gt;
&lt;p&gt;Many of our readers use higher-end terminal solutions like MobaXterm Professional. At the same time, when you just need a SSH session, being able to launch via the standard Windows command line is awesome. Microsoft is clearly taking steps to make the IT admin’s job much easier, and this is one simple example where Windows is making great strides. For those who use Putty as the simple SSH solution on Windows, those days are numbered.&lt;/p&gt;

</description>
<pubDate>Tue, 12 Dec 2017 09:57:33 +0000</pubDate>
<dc:creator>awiesenhofer</dc:creator>
<og:image>https://www.servethehome.com/wp-content/uploads/2017/11/Microsoft-Windows-OpenSSH-Client-Cover.jpg</og:image>
<og:type>article</og:type>
<og:title>Say Farewell to Putty as Microsoft adds an OpenSSH Client to Windows 10</og:title>
<og:description>If you need a quick OpenSSH client or server for Windows 10, there is a beta client hidden and available for installation</og:description>
<og:url>https://www.servethehome.com/say-farewell-putty-microsoft-adds-openssh-client-windows-10/</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.servethehome.com/say-farewell-putty-microsoft-adds-openssh-client-windows-10/</dc:identifier>
</item>
<item>
<title>High-Level Problems with Git and How to Fix Them</title>
<link>https://gregoryszorc.com/blog/2017/12/11/high-level-problems-with-git-and-how-to-fix-them/</link>
<guid isPermaLink="true" >https://gregoryszorc.com/blog/2017/12/11/high-level-problems-with-git-and-how-to-fix-them/</guid>
<description>&lt;p&gt;I have a... complicated relationship with Git.&lt;/p&gt;
&lt;p&gt;When Git first came onto the scene in the mid 2000's, I was initially skeptical because of its horrible user interface. But once I learned it, I appreciated its speed and features - especially the ease at which you could create feature branches, merge, and even create commits offline (which was a big deal in the era when Subversion was the dominant version control tool in open source and you needed to speak with a server in order to commit code). When I started using Git day-to-day, it was such an obvious improvement over what I was using before (mainly Subversion and even CVS).&lt;/p&gt;
&lt;p&gt;When I started working for Mozilla in 2011, I was exposed to the Mercurial version control, which then - and still today - hosts the canonical repository for Firefox. I didn't like Mercurial initially. Actually, I despised it. I thought it was slow and its features lacking. And I frequently encountered repository corruption.&lt;/p&gt;
&lt;p&gt;My first experience learning the &lt;em&gt;internals&lt;/em&gt; of both Git and Mercurial came when I found myself hacking on &lt;a href=&quot;http://hg-git.github.io/]&quot;&gt;hg-git&lt;/a&gt; - a tool that allows you to convert Git and Mercurial repositories to/from each other. I was hacking on hg-git so I could improve the performance of converting Mercurial repositories to Git repositories. And I was doing that because I wanted to use Git - not Mercurial - to hack on Firefox. I was trying to enable an unofficial Git mirror of the Firefox repository to synchronize faster so it would be more usable. The ulterior motive was to demonstrate that Git is a superior version control tool and that Firefox should switch its canonical version control tool from Mercurial to Git.&lt;/p&gt;
&lt;p&gt;In what is a textbook definition of &lt;em&gt;irony&lt;/em&gt;, what happened instead was I actually learned how Mercurial worked, interacted with the Mercurial Community, realized that Mozilla's documentation and developer practices were... lacking, and that Mercurial was actually a much, much more pleasant tool to use than Git. It's an old post, but I &lt;a href=&quot;https://gregoryszorc.com/blog/2013/05/12/thoughts-on-mercurial-(and-git)/&quot;&gt;summarized my conversion&lt;/a&gt; four and a half years ago. This started a chain of events that somehow resulted in me contributing a ton of patches to Mercurial, taking stewardship of &lt;em&gt;hg.mozilla.org&lt;/em&gt;, and becoming a member of the Mercurial Steering Committee - the governance group for the Mercurial Project.&lt;/p&gt;
&lt;p&gt;I've been an advocate of Mercurial over the years. Some would probably say I'm a Mercurial fanboy. I reject that characterization because &lt;em&gt;fanboy&lt;/em&gt; has connotations that imply I'm ignorant of realities. I'm well aware of Mercurial's faults and weaknesses. I'm well aware of Mercurial's relative lack of popularity, I'm well aware that this lack of popularity almost certainly turns away contributors to Firefox and other Mozilla projects because people don't want to have to learn a new tool. I'm well aware that there are changes underway to enable Git to scale to &lt;em&gt;very large repositories&lt;/em&gt; and that these changes could threaten Mercurial's scalability advantages over Git, making choices to use Mercurial even harder to defend. (As an aside, the party most responsible for pushing Git to adopt architectural changes to enable it to scale these days is Microsoft. Could anyone have foreseen that?!)&lt;/p&gt;
&lt;p&gt;I've achieved mastery in both Git and Mercurial. I know their internals and their command line interfaces extremely well. I understand the architecture and principles upon which both are built. I'm also exposed to some very experienced and knowledgeable people in the Mercurial Community. People who have been around version control for much, much longer than me and have knowledge of random version control tools you've probably never heard of. This knowledge and exposure allows me to make connections and see opportunities for version control that quite frankly most do not.&lt;/p&gt;
&lt;p&gt;In this post, I'll be talking about some high-level, high-impact problems with Git and possible solutions for them. My primary goal of this post is to foster positive change in Git and the services around it. While I personally prefer Mercurial, improving Git is good for everyone. Put another way, I want my knowledge and perspective from being part of a version control community to be put to good wherever it can.&lt;/p&gt;
&lt;p&gt;Speaking of Mercurial, as I said, I'm a heavy contributor and am somewhat influential in the Mercurial Community. I want to be clear that my opinions in this post are my own and I'm not speaking on behalf of the Mercurial Project or the larger Mercurial Community. I also don't intend to claim that Mercurial is &lt;em&gt;holier-than-thou&lt;/em&gt;. Mercurial has tons of user interface failings and deficiencies. And I'll even admit to being frustrated that some systemic failings in Mercurial have gone unaddressed for as long as they have. But that's for another post. This post is about Git. Let's get started.&lt;/p&gt;
&lt;h2&gt;The Staging Area&lt;/h2&gt;
&lt;p&gt;The staging area is a feature that should not be enabled in the default Git configuration.&lt;/p&gt;
&lt;p&gt;Most people see version control as an obstacle standing in the way of accomplishing some other task. They just want to save their progress towards some goal. In other words, they want version control to be a &lt;em&gt;save file&lt;/em&gt; feature in their workflow.&lt;/p&gt;
&lt;p&gt;Unfortunately, modern version control tools don't work that way. For starters, they require people to specify a &lt;em&gt;commit message&lt;/em&gt; every time they save. This in of itself can be annoying. But we generally accept that as the price you pay for version control: that &lt;em&gt;commit message&lt;/em&gt; has value to others (or even your future self). So you must record it.&lt;/p&gt;
&lt;p&gt;Most people want the barrier to saving changes to be effortless. A commit message is already too annoying for many users! The Git staging area establishes a &lt;em&gt;higher&lt;/em&gt; barrier to saving. Instead of just saving your changes, you must first &lt;em&gt;stage&lt;/em&gt; your changes to be saved.&lt;/p&gt;
&lt;p&gt;If you requested &lt;em&gt;save&lt;/em&gt; in your favorite GUI application, text editor, etc and it popped open a &lt;em&gt;select the changes you would like to save dialog&lt;/em&gt;, you would rightly think &lt;em&gt;just save all my changes already, dammit.&lt;/em&gt; But this is exactly what Git does with its staging area! Git is saying &lt;em&gt;I know all the changes you made: now tell me which changes you'd like to save.&lt;/em&gt; To the average user, this is infuriating because it works in contrast to how the &lt;em&gt;save&lt;/em&gt; feature works in almost every other application.&lt;/p&gt;
&lt;p&gt;There is a counterargument to be made here. You could say that the editor/application/etc is complex - that it has multiple &lt;em&gt;contexts&lt;/em&gt; (files) - that each context is independent - and that the user should have full control over which contexts (files) - and even changes within those contexts - to save. I agree: this is a compelling feature. However, it isn't an appropriate &lt;em&gt;default&lt;/em&gt; feature. The ability to pick which changes to save is a power-user feature. Most users just want to save all the changes all the time. So that should be the default behavior. And the Git staging area should be an opt-in feature.&lt;/p&gt;
&lt;p&gt;If intrinsic workflow warts aren't enough, the Git staging area has a horrible user interface. It is often referred to as the &lt;em&gt;cache&lt;/em&gt; &lt;a href=&quot;https://stackoverflow.com/questions/6716355/why-staging-directory-is-also-called-index-git-index/6718135#6718135&quot;&gt;for historical reasons&lt;/a&gt;. &lt;em&gt;Cache&lt;/em&gt; of course means something to anyone who knows anything about computers or programming. And Git's use of &lt;em&gt;cache&lt;/em&gt; doesn't at all align with that common definition. Yet the the terminology in Git persists. You have to run commands like &lt;code&gt;git diff --cached&lt;/code&gt; to examine the state of the &lt;em&gt;staging area&lt;/em&gt;. Huh?!&lt;/p&gt;
&lt;p&gt;But Git also refers to the &lt;em&gt;staging area&lt;/em&gt; as the &lt;em&gt;index&lt;/em&gt;. And this terminology also appears in Git commands! &lt;code&gt;git help commit&lt;/code&gt; has numerous references to the &lt;em&gt;index&lt;/em&gt;. Let's see what &lt;code&gt;git help glossary&lt;/code&gt; has to say::&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;index
    A collection of files with stat information, whose contents are
    stored as objects. The index is a stored version of your working tree.
    Truth be told, it can also contain a second, and even a third
    version of a working tree, which are used when merging.

index entry
    The information regarding a particular file, stored in the index.
    An index entry can be unmerged, if a merge was started, but not
    yet finished (i.e. if the index contains multiple versions of that
    file).
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In terms of end-user documentation, this is a train wreck. It tells the lay user absolutely nothing about what the &lt;em&gt;index&lt;/em&gt; actually is. Instead, it casually throws out references to &lt;em&gt;stat information&lt;/em&gt; (requires the user know what the &lt;code&gt;stat()&lt;/code&gt; function call and struct are) and &lt;em&gt;objects&lt;/em&gt; (a Git term for a piece of data stored by Git). It even undermines its own credibility with that &lt;em&gt;truth be told&lt;/em&gt; sentence. This definition is so bad that it would probably improve user understanding if it were deleted!&lt;/p&gt;
&lt;p&gt;Of course, &lt;code&gt;git help index&lt;/code&gt; says &lt;em&gt;No manual entry for gitindex&lt;/em&gt;. So there is literally no hope for you to get a concise, understandable definition of the &lt;em&gt;index&lt;/em&gt;. Instead, it is one of those concepts that you think you learn from interacting with it all the time. &lt;em&gt;Oh, when I &lt;code&gt;git add&lt;/code&gt; something it gets into this state where &lt;code&gt;git commit&lt;/code&gt; will actually save it.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And even if you know what the Git staging area/index/cached is, it can still confound you. Do you know the interaction between uncommitted changes in the staging area and working directory when you &lt;code&gt;git rebase&lt;/code&gt;? What about &lt;code&gt;git checkout&lt;/code&gt;? What about the various &lt;code&gt;git reset&lt;/code&gt; invocations? I have a confession: I can't remember all the edge cases either. To play it safe, I try to make sure all my outstanding changes are committed before I run something like &lt;code&gt;git rebase&lt;/code&gt; because I &lt;em&gt;know&lt;/em&gt; that will be safe.&lt;/p&gt;
&lt;p&gt;The Git staging area doesn't have to be this complicated. A &lt;em&gt;re-branding&lt;/em&gt; away from &lt;em&gt;index&lt;/em&gt; to &lt;em&gt;staging area&lt;/em&gt; would go a long way. Adding an alias from &lt;code&gt;git diff --staged&lt;/code&gt; to &lt;code&gt;git diff --cached&lt;/code&gt; and removing references to the &lt;em&gt;cache&lt;/em&gt; from common user commands would make a lot of sense and reduce end-user confusion.&lt;/p&gt;
&lt;p&gt;Of course, the Git staging area doesn't really need to exist at all! The staging area is essentially a &lt;em&gt;soft commit&lt;/em&gt;. It performs the &lt;em&gt;save progress&lt;/em&gt; role - the basic requirement of a version control tool. And in some aspects it is actually a better &lt;em&gt;save progress&lt;/em&gt; implementation than a &lt;em&gt;commit&lt;/em&gt; because it doesn't require you to type a commit message! Because the &lt;em&gt;staging area&lt;/em&gt; is a soft commit, all workflows using it can be modeled as if it were a real commit and the &lt;em&gt;staging area&lt;/em&gt; didn't exist at all! For example, instead of &lt;code&gt;git add --interactive&lt;/code&gt; + &lt;code&gt;git commit&lt;/code&gt;, you can run &lt;code&gt;git commit --interactive&lt;/code&gt;. Or if you wish to incrementally add new changes to an in-progress commit, you can run &lt;code&gt;git commit --amend&lt;/code&gt; or &lt;code&gt;git commit --amend --interactive&lt;/code&gt; or &lt;code&gt;git commit --amend --all&lt;/code&gt;. If you actually understand the various modes of &lt;code&gt;git reset&lt;/code&gt;, you can use those to &lt;em&gt;uncommit&lt;/em&gt;. Of course, the user interface to performing these actions in Git today is a bit convoluted. But if the &lt;em&gt;staging area&lt;/em&gt; didn't exist, new high-level commands like &lt;code&gt;git amend&lt;/code&gt; and &lt;code&gt;git uncommit&lt;/code&gt; could certainly be invented.&lt;/p&gt;
&lt;p&gt;To the average user, the &lt;em&gt;staging area&lt;/em&gt; is a complicated concept. I'm a power user. I understand its purpose and how to harness its power. Yet when I use Mercurial (which doesn't have a &lt;em&gt;staging area&lt;/em&gt;), I don't miss the &lt;em&gt;staging area&lt;/em&gt; at all. Instead, I learn that all operations involving the &lt;em&gt;staging area&lt;/em&gt; can be modeled as other fundamental primitives (like &lt;em&gt;commit amend&lt;/em&gt;) that you are likely to encounter anyway. The &lt;em&gt;staging area&lt;/em&gt; therefore constitutes an unnecessary burden and cognitive load on users. While powerful, its complexity and incurred confusion does not justify its existence in the default Git configuration. The &lt;em&gt;staging area&lt;/em&gt; is a power-user feature and should be opt-in by default.&lt;/p&gt;
&lt;h2&gt;Branches and Remotes Management is Complex and Time-Consuming&lt;/h2&gt;
&lt;p&gt;When I first used Git (coming from CVS and Subversion), I thought branches and remotes were incredible because they enabled new workflows that allowed you to easily track multiple lines of work across many repositories. And ~10 years later, I still believe the workflows they enable are important. However, having amassed a broader perspective, I also believe their implementation is poor and this unnecessarily confuses many users and wastes the time of &lt;em&gt;all&lt;/em&gt; users.&lt;/p&gt;
&lt;p&gt;My initial &lt;em&gt;zen moment&lt;/em&gt; with Git - the time when Git finally clicked for me - was when I understood Git's object model: that Git is just a content indexed key-value store consisting of a different object types (blobs, trees, and commits) that have a particular relationship with each other. &lt;em&gt;Refs&lt;/em&gt; are symbolic names pointing to Git commit objects. And Git &lt;em&gt;branches&lt;/em&gt; - both local and remote - are just &lt;em&gt;refs&lt;/em&gt; having a well-defined naming convention (&lt;code&gt;refs/heads/&amp;lt;name&amp;gt;&lt;/code&gt; for local branches and &lt;code&gt;refs/remotes/&amp;lt;remote&amp;gt;/&amp;lt;name&amp;gt;&lt;/code&gt; for remote branches). Even &lt;em&gt;tags&lt;/em&gt; and &lt;em&gt;notes&lt;/em&gt; are defined via &lt;em&gt;refs&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Refs&lt;/em&gt; are a necessary primitive in Git because the Git storage model is to throw all &lt;em&gt;objects&lt;/em&gt; into a single, key-value namespace. Since the store is content indexed and the key name is a cryptographic hash of the object's content (which for all intents and purposes is random gibberish to end-users), the Git store by itself is unable to locate objects. If all you had was the key-value store and you wanted to &lt;em&gt;find all commits&lt;/em&gt;, you would need to walk every object in the store and read it to see if it is a commit object. You'd then need to buffer metadata about those objects in memory so you could reassemble them into say a DAG to facilitate looking at commit history. This approach obviously doesn't scale. &lt;em&gt;Refs&lt;/em&gt; short-circuit this process by providing pointers to objects of importance. It may help to think of the set of &lt;em&gt;refs&lt;/em&gt; as an &lt;em&gt;index&lt;/em&gt; into the Git store.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Refs&lt;/em&gt; also serve another role: as guards against garbage collection. I won't go into details about loose objects and packfiles, but it's worth noting that Git's key-value store also behaves in ways similar to a generational garbage collector like you would find in programming languages such as Java and Python. The important thing to know is that Git will garbage collect (read: delete) objects that are unused. And the mechanism it uses to determine which objects are unused is to iterate through &lt;em&gt;refs&lt;/em&gt; and walk all transitive references from that initial pointer. If there is an object in the store that can't be traced back to a &lt;em&gt;ref&lt;/em&gt;, it is &lt;em&gt;unreachable&lt;/em&gt; and can be deleted.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Reflogs&lt;/em&gt; maintain the history of a value for a &lt;em&gt;ref&lt;/em&gt;: for each &lt;em&gt;ref&lt;/em&gt; they contain a log of what &lt;em&gt;commit&lt;/em&gt; it was pointing to, when that pointer was established, who established it, etc. &lt;em&gt;Reflogs&lt;/em&gt; serve two purposes: facilitating &lt;em&gt;undoing&lt;/em&gt; a previous action and holding a reference to &lt;em&gt;old&lt;/em&gt; data to prevent it from being garbage collected. The two use cases are related: if you don't care about undo, you don't need the old reference to prevent garbage collection.&lt;/p&gt;
&lt;p&gt;This design of Git's store is actually quite sensible. It's not perfect (nothing is). But it is a solid foundation to build a version control tool (or even other data storage applications) on top of.&lt;/p&gt;
&lt;p&gt;The title of this section has to do with sub-optimal branches and remotes management. But I've hardly said anything about branches or remotes! And this leads me to my main complaint about Git's branches and remotes: that they are very thin veneer over &lt;em&gt;refs&lt;/em&gt;. The properties of Git's underlying key-value store unnecessarily bleed into user-facing concepts (like branches and remotes) and therefore dictate sub-optimal practices. This is what's referred to as a &lt;em&gt;leaky abstraction&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I'll give some examples.&lt;/p&gt;
&lt;p&gt;As I stated above, many users treat version control as a &lt;em&gt;save file&lt;/em&gt; step in their workflow. I believe that any step that interferes with users saving their work is user hostile. This even includes writing a commit message! I already argued that the &lt;em&gt;staging area&lt;/em&gt; significantly interferes with this critical task. Git &lt;em&gt;branches&lt;/em&gt; do as well.&lt;/p&gt;
&lt;p&gt;If we were designing a version control tool from scratch (or if you were a new user to version control), you would probably think that a sane feature/requirement would be to update to &lt;em&gt;any&lt;/em&gt; revision and start making changes. In Git speak, this would be something like &lt;code&gt;git checkout b201e96f&lt;/code&gt;, make some file changes, &lt;code&gt;git commit&lt;/code&gt;. I think that's a pretty basic workflow requirement for a version control tool. And the workflow I suggested is pretty intuitive: choose the thing to start working on, make some changes, then save those changes.&lt;/p&gt;
&lt;p&gt;Let's see what happens when we actually do this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git checkout b201e96f
Note: checking out 'b201e96f'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b &amp;lt;new-branch-name&amp;gt;

HEAD is now at b201e96f94... Merge branch 'rs/config-write-section-fix' into maint

$ echo 'my change' &amp;gt;&amp;gt; README.md
$ git commit -a -m 'my change'
[detached HEAD aeb0c997ff] my change
 1 file changed, 1 insertion(+)

$ git push indygreg
fatal: You are not currently on a branch.
To push the history leading to the current (detached HEAD)
state now, use

    git push indygreg HEAD:&amp;lt;name-of-remote-branch&amp;gt;

$ git checkout master
Warning: you are leaving 1 commit behind, not connected to
any of your branches:

  aeb0c997ff my change

If you want to keep it by creating a new branch, this may be a good time
to do so with:

 git branch &amp;lt;new-branch-name&amp;gt; aeb0c997ff

Switched to branch 'master'
Your branch is up to date with 'origin/master'.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I know what all these messages mean because I've mastered Git. But if you were a newcomer (or even a seasoned user), you might be very confused. Just so we're on the same page, here is what's happening (along with some commentary).&lt;/p&gt;
&lt;p&gt;When I run &lt;code&gt;git checkout b201e96f&lt;/code&gt;, Git is trying to tell me that I'm potentially doing something that could result in the loss of my data. A golden rule of version control tools is &lt;em&gt;don't lose the user's data&lt;/em&gt;. When I run &lt;code&gt;git checkout&lt;/code&gt;, Git should be stating the risk for data loss very clearly. But instead, the &lt;em&gt;If you want to create a new branch&lt;/em&gt; sentence is hiding this fact by instead phrasing things around &lt;em&gt;retaining commits you create&lt;/em&gt; rather than the possible loss of data. It's up to the user to make the connection that &lt;em&gt;retaining commits you create&lt;/em&gt; actually means &lt;em&gt;don't eat my data&lt;/em&gt;. Preventing data loss is critical and Git should not mince words here!&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;git commit&lt;/code&gt; seems to work like normal. However, since we're in a &lt;em&gt;detached HEAD&lt;/em&gt; state (a phrase that is likely gibberish to most users), that commit isn't referred to by any &lt;em&gt;ref&lt;/em&gt;, so it can be &lt;em&gt;lost&lt;/em&gt; easily. Git &lt;em&gt;should&lt;/em&gt; be telling me that I just committed something it may not be able to find in the future. But it doesn't. Again, Git isn't being as protective of my data as it needs to be.&lt;/p&gt;
&lt;p&gt;The failure in the &lt;code&gt;git push&lt;/code&gt; command is essentially telling me I need to give things a name in order to &lt;em&gt;push&lt;/em&gt;. &lt;em&gt;Pushing&lt;/em&gt; is effectively &lt;em&gt;remote save&lt;/em&gt;. And I'm going to apply my reasoning about version control tools not interfering with &lt;em&gt;save&lt;/em&gt; to &lt;em&gt;pushing&lt;/em&gt; as well: Git is adding an extra barrier to &lt;em&gt;remote save&lt;/em&gt; by refusing to push commits without a &lt;em&gt;branch&lt;/em&gt; attached and by doing so is being user hostile.&lt;/p&gt;
&lt;p&gt;Finally, we &lt;code&gt;git checkout master&lt;/code&gt; to move to another commit. Here, Git is actually doing something halfway reasonable. It is telling me I'm leaving commits behind, which commits those are, and the command to use to &lt;em&gt;keep&lt;/em&gt; those commits. The warning is good but not great. I think it needs to be stronger to reflect the risk around data loss if that suggested Git commit isn't executed. (Of course, the &lt;em&gt;reflog&lt;/em&gt; for &lt;code&gt;HEAD&lt;/code&gt; will ensure that data isn't immediately deleted. But users shouldn't need to involve &lt;em&gt;reflogs&lt;/em&gt; to not lose data that wasn't rewritten.)&lt;/p&gt;
&lt;p&gt;The point I want to make is that Git doesn't allow you to just &lt;em&gt;update and save&lt;/em&gt;. Because its &lt;em&gt;dumb&lt;/em&gt; store requires pointers to relevant commits (&lt;em&gt;refs&lt;/em&gt;) and because that requirement isn't abstracted away or paved over by user-friendly features in the frontend, Git is effectively requiring end-users to define names (&lt;em&gt;branches&lt;/em&gt;) for all commits. If you fail to define a name, it gets a lot harder to find your commits, exchange them, and Git may delete your data. While it is technically possible to not create branches, the version control tool is essentially unusable without them.&lt;/p&gt;
&lt;p&gt;When local branches are exchanged, they appear as &lt;em&gt;remote branches&lt;/em&gt; to others. Essentially, you give each instance of the repository a name (the &lt;em&gt;remote&lt;/em&gt;). And branches/refs fetched from a named &lt;em&gt;remote&lt;/em&gt; appear as a &lt;em&gt;ref&lt;/em&gt; in the &lt;em&gt;ref namespace&lt;/em&gt; for that &lt;em&gt;remote&lt;/em&gt;. e.g. &lt;em&gt;refs/remotes/origin&lt;/em&gt; holds &lt;em&gt;refs&lt;/em&gt; for the &lt;em&gt;origin&lt;/em&gt; &lt;em&gt;remote&lt;/em&gt;. (Git allows you to not have to specify the &lt;em&gt;refs/remotes&lt;/em&gt; part, so you can refer to e.g. &lt;em&gt;refs/remotes/origin/master&lt;/em&gt; as &lt;em&gt;origin/master&lt;/em&gt;.)&lt;/p&gt;
&lt;p&gt;Again, if you were designing a version control tool from scratch or you were a new Git user, you'd probably think &lt;em&gt;remote refs&lt;/em&gt; would make good starting points for work. For example, if you know you should be saving new work on top of the &lt;em&gt;master&lt;/em&gt; branch, you might be inclined to begin that work by running &lt;code&gt;git checkout origin/master&lt;/code&gt;. But like our specific-commit checkout above:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ git checkout origin/master
Note: checking out 'origin/master'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b &amp;lt;new-branch-name&amp;gt;

HEAD is now at 95ec6b1b33... RelNotes: the eighth batch
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is the same message we got for a direct checkout. But we did supply a &lt;em&gt;ref&lt;/em&gt;/&lt;em&gt;remote branch&lt;/em&gt; name. What gives? Essentially, Git tries to enforce that the &lt;em&gt;refs/remotes/&lt;/em&gt; namespace is read-only and only updated by operations that exchange data with a remote, namely &lt;code&gt;git fetch&lt;/code&gt;, &lt;code&gt;git pull&lt;/code&gt;, and &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For this to work correctly, you need to create a new &lt;em&gt;local branch&lt;/em&gt; (which initially points to the commit that &lt;code&gt;refs/remotes/origin/master&lt;/code&gt; points to) and then switch/activate that &lt;em&gt;local branch&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I could go on talking about all the subtle nuances of how Git branches are managed. But I won't.&lt;/p&gt;
&lt;p&gt;If you've used Git, you know you need to use branches. You may or may not recognize just how frequently you have to type a branch name into a &lt;code&gt;git&lt;/code&gt; command. I guarantee that if you are familiar with version control tools and workflows that aren't based on having to manage &lt;em&gt;refs&lt;/em&gt; to track data, you will find Git's forced usage of &lt;em&gt;refs&lt;/em&gt; and &lt;em&gt;branches&lt;/em&gt; a bit absurd. I half jokingly refer to Git as &lt;em&gt;Game of Refs&lt;/em&gt;. I say that because coming from Mercurial (which doesn't require you to name things), Git workflows feel to me like all I'm doing is typing the names of branches and &lt;em&gt;refs&lt;/em&gt; into &lt;code&gt;git&lt;/code&gt; commands. I feel like I'm wasting my precious time telling Git the names of things only because this is necessary to placate the leaky abstraction of Git's storage layer which requires references to relevant commits.&lt;/p&gt;
&lt;p&gt;Git and version control doesn't have to be this way.&lt;/p&gt;
&lt;p&gt;As I said, my Mercurial workflow doesn't rely on naming things. Unlike Git, Mercurial's store has an explicit (not shared) storage location for commits (&lt;em&gt;changesets&lt;/em&gt; in Mercurial parlance). And this data structure is ordered, meaning a changeset &lt;em&gt;later&lt;/em&gt; always occurs after its parent/predecessor. This means that Mercurial can open a single file/index to quickly find all &lt;em&gt;changesets&lt;/em&gt;. Because Mercurial doesn't need pointers to commits of relevance, names aren't required.&lt;/p&gt;
&lt;p&gt;My &lt;em&gt;Zen of Mercurial&lt;/em&gt; moment came when I realized you didn't have to name things in Mercurial. Having used Git before Mercurial, I was conditioned to always be naming things. This is the Git way after all. And, truth be told, it is common to name things in Mercurial as well. Mercurial's &lt;em&gt;named branches&lt;/em&gt; were the way to do &lt;em&gt;feature branches&lt;/em&gt; in Mercurial for years. Some used the &lt;em&gt;MQ&lt;/em&gt; extension (essentially a port of &lt;a href=&quot;https://en.wikipedia.org/wiki/Quilt_(software)&quot;&gt;quilt&lt;/a&gt;), which also requires naming individual patches. Git users coming to Mercurial were missing Git branches and Mercurial's &lt;em&gt;bookmarks&lt;/em&gt; were a poor &lt;em&gt;port&lt;/em&gt; of Git branches.&lt;/p&gt;
&lt;p&gt;But recently, more and more Mercurial users have been coming to the realization that names aren't really necessary. If the tool doesn't actually require naming things, why force users to name things? As long as users can find the commits they need to find, do you actually need names?&lt;/p&gt;
&lt;p&gt;As a demonstration, my Mercurial workflow leans heavily on the &lt;code&gt;hg show work&lt;/code&gt; and &lt;code&gt;hg show stack&lt;/code&gt; commands. You will need to enable the &lt;em&gt;show&lt;/em&gt; extension by putting the following in your hgrc config file to use them:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[extensions]
show =
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Running &lt;code&gt;hg show work&lt;/code&gt; (I have also set the config &lt;code&gt;commands.show.aliasprefix=s&lt;/code&gt;to enable me to type &lt;code&gt;hg swork&lt;/code&gt;) finds all in-progress changesets and other likely-relevant changesets (those with names and DAG heads). It prints a concise DAG of those changesets:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;hg show work output&quot; src=&quot;https://gregoryszorc.com/images/hg-show-work.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And &lt;code&gt;hg show stack&lt;/code&gt; shows just the current line of work and its relationship to other important heads:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;hg show stack output&quot; src=&quot;https://gregoryszorc.com/images/hg-show-stack.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Aside from the &lt;code&gt;@&lt;/code&gt; bookmark/name set on that top-most changeset, there are no names! (That &lt;code&gt;@&lt;/code&gt; comes from the remote repository, which has set that name.)&lt;/p&gt;
&lt;p&gt;Outside of code archeology workflows, &lt;code&gt;hg show work&lt;/code&gt; shows the changesets I care about 95% of the time. With all I care about (my in-progress work and possible rebase targets) rendered concisely, I don't have to name things because I can just find whatever I'm looking for by running &lt;code&gt;hg show work&lt;/code&gt;! Yes, you need to run &lt;code&gt;hg show work&lt;/code&gt;, visually scan for what you are looking for, and copy a (random) hash fragment into a number of commands. This sounds like a lot of work. But I believe it is far less work than naming things. Only when you practice this workflow do you realize just how much time you actually spend finding and then typing names in to &lt;code&gt;hg&lt;/code&gt; and - especailly - &lt;code&gt;git&lt;/code&gt; commands! The ability to just &lt;code&gt;hg update&lt;/code&gt; to a changeset and commit without having to name things is just so liberating. It feels like my version control tool is putting up fewer barriers and letting me work quickly.&lt;/p&gt;
&lt;p&gt;Another benefit of &lt;code&gt;hg show work&lt;/code&gt; and &lt;code&gt;hg show stack&lt;/code&gt; are that they present a concise DAG visualization to users. This helps educate users about the underlying &lt;em&gt;shape&lt;/em&gt; of repository data. When you see connected nodes on a graph and how they change over time, it makes it a lot easier to understand concepts like &lt;em&gt;merge&lt;/em&gt; and &lt;em&gt;rebase&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This &lt;em&gt;nameless&lt;/em&gt; workflow may sound radical. But that's because we're all conditioned to naming things. I initially thought it was crazy as well. But once you have a mechanism that gives you rapid access to data you care about (&lt;code&gt;hg show work&lt;/code&gt; in Mercurial's case), names become very optional. Now, a pure &lt;em&gt;nameless&lt;/em&gt; workflow isn't without its limitations. You want names to identify the main &lt;em&gt;targets&lt;/em&gt; for work (e.g. the &lt;em&gt;master&lt;/em&gt; branch). And when you exchange work with others, names are easier to work with, especially since names survive rewriting. But in my experience, most of my commits are only exchanged with me (synchronizing my in-progress commits across devices) and with code review tools (which don't really need names and can operate against raw commits). My most frequent use of names comes when I'm in &lt;em&gt;repository maintainer mode&lt;/em&gt; and I need to ensure commits have names for others to reference.&lt;/p&gt;
&lt;p&gt;Could Git support &lt;em&gt;nameless&lt;/em&gt; workflows? In theory it can.&lt;/p&gt;
&lt;p&gt;Git needs &lt;em&gt;refs&lt;/em&gt; to find relevant commits in its store. And the wire protocol uses &lt;em&gt;refs&lt;/em&gt; to exchange data. So &lt;em&gt;refs&lt;/em&gt; have to exist for Git to function (assuming Git doesn't radically change its storage and exchange mechanisms to mitigate the need for &lt;em&gt;refs&lt;/em&gt;, but that would be a massive change and I don't see this happening).&lt;/p&gt;
&lt;p&gt;While there is a fundamental requirement for &lt;em&gt;refs&lt;/em&gt; to exist, this doesn't necessarily mean that user-facing names must exist. The reason that we need &lt;em&gt;branches&lt;/em&gt; today is because &lt;em&gt;branches&lt;/em&gt; are little more than a &lt;em&gt;ref&lt;/em&gt; with special behavior. It is theoretically possible to invent a mechanism that transparently maps &lt;em&gt;nameless&lt;/em&gt; commits onto &lt;em&gt;refs&lt;/em&gt;. For example, you could create a &lt;em&gt;refs/nameless/&lt;/em&gt; namespace that was automatically populated with DAG heads that didn't have names attached. And Git could exchange these &lt;em&gt;refs&lt;/em&gt; just like it can &lt;em&gt;branches&lt;/em&gt; today. It would be a lot of work to think through all the implications and to design and implement support for &lt;em&gt;nameless&lt;/em&gt; development in Git. But I think it is possible.&lt;/p&gt;
&lt;p&gt;I encourage the Git community to investigate supporting &lt;em&gt;nameless&lt;/em&gt; workflows. Having adopted this workflow in Mercurial, Git's workflow around naming branches feels heavyweight and restrictive to me. Put another way, &lt;em&gt;nameless&lt;/em&gt; commits are actually lighter-weight branches than Git branches! To the common user who just wants version control to be a &lt;em&gt;save&lt;/em&gt; feature, requiring names establishes a barrier towards that goal. So removing the naming requirement would make Git simpler and more approachable to new users.&lt;/p&gt;
&lt;h2&gt;Forks aren't the Model You are Looking For&lt;/h2&gt;
&lt;p&gt;This section is more about hosted Git services (like GitHub, Bitbucket, and GitLab) than Git itself. But since hosted Git services are synonymous with &lt;em&gt;Git&lt;/em&gt; and interaction with a hosted Git services is a regular part of a common Git user's workflow, I feel like I need to cover it. (For what it's worth, my experience at Mozilla tells me that a large percentage of people who say &lt;em&gt;I prefer Git&lt;/em&gt; or &lt;em&gt;we should use Git&lt;/em&gt; actually mean &lt;em&gt;I like GitHub&lt;/em&gt;. Git and GitHub/Bitbucket/GitLab are effectively the same thing in the minds of many and anyone finding themselves discussing version control needs to keep this in mind because &lt;em&gt;Git&lt;/em&gt; is more than just the command line tool: it is an ecosystem.)&lt;/p&gt;
&lt;p&gt;I'll come right out and say it: I think &lt;em&gt;forks&lt;/em&gt; are a relatively poor model for collaborating. They are light years better than what existed before. But they are still so far from the turn-key experience that should be possible. The &lt;em&gt;fork&lt;/em&gt; hasn't really changed much since the current implementation of it was made popular by GitHub many years ago. And I view this as a general failure of hosted services to innovate.&lt;/p&gt;
&lt;p&gt;So we have a shared understanding, a &lt;em&gt;fork&lt;/em&gt; (as implemented on GitHub, Bitbucket, GitLab, etc) is essentially a complete copy of a repository (a &lt;code&gt;git clone&lt;/code&gt; if using Git) and a fresh workspace for additional value-added services the hosting provider offers (pull requests, issues, wikis, project tracking, release tracking, etc). If you open the main web page for a &lt;em&gt;fork&lt;/em&gt; on these services, it looks just like the main project's. You know it is a fork because there are cosmetics somewhere (typically next to the project/repository name) saying &lt;em&gt;forked from&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Before service providers adopted the &lt;em&gt;fork&lt;/em&gt; terminology, &lt;em&gt;fork&lt;/em&gt; was used in open source to refer to a splintering of a project. If someone or a group of people didn't like the direction a project was taking, wanted to take over ownership of a project because of stagnation, etc, they would &lt;em&gt;fork it&lt;/em&gt;. The &lt;em&gt;fork&lt;/em&gt; was based on the original (and there may even be active collaboration between the fork and original), but the intent of the &lt;em&gt;fork&lt;/em&gt; was to create distance between the original project and its new incantation. A new entity that was sufficiently independent of the original.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Forks&lt;/em&gt; on service providers mostly retain this &lt;em&gt;old school&lt;/em&gt; &lt;em&gt;fork&lt;/em&gt; model. The &lt;em&gt;fork&lt;/em&gt; gets a new copy of issues, wikis, etc. And anyone who &lt;em&gt;forks&lt;/em&gt; establishes what looks like an independent incantation of a project. It's worth noting that the execution varies by service provider. For example, GitHub won't enable &lt;em&gt;Issues&lt;/em&gt; for a fork by default, thereby encouraging people to file issues against the &lt;em&gt;upstream&lt;/em&gt; project it was forked from. (This is good default behavior.)&lt;/p&gt;
&lt;p&gt;And I know why service providers (initially) implemented things this way: it was easy. If you are building a product, it's simpler to just say &lt;em&gt;a user's version of this project is a &lt;code&gt;git clone&lt;/code&gt; and they get a fresh database&lt;/em&gt;. On a technical level, this meets the traditional definition of &lt;em&gt;fork&lt;/em&gt;. And rather than introduce a new term into the vernacular, they just re-purposed &lt;em&gt;fork&lt;/em&gt; (albeit with &lt;em&gt;softer&lt;/em&gt; connotations, since the traditional &lt;em&gt;fork&lt;/em&gt; commonly implied there was some form of strife precipitating a &lt;em&gt;fork&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;To help differentiate flavors of &lt;em&gt;forks&lt;/em&gt;, I'm going to define the terms &lt;em&gt;soft fork&lt;/em&gt; and &lt;em&gt;hard fork&lt;/em&gt;. A &lt;em&gt;soft fork&lt;/em&gt; is a &lt;em&gt;fork&lt;/em&gt; that exists for purposes of collaboration. The differentiating feature between a &lt;em&gt;soft fork&lt;/em&gt; and &lt;em&gt;hard fork&lt;/em&gt; is whether the &lt;em&gt;fork&lt;/em&gt; is intended to be used as its own project. If it is, it is a &lt;em&gt;hard fork&lt;/em&gt;. If not - if all changes are intended to be &lt;em&gt;merged&lt;/em&gt; into the &lt;em&gt;upstream&lt;/em&gt; project and be consumed from there - it is a &lt;em&gt;soft fork&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I don't have concrete numbers, but I'm willing to wager that the vast majority of &lt;em&gt;forks&lt;/em&gt; on Git service providers which have changes are &lt;em&gt;soft forks&lt;/em&gt; rather than &lt;em&gt;hard forks&lt;/em&gt;. In other words, these &lt;em&gt;forks&lt;/em&gt; exist purely as a conduit to collaborate with the canonical/upstream project (or to facilitate a short-lived one-off change).&lt;/p&gt;
&lt;p&gt;The current implementation of &lt;em&gt;fork&lt;/em&gt; - which borrows a lot from its predecessor of the same name - is a good - but not great - way to facilitate collaboration. It isn't great because it technically resembles what you'd expect to see for &lt;em&gt;hard fork&lt;/em&gt; use cases even though it is used predominantly with &lt;em&gt;soft forks&lt;/em&gt;. This mismatch creates problems.&lt;/p&gt;
&lt;p&gt;If you were to take a step back and invent your own version control hosted service and weren't tainted by exposure to existing services and were willing to think a bit beyond making it a glorified frontend for the &lt;code&gt;git&lt;/code&gt; command line interface, you might realize that the problem you are solving - the product you are selling - is collaboration as a service, not a Git hosting service. And if your product is collaboration, then implementing your collaboration model around the &lt;em&gt;hard fork&lt;/em&gt; model with strong barriers between the original project and its &lt;em&gt;forks&lt;/em&gt; is counterproductive and undermines your own product. But this is how GitHub, Bitbucket, GitLab, and others have implemented their product!&lt;/p&gt;
&lt;p&gt;To improve collaboration on version control hosted services, the concept of a &lt;em&gt;fork&lt;/em&gt; needs to significantly curtailed. Replacing it should be a UI and workflow that revolves around the central, canonical repository.&lt;/p&gt;
&lt;p&gt;You shouldn't need to create your own &lt;em&gt;clone&lt;/em&gt; or &lt;em&gt;fork&lt;/em&gt; of a repository in order to contribute. Instead, you should be able to clone the canonical repository. When you create commits, those commits should be stored and/or more tightly affiliated with the original project - not inside a &lt;em&gt;fork&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;One potential implementation is doable today. I'm going to call it &lt;em&gt;workspaces&lt;/em&gt;. Here's how it would work.&lt;/p&gt;
&lt;p&gt;There would exist a namespace for &lt;em&gt;refs&lt;/em&gt; that can be controlled by the user. For example, on GitHub (where my username is &lt;em&gt;indygreg&lt;/em&gt;), if I wanted to contribute to some random project, I would &lt;code&gt;git push&lt;/code&gt; my refs somewhere under &lt;code&gt;refs/users/indygreg/&lt;/code&gt; directly to that project's. No &lt;em&gt;forking&lt;/em&gt; necessary. If I wanted to contribute to a project, I would just clone its repo then push to my &lt;em&gt;workspace&lt;/em&gt; under it. You could do this today by configuring your Git &lt;em&gt;refspec&lt;/em&gt; properly. For pushes, it would look something like &lt;code&gt;refs/heads/*:refs/users/indygreg/*&lt;/code&gt; (that tells Git to map local &lt;em&gt;refs&lt;/em&gt; under &lt;code&gt;refs/heads/&lt;/code&gt; to &lt;code&gt;refs/users/indygreg/&lt;/code&gt; on that &lt;em&gt;remote&lt;/em&gt; repository). If this became a popular feature, presumably the Git wire protocol could be taught to advertise this feature such that Git clients automatically configured themselves to push to user-specific &lt;em&gt;workspaces&lt;/em&gt; attached to the original repository.&lt;/p&gt;
&lt;p&gt;There are several advantages to such a &lt;em&gt;workspace&lt;/em&gt; model. Many of them revolve around eliminating &lt;em&gt;forks&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;At initial contribution time, no server-side &lt;em&gt;fork&lt;/em&gt; is necessary in order to contribute. You would be able to &lt;em&gt;clone and contribute&lt;/em&gt; without waiting for or configuring a &lt;em&gt;fork&lt;/em&gt;. Or if you can create commits from the web interface, the clone wouldn't even be necessary! Lowering the barrier to contribution is a good thing, especially if collaboration is the product you are selling.&lt;/p&gt;
&lt;p&gt;In the web UI, &lt;em&gt;workspaces&lt;/em&gt; would also revolve around the source project and not be off in their own world like &lt;em&gt;forks&lt;/em&gt; are today. People could more easily see what others are up to. And fetching their work would require typing in their username as opposed to configuring a whole new remote. This would bring communities closer and hopefully lead to better collaboration.&lt;/p&gt;
&lt;p&gt;Not requiring &lt;em&gt;forks&lt;/em&gt; also eliminates the need to synchronize your &lt;em&gt;fork&lt;/em&gt; with the upstream repository. I don't know about you, but one of the things that bothers me about the &lt;em&gt;Game of Refs&lt;/em&gt; that Git imposes is that I have to keep my &lt;em&gt;refs&lt;/em&gt; in sync with the upstream &lt;em&gt;refs&lt;/em&gt;. When I fetch from &lt;em&gt;origin&lt;/em&gt; and pull down a new &lt;em&gt;master&lt;/em&gt; branch, I need to &lt;code&gt;git merge&lt;/code&gt; that branch into my local &lt;em&gt;master&lt;/em&gt; branch. Then I need to push that new &lt;em&gt;master&lt;/em&gt; branch to my fork. This is quite tedious. And it is easy to merge the wrong branches and get your &lt;em&gt;branch&lt;/em&gt; state out of whack. There are better ways to map remote &lt;em&gt;refs&lt;/em&gt; into your local names to make this far less confusing.&lt;/p&gt;
&lt;p&gt;Another win here is not having to push and store data multiple times. When working on a &lt;em&gt;fork&lt;/em&gt; (which is a separate repository), after you &lt;code&gt;git fetch&lt;/code&gt; changes from upstream, you need to eventually &lt;code&gt;git push&lt;/code&gt; those into your &lt;em&gt;fork&lt;/em&gt;. If you've ever worked on a large repository and didn't have a super fast Internet connection, you may have been stymied by having to &lt;code&gt;git push&lt;/code&gt; large amounts of data to your &lt;em&gt;fork&lt;/em&gt;. This is quite annoying, especially for people with slow Internet connections. Wouldn't it be nice if that &lt;code&gt;git push&lt;/code&gt; only pushed the data that was truly new and didn't already exist somewhere else on the server? A &lt;em&gt;workspace&lt;/em&gt; model where development all occurs in the original repository would fix this. As a bonus, it would make the storage problem on servers easier because you would eliminate thousands of forks and you probably wouldn't have to care as much about data duplication across repos/clones because the version control tool solves a lot of this problem for you, courtesy of having all data live alongside or in the original repository instead of in a &lt;em&gt;fork&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Another win from &lt;em&gt;workspace&lt;/em&gt;-centric development would be the potential to do more user-friendly things after &lt;em&gt;pull/merge requests&lt;/em&gt; are incorporated in the official project. For example, the &lt;em&gt;ref&lt;/em&gt; in your workspace could be deleted automatically. This would ease the burden on users to clean up after their submissions are accepted. Again, instead of mashing keys to play the &lt;em&gt;Game of Refs&lt;/em&gt;, this would all be taken care of for you automatically. (Yes, I know there are scripts and shell aliases to make this more turn-key. But user-friendly behavior shouldn't have to be opt-in: it should be the default.)&lt;/p&gt;
&lt;p&gt;But &lt;em&gt;workspaces&lt;/em&gt; aren't all rainbows and unicorns. There are access control concerns. You probably don't want users able to mutate the &lt;em&gt;workspaces&lt;/em&gt; of other users. Or do you? You can make a compelling case that project &lt;em&gt;administrators&lt;/em&gt; should have that ability. And what if someone pushes bad or illegal content to a workspace and you receive a cease and desist? Can you take down just the offending workspace while complying with the order? And what happens if the original project is deleted? Do all its workspaces die with it? These are not trivial concerns. But they don't feel impossible to tackle either.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Workspaces&lt;/em&gt; are only one potential alternative to &lt;em&gt;forks&lt;/em&gt;. And I can come up with multiple implementations of the &lt;em&gt;workspace&lt;/em&gt; concept. Although many of them are constrained by current features in the Git wire protocol. But Git is (finally) getting a more extensible wire protocol, so hopefully this will enable &lt;em&gt;nice things&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I challenge Git service providers like GitHub, Bitbucket, and GitLab to think outside the box and implement something better than how &lt;em&gt;forks&lt;/em&gt; are implemented today. It will be a large shift. But I think users will appreciate it in the long run.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Git is an ubiquitous version control tool. But it is &lt;a href=&quot;http://stevelosh.com/blog/2013/04/git-koans/&quot;&gt;frequently lampooned&lt;/a&gt; for its &lt;a href=&quot;https://stevebennett.me/2012/02/24/10-things-i-hate-about-git/&quot;&gt;poor usability&lt;/a&gt; and &lt;a href=&quot;https://git-man-page-generator.lokaltog.net/&quot;&gt;documentation&lt;/a&gt;. We even have &lt;a href=&quot;https://spderosso.github.io/onward13.pdf&quot;&gt;research&lt;/a&gt; &lt;a href=&quot;https://spderosso.github.io/oopsla16.pdf&quot;&gt;papers&lt;/a&gt; telling us which parts are bad. Nobody I know has had a pleasant initial experience with Git. And it is clear that few people actually understand Git: most just know the command incantations they need to know to accomplish a small set of common activities. (If you are such a person, there is nothing to be ashamed about: Git is a &lt;em&gt;hard&lt;/em&gt; tool.)&lt;/p&gt;
&lt;p&gt;Popular Git-based hosting and collaboration services (such as GitHub, Bitbucket, and GitLab) exist. While they've made strides to make it easier to commit data to a Git repository (I purposefully avoid saying &lt;em&gt;use Git&lt;/em&gt; because the most usable tools seem to avoid the &lt;code&gt;git&lt;/code&gt; command line interface as much as possible), they are often a thin veneer over Git itself (see &lt;em&gt;forks&lt;/em&gt;). And Git is a thin veneer over a content indexed key-value store (see forced usage of bookmarks).&lt;/p&gt;
&lt;p&gt;As an industry, we should be concerned about the lousy usability of Git and the tools and services that surround it. Some may say that Git - with its near monopoly over version control mindset - is a success. I have a different view: I think it is a failure that a tool with a user experience this bad has achieved the success it has.&lt;/p&gt;
&lt;p&gt;The cost to Git's poor usability can be measured in tens if not hundreds of millions of dollars in time people have wasted because they couldn't figure out how to use Git. Git should be viewed as a source of embarrassment, not a success story.&lt;/p&gt;
&lt;p&gt;What's really concerning is that the usability problems of Git have been known for years. Yet it is as popular as ever and there have been few substantial usability improvements. We do have some &lt;a href=&quot;http://gitless.com/&quot;&gt;alternative frontends&lt;/a&gt; floating around. But these haven't caught on.&lt;/p&gt;
&lt;p&gt;I'm at a loss to understand how an open source tool as popular as Git has remained so mediocre for so long. The source code is out there. Anybody can submit a patch to fix it. Why is it that so many people get tripped up by the same poor usability issues years after Git became the common version control tool? It certainly appears that as an industry we have been unable or unwilling to address systemic deficiencies in a critical tool. Why this is, I'm not sure.&lt;/p&gt;
&lt;p&gt;Despite my pessimism about Git's usability and its poor track record of being attentive to the needs of people who aren't power users, I'm optimistic that the future will be brighter. While the ~7000 words in this post pale in comparison to the aggregate word count that has been written about Git, hopefully this post strikes a nerve and causes positive change. Just because one generation has toiled with the usability problems of Git doesn't mean the next generation has to suffer through the same. Git can be improved and I encourage that change to happen. The three issues above and their possible solutions would be a good place to start.&lt;/p&gt;
</description>
<pubDate>Tue, 12 Dec 2017 04:26:04 +0000</pubDate>
<dc:creator>jordigh</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://gregoryszorc.com/blog/2017/12/11/high-level-problems-with-git-and-how-to-fix-them/</dc:identifier>
</item>
<item>
<title>YouTube Demonetization Screenshot Leaks and Secret YouTube Meeting</title>
<link>http://www.twitlonger.com/show/n_1sqbsph</link>
<guid isPermaLink="true" >http://www.twitlonger.com/show/n_1sqbsph</guid>
<description>&lt;h3 class=&quot;post-title&quot;&gt;YouTube Demonetization Screenshot Leaks + Secret YouTube Meeting&lt;/h3&gt;
&lt;hr/&gt;&lt;p id=&quot;posttext&quot;&gt;Hello,&lt;/p&gt;&lt;p&gt;Allow me to preface first with a few things before we get into this. I am a YouTuber. I am posting this anonymously because I feel the information should get out, as it could benefit creators with insight, but I also am concerned by the potential repercussions sharing these things could bring about.&lt;/p&gt;&lt;p&gt;I was contacted some time ago by a person who was a viewer of my work. This person (henceforth known as “my contact”) worked for a company that ended up being connected to Google/YouTube. I will not provide too many details about this person in order to protect them, but they became my “eyes and ears” behind the scenes on what was going on with YouTube’s new policies and policy enforcement (things they’ve refused to be upfront or direct about). In the midst of “codes” and creators trying to further figure out how to tell if their content is at risk, I felt the need to release this with my contact’s blessing.&lt;/p&gt;&lt;p&gt;Google, some months ago, put out a job posting which required a number of different people to work on one project. Google claimed in the posting that they needed a third party company to work as “web search evaluators.” My contact worked for the unnamed company that put in for the job and was accepted by Google. My contact didn’t know what to expect from the job, but was told to sign a Non-Disclosure Agreement in order to be a part of it. My contact accepted and signed the NDA. That is when things changed.&lt;/p&gt;&lt;p&gt;Once the NDA was signed, my contact found that they weren’t working as a “web search evaluator.” They were demonetizing YouTube videos. They would be given YouTube videos to review and had a checklist of sorts to go through to be sure the video fit (or didn’t fit) certain criteria. You can see screenshots from my contact’s end in this post via Imgur.&lt;/p&gt;&lt;p&gt;One of the most important things to take away from this is that if the person reviewing the video wouldn’t feel comfortable watching the video in public, it should automatically be demonetized. My contact stated that the company told them that if they were on the fence about a video and didn’t really know if it violated any of YouTube’s new “rules,” to demonetize the video anyway. Also, if the reviewer doesn’t find anything listed that’s wrong with the video, they are allowed to insert their own personal belief on something that is sensitive or inappropriate and can have the video demonetized that way, as well.&lt;/p&gt;&lt;p&gt;Here are the screenshots from the third party company’s viewpoint:&lt;/p&gt;&lt;p&gt;DEMONETIZATION LEAKED SCREENSHOTS: https://imgur.com/a/uTLTS&lt;/p&gt;&lt;p&gt;This will hopefully provide insight for creators who are confused on how YouTube decides what is okay and what isn’t. Truthfully, it’s not really YouTube who is deciding it. It’s the employees at the company they hired to review the videos. It’s my belief that anytime you request a manual review, these people are the ones conducting it, and they can demonetize for whatever reason they see fit, even if they personally disagree with the content or message. This could explain why many videos that don’t violate any known criteria can still be demonetized by manual review. Because the reviewer thought it should be based on their own reasoning.&lt;/p&gt;&lt;p&gt;Now, as for the secret meeting, which may or may not tie into this whole issue (you decide if you think it does)...&lt;/p&gt;&lt;p&gt;This all started to take effect after YouTube held a private meeting with select creators. Obviously the media issues gave this all a violent shove into reality, but YouTube had been ramping up to make changes before this all came to pass. A different contact of mine was involved in the secret meeting with YouTube, which took place around mid 2016 at a Google office in Los Angeles. The meeting had one purpose: to discuss what should be done with unwanted creators on their platform. Some unwanted channel names that were mentioned were Leafyishere, GradeAUnderA, Keemstar/DramaAlert, Scarce, and Onision.&lt;/p&gt;&lt;p&gt;In attendance were a number of higher ranking individuals from a few different departments at YouTube. CEO Susan Wojcicki was not in attendance.&lt;/p&gt;&lt;p&gt;All the creators in attendance were made to sign NDAs. The creators were asked what they felt should be done about the more toxic channels on YouTube. There was no conclusion from YouTube’s end, but it was agreed upon that no censorship or channel deletion should occur and that something else should be done. Months later, demonetization began sweeping the platform and hindering the growth of countless channels. Now many of us know the reasons for this. Ad companies got spooked by offensive content that was monetized. However, I am unsure as to whether or not the demonetization is enforced as strictly as it is to also help drive certain unwanted players off the field, in keeping with what concerns were discussed at the meeting.&lt;/p&gt;&lt;p&gt;I hope this information proves useful to some of you. That’s all for now. If we can get this information around, I feel it will at least help creators get a better grip on what they’re up against. Share the screenshots, make videos discussing it, or simply observe, whatever you feel is best for you.&lt;/p&gt;&lt;p&gt;I wish you well,&lt;/p&gt;&lt;p&gt;-TD&lt;/p&gt;
&lt;p class=&quot;actions text-right&quot;&gt;&lt;a href=&quot;http://www.twitlonger.com/post/dog_tower/939575388962947073&quot;&gt;Reply&lt;/a&gt; · &lt;a href=&quot;http://www.twitlonger.com/show/n_1sqbsph#&quot; data-toggle=&quot;modal&quot; data-target=&quot;#reportModal&quot;&gt; Report Post&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 12 Dec 2017 04:24:50 +0000</pubDate>
<dc:creator>djsumdog</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.twitlonger.com/show/n_1sqbsph</dc:identifier>
</item>
<item>
<title>Learn web development</title>
<link>https://developer.mozilla.org/en-US/docs/Learn</link>
<guid isPermaLink="true" >https://developer.mozilla.org/en-US/docs/Learn</guid>
<description>&lt;article id=&quot;wikiArticle&quot; readability=&quot;65.574934403457&quot;&gt;&lt;div readability=&quot;8&quot;&gt;
&lt;p class=&quot;summary&quot;&gt;Welcome to the MDN Learning Area. This set of articles aims to provide complete beginners to web development with all they need to start coding simple websites.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The aim of this area of MDN is not to take you from &quot;beginner&quot; to &quot;expert&quot; but to take you from &quot;beginner&quot; to &quot;comfortable&quot;. From there you should be able to start making your own way, learning from &lt;a href=&quot;https://developer.mozilla.org/en-US/&quot;&gt;the rest of MDN&lt;/a&gt; and other intermediate to advanced resources that assume a lot of previous knowledge.&lt;/p&gt;
&lt;p&gt;If you are a complete beginner, web development can be challenging — we will hold your hand and provide enough detail for you to feel comfortable and learn the topics properly. You should feel at home whether you are a student learning web development (on your own or as part of a class), a teacher looking for class materials, a hobbyist, or someone who just wants to understand more about how web technologies work.&lt;/p&gt;
&lt;div class=&quot;warning&quot; readability=&quot;9.5670995670996&quot;&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: The content in the Learning Area is being added to regularly. If you have questions regarding topics you'd like to see covered or feel are missing, see the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn#Contact_us&quot;&gt;Contact us&lt;/a&gt; section below for information on how to get in touch.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;Where_to_start&quot;&gt;Where to start&lt;/h2&gt;
&lt;ul class=&quot;card-grid&quot;&gt;&lt;li&gt;&lt;span&gt;Complete beginner:&lt;/span&gt; If you are a complete beginner to web development, we'd recommend that you start by working through our &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web&quot;&gt;Getting started with the Web&lt;/a&gt; module, which provides a practical introduction to web development.&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Specific questions:&lt;/span&gt; If you have a specific question about web development, our &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Common_questions&quot;&gt;Common questions&lt;/a&gt; section may have something to help you.&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Beyond the basics:&lt;/span&gt; If you have a bit of knowledge already, the next step is to learn &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/HTML&quot; title=&quot;HTML: HTML (HyperText Markup Language) is a descriptive language that specifies webpage structure.&quot; class=&quot;glossaryLink&quot;&gt;HTML&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/CSS&quot; title=&quot;CSS: CSS (Cascading Style Sheets) is a declarative language that controls how webpages look in the browser.&quot; class=&quot;glossaryLink&quot;&gt;CSS&lt;/a&gt; in detail: start with our &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML&quot;&gt;Introduction to HTML&lt;/a&gt; module and move on to our &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS&quot;&gt;Introduction to CSS&lt;/a&gt; module.&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Moving onto scripting:&lt;/span&gt; If you are comfortable with HTML and CSS already, or you are mainly interested in coding, you'll want to move onto &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/JavaScript&quot; title=&quot;JavaScript: JavaScript (JS) is a programming language mostly used client-side to dynamically script webpages, but often also server-side, using packages such as Node.js.&quot; class=&quot;glossaryLink&quot;&gt;JavaScript&lt;/a&gt; or server-side development. Begin with our &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps&quot;&gt;JavaScript first steps&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps&quot;&gt;Server-side first steps&lt;/a&gt; modules.&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;note&quot; readability=&quot;5.9230769230769&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Our &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary&quot;&gt;Glossary&lt;/a&gt; provides terminology definitions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;moreinfo&quot;&gt;
&lt;p&gt;Random glossary entry&lt;/p&gt;
&lt;dl&gt;&lt;dt&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/CDN&quot;&gt;CDN&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A &lt;strong&gt;CDN &lt;/strong&gt;(Content Delivery Network) is a group of servers spread out over many locations. These servers store duplicate copies of data so that servers can fulfill data requests based on which servers are closest to the respective end-users. CDNs make for fast service less affected by high traffic.&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;
&lt;h2 id=&quot;Topics_covered&quot;&gt;Topics covered&lt;/h2&gt;
&lt;p&gt;The following is a list of all the topics we cover in the MDN learning area.&lt;/p&gt;
&lt;dl&gt;&lt;dt&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web&quot;&gt;Getting started with the web&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Provides a practical introduction to web development for complete beginners.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/HTML&quot;&gt;HTML — Structuring the web&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;HTML is the language that we use to structure the different parts of our content and define what their meaning or purpose is. This topic teaches HTML in detail.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS&quot;&gt;CSS — Styling the web&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;CSS is the language that we can use to style and lay out our web content, as well as adding behavior like animation. This topic provides comprehensive coverage of CSS.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript&quot;&gt;JavaScript — Dynamic client-side scripting&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;JavaScript is the scripting language used to add dynamic functionality to web pages. This topic teaches all the essentials needed to become comfortable with writing and understanding JavaScript.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Accessibility&quot;&gt;Accessibility — make the web usable by everyone&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Accessibility is the practice of making web content available to as many people as possible regardless of disability, device, locale, or other differentiating factors. This topic gives you all you need to know.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing&quot;&gt;Tools and testing&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;This topic is a place to cover tools developers use to facilitate their work, such as cross browser testing tools.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Server-side&quot;&gt;Server-side website programming&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Even if you are concentrating on client-side web development, it is still useful to know about how servers and server-side code features work. This topic provides a general introduction to how the server-side works, and detailed tutorials detailing how to build up a server-side app using two popular frameworks — Django (Python) and Express (node.js). &lt;/dd&gt;
&lt;/dl&gt;&lt;h2 id=&quot;Getting_our_code_examples&quot;&gt;Getting our code examples&lt;/h2&gt;
&lt;p&gt;The code examples you'll encounter in the Learning Area are all &lt;a href=&quot;https://github.com/mdn/learning-area/&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;available on GitHub&lt;/a&gt;. If you want to copy them all to your computer, the easiest way is to:&lt;/p&gt;
&lt;ol readability=&quot;-1.7403400309119&quot;&gt;&lt;li&gt;&lt;a href=&quot;http://git-scm.com/downloads&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;Install Git&lt;/a&gt; on your machine. This is the underlying version control system software that GitHub works on top of.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/join&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;Sign up for a GitHub account&lt;/a&gt;. It's simple and easy.&lt;/li&gt;
&lt;li&gt;Once you've signed up, log in to &lt;a href=&quot;https://github.com&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;github.com&lt;/a&gt; with your username and password.&lt;/li&gt;
&lt;li&gt;Open your computer's &lt;a href=&quot;https://www.lifewire.com/how-to-open-command-prompt-2618089&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;command prompt&lt;/a&gt; (Windows) or terminal (&lt;a href=&quot;https://help.ubuntu.com/community/UsingTheTerminal&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;Linux&lt;/a&gt;, &lt;a href=&quot;http://blog.teamtreehouse.com/introduction-to-the-mac-os-x-command-line&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;MacOSX&lt;/a&gt;)&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;To copy the learning area repo to a folder called learning-area in the current location your command prompt/terminal is pointing to, use the following command:
&lt;pre class=&quot;brush: bash&quot;&gt;
git clone https://github.com/mdn/learning-area
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;You can now enter the directory and find the files you are after (either using your finder/file explorer or the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cd_(command)&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;cd command&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;You can update the &lt;code&gt;learning-area&lt;/code&gt; repository with any changes made to the master version on GitHub with the following steps:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;In your command prompt/terminal, go inside the &lt;code&gt;learning-area&lt;/code&gt; directory using &lt;code&gt;cd&lt;/code&gt;. For example, if you were in the parent directory:
&lt;pre class=&quot;brush: bash&quot;&gt;
cd learning-area
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Update the repository using the following command:
&lt;pre class=&quot;brush: bash&quot;&gt;
git pull
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you want to get in touch with us about anything, the best way is to drop us a message on our &lt;a href=&quot;https://discourse.mozilla-community.org/t/learning-web-development-marking-guides-and-questions/16294&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;Learning Area discourse thread&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/MDN/Community/Conversations#Chat_in_IRC&quot;&gt;IRC channels&lt;/a&gt;. We'd like to hear from you about anything you think is wrong or missing on the site, requests for new learning topics, requests for help with items you don't understand, or any other questions or concerns.&lt;/p&gt;
&lt;p&gt;If you're interested in helping develop/improve the content, take a look at &lt;a href=&quot;https://developer.mozilla.org/en-US/Learn/How_to_contribute&quot;&gt;how you can help&lt;/a&gt;, and get in touch! We are more than happy to talk to you, whether you are a learner, teacher, experienced web developer, or someone else interested in helping to improve the learning experience.&lt;/p&gt;

&lt;h2 id=&quot;See_also&quot;&gt;See also&lt;/h2&gt;
&lt;dl&gt;&lt;dt&gt;&lt;a href=&quot;https://www.mozilla.org/en-US/newsletter/developer/&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;Mozilla Developer Newsletter&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Our newsletter for web developers, which is a great resource for all levels of experience.&lt;/dd&gt;
&lt;/dl&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&quot;https://www.codecademy.com/&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;Codecademy&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A great interactive site for learning programming languages from scratch.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;https://code.org/&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;Code.org&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Basic coding theory and practice, mainly aimed at children/complete beginners.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;https://www.freecodecamp.org/&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;freeCodeCamp.org&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Interactive site with tutorials and projects to learn web development.&lt;/dd&gt;
&lt;/dl&gt;&lt;dl&gt;&lt;dt&gt;&lt;a href=&quot;https://learning.mozilla.org/web-literacy/&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;Web Literacy Map&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A framework for entry-level web literacy &amp;amp; 21st Century skills, which also provides access to teaching activities sorted by category.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&quot;https://learning.mozilla.org/activities&quot; class=&quot;external&quot; rel=&quot;noopener&quot;&gt;Teaching activities&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A series of teaching activities for teaching (and learning) created by the Mozilla Foundation, covering everything from basic web literacy and privacy to JavaScript and hacking Minecraft.&lt;/dd&gt;
&lt;/dl&gt;&lt;/article&gt;&lt;div class=&quot;wiki-block contributors&quot;&gt;
&lt;h2 class=&quot;offscreen&quot;&gt;Document Tags and Contributors&lt;/h2&gt;

&lt;div class=&quot;contributors-sub&quot;&gt; &lt;strong&gt;Contributors to this page:&lt;/strong&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/sideshowbarker&quot;&gt;sideshowbarker&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/har256b&quot;&gt;har256b&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/leafront&quot;&gt;leafront&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/mykebrian&quot;&gt;mykebrian&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/raisedadead&quot;&gt;raisedadead&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/bhaskarmac&quot;&gt;bhaskarmac&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/genSud&quot;&gt;genSud&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/SphinxKnight&quot;&gt;SphinxKnight&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/ProHos&quot;&gt;ProHos&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/ayespi&quot;&gt;ayespi&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/Sibiraj-S&quot;&gt;Sibiraj-S&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/agilanshanthi&quot;&gt;agilanshanthi&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/hadleyel&quot;&gt;hadleyel&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/danieltex&quot;&gt;danieltex&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/chrisdavidmills&quot;&gt;chrisdavidmills&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/dvincent&quot;&gt;dvincent&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/entriek&quot;&gt;entriek&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/l34kr&quot;&gt;l34kr&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/BychekRU&quot;&gt;BychekRU&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/Sebastianz&quot;&gt;Sebastianz&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/rolfedh&quot;&gt;rolfedh&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/fscholz&quot;&gt;fscholz&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/Sheppy&quot;&gt;Sheppy&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/espinielli&quot;&gt;espinielli&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/fanousek&quot;&gt;fanousek&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/Jeremie&quot;&gt;Jeremie&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/jsx&quot;&gt;jsx&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/Andrew_Pfeiffer&quot;&gt;Andrew_Pfeiffer&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/kscarfone&quot;&gt;kscarfone&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/jswisher&quot;&gt;jswisher&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/profiles/anistark&quot;&gt;anistark&lt;/a&gt;&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Tue, 12 Dec 2017 03:33:35 +0000</pubDate>
<dc:creator>ktta</dc:creator>
<og:type>website</og:type>
<og:image>https://cdn.mdn.mozilla.net/static/img/opengraph-logo.72382e605ce3.png</og:image>
<og:title>Learn web development</og:title>
<og:url>https://developer.mozilla.org/en-US/docs/Learn</og:url>
<og:description>The aim of this area of MDN is not to take you from &quot;beginner&quot; to &quot;expert&quot; but to take you from &quot;beginner&quot; to &quot;comfortable&quot;. From there you should be able to start making your own way, learning from the rest of MDN and other intermediate to advanced resources that assume a lot of previous knowledge.</og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://developer.mozilla.org/en-US/docs/Learn</dc:identifier>
</item>
</channel>
</rss>