<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Slack is offline</title>
<link>https://status.slack.com/?20171031</link>
<guid isPermaLink="true" >https://status.slack.com/?20171031</guid>
<description>&lt;div class=&quot;card hover_slide_up&quot; data-targeturl=&quot;/2017-10/8b0d4d44ea53726f&quot; readability=&quot;8.0277777777778&quot;&gt;
&lt;div class=&quot;card_date&quot;&gt;
&lt;div class=&quot;flex_row align_center&quot;&gt;&lt;img src=&quot;https://status.slack.com/img/v2/TableOutage.png&quot; srcset=&quot;/img/v2/TableOutage.png 1x, /img/v2/TableOutage@2x.png 2x&quot;/&gt;&lt;p class=&quot;raven_gray semi_bold&quot;&gt;October 31, 2017&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h3 class=&quot;title black_licorice semi_bold&quot;&gt;Connectivity Issues&lt;/h3&gt;
&lt;/p&gt;
&lt;div class=&quot;card_body&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;We've been tracking connections to Slack since our changes were deployed and believe that all users should once more be able to access Slack. Thank you for your understanding and patience, we do not take it for granted and will continue to investigate and learn from this outage.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;card hover_slide_up&quot; data-targeturl=&quot;/2017-10/00d54e9272166203&quot; readability=&quot;8.9171779141104&quot;&gt;
&lt;div class=&quot;card_date&quot;&gt;
&lt;div class=&quot;flex_row align_center&quot;&gt;&lt;img src=&quot;https://status.slack.com/img/v2/TableIncident.png&quot; srcset=&quot;/img/v2/TableIncident.png 1x, /img/v2/TableIncident@2x.png 2x&quot;/&gt;&lt;p class=&quot;raven_gray semi_bold&quot;&gt;October 24, 2017&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h3 class=&quot;title black_licorice semi_bold&quot;&gt;Connectivity issues for users on older browser versions of Safari&lt;/h3&gt;
&lt;/p&gt;
&lt;div class=&quot;card_body&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;We believe we've found the culprit and made the necessary tweaks. All users on older Safari browser versions should be able to connect to Slack once more. We apologize for any disruption to your day.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;card hover_slide_up&quot; data-targeturl=&quot;/2017-10/9c5d1e602318e15e&quot; readability=&quot;10.182156133829&quot;&gt;
&lt;div class=&quot;card_date&quot;&gt;
&lt;div class=&quot;flex_row align_center&quot;&gt;&lt;img src=&quot;https://status.slack.com/img/v2/TableIncident.png&quot; srcset=&quot;/img/v2/TableIncident.png 1x, /img/v2/TableIncident@2x.png 2x&quot;/&gt;&lt;p class=&quot;raven_gray semi_bold&quot;&gt;October 24, 2017&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h3 class=&quot;title black_licorice semi_bold&quot;&gt;Connectivity for some Organizations&lt;/h3&gt;
&lt;/p&gt;
&lt;div class=&quot;card_body&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;All clear. The affected Enterprise Organisations should now be able to connect, but if not, please do let us know. Again, we're terribly sorry for the troubles this caused.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;card hover_slide_up&quot; data-targeturl=&quot;/2017-10/54be9cd6e13baf8a&quot; readability=&quot;9.2647058823529&quot;&gt;
&lt;div class=&quot;card_date&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;flex_row align_center&quot; readability=&quot;8&quot;&gt;&lt;img src=&quot;https://status.slack.com/img/v2/TableOutage.png&quot; srcset=&quot;/img/v2/TableOutage.png 1x, /img/v2/TableOutage@2x.png 2x&quot;/&gt;&lt;p class=&quot;raven_gray semi_bold&quot;&gt;October 23 - October 24, 2017&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h3 class=&quot;title black_licorice semi_bold&quot;&gt;Connectivity trouble affecting some workspaces&lt;/h3&gt;
&lt;/p&gt;
&lt;div class=&quot;card_body&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;We believe that users should be able to connect to Slack once more, but do let us know if not. Your patience with us does not go unnoticed. Thank you.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;card hover_slide_up&quot; data-targeturl=&quot;/2017-10/246d76d621e4ac76&quot; readability=&quot;8.6121495327103&quot;&gt;
&lt;div class=&quot;card_date&quot;&gt;
&lt;div class=&quot;flex_row align_center&quot;&gt;&lt;img src=&quot;https://status.slack.com/img/v2/TableIncident.png&quot; srcset=&quot;/img/v2/TableIncident.png 1x, /img/v2/TableIncident@2x.png 2x&quot;/&gt;&lt;p class=&quot;raven_gray semi_bold&quot;&gt;October 23, 2017&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h3 class=&quot;title black_licorice semi_bold&quot;&gt;Problems with SMS 2FA login&lt;/h3&gt;
&lt;/p&gt;
&lt;div class=&quot;card_body&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;Things are looking better on this end and you should be able to log in successfully now. Thank you kindly for hanging tight.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;card hover_slide_up&quot; data-targeturl=&quot;/2017-10/c35239b2bde7a2c6&quot; readability=&quot;7.4366197183099&quot;&gt;
&lt;div class=&quot;card_date&quot;&gt;
&lt;div class=&quot;flex_row align_center&quot;&gt;&lt;img src=&quot;https://status.slack.com/img/v2/TableIncident.png&quot; srcset=&quot;/img/v2/TableIncident.png 1x, /img/v2/TableIncident@2x.png 2x&quot;/&gt;&lt;p class=&quot;raven_gray semi_bold&quot;&gt;October 20, 2017&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h3 class=&quot;title black_licorice semi_bold&quot;&gt;Events API Delays&lt;/h3&gt;
&lt;/p&gt;
&lt;div class=&quot;card_body&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;The delays with the Events API should now be fully resolved. Integrations and apps should all be back to normal! We're really sorry for the interruption to your work day. Thanks again for sticking with us!&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;card hover_slide_up&quot; data-targeturl=&quot;/2017-10/1fdd72739e4b23cf&quot; readability=&quot;9.4301994301994&quot;&gt;
&lt;div class=&quot;card_date&quot;&gt;
&lt;div class=&quot;flex_row align_center&quot;&gt;&lt;img src=&quot;https://status.slack.com/img/v2/TableIncident.png&quot; srcset=&quot;/img/v2/TableIncident.png 1x, /img/v2/TableIncident@2x.png 2x&quot;/&gt;&lt;p class=&quot;raven_gray semi_bold&quot;&gt;October 19, 2017&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h3 class=&quot;title black_licorice semi_bold&quot;&gt;Impossible to join or create workspaces in international versions of Slack&lt;/h3&gt;
&lt;/p&gt;
&lt;div class=&quot;card_body&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;Creating and joining workspaces using international versions of Slack should be back to normal now! Thank you for your patience while we worked towards the solution. Please let us know if you see any further issues.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;card hover_slide_up&quot; data-targeturl=&quot;/2017-10/2ef96c92b3ed5f94&quot; readability=&quot;10.123505976096&quot;&gt;
&lt;div class=&quot;card_date&quot;&gt;
&lt;div class=&quot;flex_row align_center&quot;&gt;&lt;img src=&quot;https://status.slack.com/img/v2/TableIncident.png&quot; srcset=&quot;/img/v2/TableIncident.png 1x, /img/v2/TableIncident@2x.png 2x&quot;/&gt;&lt;p class=&quot;raven_gray semi_bold&quot;&gt;October 17, 2017&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h3 class=&quot;title black_licorice semi_bold&quot;&gt;Connectivity issues for some workspaces in Europe&lt;/h3&gt;
&lt;/p&gt;
&lt;div class=&quot;card_body&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;Affected users seem to be back up and running, so consider this case closed. As ever, if you do see any further trouble, please let us know.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;card hover_slide_up&quot; data-targeturl=&quot;/2017-10/d670b3071fca9e1f&quot; readability=&quot;10.094650205761&quot;&gt;
&lt;div class=&quot;card_date&quot;&gt;
&lt;div class=&quot;flex_row align_center&quot;&gt;&lt;img src=&quot;https://status.slack.com/img/v2/TableIncident.png&quot; srcset=&quot;/img/v2/TableIncident.png 1x, /img/v2/TableIncident@2x.png 2x&quot;/&gt;&lt;p class=&quot;raven_gray semi_bold&quot;&gt;October 12, 2017&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h3 class=&quot;title black_licorice semi_bold&quot;&gt;Problems with media previews, Slackbot and payments&lt;/h3&gt;
&lt;/p&gt;
&lt;div class=&quot;card_body&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;This should now be fixed, but please do let us know if you see slowness in any aspect of Slack. We're sorry again for the trouble.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;card hover_slide_up&quot; data-targeturl=&quot;/2017-10/64369592f84b8669&quot; readability=&quot;9.9034090909091&quot;&gt;
&lt;div class=&quot;card_date&quot;&gt;
&lt;div class=&quot;flex_row align_center&quot;&gt;&lt;img src=&quot;https://status.slack.com/img/v2/TableOutage.png&quot; srcset=&quot;/img/v2/TableOutage.png 1x, /img/v2/TableOutage@2x.png 2x&quot;/&gt;&lt;p class=&quot;raven_gray semi_bold&quot;&gt;October 10, 2017&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h3 class=&quot;title black_licorice semi_bold&quot;&gt;Connectivity trouble affecting some workspaces&lt;/h3&gt;
&lt;/p&gt;
&lt;div class=&quot;card_body&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;We believe that users should be able to connect to Slack once more. If you are still experiencing connection problems, please reach out to us at feedback@slack.com so we can investigate further with you. So sorry for the disruption to your day.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;card hover_slide_up&quot; data-targeturl=&quot;/2017-10/e7b7a39da6226626&quot; readability=&quot;9.7279411764706&quot;&gt;
&lt;div class=&quot;card_date&quot;&gt;
&lt;div class=&quot;flex_row align_center&quot;&gt;&lt;img src=&quot;https://status.slack.com/img/v2/TableOutage.png&quot; srcset=&quot;/img/v2/TableOutage.png 1x, /img/v2/TableOutage@2x.png 2x&quot;/&gt;&lt;p class=&quot;raven_gray semi_bold&quot;&gt;October 3, 2017&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h3 class=&quot;title black_licorice semi_bold&quot;&gt;ISP-specific connection issues in Canada&lt;/h3&gt;
&lt;/p&gt;
&lt;div class=&quot;card_body&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;Thankfully, there shouldn't be any further issues with connections for those in Canada. If you run into more trouble, we'd love to hear from you. Thanks for your patience!&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;card hover_slide_up&quot; data-targeturl=&quot;/2017-10/12cb00ba0a5680f2&quot; readability=&quot;9.8712574850299&quot;&gt;
&lt;div class=&quot;card_date&quot;&gt;
&lt;div class=&quot;flex_row align_center&quot;&gt;&lt;img src=&quot;https://status.slack.com/img/v2/TableOutage.png&quot; srcset=&quot;/img/v2/TableOutage.png 1x, /img/v2/TableOutage@2x.png 2x&quot;/&gt;&lt;p class=&quot;raven_gray semi_bold&quot;&gt;October 2, 2017&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h3 class=&quot;title black_licorice semi_bold&quot;&gt;Connectivity troubles for some workspaces&lt;/h3&gt;
&lt;/p&gt;
&lt;div class=&quot;card_body&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;We believe that users should be able to connect to Slack once more. If you are still experiencing connection problems, please reach out to us at feedback@slack.com so we can investigate further with you. So sorry for the disruption.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;card hover_slide_up&quot; data-targeturl=&quot;/2017-10/128163408f2fe779&quot; readability=&quot;8.3939393939394&quot;&gt;
&lt;div class=&quot;card_date&quot;&gt;
&lt;div class=&quot;flex_row align_center&quot;&gt;&lt;img src=&quot;https://status.slack.com/img/v2/TableIncident.png&quot; srcset=&quot;/img/v2/TableIncident.png 1x, /img/v2/TableIncident@2x.png 2x&quot;/&gt;&lt;p class=&quot;raven_gray semi_bold&quot;&gt;October 2, 2017&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h3 class=&quot;title black_licorice semi_bold&quot;&gt;Message server issues&lt;/h3&gt;
&lt;/p&gt;
&lt;div class=&quot;card_body&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;Said server has gotten it together but will get a short timeout on the naughty step as penance. If you couldn't connect before, you should able to now. Sorry about that. If you have any problems, please let us know.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;


</description>
<pubDate>Tue, 31 Oct 2017 23:01:01 +0000</pubDate>
<dc:creator>soroso</dc:creator>
<og:type>website</og:type>
<og:title>Slack System Status</og:title>
<og:image>https://status.slack.com/img/slack_hash_twitter.png</og:image>
<og:description>Resources for real-time and historical information about the Slack service.</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://status.slack.com/?20171031</dc:identifier>
</item>
<item>
<title>Show HN: Airborn – Private Google Docs Alternative</title>
<link>https://www.airbornos.com/</link>
<guid isPermaLink="true" >https://www.airbornos.com/</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://www.airbornos.com/&quot;&gt;https://www.airbornos.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=15596304&quot;&gt;https://news.ycombinator.com/item?id=15596304&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 287&lt;/p&gt;&lt;p&gt;# Comments: 149&lt;/p&gt;</description>
<pubDate>Tue, 31 Oct 2017 20:34:33 +0000</pubDate>
<dc:creator>twiss</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.airbornos.com/</dc:identifier>
</item>
<item>
<title>Standalone Signal Desktop</title>
<link>https://signal.org/blog/standalone-signal-desktop/</link>
<guid isPermaLink="true" >https://signal.org/blog/standalone-signal-desktop/</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://signal.org/blog/images/standalone-signal-desktop.png&quot; alt=&quot;Standalone version of Signal running on a laptop.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Signal Desktop is &lt;a href=&quot;https://signal.org/download/&quot;&gt;now available&lt;/a&gt; in a new, standalone form, and the &lt;a href=&quot;https://developer.chrome.com/apps/about_apps&quot;&gt;Chrome App&lt;/a&gt; has been deprecated.&lt;/p&gt;
&lt;p&gt;The new desktop version of Signal runs independently of your browser. If you’re a Firefox or Safari user, you don’t need to install Chrome to send and receive Signal messages on your computer. If you’re a Chrome user, having your browser open will no longer be synonymous with having Signal Desktop open.&lt;/p&gt;
&lt;h2 id=&quot;platform-support&quot;&gt;Platform Support&lt;/h2&gt;
&lt;p&gt;We are launching our standalone app with support for these platforms:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Windows 64-bit: 7, 8, 8.1 and 10&lt;/li&gt;
&lt;li&gt;MacOS 10.9 and above&lt;/li&gt;
&lt;li&gt;Linux distributions supporting &lt;a href=&quot;https://en.wikipedia.org/wiki/APT_(Debian)&quot;&gt;APT&lt;/a&gt;, like Ubuntu or Debian&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;
&lt;p&gt;If you’ve never used Signal Desktop before, this is a great chance to start. Download the app, pair it with your phone, and experience private messaging with all ten fingers.&lt;/p&gt;
&lt;p&gt;If you’re already using the Signal Desktop Chrome App, you can export your data and import it into the new Signal Desktop app as part of the setup process. All of your old conversations and contacts will be there, just like before. It’s as easy as selecting a place on disk for the data and then finding that directory again to kick off the import.&lt;/p&gt;
&lt;h2 id=&quot;we-want-your-feedback&quot;&gt;We want your feedback&lt;/h2&gt;
&lt;p&gt;Once you have installed and started using the new Signal Desktop, we want to hear what you think. You can &lt;a href=&quot;https://whispersystems.discoursehosting.net/&quot;&gt;talk about this release on the forums&lt;/a&gt;, &lt;a href=&quot;https://github.com/WhisperSystems/Signal-Desktop/issues/new&quot;&gt;file any bugs you run into&lt;/a&gt;, and if you need more help than those standard channels can provide, you can &lt;a href=&quot;https://support.signal.org&quot;&gt;contact support&lt;/a&gt;.&lt;/p&gt;

</description>
<pubDate>Tue, 31 Oct 2017 17:45:22 +0000</pubDate>
<dc:creator>rouma7</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://signal.org/blog/standalone-signal-desktop/</dc:identifier>
</item>
<item>
<title>Google is shutting down the QPX Express API for airfare data</title>
<link>https://news.ycombinator.com/item?id=15594975</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=15594975</guid>
<description>Google has been offering an API for airfare data at https://developers.google.com/qpx-express.
&lt;p&gt;I just received this email:&lt;/p&gt;&lt;p&gt;&quot;Dear QPX Express API Customer, After careful consideration, we've decided to shut down the QPX Express API as of April 10, 2018.&lt;/p&gt;
&lt;p&gt;How this affects you&lt;/p&gt;
&lt;p&gt;After April 10th, you will not be able to access the API and will no longer be charged for this service. Until then, you will be charged a reduced rate of $0.02 per query for any queries beyond the 50 free daily quota.&lt;/p&gt;
&lt;p&gt;Next steps&lt;/p&gt;
&lt;p&gt;You don't need to take any action. However, if you are actively using this product you may want to find an alternate solution before April 10, 2018. If you have any questions about these changes, please don't hesitate to contact us at any time. Sincerely,&lt;/p&gt;
&lt;p&gt;The QPX Express API team&quot;&lt;/p&gt;
&lt;p&gt;More info on the shutdown: https://developers.google.com/qpx-express/faq#EndOfServiceFAQs&lt;/p&gt;
</description>
<pubDate>Tue, 31 Oct 2017 17:36:46 +0000</pubDate>
<dc:creator>imartin2k</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=15594975</dc:identifier>
</item>
<item>
<title>Show HN: Frappe Charts – GitHub inspired JavaScript charting with zero dependencies</title>
<link>https://frappe.github.io/charts/</link>
<guid isPermaLink="true" >https://frappe.github.io/charts/</guid>
<description>&lt;h6 class=&quot;margin-vertical-rem&quot;&gt; Create a chart&lt;/h6&gt;
&lt;p class=&quot;step-explain&quot;&gt;Install&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs html&quot;&gt;  npm install frappe-charts&lt;/code&gt;
&lt;/pre&gt;
&lt;p class=&quot;step-explain&quot;&gt;Include it in your HTML&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs html&quot;&gt;  &amp;lt;script src=&quot;frappe-charts.min.js&quot; /&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p class=&quot;step-explain&quot;&gt;Make a new Chart&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs html&quot;&gt;  &amp;lt;!--HTML--&amp;gt;
  &amp;lt;div id=&quot;chart&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs javascript&quot;&gt;  // Javascript
  let data = {
    labels: [&quot;12am-3am&quot;, &quot;3am-6am&quot;, &quot;6am-9am&quot;, &quot;9am-12pm&quot;,
      &quot;12pm-3pm&quot;, &quot;3pm-6pm&quot;, &quot;6pm-9pm&quot;, &quot;9pm-12am&quot;],

    datasets: [
      {
        title: &quot;Some Data&quot;, color: &quot;light-blue&quot;,
        values: [25, 40, 30, 35, 8, 52, 17, -4]
      },
      {
        title: &quot;Another Set&quot;, color: &quot;violet&quot;,
        values: [25, 50, -10, 15, 18, 32, 27, 14]
      },
      {
        title: &quot;Yet Another&quot;, color: &quot;blue&quot;,
        values: [15, 20, -3, -15, 58, 12, -17, 37]
      }
    ]
  };

  let chart = new Chart({
    parent: &quot;#chart&quot;,
    title: &quot;My Awesome Chart&quot;,
    data: data,
    type: 'bar', // or 'line', 'scatter', 'percentage'
    height: 250
  });&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-secondary active&quot; data-type=&quot;bar&quot;&gt;Bar Chart&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-secondary&quot; data-type=&quot;line&quot;&gt;Line Chart&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-secondary&quot; data-type=&quot;scatter&quot;&gt;Scatter Chart&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-secondary&quot; data-type=&quot;percentage&quot;&gt;Percentage Chart&lt;/button&gt;&lt;/p&gt;
&lt;p class=&quot;text-muted&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.storytellingwithdata.com/blog/2011/07/death-to-pie-charts&quot;&gt;Why Percentage?&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 31 Oct 2017 15:39:06 +0000</pubDate>
<dc:creator>rushabh</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://frappe.github.io/charts/</dc:identifier>
</item>
<item>
<title>Reaching $10k monthly revenue with WakaTime, my SaaS side project</title>
<link>https://www.indiehackers.com/businesses/wakatime</link>
<guid isPermaLink="true" >https://www.indiehackers.com/businesses/wakatime</guid>
<description>&lt;h2&gt;Hello! What's your background, and what are you working on?&lt;/h2&gt;
&lt;p&gt;Hi! My name is Alan Hamlett, and I'm the founder of &lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime&lt;/a&gt;, a collection of plugins to measure your programming.&lt;/p&gt;

&lt;p&gt;WakaTime is used by programmers, contractors, and students to automatically report stats about their programming activity and editor usage. And it's very recently reached the 100 thousand user milestone!&lt;/p&gt;
&lt;h2&gt;What motivated you to get started with WakaTime?&lt;/h2&gt;
&lt;p&gt;It was in May 2013 after work one day. Back then I had a full time job, but was also independently contracting. That meant I had to track my hours for billing. Remembering to start and stop the timer was very annoying so I decided to automate it.&lt;/p&gt;
&lt;p&gt;Around 10pm on May 13th, 2013, I was talking with my friends and roommates around our fire pit. We were all programmers living in a hacker house and aspiring to build startups.&lt;/p&gt;
&lt;p&gt;While we had some steaks, smores, and beer, I pitched the idea to my friends. Like every idea, there was a lot of criticism and skepticism. However, one of my friends verbally &quot;signed up&quot; to use it when ready.&lt;/p&gt;
&lt;p&gt;So I started working on the prototype that night, and a month later this friend became the second &lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime&lt;/a&gt; user.&lt;/p&gt;
&lt;div id=&quot;ember476652&quot; class=&quot;shareable-quote ember-view&quot;&gt;
&lt;div class=&quot;shareable-quote__quote-wrapper&quot;&gt;

&lt;div class=&quot;shareable-quote__quote&quot;&gt;
&lt;p&gt;When I started WakaTime, I just wanted to build a product that I myself and other programmers would enjoy using.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;h2&gt;What went into building the initial product?&lt;/h2&gt;
&lt;p&gt;Mostly my time. It takes a great deal of time to build anything. Domain names are cheap, micro servers were free back then, but these days I would go serverless with something like &lt;a href=&quot;https://www.graph.cool/&quot;&gt;Graph.cool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Building an MVP for &lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime&lt;/a&gt; was only possible with a lot of time and experience building many other products. I limited features in the MVP to only one chart and two editor plugins.&lt;/p&gt;
&lt;p&gt;The first WakaTime plugin was for Vim, which took a month from start to finish. During that month I also built the website to show a simple breakdown of each day's coding activity in an SVG chart.&lt;/p&gt;
&lt;p&gt;After the Vim plugin and the website, I built the Sublime Text plugin in about a week. My oldest coding activity is from June 25th, 2013, which was the first time the Vim plugin was able to track my coding while building WakaTime.&lt;/p&gt;
&lt;p&gt;Over the next 4 years I worked a full-time job, while spending my evenings and weekends building WakaTime. Each plugin took about a week or two of programming for the initial release, and more maintenance afterwards.&lt;/p&gt;
&lt;div class=&quot;interactive-chart&quot; data-description=&quot;Plugin coding activity&quot; data-hover-suffix=&quot; Hours&quot; data-title=&quot;WakaTime Plugins&quot;&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;Hours&lt;/td&gt;
&lt;td&gt;Plugin&lt;/td&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Eclipse&quot;&gt;Ecl…&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;TeXstudio&quot;&gt;TeX…&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Coda&quot;&gt;Coda&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Eric6&quot;&gt;Eri…&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Sketch&quot;&gt;Ske…&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Textmate&quot;&gt;Tex…&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Notepad++&quot;&gt;N++&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Komodo&quot;&gt;Kom…&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Xcode&quot;&gt;Xcode&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Emacs&quot;&gt;Ema…&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Netbeans&quot;&gt;N.B.&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Visual Studio&quot;&gt;V.S.&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Visual Studio Code&quot;&gt;V.S.C.&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;JetBrains&quot;&gt;J.B.&lt;/td&gt;
&lt;td&gt;52&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Atom&quot;&gt;Atom&lt;/td&gt;
&lt;td&gt;57&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Vim&quot;&gt;Vim&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Sublime Text&quot;&gt;Sub…&lt;/td&gt;
&lt;td&gt;89&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;a href=&quot;https://storage.googleapis.com/indie-hackers.appspot.com/content/wakatime__plugins.png&quot;&gt;See all&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;However, the plugins were easy compared to the website. In total, I've put in over 2,600 hours of coding activity since 2013 on the website.&lt;/p&gt;
&lt;p&gt;I also couldn't have built &lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime&lt;/a&gt; without the help of open-source libraries like &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask&lt;/a&gt; and &lt;a href=&quot;https://www.sqlalchemy.org/&quot;&gt;SQLAlchemy&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;How have you attracted users and grown WakaTime?&lt;/h2&gt;
&lt;p&gt;I launched &lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime&lt;/a&gt; in 2013 with a &lt;a href=&quot;https://news.ycombinator.com/item?id=6046227&quot;&gt;Show HN&lt;/a&gt; post to Hacker News, which brought around 700 initial signups. I measure three different growth metrics:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Signup&lt;/li&gt;
&lt;li&gt;Onboarded (when the user has installed the plugin)&lt;/li&gt;
&lt;li&gt;Paid Upgrades&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;From the initial 700 signups, 160 finished onboarding. A year later I created paid plans, and eventually 20 of the 700 initial users became paid users.&lt;/p&gt;
&lt;p&gt;Every time I finished a new plugin, I treated it as a mini-launch and emailed any subscribers waiting for it, as well as posted to message boards and forums about the new editor support.&lt;/p&gt;
&lt;div id=&quot;ember476657&quot; class=&quot;shareable-quote ember-view&quot;&gt;
&lt;div class=&quot;shareable-quote__quote-wrapper&quot;&gt;

&lt;div class=&quot;shareable-quote__quote&quot;&gt;
&lt;p&gt;Every time I finished a new plugin, I treated it as a mini-launch and emailed any subscribers waiting for it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;I don't use paid advertising, because past Facebook ads resulted in mostly fake signups that never installed a plugin. Google adwords performs better than Facebook, but it's also more expensive. You can get most of the adwords traffic with good SEO.&lt;/p&gt;
&lt;p&gt;Growing by word of mouth has worked great. People tell their friends about a good product, and that growth is much steadier than artificial paid spikes.&lt;/p&gt;
&lt;p&gt;To increase active users, I focused on improving the onboarding experience. In 2013 only 15% of users finished onboarding, and now in 2017, 65% of new signups finish onboarding. This means the effort I spend finding new users is not wasted, because more of those new users finish onboarding.&lt;/p&gt;
&lt;div class=&quot;interactive-chart&quot; data-description=&quot;2013 to 2017&quot; data-hover-suffix=&quot; Percent of Signups Onboarded&quot; data-title=&quot;Onboarding Completion Rates&quot;&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;Year&lt;/td&gt;
&lt;td&gt;Onboarding Rate&lt;/td&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2013&quot;&gt;2013&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2014&quot;&gt;2014&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2015&quot;&gt;2015&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2016&quot;&gt;2016&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2017&quot;&gt;2017&lt;/td&gt;
&lt;td&gt;65&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;% of newly-registered users who finished onboarding&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;What's your business model, and how have you grown your revenue?&lt;/h2&gt;
&lt;p&gt;When I started &lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime&lt;/a&gt; in 2013, I just wanted to build a product that I myself and other programmers would enjoy using. I had plans for SaaS pricing ready, but honestly didn't know if anyone would upgrade to the paid plans. I was focusing on improving the dashboards, building more plugins, and just keeping the website online with fast page loads. My housemates Rob and Kirubakaran convinced me to spend a weekend adding paid plans, so it wasn't until a year after launching that you could pay for WakaTime.&lt;/p&gt;
&lt;p&gt;A difficult part of paid plans is figuring out how much to charge for your product. WakaTime started at $5/mo, but as the number of features increased it started to seem undervalued for what it offered.&lt;/p&gt;
&lt;p&gt;I was reluctant to increase prices, but changed the individual premium plan to $9/mo and added a team dashboard for $12/mo per seat. This helped keep the revenue above costs as the traffic and data grew.&lt;/p&gt;
&lt;div class=&quot;interactive-chart&quot; data-description=&quot;2013 to 2017&quot; data-hover-suffix=&quot; Paying Users&quot; data-title=&quot;Paying Users&quot;&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;Year&lt;/td&gt;
&lt;td&gt;Paying Users&lt;/td&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2013&quot;&gt;2013&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2014&quot;&gt;2014&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2015&quot;&gt;2015&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2016&quot;&gt;2016&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2017&quot;&gt;2017&lt;/td&gt;
&lt;td&gt;1100&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Paid users are spread out worldwide, with most in the US, followed by the EU, South America, then Asia. &lt;a href=&quot;https://stripe.com/&quot;&gt;Stripe&lt;/a&gt; is amazing and accounts for most of the paid users. PayPal/Braintree is more popular among non-US users.&lt;/p&gt;
&lt;p&gt;Things I spend money on to keep the website up:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I was spending over $3k/mo for virtual machines and SQL DB on Amazon EC2, but switched all the servers to Nephoscale for half the price and better performance.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I also send out sponsored emails for developer-related products. &lt;a href=&quot;http://upstart.me/&quot;&gt;Upstart&lt;/a&gt; and &lt;a href=&quot;https://thepear.co/&quot;&gt;Pear&lt;/a&gt; are good places to find advertisers for your newsletter. This is supplementary, but nowhere near the main SaaS revenue.&lt;/p&gt;
&lt;h2&gt;What are your goals for the future?&lt;/h2&gt;
&lt;p&gt;Personally, I think life's too diverse for only one language, so I'm learning German.&lt;/p&gt;
&lt;p&gt;For &lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime&lt;/a&gt;, I want to make onboarding easier with a universal installer. After that, I'll add an invoicing tool so you can generate and send PDF invoices pre-filled with your coding activity.&lt;/p&gt;
&lt;p&gt;It might sound strange, but I also want to set a goal to spend &lt;em&gt;less&lt;/em&gt; time building WakaTime. This would mean being more productive with my time, and being more focused when working on WakaTime.&lt;/p&gt;
&lt;h2&gt;What are the biggest challenges you've faced and obstacles you've overcome?&lt;/h2&gt;
&lt;p&gt;With startups the challenges are always present. As soon as you solve one marketing hurdle, scaling problem, or product feature, you're presented with bigger challenges. That's part of the fun of startups… always having new challenges.&lt;/p&gt;
&lt;div id=&quot;ember476662&quot; class=&quot;shareable-quote ember-view&quot;&gt;
&lt;div class=&quot;shareable-quote__quote-wrapper&quot;&gt;

&lt;div class=&quot;shareable-quote__quote&quot;&gt;
&lt;p&gt;The best startup book is one you never open because you're too busy marketing and building your product.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;The biggest obstacle I've overcome was having the constant persistence to work on &lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime&lt;/a&gt;, even when it wasn't making any revenue.&lt;/p&gt;
&lt;p&gt;I put off charging for WakaTime until over a year after launching. If I could do things differently I would have created a paid version from day one.&lt;/p&gt;
&lt;h2&gt;Have you found anything particularly helpful or advantageous?&lt;/h2&gt;
&lt;p&gt;The biggest advantage I've had is that I built &lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime&lt;/a&gt; for myself. This way feature development came naturally, and I already knew how to market it. Also, it helped me continue working on WakaTime even without it making revenue or seeing exponential growth.&lt;/p&gt;
&lt;p&gt;Books can make you feel like you're being productive without actually building anything. The best startup book is one you never open because you're too busy marketing and building your product.&lt;/p&gt;
&lt;p&gt;I have found tremendous help with a network of entrepreneurial-minded friends. Whether they were doing a startup or working for one, they all helped more than a book would have.&lt;/p&gt;
&lt;h2&gt;What's your advice for indie hackers who are just starting out?&lt;/h2&gt;
&lt;p&gt;Stop reading and start building.&lt;/p&gt;
&lt;p&gt;Even if you don't code now, you can figure out enough to build a prototype. My suggestion is to get good/fast at building working prototypes.&lt;/p&gt;
&lt;h2&gt;Where can we go to learn more?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime.com&lt;/a&gt; to sign up.&lt;/p&gt;
&lt;a class=&quot;screenshot-wrapper&quot; href=&quot;https://wakatime.com/&quot;&gt;&lt;img alt=&quot;WakaTime website&quot; src=&quot;https://storage.googleapis.com/indie-hackers.appspot.com/content/wakatime__homepage.jpg&quot;/&gt;&lt;/a&gt;
&lt;p&gt;You can &lt;a href=&quot;https://twitter.com/wakatime&quot;&gt;follow @WakaTime on Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'll be reading the comments below and will do my best to answer your questions!&lt;/p&gt;
</description>
<pubDate>Tue, 31 Oct 2017 14:45:52 +0000</pubDate>
<dc:creator>welder</dc:creator>
<og:description>Programmers aren't easy to sell to. Regardless, Alan Hamlett has grown WakaTime to $10k/mo by continually launching his coding plugins to a network of subscribers.</og:description>
<og:image>https://www.indiehackers.com/images/business-shareables/wakatime-0534bbea5721145a67e48c9a242f26.png</og:image>
<og:title>WakaTime on Indie Hackers</og:title>
<og:type>article</og:type>
<og:url>https://www.indiehackers.com/businesses/wakatime</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.indiehackers.com/businesses/wakatime</dc:identifier>
</item>
<item>
<title>Effective Programs: 10 Years of Clojure</title>
<link>https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms.md</link>
<guid isPermaLink="true" >https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms.md</guid>
<description>
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.00.01.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.00.01.png&quot; alt=&quot;00.00.01 Effective Programs&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I feel like a broken record every time I start these talks by thanking everybody. So I want to start this way in a different way by saying, &quot;My son is getting married today.&quot;&lt;/p&gt;
&lt;p&gt;[Audience applause]&lt;/p&gt;
&lt;p&gt;&quot;In another state.&quot;&lt;/p&gt;
&lt;p&gt;[Audience laughter]&lt;/p&gt;
&lt;p&gt;So right after I give this talk, I'm gonna hop on a plane, go do that, I'll be back tomorrow morning, so I haven't disappeared. I'm looking forward to the follow-up talks and everything else, but I will be missing in action briefly.&lt;/p&gt;
&lt;p&gt;So now, to be redundant. Thanks everybody for coming. Ten years ago, Clojure was released, and there's no possible way&lt;/p&gt;
&lt;p&gt;[Audience applause]&lt;/p&gt;
&lt;p&gt;I could have imagined this. You know I told my wife Steph, I said, &quot;if 100 people use this, that would be ridiculously outrageous&quot;, and that's not what happened. And what did happen is interesting, I don't think it's fully understood.&lt;/p&gt;
&lt;p&gt;But I wanted today to talk about a look back a little bit about the motivations behind Clojure. It's not like when you come out with a programming language you can tell that whole story. I think one because it's not good marketing, and two because if you really wanna be honest, you probably don't know. It takes time to understand what happened, and why and what you really were thinking, and I won't pretend I had a grand plan that incorporated everything that ended up becoming Clojure. It certainly involved a lot of interaction with people in the community.&lt;/p&gt;
&lt;p&gt;But, there is this, &quot;Clojure is opinionated&quot;, this, we hear this. And I think it's interesting to think about two aspects of that. One is, in which ways is it, and what does it mean for a language to be opinionated. I think in Clojure's case, people come to it, and they're like &quot;wow, this is forcing me, everywhere I turn to do something a certain way&quot;.&lt;/p&gt;
&lt;p&gt;So, and I think the nice way to say that is there's only a few strongly supported idioms, and a lot of support for them. So if you use the stuff that comes with it, there's a whole story that supports your efforts. And if you want to fight against that, we don't do too much.&lt;/p&gt;
&lt;p&gt;[Alex was asking me which glasses were the right ones and &quot;neither&quot; is the answer.]&lt;/p&gt;
&lt;p&gt;But design is about making choices.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.02.53.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.02.53.png&quot; alt=&quot;00.02.53 Clojure is 'opinionated'&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And now there's a bunch of choices in Clojure, in particular, there's a big choice about what to leave out, and part of this talk will be talking about what was left out.&lt;/p&gt;
&lt;p&gt;The other side of being opinionated is &quot;how do you get opinionated&quot;. I mean it's not like I'm opinionated.&lt;/p&gt;
&lt;p&gt;[Audience laughter]&lt;/p&gt;
&lt;p&gt;Of course I'm opinionated, and that comes from experience. When I started&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.03.16.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.03.16.png&quot; alt=&quot;00.03.16 Application Development&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;doing Clojure in 2005, I had already been programming for 18 years. So I'd had it. I was done. I was tired of it. But I had done some really interesting things with the languages that professional programmers used at the time.&lt;/p&gt;
&lt;p&gt;So primarily I was working on scheduling systems in C++, these are scheduling systems for broadcasters, so radio stations use scheduling systems to determine what music they play. And it's quite sophisticated the way that works. You know, you think about &quot;well over the course of the day you don't want to repeat the same song&quot;. You actually have to think about the people who, you know, listen to the radio for one hour in the morning and this other hour in the afternoon. And you create sort of alternate time dimension for every drive time hour. Things like that. So there's multi-dimensional scheduling and we used evolutionary program optimization to do schedule optimization.&lt;/p&gt;
&lt;p&gt;Broadcast automation is about playing audio and at the time we were doing this, playing audio on computers was a hard thing. It required dedicated cards to DSP work. I did work on audio fingerprinting, so we made systems that sat in closets and listened to the radio and wrote down what they heard. And this was both used to track station's playlists and eventually to track advertising which was where the money was for that. Which involved figuring out how to effectively fingerprint audio and scrub audio, sort of compare novelty to the past.&lt;/p&gt;
&lt;p&gt;I worked on yield management systems. Does everybody know what &quot;yield management&quot; is&quot;? Probably not. So what do hotels, airlines, and radio stations have in common? Their inventory disappears as time passes, right? &quot;Oh, I have a free room, I've got a slot in my schedule, I've got a seat on this airplane&quot;, and then time passes and nobody bought it, and now you don't. So yield management is the science and practice of trying to figure out how to optimize the value of your inventory as it disappears out from under you. And that's about looking at the past and past sales and it's not simplistic. So for instance, it's not an objective to sell all of your inventory, the objective is to maximize the revenue you get from it, which means not selling all of it in most cases.&lt;/p&gt;
&lt;p&gt;That was not written in C++, that was around the time I discovered Common Lisp, which was about 8 years into that 15 years. And there was no way the consumer of this would use Common Lisp, so I wrote a Common Lisp program that wrote all the yield management algorithms again out as SQL stored procedures and gave them this database, which was a program.&lt;/p&gt;
&lt;p&gt;Eventually I got back to scheduling and again wrote a new kind of scheduling system in Common Lisp, which again they did not want to run in production. And then I rewrote it in C++. Now at this point I was an expert C++ user and really loved C++, for some value of love&lt;/p&gt;
&lt;p&gt;[Audience laughter]&lt;/p&gt;
&lt;p&gt;that involves no satisfaction at all.&lt;/p&gt;
&lt;p&gt;[Audience laughter]&lt;/p&gt;
&lt;p&gt;But as we'll see later I love the puzzle of C++. So I had to rewrite it in C++ and it took, you know, four times as long to rewrite it as it took to write it in the first place, it yielded five times as much code and it was no faster. And that's when I knew I was doing it wrong.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.07.09.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.07.09.png&quot; alt=&quot;00.07.09 Application Development (2)&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Went out to help my friend Eric write the new version of the National Exit Poll System for the U.S., which also involves an election projection system. We did that in, you know, a sort of self-imposed functional style of C#.&lt;/p&gt;
&lt;p&gt;And then, you know, around 2005, I started doing Clojure and this machine listening project at the same time. And I'd given myself a 2-year sabbatical to work on these things not knowing which one would go where. And leaving myself free to do whatever I thought was right so I had zero commercial objectives, zero acceptance metrics, I was trying to please myself for two years, just sort of bought myself a break.&lt;/p&gt;
&lt;p&gt;But along the way during that period of time, you know, I realized I'd only have time to finish one. And I knew how to finish Clojure, and you know, machine listening is a research topic. I didn't know if I was two years away or five years away. So Clojure is written in Java and eventually, you know, the libraries written in Clojure.&lt;/p&gt;
&lt;p&gt;And the machine listening work involved building an artificial cochlea, and I did that in a combination of Common Lisp and Mathematica and C++. And in recent years as I've dusted it off, I've been able to do it in Clojure, and that's sort of the most exciting thing. I needed these three languages before to do this and now I only need Clojure to do it.&lt;/p&gt;
&lt;p&gt;And then I did Datomic, which is also Clojure.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.08.39.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.08.39.png&quot; alt=&quot;00.08.39 Databases!&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Almost all of these projects involved a database. All different kinds of databases from, you know, ISAM databases, a lot of SQL, many attempts but not many integrations of RDF. Databases are an essential part of solving these kinds of problems. It's just what we do.&lt;/p&gt;
&lt;p&gt;How many people use a database in what they do every day? How many people don't?&lt;/p&gt;
&lt;p&gt;Ok.&lt;/p&gt;
&lt;p&gt;So this last thing is not an acronym for a database. It's there to remind me to tell this anecdote.&lt;/p&gt;
&lt;p&gt;So I used to go to the Light-Weight Languages workshop. It was a one-day workshop held at MIT. Where people working on small languages, you know, either proprietary or just domain-specific, you know, DARPA(?) or whatever would talk about their little languages and what they would do with their little languages. It was very cool and very exciting. Got a bunch of language geeks in the same room, and there was pizza afterwards.&lt;/p&gt;
&lt;p&gt;So I remember, I would just go by myself or with my friend. I was not part of the community that did that, they just let me in. But afterwards, they had pizza, so I had sat down with pizza with two people I didn't know, and I still don't know their names. And it's good that I don't, because I'm gonna now disparage them.&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;They were both computer language researchers, and they were talking also disparagingly about their associate who'd somehow had fallen in with databases and lost the true way. And one of them sort of sneeringly ? to the other and said, &quot;aw, David, when was the last time you used a database?&quot;, and he was like, &quot;I don't know that I've ever used a database&quot;. And like I sort of choked on my pizza, because theoretically they're designing programming languages and yet they're programming and they never use databases. I didn't know how that worked.&lt;/p&gt;
&lt;p&gt;But it's part of the inspiration to do&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.10.38.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.10.38.png&quot; alt=&quot;00.10.38 'Situated' Programs&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Clojure because, I mean, people who don't do databases can write programming languages, anybody can.&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;So, you know, there are different kinds of programs, and one of the things I tried to capture on this slide is to talk about what those kinds of programs were that I was working on. And the word I came up with was &quot;situated&quot; programs. In other words, you can distinguish these kinds of programs that sit in the world in a sort of entangled with the world. They have a bunch of characteristics. One is, they execute for an extended period of time. It's not just like calculate this result and spit it over there. It's not like a lambda function at AWS. These things run on an ongoing basis and they're sort of wired up to the world. And most of these systems run continuously, 24/7. It's quite terrifying to me that now these things which are 30 years old are almost definitely still running 24/7 somewhere, if they haven't been replaced.&lt;/p&gt;
&lt;p&gt;So this first notion of extended periods of time means continuously, as opposed to just for a burst. They almost always deal with information. What were the kinds of things that I talked about? Scheduling. In scheduling you look at what you've done in the past. You look at your research data. What does your audience tell you they like or they're interested in, or what they're burnt out on. And you combine that knowledge to make a schedule.&lt;/p&gt;
&lt;p&gt;Yield management looks at the past sales and sales related to particular periods of time and facts about that, and produces pricing information.&lt;/p&gt;
&lt;p&gt;The election system looks at prior vote records. How did people vote before? That is a big indicator of how they're going to vote again. Of course the algorithms behind (?) that are much more sophisticated.&lt;/p&gt;
&lt;p&gt;But in a simplified way, you can say all of these systems consumed information, and it was vital to them. And some of them produced information. They tracked the record what they did.&lt;/p&gt;
&lt;p&gt;And that's this next point which is that most of these systems have some sort of time-extensive memory. That database isn't like an input to the system that's, you know, fixed. It's something that gets added to as the system runs. So these systems are remembering what they did and they're doing it both for their own consumption and for consumption by other programs quite often.&lt;/p&gt;
&lt;p&gt;And they deal with real-world irregularity. This is the other thing I think that's super-critical, you know, in this situated programming world. It's never as elegant as you think, the real-world.&lt;/p&gt;
&lt;p&gt;And I talked about that scheduling problem of, you know, those linear times, somebody who listens all day, and the somebody who just listens while they're driving in the morning and the afternoon. Eight hours apart there's one set of people and, then an hour later there's another set of people, another set. You know, you have to think about all that time. You come up with this elegant notion of multi-dimensional time and you'd be like, &quot;oh, I'm totally good...except on Tuesday&quot;. Why? Well, in the U.S. on certain kinds of genres of radio, there's a thing called &quot;two for Tuesday&quot;. Right? So you built this scheduling system, and the main purpose of the system is to never play the same song twice in a row, or even pretty near when you played it last. And not even play the same artist near when you played the artist, or else somebody's going to say, &quot;all you do is play Elton John, I hate this station&quot;.&lt;/p&gt;
&lt;p&gt;But on Tuesday, it's a gimmick. &quot;Two for Tuesday&quot; means, every spot where we play a song, we're going to play two songs by that artist. Violating every precious elegant rule you put in the system. And I've never had a real-world system that didn't have these kinds of irregularities. And where they weren't important.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.14.28.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.14.28.png&quot; alt=&quot;00.14.28 'Situated' Programs (2)&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Other aspects of situated programs, they rarely are, sort of, their own little universe where they get to decide how things are and they don't need to interact with anyone else or agree with anyone else. Almost all these systems interacted with other systems. Almost all these systems interacted with people. Somebody would sit there and say, &quot;start playing this song right now&quot;, or &quot;skip this song&quot;, and we're like &quot;I scheduled that song and I balanced everything around you playing it and now your D.J. just said 'don't do that'&quot;.&lt;/p&gt;
&lt;p&gt;The election projection system has tons of screens for users to look at things, cross-tabulate? things, and make decisions, feeding all the things you see on T.V. so people can explain things to other people. So people and talking to people is an important part of these programs.&lt;/p&gt;
&lt;p&gt;They remain in use for long periods of time. These are not throw-away programs, like I said. I don't know that much of the software I ever wrote has stopped being run by somebody. People are still using it.&lt;/p&gt;
&lt;p&gt;And they're also situated in a world that changes. So again, your best laid plans are there the day you first write it, but then the rules changes. May be there's &quot;three for Thursdays&quot;. I don't know, but when that happens, go change everything to deal with it.&lt;/p&gt;
&lt;p&gt;Another aspect of being situated is one I think I've been thinking about a lot more recently is, being situated in the software environment and community. You know, your program is rarely written from scratch with all code that you wrote just for the purpose of the program. Invariably, you're going to pull in some libraries. And when you do, you've situated yourself in that library ecosystem. And that's another thing.&lt;/p&gt;
&lt;p&gt;So when I talk about situated programs and you look at the programs I talked about having written in my career one of them really sticks out, right? What's that? Clojure. Compilers, they're not like this, they don't have a fraction of these problems. They take some input right off the disk, they get to define the whole world, right? When you write a language, what do you do? The first thing you do when you write a language, you get rid of any &quot;two for Tuesdays&quot;.&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;Right? You can just disallow it. You try to make the most regular thing, and then your programming is just, well, now I have to enforce the rules that I made up for myself. It's like, wow, what could be easier than that?&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;And it really is a lot simpler. They don't generally use a database. Although I think they probably should. They rarely talk over wires and blah, blah, blah, blah, blah. So compilers and theorem provers and things like that are not like these programs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.17.08.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.17.08.png&quot; alt=&quot;00.17.08 Effective&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So the title of this talk is &quot;Effective Programs&quot;, and what does &quot;effective&quot; mean? It means &quot;producing the intended result&quot; and I really want this word to become important because I'm really tired of the word &quot;correctness&quot;. Where &quot;correct&quot; just means, I don't know, &quot;make the type checker happy&quot;.&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;None of my (?) consumers of these programs that I did professionally care about that. Right, they care that the program works for their definition of &quot;works&quot;.&lt;/p&gt;
&lt;p&gt;On the other hand, I don't want this to be taken as, &quot;this is a recipe for hacking&quot;, right, just like &quot;do anything that kind of works&quot;. So we have to talk about what &quot;works&quot; means. What does it mean to actually accomplish the job of being effective.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.17.51.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.17.51.png&quot; alt=&quot;00.17.51 What is Programming About?&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And that's where I want to sort of reclaim the name &quot;programming&quot;. Or at least make sure we have a broad definition that incorporates languages like Clojure and the approaches that it takes. Because I think these problems matter.&lt;/p&gt;
&lt;p&gt;So what is programming about? I'm going to say, &quot;for me, programming is about making computers effective in the world&quot;. And I mean &quot;effective&quot; in the same way we would talk about people being effective in the world. Either the programs themselves are effective or they're helping people be effective.&lt;/p&gt;
&lt;p&gt;Now, how are we effective? Well, sometimes we're effective because we calculate really well. Like may be when we're trying to compute trajectories for missles or something like that. But mostly not. Mostly areas of human endeavor. We're effective because we have learned from our experience, and we can turn that experience into predictive power. Whether that's knowing not to step in a giant hole or off a cliff, or walk towards the roaring lion, or how to market to people, or what's the right approach to doing this surgery, or what's the right diagnosis for this problem.&lt;/p&gt;
&lt;p&gt;People are effective because they learn and they learn from experience and they leverage that. And so, I'm going to say, &quot;being effective is mostly not about computation, but it's about generating predictive power from information&quot;.&lt;/p&gt;
&lt;p&gt;And you've heard me talk about information, right? It's about facts, it's about things that happen, right? Experience, especially when we start pulling this into the programming world. Experience equals information equals facts about things that actually happened. Right, that's the raw material of success. In the world, it is for people, it should be for programs that either support people or replace people. So they can do more interesting things.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.19.45.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.19.45.png&quot; alt=&quot;00.19.45 What is Programming Not About?&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So I'll also say that, &quot;for me, what is programming not about?&quot;. It's not about itself. Programming is not about proving theories about types being consistent with your initial propositions. It's not. That's an interesting endeavor of its own. But it's not, it's not what I've been talking about. It's not the things I've done in my career. It's not (?) programming is for me and it's not why I love programming. I like to accomplish things in the world.&lt;/p&gt;
&lt;p&gt;Bertrand Russell has a nice snarky comment about that. He's actually not being snarky. He wants to elevate mathematics and say, &quot;it's quite important that mathematics be only about itself&quot;. If you start crossing the line, right? And standing on stage and saying, &quot;mathematical safety, type safety equals heart machine safety&quot;, you're doing mathematics wrong, according to Bertrand Russell. And it's not just algorithms and computation, they're important, but they're a subset of what we do.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.20.46.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.20.46.png&quot; alt=&quot;00.20.46 Logic&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, don't get me wrong. I like logic, right? I've written those scheduling systems, I've written those yield management algorithms, I've written a Datalog engine. I like logic. I like writing that part of the system. I usually get to work on that part of the system. That's really cool.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.21.03.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.21.03.png&quot; alt=&quot;00.21.03 Logic + Some Shim&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But even, you know, a theorem prover, or a compiler, you know, eventually needs to read something from the disk, or spit something back out, print something. So they're some shim of something other than the logic. But in this world of situated programs and the kinds of programming that I've done, and I think that Clojure programmers do,&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.21.25.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.21.25.png&quot; alt=&quot;00.21.25 Information Processing&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;that's a small part of the programming. Programs are dominated by information processing. Unless they have UIs, in which case, there's this giant circle around this, where this looks like a dot.&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;But I'm not gonna go there.&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;Actually, because I don't do that part. But the information processing actually dominates programs both in the effort, the irregularities often there, right? It's this information part that, like, takes all the irregularity out of the way so my Datalog engine can, like, have an easy day. Cuz everything's now perfect, cuz I see a perfect thing, cuz somebody fixed it before it got to me.&lt;/p&gt;
&lt;p&gt;And I don't want to make light of this. I think this is super-critical, right? Your best...Google's coolest, you know, search algorithm, if they couldn't get it to appear on a web page and do something sensible when you type, you know, something and pressed enter, no one would care. Right? This is where the value proposition of algorithms gets delivered. It's super important. But in my experience,&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.22.32.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.22.32.png&quot; alt=&quot;00.22.32 Information Processing&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;while this is the ratio&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.22.35.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.22.35.png&quot; alt=&quot;00.22.35 Information Processing&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;it probably needs to be to solve the problem, this is the ratio&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.22.39.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.22.39.png&quot; alt=&quot;00.22.39 Information Processing&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;it often is, and was in my experience in my work. Actually, this is also sort of bigger, the square would be more of a dot. That the information part of our programs is much larger than it needs to be because the programming languages we had then and still have mostly are terrible at this. And we end up having to write a whole ton of code to do this job. Because it's just not something the designers of those languages took on.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.23.05.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.23.05.png&quot; alt=&quot;00.23.05 Information Processing + Libraries&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And of course we're not done, right? We don't write programs from scratch, so we have to start dealing with libraries. When we do that, now we've started to cross out of &quot;we get to define everything&quot; land, right? Now we have&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.23.17.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.23.17.png&quot; alt=&quot;00.23.17 Information Processing + Libraries&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;relationships. And we have to define how those, we're going to talk to libraries and how they may talk to us, but mostly we talk to them. So now there are lines, right? There's some protocol of how do you talk to this library. And we're still not&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.23.30.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.23.30.png&quot; alt=&quot;00.23.30 Information Processing + Libraries + Database&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;done, right? Cuz we said, these situated programs, they involve databases. Now, while the information processing and the logic and the libraries may have all shared a programming language, right? Or at least, you know, on the JVM, something like the JVM, a runtime. Now we're out (?) it, now we have a database that's clearly over there, it's written in a different language, it's not colocated in memory, so there's a wire. It has its own view of the world, and there's some protocol for talking to it. And invariably, whatever that protocol is, we want to fix it.&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;And why is that? Well it's something I'm going to talk about later called &quot;parochialism&quot;, you know, we've adopted a view of the world, our programming language put upon us and it's a misfit for the way the database is thinking about things. And rather than say, &quot;I wonder if we're wrong on our end&quot;, we're like, &quot;oh no, we got to fix that...that relational algebra, it can't possibly be a good idea&quot;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.24.36.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.24.36.png&quot; alt=&quot;00.24.36 Three or More...&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ok, but we're still not done. I said these programs, they're not, they don't sit by themselves, they talk to other programs. So now, now we have three or more of these things, and now they may not be written in the same programming language, right? They all have their view of the world. They all have their idea of how the logic should work. They all have their idea of how they want to talk to libraries or use libraries, and there's more wires and more protocols. And here we don't get the database vendor at least giving us some wire protocol to start with that we'll fix with ORM, we have to make up our own protocols. And so we do that and what do we end up with? JSON, right? It's not good.&lt;/p&gt;
&lt;p&gt;But at least now&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.25.20.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.25.20.png&quot; alt=&quot;00.25.20 System&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;we have something...so when I program, this is what I'm programming. This is a program, to me. This is going to solve a problem and like no subset of this is going to solve the problem. This is the first point you start solving the problem. But you're not done with problems...&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.25.38.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.25.38.png&quot; alt=&quot;00.25.38 System + Time&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Because it's not a one-shot, one-time, one-moment, one great idea, push the button, ship it, move on, kind of world, is it? Every single aspect of this mutates over time, right? The rules change, the requirements change, the networks change, the computing power changes, the libraries that you're consuming change, hopefully the protocols don't change but sometimes they do. So we have to deal with this over time. And for me, effective programming is about doing this over time well.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.26.18.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.26.18.png&quot; alt=&quot;00.26.18 Different Strokes&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, you know, I'm not trying to say, &quot;there's a right and wrong way, and, like, Clojure is right and everything else is wrong, right?&quot;, but it should be apparent, but may be it isn't, because I think we all aspire to write programming languages that are general purpose. You could probably write, you know, a theorem prover in Clojure, actually I'm sure you could. But you certainly would get a different language if your target were compilers and theorem provers or your target were device drivers or phone switches. Clojure's target is information-driven situated programs, right? There's not a catchy phrase for that. But I mean that's what I was doing, all my friends were doing that. How many people in this room are doing that? Yeah. So when you look at programming languages, you really should look at...what are they for? Right? There's no like inherent goodness, like suitability constraints.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.27.19.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.27.19.png&quot; alt=&quot;00.27.19 The Problems of Programming&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So before I started Clojure, I drew this diagram...which I did not. That would have been an amazing feat of prescience. But as I try to pick apart, you know, what was Clojure about -- cuz I think there's no reason to write a new programming language unless you're going to try to take on some problems, you should look at what the problems are. I mean, why was I unhappy as a programmer after 18 years and said, &quot;if I can't switch to something like Common Lisp, I'm going to switch careers&quot;. Why am I saying that? I'm saying it because I'm frustrated with a bunch of limitations in what I was using.&lt;/p&gt;
&lt;p&gt;And you can call them problems, and I'm going to call them the problems of programming. And I've ordered them here -- I hope you can read that. Can you read it? Yeah, ok. I've ordered them here in terms of severity. And severity manifests itself in a couple of ways. Most important, cost. What's the cost of getting this wrong? At the very top you have the domain complexity, about which you could do nothing. This is just the world. It's as complex as it is.&lt;/p&gt;
&lt;p&gt;But the very next level is the where we start programming, right? We look at the world and say, &quot;I've got an idea about how this is and how it's supposed to be and how, you know, my program can be effective about addressing it&quot;. And the problem is, if you don't have a good idea about how the world is, or you can't map that well to a solution, everything downstream from that is going to fail. There's no surviving this misconception problem. And the cost of dealing with misconceptions is incredibly high.&lt;/p&gt;
&lt;p&gt;So this is 10x, a full order of magnitude reduction in (?) severity before we get to the set of problems I think are more in the domain of what programming languages can help with, right? And because you can read these they'll all going to come up in a second as I go through each one on some slide so I'm not going to read them all out right now. But importantly there's another break where we get to trivialisms of problems in programming. Like typos and just being inconsistent, like, you thought you're going to have a list of strings and you put a number in there. That happens, you know, people make those kinds of mistakes, they're pretty inexpensive.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.29.49.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.29.49.png&quot; alt=&quot;00.29.49 The Problems of Programming (with Green)&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, what were the problems that Clojure took on, these green ones. And again I'll go through all the green ones in a moment, but I would say, amongst the ones in the middle, I don't think that Clojure tried to do something different about resource utilization than Java did. Sort of adopted that runtime and its cost model. And I don't think that...I mean I wanted Clojure to be a good library language, but I didn't think about the library ecosystem problems as part of Clojure. And, you know, my talk last year about libraries implies that I still think this is still a big problem for programs. It's one of the ones that's left, right? After you do Clojure and Datomic, what's left to fix?&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;And the libraries, the libraries are there. But not the inconsistency and typos, not so much. I mean we know you can do that in Clojure. It's actually pretty good, letting you make typos.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.30.46.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.30.46.png&quot; alt=&quot;00.30.46 Clojure Design Objectives&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So fundamentally, what is Clojure about? Can we make programs out of simpler stuff? I mean, that's the problem after 18 years of using, like, C++ and Java, you're exhausted. How many people have been programming for 18 years? Ok. How many for more than 20 years? More than 25? Ok? Fewer than 5? Right (?), so that's really interesting to me. It may be an indictment of Clojure as a beginner's language or may be that Clojure is the language for cranky, tired, old programmers.&lt;/p&gt;
&lt;p&gt;[audience laughter and applause]&lt;/p&gt;
&lt;p&gt;And, you know what? I would not be embarrassed if it was, that's fine by me. Because, you know, I did make it for myself, which I think is an important thing to do. Trying to solve other people's, you know, problems and think you understand what they are, you know, that's tricky.&lt;/p&gt;
&lt;p&gt;So, when I discovered Common Lisp, having used C++, I said that, &quot;I'm pretty sure to the answer to this question is, 'yeah, absolutely'&quot;. And can we do that with a lower cognitive load? I also think, &quot;yes, absolutely&quot;. And then the question is, &quot;can I make a Lisp I can use instead of Java or C#?&quot;. Cuz you just heard my story, and I used Common Lisp a (?) couple of times, every time it got kicked out of production, or just ruled out of production, really not kicked out, it didn't get a chance. So I knew I had to target a runtime that people would accept.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.32.23.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.32.23.png&quot; alt=&quot;00.32.23 Meta problems&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So there are these meta problems, right? You can try to take on some programming problems but there are always problems in getting a language accepted. I did not think Clojure would get accepted. Really, honestly. But I knew, if I wanted my friend who thought I was crazy even doing it, like, person number one other than myself to try it, I'd have to have a credible answer to the acceptability problems and the power problems. Because otherwise it's just not practical, it's like, &quot;that's cool Rich, but, like, we have work to do&quot;.&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;&quot;If we can't use this professionally, really it's just a hobby&quot;. So we have acceptability, I think that goes to performance, and for me, I thought it was also the deployment platform. There's a power challenge that you have to deal with, and that's about leverage and I'll talk about that later. And also compatibility. Again that's part of acceptability. But, you know, Clojure's ability to say &quot;it's just a Java library&quot;, was big. How many people snuck Clojure into their organization to start with? Right, ok. Success!&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.33.33.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.33.33.png&quot; alt=&quot;00.33.33 Non-problems&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And then there were other things I considered to be absolute non-problems and the first of these is the parentheses, right? How many people...and it's ok to admit, right? Every (?) has a story. How many people thought the parentheses were going to be a problem and now think that was crazy thinking? Yeah. Which is fine, I think everybody goes through that. Everybody who looks at Lisp is like, &quot;this is cool but I'm going to fix this part before I get going...before I start, before I understand the value proposition of it at all, I'm going to fix this&quot;, and that says something about programmers. I'm not sure exactly what. But I don't believe this is a problem and in fact when we get to the middle of this talk you'll see that I think this is the opposite of a problem. This is the core value proposition of Clojure. And I think things like, par-make-it-go-away whatever that is a bad...it's a terrible idea. And it's not good for beginners to do that, to, you know, to try to solve a problem that's, that's a feature.&lt;/p&gt;
&lt;p&gt;The other thing I considered not a problem is it being dynamic, right? I worked in C++, you know, we had a thing where (?) we said, &quot;if it compiles it will probably work&quot;, right? Like they say of Haskell. And it was equally true then as it is now.&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;But we really did believe it. We totally did. And it doesn't help. It really does not help for the big problems.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.35.04.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.35.04.png&quot; alt=&quot;00.35.04 PLOP - Place Oriented Programming&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The top, the big wide ones.&lt;/p&gt;
&lt;p&gt;Ok, so, problem number one on that list was place oriented programming. Absolutely, this is the problem. Almost all the programs I wrote, lots of the things on that list were multi-threaded programs, you know, they're crazy hard in C++. Just impossible to get right, when you adopt a normal mutability approach, you know, mutable objects. So, this is the number one self-inflicted programming problem. It seemed, you know, clear to me that the answer was to make functional programming and immutable data the default idiom. So the challenge I had was, were there data structures that would be fast enough to say, &quot;we could swap this for that&quot;. And the objective I had, the goal I had was to get within 2x for reads and 4x for writes. And I did a lot of work on this, this was actually the main research work behind Clojure, was about these persistent data structures. Eventually I found...you know I looked at Okasaki's stuff and, you know, the fully functional approach and none of that gets here. And then I found Bagwell's structures were not persistent, but I realized could be made so, and they just have tremendously great characteristics combining the persistence with the way they're laid out, the way memory works. They made it. They made this bar, and I was able to get my friend to try my programming language. You know, we (?) have large library of pure functions to support this, and, you know, immutable local bindings. Basically if you fall into Clojure, your first hurdle is not the parentheses, right? It's this, this functional paradigm, everything is gone, there's no mutable variables, there's no state, there's no mutable collections and everything else, but there's a lot of support, there's a big library. You just have to, you know, sort of learn the idioms. So I think this was straight-forward, the critical thing that's different about Clojure is, by the time I was doing Clojure, the people who invented this stuff had adopted a lot more, right? I think most of the adherents in the functional programming community considered functional programming to be about typed functional programming, statically typed functional programming is functional programming. And I don't think so, I think that this is, you know, this falls clearly in the 80/20 rule. And I think the split here is more like 99/1. The value props are all on this side, and I think Clojure users get a sense of that, they get a feel for that. This is the thing that makes you sleep at night.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.37.47.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.37.47.png&quot; alt=&quot;00.37.47 Information&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ok, problem number two -- and this is the most subtle problem, this is the thing that annoys me the most about statically typed programming languages -- is they are terrible at information. So let's look at what information is. Inherently, information is sparse. It's what you know, it's what happened in the world. Does the world fill out forms and fill everything out for you? All the things you'd like to know? No! It doesn't. It doesn't and not ever is probably more correct.&lt;/p&gt;
&lt;p&gt;The other thing is, &quot;what can you know?&quot;. What are you allowed to know? There's no good answers to that. Whatever you want, right? It's open, right? What else is there? What IS there to know? Well I mean, what time is it, right? Cuz every second that goes by, there's more stuff to know, more things happen, more facts, more things happen in the universe. So information accretes, it just keeps accumulating. What else do we know about information? We don't really have a good way of grappling with it, except by using names, right? When we deal with information as people, names are super-important, right? If I just say, &quot;47&quot;, now there's no communication going on. We have to connect it. And then the other big thing, and this is the thing I struggle with so often, right? I have a system, I made a class or a type about some piece of data, then over here I know a little bit more data than that, do I make another thing that's like that if I have derivation, do I derive to make that other thing? What if I'm now in another context and I know part of one thing and part of another thing, what's the type of part of this and part of that. And then, you know, there's this explosion. Of course these languages are doing this wrong, they don't have composable information constructs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.39.44.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.39.44.png&quot; alt=&quot;00.39.44 The Information Programming Problem&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So what is the problem with programming in a way that's compatible with information. It's that we elevate the containership of information to become the semantic driver. Okay, we say, &quot;this is a person, and a person has a name, and a person has an email, and a person has a social security number&quot;, and there's no semantics for those three things except in the context of the person class or type, whatever it is. And often, depending on the programming language, the names are either not there, right? If you got these product types where it's like, person is string x, string x, int x, string x, string x, int x, float x, float, product type. Like, a (?) complete callous disregard for people, names, human thinking, it's crazy. Or your programming language may be has names, but they compile away, right? They're not first class, you can't use them as arguments, you can't use them as look-up vectors, right? You can't use them as functions themselves, right? There's no compositional algebra in programming languages, for information. So we're taking these constructs, I think were there for other purposes, we have to use them because it's all we're given, and it's what's idiomatic, right? Take out a class, take out, you know, a type and do this thing. But the most important thing is that the aggregates determine the semantics, which is dead wrong, right? If you fill out a form, nothing about the information you put on that form is semantically dominated by the form you happen to fill out. It's a collecting device, it's not a semantic device, but it becomes so. And what happens is you get these giant sets of concretions around information. You know, people that write, you know, Java libraries, you look at the Java Framework it's cool, it's relatively small and everything's about sort of mechanical things. Java's good at mechanical things, well mechanisms. But then you hand the same language to the poor application programmers who are trying to do this information situated program problem, and that's all they've got. And they take out a class for like everything they need, every piece, every small set of information they have, right? How many people have ever seen a Java library with over 1500 classes? Yeah, everybody. And this is my experience. In (?) my experience, it doesn't matter what language you're using. If you have these types, and you're dealing with information, you're going to have a proliferation of non-composable types, that each are a little parochialism around some tiny piece of data that doesn't compose. And I'm really not happy with this, you know...in programming literature, the word &quot;abstraction&quot; is used in two ways. One way is just like, &quot;naming something is abstracting&quot;, I disagree with that. Abstracting really should be drawing from a set of exemplars some essential thing, right? Not just naming something. And what I think is actually happening here is we're getting not data abstractions, you're getting data concretions, right? Relational algebra, that's a data abstraction. Datalog is a data abstraction. RDF is a data abstraction. Your person class, your product class, those are not data abstractions. They're concretions.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.43.24.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.43.24.png&quot; alt=&quot;00.43.24 Clojure and Information&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, you know, we know in practice, Clojure says, &quot;just use maps&quot;. What this meant actually was, &quot;Clojure didn't give you anything else&quot;, right? There was nothing else to use. There were no classes, there weren't (?) the thing to say deftype, there weren't types, there wasn't algebraic data types or anything like that. There were these maps, and there was a huge library of functions to support them, there was syntactic support for it. So working with these associative data structures was tangible, well-supported, functional, high-performance activity. And they're generic. What do we do in Clojure if we have just some of the information here and just some of the information there (?) we need both those things over there? We say, &quot;what's the problem?&quot;. There's no problem. I take some information, some information and merge them, I hand it along. If I need a subset of that, I take a subset of that. I call keys, and you know, select-keys and I get a subset. I can combine anything that I like, there's an algebra associated with associative data. The names are first-class, right? Keywords and symbols are functions, they're functions of associative containers, they know how to look themselves up. And they're reified so you can tangibly flow them around your program and say, &quot;pick out these three things&quot; without writing a program that knows how to write Java or Haskell pattern matching to find those three things. They're independent of the program language, right? They're just arguments. They're just pieces of data. But they have this, they have this capability.&lt;/p&gt;
&lt;p&gt;And the other thing which I think is a potential of (?) Clojure -- it's realized to varying degrees, but the raw materials for doing this are there -- is that we can associate the semantics with the attributes and not with the aggregates, right? Because we have fully qualified symbols and keywords. And obviously spec is all about that.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.45.23.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.45.23.png&quot; alt=&quot;00.45.23 Brittleness/coupling&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alright, brittleness and coupling, this is another thing that's just my personal experience that (?) static type systems yield much more heavily coupled systems. And that a big part of that time aspect of the final diagram of what problem we're trying to solve, is dominated by coupling when you're trying to do maintenance, right? Flowing type information is a major source of coupling in programs. Having a de-, you know, pattern matching of a structural representation in a hundred places in your program is coupling, right? Like, this stuff I'm siezing up when I see that the sensibilities you get after 20 years of programming, you hate coupling. It's like the worst thing and you smell it coming and you want no part of it. And this is a big problem.&lt;/p&gt;
&lt;p&gt;The other thing I think is more subtle, but I put it here because unless you see this, is positional semantics don't scale. What's an example of positional semantics? Argument lists, right? Most languages have them (?), and Clojure has some too, right? Who wants to call a function with 17 arguments? Nope.&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;There's one in every room.&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;Nobody does, we all know it breaks down. Where's it break down? Five, six, seven? At some point, we're no longer happy. But if that's all you have, right, if you only have product types, they're going to break down every time you hit that limit, right? How many people like going to the doctor's office and filling out the forms, right? Don't you hate it? You get this big lined sheet of paper that's blank, then you get this set of rules, that says, &quot;put your social security on line 42, and your name on line 17&quot;, that's how it works, right? That's how the world works, that's how we talk to other people? No! It doesn't scale. It's not what we do. We always put the labels right next to the stuff and the labels matter, but with positional semantics we're saying, &quot;no, they don't matter (?) just (?) remember the third mean this and the seventh thing means that&quot;.&lt;/p&gt;
&lt;p&gt;And types don't help you, right? They don't really distinguish this, float x, float x, float x, float x, float...at a certain point it's not telling you anything. So they (?) don't scale but they...it occurs in other places, so we have argument lists, we have product types, where else? Parameterization, right? Who's seen the generic type with more than 7 type arguments? Or see (?) it (?) in C++ or Java, yeah, we tend not to see it in Java because people give up on parameterization, right?&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;And what do they switch to? Spring!&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;No, I mean, that's not a joke, it's just a fact, right? They switched to a more dynamic system for injection, right? Because parameterization doesn't scale and (?) one of the reasons why it doesn't scale is there are no labels on these parameters. They may get names by convention, but they're not properly named (?). When you want to reuse the type with parameters, you get to give them names&lt;/p&gt;
&lt;p&gt;[audio cut off]&lt;/p&gt;
&lt;p&gt;(?) again. Just like in pattern matching. That's terrible. That's a terrible idea. And it does not scale. So anywhere parameters, anywhere positionality is the only thing you've got, you're eventually goning to run out of steam. You're going to run out of the ability to talk to people or they're going to run out of the ability to understand what you're doing. So I think types are an anti-pattern for program maintenance and for extensibility. And because they introduce this coupling and it makes programs harder to maintain and even harder to undersand in the first place.&lt;/p&gt;
&lt;p&gt;So Clojure is dynamically typed. You do not have this burden of proof. You don't have to prove that, you know, because I made something here and somebody cares about it over there, every person in the middle didn't mess with it. You know, mostly they don't mess with it. I don't know what we're protecting against, but we can prove now that, you know, they're still strings over there.&lt;/p&gt;
&lt;p&gt;The constructs are open, right? We much prefer runtime polymorphism either by multi-methods or protocols to switch statements, pattern matching, and things like that.&lt;/p&gt;
&lt;p&gt;The maps are open. They're need-to-know. What do we do in Clojure if we don't know something? We just leave it out. We don't know it. There's no MayBe this MayBe that. If you actually parameterized the information system, it would be MayBe everything. MayBe everything no longer is meaningful, it just isn't. And nothing is of type MayBe something, right? If your social security number is a string, it's a string. You either know it or you don't. Jamming those two things together, it makes no sense. It's not the type of the thing. It may be part of your front-door protocol, that you may need it or not, but (?) it's not the type of the thing. So the maps are open. We deal with them on a need-to-know basis and you get into the habit of propagating the rest. May be you handed me more stuff, should I care? No. The UPS truck comes and my TV is on the truck, do I care what else is on the truck? No. I don't want to know. But it's ok that there's other stuff.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.50.54.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.50.54.png&quot; alt=&quot;00.50.54 Language Model Complexity&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So the other problem is, you know, language model complexity. You know C++ is a very complex language and so is Haskell and so is Java and so is, well, most of them. Clojure is very small. It's not quite Scheme-small but it's small compared to the others. And it's just, you know, the basic lambda calculus kind of thing with, you know, immutable functional core. There are functions, there are values, you can call functions on values and get other values. That's it. There's no hierarchy, there's no parameterization, there's no, you know, existential types, blah blah blah blah blah.&lt;/p&gt;
&lt;p&gt;And the execution model is another tricky thing, right? We're getting to the point even in Java where it gets harder and harder to reason about the performance of our programs, right? Because of resources. And that's unfortunate, you know, at least one of the nice things about C was, you know, you knew if your program crashed if was your problem and you just figure it out but you knew what it was going to take up in RAM and you could calculate things and it was quite tractable. And that matters to programmers, right? Programming is not mathematics. In mathematics you can swap any isomorphism for any other, in programming you get fired for doing that, right?&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;It's different. Performance matters, it's part of programming, it's a big deal. So making this something at least I could say, &quot;it's like Java&quot;, and blame them.&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;Well (?) it's fine. But it also meant all the tooling helped us, right? All the, you know, all the Java tooling works for Clojure. I mean how many people use YourKit and profilers like that on Clojure? That's pretty awesome to be able to do that.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.52.43.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.52.43.png&quot; alt=&quot;00.52.43 Parochialism - names&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alright, now we're into the real nitty gritty of things I didn't like and therefore I left out. This type thing, it goes everywhere and the name I came up for it is &quot;parochialism&quot;, right? This idea that &quot;I have this language, and, you know, it's got this cool idea about how you should think about things, you should think about things using algebraic data types or you should think about things using inheritance&quot;. It yields this intense parochialism, right? You start to have representations of things, manifestations of representations of information that they only make sense in the context of this language's rules for things and they don't combine with anybody else's ideas, right? You smash against the database. You smash against the wire. You smash against this other programming language, because you've got this idiosyncratic, local view of how to think about things. RDF did this right. And they did it because they had this objective, right? They're trying to accomplish something. We want to be able to merge data from different sources, we don't want the schemas to dominate the semantics, right? How many people have ever gotten the same piece of mail from the same company and been like, &quot;what is wrong with your databases, dudes?&quot;, right? Yeah. What is wrong? What's wrong is, one company bought another company, right? Now they're the same company, they now have these two databases. In one database, your name is in the person thing and in another database your name is in the person table and in another database your name is in the mailing list table, right? Who knows that mailing list table name and person name are actually the same piece of information? Nobody. They have to have meetings, I mean this is a big dollar, this is a big ticket problem. It's not a small...it's not a laughing matter, right?&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;Right? These big companies have giant jobs trying to merge these systems because, because table parochiality, it's the same as classes and algebraic data types. It's the same problem, it's not a different problem. It's all like, I had this view of the world and on the day I decided how the world is I decided that names were parts of person, and you decided that names were parts of mailing lists. And now we need to fix this. And you know how a lot of those companies fix it? They introduce a third database, usually an RDF database as a federation point so they now can figure out these two things are the same. And eventually they will stop sending you two pieces of mail...the same piece of mail twice.&lt;/p&gt;
&lt;p&gt;Right, so this is subject, predicate, object and obviously you can see the influence of this on Datomic.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.55.30.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.55.30.png&quot; alt=&quot;00.55.30 Parochialism - types and contexts&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Right, but it goes further, right? I would say that the more elaborate your type system is, the more parochial your types are, right? The less general they are, the less transportable they are, the less understandable by other systems they are, the less reusable they are, the less flexible they are, the less amenable to putting over wires that they are, the less subject to generic manipulation that they are, right? Almost every other language that deals with types encourage this tyranny of the container I talked about before. We have a choice in Clojure, I think people go either way, right? There's two things, one is the container dominates, the other is just sort of the notion of context dominating the meaning, like, because I called it this in this context, it means that. But we have the recipe in Clojure for doing better than that, in (?) which you use namespace-qualified keys. With namespace-qualified keys we now can merge data and know what things mean regardless of the context in which they're used.&lt;/p&gt;
&lt;p&gt;And anything about this thwarts the composition I talked about before.&lt;/p&gt;
&lt;p&gt;And in particular because we're pointed at this program-mainpulating-program idea, as you'll see later, it makes this harder.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.56.41.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.56.41.png&quot; alt=&quot;00.56.41 Clojure Names&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So Clojure has names that are (?) first-class. This is, you know, stuff that was in Lisp. It just dominates more because they became the accesses (?) for the associative data type. They are functions in and of themselves. Keywords being functions is sort of the big deal.&lt;/p&gt;
&lt;p&gt;They don't disappear, they're not compiled away into offsets, we can pass them around. We can write them down. A user who doesn't know Clojure can actually type one into a text file and save it, and do something meaningful with a (?) program without learning Clojure.&lt;/p&gt;
&lt;p&gt;We have this namespace qualification. If you follow the conventions, which unfortunately a lot of Clojure libraries are not yet doing, of this reversed domain name system, which is the same as Java's, all Clojure names are conflict-free not only with other Clojure names, but with Java names. That's a fantastically good idea, and it's similar to the idea in RDF of using URIs for names.&lt;/p&gt;
&lt;p&gt;And the aliases help to (?) make this less burdensome.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.57.45.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.57.45.png&quot; alt=&quot;00.57.45 Distribution&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And we've (?) done some more recently to (?) do more with that.&lt;/p&gt;
&lt;p&gt;Then there's this distribution problem. And here's where I start saying, &quot;taking a language-specific view of program design is a terrible mistake&quot;, because you're in that little box. You're ignoring this big picture. As soon as you step back, now you have this problem, you have to talk over wires. How many people use, you know, remote object technology? I'm really sorry.&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;Cuz it's brutal, right? It's very brutal. It's incredbilty brittle and fragile and complex and error-prone and specific. How many people use that kind of technology to talk to people not under their own employ? No, it doesn't work. That's not how the Internet works, right? Distributed objects failed, right? The Internet is about sending plain data over wires. And almost everything that ever dealt with wires only succeeded when it moved to this. And this is very successful. Why should we program in a way that's all super-parochial if we only need to eventually represent some subset of a portion of some subset of a program, may be a subset we didn't know in advance, over wires, right? If we program this way all the time, we program the inside of our programs as &quot;let's pass around data structures&quot;, and then somebody says, &quot;oh, I wish I could put half of your program across a wire, or replicated over six machines&quot;, what do we say in Clojure? That's great, I'll start shipping some edn across a socket and we're done. As opposed to, you gotta do everything over.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/00.59.22.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/00.59.22.png&quot; alt=&quot;00.59.22 Runtime tangibility&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So there were plenty of inspirations and examples for me of (?) this runtime tangibility is one of the things I really got excited about when I learned Common Lisp coming from C++. Smalltalk and Common Lisp are languages that were obviously written by people who were trying to write programs for people. These are not language theoreticians. You can tell, they were writing, they were writing GUIs, they were writing databases, they were writing logic programs and languages also. But there's a system sensibility that goes through Smalltalk and Common Lisp that's undeniable. And when you first discover them, especially if you discover them late as I did, it's stunning to see. And I think it's a tradition that's largely been lost in academia. I just don't see the same people making systems AND languages, you know, together. They've (?) sort of split apart and that's really a shame, because there's so much still left to pilfer from these, these languages. They were highly tangible, right? They had reified environments, all the names you could see, you could go back and find the code, the namespaces were tangible, you could load code at runtime. I mean, one thing after another after another, right? And the old Perlis, you know, quip about, you know, &quot;any sufficiently large C or C++ program, you know, has a poorly implemented Common Lisp&quot;, is so true. Again, Spring, right? You eventually...as you get a larger system that you want to maintain over time and deal with all those complexities of, you know, that I showed before, you want dynamism, you have to have it, it's not like an optional thing. It's, it's necessary. But was particularly interesting for me in implementing Clojure was how much runtime tangibility and situated sensibilities were in the JVM design. The JVM is actually a very dynamic thing. It's not just Java looks like say, C# or C++, the JVM, you know, it was written with an idea of &quot;well we're going to embed these programs on set top boxes and network them and need to send code around (?) you could update their capabilities&quot;, that's like, it's situated everywhere you turn. And the runtime has got a ton of excellent support for that. Which makes it a great platform for languages like Clojure. And thank goodness, you know, that the work that the people did on Self, and it didn't die, that it actually got carried through here. Not everything did. But it's quite important and it will be a sad day when, you know, somebody says, &quot;well let's just replace the JVM with, you know, some static compilation technology&quot;. And I'll tell you, targeting the JVM and the CLR, it's plain, the CLR is static thinking and the JVM is dynamic thinking.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/01.02.26.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/01.02.26.png&quot; alt=&quot;01.02.26 Concurrency&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So there's situated sensibilities in all of these.&lt;/p&gt;
&lt;p&gt;The last problem on my initial slide was concurrency, and I think mostly concurrency gets solved by being functional and immutable by default.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/01.02.36.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/01.02.36.png&quot; alt=&quot;01.02.36 Epochal time model&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The other thing you need, is you need some way to, some language for dealing with state transitions. And that's the epochal time model. I'm obviously not going to get into this again here, but I've given talks about this before. So Clojure has this. And it was a combination of those things that let me say, &quot;I think I have a reasonable answer for my friend&quot;. If he says, &quot;how can I write a real program with this?&quot;, I can say, &quot;here's how you can write a real program, including a multi-threaded program and not go crazy&quot;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/01.03.04.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/01.03.04.png&quot; alt=&quot;01.03.04 Lisp - the good parts&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So there's lots of stuff I've wanted to (?) take from Lisp, and I think I talked about a lot of these. It's dynamic, it's small, it had first-class names, it's very tangible, there's this code is data, and read/print, and I'm going to talk a little bit more about that.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/01.03.15.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/01.03.15.png&quot; alt=&quot;01.03.15 R.E.P.L.&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But there's the REPL. And I think that still people are like, &quot;the REPL's cool cuz I get to try things&quot;, and that's true but the REPL is much cooler than that. It's cooler than that because it's an acronym and it's cooler than that because read is its own thing. And what Clojure did by adding a richer set of data structures, is it made read/print into a super power. It wasn't just a convenience, it isn't just a way to interact with people, it isn't just a way to make it easy to stream programs around or program fragments around. It's now like, &quot;here's your free wire protocol&quot;, for real stuff. How many people ever sent edn over wire? Yeah. How many people like the fact that like they don't need to think that's a possibility, they can just do it? And, you know, if you want to switch to something else you can. But it's a huge deal.&lt;/p&gt;
&lt;p&gt;Eval obviously we know, it lets us go from data to code and that's the source of macros, but I think again, it's much bigger than the application to macros.&lt;/p&gt;
&lt;p&gt;And finally there's print which is just the other direction.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/01.04.25.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/01.04.25.png&quot; alt=&quot;01.04.25 Lisp - Needs Fixing&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But Lisp had a bunch of things that needed to be fixed in my opinion. It was built on concretions, you know, a lot of the design of more abstractions and CLOS and stuff like that came after the underpinnings. The underpinnings didn't take advantage of them so if you want polymorphism at the bottom, you have to retrofit it. If you want immutability at the core, you just need to, you need something different to, you know, from the ground up. And that's why Clojure was worth doing as opposed to trying to do Clojure as a library for Common Lisp. The Lisps were functional kind of, mostly by convention. But the other data structures were not, you had to switch gears to go from, you know, assoc with lists to, you know, a proper hash table. And lists are crappy data structures, sorry, they just are. They're very weak, and there's no reason to use them as a fundamental primitive for programming. Also packages and interning were very complex there.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/01.05.22.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/01.05.22.png&quot; alt=&quot;01.05.22 Power - Strong Host Support&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The other part about Clojure that is important is leverage.&lt;/p&gt;
&lt;p&gt;Oh I'm running out of time. I'm not going to talk about that.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/01.05.30.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/01.05.30.png&quot; alt=&quot;01.05.30 Large functional library built on abstractions&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Or that.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/01.05.31.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/01.05.31.png&quot; alt=&quot;01.05.31 The edn Data Model (Transit too)&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So the edn data model is not like a small part of Clojure, it's sort of the heart of Clojure, right? It's the answer to many of these problems. It's tangible, it works over wires, it's not incompatible with the rest of the world. Do other languages have maps? Associative data structures and vectors and strings and numbers? So it seems like a happy, you know, lingua franca. And why shouldn't we use the lingua franca in a program? Why should we have, you know, a different, a different language. It's actually not that much better and you have to keep translating.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/01.06.04.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/01.06.04.png&quot; alt=&quot;01.06.04 Static Types &quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alright. Here's the final thing.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/01.06.08.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/01.06.08.png&quot; alt=&quot;01.06.08 The Joy of Types (SPJ)&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Simon Peyton Jones, in an excellent series of talks, listed these advantages of types. Cuz this is the big thing that's left out of Clojure, there's no types. They guarantee the absence of certain types of errors, which is true. And he would say, he does say, &quot;this is the least benefit&quot; of static typing. They serve as a partial machine-checked specification and &quot;partial&quot; is the operative word here. It's very partial. They're a design language, right? They help you think, you have a framework in which you can think about your problems. They support interactive development like IntelliSense. But the biggest merit is in software maintenance.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/01.06.47.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/01.06.47.png&quot; alt=&quot;01.06.47 But...&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And I really disagree just a lot of this. It's not been my experience. The biggest errors are not caught by these type systems. You need extensive testing to do real-world effectiveness checking. Names dominate semantics, a to a, list of a to list of a, it means nothing, it tells you nothing. If you take away the word &quot;reverse&quot;, you don't know anything, you really don't. And to elevate this to say, &quot;oh this is important thing, we have all these properties&quot;, it's not true, it just isn't true. There are thousands of functions that take a list of a and return a list of a. What does that mean? It means nothing. And checking it...I mean, if you only had a list of a-s, where you gonna get something else to return? I mean, obviously you're going to return a list of a-s, unless you're, you know, getting stuff from somewhere else, and if you're functional, you're not. How many people like UML? How many people have ever used a UML diagramming tool? Right? It's not fun, right? It's like, &quot;no, you can't connect that to that&quot;, &quot;oh no, you have to use that kind of arrow&quot;, &quot;no, you can't do this&quot;, &quot;no, you can't...&quot;, it's terrible. OmniGraffle is much better, draw whatever you want. What are you thinking about? Draw that. What's important? Write that down. That's how it should work, right? Yes, IntelliSense is much helped by static types and performance optimization, which he didn't list, but I think is one of the biggest benefits. We loved that in C++. And maintenance, I think it's not true. I think that they've created problems that they now use types to solve. Oh, I pattern-matched this thing 500 places and I want to add another thing in the middle. Well thank goodness I have types to find those 500 places. But the fact was that thing I added, nobody should have cared about except the new code that consumed it and if I did that a different way I wouldn't have had to change anything except the producer and the consumer, not everybody else who couldn't possibly know about it, right? It's new.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/01.08.47.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/01.08.47.png&quot; alt=&quot;01.08.47 Puzzles vs Problems&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So I mean for young programmers, if everybody's tired and old, this doesn't matter any more. But when I was young, when I was young, I really, you know, when you're young you've got lots of free space. I used to say &quot;an empty head&quot;, but that's not right. You've got a lot of free space available and you can fill it with whatever you like. And these type systems they're quite fun, because from an endorphin standpoint solving puzzles and solving problems is the same, it gives you the same rush. Puzzle solving is really cool.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/01.09.26.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/01.09.26.png&quot; alt=&quot;01.09.26 Spec&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But that's not what it should be about.&lt;/p&gt;
&lt;p&gt;I think that this kind of verification what-not, it's incredibly important, but it should be à la carte, right? Depending on what you need to, depending on the amount of money you have to spend, depending on what you want to express, you should be able to pull different kinds of verification technology off the shelf, and apply it. It should not be built in, right? There's a diversity of needs, there's a diversity of approaches of doing it, and a diversity of costs. In addition, I think to the extent these tools can be pointed at the system level problem and not some language parochialism, you get more bang for your buck, right? How many people have used spec to spec a wire protocol? Yeah. There's going to be a lot more of that going on. And I won't talk much more about spec, but the next version will increase programmability.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/01.10.12.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/01.10.12.png&quot; alt=&quot;01.10.12 Information vs Logic&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So finally, Information vs Logic. The bottom line is, &quot;where are we going in programming?&quot;, right? The fact is, we actually don't know how to drive a car. We can't explain how to drive a car. We can't explain how to play Go. We can't...and then, therefore we can't apply traditional logic to encoding that and make a program that successfully does it. We just can't do it. We're approaching problems in programming now that we don't know how to do. We don't know how to explain how to do. Like, we know how to drive a car, but we don't know how to explain how to drive a car. And so we're moving to these information-trained brains, right? Deep learning and machine learning, statistical models and things like that. You use information to drive a model that's full of imprecision and speculation but that is still effective because of the amount of data that was used to train it at making decent decisions, even though it also couldn't explain necessarily how it works. These programs though are going to need arms and legs and eyes, right? When you train a big deep learning network, does it get its own data? Does it do its own ETL? No. Right? It doesn't do any of that. When it's made a decision about what to do, how's it going to do it? Well, when we get to Skynet, it won't be our problem anymore.&lt;/p&gt;
&lt;p&gt;[audience laughter]&lt;/p&gt;
&lt;p&gt;But for right now, it is. And I think it's quite critical to be working in a programming language that is itself programmable. That's amenable to manipulation by other programs, right? It'll be fun to use Clojure to write, you know, to do brain building. But it'll also be useful to be able to use Clojure for information manipulation and preparation as well as use Clojure programs and program components as the targets of action of these decision-making things. In the end real-world safety is going to come from experience, it's not going to come from proof. Anybody who gets on stage and makes some statement about type systems yielding safe systems where &quot;safe&quot; mean real-world? That is not true.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/01.12.29.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/01.12.29.png&quot; alt=&quot;01.12.29 The Problem Tackled by Deep Learning&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, this is what's really interesting. Deep learning and technologies like that are pointed above the line, above that top 10x, they're pointed at the misconception problem. They say, &quot;you know what? you're right, we don't know how to play go, we do not know how to drive a car, let's make a system that could figure out how, and learn it, because otherwise we're just gonna get it wrong&quot;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/01.12.56.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/01.12.56.png&quot; alt=&quot;01.12.56 Programmable Programs&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, I'm going to emphasize that we write programmable programs and that Clojure is well-suited to that. We have a generic way to represent information and emphasis. We have a generic way to compose arguments without adopting the (?) type system, right? It's hard enough to drive a car, if you have to understand monads too, you're, you know, it's just not going to work. A reified system is subject to dynamic discovery, and I think spec combined with the rest of Clojure being reified is a great way to make systems that other systems can learn about and therefore learn to use. And of course we have the same ability to enhance our programs over time.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/01.13.38.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/01.13.38.png&quot; alt=&quot;01.13.38 Be Effective!&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, I would encourage you all to embrace the fact that Clojure is different. Don't be cowed by the proof people, right? It is, it's not a, programming is not a solved problem, ok? Logic should be your tool, it shouldn't be your master, you shouldn't be underneath your logic system when it works out for you. I'm encouraging you to design at the system level, right? It's not all about your programming language. We all get infatuated with our programming languages. But you know what, I'm actually skeptical about programming languages being the key to programming. I don't think they are, they're a small part of programming. They're not, you know, the driver of programming. And embrace these new opportunities. There's going to be a bunch of talks during the conference about Deep Learning and take advantage of them. Make programmable programs and&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms/01.14.34.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/matthiasn/talk-transcripts/raw/master/Hickey_Rich/EffectivePrograms/01.14.34.png&quot; alt=&quot;01.14.34 fin&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;solve puzzles, problems, not puzzles. Thank you.&lt;/p&gt;
&lt;p&gt;[audience applause]&lt;/p&gt;
</description>
<pubDate>Tue, 31 Oct 2017 13:31:43 +0000</pubDate>
<dc:creator>kimi</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/1390808?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>matthiasn/talk-transcripts</og:title>
<og:url>https://github.com/matthiasn/talk-transcripts</og:url>
<og:description>talk-transcripts - Transcripts of Clojure-related talks</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/EffectivePrograms.md</dc:identifier>
</item>
<item>
<title>Bottery – A conversational agent prototyping platform</title>
<link>https://github.com/google/bottery</link>
<guid isPermaLink="true" >https://github.com/google/bottery</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;h2&gt;A conversational agent prototyping platform by &lt;a href=&quot;https://github.com/galaxykate&quot;&gt;Kate Compton&lt;/a&gt;.&lt;/h2&gt;
&lt;p&gt;(This is not an official Google product.)&lt;/p&gt;
&lt;h2&gt;What is this?&lt;/h2&gt;
&lt;p&gt;Bottery is a syntax, editor, and simulator for prototyping &lt;strong&gt;generative contextual conversations&lt;/strong&gt; modeled as &lt;strong&gt;finite state machines&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Bottery takes inspiration from the &lt;strong&gt;&lt;a href=&quot;http://tracery.io/&quot;&gt;Tracery&lt;/a&gt;&lt;/strong&gt; open-source project for generative text (also by katecompton@ in a non-google capacity) and the &lt;a href=&quot;https://cheapbotsdonequick.com/&quot;&gt;Cheap Bots, Done Quick!&lt;/a&gt; bot-hosting platform, as well as open FSM-based storytelling tools like Twine.&lt;/p&gt;
&lt;p&gt;Like Tracery, Bottery is a &lt;em&gt;syntax&lt;/em&gt; that specifies the script of a conversation (a &lt;em&gt;map&lt;/em&gt;) with JSON. Like Cheap Bots, Done Quick!, the BotteryStudio can take that JSON and run a simulation of that conversation in a nice JavaScript front-end, with helpful visualizations and editing ability.&lt;/p&gt;
&lt;p&gt;The goal of Bottery is to help &lt;em&gt;everyone&lt;/em&gt;, from designers to writers to coders, be able to write simple and engaging contextual conversational agents, and to test them out in a realistic interactive simulation, mimicking how they'd work on a &quot;real&quot; platform like DialogFlow.&lt;/p&gt;
&lt;h2&gt;Bottery concepts&lt;/h2&gt;
&lt;p&gt;Users in Tracery write &lt;strong&gt;grammars&lt;/strong&gt;, JSON objects that recursively define how to generate some text, like &lt;a href=&quot;https://cheapbotsdonequick.com/source/losttesla&quot;&gt;the musings of a lost self-driving car&lt;/a&gt; or &lt;a href=&quot;https://cheapbotsdonequick.com/source/tinyadv&quot;&gt;outer-space adventures&lt;/a&gt;. Tracery grammars are lists of symbol names (like &quot;animal&quot;) and their expansion rules (like &quot;emu, okapi, pangolin&quot;).&lt;/p&gt;
&lt;p&gt;In Bottery, users write &lt;strong&gt;maps&lt;/strong&gt;. Each map is composed of four sub-components&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A set of &lt;strong&gt;states&lt;/strong&gt;, with information about what to do on entering them, and how to get from one to another&lt;/li&gt;
&lt;li&gt;A set of initial &lt;strong&gt;blackboard&lt;/strong&gt; values&lt;/li&gt;
&lt;li&gt;An optional Tracery &lt;strong&gt;grammar&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Blackboard (and the pointer)&lt;/h3&gt;
&lt;p&gt;You can imagine a Bottery map like a finite state machine or a &lt;a href=&quot;https://www.google.com/url?sa=i&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=images&amp;amp;cd=&amp;amp;ved=0ahUKEwibnLuC-JDSAhVRyWMKHZQNB3cQjRwIBw&amp;amp;url=https%3A%2F%2Fwww.pinterest.com%2Fpin%2F361273201334614541%2F&amp;amp;psig=AFQjCNGOTBu2PiFkWuV4zs2eeF-mL0PP-Q&amp;amp;ust=1487208084344985&quot;&gt;boardgame board&lt;/a&gt;: there are spaces, and connections between the spaces, and rules for how to move between them. The map itself doesn't change or store information during play. Instead, you have a &lt;strong&gt;pointer&lt;/strong&gt; showing which state you are on, all the variables in the blackboard (like the number of kids in your Game of Life car).&lt;/p&gt;
&lt;p&gt;An RPG map might use the blackboard to store the number of hit points for the main character, their current weapon and its stats, their gold, and quest progress. A quiz bot might store all of its categories, questions and answers, the players' current points, and which questions it wants to ask next. You can store strings, booleans, numbers, hierarchical objects, and arrays in the blackboard. Storing and retrieving information is done with a JavaScript-like syntax: &lt;code&gt;foo.bar[5]&lt;/code&gt; gets the value at the 5th index of object &lt;code&gt;bar&lt;/code&gt; in object &lt;code&gt;foo&lt;/code&gt;. &lt;code&gt;foo.baz[10][20] = 10&lt;/code&gt; behaves similarly, though unlike JavaScript, if these parameters don't exist, it will create new objects or arrays and fill them rather than throwing an error. See &lt;code&gt;parseMapPath&lt;/code&gt; in &lt;code&gt;map.js&lt;/code&gt; for details.&lt;/p&gt;
&lt;p&gt;Variables in the blackboard can be accessed from within Tracery with the syntax &lt;code&gt;You have guessed #/guessCount# times.&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;States&lt;/h3&gt;
&lt;p&gt;Each state is a node in the Bottery map. A state has&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;An &lt;strong&gt;id&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;A list of &lt;strong&gt;actions&lt;/strong&gt; to be taken when the state is entered&lt;/li&gt;
&lt;li&gt;A dictionary of &lt;strong&gt;exits&lt;/strong&gt; to other states.&lt;/li&gt;
&lt;li&gt;Optionally, a list of &lt;strong&gt;suggestion chips&lt;/strong&gt; (using tracery syntax) of suggested user inputs. This is commonly used in text based bots.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There are several ways to express the actions that are taken when the state is entered, depending on the desired behavior. The following are currently defined:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;onEnter&lt;/code&gt;: This takes a string of actions defined in the action syntax (see below). For example: &lt;code&gt;“‘hello’ greeting++”&lt;/code&gt;. these are space delineated commands, and the extra quotation marks around the phrase are necessary&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onEnterDoOne&lt;/code&gt; Takes an array of strings in format &lt;code&gt;&quot;[condition] [action]&quot;&lt;/code&gt;. The first condition that evaluates to true has its action executed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onEnterSay&lt;/code&gt; Takes a singe string and outputs it. The string can use tracery expansion syntax.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onEnterPlay&lt;/code&gt; Plays the audio file specified.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onEnterFxn&lt;/code&gt; Executes the given function (but must be defined in &lt;code&gt;map.js&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;All bots must have an &lt;code&gt;origin&lt;/code&gt; state, which is the first state entered when the bot starts.&lt;/p&gt;
&lt;h3&gt;Exits&lt;/h3&gt;
&lt;p&gt;Exits are described by strings in the format: &lt;code&gt;[conditions] -&amp;gt;TARGET_NAME [actions to take when taken]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Syntax for actions and conditions are described below.&lt;/p&gt;
&lt;p&gt;If all the conditions are true then the exit becomes active. If there are &lt;em&gt;no&lt;/em&gt; conditions, the exit is always active.&lt;/p&gt;
&lt;p&gt;Then there is an arrow (&lt;code&gt;-&amp;gt;&lt;/code&gt;) and a target. The target is either an &lt;strong&gt;id of a state&lt;/strong&gt; or an at sign &lt;code&gt;@&lt;/code&gt; that indicates the pointer should re-enter the current state.&lt;/p&gt;
&lt;p&gt;The list of actions is in &lt;strong&gt;action syntax&lt;/strong&gt; (see below).&lt;/p&gt;
&lt;h3&gt;Condition&lt;/h3&gt;
&lt;p&gt;Conditions fall under the following categories:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Inputs: User input matching a string. E.g., &lt;code&gt;&quot;one&quot;&lt;/code&gt; or &lt;code&gt;&quot;two&quot;&lt;/code&gt;. The presence of quotes indicates a string that must be matched by the last user input. An asterisk &lt;code&gt;*&lt;/code&gt; matches &lt;em&gt;any&lt;/em&gt; user input.&lt;/li&gt;
&lt;li&gt;Expressions: Mathematical syntax representing equality, inequality, and so on. Most basic math expressions are valid e.g. &lt;code&gt;count&amp;gt;4&lt;/code&gt;. Expressions can use variables that exist in the blackboard, using the blackboard variable syntax (see above).&lt;/li&gt;
&lt;li&gt;Values: There is only one type of these at present, &lt;code&gt;wait:[time in seconds to wait]&lt;/code&gt;. This evaluates to true after that much time has elapsed after entering the current state.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Actions&lt;/h3&gt;
&lt;p&gt;Action syntax is similar to condition syntax:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Assignment: Sets a variable in the blackboard. If the variable does not exist it is created. E.g. &lt;code&gt;partyMember[1].weapon=&quot;sword&quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Output: Raw text with quotes is outputted using selected output method. ‘&quot;hello&quot;’. This uses tracery expansion syntax, so &lt;code&gt;&quot;hello #/playerName#&quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Play sound: &lt;code&gt;playSound([sound name])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Incrementation: Increments or decrements a variable in the blackboard. E.g.:&lt;code&gt;[varName]++&lt;/code&gt; or &lt;code&gt;[varName]--&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;How the pointer decides how to move&lt;/h3&gt;
&lt;p&gt;When the pointer enters a state, the following things happen:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Any &lt;code&gt;onEnter&lt;/code&gt; actions are executed.&lt;/li&gt;
&lt;li&gt;Any &lt;strong&gt;suggestion chips&lt;/strong&gt; are created and displayed to the user.&lt;/li&gt;
&lt;li&gt;All available exits (including the exits specified in the state, as well as global exits) are collected.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The pointer then waits for state change. At the moment, state change includes user input, and the passage of time. If no &lt;code&gt;wait&lt;/code&gt; conditions are present, then the bot will wait for user input forever. When that state change occurs, the pointer will re-evaluate all the conditions on the currently available exits. If all the conditions on an exit evaluate to true, then that exit becomes active.&lt;/p&gt;
&lt;p&gt;It is often the case that multiple exits are active at the same time. For example: &lt;code&gt;&quot;yes&quot; -&amp;gt;startGame&lt;/code&gt; &lt;code&gt;* -&amp;gt;askForClarification&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the user types &quot;yes&quot;, both exits are active. The first exit in in the list of active exits is selected. In this case &lt;code&gt;&quot;yes&quot; -&amp;gt;startGame&lt;/code&gt; will be chosen.&lt;/p&gt;
&lt;p&gt;When the pointer uses an exit, the following occurs:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The actions associated with the exit are executed.&lt;/li&gt;
&lt;li&gt;The pointer moves to the state of that exit and the process begins anew.&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;Interface Overview&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/bottery/blob/master/doc_images/bottery_ui.png?raw=true&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/google/bottery/raw/master/doc_images/bottery_ui.png?raw=true&quot; alt=&quot;UI overview&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Chat&lt;/h3&gt;
&lt;p&gt;Tab for interacting with the bot. Occasionally, the player may be offered suggestion chips (e.g., &quot;heads&quot; and &quot;tails&quot;) that can allow the player to interact without entering text.&lt;/p&gt;
&lt;h3&gt;Controls&lt;/h3&gt;
&lt;p&gt;Switches between text and speech, and also commands for working with state. If there are errors in the bot’s underlying script, then they will appear here.&lt;/p&gt;
&lt;h3&gt;Editor&lt;/h3&gt;
&lt;p&gt;An inline editor for the underlying bot script. A user can edit the script and see changes without having to edit the underlying &lt;code&gt;.js&lt;/code&gt; files. Changes here will be saved in local storage, so they will only be accessible to the current user.&lt;/p&gt;
&lt;h3&gt;Blackboard&lt;/h3&gt;
&lt;p&gt;Displays the current state of the variables known by the bot. These variables can be used to affect conditional behavior (e.g., the mood of the bot), some tracked information (e.g., the number of correct guesses in a quiz), the name of something (e.g., something the player is allowed to name), and much more.&lt;/p&gt;
&lt;p&gt;This information is typically invisible to an end user interacting with the bot.&lt;/p&gt;
&lt;h3&gt;Inspector&lt;/h3&gt;
&lt;p&gt;Presents a view of the bot’s state machine. This shows all the states that the bot can traverse through, and within them indicates the commands that are executed by the bot, and the ways to traverse to the next state[s]. The initial state is always &quot;origin&quot;. This view is not interactive, but is a visual representation of the underlying script.&lt;/p&gt;
&lt;h3&gt;State view&lt;/h3&gt;
&lt;p&gt;This is a representation of the current state of the bot, and the potential next states, as well as the conditions for enabling these particular transitions.&lt;/p&gt;
&lt;h3&gt;Viz&lt;/h3&gt;
&lt;p&gt;Displays the directed connectivity graph of states and exits. Highlights the current state and any active exit transitions.&lt;/p&gt;
&lt;h2&gt;Example bot (kitten simulator!)&lt;/h2&gt;
&lt;p&gt;Now that we have reviewed the underlying concepts and the interface, it is time to build a bot!&lt;/p&gt;
&lt;p&gt;When you have checked out the git repository, create a new file &lt;code&gt;kittens.js&lt;/code&gt; in the &lt;code&gt;bots&lt;/code&gt; directory, and add &lt;code&gt;kittens&lt;/code&gt; to the list of bots in &lt;code&gt;bots.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can start with the following in &lt;code&gt;kittens.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
bot &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
  states&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    origin&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'You have a kitten!'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
  },
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a minimal valid bot. It has one state, the &lt;code&gt;origin&lt;/code&gt;, and that has a single &lt;code&gt;onEnter&lt;/code&gt; associated with it. Note the fact that the text &lt;code&gt;'You have a kitten!'&lt;/code&gt; is in single quotes. This is an output action and denotes that this string is to be output as text. We will add additional actions later.&lt;/p&gt;
&lt;p&gt;A note on syntax: The format of this is valid javascript, and is very similar to JSON, but is not valid JSON because of two key differences: trailing commas are permitted, and object keys do not require quotes.&lt;/p&gt;
&lt;h3&gt;Interactive kitten&lt;/h3&gt;
&lt;p&gt;A bot isn't very interesting until you can interact with it, so let's add some interactivity:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
bot &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
  states&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    origin&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'You have a kitten!'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;-&amp;gt;name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'What do you want to name your kitten?'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'*' -&amp;gt;respondToName name=INPUT&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    respondToName&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;The kitten purrs happily, I guess it likes the name #/name#!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
  },
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This example introduces two new states: &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;respondToName&lt;/code&gt;. These states are connected via &lt;code&gt;exits&lt;/code&gt;. The exit on &lt;code&gt;origin&lt;/code&gt; has no conditions, and therefore is entered immediately by the Pointer. The exit in the state &lt;code&gt;name&lt;/code&gt; requires some form of user input indicated by the asterisk. This exit has an action associated with it in the form &lt;code&gt;name=INPUT&lt;/code&gt;. &lt;code&gt;INPUT&lt;/code&gt; is a special variable indicating the user's input. &lt;code&gt;name=INPUT&lt;/code&gt; has the effect that the variable &lt;code&gt;name&lt;/code&gt; is assigned to what the user entered, and is saved in the blackboard. In state &lt;code&gt;respondToName&lt;/code&gt; there is an &lt;code&gt;onEnterSay&lt;/code&gt; behavior, which is similar to &lt;code&gt;onEnter&lt;/code&gt;, but does not require extra single quotes around the text outputted. The blackboard variable &lt;code&gt;name&lt;/code&gt; is accessed via Tracery syntax using &lt;code&gt;#/name#&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Interacting with this bot, you can see that the &lt;strong&gt;viz&lt;/strong&gt; view displays the state graph, and the blackboard view displays the user-entered name.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/bottery/blob/master/doc_images/kittens1.png?raw=true&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/google/bottery/raw/master/doc_images/kittens1.png?raw=true&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Suggestion chips&lt;/h3&gt;
&lt;p&gt;User interactions can be expedited though the use of suggestion chips. These are prompts that are shown to the user when interacting through text.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
bot &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
  states&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    origin&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'You have a kitten!'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;-&amp;gt;name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'What do you want to name your kitten?'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      chips&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Cupcake&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Dark Lord Satan&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'*' -&amp;gt;respond_to_name name=INPUT&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    respond_to_name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;The kitten purrs happily, I guess it likes the name #/name#!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
  },
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Adding Tracery grammar&lt;/h3&gt;
&lt;p&gt;A little more flavor can be added using a Tracery grammar:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
bot &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
  grammar&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    noun&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;cat&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;monkey&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;butter&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;pants&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;demon&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fluff&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;taco&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;mountain&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;butt&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
    adj&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fluffy&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fat&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;puff&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;tepid&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;love&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;unruly&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#noun.capitalize##noun#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#adj.capitalize##noun#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#noun.capitalize# the #adj.capitalize#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
  },
  states&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    origin&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'You have a kitten!'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;-&amp;gt;name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'What do you want to name your kitten?'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      chips&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#name#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#name#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Cupcake&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Dark Lord Satan&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'*' -&amp;gt;respond_to_name name=INPUT&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    respond_to_name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;The kitten purrs happily, I guess it likes the name #/name#!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
  },
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/bottery/blob/master/doc_images/kittens2.png?raw=true&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/google/bottery/raw/master/doc_images/kittens2.png?raw=true&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Petting the kitten&lt;/h3&gt;
&lt;p&gt;What are some of the things that a user might want to do with a kitten bot? A natural thing to do would be to pet the kitten. Real life kittens are temperamental creatures, and can behave unpredictably. We can use the blackboard to store a variable indicating the number of times the kitten wants to be petted, and anything beyond that will cause the kitten to bite the user.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
bot &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
  grammar&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    noun&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;cat&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;monkey&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;butter&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;pants&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;demon&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fluff&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;taco&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;mountain&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;butt&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
    adj&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fluffy&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fat&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;puff&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;tepid&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;love&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;unruly&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#noun.capitalize##noun#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#adj.capitalize##noun#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#noun.capitalize# the #adj.capitalize#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
  },
  states&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    origin&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'You have a kitten!' desired_pets=randomInt(1,5)&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;-&amp;gt;name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'What do you want to name your kitten?'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      chips&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#name#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#name#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Cupcake&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Dark Lord Satan&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'*' -&amp;gt;respond_to_name name=INPUT&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    respond_to_name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;The kitten purrs happily, I guess it likes the name #/name#!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    pet&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'You pet the kitten' desired_pets--&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;desired_pets&amp;gt;=0 -&amp;gt;happy_pet&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;-&amp;gt;angry_pet&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;]
    },
    happy_pet&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#/name# loves you and is in ecstacy&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    angry_pet&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;why did you pet #/name# when it didn't want to be petted!?&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;desired_pets=randomInt(1,5)&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    }
  },
  exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'pet' -&amp;gt;pet&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
  initialBlackboard&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;the kitten&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
  },
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This example adds a global exit. No matter where the Pointer is at on the graph, the user can always pet the kitten. This introduces a problem, though, because the user could potentially pet the kitten before it was named, so an initial value for the name is configured in the blackboard. When the origin is entered, the variable &lt;code&gt;desired_pets&lt;/code&gt; is set to a random value between 1 and 5. When the user pets the kitten too much, the &lt;code&gt;angry_pet&lt;/code&gt; node is entered.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/bottery/blob/master/doc_images/kittens3.png?raw=true&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/google/bottery/raw/master/doc_images/kittens3.png?raw=true&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;State flow&lt;/h3&gt;
&lt;p&gt;Finally, we should add some idle behavior for the kitten when it is not being petted.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
bot &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
  grammar&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    noun&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;cat&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;monkey&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;butter&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;pants&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;demon&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fluff&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;taco&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;mountain&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;butt&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
    adj&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fluffy&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fat&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;puff&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;tepid&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;love&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;unruly&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#noun.capitalize##noun#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#adj.capitalize##noun#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#noun.capitalize# the #adj.capitalize#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
    catSpeak&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;mmrrr&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;meow&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;mmrrrrow&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;meep&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#catSpeak# #catSpeak#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
  },
  states&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    origin&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'You have a kitten!' desired_pets=randomInt(1,5)&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;-&amp;gt;name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'What do you want to name your kitten?'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      chips&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#name#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#name#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Cupcake&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Dark Lord Satan&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'*' -&amp;gt;respond_to_name name=INPUT&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    respond_to_name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;The kitten purrs happily, I guess it likes the name #/name#!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;-&amp;gt;idle&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    },
    pet&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'You pet the kitten' desired_pets--&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;desired_pets&amp;gt;=0 -&amp;gt;happy_pet&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;-&amp;gt;angry_pet&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;]
    },
    happy_pet&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#/name# loves you and is in ecstacy&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wait:10 -&amp;gt;idle&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    },
    angry_pet&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;why did you pet #/name# when it didn't want to be petted!?&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;desired_pets=randomInt(1,5)&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;-&amp;gt;angry&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    },
    idle&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#/name# rolls around and makes cute noises&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wait:10 -&amp;gt;hungry&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    angry&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'The kitten is angry! *bite*'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wait:10 -&amp;gt;sleeping&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    sleeping&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'The kitten is sleeping! zzzzzzzzz'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wait:10 -&amp;gt;hungry&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    hungry&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'The kitten is hungry! meow meow #catSpeak#'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wait:10 -&amp;gt;angry&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
  },
  exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'pet' -&amp;gt;pet&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
  initialBlackboard&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;the kitten&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
  },
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This final example adds state transitions that form a cycle of activity. If no interaction occurs, the kitten will naturally cycle between the states of &lt;code&gt;hungry&lt;/code&gt;, &lt;code&gt;sleeping&lt;/code&gt;, and &lt;code&gt;angry&lt;/code&gt;. The &lt;code&gt;wait:10&lt;/code&gt; condition on the exit will delay for a particular amount of time before automatically advancing into that state.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/bottery/blob/master/doc_images/kittens4.png?raw=true&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/google/bottery/raw/master/doc_images/kittens4.png?raw=true&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Additional resources.&lt;/h3&gt;
&lt;p&gt;This concludes the tutorial. For more examples of types of bots, check out:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;amIPsychic.js&lt;/code&gt; This is a simple guessing game where the user guesses whether a random coin will flip heads or tails. The bot tracks the longest winning and losing streak.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quiz.js&lt;/code&gt; A basic quiz game where the user answers questions and these are used to determine a Hip Hop DJ name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tesla.js&lt;/code&gt; A bot based on the tracery &lt;a href=&quot;https://twitter.com/losttesla&quot;&gt;twitter bot&lt;/a&gt; of the same name.&lt;/li&gt;
&lt;/ul&gt;&lt;/article&gt;</description>
<pubDate>Tue, 31 Oct 2017 12:50:42 +0000</pubDate>
<dc:creator>manojlds</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/1342004?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>google/bottery</og:title>
<og:url>https://github.com/google/bottery</og:url>
<og:description>Contribute to bottery development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/google/bottery</dc:identifier>
</item>
<item>
<title>We only hire the best means we only hire the trendiest (2016)</title>
<link>http://danluu.com/programmer-moneyball/</link>
<guid isPermaLink="true" >http://danluu.com/programmer-moneyball/</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;title&gt;When we only hire the best means we only hire the trendiest&lt;/title&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;/&gt;&lt;link rel=&quot;icon&quot; href=&quot;data:;base64,iVBORw0KGgo=&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;354.61378509605&quot;&gt;
&lt;p&gt;&lt;strong&gt;When we only hire the best means we only hire the trendiest&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;An acquaintance of mine, let’s call him Mike, is looking for work after getting laid off from a contract role at Microsoft, which has happened to a lot of people I know. Like me, Mike has 11 years in industry. Unlike me, he doesn’t know a lot of folks at trendy companies, so I passed his resume around to some engineers I know at companies that are desperately hiring. My engineering friends thought Mike’s resume was fine, but most recruiters rejected him in the resume screening phase.&lt;/p&gt;
&lt;p&gt;When I asked why he was getting rejected, the typical response I got was:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Tech experience is in irrelevant tech&lt;/li&gt;
&lt;li&gt;“Experience is too random, with payments, mobile, data analytics, and UX.”&lt;/li&gt;
&lt;li&gt;Contractors are generally not the strongest technically&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This response is something from a recruiter that was relayed to me through an engineer; the engineer was incredulous at the response from the recruiter. Just so we have a name, let’s call this company TrendCo. It’s one of the thousands of companies that claims to have world class engineers, hire only the best, etc. This is one company in particular, but it’s representative of a large class of companies and the responses Mike has gotten.&lt;/p&gt;
&lt;p&gt;Anyway, (1) is code for “Mike’s a .NET dev, and we don’t like people with Windows experience”.&lt;/p&gt;
&lt;p&gt;I’m familiar with TrendCo’s tech stack, which multiple employees have told me is “a tire fire”. Their core systems top out under 1k QPS, which has caused them to go down under load. Mike has worked on systems that can handle multiple orders of magnitude more load, but his experience is, apparently, irrelevant.&lt;/p&gt;
&lt;p&gt;(2) is hard to make sense of. I’ve interviewed at TrendCo and one of the selling points is that it’s a startup where you get to do a lot of different things. TrendCo almost exclusively hires generalists but Mike is, apparently, too general for them.&lt;/p&gt;
&lt;p&gt;(3), combined with (1), gets at what TrendCo’s real complaint with Mike is. He’s not their type. TrendCo’s median employee is a recent graduate from one of maybe ten “top” schools with 0-2 years of experience. They have a few experienced hires, but not many, and most of their experienced hires have something trendy on their resume, not a boring old company like Microsoft.&lt;/p&gt;
&lt;p&gt;Whether or not you think there’s anything wrong with having a type and rejecting people who aren’t your type, as &lt;a href=&quot;https://news.ycombinator.com/item?id=11290662&quot;&gt;Thomas Ptacek has observed&lt;/a&gt;, if your type is the same type everyone else is competing for, “you are competing for talent with the wealthiest (or most overfunded) tech companies in the market”.&lt;/p&gt;
&lt;p&gt;If &lt;a href=&quot;https://docs.google.com/spreadsheets/u/1/d/1UnLz40Our1Ids-O0sz26uPNCF6cQjwosrZQY4VLdflU/htmlview?pli=1&amp;amp;sle=true#&quot;&gt;you look at new grad hiring data&lt;/a&gt;, it looks like FB is offering people with zero experience &amp;gt; $100k/ salary, $100k signing bonus, and $150k in RSUs, for an amortized total comp &amp;gt; $160k/yr, including $240k in the first year. Google’s package has &amp;gt; $100k salary, a variable signing bonus in the $10k range, and $187k in RSUs. That comes in a bit lower than FB, but it’s much higher than most companies that claim to only hire the best are willing to pay for a new grad. Keep in mind that &lt;a href=&quot;https://danluu.com/startup-tradeoffs/#fn:C&quot;&gt;compensation can go much higher for contested candidates&lt;/a&gt;, and that &lt;a href=&quot;https://news.ycombinator.com/item?id=11314449&quot;&gt;compensation for experienced candidates is probably higher than you expect if you’re not a hiring manager who’s seen what competitive offers look like today&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By going after people with the most sought after qualifications, TrendCo has narrowed their options down to either paying out the nose for employees, or offering non-competitive compensation packages. TrendCo has chosen the latter option, which partially explains why they have, proportionally, so few senior devs – the compensation delta increases as you get more senior, and you have to make a really compelling pitch to someone to get them to choose TrendCo when you’re offering $150k/yr less than the competition. And as people get more experience, they’re less likely to believe the part of the pitch that explains how much the stock options are worth.&lt;/p&gt;
&lt;p&gt;Just to be clear, I don’t have anything against people with trendy backgrounds. I know a lot of these people who have impeccable interviewing skills and got 5-10 strong offers last time they looked for work. I’ve worked with someone like that: he was just out of school, his total comp package was north of $200k/yr, and he was worth every penny. But think about that for a minute. He had strong offers from six different companies, of which he was going to accept at most one. Including lunch and phone screens, the companies put in an average of eight hours apiece interviewing him. And because they wanted to hire him so much, the companies that were really serious spent an average of another five hours apiece of engineer time trying to convince him to take their offer. Because these companies had, on average, a ⅙ chance of hiring this person, they have to spend at least an expected (8+5) * 6 = 78 hours of engineer time. People with great backgrounds are, on average, pretty great, but they’re really hard to hire. It’s much easier to hire people who are underrated, especially if you’re not paying market rates.&lt;/p&gt;
&lt;p&gt;I’ve seen this hyperfocus on hiring people with trendy backgrounds from both sides of the table, and it’s ridiculous from both sides.&lt;/p&gt;
&lt;p&gt;On the referring side of hiring, I tried to get a startup I was at to hire the most interesting and creative programmer I’ve ever met, who was tragically underemployed for years because of his low GPA in college. We declined to hire him and I was told that his low GPA meant that he couldn’t be very smart. Years later, Google took a chance on him and he’s been killing it since then. He actually convinced me to join Google, and &lt;a href=&quot;http://danluu.com/tech-discrimination/&quot;&gt;at Google, I tried to hire one of the most productive programmers I know, who was promptly rejected by a recruiter for not being technical enough&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On the candidate side of hiring, I’ve experienced both being in demand and being almost unhireable. Because I did my undergrad at Wisconsin, which is one of the 25 schools that claims to be a top 10 cs/engineering school, I had recruiters beating down my door when I graduated. But that’s silly – that I attended Wisconsin wasn’t anything about me; I just happened to grow up in the state of Wisconsin. If I grew up in Utah, I probably would have ended up going to school at Utah. When I’ve compared notes with folks who attended schools like Utah and Boise State, their education is basically the same as mine. Wisconsin’s rank as an engineering school comes from having professors who do great research which is, at best, weakly correlated to &lt;a href=&quot;http://danluu.com/teach-debugging/&quot;&gt;effectiveness at actually teaching undergrads&lt;/a&gt;. Despite getting the same engineering education you could get at hundreds of other schools, I had a very easy time getting interviews and finding a great job.&lt;/p&gt;
&lt;p&gt;I spent 7.5 years in that great job, at Centaur. Centaur has a pretty strong reputation among hardware companies in Austin who’ve been around for a while, and I had an easy time shopping for local jobs at hardware companies. But I don’t know of any software folks who’ve heard of Centaur, and as a result I couldn’t get an interview at most software companies. There were even a couple of cases where I had really strong internal referrals and the recruiters still didn’t want to talk to me, which I found funny and my friends found frustrating.&lt;/p&gt;
&lt;p&gt;When I could get interviews, they often went poorly. A typical rejection reason was something like “we process millions of transactions per day here and we really need someone with more relevant experience who can handle these things without ramping up”. And then Google took a chance on me and I was the second person on a project to get serious about deep learning performance, which was a 20%-time project until just before I joined. &lt;a href=&quot;https://www.google.com/patents/US20160342889&quot;&gt;We built the fastest deep learning system in the world&lt;/a&gt;. From what I hear, they’re now on the Nth generation of that project, but even the first generation thing we built has better per-node performance and performance per dollar than any other production system I know of today, years later (excluding follow-ons to that project, of course).&lt;/p&gt;
&lt;p&gt;While I was at Google I had recruiters pinging me about job opportunities all the time. And now that I’m at boring old Microsoft, I don’t get nearly as many recruiters reaching out to me. I’ve been considering looking for work and I wonder how trendy I’ll be if I do. Experience in irrelevant tech? Check! Random experience? Check! Contractor? Well, no. But two out of three ain’t bad.&lt;/p&gt;
&lt;p&gt;My point here isn’t anything about me. It’s that here’s this person who has wildly different levels of attractiveness to employers at various times, mostly due to superficial factors that don’t have much to do with actual productivity. This is a really common story among people who end up at Google. If you hired them before they worked at Google, you might have gotten a great deal! But no one (except Google) was willing to take that chance. There’s something to be said for paying more to get a known quantity, but a company like TrendCo that isn’t willing to do that cripples its hiring pipeline by only going after people with trendy resumes.&lt;/p&gt;
&lt;p&gt;I don’t mean to pick on startups like TrendCo in particular. Boring old companies have their version of what a trendy background is, too. A friend of mine who’s desperate to hire can’t do anything with some of the resumes I pass his way because his group isn’t allowed to hire anyone without a degree. Another person I know is in a similar situation because his group won’t talk to people who aren’t already employed.&lt;/p&gt;
&lt;p&gt;Not only are these decisions non-optimal for companies, they create a path dependence in employment outcomes that causes individual good (or bad) events to follow people around for decades. You can see similar effects in the literature on career earnings in a variety of fields.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=7260087&quot;&gt;Thomas Ptacek has this great line about how&lt;/a&gt; “we interview people whose only prior work experience is “Line of Business .NET Developer”, and they end up showing us how to write exploits for elliptic curve partial nonce bias attacks that involve Fourier transforms and BKZ lattice reduction steps that take 6 hours to run.” If you work at a company that doesn’t reject people out of hand for not being trendy, you’ll hear lots of stories like this. Some of the best people I’ve worked with went to schools you’ve never heard of and worked at companies you’ve never heard of until they ended up at Google. Some are still at companies you’ve never heard of.&lt;/p&gt;
&lt;p&gt;If you read &lt;a href=&quot;https://zachholman.com/talk/firing-people&quot;&gt;Zach Holman&lt;/a&gt;, you may recall that when he said that he was fired, someone responded with “If an employer has decided to fire you, then you’ve not only failed at your job, you’ve failed as a human being.” A lot of people treat employment status and credentials as measures of the inherent worth of individuals. But a large component of these markers of success, not to mention success itself, is luck.&lt;/p&gt;
&lt;h3 id=&quot;solutions&quot;&gt;Solutions?&lt;/h3&gt;
&lt;p&gt;I can understand why this happens. At an individual level, we’re prone to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fundamental_attribution_error&quot;&gt;fundamental attribution error&lt;/a&gt;. At an organizational level, fast growing organizations burn a large fraction of their time on interviews, and the obvious way to cut down on time spent interviewing is to only interview people with “good” qualifications. Unfortunately, that’s counterproductive when you’re chasing after the same tiny pool of people as everyone else.&lt;/p&gt;
&lt;p&gt;Here are the beginnings of some ideas. I’m open to better suggestions!&lt;/p&gt;
&lt;h4 id=&quot;moneyball&quot;&gt;Moneyball&lt;/h4&gt;
&lt;p&gt;Billy Beane and Paul Depodesta took the Oakland A’s, a baseball franchise with nowhere near the budget of top teams, and created what was arguably the best team in baseball by finding and “hiring” players who were statistically underrated for their price. The thing I find really amazing about this is that they publicly talked about doing this, and then Michael Lewis wrote a book, titled &lt;a href=&quot;https://www.amazon.com/gp/product/0393324818/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;tag=abroaview-20&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=0393324818&amp;amp;linkId=65d86d3a72b4c1ba73e8d3d52796eae1&quot;&gt;Moneyball&lt;/a&gt;, about them doing this. Despite the publicity, it took years for enough competitors to catch on enough that the A’s strategy stopped giving them a very large edge.&lt;/p&gt;
&lt;p&gt;You can see the exact same thing in software hiring. Thomas Ptacek has been talking about how they hired unusually effective people at Matasano for at least half a decade, maybe more. Google bigwigs regularly talk about the hiring data they have and what hasn’t worked. I believe they talked about how focusing on top schools wasn’t effective and didn’t turn up employees that have better performance years ago, but that doesn’t stop TrendCo from focusing hiring efforts on top schools.&lt;/p&gt;
&lt;h4 id=&quot;training-mentorship&quot;&gt;Training / mentorship&lt;/h4&gt;
&lt;p&gt;You see a lot of talk about moneyball, but for some reason people are less excited about… trainingball? Practiceball? Whatever you want to call taking people who aren’t “the best” and teaching them how to be “the best”.&lt;/p&gt;
&lt;p&gt;This is another one where it’s easy to see the impact through the lens of sports, because there is so much good performance data. Since it’s basketball season, if we look at college basketball, for example, we can identify a handful of programs that regularly take unremarkable inputs and produce good outputs. And that’s against a field of competitors where every team is expected to coach and train their players.&lt;/p&gt;
&lt;p&gt;When it comes to tech companies, most of the competition isn’t even trying. At the median large company, you get a couple days of “orientation”, which is mostly legal mumbo jumbo and paperwork, and the occasional “training”, which is usually a set of videos and a set of multiple-choice questions that are offered up for compliance reasons, not to teach anyone anything. And you’ll be assigned a mentor who, more likely than not, won’t provide any actual mentorship. Startups tend to be even worse! It’s not hard to do better than that.&lt;/p&gt;
&lt;p&gt;Considering how much money companies spend on &lt;a href=&quot;https://news.ycombinator.com/item?id=11314449&quot;&gt;hiring and retaining&lt;/a&gt; “the best”, you’d expect them to spend at least a (non-zero) fraction on training. It’s also quite strange that companies don’t focus more or training and mentorship when trying to recruit. Specific things I’ve learned in specific roles have been tremendously valuable to me, but it’s almost always either been a happy accident, or something I went out of my way to do. Most companies don’t focus on this stuff. Sure, recruiters will tell you that “you’ll learn so much more here than at Google, which will make you more valuable”, implying that it’s worth the $150k/yr pay cut, but if you ask them what, specifically, they do to make a better learning environment than Google, they never have a good answer.&lt;/p&gt;
&lt;h4 id=&quot;process-tools-culture&quot;&gt;Process / tools / culture&lt;/h4&gt;
&lt;p&gt;I’ve worked at two companies that both have effectively infinite resources to spend on tooling. One of them, let’s call them ToolCo, is really serious about tooling and invests heavily in tools. People describe tooling there with phrases like “magical”, “the best I’ve ever seen”, and “I can’t believe this is even possible”. And I can see why. For example, if you want to build a project that’s millions of lines of code, their build system will make that take somewhere between 5s and 20s (assuming you don’t enable &lt;a href=&quot;https://en.wikipedia.org/wiki/Interprocedural_optimization&quot;&gt;LTO&lt;/a&gt; or anything else that can’t be parallelized). In the course of a regular day at work you’ll use multiple tools that seem magical because they’re so far ahead of what’s available in the outside world.&lt;/p&gt;
&lt;p&gt;The other company, let’s call them ProdCo &lt;a href=&quot;http://yosefk.com/blog/people-can-read-their-managers-mind.html&quot;&gt;pays lip service to tooling, but doesn’t really value it&lt;/a&gt;. People describing ProdCo tools use phrases like “world class bad software” and “I am 2x less productive than I’ve ever been anywhere else”, and “I can’t believe this is even possible”. ProdCo has a paper on a new build system; their claimed numbers for speedup from parallelization/caching, onboarding time, and reliability, are at least two orders of magnitude worse than the equivalent at ToolCo. And, in my experience, the actual numbers are worse than the claims in the paper. In the course of a day of work at ProdCo, you’ll use multiple tools that are multiple orders of magnitude worse than the equivalent at ToolCo in multiple dimensions. These kinds of things add up and can easily make a larger difference than “hiring only the best”.&lt;/p&gt;
&lt;p&gt;Processes and culture also matter. I once worked on a team that didn’t use version control or have a bug tracker. For every no-brainer item on the &lt;a href=&quot;http://www.joelonsoftware.com/articles/fog0000000043.html&quot;&gt;Joel test&lt;/a&gt;, there are teams out there that make the wrong choice.&lt;/p&gt;
&lt;p&gt;Although I’ve only worked on one team that completely failed the Joel test (they scored a 1 out of 12), every team I’ve worked on has had glaring deficiencies that are technically trivial (but sometimes culturally difficult) to fix. When I was at Google, we had really bad communication problems between the two halves of our team that were in different locations. My fix was brain-dead simple: I started typing up meeting notes for all of our local meetings and discussions and taking questions from the remote team about things that surprised them in our notes. That’s something anyone could have done, and it was a huge productivity improvement for the entire team. I’ve literally never found an environment where you can’t massively improve productivity with something that trivial. Sometimes people don’t agree (e.g., it took months to get the non-version-control-using-team to use version control), but that’s a topic for another post.&lt;/p&gt;
&lt;p&gt;Programmers are woefully underutilized at most companies. What’s the point of &lt;a href=&quot;http://danluu.com/wat/&quot;&gt;hiring “the best” and then crippling them&lt;/a&gt;? You can get better results by hiring undistinguished folks and setting them up for success, and &lt;a href=&quot;https://twitter.com/patio11/status/706884144538648576&quot;&gt;it’s a lot cheaper&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;When I started programming, I heard a lot about how programmers are down to earth, not like those elitist folks who have uniforms involving suits and ties. You can even wear t-shirts to work! But if you think programmers aren’t elitist, try wearing a suit and tie to an interview sometime. You’ll have to go above and beyond to prove that you’re not a bad cultural fit. We like to think that we’re different from all those industries that judge people based on appearance, but we do the same thing, only instead of saying that people are a bad fit because they don’t wear ties, we say they’re a bad fit because they do, and instead of saying people aren’t smart enough because they don’t have the right pedigree… wait, that’s exactly the same.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also: &lt;a href=&quot;http://danluu.com/hiring-lemons/&quot;&gt;developer hiring and the market for lemons&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Thanks to Kelley Eskridge, Laura Lindzey, John Hergenroeder, Kamal Marhubi, Julia Evans, Steven McCarthy, Lindsey Kuper, Leah Hanson, Darius Bacon, Pierre-Yves Baccou, Kyle Littler, Jorge Montero, and Mark Dominus for discussion/comments/corrections.&lt;/small&gt;&lt;/p&gt;


&lt;footer&gt;
&lt;/footer&gt;&lt;/body&gt;</description>
<pubDate>Tue, 31 Oct 2017 06:26:51 +0000</pubDate>
<dc:creator>indy</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://danluu.com/programmer-moneyball/</dc:identifier>
</item>
<item>
<title>Why Most Unit Testing Is Waste [pdf]</title>
<link>https://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf</link>
<guid isPermaLink="true" >https://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf</guid>
<description>&lt;a href=&quot;https://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf&quot;&gt;Download PDF&lt;/a&gt;</description>
<pubDate>Tue, 31 Oct 2017 05:05:22 +0000</pubDate>
<dc:creator>quickthrower2</dc:creator>
<dc:language>en</dc:language>
<dc:format>application/pdf</dc:format>
<dc:identifier>https://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf</dc:identifier>
</item>
</channel>
</rss>