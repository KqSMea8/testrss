<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Strange earthquake waves rippled around Earth</title>
<link>https://www.nationalgeographic.com/science/2018/11/strange-earthquake-waves-rippled-around-world-earth-geology/</link>
<guid isPermaLink="true" >https://www.nationalgeographic.com/science/2018/11/strange-earthquake-waves-rippled-around-world-earth-geology/</guid>
<description>&lt;span itemprop=&quot;articleBody&quot; class=&quot;clearfix&quot;&gt;On the morning of November 11, just before 9:30 UT, a &lt;a href=&quot;https://twitter.com/ALomaxNet/status/1062009824165142528&quot;&gt;mysterious rumble rolled around the world&lt;/a&gt;.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot; class=&quot;clearfix&quot;&gt;The seismic waves began roughly 15 miles off the shores of Mayotte, a French island sandwiched between Africa and the northern tip of Madagascar. The waves buzzed across Africa, ringing sensors in Zambia, &lt;a href=&quot;https://twitter.com/UKEQ_Bulletin/status/1061616756890976257&quot;&gt;Kenya&lt;/a&gt;, and Ethiopia. They traversed vast oceans, humming across &lt;a href=&quot;https://twitter.com/sebacarquake/status/1062034474228219904&quot;&gt;Chile&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/matarikipax/status/1061590963779334144&quot;&gt;New Zealand&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/earthquakeguy/status/1062013690508062720&quot;&gt;Canada&lt;/a&gt;, and even &lt;a href=&quot;https://twitter.com/UKEQ_Bulletin/status/1062017007560855554&quot;&gt;Hawaii&lt;/a&gt; nearly 11,000 miles away.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot; class=&quot;clearfix&quot;/&gt;&lt;span itemprop=&quot;articleBody&quot; class=&quot;clearfix&quot;&gt;© NGP, Content may not reflect &lt;a href=&quot;https://www.nationalgeographic.com/maps/cartographic-policies/?beta=true&quot; target=&quot;new&quot;&gt;National Geographic's current map policy&lt;/a&gt;.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot; class=&quot;clearfix&quot;/&gt;&lt;span itemprop=&quot;articleBody&quot; class=&quot;clearfix&quot;&gt;These waves didn't just zip by; they rang for more than 20 minutes. And yet, it seems, no human felt them.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot; class=&quot;clearfix&quot;&gt;Only one person noticed the odd signal on the U.S. Geological Survey's &lt;a href=&quot;https://earthquake.usgs.gov/monitoring/seismograms&quot;&gt;real-time seismogram displays&lt;/a&gt;. An earthquake enthusiast who uses the handle &lt;a href=&quot;https://twitter.com/matarikipax/status/1061595351314886658?s=21&quot;&gt;@matarikipax&lt;/a&gt; saw the curious zigzags and posted images of them to Twitter. That small action kicked off another ripple of sorts, as &lt;a href=&quot;https://twitter.com/ukeq_bulletin/status/1061616756890976257?s=21&quot;&gt;researchers around the world&lt;/a&gt; attempted to suss out the source of the waves. Was it a meteor strike? A submarine volcano eruption? An ancient sea monster rising from the deep?&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot; class=&quot;clearfix&quot;&gt;“I don't think I've seen anything like it,” says &lt;a href=&quot;https://www.ldeo.columbia.edu/~ekstrom/&quot;&gt;Göran Ekström&lt;/a&gt;, a seismologist at Columbia University who specializes in unusual earthquakes.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot; class=&quot;clearfix&quot;/&gt;</description>
<pubDate>Thu, 29 Nov 2018 04:57:52 +0000</pubDate>
<dc:creator>curtis</dc:creator>
<og:title>Strange waves rippled around the world, and nobody knows why</og:title>
<og:description>Instruments picked up the seismic waves more than 10,000 miles away—but bizarrely, nobody felt them.</og:description>
<og:url>https://www.nationalgeographic.com/science/2018/11/strange-earthquake-waves-rippled-around-world-earth-geology/</og:url>
<og:type>article</og:type>
<og:image>https://www.nationalgeographic.com/content/dam/science/2018/11/1127/mayotte/01_mayotte_hw8hfe.ngsversion.1543404601374.adapt.1900.1.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nationalgeographic.com/science/2018/11/strange-earthquake-waves-rippled-around-world-earth-geology/</dc:identifier>
</item>
<item>
<title>NES.css: 8-bit style CSS framework</title>
<link>https://bcrikko.github.io/NES.css/</link>
<guid isPermaLink="true" >https://bcrikko.github.io/NES.css/</guid>
<description>&lt;div class=&quot;container with-title is-center&quot; readability=&quot;8&quot;&gt;&lt;label class=&quot;title&quot;&gt;Container.is-center&lt;/label&gt;
&lt;p&gt;Good morning. Thou hast had a good night's sleep, I hope.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;container is-dark with-title&quot; readability=&quot;8&quot;&gt;&lt;label class=&quot;title&quot;&gt;Container.is-dark&lt;/label&gt;
&lt;p&gt;Good morning. Thou hast had a good night's sleep, I hope.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;container is-rounded&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;Good morning. Thou hast had a good night's sleep, I hope.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;container is-rounded is-dark&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;Good morning. Thou hast had a good night's sleep, I hope.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 29 Nov 2018 03:37:49 +0000</pubDate>
<dc:creator>RyanShook</dc:creator>
<og:type>website</og:type>
<og:title>NES.css</og:title>
<og:url>https://bcrikko.github.io/NES.css/</og:url>
<og:description>NES-style CSS Framework | ファミコン風CSSフレームワーク</og:description>
<og:image>https://user-images.githubusercontent.com/5305599/49061716-da649680-f254-11e8-9a89-d95a7407ec6a.png</og:image>
<dc:language>ja</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://bcrikko.github.io/NES.css/</dc:identifier>
</item>
<item>
<title>Lenovo to pay $7.3M for installing adware in laptops</title>
<link>https://www.hackread.com/lenovo-to-pay-fine-for-installing-adware-in-laptops/</link>
<guid isPermaLink="true" >https://www.hackread.com/lenovo-to-pay-fine-for-installing-adware-in-laptops/</guid>
<description>&lt;aside class=&quot;mashsb-container mashsb-main&quot;&gt;


&lt;/aside&gt;&lt;p&gt;&lt;span&gt;In 2015, Beijing based laptop manufacturer and seemingly reliable technology company Lenovo made headlines that its 750,000 laptops had&lt;/span&gt; &lt;a href=&quot;https://www.hackread.com/lenovo-to-pay-millions-for-secretly-installing-adware-in-750000-laptops/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pre-installed adware called VisualDiscovery&lt;/a&gt; &lt;span&gt;developed by Superfish.&lt;/span&gt;&lt;/p&gt;

&lt;span&gt;&lt;br/&gt;&lt;/span&gt;
&lt;p&gt;&lt;span&gt;The adware played a vital role in compromising online security protections installed by the users on their laptops, accessed financial data and performed &lt;a href=&quot;https://www.hackread.com/new-bluetooth-flaw-lets-attackers-monitor-traffic/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;man-in-the-middle attack&lt;/a&gt; on private and secure connections due to which attackers could gain free access to the system and spied on encrypted communications.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The U.S. District Court for the Northern District of California granted initial approval of the settlement Nov. 21, four months after Lenovo and the consumer class filed with the court to end the spyware action.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;See:&lt;/strong&gt;&lt;/span&gt; &lt;a href=&quot;https://www.hackread.com/lenovo-website-hacked-amid-superfish-malware-scandal/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lenovo Website Hacked amid SuperFish Malware scandal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;However, now, in a &lt;a href=&quot;https://dd80b675424c132b90b3-e48385e382d2e5d17821a5e1d8e4c86b.ssl.cf1.rackcdn.com/external/lenovosettle21nov2018.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;class action lawsuit&lt;/a&gt; [PDF], Lenovo has settled a deal to pay $7.3 million to customers who found the &lt;a href=&quot;https://www.hackread.com/lenovo-massive-security-risk-software/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pre-installed adware&lt;/a&gt; on their devices putting their privacy at risk. The approval according to &lt;a href=&quot;https://news.bloomberglaw.com/privacy-and-data-security/lenovo-83m-spyware-class-action-settlement-gets-initial-ok&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Bloomberg law&lt;/a&gt;, was &lt;a href=&quot;https://dd80b675424c132b90b3-e48385e382d2e5d17821a5e1d8e4c86b.ssl.cf1.rackcdn.com/external/lenovomotion-tosettle11jul2018.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;granted&lt;/a&gt; [PDF] by the U.S. District Court for the Northern District of California on November 21st.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Lenovo on the other hand back in 2015 maintained the stance that it doesn’t agree with the allegations and that it was unaware of the exploitation of the app by third parties. Furthermore, the company claimed that it had already stopped selling the software in 2015.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“While Lenovo disagrees with allegations contained in these complaints, we are pleased to bring this matter to a close after 2-1/2 years. To date, we are not aware of any actual instances of a third-party exploiting the vulnerabilities to gain access to a user’s communications,” read &lt;/span&gt;&lt;a href=&quot;https://webcache.googleusercontent.com/search?q=cache:YCu0FhnZ-Q0J:https://news.lenovo.com/pressroom/press-releases/lenovo-statement-on-federal-trade-commission-ftc-ruling.htm+&amp;amp;cd=1&amp;amp;hl=en&amp;amp;ct=clnk&amp;amp;gl=uk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lenovo’s (now deleted) official statement&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&quot;quads-ad2&quot; class=&quot;quads-location quads-ad2&quot; readability=&quot;6&quot;&gt;
&lt;div id=&quot;attachment_57096&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;32&quot;&gt;&lt;a href=&quot;https://www.hackread.com/wp-content/uploads/2017/09/lenovo-to-pay-3-5m-for-secretly-installing-adware-in-750000-laptops-1.jpeg?x68593&quot;&gt;&lt;img class=&quot;size-full wp-image-57096&quot; src=&quot;https://www.hackread.com/wp-content/uploads/2017/09/lenovo-to-pay-3-5m-for-secretly-installing-adware-in-750000-laptops-1.jpeg?x68593&quot; alt=&quot;Lenovo to Pay $3.5m for Secretly Installing Adware in 750,000 Laptops&quot; width=&quot;700&quot; height=&quot;209&quot; srcset=&quot;https://www.hackread.com/wp-content/uploads/2017/09/lenovo-to-pay-3-5m-for-secretly-installing-adware-in-750000-laptops-1.jpeg 700w, https://www.hackread.com/wp-content/uploads/2017/09/lenovo-to-pay-3-5m-for-secretly-installing-adware-in-750000-laptops-1-300x90.jpeg 300w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;A full list of infected devices&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;In 2015, a cybersecurity expert Robert Graham analyzed the &lt;/span&gt;&lt;span&gt;SuperFish software and wrote in his &lt;a href=&quot;https://web.archive.org/web/20150403102337/http://blog.erratasec.com:80/2015/02/some-notes-on-superfish.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;blog post&lt;/a&gt; that:&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span&gt;The SuperFish software is particularly bad. It’s designed to intercept all encrypted connections. It does this in a poor way that it leaves the system open to hackers or NSA-style spies. For example, it can spy on your private bank connections, as shown in this picture.&lt;/span&gt;&lt;/p&gt;

&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;It is noteworthy that in 2017, Lenovo &lt;a href=&quot;https://www.hackread.com/lenovo-to-pay-millions-for-secretly-installing-adware-in-750000-laptops/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;agreed to pay $3.5 million&lt;/a&gt; by signing an agreement with the Federal Trade Commission, Connecticut, and 31 other states. The company had pledged to change the way it sells devices too. Moreover, in a separate agreement, the company paid an additional 3.5 million to state authorities.&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 29 Nov 2018 02:27:37 +0000</pubDate>
<dc:creator>MagicPropmaker</dc:creator>
<og:type>article</og:type>
<og:title>Lenovo to pay $7.3m for installing adware in 750,000 laptops</og:title>
<og:description>Follow us on Twitter @HackRead</og:description>
<og:url>https://www.hackread.com/lenovo-to-pay-fine-for-installing-adware-in-laptops/</og:url>
<og:image>https://www.hackread.com/wp-content/uploads/2018/11/lenovo-to-pay-7-3m-for-secretly-installing-adware-in-750000-laptops.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hackread.com/lenovo-to-pay-fine-for-installing-adware-in-laptops/</dc:identifier>
</item>
<item>
<title>LearnDB: Learn how to build a database</title>
<link>https://learndb.net/</link>
<guid isPermaLink="true" >https://learndb.net/</guid>
<description>&lt;p&gt;This site hosts the lessons for LearnDB, a project that teaches you how to create a database system from scratch with Node.js and JavaScript.&lt;/p&gt;
&lt;p&gt;The project is the result of this reddit post and its accompanying survey: &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://www.reddit.com/r/learnprogramming/comments/96hftg/would_anyone_be_interested_in_learning_how_to/&quot;&gt;Would anyone be interested in learning how to build a database?&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;subscribe-for-e-mail-updates&quot;&gt;Subscribe for e-mail updates&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Click the “Subscribe” link below to sign up to receive e-mail updates from LearnDB about lessons, articles, and site changes.&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;a-target-blank-rel-noopener-noreferrer-href-http-eepurl-com-dfvioh-i-class-far-fa-envelope-i-subscribe-a&quot;&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;http://eepurl.com/dFVioH&quot;&gt;Subscribe&lt;/a&gt;&lt;/h4&gt;
&lt;h3 id=&quot;join-the-community-for-discussions-and-to-ask-questions&quot;&gt;Join the community for discussions and to ask questions&lt;/h3&gt;
&lt;h2 id=&quot;ready-to-start-learning&quot;&gt;Ready to start learning?&lt;/h2&gt;
&lt;p&gt;Head over to Chapter 1 to get started with the &lt;a href=&quot;https://learndb.net/basics/&quot;&gt;Basics&lt;/a&gt;, including project goals and information about the LearnDB GitHub repo.&lt;/p&gt;
</description>
<pubDate>Thu, 29 Nov 2018 01:00:53 +0000</pubDate>
<dc:creator>niklabh</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://learndb.net/</dc:identifier>
</item>
<item>
<title>Show HN: Open-sourcing my wedding website on my first anniversary</title>
<link>https://github.com/rampatra/wedding-website</link>
<guid isPermaLink="true" >https://github.com/rampatra/wedding-website</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;A beautiful, feature rich, device friendly wedding website.&lt;br/&gt;&lt;em&gt;See &lt;a href=&quot;http://wedding.rampatra.com/&quot; rel=&quot;nofollow&quot;&gt;wedding.rampatra.com&lt;/a&gt; for a demo. Use invite code &lt;code&gt;271117&lt;/code&gt; to RSVP.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;Slick and fully &lt;strong&gt;responsive&lt;/strong&gt; design.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RSVP feature&lt;/strong&gt; which directly uploads data to a Google sheet.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Receive email alerts&lt;/strong&gt; when someone RSVPs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add to Calendar&lt;/strong&gt; feature which supports four different calendars.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Book Uber&lt;/strong&gt; button lets guests book a cab to the venue with just a single tap.&lt;/li&gt;
&lt;li&gt;Start and run the website &lt;strong&gt;completely free of charge&lt;/strong&gt;. No hosting, backend server, or database required as you can use &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub pages&lt;/a&gt; to host and Google sheets to store rsvp data.&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;$ cd wedding-website&lt;/code&gt; - go inside the project directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ npm install&lt;/code&gt; - install dependencies &lt;em&gt;(optional)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ gulp&lt;/code&gt; - compile sass to css, minify js etc. &lt;em&gt;(optional)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;That's it, open &lt;code&gt;index.html&lt;/code&gt; on your browser by just double-clicking on the file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Will add detailed instructions soon about Uber API and other configurations on this website but for now, you can follow this &lt;a href=&quot;https://github.com/dwyl/learn-to-send-email-via-google-script-html-no-server&quot;&gt;article&lt;/a&gt; to setup your Google sheet for rsvp feature.&lt;/p&gt;

&lt;p&gt;My name is Ram. I am a Software Engineer at &lt;a href=&quot;https://www.oath.com/&quot; rel=&quot;nofollow&quot;&gt;Oath&lt;/a&gt;. I enjoy making teeny tiny applications in my leisure time and this is one of them. Now that my wedding is over, I am open-sourcing it.&lt;/p&gt;

&lt;p&gt;More than happy for PRs or &lt;a href=&quot;https://www.paypal.me/ramswaroop&quot; rel=&quot;nofollow&quot;&gt;gifts&lt;/a&gt; :)&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 28 Nov 2018 23:45:14 +0000</pubDate>
<dc:creator>rampatra</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/2862724?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>rampatra/wedding-website</og:title>
<og:url>https://github.com/rampatra/wedding-website</og:url>
<og:description>Our Wedding Website 👫. Contribute to rampatra/wedding-website development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/rampatra/wedding-website</dc:identifier>
</item>
<item>
<title>How we spent two weeks hunting an NFS bug in the Linux kernel</title>
<link>https://about.gitlab.com/2018/11/14/how-we-spent-two-weeks-hunting-an-nfs-bug/</link>
<guid isPermaLink="true" >https://about.gitlab.com/2018/11/14/how-we-spent-two-weeks-hunting-an-nfs-bug/</guid>
<description>&lt;p&gt;On Sep. 14, the GitLab support team escalated a critical problem encountered by one of our customers: GitLab would run fine for a while, but after some time users encountered errors. When attempting to clone certain repositories via Git, users would see an opaque &lt;code&gt;Stale file error&lt;/code&gt; message. The error message persisted for a long time, blocking employees from being able to work, unless a system administrator intervened manually by running &lt;code&gt;ls&lt;/code&gt; in the directory itself.&lt;/p&gt;
&lt;p&gt;Thus launched an investigation into the inner workings of Git and the Network File System (NFS). The investigation uncovered a bug with the Linux v4.0 NFS client and culiminated with a &lt;a href=&quot;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?h=be189f7e7f03de35887e5a85ddcf39b91b5d7fc1&quot;&gt;kernel patch that was written by Trond Myklebust&lt;/a&gt; and &lt;a href=&quot;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?h=c7a2c49ea6c9eebbe44ff2c08b663b2905ee2c13&quot;&gt;merged in the latest mainline Linux kernel&lt;/a&gt; on Oct. 26.&lt;/p&gt;
&lt;p&gt;This post describes the journey of investigating the issue and details the thought process and tools by which we tracked down the bug. It was inspired by the fine detective work in &lt;a href=&quot;http://www.be9.io/2015/09/21/memory-leak/&quot;&gt;How I spent two weeks hunting a memory leak in Ruby&lt;/a&gt; by Oleg Dashevskii.&lt;/p&gt;
&lt;p&gt;More importantly, this experience exemplifies how open source software debugging has become a team sport that involves expertise across multiple people, companies, and locations. The GitLab motto &quot;&lt;a href=&quot;https://about.gitlab.com/company/strategy/#mission&quot;&gt;everyone can contribute&lt;/a&gt;&quot; applies not only to GitLab itself, but also to other open source projects, such as the Linux kernel.&lt;/p&gt;
&lt;h2 id=&quot;reproducing-the-bug&quot;&gt;Reproducing the bug&lt;/h2&gt;
&lt;p&gt;While we have run NFS on GitLab.com for many years, we have stopped using it to access repository data across our application machines. Instead, we have &lt;a href=&quot;https://about.gitlab.com/2018/09/12/the-road-to-gitaly-1-0/&quot;&gt;abstracted all Git calls to Gitaly&lt;/a&gt;. Still, NFS remains a supported configuration for our customers who manage their own installation of GitLab, but we had never seen the exact problem described by the customer before.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ce/issues/51437&quot;&gt;Our customer gave us a few important clues&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The full error message read, &lt;code&gt;fatal: Couldn't read ./packed-refs: Stale file handle&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The error seemed to start when they started a manual Git garbage collection run via &lt;code&gt;git gc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The error would go away if a system adminstrator ran &lt;code&gt;ls&lt;/code&gt; in the directory.&lt;/li&gt;
&lt;li&gt;The error also would go away after &lt;code&gt;git gc&lt;/code&gt; process ended.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The first two items seemed obviously related. When you push to a branch in Git, Git creates a loose reference, a fancy name for a file that points your branch name to the commit. For example, a push to &lt;code&gt;master&lt;/code&gt; will create a file called &lt;code&gt;refs/heads/master&lt;/code&gt; in the repository:&lt;/p&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat refs/heads/master
2e33a554576d06d9e71bfd6814ee9ba3a7838963
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;git gc&lt;/code&gt; has several jobs, but one of them is to collect these loose references (refs) and bundle them up into a single file called &lt;code&gt;packed-refs&lt;/code&gt;. This makes things a bit faster by eliminating the need to read lots of little files in favor of reading one large one. For example, after running &lt;code&gt;git gc&lt;/code&gt;, an example &lt;code&gt;packed-refs&lt;/code&gt; might look like:&lt;/p&gt;
&lt;pre class=&quot;highlight plaintext&quot;&gt;
&lt;code&gt;# pack-refs with: peeled fully-peeled sorted
564c3424d6f9175cf5f2d522e10d20d781511bf1 refs/heads/10-8-stable
edb037cbc85225261e8ede5455be4aad771ba3bb refs/heads/11-0-stable
94b9323033693af247128c8648023fe5b53e80f9 refs/heads/11-1-stable
2e33a554576d06d9e71bfd6814ee9ba3a7838963 refs/heads/master
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;How exactly is this &lt;code&gt;packed-refs&lt;/code&gt; file created? To answer that, we ran &lt;code&gt;strace git gc&lt;/code&gt; with a loose ref present. Here are the pertinent lines from that:&lt;/p&gt;
&lt;pre class=&quot;highlight plaintext&quot;&gt;
&lt;code&gt;28705 open(&quot;/tmp/libgit2/.git/packed-refs.lock&quot;, O_RDWR|O_CREAT|O_EXCL|O_CLOEXEC, 0666) = 3
28705 open(&quot;.git/packed-refs&quot;, O_RDONLY) = 3
28705 open(&quot;/tmp/libgit2/.git/packed-refs.new&quot;, O_RDWR|O_CREAT|O_EXCL|O_CLOEXEC, 0666) = 4
28705 rename(&quot;/tmp/libgit2/.git/packed-refs.new&quot;, &quot;/tmp/libgit2/.git/packed-refs&quot;) = 0
28705 unlink(&quot;/tmp/libgit2/.git/packed-refs.lock&quot;) = 0
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The system calls showed that &lt;code&gt;git gc&lt;/code&gt; did the following:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Open &lt;code&gt;packed-refs.lock&lt;/code&gt;. This tells other processes that &lt;code&gt;packed-refs&lt;/code&gt; is locked and cannot be changed.&lt;/li&gt;
&lt;li&gt;Open &lt;code&gt;packed-refs.new&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Write loose refs to &lt;code&gt;packed-refs.new&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Rename &lt;code&gt;packed-refs.new&lt;/code&gt; to &lt;code&gt;packed-refs&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;packed-refs.lock&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Remove loose refs.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The fourth step is the key here: the rename where Git puts &lt;code&gt;packed-refs&lt;/code&gt; into action. In addition to collecting loose refs, &lt;code&gt;git gc&lt;/code&gt; also performs a more expensive task of scanning for unused objects and removing them. This task can take over an hour for large repositories.&lt;/p&gt;
&lt;p&gt;That made us wonder: for a large repository, does &lt;code&gt;git gc&lt;/code&gt; keep the file open while it's running this sweep? Looking at the &lt;code&gt;strace&lt;/code&gt; logs and probing the process with &lt;code&gt;lsof&lt;/code&gt;, we found that it did the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://about.gitlab.com/images/blogimages/nfs-debug/git-gc-diagram.svg&quot; alt=&quot;Git Garbage Collection&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Notice that &lt;code&gt;packed-refs&lt;/code&gt; is closed only at the end, after the potentially long &lt;code&gt;Garbage collect objects&lt;/code&gt; step takes place.&lt;/p&gt;
&lt;p&gt;That begged the next question: how does NFS behave when one node has &lt;code&gt;packed-refs&lt;/code&gt; open while another renames over that file?&lt;/p&gt;
&lt;p&gt;To experiment, we asked the customer to run the following experiment on two different machines (Alice and Bob):&lt;/p&gt;
&lt;ol readability=&quot;8&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;On the shared NFS volume, create two files: &lt;code&gt;test1.txt&lt;/code&gt; and &lt;code&gt;test2.txt&lt;/code&gt; with different contents to make it easy to distinguish them:&lt;/p&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;
&lt;code&gt; alice &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1 - Old file&quot;&lt;/span&gt; &amp;gt; /path/to/nfs/test1.txt
 alice &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2 - New file&quot;&lt;/span&gt; &amp;gt; /path/to/nfs/test2.txt
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;On machine Alice, keep a file open to &lt;code&gt;test1.txt&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;
&lt;code&gt;  alice &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;irb
  irb&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:001:0&amp;gt; File.open&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/path/to/nfs/test1.txt'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;On machine Alice, show the contents of &lt;code&gt;test1.txt&lt;/code&gt; continuously:&lt;/p&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;
&lt;code&gt; alice &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;cat test1.txt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Then on machine Bob, run:&lt;/p&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;
&lt;code&gt; bob &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mv -f test2.txt test1.txt
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This last step emulates what &lt;code&gt;git gc&lt;/code&gt; does with &lt;code&gt;packed-refs&lt;/code&gt; by overwriting the existing file.&lt;/p&gt;
&lt;p&gt;On the customer's machine, the result looked something like:&lt;/p&gt;
&lt;pre class=&quot;highlight plaintext&quot;&gt;
&lt;code&gt;1 - Old file
1 - Old file
1 - Old file
cat: test1.txt: Stale file handle
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Bingo! We seemed to reproduce the problem in a controlled way. However, the same experiment using a Linux NFS server did not have this problem. The result was what you would expect: the new contents were picked up after the rename:&lt;/p&gt;
&lt;pre class=&quot;highlight plaintext&quot;&gt;
&lt;code&gt;1 - Old file
1 - Old file
1 - Old file
2 - New file  &amp;lt;--- RENAME HAPPENED
2 - New file
2 - New file
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Why the difference in behavior? It turns out that the customer was using an &lt;a href=&quot;https://www.dellemc.com/en-us/storage/isilon/index.htm&quot;&gt;Isilon NFS appliance&lt;/a&gt; that only supported NFS v4.0. By switching the mount parameters to v4.0 via the &lt;code&gt;vers=4.0&lt;/code&gt; parameter in &lt;code&gt;/etc/fstab&lt;/code&gt;, the test revealed a different result with the Linux NFS server:&lt;/p&gt;
&lt;pre class=&quot;highlight plaintext&quot;&gt;
&lt;code&gt;1 - Old file
1 - Old file
1 - Old file
1 - Old file &amp;lt;--- RENAME HAPPENED
1 - Old file
1 - Old file
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Instead of a &lt;code&gt;Stale file handle&lt;/code&gt;, the Linux NFS v4.0 server showed stale &lt;em&gt;contents&lt;/em&gt;. It turns out this difference in behavior can be explained by the NFS spec. From &lt;a href=&quot;https://tools.ietf.org/html/rfc3010#page-153&quot;&gt;RFC 3010&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;A filehandle may or may not become stale or expire on a rename. However, server implementors are strongly encouraged to attempt to keep file handles from becoming stale or expiring in this fashion.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, NFS servers can choose how to behave if a file is renamed; it's perfectly valid for any NFS server to return a &lt;code&gt;Stale file error&lt;/code&gt; when that happens. We surmised that even though the results were different, the problem was likely related to the same issue. We suspected some cache validation issue because running &lt;code&gt;ls&lt;/code&gt; in the directory would &quot;clear&quot; the error. Now that we had a reproducible test case, we asked the experts: the Linux NFS maintainers.&lt;/p&gt;
&lt;h2 id=&quot;false-path-nfs-server-delegations&quot;&gt;False path: NFS server delegations&lt;/h2&gt;
&lt;p&gt;With a clear set of reproduction steps, I &lt;a href=&quot;https://marc.info/?l=linux-nfs&amp;amp;m=153721785231614&amp;amp;w=2&quot;&gt;sent an email to the Linux NFS mailing list&lt;/a&gt; describing what we had found. Over the week, I went back and forth with Bruce Fields, the Linux NFS server maintainer, who suggested this was a NFS bug and that it would be useful to look at the network traffic. He thought there might be an issue with NFS server delegations.&lt;/p&gt;
&lt;h3 id=&quot;what-is-an-nfs-server-delegation&quot;&gt;What is an NFS server delegation?&lt;/h3&gt;
&lt;p&gt;In a nutshell, NFS v4 introduced server delegations as a way to speed up file access. A server can delegate read or write access to a client so that the client doesn't have to keep asking the server whether that file has changed by another client. In simpler terms, a write delegation is akin to someone lending you a notebook and saying, &quot;Go ahead and write in here, and I'll take it back when I'm ready.&quot; Instead of having to ask to borrow the notebook every time you want to write a new paragraph, you have free rein until the owner reclaims the notebook. In NFS terms, this reclamation process is called a delegation recall.&lt;/p&gt;
&lt;p&gt;Indeed, a bug in the NFS delegation recall might explain the &lt;code&gt;Stale file handle&lt;/code&gt; problem. Remember that in the earlier experiment, Alice had an open file to &lt;code&gt;test1.txt&lt;/code&gt; when it was replaced by &lt;code&gt;test2.txt&lt;/code&gt; later. It's possible that the server failed to recall the delegation on &lt;code&gt;test1.txt&lt;/code&gt;, resulting in an incorrect state. To check whether this was an issue, we turned to &lt;code&gt;tcpdump&lt;/code&gt; to capture NFS traffic and used Wireshark to visualize it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; is a wonderful open source tool for analyzing network traffic, and it's especially good for viewing NFS in action. We captured a trace using the following command on the NFS server:&lt;/p&gt;
&lt;pre class=&quot;highlight plaintext&quot;&gt;
&lt;code&gt;tcpdump -s 0 -w /tmp/nfs.pcap port 2049
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This command captures all NFS traffic, which typically is on TCP port 2049. Because our experiment worked properly with NFS v4.1 but did not with NFS v4.0, we could compare and contrast how NFS behaved in a non-working and a working case. With Wireshark, we saw the following behavior:&lt;/p&gt;
&lt;h3 id=&quot;nfs-v40-stale-file-case&quot;&gt;NFS v4.0 (stale file case)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://about.gitlab.com/images/blogimages/nfs-debug/nfs-4.0-flow.svg&quot; alt=&quot;NFS v4.0 flow&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In this diagram, we can see in step 1 Alice opens &lt;code&gt;test1.txt&lt;/code&gt; and gets back an NFS file handle along with a &lt;code&gt;stateid&lt;/code&gt; of 0x3000. When Bob attempts to rename the file, the NFS server tells to Bob to retry via the &lt;code&gt;NFS4ERR_DELAY&lt;/code&gt; message while it recalls the delegation from Alice via the &lt;code&gt;CB_RECALL&lt;/code&gt; message (step 3). Alice then returns her delegation via &lt;code&gt;DELEGRETURN&lt;/code&gt; (step 4), and then Bob attempts to send another &lt;code&gt;RENAME&lt;/code&gt; message (step 5). The &lt;code&gt;RENAME&lt;/code&gt; completes in both cases, but Alice continues to read using the same file handle.&lt;/p&gt;
&lt;h3 id=&quot;nfs-v41-working-case&quot;&gt;NFS v4.1 (working case)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://about.gitlab.com/images/blogimages/nfs-debug/nfs-4.1-flow.svg&quot; alt=&quot;NFS v4.1 flow&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The main difference happens at the bottom at step 6. Notice in NFS v4.0 (the stale file case), Alice attempts to reuse the same &lt;code&gt;stateid&lt;/code&gt;. In NFS v4.1 (working case), Alice performs an additional &lt;code&gt;LOOKUP&lt;/code&gt; and &lt;code&gt;OPEN&lt;/code&gt;, which causes the server to return a different &lt;code&gt;stateid&lt;/code&gt;. In v4.0, these extra messages are never sent. This explains why Alice continues to see stale content because she uses the old file handle.&lt;/p&gt;
&lt;p&gt;What makes Alice decide to do the extra &lt;code&gt;LOOKUP&lt;/code&gt;? The delegation recall seemed to work fine, but perhaps there was still an issue, such as a missing invalidation step. To rule that out, we disabled NFS delegations by issuing this command on the NFS server itself:&lt;/p&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;0 &amp;gt; /proc/sys/fs/leases-enable
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We repeated the experiment, but the problem persisted. All this convinced us this wasn't a NFS server issue or a problem with NFS delegations; it was a problem that led us to look into the NFS client within the kernel.&lt;/p&gt;
&lt;h2 id=&quot;digging-deeper-the-linux-nfs-client&quot;&gt;Digging deeper: the Linux NFS client&lt;/h2&gt;
&lt;p&gt;The first question we had to answer for the NFS maintainers:&lt;/p&gt;
&lt;h3 id=&quot;was-this-problem-still-in-the-latest-upstream-kernel&quot;&gt;Was this problem still in the latest upstream kernel?&lt;/h3&gt;
&lt;p&gt;The issue occurred with both CentOS 7.2 and Ubuntu 16.04 kernels, which used versions 3.10.0-862.11.6 and 4.4.0-130, respectively. However, both those kernels lagged the most recent kernel, which was 4.19-rc2 at the time.&lt;/p&gt;
&lt;p&gt;We deployed a new Ubuntu 16.04 virtual machine on Google Cloud Platform (GCP), cloned the latest Linux kernel, and set up a kernel development environment. After generating a &lt;code&gt;.config&lt;/code&gt; file via &lt;code&gt;make menuconfig&lt;/code&gt;, we checked two items:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The NFS driver was compiled as a module (&lt;code&gt;CONFIG_NFSD=m&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://cloud.google.com/compute/docs/images/building-custom-os&quot;&gt;required GCP kernel settings&lt;/a&gt; were set properly.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Just as a geneticist would use fruit flies to study evolution in real time, the first item allowed us to make quick changes in the NFS client without having to reboot the kernel. The second item was required to ensure that the kernel would actually boot after it was installed. Fortunately, the default kernel settings had all the settings right out of the box.&lt;/p&gt;
&lt;p&gt;With our custom kernel, we verified that the stale file problem still existed in the latest version. That begged a number of questions:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Where exactly was this problem happening?&lt;/li&gt;
&lt;li&gt;Why was this problem happening with NFS v4.0 but not in v4.1?&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;To answer these questions, we began to investigate the NFS source code. Since we didn't have a kernel debugger available, we sprinkled the source code with two main types of calls:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;pr_info()&lt;/code&gt; (&lt;a href=&quot;https://lwn.net/Articles/487437/&quot;&gt;what used to be &lt;code&gt;printk&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dump_stack()&lt;/code&gt;: This would show the stack trace of the current function call.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;For example, one of the first things we did was hook into the &lt;code&gt;nfs4_file_open()&lt;/code&gt; function in &lt;code&gt;fs/nfs/nfs4file.c&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlight c&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;nfs4_file_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pr_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nfs4_file_open start&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dump_stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Admittedly, we could have &lt;a href=&quot;https://www.kernel.org/doc/html/v4.15/admin-guide/dynamic-debug-howto.html&quot;&gt;activated the &lt;code&gt;dprintk&lt;/code&gt; messages with the Linux dynamic debug&lt;/a&gt; or used &lt;a href=&quot;https://www.thegeekdiary.com/how-to-enable-nfs-debug-logging-using-rpcdebug/&quot;&gt;&lt;code&gt;rpcdebug&lt;/code&gt;&lt;/a&gt;, but it was nice to be able to add our own messages to verify changes were being made.&lt;/p&gt;
&lt;p&gt;Every time we made changes, we recompiled the module and reinstalled it into the kernel via the commands:&lt;/p&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;
&lt;code&gt;make modules
sudo umount /mnt/nfs-test
sudo rmmod nfsv4
sudo rmmod nfs
sudo insmod fs/nfs/nfs.ko
sudo mount -a
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;With our NFS module installed, repeating the experiments would print messages that would help us understand the NFS code a bit more. For example, you can see exactly what happens when an application calls &lt;code&gt;open()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlight plaintext&quot;&gt;
&lt;code&gt;Sep 24 20:20:38 test-kernel kernel: [ 1145.233460] Call Trace:
Sep 24 20:20:38 test-kernel kernel: [ 1145.233462]  dump_stack+0x8e/0xd5
Sep 24 20:20:38 test-kernel kernel: [ 1145.233480]  nfs4_file_open+0x56/0x2a0 [nfsv4]
Sep 24 20:20:38 test-kernel kernel: [ 1145.233488]  ? nfs42_clone_file_range+0x1c0/0x1c0 [nfsv4]
Sep 24 20:20:38 test-kernel kernel: [ 1145.233490]  do_dentry_open+0x1f6/0x360
Sep 24 20:20:38 test-kernel kernel: [ 1145.233492]  vfs_open+0x2f/0x40
Sep 24 20:20:38 test-kernel kernel: [ 1145.233493]  path_openat+0x2e8/0x1690
Sep 24 20:20:38 test-kernel kernel: [ 1145.233496]  ? mem_cgroup_try_charge+0x8b/0x190
Sep 24 20:20:38 test-kernel kernel: [ 1145.233497]  do_filp_open+0x9b/0x110
Sep 24 20:20:38 test-kernel kernel: [ 1145.233499]  ? __check_object_size+0xb8/0x1b0
Sep 24 20:20:38 test-kernel kernel: [ 1145.233501]  ? __alloc_fd+0x46/0x170
Sep 24 20:20:38 test-kernel kernel: [ 1145.233503]  do_sys_open+0x1ba/0x250
Sep 24 20:20:38 test-kernel kernel: [ 1145.233505]  ? do_sys_open+0x1ba/0x250
Sep 24 20:20:38 test-kernel kernel: [ 1145.233507]  __x64_sys_openat+0x20/0x30
Sep 24 20:20:38 test-kernel kernel: [ 1145.233508]  do_syscall_64+0x65/0x130
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;What are the &lt;code&gt;do_dentry_open&lt;/code&gt; and &lt;code&gt;vfs_open&lt;/code&gt; calls above? Linux has a &lt;a href=&quot;https://www.kernel.org/doc/Documentation/filesystems/vfs.txt&quot;&gt;virtual filesystem (VFS)&lt;/a&gt;, an abstraction layer which provides a common interface for all filesystems. The VFS documentation explains:&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;The VFS implements the open(2), stat(2), chmod(2), and similar system calls. The pathname argument that is passed to them is used by the VFS to search through the directory entry cache (also known as the dentry cache or dcache). This provides a very fast look-up mechanism to translate a pathname (filename) into a specific dentry. Dentries live in RAM and are never saved to disc: they exist only for performance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;this-gave-us-a-clue-what-if-this-was-a-problem-with-the-dentry-cache&quot;&gt;This gave us a clue: what if this was a problem with the dentry cache?&lt;/h3&gt;
&lt;p&gt;We noticed a lot of dentry cache validation was done in &lt;code&gt;fs/nfs/dir.c&lt;/code&gt;. In particular, &lt;code&gt;nfs4_lookup_revalidate()&lt;/code&gt; sounded promising. As an experiment, we hacked that function to bail out early:&lt;/p&gt;
&lt;pre class=&quot;highlight diff&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/fs/nfs/dir.c b/fs/nfs/dir.c
index 8bfaa658b2c1..ad479bfeb669 100644
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/fs/nfs/dir.c
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/fs/nfs/dir.c
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -1159,6 +1159,7 @@ static int nfs_lookup_revalidate(struct dentry *dentry, unsigned int flags)
&lt;/span&gt;        trace_nfs_lookup_revalidate_enter(dir, dentry, flags);
        error = NFS_PROTO(dir)-&amp;gt;lookup(dir, &amp;amp;dentry-&amp;gt;d_name, fhandle, fattr, label);
        trace_nfs_lookup_revalidate_exit(dir, dentry, flags, error);
&lt;span class=&quot;gi&quot;&gt;+       goto out_bad;
&lt;/span&gt;        if (error == -ESTALE || error == -ENOENT)
                goto out_bad;
        if (error)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That made the stale file problem in our experiment go away! Now we were onto something.&lt;/p&gt;
&lt;p&gt;To answer, &quot;Why does this problem not happen in NFS v4.1?&quot;, we added &lt;code&gt;pr_info()&lt;/code&gt; calls to every &lt;code&gt;if&lt;/code&gt; block in that function. After running our experiments with NFS v4.0 and v4.1, we found this special condition being run in the v4.1 case:&lt;/p&gt;
&lt;pre class=&quot;highlight c&quot;&gt;
&lt;code&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NFS_SB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dentry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NFS_CAP_ATOMIC_OPEN_V1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;What is &lt;code&gt;NFS_CAP_ATOMIC_OPEN_V1&lt;/code&gt;? We saw &lt;a href=&quot;https://patchwork.kernel.org/patch/2300511/&quot;&gt;this kernel patch&lt;/a&gt; mentioned this was an NFS v4.1-specific feature, and the code in &lt;code&gt;fs/nfs/nfs4proc.c&lt;/code&gt; confirmed that this flag was a capability present in v4.1 but not in v4.0:&lt;/p&gt;
&lt;pre class=&quot;highlight c&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nfs4_minor_version_ops&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nfs_v4_1_minor_ops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minor_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init_caps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NFS_CAP_READDIRPLUS&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NFS_CAP_ATOMIC_OPEN&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NFS_CAP_POSIX_LOCK&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NFS_CAP_STATEID_NFSV41&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NFS_CAP_ATOMIC_OPEN_V1&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That explained the difference in behavior: in the v4.1 case, the &lt;code&gt;goto no_open&lt;/code&gt; would cause more validation to happen in &lt;code&gt;nfs_lookup_revalidate()&lt;/code&gt;, but in v4.0, the &lt;code&gt;nfs4_lookup_revalidate()&lt;/code&gt; would return earlier. Now, how do we actually solve the problem?&lt;/p&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;
&lt;p&gt;I reported the &lt;a href=&quot;https://marc.info/?l=linux-nfs&amp;amp;m=153782129412452&amp;amp;w=2&quot;&gt;findings to the NFS mailing list&lt;/a&gt; and proposed &lt;a href=&quot;https://marc.info/?l=linux-nfs&amp;amp;m=153807208928650&amp;amp;w=2&quot;&gt;a naive patch&lt;/a&gt;. A week after the report, Trond Myklebust sent a &lt;a href=&quot;https://marc.info/?l=linux-nfs&amp;amp;m=153816500525563&amp;amp;w=2&quot;&gt;patch series to the list fixing this bug and found another related issue for NFS v4.1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It turns out the fix for the NFS v4.0 bug was deeper in the code base than we had looked. Trond summarized it well in the &lt;a href=&quot;https://marc.info/?l=linux-nfs&amp;amp;m=153816500525564&amp;amp;w=2&quot;&gt;patch&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;We need to ensure that inode and dentry revalidation occurs correctly on reopen of a file that is already open. Currently, we can end up not revalidating either in the case of NFSv4.0, due to the 'cached open' path. Let's fix that by ensuring that we only do cached open for the special cases of open recovery and delegation return.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We confirmed that this fix made the stale file problem go away and filed bug reports with &lt;a href=&quot;https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1802585&quot;&gt;Ubuntu&lt;/a&gt; and &lt;a href=&quot;https://bugzilla.redhat.com/show_bug.cgi?id=1648482&quot;&gt;RedHat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Knowing full well that kernel changes may take a while to make it to stable releases, we also added a &lt;a href=&quot;https://gitlab.com/gitlab-org/gitaly/merge_requests/924&quot;&gt;workaround in Gitaly&lt;/a&gt; to deal with this issue. We did experiments to test that calling &lt;code&gt;stat()&lt;/code&gt; on the &lt;code&gt;packed-refs&lt;/code&gt; file appears to cause the kernel to revalidate the dentry cache for the renamed file. For simplicity, this is implemented in Gitaly regardless of whether the filesystem is NFS; we only do this once before Gitaly &quot;opens&quot; a repository, and there are already other &lt;code&gt;stat()&lt;/code&gt; calls that check for other files.&lt;/p&gt;
&lt;h2 id=&quot;what-we-learned&quot;&gt;What we learned&lt;/h2&gt;
&lt;p&gt;A bug can be anywhere in your software stack, and sometimes you have to look beyond your application to find it. Having helpful partners in the open source world makes that job much easier.&lt;/p&gt;
&lt;p&gt;We are extremely grateful to Trond Myklebust for fixing the problem, and Bruce Fields for responding to questions and helping us understand NFS. Their responsiveness and professionalism truly reflects the best of the open source community.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/dynamosquito&quot;&gt;dynamosquito&lt;/a&gt; on &lt;a href=&quot;https://www.flickr.com/photos/dynamosquito/4265771518&quot;&gt;Flickr&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 28 Nov 2018 23:43:04 +0000</pubDate>
<dc:creator>fanf2</dc:creator>
<og:description>Here's an in-depth recap of debugging a GitLab issue that culminated in a patch for the Linux kernel.</og:description>
<og:title>How we spent two weeks hunting an NFS bug in the Linux kernel</og:title>
<og:type>article</og:type>
<og:url>https://about.gitlab.com/2018/11/14/how-we-spent-two-weeks-hunting-an-nfs-bug/</og:url>
<og:image>https://about.gitlab.com/images/blogimages/nfs-debug/nfs-bug-hunt-detective.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://about.gitlab.com/2018/11/14/how-we-spent-two-weeks-hunting-an-nfs-bug/</dc:identifier>
</item>
<item>
<title>Magnus Carlsen Beats Fabiano Caruana to Win World Chess Championship</title>
<link>https://www.nytimes.com/2018/11/28/sports/magnus-carlsen-fabiano-caruana-world-chess-championship.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2018/11/28/sports/magnus-carlsen-fabiano-caruana-world-chess-championship.html</guid>
<description>&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;After three weeks, 12 straight draws and a day of tiebreakers, Norway’s Magnus Carlsen finally retained the world chess championship in London on Wednesday with a victory against Fabiano Caruana, his American challenger.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Carlsen’s victory came in what amounted to sudden-death chess: a scheduled series of four so-called rapid games in which the players started with 25 minutes to make their moves. The speedier pace of the games, after the far more deliberate matchups of the previous three weeks, meant players were more likely to make blunders. And that increased the chance of a victory by one player.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Carlsen won the first two games, then closed out Caruana in Game 3.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;“Everything kind of went perfectly,” Carlsen said.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;In Game 1, Carlsen, playing white, quickly seized control of the center and, after a flurry of exchanges, wound up with a pawn advantage. For the first time in the match, he was able to turn the edge into a win; Caruana resigned after 55 moves.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Caruana got the white pieces for Game 2 and seized an early advantage of his own. But he seemed to press his advantage a little too hard, commentators said, and Carlsen turned the tables on him for win No. 2.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;That left Caruana needing two straight wins to extend the championship to the next round of even speedier matches. But Carlsen needed only a single draw, and when he got his third win — in the face of an increasingly aggressive series of moves by Caruana — the title was his.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Caruana, 26, was bidding to become the first American champion since Bobby Fischer beat Boris Spassky to win the world title in 1972. The famously cantankerous Fischer forfeited his title in 1975 amid a dispute with the world chess federation, and the sport has been dominated by Russians and Eastern Europeans in the decades since then.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;The tiebreaker result was not a shock. While Carlsen, 27, and Caruana, 26, are closely matched in longer conventional chess games, known as classical chess, Carlsen had been considered the favorite in the tiebreaker because he has had better rapid chess results than Caruana.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;The tiebreaker was a decisive end to a match that promised excitement when it began Nov. 9 but instead fizzled amid an interminable run of draws. Carlsen and Caruana are the two best players in the world, and an eager crowd watched them play from behind one-way glass in London. Millions of others, including &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/11/21/sports/world-chess-magnus-carlsen.html?module=inline&quot; title=&quot;&quot;&gt;a surprisingly large portion of Carlsen’s native Norway&lt;/a&gt;, followed the moves and the commentary about them on television and over the internet.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;The first 12 games of the championship, played at conventional length, all ended in draws. Some of the games lasted as long as seven hours, while others were relatively quick. In a few of the games, one player or the other seemed to gain a small advantage, only to fail to capitalize on it and close out a win.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div data-testid=&quot;photoviewer-wrapper&quot; class=&quot;css-79elbk ehw59r11&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r111&quot;&gt;
&lt;div class=&quot;css-1xdhyk6 e1vv25i80&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Image&lt;/span&gt;&lt;img alt=&quot;&quot; class=&quot;css-1m50asq&quot; src=&quot;https://static01.nyt.com/images/2018/11/28/sports/28chessWEB2/merlin_147428592_d73be552-146a-4088-be89-b040198acc6b-articleLarge.jpg?quality=75&amp;amp;auto=webp&amp;amp;disable=upscale&quot; srcset=&quot;https://static01.nyt.com/images/2018/11/28/sports/28chessWEB2/merlin_147428592_d73be552-146a-4088-be89-b040198acc6b-articleLarge.jpg?quality=90&amp;amp;auto=webp 600w,https://static01.nyt.com/images/2018/11/28/sports/28chessWEB2/merlin_147428592_d73be552-146a-4088-be89-b040198acc6b-jumbo.jpg?quality=90&amp;amp;auto=webp 1024w,https://static01.nyt.com/images/2018/11/28/sports/28chessWEB2/merlin_147428592_d73be552-146a-4088-be89-b040198acc6b-superJumbo.jpg?quality=90&amp;amp;auto=webp 2048w&quot; sizes=&quot;((min-width: 600px) and (max-width: 1004px)) 84vw, (min-width: 1005px) 60vw, 100vw&quot; itemprop=&quot;url&quot; itemid=&quot;https://static01.nyt.com/images/2018/11/28/sports/28chessWEB2/merlin_147428592_d73be552-146a-4088-be89-b040198acc6b-articleLarge.jpg?quality=75&amp;amp;auto=webp&amp;amp;disable=upscale&quot;/&gt;&lt;/div&gt;
&lt;span class=&quot;css-8i9d0s e1olku6u0&quot;&gt;Magnus Carlsen, left, beat Fabiano Caruana in tiebreaking games on Wednesday.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e18m0s9i0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Dan Kitwood/Getty Images&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;It was the first time in the history of the world championship, which dates to the 1800s, that regulation play ended with every game a draw. A player needs 6½ points from those games to win the title, but the series of draws left the match tied, 6-6, after Monday’s 12th game.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Chess fans seemed especially disappointed by Game 12. Carlsen seemed to be ahead on the board and had more time on his clock to ponder his remaining actions, but nonetheless he offered a draw after only 31 moves, a tepid ending to the main part of the match.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;The legendary former champion Garry Kasparov suggested the draw offer was a sign that Carlsen was losing his nerve, and on Twitter he proclaimed Caruana the favorite in the tiebreakers. “They’re entitled to their stupid opinions,” Carlsen said with a smile of his critics after his victory.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Kasparov did praise Carlsen’s play on Wednesday: “We all play worse as we play faster and faster, but his ratio may be the smallest ever.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Questioned about the parade of draws, Caruana &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.theguardian.com/sport/2018/nov/27/carlsen-caruana-world-chess-championship-armageddon&quot; title=&quot;Guardian&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;seemed unperturbed&lt;/a&gt;. “We work with the match that we have,” he said. “If the powers that be want to change it, then we’ll work with something else.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Had the four rapid games ended with the players still tied, they would have moved on to a series of blitz chess games, in which players start with only five minutes each.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Carlsen won the world chess title in 2013 at age 22, then successfully defended it in 2014 and 2016. Carlsen’s 2016 match against Sergey Karjakin of Russia also went to tiebreakers, although each player had posted a victory in the 12 conventional games. Carlsen won with two wins and two draws in the four rapid games.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Caruana, like Fischer, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/11/03/sports/bobby-fischer-chess-caruana.html?module=inline&quot; title=&quot;NYT&quot;&gt;is a Brooklyn-bred grandmaster&lt;/a&gt; and is at the vanguard of an improved group of American players who are challenging the dominance of Russia and others.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Caruana moved to Europe at age 12 to find better chess opportunities and returned to the United States three years ago, when he &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2015/03/11/sports/chasing-world-chess-title-us-recruits-from-abroad.html?module=inline&quot; title=&quot;&quot;&gt;switched his chess nationality&lt;/a&gt; to the United States from Italy.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;“I am very disappointed,” Caruana said. “I maybe missed like two big chances,” in the opening 12 games, “and Magnus also had two. I can’t really say I missed more chances than Magnus over all.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Carlsen’s recent success has led to a chess boom in Norway. Carlsen has become one of the country’s most famous people, and viewers attracted to the game by his victories now play it in clubs, bars and even on trams in Oslo. For the past month, many of those players — new and old — have been glued to televisions to watch his matches. Even the draws.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Those fans were rewarded on Wednesday; Caruana stymied him for weeks, but in the end, Carlsen is still the world champion.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 28 Nov 2018 19:13:42 +0000</pubDate>
<dc:creator>tosh</dc:creator>
<og:url>https://www.nytimes.com/2018/11/28/sports/magnus-carlsen-fabiano-caruana-world-chess-championship.html</og:url>
<og:type>article</og:type>
<og:title>Magnus Carlsen Wins World Chess Championship, Beating Fabiano Caruana</og:title>
<og:image>https://static01.nyt.com/images/2018/11/29/sports/29chess2/29chess2-facebookJumbo.jpg</og:image>
<og:description>After three weeks of draws failed to produce a winner, the players settled the title in rapid chess, with Carlsen retaining his title.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2018/11/28/sports/magnus-carlsen-fabiano-caruana-world-chess-championship.html</dc:identifier>
</item>
<item>
<title>Dot Dot Considered Harmful</title>
<link>https://fuchsia.googlesource.com/docs/+/HEAD/the-book/dotdot.md</link>
<guid isPermaLink="true" >https://fuchsia.googlesource.com/docs/+/HEAD/the-book/dotdot.md</guid>
<description>&lt;p&gt;Child processes on Fuchsia are only capable of accessing the resources provided to them -- this is an essential idea encompassing microkernels, and other “capability-based” systems. If a handle is provided to a service, access to that handle implies the client can use it.&lt;/p&gt;
&lt;p&gt;Intuitively, this concept can be applied to filesystems: If a handle is provided to a directory, it should imply access to resources within that directory (and additionally, their subdirectories). Unfortunately, however, a holdout from POSIX prevents directory handles from cleanly integrating with these concepts in a capability system: “..”. If a handle is provided to a directory, the client can simply request “..”, and the handle will be “upgraded” to access the parent directory, with broader scope. As a consequence, this implies that a handle to a directory can be upgraded arbitrarily to access the entire filesystem.&lt;/p&gt;
&lt;p&gt;Traditionally, filesystems have tried to combat this using “chroot”, which changes the notion of a filesystem root, preventing access beyond “..” in trivial cases of path traversal. However, this approach has some problems:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Chroot changes the notion of root on a coarse, “per-program” basis, not on a per-descriptor basis&lt;/li&gt;
&lt;li&gt;Chroots are often misused (i.e., fchdir to a different open handle which sits outside the chroot)&lt;/li&gt;
&lt;li&gt;Chroots are not “on by default”, so it may be tempting for programs to simply not use them.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To overcome these deficiencies, Fuchsia does not implement traditional dot dot semantics on filesystem servers, which would allow open directories to traverse upward. More specifically, it disallows access to “..”, preventing clients from trivially accessing parent directories. This provides some strong properties for process creation: If an application manager only wants to give a process access to “/data/my_private_data”, then it can simply provide a handle to that open directory to the child process, and it will “automatically” be sandboxed.&lt;/p&gt;
&lt;h2&gt;What about paths which can be resolved without the filesystem server?&lt;/h2&gt;
&lt;p&gt;Certain paths, such as “foo/../bar”, which can be transformed to “bar”, can be determined without accessing a filesystem server in the absence of symbolic links (and at the time of writing, symbolic links do not exist on Fuchsia). These paths may be canonicalized, or cleaned, on the client-side, prior to sending path-based requests to filesystem servers: the libfdio library already does this for any fdio operations which are eventually transmitted to filesystem servers in a function called &lt;code class=&quot;code&quot;&gt;__fdio_cleanpath&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;What about shell traversal?&lt;/h2&gt;
&lt;p&gt;I.e, if someone “cd”s into a directory, how can they leave? Internally, the notion of “CWD” isn’t merely a file descriptor to an open directory; rather, it’s a combination of “file descriptor” and “absolute path interpreted to mean CWD”. If all operations to cd act on this absolute path, then “..” can always be resolved locally on a client, rather than being transmitted to a filesystem server. For example, if the CWD is “/foo/bar”, and a user calls “cd ..”, then the underlying call may be transformed into “chdir /foo/bar/..”, which can be canonicalized to “/foo”.&lt;/p&gt;
&lt;p&gt;Once these hurdles have been overcome, the benefits of removing “..” are enormous: access to filesystem resources fits naturally within the capability system, &lt;a href=&quot;https://fuchsia.googlesource.com/docs/+/HEAD/the-book/sandboxing.md&quot;&gt;sandboxing&lt;/a&gt; new processes becomes massively easier, and resource access can more naturally be composed through filesystem &lt;a href=&quot;https://fuchsia.googlesource.com/docs/+/HEAD/the-book/namespaces.md&quot;&gt;namespaces&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Wed, 28 Nov 2018 18:44:04 +0000</pubDate>
<dc:creator>rohan1024</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://fuchsia.googlesource.com/docs/+/HEAD/the-book/dotdot.md</dc:identifier>
</item>
<item>
<title>Amazon Textract – Extract text and data from virtually any document</title>
<link>https://aws.amazon.com/textract/</link>
<guid isPermaLink="true" >https://aws.amazon.com/textract/</guid>
<description>&lt;p&gt;Amazon Textract is a service that automatically extracts text and data from scanned documents. Amazon Textract goes beyond simple optical character recognition (OCR) to also identify the contents of fields in forms and information stored in tables.&lt;/p&gt;
&lt;p&gt;Many companies today extract data from documents and forms through manual data entry that’s slow and expensive or through simple optical character recognition (OCR) software that is difficult to customize. Rules and workflows for each document and form often need to be hard-coded and updated with each change to the form or when dealing with multiple forms. If the form deviates from the rules, the output is often scrambled and unusable.&lt;/p&gt;
&lt;p&gt;Amazon Textract overcomes these challenges by using machine learning to instantly “read” virtually any type of document to accurately extract text and data without the need for any manual effort or custom code. With Textract you can quickly automate document workflows, enabling you to process millions of document pages in hours. Once the information is captured, you can take action on it within your business applications to initiate next steps for a loan application or medical claims processing. Additionally, you can create smart search indexes, build automated approval workflows, and better maintain compliance with document archival rules by flagging data that may require redaction.&lt;/p&gt;
</description>
<pubDate>Wed, 28 Nov 2018 18:23:23 +0000</pubDate>
<dc:creator>mcrute</dc:creator>
<og:title>Amazon Textract | Extract Text &amp; Data | AWS</og:title>
<og:type>company</og:type>
<og:url>https://aws.amazon.com/textract/</og:url>
<og:image>https://a0.awsstatic.com/libra-css/images/logos/aws_logo_smile_1200x630.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://aws.amazon.com/textract/</dc:identifier>
</item>
<item>
<title>Amazon Quantum Ledger Database</title>
<link>https://aws.amazon.com/qldb/</link>
<guid isPermaLink="true" >https://aws.amazon.com/qldb/</guid>
<description>&lt;p&gt;Amazon QLDB is a fully managed ledger database that provides a transparent, immutable, and cryptographically verifiable transaction log ‎owned by a central trusted authority. Amazon QLDB tracks each and every application data change and maintains a complete and verifiable history of changes over time.&lt;/p&gt;
&lt;p&gt;Ledgers are typically used to record a history of economic and financial activity in an organization. Many organizations build applications with ledger-like functionality because they want to maintain an accurate history of their applications' data, for example, tracking the history of credits and debits in banking transactions, verifying the data lineage of an insurance claim, or tracing movement of an item in a supply chain network. Ledger applications are often implemented using custom audit tables or audit trails created in relational databases. However, building audit functionality with relational databases is time-consuming and prone to human error. It requires custom development, and since relational databases are not inherently immutable, any unintended changes to the data are hard to track and verify. Alternatively, blockchain frameworks, such as Hyperledger Fabric and Ethereum, can also be used as a ledger. However, this adds complexity as you need to set-up an entire blockchain network with multiple nodes, manage its infrastructure, and require the nodes to validate each transaction before it can be added to the ledger.&lt;/p&gt;
&lt;p&gt;Amazon QLDB is a new class of database that eliminates the need to engage in the complex development effort of building your own ledger-like applications. With QLDB, your data’s change history is immutable – it cannot be altered or deleted – and using cryptography, you can easily verify that there have been no unintended modifications to your application’s data. QLDB uses an immutable transactional log, known as a journal, that tracks each application data change and maintains a complete and verifiable history of changes over time. QLDB is easy to use because it provides developers with a familiar SQL-like API, a flexible document data model, and full support for transactions. QLDB is also serverless, so it automatically scales to support the demands of your application. There are no servers to manage and no read or write limits to configure. With QLDB, you only pay for what you use.&lt;/p&gt;
&lt;p&gt;Sign Up for the &lt;a href=&quot;https://pages.awscloud.com/QuantumLedgerDatabase-preview.html&quot;&gt;Amazon QLDB preview&lt;/a&gt; today!&lt;/p&gt;
&lt;p&gt;Looking to build a blockchain application? Learn more about Amazon Managed Blockchain &lt;a href=&quot;https://aws.amazon.com/managed-blockchain/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Wed, 28 Nov 2018 17:23:17 +0000</pubDate>
<dc:creator>mcrute</dc:creator>
<og:title>Amazon QLDB</og:title>
<og:type>company</og:type>
<og:url>https://aws.amazon.com/qldb/</og:url>
<og:image>https://a0.awsstatic.com/libra-css/images/logos/aws_logo_smile_1200x630.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://aws.amazon.com/qldb/</dc:identifier>
</item>
</channel>
</rss>