<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Why it took a long time to build the tiny link preview on Wikipedia</title>
<link>https://blog.wikimedia.org/2018/04/20/why-it-took-a-long-time-to-build-that-tiny-link-preview-on-wikipedia/</link>
<guid isPermaLink="true" >https://blog.wikimedia.org/2018/04/20/why-it-took-a-long-time-to-build-that-tiny-link-preview-on-wikipedia/</guid>
<description>&lt;div id=&quot;attachment_55693&quot; class=&quot;post-image wp-caption aligncenter&quot; readability=&quot;55.247191011236&quot;&gt;&lt;img data-attachment-id=&quot;55693&quot; data-permalink=&quot;https://blog.wikimedia.org/2018/04/20/why-it-took-a-long-time-to-build-that-tiny-link-preview-on-wikipedia/preview-cards/&quot; data-orig-file=&quot;https://wikimediablog.files.wordpress.com/2018/04/preview-cards.png&quot; data-orig-size=&quot;1096,752&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;preview cards&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://wikimediablog.files.wordpress.com/2018/04/preview-cards.png?w=300&quot; data-large-file=&quot;https://wikimediablog.files.wordpress.com/2018/04/preview-cards.png?w=580&amp;amp;h=398&quot; class=&quot;size-large wp-image-55693&quot; src=&quot;https://wikimediablog.files.wordpress.com/2018/04/preview-cards.png?w=580&amp;amp;h=398&quot; alt=&quot;&quot; width=&quot;580&quot; height=&quot;398&quot; srcset=&quot;https://wikimediablog.files.wordpress.com/2018/04/preview-cards.png?w=580&amp;amp;h=398 580w, https://wikimediablog.files.wordpress.com/2018/04/preview-cards.png?w=150&amp;amp;h=103 150w, https://wikimediablog.files.wordpress.com/2018/04/preview-cards.png?w=300&amp;amp;h=206 300w, https://wikimediablog.files.wordpress.com/2018/04/preview-cards.png?w=768&amp;amp;h=527 768w, https://wikimediablog.files.wordpress.com/2018/04/preview-cards.png 1096w&quot; sizes=&quot;(max-width: 580px) 100vw, 580px&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Preview cards now show when you hover over a link ohhh yeeehh (and yes, I use Wikipedia’s mobile skin for my desktop browsing). Text from the Wikipedia articles on &lt;a href=&quot;https://en.wikipedia.org/wiki/Iceberg&quot;&gt;icebergs&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Water&quot;&gt;water&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/3.0/deed.en&quot;&gt;CC BY-SA 3.0&lt;/a&gt;. Images left to right, top to bottom: &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Iceberg_with_hole_near_Sandersons_Hope_2007-07-28_2.jpg&quot;&gt;#1&lt;/a&gt; by Kim Hansen, &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/3.0/deed.en&quot;&gt;CC BY-SA 3.0&lt;/a&gt;; &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Iceberg_in_the_Arctic_with_its_underside_exposed.jpg&quot;&gt;#2&lt;/a&gt; by Andreas Weith, &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/deed.en&quot;&gt;CC BY-SA 4.0&lt;/a&gt;; &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Grotto_in_an_iceberg.jpg&quot;&gt;#3&lt;/a&gt; via the National Library of New Zealand, &lt;a href=&quot;https://creativecommons.org/publicdomain/zero/1.0/deed.en&quot;&gt;CC0&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A few days ago, &lt;a href=&quot;https://medium.com/freely-sharing-the-sum-of-all-knowledge/wikipedia-page-previews-738cddac7a21&quot;&gt;my team launched&lt;/a&gt; a new feature on Wikipedia called “&lt;a href=&quot;https://www.mediawiki.org/wiki/Page_Previews&quot;&gt;page previews”&lt;/a&gt;. People seem to like it— we are seeing &lt;a href=&quot;https://grafana.wikimedia.org/dashboard/db/reading-web-page-previews?refresh=1m&amp;amp;orgId=1&amp;amp;panelId=2&amp;amp;fullscreen&quot;&gt;5,000 hits to our API a minute&lt;/a&gt; to serve those cards that show when you hover over any link.&lt;/p&gt;
&lt;p&gt;On the surface it looks quite simple. It’s something many websites have already. It has an image and some text and shows when you hover over a link. Hardly groundbreaking stuff … or so it may seem.&lt;/p&gt;
&lt;p&gt;The original idea was conceived four years ago, based on an idea &lt;a href=&quot;https://en.wikipedia.org/wiki/Wikipedia:Tools/Navigation_popups&quot;&gt;from a volunteer/editor&lt;/a&gt; many years before that.&lt;/p&gt;
&lt;p&gt;It’s thus taken a few years for us to get this out to everyone. That might seem strange, but like an iceberg, once you start looking below it, it all makes sense.&lt;/p&gt;
&lt;h4&gt;We had to choose a thumbnail&lt;/h4&gt;
&lt;p&gt;We have several millions of pages, all stored as raw wikitext. We couldn’t expect every single article to be edited to designate a thumbnail.&lt;/p&gt;
&lt;p&gt;Way back in 2012, Max Semenik, a software engineer on our &lt;a href=&quot;https://www.mediawiki.org/wiki/Community_Tech&quot;&gt;Community Tech team&lt;/a&gt;, built &lt;a href=&quot;https://www.mediawiki.org/wiki/Extension:PageImages&quot;&gt;an extension&lt;/a&gt; that would algorithmically work out the most appropriate image for an article.&lt;/p&gt;
&lt;p&gt;As with all algorithms, it wasn’t perfect and since it wasn’t designed for the use case of page previews, it also required tweaking.&lt;/p&gt;
&lt;p&gt;We had to make updates to limit the image to the first section of the article. Working with algorithms is hard, but for this purpose essential.&lt;/p&gt;
&lt;h4&gt;We had to generate a summary&lt;/h4&gt;
&lt;p&gt;We have several millions of pages, all stored as &lt;a href=&quot;https://www.mediawiki.org/wiki/Wikitext&quot;&gt;raw wikitext&lt;/a&gt;. How to summarise that without asking our editors to go in and painstakingly do that for every article?&lt;/p&gt;
&lt;p&gt;The busy Max Semenik who helped us with the thumbnails, also wrote &lt;a href=&quot;https://www.mediawiki.org/wiki/Extension:TextExtracts&quot;&gt;an extension to generate extracts of articles&lt;/a&gt;. It was originally written primarily for &lt;a href=&quot;https://en.wikipedia.org/wiki/Plain_text&quot;&gt;plain text&lt;/a&gt; summaries. Our initial versions of page previews used this, but we realised it wasn’t the best fit for what we were trying to do.&lt;/p&gt;
&lt;p&gt;So we stopped using this.&lt;/p&gt;
&lt;p&gt;We realised HTML was very important. For instance chemistry articles featured chemical formulae which needs subscript which requires HTML.&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;55694&quot; data-permalink=&quot;https://blog.wikimedia.org/2018/04/20/why-it-took-a-long-time-to-build-that-tiny-link-preview-on-wikipedia/water/&quot; data-orig-file=&quot;https://wikimediablog.files.wordpress.com/2018/04/water.png?w=347&amp;amp;h=429&quot; data-orig-size=&quot;347,429&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;water&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://wikimediablog.files.wordpress.com/2018/04/water.png?w=347&amp;amp;h=429?w=243&quot; data-large-file=&quot;https://wikimediablog.files.wordpress.com/2018/04/water.png?w=347&amp;amp;h=429?w=347&quot; class=&quot;size-full wp-image-55694 aligncenter&quot; src=&quot;https://wikimediablog.files.wordpress.com/2018/04/water.png?w=347&amp;amp;h=429&quot; alt=&quot;&quot; width=&quot;347&quot; height=&quot;429&quot; srcset=&quot;https://wikimediablog.files.wordpress.com/2018/04/water.png 347w, https://wikimediablog.files.wordpress.com/2018/04/water.png?w=121&amp;amp;h=150 121w, https://wikimediablog.files.wordpress.com/2018/04/water.png?w=243&amp;amp;h=300 243w&quot; sizes=&quot;(max-width: 347px) 100vw, 347px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;Consider how HTML is needed to generate summaries for content where subscript is important such as the chemical formula of water, shown here. Text from the English Wikipedia article on &lt;a href=&quot;https://en.wikipedia.org/wiki/Water&quot;&gt;water&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/3.0/deed.en&quot;&gt;CC BY-SA 3.0&lt;/a&gt;; &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Iceberg_with_hole_near_Sandersons_Hope_2007-07-28_2.jpg&quot;&gt;image&lt;/a&gt; by Kim Hansen, &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/3.0/deed.en&quot;&gt;CC BY-SA 3.0&lt;/a&gt;.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Many of our articles, begin with location information and pronunciation information. A lot of this content didn’t belong in our summaries and for other content it was less clear what belonged. The summaries had &lt;a href=&quot;https://medium.com/freely-sharing-the-sum-of-all-knowledge/how-we-designed-page-previews-for-wikipedia-and-what-could-be-done-with-them-in-the-future-7a5fa6b07b96&quot;&gt;a lot of design input&lt;/a&gt; and we identified which content shouldn’t appear inside a preview. We wrote up &lt;a href=&quot;https://www.mediawiki.org/wiki/Page_Previews/API_Specification&quot;&gt;a specification capturing the required behaviour&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;55695&quot; data-permalink=&quot;https://blog.wikimedia.org/2018/04/20/why-it-took-a-long-time-to-build-that-tiny-link-preview-on-wikipedia/coordinates-preview/&quot; data-orig-file=&quot;https://wikimediablog.files.wordpress.com/2018/04/coordinates-preview.png?w=210&amp;amp;h=55&quot; data-orig-size=&quot;210,55&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;coordinates preview&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://wikimediablog.files.wordpress.com/2018/04/coordinates-preview.png?w=210&amp;amp;h=55?w=210&quot; data-large-file=&quot;https://wikimediablog.files.wordpress.com/2018/04/coordinates-preview.png?w=210&amp;amp;h=55?w=210&quot; class=&quot;aligncenter size-full wp-image-55695&quot; src=&quot;https://wikimediablog.files.wordpress.com/2018/04/coordinates-preview.png?w=210&amp;amp;h=55&quot; alt=&quot;&quot; width=&quot;210&quot; height=&quot;55&quot; srcset=&quot;https://wikimediablog.files.wordpress.com/2018/04/coordinates-preview.png 210w, https://wikimediablog.files.wordpress.com/2018/04/coordinates-preview.png?w=150&amp;amp;h=39 150w&quot; sizes=&quot;(max-width: 210px) 100vw, 210px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;Location information features at the beginning of many articles proving problematic for summarising Wikipedia articles…&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;55696&quot; data-permalink=&quot;https://blog.wikimedia.org/2018/04/20/why-it-took-a-long-time-to-build-that-tiny-link-preview-on-wikipedia/pronunciation-info/&quot; data-orig-file=&quot;https://wikimediablog.files.wordpress.com/2018/04/pronunciation-info.png?w=396&amp;amp;h=54&quot; data-orig-size=&quot;396,54&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;pronunciation info&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://wikimediablog.files.wordpress.com/2018/04/pronunciation-info.png?w=396&amp;amp;h=54?w=300&quot; data-large-file=&quot;https://wikimediablog.files.wordpress.com/2018/04/pronunciation-info.png?w=396&amp;amp;h=54?w=396&quot; class=&quot;aligncenter size-full wp-image-55696&quot; src=&quot;https://wikimediablog.files.wordpress.com/2018/04/pronunciation-info.png?w=396&amp;amp;h=54&quot; alt=&quot;&quot; width=&quot;396&quot; height=&quot;54&quot; srcset=&quot;https://wikimediablog.files.wordpress.com/2018/04/pronunciation-info.png 396w, https://wikimediablog.files.wordpress.com/2018/04/pronunciation-info.png?w=150&amp;amp;h=20 150w, https://wikimediablog.files.wordpress.com/2018/04/pronunciation-info.png?w=300&amp;amp;h=41 300w&quot; sizes=&quot;(max-width: 396px) 100vw, 396px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;… as does pronunciation information.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;In the end we decided to build on top of an &lt;a href=&quot;https://en.m.wikipedia.org/wiki/Application_programming_interface&quot;&gt;API&lt;/a&gt; that was originally built for our native Android and iOS apps. We created a new API specifically for this purpose.&lt;/p&gt;
&lt;p&gt;We now generate the summary from the entire article HTML. We parse it just like a browser and &lt;a href=&quot;https://www.mediawiki.org/wiki/Page_Previews/API_Specification&quot;&gt;per the specification&lt;/a&gt; identify the first “non-empty” lead paragraph of every article.&lt;/p&gt;
&lt;p&gt;One of the big challenges here, was the decision to strip content inside parentheses. Since we support over 300 languages this had to be localised (not everyone uses the same character set!).&lt;/p&gt;
&lt;p&gt;Not only that, but of course some parentheses are vital… edge cases are everywhere. We had to think about all their potential usage and how best to do them.&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;55698&quot; data-permalink=&quot;https://blog.wikimedia.org/2018/04/20/why-it-took-a-long-time-to-build-that-tiny-link-preview-on-wikipedia/periodic-table-example/&quot; data-orig-file=&quot;https://wikimediablog.files.wordpress.com/2018/04/periodic-table-example.png?w=332&amp;amp;h=410&quot; data-orig-size=&quot;332,410&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;periodic table example&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://wikimediablog.files.wordpress.com/2018/04/periodic-table-example.png?w=332&amp;amp;h=410?w=243&quot; data-large-file=&quot;https://wikimediablog.files.wordpress.com/2018/04/periodic-table-example.png?w=332&amp;amp;h=410?w=332&quot; class=&quot;aligncenter size-full wp-image-55698&quot; src=&quot;https://wikimediablog.files.wordpress.com/2018/04/periodic-table-example.png?w=332&amp;amp;h=410&quot; alt=&quot;&quot; width=&quot;332&quot; height=&quot;410&quot; srcset=&quot;https://wikimediablog.files.wordpress.com/2018/04/periodic-table-example.png 332w, https://wikimediablog.files.wordpress.com/2018/04/periodic-table-example.png?w=121&amp;amp;h=150 121w, https://wikimediablog.files.wordpress.com/2018/04/periodic-table-example.png?w=243&amp;amp;h=300 243w&quot; sizes=&quot;(max-width: 332px) 100vw, 332px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;Sometimes content inside parentheses is important, as this example suggests. Identifying when they are important is hard. Text from the English Wikipedia article on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Periodic_table&quot;&gt;periodic table&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/3.0/deed.en&quot;&gt;CC BY-SA 3.0&lt;/a&gt;; &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Simple_Periodic_Table_Chart-en.svg&quot;&gt;image&lt;/a&gt; by Offnfopt, public domain.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Stripping parenthetical elements from user-generated HTML also turned out to be quite difficult. Whereas doing so in plain text requires a simple regular expression, things get more complicated when you consider nested HTML.&lt;/p&gt;
&lt;p&gt;It was important to ensure the content continued to make sense with the content inside parentheses stripped and that we that we didn’t add any security vulnerabilities.&lt;/p&gt;
&lt;p&gt;Thanks go to our &lt;a href=&quot;https://www.mediawiki.org/wiki/Wikimedia_Reading_Infrastructure_team&quot;&gt;Infrastructure team&lt;/a&gt; for helping us build out this API.&lt;/p&gt;
&lt;h4&gt;We work with our community&lt;/h4&gt;
&lt;p&gt;Our editing community cares a lot about our product. That’s why they write articles for you in their spare time for no monetary gain.&lt;/p&gt;
&lt;p&gt;We include them in every part of the process, working with them tirelessly to fix every edge case (whether it be broken summaries, or inappropriate images) and to reassure them we know what we are doing, the impact of why we are doing and why we are continuing to do it.&lt;/p&gt;
&lt;p&gt;Our initial version wasn’t good enough. Our community asked us &lt;a href=&quot;https://en.wikipedia.org/wiki/Wikipedia:Village_pump_%28proposals%29/Archive_131#Proposal:_Enable_Hovercards_by_default&quot;&gt;not to go ahead&lt;/a&gt; with it. We answered by listening to them and making it better.&lt;/p&gt;
&lt;p&gt;Thank you community and our community liaisons who helped facilitate those conversations!&lt;/p&gt;
&lt;h4&gt;Design design design&lt;/h4&gt;
&lt;p&gt;We did a lot of it. Our designer, Nirzar did &lt;a href=&quot;https://medium.com/freely-sharing-the-sum-of-all-knowledge/how-we-designed-page-previews-for-wikipedia-and-what-could-be-done-with-them-in-the-future-7a5fa6b07b96&quot;&gt;a great write up&lt;/a&gt; so I won’t bother sharing any more here, but design was at every step of the process whether it was the initial prototypes (thanks &lt;a href=&quot;https://wikimediafoundation.org/wiki/Staff_and_contractors&quot;&gt;Prateek Saxena&lt;/a&gt;!); discussing performance of the feature with our performance team; perfecting thumbnails and summaries; or talking to our community.&lt;/p&gt;
&lt;p&gt;Thank you &lt;a href=&quot;https://www.mediawiki.org/wiki/Design&quot;&gt;design team&lt;/a&gt;!&lt;/p&gt;
&lt;h4&gt;We had to instrument it&lt;/h4&gt;
&lt;p&gt;This was a big change to how people interact with our content. We care a lot about privacy in Wikimedia. We are likely to be one of the few (only?!) major websites who don’t install third party scripts to track you.&lt;/p&gt;
&lt;p&gt;Our &lt;a href=&quot;https://wikimediafoundation.org/wiki/Privacy_policy&quot;&gt;privacy policy&lt;/a&gt; forbids us from giving away data about you.&lt;/p&gt;
&lt;p&gt;We don’t use vendors to A/B test or analyse our user’s behaviour.&lt;/p&gt;
&lt;p&gt;Yet, despite all this, we don’t cut corners.&lt;/p&gt;
&lt;p&gt;We don’t want to make dumb risky changes.&lt;/p&gt;
&lt;p&gt;Every time we build something major we have to build out the infrastructure to evaluate it. We construct hypothesizes and tests to test those hypothesizes. We build it. We test it. We listen to the data. We adapt. We test again.&lt;/p&gt;
&lt;p&gt;This means we juggle being a product team and an analytics team. Our development team wear multiple hats. Given the scale we work at have to deal with bugs. Occasionally, &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1379762&quot;&gt;we find major bugs in browser vendors&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our final A/B test by Tilman Bayer gave us many answers. It’s a &lt;a href=&quot;https://www.mediawiki.org/wiki/Page_Previews/2017-18_A/B_Tests&quot;&gt;great read&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Given the findings of that A/B test we also decided to start measuring “page preview views” as an additional metric to page views. That metric is firing &lt;a href=&quot;https://grafana.wikimedia.org/dashboard/db/eventlogging-schema?orgId=1&amp;amp;var-datasource=eqiad%20prometheus%2Fops&amp;amp;var-schema=VirtualPageView&amp;amp;from=now-7d&amp;amp;to=now&quot;&gt;1000 events per second&lt;/a&gt; and our &lt;a href=&quot;https://wikitech.wikimedia.org/wiki/Analytics&quot;&gt;analytics team&lt;/a&gt; is kicking ass dealing with that sort of scale.&lt;/p&gt;
&lt;p&gt;Thank you analysts, thank you analytics team!&lt;/p&gt;
&lt;h4&gt;We had to scale our API to support you&lt;/h4&gt;
&lt;p&gt;We are seeing &lt;a href=&quot;https://grafana.wikimedia.org/dashboard/db/reading-web-page-previews?refresh=1m&amp;amp;orgId=1&amp;amp;panelId=2&amp;amp;fullscreen&quot;&gt;5,000 hits to our API a minute&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are seeing &lt;a href=&quot;https://grafana.wikimedia.org/dashboard/db/reading-web-page-previews?refresh=1m&amp;amp;orgId=1&amp;amp;panelId=2&amp;amp;fullscreen&quot;&gt;5,000 hits to our API a minute&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I say that twice because that’s a high volume of traffic.&lt;/p&gt;
&lt;p&gt;Our &lt;a href=&quot;https://www.mediawiki.org/wiki/API:Main_page&quot;&gt;traditional APIs&lt;/a&gt; were originally built for bots to help clean up your edits. They weren’t designed for readers.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.mediawiki.org/wiki/Wikimedia_Services&quot;&gt;Wikimedia services team&lt;/a&gt; has been vital to the success of this project by providing the infrastructure to deal with, dealing with a lot of the caching (we rely heavily on &lt;a href=&quot;https://en.wikipedia.org/wiki/Varnish_%28software%29&quot;&gt;Varnish&lt;/a&gt;) and making sure when content gets edited new summaries get generated. It’s well known that &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_invalidation&quot;&gt;cache invalidation&lt;/a&gt; is one of the harder Computer Science problems.&lt;/p&gt;
&lt;p&gt;Thank you services team!!&lt;/p&gt;
&lt;h4&gt;Thank you thank you thank you&lt;/h4&gt;
&lt;p&gt;Shipping something always feels good. I hope the “simple” preview my team with the help of many teams across the Wikimedia Foundation has shipped enriches your experience.&lt;/p&gt;
&lt;p&gt;Lot’s of us have obviously been involved and we’re proud of what we’ve put out.&lt;/p&gt;
&lt;p&gt;We’re not done. Software is never done.&lt;/p&gt;
&lt;p&gt;We have code to clean up and &lt;a href=&quot;https://medium.com/freely-sharing-the-sum-of-all-knowledge/how-we-designed-page-previews-for-wikipedia-and-what-could-be-done-with-them-in-the-future-7a5fa6b07b96&quot;&gt;new ideas&lt;/a&gt; for how to grow this small little feature.&lt;/p&gt;
&lt;p&gt;Some might say we’re only seeing the tip of the iceberg.&lt;/p&gt;
&lt;p&gt;———&lt;/p&gt;
&lt;p&gt;The Wikimedia Foundation is a non-profit and relies on donations from people like you to keep the site up and running in such a way that it lives up to our values. To help us continue to build features like this, &lt;a href=&quot;https://wikimediafoundation.org/wiki/Ways_to_Give&quot;&gt;please consider donating to us&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.mediawiki.org/wiki/User:Jdlrobson&quot;&gt;Jon Robson&lt;/a&gt;, Senior Software Engineer, Desktop &amp;amp; Mobile Web&lt;/em&gt;&lt;br/&gt;&lt;em&gt;Wikimedia Foundation&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Want to learn more? See the &lt;a href=&quot;https://blog.wikimedia.org/2018/04/17/wikipedia-page-previews/&quot;&gt;original announcement&lt;/a&gt; and &lt;a href=&quot;https://blog.wikimedia.org/2018/04/18/how-we-designed-page-previews-for-wikipedia/&quot;&gt;how we designed page previews&lt;/a&gt;.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post &lt;a href=&quot;https://medium.com/freely-sharing-the-sum-of-all-knowledge/why-it-took-a-long-time-to-build-that-tiny-link-preview-on-wikipedia-d5bd734df8fe&quot;&gt;originally&lt;/a&gt; appeared in “Down the rabbit hole,” our Medium publication. It has been modified for re-publication on the Wikimedia blog.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 23 Apr 2018 08:36:22 +0000</pubDate>
<dc:creator>Yossi_Frenkel</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.wikimedia.org/2018/04/20/why-it-took-a-long-time-to-build-that-tiny-link-preview-on-wikipedia/</dc:identifier>
</item>
<item>
<title>Renting is Throwing Money Away, Right? (2015)</title>
<link>https://affordanything.com/is-renting-better-than-buying-should-i-rent-or-buy/</link>
<guid isPermaLink="true" >https://affordanything.com/is-renting-better-than-buying-should-i-rent-or-buy/</guid>
<description>&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-7860&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/Should-I-rent-or-buy-e1448321160415.jpg&quot; alt=&quot;Renting is throwing money away. Isn't it? &quot; width=&quot;700&quot; height=&quot;467&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I’ve heard a lot of ridiculous statements:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;“I’m sure we’ll find parking.”&lt;/li&gt;
&lt;li&gt;“I’ll just check Facebook for five minutes.”&lt;/li&gt;
&lt;li&gt;“I’ll skip dessert.”&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;But perhaps the most absurd is the adage: “If you’re a renter, you’re throwing money away.”&lt;/p&gt;
&lt;p&gt;Bulls**t.&lt;br/&gt;&lt;span id=&quot;more-7856&quot;/&gt;&lt;br/&gt;You’ve heard those statements, right?&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;“I’m sick of throwing money away on rent.”&lt;/li&gt;
&lt;li&gt;“Buying is always better than renting.”&lt;/li&gt;
&lt;li&gt;“Your home is your biggest investment.”&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I’m going to explain why these clichés are ludicrous. Preposterous. Outlandish. Nonsensical.&lt;/p&gt;
&lt;p&gt;(Somebody please take the thesaurus away from me.)&lt;/p&gt;
&lt;p&gt;Let’s chat about the &lt;strong&gt;“should I&lt;/strong&gt; &lt;strong&gt;rent or buy?” question&lt;/strong&gt; using logic, math and reason, rather than ill-informed clichés.&lt;/p&gt;
&lt;p&gt;Before we jump in, let’s establish a few premises:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;This article is about your primary residence (the place where you sleep).&lt;/li&gt;
&lt;li&gt;This is &lt;em&gt;&lt;u&gt;not&lt;/u&gt;&lt;/em&gt; an article about real estate investing.&lt;/li&gt;
&lt;li&gt;As with all articles on Afford Anything, these high-level concepts can be applied anywhere. But specifics about laws, taxes, inflation, etc., are geared at a United States audience.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;With that said, let’s begin.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://afford.leadpages.co/leadbox/14de24073f72a2%3A14e257046b46dc/5802161648697344/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/rU-z0la_ZyrfMMSk342FK6_DvaZkLD6VgIWmrkAe9cVPJBEHhORo6ps9Id5W-Wf5IyBIWnXvuQ_8TVOW60-l3e8=s0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;“Renting is Throwing Money Away”&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Here are three popular arguments defending the “renting is throwing money away” myth.&lt;/p&gt;
&lt;p&gt;#1: Rent is an expense. Mortgages build equity.&lt;/p&gt;
&lt;p&gt;#2: Rent is forever. Mortgages end.&lt;/p&gt;
&lt;p&gt;#3: Renters don’t benefit from rising home values. Homeowners do.&lt;/p&gt;
&lt;p&gt;Let’s dismantle these, one-by-one.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Argument #1: “Rent is an expense. Mortgages build equity.”&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Here’s the argument, broken down:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;If you &lt;strong&gt;rent&lt;/strong&gt;, 0% of your monthly payments build equity.&lt;/li&gt;
&lt;li&gt;If you &lt;strong&gt;own&lt;/strong&gt;, X% of your monthly payments build equity.&lt;/li&gt;
&lt;li&gt;X &amp;gt; 0&lt;/li&gt;
&lt;li&gt;Equity is an asset.&lt;/li&gt;
&lt;li&gt;Assets are good.&lt;/li&gt;
&lt;li&gt;Therefore, owning is better than renting.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Here’s why this is flawed logic.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;What is Home Equity?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;First, background information:&lt;/p&gt;
&lt;p&gt;“Home equity” is measured as &lt;em&gt;what you own&lt;/em&gt;, minus &lt;em&gt;what you owe&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Home value:&lt;/strong&gt; $350,000&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You owe:&lt;/strong&gt; $200,000&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Your equity:&lt;/strong&gt; $150,000&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Here’s the rub: Only a small slice of your mortgage payment builds equity.&lt;/p&gt;
&lt;p&gt;Your mortgage consists of four parts:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Principal (the equity-building piece)&lt;/li&gt;
&lt;li&gt;Interest&lt;/li&gt;
&lt;li&gt;Taxes&lt;/li&gt;
&lt;li&gt;Insurance&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;These are collectively called PITI, which leads to the geeky joke, “Mortgage? What a pity.” &lt;em&gt;(I probably shouldn’t attempt a stand-up comedy career … )&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The “P” is equity; the “ITI” is an expense.&lt;/strong&gt; In other words, the “ITI” is money that you’re (also) “throwing away.”&lt;/p&gt;
&lt;p&gt;How much of your monthly payment is consumed by ITI? Most of it, particularly during the first 15 years of your loan.&lt;/p&gt;
&lt;p&gt;Mortgages are &lt;em&gt;amortized&lt;/em&gt;, which means the overwhelming majority of your initial payments are applied towards &lt;em&gt;interest&lt;/em&gt; rather than principal.&lt;/p&gt;
&lt;p&gt;Let’s look at an example of a $250,000 house. Let’s image the following scenario:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You make a $50,000 down payment.&lt;/li&gt;
&lt;li&gt;You borrow $200,000.&lt;/li&gt;
&lt;li&gt;You hold a 5 percent fixed-rate 30-year mortgage.&lt;/li&gt;
&lt;li&gt;Property taxes cost $3,000 per year.&lt;/li&gt;
&lt;li&gt;Homeowners insurance costs $1,500 per year.&lt;/li&gt;
&lt;li&gt;No mortgage insurance.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Your mortgage payment comes to &lt;strong&gt;$1,448.64 per month.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-7866&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/how-much-money-will-the-mortgage-cost.jpg&quot; alt=&quot;How much money will the mortgage cost?&quot; width=&quot;898&quot; height=&quot;333&quot; srcset=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/how-much-money-will-the-mortgage-cost.jpg 898w, https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/how-much-money-will-the-mortgage-cost-300x111.jpg 300w&quot; sizes=&quot;(max-width: 898px) 100vw, 898px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;How do these payments break down?&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-7865&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/How-much-money-goes-to-principal-vs-interest-e1448323143342.jpg&quot; alt=&quot;Amortization Table -- How Much of Your Mortgage Payment Goes to Interest?&quot; width=&quot;700&quot; height=&quot;670&quot;/&gt;&lt;/p&gt;
&lt;p&gt;[Thanks to my friend Todd Tresidder at the blog Financial Mentor for this awesome &lt;a href=&quot;http://financialmentor.com/calculator/mortgage-payment-calculator-amortization-schedule&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;amortization calculator&lt;/a&gt;. Yes, I just used the word “awesome” to describe an amortization calculator. #ImNerdyAndIKnowIt ]&lt;/p&gt;
&lt;p&gt;During the first year, &lt;strong&gt;roughly 83 cents of every dollar&lt;/strong&gt; goes towards interest, taxes and insurance (ITI) in this example.&lt;/p&gt;
&lt;p&gt;You’re not building $1,448 in equity with each payment. You’re building $250 at best.&lt;/p&gt;
&lt;p&gt;After 13 payments, you’ll pay almost $15,000 in interest, taxes and insurance. ($14,795.71, to be exact.) And you’ll only hold an extra $2,963 in equity.&lt;/p&gt;
&lt;p&gt;Yeowch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The tipping point&lt;/strong&gt;, when more money is applied to principal than interest, is based on your interest rate.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-7870&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/at-what-point-do-you-start-paying-more-in-principal-than-interest-on-your-mortgage.jpg&quot; alt=&quot;How long does it take to reach the 'tipping point' -- when your mortgage payments cover more principal than interest? Around 12-18 years, depending on your interest rate.&quot; width=&quot;700&quot; height=&quot;469&quot; srcset=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/at-what-point-do-you-start-paying-more-in-principal-than-interest-on-your-mortgage.jpg 1358w, https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/at-what-point-do-you-start-paying-more-in-principal-than-interest-on-your-mortgage-300x201.jpg 300w, https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/at-what-point-do-you-start-paying-more-in-principal-than-interest-on-your-mortgage-1024x686.jpg 1024w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;During that first 13-19 years of your mortgage, you’re buried deep in the ITI sandbox. You’ll spend the final decade of your mortgage building far more equity than you did during the first two decades.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“What if I get a 15-year mortgage?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Your first 7 years are going to suck.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key Takeaway:&lt;/strong&gt; You’re not building much equity, especially during the first decade-and-a-half. Most of your mortgage payment gets “thrown away” on interest, taxes and insurance.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-7871&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/is-rent-just-throwing-money-away-e1448329989753.jpg&quot; alt=&quot;Is renting just throwing money away?&quot; width=&quot;700&quot; height=&quot;467&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Now that we’ve established this background, let’s return to the original argument:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;If you &lt;strong&gt;rent&lt;/strong&gt;, 0% of your monthly payments build equity.&lt;/li&gt;
&lt;li&gt;If you &lt;strong&gt;own&lt;/strong&gt;, X% of your monthly payments build equity.&lt;/li&gt;
&lt;li&gt;X &amp;gt; 0&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Okay, that logic still seems solid, right? Even if you’re not building much equity, surely &lt;em&gt;some equity&lt;/em&gt; is better than none … right?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Riiiighhht?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Not necessarily. Here’s the real question you should ask:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s the next best alternative?&lt;/strong&gt; Is building equity the highest-and-best use of your money? Or could you be doing something better with your limited resources?&lt;/p&gt;
&lt;p&gt;Phrased another way: &lt;strong&gt;What’s the opportunity cost&lt;/strong&gt; of this equity-building?&lt;/p&gt;


&lt;p&gt;&lt;em&gt;“Uhhh …. Opportunity cost? What do you mean?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Okay, before we launch into this, here’s one more fact that you need to know:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter wp-image-7872&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/weird-pictures-that-have-nothing-to-do-with-inflation.jpg&quot; alt=&quot;Check out this weird photo that has nothing to do with inflation. Then tune in for a conversation about something that's a little boring, but totally important.&quot; width=&quot;700&quot; height=&quot;467&quot; srcset=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/weird-pictures-that-have-nothing-to-do-with-inflation.jpg 2048w, https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/weird-pictures-that-have-nothing-to-do-with-inflation-300x200.jpg 300w, https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/weird-pictures-that-have-nothing-to-do-with-inflation-1024x683.jpg 1024w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Home Values Keep Pace with Inflation&lt;/h2&gt;
&lt;p&gt;Home values historically keep pace with inflation. Nothing more.&lt;/p&gt;
&lt;p&gt;When people say, “my home increased in value,” they’re really saying, “yay, inflation rose!”&lt;/p&gt;
&lt;p&gt;Don’t take my word for it. Listen to Nobel-Prize winning Yale economist Robert Shiller, who gained public notoriety for predicting the Great Recession.&lt;/p&gt;
&lt;p&gt;As early as 2005, Shiller started issuing warnings about an impending drop in real estate prices that could be as severe as 40 percent.&lt;/p&gt;
&lt;p&gt;Did he have a crystal ball? Is he magical? How did he anticipate this?&lt;/p&gt;
&lt;p&gt;His strategy is ridiculously simple, yet effective. Shiller simply looked at U.S. housing prices dating back to 1890, stripping away inflation. He “benchmarked” the 1890 prices at a value of 100 and tracked relative housing costs through the lens of inflation-adjusted dollars.&lt;/p&gt;
&lt;p&gt;Through this, Shiller made a few observations:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;A house in 1897 cost the same as a house in 1997,&lt;/strong&gt; adjusted for inflation.&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If you benchmark 1890 prices at a value of 100, you’ll notice that U.S. housing prices have stayed within the 100-120 range over the past century.&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;In 1950, for example, the index stood at 105; in 1996 the index stood at 106. &lt;em&gt;Real estate didn’t make any gains (other than inflation) during that 46-year timespan.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Starting in 1997, an unprecedented bubble began forming.&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Every housing ‘peak,’ or bubble, is followed by a tragic, painful, ugly fall.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The New York Times &lt;a href=&quot;http://www.nytimes.com/imagepages/2006/08/26/weekinreview/27leon_graph2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ran this scary chart&lt;/a&gt; in 2006 (before the recession), based on data from Shiller’s groundbreaking book &lt;em&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0691166269/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0691166269&amp;amp;linkCode=as2&amp;amp;tag=afforanyth-20&amp;amp;linkId=VRYSSNEO77CDULMT&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Irrational Exuberance&lt;/a&gt;&lt;/em&gt;. (I’ve added red arrows for emphasis).&lt;/p&gt;
&lt;div id=&quot;attachment_7868&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;32&quot;&gt;&lt;img class=&quot;size-full wp-image-7868&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/Home-values-barely-keep-pace-with-inflation-e1448327607802.jpg&quot; alt=&quot;Home values barely keep pace with inflation&quot; width=&quot;700&quot; height=&quot;568&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Image credit: The New York Times&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As you can see, housing prices (adjusted for inflation) typically stay within a narrow range — around 100-120 on that chart.&lt;/p&gt;
&lt;p&gt;There have been only two notable exceptions. The first was triggered by the austerity of World War I, ending with post-WWII prosperity. The second was the rampant housing boom that started in 1997. And, well, we know how that story ends.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“But housing is booming now!”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Sure, some people who bought at the bottom of the market in 2009 are now sipping champagne on the French Riviera. (I’m kidding. Kinda.)&lt;/p&gt;
&lt;p&gt;Home prices in many parts of the nation have doubled since the 2008-2009 lows. &lt;strong&gt;But in that same time period, the total U.S. stock market has nearly tripled.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-7869&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/The-total-US-stock-market-has-tripled-e1448328147296.png&quot; alt=&quot;The total US stock market has nearly tripled&quot; width=&quot;700&quot; height=&quot;578&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In March 2009, the Dow Jones (a measure of the largest U.S. stocks) was valued at 6,626. Today its worth 3x more.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key takeaway:&lt;/strong&gt; Housing keeps pace with inflation. And when it does produce real gains, it often underperforms the overall U.S. broad market.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;If we cherry-pick dates,&lt;/strong&gt; we can find a specific sliver of the population that’s enjoyed runaway home values since 2009. Housing &lt;em&gt;underperformed&lt;/em&gt; the overall stock market during that same period.&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;If we cherry-pick locations,&lt;/strong&gt; we can find specific towns or cities that enjoyed atypical growth, typically due to external influences like rapid job creation. This falls along a bell curve; we can also find towns and cities with unprecedented levels of decline. (Ahem, Detroit.)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;When we stop cherry-picking and “zoom out” into a multi-decade macro view, we’re left with the uncomfortable truth that U.S. housing prices don’t substantially increase in value. They merely keep pace with inflation, and they &lt;em&gt;significantly&lt;/em&gt; underperform the overall U.S. stock market.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-7873&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/Should-I-rent-or-buy-my-home-e1448331047909.jpg&quot; alt=&quot;Should I rent or buy my home?&quot; width=&quot;700&quot; height=&quot;467&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Should I Rent or Buy?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;“So what? Why are you comparing housing to stocks? You have to live somewhere. You don’t have to buy stocks.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We’re making this comparison because we’re asking the following question:&lt;/p&gt;
&lt;p&gt;Are you better off:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Tying up your cash into a home&lt;/li&gt;
&lt;li&gt;Finding an alternative investment, coupled with a rent payment?&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Any cash that’s tied up in home equity, including the down payment, is locked into a lifetime of just-keeping-pace-with-inflation.&lt;/p&gt;
&lt;p&gt;This opportunity cost, combined with the additional overhead of homeownership, can (in many markets) negate any advantage that comes from owning.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Paula, that sounded like whoomp –whoomp –whoomp. Like Charlie Brown’s teacher. I understood about 0.0000001% of whatever you just said.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Okay, let’s …&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Seriously, Paula, this is too technical. It’s making my head hurt.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Alright, let’s walk through an example together.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Fine. But you’re competing with Miley Cyrus’ latest tweets. And I gotta say, those are WAY more racy.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Gotcha. Check this out:&lt;/p&gt;
&lt;h2&gt;Meet Renter Rachel and Owner Owen&lt;/h2&gt;
&lt;p&gt;Let’s meet Rachel and Owen, two people who are both hardcore savers. They haven’t met, because they’re figments of my imagination.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Obvious disclaimer:&lt;/strong&gt; This example is for illustrative purposes only. Your personal expenses will be different. &lt;em&gt;Duh.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This example is meant to illustrate that homeownership is not the slam-dunk golden ticket that society likes to believe.&lt;/p&gt;
&lt;p&gt;Here’s an illustrative example of one situation in which the buy vs. rent case isn’t so clear-cut.&lt;/p&gt;
&lt;p&gt;Please DO NOT pitch a fit in the comments about &lt;em&gt;“waaahhh, my interest rate is lower!”&lt;/em&gt; because this tells me you missed the point.&lt;/p&gt;
&lt;p&gt;The point = &lt;strong&gt;crunch the numbers using the specifics of your personal situation&lt;/strong&gt;, instead of making a six-figure decision based on an oversimplified cliche.&lt;/p&gt;
&lt;p&gt;Intuitively, we all know that if you’re going to live somewhere for one year, renting is better. And if you’re going to live somewhere for 40 years, buying is better.&lt;/p&gt;
&lt;p&gt;Somewhere between one year and 40 years is the crossover point, where buying becomes better than renting. It might be 5 years. It might be 10 years. It might be 15 years. It might be 20 years. It might be 25 years.&lt;/p&gt;
&lt;p&gt;The question, then, is: &lt;strong&gt;Where is that crossover point?&lt;/strong&gt; How can you solve this puzzle?&lt;/p&gt;
&lt;p&gt;The solution comes from running scenarios based on a massive variety of factors, including the price-to-rent ratio in your area (we’ll dive into that concept later in this article), prevailing interest rates, tax brackets, utility costs, HOA fees, alternative investment opportunities and a long list of other factors.&lt;/p&gt;
&lt;p&gt;Every human will have unique data points. That’s why every person should crunch the numbers based on their own personal situation.&lt;/p&gt;
&lt;p&gt;If you don’t like the numbers in the example below, re-run the scenario using your own numbers. &lt;em&gt;That’s the point.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Don’t buy into oversimplified cliches like “renting is throwing your money away.” Don’t oversimplify a six-figure decision.&lt;/p&gt;
&lt;p&gt;Onto the example:&lt;/p&gt;
&lt;p&gt;Rachel and Owen separately saved half of their income for the past few years. Now they each hold $102,500 in cash.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Rachel is a renter.&lt;/strong&gt; Her rent costs $2,500 per month.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Owen is an owner.&lt;/strong&gt; His mortgage costs $2,500 per month.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Rachel paid her landlord a security deposit of $2,500. She invested $100,000 into an &lt;a href=&quot;http://affordanything.com/2014/06/10/the-ultimate-beginners-guide-to-financial-awesomeness/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Total U.S. Stock Market Index Fund&lt;/a&gt; that earns an 8 percent long-term annualized average.&lt;/p&gt;
&lt;p&gt;Owen’s mortgage consists of $2,000 for principal and interest and $500 for taxes and insurance. He carries a 30-year fixed-rate mortgage with a 5 percent interest rate, which means his loan balance is $372,500 and the value of the home is $465,000.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;“Can Rachel and Owen live in equivalent homes?”&lt;/em&gt;&lt;/strong&gt; — Yes, if the &lt;strong&gt;price-to-rent ratio&lt;/strong&gt; in their area is 15.5.&lt;/p&gt;
&lt;p&gt;We’ll deep-dive into the concept of price-to-rent (P/R) ratio later in this article. Stay tuned.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter wp-image-7874&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/whats-the-mortgage-on-a-350000-home.png&quot; alt=&quot;What is the mortgage on a $350,000 home?&quot; width=&quot;700&quot; height=&quot;335&quot; srcset=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/whats-the-mortgage-on-a-350000-home.png 1132w, https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/whats-the-mortgage-on-a-350000-home-300x144.png 300w, https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/whats-the-mortgage-on-a-350000-home-1024x490.png 1024w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;To buy this house, Owen made an initial payment of $102,500, which divides out as $92,500 for the down payment (which is 20 percent of the home value) plus another $10,000 for the buyer’s side of closing costs.&lt;/p&gt;
&lt;p&gt;In other words:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Both started with the same amount of money.&lt;/li&gt;
&lt;li&gt;Rachel used her money to invest in a broad-market index fund.&lt;/li&gt;
&lt;li&gt;Owen used his money to make a 20% down payment on a home.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Rachel and Owen both live in their respective homes for 10 years.&lt;/p&gt;
&lt;p&gt;During that time:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Rachel’s rent rises 2% per year.&lt;/li&gt;
&lt;li&gt;Owen’s home value climbs 2% per year.&lt;/li&gt;
&lt;li&gt;Inflation increases 2% per year.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Are you with me so far? Sweet.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-7891&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/opportunity-cost-of-buying-a-home.jpg&quot; alt=&quot;What's the opportunity cost of homeownership?&quot; width=&quot;700&quot; height=&quot;453&quot; srcset=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/opportunity-cost-of-buying-a-home.jpg 700w, https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/opportunity-cost-of-buying-a-home-300x194.jpg 300w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Let’s talk about Owen’s mortgage:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Owen has a fixed-rate, 30-year mortgage.&lt;/li&gt;
&lt;li&gt;His principal and interest payments stay the same, so he repays his loan with increasingly cheaper dollars over time (as inflation kicks in).&lt;/li&gt;
&lt;li&gt;His property taxes and homeowner’s insurance premiums rise at the rate of inflation, which means his total mortgage payment climbs slightly.&lt;/li&gt;
&lt;li&gt;He sets aside one percent of the home value, or $4,650 per year, to take care of maintenance, repairs and renovations. (He loses much of this value to depreciation of fixtures and mechanicals, which he replaces and upgrades in 10 years before listing the home for sale.)&lt;/li&gt;
&lt;li&gt;He pays $300 per month in HOA dues.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-7890&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/maintenance-and-fees-on-a-home.jpg&quot; alt=&quot;Maintenance and fees on a home&quot; width=&quot;700&quot; height=&quot;458&quot; srcset=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/maintenance-and-fees-on-a-home.jpg 700w, https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/maintenance-and-fees-on-a-home-300x196.jpg 300w, https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/maintenance-and-fees-on-a-home-536x350.jpg 536w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Note: I ran this scenario through multiple online calculators. Each one gave me a slightly different answer. I’m posting screenshots from the &lt;a href=&quot;http://www.nytimes.com/interactive/2014/upshot/buy-rent-calculator.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NYTimes calculator&lt;/a&gt;. Please allow for slight variations, such as a $2,500 payment vs. a $2,557 payment, based on answers from divergent calculators. These minor differences don’t significantly affect the outcome.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Still with me? Let’s look at their utilities, maintenance and insurance:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Owen and Rachel pay equal electricity, gas, cable and internet bills.&lt;/li&gt;
&lt;li&gt;Rachel’s landlord covers water, sewer and trash, while Owen pays $85 per month for these combined services.&lt;/li&gt;
&lt;li&gt;Rachel pays $307 per year in renter’s insurance.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Finally, let’s chat about taxes and fees:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Owen pays a six percent commission to the real estate agent when he sells his home.&lt;/li&gt;
&lt;li&gt;Owen itemizes his tax deductions and deducts his mortgage interest.&lt;/li&gt;
&lt;li&gt;Both Rachel and Owen pay a 20 percent marginal tax rate.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-7892&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/cost-of-buying-and-selling-a-home.jpg&quot; alt=&quot;What's the cost of buying and selling a home?&quot; width=&quot;700&quot; height=&quot;242&quot; srcset=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/cost-of-buying-and-selling-a-home.jpg 700w, https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/cost-of-buying-and-selling-a-home-300x104.jpg 300w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Any guesses on which person holds the upper hand?&lt;/p&gt;
&lt;p&gt;Anyone?&lt;/p&gt;
&lt;p&gt;Seriously, take a guess. C’mon now. Close your eyes …&lt;/p&gt;
&lt;p&gt;Okay, got it?&lt;/p&gt;
&lt;p&gt;Well, the results are in …. &lt;strong&gt;Rachel and Owen performed about the same.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;They’re neck-and-neck.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-7879&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/when-is-renting-better-than-buying-e1448332914698.png&quot; alt=&quot;When is renting a home better than buying?&quot; width=&quot;700&quot; height=&quot;434&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“But I thought renting is throwing your money away?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;How is this possible?&lt;/p&gt;
&lt;p&gt;Both Rachel and Owen paid &lt;strong&gt;opportunity costs.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Rachel lost the opportunity to enjoy equity gains. This is exactly what people talk about when they make the argument that “buying is better than renting because you build equity.”&lt;/p&gt;
&lt;p&gt;She missed the opportunity for equity gains from three sources:&lt;/p&gt;
&lt;p&gt;(1) Principal contributions&lt;/p&gt;
&lt;p&gt;(2) Renovations and upgrades&lt;/p&gt;
&lt;p&gt;(3) Market growth&lt;/p&gt;
&lt;p&gt;We’ll talk about these later in this article.&lt;/p&gt;
&lt;p&gt;Owen, however, paid equal opportunity costs by missing out on the chance to invest $100,000 into an index fund. &lt;strong&gt;He tied up cash in a non-performing asset.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’m going to repeat this one more time for emphasis, because it’s so crucial:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tying up your cash&lt;/strong&gt; in a nonperforming or weak-performing asset carries a giant freakin’ opportunity cost.&lt;/p&gt;
&lt;p&gt;Can I repeat that again?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Actually, can you tattoo that on your forehead?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Tying up your cash in a nonperforming or weak-performing asset … sucks.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-7878&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/IMG_5957-e1448332869773.jpg&quot; alt=&quot;The cost of keeping your cash tied up&quot; width=&quot;700&quot; height=&quot;525&quot;/&gt;&lt;/p&gt;
&lt;p&gt;[Quick tangent: Many real estate investors cite this to support “no-money-down,” high-leverage strategies. But this (1) costs higher interest rates, (2) costs mortgage insurance, and (3) creates a frightening risk profile. Anyway, this &lt;em&gt;isn’t&lt;/em&gt; an article about real estate investing, and most primary-residence homeowners want to build equity, so I’ll stop this tangent.]&lt;/p&gt;
&lt;p&gt;Back to Owen and Rachel:&lt;/p&gt;
&lt;p&gt;To be clear, &lt;em&gt;both&lt;/em&gt; of them paid an opportunity cost. And in this specific example, with a specific set of assumptions, &lt;strong&gt;their overall net result was the same.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;“But I’m a Special Snowflake!”&lt;/h2&gt;
&lt;p&gt;“My situation is different,” you might be thinking. “My HOA is lower. I’m in a higher tax bracket. I can qualify for 4.5 percent interest instead of 5 percent.”&lt;/p&gt;
&lt;p&gt;Yeah. &lt;em&gt;That’s the point.&lt;/em&gt;&lt;br/&gt;&lt;strong&gt;&lt;br/&gt;The myth that “renting is throwing your money away” misses this nuance and detail.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Don’t oversimplify the biggest purchase of your life by claiming that building equity is always superior.&lt;/p&gt;


&lt;p&gt;You’re purchasing equity. And every purchase carries a tradeoff. When you buy equity, you necessarily &lt;em&gt;don’t&lt;/em&gt; buy something else. Every dollar holds an opportunity cost.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Oh, don’t make me say it —)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://affordanything.com/2015/08/29/the-12-essential-lessons-i-want-to-share-about-money-and-life/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;You can afford anything, but not everything.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(There! I said it!)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;“But I’m the Special-est Snowflake of All!”&lt;/h2&gt;
&lt;p&gt;[&lt;strong&gt;UPDATE 11/30/2015:&lt;/strong&gt; I’m getting flack from a lot of Special Snowflakes in the comments. Their arguments are along the lines of: &lt;em&gt;“Waahh! I’m such a special snowflake! Your hypothetical illustration should have precisely reflected MY situation!”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Are you having that same thought? Re-read this Special Snowflake section.&lt;/p&gt;
&lt;p&gt;The headline of this article isn’t:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;“Housing might be a good deal if your interest rate is 4 percent instead of 5 percent!”&lt;/li&gt;
&lt;li&gt;“Housing might be a good deal if you live there until you die!”&lt;/li&gt;
&lt;li&gt;“Housing might be a good deal if the P/R ratio in your area is less than 15!”&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Stop griping about the fact that your specific life doesn’t match the example. You &lt;em&gt;personally&lt;/em&gt; may not have HOA fees, but that’s not true for everyone. &lt;strong&gt;Furthermore, it’s irrelevant.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Your Special Snowflake circumstances don’t change the fact that everyone is responsible for analyzing their own variables. Don’t base the biggest purchase of your life on an intellectually lazy cliche.&lt;/p&gt;
&lt;p&gt;In this article:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;I give you the &lt;strong&gt;exact tools and steps&lt;/strong&gt; to run these numbers for yourself.&lt;/li&gt;
&lt;li&gt;I give you a &lt;strong&gt;framework for understanding&lt;/strong&gt; the myriad of variables that play into this decision.&lt;/li&gt;
&lt;li&gt;I &lt;strong&gt;empower you&lt;/strong&gt; to conduct your own analysis and make your own decision, based on your own circumstances, rooted in logic and math.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Many people will grasp the lesson. And they’ll be richer for it.&lt;/p&gt;
&lt;p&gt;Others, unfortunately, lack the ability to wade out of the details of a hypothetical illustration.&lt;/p&gt;
&lt;p&gt;They’re more focused on nit-picking the deviations between themselves and one illustrative example — &lt;em&gt;“waaahhh! my HOA is smaller!”&lt;/em&gt; — that they miss the bigger point.&lt;/p&gt;
&lt;p&gt;And in doing so, they shortchange themselves from an opportunity to learn.&lt;/p&gt;
&lt;p&gt;The next time you get social pressure to “stop throwing money away on rent,” come back to this article. &lt;a href=&quot;http://www.nytimes.com/interactive/2014/upshot/buy-rent-calculator.html?_r=0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Crunch the numbers,&lt;/a&gt; using a calculator that lets you input a wide variety of variables.&lt;/p&gt;
&lt;p&gt;Wealthy people think for themselves. Mediocre people cave to social pressure and lazy cliches.&lt;/p&gt;


&lt;h2&gt;Three FAQ’s About Rachel and Owen&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;em&gt;“Why is Owen paying 5 percent interest? Aren’t today’s interest rates around 4.6 percent? That’s a 0.4 percent difference!!”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s learn history, shall we?&lt;/p&gt;
&lt;p&gt;From 1971 to 2015, &lt;a href=&quot;http://www.freddiemac.com/pmms/pmms30.htm&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;mortgage interest rates (APY)&lt;/a&gt; ranged from a low of 4.6 percent to a high of 16.63 percent. During the majority of those years, average mortgage interest rates spanned between 6 to 10 percent.&lt;/p&gt;
&lt;p&gt;If you object that Owen’s 5 percent interest rate seems outlandishly high, &lt;em&gt;learn history. &lt;/em&gt;Owen’s interest rate reflects a near-record-breaking historical low.&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;em&gt;“Why do they both move out in 10 years? They should live their homes until they die!”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From 2001 to 2011, the average American stayed in their homes for &lt;a href=&quot;http://www.creditsesame.com/blog/how-long-are-americans-staying-in-their-homes/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;only 6 to 9 years&lt;/a&gt;. If you object that the Rachel vs. Owen comparison should have assumed they’d live there until they die, &lt;em&gt;look at behavioral data.&lt;/em&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;em&gt;“Rachel’s landlord needs to make money. How could he/she possibly earn a profit under this scenario?”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are many ways Rachel’s landlord could benefit:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The landlord could purchase the property at a steep discount, such as through a foreclosure auction, short sale, estate sale, or by “driving for dollars” (making direct contact with the owners of distressed property.) This allows him/her to purchase the property significantly below market value.&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;The landlord could be holding the property for the sake of inflation-protected wealth preservation, rather than as a cash flow investment. (Don’t assume all landlords share the goal of cash flow. Some simply want to diversify their assets.)&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;The landlord could be making a speculative play on potential appreciation. (I don’t recommend this technique, but many landlords do this.)&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;The landlord could have inherited the property.&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;The landlord could have purchased the property decades ago, paid off the mortgage, and now enjoys the cash flow. They don’t want to sell/trade into a different property due to the hassle involved, so they let this property ride.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Okay, tangent finished. Back to our regularly-scheduled article, already in progress …&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Argument #2: Rent is Forever. Mortgages End.&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Don’t worry. This next section won’t be as math-y.&lt;/p&gt;
&lt;p&gt;Let’s revisit the beginning of this article. There are three arguments that justify the “renting is throwing your money away” myth:&lt;/p&gt;
&lt;p&gt;#1: Rent is an expense. Mortgages build equity.&lt;/p&gt;
&lt;p&gt;#2: Rent is forever. Mortgages end.&lt;/p&gt;
&lt;p&gt;#3: Renters don’t benefit from rising home values. Homeowners do.&lt;/p&gt;
&lt;p&gt;We’ve dismantled the first argument. Let’s deep-dive into the second: “You’ll pay rent forever. Your mortgage will eventually end.”&lt;/p&gt;
&lt;p&gt;Here’s the breakdown:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;If you rent, you’ll always make rent payments.&lt;/li&gt;
&lt;li&gt;If you own, you’ll pay off your mortgage within 15-30 years.&lt;/li&gt;
&lt;li&gt;Fewer payments are better than more payments.&lt;/li&gt;
&lt;li&gt;Therefore, owning is better than renting.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Flawed logic strikes again.&lt;/p&gt;
&lt;p&gt;This reasoning presupposes that &lt;strong&gt;your mortgage is your only payment&lt;/strong&gt;. That’s plain wrong.&lt;/p&gt;
&lt;p&gt;After you purchase 100% home equity, you own your home “free-and-clear.” This does &lt;em&gt;not&lt;/em&gt; mean that you’ll never spend another dime on your home again. It merely means that you no longer need to make &lt;strong&gt;principal and interest payments&lt;/strong&gt;, which are known as “P&amp;amp;I.”&lt;/p&gt;
&lt;p&gt;However, P&amp;amp;I are only one of many home-related expenses. Your other costs include:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Maintenance&lt;/li&gt;
&lt;li&gt;Repairs&lt;/li&gt;
&lt;li&gt;Renovations / Depreciation&lt;/li&gt;
&lt;li&gt;Property taxes&lt;/li&gt;
&lt;li&gt;Homeowner’s insurance&lt;/li&gt;
&lt;li&gt;Utility bills&lt;/li&gt;
&lt;li&gt;Municipal usage fees (water, sewer, trash)&lt;/li&gt;
&lt;li&gt;Homeowner association dues (if applicable)&lt;/li&gt;
&lt;li&gt;Transaction fees, commissions and closing costs&lt;/li&gt;
&lt;li&gt;Opportunity costs&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;How much can this cost? Depending on where you live, those expenses could cost &lt;strong&gt;&lt;em&gt;equal to or more than rent&lt;/em&gt;&lt;/strong&gt; on a comparable property.&lt;/p&gt;
&lt;p&gt;Here’s an example for a $300,000 single-family home owned for 10 years:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Maintenance:&lt;/strong&gt; $50/month&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Repairs / Renovations:&lt;/strong&gt; $250/month (1 percent of property value per year; includes major capital expenditures)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Property taxes:&lt;/strong&gt; $300/month (1.3 percent of property value per year)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Homeowner’s insurance:&lt;/strong&gt; $125/month (0.5 percent of property value per year)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Utility bills:&lt;/strong&gt; $50/month (beyond what a landlord covers in a comparable rental)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Municipal usage fees:&lt;/strong&gt; $75/month&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HOA dues:&lt;/strong&gt; $250/month&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transaction fees:&lt;/strong&gt; $166/month (combined total of $20,000 out-of-pocket closing costs from both buying and selling with a 120-month holding period)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Opportunity costs:&lt;/strong&gt; $315/month (investment of a $60,000 down payment at a growth rate of 5 percent after inflation compounding annually; subtract the initial contribution and divide over 120 months, calculated via investor.gov)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Total cost: $1,581 per month.&lt;/p&gt;
&lt;p&gt;In this example, owning a $300,000 home “free-and-clear” for 10 years costs $1,581 per month &lt;em&gt;without&lt;/em&gt; a mortgage.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key takeaway:&lt;/strong&gt; Your principal and interest payments are not the total picture. Not by a long shot.&lt;/p&gt;
&lt;p&gt;[Quick tangent: Unfortunately, many investors don’t do their homework. They jump blindly into the waters, assuming “if the rent covers the mortgage, I’m cool.” Then they lose their shirt.]&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter wp-image-7881&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/Your-mortgage-payments-are-only-a-small-piece-of-your-total-housing-costs.jpg&quot; alt=&quot;Your mortgage payments are only a small piece of your total housing costs.&quot; width=&quot;700&quot; height=&quot;525&quot; srcset=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/Your-mortgage-payments-are-only-a-small-piece-of-your-total-housing-costs.jpg 2048w, https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/Your-mortgage-payments-are-only-a-small-piece-of-your-total-housing-costs-300x225.jpg 300w, https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/Your-mortgage-payments-are-only-a-small-piece-of-your-total-housing-costs-1024x768.jpg 1024w, https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/Your-mortgage-payments-are-only-a-small-piece-of-your-total-housing-costs-320x240.jpg 320w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Humans have many cognitive biases in our understanding of money. One of these biases is that we emphasize &lt;strong&gt;cash flow&lt;/strong&gt; rather than the whole picture.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;When money leaves our bank account (e.g., paying bills), we feel the pain. &lt;em&gt;It hurts! It hurts!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;When expenses are “invisible” (e.g., opportunity cost), we ignore it. &lt;em&gt;You don’t miss what you never had.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;When expenses are lump-sum (e.g., replacing the roof, windows, siding, floors, garage door, etc.), we convince ourselves that our monthly costs are absent of those figures. &lt;em&gt;“My costs are only $600 per month. Oh, and once every 20 years, I pay an extra $55,000.”&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In the example above, you won’t literally watch $1,581 depart your bank account every month. At least $731 of that figure comes in the form of intangibles or lump-sums, which means you’ll only see around $850 per month leave your checking account.&lt;/p&gt;
&lt;p&gt;When that happens, it’s easy to fall into the cognitive trap of assuming that cash flow is the whole story. “&lt;em&gt;My expenses are only $850 per month!”&lt;/em&gt; But it’s not.&lt;/p&gt;
&lt;p&gt;Cash flow is a chapter in the novel. An important one. But as the Chief Human Responsible for Your Money, your job is to read and understand the whole book.&lt;/p&gt;
&lt;p&gt;Zoom out and look at the big picture; make decisions accordingly.&lt;/p&gt;
&lt;p&gt;In fact, if there’s one broad lesson from this entire article, it’s this: &lt;strong&gt;zoom out.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you zoom out and look at the larger picture –inflation, investment gains, opportunity costs, legacy-building – you’ll start making smarter choices.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-7880&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/zoom-out-and-look-at-the-big-picture-e1448335594307.jpg&quot; alt=&quot;Zoom out. Look at the big picture.&quot; width=&quot;700&quot; height=&quot;467&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Back to the debunking the “rent is forever; your mortgage is not” argument:&lt;/p&gt;
&lt;p&gt;Yes, your P&amp;amp;I payments will disappear after 15-30 years. But you’ll always pay for maintenance, taxes, insurance, renovations, care and operations of that house.&lt;/p&gt;
&lt;p&gt;You’ll never be finished with home payments. Regardless of whether you rent or own, &lt;strong&gt;you’ll spend your life paying for housing&lt;/strong&gt; in one form or another.&lt;/p&gt;
&lt;p&gt;Death and taxes. And housing. And socks. These are life’s few certainties.&lt;/p&gt;
&lt;div id=&quot;attachment_7882&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;32&quot;&gt;&lt;img class=&quot;wp-image-7882 size-full&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/Death-and-taxes-and-socks-e1448336076856.jpg&quot; alt=&quot;Death and taxes. And socks. You'll need socks.&quot; width=&quot;700&quot; height=&quot;470&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;You’ll still need socks.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The question, then, isn’t: “How can I escape this perpetual payment?”&lt;/p&gt;
&lt;p&gt;The question is: “&lt;em&gt;Which&lt;/em&gt; of these two perpetual payments is more desirable? Would I rather pay rent in perpetuity? Or would I rather pay homeownership costs forever?”&lt;/p&gt;
&lt;p&gt;Before you can answer that question, you’ll need to see which of those two numbers is bigger. And depending on where you live – Detroit or San Francisco? — the answer could go either way.&lt;/p&gt;
&lt;p&gt;The myth that “renting is throwing money away” ignores the simple fact that the cost of rent, &lt;em&gt;&lt;strong&gt;relative to the price of the property&lt;/strong&gt;,&lt;/em&gt; occupies a HUGE range nationwide.&lt;/p&gt;
&lt;p&gt;In some parts of the country, you can rent a $300,000 house for substantially less than $1,581 per month. Heck, the landlord will even throw in a free TV and send you a $25 Starbucks gift card.&lt;/p&gt;
&lt;p&gt;In other parts of the country, you can’t dream of touching a property like this for less than $3,000+ per month in rent.&lt;/p&gt;
&lt;p&gt;And this leads us to today’s actionable lesson: &lt;strong&gt;Check the price-to-rent ratio&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Don’t be a zombie who listens to oversimplified clichés. Spend 30 seconds doing a little bit of math.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Meth?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;No, math.&lt;/p&gt;
&lt;p&gt;The formula for calculating price-to-rent is (predictably) the price divided by annual rent.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Price:&lt;/strong&gt; $300,000&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rent:&lt;/strong&gt; $1,500 per month = $18,000 per year&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Price-to-Rent Ratio&lt;/strong&gt; = $300,000/$18,000 = 16.6&lt;/p&gt;
&lt;p&gt;Cool. So what does that number mean?&lt;/p&gt;
&lt;p&gt;Here are a few rules of thumb:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;If the P/R ratio is greater than 20, hesitate before buying the house.&lt;/li&gt;
&lt;li&gt;If the P/R ratio is greater than 25, don’t buy the house unless you have strong non-financial reasons.&lt;/li&gt;
&lt;li&gt;If the P/R ratio is greater than 30, run screaming in the other direction.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;A house with a P/R ratio of 25 would equal a $300,000 house that rents for $1,000 per month. Or a $100,000 house that rents for $333 per month. Yeowch. That’s painful.&lt;/p&gt;
&lt;p&gt;[To put this into perspective, my bare-minimum-criteria for any rental property that I purchase is a P/R ratio of 8.33.]&lt;/p&gt;
&lt;p&gt;In the Rachel vs. Owen example, their homes carry a P/R ratio of 15.5.&lt;/p&gt;
&lt;p&gt;Fun facts about P/R ratios you can use to impress your friends:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The average is 11.95 nationwide.&lt;/li&gt;
&lt;li&gt;The median is 11.27 nationwide.&lt;/li&gt;
&lt;li&gt;Nationwide, P/R ratios range from a low of 2.84 (awesome for owners) to a jaw-dropping high of 46.38 (fantastic for renters).&lt;/li&gt;
&lt;li&gt;The highest P/R ratios (best spots to be a renter) are in southern California and the northeastern states, particularly in major cities with concentrated business clusters such as San Francisco, Seattle, and New York.&lt;/li&gt;
&lt;li&gt;The lowest P/R ratios (best spots to be an owner) are in the land-locked states. Many of the larger non-coastal cities, like Chicago, Atlanta, Miami, Phoenix and Las Vegas, hold P/R ratios favorable to owners.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;When you’re calculating P/R ratio, follow these steps:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Use the “total acquisition cost” – including purchase price, closing costs, and (if needed) upfront repairs to make the space minimally viable (e.g. if you bought a fixer-upper).&lt;/li&gt;
&lt;li&gt;Run three calculations: best-case, worst-case and mid-case.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;Purchase price: $440,000&lt;/p&gt;
&lt;p&gt;Upfront repairs: $10,000&lt;/p&gt;
&lt;p&gt;Closing: $5,000&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Total Acquisition Cost:&lt;/strong&gt; $455,000&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Worst-Case Rent: $1,800 /mo = $21,600/year&lt;/li&gt;
&lt;li&gt;Mid-Case Rent: $2,000 /mo = $24,000/year&lt;/li&gt;
&lt;li&gt;Best-Case Rent: $2,200 /mo = $26,400/year&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Worst-Case P/R ratio: 21.06&lt;/li&gt;
&lt;li&gt;Mid-Case P/R ratio: 18.95&lt;/li&gt;
&lt;li&gt;Best-Case P/R ratio: 17.23&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In this example, we have a property that would obviously make a terrible real estate investment. A quick glance at the numbers makes that abundantly clear.&lt;/p&gt;
&lt;p&gt;But it’s a viable candidate for a primary residence, given that the P/R ratio still points in favor of owning. It dances on the edge of the razor blade, but the balance tips in favor of ‘buy.’&lt;/p&gt;
&lt;p&gt;So anyway –&lt;/p&gt;
&lt;p&gt;Now that I’ve given you some homework, let’s circle back to the justification that launched this conversation:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“You’ll pay rent forever. Your mortgage will eventually end.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;That’s false. &lt;em&gt;Nothing&lt;/em&gt; ends.&lt;/p&gt;
&lt;p&gt;You’ll be making house payments until the day you die.&lt;/p&gt;
&lt;p&gt;(Sorry. But it’s true.)&lt;/p&gt;
&lt;p&gt;(Hey, I’m available for parties!)&lt;/p&gt;
&lt;p&gt;Here’s the smarter question that you should ask yourself: Will it be cheaper in the long-term to maintain a home or keep paying rent?&lt;/p&gt;
&lt;p&gt;The answer is influenced by:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Where you live&lt;/li&gt;
&lt;li&gt;What “income bracket” of housing you prefer&lt;/li&gt;
&lt;li&gt;The length of time you’ll hold onto the home&lt;/li&gt;
&lt;li&gt;The ancillary costs of homeownership&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To find your answer, check out &lt;strong&gt;the price-to-rent ratio,&lt;/strong&gt; and weigh those four other factors I’ve listed above.&lt;/p&gt;


&lt;h2&gt;&lt;strong&gt;Argument #3: “Renters don’t benefit from rising home values. Owners do.”&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;At this point, we’ve tackled two of the three misguided justifications for the cliché that “renting is throwing your money away.”&lt;/p&gt;
&lt;p&gt;#1: Rent is an expense. Mortgages build equity. – Debunked!&lt;/p&gt;
&lt;p&gt;#2: Rent is forever. Mortgages end. – Busted!&lt;/p&gt;
&lt;p&gt;Let’s tackle the final rationalization: “Renters don’t benefit from rising home values. Owners do.”&lt;/p&gt;
&lt;p&gt;Here’s the argument, broken down:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Home values rise over time.&lt;/li&gt;
&lt;li&gt;Rising values result in equity gains&lt;em&gt;.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Homeowners benefit from equity gains.&lt;/li&gt;
&lt;li&gt;Renters don’t.
&lt;ul&gt;&lt;li&gt;In fact, renters are penalized, because equity gains correlate with rising rents.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Therefore, owning is better than renting.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Let’s dissect this argument. We’ll start with a deep-dive into the concept of equity.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-7883&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/what-is-equity-e1448336867431.jpg&quot; alt=&quot;What is equity?&quot; width=&quot;700&quot; height=&quot;495&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;“Mommy, where does equity come from?”&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Equity is created in three ways:&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;#1: Principal Reductions.&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Imagine that you sell junk on Craigslist. You earn an extra $500. You use this to make an extra mortgage payment. Congratulations – you now have an extra $500 worth of home equity.&lt;/p&gt;
&lt;p&gt;This is called “principal reduction.” You’re trading cash for equity.&lt;/p&gt;
&lt;p&gt;Every dollar that you spend on principal reduction carries an &lt;em&gt;opportunity cost&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We talked about this at length earlier, so let’s move on to two other types of equity gains.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;#2: Forced Appreciation.&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Imagine that you get a $10,000 bonus at work. Hooray!&lt;/p&gt;
&lt;p&gt;You use this money to upgrade your kitchen. You’re an excellent manager, and you oversee a hyper-profitable renovation.&lt;/p&gt;
&lt;p&gt;Your home is now worth $20,000 more, even though you only made a $10,000 investment. You’ve doubled your money.&lt;/p&gt;
&lt;p&gt;Half this added value came from trading-cash-for-equity. But the other $10,000 came from &lt;em&gt;forced appreciation&lt;/em&gt;, which is the result of knowledgeable, skilled management.&lt;/p&gt;
&lt;p&gt;Forced appreciation comes from choosing the right property and managing it correctly. This is a real estate investor’s bread-and-butter.&lt;/p&gt;
&lt;p&gt;Talented investors don’t sit around, hoping that the market might rise in value. They take matters into their own hands. They spend $X to remodel a home, create a value that’s greater than $X, and pocket the spread — either through higher rental income or via sales.&lt;/p&gt;
&lt;p&gt;Here’s the question: Do you have what it takes to force appreciation?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Yeah, of course. I oversaw a bathroom remodel last year.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Well — that’s not exactly the same thing.&lt;/p&gt;
&lt;p&gt;Smart investors don’t spend money based on personal desires – “&lt;em&gt;I’ve always loved this deep-blue granite!” &lt;/em&gt;They make informed, rational decisions based on profit and loss. (&lt;a href=&quot;http://affordanything.com/2015/08/07/behind-the-scenes-how-i-manage-real-estate-from-around-the-globe/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Remember this story?&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Investors &lt;em&gt;don’t&lt;/em&gt; say things like:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;“I love these maple cabinets!”&lt;/li&gt;
&lt;li&gt;“This hardwood would look great with our furniture.”&lt;/li&gt;
&lt;li&gt;“Let’s wallpaper the living room’s accent wall!”&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Homeowners, by contrast, often make renovation decisions based on their personal tastes. This is a &lt;em&gt;far&lt;/em&gt; less profitable strategy.&lt;/p&gt;
&lt;p&gt;Forcing appreciation is a skill – just as playing guitar, dribbling a basketball and speaking Spanish are skills.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key takeaway:&lt;/strong&gt; You can create equity through forced appreciation. But don’t assume you’ll hit a home run on your first swing. You’ll need skill and strategy first.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;#3: Market Gains.&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Market-based equity gains come from growth in the overall housing market.&lt;/p&gt;
&lt;p&gt;Let’s say that you buy a house in January for $100,000. By December, that house is worth $102,000. Congratulations – you’ve gained $2,000 in equity.&lt;/p&gt;
&lt;p&gt;Sounds amazing, right? Who doesn’t love something-for-nothing?&lt;/p&gt;
&lt;p&gt;But here’s the tough truth about market gains: &lt;strong&gt;You’re outta control.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The housing market might rise, might fall, or might stagnate. It might do a combination of all three.&lt;/p&gt;
&lt;p&gt;If home values climb, they may rise at a long-term annualized rate of 2 percent, 3 percent, 4 percent. Or maybe 10 percent. Who knows? There’s nothing you can do to affect these results.&lt;/p&gt;
&lt;p&gt;Sure, you can purchase a home in a neighborhood that shows signs of appreciation: lots of new construction, permits and jobs are usually a good sign. Unless, of course, it’s 2007 and supply has drastically outpaced demand. Then you’re screwed.&lt;/p&gt;
&lt;p&gt;You can’t control market gains. You have no influence over timing, scale, or direction.&lt;/p&gt;
&lt;p&gt;“Buy-and-pray” is not a wealth strategy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key takeaway:&lt;/strong&gt; &lt;a href=&quot;http://affordanything.com/2013/02/27/hope-is-not-a-plan/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hope is not a plan&lt;/a&gt;. And it shouldn’t drive a six-figure decision.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-7884&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/dont-let-speculation-drive-your-financial-decisions-e1448338434932.jpg&quot; alt=&quot;Don't let speculation drive your financial decisions&quot; width=&quot;700&quot; height=&quot;520&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Back to the original argument: “Renters don’t benefit from rising home values. Owners do.”&lt;/p&gt;
&lt;p&gt;Rising home values come from three sources:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Principal reductions&lt;/li&gt;
&lt;li&gt;Forced appreciation&lt;/li&gt;
&lt;li&gt;Market gains&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;What’s the cost of these?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;One requires opportunity cost.&lt;/li&gt;
&lt;li&gt;One requires skill.&lt;/li&gt;
&lt;li&gt;One is outside of your control and historically keeps pace with inflation.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I’d hardly call this a “benefit.”&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“But renters get nothing at all. At least owners are getting some equity.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let’s return to that conversation about opportunity costs. Renters are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Not tying up cash in a downpayment&lt;/li&gt;
&lt;li&gt;Not tying up cash in renovations, repairs and maintenance&lt;/li&gt;
&lt;li&gt;Potentially paying lower monthly costs&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;By doing so, renters enjoy:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Greater flexibility&lt;/li&gt;
&lt;li&gt;Lower overhead&lt;/li&gt;
&lt;li&gt;Fewer responsibilities&lt;/li&gt;
&lt;li&gt;Opportunity to pursue higher returns elsewhere&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;So … yeah. Plenty of benefits on both sides.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-7893&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/When-is-renting-better-than-buying-a-home-e1448390626310.jpg&quot; alt=&quot;Should I buy or rent a home?&quot; width=&quot;700&quot; height=&quot;467&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Is Renting Better Than Buying?&lt;/h2&gt;
&lt;p&gt;What conclusions can we reach at the end of all of this?&lt;/p&gt;
&lt;p&gt;Should you keep renting? Is renting better than buying? Or should you purchase a home? Is buying the better choice?&lt;/p&gt;
&lt;p&gt;Your answer is going to depend on a &lt;em&gt;massive&lt;/em&gt; number of factors, including:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The local price-to-rent ratio.&lt;/li&gt;
&lt;li&gt;How long you’ll live there.&lt;/li&gt;
&lt;li&gt;Your alternative investment options.&lt;/li&gt;
&lt;li&gt;Your assumptions about inflation and investment gains.&lt;/li&gt;
&lt;li&gt;Maintenance, repair, insurance, property tax and capital expense costs.&lt;/li&gt;
&lt;li&gt;The rate at which rents rise.&lt;/li&gt;
&lt;li&gt;Et cetera, etc., etc.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;You get the picture.&lt;/p&gt;
&lt;p&gt;My goal is to impress upon you — once and for all — that this myth that &lt;strong&gt;“renting is throwing money away”&lt;/strong&gt; is wrongheaded.&lt;/p&gt;
&lt;p&gt;In fact, it’s dangerous.&lt;/p&gt;
&lt;p&gt;It oversimplifies a life-changing, six-figure decision.&lt;/p&gt;
&lt;p&gt;It’s probably caused thousands (or millions) of people to buy houses they later regret.&lt;/p&gt;
&lt;p&gt;And it needs to stop.&lt;/p&gt;
&lt;p&gt;The next time you hear a friend or family member repeat one of these cliches — &lt;em&gt;“I’m tired of throwing money away on rent”&lt;/em&gt; — send them this article.&lt;/p&gt;
&lt;p&gt;And the next time you catch yourself thinking the same thing (because we’re social creatures who internalize pop-mythology), come back and re-read this.&lt;/p&gt;
&lt;p&gt;There’s no such thing as “throwing money away on rent” — not any more than you’re also throwing money away on cleaning gutters, paying property taxes, and for that matter, buying socks.&lt;/p&gt;
&lt;p&gt;If you’re a homeowner (like me) and you enjoy it, good for you.&lt;/p&gt;
&lt;p&gt;And if you’re a renter, stop feeling guilty.&lt;/p&gt;
&lt;p&gt;Next time, we’ll focus on a different ridiculous statement:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“I’ll skip dessert.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Yeah, right. I’m going to prove that one wrong right now.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-7886&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/ridiculous-statements-e1448339710176.jpg&quot; alt=&quot;Ridiculous statements&quot; width=&quot;700&quot; height=&quot;467&quot;/&gt;&lt;/p&gt;


&lt;p&gt;**************&lt;br/&gt;Take action!&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;alignnone size-full wp-image-8750&quot; src=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/Renting-is-throwing-money-away-right-2.png&quot; alt=&quot;Torn between whether you should rent or buy a home? Many people think renting is tossing money out the window, but a home isn't an investment, either.&quot; width=&quot;735&quot; height=&quot;1100&quot; data-pin-description=&quot;Most people think renting is throwing money away. After all, you're not building equity in an asset, right? That's the wrong way to think. The truth is, there's no such thing as throwing money away on rent - not any more than you're throwing money away on cleaning gutters, property taxes, or insurance.&quot; srcset=&quot;https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/Renting-is-throwing-money-away-right-2.png 735w, https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/Renting-is-throwing-money-away-right-2-200x300.png 200w, https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/Renting-is-throwing-money-away-right-2-684x1024.png 684w, https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/Renting-is-throwing-money-away-right-2-600x898.png 600w, https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/Renting-is-throwing-money-away-right-2-300x449.png 300w&quot; sizes=&quot;(max-width: 735px) 100vw, 735px&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;ck_form_container ck_inline&quot; data-ck-version=&quot;6&quot;&gt;
&lt;div class=&quot;ck_form ck_vertical_subscription_form&quot;&gt;
&lt;div class=&quot;ck_form_content&quot;&gt;
&lt;h3 class=&quot;ck_form_title&quot;&gt;Learn How To Escape the 9-5&lt;/h3&gt;
&lt;div class=&quot;ck_description&quot; readability=&quot;6&quot;&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p&gt;Get free updates on building wealth and living to the fullest.&lt;/p&gt;
&lt;p&gt;Zero spam.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

</description>
<pubDate>Mon, 23 Apr 2018 00:19:42 +0000</pubDate>
<dc:creator>vinnyglennon</dc:creator>
<og:type>article</og:type>
<og:title>Renting is Throwing Money Away … Right?</og:title>
<og:description>I've heard a lot of ridiculous statements: 'I'm sure we'll find parking.' 'I'll just check Facebook for five minutes.' 'I'll skip dessert.' But perhaps the most absurd is the adage: 'If you're a renter, you're throwing money away.' Bulls**t. You've heard those statements, right? 'I'm sick of throwing money away on rent.' 'Buying is always better than renting.' 'Your home is your biggest investment.' I'm going to explain why these clichés are ludicrous. Preposterous. Outlandish. Nonsensical. (Somebody please take the thesaurus away from me.) Let's chat about the 'should I rent or buy?' question using logic, math and reason, rather</og:description>
<og:image>https://46482i1l8cde3vkptq1xh1r9-wpengine.netdna-ssl.com/wp-content/uploads/2015/11/Should-I-rent-or-buy-e1448321160415.jpg</og:image>
<og:url>https://affordanything.com/is-renting-better-than-buying-should-i-rent-or-buy/</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://affordanything.com/is-renting-better-than-buying-should-i-rent-or-buy/</dc:identifier>
</item>
<item>
<title>You probably don&amp;#039;t need AI/ML. You can make do with well written SQL scripts</title>
<link>https://threadreaderapp.com/thread/987602838594445312.html</link>
<guid isPermaLink="true" >https://threadreaderapp.com/thread/987602838594445312.html</guid>
<description>&lt;p&gt;&quot;I feel so full,&quot; Jungkook moaned. The boy often emphasised his act in order to put on an amazing show, but he sincerely felt so pleasurable right now, especially with the low voiced male in mind. The boy pushed in further while thrusting his hips up, trying to create friction.&lt;/p&gt;
&lt;p&gt;&quot;You looks s-so good... Fuck,&quot; Yoongi responded. Precum oozed from his slit as his hand moved faster up and down, causing the pit in his stomach to grow. He groaned loudly while closing his eyes, focused on all the sounds; the moans, vibrating sounds, wet smacks and throaty sighs&lt;/p&gt;
&lt;p&gt;&quot;You... You sound so good,&quot; Jungkook responded, not entirely sure how to address the other, which he acknowledged with a moan. The boy's free hand started to shake as he wasn't sure what to do with it, he felt so good and wanted to touch himself, yet didn't want it to end.&lt;/p&gt;
</description>
<pubDate>Sun, 22 Apr 2018 21:56:43 +0000</pubDate>
<dc:creator>passenger</dc:creator>
<og:title>Thread by @cyberomin: &quot;It's always fun when I speak to founders and potential founders and they are quick to tell me how they want to use AI/ML to improve customer […]&quot;</og:title>
<og:image>https://threadreaderapp.com/images/screenshots/thread/987602838594445312.jpg</og:image>
<og:url>https://threadreaderapp.com/thread/987602838594445312.html</og:url>
<og:description>Thread by @cyberomin: &quot;It's always fun when I speak to founders and potential founders and they are quick to tell me how they want to use AI/ML to improve customer retention and improve LTV. Truth is, they don't even need ML. A properly writte […]&quot;</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://threadreaderapp.com/thread/987602838594445312.html</dc:identifier>
</item>
<item>
<title>A blockchain is a specific set of choices suitable for a narrow set of use-cases</title>
<link>https://threadreaderapp.com/thread/987266940887535616.html</link>
<guid isPermaLink="true" >https://threadreaderapp.com/thread/987266940887535616.html</guid>
<description>&lt;div readability=&quot;27.778481012658&quot;&gt;So I left &lt;a class=&quot;entity-hashtag&quot; href=&quot;https://threadreaderapp.com/hashtag/postdoc&quot;&gt;#postdoc&lt;/a&gt;, and I left &lt;a class=&quot;entity-hashtag&quot; href=&quot;https://threadreaderapp.com/hashtag/adjunct&quot;&gt;#adjunct&lt;/a&gt; and went into &lt;a class=&quot;entity-hashtag&quot; href=&quot;https://threadreaderapp.com/hashtag/industry&quot;&gt;#industry&lt;/a&gt;. There are two things I wish I knew when making this transition, and I hope it may help you...&lt;/div&gt;&lt;div readability=&quot;35.592760180995&quot;&gt;...I didn’t know what buzzwords to put on my resume to make it reflect, in &lt;a class=&quot;entity-hashtag&quot; href=&quot;https://threadreaderapp.com/hashtag/industry&quot;&gt;#industry&lt;/a&gt; terms, my skills. For &lt;a class=&quot;entity-hashtag&quot; href=&quot;https://threadreaderapp.com/hashtag/STEM&quot;&gt;#STEM&lt;/a&gt; academics, I’ve learned that a lot of what we do includes systems engineering, and project management...&lt;/div&gt;&lt;div readability=&quot;34.90243902439&quot;&gt;...now this may be obvious to some of you, esp the E part of &lt;a class=&quot;entity-hashtag&quot; href=&quot;https://threadreaderapp.com/hashtag/stem&quot;&gt;#stem&lt;/a&gt;, but I didn’t know this. I recommend looking up buzzwords for sys eng and project management...&lt;/div&gt;</description>
<pubDate>Sun, 22 Apr 2018 19:23:49 +0000</pubDate>
<dc:creator>BerislavLopac</dc:creator>
<og:title>Thread by @clemensv: &quot;I've talked to a lot of distributed systems engineers (who build cloud-scale stuff) from across the industry about blockchain. While most pl […]&quot;</og:title>
<og:image>https://threadreaderapp.com/images/screenshots/thread/987266940887535616.jpg</og:image>
<og:url>https://threadreaderapp.com/thread/987266940887535616.html</og:url>
<og:description>Thread by @clemensv: &quot;I've talked to a lot of distributed systems engineers (who build cloud-scale stuff) from across the industry about blockchain. While most platform folks I talked to are perfectly happy to help with frameworks that help s […]&quot;</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://threadreaderapp.com/thread/987266940887535616.html</dc:identifier>
</item>
<item>
<title>Parsing JSON is a Minefield</title>
<link>http://seriot.ch/parsing_json.php</link>
<guid isPermaLink="true" >http://seriot.ch/parsing_json.php</guid>
<description>&lt;p&gt;&lt;strong&gt;[2016-10-26]&lt;/strong&gt; First version of the article&lt;br /&gt;&lt;strong&gt;[2016-10-28]&lt;/strong&gt; Presentation at Soft-Shake Conference, Geneva (&lt;a href=&quot;http://seriot.ch/json/20161028_softshake_parsing_json.pdf&quot;&gt;slides&lt;/a&gt;)&lt;br /&gt;&lt;strong&gt;[2016-11-01]&lt;/strong&gt; Article and comments in &lt;a href=&quot;http://m.theregister.co.uk/2016/11/01/json_parsers_tested/&quot;&gt;The Register&lt;/a&gt;&lt;br /&gt;&lt;strong&gt;[2017-11-16]&lt;/strong&gt; Presentation at Black Alps Security Conference, Yverdon (&lt;a href=&quot;http://seriot.ch/resources/talks_papers/20171116_parsing_json_black_alps.pdf&quot;&gt;slides&lt;/a&gt;)&lt;br /&gt;&lt;strong&gt;[2018-03-09]&lt;/strong&gt; Presentation at Toulouse Hacking Conference (&lt;a href=&quot;http://seriot.ch/resources/talks_papers/20180309_json_toulouse.pdf&quot;&gt;slides&lt;/a&gt;)&lt;br /&gt;&lt;strong&gt;[2018-03-30]&lt;/strong&gt; Updated this article considering &lt;a href=&quot;https://tools.ietf.org/html/rfc8259&quot;&gt;RFC 8259&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Feel free to comment on &lt;a href=&quot;https://news.ycombinator.com/item?id=12796556&quot;&gt;Hacker News&lt;/a&gt; or &lt;a href=&quot;https://www.reddit.com/r/programming/comments/59htn7/parsing_json_is_a_minefield/&quot;&gt;reddit&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Session Description&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;JSON is the de facto standard when it comes to (un)serialising and exchanging data in web and mobile programming. But how well do you really know JSON? We'll read the specifications and write test cases together. We'll test common JSON libraries against our test cases. I'll show that JSON is not the easy, idealised format as many do believe. Indeed, I did not find two libraries that exhibit the very same behaviour. Moreover, I found that edge cases and maliciously crafted payloads can cause bugs, crashes and denial of services, mainly because JSON libraries rely on specifications that have evolved over time and that left many details loosely specified or not specified at all.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Table of Contents&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://seriot.ch/parsing_json.php#1&quot;&gt;JSON Specifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://seriot.ch/parsing_json.php#2&quot;&gt;Parsing Tests&lt;/a&gt;&lt;br /&gt;2.1 &lt;a href=&quot;http://seriot.ch/parsing_json.php#21&quot;&gt;Structure&lt;/a&gt;&lt;br /&gt;2.2 &lt;a href=&quot;http://seriot.ch/parsing_json.php#22&quot;&gt;Numbers&lt;/a&gt;&lt;br /&gt;2.3 &lt;a href=&quot;http://seriot.ch/parsing_json.php#23&quot;&gt;Arrays&lt;/a&gt;&lt;br /&gt;2.4 &lt;a href=&quot;http://seriot.ch/parsing_json.php#24&quot;&gt;Objects&lt;/a&gt;&lt;br /&gt;2.5 &lt;a href=&quot;http://seriot.ch/parsing_json.php#25&quot;&gt;Strings&lt;/a&gt;&lt;br /&gt;2.6 &lt;a href=&quot;http://seriot.ch/parsing_json.php#26&quot;&gt;RFC 7159 Ambiguities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://seriot.ch/parsing_json.php#3&quot;&gt;Testing Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://seriot.ch/parsing_json.php#4&quot;&gt;Parsing Tests Results&lt;/a&gt;&lt;br /&gt;4.1 &lt;a href=&quot;http://seriot.ch/parsing_json.php#41&quot;&gt;Full Results&lt;/a&gt;&lt;br /&gt;4.2 &lt;a href=&quot;http://seriot.ch/parsing_json.php#42&quot;&gt;C Parsers&lt;/a&gt;&lt;br /&gt;4.3 &lt;a href=&quot;http://seriot.ch/parsing_json.php#43&quot;&gt;Objective-C Parsers&lt;/a&gt;&lt;br /&gt;4.4 &lt;a href=&quot;http://seriot.ch/parsing_json.php#44&quot;&gt;Apple (NS)JSONSerialization&lt;/a&gt;&lt;br /&gt;4.5 &lt;a href=&quot;http://seriot.ch/parsing_json.php#45&quot;&gt;Freddy (Swift)&lt;/a&gt;&lt;br /&gt;4.6 &lt;a href=&quot;http://seriot.ch/parsing_json.php#46&quot;&gt;Bash JSON.sh&lt;/a&gt;&lt;br /&gt;4.7 &lt;a href=&quot;http://seriot.ch/parsing_json.php#47&quot;&gt;Other Parsers&lt;/a&gt;&lt;br /&gt;4.8 &lt;a href=&quot;http://seriot.ch/parsing_json.php#48&quot;&gt;JSON Checker&lt;/a&gt;&lt;br /&gt;4.9 &lt;a href=&quot;http://seriot.ch/parsing_json.php#49&quot;&gt;Regex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://seriot.ch/parsing_json.php#5&quot;&gt;Parsing Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://seriot.ch/parsing_json.php#6&quot;&gt;STJSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://seriot.ch/parsing_json.php#7&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://seriot.ch/parsing_json.php#8&quot;&gt;Appendix&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt; 1. JSON Specifications&lt;/h3&gt;
&lt;p&gt;JSON is the de facto serialization standard when it comes to sending data over HTTP, the &lt;em&gt;lingua franca&lt;/em&gt; used to exchange data between heterogeneous software, both in modern web sites and mobile applications.&lt;/p&gt;
&lt;p&gt;&quot;Discovered&quot; in 2001 &lt;a href=&quot;https://en.wikipedia.org/wiki/Douglas_Crockford&quot;&gt;Douglas Crockford&lt;/a&gt;, JSON specification is so short and simple that Crockford created business cards with the whole JSON grammar on their back.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.seriot.ch/json/json_business_card.png&quot; alt=&quot;JSON Business Card&quot; border=&quot;1&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Pretty much all Internet users and programmers use JSON, yet few do actually agree on how JSON should actually work. The conciseness of the grammar leaves many aspects undefined. On top of that, several specifications exist, and their various interpretations tend to be murky.&lt;/p&gt;
&lt;p&gt;Crockford &lt;a href=&quot;https://www.computer.org/csdl/mags/co/2012/04/mco2012040006.html&quot;&gt;chose&lt;/a&gt; not to version JSON definition:&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Probably the boldest design decision I made was to not put a version number on JSON so there is no mechanism for revising it. We are stuck with JSON: whatever it is in its current form, that’s it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yet JSON is defined in at least seven different documents:&lt;/p&gt;
&lt;ol readability=&quot;2.7503924646782&quot;&gt;&lt;li&gt;2002 - &lt;a href=&quot;http://www.json.org&quot;&gt;json.org&lt;/a&gt;, and the business card&lt;/li&gt;
&lt;li&gt;2006 - IETF &lt;a href=&quot;https://tools.ietf.org/html/rfc4627&quot;&gt;RFC 4627&lt;/a&gt;, which set the &lt;code&gt;application/json&lt;/code&gt; MIME media type&lt;/li&gt;
&lt;li&gt;2011 - &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-15.12&quot;&gt;ECMAScript 262, section 15.12&lt;/a&gt;&lt;/li&gt;
&lt;li readability=&quot;2.2727272727273&quot;&gt;
&lt;p&gt;2013 - &lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-404.htm&quot;&gt;ECMA 404&lt;/a&gt; according to Tim Bray (RFC 7159 editor), &lt;a href=&quot;https://www.tbray.org/ongoing/When/201x/2014/03/05/RFC7159-JSON&quot;&gt;ECMA rushed out to release it&lt;/a&gt; because:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&quot;Someone told the ECMA working group that the IETF had gone crazy and was going to rewrite JSON with no regard for compatibility and break the whole Internet and something had to be done urgently about this terrible situation. (...) It doesn’t address any of the gripes that were motivating the IETF revision.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;5.8509316770186&quot;&gt;
&lt;p&gt;2014 - IETF &lt;a href=&quot;https://tools.ietf.org/html/rfc7158&quot;&gt;RFC 7158&lt;/a&gt; makes the specification &quot;Standard Tracks&quot; instead of &quot;Informational&quot;, allows scalars (anything other than arrays and objects) such as &lt;code&gt;123&lt;/code&gt; and &lt;code&gt;true&lt;/code&gt; at the root level as ECMA does, warns about bad practices such as duplicated keys and broken Unicode strings, without explicitely forbidding them, though.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;2014 - IETF &lt;a href=&quot;https://tools.ietf.org/html/rfc7159&quot;&gt;RFC 7159&lt;/a&gt; was released to fix a typo in RFC 7158, which was dated from &quot;March 2013&quot; instead of &quot;March 2014&quot;.&lt;/li&gt;
&lt;li&gt;2017 - IETF &lt;a href=&quot;https://tools.ietf.org/html/rfc8259&quot;&gt;RFC 8259&lt;/a&gt; was released in December 2017. It basically adds two things: 1) outside of closed eco-systems, JSON MUST be encoded in UTF-8 and 2) JSON text that is not networked transmitted MAY now add the byte ordrer mark &lt;code&gt;U+FEFF&lt;/code&gt;, although this is not stated explicitely.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Despite the clarifications they bring, RFC 7159 and 8259 contain several approximations and leaves many details loosely specified.&lt;/p&gt;
&lt;p&gt;For instance, RFC 8259 &lt;a href=&quot;https://tools.ietf.org/html/rfc8259#section-1&quot;&gt;mentions&lt;/a&gt; that a design goal of JSON was to be &quot;a subset of JavaScript&quot;, but it's actually not. Specifically, JSON allows the Unicode line terminators &lt;code&gt;U+2028 LINE SEPARATOR&lt;/code&gt; and &lt;code&gt;U+2029 PARAGRAPH SEPARATOR&lt;/code&gt; to appear unescaped. But JavaScript specifies that strings cannot contains line terminators (&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.4&quot;&gt;ECMA-262 - 7.8.4 String Literals&lt;/a&gt;), and line terminators include... &lt;code&gt;U+2028&lt;/code&gt; and &lt;code&gt;U+2029&lt;/code&gt; (&lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-7.3&quot;&gt;7.3 Line Terminators&lt;/a&gt;). The single fact that these two characters are allowed without escape in JSON strings while they are not in JavaScript implies that JSON is &lt;strong&gt;not&lt;/strong&gt; a subset of JavaScript, despite the JSON design goals.&lt;/p&gt;
&lt;p&gt;Also, RFC 7159 is unclear about how a JSON parser should treat extreme number values, malformed Unicode strings, similar objects or handle recursion depth. Some corner cases are explicitely left free to implementations, while others suffer from contradictory statements.&lt;/p&gt;
&lt;p&gt;To illustrate the poor precision of RFC 7159, I wrote a corpus of JSON test files and documented how selected JSON parsers chose to handle these files. You'll see that deciding if a test file should be parsed or not is not always straightforward. In my findings, there were no two parsers that exhibited the same behaviour, which may cause serious interoperability issues.&lt;/p&gt;
&lt;h3&gt; 2. Parsing Tests&lt;/h3&gt;
&lt;p&gt;In this section, I explain how to create test files to validate parsers behaviour, discuss some interesting tests, and the rationale to decide if they should be accepted or rejected by RFC 7159 compliant parsers, or if parsers should be free to accept or reject the contents.&lt;/p&gt;
&lt;p&gt;File names start with a letter which tells the expected result: &lt;code&gt;y&lt;/code&gt; (yes) for parsing success, &lt;code&gt;n&lt;/code&gt; (no) for parsing error, and &lt;code&gt;i&lt;/code&gt; for implementation defined. They also give clues about which component of the parser is specifically tested.&lt;/p&gt;
&lt;p&gt;For instance, &lt;code&gt;n_string_unescaped_tab.json&lt;/code&gt; contains &lt;code&gt;[&quot;&lt;u&gt;09&lt;/u&gt;&quot;]&lt;/code&gt;, which is an array containing a string, which consists in the &lt;code&gt;TAB 0x09&lt;/code&gt; character, which MUST be u-escaped according to JSON specifications. Note how the underlined values represent the hex values of the bytes. This file specifically tests string parsing, hence the &lt;code&gt;string&lt;/code&gt; in file name, and not &lt;code&gt;structure&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt; or &lt;code&gt;object&lt;/code&gt;. According to RFC 7159, this is not a valid JSON string, hence the &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that since several parsers don't allow scalars at the top level (&lt;code&gt;&quot;test&quot;&lt;/code&gt;), I embed strings into arrays (&lt;code&gt;[&quot;test&quot;]&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;You'll find more that 300 tests in the &lt;a href=&quot;https://github.com/nst/JSONTestSuite&quot;&gt;JSONTestSuite GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The test files were mostly handcrafted while reading specifications, trying to pay attention to edge cases and ambiguous parts. I also tried to reuse other test suites found on the Internet (mainly &lt;a href=&quot;https://code.google.com/archive/p/json-test-suite/&quot;&gt;json-test-suite&lt;/a&gt; and &lt;a href=&quot;http://www.json.org/JSON_checker/&quot;&gt;JSON Checker&lt;/a&gt;), but I found that most test suites did only cover basic cases.&lt;/p&gt;
&lt;p&gt;Finally, I also generated JSON files with the fuzzing software &lt;a href=&quot;http://lcamtuf.coredump.cx/afl/&quot;&gt;American Fuzzy Lop&lt;/a&gt;. I then removed redundant tests that produced the same set of results, and then reduced the remaining ones to the keep the least number of characters that triggered these results (see &lt;a href=&quot;http://seriot.ch/parsing_json.php#3&quot;&gt;section 3&lt;/a&gt;).&lt;/p&gt;
&lt;h4&gt; 2.1 Structure&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Scalars&lt;/strong&gt; - Clearly, scalars such as &lt;code&gt;123&lt;/code&gt; or &lt;code&gt;&quot;asd&quot;&lt;/code&gt; must be parsed. In practice, many popular parsers do still implement RFC 4627 and won't parse lonely values. So there are basic tests such as:&lt;/p&gt;
&lt;table class=&quot;monospace&quot; readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;y_structure_lonely_string.json&lt;/td&gt;
&lt;td&gt;&quot;asd&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Trailing commas&lt;/strong&gt; - Trailing commas such as in &lt;code&gt;[123,]&lt;/code&gt; or &lt;code&gt;{&quot;a&quot;:1,}&lt;/code&gt; are not part of the grammar, so these files should not pass, right? The thing is that RFC 8259 allows parsers to support &quot;extensions&quot; (&lt;a href=&quot;https://tools.ietf.org/html/rfc8259#section-9&quot;&gt;section 9&lt;/a&gt;), although it does not elaborates about extensions. In practice, allowing trailing commas is a common extension. Since it's not part of JSON grammar, parser &lt;em&gt;don't have&lt;/em&gt; to support it, so the file name starts with &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;monospace&quot; readability=&quot;2&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_object_trailing_comma.json&lt;/td&gt;
&lt;td&gt;{&quot;id&quot;:0,}&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_object_several_trailing_commas.json&lt;/td&gt;
&lt;td&gt;{&quot;id&quot;:0,,,,,}&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Comments&lt;/strong&gt; - Comments are not part of the grammar. Crockford &lt;a href=&quot;https://plus.google.com/+DouglasCrockfordEsq/posts/RK8qyGVaGSr&quot;&gt;removed&lt;/a&gt; them from early specifications. Yet, they are still another common extension. Some parsers allow trailing comments &lt;code&gt;[1]//xxx&lt;/code&gt;, or even inline comments &lt;code&gt;[1,/*xxx*/2]&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;monospace&quot; readability=&quot;2&quot;&gt;&lt;tr&gt;&lt;td class=&quot;fixedWidth&quot;&gt;y_string_comments.json&lt;/td&gt;
&lt;td&gt;[&quot;a/*b*/c/*d//e&quot;]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_object_trailing_comment.json&lt;/td&gt;
&lt;td&gt;{&quot;a&quot;:&quot;b&quot;}/**/&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_structure_object_with_comment.json&lt;/td&gt;
&lt;td&gt;{&quot;a&quot;:/*comment*/&quot;b&quot;}&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Unclosed Structures&lt;/strong&gt; - These tests cover everything that is opened and not closed or the opposite, such as &lt;code&gt;[&lt;/code&gt; or &lt;code&gt;[1,{,3]&lt;/code&gt;. They are clearly invalid and must fail.&lt;/p&gt;
&lt;table class=&quot;monospace&quot; readability=&quot;2&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_structure_object_unclosed_no_value.json&lt;/td&gt;
&lt;td&gt;{&quot;&quot;:&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_structure_object_followed_by_closing_object.json&lt;/td&gt;
&lt;td&gt;{}}&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Nested Structures&lt;/strong&gt; - Structures may contain other structures. An array may contain other arrays. The first element can be an array, whose first element is also an array, etc, like russian dolls &lt;code&gt;[[[[[]]]]]&lt;/code&gt;. RFC 8259 allows parsers to set limits to the maximum depth of nesting (&lt;a href=&quot;https://tools.ietf.org/html/rfc8259#section-9&quot;&gt;section 9&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In practice, several parsers don't set a depth limit and crash after a certain threshold. For example, Xcode itself will crash when opening a &lt;code&gt;.json&lt;/code&gt; file made the character &lt;code&gt;[&lt;/code&gt; repeated 10000 times, most probably because the JSON syntax highlighter does not implement a depth limit.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ python -c &quot;print('['*100000)&quot; &amp;gt; ~/x.json
$ ./Xcode ~/x.json
Segmentation fault: 11
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;White Spaces&lt;/strong&gt; - RFC 7159 grammar defines white spaces as &lt;code&gt;0x20&lt;/code&gt; (space), &lt;code&gt;0x09&lt;/code&gt; (tab), &lt;code&gt;0x0A&lt;/code&gt; (line feed) and &lt;code&gt;0x0D&lt;/code&gt; (carriage return). It allows white spaces before and after &quot;structural characters&quot; &lt;code&gt;[]{}:,&lt;/code&gt;. So, we'll write passing tests like &lt;code&gt;&lt;u&gt;20&lt;/u&gt;[&lt;u&gt;090A&lt;/u&gt;]&lt;u&gt;0D&lt;/u&gt;&lt;/code&gt; and failing ones including all kinds of white spaces that are not explicitely allowed, such as &lt;code&gt;0x0C&lt;/code&gt; form feed or &lt;code&gt;[&lt;u&gt;E281A0&lt;/u&gt;]&lt;/code&gt;, which is the UTF-8 encoding for &lt;code&gt;U+2060 WORD JOINER&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;monospace&quot; readability=&quot;2&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_structure_whitespace_formfeed.json&lt;/td&gt;
&lt;td&gt;[&lt;u&gt;0C&lt;/u&gt;]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_structure_whitespace_U+2060_word_joiner.json&lt;/td&gt;
&lt;td&gt;[&lt;u&gt;E281A0&lt;/u&gt;]&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_structure_no_data.json&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt; 2.2 Numbers&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;NaN and Infinity&lt;/strong&gt; - Strings that describe special numbers such as &lt;code&gt;NaN&lt;/code&gt; or &lt;code&gt;Infinity&lt;/code&gt; are not part of the JSON grammar. However, several parsers accept them, which can be considered as an &quot;extension&quot; (&lt;a href=&quot;https://tools.ietf.org/html/rfc8259#section-9&quot;&gt;section 9&lt;/a&gt;). Test files also test the negative forms &lt;code&gt;-NaN&lt;/code&gt; and &lt;code&gt;-Infinity&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;monospace&quot; readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_number_NaN.json&lt;/td&gt;
&lt;td&gt;[NaN]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_number_minus_infinity.json&lt;/td&gt;
&lt;td&gt;[-Infinity]&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Hex Numbers&lt;/strong&gt; - RFC 7159 doesn't allow hex numbers. Tests will include numbers such as &lt;code&gt;0xFF&lt;/code&gt;, and these files should not be parsed.&lt;/p&gt;
&lt;table class=&quot;monospace&quot; readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_number_hex_2_digits.json&lt;/td&gt;
&lt;td&gt;[0x42]&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Range and Precision&lt;/strong&gt; - What about numbers with a huge amount of digits? According to RFC 8259, &quot;A JSON parser MUST accept all texts that conform to the JSON grammar&quot; (&lt;a href=&quot;https://tools.ietf.org/html/rfc8259#section-9&quot;&gt;section 9&lt;/a&gt;). However, according to the same paragraph, &quot;An implementation may set limits on the range and precision of numbers.&quot;. So, it is unclear to me whether parsers are allowed to raise errors when they meet extreme values such &lt;code&gt;1e9999&lt;/code&gt; or &lt;code&gt;0.0000000000000000000000000000001&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;monospace&quot; readability=&quot;2&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;i_number_very_big_negative_int.json&lt;/td&gt;
&lt;td&gt;[-237462374673276894279832(...)&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;[Update 2016-11-02]&lt;/strong&gt; The original version of this article classified the &quot;Range and Precision&quot; tests as &lt;code&gt;y_&lt;/code&gt; (must pass). This classification was &lt;a href=&quot;https://github.com/nst/JSONTestSuite/issues/51&quot;&gt;challenged&lt;/a&gt; and I eventually changed the tests into &lt;code&gt;i_&lt;/code&gt; (implementation defined).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exponential Notation&lt;/strong&gt; - Parsing exponential notation can be surprisingly hard (see the results section). Here are some valid contents &lt;code&gt;[0E0]&lt;/code&gt;, &lt;code&gt;[0e+1]&lt;/code&gt; and invalid ones &lt;code&gt;[1.0e+]&lt;/code&gt;, &lt;code&gt;[0E]&lt;/code&gt; and &lt;code&gt;[1eE2]&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;monospace&quot; readability=&quot;2&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_number_0_capital_E+.json&lt;/td&gt;
&lt;td&gt;[0E+]&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_number_.2e-3.json&lt;/td&gt;
&lt;td&gt;[.2e-3]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;y_number_double_huge_neg_exp.json&lt;/td&gt;
&lt;td&gt;[123.456e-789]&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt; 2.3 Arrays&lt;/h4&gt;
&lt;p&gt;Most edge cases regarding arrays are opening/closing issues and nesting limit. These cases were discussed in section &lt;a href=&quot;http://seriot.ch/parsing_json.php#21&quot;&gt;2.1 Structure&lt;/a&gt;. Passing tests will include &lt;code&gt;[[],[[]]]&lt;/code&gt;, while failing tests will be like &lt;code&gt;]&lt;/code&gt; or &lt;code&gt;[[]]]&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;monospace&quot; readability=&quot;3&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_array_comma_and_number.json&lt;/td&gt;
&lt;td&gt;[,1]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_array_colon_instead_of_comma.json&lt;/td&gt;
&lt;td&gt;[&quot;&quot;: 1]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_array_unclosed_with_new_lines.json&lt;/td&gt;
&lt;td&gt;[1,&lt;u&gt;0A&lt;/u&gt;1&lt;u&gt;0A&lt;/u&gt;,1&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt; 2.4 Objects&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Duplicated Keys&lt;/strong&gt; - &lt;a href=&quot;https://tools.ietf.org/html/rfc8259#section-4&quot;&gt;RFC 8259 section 4&lt;/a&gt; says that &quot;The names within an object should be unique.&quot;. It does not prevent parsing objects where the same key does appear several times &lt;code&gt;{&quot;a&quot;:1,&quot;a&quot;:2}&lt;/code&gt;, but lets parsers decide what to do in this case. The same section 4 even mentions that &quot;(some) implementations report an error or fail to parse the object&quot;, without telling clearly if failing to parse such objects is compliant or not with the RFC and especially &lt;a href=&quot;https://tools.ietf.org/html/rfc8259#section-9&quot;&gt;section 9&lt;/a&gt;: &quot;A JSON parser MUST accept all texts that conform to the JSON grammar.&quot;.&lt;/p&gt;
&lt;p&gt;Variants of this special case include same key - same value &lt;code&gt;{&quot;a&quot;:1,&quot;a&quot;:1}&lt;/code&gt;, and similar keys or values, where the similarity depends on how you compare strings. For example, the keys may be binary different but equivalent according to Unicode NFC normalization, such as in &lt;code&gt;{&quot;&lt;u&gt;C3A9&lt;/u&gt;:&quot;NFC&quot;,&quot;&lt;u&gt;65CC81&lt;/u&gt;&quot;:&quot;NFD&quot;}&lt;/code&gt; where boths keys encode &quot;é&quot;. Tests will also include &lt;code&gt;{&quot;a&quot;:0,&quot;a&quot;:-0}&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;monospace&quot; readability=&quot;5&quot;&gt;&lt;tr&gt;&lt;td class=&quot;fixedWidth&quot;&gt;y_object_empty_key.json&lt;/td&gt;
&lt;td&gt;{&quot;&quot;:0}&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;y_object_duplicated_key_and_value.json&lt;/td&gt;
&lt;td&gt;{&quot;a&quot;:&quot;b&quot;,&quot;a&quot;:&quot;b&quot;}&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_object_double_colon.json&lt;/td&gt;
&lt;td&gt;{&quot;x&quot;::&quot;b&quot;}&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_object_key_with_single_quotes.json&lt;/td&gt;
&lt;td&gt;{key: 'value'}&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_object_missing_key.json&lt;/td&gt;
&lt;td&gt;{:&quot;b&quot;}&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_object_non_string_key.json&lt;/td&gt;
&lt;td&gt;{1:1}&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt; 2.5 Strings&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;File Encoding&lt;/strong&gt; - Former &lt;a href=&quot;https://tools.ietf.org/html/rfc7159#section-8.1&quot;&gt;RFC 7159&lt;/a&gt; did only recommend UTF-8, and said that &quot;JSON text SHALL be encoded in UTF-8, UTF-16, or UTF-32&quot;.&lt;/p&gt;
&lt;p&gt;Now RFC 8259 &lt;a href=&quot;https://tools.ietf.org/html/rfc8259#section-8.1&quot;&gt;section 8.1&lt;/a&gt; says that &quot;JSON text exchanged between systems that are not part of a closed ecosystem MUST be encoded using UTF-8&quot;.&lt;/p&gt;
&lt;p&gt;Still, passing tests should include text encoded in these three encodings. UTF-16 and UTF-32 texts should also include both their big-endian and little-endian variants.&lt;/p&gt;
&lt;p&gt;The parsing of invalid UTF-8 will be implementation defined.&lt;/p&gt;
&lt;table class=&quot;monospace&quot; readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td class=&quot;fixedWidth&quot;&gt;y_string_utf16.json&lt;/td&gt;
&lt;td&gt;&lt;u&gt;FFFE&lt;/u&gt;[&lt;u&gt;00&lt;/u&gt;&quot;&lt;u&gt;00E900&lt;/u&gt;&quot;&lt;u&gt;00&lt;/u&gt;]&lt;u&gt;00&lt;/u&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;i_string_iso_latin_1.json&lt;/td&gt;
&lt;td&gt;[&quot;&lt;u&gt;E9&lt;/u&gt;&quot;]&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;[Update 2016-11-04]&lt;/strong&gt; The first version of this article considered invalid UTF-8 as &lt;code&gt;n_&lt;/code&gt; tests. This classification was &lt;a href=&quot;https://github.com/nst/JSONTestSuite/issues/30&quot;&gt;challenged&lt;/a&gt; and I eventually changed these tests into &lt;code&gt;i_&lt;/code&gt; tests.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Byte Order Mark&lt;/strong&gt; - Former RFC 8259 &lt;a href=&quot;https://tools.ietf.org/html/rfc8259#section-8.1&quot;&gt;section 8.1&lt;/a&gt; stated &quot;Implementations MUST NOT add a byte order mark to the beginning of a JSON text&quot;, &quot;implementations (...) MAY ignore the presence of a byte order mark rather than treating it as an error&quot;.&lt;/p&gt;
&lt;p&gt;Now, RFC 8259 &lt;a href=&quot;https://tools.ietf.org/html/rfc8259#section-8.1&quot;&gt;section 8.1&lt;/a&gt; adds: &quot;Implementations MUST NOT add a byte order mark (&lt;code&gt;U+FEFF&lt;/code&gt;) to the beginning &lt;em&gt;of a networked-transmitted JSON text&lt;/em&gt;.&quot;, which seems to imply that implemenatations may now add a BOM when JSON is not sent over the network.&lt;/p&gt;
&lt;p&gt;Tests with implementation defined will include a plain UTF-8 BOM with no other content, a UTF-8 BOM with a UTF-8 string, but also a UTF-8 BOM with a UTF-16 string, and a UTF-16 BOM with a UTF-8 string.&lt;/p&gt;
&lt;table class=&quot;monospace&quot; readability=&quot;3&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_structure_UTF8_BOM_no_data.json&lt;/td&gt;
&lt;td&gt;&lt;u&gt;EFBBBF&lt;/u&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_structure_incomplete_UTF8_BOM.json&lt;/td&gt;
&lt;td&gt;&lt;u&gt;EFBB&lt;/u&gt;{}&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;i_structure_UTF-8_BOM_empty_object.json&lt;/td&gt;
&lt;td&gt;&lt;u&gt;EFBBBF&lt;/u&gt;{}&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Control Characters&lt;/strong&gt; - Control characters must be escaped, and are defined as &lt;code&gt;U+0000&lt;/code&gt; through &lt;code&gt;U+001F&lt;/code&gt; (&lt;a href=&quot;https://tools.ietf.org/html/rfc8259#section-7&quot;&gt;section 7&lt;/a&gt;). This range does not include &lt;code&gt;0x7F DEL&lt;/code&gt;, which may be part of other definitions of control characters (see &lt;a href=&quot;http://seriot.ch/parsing_json.php#46&quot;&gt;section 4.6 Bash JSON.sh&lt;/a&gt;). That is why passing tests include &lt;code&gt;[&quot;&lt;u&gt;7F&lt;/u&gt;&quot;]&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;monospace&quot; readability=&quot;2&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_string_unescaped_ctrl_char.json&lt;/td&gt;
&lt;td&gt;[&quot;a&lt;u&gt;09&lt;/u&gt;a&quot;]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;y_string_unescaped_char_delete.json&lt;/td&gt;
&lt;td&gt;[&quot;&lt;u&gt;7F&lt;/u&gt;&quot;]&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_string_escape_x.json&lt;/td&gt;
&lt;td&gt;[&quot;\x00&quot;]&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Escape&lt;/strong&gt; - &quot;All characters may be escaped&quot; (&lt;a href=&quot;https://tools.ietf.org/html/rfc8259#section-7&quot;&gt;section 7&lt;/a&gt;) like &lt;code&gt;\uXXXX&lt;/code&gt;, but some MUST be escaped: quotation mark, reverse solidus and control characters. Failing tests should include the escape character without the escaped value, or with an incomplete escaped value. Examples: &lt;code&gt;[&quot;\&quot;]&lt;/code&gt;, &lt;code&gt;[&quot;\&lt;/code&gt;, &lt;code&gt;[\&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;monospace&quot; readability=&quot;2&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;y_string_allowed_escapes.json&lt;/td&gt;
&lt;td&gt;[&quot;\&quot;\\/\b\f\n\r\t&quot;]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_structure_bad_escape.json&lt;/td&gt;
&lt;td&gt;[&quot;\&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The escape character can be used to represent codepoints in the Basic Multilingual Plane (&lt;code&gt;\u005C&lt;/code&gt;). Passing tests will include the zero character &lt;code&gt;\u0000&lt;/code&gt;, which may cause issues in C-based parsers. Failing tests will include capital U &lt;code&gt;\U005C&lt;/code&gt;, non-hexadecimal escaped values &lt;code&gt;\u123Z&lt;/code&gt; and incomplete escaped values &lt;code&gt;\u123&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;monospace&quot; readability=&quot;3&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;y_string_backslash_and_u_escaped_zero.json&lt;/td&gt;
&lt;td&gt;[&quot;\u0000&quot;]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_string_invalid_unicode_escape.json&lt;/td&gt;
&lt;td&gt;[&quot;\uqqqq&quot;]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_string_incomplete_escaped_character.json&lt;/td&gt;
&lt;td&gt;[&quot;\u00A&quot;]&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Escaped Invalid Characters&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Codepoints outside of the BMP are represented by their escaped UTF-16 surrogates: &lt;code&gt;U+1D11E&lt;/code&gt; becomes &lt;code&gt;\uD834\uDD1E&lt;/code&gt;. Passing tests will include single surrogates, since they are valid JSON according to the grammar. RFC 7159 &lt;a href=&quot;https://www.rfc-editor.org/errata_search.php?rfc=7159&amp;amp;eid=3984&quot;&gt;errata 3984&lt;/a&gt; raised the issue of grammatically correct escaped codepoints that don't encode Unicode characters.&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;The ABNF cannot at the same time allow non conformant Unicode codepoints (section 7) and states conformance to Unicode (section 1).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The editors considered that the grammar should not be restricted, and that warning users about the fact that parsers behaviour was &quot;unpredictable&quot; (&lt;a href=&quot;https://tools.ietf.org/html/rfc8259#section-8.2&quot;&gt;RFC 8259 section 8.2&lt;/a&gt;) was enough. In other words, parsers MUST parse u-escaped invalid codepoints, but the result is undefined, hence the &lt;code&gt;i_&lt;/code&gt; (implementation definded) prefix in the file name. According to the Unicode standard, invalid codepoints should be replaced by &lt;code&gt;U+FFFD REPLACEMENT CHARACTER&lt;/code&gt;. People familiar with &lt;a href=&quot;http://seriot.ch/resources/talks_papers/i_love_unicode_softshake.pdf&quot;&gt;Unicode complexity&lt;/a&gt; won't be surprised that this replacement is not mandatory, and can be done in several ways (see &lt;a href=&quot;http://unicode.org/review/pr-121.html&quot;&gt;Unicode PR #121: Recommended Practice for Replacement Characters&lt;/a&gt;). So several parsers use replacement characters, while other keep the escaped form or produce an non-Unicode character (see &lt;a href=&quot;http://seriot.ch/parsing_json.php#5&quot;&gt;Section 5 - Parsing Contents&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Update 2016-11-03]&lt;/strong&gt; In the first version of this article, I treated non-characters such as &lt;code&gt;U+FDD0&lt;/code&gt; to &lt;code&gt;U+10FFFE&lt;/code&gt; the same was as invalid codepoints (&lt;code&gt;i_&lt;/code&gt; tests). This classification was &lt;a href=&quot;https://github.com/nst/JSONTestSuite/issues/52&quot;&gt;challenged&lt;/a&gt; and I eventually changed the non-characters tests into &lt;code&gt;y_&lt;/code&gt; tests.&lt;/p&gt;
&lt;table class=&quot;monospace&quot; readability=&quot;6&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;y_string_accepted_surrogate_pair.json&lt;/td&gt;
&lt;td&gt;[&quot;\uD801\udc37&quot;]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_string_incomplete_escaped_character.json&lt;/td&gt;
&lt;td&gt;[&quot;\u00A&quot;]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;i_string_incomplete_surrogates_escape_valid.json&lt;/td&gt;
&lt;td&gt;[&quot;\uD800\uD800\n&quot;]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;i_string_lone_second_surrogate.json&lt;/td&gt;
&lt;td&gt;[&quot;\uDFAA&quot;]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;i_string_1st_valid_surrogate_2nd_invalid.json&lt;/td&gt;
&lt;td&gt;[&quot;\uD888\u1234&quot;]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;i_string_inverted_surrogates_U+1D11E.json&lt;/td&gt;
&lt;td&gt;[&quot;\uDd1e\uD834&quot;]&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Raw non-Unicode Characters&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The previous section discussed non-Unicode codepoints that appear in strings, such as &lt;code&gt;&quot;\uDEAD&quot;&lt;/code&gt;, which is valid Unicode in its u-escaped form, but doesn't decode into a Unicode character.&lt;/p&gt;
&lt;p&gt;Parsers also have to handle raw bytes that don't encode Unicode characters. For instance, the byte &lt;code&gt;&lt;u&gt;FF&lt;/u&gt;&lt;/code&gt; does not represent a Unicode character in UTF-8. As a consequence, a string containing &lt;code&gt;&lt;u&gt;FF&lt;/u&gt;&lt;/code&gt; is not an UTF-8 string. In this case, parsers should simply refuse to parse the string, because &quot;A string is a sequence of zero or more Unicode characters&quot; &lt;a href=&quot;https://tools.ietf.org/html/rfc8259#section-1&quot;&gt;RFC 8259 section 1&lt;/a&gt; and &quot;JSON text SHALL be encoded in Unicode &lt;a href=&quot;https://tools.ietf.org/html/rfc7159#section-8.1&quot;&gt;RFC 7159 section 8.1&lt;/a&gt;.&lt;/p&gt;
&lt;table class=&quot;monospace&quot; readability=&quot;2&quot;&gt;&lt;tr&gt;&lt;td class=&quot;fixedWidth&quot;&gt;y_string_utf8.json&lt;/td&gt;
&lt;td&gt;[&quot;€𝄞&quot;]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_string_invalid_utf-8.json&lt;/td&gt;
&lt;td&gt;[&quot;&lt;u&gt;FF&lt;/u&gt;&quot;]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;fixedWidth&quot;&gt;n_array_invalid_utf8.json&lt;/td&gt;
&lt;td class=&quot;grey&quot;&gt;[&lt;u&gt;FF&lt;/u&gt;]&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;RFC 8259 Ambiguities&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Beyond the specific cases we just went through, finding out if a parser is RFC 8259 compliant or not is next to impossible because of &lt;a href=&quot;http://seriot.ch/parsing_json.php&quot;&gt;section 9 &quot;Parsers&quot;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;A JSON parser MUST accept all texts that conform to the JSON grammar. A JSON parser MAY accept non-JSON forms or extensions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To this point, I perfectly understand the RFC. All grammatically correct inputs MUST be parsed, and parsers are free to accept other contents as well.&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;An implementation may set limits on the size of texts that it accepts. An implementation may set limits on the maximum depth of nesting. An implementation may set limits on the range and precision of numbers. An implementation may set limits on the length and character contents of strings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;All these limitations sound reasonable (except maybe the one about &quot;character contents&quot;), but contradict the &quot;MUST&quot; from the previous sentence. &lt;a href=&quot;https://tools.ietf.org/html/rfc2119&quot;&gt;RFC 2119&lt;/a&gt; is crystal-clear about the meaning of &quot;MUST&quot;:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;MUST - This word, or the terms &quot;REQUIRED&quot; or &quot;SHALL&quot;, mean that the definition is an absolute requirement of the specification.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;RFC 7159 allows restrictions, but does not set minimal requirements, so technically speaking, a parser that cannot parse strings longer than 3 characters is still compliant with RFC 7159.&lt;/p&gt;
&lt;p&gt;Also, RFC 7159 section 9 should require the parsers to document the restrictions clearly, and/or allow configuration by the user. These configurations would still cause interoperability issues, that's why minimal requirements should be preferred.&lt;/p&gt;
&lt;p&gt;This lack of precision regarding allowed restrictions makes it almost impossible to say if a parser is actually RFC 7159 compliant. Indeed, parsing contents that don't match the grammar is not wrong (it's an &quot;extension&quot;) and rejecting contents that does match the grammar is allowed (it's a parser &quot;limit&quot;).&lt;/p&gt;
&lt;h3&gt; 3. Testing Architecture&lt;/h3&gt;
&lt;p&gt;Independently from how parsers should behave, I wanted to observe how they actually behave, so I picked several JSON parsers and set up things so that I could feed them with my test files.&lt;/p&gt;
&lt;p&gt;As I'm a Cocoa developer, I included mostly Swift and Objective-C parsers, but also C, Python, Ruby, R, Lua, Perl, Bash and Rust parsers, chosen pretty arbitrarily. I mainly tried to achieve diversity in age, popularity and languages.&lt;/p&gt;
&lt;p&gt;Several parsers have options to increase or decrease strictness, tweak Unicode support or allow specific extensions. I strived to always configure the parsers so that they behave as close as possible to the most strict interpretation of RFC 8259.&lt;/p&gt;
&lt;p&gt;A Python script &lt;code&gt;run_tests.py&lt;/code&gt; runs each parser with each test file (or a single test when the file is passed as an argument). The parsers are generally wrapped so that the process returns 0 in case of success, 1 in case of parsing error, yet another status in case of crash, a 5-second delay being considered as a timeout. Basically, I turned JSON parsers into JSON validators.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;run_tests.py&lt;/code&gt; compares the return value of each test with the expected result indicated by the file name prefix. When the value doesn't match, or when this prefix is &lt;code&gt;i&lt;/code&gt; (implementation defined), &lt;code&gt;run_tests.py&lt;/code&gt; writes a line in a log file (&lt;code&gt;results/logs.txt&lt;/code&gt;) in a specific format such as:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Python 2.7.10   SHOULD_HAVE_FAILED  n_number_infinity.json
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://www.seriot.ch/json/run_tests.svg&quot; width=&quot;600&quot; alt=&quot;Testing Architecture&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;run_tests.py&lt;/code&gt; then reads the log file and generates HTML tables with the results (&lt;code&gt;results/parsing.html&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The results show one row per file, one column per parser, and one color per unexpected result. They also show detailed results by parser.&lt;/p&gt;
CrashTimeout
&lt;table class=&quot;monospace&quot; readability=&quot;5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td bgcolor=&quot;#CC6600&quot;&gt;parsing should have succeeded but failed&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td bgcolor=&quot;#FFCC33&quot;&gt;parsing should have failed but succeeded&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td bgcolor=&quot;#66CCFF&quot;&gt;result undefined, parsing succeeded&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td bgcolor=&quot;#0066FF&quot;&gt;result undefined, parsing failed&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#FF3333&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#666666&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Tests are sorted by results equality, making easy to spot sets of similar results and remove redundant tests.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.seriot.ch/json/similar_results.png&quot; border=&quot;1&quot; width=&quot;600&quot; alt=&quot;Sets of tests with similar results&quot; /&gt;&lt;/p&gt;
&lt;h3&gt; 4. Results and Comments&lt;/h3&gt;
&lt;p&gt;4.1 &lt;a href=&quot;http://seriot.ch/parsing_json.php#41&quot;&gt;Full Results&lt;/a&gt;&lt;br /&gt;4.2 &lt;a href=&quot;http://seriot.ch/parsing_json.php#42&quot;&gt;C Parsers&lt;/a&gt;&lt;br /&gt;4.3 &lt;a href=&quot;http://seriot.ch/parsing_json.php#43&quot;&gt;Obj-C Parsers&lt;/a&gt;&lt;br /&gt;4.4 &lt;a href=&quot;http://seriot.ch/parsing_json.php#44&quot;&gt;Apple (NS)JSONSerialization&lt;/a&gt;&lt;br /&gt;4.5 &lt;a href=&quot;http://seriot.ch/parsing_json.php#45&quot;&gt;Swift Freddy&lt;/a&gt;&lt;br /&gt;4.6 &lt;a href=&quot;http://seriot.ch/parsing_json.php#46&quot;&gt;Bash&lt;/a&gt;&lt;br /&gt;4.7 &lt;a href=&quot;http://seriot.ch/parsing_json.php#47&quot;&gt;Other Parsers&lt;/a&gt;&lt;br /&gt;4.8 &lt;a href=&quot;http://seriot.ch/parsing_json.php#48&quot;&gt;JSON Checker&lt;/a&gt;&lt;br /&gt;4.9 &lt;a href=&quot;http://seriot.ch/parsing_json.php#49&quot;&gt;Regex&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt; 4.1 Full Results&lt;/h4&gt;
&lt;p&gt;Full results are presented in &lt;a href=&quot;http://seriot.ch/json/parsing.html&quot;&gt;http://seriot.ch/json/parsing.html&lt;/a&gt;. The tests are vertically sorted by similar results, so it is easy to prune similar tests. An option in &lt;code&gt;run_tests.py&lt;/code&gt; will produce &quot;pruned results&quot;: when a set of tests yields the same results, only the first one is kept. Pruned results HTML file is available here: &lt;a href=&quot;http://www.seriot.ch/json/parsing_pruned.html&quot;&gt;http://www.seriot.ch/json/parsing_pruned.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The most serious issues are crashes (in red), since parsing an uncontrolled input may put the whole process at risk. The &quot;should have passed&quot; tests (in brown) are also very dangerous, because an uncontrolled input may prevent the parser to parse a whole document. The &quot;should have failed&quot; tests (in yellow) are more benign. They indicate a JSON &quot;extension&quot; that can be parsed. Everything will work fine, until the parser is replaced with another parser which does not parse the same &quot;extensions&quot;...&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://seriot.ch/json/pruned_results.png&quot;&gt;&lt;img src=&quot;http://seriot.ch/json/pruned_results.png&quot; border=&quot;1&quot; width=&quot;600&quot; alt=&quot;JSON Parsing Tests&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This section highlights and comments some noticeable results.&lt;/p&gt;
&lt;h4&gt; 4.2 C Parsers&lt;/h4&gt;
&lt;p&gt;Here are the five C parsers considered:&lt;/p&gt;
&lt;p&gt;And here is a quick comparison between them:&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;
&lt;th class=&quot;fixedWidthSmall&quot;&gt;jsmn&lt;/th&gt;
&lt;th class=&quot;fixedWidthSmall&quot;&gt;jansson&lt;/th&gt;
&lt;th class=&quot;fixedWidthSmall&quot;&gt;ccan&lt;/th&gt;
&lt;th class=&quot;fixedWidthSmall&quot;&gt;cJSON&lt;/th&gt;
&lt;th class=&quot;fixedWidthSmall&quot;&gt;json-parser&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Parses &lt;code&gt;[&quot;\u0000&quot;]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;YES&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;YES&lt;/td&gt;
&lt;td class=&quot;SHOULD_HAVE_PASSED&quot;&gt;NO&lt;/td&gt;
&lt;td class=&quot;SHOULD_HAVE_PASSED&quot;&gt;NO&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;YES&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Too liberal&lt;/td&gt;
&lt;td class=&quot;SHOULD_HAVE_FAILED&quot;&gt;YES&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;NO&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;NO&lt;/td&gt;
&lt;td class=&quot;SHOULD_HAVE_FAILED&quot;&gt;YES&lt;/td&gt;
&lt;td class=&quot;SHOULD_HAVE_FAILED&quot;&gt;YES&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Crash on nested structs.&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;NO&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;NO&lt;/td&gt;
&lt;td class=&quot;CRASH&quot;&gt;YES&lt;/td&gt;
&lt;td class=&quot;CRASH&quot;&gt;YES&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;NO&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Rejects big numbers&lt;/td&gt;
&lt;td class=&quot;SHOULD_HAVE_PASSED&quot;&gt;YES&lt;/td&gt;
&lt;td class=&quot;SHOULD_HAVE_PASSED&quot;&gt;YES&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;NO&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;NO&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;NO&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;You can refer to the full results for more details.&lt;/p&gt;
&lt;h4&gt; 4.3 Objective-C Parsers&lt;/h4&gt;
&lt;p&gt;Here are a couple of Objective-C parsers that used to be very popular in the early days of iOS development, especially because Apple waited until iOS 5 to release NSJSONSerialization. They are still interesting to test, since they are used in production in many applications. Let's consider:&lt;/p&gt;
&lt;p&gt;And here is a quick comparison between them:&lt;/p&gt;
&lt;table readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;
&lt;th class=&quot;fixedWidthSmall&quot;&gt;JSONKit&lt;/th&gt;
&lt;th class=&quot;fixedWidthSmall&quot;&gt;TouchJSON&lt;/th&gt;
&lt;th class=&quot;fixedWidthSmall&quot;&gt;SBJSON&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Crash on nested structs.&lt;/td&gt;
&lt;td class=&quot;CRASH&quot;&gt;YES&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;NO&lt;/td&gt;
&lt;td class=&quot;CRASH&quot;&gt;YES&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Crash on invalid UTF-8&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;NO&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;NO&lt;/td&gt;
&lt;td class=&quot;CRASH&quot;&gt;YES&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Parses trailing garbage &lt;code&gt;[]x&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;NO&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;NO&lt;/td&gt;
&lt;td class=&quot;SHOULD_HAVE_FAILED&quot;&gt;YES&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Rejects big numbers&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;NO&lt;/td&gt;
&lt;td class=&quot;SHOULD_HAVE_PASSED&quot;&gt;YES&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;NO&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Parses bad numbers &lt;code&gt;[0.e1]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;NO&lt;/td&gt;
&lt;td class=&quot;SHOULD_HAVE_FAILED&quot;&gt;YES&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;NO&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Treats &lt;code&gt;0x0C FORM FEED&lt;/code&gt; as white space&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;NO&lt;/td&gt;
&lt;td class=&quot;SHOULD_HAVE_FAILED&quot;&gt;YES&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;NO&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Parses non-char. &lt;code&gt;[&quot;\uFFFF&quot;]&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;SHOULD_HAVE_PASSED&quot;&gt;NO&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;YES&lt;/td&gt;
&lt;td class=&quot;PASS&quot;&gt;YES&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;SBJSON survived after the arrival of NSJSONSerialization, is still maintained and is available through CocoaPods, so I reported the crash when parsing non UTF-8 strings such as &lt;code&gt;[&quot;&lt;u&gt;FF&lt;/u&gt;&quot;]&lt;/code&gt; in &lt;a href=&quot;https://github.com/stig/json-framework/issues/219&quot;&gt;issue #219&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;*** Assertion failure in -[SBJson4Parser parserFound:isValue:], SBJson4Parser.m:150
*** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Invalid parameter not satisfying: obj'
*** First throw call stack:
(
    0   CoreFoundation                      0x00007fff95f4b4f2 __exceptionPreprocess + 178
    1   libobjc.A.dylib                     0x00007fff9783bf7e objc_exception_throw + 48
    2   CoreFoundation                      0x00007fff95f501ca +[NSException raise:format:arguments:] + 106
    3   Foundation                          0x00007fff9ce86856 -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 198
    4   test_SBJSON                         0x00000001000067e5 -[SBJson4Parser parserFound:isValue:] + 309
    5   test_SBJSON                         0x00000001000073f3 -[SBJson4Parser parserFoundString:] + 67
    6   test_SBJSON                         0x0000000100004289 -[SBJson4StreamParser parse:] + 2377
    7   test_SBJSON                         0x0000000100007989 -[SBJson4Parser parse:] + 73
    8   test_SBJSON                         0x0000000100005d0d main + 221
    9   libdyld.dylib                       0x00007fff929ea5ad start + 1
)
libc++abi.dylib: terminating with uncaught exception of type NSException
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4&gt; 4.4 Apple (NS)JSONSerialization&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/reference/foundation/nsjsonserialization&quot;&gt;https://developer.apple.com/reference/foundation/nsjsonserialization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NSJSONSerialization was introduced with iOS 5 and is the standard JSON parser on OS X and iOS since then. It is available in Objective-C, and was rewritten in Swift: &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSJSONSerialization.swift&quot;&gt;NSJSONSerialization.swift&lt;/a&gt;. The NS prefix was then &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/commit/b914527d4d560602afc90da29254e1f1571672dd#diff-959321c08d3a9f8d385f2daca75a80b2&quot;&gt;dropped&lt;/a&gt; in Swift 3.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Restrictions and Extensions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JSONSerialization has the following, undocumented restrictions:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;it won't parse big numbers: &lt;code&gt;[123123e100000]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;it won't parse u-escaped invalid codepoints: &lt;code&gt;[&quot;\ud800&quot;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;JSONSerialization has the following, undocumented extension:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;it does parse trailing commas: &lt;code&gt;[1,]&lt;/code&gt; and &lt;code&gt;{&quot;a&quot;:0,}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I find the restriction about invalid codepoints to be especially problematic, especially in such a high-profile parser, because trying to parse uncontrolled contents may result in a parsing failure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Crash on Serialization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This article is more about JSON parsing than JSON producing, yet I wanted to mention this crash that I found in JSONSerialization when writing &lt;code&gt;Double.nan&lt;/code&gt;. Remember that &lt;code&gt;NaN&lt;/code&gt; does not conform to JSON grammar, so in this case, JSONSerialization should throw an error, but not crash the whole process.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;do {
    let a = [Double.nan]
    let data = try JSONSerialization.data(withJSONObject: a, options: [])
} catch let e {
}

SIGABRT

*** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: 'Invalid number value (NaN) in JSON write'
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;[Update 2016-10-27]&lt;/strong&gt; The original version of this article erroneously said that &lt;code&gt;JSONSerialization.isValidJSONObject([&quot;x&quot;:&quot;x&quot;, &quot;x&quot;:&quot;x&quot;])&lt;/code&gt; would crash because of a bug in the method. &lt;a href=&quot;https://twitter.com/H2CO3_iOS/status/791344089807675392&quot;&gt;@H2CO3_iOS found&lt;/a&gt; that the crash is not related to JSONSerialization but to Swift dictionaries, that just cannot be build with the same key appearing twice.&lt;/p&gt;
&lt;h4&gt; 4.5 Freddy (Swift)&lt;/h4&gt;
&lt;p&gt;Freddy (&lt;a href=&quot;https://github.com/bignerdranch/Freddy&quot;&gt;https://github.com/bignerdranch/Freddy&lt;/a&gt;) is a real JSON Parser written is Swift 3. I say real because several GitHub projects claim to be Swift JSON parsers, but actually use Apple JSONSerialization and just map JSON contents with model objects.&lt;/p&gt;
&lt;p&gt;Freddy is interesting because it is written by a famous organization of Cocoa developers, and does leverage Swift type safety by using a Swift enum to represent the different kind of JSON nodes (Array, Dictionary, Double, Int, String, Bool and Null).&lt;/p&gt;
&lt;p&gt;But, being &lt;a href=&quot;https://www.bignerdranch.com/blog/introducing-freddy-an-open-source-framework-for-parsing-json-in-swift&quot;&gt;released in January 2016&lt;/a&gt;, Freddy is still young, and buggy. My test suite showed that unclosed structures such as &lt;code&gt;[1,&lt;/code&gt; and &lt;code&gt;{&quot;a&quot;:&lt;/code&gt; used to crash the parser, as well as a string with a single space &lt;code&gt;&quot; &quot;&lt;/code&gt;, so I opened &lt;a href=&quot;https://github.com/bignerdranch/Freddy/issues/199&quot;&gt;issue #199&lt;/a&gt; that was fixed within 1 day!&lt;/p&gt;
&lt;p&gt;Additionnally, I found that &lt;code&gt;&quot;0e1&quot;&lt;/code&gt; was incorrectly rejected by the parser, so I opened &lt;a href=&quot;https://github.com/bignerdranch/Freddy/issues/198&quot;&gt;issue #198&lt;/a&gt;, which was also fixed within 1 day.&lt;/p&gt;
&lt;p&gt;However, Freddy does still crash on 2016-10-18 when parsing &lt;code&gt;[&quot;\&lt;/code&gt;. I reported the bug in (&lt;a href=&quot;https://github.com/bignerdranch/Freddy/issues/206&quot;&gt;issue #206&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The following table does summarize the evolution of Freddy's behaviour:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.seriot.ch/json/freddy_results.png&quot;&gt;&lt;img src=&quot;http://www.seriot.ch/json/freddy_results.png&quot; border=&quot;1&quot; width=&quot;600&quot; alt=&quot;Freddy JSON Parser Tests Results&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt; 4.6 Bash JSON.sh&lt;/h4&gt;
&lt;p&gt;I tested &lt;a href=&quot;https://github.com/dominictarr/JSON.sh/&quot;&gt;https://github.com/dominictarr/JSON.sh/&lt;/a&gt; from 2016-08-12.&lt;/p&gt;
&lt;p&gt;This Bash parser relies on a regex to find the control characters, which MUST be backslash-escaped according to RFC 8259. But Bash and JSON don't share the same definition of control characters.&lt;/p&gt;
&lt;p&gt;The regex uses the &lt;code&gt;:cntlr:&lt;/code&gt; syntax to match control characters, which is a shorthand for &lt;code&gt;[\x00-\x1F\x7F]&lt;/code&gt;. But according to JSON grammar, &lt;code&gt;0x7F DEL&lt;/code&gt; is not part of control characters, and may appear unescaped.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; 00 nul   01 soh   02 stx   03 etx   04 eot   05 enq   06 ack   07 bel
 08 bs    09 ht    0a nl    0b vt    0c np    0d cr    0e so    0f si
 10 dle   11 dc1   12 dc2   13 dc3   14 dc4   15 nak   16 syn   17 etb
 18 can   19 em    1a sub   1b esc   1c fs    1d gs    1e rs    1f us
 20 sp    21  !    22  &quot;    23  #    24  $    25  %    26  &amp;amp;    27  '
 28  (    29  )    2a  *    2b  +    2c  ,    2d  -    2e  .    2f  /
 30  0    31  1    32  2    33  3    34  4    35  5    36  6    37  7
 38  8    39  9    3a  :    3b  ;    3c  &amp;lt;    3d  =    3e  &amp;gt;    3f  ?
 40  @    41  A    42  B    43  C    44  D    45  E    46  F    47  G
 48  H    49  I    4a  J    4b  K    4c  L    4d  M    4e  N    4f  O
 50  P    51  Q    52  R    53  S    54  T    55  U    56  V    57  W
 58  X    59  Y    5a  Z    5b  [    5c  \    5d  ]    5e  ^    5f  _
 60  `    61  a    62  b    63  c    64  d    65  e    66  f    67  g
 68  h    69  i    6a  j    6b  k    6c  l    6d  m    6e  n    6f  o
 70  p    71  q    72  r    73  s    74  t    75  u    76  v    77  w
 78  x    79  y    7a  z    7b  {    7c  |    7d  }    7e  ~    7f del
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As a consequence, JSON.sh cannot parse &lt;code&gt;[&quot;&lt;u&gt;7F&lt;/u&gt;&quot;]&lt;/code&gt;. I reported this bug in &lt;a href=&quot;https://github.com/dominictarr/JSON.sh/issues/46&quot;&gt;issue #46&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Additionally, JSON.sh does not limit the nesting level, and will crash when parsing 10000 times the open array character &lt;code&gt;[&lt;/code&gt;. I reported this bug in &lt;a href=&quot;https://github.com/dominictarr/JSON.sh/issues/47&quot;&gt;issue #47&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ python -c &quot;print('['*100000)&quot; | ./JSON.sh 
./JSON.sh: line 206: 40694 Done                    tokenize
     40695 Segmentation fault: 11  | parse
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4&gt; 4.7 Other Parsers&lt;/h4&gt;
&lt;p&gt;Besides C / Objective-C and Swift, I also tested parsers from other environments. Here is a synthetic review of their extensions and restrictions, with a subset of the &lt;a href=&quot;http://seriot.ch/json/parsing.html&quot;&gt;full tests results&lt;/a&gt;. The goal of this table is to demonstrate that there are no two parsers that agree on what is wrong and what is right.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.seriot.ch/json/other_parsers.png&quot;&gt;&lt;img src=&quot;http://www.seriot.ch/json/other_parsers.png&quot; border=&quot;1&quot; width=&quot;600&quot; alt=&quot;JSON Parsers Differences&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are the references for the tested parsers:&lt;/p&gt;
&lt;p&gt;Upon popular request, I also added the following Java parsers, which are not shown on this image but that appear in the full results:&lt;/p&gt;
&lt;p&gt;The Python JSON module will parse &lt;code&gt;NaN&lt;/code&gt; or &lt;code&gt;-Infinity&lt;/code&gt; as numbers. While this behaviour can be fixed by setting the &lt;code&gt;parse_constant&lt;/code&gt; options to a function that will raise an Exception as shown below, it's such an uncommon practice that I didn't use it in the tests, and let the parser erroneously parse these number constants.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def f_parse_constant(o):
    raise ValueError

o = json.loads(data, parse_constant=f_parse_constant)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4&gt; 4.8 JSON Checker&lt;/h4&gt;
&lt;p&gt;A JSON parser transforms a JSON document into another representation. If the input is invalid JSON, the parser returns an error.&lt;/p&gt;
&lt;p&gt;Some programs don't transform their input, but just tell if the JSON is valid or not. These programs are JSON validators.&lt;/p&gt;
&lt;p&gt;json.org has a such a program, written in C, called JSON_Checker &lt;a href=&quot;http://www.json.org/JSON_checker/&quot;&gt;http://www.json.org/JSON_checker/&lt;/a&gt;, that even comes with a (small) test suite:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;JSON_Checker is a Pushdown Automaton that very quickly determines if a JSON text is syntactically correct. It could be used to filter inputs to a system, or to verify that the outputs of a system are syntactically correct. It could be adapted to produce a very fast JSON parser.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even if JSON_Checker is not a formal reference implementation, one could expect JSON_Checker to clarify JSON specifications or at least implement them correctly.&lt;/p&gt;
&lt;p&gt;Unfortunately, JSON_Checker violates the specifications defined on same web site. Indeed, JSON_Checker will parse the following inputs: &lt;code&gt;[1.]&lt;/code&gt;, &lt;code&gt;[0.e1]&lt;/code&gt;, which do not match JSON grammar.&lt;/p&gt;
&lt;p&gt;Moreover, JSON_Checker will reject &lt;code&gt;[0e1]&lt;/code&gt; which is a perfectly valid JSON number. This last bug is even more serious because a whole document can be rejected as long as it contains the number &lt;code&gt;0e1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The elegance of the JSON_Checker implementation as a pushdown automaton doesn't prevent the code from being wrong, but at least the state transition table makes it easy to spot the errors, especially when you add the states onto the schema of what is a number.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.seriot.ch/json/json_grammar_number.png&quot; border=&quot;0&quot; width=&quot;600&quot; alt=&quot;JSON Grammar - Numbers&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bug 1: rejection of 0e1&lt;/strong&gt; In the code, the state &lt;code&gt;ZE&lt;/code&gt;, reached after parsing &lt;code&gt;0&lt;/code&gt;, just lacks transitions to &lt;code&gt;E1&lt;/code&gt; by reading &lt;code&gt;e&lt;/code&gt; or &lt;code&gt;E&lt;/code&gt;. We can fix this case by adding the two missing transitions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bug 2: acceptance of [1.]&lt;/strong&gt; In one case, like after &lt;code&gt;0.&lt;/code&gt;, the grammar requires a digit. In the other case, like after &lt;code&gt;0.1&lt;/code&gt; the grammar doesn't. And yet JSON_Checker defines a single state &lt;code&gt;FR&lt;/code&gt; instead of two. We can fix this case by replacing the &lt;code&gt;FR&lt;/code&gt; state in red on the schema with a new state &lt;code&gt;F0&lt;/code&gt; or &lt;code&gt;frac0&lt;/code&gt;. With this fix, the parser will require a digit after &lt;code&gt;1.&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.seriot.ch/json/json_checker_state_transition_table.jpg&quot; width=&quot;600&quot; border=&quot;0&quot; alt=&quot;JSON Checker Fix&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Several other parsers (Obj-C TouchJSON, PHP, R rjson, Rust json-rust, Bash JSON.sh, C jsmn and Lua dkjson) will also erroneously parse &lt;code&gt;[1.]&lt;/code&gt;. One may wonder if, at least in some cases, this bug may have spread from JSON_Checker because parser developers and testers used it as a reference, as advised on json.org.&lt;/p&gt;
&lt;p&gt;[Update 2017-11-18] The aforementioned bugs have been fixed, and JSON Checker is now published on &lt;a href=&quot;https://github.com/douglascrockford/JSON-c&quot;&gt;Douglas Crockford's GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt; 4.9 Regex&lt;/h4&gt;
&lt;p&gt;We may wonder if a regex can validate the conformance to JSON grammar of a given input. See for instance this attempt to find the shortest regex on &lt;a href=&quot;http://codegolf.stackexchange.com/questions/474/write-a-json-validator&quot;&gt;StackExchange: Write a JSON Validator&lt;/a&gt;. The problem is that it is very difficult to know if a regex does succeed or not without a solid test suite.&lt;/p&gt;
&lt;p&gt;I found this &lt;a href=&quot;http://stackoverflow.com/questions/2583472/regex-to-validate-json&quot;&gt;Ruby regex to validate JSON&lt;/a&gt; on StackOverflow to be the best one:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;JSON_VALIDATOR_RE = /(
    # define subtypes and build up the json syntax, BNF-grammar-style
    # The {0} is a hack to simply define them as named groups here but not match on them yet
    # I added some atomic grouping to prevent catastrophic backtracking on invalid inputs
    (?&amp;lt;number&amp;gt;  -?(?=[1-9]|0(?!\d))\d+(\.\d+)?([eE][+-]?\d+)?){0}
    (?&amp;lt;boolean&amp;gt; true | false | null ){0}
    (?&amp;lt;string&amp;gt;  &quot; (?&amp;gt;[^&quot;\\\\]* | \\\\ [&quot;\\\\bfnrt\/] | \\\\ u [0-9a-f]{4} )* &quot; ){0}
    (?&amp;lt;array&amp;gt;   \[ (?&amp;gt; \g&amp;lt;json&amp;gt; (?: , \g&amp;lt;json&amp;gt; )* )? \s* \] ){0}
    (?&amp;lt;pair&amp;gt;    \s* \g&amp;lt;string&amp;gt; \s* : \g&amp;lt;json&amp;gt; ){0}
    (?&amp;lt;object&amp;gt;  \{ (?&amp;gt; \g&amp;lt;pair&amp;gt; (?: , \g&amp;lt;pair&amp;gt; )* )? \s* \} ){0}
    (?&amp;lt;json&amp;gt;    \s* (?&amp;gt; \g&amp;lt;number&amp;gt; | \g&amp;lt;boolean&amp;gt; | \g&amp;lt;string&amp;gt; | \g&amp;lt;array&amp;gt; | \g&amp;lt;object&amp;gt; ) \s* ){0}
    )
    \A \g&amp;lt;json&amp;gt; \Z
    /uix
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Yet, it fails to parse valid JSON, such as:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;u-escaped codepoints, including valid ones: &lt;code&gt;[&quot;\u002c&quot;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;backslash-escaped backslash: &lt;code&gt;[&quot;\\a&quot;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Also, it does parse the following extensions, which is just a bug for a JSON validator:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;a capitalized True: &lt;code&gt;[True]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;an unescaped control character: &lt;code&gt;[&quot;&lt;u&gt;09&lt;/u&gt;&quot;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt; 5. Parsing Contents&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc8259#section-9&quot;&gt;RFC 8259 Section 9&lt;/a&gt; says:&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;A JSON parser transforms a JSON text into another representation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;All of the above testing architecture will only tell if a parser would parse a JSON document or not, but doesn't say anything about the representation of the resulting contents.&lt;/p&gt;
&lt;p&gt;For example, a parser may parse the u-escaped invalid Unicode character (&lt;code&gt;&quot;\uDEAD&quot;&lt;/code&gt;) without error, but what will the result be like? a replacement character, or something else, who knows? RFC 8259 is silent about it.&lt;/p&gt;
&lt;p&gt;Similarily, extreme numbers such as &lt;code&gt;0.00000000000000000000001&lt;/code&gt; or &lt;code&gt;-0&lt;/code&gt; can be parsed, but what should the result be? RFC 8259 doesn't make a distinction between integers and doubles, or zero and -zero. It doesn't even say if numbers can be converted into strings or not.&lt;/p&gt;
&lt;p&gt;And what about objects with the same keys (&lt;code&gt;{&quot;a&quot;:1,&quot;a&quot;:2}&lt;/code&gt;)? Or same keys and same values (&lt;code&gt;{&quot;a&quot;:1,&quot;a&quot;:1}&lt;/code&gt;)? And how should a parser compare object keys?? Should it use binary comparison or a Unicode normal form such as NFC? Here again, RFC is silent&lt;/p&gt;
&lt;p&gt;In all these cases, parsers are free to output whatever they want, leading to interoperability issues (think of what could go wrong when you decide to change your usual JSON parser with another one).&lt;/p&gt;
&lt;p&gt;With that in mind, let's create tests for which the representation after parsing is not clearly defined. These tests serve only to document how parsers output may differ.&lt;/p&gt;
&lt;p&gt;Contrary to the parsing tests, these tests are hard to automate. Instead, the results shown here were observed via log statements and/or debuggers.&lt;/p&gt;
&lt;p&gt;Below is an inexhaustive list of some striking differences between resulting representations after parsing. All results are shown in appendix &quot;&lt;a href=&quot;http://seriot.ch/json/transform.html&quot;&gt;Parsing Contents&lt;/a&gt;&quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Numbers&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;5.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code&gt;1.000000000000000005&lt;/code&gt; is generally converted into the float &lt;code&gt;1.0&lt;/code&gt;, but Rust 1.12.0 / json 0.10.2 will keep the original precision and use the number &lt;code&gt;1.000000000000000005&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;code&gt;1E-999&lt;/code&gt; is generally converted into float or double &lt;code&gt;0.0&lt;/code&gt;, but Swift Freddy yields the string &lt;code&gt;&quot;1E-999&quot;&lt;/code&gt;. Swift Apple JSONSerializattion and Obj-C JSONKit will simply refuse to parse it and return an error.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;code&gt;10000000000000000999&lt;/code&gt; may be converted into a double (Swift Apple JSONSerialization), an unsigned long long (Objective-C JSONKit) or a string (Swift Freddy). It is to be noted that C cJSON will parse this number as a double, but loses precision in the process, resulting in a new number &lt;code&gt;10000000000000002048&lt;/code&gt; (note the last four digits).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Objects&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;18.5&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;In &lt;code&gt;{&quot;&lt;u&gt;C3A9&lt;/u&gt;:&quot;NFC&quot;,&quot;&lt;u&gt;65CC81&lt;/u&gt;&quot;:&quot;NFD&quot;}&lt;/code&gt; keys are NFC and NFD representations of &quot;é&quot;. Most parsers will yield the two keys, except Swift parsers Apple JSONSerialization and Freddy, where dictionaries first normalize keys before testing them for equality.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;16&quot;&gt;
&lt;p&gt;&lt;code&gt;{&quot;a&quot;:1,&quot;a&quot;:2}&lt;/code&gt; does generally result in &lt;code&gt;{&quot;a&quot;:2}&lt;/code&gt; (Freddy, SBJSON, Go, Python, JavaScript, Ruby, Rust, Lua dksjon), but may also result in &lt;code&gt;{&quot;a&quot;:1}&lt;/code&gt; (Obj-C Apple NSJSONSerialization, Swift Apple JSONSerialization, Swift Freddy), or &lt;code&gt;{&quot;a&quot;:1,&quot;a&quot;:2}&lt;/code&gt; (cJSON, R, Lua JSON).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;&lt;code&gt;{&quot;a&quot;:1,&quot;a&quot;:1}&lt;/code&gt; does generally result in &lt;code&gt;{&quot;a&quot;:1}&lt;/code&gt;, but is parsed as &lt;code&gt;{&quot;a&quot;:1,&quot;a&quot;:1}&lt;/code&gt; in cJSON, R and Lua JSON.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;code&gt;{&quot;a&quot;:0,&quot;a&quot;:-0}&lt;/code&gt; is generally parsed as &lt;code&gt;{&quot;a&quot;:0}&lt;/code&gt;, but can also be parsed as &lt;code&gt;{&quot;a&quot;:-0}&lt;/code&gt; (Obj-C JSONKit, Go, JavaScript, Lua) or even &lt;code&gt;{&quot;a&quot;:0, &quot;a&quot;:0}&lt;/code&gt; (cJSON, R).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Strings&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;12.612903225806&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;&lt;code&gt;[&quot;A\u0000B&quot;]&lt;/code&gt; contains the u-escaped form of the &lt;code&gt;0x00 NUL&lt;/code&gt; character, which is likely to cause problems in C-based JSON parsers. Most parsers handle this payload gracefully, but JSONKit and cJSON won't parse it. Interestingly, Freddy yields only &lt;code&gt;[&quot;A&quot;]&lt;/code&gt; (the string stop after unescaping byte &lt;code&gt;0x00&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;code&gt;[&quot;\uD800&quot;]&lt;/code&gt; is the u-escaped form of &lt;code&gt;U+D800&lt;/code&gt;, an invalid lone UTF-16 surrogate. Many parsers will fail and return an error, despite the string being perfectly valid according to JSON grammar. Python leaves the string untouched and yields &lt;code&gt;[&quot;\uD800&quot;]&lt;/code&gt;. Go and JavaScript replace the offending chacracter with &quot;�&quot; &lt;code&gt;U+FFFD REPLACEMENT CHARACTER&lt;/code&gt; &lt;code&gt;[&quot;&lt;u&gt;EFBFBD&lt;/u&gt;&quot;]&lt;/code&gt;, R rjson and Lua dkjson simply translate the codepoint into its UTF-8 representation &lt;code&gt;[&quot;&lt;u&gt;EDA080&lt;/u&gt;&quot;]&lt;/code&gt;. R jsonlite and Lua JSON 20160728.17 replace the offending codepoint with a question mark &lt;code&gt;[&quot;?&quot;]&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;9.2105263157895&quot;&gt;
&lt;p&gt;&lt;code&gt;[&quot;EDA080&quot;]&lt;/code&gt; is the non-escaped, UTF-8 form or &lt;code&gt;U+D800&lt;/code&gt;, the invalid lone UTF-16 surrogate discussed in previous point. This string is not valid UTF-8 and should be rejected (see &lt;a href=&quot;http://seriot.ch/parsing_json.php#25&quot;&gt;section 2.5 Strings - Raw non-Unicode Characters&lt;/a&gt;). In practice however, several parsers leave the string untouched &lt;code&gt;[&quot;EDA080&quot;]&lt;/code&gt; such as cJSON, R rjson and jsonlite, Lua JSON, Lua dkjson and Ruby. Go and Javacript yield &lt;code&gt;[&quot;&lt;u&gt;EFBFBDEFBFBDEFBFBD&lt;/u&gt;&quot;]&lt;/code&gt; that is three replacement characters (one per byte). Interestingly, Python 2 converts the sequence into its unicode-escaped form &lt;code&gt;[&quot;\ud800&quot;]&lt;/code&gt;, while Python 3 thows a &lt;code&gt;UnicodeDecodeError&lt;/code&gt; exception.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code&gt;[&quot;\uD800\uD800&quot;]&lt;/code&gt; makes some parsers go nuts. R jsonlite yields &lt;code&gt;[&quot;\U00010000&quot;]&lt;/code&gt;, while Ruby parser yields &lt;code&gt;[&quot;&lt;u&gt;F0908080&lt;/u&gt;&quot;]&lt;/code&gt;. I still don't get where this value comes from.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;[Update 2017-11-18]&lt;/strong&gt; A &lt;a href=&quot;https://justi.cz/security/2017/11/14/couchdb-rce-npm.html&quot;&gt;RCE vulnerability was found in CouchDB&lt;/a&gt; because two JSON parsers handle duplicate key differently. The same JSON object, when parsed in JavaScript, contains &lt;code&gt;&quot;roles&quot;: []'&lt;/code&gt;, but when parsed in Erlang it contains &lt;code&gt;&quot;roles&quot;: [&quot;_admin&quot;]&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt; 6. STJSON&lt;/h3&gt;
&lt;p&gt;STJSON is a Swift 3, 600+ lines JSON parser I wrote to see what it took to consider all pitfalls and pass all tests.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nst/STJSON&quot;&gt;https://github.com/nst/STJSON&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;STJSON API is very simple:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var p = STJSONParser(data: data)

do {
    let o = try p.parse()
    print(o)
} catch let e {
    print(e)
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;STJSON can be instantiated with additional parameters:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var p = STJSON(data:data,
               maxParserDepth:1024,
               options:[.useUnicodeReplacementCharacter])
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In fact, there is only one test where STJSON fails: &lt;code&gt;y_string_utf16.json&lt;/code&gt;. This is because, as in nearly all other parsers, STJSON does not support non UTF-8 encodings, even though it should not be very difficult to add, and I may do so in the future if needed. At least, STJSON does raise appropriate errors when a file starts with a UTF-16 or UTF-32 byte order mark.&lt;/p&gt;
&lt;h3&gt; 7. Conclusion&lt;/h3&gt;
&lt;p&gt;In conclusion, JSON is not a data format you can rely on blindly. I've demonstrated this by showing that the standard definition is spread out over at least seven different documents (&lt;a href=&quot;http://seriot.ch/parsing_json.php#1&quot;&gt;section 1&lt;/a&gt;), that the latest and most complete document, RFC-8259, is imprecise and contradictory (&lt;a href=&quot;http://seriot.ch/parsing_json.php#2&quot;&gt;section 2&lt;/a&gt;), and by crafting test files that out of over 30 parsers, no two parsers parsed the same set of documents the same way (&lt;a href=&quot;http://seriot.ch/parsing_json.php#4&quot;&gt;section 4&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In the process of inspecting parser results, I also discovered that json_checker.c from json.org did reject valid JSON &lt;code&gt;[0e1]&lt;/code&gt; (&lt;a href=&quot;http://seriot.ch/json.php#424&quot;&gt;section 4.24&lt;/a&gt;), which certainly doesn't help users to know what's right or wrong. In a general way, many parsers authors like to brag about how right is their parsers (including myself), but there's no way to assess their quality since references are debatable and existing test suites are generally poor.&lt;/p&gt;
&lt;p&gt;So, I wrote yet another JSON parser (&lt;a href=&quot;http://seriot.ch/json.php#6&quot;&gt;section 6&lt;/a&gt;) which will parse or reject JSON document according to my understanding of RFC 7159. Feel free to comment, open issues and pull requests.&lt;/p&gt;
&lt;p&gt;This work may be continued by:&lt;/p&gt;
&lt;ul readability=&quot;5.7209165687427&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Documenting the behaviour of &lt;strong&gt;more parsers&lt;/strong&gt;, especially parsers that run in non-Apple environments.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.8103975535168&quot;&gt;
&lt;p&gt;Investigating &lt;strong&gt;JSON generation&lt;/strong&gt;. I extensively assessed what parsers do or do not parse. (&lt;a href=&quot;http://seriot.ch/parsing_json.php#4&quot;&gt;section 4&lt;/a&gt;). I briefly assessed the contents that parsers yield when the parsing is successful (&lt;a href=&quot;http://seriot.ch/json.php#5&quot;&gt;section 5&lt;/a&gt;). I'm pretty sure that several parsers do generate grammatically invalid JSON or even crash in some circumstances (see &lt;a href=&quot;http://seriot.ch/parsing_json.php#421&quot;&gt;Section 4.2.1&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Investigating differences in the way &lt;strong&gt;JSON mappers&lt;/strong&gt; maps JSON contents to model objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.84883720930233&quot;&gt;
&lt;p&gt;&lt;strong&gt;Finding exploits&lt;/strong&gt; in existing software stacks (check out my &lt;a href=&quot;http://seriot.ch/resources/talks_papers/20141106_asfws_unicode_hacks.pdf&quot;&gt;Unicode Hacks&lt;/a&gt; presentation)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3.0756972111554&quot;&gt;
&lt;p&gt;Investigating potential interoperability issues in &lt;strong&gt;other serialization formats&lt;/strong&gt; such as YAML, &lt;a href=&quot;http://bsonspec.org/&quot;&gt;BSON&lt;/a&gt; or &lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot;&gt;ProtoBuf&lt;/a&gt;, which may be a potential successor to JSON. Indeed, Apple already has a Swift implementation &lt;a href=&quot;https://github.com/apple/swift-protobuf-plugin&quot;&gt;https://github.com/apple/swift-protobuf-plugin&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;As a final word, I keep on wondering why &quot;fragile&quot; formats such as HTML, CSS and JSON, or &quot;dangerous&quot; languages such as PHP or JavaScript became so immensely popular. This is probably because they are easy to start with by tweaking contents in a text editor, because of too liberal parsers or interpreters, and seemingly simple specifications. But sometimes, simple specifications just mean hidden complexity.&lt;/p&gt;
&lt;h3&gt; 8. Appendix&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;Parsing Results &lt;a href=&quot;http://seriot.ch/json/parsing.html&quot;&gt;http://seriot.ch/json/parsing.html&lt;/a&gt;, generated automatically for &lt;a href=&quot;http://seriot.ch/parsing_json.php#4&quot;&gt;section 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tranform Results &lt;a href=&quot;http://seriot.ch/json/transform.html&quot;&gt;http://seriot.ch/json/transform.html&lt;/a&gt;, created manually for &lt;a href=&quot;http://seriot.ch/parsing_json.php#6&quot;&gt;section 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JSONTestSuite &lt;a href=&quot;https://github.com/nst/JSONTestSuite&quot;&gt;https://github.com/nst/JSONTestSuite&lt;/a&gt;, contains all tests and code&lt;/li&gt;
&lt;li&gt;STJSON &lt;a href=&quot;https://github.com/nst/STJSON&quot;&gt;https://github.com/nst/STJSON&lt;/a&gt;, contains my Swift 3 JSON parser&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;Acknowledgments&lt;/h3&gt;
&lt;p&gt;Many thanks to @Reversity, GEndignoux, @ccorsano, @BalestraPatrick and @iPlop.&lt;/p&gt;

</description>
<pubDate>Sun, 22 Apr 2018 16:58:16 +0000</pubDate>
<dc:creator>moks</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://seriot.ch/parsing_json.php</dc:identifier>
</item>
<item>
<title>Gitlab 10.7 Released</title>
<link>https://about.gitlab.com/2018/04/22/gitlab-10-7-released/</link>
<guid isPermaLink="true" >https://about.gitlab.com/2018/04/22/gitlab-10-7-released/</guid>
<description>&lt;div readability=&quot;134.73411002804&quot;&gt;
&lt;div readability=&quot;22.145234493192&quot;&gt;

&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With this release, we continue to iterate on our &lt;a href=&quot;https://about.gitlab.com/direction/#portfolio-management-and-issue-management&quot;&gt;portfolio management&lt;/a&gt; feature of Epics. Just like with issues, you can now comment on epics, and even start standalone, threaded discussions in an epic, just like in issues and merge requests. This allows you to have a conversation with your teammates, in an epic directly, at a higher abstraction level, before necessarily drilling down in an issue, or even creating one.&lt;/p&gt;
&lt;p&gt;This new feature is also supported in &lt;a href=&quot;https://docs.gitlab.com/ee/api/discussions.html&quot;&gt;the API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Email notifications and todos are not yet supported in epics, and &lt;a href=&quot;https://gitlab.com/groups/gitlab-org/-/epics/148&quot;&gt;we are working on them right now&lt;/a&gt;.&lt;/p&gt;
&lt;img alt=&quot;Comments in epics&quot; class=&quot;shadow&quot; src=&quot;https://about.gitlab.com/images/10_7/epic-comment-thread.png&quot;/&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/group/epics/#comment-or-start-a-discussion&quot; target=&quot;_blank&quot;&gt;Read through the documentation on Epics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;hidden-lg&quot; readability=&quot;14.193548387097&quot;&gt;
&lt;h3 id=&quot;custom-additional-text-for-all-emails&quot;&gt; Custom additional text for all emails&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Often, organizations need to add a disclaimer or other related text to all email communications, for various operational or compliance requirements.&lt;/p&gt;
&lt;p&gt;With this release, we’ve added this exact feature. GitLab admins can now go into email settings and paste in any custom text. That text will then appear at the bottom of all emails sent by GitLab.&lt;/p&gt;
&lt;img alt=&quot;Custom additional text for all emails&quot; class=&quot;shadow&quot; src=&quot;https://about.gitlab.com/images/10_7/custom-text-emails.png&quot;/&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/admin_area/settings/email.html&quot; target=&quot;_blank&quot;&gt;Read through the documentation on custom text for emails&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;19.899772209567&quot;&gt;
&lt;h3 id=&quot;subgroup-issues-in-group-issue-board&quot;&gt; Subgroup issues in Group Issue Board&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Group issue boards are a powerful feature to help you manage issues across multiple projects across a single group, all in one interface. This is helpful for teams where their work might come from multiple different code repositories (and thus GitLab projects).&lt;/p&gt;
&lt;p&gt;Prior to this release, the issues in a group issue board only came from immediate child projects of that one group. With this release, all issues in projects in all subgroups of the current group also appear in that one group board. So if your work is structured in a group and project hierarchy with multiple levels reflecting your organization or software product, then this update will extend that hierarchy to the group issue board now, giving you more fine-grained control.&lt;/p&gt;
&lt;img alt=&quot;Subgroup issues in Group Issue Board&quot; class=&quot;shadow&quot; src=&quot;https://about.gitlab.com/images/10_7/board-subgroup-issues.png&quot;/&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/issue_board.html&quot; target=&quot;_blank&quot;&gt;Read through the documentation on Issue Boards&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;hidden-lg&quot; readability=&quot;30.920741989882&quot;&gt;
&lt;h3 id=&quot;assigning-and-filtering-by-subgroup-labels&quot;&gt; Assigning and filtering by subgroup labels&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Subgrouping is a powerful feature in GitLab, and we want to extend that functionality to how labels are applied in GitLab. With this release, we’ve made it extremely flexible to apply group labels to issues and merge requests at various subgroup levels.&lt;/p&gt;
&lt;p&gt;In particular, for a given issue or merge request, you can now apply any group label from that object’s ancestor groups. This flexibility means that you can create a label at a given group level, and all objects in its subgroups will be able to use it.&lt;/p&gt;
&lt;p&gt;Since in group issue lists and group merge request lists, you can already see objects belonging to subgroups, we’ve now also made it possible to filter on those lists by group labels that belong to both ancestor and descendant groups of the given group, since all those objects can have those labels now. In other words, GitLab gives you the power and flexibility to filter by any possible label assignable to those objects.&lt;/p&gt;
&lt;p&gt;This filtering capability is also possible in group issue boards for both the filter bar and the board config.&lt;/p&gt;
&lt;img alt=&quot;Assigning and filtering by subgroup labels&quot; src=&quot;https://about.gitlab.com/images/10_7/ancestor-descendent-group-labels.png&quot;/&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/labels.html&quot; target=&quot;_blank&quot;&gt;Read through the documentation on Labels&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;12.517730496454&quot;&gt;
&lt;h3 id=&quot;project-badges&quot;&gt; Project Badges&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Many projects use badges, such as the &lt;a href=&quot;https://docs.gitlab.com/ee/user/project/pipelines/settings.html#pipeline-badges&quot;&gt;GitLab CI/CD&lt;/a&gt; and &lt;a href=&quot;https://shields.io&quot;&gt;shields.io&lt;/a&gt; to reflect status of build and code quality. Typically these are added to the project README.&lt;/p&gt;
&lt;p&gt;Now badges are a first-class citizen and can be displayed prominently below the project description, and can be templated at the group level too.&lt;/p&gt;
&lt;img alt=&quot;Project Badges&quot; class=&quot;shadow&quot; src=&quot;https://about.gitlab.com/images/10_7/project_badges.png&quot;/&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/badges.html&quot; target=&quot;_blank&quot;&gt;Read through the documentation on Project Badges&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;hidden-lg&quot; readability=&quot;18.751043115438&quot;&gt;
&lt;h3 id=&quot;protected-branch-unprotect-permissions&quot;&gt; Protected branch unprotect permissions&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Protected branches allow push and merge permissions to be restricted by branch, like preventing pushes directly to &lt;code&gt;master&lt;/code&gt;, but any Master can bypass these rules by unprotecting the branch. The new unprotect restriction can be used to limit which users, groups and roles are allowed to unprotect a branch.&lt;/p&gt;
&lt;p&gt;Unprotect restrictions can only be set using the API in 10.7, but will be &lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ee/issues/5496&quot;&gt;available in the interface&lt;/a&gt; in an upcoming release. The admin access level (&lt;code&gt;60&lt;/code&gt;) may be removed in a future release, as we are currently evaluating restrictions to the Owner role as an alternative.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/api/protected_branches.html#protect-repository-branches&quot; target=&quot;_blank&quot;&gt;Read through the documentation on Branch Protection&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;17.411475409836&quot;&gt;
&lt;h3 id=&quot;issue-weight-in-issue-board-card&quot;&gt; Issue weight in Issue Board card&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can now view the weight in an issue board card. Previously, when using an issue board, to see the weight of an issue, you’d have to click on the issue, and see the weight in the sidebar that slides in. With this change, you can now see it in the board card itself. This makes it much more easy to quickly scan a board and see the weights of issues, giving you a rough sense of the work required in a given list of issues, which is helpful in methodologies such as &lt;a href=&quot;https://about.gitlab.com/2018/03/05/gitlab-for-agile-software-development/&quot;&gt;Agile&lt;/a&gt;.&lt;/p&gt;
&lt;img alt=&quot;Issue weight in Issue Board card&quot; class=&quot;shadow&quot; src=&quot;https://about.gitlab.com/images/10_7/board-card-issue-weight.png&quot;/&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/issue_board.html&quot; target=&quot;_blank&quot;&gt;Read through the documentation on Issue Boards&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;hidden-lg&quot; readability=&quot;18.99043062201&quot;&gt;
&lt;h3 id=&quot;gitlab-plugins&quot;&gt; GitLab Plugins&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Being open source means GitLab can always be improved by anyone, but not all customers want to upstream their changes, or they may want to iterate on them privately first. Up to now, this was only possible by running a fork of GitLab, which is hard to keep up to date.&lt;/p&gt;
&lt;p&gt;Plugins allow you to respond to &lt;a href=&quot;http://docs.gitlab.com/ee/system_hooks/system_hooks.html&quot;&gt;GitLab system hooks&lt;/a&gt; with a script stored on the GitLab server, so you can more easily extend GitLab to meet your needs, like automatically configuring custom protected branch rules whenever a new project is created.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/administration/plugins.html&quot; target=&quot;_blank&quot;&gt;Read through the documentation on Plugins&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;20.433815350389&quot;&gt;
&lt;h3 id=&quot;https-git-protocol-always-available-for-cicd-jobs&quot;&gt; HTTP(s) Git protocol always available for CI/CD jobs&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With GitLab you can use either SSH or HTTP(s) to access your repositories. Sometimes GitLab administrators prefer to block HTTP(s) access for security reasons. For example, blocking HTTP(s) prevents users from disclosing their credentials due to an insecure client setup. However, blocking HTTP(S) also stopped GitLab Runner from cloning the repository, making CI/CD not work as expected.&lt;/p&gt;
&lt;p&gt;Starting with GitLab 10.7, the HTTP(s) protocol will be allowed for clone/fetch requests coming from GitLab Runner, even if the same access is explicitly forbidden for users. This is not susceptible to the same type of inseucre client vulnerability because GitLab Runner always uses OTP tokens that cannot be leveraged to perform attacks.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/admin_area/settings/visibility_and_access_controls.html&quot; target=&quot;_blank&quot;&gt;Read through the documentation on visibility and access controls&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;hidden-lg&quot; readability=&quot;15.215648854962&quot;&gt;
&lt;h3 id=&quot;support-for-json-web-token-omniauth&quot;&gt; Support for JSON Web Token OmniAuth&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;GitLab uses OmniAuth to allow users to sign into GitLab using popular services like Twitter and Google, as well as standard authentication solutions like OAuth2. In Gitlab 10.7, support for JSON Web Token (JWT) OmniAuth has been added.&lt;/p&gt;
&lt;p&gt;JSON Web Token is a compact and self-contained way to securely transmit information, and is commonly used for authentication between services.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/administration/auth/jwt.html&quot; target=&quot;_blank&quot;&gt;Read through the documentation on JWT OmniAuth provider&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;15.997350993377&quot;&gt;
&lt;h3 id=&quot;automatic-background-verification-of-geo-replicas&quot;&gt; Automatic background verification of Geo replicas&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Automatic background verification of Geo replicas will now occur when Geo is enabled, to make sure that replicas remain consistent with the primary. This is important when using Geo for Disaster Recovery so that you can confidently fail over to a secondary, knowing that it is a a complete replica of your primary GitLab instance.&lt;/p&gt;
&lt;p&gt;GitLab calculates a checksum for each Git repository using &lt;code&gt;heads&lt;/code&gt; and &lt;code&gt;tags&lt;/code&gt; and verifies that the checksum from the primary matches the checksum on each secondary. Verification will be expanded in upcoming releases to also include &lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ee/issues/5591&quot;&gt;uploads&lt;/a&gt; and &lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ee/issues/5196&quot;&gt;&lt;code&gt;keep-around&lt;/code&gt; refs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/administration/geo/disaster_recovery/background_verification.html&quot; target=&quot;_blank&quot;&gt;Read through the documentation on Geo background verification&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;hidden-lg&quot; readability=&quot;12.571428571429&quot;&gt;
&lt;h3 id=&quot;group-project-creation-in-starter&quot;&gt; Group project creation in Starter&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As part of providing additional flexibility around our permission model, this will allow group or server admins to set an option that will give users with Developer role the ability to create projects.&lt;/p&gt;
&lt;p&gt;This feature was previously available in GitLab Premium only.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/group/index.html#default-project-creation-level&quot; target=&quot;_blank&quot;&gt;Read through the documentation on Groups&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;13.194103194103&quot;&gt;
&lt;h3 id=&quot;project-exports-include-lfs-objects&quot;&gt; Project exports include LFS objects&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Project exports allow you to move projects between GitLab instances conveniently, including issues, merge requests, labels, wikis and uploads. Project exports now include LFS objects so that repositories with LFS objects can also be transferred using project exports.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/settings/import_export.html&quot; target=&quot;_blank&quot;&gt;Read through the documentation on project exports&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;hidden-lg&quot; readability=&quot;16.485714285714&quot;&gt;
&lt;h3 id=&quot;dependency-scanning-is-now-an-independent-feature&quot;&gt; Dependency Scanning is now an independent feature&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Before this release, security checks on external dependencies and libraries used by your application were done along with SAST. Even if they are related, we think that they should be clearly identified as two separate features.&lt;/p&gt;
&lt;p&gt;GitLab 10.7 introduces Dependency Scanning as a first-class citizen in the Security reports, giving you information about vulnerable libraries that should be updated. Results will be available both in the merge request and in the pipeline view.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/merge_requests/#dependency-scanning&quot; target=&quot;_blank&quot;&gt;Read through the documentation on Dependency Scanning&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;16.205882352941&quot;&gt;
&lt;h3 id=&quot;runner-specific-job-timeout&quot;&gt; Runner-specific job timeout&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;GitLab currently defines at the project level how long a CI/CD job can run. If a job execution exceeds this duration, it is automatically stopped and reported as failed.&lt;/p&gt;
&lt;p&gt;GitLab 10.7 adds a new timeout setting on the runner itself, which applies to all jobs it runs. If this value is less than the project-level setting, it will override it. This is particularly helpful for shared runners, in order to prevent potential abuse with a project that has set long timeouts.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/ci/runners/#setting-maximum-job-timeout-for-a-runner&quot; target=&quot;_blank&quot;&gt;Read through the documentation on runner-specific job timeout&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;hidden-lg&quot; readability=&quot;14.828343313373&quot;&gt;
&lt;h3 id=&quot;easily-get-failure-reasons-for-cicd-jobs&quot;&gt; Easily get failure reasons for CI/CD jobs&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;When a CI/CD job fails, users normally want to check what happened and commit a fix to make it succeed as expected. Before this release, they had to go into the job details and look at the logs.&lt;/p&gt;
&lt;p&gt;To make the debugging easier and faster, GitLab 10.7 introduces the failure reason as part of the status badges, make it accessible on mouseover.&lt;/p&gt;
&lt;img alt=&quot;Easily get failure reasons for CI/CD jobs&quot; class=&quot;shadow&quot; src=&quot;https://about.gitlab.com/images/10_7/failure_reason.png&quot;/&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/ci/pipelines.html#seeing-the-failure-reason-for-jobs&quot; target=&quot;_blank&quot;&gt;Read through the documentation on failure reasons for CI/CD jobs&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;hidden-lg&quot; readability=&quot;13.629173989455&quot;&gt;
&lt;h3 id=&quot;improvements-to-restoring-gitlab-backups&quot;&gt; Improvements to restoring GitLab backups&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;GitLab 10.7 now includes support for restoring to custom nested directories. For example if your registry was located at &lt;code&gt;/var/mypath/gitlab/registry&lt;/code&gt;, the restore will now succeed. Previously the task would try to rename the existing directory to &lt;code&gt;&amp;lt;name&amp;gt;.&amp;lt;timestamp&amp;gt;&lt;/code&gt;, but it would not have permission. Now it will create a &lt;code&gt;tmp&lt;/code&gt; folder in the backup directory, and move any existing files there prior to restoring the backup.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/raketasks/backup_restore.html#restore-for-omnibus-installations&quot; target=&quot;_blank&quot;&gt;Read through the documentation on backup and restore&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;13.982238010657&quot;&gt;
&lt;h3 id=&quot;gitlab-pages-automatic-https-redirect&quot;&gt; GitLab Pages automatic HTTPS redirect&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;GitLab Pages can provide static websites via HTTP or HTTPS protocols. HTTPS is normally preferred since it encrypts all the traffic, protecting the content while it is transferred over the net.&lt;/p&gt;
&lt;p&gt;In the case that both are available, in GitLab 10.7 users can force their projects to redirect HTTP requests on the related HTTPS url to improve security and guarantee no data is transferred in clear text.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-pages/#https-only-domains&quot; target=&quot;_blank&quot;&gt;Read through the documentation on GitLab Pages automatic HTTPS redirect&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;hidden-lg&quot; readability=&quot;13.882797731569&quot;&gt;
&lt;h3 id=&quot;automatic-renewal-of-gitlab-lets-encrypt-certificate&quot;&gt; Automatic renewal of GitLab Let's Encrypt certificate&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In GitLab 10.5, we made it easy to enable HTTPS for your GitLab instance by &lt;a href=&quot;https://about.gitlab.com/2018/02/22/gitlab-10-5-released/#instant-ssl-with-lets-encrypt-for-gitlab&quot;&gt;integrating with Let’s Encrypt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With GitLab 10.7, we are making it &lt;em&gt;even easier&lt;/em&gt; by no longer requiring it to be explicitly enabled as well as automating the renewal process. All you need to do to enable HTTPS now is set your &lt;code&gt;external_url&lt;/code&gt; to start with &lt;code&gt;https://&lt;/code&gt;, and that’s it!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/omnibus/settings/ssl.html#automatic-renewal&quot; target=&quot;_blank&quot;&gt;Read through the documentation on Let's Encrypt automatic renewal&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;hidden-lg&quot; readability=&quot;16.320785597381&quot;&gt;
&lt;h3 id=&quot;improvements-to-the-environment-metrics-dashboard&quot;&gt; Improvements to the environment metrics dashboard&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Summary statistics are now available on the environment metrics dashboard, displaying the average and maximum values of each series within the timespan. For example it is now possible to quickly see the average response time for the past eight hours, to understand the experience most users are seeing.&lt;/p&gt;
&lt;p&gt;Total Pod CPU and Memory consumption are now also displayed, providing insight into the resource usage of a particular environment in the cluster.&lt;/p&gt;
&lt;img alt=&quot;Improvements to the environment metrics dashboard&quot; class=&quot;shadow&quot; src=&quot;https://about.gitlab.com/images/10_7/perf_dashboard.png&quot;/&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/integrations/prometheus.html#monitoring-ci-cd-environments&quot; target=&quot;_blank&quot;&gt;Read through the documentation on monitoring environments&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;7.1688311688312&quot;&gt;
&lt;h3 id=&quot;gitlab-runner-107&quot;&gt; GitLab Runner 10.7&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We’re also releasing GitLab Runner 10.7 today! GitLab Runner is the open source project that is used to run your CI/CD jobs and send the results back to GitLab.&lt;/p&gt;
&lt;h5 id=&quot;most-interesting-changes&quot;&gt;Most interesting changes:&lt;/h5&gt;
&lt;p&gt;List of all changes can be found in GitLab Runner’s &lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-runner/blob/v10.7.0/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/runner&quot; target=&quot;_blank&quot;&gt;Read through the documentation on GitLab Runner&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;hidden-lg&quot; readability=&quot;5.9004424778761&quot;&gt;
&lt;h3 id=&quot;omnibus-improvements&quot;&gt; Omnibus improvements&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;GitLab &lt;a href=&quot;https://about.mattermost.com/releases/mattermost-4-8/&quot;&gt;Mattermost 4.8.1&lt;/a&gt; includes several platform improvements, including an iOS endpoint that enables users to upload files larger than 20MB, plus much more.&lt;/li&gt;
&lt;li&gt;The default &lt;code&gt;ssl_ciphers&lt;/code&gt; list for NGINX has been updated, excluding &lt;code&gt;ECDHE-RSA-DES-CBC3-SHA&lt;/code&gt; and &lt;code&gt;DES-CBC3-SHA&lt;/code&gt; to address &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2016-2183&quot;&gt;Sweet32&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;redis_exporter has been updated to 0.17.1.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/omnibus/README.html&quot; target=&quot;_blank&quot;&gt;Read through the documentation on Omnibus GitLab&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;div readability=&quot;73.380364288671&quot;&gt;
&lt;div class=&quot;visible-lg&quot; readability=&quot;14.193548387097&quot;&gt;
&lt;h3 id=&quot;custom-additional-text-for-all-emails&quot;&gt; Custom additional text for all emails&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Often, organizations need to add a disclaimer or other related text to all email communications, for various operational or compliance requirements.&lt;/p&gt;
&lt;p&gt;With this release, we’ve added this exact feature. GitLab admins can now go into email settings and paste in any custom text. That text will then appear at the bottom of all emails sent by GitLab.&lt;/p&gt;
&lt;img alt=&quot;Custom additional text for all emails&quot; class=&quot;shadow&quot; src=&quot;https://about.gitlab.com/images/10_7/custom-text-emails.png&quot;/&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/admin_area/settings/email.html&quot; target=&quot;_blank&quot;&gt;Read through the documentation on custom text for emails&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;visible-lg&quot; readability=&quot;30.920741989882&quot;&gt;
&lt;h3 id=&quot;assigning-and-filtering-by-subgroup-labels&quot;&gt; Assigning and filtering by subgroup labels&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Subgrouping is a powerful feature in GitLab, and we want to extend that functionality to how labels are applied in GitLab. With this release, we’ve made it extremely flexible to apply group labels to issues and merge requests at various subgroup levels.&lt;/p&gt;
&lt;p&gt;In particular, for a given issue or merge request, you can now apply any group label from that object’s ancestor groups. This flexibility means that you can create a label at a given group level, and all objects in its subgroups will be able to use it.&lt;/p&gt;
&lt;p&gt;Since in group issue lists and group merge request lists, you can already see objects belonging to subgroups, we’ve now also made it possible to filter on those lists by group labels that belong to both ancestor and descendant groups of the given group, since all those objects can have those labels now. In other words, GitLab gives you the power and flexibility to filter by any possible label assignable to those objects.&lt;/p&gt;
&lt;p&gt;This filtering capability is also possible in group issue boards for both the filter bar and the board config.&lt;/p&gt;
&lt;img alt=&quot;Assigning and filtering by subgroup labels&quot; src=&quot;https://about.gitlab.com/images/10_7/ancestor-descendent-group-labels.png&quot;/&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/labels.html&quot; target=&quot;_blank&quot;&gt;Read through the documentation on Labels&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;visible-lg&quot; readability=&quot;18.751043115438&quot;&gt;
&lt;h3 id=&quot;protected-branch-unprotect-permissions&quot;&gt; Protected branch unprotect permissions&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Protected branches allow push and merge permissions to be restricted by branch, like preventing pushes directly to &lt;code&gt;master&lt;/code&gt;, but any Master can bypass these rules by unprotecting the branch. The new unprotect restriction can be used to limit which users, groups and roles are allowed to unprotect a branch.&lt;/p&gt;
&lt;p&gt;Unprotect restrictions can only be set using the API in 10.7, but will be &lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ee/issues/5496&quot;&gt;available in the interface&lt;/a&gt; in an upcoming release. The admin access level (&lt;code&gt;60&lt;/code&gt;) may be removed in a future release, as we are currently evaluating restrictions to the Owner role as an alternative.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/api/protected_branches.html#protect-repository-branches&quot; target=&quot;_blank&quot;&gt;Read through the documentation on Branch Protection&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;visible-lg&quot; readability=&quot;18.99043062201&quot;&gt;
&lt;h3 id=&quot;gitlab-plugins&quot;&gt; GitLab Plugins&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Being open source means GitLab can always be improved by anyone, but not all customers want to upstream their changes, or they may want to iterate on them privately first. Up to now, this was only possible by running a fork of GitLab, which is hard to keep up to date.&lt;/p&gt;
&lt;p&gt;Plugins allow you to respond to &lt;a href=&quot;http://docs.gitlab.com/ee/system_hooks/system_hooks.html&quot;&gt;GitLab system hooks&lt;/a&gt; with a script stored on the GitLab server, so you can more easily extend GitLab to meet your needs, like automatically configuring custom protected branch rules whenever a new project is created.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/administration/plugins.html&quot; target=&quot;_blank&quot;&gt;Read through the documentation on Plugins&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;visible-lg&quot; readability=&quot;15.215648854962&quot;&gt;
&lt;h3 id=&quot;support-for-json-web-token-omniauth&quot;&gt; Support for JSON Web Token OmniAuth&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;GitLab uses OmniAuth to allow users to sign into GitLab using popular services like Twitter and Google, as well as standard authentication solutions like OAuth2. In Gitlab 10.7, support for JSON Web Token (JWT) OmniAuth has been added.&lt;/p&gt;
&lt;p&gt;JSON Web Token is a compact and self-contained way to securely transmit information, and is commonly used for authentication between services.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/administration/auth/jwt.html&quot; target=&quot;_blank&quot;&gt;Read through the documentation on JWT OmniAuth provider&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;visible-lg&quot; readability=&quot;12.571428571429&quot;&gt;
&lt;h3 id=&quot;group-project-creation-in-starter&quot;&gt; Group project creation in Starter&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As part of providing additional flexibility around our permission model, this will allow group or server admins to set an option that will give users with Developer role the ability to create projects.&lt;/p&gt;
&lt;p&gt;This feature was previously available in GitLab Premium only.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/group/index.html#default-project-creation-level&quot; target=&quot;_blank&quot;&gt;Read through the documentation on Groups&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;visible-lg&quot; readability=&quot;16.485714285714&quot;&gt;
&lt;h3 id=&quot;dependency-scanning-is-now-an-independent-feature&quot;&gt; Dependency Scanning is now an independent feature&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Before this release, security checks on external dependencies and libraries used by your application were done along with SAST. Even if they are related, we think that they should be clearly identified as two separate features.&lt;/p&gt;
&lt;p&gt;GitLab 10.7 introduces Dependency Scanning as a first-class citizen in the Security reports, giving you information about vulnerable libraries that should be updated. Results will be available both in the merge request and in the pipeline view.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/merge_requests/#dependency-scanning&quot; target=&quot;_blank&quot;&gt;Read through the documentation on Dependency Scanning&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;visible-lg&quot; readability=&quot;14.828343313373&quot;&gt;
&lt;h3 id=&quot;easily-get-failure-reasons-for-cicd-jobs&quot;&gt; Easily get failure reasons for CI/CD jobs&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;When a CI/CD job fails, users normally want to check what happened and commit a fix to make it succeed as expected. Before this release, they had to go into the job details and look at the logs.&lt;/p&gt;
&lt;p&gt;To make the debugging easier and faster, GitLab 10.7 introduces the failure reason as part of the status badges, make it accessible on mouseover.&lt;/p&gt;
&lt;img alt=&quot;Easily get failure reasons for CI/CD jobs&quot; class=&quot;shadow&quot; src=&quot;https://about.gitlab.com/images/10_7/failure_reason.png&quot;/&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/ci/pipelines.html#seeing-the-failure-reason-for-jobs&quot; target=&quot;_blank&quot;&gt;Read through the documentation on failure reasons for CI/CD jobs&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;visible-lg&quot; readability=&quot;13.629173989455&quot;&gt;
&lt;h3 id=&quot;improvements-to-restoring-gitlab-backups&quot;&gt; Improvements to restoring GitLab backups&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;GitLab 10.7 now includes support for restoring to custom nested directories. For example if your registry was located at &lt;code&gt;/var/mypath/gitlab/registry&lt;/code&gt;, the restore will now succeed. Previously the task would try to rename the existing directory to &lt;code&gt;&amp;lt;name&amp;gt;.&amp;lt;timestamp&amp;gt;&lt;/code&gt;, but it would not have permission. Now it will create a &lt;code&gt;tmp&lt;/code&gt; folder in the backup directory, and move any existing files there prior to restoring the backup.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/raketasks/backup_restore.html#restore-for-omnibus-installations&quot; target=&quot;_blank&quot;&gt;Read through the documentation on backup and restore&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;visible-lg&quot; readability=&quot;13.882797731569&quot;&gt;
&lt;h3 id=&quot;automatic-renewal-of-gitlab-lets-encrypt-certificate&quot;&gt; Automatic renewal of GitLab Let's Encrypt certificate&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In GitLab 10.5, we made it easy to enable HTTPS for your GitLab instance by &lt;a href=&quot;https://about.gitlab.com/2018/02/22/gitlab-10-5-released/#instant-ssl-with-lets-encrypt-for-gitlab&quot;&gt;integrating with Let’s Encrypt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With GitLab 10.7, we are making it &lt;em&gt;even easier&lt;/em&gt; by no longer requiring it to be explicitly enabled as well as automating the renewal process. All you need to do to enable HTTPS now is set your &lt;code&gt;external_url&lt;/code&gt; to start with &lt;code&gt;https://&lt;/code&gt;, and that’s it!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/omnibus/settings/ssl.html#automatic-renewal&quot; target=&quot;_blank&quot;&gt;Read through the documentation on Let's Encrypt automatic renewal&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;visible-lg&quot; readability=&quot;16.320785597381&quot;&gt;
&lt;h3 id=&quot;improvements-to-the-environment-metrics-dashboard&quot;&gt; Improvements to the environment metrics dashboard&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Summary statistics are now available on the environment metrics dashboard, displaying the average and maximum values of each series within the timespan. For example it is now possible to quickly see the average response time for the past eight hours, to understand the experience most users are seeing.&lt;/p&gt;
&lt;p&gt;Total Pod CPU and Memory consumption are now also displayed, providing insight into the resource usage of a particular environment in the cluster.&lt;/p&gt;
&lt;img alt=&quot;Improvements to the environment metrics dashboard&quot; class=&quot;shadow&quot; src=&quot;https://about.gitlab.com/images/10_7/perf_dashboard.png&quot;/&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/integrations/prometheus.html#monitoring-ci-cd-environments&quot; target=&quot;_blank&quot;&gt;Read through the documentation on monitoring environments&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;visible-lg&quot; readability=&quot;5.9004424778761&quot;&gt;
&lt;h3 id=&quot;omnibus-improvements&quot;&gt; Omnibus improvements&lt;/h3&gt;
&lt;div class=&quot;badge-container dark&quot;&gt;
&lt;div class=&quot;top-row&quot;&gt;
&lt;p&gt;CORE&lt;/p&gt;

&lt;p&gt;STARTER&lt;/p&gt;

&lt;p&gt;PREMIUM&lt;/p&gt;

&lt;p&gt;ULTIMATE&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bottom-row&quot;&gt;
&lt;p&gt;FREE&lt;/p&gt;

&lt;p&gt;BRONZE&lt;/p&gt;

&lt;p&gt;SILVER&lt;/p&gt;

&lt;p&gt;GOLD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;GitLab &lt;a href=&quot;https://about.mattermost.com/releases/mattermost-4-8/&quot;&gt;Mattermost 4.8.1&lt;/a&gt; includes several platform improvements, including an iOS endpoint that enables users to upload files larger than 20MB, plus much more.&lt;/li&gt;
&lt;li&gt;The default &lt;code&gt;ssl_ciphers&lt;/code&gt; list for NGINX has been updated, excluding &lt;code&gt;ECDHE-RSA-DES-CBC3-SHA&lt;/code&gt; and &lt;code&gt;DES-CBC3-SHA&lt;/code&gt; to address &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2016-2183&quot;&gt;Sweet32&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;redis_exporter has been updated to 0.17.1.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/omnibus/README.html&quot; target=&quot;_blank&quot;&gt;Read through the documentation on Omnibus GitLab&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
<pubDate>Sun, 22 Apr 2018 16:48:09 +0000</pubDate>
<dc:creator>jbergstroem</dc:creator>
<og:title>GitLab 10.7 released with open source Web IDE and SAST for Go and C/C++!</og:title>
<og:type>article</og:type>
<og:url>https://about.gitlab.com/2018/04/22/gitlab-10-7-released/</og:url>
<og:image>https://about.gitlab.com/images/tweets/gitlab-10-7-released.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://about.gitlab.com/2018/04/22/gitlab-10-7-released/</dc:identifier>
</item>
<item>
<title>After Facebook scrutiny, is Google next?</title>
<link>https://phys.org/news/2018-04-facebook-scrutiny-google.html</link>
<guid isPermaLink="true" >https://phys.org/news/2018-04-facebook-scrutiny-google.html</guid>
<description>&lt;div class=&quot;first-block&quot; readability=&quot;25&quot;&gt;
&lt;div class=&quot;image-block-ins&quot;&gt;&lt;img src=&quot;https://3c1703fe8d.site.internapcdn.net/newman/csz/news/800/2018/afterfaceboo.jpg&quot; alt=&quot;After Facebook scrutiny, is Google next?&quot;/&gt;&lt;/div&gt;
This photo combo of images shows, clockwise, from upper left: a Google sign, the Twitter app, YouTube TV logo and the Facebook app. Facebook has taken the lion's share of scrutiny from Congress and the media for its data-handling practices that allow savvy marketers and political agents to target specific audiences, but it's far from alone. YouTube, Google and Twitter also have giant platforms awash in more videos, posts and pages than any set of human eyes could ever check. Their methods of serving ads against this sea of content may come under the microscope next. (AP Photo)
&lt;p&gt;Facebook has taken the lion's share of scrutiny from Congress and the media about data-handling practices that allow savvy marketers and political agents to target specific audiences, but it's far from alone. YouTube, Google and Twitter also have giant platforms awash in more videos, posts and pages than any set of human eyes could ever check. Their methods of serving ads against this sea of content may come under the microscope next.&lt;/p&gt;
&lt;/div&gt;&lt;section class=&quot;article-banner first-banner&quot;&gt;
&lt;/section&gt;&lt;p&gt;Advertising and privacy experts say a backlash is inevitable against a &quot;Wild West&quot; internet that has escaped scrutiny before. There continues to be a steady barrage of new examples where unsuspecting advertisers had their brands associated with extremist content on major platforms.&lt;/p&gt;
&lt;p&gt;In the latest discovery, CNN reported that it found more than 300 retail brands, government agencies and technology companies had their ads run on YouTube channels that promoted white nationalists, Nazis, conspiracy theories and North Korean propaganda.&lt;/p&gt;
&lt;p&gt;Child advocates have also raised alarms about the ease with which smartphone-equipped children are exposed to inappropriate videos and deceptive advertising.&lt;/p&gt;
&lt;p&gt;&quot;I absolutely think that Google is next and long overdue,&quot; said Josh Golin, director of the Boston-based Campaign for a Commercial-Free Childhood, which asked the Federal Trade Commission to investigate Google-owned YouTube's advertising and data collection practices earlier this month.&lt;/p&gt;
&lt;p&gt;YouTube has repeatedly outlined the ways it attempts to flag and delete hateful, violent, sexually explicit or harmful videos, but its screening efforts have often missed the mark.&lt;/p&gt;
&lt;p&gt;It also allows advertisers avoid running ads on sensitive content—like news or politics—that don't violate YouTube guidelines but don't fit with a company's brand. Those methods appear to have failed.&lt;/p&gt;
&lt;p&gt;&quot;YouTube has once again failed to correctly filter channels out of our marketing buys,&quot; said a statement Friday from 20th Century Fox Film, which learned that its ads were running on videos posted by a self-described Nazi. YouTube has since deleted the offending channel, but the Hollywood firm says it has unanswered questions about how it happened in the first place.&lt;/p&gt;
&lt;p&gt;&quot;All of our filters were in place in order to ensure that this did not happen,&quot; Fox said, adding it has asked for a refund of any money shared with the &quot;abhorrent channel.&quot;&lt;/p&gt;
&lt;p&gt;YouTube said Friday that it has made &quot;significant changes to how we approach monetization&quot; with &quot;stricter policies, better controls and greater transparency&quot; and said it allows advertisers to exclude certain channels from ads. It also removes ads when it's notified of problems running beside content that doesn't comply with its policies. &quot;We are committed to working with our advertisers and getting this right.&quot;&lt;/p&gt;

&lt;p&gt;So far, just one major advertiser—Baltimore-based retailer Under Armour—had said it had withdrawn its advertising in the wake of the CNN report, though the lull lasted only a few days last week when it was first notified of the problem. After its shoe commercial turned up on a channel known for espousing white nationalist beliefs, Under Armour worked with YouTube to expand its filters to exclude certain topics and keywords.&lt;/p&gt;
&lt;p&gt;On the other hand, Procter &amp;amp; Gamble, which had kept its ads off of YouTube since March 2017, said it had come back to the platform but drastically pared back the channels it would advertise on to under 10,000. It has worked on its own, with third parties, and with YouTube to create its restrictive list.&lt;/p&gt;
&lt;p&gt;That's just a fraction of the some 3 million YouTube channels in the U.S. that accept ads, and is even more stringent than YouTube's &quot;Google Preferred&quot; lineup that focuses on the top most popular 5 percent of videos.&lt;/p&gt;
&lt;p&gt;The CNN report was &quot;an illustration of exactly why we needed to go above and beyond just what YouTube's plans were and why we needed to take more control of where our ads were showing up,&quot; said P&amp;amp;G spokeswoman Tressie Rose.&lt;/p&gt;
&lt;p&gt;The big problem, experts say, is that advertisers lured by the reach and targeting capability of online platforms can mistakenly expect the same standards for decency on network TV will apply online. In the same way, broadcast TV rules that require transparency about political ad buyers are absent on the web.&lt;/p&gt;
&lt;p&gt;&quot;There have always been regulations regarding appropriate conduct in content,&quot; says Robert Passikoff, president of Brand Keys Inc., a New York customer research firm. Regulating content on the internet is one area &quot;that has gotten away from everyone.&quot;&lt;/p&gt;
&lt;p&gt;Also absent from the internet are many of the rules that govern children's programming on television sets. TV networks, for instance, are allowed to air commercial breaks but cannot use kids' characters to advertise products. Such &quot;host-selling&quot; runs rampant on internet services such as YouTube.&lt;/p&gt;
&lt;p&gt;Action to remove ads from inappropriate content is mostly reactive because of lack of upfront control of what gets uploaded, and it generally takes the mass threat of boycott to get advertisers to demand changes, according to BrandSimple consultant Allen Adamson. &quot;The social media backlash is what you're worried about,&quot; he said.&lt;/p&gt;
&lt;p&gt;At the same time, politicians are having trouble keeping up with the changing landscape, evident by how ill-informed many senators and congresspeople appeared during questioning of Facebook CEO Mark Zuckerberg earlier this month.&lt;/p&gt;
&lt;p&gt;&quot;We're in the early stages of trying to figure out what kind of regulation makes sense here,&quot; said Larry Chiagouris, professor of marketing at Pace University in New York. &quot;It's going to take quite some time to sort that out.&quot;&lt;/p&gt;
&lt;p class=&quot;news-relevant&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/WebPage&quot;&gt;&lt;a href=&quot;https://phys.org/news/2018-04-facebook-scrutiny-google.html#&quot; id=&quot;inl-rel-href&quot;&gt;&lt;img class=&quot;toolsicon ic-rel&quot; src=&quot;https://cf3e497594.site.internapcdn.net/tmpl/v5/img/1x1.gif&quot; width=&quot;14&quot; height=&quot;16&quot; alt=&quot;&quot;/&gt;&lt;/a&gt; &lt;strong&gt;Explore further:&lt;/strong&gt; &lt;a itemprop=&quot;relatedLink&quot; href=&quot;https://phys.org/news/2018-01-youtube-toughens-videos-ads.html&quot;&gt;YouTube toughens rules regarding which videos get ads&lt;/a&gt;&lt;/p&gt;
&lt;footer class=&quot;post-floor clearfix&quot; readability=&quot;19.901234567901&quot;&gt;
&lt;div class=&quot;post-rating&quot; id=&quot;rank&quot;&gt;
&lt;div id=&quot;flip-box&quot;&gt;
&lt;div class=&quot;flip&quot;&gt;
&lt;p&gt;&lt;span id=&quot;shares&quot;&gt;398&lt;/span&gt; shares &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;section class=&quot;copyright&quot; readability=&quot;2&quot;&gt;&lt;p&gt;© 2018 The Associated Press. All rights reserved.&lt;br/&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/footer&gt;</description>
<pubDate>Sun, 22 Apr 2018 16:28:17 +0000</pubDate>
<dc:creator>dnetesn</dc:creator>
<og:title>After Facebook scrutiny, is Google next?</og:title>
<og:description>Facebook has taken the lion's share of scrutiny from Congress and the media about data-handling practices that allow savvy marketers and political agents to target specific audiences, but it's far from alone. YouTube, Google and Twitter also have giant platforms awash in more videos, posts and pages than any set of human eyes could ever check. Their methods of serving ads against this sea of content may come under the microscope next.</og:description>
<og:image>https://3c1703fe8d.site.internapcdn.net/newman/gfx/news/2018/afterfaceboo.jpg</og:image>
<og:type>article</og:type>
<og:url>https://phys.org/news/2018-04-facebook-scrutiny-google.html</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://phys.org/news/2018-04-facebook-scrutiny-google.html</dc:identifier>
</item>
<item>
<title>Why Stanislaw Lem’s futurism deserves attention (2015)</title>
<link>http://nautil.us/issue/28/2050/the-book-no-one-read</link>
<guid isPermaLink="true" >http://nautil.us/issue/28/2050/the-book-no-one-read</guid>
<description>&lt;p&gt;&lt;span class=&quot;dropcap&quot;&gt;I&lt;/span&gt; remember well the first time my certainty of a bright future evaporated, when my confidence in the panacea of technological progress was shaken. It was in 2007, on a warm September evening in San Francisco, where I was relaxing in a cheap motel room after two days covering The Singularity Summit, an annual gathering of scientists, technologists, and entrepreneurs discussing the future obsolescence of human beings.&lt;/p&gt;
&lt;p&gt;In math, a “singularity” is a function that takes on an infinite value, usually to the detriment of an equation’s sense and sensibility. In physics, the term usually refers to a region of infinite density and infinitely curved space, something thought to exist inside black holes and at the very beginning of the Big Bang. In the rather different parlance of Silicon Valley, “The Singularity” is an inexorably-approaching event in which humans ride an accelerating wave of technological progress to somehow create superior artificial intellects—intellects which with predictable unpredictability then explosively make further disruptive innovations so powerful and profound that our civilization, our species, and perhaps even our entire planet are rapidly transformed into some scarcely imaginable state. Not long after The Singularity’s arrival, argue its proponents, humanity’s dominion over the Earth will come to an end.&lt;/p&gt;
&lt;p&gt;I had encountered a wide spectrum of thought in and around the conference. Some attendees overflowed with exuberance, awaiting the arrival of machines of loving grace to watch over them in a paradisiacal post-scarcity utopia, while others, more mindful of history, dreaded the possible demons new technologies could unleash. Even the self-professed skeptics in attendance sensed the world was poised on the cusp of some massive technology-driven transition. A typical conversation at the conference would refer at least once to some exotic concept like whole-brain emulation, cognitive enhancement, artificial life, virtual reality, or molecular nanotechnology, and many carried a cynical sheen of eschatological hucksterism: Climb aboard, don’t delay, invest right now, and you, too, may be among the chosen who rise to power from the ashes of the former world!&lt;/p&gt;
&lt;p&gt;Over vegetarian hors d’oeuvres and red wine at a Bay Area villa, I had chatted with the billionaire venture capitalist Peter Thiel, who planned to adopt an “aggressive” strategy for investing in a “positive” Singularity, which would be “the biggest boom ever,” if it doesn’t first “blow up the whole world.” I had talked with the autodidactic artificial-intelligence researcher Eliezer Yudkowsky about his fears that artificial minds might, once created, rapidly destroy the planet. At one point, the inventor-turned-proselytizer  Ray Kurzweil teleconferenced in to discuss, among other things, his plans for becoming transhuman, transcending his own biology to  achieve some sort of  eternal life. Kurzweil  believes this is possible,  even probable, provided he can just live to see  The Singularity’s dawn,  which he has pegged at  sometime in the middle of the 21st century. To this end, he reportedly consumes some 150 vitamin supplements a day.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
&lt;p&gt;If our technological civilization is to avoid falling into decay, human obsolescence in one form or another is unavoidable.&lt;/p&gt;
&lt;div class=&quot;reco&quot;&gt;
&lt;article class=&quot;issue-article&quot;&gt;&lt;div&gt;&lt;a href=&quot;http://nautil.us/issue/58/Self/al-gore-does-his-best-ralph-waldo-emerson&quot; class=&quot;obnd_lnk&quot; data-trval=&quot;al-gore-does-his-best-ralph-waldo-emerson&quot; data-trlbl=&quot;foc_rec&quot; data-tract=&quot;internal_art&quot;&gt;&lt;img src=&quot;http://static.nautil.us/14351_ccd44234c58cba8173f8ae706a0fce24.png&quot; alt=&quot;Sapolsky_TH-F1&quot; width=&quot;314&quot; height=&quot;177&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;article-tag&quot;&gt;&lt;span class=&quot;article-tag&quot;&gt;&lt;span class=&quot;article-tag-focus&quot;&gt;&lt;a href=&quot;http://nautil.us/term/f/Literature&quot;&gt;Also in Literature&lt;/a&gt;&lt;/span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;h4 class=&quot;article-title&quot;&gt;&lt;a href=&quot;http://nautil.us/issue/58/Self/al-gore-does-his-best-ralph-waldo-emerson&quot; class=&quot;obnd_lnk&quot; data-trval=&quot;al-gore-does-his-best-ralph-waldo-emerson&quot; data-trlbl=&quot;foc_rec&quot; data-tract=&quot;internal_art&quot;&gt;Al Gore Does His Best Ralph Waldo Emerson&lt;/a&gt;&lt;/h4&gt;
&lt;p class=&quot;article-author&quot;&gt;By Gillian Osborne&lt;/p&gt;
&lt;p&gt;There was no single job title for those who practiced science prior to 1834. Naturalists, philosophers, and savans tramped around collecting specimens, recorded astral activity, or combusted chemicals in labs, but not as “scientists.” When William Whewell proposed this term,...&lt;strong&gt;&lt;a href=&quot;http://nautil.us/issue/58/Self/al-gore-does-his-best-ralph-waldo-emerson&quot; class=&quot;obnd_lnk&quot; data-trval=&quot;al-gore-does-his-best-ralph-waldo-emerson&quot; data-trlbl=&quot;foc_rec&quot; data-tract=&quot;internal_art&quot;&gt;READ MORE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;/article&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Returning to my motel room exhausted each night, I unwound by reading excerpts from an old book, &lt;em&gt;Summa Technologiae&lt;/em&gt;. The late Polish author Stanislaw Lem had written it in the early 1960s, setting himself the lofty goal of forging a secular counterpart to the 13th-century &lt;em&gt;Summa Theologica&lt;/em&gt;, Thomas Aquinas’s landmark compendium exploring the foundations and limits of Christian theology. Where Aquinas argued for the certainty of a Creator, an immortal soul, and eternal salvation as based on scripture, Lem concerned himself with the uncertain future of intelligence and technology throughout the universe, guided by the tenets of modern science.&lt;/p&gt;
&lt;img src=&quot;http://static.nautil.us/4206_769ac34a4012ab69c069de0bab7d9e81.png&quot; width=&quot;733&quot; alt=&quot;&quot;/&gt;&lt;p&gt;To paraphrase Lem himself, the book was an investigation of the thorns of technological roses that had yet to bloom. And yet, despite Lem’s later observation that “nothing ages as fast as the future,” to my surprise most of the book’s nearly half-century-old prognostications concerned the very same topics I had encountered during my days at the conference, and felt just as fresh. Most surprising of all, in subsequent conversations I confirmed my suspicions that among the masters of our technological universe gathered there in San Francisco to forge a transhuman future, very few were familiar with the book or, for that matter, with Lem. I felt like a passenger in a car who discovers a blindspot in the central focus of the driver’s view.&lt;/p&gt;
&lt;p&gt;Such blindness was, perhaps, understandable. In 2007, only fragments of &lt;em&gt;Summa Technologiae&lt;/em&gt; had appeared in English, via partial translations undertaken independently by the literary scholar Peter Swirski and a German software developer named Frank Prengel. These fragments were what I read in the motel. The first complete English translation, by the media researcher Joanna Zylinska, only appeared in 2013. By Lem’s own admission, from the start the book was a commercial and a critical failure that “sank without a trace” upon its first appearance in print. Lem’s terminology and dense, baroque style is partially to blame—many of his finest points were made in digressive parables, allegories, and footnotes, and he coined his own neologisms for what were, at the time, distinctly over-the-horizon fields. In Lem’s lexicon, virtual reality was “phantomatics,” molecular nanotechnology was “molectronics,” cognitive enhancement was “cerebromatics,” and biomimicry and the creation of artificial life was “imitology.” He had even coined a term for search-engine optimization, a la Google: “ariadnology.” The path to advanced artificial intelligence he called the “technoevolution” of “intellectronics.”&lt;/p&gt;
&lt;p&gt;Even now, if Lem is known at all to the vast majority of the English-speaking world, it is chiefly for his authorship of &lt;em&gt;Solaris&lt;/em&gt;, a popular 1961 science-fiction novel that spawned two critically acclaimed film adaptations, one by Andrei Tarkovsky and another by Steven Soderbergh. Yet to say the prolific author only wrote science fiction would be foolishly dismissive. That so much of his output can be classified as such is because so many of his intellectual wanderings took him to the outer frontiers of knowledge.&lt;/p&gt;
&lt;p&gt;Lem was a polymath, a voracious reader who devoured not only the classic literary canon, but also a plethora of research journals, scientific periodicals, and popular books by leading researchers. His genius was in standing on the shoulders of scientific giants to distill the essence of their work, flavored with bittersweet insights and thought experiments that linked their mathematical abstractions to deep existential mysteries and the nature of the human condition. For this reason alone, reading Lem is an education, wherein one may learn the deep ramifications of breakthroughs such as Claude Shannon’s development of information theory, Alan Turing’s work on computation, and John von Neumann’s exploration of game theory. Much of his best work entailed constructing analyses based on logic with which anyone would agree, then showing how these eminently reasonable premises lead to astonishing conclusions. And the fundamental urtext for all of it, the wellspring from which the remainder of his output flowed, is &lt;em&gt;Summa Technologiae&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The core of the book is a heady mix of evolutionary biology, thermodynamics—the study of energy flowing through a system—and cybernetics, a diffuse field pioneered in the 1940s by Norbert Wiener studying how feedback loops can automatically regulate the behavior of machines and organisms. Considering a planetary civilization this way, Lem posits a set of feedbacks between the stability of a society and its degree of technological development. In its early stages, Lem writes, the development of technology is a self-reinforcing process that promotes homeostasis, the ability to maintain stability in the face of continual change and increasing disorder. That is, incremental advances in technology tend to progressively increase a society’s resilience against disruptive environmental forces such as pandemics, famines, earthquakes, and asteroid strikes. More advances lead to more protection, which promotes more advances still.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
&lt;p&gt;The result is a disconcerting paradox: To maintain control of our own fate, we must yield our agency to minds exponentially more powerful than our own.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And yet, Lem argues, that same technology-driven positive feedback loop is also an Achilles heel for planetary civilizations, at least for ours here on Earth. As advances in science and technology accrue and the pace of discovery continues its acceleration, our society will approach an “information barrier” beyond which our brains—organs blindly, stochastically shaped by evolution for vastly different purposes—can no longer efficiently interpret and act on the deluge of information.&lt;/p&gt;
&lt;p&gt;Past this point, our civilization should reach the end of what has been a period of exponential growth in science and technology. Homeostasis will break down, and without some major intervention, we will collapse into a “developmental crisis” from which we may never fully recover. Attempts to simply muddle through, Lem writes, would only lead to a vicious circle of boom-and-bust economic bubbles as society meanders blindly down a random, path-dependent route of scientific discovery and technological development. “Victories, that is, suddenly appearing domains of some new wonderful activity,” he writes, “will engulf us in their sheer size, thus preventing us from noticing some other opportunities—which may turn out to be even more valuable in the long run.”&lt;/p&gt;
&lt;p&gt;Lem thus concludes that if our technological civilization is to avoid falling into decay, human obsolescence in one form or another is unavoidable. The sole remaining option for continued progress would then be the “automatization of cognitive processes” through development of algorithmic “information farms” and superhuman artificial intelligences. This would occur via a sophisticated plagiarism, the virtual simulation of the mindless, brute-force natural selection we see acting in biological evolution, which, Lem dryly notes, is the only technique known in the universe to construct philosophers, rather than mere philosophies.&lt;/p&gt;
&lt;img src=&quot;http://static.nautil.us/7110_7da9fd85999f583e3906f99a3ee58911.jpg&quot; width=&quot;733&quot; alt=&quot;&quot;/&gt;&lt;span class=&quot;caption&quot;&gt;&lt;strong&gt;star power:&lt;/strong&gt; George Clooney plays the role of Dr. Chris Kelvin in the 2002 film adaption of Lem’s 1961 novel, &lt;em&gt;Solaris&lt;/em&gt;.&lt;/span&gt;&lt;span class=&quot;credit&quot;&gt;Courtesy of 20th Century Fox&lt;/span&gt;
&lt;p&gt;&lt;span&gt;The result is a disconcerting paradox, which Lem expresses early in the book: To maintain control of our own fate, we must yield our agency to minds exponentially more powerful than our own, created through processes we cannot entirely understand, and hence potentially unknowable to us. This is the basis for Lem’s explorations of The Singularity, and in describing its consequences he reaches many conclusions that most of its present-day acolytes would share. But there is a difference between the typical modern approach and Lem’s, not in degree, but in kind.&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Unlike the commodified futurism now so common in the bubble-worlds of Silicon Valley billionaires, Lem’s forecasts weren’t really about seeking personal enrichment from market fluctuations, shiny new gadgets, or simplistic ideologies of “disruptive innovation.” In &lt;em&gt;Summa Technologiae&lt;/em&gt; and much of his subsequent work, Lem instead sought to map out the plausible answers to questions that today are too often passed over in silence, perhaps because they fail to neatly fit into any TED Talk or startup business plan: Does technology control humanity, or does humanity control technology? Where are the absolute limits for our knowledge and our achievement, and will these boundaries be formed by the fundamental laws of nature or by the inherent limitations of our psyche? If given the ability to satisfy nearly any material desire, what is it that we actually would want?&lt;/p&gt;
&lt;p&gt;Lem’s explorations of these questions are dominated by his obsession with chance, the probabilistic tension between chaos and order as an arbiter of human destiny. He had a deep appreciation for entropy, the capacity for disorder to naturally, spontaneously arise and spread, cursing some while sparing others. It was an appreciation born from his experience as a young man in Poland before, during, and after World War II, where he saw chance’s role in the destruction of countless dreams, and where, perhaps by pure chance alone, his Jewish heritage did not result in his death. “We were like ants bustling in an anthill over which the heel of a boot is raised,” he wrote in &lt;em&gt;Highcastle&lt;/em&gt;, an autobiographical memoir. “Some saw its shadow, or thought they did, but everyone, the uneasy included, ran about their usual business until the very last minute, ran with enthusiasm, devotion—to secure, to appease, to tame the future.” From the accumulated weight of those experiences, Lem wrote in the &lt;em&gt;New Yorker&lt;/em&gt; in 1986, he had “come to understand the fragility that all systems have in common,” and “how human beings behave under extreme conditions—how their behavior when they are under enormous pressure is almost impossible to predict.”&lt;/p&gt;
&lt;p&gt;To Lem (and, to their credit, a sizeable number of modern thinkers), the Singularity is less an opportunity than a question mark, a multidimensional crucible in which humanity’s future will be forged.&lt;/p&gt;
&lt;p&gt;I couldn’t help thinking of Lem’s question mark that summer in 2007. Within and around the gardens surrounding the neoclassical Palace of Fine Arts Theater where the Singularity Summit was taking place, dark and disruptive shadows seemed to loom over the plans and aspirations of the gathered well-to-do. But they had precious little to do with malevolent superintelligences or runaway nanotechnology. Between my motel and the venue, panhandlers rested along the sidewalk, or stood with empty cups at busy intersections, almost invisible to everyone. Walking outside during one break between sessions, I stumbled across a homeless man defecating between two well-manicured bushes. Even within the context of the conference, hints of desperation sometimes tinged the not-infrequent conversations about raising capital; the subprime mortgage crisis was already unfolding that would, a year later, spark the near-collapse of the world’s financial system. While our society’s titans of technology were angling for advantages to create what they hoped would be the best of all possible futures, the world outside reminded those who would listen that we are barely in control even today.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
&lt;p&gt;In Lem’s view, humans, as imperfect as we are, shall always strive to progress and improve.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I attended two more Singularity Summits, in 2008 and 2009, and during that three-year period, all the much-vaunted performance gains in various technologies seemed paltry against a more obvious yet less-discussed pattern of accelerating change: the rapid, incessant growth in global ecological degradation, economic inequality, and societal instability. Here, forecasts tend to be far less rosy than those for our future capabilities in information technology. They suggest, with some confidence, that when and if we ever breathe souls into our machines, most of humanity will not be dreaming of transcending their biology, but of fresh water, a full belly, and a warm, safe bed. How useful would a superintelligent computer be if it was submerged by storm surges from rising seas or dis- connected from a steady supply of electricity? Would biotech-boosted personal longevity be worthwhile in a world ravaged by armed, angry mobs of starving, displaced people? More than once I have wondered why so many high technologists are more concerned by as- yet-nonexistent threats than the much more mundane and all-too-real ones literally right before their eyes.&lt;/p&gt;
&lt;p&gt;Lem was able to speak to my experience of the world outside the windows of the Singularity conference. A thread of humanistic humility runs through his work, a hard-gained certainty that technological development too often takes place only in service of our most primal urges, rewarding individual greed over the common good. He saw our world as exceedingly fragile, contingent upon a truly astronomical number of coincidences, where the vagaries of the human spirit had become the most volatile variables of all.&lt;/p&gt;
&lt;p&gt;It is here that we find Lem’s key strength as a futurist. He refused to discount human nature’s influence on transhuman possibilities, and believed that the still-incomplete task of understanding our strengths and weaknesses as human beings was a crucial prerequisite for all speculative pathways to any post-Singularity future. Yet this strength also leads to what may be Lem’s great weakness, one which he shares with today’s hopeful transhumanists: an all-too-human optimism that shines through an otherwise-dispassionate darkness, a fervent faith that, when faced with the challenge of a transhuman future, we will heroically plunge headlong into its depths. In Lem’s view, humans, as imperfect as we are, shall always strive to progress and improve, seeking out all that is beautiful and possible rather than what may be merely convenient and profitable, and through this we may find salvation. That we might instead succumb to complacency, stagnation, regression, and extinction is something he acknowledges but can scarcely countenance. In the end, Lem, too, was seduced—though not by quasi-religious notions of personal immortality, endless growth, or cosmic teleology, but instead by the notion of an indomitable human spirit.&lt;/p&gt;
&lt;p&gt;Like many other ideas from &lt;em&gt;Summa Technologiae&lt;/em&gt;, this one finds its best expression in one of Lem’s works of fiction, his 1981 novella &lt;em&gt;Golem XIV&lt;/em&gt;, in which a self-programming military supercomputer that has bootstrapped itself into sentience delivers a series of lectures critiquing evolution and humanity. Some would say it is foolish to seek truth in fiction, or to draw equivalence between an imaginary character’s thoughts and an author’s genuine beliefs, but for me the conclusion is inescapable. When the novella’s artificial philosopher makes its pronouncements through a connected vocoder, it is the human voice of Lem that emerges, uttering a prophecy of transcendence that is at once his most hopeful—and perhaps, in light of trends today, his most erroneous:&lt;/p&gt;
&lt;p&gt;“I feel that you are entering an age of metamorphosis; that you will decide to cast aside your entire history, your entire heritage and all that remains of natural humanity—whose image, magnified into beautiful tragedy, is the focus of the mirrors of your beliefs; that you will advance (for there is no other way), and in this, which for you is now only a leap into the abyss, you will find a challenge, if not a beauty; and that you will proceed in your own way after all, since in casting off man, man will save himself.”&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Freelance writer Lee Billings is the author of&lt;/em&gt; Five Billion Years of Solitude: The Search for Life Among the Stars.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photograph by Forum/UIG/Getty Images&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was originally published online in our “Genius” issue in October, 2014.&lt;/em&gt;&lt;/p&gt;
&lt;section class=&quot;leaderboard-ad-belt&quot;&gt;&lt;div class=&quot;leaderboard-ad-belt-inner adarticle&quot;&gt;&lt;div id=&quot;div-gpt-ad-1380044019755-0&quot; class=&quot;leaderboard-ad&quot;/&gt;
&lt;/div&gt;
&lt;/section&gt;</description>
<pubDate>Sun, 22 Apr 2018 16:27:32 +0000</pubDate>
<dc:creator>dnetesn</dc:creator>
<og:type>website</og:type>
<og:url>http://nautil.us/issue/28/2050/the-book-no-one-read</og:url>
<og:title>The Book No One Read - Issue 28: 2050 - Nautilus</og:title>
<og:description>I remember well the first time my certainty of a bright future evaporated, when my confidence in the panacea of technological progress&amp;#8230;</og:description>
<og:image>http://static.nautil.us/4203_7e05295a468401ec66e8c337855022ed.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>http://nautil.us/issue/28/2050/the-book-no-one-read</dc:identifier>
</item>
<item>
<title>Eventbrite UA claims right to film, distribute users events</title>
<link>https://www.eventbrite.com/support/articles/en_US/Troubleshooting/eventbrite-merchant-agreement?lg=en_US#8</link>
<guid isPermaLink="true" >https://www.eventbrite.com/support/articles/en_US/Troubleshooting/eventbrite-merchant-agreement?lg=en_US#8</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://www.eventbrite.com/support/articles/en_US/Troubleshooting/eventbrite-merchant-agreement?lg=en_US#8&quot;&gt;https://www.eventbrite.com/support/articles/en_US/Troubleshooting/eventbrite-merchant-agreement?lg=en_US#8&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=16896396&quot;&gt;https://news.ycombinator.com/item?id=16896396&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 203&lt;/p&gt;&lt;p&gt;# Comments: 46&lt;/p&gt;</description>
<pubDate>Sun, 22 Apr 2018 14:50:35 +0000</pubDate>
<dc:creator>empressplay</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.eventbrite.com/support/articles/en_US/Troubleshooting/eventbrite-merchant-agreement?lg=en_US</dc:identifier>
</item>
<item>
<title>Blind since birth, writing code at Amazon since 2013</title>
<link>https://blog.aboutamazon.com/working-at-amazon/blind-since-birth-writing-code-at-amazon-since-2013</link>
<guid isPermaLink="true" >https://blog.aboutamazon.com/working-at-amazon/blind-since-birth-writing-code-at-amazon-since-2013</guid>
<description>&lt;div class=&quot;RichTextArticleBody mood-color&quot;&gt;
&lt;div class=&quot;RichTextArticleBody-body&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/eqtIrzpa3jk&quot; target=&quot;_blank&quot; data-cms-ai=&quot;0&quot;&gt;Click for an extended edition of the video with audio descriptions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Michael Forzano loves when his teammates ask him for help. There’s no ego involved – far from it. For Forzano, it’s the pure satisfaction that he is right where he belongs, writing code at Amazon.&lt;/p&gt;
&lt;p&gt;“I do feel like I have to prove myself a lot in life,” said Forzano, a 26-year-old software engineer on the retail accessibility team. “But not at Amazon. People have been so open minded here.”&lt;/p&gt;
&lt;p&gt;Forzano has been blind since birth as the result of a genetic condition called Norrie disease. “I definitely had a pretty normal childhood despite my blindness,” said Forzano. “My parents always tried to make sure I was able to do the same things that anyone else would do.”&lt;/p&gt;
&lt;div class=&quot;Enhancement&quot; data-align-center=&quot;&quot;&gt;
&lt;div class=&quot;Enhancement-item&quot;&gt;
&lt;div class=&quot;Quote&quot;&gt;&lt;span class=&quot;Quote-icon-top mood-color&quot;&gt;“&lt;/span&gt;
&lt;blockquote&gt;
&lt;p&gt;I remember when I told my mom that I got the (job) offer, she started crying right there on the phone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;Quote-attribution&quot;&gt;Amazon software engineer Michael Forzano&lt;/div&gt;
&lt;span class=&quot;Quote-icon-bottom mood-color&quot;&gt;”&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Forzano also started losing his hearing at the age of five and uses cochlear implants to hear. As a teenager, he became interested in audio games, which are audio-based computer games, and taught himself how to program. He went on to Binghamton University, where he played sax in the pep band and earned a bachelor's degree in computer science.&lt;/p&gt;
&lt;p&gt;Right out of college, he interviewed to become a software engineer at Amazon. He walked in the door, revealed to the interviewers that he was blind, and earned himself a job by impressing them with the code he wrote on his laptop.&lt;/p&gt;
&lt;p&gt;“I remember when I told my mom that I got the (job) offer, she started crying right there on the phone,” said Forzano. At Amazon, he writes code that helps other teams make shopping on Amazon more accessible to people with disabilities.&lt;/p&gt;
&lt;p&gt;Today, the New York native lives with his guide dog, Delta, in downtown Seattle, where he relishes his independence.&lt;/p&gt;
&lt;div class=&quot;Enhancement&quot; data-align-right=&quot;&quot;&gt;
&lt;div class=&quot;Enhancement-item&quot;&gt;
&lt;div class=&quot;VideoEnhancement-title&quot;&gt;&lt;span class=&quot;VideoEnhancement&quot; data-video-disable-history=&quot;&quot;&gt;How Forzano writes code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;VideoEnhancement-player&quot;&gt;
&lt;div class=&quot;YouTubeVideoPlayer&quot; data-video-player=&quot;&quot; data-player-id=&quot;fc98dc37f0dc04cd1987704e4f223f393&quot; data-video-id=&quot;57P_dCEPtRw&quot; data-video-title=&quot;How Forzano writes code&quot;&gt;&lt;span class=&quot;VideoEnhancement&quot; data-video-disable-history=&quot;&quot;&gt;&lt;iframe id=&quot;YouTubeVideoPlayer-fc98dc37f0dc04cd1987704e4f223f393&quot; allowfullscreen=&quot;&quot; src=&quot;https://www.youtube.com/embed/57P_dCEPtRw?enablejsapi=1&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Erik Wang, a fellow software developer at Amazon, said Forzano &quot;reads and writes code even faster than me. He has superpowers to spot flaws in the code.”&lt;/p&gt;
&lt;p&gt;Forzano said he has a good “mental map of the structure of the code,” which allows him to help colleagues and provide unique feedback to his team.&lt;/p&gt;
&lt;p&gt;“I feel really lucky to be here at Amazon, just being able to live the same kind of life that anyone else would. Not letting my blindness hold me back is really empowering.”&lt;/p&gt;
&lt;p&gt;Forzano works on a standard laptop with screen-reader software, which translates every aspect of using a computer into audio cues.&lt;/p&gt;
&lt;p&gt;“I think it's really important for other blind people to know what I have done,” Forzano said. “There are probably a lot of blind people out there wondering how far they'll go and what they will be able to do. I definitely do all I can to make myself available, as a role model, and let the world know.”&lt;/p&gt;

&lt;p&gt;&lt;em&gt;On becoming interested in computers (transcript)&lt;/em&gt;: &quot;So I got interested in computers when I was in high school. I knew a community of blind people online and some of them were developers, really just as a hobby not as a career. But one of them introduced me to programming, specifically programming games. I was very interested in programming audio games, which were basically games that use sound effects and are controlled using the keyboard and allow blind people to play them. I met this person who was a game developer and introduced me to programming, and I just took it from there and taught myself.&quot;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;em&gt;On his job interview at Amazon (transcript)&lt;/em&gt;: &quot;I sent in my application. I was interviewed on campus. They sent some developers out to do interviews, and I went in there not expecting much. I had not told them in advance that I was blind. I just brought in my laptop and said, 'Hey, I'm blind. Can I use my laptop instead of a whiteboard to write my code for the interview?' And they were like, sure no problem. So I did my thing and was extended an offer to come to Seattle. My parents are really proud. I remember when I told my mom that I got the offer, she started crying right there on the phone.&quot;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;em&gt;On coding (transcript)&lt;/em&gt;: &quot;At Amazon I work on the Retail Accessibility team. We build tools that help other teams who are building the features on the website to make sure that they are accessible to customers with disabilities. I know that my co-workers often ask me, 'Can you tell me how this works?' Because I have a pretty good mental map of the structure of the code and where things are and what part of the system this particular component is in, or the overall architecture of the system. I've got it in my head. I can tell someone how something works, where something is, whereas I feel like a lot of my coworkers are relying on white-boarding and drawing diagrams, which is pretty typical, I would say, for people with vision, because they are often visual learners, and just visually oriented people. I’ve never had that, so I've been able to, I guess, use my brain power to do things non-visually.&quot;&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 22 Apr 2018 14:12:24 +0000</pubDate>
<dc:creator>dominotw</dc:creator>
<og:title>Blind since birth, writing code at Amazon since 2013</og:title>
<og:url>https://blog.aboutamazon.com/working-at-amazon/blind-since-birth-writing-code-at-amazon-since-2013</og:url>
<og:image>https://d39w7f4ix9f5s9.cloudfront.net/dims4/default/faa7e2f/2147483647/strip/true/crop/960x502+0+69/resize/1200x628!/quality/90/?url=https%3A%2F%2Fd39w7f4ix9f5s9.cloudfront.net%2F30%2Fc3%2Fc9a57b4d4b11961f60e6bab35ef4%2Fforzano-social-promo.jpg</og:image>
<og:description>Michael Forzano said he has a good “mental map of the structure of the code,” which allows him to help colleagues and provide unique feedback to his team.</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.aboutamazon.com/working-at-amazon/blind-since-birth-writing-code-at-amazon-since-2013</dc:identifier>
</item>
</channel>
</rss>