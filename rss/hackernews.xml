<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>European Commission fines Google €4.34B in Android antitrust case</title>
<link>http://europa.eu/rapid/press-release_IP-18-4581_en.htm</link>
<guid isPermaLink="true" >http://europa.eu/rapid/press-release_IP-18-4581_en.htm</guid>
<description>&lt;p&gt;Google must now bring the conduct effectively to an end within 90 days or face penalty payments of up to 5% of the average daily worldwide turnover of Alphabet, Google's parent company.&lt;/p&gt;&lt;p&gt;Commissioner Margrethe &lt;strong&gt;Vestager&lt;/strong&gt;, in charge of competition policy, said: &quot;&lt;em&gt;Today, mobile internet makes up more than half of global internet traffic. It has changed the lives of millions of Europeans. Our case is about three types of restrictions that Google has imposed on Android device manufacturers and network operators to ensure that traffic on Android devices goes to the Google search engine. In this way, Google has used Android as a vehicle to cement the dominance of its search engine. These practices have denied rivals the chance to innovate and compete on the merits. They have denied European consumers the benefits of effective competition in the important mobile sphere. This is illegal under EU antitrust rules.&lt;/em&gt;&quot;&lt;/p&gt;
&lt;p&gt;In particular, Google:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;has required manufacturers to pre-install the Google Search app and browser app (Chrome), as a condition for licensing Google's app store (the Play Store);&lt;/li&gt;
&lt;li&gt;made payments to certain large manufacturers and mobile network operators on condition that they exclusively pre-installed the Google Search app on their devices; and&lt;/li&gt;
&lt;li&gt;has prevented manufacturers wishing to pre-install Google apps from selling even a single smart mobile device running on alternative versions of Android that were not approved by Google (so-called &quot;Android forks&quot;).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Google's strategy and the scope of the Commission investigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Google obtains the vast majority of its revenues via its flagship product, the Google search engine. The company understood early on that the shift from desktop PCs to mobile internet, which started in the mid-2000s, would be a fundamental change for Google Search. So, Google developed a strategy to anticipate the effects of this shift, and to make sure that users would continue to use Google Search also on their mobile devices.&lt;/p&gt;
&lt;p&gt;In 2005, Google bought the original developer of the Android mobile operating system and has continued to develop Android ever since. Today, about 80% of smart mobile devices in Europe, and worldwide, run on Android.&lt;/p&gt;
&lt;p&gt;When Google develops a new version of Android it publishes the source code online. This in principle allows third parties to download and modify this code to create Android forks. The openly accessible Android source code covers basic features of a smart mobile operating system but not Google's proprietary Android apps and services. Device manufacturers who wish to obtain Google's proprietary Android apps and services need to enter into contracts with Google, as part of which Google imposes a number of restrictions. Google also entered into contracts and applied some of these restrictions to certain large mobile network operators, who can also determine which apps and services are installed on devices sold to end users.&lt;/p&gt;
&lt;p&gt;The Commission decision concerns three specific types of contractual restrictions that Google has imposed on device manufacturers and mobile network operators. These have enabled Google to use Android as a vehicle to cement the dominance of its search engine. In other words, the Commission decision does not question the open source model or the Android operating system as such.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Google's dominance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Commission decision concludes that Google is dominant in the markets for &lt;strong&gt;general internet search services&lt;/strong&gt;, &lt;strong&gt;licensable smart mobile operating systems&lt;/strong&gt; and &lt;strong&gt;app stores for the Android mobile operating system&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;General search services&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Google is dominant in the national markets for general internet search throughout the European Economic Area (EEA), i.e. in all 31 EEA Member States. Google has shares of more than 90% in most EEA Member States. There are high barriers to enter these markets. This has also been concluded in the &lt;a href=&quot;http://europa.eu/rapid/press-release_IP-17-1784_en.htm&quot;&gt;Google Shopping decision&lt;/a&gt; of June 2017.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Smart mobile operating systems available for licence&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Android is a licensable smart mobile operating system. This means that third party manufacturers of smart mobile devices can license and run Android on their devices.&lt;/p&gt;
&lt;p&gt;Through its control over Android, Google is dominant in the worldwide market (excluding China) for licensable smart mobile operating systems, with a market share of more than 95%. There are high barriers to entry in part due to network effects: the more users use a smart mobile operating system, the more developers write apps for that system – which in turn attracts more users. Furthermore, significant resources are required to develop a successful licensable smart mobile operating system.&lt;/p&gt;
&lt;p&gt;As a licensable operating system, Android is different from operating systems exclusively used by vertically integrated developers (like Apple iOS or Blackberry). Those are not part of the same market because they are not available for licence by third party device manufacturers.&lt;/p&gt;
&lt;p&gt;Nevertheless, the Commission investigated to what extent competition for end users (downstream), in particular between &lt;strong&gt;Apple&lt;/strong&gt; and Android devices, could indirectly constrain Google's market power for the licensing of Android to device manufacturers (upstream). The Commission found that this competition does not sufficiently constrain Google upstream for a number of reasons, including:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;end user purchasing decisions are influenced by a variety of factors (such as hardware features or device brand), which are independent from the mobile operating system;&lt;/li&gt;
&lt;li&gt;Apple devices are typically priced higher than Android devices and may therefore not be accessible to a large part of the Android device user base;&lt;/li&gt;
&lt;li&gt;Android device users face switching costs when switching to Apple devices, such as losing their apps, data and contacts, and having to learn how to use a new operating system; and&lt;/li&gt;
&lt;li&gt;even if end users were to switch from Android to Apple devices, this would have limited impact on Google's core business. That's because Google Search is set as the default search engine on Apple devices and Apple users are therefore likely to continue using Google Search for their queries.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;App stores for the Android mobile operating system&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Google is dominant in the worldwide market (excluding China) for app stores for the Android mobile operating system. Google's app store, the Play Store, accounts for more than 90% of apps downloaded on Android devices. This market is also characterised by high barriers to entry. For similar reasons to those already listed above, Google's app store dominance is not constrained by Apple's App Store, which is only available on iOS devices.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Breach of EU antitrust rules&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Market dominance is, as such, not illegal under EU antitrust rules. However, dominant companies have a special responsibility not to abuse their powerful market position by restricting competition, either in the market where they are dominant or in separate markets.&lt;/p&gt;
&lt;p&gt;Google has engaged in three separate types of practices, which all had the aim of cementing Google's dominant position in general internet search.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;1) Illegal tying of Google's search and browser apps&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Google offers its mobile apps and services to device manufacturers as a bundle, which includes the Google Play Store, the Google Search app and the Google Chrome browser. Google's licensing conditions make it impossible for manufacturers to pre-install some apps but not others.&lt;/p&gt;
&lt;p&gt;As part of the Commission investigation, device manufacturers confirmed that the Play Store is a &quot;must-have&quot; app, as users expect to find it pre-installed on their devices (not least because they cannot lawfully download it themselves).&lt;/p&gt;
&lt;p&gt;The Commission decision has concluded that Google has engaged in two instances of illegal tying:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;First, the &lt;strong&gt;tying of the Google Search app&lt;/strong&gt;. As a result, Google has ensured that its Google Search app is pre-installed on practically all Android devices sold in the EEA. Search apps represent an important entry point for search queries on mobile devices. The Commission has found this tying conduct to be illegal as of 2011, which is the date Google became dominant in the market for app stores for the Android mobile operating system.&lt;/li&gt;
&lt;li&gt;Second, the &lt;strong&gt;tying of the Google Chrome browser&lt;/strong&gt;. As a result, Google has ensured that its mobile browser is pre-installed on practically all Android devices sold in the EEA. Browsers also represent an important entry point for search queries on mobile devices and Google Search is the default search engine on Google Chrome. The Commission found this tying conduct to be illegal as of 2012, which is the date from which Google has included the Chrome browser in its app bundle.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Pre-installation can create a &lt;em&gt;status quo&lt;/em&gt; bias. Users who find search and browser apps pre-installed on their devices are likely to stick to these apps. For example, the Commission has found evidence that the Google Search app is consistently used more on Android devices, where it is pre-installed, than on Windows Mobile devices, where users must download it. This also shows that users do not download competing apps in numbers that can offset the significant commercial advantage derived through pre-installation. For example, in 2016:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;on &lt;strong&gt;Android&lt;/strong&gt; devices (with Google Search and Chrome pre-installed) more than 95% of all search queries were made via Google Search; and&lt;/li&gt;
&lt;li&gt;on &lt;strong&gt;Windows Mobile&lt;/strong&gt; devices (Google Search and Chrome are not pre-installed) less than 25% of all search queries were made via Google Search. More than 75% of search queries happened on Microsoft's Bing search engine, which is pre-installed on Windows Mobile devices.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Google's practice has therefore reduced the incentives of manufacturers to pre-install competing search and browser apps, as well as the incentives of users to download such apps. This reduced the ability of rivals to compete effectively with Google.&lt;/p&gt;
&lt;p&gt;The Commission also assessed in detail Google's arguments that the tying of the Google Search app and Chrome browser were necessary, in particular to allow Google to monetise its investment in Android, and concluded that these arguments were not well founded. Google achieves billions of dollars in annual revenues with the Google Play Store alone, it collects a lot of data that is valuable to Google's search and advertising business from Android devices, and it would still have benefitted from a significant stream of revenue from search advertising without the restrictions.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2) Illegal payments conditional on exclusive pre-installation of Google Search&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Google granted significant financial incentives to some of the largest device manufacturers as well as mobile network operators on condition that they &lt;strong&gt;exclusively&lt;/strong&gt; pre-installed Google Search across their entire portfolio of Android devices. This harmed competition by significantly reducing their incentives to pre-install competing search apps.&lt;/p&gt;
&lt;p&gt;The Commission's investigation showed that a rival search engine would have been unable to compensate a device manufacturer or mobile network operator for the loss of the revenue share payments from Google and still make profits. That is because, even if the rival search engine was pre-installed on only some devices, they would have to compensate the device manufacturer or mobile network operator for a loss of revenue share from Google across all devices.&lt;/p&gt;
&lt;p&gt;In line with the recent EU court ruling in &lt;a href=&quot;http://curia.europa.eu/juris/liste.jsf?num=C-413/14&quot;&gt;Intel&lt;/a&gt;, the Commission has considered, amongst other factors, the conditions under which the incentives were granted, their amount, the share of the market covered by these agreements and their duration.&lt;/p&gt;
&lt;p&gt;On this basis, the Commission found Google's conduct to be illegal between 2011 and 2014. In 2013 (after the Commission started to look into this issue), Google started to gradually lift the requirement. The illegal practice effectively ceased as of 2014.&lt;/p&gt;
&lt;p&gt;The Commission also assessed in detail Google's arguments that the granting of financial incentives for exclusive pre-installation of Google Search across the entire portfolio of Android devices was necessary. In this regard, the Commission dismissed Google's claim that payments based on exclusivity were necessary to convince device manufacturers and mobile network operators to produce devices for the Android ecosystem.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;3) Illegal obstruction of development and distribution of competing Android operating systems&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Google has prevented device manufacturers from using any alternative version of Android that was not approved by Google (Android forks). In order to be able to pre-install on their devices Google's proprietary apps, including the Play Store and Google Search, manufacturers had to commit not to develop or sell even a single device running on an Android fork. The Commission found that this conduct was abusive as of 2011, which is the date Google became dominant in the market for app stores for the Android mobile operating system.&lt;/p&gt;
&lt;p&gt;This practice reduced the opportunity for devices running on Android forks to be developed and sold. For example, the Commission has found evidence that Google's conduct prevented a number of large manufacturers from developing and selling devices based on Amazon's Android fork called &quot;Fire OS&quot;.&lt;/p&gt;
&lt;p&gt;In doing so, Google has also closed off an important channel for competitors to introduce apps and services, in particular general search services, which could be pre-installed on Android forks. Therefore, Google's conduct has had a direct impact on users, denying them access to further innovation and smart mobile devices based on alternative versions of the Android operating system. In other words, as a result of this practice, it was Google – and not users, app developers and the market – that effectively determined which operating systems could prosper.&lt;/p&gt;
&lt;p&gt;The Commission also assessed in detail Google's arguments that these restrictions were necessary to prevent a &quot;fragmentation&quot; of the Android ecosystem, and concluded that these were not well founded. First, Google could have ensured that Android devices using Google proprietary apps and services were compliant with Google's technical requirements, without preventing the emergence of Android forks. Second, Google did not provide any credible evidence that Android forks would be affected by technical failures or fail to support apps.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;strong&gt;&lt;span lang=&quot;EN-GB&quot; xml:lang=&quot;EN-GB&quot; xml:lang=&quot;EN-GB&quot;&gt;&lt;img src=&quot;http://ec.europa.eu/avservices/avs/files/video6/repository/prod/photo/store/store2/9/P037749-47009.jpg&quot; alt=&quot;Inforgraphic&quot; width=&quot;435&quot; /&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The effects of Google's illegal practices&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Commission decision concludes that these three types of abuse form part of an overall strategy by Google to cement its dominance in general internet search, at a time when the importance of mobile internet was growing significantly.&lt;/p&gt;
&lt;p&gt;First, Google's practices have denied rival search engines the possibility to compete on the merits. The tying practices ensured the pre-installation of Google's search engine and browser on practically all Google Android devices and the exclusivity payments strongly reduced the incentive to pre-install competing search engines. Google also obstructed the development of Android forks, which could have provided a platform for rival search engines to gain traffic. Google's strategy has also prevented rival search engines from collecting more data from smart mobile devices, including search and mobile location data, which helped Google to cement its dominance as a search engine.&lt;/p&gt;
&lt;p&gt;Furthermore, Google's practices also harmed competition and further innovation in the wider mobile space, beyond just internet search. That's because they prevented other mobile browsers from competing effectively with the pre-installed Google Chrome browser. Finally, Google obstructed the development of Android forks, which could have provided a platform also for other app developers to thrive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Consequences of the decision&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Commission's fine of &lt;strong&gt;€4 342 865 000&lt;/strong&gt; takes account of the duration and gravity of the infringement. In accordance with the &lt;a href=&quot;http://ec.europa.eu/competition/antitrust/legislation/fines.html&quot;&gt;Commission's 2006 Guidelines on fines&lt;/a&gt; (see &lt;a href=&quot;http://europa.eu/rapid/pressReleasesAction.do?reference=IP/06/857&amp;amp;format=HTML&amp;amp;aged=1&amp;amp;language=EN&amp;amp;guiLanguage=en&quot;&gt;press release&lt;/a&gt; and &lt;a href=&quot;http://europa.eu/rapid/press-release_MEMO-06-256_en.htm?locale=en&quot;&gt;MEMO&lt;/a&gt;), the fine has been calculated on the basis of the value of Google's revenue from search advertising services on Android devices in the EEA.&lt;/p&gt;
&lt;p&gt;The Commission decision requires Google to bring its illegal conduct to an end in an effective manner within 90 days of the decision.&lt;/p&gt;
&lt;p&gt;At a minimum, Google has to stop and to not re-engage in any of the three types of practices. The decision also requires Google to refrain from any measure that has the same or an equivalent object or effect as these practices.&lt;/p&gt;
&lt;p&gt;The decision does not prevent Google from putting in place a reasonable, fair and objective system to ensure the correct functioning of Android devices using Google proprietary apps and services, without however affecting device manufacturers' freedom to produce devices based on Android forks.&lt;/p&gt;
&lt;p&gt;It is Google's sole responsibility to ensure compliance with the Commission decision. The Commission will monitor Google's compliance closely and Google is under an obligation to keep the Commission informed of how it will comply with its obligations.&lt;/p&gt;
&lt;p&gt;If Google fails to ensure compliance with the Commission decision, itwould be liable for non-compliance payments of up to 5% of the average daily worldwide turnover of Alphabet, Google's parent company. The Commission would have to determine such non-compliance in a separate decision, with any payment backdated to when the non-compliance started.&lt;/p&gt;
&lt;p&gt;Finally, Google is also liable to face civil actions for damages that can be brought before the courts of the Member States by any person or business affected by its anti-competitive behaviour. The new EU &lt;a href=&quot;http://eur-lex.europa.eu/legal-content/EN/TXT/?uri=uriserv:OJ.L_.2014.349.01.0001.01.ENG&quot;&gt;Antitrust Damages Directive&lt;/a&gt; makes it &lt;a href=&quot;http://europa.eu/rapid/press-release_IP-14-1580_en.htm&quot;&gt;easier for victims of anti-competitive practices to obtain damages.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Other Google cases&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;http://europa.eu/rapid/press-release_IP-17-1784_en.htm&quot;&gt;June 2017&lt;/a&gt;, the Commission fined Google €2.42 billion for abusing its dominance as a search engine by giving an illegal advantage to Google's own comparison shopping service. The Commission is currently actively monitoring Google's compliance with that decision.&lt;/p&gt;
&lt;p&gt;The Commission also continues to investigate restrictions that Google has placed on the ability of certain third party websites to display search advertisements from Google's competitors (the AdSense case). In &lt;a href=&quot;http://europa.eu/rapid/press-release_IP-16-2532_en.htm&quot;&gt;July 2016&lt;/a&gt;, the Commission came to the preliminary conclusion that Google has abused its dominant position in a case concerning AdSense.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Background&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Today's decision is addressed to Google LLC (previously Google Inc.) and Alphabet Inc., Google's parent company. The Commission opened proceedings concerning Google's conduct as regards the Android operating system and applications in &lt;a href=&quot;http://europa.eu/rapid/press-release_IP-15-4780_en.htm&quot;&gt;April 2015&lt;/a&gt; and sent a Statement of Objections to Google in &lt;a href=&quot;http://europa.eu/rapid/press-release_IP-16-1492_en.htm&quot;&gt;April 2016&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eur-lex.europa.eu/legal-content/EN/ALL/?uri=CELEX:12008E102&quot;&gt;Article 102&lt;/a&gt; of the Treaty on the Functioning of the European Union (TFEU) and &lt;a href=&quot;http://www.eftasurv.int/media/documents/Article-54.pdf&quot;&gt;Article 54&lt;/a&gt; of the EEA Agreement prohibit abuse of a dominant position.&lt;/p&gt;
&lt;p&gt;More information on this investigation is available on the Commission's &lt;a href=&quot;http://ec.europa.eu/competition/index_en.html&quot;&gt;competition&lt;/a&gt; website, in the public &lt;a href=&quot;http://ec.europa.eu/competition/elojade/isef/index.cfm&quot;&gt;case register&lt;/a&gt; under the case number &lt;a href=&quot;http://ec.europa.eu/competition/elojade/isef/case_details.cfm?proc_code=1_40099&quot;&gt;40099&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Wed, 18 Jul 2018 09:01:54 +0000</pubDate>
<dc:creator>tiger3</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://europa.eu/rapid/press-release_IP-18-4581_en.htm</dc:identifier>
</item>
<item>
<title>An entomologist rates ant emojis</title>
<link>http://curlicuecal.tumblr.com/post/175362924100/an-entomologist-rates-ant-emojis</link>
<guid isPermaLink="true" >http://curlicuecal.tumblr.com/post/175362924100/an-entomologist-rates-ant-emojis</guid>
<description>&lt;img src=&quot;https://78.media.tumblr.com/ee5124faca7510712da9c845e145e8f4/tumblr_inline_pbl214eXf61r64lal_500.jpg&quot; class=&quot;&quot; data-orig-height=&quot;242&quot; data-orig-width=&quot;540&quot; data-orig-src=&quot;https://78.media.tumblr.com/07e227ea064135de0911b785cd7babfd/tumblr_inline_pb93zdQgFD1r64lal_540.jpg&quot; width=&quot;500&quot; height=&quot;224&quot; alt=&quot;image&quot; /&gt;&lt;p&gt;Beautiful big almond eye, realistic and full of expression as she gazes gently at you. Elbowed antennae and delicately segmented legs and body. Gorgeous pearlescent sheen like she is glowing. This ant moisturizes. This ant is round and huggable. This ant is a star. 11/10.&lt;/p&gt;&lt;img src=&quot;https://78.media.tumblr.com/71c058d727e0fa6b4dc8c2fb1a39c513/tumblr_inline_pbl215mHsg1r64lal_500.jpg&quot; class=&quot;&quot; data-orig-height=&quot;243&quot; data-orig-width=&quot;540&quot; data-orig-src=&quot;https://78.media.tumblr.com/aac77760d79da1ffce10e41344e3ce75/tumblr_inline_pb93zdFmxm1r64lal_540.jpg&quot; width=&quot;500&quot; height=&quot;225&quot; alt=&quot;image&quot; /&gt;&lt;p&gt;Beautifully detailed, lifelike pose but with an unexpected neck and odd antennae, perhaps scared straight. Her eyes suggest she has seen things. Her expression confirms she has seen too much. She is haunted and I want to know more. 7/10.&lt;/p&gt;
&lt;img src=&quot;https://78.media.tumblr.com/b523b474487c7b1aebc86152aaf557bf/tumblr_inline_pbl215lXt91r64lal_500.jpg&quot; class=&quot;&quot; data-orig-height=&quot;236&quot; data-orig-width=&quot;540&quot; data-orig-src=&quot;https://78.media.tumblr.com/7d848584c21b7f20269fdd02066d310b/tumblr_inline_pb93zeMUn31r64lal_540.jpg&quot; width=&quot;500&quot; height=&quot;219&quot; alt=&quot;image&quot; /&gt;&lt;p&gt;Floppy antenna, pointy muppet face, oddly posed legs. What is she? She has no waist. May be she is some kind of bee in disguise? I find her unsettling. 3/10.&lt;/p&gt;
&lt;img src=&quot;https://78.media.tumblr.com/b714f3fa8c9a834edd309382a21f2620/tumblr_inline_pbl215VYQB1r64lal_500.jpg&quot; class=&quot;&quot; data-orig-height=&quot;205&quot; data-orig-width=&quot;540&quot; data-orig-src=&quot;https://78.media.tumblr.com/4e0b5d688da1905cf767a38ef4620c9e/tumblr_inline_pb93zejSRJ1r64lal_540.jpg&quot; width=&quot;500&quot; height=&quot;190&quot; alt=&quot;image&quot; /&gt;&lt;p&gt;This ant has an unexplained, double-jointed thorax, and no evidence of a waist. Her four-footed pose suggests that she a centaur rather than an ant. Centaur ants would be cool. I’m not sure what was intended here. 2/10.&lt;/p&gt;
&lt;img src=&quot;https://78.media.tumblr.com/119d40c72843e43fecd98064b3d9d73d/tumblr_inline_pbl216FoxG1r64lal_500.jpg&quot; class=&quot;&quot; data-orig-height=&quot;170&quot; data-orig-width=&quot;540&quot; data-orig-src=&quot;https://78.media.tumblr.com/9e3ce432339153ee7c4524f77cdc9c2b/tumblr_inline_pb93zekSrx1r64lal_540.jpg&quot; width=&quot;500&quot; height=&quot;157&quot; alt=&quot;image&quot; /&gt;&lt;p&gt;Good first impression, kind of bland in the details. This ant has no particular waist to speak of, floppy rather than elbowed antennae, and an inexpressive face. Her color scheme is soft and hazy. I like the sharp angles of her stylishly sophisticated legs. This ant may not know quite were she is going, but she knows how she is getting there. 6/10.&lt;/p&gt;
&lt;img src=&quot;https://78.media.tumblr.com/50ddfd859a432dbc20ec4ee61d5d0831/tumblr_inline_pbl216mnil1r64lal_500.jpg&quot; class=&quot;&quot; data-orig-height=&quot;237&quot; data-orig-width=&quot;540&quot; data-orig-src=&quot;https://78.media.tumblr.com/7f0e478e3e1bc15dce62ddc9bfaee9f1/tumblr_inline_pb93zevXmV1r64lal_540.jpg&quot; width=&quot;500&quot; height=&quot;219&quot; alt=&quot;image&quot; /&gt;&lt;p&gt;Were you even trying. 0/10&lt;/p&gt;
&lt;img src=&quot;https://78.media.tumblr.com/3f4f5b7c65eb749b6bebb80e2d305894/tumblr_inline_pbl219CVIe1r64lal_500.jpg&quot; class=&quot;&quot; data-orig-height=&quot;246&quot; data-orig-width=&quot;540&quot; data-orig-src=&quot;https://78.media.tumblr.com/c30dfe70a848b9fe1635a2e1a0149cda/tumblr_inline_pb93zeVEnn1r64lal_540.jpg&quot; width=&quot;500&quot; height=&quot;228&quot; alt=&quot;image&quot; /&gt;&lt;p&gt;Gasp! This ant is elegant. This ant has a beautiful tapered thorax, a segmented abdomen, alert, elbowed antennae, and a light-footed pose. This ant’s face suggests curiosity and a desire to explore the world. This ant inspires me. I want to be like her. 10/10&lt;/p&gt;
&lt;img src=&quot;https://78.media.tumblr.com/cb92f3af7c5e2e56b0da612d32e9e40f/tumblr_inline_pbl21bjhdC1r64lal_500.jpg&quot; class=&quot;&quot; data-orig-height=&quot;225&quot; data-orig-width=&quot;540&quot; data-orig-src=&quot;https://78.media.tumblr.com/193c7426e12c6cb607b89901721f1a78/tumblr_inline_pb93zf41ML1r64lal_540.jpg&quot; width=&quot;500&quot; height=&quot;208&quot; alt=&quot;image&quot; /&gt;&lt;p&gt;3-legged, waistless centaur-ant with strange, limp antennae and a beak. I don’t know what this is? It kind of reminds me of a Hork-Bajir. 1/10, not an ant.&lt;/p&gt;
&lt;img src=&quot;https://78.media.tumblr.com/4ea6b54712be254fc7fc799e068bea55/tumblr_inline_pbl21bl1yZ1r64lal_500.jpg&quot; class=&quot;&quot; data-orig-height=&quot;191&quot; data-orig-width=&quot;540&quot; data-orig-src=&quot;https://78.media.tumblr.com/7d33a4eaebcb3b0961d571ac148707bd/tumblr_inline_pb93zfHK6i1r64lal_540.jpg&quot; width=&quot;500&quot; height=&quot;177&quot; alt=&quot;image&quot; /&gt;&lt;p&gt;This ant… makes me sad. All of her legs are broken. The MS Paint art style and gradient abuse convey distress. She has a duck beak. Despite this, her expression suggests perseverance and determined cheerfulness. I want this ant to have a better life. I am rooting for her. 3/10&lt;/p&gt;
&lt;img src=&quot;https://78.media.tumblr.com/2a3cae42565279f58d42f4951f64bcad/tumblr_inline_pbl21c3RvY1r64lal_500.jpg&quot; class=&quot;&quot; data-orig-height=&quot;189&quot; data-orig-width=&quot;540&quot; data-orig-src=&quot;https://78.media.tumblr.com/efd6b320c81616d7f431ab8dac3ec622/tumblr_inline_pb93zfYkNp1r64lal_540.jpg&quot; width=&quot;500&quot; height=&quot;175&quot; alt=&quot;image&quot; /&gt;&lt;p&gt;This ant is a bold and challenging mixture of photorealism and caricature. She is broad and low-built and seems very sturdy. She looks like she would help you move. This ant is a dependable friend. 9/10&lt;/p&gt;
&lt;img src=&quot;https://78.media.tumblr.com/82544bb9be22dd410611fc656394683f/tumblr_inline_pbl21dF1CA1r64lal_500.jpg&quot; class=&quot;&quot; data-orig-height=&quot;192&quot; data-orig-width=&quot;540&quot; data-orig-src=&quot;https://78.media.tumblr.com/d11a12abc677c25bf236dcb74937b0bb/tumblr_inline_pb93zgxrXn1r64lal_540.jpg&quot; width=&quot;500&quot; height=&quot;178&quot; alt=&quot;image&quot; /&gt;&lt;p&gt;A picture of an ant from a children’s book.  She is wearing little boots.  This ant is wrong in every way, and yet I can’t stay mad at her.  7/10&lt;/p&gt;
&lt;img src=&quot;https://78.media.tumblr.com/0c133d5ba29730a1442a8d2241811f66/tumblr_inline_pbl21d1J0z1r64lal_500.jpg&quot; class=&quot;&quot; data-orig-height=&quot;221&quot; data-orig-width=&quot;540&quot; data-orig-src=&quot;https://78.media.tumblr.com/bb870101cecf564189ea9eb502abf1c7/tumblr_inline_pb93zgzcnX1r64lal_540.jpg&quot; width=&quot;500&quot; height=&quot;205&quot; alt=&quot;image&quot; /&gt;&lt;p&gt;An interesting, top-down view of an ant; her legs are positioned with slightly jarring symmetry.  Nevertheless, her overall impression is that of a graceful, stylized design, like a pictograph.  She is suitable for adorning fine garments and jewelry or perhaps gracing the walls of a tiny ant church.  I like this minimalist ant.  8/10.&lt;/p&gt;
&lt;img src=&quot;https://78.media.tumblr.com/d2727f3ce42da069d81fb42fcd1aefa3/tumblr_inline_pbl21dJXZB1r64lal_500.jpg&quot; class=&quot;&quot; data-orig-height=&quot;236&quot; data-orig-width=&quot;540&quot; data-orig-src=&quot;https://78.media.tumblr.com/84ef96ea797700d05dcdf8b2ee1da385/tumblr_inline_pb93zgB9QC1r64lal_540.jpg&quot; width=&quot;500&quot; height=&quot;219&quot; alt=&quot;image&quot; /&gt;&lt;p&gt;This is a termite. -10/10&lt;/p&gt;
</description>
<pubDate>Wed, 18 Jul 2018 06:01:35 +0000</pubDate>
<dc:creator>rbanffy</dc:creator>
<og:title>an entomologist rates ant emojis</og:title>
<og:url>http://curlicuecal.tumblr.com/post/175362924100/an-entomologist-rates-ant-emojis</og:url>
<og:description>Beautiful big almond eye, realistic and full of expression as she gazes gently at you. Elbowed antennae and delicately segmented legs and body. Gorgeous pearlescent sheen like she is glowing. This ant...</og:description>
<og:type>tumblr-feed:entry</og:type>
<og:image>https://78.media.tumblr.com/ee5124faca7510712da9c845e145e8f4/tumblr_inline_pbl214eXf61r64lal_540.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>http://curlicuecal.tumblr.com/post/175362924100/an-entomologist-rates-ant-emojis</dc:identifier>
</item>
<item>
<title>MacBook Pro with i9 chip is throttled due to thermal issues, claims YouTuber</title>
<link>https://www.macrumors.com/2018/07/17/core-i9-chip-macbook-pro-throttling/</link>
<guid isPermaLink="true" >https://www.macrumors.com/2018/07/17/core-i9-chip-macbook-pro-throttling/</guid>
<description>Apple's new 15-inch MacBook Pro can be upgraded to include a 6-core 2.9GHz Intel Core i9 processor that has &lt;a href=&quot;https://www.macrumors.com/2018/07/15/2018-macbook-pro-geekbench-benchmark-scores/&quot;&gt;demonstrated impressive performance&lt;/a&gt;, but one YouTuber is warning customers away from purchasing it with claims that the MacBook Pro chassis can't provide sufficient cooling for it to run at full speed.&lt;p&gt;Dave Lee this afternoon shared a new video on the Core i9 MacBook Pro he purchased, and according to his testing, the new machine is unable to maintain even its base clock speed after just a short time doing processor intensive work like video editing.&lt;/p&gt;&lt;center&gt;
&lt;div id=&quot;video-wrapper&quot;&gt;
&lt;p&gt;&lt;iframe src=&quot;//www.youtube.com/embed/Dx8J125s4cg&quot; width=&quot;560&quot; height=&quot;315&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/center&gt;&lt;br/&gt;&quot;This CPU is an unlocked, overclockable chip but all of that CPU potential is wasted inside this chassis -- or more so the thermal solution that's inside here,&quot; says Lee.&lt;p&gt;He goes on to share some Premiere Pro render times that suggest the new 2018 MacBook Pro with Core i9 chip underperforms compared to a 2017 model with a Core i7 chip. It took 39 minutes for the 2018 MacBook Pro to render a video that the older model was able to render in 35 minutes. Premiere Pro is not well-optimized for macOS, but the difference between the two MacBook Pro models is notable.&lt;/p&gt;&lt;p&gt;Lee ran the same test again with the 2018 MacBook Pro in the freezer, and in cooler temperatures, the i9 chip was able to offer outstanding performance, cutting that render time down to 27 minutes and beating out the 2017 MacBook Pro.&lt;/p&gt;&lt;p&gt;As Lee points out, thermal throttling is in no way unusual and it's seen in all manner of laptops and mobile devices from a range of manufacturers, but he says that &quot;this degree&quot; of thermal throttling is &quot;unacceptable.&quot;
&lt;/p&gt;&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;This kind of thermal throttling really affects the end user. It doesn't matter what you're using it for, like if you're a Final Cut user, or an Adobe Premiere user, or if you're using it for software development or calculations like fluid dynamics -- it doesn't matter what you're doing with your device. If you have any kind of extended computational work that uses the CPU -- that's probably why you're looking at these devices in the first place -- it's going to throttle. And that's unacceptable to me.&lt;/p&gt;
&lt;/blockquote&gt;
It's not clear if there's something wrong with the MacBook Pro with Core i9 chip that Lee received, because this kind of throttling is likely something Apple would have tested for and not something that other users have reported at this point.&lt;p&gt;Because this is just one data point, it's not enough information to reach a conclusion about the i9 chip available for the 15-inch MacBook Pro, but additional testing will certainly follow to shed more light on Lee's video.&lt;/p&gt;

</description>
<pubDate>Wed, 18 Jul 2018 01:17:23 +0000</pubDate>
<dc:creator>electic</dc:creator>
<og:title>YouTuber Claims 15-Inch MacBook Pro With Upgraded Core i9 Chip is Severely Throttled Due to Thermal Issues</og:title>
<og:type>article</og:type>
<og:url>https://www.macrumors.com/2018/07/17/core-i9-chip-macbook-pro-throttling/</og:url>
<og:image>https://img.youtube.com/vi/Dx8J125s4cg/0.jpg?retina</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.macrumors.com/2018/07/17/core-i9-chip-macbook-pro-throttling/</dc:identifier>
</item>
<item>
<title>I’m leaving China</title>
<link>http://www.baldingsworld.com/2018/07/17/balding-out/</link>
<guid isPermaLink="true" >http://www.baldingsworld.com/2018/07/17/balding-out/</guid>
<description>&lt;p&gt;I am leaving China. After nine years working for the HSBC Business School of Peking University Shenzhen Graduate School as a professor teaching international trade, negotiations, and ethics, I am leaving China.  In early November 2017, the HSBC Business School informed me they would not renew my contract.  In March 2018 they informed me they wished to sever all ties by April 1, 2018.&lt;/p&gt;
&lt;p&gt;I leave thankful for the time I spent in Shenzhen, China, and working with elite students in China. Despite technical protections, I knew and accepted the risks of working for the primary university in China run by the Communist Party in China as a self professed libertarian.  Though provided an “official” reason for not renewing my contract, my conscience is clean and I can document most everything that demonstrates the contrary should I ever need to prove otherwise. I know the unspoken reason for my dismissal. You do not work under the Communist Party without knowing the risks.&lt;/p&gt;
&lt;p&gt;Living in China over the past nine years has been an amazing experience both personally and professionally. Working in China as an academic is like being placed in the greatest economics, finance, and business lab which has been shockingly unexplored. In addition to doing some academic research, I felt blessed to write and speak for different organizations from Bloomberg to Foreign Policy.  For someone who suffers from academic ADD (a difficulty spending 3 years on a paper that will appear in print 2-4 years later), I felt blessed to be able to dive into Chinese data everyday exploring aspects that most in my position simply do not get to explore.&lt;/p&gt;
&lt;p&gt;Watching the change first hand while diving into the data and being able to write about it has been a profound privilege and honor. I felt a profound responsibility to get it right and tell you what I was seeing and hearing. I still remember the first time I got an email from someone at Bloomberg who would ultimately edit a lot of my work, I thought for sure it was a spam email. I did not even respond for a few days because up until that point I thought my Mom was probably the only person reading my work.&lt;/p&gt;
&lt;p&gt;Personally, two of my three children have been born here (one under the wildest of circumstances which I must relate at a later date) and they have grown up attending Chinese language elementary schools. One of the things I am most proud of for my time in China is that my children speak, read, and write age fluent Chinese and whenever they see Chinese children in airports or on playgrounds in Shenzhen interact seamlessly.  When I first came to China, my focus was international trade and I wanted to live overseas for a while but knew relatively little about China. Though we told ourselves, we will stay until it was time to go, we probably though we would stay 3 years and leave. Nine years later, our family is glad we came and bittersweet to be leaving.&lt;/p&gt;
&lt;p&gt;For many months as I looked at different options, both in China and globally, I struggled with where exactly to go. For personal and professional, I hoped to stay in China, Hong Kong, or Asia.  However, after quietly sharing my situation with a small number of people and some things I was told unrelated to my personal situation, it became abundantly clear that I could not stay in China. China has reached a point where I do not feel safe being a professor and discussing even the economy, business, and financial markets.  Better to leave on your own terms than being deported after receiving an 8-10 year visa.  As a result, I have decided to leave China.  I will announce my future plans, projects, and activities later though I am quite excited about where I will be going what I will be doing.&lt;/p&gt;
&lt;p&gt;I want to make perfectly clear that any complaints I wrote about in any forum are reflective &lt;strong&gt;&lt;em&gt;only&lt;/em&gt;&lt;/strong&gt; of my concerns about the illiberal, authoritarian communist government of China and not the Chinese people.  Most professor colleagues, even those I would consider pro-Party, were good colleagues whom I enjoyed talking, debating(yes, it happens behind closed doors and I learned a lot from them) and working with.  The Chinese friends I made outside of the work place from people we met in overlapping social circles to neighbors to parents of my children’s school mates were always friendly and helpful ready to assist a foreigner struggling to navigate some of the basics of life in China.  My children whether at Chinese language schools or local rec centers, were always treated well and made friends.  I will use strong language about the authoritarian communist government but I do not want that in anyway to reflect upon the Chinese people.&lt;/p&gt;
&lt;p&gt;Living in China is not without quirks both maddening and amusing.  For instance, something as simple as standing in line in many places can devolve into a knife fight given the utter lack of restraint in cutting that is so common. In many parts of China and even new immigrants to Shenzhen, there is no social prohibition on openly gawking at foreigners while pointing and talking about them.  One daughter, the less social one, became so off put by the picture taking she would pretend to be asleep as a child in a stroller to avoid the attention. The other more social one would do local interviews in Chinese and frequently pose for pictures.  One time, some people were openly talking about us in an elevator.  After we left the elevator my eldest was mildly angry about something and when I asked her what the problem was she complained that the people in the elevator kept calling her Snow White. I was able to convince her it was intended as a good thing.&lt;/p&gt;
&lt;p&gt;I have been in a fair number of countries and China still remains the more foreign place that I continually have to figure out every day.  Other countries have been to in Asia, developed and developing, and even Africa seem less disorienting and culturally dissimilar.  This is both exhilarating, exciting, frustrating, amusing and tiring.  My wife and I would frequently joke that every day you lived in China you would see something you had never seen before.&lt;/p&gt;
&lt;p&gt;One of the most interesting thing to me was to see how my thinking evolved over time in China.  Prior to coming, I was and still am a libertarian leaning professor.  I had not given a lot of thought to human rights either in the United States or in  China.  While many are aware of a variety of the cases that receive attention, I think what struck me is how this filters down into the culture.  There is a complete and utter lack of respect for the individual or person in China.  People do not have innate value as people simply because they exist.&lt;/p&gt;
&lt;p&gt;This leads most directly to a lack of respect for the law/rules/norms.  One thing I began to realize over time is, while not German, how law, rule, and norm abiding Americans are with minimal fear of enforcement.  Cutting in line is considered extremely rude because there is a sense of fairness and that people have equal rights.  In China, line cutting is considered nearly standard operating procedure. There is a common and accepted respect for others even if just it is as simple as standing in line.&lt;/p&gt;
&lt;p&gt;In a way, I sympathize with Chairman Xi’s emphasis on rule of law because in my experience laws/rules/norms are simply ignored.  They are ignored quietly so as not to embarrass the enforcer, however, frequently, the enforcer knows rules or laws are being ignored but so long as the breaker is not egregious, both parties continue to exist in a state of blissful ignorance.  Honesty without force is not normal but an outlier.  Lying is utterly common, but telling the truth revolutionary.&lt;/p&gt;
&lt;p&gt;I rationalize the silent contempt for the existing rules and laws within China as people not respecting the method for creating and establishing the rules and laws.  Rather than confronting the system, a superior, or try good faith attempts to change something, they choose a type of quiet subversion by just ignoring the rule or law.  This quickly spreads to virtually every facet of behavior as everything can be rationalized in a myriad of ways.  Before coming to China, I had this idea that China was rigid which in some ways it is, but in reality it is brutally chaotic because there are no rules it is the pure rule of the jungle with unconstrained might imposing their will and all others ignoring laws to behave as they see fit with no sense of morality or respect for right.&lt;/p&gt;
&lt;p&gt;I had a lawyer tell me about the corruption crackdown, and even most convicted of crimes, that people referred to them as “unlucky”.  As he noted, there was almost no concept of justice even if people recognized the person had done what they were accused of having done.  The discipline stemmed not from their behavior but they were cannon fodder for some game chosen by a higher authority.&lt;/p&gt;
&lt;p&gt;China wrestles with these issues like clockwork every few years after a tragic incident goes viral.  A common one is when someone is run over by a car and pedestrians just step over the body until a family member finds the body.  The video goes viral, prompts a week of hand wringing, and then censors step in to talk about Confucianism and how the economy is growing.  There is no innate value given to human life as precious.&lt;/p&gt;
&lt;p&gt;A friend of mine in China who is a Christian missionary, told me a story about a time he was invited to speak at the local English corner they had in the apartment development where locals would get together hopefully with foreigners and practice English. He was asked to speak on what is the meaning of life, perfect for a part time missionary. He said he knew what people would say having lived in China for sometime but even so was stunned at how deeply and rigidly held the belief that making money was the entire meaning of life. There was no value system.  There was no exogenously held right or wrong, only whether you made money.  With apologies to a bastardized Dostoevsky, with money as God, all is permissible.&lt;/p&gt;
&lt;p&gt;I could talk at length about that what I have observed, but I am not a human rights expert and what type of cultural changes or evolution it engenders.  However, while the well known cases draw attention, these attitudes and responses set the tone for a culture where individuals, respect, and truth mean nothing.&lt;/p&gt;
&lt;p&gt;This has impacted my broader thinking in that executive space (thinking of the United States but also applicable elsewhere) is that laws need to be enforced consistently not at the whim of the superior.  If the law exists it should be enforced and consistent, otherwise it should be removed.  Currently, the United States is going further and further in a direction where laws are applied inconsistently shifting from varying enforcement regimes under different executives.  Law is not law if the government can choose whether to enforce it. Law has become the whimsy of sovereigns prone to political fancy.&lt;/p&gt;
&lt;p&gt;This applies as well to how everyone is treated.  From a President we may have reason to suspect of illegal activity to an immigrant fighting for asylum, all are innocent until proven guilty and treated humanely.  I see this pernicious cycle taking place from China in the United States where decency and humanity on all sides (I am not going to apportion blame here) is swallowed by shrill invectives that people then use to justify their own lack of decency in pursuit of whatever they believe to be right.  America will not return to its principles by partisans justifying increasingly coarse behavior and rhetoric.&lt;/p&gt;
&lt;p&gt;Coupled with the lack of decency is the shift as to what problems people are fighting over.  I am amazed when I go to the US or Europe and everyone is talking about how oppressive the government is and this specific policy issue signals the end of democracy if their side doesn’t win and when the next financial crisis will hit.  I personally think 2008 created a near social PTSD syndrome across a range of view points.  Almost like the wealthy who need therapy despite living materially comfortable lives, Americans are fighting with vitriolic rhetoric in seemingly unnecessary ways.&lt;/p&gt;
&lt;p&gt;The people that I respect most are those who can live their convictions.  You may be a socialist or a libertarian but have the depth of character to accept the tradeoffs and risks associated with your belief system.  Too many people use situational principles that apply to their side when it is beneficial rather than consistently applying a principle that we believe is good for all people.  What results from tribal fighting is an erosion of principles where sides fight over who is worse or less bad rather than fighting to uphold principles.&lt;/p&gt;
&lt;p&gt;One of the reasons principles matter is that each side feels locked in a death struggle. Principles are unwelcome to many because there are times we do not like those principles or where our side will lose if we abide by that principle. The principle matters more than the short term win or loss. All powers we demand can be used against us at some point. America needs to return to seeking to uphold the highest of principles knowing there will be times our side loses because we chose to uphold a principle.  In a democracy, you are going to lose based upon historical precedent, probably about 50% of the time. That is the point of democracy.  Rather than delusionaly believing in vast mandates, candidates should recognize that in recent history they have been elected on narrow margins and hew a more moderate path.&lt;/p&gt;
&lt;p&gt;I think one of the great things about America that people forget is that it is an experiment.  It is an experiment like none other that is truly unique for any major country. There is no country in the world that is in such a state of constant flux and change from a macro-historical perspective. Wave after wave over the past few hundred years of immigrants that drive ambition and innovation are hallmarks.&lt;/p&gt;
&lt;p&gt;Any large American city will have a higher foreign born population than the entirety of China.  America has one of the highest net migration rates of any major economy and accepts more immigrants than any other country.  Of major economies, only Canada and Germany are higher as a percentage of foreign born population share.  It is easy to focus on specific incidents that make the situation seem dire, but in reality America remains an enormously welcoming country to immigrants.&lt;/p&gt;
&lt;p&gt;I think of an area where I know well academia and start ups.  The ability of foreign born academics to rise to a position of prominence or create a start up in China is virtually zero.  In the United States, Silicon Valley is rich with a foreign born population or the children of immigrants and the professor and deans ranks are filled with foreign born population.  The United States is in a continual state of its own internal flux but that is what the experiment is: a country not founded on blood or ideology but a shared destiny of values and principles that all men are created equal.&lt;/p&gt;
&lt;p&gt;The United States has repeatedly failed and continues to fall short of its ideals but has shown a greater sense of self correction than almost any other.  In China you cannot talk about most of history, while in the United States there are constant reminders about failures and how to apply those lessons.  We must remember that it is an ongoing experiment of values we hold to be self evident, not an already attained ideal but a continual working out of what we believe.&lt;/p&gt;
&lt;p&gt;I want to thank a few people for a variety of things.  I want to thank my Bloomberg editors Tim Lavin and Nisid Hajari who have tirelessly worked to improve my writing and more concise.  I have learned a lot from their notes and pushing and appreciate their patience from a data junkie professor.  They do great work to make me sound much better than I am sure I do.&lt;/p&gt;
&lt;p&gt;I also want to thank others I have had as editors and learned from.  James Palmer at Foreign Policy and Zach Coleman at the Nikkei Asian Review are both long time China and Asia hands who have helped push my writing to become better and express ideas better.  Their help has been deeply appreciated.&lt;/p&gt;
&lt;p&gt;I want to apologize to those I may have offended on Twitter (with a couple of exceptions).  I believe it is important to focus first on the principles, let others have their ideas or viewpoints, and keep it light.  If there is one thing the world needs to do more it is laugh.  Living through this bizarre period of history requires levity at the absurdity.&lt;/p&gt;
&lt;p&gt;I want to laud so many people such as journalists and activist that face real harassment, monitoring, and hurdles everyday in working to uncover what is happening in China and those resisting all encompassing authoritarianism we see in China.  One thing I have come to believe deeply is that beliefs and convictions are only manifested in adversity or when tested.  Beliefs which only receive beneficial feedback are less convictions and more conveniences.  While I do not wish to belittle the challenges others face, journalists and activists in China face enormous daily challenges.&lt;/p&gt;
&lt;p&gt;In China, there are very few people who I witness live a testament of their belief.  Who knows if the Party member is a member because he believes in Marxism, Communism, Xi-ism, or simply wants a better apartment? Who knows if the person who claims to be a believer in democracy but complies with the Party actually believes that or just tells the foreigner?  Foreigners in China in positions of influence who claim to believe in human rights but collaborate with the Party to deny Chinese citizens rights need to answer for their actions. I have little idea what people in China believe but I know that if the Party ever falls, there will be more than a billion more people claiming they were closet democracy advocates.&lt;/p&gt;
&lt;p&gt;We should never wish adversity upon ourselves, but recognize that US ideals and values are being tested. I have every confidence that American ideals will come out stronger but make no mistake, it is a trying time.  Sometimes you need to be tested in your beliefs to know those convictions hold beyond convenience or benefit.&lt;/p&gt;
&lt;p&gt;One of my biggest fears living in China has always been that I would be detained.  Though I happily pointed out the absurdity of the rapidly encroaching authoritarianism, a fact which continues to elude so many experts not living in China, I tried to make sure I knew where the line was and did not cross it. There is a profound sense of relief to be leaving safely knowing others, Chinese or foreigners, who have had significantly greater difficulties than myself.  There are many cases which resulted in significantly more problems for them. I know I am blessed to make it out.&lt;/p&gt;
&lt;p&gt;I leave China profoundly worried about the future of China and US China relations.  Most attention here has focused on the Thucydides Trap where conflict results from an established and a rising power.  This leaves out probably the most important variable not just the distinction between an established and a rising power but the values inherent within each state and the system they want to project defining relations between states and the citizenry to the state.&lt;/p&gt;
&lt;p&gt;The United States under Trump and the GOP is facing a significant test and re-evaluation of its principles. However, I remain decidedly confident in the US to handle those tests.  The self correction nature of democracy is on clear display.  The best case scenario for the Trump administration is to minimize congressional losses with the very real possibility of losing control of the house. President Trump has lost more in the courts than he has won and is under investigations by law enforcement headed by registered Republicans. His own party has been unable to pass consequential legislation except for a tax cut.  While none of this confronts the international challenges facing the United States, it speaks to the evolutionary, self corrective nature of US democracy.&lt;/p&gt;
&lt;p&gt;The United States continues to take the largest number of immigrants and rank as one of the most open economies and investment markets in the world, even for Chinese immigrants and businesses.  Saying the United States is facing problems is like saying Warren Buffets stock is down a little this year.  The United States however must return to its liberal international values.  The United States because we lead by example and make the sacrifices from opening our markets regardless of how others behave to making enormous contributions to security in Europe and Asia.&lt;/p&gt;
&lt;p&gt;Conversely, China is a rising power but probably more importantly is a deeply illiberal, expansionist, authoritarian, police state opposed to human rights, democracy, free trade, and rule of law.  Just as we need to consider the state, speed, and direction of change in the United States, China has been deeply illiberal authoritarian for many years, is becoming increasingly illiberal, and is accelerating the pace of change towards greater control.  It both puzzles and concerns me having lived in China for nearly a decade as a public employee to hear Polyanna statements from China “experts” in the United States who talk about the opening and reform of China or refuse to consider the values being promoted. I was left mouth agape once when someone I would consider a liberal internationalist who values human rights informed me he was focused on business and would leave those other issues aside.  The values represented by China cannot be divorced from its rise and influence.&lt;/p&gt;
&lt;p&gt;The rise of China represents a clear and explicit threat not to the United States but to the entirety of liberal democracy, human rights, and open international markets.  We see the world slowly being divided into China supported authoritarian regimes of various stripes that support its creeping illiberalism across a range of areas.  The tragedy of modern American foreign policy is the history of active ignorance and refusal to actively confront the Chinese norm or legal violations. The Trump administration is utterly incapable of defending the values and assembling the coalition that would respond to American leadership as they face even greater threats from China.&lt;/p&gt;
&lt;p&gt;The concern is not over Chinese access to technology to facilitate economic development for a liberal open state. The concern is over the use of technology to facilitate human rights violations and further cement closed markets.  That is a threat for which neither the United States or any other democracy loving country should apologize for.&lt;/p&gt;
&lt;p&gt;I should note that I like many other am concerned about the level of government surveillance on citizenry.  However, equating Beijing to Washington in many of these specific issues is simply non-sensical authoritarian apologetics.  Let me just briefly run through some of the enormous differences. First, some have argued tech firms gather data which is true but does not distinguish what happens to the data. Unlike China, the US government does not have free access to all electronic data.  Second, China uses control over electronic communication in vastly draconian cyber dystopia ways compared to the wide range of opinions that are allowed online in the rest of the world.  By simple comparison, Winnie the Pooh is censored in China while in the United States the debate is over whether some information should be restricted that is deemed inaccurate. It is nothing less than authoritarian apologetics to attempt to equate the two in any serious manner.&lt;/p&gt;
&lt;p&gt;It is profoundly misguided and short sighted to view the rise of China as tension arising either purely from rising economic development in a major state or as a bilateral conflict with the United States.  China represents a clear and present threat to liberal democracies, open markets, and international system nor do they even now attempt to hide this policy.  These tensions for the foreseeable future will only increase. I do not like the way Trump has handled his approach to China and the very valid concerns he raises about their practices, but I find it even more troubling the near total lack of any attempt to deal with these issue previous administrations and the surrogates have displayed for many years and continue to display.  China presents a fundamental threat to the liberal democratic order and the ignorance on display by so many is simply mind boggling.&lt;/p&gt;
&lt;p&gt;A few months ago, I had someone I know send me an email asking for a small favor. I did it sent the email back and moved on. Later that day they called me and I picked up the phone expecting questions about the email.  They started by thanking me and then said they just wanted to check up and see how I was doing knowing my situation.  Even for myself who tries not to get worked up or live in China looking over my shoulder, the worry is ever present.  A small gesture that meant a lot.&lt;/p&gt;
&lt;p&gt;One thing the electronic world has removed from us a sense of personal intimacy. In reality, President Trump has very little impact on most people’s life.  If you’re worried about him fanning flames of intolerance, reach out to a minority colleague or friend and have coffee. If you want Muslims to know they are accepted, invite some over for dinner.&lt;/p&gt;
&lt;p&gt;My chosen method is enjoying a cigar and a drink with people where you have conversation and get to know people on a personal level. Not what nationality is on their passport but about them as people. I always ask people where they are from.  As an example, most people respond with some broad national classifier like “I’m Indian.” Especially in a place like Hong Kong, this tells you nothing about someone. Where are you from not what is your ethnic classification. An “Indian” could have grown up in Hong Kong, Singapore, Malaysia, India, the UK, or Palo Alto.  What is your life experience that makes you unique that helps me understand who I am talking to better?  That type of knowledge comes from taking a little extra time to identify someone as an individual rather than a set of probabilities attached to group multiple group classifications.&lt;/p&gt;
&lt;p&gt;I am excited about where I am heading and different projects I will be announcing in the future.  For now, I leave China relieved, content in what I have done, feeling blessed at the opportunities I have received and those that lie ahead.&lt;/p&gt;
&lt;p&gt;Except for one more note to drop tomorrow, I’m heading off the grid, travel some in America, read books mostly unrelated to China, and prepare for the next phase.  Thanks for listening to my rambling, data obsession, and Dad jokes.&lt;/p&gt;




</description>
<pubDate>Tue, 17 Jul 2018 21:27:34 +0000</pubDate>
<dc:creator>imartin2k</dc:creator>
<og:type>website</og:type>
<og:image></og:image>
<og:title>Balding Out</og:title>
<og:url>http://www.baldingsworld.com/2018/07/17/balding-out/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.baldingsworld.com/2018/07/17/balding-out/</dc:identifier>
</item>
<item>
<title>Google Cloud Global Loadbalancer Outage</title>
<link>https://status.cloud.google.com/incident/cloud-networking/18012</link>
<guid isPermaLink="true" >https://status.cloud.google.com/incident/cloud-networking/18012</guid>
<description>&lt;p&gt;This page provides status information on the services that are part of Google Cloud Platform. Check back here to view the current status of the services listed below. If you are experiencing an issue not listed here, please &lt;a href=&quot;https://cloud.google.com/support/&quot;&gt;contact Support&lt;/a&gt;. Learn more about what's posted on the dashboard in &lt;a href=&quot;https://cloud.google.com/support/docs/dashboard&quot;&gt;this FAQ&lt;/a&gt;. For additional information on these services, please visit &lt;a href=&quot;https://cloud.google.com/&quot;&gt;cloud.google.com&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;secondary&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;The issue with Google Cloud Global Loadbalancers returning 502s has been fully resolved.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;secondary&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Incident began at &lt;strong&gt;2018-07-17 12:15&lt;/strong&gt; and ended at &lt;strong&gt;2018-07-17 13:05&lt;/strong&gt; (all times are &lt;strong&gt;US/Pacific&lt;/strong&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;updates incident&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th class=&quot;status&quot;/&gt;
&lt;th class=&quot;date&quot;&gt;Date&lt;/th&gt;
&lt;th class=&quot;time&quot;&gt;Time&lt;/th&gt;
&lt;th class=&quot;description&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;20&quot;&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td class=&quot;status&quot;/&gt;
&lt;td class=&quot;date&quot;&gt;Jul 17, 2018&lt;/td&gt;
&lt;td class=&quot;time&quot;&gt;13:19&lt;/td&gt;
&lt;td class=&quot;description&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;The issue with Google Cloud Global Load balancers returning 502s has been resolved for all affected users as of 13:05 US/Pacific. We will conduct an internal investigation of this issue and make appropriate improvements to our systems to help prevent or minimize future recurrence. We will provide a more detailed analysis of this incident once we have completed our internal investigation.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;next-row-desc&quot; readability=&quot;7.5&quot;&gt;&lt;td/&gt;
&lt;td colspan=&quot;3&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;The issue with Google Cloud Global Load balancers returning 502s has been resolved for all affected users as of 13:05 US/Pacific. We will conduct an internal investigation of this issue and make appropriate improvements to our systems to help prevent or minimize future recurrence. We will provide a more detailed analysis of this incident once we have completed our internal investigation.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td class=&quot;status&quot;/&gt;
&lt;td class=&quot;date&quot;&gt;Jul 17, 2018&lt;/td&gt;
&lt;td class=&quot;time&quot;&gt;12:53&lt;/td&gt;
&lt;td class=&quot;description&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;The issue with Google Cloud Load balancers returning 502s should be resolved for majority of users and we expect a full resolution in the near future. We will provide another status update by Tuesday, 2018-07-17 13:30 US/Pacific with current details.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;next-row-desc&quot; readability=&quot;7.5&quot;&gt;&lt;td/&gt;
&lt;td colspan=&quot;3&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;The issue with Google Cloud Load balancers returning 502s should be resolved for majority of users and we expect a full resolution in the near future. We will provide another status update by Tuesday, 2018-07-17 13:30 US/Pacific with current details.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td class=&quot;status&quot;/&gt;
&lt;td class=&quot;date&quot;&gt;Jul 17, 2018&lt;/td&gt;
&lt;td class=&quot;time&quot;&gt;12:34&lt;/td&gt;
&lt;td class=&quot;description&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;We are investigating a problem with Google Cloud Global Loadbalancers returning 502s for many services including AppEngine, Stackdriver, Dialogflow, as well as customer Global Load Balancers. We will provide another update by Tuesday, 2018-07-17 13:00 US/Pacific&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;next-row-desc&quot; readability=&quot;12&quot;&gt;&lt;td/&gt;
&lt;td colspan=&quot;3&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;We are investigating a problem with Google Cloud Global Loadbalancers returning 502s for many services including AppEngine, Stackdriver, Dialogflow, as well as customer Global Load Balancers. We will provide another update by Tuesday, 2018-07-17 13:00 US/Pacific&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;status&quot;/&gt;
&lt;td class=&quot;date&quot;&gt;Jul 17, 2018&lt;/td&gt;
&lt;td class=&quot;time&quot;&gt;12:34&lt;/td&gt;
&lt;td class=&quot;description&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;We are investigating a problem with Google Cloud Global Loadbalancers returning 502s&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;next-row-desc&quot; readability=&quot;3&quot;&gt;&lt;td/&gt;
&lt;td colspan=&quot;3&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;We are investigating a problem with Google Cloud Global Loadbalancers returning 502s&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description>
<pubDate>Tue, 17 Jul 2018 19:38:51 +0000</pubDate>
<dc:creator>brian-armstrong</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://status.cloud.google.com/incident/cloud-networking/18012</dc:identifier>
</item>
<item>
<title>Stripe Press</title>
<link>https://press.stripe.com/</link>
<guid isPermaLink="true" >https://press.stripe.com/</guid>
<description>&lt;div readability=&quot;40&quot;&gt;
&lt;p class=&quot;copy&quot;&gt;Stripe partners with hundreds of thousands of the world’s most innovative businesses—organizations that will shape the world of tomorrow. These businesses are the result of many different inputs. Perhaps the most important ingredient is “ideas.”&lt;/p&gt;
&lt;p class=&quot;copy&quot;&gt;Stripe Press highlights ideas that we think can be broadly useful. Some books contain entirely new material, some are collections of existing work reimagined, and others are republications of previous works that have remained relevant over time or have renewed relevance today.&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;Sign up to get notified when we publish new books.&lt;/p&gt;</description>
<pubDate>Tue, 17 Jul 2018 18:00:04 +0000</pubDate>
<dc:creator>gregorymichael</dc:creator>
<og:title>Stripe Press — Ideas for progress</og:title>
<og:url>https://stripe.com/</og:url>
<og:description>Stripe Press publishes books about economic and technological advancement.</og:description>
<og:image>https://stripe.com/img/v3/books/social.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://press.stripe.com/</dc:identifier>
</item>
<item>
<title>Riot Games Approach to Anti-Cheat</title>
<link>https://engineering.riotgames.com/news/riots-approach-anti-cheat</link>
<guid isPermaLink="true" >https://engineering.riotgames.com/news/riots-approach-anti-cheat</guid>
<description>&lt;p&gt;Combating cheats is an ever-evolving arms race. The scope and complexity of cheat development grows every year along with the stakes in online gaming. The pressure is on for game studios to level up when it comes to detecting and preventing bad actors. I’m Michael “Perma” VanKuipers, and I used to be one of those bad actors; I spent over a decade developing cheats for various games and earned the ire of at least one large game studio in the process. These days I work on Riot’s Anti-Cheat team, helping secure &lt;em&gt;League of Legends&lt;/em&gt; from scripts, bots, and exploits. In this article, I’m going to show you some of the details and strategies behind our latest anti-cheat initiative, including a technical overview of the steps we took to mitigate certain types of cheating. For a more high-level understanding of how we handle security, check out our article on the &lt;a href=&quot;https://engineering.riotgames.com/news/evolution-security-riot&quot; target=&quot;_blank&quot;&gt;Evolution of Security at Riot&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote readability=&quot;8.4438202247191&quot;&gt;
&lt;h3&gt;Note&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;We’ve worked with many popular third-party software vendors and creators to ensure their tools will continue to be compatible with the game. If you’re still getting critical errors or have concerns about your legitimate third-party products, please check out our &lt;a href=&quot;https://boards.na.leagueoflegends.com/en/c/bug-report/GX3Zhxwe-game-client-anti-cheat-known-issues-and-fixes&quot; target=&quot;_blank&quot;&gt;known issues and fixes&lt;/a&gt; or contact player support for more individualized assistance.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p dir=&quot;ltr&quot;&gt;Before we get started, I should preface the article with this: talking about anti-cheat is tricky. We have to juggle open and honest conversation with protecting the secret sauce. There are some things that we can’t share for the sake of players and the integrity of the game. That said, we don't think efficacy depends solely on secrecy, and we've been hard at work developing technical solutions for this problem space. With this article I hope to give you a general understanding of the types of threats we see in the cheating space and how we are changing &lt;em&gt;League of Legends&lt;/em&gt; to mitigate them - with a few gritty details along the way.&lt;/p&gt;
&lt;h2 dir=&quot;ltr&quot;&gt;Our philosophy on cheating&lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;When it comes to keeping our products fair, my team focuses primarily on three important tenets: prevention, detection, and deterrence.&lt;/p&gt;
&lt;p class=&quot;rtecenter&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://engineering.riotgames.com/sites/default/files/anticheat_1.png&quot;/&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;For many years, detection and deterrence were the strategies seen across most game studios. In general, most techniques boil down to letting cheaters play a few games, detecting their anomalous behavior (either by tracking what changes they made to the game or analyzing their gameplay patterns), and then removing them from the player population. Today, this approach is still the source of most common anti-cheat solutions that we see. It makes sense, but it means that the barrier to entry for creating cheats in the first place is still relatively low. In addition, players have exposure to cheaters in their games while we wait for our systems to detect them. It works, but it’s not ideal.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;A more effective solution prevents cheating in the first place. If we succeed at that, our players wouldn’t have to experience a bot or scripter ruining their game. Detection and response systems would still be important, but we’d be able to use them as little as possible. This is a lofty goal, and it’s been the driving force behind the changes that we’ve made to our anti-cheat technology and strategy.&lt;/p&gt;
&lt;h2 dir=&quot;ltr&quot;&gt;Types of cheats&lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;There are certain behaviors that we discourage in &lt;em&gt;League of Legends&lt;/em&gt; because we never want our players to find themselves questioning the integrity of the game. We classify these behaviors as cheating because they ruin the competitive experience that makes us love &lt;em&gt;League&lt;/em&gt;. Our solution will focus mainly on technical cheating - the kind of cheating that requires the use of third-party applications that interact with the game. This category of bad behavior can mostly be divided into two subcategories - botting and scripting - which can be combined and implemented in creative ways. We'll explore a few use cases later in this article.&lt;/p&gt;
&lt;h3 dir=&quot;ltr&quot;&gt;Scripting&lt;/h3&gt;
&lt;p dir=&quot;ltr&quot;&gt;The first of the cheating subcategories is scripting, where third-party programs forcefully attach themselves to the game client and use the client’s memory and functionality to accomplish otherwise difficult or impossible tasks. For example, some common techniques we see include helping players dodge skillshots, zoom out farther than they normally could, or perform perfectly executed combos to smash their opponents’ faces. These scripts can range from being very simple (like zoom hacking), to having enormous complexity that caters to the specific nuances of each champion (such as giving Kalista extra maneuvering skills). Despite the level of sophistication in some of the scripts that we see for &lt;em&gt;League of Legends&lt;/em&gt;, most scripters only see a nominal increase in their win rate.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;In the image below, you can see a typical scripting user interface, which draws the ranges of various abilities, indicates which minions are ready to be last-hit, and shows the path of skillshot projectiles.&lt;/p&gt;
&lt;p class=&quot;rtecenter&quot; dir=&quot;ltr&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://engineering.riotgames.com/sites/default/files/anticheat_2.png&quot;/&gt;&lt;/p&gt;
&lt;h3 dir=&quot;ltr&quot;&gt;Botting&lt;/h3&gt;
&lt;p dir=&quot;ltr&quot;&gt;The second subcategory that we commonly see is botting. For the most part, botting is just a third-party application simulating game input to run down a lane and die, or give some semblance of random gameplay that tries to disguise the fact that they’re a bot. Bots are utilized mainly to level accounts for sale, or to farm in-game currency.&lt;/p&gt;
&lt;h2 dir=&quot;ltr&quot;&gt;Our path to mitigation&lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;With the goal of making cheating difficult in the first place, we started with the game client. The most vulnerable piece of any game is the client, as it resides on a cheater’s machine where they have full control of the software that’s running and the permissions granted to the game. With that in mind, we wanted to make the game client as difficult to analyze and exploit as we could.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Some of this comes down to good game design. We’ve been fortunate with the current state of &lt;em&gt;League of Legends&lt;/em&gt; because a lot of good design decisions have already been made:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;We don’t share the state of other players if it doesn’t need to be shared, so we can avoid common cheats like “map hacks” (revealing all players on the map).&lt;/li&gt;
&lt;li&gt;We let the server’s game simulation make the authoritative game decisions and generally don’t trust the information received from the client, which helps prevent common cheats like “god mode” and “disconnect hacks,” barring any overlooked exploits.&lt;/li&gt;
&lt;li&gt;Our network protocol has been obfuscated, and we change this obfuscation regularly so that making a network-level bot is much more difficult.&lt;/li&gt;
&lt;/ul&gt;&lt;p dir=&quot;ltr&quot;&gt;Now that you have an idea of the types of challenges we face, let’s take a look at some of the ways we combat common cheats. I’ve picked out three specific examples of techniques we’ve implemented in response to the ways cheat authors traditionally attack our game client. In each section, I’ll discuss how cheaters approach compromising the game, and how our newest anti-cheat efforts hamper their progress.&lt;/p&gt;
&lt;h3 dir=&quot;ltr&quot;&gt;Encrypting game code&lt;/h3&gt;
&lt;p dir=&quot;ltr&quot;&gt;One aspect of the game client traditionally left unprotected is the game code itself. Cheaters have historically been able to analyze the game executable using their favorite debuggers or disassemblers, and subsequently find the functions they intend to use. From there they can “hook” these important functions to get information about the current state of the game.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Hooking is a very common technique in cheat development that involves redirecting in-game logic into custom code. This allows the cheat application to perform special actions during those routines; for example, if a cheater hooks the function where particles and spell effects are drawn, they can use the location and direction of those spell effects to determine if they need to move the player out of the way of a skillshot.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Usually this type of hooking is done by the cheat application injecting some code into the game client. A popular method of loading that custom code in Windows involves injecting a DLL file into the game. The malicious DLL can then write a jump or call instruction in the target game function, changing the flow of the program into the custom code within the DLL. Once the custom code is finished executing, the cheat application passes execution back to the game code. The process is illustrated below.&lt;/p&gt;
&lt;p class=&quot;rtecenter&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://engineering.riotgames.com/sites/default/files/anticheat_3.png&quot;/&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;In addition to calling their own code in response to game events, a hooked DLL allows cheaters to call game code to perform actions like issuing attacks and moving the champion. This enables the relatively easy development of scripts and bots once a cheater understands the code layout of the game. Even a relatively new cheat developer can pick up a memory searching tool and begin learning where things are in our game and how to manipulate them. We detect these memory changes and interactions with the game client, but we wanted to do a better job of preventing this kind of behavior in the first place.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;With this goal in mind, we set out to make tampering with the &lt;em&gt;League of Legends&lt;/em&gt; game client more difficult by encrypting the game code. There are commercially available applications - commonly known as “packers” - that do this already, but we wanted to come up with a solution in-house that would give us more granular control over performance and quality. This solution also gives us the chance to integrate security measures more tightly into the game, which makes protection more responsive to the game state while also making it more entropic to cheaters.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;In order to implement the encryption of the game code, we needed to single out the portions of the game’s executable file that contained actual code. Understanding how we accomplished this requires a general idea of how the Portable Executable (PE) file format in Windows works. The PE file format is what the operating system uses to load and execute files with runnable code. This includes common file extensions such as EXE and DLL files, system drivers, and more. Each PE file is divided up into a number of sections. Each section of the file has an accompanying “section header” that provides pertinent details about the section including its name, size, and location in the file. This structure is illustrated in more detail below.&lt;/p&gt;
&lt;p class=&quot;rtecenter&quot; dir=&quot;ltr&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://engineering.riotgames.com/sites/default/files/anticheat_4.png&quot;/&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Because our solution focuses on encrypting the code portions of the game client, we singled out the .text section within the file, which is where the executable code of a program is emitted by a compiler by default. Traditional packers perform their encryption by creating a bootstrapping utility that takes the original game binary, finding the relevant sections that require encryption by examining the PE section headers, and then applying the encryption algorithm to those sections. We also used this same approach, focusing on the .text section.&lt;/p&gt;
&lt;p class=&quot;rtecenter&quot; dir=&quot;ltr&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://engineering.riotgames.com/sites/default/files/anticheat_5.png&quot;/&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Once the .text section in the binary was encrypted, we needed to decrypt it when it executed. If someone were to run the game client as it was, it would crash, because the entry point of the application would be a bunch of encrypted garbage. Many packing tools deal with this issue by injecting their own unpacking code into the executable, and overwriting the PE file’s “address of entry point” member to point to their unpacking code. This causes the unpacking code to gain execution first when the program is run. Once it has decrypted the .text section, it can pass execution to the original entry point and the program runs normally.&lt;/p&gt;
&lt;p class=&quot;rtecenter&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://engineering.riotgames.com/sites/default/files/anticheat_6.png&quot;/&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Unfortunately, this particular technique had some limitations that we wanted to overcome. As we worked on this solution, we realized that it would be advantageous if we could validate some of the game’s dependencies before they were loaded. This would allow us to check for any unusual changes to libraries used by the game.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;We wouldn’t be able to achieve that level of validation using the aforementioned “stub code injection” technique. The operating system would load our dependencies &lt;em&gt;before&lt;/em&gt; calling the program’s entry point and allowing our unpacking code to run. This would mean that any altered libraries would already have been loaded and we wouldn’t be able to reliably verify their integrity. We knew we needed a better approach.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;We discovered that we could use the way that the operating system loaded dependencies for PE files to our advantage. When an application is compiled, import descriptors are generated and inserted into the executable for any external libraries that are referenced by the program. From there, each specific imported function or data variable is listed as part of the import descriptor. This way, the operating system can know which DLLs need to be loaded in order for your program to run correctly. These imports are stored as strings or ordinals during compile time in an array called the Import Name Table (INT), which is referenced by that library’s import descriptor. When the program is loaded, the operating system resolves the locations of the referenced imports in the INT and populates the Import Address Table (IAT) with the actual addresses of those imports. You can see this process below.&lt;/p&gt;
&lt;p class=&quot;rtecenter&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://engineering.riotgames.com/sites/default/files/anticheat_7.png&quot;/&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;What if we generated an external library that did our unpacking rather than embedding it in the game itself? Using this approach, we ensure that our unpacking library is the only one loaded by modifying the game’s import descriptors to list only our library. As a result, we’re loaded first and have the opportunity to validate the other dependencies. It doesn’t come without drawbacks, though - it also means we have to manage and load the other dependencies ourselves. The game has many imports and since we replaced all of them with just our bootstrapping module, we had to make sure that we kept track of what previously needed to be imported. We then had to load those external libraries ourselves during initialization and populate the game’s IATs for each of those libraries since the operating system could no longer do it for us. In this instance, we were willing to trade away the convenience of having the operating system load our imports in exchange for having the ability to validate them before they were loaded. We think it was worth it.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;At this point, we’d accomplished our goal of making static analysis difficult. If someone opened the game in a disassembler, they’d be greeted with a bunch of garbage code. On top of that, we made sure that only portions of the game code are decrypted during regular gameplay rather than all of it at once - this helps protect us from keeping the entire .text section decrypted in memory after it’s loaded.&lt;/p&gt;
&lt;p&gt;The next problem we had to tackle was dynamic analysis - what happens after the game has been loaded and part of it decrypted? At this point of our process, game code could be freely analyzed by a debugger. That would make our effort so far significantly less effective.&lt;/p&gt;
&lt;h3 dir=&quot;ltr&quot;&gt;Making life difficult for debuggers&lt;/h3&gt;
&lt;p dir=&quot;ltr&quot;&gt;As an alternative to static analysis of the game, a cheater will often attach a debugger or binary instrumentation tool to the game client while it’s running. Doing this allows them to step through the code as it executes and examine how it works. There’s a lot of research online on anti-debugging techniques that can make things very difficult for someone trying to debug a running executable. We felt that it was prudent to include these, with as much variation as was reasonably possible.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;The game itself and the bootstrapper were both areas that we wanted to protect, and ideally we could do so in a way that makes automated analysis difficult. During the bootstrapping process we insert random debugger checks throughout the code and we randomize which checks appear every build. At compile time, a randomly selected type of anti-debug check is inserted into each of the locations where a check was requested in the code. In some cases, the check is not inserted, so that some places in the code will appear to have no checks in one build, but will have a check in another build. This changes from build to build, as does the code itself for many of the checks.&lt;/p&gt;
&lt;p class=&quot;rtecenter&quot; dir=&quot;ltr&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://engineering.riotgames.com/sites/default/files/anticheat_8.png&quot;/&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;To increase the complexity of analysis, different checks produce different results. For example, during one check we might log that a debugger was detected, and for another check we may change the behavior of some code down the line, or cause the game to crash five minutes later. This unpredictability helps keep the detection more difficult to spot and also helps us get telemetry on how and when people try to analyze the game client.&lt;/p&gt;
&lt;h3 dir=&quot;ltr&quot;&gt;Protecting our data&lt;/h3&gt;
&lt;p dir=&quot;ltr&quot;&gt;Once the game’s code was protected and we felt comfortable with the level of anti-debugging measures, there was one last common attack vector where we thought we could raise the bar in terms of difficulty. While all of our code was now protected, the globals and class members - whose pointers and values resided in the .data section of the PE file and the heap, respectively - were not.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;A lot of script and bot developers use memory searching tools to find data in the game - things like health, mana, etc. - and then use those memory locations to find out other details. For example, health and mana may be part of a larger class or structure that represents the player, and that structure might contain other things such as player position, spell book, level, the direction they’re facing, etc. These types of information are particularly useful for scripts that try to automate behavior like skillshot dodging.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Memory searching tools work by walking through the heap of the game and looking for user-specified values - say, a health value of 100. The user will then take damage in the game, reducing their health to 90, and then search the memory locations that were previously found by the tool to see which ones changed to 90.&lt;/p&gt;
&lt;p class=&quot;rtecenter&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://engineering.riotgames.com/sites/default/files/anticheat_9.png&quot;/&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;They continue this over and over again until they reduce their search results to only a few addresses, and then figure out which one actually corresponds to health with some trial and error testing.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;We block this very common technique by making sure that when the value is changed by taking damage, the value is actually moved as well. This means that we won’t write the 90 to the same memory location that the original 100 resided in.&lt;/p&gt;
&lt;p class=&quot;rtecenter&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://engineering.riotgames.com/sites/default/files/anticheat_10.png&quot;/&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Already this could cause problems for most memory searching tools. Ideally, the values of 100 and 90 would never be stored in the first place. This would force cheat developers to search only for changed values rather than specifying an exact value, which makes the process significantly more arduous. To achieve this level of obfuscation, we added encryption to the data as well so that the original values can’t be found in the heap. To introduce more entropy, we also made sure that each value uses slightly different encryption.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;We’re now able to sprinkle these protected values liberally throughout the game code in the areas where we feel things are most important. We determined priority by analyzing existing cheats and seeing which data they use.&lt;/p&gt;
&lt;h2 dir=&quot;ltr&quot;&gt;Putting it all together&lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;As we move forward into the next year, we remain committed to focusing on our efforts to protect &lt;em&gt;League of Legends&lt;/em&gt;, and we know that there will be even more hurdles ahead. We expect that the cheating space will continue to be an escalating arms race, but we see the encryption, anti-debugging, and obfuscation measures discussed in this article as an impactful step to improving the experiences of our players around the world.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Frankly, this is only a fraction of the considerable effort and functionality that we’ve crafted into our latest anti-cheat solution. We mentioned that there was a great deal we couldn’t talk about, and we did leave a lot out. After all, we need to keep something secret to fight the robot AI in the future. With that said, I hope that by talking more openly about our security solutions we can lay the groundwork for more open technical discussion in the future.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;As always, if you have questions or want to prod us a little bit deeper on what we’ve discussed here today, please feel free to hit us up in the comments.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;em&gt;Want to be a part of Riot’s battle against cheaters? We’re&lt;/em&gt; &lt;a href=&quot;https://www.riotgames.com/en/work-with-us/job/919523&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;hiring&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 17 Jul 2018 17:40:51 +0000</pubDate>
<dc:creator>cammm</dc:creator>
<og:title>Riot's Approach to Anti-Cheat</og:title>
<og:type>website</og:type>
<og:url>https://engineering.riotgames.com/news/riots-approach-anti-cheat</og:url>
<og:image>https://engineering.riotgames.com/sites/default/files/articles/86/anticheatheader.png</og:image>
<og:description>https://riot.com/2mgcpBj #RiotTechBlog</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://engineering.riotgames.com/news/riots-approach-anti-cheat</dc:identifier>
</item>
<item>
<title>U.S. to make More Drugs Easily Available, Cutting Role Doctors Play</title>
<link>https://www.bloombergquint.com/business/2018/07/17/u-s-to-make-more-drugs-easily-available-cutting-role-docs-play</link>
<guid isPermaLink="true" >https://www.bloombergquint.com/business/2018/07/17/u-s-to-make-more-drugs-easily-available-cutting-role-docs-play</guid>
<description>&lt;p&gt;The GAO report suggested that drugs that combat life-threatening allergies, such as Mylan NV’s EpiPen, could benefit from similar nonprescription status. Gottlieb in his statement on Tuesday also said that naloxone, the opioid-overdose antidote, could follow the proposed pathway. Naloxone is available without a prescription in most states, though access has been reported to be limited.&lt;/p&gt;
</description>
<pubDate>Tue, 17 Jul 2018 17:04:45 +0000</pubDate>
<dc:creator>mudil</dc:creator>
<og:title>U.S. to Make More Drugs Easily Available, Cutting Role Docs Play</og:title>
<og:type>article</og:type>
<og:url>https://www.bloomberg.com/news/articles/2018-07-17/u-s-to-make-more-drugs-easily-available-cutting-role-docs-play</og:url>
<og:description>This could change how patients in the U.S. access treatments for chronic conditions.</og:description>
<og:image>https://images.assettype.com/bloombergquint/2017-05/83c23e00-2eb9-48ac-8fa7-1737334f3c77/dee5ba4d-3597-437a-a856-4c89f44546e8.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloombergquint.com/business/2018/07/17/u-s-to-make-more-drugs-easily-available-cutting-role-docs-play</dc:identifier>
</item>
<item>
<title>Getting to Go: Garbage collection and runtime issues</title>
<link>https://blog.golang.org/ismmkeynote</link>
<guid isPermaLink="true" >https://blog.golang.org/ismmkeynote</guid>
<description>&lt;p class=&quot;date&quot;&gt;12 July 2018&lt;/p&gt;
&lt;p&gt;This is the transcript from the keynote I gave at the International Symposium on Memory Management (ISMM) on June 18, 2018. For the past 25 years ISMM has been the premier venue for publishing memory management and garbage collection papers and it was an honor to have been invited to give the keynote.&lt;/p&gt;
&lt;h4 id=&quot;TOC_1.1.&quot;&gt;Abstract&lt;/h4&gt;
&lt;p&gt;The Go language features, goals, and use cases have forced us to rethink the entire garbage collection stack and have led us to a surprising place. The journey has been exhilarating. This talk describes our journey. It is a journey motivated by open source and Google's production demands. Included are side hikes into dead end box canyons where numbers guided us home. This talk will provide insight into the how and the why of our journey, where we are in 2018, and Go's preparation for the next part of the journey.&lt;/p&gt;
&lt;h4 id=&quot;TOC_1.2.&quot;&gt;Bio&lt;/h4&gt;
&lt;p&gt;Richard L. Hudson (Rick) is best known for his work in memory management including the invention of the Train, Sapphire, and Mississippi Delta algorithms as well as GC stack maps which enabled garbage collection in statically typed languages such as Modula-3, Java, C#, and Go. Rick is currently a member of Google's Go team where he is working on Go's garbage collection and runtime issues.&lt;/p&gt;
&lt;p&gt;Contact: rlh@golang.org&lt;/p&gt;
&lt;p&gt;Comments: See &lt;a href=&quot;https://groups.google.com/forum/#!topic/golang-dev/UuDv7W1Hsns&quot; target=&quot;_blank&quot;&gt;the discussion on golang-dev&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;TOC_1.3.&quot;&gt;The Transcript&lt;/h4&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image63.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Rick Hudson here.&lt;/p&gt;
&lt;p&gt;This is a talk about the Go runtime and in particular the garbage collector. I have about 45 or 50 minutes of prepared material and after that we will have time for discussion and I'll be around so feel free to come up afterwards.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image24.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Before I get started I want to acknowledge some people.&lt;/p&gt;
&lt;p&gt;A lot of the good stuff in the talk was done by Austin Clements. Other people on the Cambridge Go team, Russ, Than, Cherry, and David have been an engaging, exciting, and fun group to work with.&lt;/p&gt;
&lt;p&gt;We also want to thank the 1.6 million Go users worldwide for giving us interesting problems to solve. Without them a lot of these problems would never come to light.&lt;/p&gt;
&lt;p&gt;And finally I want to acknowledge Renee French for all these nice Gophers that she has been producing over the years. You will see several of them throughout the talk.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image38.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Before we get revved up and going on this stuff we really have to show what GC's view of Go looks like.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image32.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Well first of all Go programs have hundreds of thousands of stacks. They are managed by the Go scheduler and are always preempted at GC safepoints. The Go scheduler multiplexes Go routines onto OS threads which hopefully run with one OS thread per HW thread. We manage the stacks and their size by copying them and updating pointers in the stack. It's a local operation so it scales fairly well.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image22.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;The next thing that is important is the fact that Go is a value-oriented language in the tradition of C-like systems languages rather than reference-oriented language in the tradition of most managed runtime languages. For example, this shows how a type from the tar package is laid out in memory. All of the fields are embedded directly in the Reader value. This gives programmers more control over memory layout when they need it. One can collocate fields that have related values which helps with cache locality.&lt;/p&gt;
&lt;p&gt;Value-orientation also helps with the foreign function interfaces. We have a fast FFI with C and C++. Obviously Google has a tremendous number of facilities available but they are written in C++. Go couldn't wait to reimplement all of these things in Go so Go had to have access to these systems through the foreign function interface.&lt;/p&gt;
&lt;p&gt;This one design decision has led to some of the more amazing things that have to go on with the runtime. It is probably the most important thing that differentiates Go from other GCed languages.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image60.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Of course Go can have pointers and in fact they can have interior pointers. Such pointers keep the entire value live and they are fairly common.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image29.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;We also have a way ahead of time compilation system so the binary contains the entire runtime.&lt;/p&gt;
&lt;p&gt;There is no JIT recompilation. There are pluses and minuses to this. First of all, reproducibility of program execution is a lot easier which makes moving forward with compiler improvements much faster.&lt;/p&gt;
&lt;p&gt;On the sad side of it we don't have the chance to do feedback optimizations as you would with a JITed system.&lt;/p&gt;
&lt;p&gt;So there are pluses and minuses.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image13.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Go comes with two knobs to control the GC. The first one is GCPercent. Basically this is a knob that adjusts how much CPU you want to use and how much memory you want to use. The default is 100 which means that half the heap is dedicated to live memory and half the heap is dedicated to allocation. You can modify this in either direction.&lt;/p&gt;
&lt;p&gt;MaxHeap, which is not yet released but is being used and evaluated internally, lets the programmer set what the maximum heap size should be. Out of memory, OOMs, are tough on Go; temporary spikes in memory usage should be handled by increasing CPU costs, not by aborting. Basically if the GC sees memory pressure it informs the application that it should shed load. Once things are back to normal the GC informs the application that it can go back to its regular load. MaxHeap also provides a lot more flexibility in scheduling. Instead of always being paranoid about how much memory is available the runtime can size the heap up to the MaxHeap.&lt;/p&gt;
&lt;p&gt;This wraps up our discussion on the pieces of Go that are important to the garbage collector.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image3.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;So now let's talk about the Go runtime and how did we get here, how we got to where we are.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image59.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;So it's 2014. If Go does not solve this GC latency problem somehow then Go isn't going to be successful. That was clear.&lt;/p&gt;
&lt;p&gt;Other new languages were facing the same problem. Languages like Rust went a different way but we are going to talk about the path that Go took.&lt;/p&gt;
&lt;p&gt;Why is latency so important?&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image7.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;The math is completely unforgiving on this.&lt;/p&gt;
&lt;p&gt;A 99%ile isolated GC latency service level objective (SLO), such as 99% of the time a GC cycle takes &amp;lt; 10ms, just simply doesn't scale. What matters is latency during an entire session or through the course of using an app many times in a day. Assume a session that browses several web pages ends up making 100 server requests during a session or it makes 20 requests and you have 5 sessions packed up during the day. In that situation only 37% of users will have a consistent sub 10ms experience across the entire session.&lt;/p&gt;
&lt;p&gt;If you want 99% of those users to have a sub 10ms experience, as we are suggesting, the math says you really need to target 4 9s or the 99.99%ile.&lt;/p&gt;
&lt;p&gt;So it's 2014 and Jeff Dean had just come out with his paper called 'The Tail at Scale' which this digs into this further. It was being widely read around Google since it had serious ramifications for Google going forward and trying to scale at Google scale.&lt;/p&gt;
&lt;p&gt;We call this problem the tyranny of the 9s.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image36.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;So how do you fight the tyranny of the 9s?&lt;/p&gt;
&lt;p&gt;A lot of things were being done in 2014.&lt;/p&gt;
&lt;p&gt;If you want 10 answers ask for several more and take the first 10 and those are the answers you put on your search page. If the request exceeds 50%ile reissue or forward the request to another server. If GC is about to run, refuse new requests or forward the requests to another server until GC is done. And so forth and so on.&lt;/p&gt;
&lt;p&gt;All these are workarounds come from very clever people with very real problems but they didn't tackle the root problem of GC latency. At Google scale we had to tackle the root problem. Why?&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image48.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Redundancy wasn't going to scale, redundancy costs a lot. It costs new server farms.&lt;/p&gt;
&lt;p&gt;We hoped we could solve this problem and saw it as an opportunity to improve the server ecosystem and in the process save some of the endangered corn fields and give some kernel of corn the chance to be knee high by the fourth of July and reach its full potential.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image56.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;So here is the 2014 SLO. Yes, it was true that I was sandbagging, I was new on the team, it was a new process to me, and I didn't want to over promise.&lt;/p&gt;
&lt;p&gt;Furthermore presentations about GC latency in other languages were just plain scary.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image67.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;The original plan was to do a read barrier free concurrent copying GC. That was the long term plan. There was a lot of uncertainty about the overhead of read barriers so Go wanted to avoid them.&lt;/p&gt;
&lt;p&gt;But short term 2014 we had to get our act together. We had to convert all of the runtime and compiler to Go. They were written in C at the time. No more C, no long tail of bugs due to C coders not understanding GC but having a cool idea about how to copy strings. We also needed something quickly and focused on latency but the performance hit had to be less than the speedups provided by the compiler. So we were limited. We had basically a year of compiler performance improvements that we could eat up by making the GC concurrent. But that was it. We couldn't slow down Go programs. That would have been untenable in 2014.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image28.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;So we backed off a bit. We weren't going to do the copying part.&lt;/p&gt;
&lt;p&gt;The decision was to do a tri-color concurrent algorithm. Earlier in my career Eliot Moss and I had done the journal proofs showing that Dijkstra's algorithm worked with multiple application threads. We also showed we could knock off the STW problems, and we had proofs that it could be done.&lt;/p&gt;
&lt;p&gt;We were also concerned about compiler speed, that is the code the compiler generated. If we kept the write barrier turned off most of the time the compiler optimizations would be minimally impacted and the compiler team could move forward rapidly. Go also desperately needed short term success in 2015.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image55.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;So let's look at some of the things we did.&lt;/p&gt;
&lt;p&gt;We went with a size segregated span. Interior pointers were a problem.&lt;/p&gt;
&lt;p&gt;The garbage collector needs to efficiently find the start of the object. If it knows the size of the objects in a span it simply rounds down to that size and that will be the start of the object.&lt;/p&gt;
&lt;p&gt;Of course size segregated spans have some other advantages.&lt;/p&gt;
&lt;p&gt;Low fragmentation: Experience with C, besides Google's TCMalloc and Hoard, I was intimately involved with Intel's Scalable Malloc and that work gave us confidence that fragmentation was not going to be a problem with non-moving allocators.&lt;/p&gt;
&lt;p&gt;Internal structures: We fully understood and had experience with them. We understood how to do size segregated spans, we understood how to do low or zero contention allocation paths.&lt;/p&gt;
&lt;p&gt;Speed: Non-copy did not concern us, allocation admittedly might be slower but still in the order of C. It might not be as fast as bump pointer but that was OK.&lt;/p&gt;
&lt;p&gt;We also had this foreign function interface issue. If we didn't move our objects then we didn't have to deal with the long tail of bugs you might encounter if you had a moving collector as you attempt to pin objects and put levels of indirection between C and the Go object you are working with.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image5.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;The next design choice was where to put the object's metadata. We needed to have some information about the objects since we didn't have headers. Mark bits are kept on the side and used for marking as well as allocation. Each word has 2 bits associated with it to tell you if it was a scalar or a pointer inside that word. It also encoded whether there were more pointers in the object so we could stop scanning objects sooner than later. We also had an extra bit encoding that we could use as an extra mark bit or to do other debugging things. This was really valuable for getting this stuff running and finding bugs.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image19.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;So what about write barriers? The write barrier is on only during the GC. At other times the compiled code loads a global variable and looks at it. Since the GC was typically off the hardware correctly speculates to branch around the write barrier. When we are inside the GC that variable is different, and the write barrier is responsible for ensuring that no reachable objects get lost during the tri-color operations.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image50.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;The other piece of this code is the GC Pacer. It is some of the great work that Austin did. It is basically based on a feedback loop that determines when to best start a GC cycle. If the system is in a steady state and not in a phase change, marking will end just about the time memory runs out.&lt;/p&gt;
&lt;p&gt;That might not be the case so the Pacer also has to monitor the marking progress and ensure allocation doesn't overrun the concurrent marking.&lt;/p&gt;
&lt;p&gt;If need be, the Pacer slows down allocation while speeding up marking. At a high level the Pacer stops the Goroutine, which is doing a lot of the allocation, and puts it to work doing marking. The amount of work is proportional to the Goroutine's allocation. This speeds up the garbage collector while slowing down the mutator.&lt;/p&gt;
&lt;p&gt;When all of this is done the Pacer takes what it has learnt from this GC cycle as well as previous ones and projects when to start the next GC.&lt;/p&gt;
&lt;p&gt;It does much more than this but that is the basic approach.&lt;/p&gt;
&lt;p&gt;The math is absolutely fascinating, ping me for the design docs. If you are doing a concurrent GC you really owe it to yourself to look at this math and see if it's the same as your math. If you have any suggestions let us know.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://golang.org/s/go15gcpacing&quot; target=&quot;_blank&quot;&gt;*Go 1.5 concurrent garbage collector pacing&lt;/a&gt; and &lt;a href=&quot;https://github.com/golang/proposal/blob/master/design/14951-soft-heap-limit.md&quot; target=&quot;_blank&quot;&gt;Proposal: Separate soft and hard heap size goal&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image40.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Yes, so we had successes, lots of them. A younger crazier Rick would have taken some of these graphs and tattooed them on my shoulder I was so proud of them.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image20.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;This is a series of graphs that was done for a production server at Twitter. We of course had nothing to do with that production server. Brian Hatfield did these measurements and oddly enough tweeted about them.&lt;/p&gt;
&lt;p&gt;On the Y axis we have GC latency in milliseconds. On the X axis we have time. Each of the points is a stop the world pause time during that GC.&lt;/p&gt;
&lt;p&gt;On our first release, which was in August of 2015, we saw a drop from around 300 - 400 milliseconds down to 30 or 40 milliseconds. This was good, order of magnitude good.&lt;/p&gt;
&lt;p&gt;We are going to change the Y-axis here radically from 0 to 400 milliseconds down to 0 to 50 milliseconds.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image54.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;This is 6 months later. The improvement was largely due to systematically eliminating all the O(heap) things we were doing during the stop the world time. This was our second order of magnitude improvement as we went from 40 milliseconds down to 4 or 5.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image1.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;There were some bugs in there that we had to clean up and we did this during a minor release 1.6.3. This dropped latency down to well under 10 milliseconds, which was our SLO.&lt;/p&gt;
&lt;p&gt;We are about to change our Y-axis again, this time down to 0 to 5 milliseconds.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image68.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;So here we are, this is August of 2016, a year after the first release. Again we kept knocking off these O(heap size) stop the world processes. We are talking about an 18Gbyte heap here. We had much larger heaps and as we knocked off these O(heap size) stop the world pauses, the size of the heap could obviously grow considerable without impacting latency. So this was a bit of a help in 1.7.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image58.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;The next release was in March of 2017. We had the last of our large latency drops which was due to figuring out how to avoid the stop the world stack scanning at the end of the GC cycle. That dropped us into the sub-millisecond range. Again the Y axis is about to change to 1.5 milliseconds and we see our third order of magnitude improvement.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image45.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;The August 2017 release saw little improvement. We know what is causing the remaining pauses. The SLO whisper number here is around 100-200 microseconds and we will push towards that. If you see anything over a couple hundred microseconds then we really want to talk to you and figure out whether it fits into the stuff we know about or whether it is something new we haven't looked into. In any case there seems to be little call for lower latency. It is important to note these latency levels can happen for a wide variety of non-GC reasons and as the saying goes &quot;You don't have to be faster than the bear, you just have to be faster than the guy next to you.&quot;&lt;/p&gt;
&lt;p&gt;There was no substantial change in the Feb'18 1.10 release just some clean-up and chasing corner cases.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image6.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;So a new year and a new SLO This is our 2018 SLO.&lt;/p&gt;
&lt;p&gt;We have dropped total CPU to CPU used during a GC cycle.&lt;/p&gt;
&lt;p&gt;The heap is still at 2x.&lt;/p&gt;
&lt;p&gt;We now have an objective of 500 microseconds stop the world pause per GC cycle. Perhaps a little sandbagging here.&lt;/p&gt;
&lt;p&gt;The allocation would continue to be proportional to the GC assists.&lt;/p&gt;
&lt;p&gt;The Pacer had gotten much better so we looked to see minimal GC assists in a steady state.&lt;/p&gt;
&lt;p&gt;We were pretty happy with this. Again this is not an SLA but an SLO so it's an objective, not an agreement, since we can't control such things as the OS.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image64.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;That's the good stuff. Let's shift and start talking about our failures. These are our scars; they are sort of like tattoos and everyone gets them. Anyway they come with better stories so let's do some of those stories.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image46.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Our first attempt was to do something called the request oriented collector or ROC. The hypothesis can be seen here.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image34.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;So what does this mean?&lt;/p&gt;
&lt;p&gt;Goroutines are lightweight threads that look like Gophers, so here we have two Goroutines. They share some stuff such as the two blue objects there in the middle. They have their own private stacks and their own selection of private objects. Say the guy on the left wants to share the green object.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image9.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;The goroutine puts it in the shared area so the other Goroutine can access it. They can hook it to something in the shared heap or assign it to a global variable and the other Goroutine can see it.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image26.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Finally the Goroutine on the left goes to its death bed, it's about to die, sad.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image14.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;As you know you can't take your objects with you when you die. You can't take your stack either. The stack is actually empty at this time and the objects are unreachable so you can simply reclaim them.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image2.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;The important thing here is that all actions were local and did not require any global synchronization. This is fundamentally different than approaches like a generational GC, and the hope was that the scaling we would get from not having to do that synchronization would be sufficient for us to have a win.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image27.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;The other issue that was going on with this system was that the write barrier was always on. Whenever there was a write, we would have to see if it was writing a pointer to a private object into a public object. If so, we would have to make the referent object public and then do a transitive walk of reachable objects making sure they were also public. That was a pretty expensive write barrier that could cause many cache misses.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image30.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;That said, wow, we had some pretty good successes.&lt;/p&gt;
&lt;p&gt;This is an end-to-end RPC benchmark. The mislabeled Y axis goes from 0 to 5 milliseconds (lower is better), anyway that is just what it is. The X axis is basically the ballast or how big the in-core database is.&lt;/p&gt;
&lt;p&gt;As you can see if you have ROC on and not a lot of sharing, things actually scale quite nicely. If you don't have ROC on it wasn't nearly as good.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image35.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;But that wasn't good enough, we also had to make sure that ROC didn't slow down other pieces of the system. At that point there was a lot of concern about our compiler and we could not slow down our compilers. Unfortunately the compilers were exactly the programs that ROC did not do well at. We were seeing 30, 40, 50% and more slowdowns and that was unacceptable. Go is proud of how fast its compiler is so we couldn't slow the compiler down, certainly not this much.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image61.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;We then went and looked at some other programs. These are our performance benchmarks. We have a corpus of 200 or 300 benchmarks and these were the ones the compiler folks had decided were important for them to work on and improve. These weren't selected by the GC folks at all. The numbers were uniformly bad and ROC wasn't going to become a winner.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image44.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;It's true we scaled but we only had 4 to 12 hardware thread system so we couldn't overcome the write barrier tax. Perhaps in the future when we have 128 core systems and Go is taking advantage of them, the scaling properties of ROC might be a win. When that happens we might come back and revisit this, but for now ROC was a losing proposition.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image66.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;So what were we going to do next? Let's try the generational GC. It's an oldie but a goodie. ROC didn't work so let's go back to stuff we have a lot more experience with.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image41.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;We weren't going to give up our latency, we weren't going to give up the fact that we were non-moving. So we needed a non-moving generational GC.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image27.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;So could we do this? Yes, but with a generational GC, the write barrier is always on. When the GC cycle is running we use the same write barrier we use today, but when GC is off we use a fast GC write barrier that buffers the pointers and then flushes the buffer to a card mark table when it overflows.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image4.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;So how is this going to work in a non-moving situation? Here is the mark / allocation map. Basically you maintain a current pointer. When you are allocating you look for the next zero and when you find that zero you allocate an object in that space.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image51.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;You then update the current pointer to the next 0.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image17.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;You continue until at some point it is time to do a generation GC. You will notice that if there is a one in the mark/allocation vector then that object was alive at the last GC so it is mature. If it is zero and you reach it then you know it is young.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image53.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;So how do you do promoting. If you find something marked with a 1 pointing to something marked with a 0 then you promote the referent simply by setting that zero to a one.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image49.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;You have to do a transitive walk to make sure all reachable objects are promoted.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image69.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;When all reachable objects have been promoted the minor GC terminates.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image62.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Finally, to finish your generational GC cycle you simply set the current pointer back to the start of the vector and you can continue. All the zeros weren't reached during that GC cycle so are free and can be reused. As many of you know this is called 'sticky bits' and was invented by Hans Boehm and his colleagues.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image21.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;So what did the performance look like? It wasn't bad for the large heaps. These were the benchmarks that the GC should do well on. This was all good.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image65.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;We then ran it on our performance benchmarks and things didn't go as well. So what was going on?&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image43.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;The write barrier was fast but it simply wasn't fast enough. Furthermore it was hard to optimize for. For example, write barrier elision can happen if there is an initializing write between when the object was allocated and the next safepoint. But we were having to move to a system where we have a GC safepoint at every instruction so there really wasn't any write barrier that we could elide going forward.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image47.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;We also had escape analysis and it was getting better and better. Remember the value-oriented stuff we were talking about? Instead of passing a pointer to a function we would pass the actual value. Because we were passing a value, escape analysis would only have to do intraprocedural escape analysis and not interprocedural analysis.&lt;/p&gt;
&lt;p&gt;Of course in the case where a pointer to the local object escapes, the object would be heap allocated.&lt;/p&gt;
&lt;p&gt;It isn't that the generational hypothesis isn't true for Go, it's just that the young objects live and die young on the stack. The result is that generational collection is much less effective than you might find in other managed runtime languages.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image10.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;So these forces against the write barrier were starting to gather. Today, our compiler is much better than it was in 2014. Escape analysis is picking up a lot of those objects and sticking them on the stack-objects that the generational collector would have helped with. We started creating tools to help our users find objects that escaped and if it was minor they could make changes to the code and help the compiler allocate on the stack.&lt;/p&gt;
&lt;p&gt;Users are getting more clever about embracing value-oriented approaches and the number of pointers is being reduced. Arrays and maps hold values and not pointers to structs. Everything is good.&lt;/p&gt;
&lt;p&gt;But that's not the main compelling reason why write barriers in Go have an uphill fight going forward.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image8.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Let's look at this graph. It's just an analytical graph of mark costs. Each line represents a different application that might have a mark cost. Say your mark cost is 20%, which is pretty high but it's possible. The red line is 10%, which is still high. The lower line is 5% which is about what a write barrier costs these days. So what happens if you double the heap size? That's the point on the right. The cumulative cost of the mark phase drops considerably since GC cycles are less frequent. The write barrier costs are constant so the cost of increasing the heap size will drive that marking cost underneath the cost of the write barrier.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image39.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Here is a more common cost for a write barrier, which is 4%, and we see that even with that we can drive the cost of the mark barrier down below the cost of the write barrier by simply increasing the heap size.&lt;/p&gt;
&lt;p&gt;The real value of generational GC is that, when looking at GC times, the write barrier costs are ignored since they are smeared across the mutator. This is generational GC's great advantage, it greatly reduces the long STW times of full GC cycles but it doesn't necessarily improve throughput. Go doesn't have this stop the world problem so it had to look more closely at the throughput problems and that is what we did.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image23.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;That's a lot of failure and with such failure comes food and lunch. I'm doing my usual whining &quot;Gee wouldn't this be great if it wasn't for the write barrier.&quot;&lt;/p&gt;
&lt;p&gt;Meanwhile Austin has just spent an hour talking to some of the HW GC folks at Google and he was saying we should talk to them and try and figure out how to get HW GC support that might help. Then I started telling war stories about zero-fill cache lines, restartable atomic sequences, and other things that didn't fly when I was working for a large hardware company. Sure we got some stuff into a chip called the Itanium, but we couldn't get them into the more popular chips of today. So the moral of the story is simply to use the HW we have.&lt;/p&gt;
&lt;p&gt;Anyway that got us talking, what about something crazy?&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image25.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;What about card marking without a write barrier? It turns out that Austin has these files and he writes into these files all of his crazy ideas that for some reason he doesn't tell me about. I figure it is some sort of therapeutic thing. I used to do the same thing with Eliot. New ideas are easily smashed and one needs to protect them and make them stronger before you let them out into the world. Well anyway he pulls this idea out.&lt;/p&gt;
&lt;p&gt;The idea is that you maintain a hash of mature pointers in each card. If pointers are written into a card, the hash will change and the card will be considered marked. This would trade the cost of write barrier off for cost of hashing.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image31.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;But more importantly it's hardware aligned.&lt;/p&gt;
&lt;p&gt;Today's modern architectures have AES (Advanced Encryption Standard) instructions. One of those instructions can do encryption-grade hashing and with encryption-grade hashing we don't have to worry about collisions if we also follow standard encryption policies. So hashing is not going to cost us much but we have to load up what we are going to hash. Fortunately we are walking through memory sequentially so we get really good memory and cache performance. If you have a DIMM and you hit sequential addresses, then it's a win because they will be faster than hitting random addresses. The hardware prefetchers will kick in and that will also help. Anyway we have 50 years, 60 years of designing hardware to run Fortran, to run C, and to run the SPECint benchmarks. It's no surprise that the result is hardware that runs this kind of stuff fast.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image12.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;We took the measurement. This is pretty good. This is the benchmark suite for large heaps which should be good.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image18.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;We then said what does it look like for the performance benchmark? Not so good, a couple of outliers. But now we have moved the write barrier from always being on in the mutator to running as part of the GC cycle. Now making a decision about whether we are going to do a generational GC is delayed until the start of the GC cycle. We have more control there since we have localized the card work. Now that we have the tools we can turn it over to the Pacer, and it could do a good job of dynamically cutting off programs that fall to the right and do not benefit from generational GC. But is this going to win going forward? We have to know or at least think about what hardware is going to look like going forward.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image52.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;What are the memories of the future?&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image11.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Let's take a look at this graph. This is your classic Moore's law graph. You have a log scale on the Y axis showing the number of transistors in a single chip. The X-axis is the years between 1971 and 2016. I will note that these are the years when someone somewhere predicted that Moore's law was dead.&lt;/p&gt;
&lt;p&gt;Dennard scaling had ended frequency improvements ten years or so ago. New processes are taking longer to ramp. So instead of 2 years they are now 4 years or more. So it's pretty clear that we are entering an era of the slowing of Moore's law.&lt;/p&gt;
&lt;p&gt;Let's just look at the chips in the red circle. These are the chips that are the best at sustaining Moore's law.&lt;/p&gt;
&lt;p&gt;They are chips where the logic is increasingly simple and duplicated many times. Lots of identical cores, multiple memory controllers and caches, GPUs, TPUs, and so forth.&lt;/p&gt;
&lt;p&gt;As we continue to simplify and increase duplication we asymptotically end up with a couple of wires, a transistor, and a capacitor. In other words a DRAM memory cell.&lt;/p&gt;
&lt;p&gt;Put another way, we think that doubling memory is going to be a better value than doubling cores.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.kurzweilai.net/ask-ray-the-future-of-moores-law&quot; target=&quot;_blank&quot;&gt;Original graph&lt;/a&gt; at www.kurzweilai.net/ask-ray-the-future-of-moores-law.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image57.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Let's look at another graph focused on DRAM. These are numbers from a recent PhD thesis from CMU. If we look at this we see that Moore's law is the blue line. The red line is capacity and it seems to be following Moore's law. Oddly enough I saw a graph that goes all the way back to 1939 when we were using drum memory and that capacity and Moore's law were chugging along together so this graph has been going on for a long time, certainly longer than probably anybody in this room has been alive.&lt;/p&gt;
&lt;p&gt;If we compare this graph to CPU frequency or the various Moore's-law-is-dead graphs, we are led to the conclusion that memory, or at least chip capacity, will follow Moore's law longer than CPUs. Bandwidth, the yellow line, is related not only to the frequency of the memory but also to the number of pins one can get off of the chip so it's not keeping up as well but it's not doing badly.&lt;/p&gt;
&lt;p&gt;Latency, the green line, is doing very poorly, though I will note that latency for sequential accesses does better than latency for random access.&lt;/p&gt;
&lt;p&gt;(Data from &quot;Understanding and Improving the Latency of DRAM-Based Memory Systems Submitted in partial fulfillment of the requirements for the degree of Doctor of Philosophy in Electrical and Computer Engineering Kevin K. Chang M.S., Electrical &amp;amp; Computer Engineering, Carnegie Mellon University B.S., Electrical &amp;amp; Computer Engineering, Carnegie Mellon University Carnegie Mellon University Pittsburgh, PA May, 2017&quot;. See &lt;a href=&quot;http://repository.cmu.edu/cgi/viewcontent.cgi?article%3D1946%26context%3Ddissertations&amp;amp;amp;sa=D&amp;amp;amp;ust=1531164842660000&quot; target=&quot;_blank&quot;&gt;Kevin K. Chang's thesis.&lt;/a&gt; The original graph in the introduction was not in a form that I could draw a Moore's law line on it easily so I changed the X-axis to be more uniform.)&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image15.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Let's go to where the rubber meets the road. This is actual DRAM pricing and it has generally declined from 2005 to 2016. I chose 2005 since that is around the time when Dennard scaling ended and along with it frequency improvements.&lt;/p&gt;
&lt;p&gt;If you look at the red circle, which is basically the time our work to reduce Go's GC latency has been going on, we see that for the first couple of years prices did well. Lately, not so good, as demand has exceeded supply leading to price increases over the last two years. Of course, transistors haven't gotten bigger and in some cases chip capacity has increased so this is driven by market forces. RAMBUS and other chip manufacturers say that moving forward we will see our next process shrink in the 2019-2020 time frame.&lt;/p&gt;
&lt;p&gt;I will refrain from speculating on global market forces in the memory industry beyond noting that pricing is cyclic and in the long term supply has a tendency to meet demand.&lt;/p&gt;
&lt;p&gt;Long term, it is our belief that memory pricing will drop at a rate that is much faster than CPU pricing.&lt;/p&gt;
&lt;p&gt;(Sources &lt;a href=&quot;https://hblok.net/blog/&amp;amp;amp;sa=D&amp;amp;amp;ust=1531164842662000&quot; target=&quot;_blank&quot;&gt;https://hblok.net/blog/&lt;/a&gt; and &lt;a href=&quot;https://hblok.net/storage_data/storage_memory_prices_2005-2017-12.png&amp;amp;amp;sa=D&amp;amp;amp;ust=1531164842662000&amp;quot;%3E&quot; target=&quot;_blank&quot;&gt;https://hblok.net/storage_data/storage_memory_prices_2005-2017-12.png&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image37.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Let's look at this other line. Gee it would be nice if we were on this line. This is the SSD line. It is doing a better job of keeping prices low. The material physics of these chips is much more complicated that with DRAM. The logic is more complex, instead of a one transistor per cell there are half a dozen or so.&lt;/p&gt;
&lt;p&gt;Going forward there is a line between DRAM and SSD where NVRAM such as Intel's 3D XPoint and Phase Change Memory (PCM) will live. Over the next decade increased availability of this type of memory is likely to become more mainstream and this will only reinforce the idea that adding memory is the cheap way to add value to our servers.&lt;/p&gt;
&lt;p&gt;More importantly we can expect to see other competing alternatives to DRAM. I won't pretend to know which one will be favored in five or ten years but the competition will be fierce and heap memory will move closer to the highlighted blue SSD line here.&lt;/p&gt;
&lt;p&gt;All of this reinforces our decision to avoid always-on barriers in favor of increasing memory.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image16.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;So what does all this mean for Go going forward?&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image42.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;We intend to make the runtime more flexible and robust as we look at corner cases that come in from our users. The hope is to tighten the scheduler down and get better determinism and fairness but we don't want to sacrifice any of our performance.&lt;/p&gt;
&lt;p&gt;We also do not intend to increase the GC API surface. We've had almost a decade now and we have two knobs and that feels about right. There is not an application that is important enough for us to add a new flag.&lt;/p&gt;
&lt;p&gt;We will also be looking into how to improve our already pretty good escape analysis and optimize for Go's value-oriented programming. Not only in the programming but in the tools we provide our users.&lt;/p&gt;
&lt;p&gt;Algorithmically, we will focus on parts of the design space that minimize the use of barriers, particularly those that are turned on all the time.&lt;/p&gt;
&lt;p&gt;Finally, and most importantly, we hope to ride Moore's law's tendency to favor RAM over CPU certainly for the next 5 years and hopefully for the next decade.&lt;/p&gt;
&lt;p&gt;So that's it. Thank you.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/ismmkeynote/image33.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;P.S. The Go team is looking to hire engineers to help develop and maintain the Go runtime and compiler toolchain.&lt;/p&gt;
&lt;p&gt;Interested? Have a look at our &lt;a href=&quot;https://go-jobs-at-goog.firebaseapp.com&quot; target=&quot;_blank&quot;&gt;open positions&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Tue, 17 Jul 2018 16:43:08 +0000</pubDate>
<dc:creator>ingve</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.golang.org/ismmkeynote</dc:identifier>
</item>
<item>
<title>Backblaze Durability Is Eleven 9s – And Why It Doesn’t Matter</title>
<link>https://www.backblaze.com/blog/cloud-storage-durability/</link>
<guid isPermaLink="true" >https://www.backblaze.com/blog/cloud-storage-durability/</guid>
<description>&lt;p&gt;&lt;img class=&quot;aligncenter wp-image-84007 size-full&quot; title=&quot;11 9s How Safe is the Cloud? &quot; src=&quot;https://www.backblaze.com/blog/wp-content/uploads/2018/07/goesto11.jpg&quot; alt=&quot;Dials that go to 11&quot; width=&quot;1440&quot; height=&quot;820&quot; srcset=&quot;https://www.backblaze.com/blog/wp-content/uploads/2018/07/goesto11.jpg 1440w, https://www.backblaze.com/blog/wp-content/uploads/2018/07/goesto11-300x171.jpg 300w, https://www.backblaze.com/blog/wp-content/uploads/2018/07/goesto11-768x437.jpg 768w, https://www.backblaze.com/blog/wp-content/uploads/2018/07/goesto11-1024x583.jpg 1024w, https://www.backblaze.com/blog/wp-content/uploads/2018/07/goesto11-800x456.jpg 800w, https://www.backblaze.com/blog/wp-content/uploads/2018/07/goesto11-400x228.jpg 400w&quot; sizes=&quot;(max-width: 1440px) 100vw, 1440px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;One of the most often talked about, but least understood, metrics in our industry is the concept of “data durability.” It is often talked about in that nearly everyone quotes some number of nines, and it is least understood in that no one tells you how they actually computed the number or what they actually mean by it.&lt;/p&gt;
&lt;p&gt;It strikes us as odd that so much of the world depends on the concept of &lt;a href=&quot;https://en.wikipedia.org/wiki/RAID&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RAID&lt;/a&gt; and Encodings, but the calculations are not standard or agreed upon. Different web calculators allow you to input some variables but not the correct or most important variables. In almost all cases, they obscure the math behind how they spit out their final numbers. There are a few research papers, but hardly a consensus. There just doesn’t seem to be an agreed upon standard calculation of how many “9s” are in the final result. We’d like to change that.&lt;/p&gt;
&lt;p&gt;In the same spirit of transparency that leads us to publish our &lt;a href=&quot;https://www.backblaze.com/b2/hard-drive-test-data.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hard drive performance stats&lt;/a&gt;, open source our &lt;a href=&quot;https://www.backblaze.com/blog/reed-solomon/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Reed-Solomon Erasure Code,&lt;/a&gt; and generally &lt;a href=&quot;https://www.backblaze.com/blog/vault-cloud-storage-architecture/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;try to share as much of our underlying architecture&lt;/a&gt; as practical, we’d like to share our calculations for the durability of data stored with us.&lt;/p&gt;
&lt;p&gt;We are doing this for two reasons:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;We believe that sharing, where practical, furthers innovation in the community.&lt;/li&gt;
&lt;li&gt;Transparency breeds trust. We’re in the business of asking customers to trust us with their data. It seems reasonable to demonstrate why we’re worthy of your trust.&lt;/li&gt;
&lt;/ol&gt;&lt;h2 class=&quot;b2&quot;&gt;11 Nines Data Durability for Backblaze B2 Cloud Storage&lt;/h2&gt;
&lt;p&gt;At the end of the day, the technical answer is “11 nines.” That’s 99.999999999%. Conceptually, if you store 1 million objects in B2 for 10 million years, you would expect to lose 1 file. There’s a &lt;a href=&quot;https://www.nasa.gov/jpl/nasa-there-is-no-asteroid-threatening-earth&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;higher likelihood of an asteroid destroying Earth&lt;/a&gt; within a million years, but that is something we’ll get to at the end of the post.&lt;/p&gt;
&lt;h3 class=&quot;b3&quot;&gt;How to Calculate Data Durability&lt;/h3&gt;
&lt;p&gt;Amazon’s CTO put forth the X million objects over Y million years metaphor in a &lt;a href=&quot;https://www.allthingsdistributed.com/2010/05/amazon_s3_reduced_redundancy_storage.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;blog post&lt;/a&gt;. That’s a good way to think about it — customers want to know that their data is safe and secure.&lt;/p&gt;
&lt;p&gt;When you send us a file or object, it is actually broken up into 20 pieces (“shards”). The shards overlap so that the original file can be reconstructed from any combination of any 17 of the original 20 pieces. We then store those pieces on different drives that sit in different physical places (we call those 20 drives a “tome”) to minimize the possibility of data loss. When one drive fails, we have processes in place to “rebuild” the data for that drive. So, to lose a file, we have to have four drives fail before we had a chance to rebuild the first one.&lt;/p&gt;
&lt;p&gt;The math on calculating all this is extremely complex. Making it even more interesting, we debate internally whether the proper calculation methodology is to use the Poisson distribution (the probability of continuous events occurring) or Binomial (the probability of discrete events). We spent a shocking amount of time debating this and believe that both arguments have merits. Rather than posit one absolute truth, we decided to publish the results of both calculations (spoiler alert: either methodology tells you that your files are safe with Backblaze).&lt;/p&gt;
&lt;p&gt;The math is difficult to follow unless you have some facility with advanced statistics. We’ll forgive you if you want to skip the sections entirely, &lt;a title=&quot;Skip math&quot; href=&quot;https://www.backblaze.com/blog/cloud-storage-durability/#skip&quot;&gt;just click here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;b3&quot;&gt;Poisson Distribution&lt;/h3&gt;
&lt;p&gt;When dealing with the probability of X number of events occuring in a fixed period of time, a good place to start is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Poisson_distribution&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Poisson distribution&lt;/a&gt;.&lt;a title=&quot;Jump to Footnote&quot; href=&quot;https://www.backblaze.com/blog/cloud-storage-durability/#footnotes&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For inputs, we use the following assumptions:&lt;a title=&quot;Jump to Footnote&quot; href=&quot;https://www.backblaze.com/blog/cloud-storage-durability/#footnotes&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;dl&gt;&lt;dt&gt;&lt;strong&gt;The average rebuild time to achieve complete parity for any given B2 object with a failed drive is 6.5 days.&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;A given file uploaded to Backblaze is split into &lt;a href=&quot;https://www.backblaze.com/blog/reed-solomon/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;20 “shards” or pieces&lt;/a&gt;. The shards are distributed across multiple drives in a way that any drive can fail and the file is fully recoverable — a file is not lost unless four drives were to fail in a given vault before they could be “rebuilt.” This rebuild is enabled through our &lt;a href=&quot;https://www.backblaze.com/blog/reed-solomon/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Reed-Solomon Erasure Code&lt;/a&gt;. Once one drive fails, the other shards are used to “rebuild” the data on the original drive (creating, for all practical purposes, an exact clone of the original drive).
&lt;p&gt;The rule of thumb we use is that for every 1 TB needed to be rebuilt, one should allow 1 day. So a 12 TB drive would, on average, be rebuilt after 12 days. In practice, that number may vary based on a variety of factors, including, but not limited to, our team attempting to clone the failed drive before starting the rebuild process. Based on whatever else may be happening at a given time, a single failed drive may also not be addressed for one day. (Remember, a single drive failure has a dramatically different implication than a hypothetical third drive failure within a given vault — different situations would call for different operational protocols.) For the purposes of this calculation, and a desire to provide simplicity where possible, we assumed an average of a one day lag time before we start the rebuild.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;The annualized failure rate of a drive is 0.81%.&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;For the trailing 60 days while we were writing this post, our average drive failure rate was 0.81%. Long time readers of our blog will also note that hard drive failure rates in our environment have fluctuated over time. But we also factor in the availability of data recovery services including, but not limited to, those offered by our friends at DriveSavers. We estimate a 50% likelihood of full (100%) data recovery from a failed drive that’s sent to DriveSavers. That cuts the effective failure rate in half to 0.41%.&lt;/dd&gt;
&lt;/dl&gt;&lt;p&gt;For our &lt;a href=&quot;https://en.wikipedia.org/wiki/Poisson_distribution&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Poisson calculation&lt;/a&gt;, we use this formula:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-84171&quot; src=&quot;https://www.backblaze.com/blog/wp-content/uploads/2018/07/poisson_calculation.png&quot; alt=&quot;Poisson Calculation&quot; width=&quot;290&quot; height=&quot;45&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The values for the variables are:&lt;/p&gt;
&lt;ul class=&quot;pre-text&quot;&gt;&lt;li&gt;Annual average failure rate = 0.0041 per drive per year on average&lt;/li&gt;
&lt;li&gt;Interval or “period” = 156 hours (6.5 days)&lt;/li&gt;
&lt;li&gt;Lambda = ((0.0041 * 20)/((365*24)/156)) =0.00146027397 for every “interval or period”&lt;/li&gt;
&lt;li&gt;e = 2.7182818284&lt;/li&gt;
&lt;li&gt;k = 4 (we want to know the probability of 4 “events” during this 156 hour interval)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Here’s what it looks like:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-84171&quot; src=&quot;https://www.backblaze.com/blog/wp-content/uploads/2018/07/poisson_calculation.png&quot; alt=&quot;Poisson Calculation&quot; width=&quot;290&quot; height=&quot;45&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-84172&quot; src=&quot;https://www.backblaze.com/blog/wp-content/uploads/2018/07/Poisson-Calculation-enumerated.png&quot; alt=&quot;Poisson calculation enumerated&quot; width=&quot;566&quot; height=&quot;61&quot;/&gt;&lt;/p&gt;
&lt;p&gt;If you’re following along at home, type this into an &lt;a href=&quot;https://apfloat.appspot.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;infinite precision calculator&lt;/a&gt;:&lt;a title=&quot;Jump to Footnote&quot; href=&quot;https://www.backblaze.com/blog/cloud-storage-durability/#footnotes&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;pre-text&quot;&gt;(2.7182818284^(-0.00146027397)) * (((0.00146027397)^4)/(4*3*2*1))&lt;/p&gt;
&lt;p&gt;The sub result for 4 simultaneous drive failures in 156 hours = 1.89187284e-13. That means the probability of it NOT happening in 156 hours is (1 – 1.89187284e-13) which equals 0.999999999999810812715 (12 nines).&lt;/p&gt;
&lt;p&gt;But there’s a “gotcha.” You actually should calculate the probability of it not happening by considering that there are 56 “156 hour intervals” in a given year. That calculation is:&lt;/p&gt;
&lt;p class=&quot;pre-text&quot;&gt;= (1 – 1.89187284e-13)^56&lt;br/&gt;= (0.999999999999810812715)^56&lt;br/&gt;= 0.99999999999 (11 “nines”)&lt;/p&gt;
&lt;p&gt;Yes, while this post claims that Backblaze achieves 11 nines worth of durability, at least one of our internal calculations comes out to 12 nines. Why go with 11 and not 12?&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;There are different methodologies to calculate the number, so we are publishing the most conservative result.&lt;/li&gt;
&lt;li&gt;It doesn’t matter (&lt;a title=&quot;Skip math&quot; href=&quot;https://www.backblaze.com/blog/cloud-storage-durability/#skip&quot;&gt;skip&lt;/a&gt; to the end of this post for more on that).&lt;/li&gt;
&lt;/ol&gt;&lt;h3 class=&quot;b3&quot;&gt;Binomial Distribution&lt;/h3&gt;
&lt;p&gt;For those interested in getting into the full detail of this calculation, we made a public repository on GitHub. It’s our view on how to calculate the durability of data stored with erasure coding, assuming a failure rate for each shard, and independent failures for each shard.&lt;/p&gt;
&lt;p&gt;First, some naming. We will use these names in the calculations:&lt;/p&gt;
&lt;ul class=&quot;pre-text&quot;&gt;&lt;li&gt;&lt;em&gt;S&lt;/em&gt; is the total number of shards (data plus parity)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;R&lt;/em&gt; is the repair time for a shard in days: how long it takes to replace a shard after it fails&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A&lt;/em&gt; is the annual failure rate of one shard&lt;/li&gt;
&lt;li&gt;&lt;em&gt;F&lt;/em&gt; is the failure rate of a shard in &lt;em&gt;R&lt;/em&gt; days&lt;/li&gt;
&lt;li&gt;&lt;em&gt;P&lt;/em&gt; is the probability of a shard failing at least once in &lt;em&gt;R&lt;/em&gt; days&lt;/li&gt;
&lt;li&gt;&lt;em&gt;D&lt;/em&gt; is the durability of data over &lt;em&gt;R&lt;/em&gt; days: not too many shards are lost&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;With erasure coding, your data remains intact as long as you don’t lose more shards than there are parity shards. If you do lose more, there is no way to recover the data.&lt;/p&gt;
&lt;p&gt;One of the assumptions we make is that it takes &lt;em&gt;R&lt;/em&gt; days to repair a failed shard. Let’s start with a simpler problem and look at the data durability over a period of &lt;em&gt;R&lt;/em&gt; days. For a data loss to happen in this time period, &lt;em&gt;P&lt;/em&gt;+1 shards (or more) would have to fail.&lt;/p&gt;
&lt;p&gt;We will use &lt;em&gt;A&lt;/em&gt; to denote the annual failure rate of individual shards. Over one year, the chances that a shard will fail is evenly distributed over all of the &lt;em&gt;R&lt;/em&gt;-day periods in the year. We will use &lt;em&gt;F&lt;/em&gt; to denote the failure rate of one shard in an &lt;em&gt;R&lt;/em&gt;-day period:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-84187&quot; src=&quot;https://www.backblaze.com/blog/wp-content/uploads/2018/07/calc1.png&quot; alt=&quot;&quot; width=&quot;116&quot; height=&quot;58&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The probability of failure of a single shard in &lt;em&gt;R&lt;/em&gt; days is approximately &lt;em&gt;F&lt;/em&gt;, when &lt;em&gt;F&lt;/em&gt; is small. The exact value, from the Poisson distribution is:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-84188&quot; src=&quot;https://www.backblaze.com/blog/wp-content/uploads/2018/07/calc2.png&quot; alt=&quot;&quot; width=&quot;137&quot; height=&quot;43&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Given the probability of one shard failing, we can use the binomial distribution’s probability mass function to calculate the probability of exactly &lt;em&gt;n&lt;/em&gt; of the &lt;em&gt;S&lt;/em&gt; shards failing:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-84189&quot; src=&quot;https://www.backblaze.com/blog/wp-content/uploads/2018/07/calc3.png&quot; alt=&quot;&quot; width=&quot;213&quot; height=&quot;62&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We also lose data if more than &lt;em&gt;n&lt;/em&gt; shards fail in the period. To include those, we can sum the above formula for &lt;em&gt;n&lt;/em&gt; through &lt;em&gt;S&lt;/em&gt; shards, to get the probability of data loss in &lt;em&gt;R&lt;/em&gt; days:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-84190&quot; src=&quot;https://www.backblaze.com/blog/wp-content/uploads/2018/07/calc4.png&quot; alt=&quot;&quot; width=&quot;226&quot; height=&quot;76&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The durability in each period is inverse of that:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-84191&quot; src=&quot;https://www.backblaze.com/blog/wp-content/uploads/2018/07/calc5.png&quot; alt=&quot;&quot; width=&quot;324&quot; height=&quot;81&quot; srcset=&quot;https://www.backblaze.com/blog/wp-content/uploads/2018/07/calc5.png 324w, https://www.backblaze.com/blog/wp-content/uploads/2018/07/calc5-300x75.png 300w&quot; sizes=&quot;(max-width: 324px) 100vw, 324px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Durability over the full year happens when there’s durability in all of the periods, which is the product of probabilities: &lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-84192&quot; src=&quot;https://www.backblaze.com/blog/wp-content/uploads/2018/07/calc6.png&quot; alt=&quot;&quot; width=&quot;81&quot; height=&quot;33&quot;/&gt;&lt;/p&gt;
&lt;p&gt;And that’s the answer!&lt;/p&gt;
&lt;p&gt;For the full calculation and explanation, including our Python code, please visit the GitHub repo:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Backblaze/erasure-coding-durability/blob/master/calculation.ipynb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Backblaze/erasure-coding-durability/blob/master/calculation.ipynb&lt;/a&gt;&lt;/p&gt;
&lt;h2 class=&quot;b2&quot;&gt;We’d Like to Assure You It Doesn’t Matter&lt;/h2&gt;
&lt;p&gt;For anyone in the data business, durability and reliability are very serious issues. Customers want to store their data and know it’s there to be accessed when it’s needed. Any relevant system in our industry must be designed with a number of protocols in place to insure the safety of our customer’s data.&lt;/p&gt;
&lt;p&gt;But at some point, we all start sounding like the &lt;a href=&quot;https://www.youtube.com/watch?v=KOO5S4vxi0o&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;guitar player for Spinal Tap&lt;/a&gt;. Yes, our nines go to 11. Where is that point? That’s open for debate. But somewhere around the 8th nine we start moving from practical to purely academic.&lt;a title=&quot;Jump to Footnote&quot; href=&quot;https://www.backblaze.com/blog/cloud-storage-durability/#footnotes&quot;&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt; Why? Because at these probability levels, it’s far more likely that:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;An armed conflict takes out data center(s).&lt;/li&gt;
&lt;li&gt;Earthquakes / floods / pests / or other events known as “Acts of God” destroy multiple data centers.&lt;/li&gt;
&lt;li&gt;There’s a prolonged billing problem and your account data is deleted.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;That last one is particularly interesting. Any vendor selling cloud storage relies on billing its customers. If a customer stops paying, after some grace period, the vendor will delete the data to free up space for a paying customer.&lt;/p&gt;
&lt;p&gt;Some customers pay by credit card. We don’t have the math behind it, but we believe there’s a greater than 1 in a million chance that the following events could occur:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You change your credit card provider. The credit card on file is invalid when the vendor tries to bill it.&lt;/li&gt;
&lt;li&gt;Your email service provider thinks billing emails are SPAM. You don’t see the emails coming from your vendor saying there is a problem.&lt;/li&gt;
&lt;li&gt;You do not answer phone calls from numbers you do not recognize; Customer Support is trying to call you from a blocked number; they are trying to leave voicemails but the mailbox is full.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If all those things are true, it’s possible that your data gets deleted simply because the system is operating as designed.&lt;/p&gt;
&lt;h2 class=&quot;b2&quot;&gt;What’s the Point? All Hard Drives Will Fail. Design for Failure.&lt;/h2&gt;
&lt;p&gt;Durability should NOT be taken lightly. Backblaze, like all the other serious cloud providers, dedicates valuable time and resources to continuously improving durability. As shown above we have 11 nines of durability. More importantly, we continually invest in our systems, processes, and people to make improvements.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Any&lt;/em&gt; vendor that takes the obligation to protect customer data seriously is deep into “designing for failure.” That requires building fault tolerant systems and processes that help mitigate the impact of failure scenarios. All hard drives will fail. That is a fact. So the question really is “how have you designed your system so it mitigates failures of any given piece?”&lt;/p&gt;
&lt;p&gt;Backblaze’s architecture uses erasure code to reliably get any given file stored in multiple physical locations (mitigating against specific types of failures like a faulty power strip). Backblaze’s business model is profitable and self-sustaining and provides us with the resources and wherewithal to make the right decisions. We also make the decision to do things like publish our hard drive failure rates, our cost structure, and this post. We also have a number of ridiculously intelligent, hard working people dedicated towards improving our systems. Why? Because the obligation around protecting your data goes far beyond the academic calculation of “durability” as defined by hard drive failure rates. &lt;/p&gt;
&lt;p&gt;Eleven years in and counting, with over 600 petabytes of data stored from customers across 160 countries, and well over 30 billion files restored, we confidently state that our system has scaled successfully and is reliable. The numbers bear it out and the experiences of our customers prove it.&lt;/p&gt;
&lt;p&gt;And that’s the bottom line for data durability.&lt;/p&gt;
&lt;hr/&gt;&lt;p id=&quot;fn1&quot;&gt;[1] One aspect of the Poisson distribution is that it assumes that the probability of failure is constant over time. Hard drives, in Backblaze’s environment, exhibit a “&lt;a href=&quot;https://www.backblaze.com/blog/how-long-do-disk-drives-last/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bathtub curve&lt;/a&gt;” for failures (higher likelihood of failure when they are first turned on and at the forecasted end of usable life). While we ran various internal models to account for that, it didn’t have a practical effect on the calculation. In addition, there’s some debate to be had about what the appropriate model is — at Backblaze, hard drives are thoroughly tested before putting them into our production system (affecting the theoretical extreme front end of the bathtub curve). Given all that, for the sake of a semblance of simplicity, we present a straightforward Poisson calculation.&lt;/p&gt;
&lt;p id=&quot;fn2&quot;&gt;[2] This is an area where we should emphasize the conceptual nature of this exercise. System design and reality can diverge.&lt;/p&gt;
&lt;p id=&quot;fn3&quot;&gt;[3] The complexity will break most standard calculators.&lt;/p&gt;
&lt;p id=&quot;fn4&quot;&gt;[4] Previously, Backblaze published its durability to be 8 nines. At the time, it reflected what we knew about drive failure rates and recovery times. Today, the failure rates are favorable. In addition, we’ve worked on and continue to innovate solutions around speeding up drive replacement time.&lt;/p&gt;
&lt;div id=&quot;ts-fab-below-84006&quot; class=&quot;ts-fab-wrapper ts-fab-icons-text&quot;&gt;
&lt;div class=&quot;ts-fab-tabs&quot;&gt;
&lt;div class=&quot;ts-fab-tab&quot; id=&quot;ts-fab-bio-below-84006&quot;&gt;
&lt;div class=&quot;ts-fab-avatar&quot;&gt;&lt;img src=&quot;https://www.backblaze.com/blog/wp-content/uploads/2014/11/blog-avatar-brian-wilson-200.png&quot; width=&quot;64&quot; alt=&quot;Brian Wilson&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;ts-fab-text&quot;&gt;

&lt;div class=&quot;ts-fab-content&quot;&gt;I completed my undergraduate at Oregon State University in 1990, then completed a Stanford Masters degree in 1991. Ever since then I've worked at various companies as a software engineer, in the last few years starting my own software startups called MailFrontier (started in 2002) and most recently &lt;a href=&quot;https://www.backblaze.com&quot;&gt;Backblaze&lt;/a&gt; (started in 2007).&lt;p&gt;I have a personal web site at &lt;a href=&quot;http://www.ski-epic.com&quot;&gt;http://www.ski-epic.com&lt;/a&gt; that I started in 1999 (it was originally just for one vacation, but it kept growing) where I put up my vacation pictures and videos. Nothing professional, it's all just for fun.&lt;/p&gt;&lt;p&gt;In my spare time I enjoy skiing, motorcycling, and boating. I have been lucky enough to travel to a few countries, and I enjoy scouting out new places for the first time.&lt;/p&gt;&lt;p&gt;Follow Brian on:&lt;br/&gt;Twitter: &lt;a href=&quot;https://twitter.com/brianwski&quot;&gt;@brianwski&lt;/a&gt;&lt;br/&gt;YouTube: &lt;a href=&quot;https://youtube.com/brianwski&quot;&gt;brianwski&lt;/a&gt;&lt;br/&gt;LinkedIn: &lt;a href=&quot;https://www.linkedin.com/in/brianwski&quot;&gt;brianwski&lt;/a&gt;&lt;br/&gt;Google+: &lt;a href=&quot;https://www.google.com/+BrianWilson_brianwski&quot;&gt;brianwski&lt;/a&gt;&lt;br/&gt;Reddit: &lt;a href=&quot;https://www.reddit.com/user/brianwski&quot;&gt;brianwski&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ts-fab-tab&quot; id=&quot;ts-fab-latest-posts-below-84006&quot;&gt;
&lt;div class=&quot;ts-fab-avatar&quot;&gt;&lt;img src=&quot;https://www.backblaze.com/blog/wp-content/uploads/2014/11/blog-avatar-brian-wilson-200.png&quot; width=&quot;64&quot; alt=&quot;Brian Wilson&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;ts-fab-text&quot;&gt;
&lt;div class=&quot;ts-fab-header&quot;&gt;
&lt;h4&gt;Latest posts by Brian Wilson &lt;span class=&quot;latest-see-all&quot;&gt;(&lt;a href=&quot;https://www.backblaze.com/blog/author/brianw/&quot;&gt;see all&lt;/a&gt;)&lt;/span&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;swp_social_panel swp_flat_fresh swp_default_full_color swp_individual_full_color swp_other_full_color scale-100 scale-full_width&quot; data-min-width=&quot;1100&quot; data-panel-position=&quot;below&quot; data-float=&quot;left&quot; data-float-mobile=&quot;bottom&quot; data-count=&quot;0&quot; data-float-color=&quot;#ffffff&quot;&gt;






&lt;div class=&quot;nc_tweetContainer total_shares total_sharesalt&quot;&gt;&lt;span class=&quot;swp_count&quot;&gt;382 &lt;span class=&quot;swp_label&quot;&gt;Shares&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;blog_date&quot;&gt;Category: &lt;a href=&quot;https://www.backblaze.com/blog/category/cloud-storage/&quot; rel=&quot;category tag&quot;&gt;Cloud Storage&lt;/a&gt;   &lt;/div&gt;
</description>
<pubDate>Tue, 17 Jul 2018 16:25:08 +0000</pubDate>
<dc:creator>ingve</dc:creator>
<og:type>article</og:type>
<og:title>Reliability in Cloud Computing: What Do All Those 9s Mean?</og:title>
<og:description>One of the most talked about, but least understood, metrics is the concept of “data durability.” We take look behind the &quot;9s&quot; to see what it all means.</og:description>
<og:url>https://www.backblaze.com/blog/cloud-storage-durability/</og:url>
<og:image>https://www.backblaze.com/blog/wp-content/uploads/2018/07/goesto11.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.backblaze.com/blog/cloud-storage-durability/</dc:identifier>
</item>
</channel>
</rss>