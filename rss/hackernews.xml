<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Show HN: Hacking slot machines with a buttonhole camera and brute-force search</title>
<link>https://github.com/tensor8/hacking_slot_machines</link>
<guid isPermaLink="true" >https://github.com/tensor8/hacking_slot_machines</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;So it turns out that there's a game on a specific brand of slot machine that's basically like an extreme version of Trivial Pursuit. It &lt;em&gt;also&lt;/em&gt; turns out that the game ROM (containing all the answers) can be found online.&lt;/p&gt;
&lt;p&gt;This code allows you to win the jackpot every time.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/tensor8/hacking_slot_machines/blob/master/quiz.gif&quot;&gt;&lt;img src=&quot;https://github.com/tensor8/hacking_slot_machines/raw/master/quiz.gif&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's the pipeline:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Capture image of slot machine screen with buttonhole camera to raspberry pi&lt;/li&gt;
&lt;li&gt;Process image to undo perspective shift and segment into question and answer boxes with OpenCV&lt;/li&gt;
&lt;li&gt;Pass processed question boxes to Google Tesseract for text recognition&lt;/li&gt;
&lt;li&gt;Run OCR text through a hand-designed brute-force search to get the most likely answer&lt;/li&gt;
&lt;li&gt;Pass answer through text-to-speech engine and into hidden earpiece&lt;/li&gt;
&lt;li&gt;(profit)&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;The game&lt;/h3&gt;
&lt;p&gt;The game asks you a series of general knowledge questions. It presents you with a choice of four answers, where one is correct. The more you get right, the more money you build up, until you win the jackpot.&lt;/p&gt;
&lt;h3&gt;Decrypting the game files&lt;/h3&gt;
&lt;p&gt;The game data files look like &lt;a href=&quot;https://github.com/tensorman/slotbot/blob/master/jackpot_q_bank/UK_geography_01.QQQ&quot;&gt;this&lt;/a&gt;; encrypted, unreadable text. Fortunately, it turned out that they were encrypted using an &lt;a href=&quot;https://en.wikipedia.org/wiki/XOR_cipher&quot; rel=&quot;nofollow&quot;&gt;xor cipher&lt;/a&gt;. This means that we can fairly easily &lt;a href=&quot;https://en.wikipedia.org/wiki/Chosen-plaintext_attack&quot; rel=&quot;nofollow&quot;&gt;write a script&lt;/a&gt; to get a list of questions and answers in human-readable, decrypted form (run &lt;code&gt;python decrypt.py&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;Designing a brute force search&lt;/h3&gt;
&lt;p&gt;Now we have the data, the fun begins. We need to read the screen, match what we can see to a question in the data bank via a brute force search, and read out the corresponding correct answer.&lt;/p&gt;
&lt;p&gt;I initially tried to do this with the question data alone, ignoring the answers. Unfortunately, this doesn't work. Optical character recognition is imperfect, especially when running in real-time off a bad camera. About 30% of the characters will typically be misread. This means that the OCR-read question text is typically too garbled to identify which exact question it corresponds to; we can only narrow the search down to about 30 possible candidates.&lt;/p&gt;
&lt;p&gt;So, we need to use the information provided by the answers to help identify which question we are looking at. This makes the brute force search a little more tricky, but still possible.&lt;/p&gt;
&lt;p&gt;The two basic ingredients of this brute-force search will be (i) a way to compare two strings for similarity; and, using this, (ii) a metric to rank similarity between imperfectly observed question/answer pairs and true samples from the database.&lt;/p&gt;
&lt;p&gt;We use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Levenshtein_distance&quot; rel=&quot;nofollow&quot;&gt;Levenschtein distance&lt;/a&gt; to define the similarity between two strings, defined as the minimum number of edits needed to change one string into another. Since a longer string tends to accumulate more reading errors, we'll normalize the Levenschtein distance over its length.&lt;/p&gt;
&lt;p&gt;We form a confusion matrix of OCR answers against database answers. Taking the Frobenius inner product between this and every 4-D &lt;a href=&quot;https://en.wikipedia.org/wiki/Permutation_matrix&quot; rel=&quot;nofollow&quot;&gt;permutation matrix&lt;/a&gt; will give us the metric we need. We can brute-force search over this to find the correct answer. The intuition behind this algorithm is that we're taking the dot product between the observed confusion matrix (which is noisy due to poor observability), and idealized confusion matrices (assuming perfect observability). The idealized confusion matrices take the form of permutation matrices because the four answers can appear in any permutation.&lt;/p&gt;
&lt;p&gt;The code to carry out the brute force search can be found in &lt;code&gt;/src/&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Hardware&lt;/h3&gt;
&lt;p&gt;I bought a &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-2-model-b/&quot; rel=&quot;nofollow&quot;&gt;raspberry pi 2&lt;/a&gt; to run the software, and used a TTS engine (Google Tesseract) to read out the answer into an earpiece.&lt;/p&gt;
&lt;p&gt;I actually couldn't get the code to run fast enough on the raspberry pi to be useful (a single pass took about 30s). The bottleneck was opencv and tesseract (the only bits I couldn't optimize), so I ended up having to pipe the image over wifi to be processed by a laptop in a backpack. The code running on the rpi can be found in &lt;code&gt;./pi_interface.py&lt;/code&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 20 Sep 2018 20:41:15 +0000</pubDate>
<dc:creator>jamesough</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/29287994?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>tensor8/hacking_slot_machines</og:title>
<og:url>https://github.com/tensor8/hacking_slot_machines</og:url>
<og:description>Hacking slot machines. Contribute to tensor8/hacking_slot_machines development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/tensor8/hacking_slot_machines</dc:identifier>
</item>
<item>
<title>People Like You More Than You Know</title>
<link>https://blogs.scientificamerican.com/illusion-chasers/people-like-you-more-than-you-know/</link>
<guid isPermaLink="true" >https://blogs.scientificamerican.com/illusion-chasers/people-like-you-more-than-you-know/</guid>
<description>&lt;div class=&quot;mura-region mura-region-loose&quot;&gt;
&lt;div class=&quot;mura-region-local&quot;&gt;
&lt;p&gt;&lt;span&gt;As a young child, I was painfully shy. I’d watch other children at play in the park, wishing I could join their ranks for a game of tag, hide-and-seek, or jump rope, but too scared to approach them. Eventually, my mother would come to the rescue. She’d get up from the bench where she was sitting with the other moms, take my hand, and ask the other kids if I could play too. The answer was always yes (I’m sure the other children didn’t want to get in trouble with their own moms), and then I’d be all set for the rest of the afternoon… until the pattern repeated itself the next day. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I became less awkward and more outgoing as I grew up, thankfully—though I never turned into what you’d call a social butterfly. Today, I feel comfortable giving public lectures in large auditoriums, and having conversations in small groups, but I still tend to dodge situations in which I’m expected to ‘mingle’ with a roomful of strangers (I’m working on it).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The reasons for my aversion could be manifold. For one, I might be carrying some residual childhood fear of rejection. But beyond that possibility, one likely element is that I tend to underestimate how much people like me after I meet them. As most of us do.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;A new research paper, published last week in &lt;em&gt;&lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pubmed/30183512&quot;&gt;Psychological Science&lt;/a&gt;&lt;/em&gt;, reports that the common concern that new people may not like us, or that they may not enjoy our company, is largely unfounded.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Erica Boothby of Cornell University, and her colleagues Gus Cooney, Gilliam Sandstrom, and Margaret Clark, of Harvard University, University if Essex, and Yale University, conducted a series of studies to find out what our conversation partners really think of us. In doing so, they discovered a new cognitive illusion they call “the liking gap:” our failure to realize how much strangers appreciate our company after a bit of conversation.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The researchers observed the disconnect in a variety of situations: strangers getting acquainted in the research laboratory, first-year college students getting to know their dorm mates over the course of many months, and community members meeting fellow participants in personal development workshops. In each scenario, people consistently underestimated how much others liked them.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The discrepancy in perspectives happened for conversations that spanned from 2 minutes to 45 minutes, and was long-lasting. For much of the academic year, as dorm mates got to know each other and even started to develop enduring friendships, the liking gap persisted. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;The data also revealed some of the potential reasons for the divide: we are often harsher with ourselves than with others, and our inner critic prevents us from appreciating how positively other people evaluate us. Not knowing what our conversation partners really think of us, we use our own thoughts as a proxy—a mistake, because our thoughts tend to be more negative than reality.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;As the paper’s authors state, “conversations are a great source of happiness in our lives,” but they could bring us even greater joy if we only realized that “others like us more than we know.” Which is a good thing to keep in mind as you survey the imposing room of strangers at your next cocktail party, mix and mingle reception, or company happy hour. I know I’ll try to.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 20 Sep 2018 19:34:06 +0000</pubDate>
<dc:creator>ALee</dc:creator>
<og:type>article</og:type>
<og:title>People Like You More Than You Know</og:title>
<og:description>All it takes is a little conversation</og:description>
<og:image>https://static.scientificamerican.com/blogs/cache/file/82F2F04D-3BD3-4EAA-8E57B06B567B2EA8.png</og:image>
<og:url>https://blogs.scientificamerican.com/illusion-chasers/people-like-you-more-than-you-know/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blogs.scientificamerican.com/illusion-chasers/people-like-you-more-than-you-know/</dc:identifier>
</item>
<item>
<title>Titans of Mathematics Clash Over Epic Proof of ABC Conjecture</title>
<link>https://www.quantamagazine.org/titans-of-mathematics-clash-over-epic-proof-of-abc-conjecture-20180920/</link>
<guid isPermaLink="true" >https://www.quantamagazine.org/titans-of-mathematics-clash-over-epic-proof-of-abc-conjecture-20180920/</guid>
<description>&lt;p&gt;In a report &lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/~motizuki/SS2018-08.pdf&quot;&gt;posted online today&lt;/a&gt;, &lt;a href=&quot;http://www.math.uni-bonn.de/people/scholze/&quot;&gt;Peter Scholze&lt;/a&gt; of the University of Bonn and &lt;a href=&quot;https://www.math.uni-frankfurt.de/~stix/&quot;&gt;Jakob Stix&lt;/a&gt; of Goethe University Frankfurt describe what Stix calls a “serious, unfixable gap” within a &lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/~motizuki/Inter-universal%20Teichmuller%20Theory%20I.pdf&quot;&gt;mammoth&lt;/a&gt; &lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/~motizuki/Inter-universal%20Teichmuller%20Theory%20II.pdf&quot;&gt;series&lt;/a&gt; &lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/~motizuki/Inter-universal%20Teichmuller%20Theory%20III.pdf&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/~motizuki/Inter-universal%20Teichmuller%20Theory%20IV.pdf&quot;&gt;papers&lt;/a&gt; by &lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/~motizuki/top-english.html&quot;&gt;Shinichi Mochizuki&lt;/a&gt;, a mathematician at Kyoto University who is renowned for his brilliance. Posted online in 2012, Mochizuki’s papers supposedly prove the &lt;em&gt;abc&lt;/em&gt; conjecture, one of the most far-reaching problems in number theory.&lt;/p&gt;
&lt;p&gt;Despite multiple &lt;a href=&quot;https://www.quantamagazine.org/hope-rekindled-for-abc-proof-20151221/&quot;&gt;conferences dedicated to explicating Mochizuki’s proof&lt;/a&gt;, number theorists have struggled to come to grips with its underlying ideas. His series of papers, which total more than 500 pages, are written in an impenetrable style, and refer back to a further 500 pages or so of previous work by Mochizuki, creating what one mathematician, &lt;a href=&quot;http://math.stanford.edu/~conrad/&quot;&gt;Brian Conrad&lt;/a&gt; of Stanford University, &lt;a href=&quot;https://mathbabe.org/2015/12/15/notes-on-the-oxford-iut-workshop-by-brian-conrad/&quot;&gt;has called&lt;/a&gt; “a sense of infinite regress.”&lt;/p&gt;
&lt;p&gt;Between 12 and 18 mathematicians who have studied the proof in depth believe it is correct, wrote &lt;a href=&quot;https://www.maths.nottingham.ac.uk/personal/ibf/&quot;&gt;Ivan Fesenko&lt;/a&gt; of the University of Nottingham in an email. But only mathematicians in “Mochizuki’s orbit” have vouched for the proof’s correctness, Conrad &lt;a href=&quot;http://www.math.columbia.edu/~woit/wordpress/?p=9871&amp;amp;cpage=1#comments&quot;&gt;commented&lt;/a&gt; in a blog discussion last December. “There is nobody else out there who has been willing to say even off the record that they are confident the proof is complete.”&lt;/p&gt;
&lt;p&gt;Nevertheless, wrote &lt;a href=&quot;http://math.uchicago.edu/~fcale/research.html&quot;&gt;Frank Calegari&lt;/a&gt; of the University of Chicago in a December &lt;a href=&quot;https://galoisrepresentations.wordpress.com/2017/12/17/the-abc-conjecture-has-still-not-been-proved/&quot;&gt;blog post&lt;/a&gt;, “mathematicians are very loath to claim that there is a problem with Mochizuki’s argument because they can’t point to any definitive error.”&lt;/p&gt;
&lt;p&gt;That has now changed. In their report, Scholze and Stix argue that a line of reasoning near the end of the proof of “Corollary 3.12” in Mochizuki’s third of four papers is fundamentally flawed. The corollary is central to Mochizuki’s proposed &lt;em&gt;abc&lt;/em&gt; proof.&lt;/p&gt;
&lt;p&gt;“I think the &lt;em&gt;abc&lt;/em&gt; conjecture is still open,” Scholze said. “Anybody has a chance of proving it.”&lt;/p&gt;

Scholze and Stix’s conclusions are based not only on their own study of the papers but also on a weeklong visit they paid to Mochizuki and his colleague &lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/~yuichiro/index_e.html&quot;&gt;Yuichiro Hoshi&lt;/a&gt; in March at Kyoto University to discuss the proof. That visit helped enormously, Scholze said, in distilling his and Stix’s objections down to their essence. The pair “came to the conclusion that there is no proof,” they wrote in their report.
&lt;p&gt;But the meeting led to an oddly unsatisfying conclusion: Mochizuki couldn’t convince Scholze and Stix that his argument was sound, but they couldn’t convince him that it was unsound. Mochizuki has now posted Scholze’s and Stix’s report on his website, along with &lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/~motizuki/IUTch-discussions-2018-03.html&quot;&gt;several reports of his own in rebuttal&lt;/a&gt;. (Mochizuki and Hoshi did not respond to requests for comments for this article.)&lt;/p&gt;
&lt;p&gt;In his rebuttal, Mochizuki attributes Scholze and Stix’s criticism to “certain fundamental misunderstandings” about his work. Their “negative position,” he wrote, “does not imply the existence of any flaws whatsoever” in his theory.&lt;/p&gt;
&lt;p&gt;Just as Mochizuki’s high reputation made mathematicians view his work as a serious attempt on the &lt;em&gt;abc&lt;/em&gt; conjecture, Scholze and Stix’s stature guarantees that mathematicians will pay attention to what they have to say. Though only 30, Scholze has risen quickly to the top of his field. He was &lt;a href=&quot;https://www.quantamagazine.org/peter-scholze-becomes-one-of-the-youngest-fields-medalists-ever-20180801/&quot;&gt;awarded the Fields Medal&lt;/a&gt;, mathematics’ highest honor, in August. Stix, meanwhile, is an expert in Mochizuki’s particular area of research, a field known as anabelian geometry.&lt;/p&gt;
&lt;p&gt;“Peter and Jakob are extremely careful and thoughtful mathematicians,” Conrad said. “Any concerns that they have … definitely merit being cleared up.”&lt;/p&gt;
&lt;h2&gt;The Sticking Point&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;abc&lt;/em&gt; conjecture, which Conrad &lt;a href=&quot;https://mathbabe.org/2015/12/15/notes-on-the-oxford-iut-workshop-by-brian-conrad/&quot;&gt;has called&lt;/a&gt; “one of the outstanding conjectures in number theory,” starts with one of the simplest equations imaginable: &lt;em&gt;a&lt;/em&gt; + &lt;em&gt;b&lt;/em&gt; = &lt;em&gt;c&lt;/em&gt;. The three numbers &lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt; and &lt;em&gt;c&lt;/em&gt; are supposed to be positive integers, and they are not allowed to share any common prime factors — so, for example, we could consider the equation 8 + 9 = 17, or 5 + 16 = 21, but not 6 + 9 = 15, since 6, 9 and 15 are all divisible by 3.&lt;/p&gt;
&lt;p&gt;Given such an equation, we can look at all the primes that divide any of the three numbers — so, for instance, for the equation 5 + 16 = 21, our primes are 5, 2, 3 and 7. Multiplying these together produces 210, a much larger number than any of the numbers in the original equation. By contrast, for the equation 5 + 27 = 32, whose primes are 5, 3 and 2, the prime product is 30 — a smaller number than the 32 in the original equation. The product comes out so small because 27 and 32 have only small prime factors (3 and 2, respectively) that get repeated many times to make them.&lt;/p&gt;
&lt;p&gt;If you start playing around with other &lt;em&gt;abc&lt;/em&gt; triples, you’ll find that this second scenario is extremely rare. For example, among the 3,044 different triples you can make in which &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are between 1 and 100, there are only seven in which the product of primes is smaller than &lt;em&gt;c&lt;/em&gt;. The &lt;em&gt;abc&lt;/em&gt; conjecture, which was first formulated in the 1980s, codifies the intuition that this kind of triple hardly ever happens.&lt;/p&gt;
&lt;p&gt;More specifically, coming back to the 5 + 27 = 32 example, 32 is larger than 30, but only by a little. It’s smaller than 30&lt;sup&gt;2&lt;/sup&gt;, or 30&lt;sup&gt;1.5&lt;/sup&gt;, or even 30&lt;sup&gt;1.02&lt;/sup&gt;, which is about 32.11. The &lt;em&gt;abc&lt;/em&gt; conjecture says that if you pick any exponent bigger than 1, then there are only finitely many &lt;em&gt;abc&lt;/em&gt; triples in which &lt;em&gt;c&lt;/em&gt; is larger than the product of the prime factors raised to your chosen exponent.&lt;/p&gt;
&lt;p&gt;“The &lt;em&gt;abc&lt;/em&gt; conjecture is a very elementary statement about multiplication and addition,” said &lt;a href=&quot;http://people.maths.ox.ac.uk/kimm/&quot;&gt;Minhyong Kim&lt;/a&gt; of the University of Oxford. It’s the kind of statement, he said, where “you feel like you’re revealing some kind of very fundamental structure about number systems in general that you hadn’t seen before.”&lt;/p&gt;
&lt;p&gt;And the simplicity of the &lt;em&gt;a&lt;/em&gt; + &lt;em&gt;b&lt;/em&gt; = &lt;em&gt;c&lt;/em&gt; equation means that a wide range of other problems fall under the conjecture’s sway. For instance, Fermat’s Last Theorem is about equations of the form &lt;em&gt;x&lt;sup&gt;n&lt;/sup&gt;&lt;/em&gt; + &lt;em&gt;y&lt;sup&gt;n&lt;/sup&gt;&lt;/em&gt; = &lt;em&gt;z&lt;sup&gt;n&lt;/sup&gt;&lt;/em&gt;, and Catalan’s Conjecture, which says that 8 and 9 are the only two consecutive perfect powers (since 8 = 2&lt;sup&gt;3&lt;/sup&gt; and 9 = 3&lt;sup&gt;2&lt;/sup&gt;), is about the equation &lt;em&gt;x&lt;sup&gt;m&lt;/sup&gt;&lt;/em&gt; + 1 = &lt;em&gt;y&lt;sup&gt;n&lt;/sup&gt;&lt;/em&gt;. The &lt;em&gt;abc&lt;/em&gt; conjecture (in certain forms) would offer new proofs of these two theorems and solve a host of related open problems.&lt;/p&gt;

The conjecture “always seems to lie on the boundary of what is known and what is unknown,” &lt;a href=&quot;http://www.math.columbia.edu/~goldfeld/index.html&quot;&gt;Dorian Goldfeld&lt;/a&gt; of Columbia University &lt;a href=&quot;https://pdfs.semanticscholar.org/e10f/abaf419e185b1e2029e54783c110a86a5737.pdf&quot;&gt;has written&lt;/a&gt;.
&lt;p&gt;The wealth of consequences that would spring from a proof of the &lt;em&gt;abc&lt;/em&gt; conjecture had convinced number theorists that proving the conjecture was likely to be very hard. So when word spread in 2012 that Mochizuki had presented a proof, many number theorists dived enthusiastically into his work — only to be stymied by the unfamiliar language and unusual presentation. Definitions went on for pages, followed by theorems whose statements were similarly long, but whose proofs only said, essentially, “this follows immediately from the definitions.”&lt;/p&gt;
&lt;p&gt;“Each time I hear of an analysis of Mochizuki’s papers by an expert (off the record) the report is disturbingly familiar: vast fields of trivialities followed by an enormous cliff of unjustified conclusions,” Calegari &lt;a href=&quot;https://galoisrepresentations.wordpress.com/2017/12/17/the-abc-conjecture-has-still-not-been-proved/&quot;&gt;wrote&lt;/a&gt; in his December blog post.&lt;/p&gt;
&lt;p&gt;Scholze was one of the paper’s early readers. Known for his ability to absorb mathematics quickly and deeply, he got further than many number theorists, completing what he called a “rough reading” of the four main papers shortly after they came out. Scholze was bemused by the long theorems with their short proofs, which struck him as valid but insubstantial. In the two middle papers, he &lt;a href=&quot;https://galoisrepresentations.wordpress.com/2017/12/17/the-abc-conjecture-has-still-not-been-proved/&quot;&gt;later wrote&lt;/a&gt;, “very little seems to happen.”&lt;/p&gt;
&lt;p&gt;Then Scholze got to Corollary 3.12 in the third paper. Mathematicians usually use the word “corollary” to denote a theorem that is a secondary consequence of a previous, more important theorem. But in the case of Mochizuki’s Corollary 3.12, mathematicians agree that it is at the core of the proof of &lt;em&gt;abc&lt;/em&gt;. Without it, “there is no proof at all,” Calegari &lt;a href=&quot;https://galoisrepresentations.wordpress.com/2017/12/17/the-abc-conjecture-has-still-not-been-proved/&quot;&gt;wrote&lt;/a&gt;. “It is a critical step.”&lt;/p&gt;

This corollary is the only theorem in the two middle papers whose proof is longer than a few lines — it fills nine pages. As Scholze read through them, he reached a point where he couldn’t follow the logic at all.
&lt;p&gt;Scholze, who was only 24 at the time, believed the proof was flawed. But he mostly stayed out of discussions about the papers, except when asked directly for his thoughts. After all, he thought, perhaps other mathematicians would find significant ideas in the paper that he had missed. Or, perhaps, they would eventually come to the same conclusion as he had. One way or the other, he thought, the mathematics community would surely be able to sort things out.&lt;/p&gt;
&lt;h2&gt;Escher’s Staircase&lt;/h2&gt;
&lt;p&gt;Meanwhile, other mathematicians were grappling with the densely written papers. Many had high hopes for a &lt;a href=&quot;https://www.quantamagazine.org/hope-rekindled-for-abc-proof-20151221/&quot;&gt;meeting dedicated to Mochizuki’s work&lt;/a&gt; in late 2015 at the University of Oxford. But as several of Mochizuki’s close associates tried to describe the key ideas of the proof, a “cloud of fog” seemed to descend over the listeners, Conrad wrote in a &lt;a href=&quot;https://mathbabe.org/2015/12/15/notes-on-the-oxford-iut-workshop-by-brian-conrad/&quot;&gt;report&lt;/a&gt; shortly after the meeting. “Those who understand the work need to be more successful at communicating to arithmetic geometers what makes it tick,” he wrote.&lt;/p&gt;
&lt;p&gt;Within days of Conrad’s post, he received unsolicited emails from three different mathematicians (one of them Scholze), all with the same story: They had been able to read and understand the papers until they hit a particular part. “For each of these people, the proof that had stumped them was for 3.12,” Conrad &lt;a href=&quot;https://galoisrepresentations.wordpress.com/2017/12/17/the-abc-conjecture-has-still-not-been-proved/&quot;&gt;later wrote&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Kim heard similar concerns about Corollary 3.12 from another mathematician, &lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/en/list/koshikawa.html&quot;&gt;Teruhisa Koshikawa&lt;/a&gt;, currently at Kyoto University. And Stix, too, got perplexed in the same spot. Gradually, various number theorists became aware that this corollary was a sticking point, but it wasn’t clear whether the argument had a hole or Mochizuki simply needed to explain his reasoning better.&lt;/p&gt;
&lt;p&gt;Then in late 2017 a rumor spread, to the consternation of many number theorists, that Mochizuki’s papers had been accepted for publication. Mochizuki himself was the editor-in-chief of the journal in question, &lt;em&gt;&lt;a href=&quot;http://www.kurims.kyoto-u.ac.jp/~prims/index.html&quot;&gt;Publications of the Research Institute for Mathematical Sciences&lt;/a&gt;&lt;/em&gt;, an arrangement that Calegari called “&lt;a href=&quot;https://galoisrepresentations.wordpress.com/2017/12/17/the-abc-conjecture-has-still-not-been-proved/&quot;&gt;poor optics&lt;/a&gt;” (though editors generally recuse themselves in such situations). But much more concerning to many number theorists was the fact that the papers were still, as far as they were concerned, unreadable.&lt;/p&gt;

“No expert who claims to understand the arguments has succeeded in explaining them to any of the (very many) experts who remain mystified,” &lt;a href=&quot;http://www.math.uchicago.edu/~emerton/&quot;&gt;Matthew Emerton&lt;/a&gt; of the University of Chicago &lt;a href=&quot;http://www.math.columbia.edu/~woit/wordpress/?p=9871&amp;amp;cpage=1#comments&quot;&gt;wrote&lt;/a&gt;.
&lt;p&gt;Calegari wrote a &lt;a href=&quot;https://galoisrepresentations.wordpress.com/2017/12/17/the-abc-conjecture-has-still-not-been-proved/&quot;&gt;blog post&lt;/a&gt; decrying the situation as “a complete disaster,” to a chorus of amens from prominent number theorists. “We do now have the ridiculous situation where ABC is a theorem in Kyoto but a conjecture everywhere else,” Calegari wrote.&lt;/p&gt;
&lt;p&gt;PRIMS soon responded to press inquiries with a statement that the papers had not, in fact, been accepted. Before they had done so, however, Scholze resolved to state publicly what he had been saying privately to number theorists for some time. The whole discussion surrounding the proof had gotten “too sociological,” he decided. “Everybody was talking just about how this feels like it isn’t a proof, but nobody was actually saying, ‘Actually there is this point where nobody understands the proof.’”&lt;/p&gt;
&lt;p&gt;So in the comments section below Calegari’s blog post, Scholze wrote that he was “entirely unable to follow the logic after Figure 3.8 in the proof of Corollary 3.12.” He added that mathematicians “who do claim to understand the proof are unwilling to acknowledge that more must be said there.”&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://kuias.kyoto-u.ac.jp/e/profile/mori/&quot;&gt;Shigefumi Mori&lt;/a&gt;, Mochizuki’s colleague at Kyoto University and a winner of the Fields Medal, wrote to Scholze offering to facilitate a meeting between him and Mochizuki. Scholze in turn reached out to Stix, and in March the pair traveled to Kyoto to discuss the sticky proof with Mochizuki and Hoshi.&lt;/p&gt;
&lt;p&gt;Mochizuki’s approach to the &lt;em&gt;abc&lt;/em&gt; conjecture translates the problem into a question about &lt;a href=&quot;https://www.quantamagazine.org/tag/elliptic-curves/&quot;&gt;elliptic curves&lt;/a&gt;, a special type of cubic equation in two variables, &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;. The translation, which was well known before Mochizuki’s work, is simple — you associate each &lt;em&gt;abc&lt;/em&gt; equation with the elliptic curve whose graph crosses the &lt;em&gt;x&lt;/em&gt;-axis at &lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt; and the origin — but it allows mathematicians to exploit the rich structure of elliptic curves, which connect number theory to geometry, calculus and other subjects. (This same translation is at the heart of &lt;a href=&quot;http://www.jstor.org/stable/2118559?origin=crossref&amp;amp;seq=1#page_scan_tab_contents&quot;&gt;Andrew Wiles’ 1994 proof&lt;/a&gt; of Fermat’s Last Theorem.)&lt;/p&gt;

The &lt;em&gt;abc&lt;/em&gt; conjecture then boils down to proving a certain inequality between two quantities associated with the elliptic curve. Mochizuki’s work translates this inequality into yet another form, which, Stix said, can be thought of as comparing the volumes of two sets. Corollary 3.12 is where Mochizuki presents his proof of this new inequality, which, if true, would prove the &lt;em&gt;abc&lt;/em&gt; conjecture.
&lt;p&gt;The proof, as Scholze and Stix describe it, involves viewing the volumes of the two sets as living inside two different copies of the real numbers, which are then represented as part of a circle of six different copies of the real numbers, together with mappings that explain how each copy relates to its neighbors along the circle. To keep track of how the volumes of sets relate to one another, it’s necessary to understand how volume measurements in one copy relate to measurements in the other copies, Stix said.&lt;/p&gt;
&lt;p&gt;“If you have an inequality of two things but the measuring stick is sort of shrunk by a factor which you don’t control, then you lose control over what the inequality actually means,” Stix said.&lt;/p&gt;
&lt;p&gt;It is at this crucial spot in the argument that things go wrong, Scholze and Stix believe. In Mochizuki’s mappings, the measuring sticks are locally compatible with one another. But when you go around the circle, Stix said, you end up with a measuring stick that looks different from if you had gone around the other way. The situation, he said, is akin to Escher’s famous winding staircase, which climbs and climbs only to somehow end up below where it started.&lt;/p&gt;
&lt;p&gt;This incompatibility in the volume measurements means that the resulting inequality is between the wrong quantities, Scholze and Stix assert. And if you adjust things so the volume measurements are globally compatible, then the inequality becomes meaningless, they say.&lt;/p&gt;
&lt;p&gt;Scholze and Stix have “identified a way that the argument can’t possibly work,” said &lt;a href=&quot;https://math.ucsd.edu/~kedlaya/&quot;&gt;Kiran Kedlaya&lt;/a&gt;, a mathematician at the University of California, San Diego, who has studied Mochizuki’s papers in depth. “So if the argument is to be correct, it has to do something different, and something a lot more subtle” than what Scholze and Stix describe.&lt;/p&gt;
&lt;p&gt;Something more subtle is exactly what the proof does, Mochizuki contends. Scholze and Stix err, he wrote, in making arbitrary identifications between mathematical objects that should be regarded as distinct. When he told colleagues the nature of Scholze and Stix’s objections, he wrote, his descriptions “were met with a remarkably unanimous response of utter astonishment and even disbelief (at times accompanied by bouts of laughter!) that such manifestly erroneous misunderstandings could have occurred.”&lt;/p&gt;
&lt;p&gt;Mathematicians will now have to absorb Scholze and Stix’s argument and Mochizuki’s response. But Scholze hopes that, in contrast with the situation for Mochizuki’s original series of papers, this should not be a protracted process, since the gist of his and Stix’s objection is not highly technical. Other number theorists “would have totally been able to follow the discussions that we had had this week with Mochizuki,” he said.&lt;/p&gt;

Mochizuki sees things very differently. In his view, Scholze and Stix’s criticism stems from a “lack of sufficient time to reflect deeply on the mathematics under discussion,” perhaps coupled with “a deep sense of discomfort, or unfamiliarity, with new ways of thinking about familiar mathematical objects.”
&lt;p&gt;Mathematicians who are already skeptical of Mochizuki’s &lt;em&gt;abc&lt;/em&gt; proof may well consider Scholze and Stix’s report the end of the story, said Kim. Others will want to study the new reports for themselves, an activity that Kim himself has commenced. “I don’t think I can completely avoid the need to check more carefully for myself before making up my mind,” he wrote in an email.&lt;/p&gt;
&lt;p&gt;In the past couple of years, many number theorists have given up on trying to understand Mochizuki’s papers. But if Mochizuki or his followers can provide a thorough and coherent explanation for why Scholze and Stix’s picture is too simplistic (assuming that it is), “this might go a long way towards relieving some of the fatigue and maybe giving people more willingness to look into this thing again,” Kedlaya said.&lt;/p&gt;
&lt;p&gt;In the meantime, Scholze said, “I think this should not be considered a proof until Mochizuki does some very substantial revisions and explains this key step much better.” Personally, he said, “I didn’t really see a key idea that would get us closer to the proof of the &lt;em&gt;abc&lt;/em&gt; conjecture.”&lt;/p&gt;
&lt;p&gt;Regardless of the eventual outcome of this discussion, the pinpointing of such a specific part of Mochizuki’s argument should lead to greater clarity, Kim said. “What Jakob and Peter have done is an important service to the community,” he said. “Whatever happens, I’m pretty confident that the reports will be progress of a definite sort.”&lt;/p&gt;
</description>
<pubDate>Thu, 20 Sep 2018 19:00:58 +0000</pubDate>
<dc:creator>digital55</dc:creator>
<og:title>Titans of Mathematics Clash Over Epic Proof of ABC Conjecture | Quanta Magazine</og:title>
<og:type>article</og:type>
<og:url>https://www.quantamagazine.org/titans-of-mathematics-clash-over-epic-proof-of-abc-conjecture-20180920/</og:url>
<og:image>https://d2r55xnwy6nx47.cloudfront.net/uploads/2018/08/ABC_Conjecture_1200_Social.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.quantamagazine.org/titans-of-mathematics-clash-over-epic-proof-of-abc-conjecture-20180920/</dc:identifier>
</item>
<item>
<title>Introducing the Librem Key</title>
<link>https://puri.sm/posts/introducing-the-librem-key/</link>
<guid isPermaLink="true" >https://puri.sm/posts/introducing-the-librem-key/</guid>
<description>&lt;div class=&quot;abh_box abh_box_up abh_box_business&quot;&gt;
&lt;div class=&quot;abh_tab_content&quot;&gt;
&lt;section class=&quot;vcard abh_about_tab abh_tab&quot;&gt;&lt;div class=&quot;abh_image&quot;&gt;&lt;a href=&quot;https://puri.sm/posts/author/kyle-rankin/&quot; class=&quot;url&quot; title=&quot;Kyle Rankin&quot;&gt;&lt;img src=&quot;https://puri.sm/wp-content/uploads/gravatar/kyle%20rankin%20posts.jpg&quot; class=&quot;photo&quot; width=&quot;80&quot; alt=&quot;Kyle Rankin&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;div class=&quot;abh_text&quot;&gt;
&lt;h3 class=&quot;fn name&quot;&gt;&lt;a href=&quot;https://puri.sm/posts/author/kyle-rankin/&quot; class=&quot;url&quot;&gt;Kyle Rankin&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;description note abh_description&quot;&gt;Chief Security Officer&lt;br/&gt;PGP ID: 0xBD83B92B2F4BFD99&lt;br/&gt;Fingerprint: 7B85 0961 8D82 0DF6 39241BB6 BD83 B92B 2F4B FD99&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section class=&quot;abh_posts_tab abh_tab&quot;&gt;&lt;div class=&quot;abh_image&quot;&gt;&lt;a href=&quot;https://puri.sm/posts/author/kyle-rankin/&quot; class=&quot;url&quot; title=&quot;Kyle Rankin&quot;&gt;&lt;img src=&quot;https://puri.sm/wp-content/uploads/gravatar/kyle%20rankin%20posts.jpg&quot; class=&quot;photo&quot; width=&quot;80&quot; alt=&quot;Kyle Rankin&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;div class=&quot;abh_text&quot;&gt;
&lt;h4&gt;Latest posts by Kyle Rankin &lt;span class=&quot;abh_allposts&quot;&gt;(&lt;a href=&quot;https://puri.sm/posts/author/kyle-rankin/&quot;&gt;see all&lt;/a&gt;)&lt;/span&gt;&lt;/h4&gt;

&lt;/div&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A few months ago we announced that &lt;a href=&quot;https://puri.sm/posts/purism-and-nitrokey-partner-to-build-purekey-for-purisms-librem-laptops/&quot;&gt;we were partnering with Nitrokey to produce a new security token: the Librem Key&lt;/a&gt; and I’m pleased to announce that today the Librem Key is &lt;a href=&quot;https://puri.sm/products/librem-key&quot;&gt;available for purchase on our site&lt;/a&gt; for $59.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-58984&quot; src=&quot;https://puri.sm/wp-content/uploads/2018/09/librem-key-shadow-bg.png&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;540&quot; srcset=&quot;https://puri.sm/wp-content/uploads/2018/09/librem-key-shadow-bg.png 960w, https://puri.sm/wp-content/uploads/2018/09/librem-key-shadow-bg-300x169.png 300w, https://puri.sm/wp-content/uploads/2018/09/librem-key-shadow-bg-768x432.png 768w, https://puri.sm/wp-content/uploads/2018/09/librem-key-shadow-bg-600x338.png 600w&quot; sizes=&quot;(max-width: 960px) 100vw, 960px&quot;/&gt;&lt;/p&gt;

&lt;p&gt;In case you haven’t heard of USB security tokens before, they are devices typically about the size of a USB thumb drive that can act as “something you have” for multi-factor authentication. With so many attacks on password logins, most security experts these days recommend adding a second form of authentication (often referred to as “2FA” or “multi-factor authentication”) in addition to your password so that if your password gets compromised the attacker still has to compromise your second factor. USB security tokens work well as this second factor because they are “something you have” instead of “something you know” like a password is, and because they are portable enough you can just keep them in your pocket, purse, or keychain and use them only when you need to login to a secure site.&lt;/p&gt;
&lt;p&gt;In addition to multi-factor authentication, security tokens can also often store your private GPG keys in a tamper-proof way so you can protect them from attackers who may compromise your laptop. With your private keys on the security token, you can just insert the key when you need to encrypt, decrypt, sign, or authenticate and then type in your PIN to unlock the key. Since your private keys stay on the security token, even if an attacker compromises your computer, they can’t copy your keys (and even if you leave the key plugged in, they need to know your PIN to use it).&lt;/p&gt;

&lt;p&gt;There are many other vendors out there who offer their own security tokens, so why make our own? The first reason is that few security tokens out on the market align with our values here at Purism, in particular with respect to freedom. I’ve explained in a previous post &lt;a href=&quot;https://puri.sm/posts/why-freedom-is-essential-to-security-and-privacy/&quot;&gt;why freedom is essential to security and privacy&lt;/a&gt; and this is especially true for a device that is holding some of your most sensitive secrets. We wanted a security token that used open hardware, free software firmware, and free software user applications and that is why we partnered with Nitrokey to produce a security token that respected your freedom from the beginning.&lt;/p&gt;
&lt;p&gt;We also wanted to make the Librem Key because of all of the integration possibilities with our existing products that would make customers more secure in a way that’s also more convenient. When you can bundle a security token with your own laptop and operating system, there are so many interesting possibilities, especially when the firmware and user applications are free software so we can easily modify them to add even more features.&lt;/p&gt;
&lt;p&gt;In addition to the standard features of a security token (GPG key storage and multi-factor authentication) that the Librem Key can perform on any computer, here are some of the interesting integration options with our Librem laptops we are already looking into with the Librem Key that will make security much more convenient for users who are facing average threats:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Insert the Librem Key at boot and automatically decrypt your hard drive&lt;/li&gt;
&lt;li&gt;Automatically lock your laptop whenever you remove the Librem Key&lt;/li&gt;
&lt;li&gt;Use your Librem Key to log in&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the &lt;em&gt;most&lt;/em&gt; exciting opportunities the Librem Key opens up to us is in integrating with our &lt;a href=&quot;https://puri.sm/posts/demonstrating-tamper-detection-with-heads/&quot;&gt;tamper-evident Heads BIOS&lt;/a&gt; to provide cutting-edge tamper-evident security but in a convenient package that &lt;strong&gt;doesn’t exist anywhere else&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Currently with Heads, when you want to prove that the BIOS hasn’t been tampered with, you need to set up a TOTP application on your phone and scan a QR code from within Heads. Then at each boot you compare the 6-digit code Heads displays on the screen with the code in your phone. If the codes match, the BIOS is safe. This method works but is a bit cumbersome and with the Librem Key we can do better.&lt;/p&gt;
&lt;p&gt;We have worked with Nitrokey to add a custom feature to our Librem Key firmware specifically for Heads. This custom firmware along with a userspace application allows us to store the shared secret from the TPM on the Librem Key instead of on a phone app. Then when Heads boots, if the BIOS hasn’t been tampered with the TPM will unlock its copy of the shared secret, and Heads will send the 6-digit code over to the Librem Key. If the code matches what the Librem Key itself generated, it flashes a green light. If the codes don’t match, it flashes a red light.&lt;/p&gt;
&lt;p&gt;So if you are concerned about someone tampering with your computer when you aren’t around, just boot with the Librem Key inserted. If it blinks green you are safe, if it blinks red you’ve been tampered with. &lt;strong&gt;There is no other product on the market today&lt;/strong&gt; that offers this kind of simple but strong tamper-evident protection, much less one that respects your freedom where the keys are fully in your control.&lt;/p&gt;
&lt;h2&gt;Even Stronger Anti-Interdiction Protection&lt;/h2&gt;
&lt;p&gt;The Librem Key opens up possibilities for even stronger anti-interdiction protection for customers who need it. We will be able to link a Librem Key with a laptop running Heads at our facility and then ship them separately. Then when each package arrives you can immediately test for tampering with an easy “green is good, red is bad” test.&lt;/p&gt;

&lt;p&gt;Many companies have already incorporated 3rd party security tokens into their engineering teams as a way for software engineers to sign their code pushes securely or as convenient multi-factor token. The Librem Key offers enterprises a way to combine all of the other features they are used to with other security tokens along with our cutting-edge tamper-evident boot process on our Librem laptops in an easy and convenient package where all of the keys are fully under their control.&lt;/p&gt;
&lt;p&gt;Since the firmware and userspace tools are free software, that means enterprises can also easily customize these tools to suit their own internal policies whether with their own software teams or by working with Purism. That could mean anything from providing a customized error page to employees when Heads detects tampering to actively preventing employees from booting a tampered-with machine.&lt;/p&gt;

&lt;p&gt;Knowing that our customers have a secure and freedom-respecting security token opens up all sorts of other possibilities and today we are only scratching the surface on what we will be able to do with Librem Key both for new customers and those that have been with us from the beginning. Stay tuned for future posts where I will dive deeper into some of the Librem Key’s features and explain how to get the most out of it. In the mean time you can order your own Librem Key from the &lt;a href=&quot;https://puri.sm/products/librem-key&quot;&gt;Librem Key product page&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Thu, 20 Sep 2018 16:09:26 +0000</pubDate>
<dc:creator>abrowne</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://puri.sm/posts/introducing-the-librem-key/</dc:identifier>
</item>
<item>
<title>Becoming a Better Software Developer: A Handbook on Personal Performance</title>
<link>https://www.7pace.com/blog/become-a-better-programmer-skills-development</link>
<guid isPermaLink="true" >https://www.7pace.com/blog/become-a-better-programmer-skills-development</guid>
<description>&lt;div class=&quot;shapely-content&quot;&gt;
&lt;p&gt;There’s a big difference between &lt;em&gt;writing code&lt;/em&gt; and &lt;em&gt;being a great programmer&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Writing code is the output–and almost anyone can learn the basics of syntax and formatting. But what makes someone a skilled developer? It’s much more than just understanding the basics, of course. It’s mastery of the fundamental concepts and logic that make one capable. But, in order to be great, there must also be a way to measure, evaluate, and improve that performance.&lt;/p&gt;
&lt;p&gt;While there are a plethora of ways to learn the basics of coding, developing the supporting skills can sometimes be much more difficult. There’s no simple online course that can teach you how to better collaborate with your team.&lt;/p&gt;
&lt;p&gt;And there’s no single way to improve your own cognitive or problem-solving abilities.&lt;/p&gt;
&lt;p&gt;So, how exactly do developers go from capable to good? From good to great?&lt;/p&gt;
&lt;p&gt;This handbook is meant to be a guide to developer performance–how to understand it, measure it, and improve it.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Our Microsoft ALM Ranger Lineup&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;For help with this, we reached out to the &lt;a href=&quot;https://blogs.msdn.microsoft.com/visualstudioalmrangers/2015/04/22/introducing-the-team-aka-msvsarindex/&quot;&gt;Microsoft ALM Rangers&lt;/a&gt; to get their insight on developer performance, measurement, and growth.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Gerson Dias, Consultant at Lambda 3&lt;/li&gt;
&lt;li&gt;Etienne “ET” Tremblay, Senior ALM Consultant at Imaginet&lt;/li&gt;
&lt;li&gt;Ken Muse, Consulting Director at Wintellect&lt;/li&gt;
&lt;li&gt;Niel Zeeman, Owner at Team Foundation Consulting&lt;/li&gt;
&lt;li&gt;Richard Hundhausen, Professional Scrum Trainer at Accentient&lt;/li&gt;
&lt;li&gt;Josh Garverick, Senior Cloud Architect at Willis Towers Watson&lt;/li&gt;
&lt;li&gt;Jesse Houwing, Trainer, Coach, and Tinkerer at Xpirit&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;strong&gt;Chapter 1: Mindset&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The well-known &lt;a href=&quot;http://www.businessinsider.com/malcolm-gladwell-explains-the-10000-hour-rule-2014-6&quot;&gt;10,000-hour principle&lt;/a&gt;, popularized by Malcolm Gladwell, illustrates an important lesson for developers. (For those not familiar, the rule states that it takes 10,000 hours of deliberate practice in order to become world-class at any particular skill or activity.)&lt;/p&gt;
&lt;p&gt;It takes extreme dedication to become a master at &lt;em&gt;anything&lt;/em&gt;–and programming is no different.&lt;/p&gt;
&lt;p&gt;Sure, there are some innate abilities that may give certain programmers an advantage over their peers. And others may struggle to grasp the basics. But, the barrier for most engineers looking to go from good to great is not genetics or luck.&lt;/p&gt;
&lt;p&gt;It’s dedication–it’s passion.&lt;/p&gt;
&lt;p&gt;In order to become a “rockstar” engineer (cringe), one must not only be smart and capable. You have to want it. You have to be willing to dedicate a whole heap of time and energy into becoming masterful.&lt;/p&gt;
&lt;p&gt;Gerson Dias shares his thoughts. “Knowledge and experience come with time, and raw talent is nothing without passion,” he says.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“If you have passion for what you are doing, you will be productive and have excellent performance, because you are putting your energy [into it]. Of course, it’s tough to find a job that you can say, ‘I really like to build that!’ But is important to have your ‘spiritual bindings,’ even to think, ‘Okay, I hate this, but while nothing better comes, I’ll do it because [I need to support] my family and my skills will improve.’”&lt;br/&gt;&lt;/em&gt;-Gerson Dias&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And you must be deliberate in your approach. No one becomes an accidental master of anything. It takes focused effort and a clear vision for what it is that you want to accomplish.&lt;/p&gt;
&lt;p&gt;Then it takes a plan for how to achieve that mark.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-4619&quot; src=&quot;https://www.7pace.com/blog/wp-content/uploads/2018/09/bell-graph-1.png&quot; alt=&quot;&quot; width=&quot;848&quot; height=&quot;505&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Now, this isn’t to say that it’s all-or-nothing. There’s ground to be gained for programmers at all levels–from novice to experts. And it doesn’t take 10,000 hours just to move the needle a little bit. But it’s important to understand the fundamental gap that exists between the majority and the truly extraordinary.&lt;/p&gt;
&lt;p&gt;Beyond just dedication and passion to the craft, the &lt;a href=&quot;http://connect.blogs.xerox.com/2015/08/27/8-essential-components-to-the-engineers-mindset/&quot;&gt;engineering mindset&lt;/a&gt; is also a hallmark of those who are successful at problem solving of all types.&lt;/p&gt;
&lt;p&gt;This is typically defined by its 8 main characteristics.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-4611&quot; src=&quot;https://www.7pace.com/blog/wp-content/uploads/2018/09/mindset-graph.png&quot; alt=&quot;&quot; width=&quot;848&quot; height=&quot;505&quot;/&gt;&lt;/p&gt;
&lt;p&gt;While some developers may be predisposed to have these characteristics, that doesn’t mean that the engineering mindset is entirely predetermined. It can be learned and consciously developed over time.&lt;/p&gt;
&lt;p&gt;In order to develop your ability to evaluate and solve problems, you need a way to measure and assess that performance.&lt;/p&gt;
&lt;p&gt;Otherwise, how do you know if you’ve improved?&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Chapter 2: Measuring Performance&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Before we talk about &lt;em&gt;how to improve&lt;/em&gt;, we need to define what improvement means.&lt;/p&gt;
&lt;p&gt;What makes someone a good developer in the first place?&lt;/p&gt;
&lt;p&gt;Almost every one of the people I spoke to for this guide agreed that performance is both &lt;em&gt;subjective&lt;/em&gt; and &lt;em&gt;relative&lt;/em&gt;. This means that there is no single, definitive way to measure performance (there are a lot of ways &lt;em&gt;not&lt;/em&gt; to measure it, but that’s not helpful) and that there is no static scale by which you can compare performance between two developers or teams.&lt;/p&gt;
&lt;p&gt;In other words: &lt;strong&gt;&lt;em&gt;The best way to assess a developer’s performance is to measure their growth over time.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“&lt;em&gt;Measuring your ability is about reflecting on each release and trying to find ways that you can be more efficient and effective going forward,&lt;/em&gt;” Ken Muse explained. “&lt;em&gt;If your continuously evaluating your progress and making changes, then your performance will improve.&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;If you want to become a better runner, what would you do?&lt;/p&gt;
&lt;p&gt;You probably begin by setting a goal and developing a plan. But, how do you know if you’re making progress toward your goal?&lt;/p&gt;
&lt;p&gt;You measure your abilities.&lt;/p&gt;
&lt;p&gt;You time your runs, track your distance, and compare your speed. The same applies here.&lt;/p&gt;
&lt;p&gt;Whether it’s the number of story points completed within an iteration or the quality of code written–it should be measured as a continuous trend over a defined period. If your score was 10, than your goal should be 11.&lt;/p&gt;
&lt;p&gt;As with running, the process is this:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Define a way to measure your performance&lt;/li&gt;
&lt;li&gt;Measure your performance&lt;/li&gt;
&lt;li&gt;Set a goal&lt;/li&gt;
&lt;li&gt;Continue to measure and compare performance over time&lt;/li&gt;
&lt;li&gt;Identify and test new strategies for improving performance&lt;/li&gt;
&lt;li&gt;Once you’ve reached your goal, repeat&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;em&gt;Are you becoming objectively better, quicker, or more efficient?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is the main reason we advocate for &lt;a href=&quot;https://www.7pace.com/blog/software-teams-time-tracking&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;time tracking across software teams&lt;/a&gt;. Not because it’s a great way to whip developers into shape and make sure they’re hitting their arbitrary quotas, but because it gives developers themselves–&lt;em&gt;individuals&lt;/em&gt;–a simple and universal way to measure and compare their own abilities.&lt;/p&gt;
&lt;p&gt;Muse summed it up by saying, “&lt;em&gt;Understanding the time it takes to complete a development cycle and refining those cycles can be a valuable way for a teams to collectively and individually improve.&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;If it took you 50 hours of work to complete 12 story points last month, then your goal should be accomplish that same amount of work in less time for this month.&lt;/p&gt;
&lt;p&gt;Admittedly, many people I spoke with for this guide did not advocate for time tracking. And how many companies have implemented time tracking is not a good way to help developers manage their own time and abilities.&lt;/p&gt;
&lt;p&gt;Certainly, it’s fair to say that using time as a measurement of performance is not right in every scenario.&lt;/p&gt;
&lt;p&gt;But, no matter what benchmark you use, you need to define a KPI–an objective and consistent way to measure and evaluate &lt;em&gt;your own&lt;/em&gt; performance as a developer. Which metric(s) you use is ultimately up to you, but just decide on ones that can be easily and consistently measured and compared.&lt;/p&gt;
&lt;p&gt;Richard Hundhausen explained his thinking on this topic. “&lt;em&gt;If the team decides (without any outside influence) that they want to track time for whatever reason (again, not because someone or some policy outside the team requires it), then they should do it,”&lt;/em&gt; he wrote in an email. &lt;em&gt;“Because one of the rules in Scrum is to let the team decide how they want to work.”&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Chapter 3: Mastering the Fundamentals&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Understanding the fundamentals of any particular skill is the most essential step toward mastery.&lt;/p&gt;
&lt;p&gt;Consider the game of chess. Before someone can become a Grandmaster, they must first understand the underlying principles of the game. Not only do they need to know how the bishop moves across the board, but also understand openings, positions, and tactics.&lt;/p&gt;
&lt;p&gt;For developers, there are two categories of fundamentals that are critical to mastery:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Engineering fundamentals&lt;/li&gt;
&lt;li&gt;Language/framework fundamentals&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The first set is universal for nearly all types of programming. It’s about understanding the underlying structures, processes, and frameworks for effective programming.&lt;/p&gt;
&lt;p&gt;In the second set, we look more to specialized fundamentals–specifics to certain languages or frameworks that are being used within a certain context. Programmers may not be experts at all languages or frameworks, but having a solid foundation can often make it easier to pick up new technologies.&lt;/p&gt;
&lt;p&gt;For our purposes, we want to focus on the engineering fundamentals.&lt;/p&gt;
&lt;p&gt;What does that include?&lt;/p&gt;
&lt;p&gt;Things like:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Algorithms&lt;/li&gt;
&lt;li&gt;Abstraction&lt;/li&gt;
&lt;li&gt;Isolation&lt;/li&gt;
&lt;li&gt;Databases&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Although these &lt;em&gt;look&lt;/em&gt; different in different languages/frameworks/paradigms, the fundamental logic is relatively static.&lt;/p&gt;
&lt;p&gt;It may be tempting to think that if you are already capable of writing functional code that you must already know the fundamentals. But, do you really understand all of the underlying science?&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-4613&quot; src=&quot;https://www.7pace.com/blog/wp-content/uploads/2018/09/I-have-no-idea.png&quot; alt=&quot;&quot; width=&quot;619&quot; height=&quot;236&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I can build a pendulum in my garage. But, that doesn’t mean that I understand the physics.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Even competent engineers sometimes lack a true understanding of why and how things work in gory detail–they just know which keys to press in which order to make it happen. The interesting paradox is that these fundamentals actually become &lt;em&gt;more important&lt;/em&gt; later in your career and as your work becomes more complex and further from the basics of writing and understanding code on a screen.&lt;/p&gt;
&lt;p&gt;This means that many developers go years–even decades–without truly understanding the fundamentals.&lt;/p&gt;
&lt;p&gt;But, eventually, they hit a wall.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-4612&quot; src=&quot;https://www.7pace.com/blog/wp-content/uploads/2018/09/fundaments-graph.png&quot; alt=&quot;&quot; width=&quot;848&quot; height=&quot;505&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As problems become more complex–as you attempt to grow and become a better engineer–you must master these fundamental concepts.&lt;/p&gt;
&lt;p&gt;Otherwise, they will eventually become a barrier to your development. So you need to be deliberate about dedicating time to this basic part of the craft. As with anything, this means carving out time for deliberate and focused effort–training.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Chapter 4: Exercises for Improvement&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Fundamentals are–well–fundamental.&lt;/p&gt;
&lt;p&gt;But, knowing the underlying components of programming != being a good engineer.&lt;/p&gt;
&lt;p&gt;“I think we are in an industry of continuous learning and if you are not learning then you’re not going to be performant,” said Etienne Tremblay. “I think if they can genuinely say they learnt something (not superficially) then they should be happy about it.”&lt;/p&gt;
&lt;p&gt;Programming is fundamentally a problem-solving exercise. It’s about taking in data, understanding context, and formulating the best possible solution. Probably the most important part of developing any problem-solving ability is repetition and pattern recognition.&lt;/p&gt;
&lt;p&gt;It takes practice.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Learn, learn, learn. Read books, try new things, fail and try again. Stay abreast of the latest technology, watch conference videos (they are free). I can’t stress enough how things change so fast in our industry if you are not learning you’ll be left behind.”&lt;br/&gt;&lt;/em&gt;– Etienne Tremblay&lt;em&gt;&lt;br/&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The more use cases you encounter, the more context you have for how to solve each subsequent problem. You’ve seen more problems and developed more solutions, which gives you a greater pool of knowledge to draw from in the future.&lt;/p&gt;
&lt;p&gt;So how can developers apply this mechanic to improve their individual abilities?&lt;/p&gt;
&lt;h3&gt;Practice diffuse and focused thinking&lt;/h3&gt;
&lt;p&gt;It may seem improbable that you can somehow train your brain to be a better engineer.&lt;/p&gt;
&lt;p&gt;But there may be some scientifically backed ways to accomplish it.&lt;/p&gt;
&lt;p&gt;One is to simply practice the &lt;em&gt;kinds&lt;/em&gt; of thinking that are important to problem solving. And, maybe more importantly, practicing our ability to switch between these types of thinking in order to better and more easily discover solutions.&lt;/p&gt;
&lt;p&gt;In general, we have two kinds of thinking that are deployed when solving problems or learning new things.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Focused thinking&lt;/li&gt;
&lt;li&gt;Diffuse thinking&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;With focused thinking, we concentrate on a particular problem or question and actively try to come to a solution. With diffuse thinking, we let the idea incubate in sort of a latent or passive thinking mode–we’re not actively concentrating on it, but it remains somewhere in the back of our minds and we continue to look for solutions or patterns.&lt;/p&gt;
&lt;p&gt;When it comes to improving your abilities as a developer, it turns out that &lt;a href=&quot;https://www.brainscape.com/blog/2016/08/better-learning-focused-vs-diffuse-thinking/&quot;&gt;both of these types of thinking are important&lt;/a&gt;. Some problems can be solved through sheer will and concentration; but others may just require more time and contemplation.&lt;/p&gt;
&lt;p&gt;Practicing this is pretty simple, actually.&lt;/p&gt;
&lt;p&gt;You can easily alternate between the two types of thinking.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-4614&quot; src=&quot;https://www.7pace.com/blog/wp-content/uploads/2018/09/problem-solve-graph.png&quot; alt=&quot;&quot; width=&quot;848&quot; height=&quot;505&quot;/&gt;&lt;/p&gt;
&lt;p&gt;First: Start by focusing deeply on something you are trying to do or solve.&lt;/p&gt;
&lt;p&gt;Spend some time turning it over and thinking through different solutions. Focus closely on the problem, examine its different elements and weigh different options and considerations.&lt;/p&gt;
&lt;p&gt;Then, after you’ve internalized the idea and the context, &lt;em&gt;go and do something else&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let the question remain in the back of your head, but take on another task that will take your mind off of it and allow you to deploy diffuse thinking.&lt;/p&gt;
&lt;p&gt;This simple, two-step cycle is a fundamental process for problem solving. And, even if you don’t know it, you will often apply the same kind of system when trying to solve problems throughout your career. We often call this “incubating” a solution or taking a break from the problem at hand.&lt;/p&gt;
&lt;p&gt;Either way, it’s a practiced strategy. Apply it to different problems you are trying to solve, strengthen your ability, and solidify it as a go-to approach for solving difficult problems.&lt;/p&gt;
&lt;h3&gt;Create side projects&lt;/h3&gt;
&lt;p&gt;Not only are side projects often an indicator of passion and drive, but they have some broader benefits for you as a developer.&lt;/p&gt;
&lt;p&gt;Latish Sehgal wrote an article &lt;a href=&quot;https://simpleprogrammer.com/side-projects/&quot;&gt;explaining the importance of side projects&lt;/a&gt;. He outlines these benefits:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Teaches you to add value (not just write code)&lt;/li&gt;
&lt;li&gt;Pushes you to take action&lt;/li&gt;
&lt;li&gt;Improves focus&lt;/li&gt;
&lt;li&gt;Rewards perseverance&lt;/li&gt;
&lt;li&gt;Makes you more empathetic&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The major difference for side projects versus a day job is that you are exposed to more perspectives.&lt;/p&gt;
&lt;p&gt;Rather than simply being a developer as part of a team, you become a project manager, a CTO, and perhaps a CEO as well.&lt;/p&gt;
&lt;p&gt;Wearing these different hats–and without any external pressure–you’re able to better grasp the context of projects and products. You step outside of your role to understand the bigger picture and use that to make better decisions.&lt;/p&gt;
&lt;h3&gt;Read other people’s code&lt;/h3&gt;
&lt;p&gt;Can you imagine that authors like Hemingway or Steinbeck would have been great if they had not read the works of other great authors before them?&lt;/p&gt;
&lt;p&gt;Of course not.&lt;/p&gt;
&lt;p&gt;We learn and grow, in large part, by consuming the work of others.&lt;/p&gt;
&lt;p&gt;While it can sometimes feel a bit &lt;em&gt;abstract&lt;/em&gt; to consider your work outside of the context in which you created it, analyzing another person’s work gives you the chance to step outside of the code and try to deconstruct and understand the thinking in a new way.&lt;/p&gt;
&lt;p&gt;Make a habit of partnering with different team members to review or analyze each others work.&lt;/p&gt;
&lt;p&gt;You don’t need to make it a formal process, necessarily. But, simply taking the time to examine and consider the thought behind someone else’s code or structure can inspire new ideas or push you to improve your own abilities.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Chapter 5: Solidifying Knowledge&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Learning is great. But retaining and applying knowledge is really what’s important.&lt;/p&gt;
&lt;p&gt;It can often be difficult to take something you’ve learned and recall it later when it’s time to use that knowledge.&lt;/p&gt;
&lt;p&gt;There are some tricks and strategies that will help you solidify the knowledge you have learned and identify opportunities to apply those learnings well into the future.&lt;/p&gt;
&lt;h3&gt;Use interleaving to learn new concepts&lt;/h3&gt;
&lt;p&gt;The idea behind interleaving is pretty simple. Studies have found that &lt;a href=&quot;https://www.scientificamerican.com/article/the-interleaving-effect-mixing-it-up-boosts-learning/&quot;&gt;people are able to better learn and recall new concepts&lt;/a&gt; if they mix up what they’re learning–alternating between a few different concepts or practices.&lt;/p&gt;
&lt;p&gt;While &lt;a href=&quot;https://www.7pace.com/blog/time-blocking-for-developers-how-to-achieve-flow-stop-being-busy-start-being-productive&quot;&gt;time blocking can be effective for developer productivity&lt;/a&gt;, the concept of interleaving may actually be better for learning and recall.&lt;/p&gt;
&lt;p&gt;One study found that students &lt;a href=&quot;http://journals.sagepub.com/doi/abs/10.1111/j.1467-9280.2008.02127.x&quot;&gt;performed 25% better on a surprise test when they had learned with interleaving techniques&lt;/a&gt; versus peers who learned in traditional blocks. But, more amazingly, those students were much better able to recall the test material later on.&lt;/p&gt;
&lt;p&gt;Students who originally learned through interleaving performed 76% better when given a test a month later.&lt;/p&gt;
&lt;p&gt;So, interleaving appears to both aid in short-term learning and also improve long-term retention. As you’re learning new things or trying new techniques, you may want to mix in multiple concepts and learn them together in an alternating pattern.&lt;/p&gt;
&lt;h3&gt;Teach what you’ve learned to others&lt;/h3&gt;
&lt;p&gt;For many, the best way to learn is to &lt;em&gt;teach&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you understand a complex problem enough to explain it to someone else, then you’re much more likely to be able to apply that knowledge in a meaningful way.&lt;/p&gt;
&lt;p&gt;This is also backed by plenty of science. In particular, the &lt;a href=&quot;https://qz.com/1213768/the-forgetting-curve-explains-why-humans-struggle-to-memorize/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Forgetting Curve&lt;/a&gt; explains how information is lost over time. If there is no active effort made to retain that knowledge, it will slowly disappear from your memory.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-4625&quot; src=&quot;https://www.7pace.com/blog/wp-content/uploads/2018/09/forgetting-curve-annotated.png&quot; alt=&quot;&quot; width=&quot;620&quot; height=&quot;349&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In addition, science has shown that &lt;a href=&quot;https://www.speaktoyourmind.com/blog/active-recall&quot;&gt;practicing active recall of knowledge can boost retrieval&lt;/a&gt; and memory by more than 100%.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-4626&quot; src=&quot;https://www.7pace.com/blog/wp-content/uploads/2018/09/spaced-repetition-chart.png&quot; alt=&quot;&quot; width=&quot;620&quot; height=&quot;404&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Teaching is, of course, an exercise that encourages and requires knowledge to be actively recalled, explained, and applied.&lt;/p&gt;
&lt;p&gt;So, teaching what you learn can be a fundamental strategy for retaining new knowledge and improve your ability to recall and apply that knowledge to your own work later on.&lt;/p&gt;
&lt;p&gt;As developers improve their skills, it’s often helpful for them to solidify that knowledge by sharing with others. Either through formalized teaching or coaching, or though informal mentoring of other teammates.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Chapter 6: Teamwork&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;At the end of the day, an individual’s abilities or knowledge will only play a small role in the outcome of the entire team.&lt;/p&gt;
&lt;p&gt;Being the smartest person in the room won’t make you a great developer unless you use that knowledge the foster and improve those around you.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“We don’t want heroes on the team”&lt;/em&gt;, wrote Hundhausen, &lt;em&gt;“unless those heroes are sharing their knowledge, pairing up, being respectful to others, and not command- and-controlling the work.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Josh Garverick put it even more bluntly.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“No one wants to work with a jerk who doesn’t feel like he/she needs to be taught anything,”&lt;/em&gt; he said.&lt;/p&gt;
&lt;p&gt;Teamwork and collaboration are &lt;em&gt;just as important&lt;/em&gt; as the ability to write elegant code or solve difficult problems. In fact, it may actually be &lt;a href=&quot;https://www.7pace.com/blog/fit-vs-ability-why-hiring-the-right-engineer-is-more-important-than-hiring-the-best-engineer&quot;&gt;&lt;em&gt;more important&lt;/em&gt; for have a functioning team&lt;/a&gt; than any one person be a particularly high-performing developer.&lt;/p&gt;
&lt;p&gt;Application development is a team sport. &lt;em&gt;Period. Full stop.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Sure, there may be mythical stories floating around about individual developers who performed some Herculean task of building programs all on their own. And that’s great for them.&lt;/p&gt;
&lt;p&gt;But that’s not the real world–and it’s not a sustainable way to build software.&lt;/p&gt;
&lt;p&gt;As you progress through our career, you will work with (and may embody) &lt;a href=&quot;https://www.7pace.com/blog/the-7-types-of-software-developers-youll-probably-work-with-someday&quot;&gt;many different types of developers&lt;/a&gt;. And in order to do your job well, you will need to learn how to traverse different personalities and work most effectively with these different types of people.&lt;/p&gt;
&lt;p&gt;More importantly, diversity can help you grow as a person and also &lt;a href=&quot;https://www.7pace.com/blog/importance-diversity-problem-solving&quot;&gt;make your team better at solving problems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But, “being good at working as a team” is a bit too abstract. How do we actually assess and improve our skills and collaboration, discussion, and giving/receiving feedback?&lt;/p&gt;
&lt;p&gt;According to a &lt;a href=&quot;https://hbr.org/2012/04/the-new-science-of-building-great-teams&quot;&gt;2012 study from MIT&lt;/a&gt;, the following characteristics are important for building a successful team:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Equal contribution from every member of the team&lt;/li&gt;
&lt;li&gt;The team shares a lot of energy&lt;/li&gt;
&lt;li&gt;Team members communicate directly with each other&lt;/li&gt;
&lt;li&gt;The team conducts back-channel conversations&lt;/li&gt;
&lt;li&gt;The members explore the outside world and report their findings back to the team&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Understanding your strengths (and weaknesses)&lt;/h3&gt;
&lt;p&gt;As an individual within a team, it may seem like your role in facilitating teamwork is limited. But you can take steps to become a better team player, which is just as important as a leader or manager facilitating teamwork from the top-down.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Understand and communicate your strengths&lt;/li&gt;
&lt;li&gt;Understand and communicate your weaknesses&lt;/li&gt;
&lt;li&gt;Understand the strengths and weaknesses of others on your team&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This is not easy. It requires being vulnerable and honestly assessing yourself–and asking your peers to do the same.&lt;/p&gt;
&lt;p&gt;But, that’s no excuse to ignore it.&lt;/p&gt;
&lt;p&gt;Each person on your team should be aware of their abilities and have an understanding of how they are able to complement one another. If your weakness is algorithms, the best way for you to &lt;em&gt;improve&lt;/em&gt; on that weakness is to understand who is better than you and actively work with them to develop your skills.&lt;/p&gt;
&lt;p&gt;You can only do that if you’re open and honest, communicating clearly with the rest of the team.&lt;/p&gt;
&lt;h3&gt;Defining your role&lt;/h3&gt;
&lt;p&gt;Secondly, you should consider how your strengths or weaknesses then define your role within the team structure.&lt;/p&gt;
&lt;p&gt;Are you the one who is seen as reliable and efficient? Or are you the out-of-the-box thinker who pushes the team to explore new ideas? Whatever your ultimate role is, you need to consider how it plays a part in the overall team dynamic and how you can play that role in a way that helps drive better outcomes.&lt;/p&gt;
&lt;p&gt;Ted Bauer published an article about teamwork and outlined &lt;a href=&quot;https://medium.com/@tedbauer2003/a-no-bullshit-way-to-get-teams-to-work-better-together-a1813edb4e1a&quot;&gt;4 types of people within a team&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-4620&quot; src=&quot;https://www.7pace.com/blog/wp-content/uploads/2018/09/agree-graph-1.png&quot; alt=&quot;&quot; width=&quot;848&quot; height=&quot;505&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As he points out, you do sometimes need troublemakers to push things forward.&lt;/p&gt;
&lt;p&gt;But, it’s up to the person in that role to understand when it makes sense to make trouble–how to pick and choose their battles. If you are, within your team, the one who is likely to push for change or progress, then you must do it selectively.&lt;/p&gt;
&lt;p&gt;Otherwise, you quickly slide into the “Jerk” territory and rather than &lt;em&gt;driving&lt;/em&gt; progress, you will quickly impede it.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Chapter 7: Developing Context&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Beyond just being a proficient programmer, the most effective software developers have a broad understanding of the context within which they operate.&lt;/p&gt;
&lt;p&gt;What does that mean?&lt;/p&gt;
&lt;p&gt;It means that software is not created in a vacuum.&lt;/p&gt;
&lt;p&gt;Strong developers understand that there are institutional considerations that go beyond just writing functional code and checking off user stories in the backlog.&lt;/p&gt;
&lt;p&gt;Software is created to serve a purpose. And it operates under a particular set of conditions, within a specific budget range, and for users that have a certain level of knowledge or ability.&lt;/p&gt;
&lt;p&gt;In other words, software is not just software. It is, ultimately, a solution for something.&lt;/p&gt;
&lt;p&gt;Moving beyond understanding the fundamentals of programming and being a competent or effective developer, there is another level of performance that comes from a broader understanding of the application lifecycle.&lt;/p&gt;
&lt;p&gt;This understanding about the user, the constraints, and the context allow skilled developers to make smarter and more effective decisions about how to solve problems.&lt;/p&gt;
&lt;p&gt;It’s easy for competent developers to spend their entire career with their head down, writing and checking in code. They may be a great teammate and a valuable asset.&lt;/p&gt;
&lt;p&gt;But, to level up, you need to look beyond what’s on the screen.&lt;/p&gt;
&lt;p&gt;In order to improve your abilities–and your value–as a developer, you should strive to zoom out from the day-to-day monotony of writing code and ask &lt;em&gt;why&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Gain context and understanding about how decisions are being made and how they will impact your work. But, don’t just do it for selfish reasons–do it because you want to be included in that decision-making process and able to better understand the purpose and importance of what you do.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Chapter 7: Additional Resources&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;While this guide is meant to include many ideas and strategies for leveling up your skills as a developer, the heart of everything is learning.&lt;/p&gt;
&lt;p&gt;It’s actively seeking out new knowledge and ideas, and then finding ways to apply that new knowledge in your day-to-day work.&lt;/p&gt;
&lt;p&gt;In that spirit, there are many other resources for you to consider as you look for ways to improve and grow in your abilities and your career. Here are some recommended by the Microsoft ALM Rangers we talked to when developing this guide.&lt;/p&gt;
&lt;h3&gt;Websites &amp;amp; Publications&lt;/h3&gt;
&lt;h3&gt;Books&lt;/h3&gt;

&lt;/div&gt;
</description>
<pubDate>Thu, 20 Sep 2018 15:33:57 +0000</pubDate>
<dc:creator>encorekt</dc:creator>
<og:title>How to Become a Better Software Developer: A Handbook on Personal Performance</og:title>
<og:type>article</og:type>
<og:image>https://www.7pace.com/blog/wp-content/uploads/2018/09/cover.png</og:image>
<og:url>https://www.7pace.com/blog/become-a-better-programmer-skills-development</og:url>
<og:description>There’s a big difference between writing code and being a great programmer. Writing code is the output--and almost anyone can learn the basics of syntax and formatting. But what makes someone...</og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.7pace.com/blog/become-a-better-programmer-skills-development</dc:identifier>
</item>
<item>
<title>On generative algorithms</title>
<link>https://inconvergent.net/generative/</link>
<guid isPermaLink="true" >https://inconvergent.net/generative/</guid>
<description>&lt;div readability=&quot;34.502109704641&quot;&gt;
&lt;h2&gt;Sections&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://inconvergent.net/generative/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://inconvergent.net/generative/hyphae&quot;&gt;Hyphae&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://inconvergent.net/generative/trees&quot;&gt;Trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://inconvergent.net/generative/linetrace&quot;&gt;Linetrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://inconvergent.net/generative/differential-line&quot;&gt;Differential Line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://inconvergent.net/generative/differential-mesh&quot;&gt;Differential Mesh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://inconvergent.net/generative/differential-mesh-3d&quot;&gt;Differential Mesh 3d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://inconvergent.net/generative/fractures&quot;&gt;Fractures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://inconvergent.net/generative/sand-spline&quot;&gt;Sand Spline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://inconvergent.net/generative/differential-lattice&quot;&gt;Differential Lattice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://inconvergent.net/generative/sand-creatures&quot;&gt;Sand Creatures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://inconvergent.net/generative/sand-glyphs&quot;&gt;Sand Glyphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://inconvergent.net/generative/not-a-conclusion&quot;&gt;Not a Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;This essay was written between late 2015 and mid 2016.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I've always been fascinated with patterns. It doesn't really matter what kind of patterns; I've played with networks, leaves and leaf venation, branches, &lt;a href=&quot;https://en.wikipedia.org/wiki/Lichtenberg_figure&quot;&gt;lightning&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Boids&quot;&gt;flocking&lt;/a&gt;, tracing outlines of shapes, river formation, rock sediments, landscapes, &lt;a href=&quot;https://en.wikipedia.org/wiki/Slime_mold&quot;&gt;slime mold&lt;/a&gt;, lichens, &lt;a href=&quot;https://en.wikipedia.org/wiki/Reaction%E2%80%93diffusion_system&quot;&gt;reaction-diffusion&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Cellular_automaton&quot;&gt;cellular automaton&lt;/a&gt;, some fractals, and a few other things. I think what I enjoy the most is how complex and intricate results you can get from a set of simple rules.&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;45.630901287554&quot;&gt;
&lt;p&gt;Recently I've been particularly interested in biological patterns, and differential growth. My background is in numerical mathematics, not biology. So I have limited knowledge of how biological systems actually work. Even so, I've been experimenting quite a lot with recreating various biological behaviours. Part of the challenge is to try to recreate some pattern or behaviour with as few and as simple rules as possible.&lt;/p&gt;
&lt;p&gt;Sometimes I manage to recreate the phenomenon I set out to create, and sometimes not. More often than not I get something interesting, even if it is not always what I expected.&lt;/p&gt;
&lt;h2&gt;A Confession&lt;/h2&gt;
&lt;p&gt;In the interest of disclosure I should point out that I sometimes base my work on the ideas that I have seen done elsewhere by a number of other generative artists. Most notably &lt;a href=&quot;http://complexification.net&quot;&gt;Jared Tarbell&lt;/a&gt; and &lt;a href=&quot;http://n-e-r-v-o-u-s.com/&quot;&gt;Nervous System&lt;/a&gt;. For instance the algorithm I named &lt;a href=&quot;https://github.com/inconvergent/orbitals&quot;&gt;Orbitals&lt;/a&gt; (image below) is very heavily based on &lt;a href=&quot;http://www.complexification.net/gallery/machines/happyPlace/&quot;&gt;Happy Place&lt;/a&gt; by Tarbell.&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;35&quot;&gt;
&lt;p&gt;I point this out because I have always found it hard to know where a piece of software—and in my particular case, the images generated by that software—is &lt;em&gt;novel&lt;/em&gt; enough to be viewed as a separate work.&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;34.459893048128&quot;&gt;
&lt;h2&gt;Inconvergent&lt;/h2&gt;
&lt;p&gt;I started working with generative algorithms when I was supposed to be studying for my exams at university. For that reason I bought the domain name &lt;a href=&quot;https://inconvergent.net/&quot;&gt;inconvergent.net&lt;/a&gt;, as a joke on me diverging from my studies. The first thing I did was to copy several of Tarbell's algorithms using Javascript/Canvas. After a while I started getting a few other ideas of my own.&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;38.377535101404&quot;&gt;
&lt;p&gt;Apart from Orbitals, the first algorithm I got working was &lt;a href=&quot;https://inconvergent.net/generative/hyphae&quot;&gt;Hyphae&lt;/a&gt;. It came to me when I was trying to recreate the behaviour of &lt;a href=&quot;http://n-e-r-v-o-u-s.com/shop/generativeProduct.php?code=99&quot;&gt;Hyphae&lt;/a&gt; by Nervous System. At this point I hadn't realized how complicated that algorithm actually is, and I spent way too much time trying and failing to get it anywhere near decent. I implemented it later, and you can read the &lt;a href=&quot;http://algorithmicbotany.org/papers/venation.sig2005.pdf&quot;&gt;Siggraph paper&lt;/a&gt; describing it if you are interested. It is a fascinating read!&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;p&gt;I make almost all of my code available at &lt;a href=&quot;https://github.com/inconvergent&quot;&gt;Github&lt;/a&gt;. All the following sections have a link to the corresponding repository. Unfortunately not all of it is entirely well documented or up to date.&lt;/p&gt;
&lt;a class=&quot;next&quot; href=&quot;https://inconvergent.net/generative/hyphae&quot;&gt;Read More&lt;/a&gt;&lt;/div&gt;</description>
<pubDate>Thu, 20 Sep 2018 15:09:07 +0000</pubDate>
<dc:creator>dave9000</dc:creator>
<og:image>https://inconvergent.net/img/generative/head.jpg</og:image>
<og:title>On Generative Algorithms: Introduction · inconvergent</og:title>
<og:url>https://inconvergent.net/generative/</og:url>
<og:type>website</og:type>
<og:description>An illustrated essay on generative algorithms written by Anders Hoff.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://inconvergent.net/generative/</dc:identifier>
</item>
<item>
<title>CLIP OS – France’s cybersecurity agency’s open source, secured operating system</title>
<link>https://www.ssi.gouv.fr/en/actualite/clip-os-open-source-secured-operating-system/</link>
<guid isPermaLink="true" >https://www.ssi.gouv.fr/en/actualite/clip-os-open-source-secured-operating-system/</guid>
<description>&lt;p&gt;Initially designed to meet the specific needs of the administration, CLIP OS provides partitioning mechanisms that make it possible to simultaneously process, on the same computer, both public and sensitive information within two totally isolated software environments.&lt;/p&gt;
&lt;h3&gt; What is CLIP OS?&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://www.ssi.gouv.fr/uploads/2014/11/clip-os-logo-moyen-150x150.png&quot; alt=&quot;CLIP-OS-LOGO-moyen&quot; width=&quot;200&quot;/&gt; ANSSI has been developing and upgrading CLIP OS for more than 10 YEARS. This Linux-based operating system incorporates a set of security mechanisms that give it a very high level of resistance to malicious code and allow it to protect sensitive information. It also provides partitioning mechanisms that make it possible to simultaneously process public and sensitive information on the same computer, within two completely isolated software environments, in order to avoid the risk of sensitive information leaking onto the public network.&lt;br/&gt;This system can be deployed on security gateways as well as on client workstations, including laptops, and allows, for example, access to sensitive information for mobile use.&lt;/p&gt;
&lt;h3&gt;How to use CLIP OS&lt;/h3&gt;
&lt;p&gt;While there is currently no “ready to use” version of CLIP OS for end-users, ANSSI offers the opportunity to contribute collectively to the development of the operating system designed by the agency, to better respond to the specific uses and needs of users.&lt;/p&gt;
&lt;h3&gt; Develop CLIP OS&lt;/h3&gt;
&lt;p&gt;For this purpose, ANSSI provides the new version of CLIP OS in Open Source including ::&lt;br/&gt;– For collaborative development – The source code and documentation (in English) of the latest version of CLIP OS.&lt;br/&gt;– For archive and reference – The source code and documentation (in French) of the previous version of CLIP OS to initiate and facilitate future developments.&lt;br/&gt;Still in the “Alpha” version stage, CLIP OS will be improved over time, thanks to the developments carried out by the ANSSI teams, as well as the contributions of all the actors who will wish to get involved in the project&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://clip-os.org&quot;&gt;&lt;strong&gt;Find all the sources of CLIP OS* and participate with us in the development of this new project**.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;→ &lt;a href=&quot;https://www.ssi.gouv.fr/uploads/2014/11/clipos_openpgp_public_key.txt&quot;&gt;&lt;span&gt;OpenPGP key&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*The CLIP OS project is available in open source under &lt;a href=&quot;https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html&quot;&gt;LGPL 2.1+ license&lt;/a&gt;. &lt;/em&gt;&lt;br/&gt;&lt;em&gt;** CLIP OS is a trademark of the French Republic. As a consequence, any use of the name “CLIP OS” has to be first authorized by the ANSSI. This does not preclude changes to the software posted online and their republication or quotation from identifying the original software under the terms of the LGPL v2.1+ license. Regardless, no use of the name “CLIP OS” on a modified version should suggest that this version is the original work published by the ANSSI.&lt;/em&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 20 Sep 2018 10:42:48 +0000</pubDate>
<dc:creator>brmgb</dc:creator>
<og:type>article</og:type>
<og:title>CLIP OS – Open Source secured operating system</og:title>
<og:description>ANSSI has developed a multi-level secure operating system called CLIP OS, to address the needs of the administration. Based on a Linux kernel and managing information of several confidentiality levels. CLIP OS is now available in Open Source as part of a collaborative development project.</og:description>
<og:url>https://www.ssi.gouv.fr/actualite/clip-os-open-source-secured-operating-system/</og:url>
<og:image>https://www.ssi.gouv.fr/uploads/2014/07/anssi_visuel_square500.png</og:image>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.ssi.gouv.fr/en/actualite/clip-os-open-source-secured-operating-system/</dc:identifier>
</item>
<item>
<title>The Making of Underrun – A WebGL Shooter in 13kb of JavaScript</title>
<link>https://phoboslab.org/log/2018/09/underrun-making-of</link>
<guid isPermaLink="true" >https://phoboslab.org/log/2018/09/underrun-making-of</guid>
<description>&lt;p&gt;I participated in this year's &lt;a href=&quot;https://js13kgames.com/&quot;&gt;js13kGames&lt;/a&gt;, a JavaScript game development competition with a file size limit of 13kb, including code, assets and everything else. My entry was &lt;a href=&quot;https://phoboslab.org/underrun/&quot;&gt;Underrun&lt;/a&gt;, a twin stick shooter using WebGL.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://phoboslab.org/underrun/&quot;&gt;&lt;img src=&quot;https://phoboslab.org/content/assets/underrun.png&quot; alt=&quot;Underrun&quot; /&gt;&lt;/a&gt; &lt;em&gt;Play Underrun – A WebGL shooter in 13kb of JavaScript&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For this competition I set out to produce something with a dense atmosphere – which is inherently difficult to do with so little space. In my experience a dense atmosphere is most easily achieved with two things: moody lighting and rich sound &amp;amp; music. The assets for sound &amp;amp; music usually take up a lot of space and lighting for 2D games requires more and bigger graphic assets. With only 13kb to space I had to look for different solutions for these things.&lt;/p&gt;
&lt;h2&gt;Graphic Assets&lt;/h2&gt;
&lt;p&gt;Since I was very limited with the amount of graphic assets I could fit in this game the decision to implement a 3D perspective came naturally: atmospheric lighting is easier to do in 3D than in 2D and requires less assets to look neat. In contrast, to produce interesting light effects in 2D typically requires you to implement a third dimension anyway. This can be done through normal maps &lt;a href=&quot;https://www.gamasutra.com/view/news/312977/Adding_depth_to_2D_with_handdrawn_normal_maps_in_The_Siege_and_the_Sandfox.php&quot;&gt;as some 2D Pixel Art games do&lt;/a&gt; or by explicitly separating your environment into different layers as &lt;a href=&quot;https://store.steampowered.com/app/234390/Teleglitch_Die_More_Edition/&quot;&gt;Teleglitch&lt;/a&gt; does for example.&lt;/p&gt;
&lt;p&gt;My approach for the graphics was to render a simple 2D tilemap with a bunch of textured quads. All walls are rendered as cubes and entities (the player, enemies, projectiles, particles and health pickups) are just simple sprites. All textures for the game fit in a single tile sheet, 2.12kb in size.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://phoboslab.org/content/assets/underrun-assets-scaled.png&quot; alt=&quot;Underrun Assets&quot; /&gt;&lt;em&gt;All graphic assets for the game, carefully tuned to 16 colors&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I opted to render the player character as a sprite as well, even though it needs to be freely rotated. It was far easier to produce 8 different sprites – one for each direction – than to implement a loader and renderer for complex 3D models. This allowed me to omit &lt;em&gt;any&lt;/em&gt; 3D vector or matrix math operations. The game never needs to rotate any geometry. Everything is rendered with axis aligned quads.&lt;/p&gt;
&lt;p&gt;To make the player character rotation look convincing I build a 3D model and simply took screenshots for each of the different perspectives. I'm a total doofus when it comes to 3D modeling software, but that doesn't stop me from using the ingenious &lt;a href=&quot;http://www.wings3d.com/&quot;&gt;Wings3D&lt;/a&gt;. The result doesn't look like much, but scaled down to 16px, it doesn't matter.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://phoboslab.org/content/assets/underrun-guy-wings3d.png&quot; alt=&quot;title&quot; /&gt;&lt;em&gt;The player character model built in Wings3D&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The final game features 3 different levels, each 64×64 tiles in size. When I started to work on the game I considered to use Run Length Encoding to compress the level maps. However, even as simple as RLE is, a decompressor for it would have taken up some valuable space. So my solution was to just let the browser handle the decompression by using PNG images.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://phoboslab.org/content/assets/underrun-levels-scaled.png&quot; alt=&quot;title&quot; /&gt;&lt;em&gt;Underrun's levels are stored as PNG images&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With the PNG compression, each level image is just about 300bytes in size. A naive approach would have needed 64×64 bytes = 4kb per level (assuming storage as raw binary, 1byte per tile).&lt;/p&gt;
&lt;p&gt;When loading the level a random number generator (RNG) is used to determine exactly which tile graphic to use for each floor and wall. The RNG also decides where to place enemies and powerups, as these are not encoded in the level images. To make this consistent between playthroughs, so that each player plays exactly the same game, I implemented a tiny seedable RNG (&lt;a href=&quot;https://github.com/phoboslab/underrun/blob/master/source/random.js&quot;&gt;source code&lt;/a&gt;) and re-seeded it with the same constant before loading each level.&lt;/p&gt;
&lt;p&gt;I also hardcoded some of the wall tiles to be rendered with twice the normal height to make it look more interesting. You can see the complete level loading routines in the &lt;a href=&quot;https://github.com/phoboslab/underrun/blob/master/source/game.js#L45&quot;&gt;load_level() function&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Rendering&lt;/h2&gt;
&lt;p&gt;The renderer follows an extremely simple design: a single buffer is used to store all vertices, texture coordinates and normals. A second buffer is used to store all light sources (position, color, attenuation). The game can write to these buffers using the &lt;code&gt;push_quad()&lt;/code&gt; and &lt;code&gt;push_light()&lt;/code&gt; functions. The renderer clears these buffers at the beginning of each frame and draws the (filled) buffers at the end of the frame.&lt;/p&gt;
&lt;p&gt;There's one small optimization to this. During level load, since all the level geometry is static, the game sets a &lt;em&gt;reset mark&lt;/em&gt; for the geometry buffer after all the level geometry has been pushed. Before each frame the renderer will then reset the write position for the geometry buffer to this &lt;em&gt;reset mark&lt;/em&gt; instead of to &lt;code&gt;0&lt;/code&gt;. This clears all the entities, but we don't we don't have to re-push the level data.&lt;/p&gt;
&lt;p&gt;Since the game's graphics are quite simple, there's no need for any occlusion culling or any other optimizations to reduce the amount of geometry being drawn. Underrun draws the whole level – all floor an ceiling tiles and all sprites – for every single frame in a single draw call.&lt;/p&gt;
&lt;p&gt;The gist of the renderer looks like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; 
    num_verts &lt;span class=&quot;punct&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;,&lt;/span&gt;
    level_num_verts &lt;span class=&quot;punct&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;,&lt;/span&gt;
    max_verts &lt;span class=&quot;punct&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;,&lt;/span&gt;
    buffer_data &lt;span class=&quot;punct&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Float32Array&lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;max_verts &lt;span class=&quot;punct&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;);&lt;/span&gt; 

&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; push_quad&lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;x1&lt;span class=&quot;punct&quot;&gt;,&lt;/span&gt; y1&lt;span class=&quot;punct&quot;&gt;,&lt;/span&gt; z1&lt;span class=&quot;punct&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;...)&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;{&lt;/span&gt;
    buffer_data&lt;span class=&quot;punct&quot;&gt;.&lt;/span&gt;set&lt;span class=&quot;punct&quot;&gt;([&lt;/span&gt;x1&lt;span class=&quot;punct&quot;&gt;,&lt;/span&gt; y1&lt;span class=&quot;punct&quot;&gt;,&lt;/span&gt; z1&lt;span class=&quot;punct&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;...],&lt;/span&gt; num_verts &lt;span class=&quot;punct&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;);&lt;/span&gt;
    num_verts &lt;span class=&quot;punct&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;punct&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; load_level&lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;punct&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;{&lt;/span&gt;
    num_verts &lt;span class=&quot;punct&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; y &lt;span class=&quot;punct&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;;&lt;/span&gt; y &lt;span class=&quot;punct&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;;&lt;/span&gt; y&lt;span class=&quot;punct&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;punct&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;;&lt;/span&gt; x &lt;span class=&quot;punct&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;;&lt;/span&gt; x&lt;span class=&quot;punct&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;punct&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;punct&quot;&gt;}&lt;/span&gt;

    level_num_verts &lt;span class=&quot;punct&quot;&gt;=&lt;/span&gt; num_verts&lt;span class=&quot;punct&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; renderer_prepare_frame&lt;span class=&quot;punct&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;{&lt;/span&gt;
    num_verts &lt;span class=&quot;punct&quot;&gt;=&lt;/span&gt; level_num_verts&lt;span class=&quot;punct&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;punct&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; renderer_end_frame&lt;span class=&quot;punct&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;{&lt;/span&gt;
    gl&lt;span class=&quot;punct&quot;&gt;.&lt;/span&gt;bufferData&lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;punct&quot;&gt;.&lt;/span&gt;ARRAY_BUFFER&lt;span class=&quot;punct&quot;&gt;,&lt;/span&gt; buffer_data&lt;span class=&quot;punct&quot;&gt;,&lt;/span&gt; gl&lt;span class=&quot;punct&quot;&gt;.&lt;/span&gt;DYNAMIC_DRAW&lt;span class=&quot;punct&quot;&gt;);&lt;/span&gt;
    gl&lt;span class=&quot;punct&quot;&gt;.&lt;/span&gt;drawArrays&lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;punct&quot;&gt;.&lt;/span&gt;TRIANGLES&lt;span class=&quot;punct&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;,&lt;/span&gt; num_verts&lt;span class=&quot;punct&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;punct&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; tick&lt;span class=&quot;punct&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;{&lt;/span&gt;
    renderer_prepare_frame&lt;span class=&quot;punct&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;punct&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;punct&quot;&gt;&amp;lt;&lt;/span&gt; entities&lt;span class=&quot;punct&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;punct&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;punct&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;{&lt;/span&gt;
        entities&lt;span class=&quot;punct&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;punct&quot;&gt;].&lt;/span&gt;update&lt;span class=&quot;punct&quot;&gt;();&lt;/span&gt;
        entities&lt;span class=&quot;punct&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;punct&quot;&gt;].&lt;/span&gt;draw&lt;span class=&quot;punct&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;punct&quot;&gt;}&lt;/span&gt;

    renderer_end_frame&lt;span class=&quot;punct&quot;&gt;();&lt;/span&gt;

    requestAnimationFrame&lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;tick&lt;span class=&quot;punct&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;punct&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For the lighting I opted for some very simple vertex lights. Since the game only renders relatively small quads, it doesn't matter much that the light computation is handled in the vertex shader instead of per-pixel in the fragment shader. This also allowed for many more light sources. The game currently allows for 32 lights, each of which considered for every single vertex. Current GPUs are so stupidly fast that no optimizations are needed for such simple cases.&lt;/p&gt;
&lt;p&gt;The light calculation in Underrun's Vertex Shader looks somewhat like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;uniform &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; lights&lt;span class=&quot;punct&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;*&lt;/span&gt; max_lights&lt;span class=&quot;punct&quot;&gt;];&lt;/span&gt;
varying vec3 vertex_light&lt;span class=&quot;punct&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; main&lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;){&lt;/span&gt;
    vertex_light &lt;span class=&quot;punct&quot;&gt;=&lt;/span&gt; vec3&lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;);&lt;/span&gt; 
        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;punct&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;punct&quot;&gt;&amp;lt;&lt;/span&gt; max_lights&lt;span class=&quot;punct&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;punct&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;{&lt;/span&gt;
        vec3 light_position &lt;span class=&quot;punct&quot;&gt;=&lt;/span&gt; vec3&lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;lights&lt;span class=&quot;punct&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;punct&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;],&lt;/span&gt; lights&lt;span class=&quot;punct&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;punct&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;],&lt;/span&gt; lights&lt;span class=&quot;punct&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;punct&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;]);&lt;/span&gt;
        vec3 light_color &lt;span class=&quot;punct&quot;&gt;=&lt;/span&gt; vec3&lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;lights&lt;span class=&quot;punct&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;punct&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;],&lt;/span&gt; lights&lt;span class=&quot;punct&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;punct&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;],&lt;/span&gt; lights&lt;span class=&quot;punct&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;punct&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;]);&lt;/span&gt;
        vec3 distance &lt;span class=&quot;punct&quot;&gt;=&lt;/span&gt; length&lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;light_position &lt;span class=&quot;punct&quot;&gt;-&lt;/span&gt; vertex_position&lt;span class=&quot;punct&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; attenuation&lt;span class=&quot;punct&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;/(&lt;/span&gt;lights&lt;span class=&quot;punct&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;punct&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;*&lt;/span&gt; distance&lt;span class=&quot;punct&quot;&gt;);&lt;/span&gt;

        vertex_light &lt;span class=&quot;punct&quot;&gt;+=&lt;/span&gt; 
            light_color
            &lt;span class=&quot;punct&quot;&gt;*&lt;/span&gt; max&lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;dot&lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;normal&lt;span class=&quot;punct&quot;&gt;,&lt;/span&gt; normalize&lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;dist&lt;span class=&quot;punct&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;punct&quot;&gt;*&lt;/span&gt; attenuation&lt;span class=&quot;punct&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;punct&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;punct&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For some extra scary atmosphere the fragment shader calculates a simple black fog based on the distance to the camera. An exception is made to the enemies' eyes: all full red texture pixels are always rendered unchanged – no light, no fog. This makes them essentially glow in the dark.&lt;/p&gt;
&lt;p&gt;The fragment shader also reduces the final image to 256 colors. I experimented with some color tinting but ultimately settled for a uniform rgb palette. Rendering in 256 colors and a screen size of just 320×180 pixels not only gives the game an old-school vibe, but also hides a lot of the graphical shortcomings.&lt;/p&gt;
&lt;p&gt;Have a look at the source code for the &lt;a href=&quot;https://github.com/phoboslab/underrun/blob/master/source/renderer.js&quot;&gt;renderer.js&lt;/a&gt; and &lt;a href=&quot;https://github.com/phoboslab/underrun/blob/master/source/game.js&quot;&gt;game.js&lt;/a&gt; - there's really not that much to it.&lt;/p&gt;
&lt;h2&gt;Music &amp;amp; Sounds&lt;/h2&gt;
&lt;p&gt;The sound and music for all my previous games made up the bulk of the data size. E.g. &lt;a href=&quot;https://phoboslab.org/xibalba/&quot;&gt;Xibalba&lt;/a&gt; has about 800kb of graphic assets (tile sheets, sprites, title screen etc.) but more than 4mb of music and 2.5mb of sound effects (actually 8mb and 5mb respectively, since all assets need to be provided as .ogg and .mp3). This was of course infeasible when you only have 13kb total to work with.&lt;/p&gt;
&lt;p&gt;So for Underrun all music and sound effects are generated in JavaScript when the game starts. The game uses the brilliant &lt;a href=&quot;https://github.com/nicolas-van/sonant-x&quot;&gt;Sonant-X&lt;/a&gt; library to render &lt;em&gt;instruments&lt;/em&gt; from a bunch of parameters into sound waves.&lt;/p&gt;
&lt;p&gt;My dear friend Andreas Lösch of &lt;a href=&quot;http://no-fate.net&quot;&gt;no-fate.net&lt;/a&gt; produced the instruments and sequences for the music in the tracker &lt;a href=&quot;https://nicolas-van.github.io/sonant-x-live/#N4IgTg9g7gMgpgOxALgKyoIwGYA0JEAmACgIYAuZcYSyATKngM4QIDmAIuSSgNqgSMAxhgD6EQWRQB2PAOEiCcScgAMsoaMVkArgjgo1IOaIAeiAG4H188xAA2KegyMaRUEubgAzCGAC2jta0YhIoABxBCkpWLoLBWrr6yBgRscFmCJaqkbYOdOiR7p4%2B%2Fii4IAgQAJaMcCJeJIpgMRYi5GQkggDWjhgqUgAseK2M2owdVTSoAGxYs8OZImBwdnAktSh9KtuGrX7rlM3JAJzHeF4m9VV2h4EgF%2FXLAI4oxwOpD8vMCCQIgknHWjnS6KOwkACeIjIVT8SRk9xBKwhbT8ymmhgeAAdfo84C9kOUsTiSKjNts8HYfGJXF5njFKRB6pdaXjNhSqSz8fCGSjlNhUjyit5fAECXhMbwgbghgwpTgZTg5QqlThZThparFer5aqALp4QS8UA0HhqM04c2Wi3Wq22m32u2Om26gC%2BOGNvAwtCBTt9DutXow%2Fr9vtd7oqnowQxDwdjMfjFrDHuQPAwGDOCZjgbjOcdSYjKbT0dzJczAYwMhDrvzxhCynhta0MUbSkSzdcGSyhlruU2gOsoiFJVF5TkwXEyiGaSiym7Qnirb07biIk7y%2BCvbQDfnbg8wtK2Qq1Vq9UaVBai3anR6yXJ%2BEWo3GJEmm1Qu0Wy1W6yS2Fm0wW5giPs4znicQYIlcNygUCEGcigqBhFgZwQV8LC%2FP8jioFODygsi0Kwig2GImCkIknytDgUSCC4vi%2F4Qdi1FkZsAzclStZwYePIPBxhhcXSyB0TyTEnM4gp7sOMQSimPpamoMnydaClyYpin6iAhopsmpqljpZbxvmJrYEGahGQGWDGfa2C4CZWDFtgxZ6bp1ZuvwrgTtIA4zncLY6Euh61muySeZu6Z0bWQ4iuudYedOTb%2BTuCR%2BXOK6BeBY4iJuTiFOJkWHpUNR1A0TQXoBV7dGS76AY%2BEw0JVSwrGsGwEn%2BAFAQc0FYcCkG3HQXUcdMXpdahPx%2FEk9BEVEJFQjCSR0ThSKkaSdDwlRNExKtwm8WxNL8VtjLcbt7L7YdIBCUte27sUuWGFJqY4EGD33U9j0vfdakaXwBapgMCZRr9P06X9pbOeGtbucg27yHFyWaIuSQw6uFjLqIm5SJDg45QeaU7uDMHpdDkSJT%2BYSpOlgXJRu9gxelEUHoY%2BUnkV0Hga0ZU3qgWBSFgMEjGMNUlfVX5NVGWHOHs7VHNgfXXD1GLMidnxwN86FjQDEG4ZC%2BFjV1Gu8o43pdQxa1ivRxJLSxR3UvIPGWwdrKcRyJ1nbOlu06KN28HaQJDHK3targfu%2BzqQc%2B%2Bq71Gl9jlR7pDoGZ65lmRZplWlZZl2bZMdR3HhYJzZSe55Zcxp2Z1mZ5n2epgX0fV8DLo1m5oRoJ5BOxLDvnw55qXBVTdAI27UXg5DC4u7FcNRV306o9lV103gDOFWektSKkrMUNeAvVc%2BNCzFgK8fg136vgMnX3oBwE9Vs0tQUchLy%2FbAxYKgMGK8ro2OGr81TVrhE6wtevIKcQ2OIbam0YktWgF12JOw5HffE4E%2BL21YoyYS0wpxiRnu7cUnt%2FSvVwW9A0EcTS%2FU5mXP02BKy5hBq5eQ4NSauBbj5Ns8V5ATx7D3MIeNXD916tOWhhNojMOHkwimiNMhRU3CI7h9NjwL2KskegrU2YVVapvF8h5WifkagCFQxw6rn2gtzK%2BPVb7GyfneF%2BaE34CRMbrb%2ByAJq62EqZUBxs5YiCNptS2UD7YXTtviXx0DkHnVdpjTBIBbo1wsuaKJAZw6aS%2BlGB6AwkkpNIWk%2FSdc65MBYKweANA%2BgYBdEAA&quot;&gt;Sonant-X Live&lt;/a&gt;. The sound effects were produced in Sonant-X Live as well; each effect being a single instrument.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://phoboslab.org/content/assets/underrun-sonant-x-live.png&quot; alt=&quot;Sonant-X&quot; /&gt;&lt;em&gt;Underrun's Music, produced in the Sonant-X Live tracker&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To save some more space I began to remove all the parts from Sonant-X that were not needed for my game, leaving only the WebAudio generator. In doing so I noticed that the library was unnecessary slow, taking half a second to generate an &lt;em&gt;empty&lt;/em&gt; buffer object. The culprit was the use of a single, interleaved Uint8 Buffer for the left and right audio channel, storing unsigned 16bit values with the implicit zero amplitude at 32767.&lt;/p&gt;
&lt;p&gt;The library was spending a lot of time loading from and storing 16bit values into this 8bit buffer and later converting it to a signed float suitable for WebAudio. I believe this is an artifact from the original use case of this library: producing a WAV data URI.&lt;/p&gt;
&lt;p&gt;I refactored the library to use two Float32Arrays (one for each channel) that can be directly used by the WebAudio API in the browser. This not only simplified the code and reduced the file size by 30% but also made the music generation twice as fast.&lt;/p&gt;
&lt;p&gt;As an example, have a look at the &lt;a href=&quot;https://github.com/nicolas-van/sonant-x/blob/master/sonantx.js#L105-L139&quot;&gt;original applyDelay() function&lt;/a&gt; and my &lt;a href=&quot;https://github.com/phoboslab/underrun/blob/68d831dbcdbdb044161eae1c2c0918986704a973/source/sonantx-reduced.js#L85-L97&quot;&gt;modified one&lt;/a&gt; - granted, I also removed the pausing/re-scheduling functions here that originally prevented blocking the event loop with a long running computation, but it wasn't really needed anymore.&lt;/p&gt;
&lt;p&gt;All in all, minified and gzipped, the music and sound for Underrun along with the Sonant-X library now occupy only about 2kb. That's a pretty big deal, considering all my previous games' biggest asset were sound and music. So even if your game is not size restricted as much, it may make sense to generate audio directly in your game, instead of adding big files to the download.&lt;/p&gt;
&lt;h2&gt;Minification&lt;/h2&gt;
&lt;p&gt;When I started this project I took great care to write as little code as possible and to make sure all my code could be minified effectively by UglifyJS. The source has quite an unusual style compared to my other JS projects. It's using a lot of global variables and functions, instead of abstracting it more neatly into classes. I also wrote the code in the more C-like &lt;code&gt;snake_case&lt;/code&gt; style to force my brain into this different mode.&lt;/p&gt;
&lt;p&gt;In hindsight, this was totally unnecessarily. Minifying and zipping would have gotten rid of most of the overhead of using more abstractions.&lt;/p&gt;
&lt;p&gt;One trick that made a small difference is the &quot;inlining&quot; of all WebGL constants at build-time. E.g. &lt;code&gt;gl.ONE_MINUS_SRC_ALPHA&lt;/code&gt; is replaced with just &lt;code&gt;771&lt;/code&gt; - the constant's value. I also shortened all the WebGL function calls by producing aliases that just contained the first two letters and all subsequent upper-case letters of the function's original name:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name in gl&lt;span class=&quot;punct&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;punct&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;punct&quot;&gt;].&lt;/span&gt;length &lt;span class=&quot;punct&quot;&gt;!==&lt;/span&gt; undefined&lt;span class=&quot;punct&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;{&lt;/span&gt;         gl&lt;span class=&quot;punct&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;punct&quot;&gt;.&lt;/span&gt;match&lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/(^..|[A-Z]|\d.|v$)/g&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;).&lt;/span&gt;join&lt;span class=&quot;punct&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;punct&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;punct&quot;&gt;=&lt;/span&gt; gl&lt;span class=&quot;punct&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;punct&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;punct&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;punct&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This allowed me to use &lt;code&gt;gl.getUniformLocation()&lt;/code&gt; as just &lt;code&gt;gl.geUL()&lt;/code&gt;. Note though that this approach is quite hack-ish and produces some name collisions. But for my game it worked out nicely.&lt;/p&gt;
&lt;p&gt;I also took a lot of shortcuts with the game logic and especially collision detection. Collision detection between entities is just using two nested loops, checking each entity against all other entities. This quadratic function quickly explodes with a lot of entities in the level (e.g. 100 entities = 10.000 comparisons) - it's just amazing with what you can get away with these days.&lt;/p&gt;
&lt;p&gt;Other than that I didn't do anything particularly clever or exciting to further minify the game.&lt;/p&gt;
&lt;p&gt;The full source for Underrun is on github: &lt;a href=&quot;http://github.com/phoboslab/underrun/&quot;&gt;github.com/phoboslab/underrun&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Be sure to have a look at some of the other &lt;a href=&quot;https://js13kgames.com/entries&quot;&gt;js13Games entries&lt;/a&gt; this year. Some of my favorites are &lt;a href=&quot;https://js13kgames.com/entries/the-chroma-incident&quot;&gt;The Chroma Incident&lt;/a&gt;, &lt;a href=&quot;https://js13kgames.com/entries/1024-moves&quot;&gt;1024 Moves&lt;/a&gt;, &lt;a href=&quot;https://js13kgames.com/entries/isp&quot;&gt;ISP&lt;/a&gt;, &lt;a href=&quot;https://js13kgames.com/entries/wander&quot;&gt;Wander&lt;/a&gt; and &lt;a href=&quot;https://js13kgames.com/entries/envisionator&quot;&gt;Envisonator&lt;/a&gt;.&lt;/p&gt;

</description>
<pubDate>Thu, 20 Sep 2018 10:01:33 +0000</pubDate>
<dc:creator>phoboslab</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://phoboslab.org/log/2018/09/underrun-making-of</dc:identifier>
</item>
<item>
<title>Idle Until Urgent</title>
<link>https://philipwalton.com/articles/idle-until-urgent/</link>
<guid isPermaLink="true" >https://philipwalton.com/articles/idle-until-urgent/</guid>
<description>&lt;p&gt;A few weeks ago I was looking at some of the performance metrics for my site. Specifically, I wanted to see how I was doing on our newest metric, &lt;a href=&quot;https://developers.google.com/web/updates/2018/05/first-input-delay&quot;&gt;first input delay&lt;/a&gt; (FID). My site is just a blog (and doesn’t run much JavaScript), so I expected to see pretty good results.&lt;/p&gt;
&lt;p&gt;Input delay that’s less than 100 milliseconds is typically &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/rail#ux&quot;&gt;perceived as instant&lt;/a&gt; by users, so the performance goal we recommend (and the numbers I was hoping to see in my analytics) is FID &amp;lt; 100ms for 99% of page loads.&lt;/p&gt;
&lt;p&gt;To my surprise, my site’s FID was 254ms at the 99th percentile. And while that’s not terrible, the perfectionist in me just couldn’t let that slide. I had to fix it!&lt;/p&gt;
&lt;p&gt;To make a long story short, without removing any functionality from my site, I was able to get my FID under 100ms at the 99th percentile. But what I’m sure is more interesting to you readers is:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;How&lt;/em&gt; I approached diagnosing the problem.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What&lt;/em&gt; specific strategies and techniques I used to fix it.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To that second point above, while I was trying to solve my issue I stumbled upon a pretty interesting performance strategy that I want to share (it’s the primary reason I’m writing this article).&lt;/p&gt;
&lt;p&gt;I’m calling the strategy: &lt;em&gt;idle until urgent&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;my-performance-problem&quot;&gt;My performance problem&lt;/h2&gt;
&lt;p&gt;First input delay (FID) is a metric that measures the time between when a user &lt;a href=&quot;https://developers.google.com/web/updates/2018/05/first-input-delay#what_counts_as_a_first_input&quot;&gt;first interacts&lt;/a&gt; with your site (for a blog like mine, that’s most likely them clicking a link) and the time when the browser is able to respond to that interaction (make a request to load the next page).&lt;/p&gt;
&lt;p&gt;The reason there might be a delay is if the browser’s main thread is busy doing something else (usually executing JavaScript code). So to diagnose a higher-than-expected FID, you should start by creating a performance trace of your site as it’s loading (with CPU and network throttling enabled) and look for individual tasks on the main thread that take a long time to execute. Then once you’ve identified those long tasks, you can try to break them up into smaller tasks.&lt;/p&gt;
&lt;p&gt;Here’s what I found when doing a performance trace of my site:&lt;/p&gt;
&lt;a href=&quot;https://philipwalton.com/static/idle-until-urget-before-1400w-efc9f3a53c.png&quot;&gt;&lt;img srcset=&quot;/static/idle-until-urget-before-1400w-efc9f3a53c.png, /static/idle-until-urget-before-9bc2ecd0b0.png 700w&quot; src=&quot;https://philipwalton.com/static/idle-until-urget-before-9bc2ecd0b0.png&quot; alt=&quot;A performance trace of my site's JavaScript while loading (with network/CPU throttling enabled)&quot;/&gt;&lt;/a&gt;A performance trace of my site's JavaScript while loading (with network/CPU throttling enabled).
&lt;p&gt;Notice, when the main script bundle is evaluated, it’s run as a single task that takes 233 milliseconds to complete.&lt;/p&gt;
&lt;a href=&quot;https://philipwalton.com/static/idle-until-urget-before-eval-1400w-7a455de908.png&quot;&gt;&lt;img srcset=&quot;/static/idle-until-urget-before-eval-1400w-7a455de908.png, /static/idle-until-urget-before-eval-1d68f2dff6.png 700w&quot; src=&quot;https://philipwalton.com/static/idle-until-urget-before-eval-1d68f2dff6.png&quot; alt=&quot;Evaluating my site's main bundle takes 233ms&quot;/&gt;&lt;/a&gt;Evaluating my site's main bundle takes 233ms.
&lt;p&gt;Some of this code is webpack boilerplate and babel polyfills, but the majority of it is from my script’s &lt;code&gt;main()&lt;/code&gt; entry function, which itself takes 183ms to complete:&lt;/p&gt;
&lt;a href=&quot;https://philipwalton.com/static/idle-until-urget-before-main-1400w-08fe4dd1c5.png&quot;&gt;&lt;img srcset=&quot;/static/idle-until-urget-before-main-1400w-08fe4dd1c5.png, /static/idle-until-urget-before-main-59f7c95e33.png 700w&quot; src=&quot;https://philipwalton.com/static/idle-until-urget-before-main-59f7c95e33.png&quot; alt=&quot;Executing my site's main() entry function takes 183ms.&quot;/&gt;&lt;/a&gt;Executing my site's &lt;code&gt;main()&lt;/code&gt; entry function takes 183ms.
&lt;p&gt;And it’s not like I’m doing anything ridiculous in my &lt;code&gt;main()&lt;/code&gt; function. I’m initializing my UI components and then running my analytics:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; main = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
  drawer.init();
  contentLoader.init();
  breakpoints.init();
  alerts.init();

  analytics.init();
};

main();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So what’s taking so long to run?&lt;/p&gt;
&lt;p&gt;Well, if you look at the tails of this flame chart, you won’t see any single functions that are clearly taking up the bulk of the time. Most individual functions are run in less than 1ms, but when you add them all up, it’s taking more than 100ms to run them in a single, synchronous call stack.&lt;/p&gt;
&lt;p&gt;This is the JavaScript equivalent of &lt;em&gt;death by a thousand cuts.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Since the problem is all these functions are being run as part of a single task, the browser has to wait until this task finishes to respond to user interaction. So clearly the solution is to break up this code into multiple tasks, but that’s a lot easier said than done.&lt;/p&gt;
&lt;p&gt;At first glance, it might seem like the obvious solution is to prioritize each of the components in my &lt;code&gt;main()&lt;/code&gt; function (they’re actually already in priority order), initialize the highest priority components right away, and then defer other component initialization to a subsequent task.&lt;/p&gt;
&lt;p&gt;While this may help some, it’s not a solution that everyone could implement, nor does it scale well to a really large site. Here’s why:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Deferring UI component initialization only helps if the component isn’t yet rendered. If it’s already rendered than deferring initialization runs the risk that the user tries to interact with it and it’s not yet ready.&lt;/li&gt;
&lt;li&gt;In many cases all UI components are either equally important or they depend on each other, so they all need to be initialized at the same time.&lt;/li&gt;
&lt;li&gt;Sometimes individual components take long enough to initialize that they’ll block the main thread even if they’re run in their own tasks.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The reality is that initializing each component in its own task is usually not sufficient and oftentimes not even possible. What’s usually needed is breaking up tasks &lt;em&gt;within&lt;/em&gt; each component being initialized.&lt;/p&gt;
&lt;h3 id=&quot;greedy-components&quot;&gt;Greedy components&lt;/h3&gt;
&lt;p&gt;A perfect example of a component that really needs to have its initialization code broken up can be illustrated by zooming closer down into this performance trace. Mid-way through the &lt;code&gt;main()&lt;/code&gt; function, you’ll see one of my components uses the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat&quot;&gt;Intl.DateTimeFormat&lt;/a&gt; API:&lt;/p&gt;
&lt;a href=&quot;https://philipwalton.com/static/idle-until-urget-before-date-time-format-1400w-c67615763f.png&quot;&gt;&lt;img srcset=&quot;/static/idle-until-urget-before-date-time-format-1400w-c67615763f.png, /static/idle-until-urget-before-date-time-format-252558f2ab.png 700w&quot; src=&quot;https://philipwalton.com/static/idle-until-urget-before-date-time-format-252558f2ab.png&quot; alt=&quot;Creating an Intl.DateTimeFormat instance took 13.47ms!&quot;/&gt;&lt;/a&gt;Creating an &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; instance took 13.47ms!
&lt;p&gt;Creating this object took 13.47 milliseconds!&lt;/p&gt;
&lt;p&gt;The thing is, the &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; instance is created in the component’s constructor, but it’s &lt;em&gt;not actually used&lt;/em&gt; until it’s needed by other components that reference it to format dates. However, this component doesn’t know when it’s going to be referenced, so it’s playing it safe and instantiating the &lt;code&gt;Int.DateTimeFormat&lt;/code&gt; object right away.&lt;/p&gt;
&lt;p&gt;But is this the right code evaluation strategy? And if not, what is?&lt;/p&gt;
&lt;h2 id=&quot;code-evaluation-strategies&quot;&gt;Code evaluation strategies&lt;/h2&gt;
&lt;p&gt;When choosing an &lt;a href=&quot;https://en.wikibooks.org/wiki/Introduction_to_Programming_Languages/Evaluation_Strategies&quot;&gt;evaluation strategy&lt;/a&gt; for potentially expensive code, most developers select one of the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Eager_evaluation&quot;&gt;Eager evaluation&lt;/a&gt;:&lt;/strong&gt; where you run your expensive code right away.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Lazy_evaluation&quot;&gt;Lazy evaluation&lt;/a&gt;:&lt;/strong&gt; where you wait until another part of your program needs the result of that expensive code, and you run it then.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;These are probably the two most popular evaluation strategies, but after my experience refactoring my site, I now think these are probably your two worst options.&lt;/p&gt;
&lt;h3 id=&quot;the-downsides-of-eager-evaluation&quot;&gt;The downsides of eager evaluation&lt;/h3&gt;
&lt;p&gt;As the performance problem on my site illustrates pretty well, eager evaluation has the downside that, if a user tries to interact with your page while the code is evaluating, the browser must wait until the code is done evaluating to respond.&lt;/p&gt;
&lt;p&gt;This is especially problematic if your page &lt;em&gt;looks&lt;/em&gt; like it’s ready to respond to user input, but then it can’t. Users will perceive your page as sluggish or maybe even completely broken.&lt;/p&gt;
&lt;p&gt;The more code you evaluate up front, the longer it will take for your page to become interactive.&lt;/p&gt;
&lt;h3 id=&quot;the-downsides-of-lazy-evaluation&quot;&gt;The downsides of lazy evaluation&lt;/h3&gt;
&lt;p&gt;If it’s bad to run all your code right away, the next most obvious solution is to wait to run it until it’s actually needed. This way you don’t run code unnecessarily, especially if it’s never actually needed by the user.&lt;/p&gt;
&lt;p&gt;Of course, the problem with waiting until the user needs the result of running that code is now you’re &lt;em&gt;guaranteeing&lt;/em&gt; that your expensive code will block user input.&lt;/p&gt;
&lt;p&gt;For some things (like loading additional content from the network), it makes sense to defer it until it’s requested by the user. But for most code you’re evaluating (e.g. reading from localStorage, processing large datasets, etc.) you definitely want it to happen &lt;em&gt;before&lt;/em&gt; the user interaction that needs it.&lt;/p&gt;
&lt;h3 id=&quot;other-options&quot;&gt;Other options&lt;/h3&gt;
&lt;p&gt;The other evaluation strategies you can choose from all take an approach somewhere in between eager and lazy. I’m not sure if the following two strategies have official names, but I’m going to call them deferred evaluation and idle evaluation:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Deferred evaluation:&lt;/strong&gt; where you schedule your code to be run in a future task, using something like &lt;code&gt;setTimeout&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Idle evaluation:&lt;/strong&gt; a type of deferred evaluation where you use an API like &lt;a href=&quot;https://developers.google.com/web/updates/2015/08/using-requestidlecallback&quot;&gt;requestIdleCallback&lt;/a&gt; to schedule your code to run.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Both of these options are usually better than eager or lazy evaluation because they’re far less likely to lead to individual long tasks that block input. This is because, while browsers cannot interrupt any single task to respond to user input (doing so would very likely break sites), they &lt;em&gt;can&lt;/em&gt; run a task in between a queue of scheduled tasks, and most browsers &lt;em&gt;do&lt;/em&gt; when that task is caused by user input. This is known as &lt;a href=&quot;https://blogs.windows.com/msedgedev/2017/06/01/input-responsiveness-event-loop-microsoft-edge/&quot;&gt;input prioritization&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To put that another way: if you ensure all your code is run in short, distinct tasks (preferably &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/user-centric-performance-metrics#long_tasks&quot;&gt;less than 50ms&lt;/a&gt;), your code will never block user input.&lt;/p&gt;
&lt;aside class=&quot;Info Info--warning&quot;&gt;&lt;p&gt;&lt;strong&gt;Important!&lt;/strong&gt; While browsers can run input callbacks ahead of queued tasks, they &lt;em&gt;cannot&lt;/em&gt; run input callbacks ahead of queued microtasks. And since promises and &lt;code&gt;async&lt;/code&gt; functions run as microtasks, converting your sync code to promise-based code will not prevent it from blocking user input!&lt;/p&gt;
&lt;p&gt;If you’re not familiar with the difference between tasks and microtasks, I highly recommend watching my colleague Jake’s excellent &lt;a href=&quot;https://youtu.be/cCOL7MC4Pl0&quot;&gt;talk on the event loop&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;Given what I just said, I could refactor my &lt;code&gt;main()&lt;/code&gt; function to use &lt;code&gt;setTimeout()&lt;/code&gt; and &lt;code&gt;requestIdleCallback()&lt;/code&gt; to break up my initialization code into separate tasks:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; main = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
  &lt;mark&gt;setTimeout&lt;/mark&gt;&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;(&lt;/span&gt;) =&amp;gt;&lt;/span&gt; drawer.init(), &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);
  &lt;mark&gt;setTimeout&lt;/mark&gt;&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;(&lt;/span&gt;) =&amp;gt;&lt;/span&gt; contentLoader.init(), &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);
  &lt;mark&gt;setTimeout&lt;/mark&gt;&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;(&lt;/span&gt;) =&amp;gt;&lt;/span&gt; breakpoints.init(), &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);
  &lt;mark&gt;setTimeout&lt;/mark&gt;&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;(&lt;/span&gt;) =&amp;gt;&lt;/span&gt; alerts.init(), &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);

  &lt;mark&gt;requestIdleCallback&lt;/mark&gt;&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;(&lt;/span&gt;) =&amp;gt;&lt;/span&gt; analytics.init());
};

main();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, while this is better than before (many small tasks vs. one long task), as I explained above it’s likely still not good enough. For example, if I defer the initialization of my UI components (specifically &lt;code&gt;contentLoader&lt;/code&gt; and &lt;code&gt;drawer&lt;/code&gt;) they’ll be less likely to block user input, but they also run the risk of not being ready when the user tries to interact with them!&lt;/p&gt;
&lt;p&gt;And while delaying my analytics with &lt;code&gt;requestIdleCallback()&lt;/code&gt; is probably a good idea, any interactions I care about before the next idle period will be missed. And if there’s not an idle period before the user leaves the page, these callbacks may never run at all!&lt;/p&gt;
&lt;p&gt;So if all evaluations strategies have downsides, which one should you pick?&lt;/p&gt;
&lt;h2 id=&quot;idle-until-urgent&quot;&gt;Idle Until Urgent&lt;/h2&gt;
&lt;p&gt;After spending a lot of time thinking about this problem, I realized that the evaluation strategy I &lt;em&gt;really&lt;/em&gt; wanted was one where my code would initially be deferred to idle periods but then run immediately as soon as it’s needed. In other words: &lt;em&gt;idle-until-urgent&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Idle-until-urgent&lt;/em&gt; sidesteps most of the downsides I described in the previous section. In the worst case, it has the exact same performance characteristics as lazy evaluation, and in the best case it doesn’t block interactivity at all because execution happens during idle periods.&lt;/p&gt;
&lt;p&gt;I should also mention that this strategy works both for single tasks (computing values idly) as well as multiple tasks (an ordered queue of tasks to be run idly). I’ll explain the single-task (idle value) variant first because it’s a bit easier to understand.&lt;/p&gt;
&lt;h3 id=&quot;idle-values&quot;&gt;Idle values&lt;/h3&gt;
&lt;p&gt;I showed above that &lt;code&gt;Int.DateTimeFormat&lt;/code&gt; objects can be pretty expensive to initialize, so if an instance isn’t needed right away, it’s better to initialize it during an idle period. Of course, as soon as it &lt;em&gt;is&lt;/em&gt; needed, you want it to exist, so this is a perfect candidate for &lt;em&gt;idle-until-urgent&lt;/em&gt; evaluation.&lt;/p&gt;
&lt;p&gt;Consider the following simplified component example that we want to refactor to use this new strategy:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyComponent&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;constructor&lt;/span&gt;() {
    addEventListener(&lt;span class=&quot;hljs-string&quot;&gt;'click'&lt;/span&gt;, () =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.handleUserClick());

    &lt;mark&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.formatter&lt;/mark&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Intl&lt;/span&gt;.DateTimeFormat(&lt;span class=&quot;hljs-string&quot;&gt;'en-US'&lt;/span&gt;, {
      &lt;span class=&quot;hljs-attr&quot;&gt;timeZone&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'America/Los_Angeles'&lt;/span&gt;,
    });
  }

  handleUserClick() {
    &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;mark&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.formatter.format&lt;/mark&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Date&lt;/span&gt;()));
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Instances of &lt;code&gt;MyComponent&lt;/code&gt; above do two things in their constructor:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Add an event listener for user interactions.&lt;/li&gt;
&lt;li&gt;Create an &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; object.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This component perfectly illustrates why you often need to split up tasks &lt;em&gt;within&lt;/em&gt; an individual component (rather than just at the component level).&lt;/p&gt;
&lt;p&gt;In this case it’s really important that the event listeners run right away, but it’s not important that the &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; instance is created until it’s needed by the event handler. Of course we don’t want to create the &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; object in the event handler because then its slowness will delay that event from running.&lt;/p&gt;
&lt;p&gt;So here’s how we could update this code to use the &lt;em&gt;idle-until-urgent&lt;/em&gt; strategy. Note, I’m making use of an &lt;code&gt;IdleValue&lt;/code&gt; helper class, which I’ll explain next:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; {IdleValue} &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'./path/to/IdleValue.mjs'&lt;/span&gt;;

&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyComponent&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;constructor&lt;/span&gt;() {
    addEventListener(&lt;span class=&quot;hljs-string&quot;&gt;'click'&lt;/span&gt;, () =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.handleUserClick());

    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.formatter = &lt;mark&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; IdleValue&lt;/mark&gt;&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;(&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Intl&lt;/span&gt;.DateTimeFormat(&lt;span class=&quot;hljs-string&quot;&gt;'en-US'&lt;/span&gt;, {
        &lt;span class=&quot;hljs-attr&quot;&gt;timeZone&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'America/Los_Angeles'&lt;/span&gt;,
      });
    });
  }

  handleUserClick() {
    &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.formatter&lt;mark&gt;.getValue()&lt;/mark&gt;.format(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Date&lt;/span&gt;()));
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As you can see, this code doesn’t look much different from the previous version, but instead of assigning &lt;code&gt;this.formatter&lt;/code&gt; to a new &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; object, I’m assigning &lt;code&gt;this.formatter&lt;/code&gt; to an &lt;code&gt;IdleValue&lt;/code&gt; object, which I pass an initialization function.&lt;/p&gt;
&lt;p&gt;The way this &lt;code&gt;IdleValue&lt;/code&gt; class works is it schedules the initialization function to be run during the next idle period. If the idle period occurs before the IdleValue instance is referenced, then no blocking occurs and the value can be returned immediately when requested. But if, on the other hand, the value is referenced &lt;em&gt;before&lt;/em&gt; the next idle period, then the scheduled idle callback is canceled and the initialization function is run immediately.&lt;/p&gt;
&lt;p&gt;Here’s the gist of how the &lt;code&gt;IdleValue&lt;/code&gt; class is implemented (note: I’ve also released this code as part of the &lt;a href=&quot;https://github.com/GoogleChromeLabs/idlize&quot;&gt;&lt;code&gt;idlize&lt;/code&gt; package&lt;/a&gt;, which includes all the helpers shown in this article):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IdleValue&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;constructor&lt;/span&gt;(init) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._init = init;
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._value;
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._idleHandle = requestIdleCallback(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._value = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._init();
    });
  }

  getValue() {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._value === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) {
      cancelIdleCallback(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._idleHandle);
      &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._value = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._init();
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._value;
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;While including the &lt;code&gt;IdleValue&lt;/code&gt; class in my example above didn’t require many changes, it did technically change the public API (&lt;code&gt;this.formatter&lt;/code&gt; vs. &lt;code&gt;this.formatter.getValue()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If you’re in a situation where you want to use the &lt;code&gt;IdleValue&lt;/code&gt; class but you can’t change your public API, you can use the &lt;code&gt;IdleValue&lt;/code&gt; class with ES2015 getters:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyComponent&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;constructor&lt;/span&gt;() {
    addEventListener(&lt;span class=&quot;hljs-string&quot;&gt;'click'&lt;/span&gt;, () =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.handleUserClick());

    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._formatter = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; IdleValue(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Intl&lt;/span&gt;.DateTimeFormat(&lt;span class=&quot;hljs-string&quot;&gt;'en-US'&lt;/span&gt;, {
        &lt;span class=&quot;hljs-attr&quot;&gt;timeZone&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'America/Los_Angeles'&lt;/span&gt;,
      });
    });
  }

  &lt;mark&gt;get formatter() {&lt;/mark&gt;&lt;mark&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._formatter.getValue();&lt;/mark&gt;&lt;mark&gt;}&lt;/mark&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Or, if you don’t mind a little abstraction, you can use the &lt;a href=&quot;https://github.com/GoogleChromeLabs/idlize/blob/master/docs/defineIdleProperty.md&quot;&gt;&lt;code&gt;defineIdleProperty()&lt;/code&gt;&lt;/a&gt; helper (which uses &lt;code&gt;Object.defineProperty()&lt;/code&gt; under the hood):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; {defineIdleProperty} &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'./path/to/defineIdleProperty.mjs'&lt;/span&gt;;

&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyComponent&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;constructor&lt;/span&gt;() {
    addEventListener(&lt;span class=&quot;hljs-string&quot;&gt;'click'&lt;/span&gt;, () =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.handleUserClick());

    &lt;mark&gt;defineIdleProperty&lt;/mark&gt;&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'formatter'&lt;/span&gt;, (&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Intl&lt;/span&gt;.DateTimeFormat(&lt;span class=&quot;hljs-string&quot;&gt;'en-US'&lt;/span&gt;, {
        &lt;span class=&quot;hljs-attr&quot;&gt;timeZone&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'America/Los_Angeles'&lt;/span&gt;,
      });
    });
  }

  &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For individual property values that may be expensive to compute, there’s really no reason not to use this strategy, especially since you can employ it without changing your API!&lt;/p&gt;
&lt;p&gt;While this example used the &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; object, it’s also probably a good candidate for any of the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Processing large sets of values.&lt;/li&gt;
&lt;li&gt;Getting a value from localStorage (or a cookie).&lt;/li&gt;
&lt;li&gt;Running &lt;code&gt;getComputedStyle()&lt;/code&gt;, &lt;code&gt;getBoundingClientRect()&lt;/code&gt;, or any other API that may require recalculating style or layout on the main thread.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;idle-task-queues&quot;&gt;Idle task queues&lt;/h3&gt;
&lt;p&gt;The above technique works pretty well for individual properties whose values can be computed with a single function, but in some cases your logic doesn’t fit into a single function, or, even if it technically could, you’d still want to break it up into smaller functions because otherwise you’d risk blocking the main thread for too long.&lt;/p&gt;
&lt;p&gt;In such cases what you really need is a queue where you can schedule multiple tasks (functions) to run when the browser has idle time. The queue will run tasks when it can, and it will pause execution of tasks when it needs to yield back to the browser (e.g. if the user is interacting).&lt;/p&gt;
&lt;p&gt;To handle this, I built an &lt;a href=&quot;https://github.com/GoogleChromeLabs/idlize&quot;&gt;&lt;code&gt;IdleQueue&lt;/code&gt;&lt;/a&gt; class, and you can use it like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; {IdleQueue} &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'./path/to/IdleQueue.mjs'&lt;/span&gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; queue = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; IdleQueue();

queue.pushTask(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Some expensive function that can run idly...&lt;/span&gt;
});

queue.pushTask(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Some other task that depends on the above&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;// expensive function having already run...&lt;/span&gt;
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;aside class=&quot;Info&quot;&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; breaking up your synchronous JavaScript code into separate tasks that can run asynchronously as part of a task queue is different from &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-javascript/code-splitting/&quot;&gt;code splitting&lt;/a&gt;, which is about breaking up large JavaScript bundles into smaller files (and is also important for improving performance).&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;As with the idly-initialized property strategy shown above, idle tasks queues also have a way to run immediately in cases where the result of their execution is needed right away (the “urgent” case).&lt;/p&gt;
&lt;p&gt;Again, this last bit is really important; not just because sometimes you need to compute something as soon as possible, but often you’re integrating with a third-party API that’s synchronous, so you need the ability to run your tasks synchronously as well if you want to be compatible.&lt;/p&gt;
&lt;p&gt;In a perfect world, all JavaScript APIs would be non-blocking, asynchronous, and composed of small chunks of code that can yield at will back to the main thread. But in the real world, we often have no choice but to be synchronous due to a legacy codebase or integrations with third-party libraries we don’t control.&lt;/p&gt;
&lt;p&gt;As I said before, this is one of the great strengths of the &lt;em&gt;idle-until-urgent&lt;/em&gt; pattern. It can be easily applied to most programs without requiring a large-scale rewrite of the architecture.&lt;/p&gt;
&lt;h3 id=&quot;guaranteeing-the-urgent&quot;&gt;Guaranteeing the urgent&lt;/h3&gt;
&lt;p&gt;I mentioned above that &lt;code&gt;requestIdleCallback()&lt;/code&gt; doesn’t come with any guarantees that the callback will ever run. And when talking to developers about &lt;code&gt;requestIdleCallback()&lt;/code&gt;, this is the primary explanation I hear for why they don’t use it. In many cases the possibility that code might not run is enough of a reason not to use it—to play it safe and keep their code synchronous (and therefore blocking).&lt;/p&gt;
&lt;p&gt;A perfect example of this is analytics code. The problem with analytics code is there are many cases where it needs to run when the page is unloading (e.g. tracking outbound link clicks, etc.), and in such cases &lt;code&gt;requestIdleCallback()&lt;/code&gt; is simply not an option because the callback would never run. And since analytics libraries don’t know when in the page lifecycle their users will call their APIs, they also tend to play it safe and run all their code synchronously (which is unfortunate since analytics code is definitely not critical to the user experience).&lt;/p&gt;
&lt;p&gt;But with the &lt;em&gt;idle-until-urgent&lt;/em&gt; pattern, there’s a simple solution to this. All we have to do is ensure the queue is run immediately whenever the page is in a state where it might soon be unloaded.&lt;/p&gt;
&lt;p&gt;If you’re familiar with the advice I give in my recent article on the &lt;a href=&quot;https://developers.google.com/web/updates/2018/07/page-lifecycle-api&quot;&gt;Page Lifecycle API&lt;/a&gt;, you’ll know that &lt;a href=&quot;https://developers.google.com/web/updates/2018/07/page-lifecycle-api#advice-hidden&quot;&gt;the last reliable callback&lt;/a&gt; developers have before a page gets terminated or discarded is the &lt;code&gt;visibilitychange&lt;/code&gt; event (as the page’s &lt;code&gt;visibilityState&lt;/code&gt; changes to hidden). And since in the hidden state the user cannot be interacting with the page, it’s a perfect time to run any queued idle tasks.&lt;/p&gt;
&lt;p&gt;In fact, if you use the &lt;code&gt;IdleQueue&lt;/code&gt; class, you can enable this ability with a simple configuration option passed to the constructor.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; queue = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; IdleQueue(&lt;mark&gt;{&lt;span class=&quot;hljs-attr&quot;&gt;ensureTasksRun&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}&lt;/mark&gt;);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For tasks like rendering, there’s no need to ensure tasks run before the page unloads, but for tasks like saving user state and sending end-of-session analytics, you’ll likely want to set this option to true.&lt;/p&gt;
&lt;aside class=&quot;Info&quot;&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; listening for the &lt;code&gt;visibilitychange&lt;/code&gt; event should be sufficient to ensure tasks run before the page is unloaded, but due to Safari bugs where &lt;a href=&quot;https://github.com/GoogleChromeLabs/page-lifecycle/issues/2&quot;&gt;the pagehide and visibilitychange events don’t always fire&lt;/a&gt; when users close a tab, you have to implement a small workaround just for Safari. This workaround &lt;a href=&quot;https://github.com/GoogleChromeLabs/idlize/blob/master/IdleQueue.mjs#L60-L69&quot;&gt;is implemented for you&lt;/a&gt; in the &lt;code&gt;IdleQueue&lt;/code&gt; class, but if you’re implementing this yourself, you’ll need to be aware of it.&lt;/p&gt;
&lt;/aside&gt;&lt;aside class=&quot;Info Info--warning&quot;&gt;&lt;p&gt;&lt;strong&gt;Warning!&lt;/strong&gt; Do not listen for the &lt;code&gt;unload&lt;/code&gt; event as a way to run the queue before the page is unloaded. The unload event is not reliable and it can hurt performance in some cases. See my &lt;a href=&quot;https://developers.google.com/web/updates/2018/07/page-lifecycle-api#the-unload-event&quot;&gt;Page Lifecycle API article&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/aside&gt;&lt;h2 id=&quot;use-cases-for-idle-until-urgent&quot;&gt;Use cases for idle-until-urgent&lt;/h2&gt;
&lt;p&gt;Any time you have potentially-expensive code you need to run, you should try to break it up into smaller tasks. And if that code isn’t needed right away but may be needed at some point in the future, it’s a perfect use case for &lt;em&gt;idle-until-urgent&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In your own code, the first thing I’d suggest to do is look at all your constructor functions, and if any of them run potentially-expensive operations, refactor them to use an &lt;a href=&quot;https://github.com/GoogleChromeLabs/idlize/blob/master/docs/IdleValue.md&quot;&gt;&lt;code&gt;IdleValue&lt;/code&gt;&lt;/a&gt; object instead.&lt;/p&gt;
&lt;p&gt;For other bits of logic that are essential but not necessarily critical to immediate user interactions, consider adding that logic to an &lt;a href=&quot;https://github.com/GoogleChromeLabs/idlize/blob/master/docs/IdleQueue.md&quot;&gt;&lt;code&gt;IdleQueue&lt;/code&gt;&lt;/a&gt;. Don’t worry, if at any time you need to run that code immediately, you can.&lt;/p&gt;
&lt;p&gt;Two specific examples that are particularly amenable to this technique (and are relevant to a large percentage of websites out there) are persisting application state (e.g. with something like Redux) and analytics.&lt;/p&gt;
&lt;aside class=&quot;Info&quot;&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; these are all use cases where the &lt;em&gt;intention&lt;/em&gt; is that tasks should run during idle periods, so it’s not a problem if they don’t run right away. If you need to handle high-priority tasks where the &lt;em&gt;intention&lt;/em&gt; is they should run as soon as possible (yet still yielding to input), then &lt;code&gt;requestIdleCallback()&lt;/code&gt; may not solve your problem.&lt;/p&gt;
&lt;p&gt;Fortunately, some of my colleagues have proposals for new web platform APIs (&lt;a href=&quot;https://discourse.wicg.io/t/shouldyield-enabling-script-to-yield-to-user-input/2881/17&quot;&gt;&lt;code&gt;shouldYield()&lt;/code&gt;&lt;/a&gt;, and a native &lt;a href=&quot;https://github.com/spanicker/main-thread-scheduling/blob/master/README.md&quot;&gt;Scheduling API&lt;/a&gt;) that should help.&lt;/p&gt;
&lt;/aside&gt;&lt;h3 id=&quot;persisting-application-state&quot;&gt;Persisting application state&lt;/h3&gt;
&lt;p&gt;Consider a Redux app that stores application state in memory but also needs to store it in persistent storage (like localStorage) so it can be reloaded the next time the user visits the page.&lt;/p&gt;
&lt;p&gt;Most Redux apps that store state in localStorage use a debounce technique roughly equivalent to this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; debounceTimeout;

&lt;span class=&quot;hljs-comment&quot;&gt;// Persist state changes to localStorage using a 1000ms debounce.&lt;/span&gt;
store.subscribe(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Clear pending writes since there are new changes to save.&lt;/span&gt;
  clearTimeout(debounceTimeout);

  &lt;span class=&quot;hljs-comment&quot;&gt;// Schedule the save with a 1000ms timeout (debounce),&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;// so frequent changes aren't saved unnecessarily.&lt;/span&gt;
  debounceTimeout = setTimeout(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; jsonData = &lt;span class=&quot;hljs-built_in&quot;&gt;JSON&lt;/span&gt;.stringify(store.getState());
    localStorage.setItem(&lt;span class=&quot;hljs-string&quot;&gt;'redux-data'&lt;/span&gt;, jsonData);
  }, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;While using a debounce technique is definitely better than nothing, it’s not a perfect solution. The problem is there’s no guarantee that when the debounced function does run, it won’t block the main thread at a time critical to the user.&lt;/p&gt;
&lt;p&gt;It’s much better to schedule the localStorage write for an idle time. You can convert the above code from a debounce strategy to an &lt;em&gt;idle-until-urgent&lt;/em&gt; strategy as follows:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; queue = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; IdleQueue();

&lt;span class=&quot;hljs-comment&quot;&gt;// Persist state changes when the browser is idle, and&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// only persist the most recent changes to avoid extra work.&lt;/span&gt;
store.subscribe(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Clear pending writes since there are new changes to save.&lt;/span&gt;
  queue.clearPendingTasks();

  &lt;span class=&quot;hljs-comment&quot;&gt;// Schedule the save to run when idle.&lt;/span&gt;
  queue.pushTask(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; jsonData = &lt;span class=&quot;hljs-built_in&quot;&gt;JSON&lt;/span&gt;.stringify(store.getState());
    localStorage.setItem(&lt;span class=&quot;hljs-string&quot;&gt;'redux-data'&lt;/span&gt;, jsonData);
  });
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And note that this strategy is definitely better than using debounce because it guarantees the state gets saved even if the user is navigating away from the page. With the debounce example, the write would likely fail in such a situation.&lt;/p&gt;
&lt;h3 id=&quot;analytics&quot;&gt;Analytics&lt;/h3&gt;
&lt;p&gt;Another perfect use case for &lt;em&gt;idle-until-urgent&lt;/em&gt; is analytics code. Here’s an example of how you can use the &lt;code&gt;IdleQueue&lt;/code&gt; class to schedule sending your analytics data in a way that ensures it &lt;em&gt;will be sent&lt;/em&gt; even if the user closes the tab or navigates away before the next idle period.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; queue = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; IdleQueue();

&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; signupBtn = &lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;hljs-string&quot;&gt;'signup'&lt;/span&gt;);
signupBtn.addEventListener(&lt;span class=&quot;hljs-string&quot;&gt;'click'&lt;/span&gt;, () =&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Instead of sending the event immediately, add it to the idle queue.&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;// The idle queue will ensure the event is sent even if the user&lt;/span&gt;
  &lt;span class=&quot;hljs-comment&quot;&gt;// closes the tab or navigates away.&lt;/span&gt;
  queue.pushTask(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {
    ga(&lt;span class=&quot;hljs-string&quot;&gt;'send'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'event'&lt;/span&gt;, {
      &lt;span class=&quot;hljs-attr&quot;&gt;eventCategory&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'Signup Button'&lt;/span&gt;,
      &lt;span class=&quot;hljs-attr&quot;&gt;eventAction&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'click'&lt;/span&gt;,
    });
  });
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In addition to ensuring the urgent, adding this task to the idle queue also ensures it won’t block any other code that’s needed to respond to the user’s click.&lt;/p&gt;
&lt;p&gt;In fact, it’s generally a good idea to run &lt;em&gt;all&lt;/em&gt; your analytics code idly, including your initialization code. And for libraries like analytics.js whose &lt;a href=&quot;https://developers.google.com/analytics/devguides/collection/analyticsjs/how-analyticsjs-works#the_ga_command_queue&quot;&gt;API is already effectively a queue&lt;/a&gt;, it’s easy to just add these commands to our &lt;code&gt;IdleQueue&lt;/code&gt; instance.&lt;/p&gt;
&lt;p&gt;For example, you can convert the last part of the &lt;a href=&quot;https://developers.google.com/analytics/devguides/collection/analyticsjs/#the_javascript_tracking_snippet&quot;&gt;default analytics.js installation snippet&lt;/a&gt; from this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;ga(&lt;span class=&quot;hljs-string&quot;&gt;'create'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'UA-XXXXX-Y'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'auto'&lt;/span&gt;);
ga(&lt;span class=&quot;hljs-string&quot;&gt;'send'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'pageview'&lt;/span&gt;);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Into this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; queue = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; IdleQueue();

queue.pushTask(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; ga(&lt;span class=&quot;hljs-string&quot;&gt;'create'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'UA-XXXXX-Y'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'auto'&lt;/span&gt;));
queue.pushTask(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; ga(&lt;span class=&quot;hljs-string&quot;&gt;'send'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'pageview'&lt;/span&gt;));
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(You could also just create a wrapper around the &lt;code&gt;ga()&lt;/code&gt; function that automatically queues commands, which is &lt;a href=&quot;https://github.com/philipwalton/blog/blob/0670d46/assets/javascript/analytics.js#L114-L127&quot;&gt;what I did&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;browser-support-for-requestidlecallback&quot;&gt;Browser support for requestIdleCallback&lt;/h2&gt;
&lt;p&gt;As of this writing, only Chrome and Firefox support &lt;code&gt;requestIdleCallback()&lt;/code&gt;. And while a true polyfill isn’t really possible (only the browser can know when it’s idle), it’s quite easy to write a fallback to &lt;code&gt;setTimeout&lt;/code&gt; (all the helper classes and methods mentioned here &lt;a href=&quot;https://github.com/GoogleChromeLabs/idlize/blob/master/docs/idle-callback-polyfills.md&quot;&gt;use this fallback&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;And even in browsers that don’t support &lt;code&gt;requestIdleCallback()&lt;/code&gt; natively, the fallback to &lt;code&gt;setTimeout&lt;/code&gt; is definitely still better than not using this strategy because browsers can still do input prioritization ahead of tasks queued via &lt;code&gt;setTimeout()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;how-much-does-this-actually-improve-performance%3F&quot;&gt;How much does this actually improve performance?&lt;/h2&gt;
&lt;p&gt;At the beginning of this article I mentioned I came up with this strategy as I was trying to improve my website’s FID value. I was trying to split up all the code that ran as soon as my main bundle was loaded, but I also needed to ensure my site continued to work with some third-party libraries that only have synchronous APIs (e.g. analytics.js).&lt;/p&gt;
&lt;p&gt;The trace I showed before implementing &lt;em&gt;idle-until-urgent&lt;/em&gt; had a single, 233ms task that contained all my initialization code. After implementing the techniques I described here, you can see I have multiple, much shorter tasks. In fact, the longest one is now only 37ms!&lt;/p&gt;
&lt;a href=&quot;https://philipwalton.com/static/idle-until-urget-after-1400w-d526f6cca8.png&quot;&gt;&lt;img srcset=&quot;/static/idle-until-urget-after-1400w-d526f6cca8.png, /static/idle-until-urget-after-4789aca119.png 700w&quot; src=&quot;https://philipwalton.com/static/idle-until-urget-after-4789aca119.png&quot; alt=&quot;A performance trace of my site's JavaScript showing many short tasks&quot;/&gt;&lt;/a&gt;A performance trace of my site's JavaScript showing many short tasks.
&lt;p&gt;A really important point to emphasize here is that the same amount of work is being done as before, it’s just now spread out over multiple tasks and run during idle periods.&lt;/p&gt;
&lt;p&gt;And since no single task is greater than 50ms, none of them affect my time to interactive (TTI), which is great for my lighthouse score:&lt;/p&gt;
&lt;a href=&quot;https://philipwalton.com/static/lighthouse-report-1400w-1136c250ac.png&quot;&gt;&lt;img srcset=&quot;/static/lighthouse-report-1400w-1136c250ac.png, /static/lighthouse-report-4721b091da.png 700w&quot; src=&quot;https://philipwalton.com/static/lighthouse-report-4721b091da.png&quot; alt=&quot;My lighthouse report after implementing idle-until-urget - 100s across the board!&quot;/&gt;&lt;/a&gt;My lighthouse report after implementing &lt;em&gt;idle-until-urget&lt;/em&gt;.
&lt;p&gt;Lastly, since the point of all this work was to improve my FID, after releasing these changes to production and looking at the results, I was thrilled to discover &lt;em&gt;a 67% reduction in FID values at the 99th percentile!&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;th&gt;Code version&lt;/th&gt;
&lt;th&gt;FID (p99)&lt;/th&gt;
&lt;th&gt;FID (p95)&lt;/th&gt;
&lt;th&gt;FID (p50)&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Before &lt;em&gt;idle-until-urgent&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;254ms&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;20ms&lt;/td&gt;
&lt;td&gt;3ms&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;After &lt;em&gt;Idle-until-urgent&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;85ms&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;16ms&lt;/td&gt;
&lt;td&gt;3ms&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;In a perfect world, none of our sites would ever block the main thread unnecessarily. We’d all be using web workers to do our non-UI work, and we’d have &lt;a href=&quot;https://discourse.wicg.io/t/shouldyield-enabling-script-to-yield-to-user-input/2881/17&quot;&gt;&lt;code&gt;shouldYield()&lt;/code&gt;&lt;/a&gt; and a native &lt;a href=&quot;https://github.com/spanicker/main-thread-scheduling/blob/master/README.md&quot;&gt;Scheduling API&lt;/a&gt;) built into the browser.&lt;/p&gt;
&lt;p&gt;But in our current world, we web developers often have no choice but to run non-UI code on the main thread, which leads to unresponsiveness and jank.&lt;/p&gt;
&lt;p&gt;Hopefully this article has convinced you of the need to break up our long-running JavaScript tasks. And since &lt;em&gt;idle-until-urgent&lt;/em&gt; can turn a synchronous-looking API into something that actually evaluates code in idle periods, it’s a great solution that works with the libraries we all know and use today.&lt;/p&gt;
</description>
<pubDate>Thu, 20 Sep 2018 09:16:43 +0000</pubDate>
<dc:creator>bootslebaron</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://philipwalton.com/articles/idle-until-urgent/</dc:identifier>
</item>
<item>
<title>New York inmate&amp;#039;s golf drawings lead to exoneration in murder</title>
<link>https://www.bbc.co.uk/news/world-us-canada-45582610</link>
<guid isPermaLink="true" >https://www.bbc.co.uk/news/world-us-canada-45582610</guid>
<description>&lt;figure class=&quot;media-landscape has-caption full-width lead&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                &lt;img class=&quot;js-image-replace&quot; alt=&quot;Dixon and his artwork&quot; src=&quot;https://ichef.bbci.co.uk/news/320/cpsprodpb/F564/production/_103502826_capturhwe565473e.jpg&quot; width=&quot;976&quot; height=&quot;549&quot;/&gt;&lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Georgetown University&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Valentino Dixon served most of his sentence in New York's notorious Attica Correctional Facility
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;story-body__introduction&quot;&gt;A US convict whose talent for art caught the eye of a prison warden, ultimately leading to a review of his case, has been exonerated of murder.&lt;/p&gt;&lt;p&gt;Valentino Dixon's colour pencil drawings of golf courses were featured in Golf Digest - prompting advocates to uncover flawed evidence in the case.&lt;/p&gt;&lt;p&gt;Mr Dixon, 48, had maintained his innocence during 27 years behind bars for a shooting in Buffalo, New York.&lt;/p&gt;&lt;p&gt;He walked free after another man formally confessed to the murder.&lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;The golf drawings&lt;/h2&gt;&lt;p&gt;Mr Dixon had served nearly two decades at a notorious prison in upstate New York when his artistic flair attracted the notice of correctional authorities.&lt;/p&gt;&lt;p&gt;The warden gave him a photograph of the famed Augusta National's 12th hole in the US state of Georgia, and asked if he would draw it for him.&lt;/p&gt;&lt;figure class=&quot;media-portrait no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Golf Digest&lt;/span&gt;
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;p&gt;&quot;After 19 years in Attica Correctional Facility, the look of a golf hole spoke to me,&quot; said Mr Dixon.&lt;/p&gt;&lt;p&gt;&quot;It seemed peaceful. I imagine playing it would be a lot like fishing.&quot;&lt;/p&gt;&lt;ul class=&quot;story-body__unordered-list&quot;&gt;&lt;li class=&quot;story-body__list-item&quot;&gt;&lt;a href=&quot;https://www.bbc.co.uk/news/world-us-canada-45586653&quot; class=&quot;story-body__link&quot;&gt;Surprising ways prisoners have won freedom&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Using colouring pencils, he began to create meticulous, lush drawings of various links and fairways.&lt;/p&gt;&lt;p&gt;&quot;I didn't know anything about golf. I'm from the 'hood,&quot; he told local media.&lt;/p&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Golf Digest&lt;/span&gt;
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;p&gt;His sketches impressed the editors at Golf Digest, which featured his artwork and &lt;a href=&quot;https://www.golfdigest.com/story/golf-saved-my-life-valentino-dixon&quot; class=&quot;story-body__link-external&quot;&gt;a profile of the prisoner in 2012&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&quot;Maybe one day I'll get to play the game I've only imagined,&quot; Mr Dixon said in the article, describing how he drew landscapes he has never seen.&lt;/p&gt;&lt;p&gt;The magazine's coverage spurred wrongful-conviction advocates to look into the matter. Georgetown University law students championed his case.&lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;The conviction&lt;/h2&gt;&lt;p&gt;Mr Dixon was handed a minimum 38-year-to-life sentence for killing 17-year-old Torriano Jackson one night in August 1991, after an argument over a girl.&lt;/p&gt;&lt;p&gt;He acknowledged being at the crime scene, but said he was at a nearby shop buying beer when the gunshots rang out.&lt;/p&gt;&lt;p&gt;Mr Dixon said multiple witnesses could have testified he did not fire the gun.&lt;/p&gt;&lt;p&gt;But his trial lawyer did not call any of them as several had been accused of perjury.&lt;/p&gt;&lt;p&gt;Unusually, the investigating homicide detective did not testify during the trial either.&lt;/p&gt;&lt;p&gt;But a more serious flaw in the case was uncovered by &lt;a href=&quot;https://prisonsandjustice.georgetown.edu/&quot; class=&quot;story-body__link-external&quot;&gt;Georgetown University's Prisons and Justice Initiative&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Prosecutors had omitted to reveal to Mr Dixon's defence attorney that a gunpowder test on his client's clothes had come back negative.&lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;The real killer&lt;/h2&gt;&lt;p&gt;Perhaps even more egregiously, another man, Lamarr Scott, admitted to local media only days after the murder that he shot Torriano Jackson.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.wgrz.com/article/news/local/wrongfully-convicted-valentino-dixon-exonerated-after-27-years-in-prison/71-595938252&quot; class=&quot;story-body__link-external&quot;&gt;Scott told a WGRZ-TV reporter&lt;/a&gt;: &quot;I don't want my friend [Mr Dixon] to take the rap for something that I did.&quot;&lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Georgetown University&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Georgetown University students who worked on the case greeted Mr Dixon upon his release
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;But he was never arrested. The victim's brother said he saw Mr Dixon open fire.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://buffalonews.com/2018/09/19/man-who-repeatedly-confessed-faces-charges-in-1991-buffalo-killing/&quot; class=&quot;story-body__link-external&quot;&gt;According to the Buffalo News&lt;/a&gt;, prosecutors conceded that Scott had been admitting his guilt in the case for a long time.&lt;/p&gt;&lt;p&gt;&quot;Mr Scott has been confessing to this crime since 12 August 1991,&quot; Assistant District Attorney Sara Dee told the court. &lt;/p&gt;&lt;p&gt;&quot;He has confessed to this crime in excess of 10 times.&quot;&lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;Exoneration&lt;/h2&gt;&lt;p&gt;Lamarr Scott - who is currently in jail for a separate attack - finally had the chance to formally confess to the crime on Wednesday.&lt;/p&gt;&lt;p&gt;Hours later, Mr Dixon was released. &lt;/p&gt;&lt;p&gt;&quot;I grabbed the gun,&quot; Scott, now 46, told the courtroom in Erie County, New York. &lt;/p&gt;&lt;p&gt;&quot;I pulled the trigger and all the bullets came out. Unfortunately, Torriano ended up dying.&quot;&lt;/p&gt;&lt;p&gt;It was Erie County District Attorney John Flynn - in the job less than a year - who ordered a review of the case. &lt;/p&gt;&lt;p&gt;But despite Mr Dixon's exoneration, prosecutors say he did provide the murder weapon, which they described as a machine gun.&lt;/p&gt;&lt;p&gt;They also said he was an &quot;up-and-coming drug dealer&quot; in Buffalo at the time of his arrest.&lt;/p&gt;&lt;p&gt;&quot;Mr Dixon is innocent of the shooting and of the murder for what he was found guilty of, but Mr Dixon brought the gun to the fight,&quot; said the district attorney.&lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;What next for Valentino Dixon?&lt;/h2&gt;&lt;p&gt;&quot;It's the greatest feeling in the world,&quot; he said as he walked a free man from court in Buffalo, New York, on Wednesday.&lt;/p&gt;&lt;p&gt;He was greeted outside by his daughter, who was a baby when he was jailed. &lt;/p&gt;&lt;p&gt;The 27-year-old brought along her own 14-month-old twins.&lt;/p&gt;&lt;p&gt;Mr Dixon says he hopes to keep up his illustrations, and even visit a golf course in real life someday.&lt;/p&gt;&lt;p&gt;&quot;With his mind and body intact, Dixon hopefully has some good years ahead,&quot; &lt;a href=&quot;https://www.golfdigest.com/story/for-valentino-dixon-a-wrong-righted-murder-charge-vacated-by-court-after-serving-27-years-in-prison&quot; class=&quot;story-body__link-external&quot;&gt;Golf Digest wrote on Wednesday&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;&quot;Maybe he'll even take up golf.&quot;&lt;/p&gt;&lt;figure class=&quot;media-landscape no-caption body-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;You may also like:&lt;/h2&gt;</description>
<pubDate>Thu, 20 Sep 2018 09:11:42 +0000</pubDate>
<dc:creator>gadders</dc:creator>
<og:title>US inmate's golf drawings lead to freedom</og:title>
<og:type>article</og:type>
<og:description>Valentino Dixon, whose art featured in a golf magazine, is a free man after 27 years behind bars.</og:description>
<og:url>https://www.bbc.com/news/world-us-canada-45582610</og:url>
<og:image>https://ichef.bbci.co.uk/news/1024/branded_news/F564/production/_103502826_capturhwe565473e.jpg</og:image>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bbc.co.uk/news/world-us-canada-45582610</dc:identifier>
</item>
</channel>
</rss>